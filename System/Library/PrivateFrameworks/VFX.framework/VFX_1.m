uint64_t sub_1B180AFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint32x2_t v8;

  if (*(_DWORD *)(a1 + 120) != 2)
    return 1;
  v8 = vcvt_u32_f32(vrnda_f32(COERCE_FLOAT32X2_T(sub_1B18097E8(a1, a2, a3, a4, a5, a6, a7, a8))));
  if (v8.i32[0] <= (unsigned __int32)v8.i32[1])
    return v8.i32[1] / (unsigned __int32)v8.i32[0];
  else
    return v8.i32[0] / (unsigned __int32)v8.i32[1];
}

uint64_t sub_1B180B014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  return *(unsigned int *)(a1 + 120);
}

void sub_1B180B05C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  *(_DWORD *)(a1 + 120) = a2;
}

BOOL sub_1B180B0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  return (*(_DWORD *)(a1 + 120) & 0xFFFFFFFC) == 4;
}

void sub_1B180B0FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64x2_t v15;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"image");
  }
  if (*(_DWORD *)(a1 + 120) != 2)
  {
    v15 = vcvtq_u64_f64(vcvtq_f64_f32(vrnda_f32(COERCE_FLOAT32X2_T(sub_1B18097E8(a1, a2, a3, a4, a5, a6, a7, a8)))));
    if (v15.i64[1] * v15.i64[0])
    {
      if (!(v15.i64[0] % (unint64_t)v15.i64[1]))
        *(_DWORD *)(a1 + 120) = 2;
    }
  }
}

void sub_1B180B1A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  unint64_t v16;
  unint64_t v17;
  int v19;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"image");
  }
  if ((*(_DWORD *)(a1 + 120) - 3) >= 5)
  {
    v15 = sub_1B18097E8(a1, a2, a3, a4, a5, a6, a7, a8);
    v16 = vcvtas_u32_f32(*(float *)&v15);
    v17 = vcvtas_u32_f32(*((float *)&v15 + 1));
    if (*(float *)&v15 == (float)v16 && *((float *)&v15 + 1) == (float)v17)
    {
      if (6 * v17 == v16)
      {
        v19 = 4;
      }
      else
      {
        if (6 * v16 != v17)
          return;
        v19 = 5;
      }
      *(_DWORD *)(a1 + 120) = v19;
    }
  }
}

void sub_1B180B26C(unsigned int a1, uint64_t a2, uint64_t a3, size_t a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *__src;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  char *__dst;
  unint64_t v41;
  uint64_t v42;

  v10 = a2;
  if (a1 == 5)
  {
    v11 = 0;
    v12 = a3 * a2;
    do
    {
      (*(void (**)(uint64_t, _QWORD, uint64_t))(a7 + 16))(a7, v11++, a6);
      a6 += v12;
    }
    while (v11 != 6);
    return;
  }
  v15 = a1;
  __dst = (char *)malloc_type_malloc(a4 * a2, 0x3D6689DFuLL);
  if (v15 <= 7 && ((1 << v15) & 0xD0) != 0)
  {
    v22 = 0;
    __src = (char *)(a6 + a5 * (v10 - 1 + v10) + a3 * (3 * v10 + v10 - 1));
    v38 = a6;
    v37 = a3 * v10;
    v42 = v10;
    v39 = v15;
    while (1)
    {
      v41 = v22;
      if (v15 == 4)
      {
        v23 = 0;
        v24 = v22;
        if (v10)
          goto LABEL_20;
      }
      else
      {
        if (v15 == 7)
        {
          v23 = 1;
          v24 = 2;
          switch(v22)
          {
            case 0uLL:
              goto LABEL_19;
            case 1uLL:
              v24 = 0;
              v23 = 1;
              if (v10)
                goto LABEL_20;
              goto LABEL_22;
            case 2uLL:
              v23 = 0;
              goto LABEL_27;
            case 3uLL:
              v23 = 2;
              goto LABEL_27;
            case 4uLL:
              v23 = 1;
LABEL_27:
              v24 = 1;
              if (!v10)
                goto LABEL_22;
              goto LABEL_20;
            case 5uLL:
              if (a5)
              {
                if (v10)
                {
                  v28 = 0;
                  v29 = __dst;
                  v30 = __src;
                  v36 = a7;
                  do
                  {
                    v31 = v29;
                    v32 = v42;
                    v33 = v30;
                    do
                    {
                      memcpy(v31, v33, a5);
                      v33 -= a5;
                      v31 += a5;
                      --v32;
                    }
                    while (v32);
                    ++v28;
                    v30 -= a3;
                    v29 += a4;
                    a7 = v36;
                  }
                  while (v28 != v42);
                }
              }
              else
              {
                sub_1B17C4408(16, (uint64_t)CFSTR("Error: Cannot support rotation layout for compressed texture"), v16, v17, v18, v19, v20, v21, v34);
              }
              goto LABEL_22;
            default:
              goto LABEL_18;
          }
        }
        if (v22 >= 6)
        {
LABEL_18:
          v23 = 0;
          v24 = 0;
LABEL_19:
          if (!v10)
            goto LABEL_22;
LABEL_20:
          v25 = (char *)(v38 + v24 * a4 + v37 * v23);
          v26 = __dst;
          v27 = v42;
          do
          {
            memcpy(v26, v25, a4);
            v26 += a4;
            v25 += a3;
            --v27;
          }
          while (v27);
          goto LABEL_22;
        }
        v23 = qword_1B2246458[v22];
        v24 = qword_1B2246488[v22];
        if (v10)
          goto LABEL_20;
      }
LABEL_22:
      (*(void (**)(uint64_t, _QWORD, char *))(a7 + 16))(a7, v41, __dst);
      v22 = v41 + 1;
      v10 = v42;
      v15 = v39;
      if (v41 == 5)
        goto LABEL_38;
    }
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unknown cubemap image type"), v16, v17, v18, v19, v20, v21, v34);
LABEL_38:
  free(__dst);
}

void sub_1B180B534(int a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v10;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t i;
  uint64_t v22;

  if (a1 == 2)
  {
    v10 = (char *)a7;
    v15 = (char *)malloc_type_malloc(a5 * a2, 0xCCAEA4D2uLL);
    v16 = a2;
    v17 = v15;
    if (a3)
    {
      v18 = 0;
      v22 = a6 * a2;
      do
      {
        v19 = v10;
        v20 = v17;
        for (i = v16; i; --i)
        {
          memcpy(v20, v19, a5);
          v20 += a5;
          v19 += a4;
        }
        (*(void (**)(uint64_t, _QWORD, char *))(a8 + 16))(a8, v18++, v17);
        v10 += v22;
        v16 = a2;
      }
      while (v18 != a3);
    }
    free(v17);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unknown Texture3D image type"), a3, a4, a5, a6, a7, a8, a9);
  }
}

const void *sub_1B180B630(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
  v9 = sub_1B18FEB10();
  return sub_1B18FEB6C(v9, a1, v10, v11, v12, v13, v14, v15);
}

void sub_1B180B67C(const void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
    if (a2)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v10 = sub_1B18FEB10();
  sub_1B18FEEA8(v10, a2, a1, v11, v12, v13, v14, v15);
}

uint64_t sub_1B180B6F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"image");
  v9 = *(unsigned __int8 *)(a1 + 116);
  if ((v9 & 0x20) == 0)
  {
    if (*(_DWORD *)(a1 + 96) == 5)
    {
      v10 = v9 | 0x10;
    }
    else
    {
      sub_1B18097E8(a1, a2, a3, a4, a5, a6, a7, a8);
      v10 = *(unsigned __int8 *)(a1 + 116);
    }
    v9 = v10 | 0x20;
    *(_BYTE *)(a1 + 116) = v9;
  }
  return (v9 >> 4) & 1;
}

uint64_t sub_1B180B770(uint64_t a1, _BYTE *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const __CFArray *v13;
  const void *ValueAtIndex;
  CFTypeID v15;

  result = sub_1B1809424(a1);
  if (result)
  {
    v11 = result;
    if (!a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v5, v6, v7, v8, v9, v10, (uint64_t)"image");
    v12 = *(_DWORD *)(a1 + 120);
    if ((v12 - 3) > 4)
    {
      v13 = *(const __CFArray **)(v11 + 32);
    }
    else
    {
      v13 = *(const __CFArray **)(v11 + 32);
      if ((v12 & 0xFFFFFFFC) != 4)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v13, 0);
        v15 = CFGetTypeID(ValueAtIndex);
        if (v15 != CFArrayGetTypeID())
        {
          result = CFArrayGetCount(*(CFArrayRef *)(v11 + 32)) / 6;
          if (!a2)
            return result;
LABEL_10:
          *a2 = 1;
          return result;
        }
        v13 = (const __CFArray *)ValueAtIndex;
      }
    }
    result = CFArrayGetCount(v13);
    if (!a2)
      return result;
    goto LABEL_10;
  }
  return result;
}

unsigned int *sub_1B180B84C(uint64_t a1)
{
  unsigned int *result;

  result = (unsigned int *)sub_1B1809424(a1);
  if (result)
    return (unsigned int *)*result;
  return result;
}

id sub_1B180B86C(uint64_t a1)
{
  CFNumberRef v2;
  __CFNotificationCenter *LocalCenter;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const void *v13;
  uint64_t valuePtr;

  valuePtr = a1;
  v2 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCFXNotificationImageWillDie"), v2, 0, 1u);
  CFRelease(v2);
  sub_1B180AEF8(valuePtr);
  v11 = valuePtr;
  v12 = *(const void **)(valuePtr + 88);
  if (v12)
  {
    CFRelease(v12);
    v11 = valuePtr;
    *(_QWORD *)(valuePtr + 88) = 0;
  }
  v13 = *(const void **)(v11 + 64);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(valuePtr + 64) = 0;
  }
  return sub_1B193E38C(a1, v4, v5, v6, v7, v8, v9, v10);
}

CFStringRef sub_1B180B910(uint64_t a1)
{
  unsigned int v2;
  BOOL v3;
  int v4;
  const __CFAllocator *v6;
  const __CFAllocator *v8;

  v2 = *(_DWORD *)(a1 + 96);
  v3 = v2 > 4;
  v4 = (1 << v2) & 0x16;
  if (v3 || v4 == 0)
  {
    v8 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v8, 0, CFSTR("<CFXImage %p src:%p [%fx%f]>"), a1, *(_QWORD *)(a1 + 88), COERCE_FLOAT(*(_QWORD *)(a1 + 104)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 104))));
  }
  else
  {
    v6 = CFGetAllocator((CFTypeRef)a1);
    return CFStringCreateWithFormat(v6, 0, CFSTR("<CFXImage %p src:%@ [%fx%f]>"), a1, *(_QWORD *)(a1 + 88), COERCE_FLOAT(*(_QWORD *)(a1 + 104)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 104))));
  }
}

__CFArray *sub_1B180B9B0(uint64_t a1)
{
  __CFArray *Mutable;
  int v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  const CFDictionaryKeyCallBacks *v20;
  const CFDictionaryValueCallBacks *v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  __CFDictionary *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  __CFDictionary *v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  __CFDictionary *v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  char v39;
  char *v40;
  int v41;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = *(_DWORD *)(a1 + 96);
  if (v3 == 1)
  {
    v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v7 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v4, CFSTR("name"), CFSTR("url"));
    CFDictionarySetValue(v4, CFSTR("type"), v5);
    CFDictionarySetValue(v4, CFSTR("address"), v7);
    CFDictionarySetValue(v4, CFSTR("semantic"), v6);
    CFArrayAppendValue(Mutable, v4);
    CFRelease(v6);
    CFRelease(v4);
    CFRelease(v7);
    CFRelease(v5);
    v3 = *(_DWORD *)(a1 + 96);
  }
  if (v3 == 2)
  {
    v8 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v11 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v8, CFSTR("name"), CFSTR("data"));
    CFDictionarySetValue(v8, CFSTR("type"), v9);
    CFDictionarySetValue(v8, CFSTR("address"), v11);
    CFDictionarySetValue(v8, CFSTR("semantic"), v10);
    CFArrayAppendValue(Mutable, v8);
    CFRelease(v10);
    CFRelease(v8);
    CFRelease(v11);
    CFRelease(v9);
    v3 = *(_DWORD *)(a1 + 96);
  }
  if (v3 == 3)
  {
    v12 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v15 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v12, CFSTR("name"), CFSTR("cgImage"));
    CFDictionarySetValue(v12, CFSTR("type"), v13);
    CFDictionarySetValue(v12, CFSTR("address"), v15);
    CFDictionarySetValue(v12, CFSTR("semantic"), v14);
    CFArrayAppendValue(Mutable, v12);
    CFRelease(v14);
    CFRelease(v12);
    CFRelease(v15);
    CFRelease(v13);
    v3 = *(_DWORD *)(a1 + 96);
  }
  if (v3 == 4)
  {
    v16 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v41 = 2;
    valuePtr = 5;
    v40 = (char *)(a1 + 88);
    v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
    v19 = CFNumberCreate(0, kCFNumberLongType, &v40);
    CFDictionarySetValue(v16, CFSTR("name"), CFSTR("clientImage"));
    CFDictionarySetValue(v16, CFSTR("type"), v17);
    CFDictionarySetValue(v16, CFSTR("address"), v19);
    CFDictionarySetValue(v16, CFSTR("semantic"), v18);
    CFArrayAppendValue(Mutable, v16);
    CFRelease(v18);
    CFRelease(v16);
    CFRelease(v19);
    CFRelease(v17);
  }
  v20 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v21 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v22 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v41 = 2;
  valuePtr = 5;
  v40 = (char *)(a1 + 64);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v25 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v22, CFSTR("name"), CFSTR("bitmap"));
  CFDictionarySetValue(v22, CFSTR("type"), v23);
  CFDictionarySetValue(v22, CFSTR("address"), v25);
  CFDictionarySetValue(v22, CFSTR("semantic"), v24);
  CFArrayAppendValue(Mutable, v22);
  CFRelease(v24);
  CFRelease(v22);
  CFRelease(v25);
  CFRelease(v23);
  v39 = *(_BYTE *)(a1 + 116) & 1;
  v26 = CFDictionaryCreateMutable(0, 4, v20, v21);
  v41 = 0;
  valuePtr = 3;
  v40 = &v39;
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v29 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v26, CFSTR("name"), CFSTR("hasAlpha"));
  CFDictionarySetValue(v26, CFSTR("type"), v27);
  CFDictionarySetValue(v26, CFSTR("address"), v29);
  CFDictionarySetValue(v26, CFSTR("semantic"), v28);
  CFArrayAppendValue(Mutable, v26);
  CFRelease(v28);
  CFRelease(v26);
  CFRelease(v29);
  CFRelease(v27);
  v30 = CFDictionaryCreateMutable(0, 4, v20, v21);
  v41 = 0;
  valuePtr = 7;
  v40 = (char *)(a1 + 104);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v33 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v30, CFSTR("name"), CFSTR("size"));
  CFDictionarySetValue(v30, CFSTR("type"), v31);
  CFDictionarySetValue(v30, CFSTR("address"), v33);
  CFDictionarySetValue(v30, CFSTR("semantic"), v32);
  CFArrayAppendValue(Mutable, v30);
  CFRelease(v32);
  CFRelease(v30);
  CFRelease(v33);
  CFRelease(v31);
  v34 = CFDictionaryCreateMutable(0, 4, v20, v21);
  v41 = 0;
  valuePtr = 2;
  v40 = (char *)(a1 + 120);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &v41);
  v37 = CFNumberCreate(0, kCFNumberLongType, &v40);
  CFDictionarySetValue(v34, CFSTR("name"), CFSTR("type"));
  CFDictionarySetValue(v34, CFSTR("type"), v35);
  CFDictionarySetValue(v34, CFSTR("address"), v37);
  CFDictionarySetValue(v34, CFSTR("semantic"), v36);
  CFArrayAppendValue(Mutable, v34);
  CFRelease(v36);
  CFRelease(v34);
  CFRelease(v37);
  CFRelease(v35);
  return Mutable;
}

uint64_t sub_1B180C1AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CFX::RG::Resource *v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[10];
  _OWORD v25[10];

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65718);
  if ((v9 & 1) == 0)
  {
    v22 = a2;
    v23 = a3;
    v21 = __cxa_guard_acquire(&qword_1EEF65718);
    v8 = &unk_1EEF65000;
    a2 = v22;
    a3 = v23;
    if (v21)
    {
      byte_1EEF65710 = 1;
      __cxa_guard_release(&qword_1EEF65718);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v22;
      a3 = v23;
    }
  }
  if (v8[1808])
    v10 = 0x783DB8AC31EF5870;
  else
    v10 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v10, 0);
  *(_QWORD *)a1 = &off_1E63CF010;
  v11 = *(_OWORD *)(a5 + 16);
  v12 = *(_OWORD *)(a5 + 48);
  *(_OWORD *)(a1 + 392) = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 408) = v12;
  *(_OWORD *)(a1 + 376) = v11;
  v13 = *(_OWORD *)(a5 + 64);
  v14 = *(_OWORD *)(a5 + 80);
  v15 = *(_OWORD *)(a5 + 112);
  *(_OWORD *)(a1 + 456) = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 472) = v15;
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 440) = v14;
  v16 = *(_OWORD *)(a5 + 128);
  v17 = *(_OWORD *)(a5 + 144);
  v18 = *(_OWORD *)(a5 + 160);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a5 + 176);
  *(_OWORD *)(a1 + 504) = v17;
  *(_OWORD *)(a1 + 520) = v18;
  *(_OWORD *)(a1 + 488) = v16;
  *(_OWORD *)(a1 + 552) = 0u;
  CFX::RG::TextureDescriptorReference::withSizeFactor((_OWORD *)(a5 + 24), 0.5, (float *)v25);
  v24[6] = v25[6];
  v24[7] = v25[7];
  v24[8] = v25[8];
  v24[9] = v25[9];
  v24[2] = v25[2];
  v24[3] = v25[3];
  v24[4] = v25[4];
  v24[5] = v25[5];
  v24[0] = v25[0];
  v24[1] = v25[1];
  v19 = sub_1B17A34D0(a4, (uint64_t)"DOUGHNUT_BOKEH_OUTPUT", v24);
  *(_QWORD *)(a1 + 560) = v19;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v19);
  return a1;
}

void sub_1B180C310(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B180C324(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  char v49;

  v10 = sub_1B186CFA8(a1[47], a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B1864E3C((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  v26 = sub_1B18EBF40(v18, v19, v20, v21, v22, v23, v24, v25);
  v49 = v26;
  v27 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v27 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v26)))) ^ ((0x9DDFEA08EB382D69 * (v27 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v26)))) >> 47));
  v29 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v28);
  a1[68] = v29;
  if (!v29)
  {
    a1[68] = (uint64_t)sub_1B180C434(*(CFX::CrossFrameResourceManager **)(a2 + 32), v28);
    v37 = (void *)sub_1B1813BC4(a1[46], v30, v31, v32, v33, v34, v35, v36);
    v41 = (void *)objc_msgSend_resourceManager(v37, v38, v39, v40);
    v42 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v42, v43, (uint64_t)&v49, 53, CFSTR("mask_enabled"));
    v44 = a1[68];
    v46 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v41, v45, (uint64_t)CFSTR("doughnut_bokeh"), (uint64_t)v42);
    v47 = *(void **)(v44 + 16);
    if (v47 != (void *)v46)
    {
      v48 = v46;
      if (v47)

      *(_QWORD *)(v44 + 16) = v48;
    }

  }
}

_QWORD *sub_1B180C434(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CEFF0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B180C4A8(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id Texture;
  id v38;
  const char *v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  float v53;
  double v54;
  float v55;

  v10 = *a3;
  v11 = sub_1B186CFA8(*(_QWORD *)(a1 + 376), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = sub_1B1864E3C((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
  v27 = v19;
  if (v19)
    v28 = sub_1B18E8CD4(v19, v20, v21, v22, v23, v24, v25, v26);
  else
    v28 = 0.0;
  v29 = v28 / 1000.0;
  v53 = v29;
  v54 = sub_1B18EBEA4(v27, v20, v21, v22, v23, v24, v25, v26);
  v55 = sub_1B18E9680(v27, v30, v31, v32, v33, v34, v35, v36);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 552));
  v38 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 560));
  objc_msgSend_setBytes_length_atIndex_(v10, v39, (uint64_t)&v53, 24, 0);
  objc_msgSend_setTexture_atIndex_(v10, v40, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v10, v41, (uint64_t)v38, 1);
  v48 = *(_QWORD *)(a1 + 544);
  v49 = *(_QWORD *)(v48 + 16);
  if (!v49)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v42, v43, v44, v45, v46, v47, (uint64_t)"_ptr != NULL");
    v49 = *(_QWORD *)(v48 + 16);
  }
  v50 = sub_1B18FD774(v49);
  return objc_msgSend_dispatch_onTexture2D_(v10, v51, v50, (uint64_t)v38);
}

uint64_t *sub_1B180C5C4(CFX::RG *a1, CFX::RG::RenderGraphContext *a2, CFX::RG::Resource **a3, CFX::RG::Resource *a4)
{
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  const CFX::RG::Resource *v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t *v22;
  const char *v24;
  __int128 v25;
  uint64_t v26;
  _OWORD v27[5];
  _BYTE v28[160];
  _OWORD v29[10];

  v8 = (_OWORD *)CFX::RG::Resource::constTextureDesc(a3[22]);
  v9 = v8[1];
  v29[0] = *v8;
  v29[1] = v9;
  v10 = v8[5];
  v12 = v8[2];
  v11 = v8[3];
  v29[4] = v8[4];
  v29[5] = v10;
  v29[2] = v12;
  v29[3] = v11;
  v13 = v8[9];
  v15 = v8[6];
  v14 = v8[7];
  v29[8] = v8[8];
  v29[9] = v13;
  v29[6] = v15;
  v29[7] = v14;
  CFX::RG::TextureDescriptorReference::withSampleCount(v29, 1, (uint64_t)v28);
  v17 = (const CFX::RG::Resource *)CFX::RG::copyIfNeeded(a1, a3[22], a4, (CFX::RG::Pass *)v28, 0, v16);
  v18 = (_OWORD *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v17);
  v27[0] = *v18;
  v19 = v18[4];
  v21 = v18[1];
  v20 = v18[2];
  v27[3] = v18[3];
  v27[4] = v19;
  v27[1] = v21;
  v27[2] = v20;
  v24 = "DoughnutBokehPass";
  v25 = *(_OWORD *)a3;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(&v26, v27);
  v22 = (uint64_t *)sub_1B180C6D0((uint64_t *)a1, (uint64_t *)a1, (uint64_t)&v24);
  v22[69] = (uint64_t)v17;
  CFX::RG::Pass::readFrom(v22, v17);
  return v22;
}

uint64_t sub_1B180C6D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B180C7CC(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B180C728(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B180C74C(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CEFF0;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B180C784(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CEFF0;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B180C7CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x238u, 8u);
  return sub_1B180C1AC(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B180C828(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

void sub_1B180C830()
{
  if (!qword_1EEF65720)
  {
    qword_1EEF65720 = sub_1B179CB60(&qword_1EEF65720);
    qword_1ED4AF560 = (uint64_t)sub_1B180D060;
  }
}

double sub_1B180C880()
{
  uint64_t v0;
  double result;

  if (qword_1EEF65728 != -1)
    dispatch_once(&qword_1EEF65728, &unk_1E63D0B50);
  v0 = sub_1B179CB90(qword_1EEF65720, 0x30uLL);
  *(_OWORD *)(v0 + 16) = xmmword_1B22464C0;
  *(_QWORD *)&result = 2;
  *(_QWORD *)(v0 + 32) = 2;
  *(_DWORD *)(v0 + 40) = 2139095039;
  *(_QWORD *)(v0 + 56) = ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 16) | 0x2893;
  return result;
}

_DWORD *sub_1B180C8F8(const __CFDictionary *a1)
{
  _DWORD *v2;
  _DWORD *v3;
  const void *Value;
  int v5;
  const void *v6;
  int v7;
  const void *v8;
  const void *v9;
  int v10;
  const void *v11;
  int v12;
  const void *v13;
  int v14;
  const __CFNumber *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float valuePtr;

  sub_1B180C880();
  v3 = v2;
  Value = CFDictionaryGetValue(a1, CFSTR("minificationFilter"));
  if (Value)
    v5 = sub_1B180CA28(Value);
  else
    v5 = 1;
  v3[7] = v5;
  v6 = CFDictionaryGetValue(a1, CFSTR("magnificationFilter"));
  if (v6)
    v7 = sub_1B180CA28(v6);
  else
    v7 = 1;
  v3[8] = v7;
  v8 = CFDictionaryGetValue(a1, CFSTR("mipFilter"));
  if (v8)
    LODWORD(v8) = sub_1B180CA28(v8);
  v3[8] = (_DWORD)v8;
  v9 = CFDictionaryGetValue(a1, CFSTR("wrapS"));
  if (v9)
    v10 = sub_1B180CA74(v9);
  else
    v10 = 1;
  v3[4] = v10;
  v11 = CFDictionaryGetValue(a1, CFSTR("wrapT"));
  if (v11)
    v12 = sub_1B180CA74(v11);
  else
    v12 = 1;
  v3[5] = v12;
  v13 = CFDictionaryGetValue(a1, CFSTR("wrapP"));
  if (v13)
    v14 = sub_1B180CA74(v13);
  else
    v14 = 1;
  v3[6] = v14;
  v15 = (const __CFNumber *)CFDictionaryGetValue(a1, CFSTR("maxAnisotropy"));
  if (v15)
  {
    valuePtr = 0.0;
    CFNumberGetValue(v15, kCFNumberFloatType, &valuePtr);
    sub_1B180CAE0((uint64_t)v3, valuePtr, v16, v17, v18, v19, v20, v21, v22);
  }
  return v3;
}

uint64_t sub_1B180CA28(const void *a1)
{
  if (CFEqual(a1, CFSTR("linear")))
    return 2;
  else
    return CFEqual(a1, CFSTR("nearest")) != 0;
}

uint64_t sub_1B180CA74(const void *a1)
{
  if (CFEqual(a1, CFSTR("clamp")))
    return 1;
  if (CFEqual(a1, CFSTR("repeat")))
    return 2;
  if (CFEqual(a1, CFSTR("clampToBorder")))
    return 3;
  return 4;
}

int8x8_t sub_1B180CAE0(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v11;
  int8x16_t v12;
  int8x8_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"textureSampler");
  *(float *)(a1 + 40) = a2;
  if (a2 <= 128.0)
    v11 = ((a2 * 65536.0 * 0.0078125) << 19) | 1;
  else
    v11 = 1;
  v12 = (int8x16_t)vshlq_u32(*(uint32x4_t *)(a1 + 16), (uint32x4_t)xmmword_1B22464D0);
  result = vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL));
  *(_QWORD *)(a1 + 56) = result.i32[0] | result.i32[1] | (*(_DWORD *)(a1 + 32) << 12) | (*(_DWORD *)(a1 + 36) << 14) | (*(unsigned __int8 *)(a1 + 44) << 16) | v11;
  return result;
}

void sub_1B180CBAC(int a1, int a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12;
  float v13;
  unsigned int v14;

  sub_1B180C880();
  *(_DWORD *)(v12 + 16) = a4;
  *(_DWORD *)(v12 + 20) = a5;
  *(_DWORD *)(v12 + 24) = a6;
  *(_DWORD *)(v12 + 28) = a1;
  *(_DWORD *)(v12 + 32) = a2;
  *(_DWORD *)(v12 + 36) = a3;
  v13 = *(float *)(v12 + 40);
  v14 = 1;
  if (v13 <= 128.0)
    v14 = ((v13 * 65536.0 * 0.0078125) << 19) | 1;
  *(_QWORD *)(v12 + 56) = (a2 << 12) | (a1 << 10) | (a3 << 14) | (2 * a4) | (16 * a5) | (a6 << 7) | v14 | (*(unsigned __int8 *)(v12 + 44) << 16);
}

void sub_1B180CC5C(int a1, int a2, int a3, int a4, int a5, int a6, float a7)
{
  uint64_t v14;
  unsigned int v15;

  sub_1B180C880();
  *(_DWORD *)(v14 + 16) = a4;
  *(_DWORD *)(v14 + 20) = a5;
  *(_DWORD *)(v14 + 24) = a6;
  *(_DWORD *)(v14 + 28) = a1;
  *(_DWORD *)(v14 + 32) = a2;
  *(_DWORD *)(v14 + 36) = a3;
  v15 = 1;
  *(float *)(v14 + 40) = a7;
  if (a7 <= 128.0)
    v15 = ((a7 * 65536.0 * 0.0078125) << 19) | 1;
  *(_QWORD *)(v14 + 56) = (a2 << 12) | (a1 << 10) | (a3 << 14) | (2 * a4) | (16 * a5) | (a6 << 7) | v15 | (*(unsigned __int8 *)(v14 + 44) << 16);
}

uint64_t sub_1B180CD18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureSampler");
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_1B180CD60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureSampler");
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1B180CDA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureSampler");
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1B180CDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureSampler");
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1B180CE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureSampler");
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1B180CE80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureSampler");
  return *(unsigned int *)(a1 + 36);
}

float sub_1B180CEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureSampler");
  return *(float *)(a1 + 40);
}

uint64_t sub_1B180CF10()
{
  if (qword_1EEF65738 != -1)
    dispatch_once(&qword_1EEF65738, &unk_1E63D1670);
  return qword_1EEF65730;
}

void sub_1B180CF50()
{
  uint64_t v0;

  sub_1B180C880();
  qword_1EEF65730 = v0;
}

uint64_t sub_1B180CF6C()
{
  if (qword_1EEF65748 != -1)
    dispatch_once(&qword_1EEF65748, &unk_1E63D1870);
  return qword_1EEF65740;
}

double sub_1B180CFAC()
{
  uint64_t v0;
  double result;

  sub_1B180C880();
  qword_1EEF65740 = v0;
  *(_QWORD *)(v0 + 32) = 0x100000002;
  *(_QWORD *)&result = 0x100000001;
  *(_OWORD *)(v0 + 16) = xmmword_1B22464C0;
  *(_DWORD *)(v0 + 48) = 2;
  *(_DWORD *)(v0 + 40) = 1065353216;
  *(_QWORD *)(v0 + 56) = ((unint64_t)*(unsigned __int8 *)(v0 + 44) << 16) | 0x10006893;
  return result;
}

BOOL sub_1B180D00C(uint64_t a1, uint64_t a2)
{
  return a1 == a2;
}

uint64_t sub_1B180D018(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56);
}

CFStringRef sub_1B180D020(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextureSampler>"));
}

CFStringRef sub_1B180D040(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextureSampler>"));
}

__CFArray *sub_1B180D060(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  uint64_t v34;
  int v35;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v35 = 0;
  valuePtr = 2;
  v34 = a1 + 16;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v34);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("wrapS"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v35 = 0;
  valuePtr = 2;
  v34 = a1 + 20;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v34);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("wrapT"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v35 = 0;
  valuePtr = 2;
  v34 = a1 + 24;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v34);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("wrapP"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v35 = 0;
  valuePtr = 2;
  v34 = a1 + 28;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v34);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("minFilter"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v35 = 0;
  valuePtr = 2;
  v34 = a1 + 32;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
  v24 = CFNumberCreate(0, kCFNumberLongType, &v34);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("magFilter"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v35 = 0;
  valuePtr = 2;
  v34 = a1 + 36;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
  v28 = CFNumberCreate(0, kCFNumberLongType, &v34);
  CFDictionarySetValue(v25, CFSTR("name"), CFSTR("mipFilter"));
  CFDictionarySetValue(v25, CFSTR("type"), v26);
  CFDictionarySetValue(v25, CFSTR("address"), v28);
  CFDictionarySetValue(v25, CFSTR("semantic"), v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v35 = 0;
  valuePtr = 1;
  v34 = a1 + 40;
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v35);
  v32 = CFNumberCreate(0, kCFNumberLongType, &v34);
  CFDictionarySetValue(v29, CFSTR("name"), CFSTR("anisotropy"));
  CFDictionarySetValue(v29, CFSTR("type"), v30);
  CFDictionarySetValue(v29, CFSTR("address"), v32);
  CFDictionarySetValue(v29, CFSTR("semantic"), v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  return Mutable;
}

void sub_1B180D84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a11)
  {
    if (a12)
      sub_1B21FF5FC(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B180D870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 136), sel__preTick_, a3, a4);
}

void sub_1B180DA5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B21FF5FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B180DACC(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t result;
  BOOL v5;
  int v6;
  int v7;

  v3 = (_BYTE *)(a1 + 10528);
  *(_QWORD *)(a1 + 10520) = a2;
  *(_BYTE *)(a1 + 10528) = objc_opt_respondsToSelector() & 1;
  v3[1] = objc_opt_respondsToSelector() & 1;
  result = objc_opt_respondsToSelector();
  v3[2] = result & 1;
  *(_DWORD *)(a1 + 10504) = 0;
  if (*v3)
    v5 = 0;
  else
    v5 = v3[1] == 0;
  if (!v5 || (result & 1) != 0)
  {
    if (v3[1])
      v6 = 3;
    else
      v6 = 1;
    if ((result & 1) != 0)
      v7 = 4;
    else
      v7 = 0;
    *(_DWORD *)(a1 + 10504) = v6 | v7;
  }
  return result;
}

void sub_1B180DC08()
{
  off_1EEFD59C0 = sub_1B180DC20;
}

uint64_t sub_1B180DC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, int a7)
{
  sub_1B21D9788(a1, a5, a2, a6, a7, 0);
  return 1;
}

uint64_t sub_1B180DF40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__willRemoveFromPhysicsWorld_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

uint64_t sub_1B180E074(uint64_t a1)
{
  uint64_t result;
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (result)
  {
    v3 = *(_DWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = v3;
    v9 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)result + 144))(result, &v7);
    return objc_msgSend_wakeUpAllBodies(*(void **)(a1 + 48), v4, v5, v6);
  }
  return result;
}

float sub_1B180E1A8(uint64_t a1)
{
  uint64_t v1;
  float result;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (v1)
  {
    result = *(float *)(a1 + 40);
    *(float *)(v1 + 228) = result;
  }
  return result;
}

uint64_t sub_1B180E1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_updateGlobalScale_, a3, a4);
}

uint64_t sub_1B180E27C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (v1)
    return sub_1B180DACC(*(_QWORD *)(v1 + 40), *(_QWORD *)(result + 40));
  return result;
}

uint64_t sub_1B180E33C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_activatePhysicsJoint_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_1B180E484(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_deactivatePhysicsJoint_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

id sub_1B180E6E0(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  const void *v3;
  VFXHitTestResult *v4;
  const char *v5;
  uint64_t v6;
  id v7;

  if (!a1 || *(_DWORD *)(a1 + 264) != 2)
    return 0;
  v3 = (const void *)sub_1B17ADABC(*(const void **)(*(_QWORD *)(a1 + 536) + 72), *a2, *a3);
  v4 = [VFXHitTestResult alloc];
  v7 = (id)objc_msgSend_initWithResult_(v4, v5, (uint64_t)v3, v6);
  if (v3)
    CFRelease(v3);
  return v7;
}

void sub_1B180EA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B180EA84(&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B180EA84(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E63CD040;
  v2 = (uint64_t)(a1 + 18);
  sub_1B1810570((uint64_t)(a1 + 30));
  sub_1B1810570((uint64_t)(a1 + 26));
  sub_1B1810570((uint64_t)(a1 + 22));
  sub_1B1810570(v2);
  return a1;
}

void *sub_1B180EFB0(uint64_t a1, uint64_t a2, double *a3, double *a4, float a5, float a6)
{
  void *v6;
  id v13;
  uint64_t v14;
  id *v15;
  const char *v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  id *v21;

  v6 = 0;
  if (a1 && (*(_DWORD *)(a1 + 264) & 2) != 0)
  {
    v13 = (id)objc_opt_new();
    if ((*(_BYTE *)(a1 + 264) & 2) != 0
      && (v14 = *(_QWORD *)(a1 + 536)) != 0
      && (v6 = v13, (v15 = sub_1B193E758(*(id **)(v14 + 72))) != 0))
    {
      v19 = (uint64_t)v15;
      if (a2 && (*(_BYTE *)(a2 + 264) & 2) != 0 && (v20 = *(_QWORD *)(a2 + 536)) != 0)
        v21 = sub_1B193E758(*(id **)(v20 + 72));
      else
        v21 = 0;
      *(float *)&v17 = -a5;
      *(float *)&v18 = a6;
      objc_msgSend__fillNodeA_nodeB_contactPoint_collisionImpulse_distance_hitFraction_(v6, v16, v19, (uint64_t)v21, *a3, *a4, v17, v18);
    }
    else
    {
      return 0;
    }
  }
  return v6;
}

uint64_t sub_1B180F0E0(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (result)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)result + 16))(result);
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  }
  return result;
}

uint64_t sub_1B180F39C(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, __n128 a7)
{
  uint64_t v12;
  float v13;
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (a2)
  {
    v12 = result;
    v13 = *(float *)(result + 228);
    v14 = *(_QWORD *)(a2 + 536);
    if (v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v15 = (__n128 *)sub_1B21FF5F0(80, 16);
    sub_1B19023B4((uint64_t)v15, (uint64_t)a3, v13);
    sub_1B19023CC(v15, a7);
    *(_QWORD *)(a2 + 536) = v15;
    if (v15)
      (*(void (**)(__n128 *, uint64_t))(v15->n128_u64[0] + 16))(v15, a2 + 16);
    result = sub_1B17C6244(a3, v16, v17, v18, v19, v20, v21, v22);
    if (result)
    {
      result = sub_1B186C66C((uint64_t)a3, v23, v24, v25, v26, v27, v28, v29);
      if ((result & 1) == 0)
      {
        if ((sub_1B1868D5C((uint64_t)a3, v30, v31, v32, v33, v34, v35, v36) & 1) != 0)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Node should be visible"), v37, v38, v39, v40, v41, v42, (uint64_t)"CFXNodeIsHidden(nodeRef) == false");
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v12 + 176))(v12, a2, a4, a5, a6);
      }
    }
  }
  return result;
}

void sub_1B180F4D4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B21FF5FC(v1);
  _Unwind_Resume(a1);
}

void sub_1B180F588(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v16;

  v5 = *(unsigned int *)(a1 + 10540);
  if ((int)v5 <= 0)
  {
    v16 = 0uLL;
    if ((v5 & 0x80000000) == 0)
      goto LABEL_22;
    goto LABEL_15;
  }
  v6 = 0;
  v7 = 16 * v5;
  do
  {
    v8 = *(_QWORD *)(a1 + 10552) + v6;
    v9 = *(void **)v8;
    v10 = *(_DWORD *)(v8 + 8);
    switch(v10)
    {
      case 2:
        objc_msgSend_physicsWorld_didEndContact_(*(void **)(a1 + 10520), a2, *(_QWORD *)(a1 + 10512), (uint64_t)v9);
        break;
      case 1:
        if (objc_msgSend__shouldPostUpdate(v9, a2, a3, a4))
          objc_msgSend_physicsWorld_didUpdateContact_(*(void **)(a1 + 10520), v11, *(_QWORD *)(a1 + 10512), (uint64_t)v9);
        break;
      case 0:
        objc_msgSend_physicsWorld_didBeginContact_(*(void **)(a1 + 10520), a2, *(_QWORD *)(a1 + 10512), (uint64_t)v9);
        break;
    }

    v6 += 16;
  }
  while (v7 != v6);
  LODWORD(v5) = *(_DWORD *)(a1 + 10540);
  v16 = 0uLL;
  if ((int)v5 <= 0 && (v5 & 0x80000000) != 0)
  {
LABEL_15:
    if ((*(_DWORD *)(a1 + 10544) & 0x80000000) != 0)
    {
      v12 = *(_QWORD *)(a1 + 10552);
      if (v12 && *(_BYTE *)(a1 + 10560))
        sub_1B21FF5FC(v12);
      *(_BYTE *)(a1 + 10560) = 1;
      *(_QWORD *)(a1 + 10552) = 0;
      *(_DWORD *)(a1 + 10544) = 0;
    }
    v13 = 16 * (int)v5;
    v14 = (int)v5 + 1;
    do
    {
      *(_OWORD *)(*(_QWORD *)(a1 + 10552) + v13) = v16;
      v13 += 16;
    }
    while ((_DWORD)v14++);
  }
LABEL_22:
  *(_DWORD *)(a1 + 10540) = 0;
}

void *sub_1B180FD88(id *a1, id *a2)
{
  void *result;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  result = sub_1B193E758(a1);
  if (result)
  {
    v4 = result;
    result = sub_1B193E758(a2);
    if (result)
    {
      result = (void *)objc_msgSend_physicsBody(result, v5, v6, v7);
      if (result)
      {
        v11 = result;
        v12 = (void *)objc_msgSend_physicsWorld(v4, v8, v9, v10);
        v16 = objc_msgSend_categoryBitMask(v11, v13, v14, v15);
        v20 = objc_msgSend_collisionBitMask(v11, v17, v18, v19);
        v24 = objc_msgSend_contactTestBitMask(v11, v21, v22, v23);
        objc_msgSend_addPhysicsBody_nodeRef_colGroup_colMask_colTest_(v12, v25, (uint64_t)v11, (uint64_t)a2, v16, v20, v24);
        v48 = 0u;
        v49 = 0u;
        v46 = 0u;
        v47 = 0u;
        v29 = (void *)objc_msgSend_physicsJoints(v12, v26, v27, v28, 0);
        result = (void *)objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v30, (uint64_t)&v46, (uint64_t)v50, 16);
        if (result)
        {
          v34 = result;
          v35 = *(_QWORD *)v47;
          do
          {
            v36 = 0;
            do
            {
              if (*(_QWORD *)v47 != v35)
                objc_enumerationMutation(v29);
              v37 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v36);
              if ((void *)objc_msgSend_bodyA(v37, v31, v32, v33) == v11
                || (void *)objc_msgSend_bodyB(v37, v31, v32, v33) == v11)
              {
                v38 = (void *)objc_msgSend_bodyA(v37, v31, v32, v33);
                if (objc_msgSend_isActive(v38, v39, v40, v41))
                {
                  v42 = (void *)objc_msgSend_bodyB(v37, v31, v32, v33);
                  if (objc_msgSend_isActive(v42, v43, v44, v45))
                    objc_msgSend_activatePhysicsJoint_(v12, v31, (uint64_t)v37, v33);
                }
              }
              v36 = (char *)v36 + 1;
            }
            while (v34 != v36);
            result = (void *)objc_msgSend_countByEnumeratingWithState_objects_count_(v29, v31, (uint64_t)&v46, (uint64_t)v50, 16);
            v34 = result;
          }
          while (result);
        }
      }
    }
  }
  return result;
}

void *sub_1B180FF2C(id *a1, id *a2)
{
  void *result;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = sub_1B193E758(a1);
  if (result)
  {
    v4 = result;
    result = sub_1B193E758(a2);
    if (result)
    {
      result = (void *)objc_msgSend_physicsBody(result, v5, v6, v7);
      if (result)
      {
        v11 = result;
        v12 = objc_msgSend__handle(result, v8, v9, v10);
        v16 = objc_msgSend_physicsWorld(v4, v13, v14, v15);
        return (void *)MEMORY[0x1E0DE7D20](v16, sel_removePhysicsBody_handle_, v11, v12);
      }
    }
  }
  return result;
}

uint64_t sub_1B180FF9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = sub_1B21CFB1C(a1, a2);
  *(_QWORD *)v5 = &off_1E63CD560;
  *(_QWORD *)(v5 + 10496) = &unk_1E63CD610;
  *(_QWORD *)(v5 + 10512) = a3;
  *(_BYTE *)(v5 + 10560) = 1;
  *(_QWORD *)(v5 + 10552) = 0;
  *(_QWORD *)(v5 + 10540) = 0;
  sub_1B180DACC(v5, 0);
  return a1;
}

void sub_1B180FFFC(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1B1810570((uint64_t)(v1 + 1317));
  sub_1B21CFD1C(v1);
  _Unwind_Resume(a1);
}

void sub_1B1810020(uint64_t a1)
{
  sub_1B18105B4(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1810044(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = sub_1B21CFDC0(a1, a2, a3);
  if (*(_DWORD *)(a1 + 10504))
    *(_QWORD *)(result + 824) = a1 + 10496;
  return result;
}

uint64_t sub_1B1810078(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1B1810080(uint64_t a1, int a2)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * a2);
}

uint64_t sub_1B181008C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 20))
    return *(_QWORD *)(a1 + 32);
  else
    return 0;
}

uint64_t sub_1B18100A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_1B18100AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 112);
}

void sub_1B18100B4(uint64_t a1, uint64_t a2, int a3)
{
  _BYTE *v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = (_BYTE *)(a1 + 10528);
  if (*(_BYTE *)(a1 + 10528) || *(_BYTE *)(a1 + 10529) || *(_BYTE *)(a1 + 10530))
  {
    v6 = a3;
    *(_QWORD *)(a2 + 192 * a3 + 128) = objc_alloc_init(VFXPhysicsContact);
    if (*v5)
    {
      v8 = *(_QWORD **)(a2 + 784);
      if (v8)
        v8 = (_QWORD *)v8[25];
      v9 = *(_QWORD *)(a2 + 792);
      if (v9)
      {
        if (v8)
        {
          v10 = *(_QWORD *)(v9 + 200);
          if (v10)
          {
            if ((*(_QWORD *)(v10 + 8) & v8[3]) != 0 || (*(_QWORD *)(v10 + 24) & v8[1]) != 0)
            {
              v11 = (id)objc_msgSend__contactWithManifold_index_(VFXPhysicsContact, v7, a2, v6);
              v12 = *(_DWORD *)(a1 + 10540);
              if (v12 == *(_DWORD *)(a1 + 10544))
              {
                v13 = v12 ? 2 * v12 : 1;
                if (v12 < v13)
                {
                  if (v13)
                  {
                    v14 = sub_1B21FF5F0(16 * v13, 16);
                    v12 = *(_DWORD *)(a1 + 10540);
                  }
                  else
                  {
                    v14 = 0;
                  }
                  if (v12 >= 1)
                  {
                    v15 = 0;
                    v16 = 16 * v12;
                    do
                    {
                      *(_OWORD *)(v14 + v15) = *(_OWORD *)(*(_QWORD *)(a1 + 10552) + v15);
                      v15 += 16;
                    }
                    while (v16 != v15);
                  }
                  v17 = *(_QWORD *)(a1 + 10552);
                  if (v17)
                  {
                    if (v5[32])
                      sub_1B21FF5FC(v17);
                  }
                  v5[32] = 1;
                  *(_QWORD *)(a1 + 10552) = v14;
                  *(_DWORD *)(a1 + 10544) = v13;
                  v12 = *(_DWORD *)(a1 + 10540);
                }
              }
              v18 = *(_QWORD *)(a1 + 10552) + 16 * v12;
              *(_QWORD *)v18 = v11;
              *(_DWORD *)(v18 + 8) = 0;
              ++*(_DWORD *)(a1 + 10540);
            }
          }
        }
      }
    }
  }
}

void sub_1B1810230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = a3;
  v11 = a1 + 10529;
  if (!*(_BYTE *)(a1 + 10529))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. update should not be called if not implemented by the delegate"), a3, a4, a5, a6, a7, a8, (uint64_t)"_implementDidUpdateContact");
  v12 = *(_QWORD **)(a2 + 784);
  v13 = *(_QWORD *)(a2 + 792);
  if (v12)
    v12 = (_QWORD *)v12[25];
  if (v13)
  {
    if (v12)
    {
      v14 = *(_QWORD *)(v13 + 200);
      if (v14)
      {
        if ((*(_QWORD *)(v14 + 8) & v12[3]) != 0 || (*(_QWORD *)(v14 + 24) & v12[1]) != 0)
        {
          v17 = (id)objc_msgSend__contactWithManifold_index_(VFXPhysicsContact, (const char *)a2, a2, v8);
          v18 = *(_DWORD *)(a1 + 10540);
          if (v18 == *(_DWORD *)(a1 + 10544))
          {
            v19 = v18 ? 2 * v18 : 1;
            if (v18 < v19)
            {
              if (v19)
              {
                v20 = sub_1B21FF5F0(16 * v19, 16);
                v18 = *(_DWORD *)(a1 + 10540);
              }
              else
              {
                v20 = 0;
              }
              if (v18 >= 1)
              {
                v21 = 0;
                v22 = 16 * v18;
                do
                {
                  *(_OWORD *)(v20 + v21) = *(_OWORD *)(*(_QWORD *)(a1 + 10552) + v21);
                  v21 += 16;
                }
                while (v22 != v21);
              }
              v23 = *(_QWORD *)(a1 + 10552);
              if (v23)
              {
                if (*(_BYTE *)(v11 + 31))
                  sub_1B21FF5FC(v23);
              }
              *(_BYTE *)(v11 + 31) = 1;
              *(_QWORD *)(a1 + 10552) = v20;
              *(_DWORD *)(a1 + 10544) = v19;
              v18 = *(_DWORD *)(a1 + 10540);
            }
          }
          v24 = *(_QWORD *)(a1 + 10552) + 16 * v18;
          *(_QWORD *)v24 = v17;
          *(_DWORD *)(v24 + 8) = 1;
          ++*(_DWORD *)(a1 + 10540);
          MEMORY[0x1E0DE7D20](v17, sel__prepareUpdate, v15, v16);
        }
      }
    }
  }
}

void sub_1B18103C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  _BYTE *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v8 = a3;
  v11 = (_BYTE *)(a1 + 10530);
  if (*(_BYTE *)(a1 + 10530)
    || (sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. update should not be called if not implemented by the delegate"), a3, a4, a5, a6, a7, a8, (uint64_t)"_implementDidEndContact"), *v11))
  {
    v12 = *(_QWORD **)(a2 + 784);
    if (v12)
      v12 = (_QWORD *)v12[25];
    v13 = *(_QWORD *)(a2 + 792);
    if (v13)
    {
      if (v12)
      {
        v14 = *(_QWORD *)(v13 + 200);
        if (v14)
        {
          if ((*(_QWORD *)(v14 + 8) & v12[3]) != 0 || (*(_QWORD *)(v14 + 24) & v12[1]) != 0)
          {
            v15 = (id)objc_msgSend__contactWithManifold_index_(VFXPhysicsContact, (const char *)a2, a2, v8);
            v16 = *(_DWORD *)(a1 + 10540);
            if (v16 == *(_DWORD *)(a1 + 10544))
            {
              v17 = v16 ? 2 * v16 : 1;
              if (v16 < v17)
              {
                if (v17)
                {
                  v18 = sub_1B21FF5F0(16 * v17, 16);
                  v16 = *(_DWORD *)(a1 + 10540);
                }
                else
                {
                  v18 = 0;
                }
                if (v16 >= 1)
                {
                  v19 = 0;
                  v20 = 16 * v16;
                  do
                  {
                    *(_OWORD *)(v18 + v19) = *(_OWORD *)(*(_QWORD *)(a1 + 10552) + v19);
                    v19 += 16;
                  }
                  while (v20 != v19);
                }
                v21 = *(_QWORD *)(a1 + 10552);
                if (v21)
                {
                  if (v11[30])
                    sub_1B21FF5FC(v21);
                }
                v11[30] = 1;
                *(_QWORD *)(a1 + 10552) = v18;
                *(_DWORD *)(a1 + 10544) = v17;
                v16 = *(_DWORD *)(a1 + 10540);
              }
            }
            v22 = *(_QWORD *)(a1 + 10552) + 16 * v16;
            *(_QWORD *)v22 = v15;
            *(_DWORD *)(v22 + 8) = 2;
            ++*(_DWORD *)(a1 + 10540);
          }
        }
      }
    }
  }
}

void sub_1B1810548(uint64_t a1, uint64_t a2, int a3)
{
  sub_1B18100B4(a1 - 10496, a2, a3);
}

void sub_1B1810554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1810230(a1 - 10496, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1810560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18103C4(a1 - 10496, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B1810570(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 && *(_BYTE *)(a1 + 24))
    sub_1B21FF5FC(v2);
  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  return a1;
}

double sub_1B18105B4(uint64_t a1)
{
  int v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = &off_1E63CD560;
  *(_QWORD *)(a1 + 10496) = &unk_1E63CD610;
  if (*(_QWORD *)(a1 + 10520))
  {
    v2 = *(_DWORD *)(a1 + 20);
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * i);
        if (v4)
        {
          if (*(int *)(v4 + 800) >= 1)
          {
            v5 = 0;
            v6 = v4 + 16;
            do
            {
              sub_1B21EC9B0((_QWORD *)v4, v6);
              ++v5;
              v6 += 192;
            }
            while (v5 < *(int *)(v4 + 800));
            v2 = *(_DWORD *)(a1 + 20);
          }
          *(_DWORD *)(v4 + 800) = 0;
        }
      }
    }
  }
  sub_1B1810570(a1 + 10536);
  return sub_1B21CFD1C((_QWORD *)a1);
}

void sub_1B1810670(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1B1810570((uint64_t)(v1 + 1317));
  sub_1B21CFD1C(v1);
  _Unwind_Resume(a1);
}

void sub_1B1810694()
{
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18106A8(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    v10 = *(float *)(a1 + 12);
    v11 = vmulq_n_f32(*a2, v10);
    v12 = vmulq_n_f32(*a3, v10);
    v13 = *(_QWORD *)a4;
    v14 = *(_DWORD *)(a4 + 8);
    v15 = 1065353216;
    sub_1B17FA4D4(v9, 0, (float *)&v13, a4, a5, a6, a7, a8, v11, v12);
  }
}

void sub_1B1810704(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;

  v9 = *(uint64_t **)(a1 + 16);
  if (v9)
  {
    v10 = *(float *)(a1 + 12);
    v11 = vmulq_n_f32(*a2, v10);
    v12 = vmulq_n_f32(*a3, v10);
    v16 = *a4;
    v17 = *((_DWORD *)a4 + 2);
    v18 = 1065353216;
    v13 = *(_QWORD *)a5;
    v14 = *(_DWORD *)(a5 + 8);
    v15 = 1065353216;
    sub_1B17FB090(v9, 0, (float *)&v16, (float *)&v13, a5, a6, a7, a8, v11, v12);
  }
}

double sub_1B1810778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double result)
{
  uint64_t v10;
  int32x4_t v11;
  int32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  __int128 v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float v20;
  __n128 v21;
  __int128 v22[3];
  float32x4_t v23;
  __int128 v24;

  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    *(_QWORD *)&v24 = *(_QWORD *)a3;
    DWORD2(v24) = *(_DWORD *)(a3 + 8);
    v11 = *(int32x4_t *)a2;
    v12 = *(int32x4_t *)(a2 + 16);
    v14 = *(int8x16_t *)(a2 + 32);
    v13 = *(float32x4_t *)(a2 + 48);
    v15 = (int8x16_t)vtrn1q_s32(*(int32x4_t *)a2, v12);
    *(_QWORD *)&v16 = vextq_s8(v15, v15, 8uLL).u64[0];
    v15.i64[1] = v14.u32[0];
    HIDWORD(v24) = 1065353216;
    *(int32x2_t *)v12.i8 = vzip2_s32(*(int32x2_t *)v11.i8, *(int32x2_t *)v12.i8);
    v12.u64[1] = (unint64_t)vzip2_s32(*(int32x2_t *)v14.i8, 0);
    *((_QWORD *)&v16 + 1) = vextq_s8(v14, v14, 8uLL).u32[0];
    v17 = v13;
    v17.i32[3] = 1.0;
    v22[0] = (__int128)v15;
    v22[1] = (__int128)v12;
    v22[2] = v16;
    v23 = v17;
    v18 = *(float *)(a1 + 12);
    if (v18 != 1.0)
    {
      v19 = vmulq_n_f32(v13, v18);
      v19.i32[3] = 1.0;
      v23 = v19;
    }
    v20 = *(float *)&result * 1.02 * v18;
    v21.n128_u64[0] = 0;
    v21.n128_u32[2] = 0;
    v21.n128_f32[3] = v20;
    *(_QWORD *)&result = sub_1B17FA598(v10, v22, &v24, a4, a5, a6, a7, a8, v21).n128_u64[0];
  }
  return result;
}

uint64_t sub_1B1810844(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  _OWORD v4[4];

  v4[0] = xmmword_1B2244DB0;
  v4[1] = xmmword_1B2244DD0;
  v2 = *a2;
  v4[2] = xmmword_1B2244D90;
  v4[3] = v2;
  return (*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 32))(a1, v4);
}

uint64_t sub_1B1810890(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 56))(a1, a2, a3, a4, a8);
}

uint64_t sub_1B18108A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a3, a4, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a4, a2, a5);
}

void sub_1B1810920(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v10;
  float v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  int v15;
  int v16;

  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    v11 = *(float *)(a1 + 12);
    v12 = vmulq_n_f32(*a2, v11);
    v13 = vmlaq_n_f32(v12, vmulq_n_f32(*a3, a9), v11);
    v14 = *(_QWORD *)a5;
    v15 = *(_DWORD *)(a5 + 8);
    v16 = 1065353216;
    sub_1B17FA4D4(v10, 0, (float *)&v14, a4, a5, a6, a7, a8, v12, v13);
  }
}

void sub_1B1810988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B17C4408(0, (uint64_t)CFSTR("Warning: PhysicsWarn: %s"), a3, a4, a5, a6, a7, a8, a2);
}

uint64_t sub_1B18109B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_1B18109C0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1B18109C8(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4)
{
  unint64_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  uint64_t v11;
  float32x2_t v12;
  float v13;
  float32x4_t v14;
  unsigned int v15;
  float32x4_t v16;
  uint64_t (*v17)(uint64_t, float32x4_t *, float32x4_t *, uint64_t);
  uint64_t result;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v21;
  float32x4_t v22;
  __int128 v23;

  v6 = 0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = vmulq_f32(vsubq_f32(*a3, *a2), v7);
  v9 = vmulq_f32(vaddq_f32(*a3, *a2), v7);
  v9.i32[3] = 0;
  v23 = xmmword_1B2244F70;
  v10 = v8.f32[2];
  v19 = v9;
  v20 = *(float32x2_t *)v8.f32;
  do
  {
    v11 = 0;
    v12 = (float32x2_t)v23;
    v13 = *((float *)&v23 + 2);
    do
    {
      *(float32x2_t *)v14.f32 = vmul_f32(*(float32x2_t *)v8.f32, v12);
      *(float *)((char *)&v23 + v11) = -*(float *)((char *)&v23 + v11);
      *(float *)&v15 = v10 * v13;
      v12 = (float32x2_t)v23;
      *(float32x2_t *)v16.f32 = vmul_f32(v20, *(float32x2_t *)&v23);
      v13 = *((float *)&v23 + 2);
      v14.i64[1] = v15;
      v16.f32[2] = v10 * *((float *)&v23 + 2);
      v16.i32[3] = 0;
      v17 = *(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16);
      v21 = vaddq_f32(v16, v9);
      v22 = vaddq_f32(v14, v9);
      result = v17(a1, &v22, &v21, a4);
      v9 = v19;
      *(float32x2_t *)v8.f32 = v20;
      v11 += 4;
    }
    while (v11 != 12);
    v23 = xmmword_1B2246520;
    if (v6 <= 2)
      *((float *)&v23 + v6) = -*((float *)&v23 + v6);
    ++v6;
  }
  while (v6 != 4);
  return result;
}

uint64_t sub_1B1810AFC(uint64_t a1, float32x4_t *a2, float a3)
{
  float32x4_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  float32x4_t v9;
  unint64_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  __int128 v20;
  float32x4_t v21;
  float32x4_t v22;

  v5 = a2[3];
  v6 = (int8x16_t)vmulq_f32((float32x4_t)LODWORD(a3), *a2);
  v7 = (int8x16_t)vmulq_f32((float32x4_t)LODWORD(a3), a2[1]);
  v8 = (int8x16_t)vmulq_f32((float32x4_t)LODWORD(a3), a2[2]);
  v8.i32[3] = 0;
  *(float32x2_t *)v9.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v6.i8, *(float32x2_t *)v7.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL)));
  *(float32x2_t *)&v9.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), 0);
  v21 = vaddq_f32(v5, v9);
  v22 = v5;
  v20 = xmmword_1B2246530;
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v22, &v21, &v20);
  LODWORD(v10) = 0;
  *((float *)&v10 + 1) = a3;
  v11 = vmulq_f32((float32x4_t)v10, *a2);
  v12 = (int8x16_t)vmulq_f32((float32x4_t)v10, a2[1]);
  v13 = (int8x16_t)vmulq_f32((float32x4_t)v10, a2[2]);
  v13.i32[3] = 0;
  *(float32x2_t *)v11.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v12.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)));
  *(float32x2_t *)&v11.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v13.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), 0);
  v20 = xmmword_1B2246540;
  v21 = vaddq_f32(v11, v22);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v22, &v21, &v20);
  v14.i64[0] = 0;
  v14.i64[1] = LODWORD(a3);
  v15 = vmulq_f32(v14, *a2);
  v16 = (int8x16_t)vmulq_f32(v14, a2[1]);
  v17 = (int8x16_t)vmulq_f32(v14, a2[2]);
  v17.i32[3] = 0;
  *(float32x2_t *)v15.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
  *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v20 = xmmword_1B2246550;
  v21 = vaddq_f32(v15, v22);
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, __int128 *))(*(_QWORD *)a1 + 16))(a1, &v22, &v21, &v20);
}

void sub_1B1810C98(uint64_t a1, float32x4_t *a2, int8x8_t *a3, int8x8_t *a4, uint64_t a5, int a6, float a7, float a8, float a9, float a10, float a11)
{
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float v21;
  int v22;
  __float2 v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  int v27;
  float32x4_t v28;
  __float2 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;

  v17 = *(float32x4_t *)a4->i8;
  *(int8x8_t *)v18.f32 = vext_s8(*a3, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a3->i8, *(int8x16_t *)a3->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v18.u32[2] = *a3;
  *(int8x8_t *)v19.f32 = vext_s8(*a4, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL), 4uLL);
  *(int8x8_t *)&v19.u32[2] = *a4;
  v20 = (int8x16_t)vsubq_f32(vmulq_f32(*(float32x4_t *)a3->i8, v19), vmulq_f32(*(float32x4_t *)a4->i8, v18));
  v19.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
  v19.i64[1] = v20.u32[0];
  v34 = v19;
  v21 = a10 - a9;
  if ((int)(float)((float)(a10 - a9) / (float)(a11 * 0.017453)) <= 1)
    v22 = 1;
  else
    v22 = (int)(float)((float)(a10 - a9) / (float)(a11 * 0.017453));
  v32 = vmulq_n_f32(v17, a7);
  v23 = __sincosf_stret(a9);
  v24 = vmulq_n_f32(v32, v23.__cosval);
  v24.i32[3] = 0;
  v35 = vmulq_n_f32(v34, a8);
  v25 = vmulq_n_f32(v35, v23.__sinval);
  v25.i32[3] = 0;
  v40 = vaddq_f32(vaddq_f32(*a2, v24), v25);
  if (a6)
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, &v40, a5);
  v26 = a7;
  if (v22 >= 1)
  {
    v27 = 0;
    v28 = v35;
    v28.i32[3] = 0;
    v36 = v28;
    do
    {
      ++v27;
      v38 = vmulq_n_f32(*(float32x4_t *)a4->i8, v26);
      v29 = __sincosf_stret((float)((float)(v21 * (float)v27) / (float)v22) + a9);
      v30 = vmulq_n_f32(v38, v29.__cosval);
      v30.i32[3] = 0;
      v31 = vmulq_n_f32(v36, v29.__sinval);
      v31.i32[3] = 0;
      v39 = vaddq_f32(vaddq_f32(*a2, v30), v31);
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v40, &v39, a5);
      v26 = a7;
      v40 = v39;
    }
    while (v22 != v27);
  }
  if ((a6 & 1) != 0)
    (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, &v40, a5);
}

void sub_1B1810E78(uint64_t a1, float32x4_t *a2, float32x4_t *a3, int8x8_t *a4, uint64_t a5, float a6, float a7, float a8, float a9, float a10, float a11)
{
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  int v24;
  float32x4_t v25;
  float v26;
  int v27;
  BOOL v28;
  _BOOL4 v29;
  float v30;
  float v31;
  float v32;
  int v33;
  float v34;
  float v35;
  uint64_t v36;
  char *v37;
  char *v38;
  __float2 v39;
  int v40;
  unint64_t v41;
  float v42;
  _BOOL4 v43;
  BOOL v44;
  _BOOL4 v45;
  __float2 v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t *v51;
  float32x4_t *v52;
  BOOL v53;
  _BOOL4 v54;
  int v55;
  _BOOL4 v57;
  _BOOL4 v58;
  _BOOL4 v59;
  char *v60;
  _BOOL4 v61;
  float32x4_t v64;
  __int128 v66;
  float32x4_t v67;
  float32x4_t v68;
  char v69;
  char v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v13 = *a3;
  v14 = vmulq_n_f32(*a3, a6);
  v15 = vsubq_f32(*a2, v14);
  v14.i32[3] = 0;
  v16 = vaddq_f32(*a2, v14);
  v15.i32[3] = 0;
  v67 = v15;
  v68 = v16;
  v17 = a11 * 0.017453;
  *(int8x8_t *)v18.f32 = vext_s8(*(int8x8_t *)v13.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL), 4uLL);
  v18.i64[1] = v13.i64[0];
  *(int8x8_t *)v19.f32 = vext_s8(*a4, (int8x8_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a4->i8, *(int8x16_t *)a4->i8, 8uLL), 4uLL);
  *(int8x8_t *)&v19.u32[2] = *a4;
  v20 = (int8x16_t)vsubq_f32(vmulq_f32(v13, v19), vmulq_f32(v18, *(float32x4_t *)a4->i8));
  v21.i64[0] = vextq_s8(v20, v20, 4uLL).u64[0];
  v21.i64[1] = v20.i64[0];
  v57 = a7 <= -1.5708;
  if (a7 > -1.5708)
    v22 = a7;
  else
    v22 = v17 + -1.5708;
  v58 = a8 >= 1.5708;
  if (a8 < 1.5708)
    v23 = a8;
  else
    v23 = 1.5708 - v17;
  if (v22 > v23)
  {
    v57 = 1;
    v58 = 1;
    v23 = 1.5708 - v17;
    v22 = v17 + -1.5708;
  }
  v24 = 0;
  v25 = v21;
  v25.i32[3] = 0;
  v64 = v25;
  v26 = v23 - v22;
  if ((int)(float)(v26 / v17) <= 1)
    v27 = 1;
  else
    v27 = (int)(float)(v26 / v17);
  v28 = a9 <= a10;
  v29 = a9 > a10;
  v30 = 3.1416;
  if (a9 <= a10)
    v30 = a10;
  v31 = a10 - a9;
  if (v28)
    v32 = a9;
  else
    v32 = v17 + -3.1416;
  if (v31 >= 6.2832)
    v29 = 1;
  v61 = v29;
  v33 = (int)(float)((float)(v30 - v32) / v17);
  if (v33 <= 1)
    v33 = 1;
  v34 = v26 / (float)v27;
  v35 = (float)(v30 - v32) / (float)v33;
  v36 = 16 * v33;
  v37 = &v69;
  v38 = &v70;
  v55 = v27;
  while (2)
  {
    v60 = v38;
    v39 = __sincosf_stret(v22 + (float)((float)v24 * v34));
    v40 = 0;
    v41 = 0;
    v42 = v39.__cosval * a6;
    v43 = v24 == 0;
    v44 = v24 == v27;
    v45 = v24 == v27 && v57;
    if (v44)
      v43 = 1;
    v59 = v43;
    do
    {
      v46 = __sincosf_stret(v32 + (float)((float)v40 * v35));
      v47 = vmulq_n_f32(*(float32x4_t *)a4->i8, v42 * v46.__cosval);
      v47.i32[3] = 0;
      v48 = vmulq_n_f32(v64, v42 * v46.__sinval);
      v48.i32[3] = 0;
      v49 = vaddq_f32(vaddq_f32(*a2, v47), v48);
      v50 = vmulq_n_f32(*a3, v39.__sinval * a6);
      v50.i32[3] = 0;
      *(float32x4_t *)&v37[v41] = vaddq_f32(v49, v50);
      if (v24)
      {
        v51 = (float32x4_t *)&v60[v41];
      }
      else
      {
        if (!v58)
          goto LABEL_34;
        v51 = &v67;
      }
      (*(void (**)(uint64_t, float32x4_t *, char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v51, &v37[v41], a5);
LABEL_34:
      if (v41)
      {
        (*(void (**)(uint64_t, char *, char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v37[v41 - 16], &v37[v41], a5);
        if (!v45)
          goto LABEL_37;
LABEL_36:
        (*(void (**)(uint64_t, float32x4_t *, char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v68, &v37[v41], a5);
        goto LABEL_37;
      }
      v66 = *(_OWORD *)v37;
      if (v45)
        goto LABEL_36;
LABEL_37:
      if (v61)
      {
        if (v36 != v41)
          goto LABEL_47;
        v52 = (float32x4_t *)&v66;
LABEL_46:
        (*(void (**)(uint64_t, float32x4_t *, char *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v52, &v37[v41], a5);
        goto LABEL_47;
      }
      if (v41)
        v53 = v36 == v41;
      else
        v53 = 1;
      v54 = v59;
      if (!v53)
        v54 = 0;
      v52 = a2;
      if (v54)
        goto LABEL_46;
LABEL_47:
      v41 += 16;
      ++v40;
    }
    while (v36 + 16 != v41);
    v38 = v37;
    v37 = v60;
    v27 = v55;
    v44 = v24++ == v55;
    if (!v44)
      continue;
    break;
  }
}

uint64_t sub_1B1811208(uint64_t a1, _DWORD *a2, _DWORD *a3, uint64_t a4)
{
  unsigned int v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  _BYTE v27[12];
  int v28;
  int v29;
  unint64_t v30;
  int v31;

  v8 = a2[1];
  v29 = *a2;
  LODWORD(v30) = v8;
  HIDWORD(v30) = a2[2];
  v31 = 0;
  *(_DWORD *)v27 = *a3;
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), v8);
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 16))(a1, &v29, v27);
  v9 = a2[2];
  LODWORD(v30) = a2[1];
  HIDWORD(v30) = v9;
  v31 = 0;
  v10 = *(_QWORD *)a3;
  v29 = *(_QWORD *)a3;
  *(_QWORD *)v27 = v10;
  *(_DWORD *)&v27[8] = v9;
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v11 = a3[1];
  v29 = *a3;
  LODWORD(v30) = v11;
  HIDWORD(v30) = a2[2];
  v31 = 0;
  *(_DWORD *)v27 = *a2;
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), v11);
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v12 = a2[2];
  LODWORD(v30) = a3[1];
  HIDWORD(v30) = v12;
  v31 = 0;
  v13 = *(_QWORD *)a2;
  v29 = *(_QWORD *)a2;
  *(_QWORD *)v27 = v13;
  *(_DWORD *)&v27[8] = v12;
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v29 = *a2;
  v30 = *(_QWORD *)(a2 + 1);
  v31 = 0;
  *(_DWORD *)v27 = v29;
  *(_DWORD *)&v27[4] = v30;
  *(_DWORD *)&v27[8] = a3[2];
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v29 = *a3;
  v30 = *(_QWORD *)(a2 + 1);
  v31 = 0;
  *(_DWORD *)v27 = v29;
  *(_DWORD *)&v27[4] = v30;
  *(_DWORD *)&v27[8] = a3[2];
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v14 = *a3;
  v15 = a2[2];
  v31 = 0;
  *(_DWORD *)v27 = v14;
  v16 = *(_QWORD *)(a3 + 1);
  v29 = v14;
  v30 = __PAIR64__(v15, v16);
  *(_QWORD *)&v27[4] = v16;
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v17 = *a2;
  v18 = a2[2];
  v31 = 0;
  *(_DWORD *)v27 = v17;
  v19 = *(_QWORD *)(a3 + 1);
  v29 = v17;
  v30 = __PAIR64__(v18, v19);
  *(_QWORD *)&v27[4] = v19;
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v20 = a2[1];
  v29 = *a2;
  LODWORD(v30) = v20;
  HIDWORD(v30) = a3[2];
  v31 = 0;
  *(_DWORD *)v27 = *a3;
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), v20);
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v21 = a3[2];
  LODWORD(v30) = a2[1];
  HIDWORD(v30) = v21;
  v31 = 0;
  v22 = *(_QWORD *)a3;
  v29 = *(_QWORD *)a3;
  *(_QWORD *)v27 = v22;
  *(_DWORD *)&v27[8] = v21;
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v23 = a3[1];
  v29 = *a3;
  LODWORD(v30) = v23;
  HIDWORD(v30) = a3[2];
  v31 = 0;
  *(_DWORD *)v27 = *a2;
  *(_QWORD *)&v27[4] = __PAIR64__(HIDWORD(v30), v23);
  v28 = 0;
  (*(void (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
  v24 = a3[2];
  LODWORD(v30) = a3[1];
  HIDWORD(v30) = v24;
  v31 = 0;
  v25 = *(_QWORD *)a2;
  v29 = *(_QWORD *)a2;
  *(_QWORD *)v27 = v25;
  *(_DWORD *)&v27[8] = v24;
  v28 = 0;
  return (*(uint64_t (**)(uint64_t, int *, _BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v29, v27, a4);
}

uint64_t sub_1B1811530(uint64_t a1, float32x4_t *a2, _DWORD *a3, float32x4_t *a4, uint64_t a5)
{
  float32x4_t v10;
  unsigned __int32 v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  __int32 *v20;
  __int32 *v21;
  __int32 *v22;
  float32x4_t v23;
  int8x16_t v24;
  int8x16_t v25;
  __int128 v26;
  __int32 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t v40;
  __int32 v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int8x16_t v71;
  float32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  int8x16_t v82;
  float32x4_t v83;
  int8x16_t v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  float32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int8x16_t v104;
  float32x4_t v105;
  int8x16_t v106;
  int8x16_t v107;
  float32x4_t v108;
  __int32 v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int8x16_t v113;
  float32x4_t v114;
  float32x4_t v115;
  int8x16_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  float32x4_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  float32x4_t v132;
  __int32 v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int8x16_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  int8x16_t v144;
  float32x4_t v145;
  __int32 v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  int8x16_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int8x16_t v155;
  float32x4_t v156;
  int8x16_t v157;
  int8x16_t v158;
  float32x4_t v160;
  float32x4_t v161;

  v10 = *a2;
  v11 = a2->u32[2];
  v12 = *a2;
  v12.i32[2] = v11;
  v13 = a4[2];
  v14 = a4[3];
  v15 = (int8x16_t)vmulq_f32(v12, v13);
  v12.i32[3] = 0;
  v16 = *a4;
  v17 = a4[1];
  v18 = (int8x16_t)vmulq_f32(*a4, v12);
  v19 = vmulq_f32(v12, v17);
  v20 = &a2->i32[1];
  v15.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, *(float32x2_t *)v19.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL)));
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), 0);
  v161 = vaddq_f32(v19, v14);
  v19.i32[0] = *a3;
  v21 = a3 + 1;
  v22 = &a2->i32[2];
  v19.i32[1] = v10.i32[1];
  v19.i64[1] = v11;
  v23 = vmulq_f32(v16, v19);
  v24 = (int8x16_t)vmulq_f32(v17, v19);
  v25 = (int8x16_t)vmulq_f32(v13, v19);
  v25.i32[3] = 0;
  *(float32x2_t *)v23.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v24.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)));
  *(float32x2_t *)&v23.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL)), 0);
  v160 = vaddq_f32(v14, v23);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v26 = *(_OWORD *)a3;
  v27 = a2->i32[2];
  v28 = *(float32x4_t *)a3;
  v28.i32[3] = 0;
  v29 = v28;
  v29.i32[1] = *v20;
  v29.i32[2] = v27;
  v30 = *a4;
  v31 = a4[1];
  v32 = vmulq_f32(*a4, v29);
  v33 = (int8x16_t)vmulq_f32(v31, v29);
  v34 = a4[2];
  v35 = a4[3];
  v36 = (int8x16_t)vmulq_f32(v29, v34);
  v36.i32[3] = 0;
  *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
  *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v36.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)), 0);
  v161 = vaddq_f32(v32, v35);
  v28.i32[1] = DWORD1(v26);
  v28.i32[2] = v27;
  v37 = vmulq_f32(v30, v28);
  v38 = (int8x16_t)vmulq_f32(v31, v28);
  v39 = (int8x16_t)vmulq_f32(v34, v28);
  v39.i32[3] = 0;
  *(float32x2_t *)v37.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)));
  *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v39.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)), 0);
  v160 = vaddq_f32(v35, v37);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v40 = *(float32x4_t *)a3;
  v41 = a2->i32[2];
  v42.i32[0] = a2->i32[0];
  v42.i32[1] = HIDWORD(*(_QWORD *)a3);
  v40.i32[2] = v41;
  v43 = a4[2];
  v44 = a4[3];
  v45 = (int8x16_t)vmulq_f32(v40, v43);
  v40.i32[3] = 0;
  v46 = *a4;
  v47 = a4[1];
  v48 = (int8x16_t)vmulq_f32(*a4, v40);
  v49 = vmulq_f32(v40, v47);
  v45.i32[3] = 0;
  *(float32x2_t *)v49.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.i8, *(float32x2_t *)v49.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL)));
  *(float32x2_t *)&v49.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), 0);
  v161 = vaddq_f32(v49, v44);
  v42.i32[2] = v41;
  v50 = vmulq_f32(v46, v42);
  v51 = (int8x16_t)vmulq_f32(v47, v42);
  v52 = (int8x16_t)vmulq_f32(v43, v42);
  v52.i32[3] = 0;
  *(float32x2_t *)v50.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v51.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
  *(float32x2_t *)&v50.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v52.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)), 0);
  v160 = vaddq_f32(v44, v50);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v53 = *a2;
  v53.i32[3] = 0;
  v54 = v53;
  v54.i32[1] = *v21;
  v54.i32[2] = a2->i64[1];
  v55 = a4[1];
  v56 = vmulq_f32(*a4, v54);
  v57 = (int8x16_t)vmulq_f32(v55, v54);
  v58 = a4[2];
  v59 = a4[3];
  v60 = (int8x16_t)vmulq_f32(v54, v58);
  v60.i32[3] = 0;
  *(float32x2_t *)v56.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v56.f32, *(float32x2_t *)v57.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v56, (int8x16_t)v56, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)));
  *(float32x2_t *)&v56.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)), 0);
  v53.i32[0] = (__int32)*a2;
  v61 = vmulq_f32(*a4, v53);
  v62 = (int8x16_t)vmulq_f32(v55, v53);
  v63 = (int8x16_t)vmulq_f32(v58, v53);
  v63.i32[3] = 0;
  *(float32x2_t *)v61.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)));
  *(float32x2_t *)&v61.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
  v160 = vaddq_f32(v59, v61);
  v161 = vaddq_f32(v56, v59);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v64 = *a2;
  v64.i32[3] = 0;
  v65 = v64;
  v65.i32[2] = a2->i64[1];
  v66 = a4[1];
  v67 = vmulq_f32(*a4, v65);
  v68 = (int8x16_t)vmulq_f32(v66, v65);
  v69 = a4[2];
  v70 = a4[3];
  v71 = (int8x16_t)vmulq_f32(v65, v69);
  v71.i32[3] = 0;
  *(float32x2_t *)v67.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v67.f32, *(float32x2_t *)v68.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v67, (int8x16_t)v67, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)));
  *(float32x2_t *)&v67.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)), 0);
  v64.i32[2] = a3[2];
  v72 = vmulq_f32(*a4, v64);
  v73 = (int8x16_t)vmulq_f32(v66, v64);
  v74 = (int8x16_t)vmulq_f32(v69, v64);
  v74.i32[3] = 0;
  *(float32x2_t *)v72.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v73.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
  *(float32x2_t *)&v72.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v74.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)), 0);
  v160 = vaddq_f32(v70, v72);
  v161 = vaddq_f32(v67, v70);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v75 = *(float32x4_t *)a3;
  v75.i32[1] = *v20;
  v75.i32[3] = 0;
  v76 = v75;
  v76.i32[2] = *v22;
  v77 = a4[1];
  v78 = vmulq_f32(*a4, v76);
  v79 = (int8x16_t)vmulq_f32(v77, v76);
  v80 = a4[2];
  v81 = a4[3];
  v82 = (int8x16_t)vmulq_f32(v76, v80);
  v82.i32[3] = 0;
  *(float32x2_t *)v78.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v79.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)));
  *(float32x2_t *)&v78.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v82.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v82, v82, 8uLL)), 0);
  v75.i32[2] = *((_QWORD *)a3 + 1);
  v83 = vmulq_f32(*a4, v75);
  v84 = (int8x16_t)vmulq_f32(v77, v75);
  v85 = (int8x16_t)vmulq_f32(v80, v75);
  v85.i32[3] = 0;
  *(float32x2_t *)v83.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v83.f32, *(float32x2_t *)v84.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v83, (int8x16_t)v83, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v84, v84, 8uLL)));
  *(float32x2_t *)&v83.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v85.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v85, v85, 8uLL)), 0);
  v160 = vaddq_f32(v81, v83);
  v161 = vaddq_f32(v78, v81);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v86 = *(float32x4_t *)a3;
  v86.i32[3] = 0;
  v87 = v86;
  v87.i32[2] = *v22;
  v88 = a4[1];
  v89 = vmulq_f32(*a4, v87);
  v90 = (int8x16_t)vmulq_f32(v88, v87);
  v91 = a4[2];
  v92 = a4[3];
  v93 = (int8x16_t)vmulq_f32(v87, v91);
  v93.i32[3] = 0;
  *(float32x2_t *)v89.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v89.f32, *(float32x2_t *)v90.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)));
  *(float32x2_t *)&v89.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v93.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v93, v93, 8uLL)), 0);
  v86.i32[2] = *((_QWORD *)a3 + 1);
  v94 = vmulq_f32(*a4, v86);
  v95 = (int8x16_t)vmulq_f32(v88, v86);
  v96 = (int8x16_t)vmulq_f32(v91, v86);
  v96.i32[3] = 0;
  *(float32x2_t *)v94.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v95.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL)));
  *(float32x2_t *)&v94.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v96.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v96, v96, 8uLL)), 0);
  v160 = vaddq_f32(v92, v94);
  v161 = vaddq_f32(v89, v92);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v97 = *a2;
  v97.i32[1] = *v21;
  v97.i32[3] = 0;
  v98 = v97;
  v98.i32[2] = a2->i64[1];
  v99 = a4[1];
  v100 = vmulq_f32(*a4, v98);
  v101 = (int8x16_t)vmulq_f32(v99, v98);
  v102 = a4[2];
  v103 = a4[3];
  v104 = (int8x16_t)vmulq_f32(v98, v102);
  v104.i32[3] = 0;
  *(float32x2_t *)v100.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v101.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v100, (int8x16_t)v100, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL)));
  *(float32x2_t *)&v100.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL)), 0);
  v97.i32[2] = a3[2];
  v105 = vmulq_f32(*a4, v97);
  v106 = (int8x16_t)vmulq_f32(v99, v97);
  v107 = (int8x16_t)vmulq_f32(v102, v97);
  v107.i32[3] = 0;
  *(float32x2_t *)v105.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v105.f32, *(float32x2_t *)v106.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v105, (int8x16_t)v105, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v106, v106, 8uLL)));
  *(float32x2_t *)&v105.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v107.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v107, v107, 8uLL)), 0);
  v160 = vaddq_f32(v103, v105);
  v161 = vaddq_f32(v100, v103);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v108 = *a2;
  v109 = a3[2];
  v110.i32[0] = *a3;
  v110.i32[1] = HIDWORD(a2->i64[0]);
  v108.i32[2] = v109;
  v111 = a4[2];
  v112 = a4[3];
  v113 = (int8x16_t)vmulq_f32(v108, v111);
  v108.i32[3] = 0;
  v114 = *a4;
  v115 = a4[1];
  v116 = (int8x16_t)vmulq_f32(*a4, v108);
  v117 = vmulq_f32(v108, v115);
  v113.i32[3] = 0;
  *(float32x2_t *)v117.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v116.i8, *(float32x2_t *)v117.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v116, v116, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v117, (int8x16_t)v117, 8uLL)));
  *(float32x2_t *)&v117.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v113.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v113, v113, 8uLL)), 0);
  v161 = vaddq_f32(v117, v112);
  v110.i32[2] = v109;
  v118 = vmulq_f32(v114, v110);
  v119 = (int8x16_t)vmulq_f32(v115, v110);
  v120 = (int8x16_t)vmulq_f32(v111, v110);
  v120.i32[3] = 0;
  *(float32x2_t *)v118.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v118.f32, *(float32x2_t *)v119.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v118, (int8x16_t)v118, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v119, v119, 8uLL)));
  *(float32x2_t *)&v118.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v120.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v120, v120, 8uLL)), 0);
  v160 = vaddq_f32(v112, v118);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v121 = *(float32x4_t *)a3;
  v121.i32[3] = 0;
  v122 = v121;
  v122.i32[1] = *v20;
  v122.i32[2] = *((_QWORD *)a3 + 1);
  v123 = a4[1];
  v124 = vmulq_f32(*a4, v122);
  v125 = (int8x16_t)vmulq_f32(v123, v122);
  v126 = a4[2];
  v127 = a4[3];
  v128 = (int8x16_t)vmulq_f32(v122, v126);
  v128.i32[3] = 0;
  *(float32x2_t *)v124.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v124.f32, *(float32x2_t *)v125.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v124, (int8x16_t)v124, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v125, v125, 8uLL)));
  *(float32x2_t *)&v124.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v128.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v128, v128, 8uLL)), 0);
  v121.i32[0] = *(_OWORD *)a3;
  v129 = vmulq_f32(*a4, v121);
  v130 = (int8x16_t)vmulq_f32(v123, v121);
  v131 = (int8x16_t)vmulq_f32(v126, v121);
  v131.i32[3] = 0;
  *(float32x2_t *)v129.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v129.f32, *(float32x2_t *)v130.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v129, (int8x16_t)v129, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v130, v130, 8uLL)));
  *(float32x2_t *)&v129.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v131.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v131, v131, 8uLL)), 0);
  v160 = vaddq_f32(v127, v129);
  v161 = vaddq_f32(v124, v127);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v132 = *(float32x4_t *)a3;
  v133 = a3[2];
  v134.i32[0] = a2->i32[0];
  v134.i32[1] = HIDWORD(*(_QWORD *)a3);
  v132.i32[2] = v133;
  v135 = a4[2];
  v136 = a4[3];
  v137 = (int8x16_t)vmulq_f32(v132, v135);
  v132.i32[3] = 0;
  v138 = *a4;
  v139 = a4[1];
  v140 = (int8x16_t)vmulq_f32(*a4, v132);
  v141 = vmulq_f32(v132, v139);
  v137.i32[3] = 0;
  *(float32x2_t *)v141.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v140.i8, *(float32x2_t *)v141.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v140, v140, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v141, (int8x16_t)v141, 8uLL)));
  *(float32x2_t *)&v141.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v137, v137, 8uLL)), 0);
  v161 = vaddq_f32(v141, v136);
  v134.i32[2] = v133;
  v142 = vmulq_f32(v138, v134);
  v143 = (int8x16_t)vmulq_f32(v139, v134);
  v144 = (int8x16_t)vmulq_f32(v135, v134);
  v144.i32[3] = 0;
  *(float32x2_t *)v142.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v142.f32, *(float32x2_t *)v143.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v142, (int8x16_t)v142, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL)));
  *(float32x2_t *)&v142.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v144.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL)), 0);
  v160 = vaddq_f32(v136, v142);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
  v145 = *a2;
  v146 = a3[2];
  v147 = *a2;
  v147.i32[3] = 0;
  v148 = v147;
  v148.i32[1] = *v21;
  v148.i32[2] = v146;
  v149 = *a4;
  v150 = a4[1];
  v151 = vmulq_f32(*a4, v148);
  v152 = (int8x16_t)vmulq_f32(v150, v148);
  v153 = a4[2];
  v154 = a4[3];
  v155 = (int8x16_t)vmulq_f32(v148, v153);
  v155.i32[3] = 0;
  *(float32x2_t *)v151.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v151.f32, *(float32x2_t *)v152.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v151, (int8x16_t)v151, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v152, v152, 8uLL)));
  *(float32x2_t *)&v151.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v155.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v155, v155, 8uLL)), 0);
  v161 = vaddq_f32(v151, v154);
  v147.i32[1] = v145.i32[1];
  v147.i32[2] = v146;
  v156 = vmulq_f32(v149, v147);
  v157 = (int8x16_t)vmulq_f32(v150, v147);
  v158 = (int8x16_t)vmulq_f32(v153, v147);
  v158.i32[3] = 0;
  *(float32x2_t *)v156.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v156.f32, *(float32x2_t *)v157.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v156, (int8x16_t)v156, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL)));
  *(float32x2_t *)&v156.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL)), 0);
  v160 = vaddq_f32(v154, v156);
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v161, &v160, a5);
}

uint64_t sub_1B1811E34(uint64_t a1, int a2, float32x4_t *a3, uint64_t a4, float32_t a5, float32_t a6)
{
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int8x16_t v20;
  float32x2_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int8x16_t v24;
  int v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int8x16_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int8x16_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  int8x16_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  float32x4_t v61;
  int8x16_t v62;
  int8x16_t v63;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;

  v72 = 0uLL;
  v72.f32[a2] = -a6;
  v71 = 0uLL;
  v71.f32[a2] = a6;
  v11 = a3[1];
  v12 = vmulq_f32(*a3, v72);
  v13 = (int8x16_t)vmulq_f32(v11, v72);
  v14 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL));
  *(float32x2_t *)v12.f32 = vpadd_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)v13.i8);
  v15 = a3[2];
  v16 = a3[3];
  v17 = (int8x16_t)vmulq_f32(v15, v72);
  v17.i32[3] = 0;
  *(float32x2_t *)v12.f32 = vadd_f32(*(float32x2_t *)v12.f32, v14);
  *(float32x2_t *)&v12.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), 0);
  v67 = *a3;
  v68 = v11;
  v69 = v15;
  v70 = vaddq_f32(v16, v12);
  (*(void (**)(uint64_t, float32x4_t *, uint64_t, float32_t))(*(_QWORD *)a1 + 32))(a1, &v67, a4, a5);
  v18 = a3[1];
  v19 = vmulq_f32(*a3, v71);
  v20 = (int8x16_t)vmulq_f32(v18, v71);
  v21 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
  *(float32x2_t *)v19.f32 = vpadd_f32(*(float32x2_t *)v19.f32, *(float32x2_t *)v20.i8);
  v22 = a3[2];
  v23 = a3[3];
  v24 = (int8x16_t)vmulq_f32(v22, v71);
  v24.i32[3] = 0;
  *(float32x2_t *)v19.f32 = vadd_f32(*(float32x2_t *)v19.f32, v21);
  *(float32x2_t *)&v19.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL)), 0);
  v67 = *a3;
  v68 = v18;
  v69 = v22;
  v70 = vaddq_f32(v23, v19);
  (*(void (**)(uint64_t, float32x4_t *, uint64_t, float32_t))(*(_QWORD *)a1 + 32))(a1, &v67, a4, a5);
  v25 = (a2 + 1) % 3;
  v72.f32[v25] = a5;
  v71.f32[v25] = a5;
  v26 = *a3;
  v27 = a3[1];
  v28 = vmulq_f32(*a3, v72);
  v29 = (int8x16_t)vmulq_f32(v72, v27);
  v30 = a3[2];
  v31 = a3[3];
  v32 = (int8x16_t)vmulq_f32(v72, v30);
  v32.i32[3] = 0;
  *(float32x2_t *)v28.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v29.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)));
  *(float32x2_t *)&v28.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 0);
  v67 = vaddq_f32(v31, v28);
  v33 = vmulq_f32(v26, v71);
  v34 = (int8x16_t)vmulq_f32(v27, v71);
  v35 = (int8x16_t)vmulq_f32(v30, v71);
  v35.i32[3] = 0;
  *(float32x2_t *)v33.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.f32, *(float32x2_t *)v34.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v33, (int8x16_t)v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)));
  *(float32x2_t *)&v33.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v35, v35, 8uLL)), 0);
  v65 = v31;
  v66 = vaddq_f32(v31, v33);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v67, &v66, a4);
  v72.f32[v25] = -a5;
  v71.f32[v25] = -a5;
  v36 = *a3;
  v37 = a3[1];
  v38 = vmulq_f32(*a3, v72);
  v39 = (int8x16_t)vmulq_f32(v72, v37);
  v40 = a3[2];
  v41 = (int8x16_t)vmulq_f32(v72, v40);
  v41.i32[3] = 0;
  *(float32x2_t *)v38.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v39.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v39, v39, 8uLL)));
  *(float32x2_t *)&v38.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v41.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)), 0);
  v67 = vaddq_f32(v65, v38);
  v42 = vmulq_f32(v36, v71);
  v43 = (int8x16_t)vmulq_f32(v37, v71);
  v44 = (int8x16_t)vmulq_f32(v40, v71);
  v44.i32[3] = 0;
  *(float32x2_t *)v42.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v43.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
  *(float32x2_t *)&v42.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)), 0);
  v66 = vaddq_f32(v65, v42);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v67, &v66, a4);
  v72.i32[v25] = 0;
  v71.i32[v25] = 0;
  v45 = (a2 + 2) % 3;
  v72.f32[v45] = a5;
  v71.f32[v45] = a5;
  v46 = *a3;
  v47 = a3[1];
  v48 = vmulq_f32(*a3, v72);
  v49 = (int8x16_t)vmulq_f32(v72, v47);
  v50 = a3[2];
  v51 = (int8x16_t)vmulq_f32(v72, v50);
  v51.i32[3] = 0;
  *(float32x2_t *)v48.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v49.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v49, v49, 8uLL)));
  *(float32x2_t *)&v48.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)), 0);
  v67 = vaddq_f32(v65, v48);
  v52 = vmulq_f32(v46, v71);
  v53 = (int8x16_t)vmulq_f32(v47, v71);
  v54 = (int8x16_t)vmulq_f32(v50, v71);
  v54.i32[3] = 0;
  *(float32x2_t *)v52.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v52.f32, *(float32x2_t *)v53.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
  *(float32x2_t *)&v52.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v54.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL)), 0);
  v66 = vaddq_f32(v65, v52);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v67, &v66, a4);
  v72.f32[v45] = -a5;
  v71.f32[v45] = -a5;
  v55 = *a3;
  v56 = a3[1];
  v57 = vmulq_f32(*a3, v72);
  v58 = (int8x16_t)vmulq_f32(v72, v56);
  v59 = a3[2];
  v60 = (int8x16_t)vmulq_f32(v72, v59);
  v60.i32[3] = 0;
  *(float32x2_t *)v57.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v58.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v57, (int8x16_t)v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
  *(float32x2_t *)&v57.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL)), 0);
  v67 = vaddq_f32(v65, v57);
  v61 = vmulq_f32(v55, v71);
  v62 = (int8x16_t)vmulq_f32(v56, v71);
  v63 = (int8x16_t)vmulq_f32(v59, v71);
  v63.i32[3] = 0;
  *(float32x2_t *)v61.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v61.f32, *(float32x2_t *)v62.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v61, (int8x16_t)v61, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)));
  *(float32x2_t *)&v61.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL)), 0);
  v66 = vaddq_f32(v65, v61);
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v67, &v66, a4);
}

uint64_t sub_1B1812284(uint64_t a1, int a2, float32x4_t *a3, uint64_t a4, float32_t a5, float32_t a6)
{
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  int8x16_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int8x16_t v51;
  float32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;

  v74 = 0uLL;
  v74.f32[a2] = a6;
  v11 = (a2 + 1) % 3;
  v73 = 0uLL;
  v73.f32[v11] = a5;
  v12 = vaddq_f32(v74, v73);
  v61 = v73;
  v13 = *a3;
  v14 = a3[1];
  v15 = vmulq_f32(*a3, v12);
  v16 = (int8x16_t)vmulq_f32(v12, v14);
  v17 = a3[2];
  v18 = (int8x16_t)vmulq_f32(v12, v17);
  v18.i32[3] = 0;
  *(float32x2_t *)v15.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v16.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)));
  *(float32x2_t *)&v15.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v19 = a3[3];
  v72 = vaddq_f32(v19, v15);
  v63 = v74;
  v65 = vnegq_f32(v74);
  v67 = v19;
  v20 = vsubq_f32(v73, v74);
  v21 = vmulq_f32(v13, v20);
  v22 = (int8x16_t)vmulq_f32(v14, v20);
  v23 = (int8x16_t)vmulq_f32(v17, v20);
  v23.i32[3] = 0;
  *(float32x2_t *)v21.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v22.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)));
  *(float32x2_t *)&v21.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v23, v23, 8uLL)), 0);
  v71 = vaddq_f32(v19, v21);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, &v72, &v71);
  v24 = vsubq_f32(v63, v61);
  v26 = a3[1];
  v25 = a3[2];
  v27 = (int8x16_t)vmulq_f32(v25, v24);
  v24.i32[3] = 0;
  v28 = (int8x16_t)vmulq_f32(*a3, v24);
  v29 = vmulq_f32(v26, v24);
  v27.i32[3] = 0;
  *(float32x2_t *)v29.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, *(float32x2_t *)v29.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL)));
  *(float32x2_t *)&v29.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  v30 = vaddq_f32(v67, v29);
  v31 = vsubq_f32(v65, v61);
  v32 = (int8x16_t)vmulq_f32(v25, v31);
  v31.i32[3] = 0;
  v33 = (int8x16_t)vmulq_f32(*a3, v31);
  v34 = vmulq_f32(v26, v31);
  v32.i32[3] = 0;
  *(float32x2_t *)v34.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v33.i8, *(float32x2_t *)v34.f32), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL)));
  *(float32x2_t *)&v34.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)), 0);
  v71 = vaddq_f32(v67, v34);
  v72 = v30;
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v72, &v71, a4);
  v72 = 0uLL;
  v72.i32[a2] = 1065353216;
  v71 = 0uLL;
  v71.i32[v11] = 1065353216;
  v66 = v74;
  v35 = *a3;
  v36 = a3[1];
  v37 = vmulq_f32(*a3, v74);
  v38 = (int8x16_t)vmulq_f32(v74, v36);
  v39 = a3[2];
  v40 = (int8x16_t)vmulq_f32(v74, v39);
  v40.i32[3] = 0;
  *(float32x2_t *)v37.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v38.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)));
  *(float32x2_t *)&v37.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)), 0);
  v41 = vsubq_f32(v67, v37);
  v41.i32[3] = 0;
  v70 = v41;
  v64 = v72;
  v42 = (int8x16_t)vmulq_f32(v35, v72);
  v43 = (int8x16_t)vmulq_f32(v36, v72);
  v44 = (int8x16_t)vmulq_f32(v39, v72);
  v44.i32[3] = 0;
  *(float32x2_t *)v42.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, *(float32x2_t *)v43.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)));
  v42.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v44.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL)), 0);
  v69 = v42;
  v62 = v71;
  v45 = (int8x16_t)vmulq_f32(v35, v71);
  v46 = (int8x16_t)vmulq_f32(v36, v71);
  v47 = (int8x16_t)vmulq_f32(v39, v71);
  v47.i32[3] = 0;
  *(float32x2_t *)v45.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v45.i8, *(float32x2_t *)v46.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)));
  v45.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)), 0);
  v68 = v45;
  (*(void (**)(uint64_t, float32x4_t *, int8x16_t *, int8x16_t *, uint64_t, _QWORD, float32_t, float32_t, float, float, float))(*(_QWORD *)a1 + 120))(a1, &v70, &v69, &v68, a4, 0, a5, a5, 0.0, 6.2832, 10.0);
  v48 = *a3;
  v49 = a3[1];
  v50 = vmulq_f32(v66, *a3);
  v51 = (int8x16_t)vmulq_f32(v66, v49);
  v52 = a3[2];
  v53 = (int8x16_t)vmulq_f32(v66, v52);
  v53.i32[3] = 0;
  *(float32x2_t *)v50.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v51.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v51, v51, 8uLL)));
  *(float32x2_t *)&v50.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)), 0);
  v70 = vaddq_f32(v67, v50);
  v54 = (int8x16_t)vmulq_f32(v64, v48);
  v55 = (int8x16_t)vmulq_f32(v64, v49);
  v56 = (int8x16_t)vmulq_f32(v64, v52);
  v56.i32[3] = 0;
  *(float32x2_t *)v54.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v54, v54, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)), vpadd_f32(*(float32x2_t *)v54.i8, *(float32x2_t *)v55.i8));
  v54.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v56.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)), 0);
  v69 = v54;
  v57 = (int8x16_t)vmulq_f32(v62, v48);
  v58 = (int8x16_t)vmulq_f32(v62, v49);
  v59 = (int8x16_t)vmulq_f32(v62, v52);
  v59.i32[3] = 0;
  *(float32x2_t *)v57.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), vpadd_f32(*(float32x2_t *)v57.i8, *(float32x2_t *)v58.i8));
  v57.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v59.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v59, v59, 8uLL)), 0);
  v68 = v57;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, int8x16_t *, int8x16_t *, uint64_t, _QWORD, float32_t, float32_t, float, float, float))(*(_QWORD *)a1 + 120))(a1, &v70, &v69, &v68, a4, 0, a5, a5, 0.0, 6.2832, 10.0);
}

uint64_t sub_1B18126C4(uint64_t a1, int a2, float32x4_t *a3, uint64_t a4, float32_t a5, float a6)
{
  int v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int8x16_t v21;
  int8x16_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  int8x16_t v28;
  float32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  float32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t v65;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  int8x16_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;

  v81 = 0uLL;
  v81.f32[a2] = a6 * 0.5;
  v11 = (a2 + 1) % 3;
  v80 = 0uLL;
  v80.f32[v11] = a5;
  v79 = 0uLL;
  v79.f32[(a2 + 2) % 3] = a5;
  v12 = *a3;
  v13 = a3[1];
  v14 = vmulq_f32(*a3, v81);
  v15 = (int8x16_t)vmulq_f32(v81, v13);
  v16 = a3[2];
  v17 = a3[3];
  v18 = (int8x16_t)vmulq_f32(v81, v16);
  v18.i32[3] = 0;
  *(float32x2_t *)v14.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v14.f32, *(float32x2_t *)v15.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)));
  *(float32x2_t *)&v14.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)), 0);
  v78 = vaddq_f32(v17, v14);
  v71 = vnegq_f32(v81);
  v73 = v17;
  v67 = v81;
  v69 = v80;
  v19 = vsubq_f32(v80, v81);
  v20 = vmulq_f32(v12, v19);
  v21 = (int8x16_t)vmulq_f32(v13, v19);
  v22 = (int8x16_t)vmulq_f32(v16, v19);
  v22.i32[3] = 0;
  *(float32x2_t *)v20.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v21.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v20, (int8x16_t)v20, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)));
  *(float32x2_t *)&v20.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  v77 = vaddq_f32(v17, v20);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(*(_QWORD *)a1 + 16))(a1, &v78, &v77);
  v23 = *a3;
  v24 = a3[1];
  v25 = vmulq_f32(*a3, v67);
  v26 = (int8x16_t)vmulq_f32(v67, v24);
  v27 = a3[2];
  v28 = (int8x16_t)vmulq_f32(v67, v27);
  v28.i32[3] = 0;
  *(float32x2_t *)v25.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v25.f32, *(float32x2_t *)v26.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v26, v26, 8uLL)));
  *(float32x2_t *)&v25.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL)), 0);
  v78 = vaddq_f32(v73, v25);
  v29 = vsubq_f32(v71, v69);
  v30 = (int8x16_t)vmulq_f32(v27, v29);
  v29.i32[3] = 0;
  v31 = vmulq_f32(v23, v29);
  v32 = (int8x16_t)vmulq_f32(v24, v29);
  v30.i32[3] = 0;
  *(float32x2_t *)v31.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v31.f32, *(float32x2_t *)v32.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)));
  *(float32x2_t *)&v31.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL)), 0);
  v77 = vaddq_f32(v73, v31);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v78, &v77, a4);
  v33 = *a3;
  v34 = a3[1];
  v35 = vmulq_f32(*a3, v81);
  v36 = (int8x16_t)vmulq_f32(v81, v34);
  v37 = a3[2];
  v38 = (int8x16_t)vmulq_f32(v81, v37);
  v38.i32[3] = 0;
  *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)));
  *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v38.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v38, v38, 8uLL)), 0);
  v78 = vaddq_f32(v73, v35);
  v72 = vnegq_f32(v81);
  v68 = v81;
  v70 = v79;
  v39 = vsubq_f32(v79, v81);
  v40 = vmulq_f32(v33, v39);
  v41 = (int8x16_t)vmulq_f32(v34, v39);
  v42 = (int8x16_t)vmulq_f32(v37, v39);
  v42.i32[3] = 0;
  *(float32x2_t *)v40.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v41.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v41, v41, 8uLL)));
  *(float32x2_t *)&v40.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v42.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL)), 0);
  v77 = vaddq_f32(v73, v40);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v78, &v77, a4);
  v43 = a3[1];
  v44 = vmulq_f32(*a3, v68);
  v45 = (int8x16_t)vmulq_f32(v68, v43);
  v46 = a3[2];
  v47 = (int8x16_t)vmulq_f32(v68, v46);
  v47.i32[3] = 0;
  *(float32x2_t *)v44.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)));
  *(float32x2_t *)&v44.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v47.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v47, v47, 8uLL)), 0);
  v48 = vaddq_f32(v73, v44);
  v49 = vsubq_f32(v72, v70);
  v50 = (int8x16_t)vmulq_f32(v46, v49);
  v49.i32[3] = 0;
  v51 = vmulq_f32(*a3, v49);
  v52 = (int8x16_t)vmulq_f32(v43, v49);
  v50.i32[3] = 0;
  *(float32x2_t *)v51.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v52.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v52, v52, 8uLL)));
  *(float32x2_t *)&v51.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v50.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v50, v50, 8uLL)), 0);
  v77 = vaddq_f32(v73, v51);
  v78 = v48;
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v78, &v77, a4);
  v78 = 0uLL;
  v78.i32[a2] = 1065353216;
  v77 = 0uLL;
  v77.i32[v11] = 1065353216;
  v53 = *a3;
  v54 = a3[1];
  v55 = vmulq_f32(*a3, v81);
  v56 = (int8x16_t)vmulq_f32(v81, v54);
  v57 = a3[2];
  v58 = (int8x16_t)vmulq_f32(v81, v57);
  v58.i32[3] = 0;
  *(float32x2_t *)v55.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v56.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)));
  *(float32x2_t *)&v55.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)), 0);
  v59 = vsubq_f32(v73, v55);
  v59.i32[3] = 0;
  v76 = v59;
  v60 = (int8x16_t)vmulq_f32(v53, v78);
  v61 = (int8x16_t)vmulq_f32(v54, v78);
  v62 = (int8x16_t)vmulq_f32(v57, v78);
  v62.i32[3] = 0;
  *(float32x2_t *)v60.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v61.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v60, v60, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL)));
  v60.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL)), 0);
  v75 = v60;
  v63 = (int8x16_t)vmulq_f32(v53, v77);
  v64 = (int8x16_t)vmulq_f32(v54, v77);
  v65 = (int8x16_t)vmulq_f32(v57, v77);
  v65.i32[3] = 0;
  *(float32x2_t *)v63.i8 = vadd_f32(vpadd_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v64.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL)));
  v63.u64[1] = (unint64_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v65.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL)), 0);
  v74 = v63;
  return (*(uint64_t (**)(uint64_t, float32x4_t *, int8x16_t *, int8x16_t *, uint64_t, _QWORD, float32_t, float32_t, float, float, float))(*(_QWORD *)a1 + 120))(a1, &v76, &v75, &v74, a4, 0, a5, a5, 0.0, 6.2832, 10.0);
}

uint64_t sub_1B1812B80(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, float a5, float32x4_t a6)
{
  float32x4_t v9;
  float v10;
  float v11;
  float v12;
  float v13;
  unsigned int v14;
  float32x4_t v15;
  float v16;
  float v17;
  int8x16_t v18;
  int32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int8x16_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int8x16_t v45;
  int8x16_t v46;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;

  v9 = *a2;
  LODWORD(v10) = a2->i64[1];
  LODWORD(v11) = HIDWORD(a2->i64[0]);
  if (fabsf(v10) <= 0.70711)
  {
    v16 = (float)(v11 * v11) + (float)(v9.f32[0] * v9.f32[0]);
    v17 = 1.0 / sqrtf(v16);
    v18 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
    *(int32x2_t *)v18.i8 = vzip1_s32(*(int32x2_t *)v9.f32, *(int32x2_t *)v18.i8);
    v19 = (int32x4_t)v18;
    *(float *)&v19.i32[1] = -v11;
    *(float32x2_t *)v19.i8 = vmul_n_f32(*(float32x2_t *)v19.i8, v17);
    v15 = (float32x4_t)vrev64q_s32(v19).u64[0];
    *(float *)v18.i32 = -v10;
    *(float32x2_t *)a6.f32 = vmul_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v18.i8);
    a6.f32[2] = v16 * v17;
  }
  else
  {
    v12 = (float)(v10 * v10) + (float)(v11 * v11);
    v13 = 1.0 / sqrtf(v12);
    *(float *)&v14 = v11 * v13;
    v15.i32[0] = 0;
    v15.f32[1] = -(float)(v10 * v13);
    v15.i64[1] = v14;
    a6.f32[0] = v12 * v13;
    a6.f32[1] = -(float)(v9.f32[0] * *(float *)&v14);
    a6.f32[2] = v9.f32[0] * v15.f32[1];
  }
  v20 = vmulq_n_f32(v9, a5);
  v20.i32[3] = 0;
  v21 = (float32x4_t)vdupq_n_s32(0x42C80000u);
  v22 = vmulq_f32(v15, v21);
  v22.i32[3] = 0;
  v23 = vaddq_f32(v20, v22);
  v24 = vsubq_f32(v20, v22);
  v25 = a3[2];
  v26 = a3[3];
  v27 = (int8x16_t)vmulq_f32(v25, v24);
  v24.i32[3] = 0;
  v28 = vmulq_f32(a6, v21);
  v28.i32[3] = 0;
  v29 = vaddq_f32(v20, v28);
  v30 = vsubq_f32(v20, v28);
  v50 = v30;
  v30.i32[3] = 0;
  v48 = v29;
  v49 = v30;
  v31 = a3[1];
  v32 = vmulq_f32(*a3, v23);
  v33 = (int8x16_t)vmulq_f32(v31, v23);
  v34 = (int8x16_t)vmulq_f32(v25, v23);
  v34.i32[3] = 0;
  *(float32x2_t *)v32.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v33.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL)));
  *(float32x2_t *)&v32.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)), 0);
  v35 = vmulq_f32(*a3, v24);
  v36 = (int8x16_t)vmulq_f32(v31, v24);
  v27.i32[3] = 0;
  *(float32x2_t *)v35.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v36.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL)));
  *(float32x2_t *)&v35.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)), 0);
  v51 = vaddq_f32(v26, v35);
  v52 = vaddq_f32(v26, v32);
  (*(void (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v52, &v51, a4);
  v37 = *a3;
  v38 = a3[1];
  v39 = vmulq_f32(v48, *a3);
  v40 = (int8x16_t)vmulq_f32(v48, v38);
  v41 = a3[2];
  v42 = a3[3];
  v43 = (int8x16_t)vmulq_f32(v48, v41);
  v43.i32[3] = 0;
  *(float32x2_t *)v39.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v39.f32, *(float32x2_t *)v40.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL)));
  *(float32x2_t *)&v39.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v43.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL)), 0);
  v52 = vaddq_f32(v39, v42);
  v44 = vmulq_f32(v37, v49);
  v45 = (int8x16_t)vmulq_f32(v38, v49);
  v46 = (int8x16_t)vmulq_f32(v41, v50);
  v46.i32[3] = 0;
  *(float32x2_t *)v44.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v44, (int8x16_t)v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v45.i8));
  *(float32x2_t *)&v44.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL)), 0);
  v51 = vaddq_f32(v42, v44);
  return (*(uint64_t (**)(uint64_t, float32x4_t *, float32x4_t *, uint64_t))(*(_QWORD *)a1 + 16))(a1, &v52, &v51, a4);
}

void sub_1B1812DF4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E63CD040;
  v2 = (uint64_t)(a1 + 18);
  sub_1B1810570((uint64_t)(a1 + 30));
  sub_1B1810570((uint64_t)(a1 + 26));
  sub_1B1810570((uint64_t)(a1 + 22));
  sub_1B1810570(v2);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1812E54(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (a1[4] & v2) != 0 && (*(_QWORD *)(a2 + 16) & a1[3]) != 0;
  return (a1[5] & v2) != 0 || v3;
}

float32_t sub_1B1812E8C(float32x4_t *a1, uint64_t a2, int a3)
{
  float32x4_t *v5;
  float32x4_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  __int32 v10;
  float32_t result;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  int *v35;
  int v36;

  v5 = *(float32x4_t **)a2;
  a1[1].i64[0] = *(_QWORD *)a2;
  v6 = *(float32x4_t *)(a2 + 16);
  if (!a3)
  {
    v7 = (int8x16_t)vmulq_f32(v5[1], v6);
    v8 = (int8x16_t)vmulq_f32(v6, v5[2]);
    v9 = (int8x16_t)vmulq_f32(v6, v5[3]);
    v9.i32[3] = 0;
    *(float32x2_t *)v6.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v7.i8, *(float32x2_t *)v8.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v7, v7, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)));
    *(float32x2_t *)&v6.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v9.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), 0);
  }
  a1[7] = v6;
  a1[8] = vaddq_f32(a1[4], vmulq_n_f32(vsubq_f32(a1[5], a1[4]), *(float *)(a2 + 32)));
  v10 = a1[6].i32[0];
  if (v10 == 1)
    return 0.0;
  if (!v10)
  {
    result = *(float *)(a2 + 32);
    a1->f32[2] = result;
    return result;
  }
  v12 = a1[9].i32[1];
  if (v12 == a1[9].i32[2])
  {
    v13 = v12 ? 2 * v12 : 1;
    if (v12 < v13)
    {
      if (v13)
      {
        v14 = sub_1B21FF5F0(8 * v13, 16);
        v12 = a1[9].i32[1];
      }
      else
      {
        v14 = 0;
      }
      if (v12 >= 1)
      {
        v15 = 0;
        do
        {
          *(_QWORD *)(v14 + v15) = *(_QWORD *)(a1[10].i64[0] + v15);
          v15 += 8;
        }
        while (8 * v12 != v15);
      }
      v16 = a1[10].i64[0];
      if (v16 && a1[10].i8[8])
      {
        sub_1B21FF5FC(v16);
        v12 = a1[9].i32[1];
      }
      a1[10].i8[8] = 1;
      a1[10].i64[0] = v14;
      a1[9].i32[2] = v13;
    }
  }
  *(_QWORD *)(a1[10].i64[0] + 8 * v12) = *(_QWORD *)a2;
  a1[9].i32[1] = v12 + 1;
  v17 = a1[13].i32[1];
  if (v17 == a1[13].i32[2])
  {
    v18 = v17 ? 2 * v17 : 1;
    if (v17 < v18)
    {
      if (v18)
      {
        v19 = sub_1B21FF5F0(16 * v18, 16);
        v17 = a1[13].i32[1];
      }
      else
      {
        v19 = 0;
      }
      if (v17 >= 1)
      {
        v20 = 0;
        v21 = 16 * v17;
        do
        {
          *(_OWORD *)(v19 + v20) = *(_OWORD *)(a1[14].i64[0] + v20);
          v20 += 16;
        }
        while (v21 != v20);
      }
      v22 = a1[14].i64[0];
      if (v22 && a1[14].i8[8])
        sub_1B21FF5FC(v22);
      a1[14].i8[8] = 1;
      a1[14].i64[0] = v19;
      a1[13].i32[2] = v18;
      v17 = a1[13].i32[1];
    }
  }
  *(float32x4_t *)(a1[14].i64[0] + 16 * v17) = a1[8];
  ++a1[13].i32[1];
  v23 = a1[11].i32[1];
  if (v23 == a1[11].i32[2])
  {
    v24 = v23 ? 2 * v23 : 1;
    if (v23 < v24)
    {
      if (v24)
      {
        v25 = sub_1B21FF5F0(16 * v24, 16);
        v23 = a1[11].i32[1];
      }
      else
      {
        v25 = 0;
      }
      if (v23 >= 1)
      {
        v26 = 0;
        v27 = 16 * v23;
        do
        {
          *(_OWORD *)(v25 + v26) = *(_OWORD *)(a1[12].i64[0] + v26);
          v26 += 16;
        }
        while (v27 != v26);
      }
      v28 = a1[12].i64[0];
      if (v28 && a1[12].i8[8])
        sub_1B21FF5FC(v28);
      a1[12].i8[8] = 1;
      a1[12].i64[0] = v25;
      a1[11].i32[2] = v24;
      v23 = a1[11].i32[1];
    }
  }
  *(float32x4_t *)(a1[12].i64[0] + 16 * v23) = a1[7];
  ++a1[11].i32[1];
  v29 = a1[15].i32[1];
  if (v29 == a1[15].i32[2])
  {
    v30 = v29 ? 2 * v29 : 1;
    if (v29 < v30)
    {
      if (v30)
      {
        v31 = sub_1B21FF5F0(4 * v30, 16);
        v29 = a1[15].i32[1];
      }
      else
      {
        v31 = 0;
      }
      v32 = a1[16].i64[0];
      if (v29 < 1)
      {
        if (!v32)
        {
LABEL_68:
          a1[16].i8[8] = 1;
          a1[16].i64[0] = v31;
          a1[15].i32[2] = v30;
          goto LABEL_69;
        }
      }
      else
      {
        v33 = v29;
        v34 = (_DWORD *)v31;
        v35 = (int *)a1[16].i64[0];
        do
        {
          v36 = *v35++;
          *v34++ = v36;
          --v33;
        }
        while (v33);
      }
      if (a1[16].i8[8])
      {
        sub_1B21FF5FC(v32);
        v29 = a1[15].i32[1];
      }
      a1[16].i64[0] = 0;
      goto LABEL_68;
    }
  }
LABEL_69:
  *(_DWORD *)(a1[16].i64[0] + 4 * v29) = *(_DWORD *)(a2 + 32);
  a1[15].i32[1] = v29 + 1;
  return 0.999;
}

void sub_1B18131F0()
{
  JUMPOUT(0x1B5E22E18);
}

BOOL sub_1B1813204(uint64_t a1, uint64_t a2)
{
  return (*(_QWORD *)(a1 + 40) & *(_QWORD *)(a2 + 8)) != 0 && (*(_QWORD *)(a2 + 16) & *(_QWORD *)(a1 + 32)) != 0;
}

float sub_1B1813230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v7 = sub_1B180EFB0(*(_QWORD *)(a3 + 16), *(_QWORD *)(a6 + 16), (double *)(a2 + 32), (double *)(a2 + 64), *(float *)(a2 + 80), 0.0);
  if (v7)
  {
    v10 = (uint64_t)v7;
    v11 = *(void **)(a1 + 48);
    if (!v11)
    {
      v11 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v8, 0, v9);
      *(_QWORD *)(a1 + 48) = v11;
    }
    objc_msgSend_addObject_(v11, v8, v10, v9);
  }
  return 0.999;
}

void sub_1B18132A0()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B18132B4(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = (a1[3] & v2) != 0 && (*(_QWORD *)(a2 + 16) & a1[2]) != 0;
  return (a1[4] & v2) != 0 || v3;
}

float sub_1B18132EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  float32x4_t *v6;
  float32x4_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  float v11;
  int v12;
  void *v13;
  const char *v14;
  uint64_t v15;

  v6 = *(float32x4_t **)a2;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)a2;
  v7 = *(float32x4_t *)(a2 + 16);
  if (!a3)
  {
    v8 = (int8x16_t)vmulq_f32(v6[1], v7);
    v9 = (int8x16_t)vmulq_f32(v7, v6[2]);
    v10 = (int8x16_t)vmulq_f32(v7, v6[3]);
    v10.i32[3] = 0;
    *(float32x2_t *)v7.f32 = vadd_f32(vpadd_f32(*(float32x2_t *)v8.i8, *(float32x2_t *)v9.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)));
    *(float32x2_t *)&v7.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), 0);
  }
  *(float32x4_t *)(a1 + 96) = v7;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 32);
  v11 = *(float *)(a2 + 48);
  *(float *)(a1 + 8) = v11;
  v12 = *(_DWORD *)(a1 + 80);
  if (v12)
  {
    if (v12 == 1)
    {
      return 0.0;
    }
    else
    {
      if (!*(_QWORD *)(a1 + 128))
      {
        *(_QWORD *)(a1 + 128) = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], (const char *)a2, 0, a4);
        v11 = *(float *)(a1 + 8);
      }
      v13 = sub_1B180EFB0(*(_QWORD *)a2, 0, (double *)(a1 + 112), (double *)(a1 + 96), 0.0, v11);
      v11 = 0.999;
      if (v13)
        objc_msgSend_addObject_(*(void **)(a1 + 128), v14, (uint64_t)v13, v15);
    }
  }
  return v11;
}

void sub_1B1813404()
{
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1813418(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  BOOL v7;

  v5 = *a2;
  if (*(_DWORD *)(*a3 + 264) == 4)
    v6 = *a3;
  else
    v6 = 0;
  if (v5)
    v7 = *(_DWORD *)(*a2 + 264) == 4;
  else
    v7 = 0;
  if (v7)
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v5 + 56))(v5, a3, a2);
  if (v6)
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 56))(v6, a2, a3);
  return 0;
}

uint64_t sub_1B1813498(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  BOOL v9;

  v7 = *a2;
  if (*(_DWORD *)(*a3 + 264) == 4)
    v8 = *a3;
  else
    v8 = 0;
  if (v7)
    v9 = *(_DWORD *)(*a2 + 264) == 4;
  else
    v9 = 0;
  if (v9)
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v7 + 64))(v7, a3, a4, a2);
  if (v8)
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t *))(*(_QWORD *)v8 + 64))(v8, a2, a4, a3);
  return 0;
}

uint64_t sub_1B1813528(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_BYTE *)(a1 + 24) = 1;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v3 = *(unsigned int *)(a2 + 4);
  if ((int)v3 < 1)
  {
    *(_DWORD *)(a1 + 4) = v3;
  }
  else
  {
    v5 = 8 * v3;
    v6 = sub_1B21FF5F0(8 * v3, 16);
    v7 = v6;
    v8 = *(unsigned int *)(a1 + 4);
    if ((int)v8 >= 1)
    {
      v9 = 0;
      v10 = 8 * v8;
      do
      {
        *(_QWORD *)(v6 + v9) = *(_QWORD *)(*(_QWORD *)(a1 + 16) + v9);
        v9 += 8;
      }
      while (v10 != v9);
    }
    v11 = *(_QWORD *)(a1 + 16);
    if (v11 && *(_BYTE *)(a1 + 24))
      sub_1B21FF5FC(v11);
    *(_BYTE *)(a1 + 24) = 1;
    *(_QWORD *)(a1 + 16) = v7;
    *(_DWORD *)(a1 + 8) = v3;
    v12 = 0;
    do
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + v12) = 0;
      v12 += 8;
    }
    while (v5 != v12);
    v13 = 0;
    v14 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a1 + 4) = v3;
    do
    {
      *(_QWORD *)(v14 + v13) = *(_QWORD *)(*(_QWORD *)(a2 + 16) + v13);
      v13 += 8;
    }
    while (v5 != v13);
  }
  return a1;
}

void sub_1B1813628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  os_signpost_id_t v11;
  const __CFSet *v12;
  const __CFSet *v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  uint8_t v19[16];
  uint8_t buf[16];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  v10 = *(_QWORD *)(a1 + 4152);
  v11 = *(_QWORD *)(a1 + 4264);
  v12 = (const __CFSet *)sub_1B18211F0(a2, CFSTR("kDeformerStackKey"), 0);
  if (v12)
  {
    v13 = v12;
    v14 = sub_1B17C439C();
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v15 = v14;
      if (os_signpost_enabled(v14))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v15, OS_SIGNPOST_INTERVAL_BEGIN, v11, "Deformers", "", buf, 2u);
      }
    }
    v16 = CACurrentMediaTime();
    prof_beginFlame((uint64_t)"Skinning", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXEngineContext.m", 174);
    sub_1B17A0428(v13, (uint64_t)&unk_1E63D0B90);
    *(double *)(v10 + 136) = *(double *)(v10 + 136) + CACurrentMediaTime() - v16;
    prof_endFlame();
    v17 = sub_1B17C439C();
    if (v11 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v18 = v17;
      if (os_signpost_enabled(v17))
      {
        *(_WORD *)v19 = 0;
        _os_signpost_emit_with_name_impl(&dword_1B178D000, v18, OS_SIGNPOST_INTERVAL_END, v11, "Deformers", "", v19, 2u);
      }
    }
  }
}

uint64_t sub_1B1813794(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  return *(_QWORD *)(a1 + 4152);
}

uint64_t sub_1B18137DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 4264);
}

void sub_1B18137E4(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = sub_1B186AE38((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
    sub_1B18E534C(v10, a2, v11, v12, v13, v14, v15, v16, a9);
}

void sub_1B181381C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(a1 + 212))
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Info: Reload Shaders"), a3, a4, a5, a6, a7, a8, v19);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), *(const void **)(a1 + 16), 0, 1u);
    objc_msgSend_emptyShaderCache(*(void **)(a1 + 224), v9, v10, v11);
    v15 = objc_msgSend_resourceManager(*(void **)(a1 + 4160), v12, v13, v14);
    sub_1B18FA3D8(v15, v16, v17, v18);
    *(_BYTE *)(a1 + 212) = 0;
  }
}

uint64_t sub_1B1813884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(_QWORD *)(a1 + 16);
}

void sub_1B18138CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;

  if (a2)
  {
    v8 = *(_QWORD *)(a1 + 48);
    if (v8)
    {
      v9 = sub_1B1869AC8(a2, a2, a3, a4, a5, a6, a7, a8);
      v10 = *(float32x4_t *)(v9 + 48);
      v12 = *(float32x4_t *)v9;
      v11 = *(float32x4_t *)(v9 + 16);
      v26 = *(float32x4_t *)(v9 + 32);
      v27 = v10;
      v24 = v12;
      v25 = v11;
      *(double *)v20.i64 = sub_1B18697A0(v8, v13, v14, v15, v16, v17, v18, v19);
      if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v24, v20), (int8x16_t)vceqq_f32(v25, v21)), vandq_s8((int8x16_t)vceqq_f32(v26, v22), (int8x16_t)vceqq_f32(v27, v23)))) & 0x80000000) == 0)sub_1B186BC48(v8, (uint64_t)&v24);
    }
  }
}

uint64_t sub_1B1813954(uint64_t a1)
{
  uint64_t result;
  const __CFAllocator *v3;
  CFDataRef v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFDataRef v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const CFArrayCallBacks *v12;
  const __CFArray *v13;
  const __CFArray *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  CFTypeRef cf;
  void *values;
  UInt8 v30[16];
  __int128 v31;
  int v32;
  UInt8 bytes[16];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 864);
  if (!result)
  {
    v35 = xmmword_1B2246628;
    v36 = unk_1B2246638;
    v37 = xmmword_1B2246648;
    v38 = unk_1B2246658;
    *(_OWORD *)bytes = xmmword_1B2246608;
    v34 = unk_1B2246618;
    *(_OWORD *)v30 = xmmword_1B2246668;
    v31 = unk_1B2246678;
    v32 = 132612;
    v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v4 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 96);
    values = (void *)sub_1B17ED204(v4, 0, 8, 3, 1, v5, v6, v7);
    CFRelease(v4);
    v8 = CFDataCreate(v3, v30, 36);
    cf = (CFTypeRef)sub_1B17A39B4();
    sub_1B17A3C5C((uint64_t)cf, 0, 12, v8, 1, v9, v10, v11);
    CFRelease(v8);
    v27 = 0;
    v12 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    v13 = CFArrayCreate(v3, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
    v14 = CFArrayCreate(v3, &cf, 1, v12);
    v20 = sub_1B17AF674(v13, v14, (uint64_t)&v27, v15, v16, v17, v18, v19);
    *(_QWORD *)(a1 + 864) = v20;
    sub_1B193E5B0(v20, CFSTR("Environment cube"), v21, v22, v23, v24, v25, v26);
    CFRelease(v14);
    CFRelease(v13);
    CFRelease(cf);
    return *(_QWORD *)(a1 + 864);
  }
  return result;
}

void sub_1B1813AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!sub_1B1841910(a2, a2, a3, a4, a5, a6, a7, a8))
  {
    if (!a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v11, v12, v13, v14, v15, v16, (uint64_t)"context");
    v17 = *(_QWORD *)(a1 + 4160);
    if (v17)
    {
      v18 = sub_1B1842D3C(a2, v10, v11, v12, v13, v14, v15, v16);
      if (v18 && (v26 = v18, sub_1B181F2D4(v18, v19, v20, v21, v22, v23, v24, v25) - 4 >= 0xFFFFFFFD))
        MEMORY[0x1E0DE7D20](v17, sel_renderVideoBackground_engineContext_materialProperty_, v26, a1);
      else
        MEMORY[0x1E0DE7D20](v17, sel_renderBackground_engineContext_passInstance_, a2, a1);
    }
  }
}

uint64_t sub_1B1813BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(_QWORD *)(a1 + 4160);
}

uint64_t sub_1B1813C0C(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B1813C38(const __CFDictionary *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  _OWORD *v16;

  if (qword_1ED4CFEB8[0] != -1)
    dispatch_once_f(qword_1ED4CFEB8, &qword_1ED4CEC40, (dispatch_function_t)sub_1B1813C0C);
  v4 = sub_1B179CB90(qword_1ED4CEC40, 0x10B0uLL);
  v5 = v4;
  if (v4)
  {
    v6 = (_BYTE *)(v4 + 4180);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 888) = 0x7FF0000000000000;
    *(_WORD *)(v4 + 217) = 1;
    __asm { FMOV            V0.2S, #1.0 }
    *(_QWORD *)(v4 + 204) = _D0;
    *(_QWORD *)(v4 + 4184) = sub_1B19AA778(v4, a2);
    sub_1B17B3CD0(v5 + 4192, 8, 1.0, 1.0);
    *v6 = 1;
    *(_OWORD *)(v5 + 4024) = 0u;
    *(_OWORD *)(v5 + 4040) = 0u;
    *(_OWORD *)(v5 + 4056) = 0u;
    *(_OWORD *)(v5 + 4072) = 0u;
    *(_OWORD *)(v5 + 4088) = 0u;
    *(_OWORD *)(v5 + 4104) = 0u;
    *(_OWORD *)(v5 + 4120) = 0u;
    *(_OWORD *)(v5 + 4136) = 0u;
    *(_BYTE *)(v5 + 4016) = 2;
    v12 = sub_1B17C439C();
    *(_QWORD *)(v5 + 4264) = os_signpost_id_make_with_pointer(v12, (const void *)v5);
    *(_QWORD *)(v5 + 4272) = vfx_counters_null();
    *(_BYTE *)(v5 + 4280) = 1;
    if (a1)
      *(_QWORD *)(v5 + 832) = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, a1);
    v13 = 0;
    v14 = v5 + 944;
    do
    {
      for (i = 0; i != 1024; i += 64)
      {
        v16 = (_OWORD *)(v14 + i);
        *v16 = xmmword_1B2244DB0;
        v16[1] = xmmword_1B2244DD0;
        v16[2] = xmmword_1B2244D90;
        v16[3] = xmmword_1B2244E20;
      }
      ++v13;
      v14 += 1024;
    }
    while (v13 != 3);
    *(_QWORD *)(v5 + 152) = sub_1B17C7A70();
    *(_QWORD *)(v5 + 160) = sub_1B18D36E0();
    *(_QWORD *)(v5 + 144) = CStackAllocatorCreate(0x10000);
  }
  return v5;
}

void sub_1B1813DD0(uint64_t a1, uint64_t a2, void *a3)
{
  prof_beginFlame((uint64_t)"CFXEngineContextLoadCustomRenderGraph", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXEngineContext.m", 451);
  sub_1B19AACD8(*(_QWORD *)(a1 + 4184), a2, a3);
  prof_endFlame();
}

void sub_1B1813E24(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B1813E3C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 4184);
}

uint64_t sub_1B1813E44(uint64_t a1)
{
  return sub_1B19AAB5C(*(_QWORD *)(a1 + 4184));
}

void sub_1B1813E4C(uint64_t a1)
{
  sub_1B19AAB54(*(_QWORD *)(a1 + 4184));
}

uint64_t sub_1B1813E54(uint64_t a1, void *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
    if (cf)
      goto LABEL_3;
LABEL_5:
    v10 = 0;
    goto LABEL_6;
  }
  if (!cf)
    goto LABEL_5;
LABEL_3:
  v10 = CFRetain(cf);
LABEL_6:
  *(_QWORD *)(a1 + 4160) = v10;
  *(_DWORD *)(a1 + 4168) = objc_msgSend_features(cf, (const char *)cf, a3, a4);
  result = objc_msgSend_stats(cf, v11, v12, v13);
  *(_QWORD *)(a1 + 4152) = result;
  return result;
}

void sub_1B1813ED0(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  const void *v31;
  CFTypeRef v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  v10 = (const void *)a1[2];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B1813FE4((uint64_t)a1, 0, a3, a4, a5, a6, a7, a8);
      sub_1B1949918((unint64_t)a1, v11, v12, v13, v14, v15, v16, v17);
      sub_1B18797FC(a1[2], (uint64_t)a1, v18, v19, v20, v21, v22, v23);
    }
    sub_1B17C7B88(a1[19]);
    sub_1B18D37E4(a1[20]);
    v30 = (const void *)a1[22];
    if (v30)
    {
      CFRelease(v30);
      a1[22] = 0;
    }
    v31 = (const void *)a1[2];
    if (v31 != a2)
    {
      if (v31)
      {
        CFRelease(v31);
        a1[2] = 0;
      }
      if (a2)
        v32 = CFRetain(a2);
      else
        v32 = 0;
      a1[2] = (uint64_t)v32;
    }
    if (a2)
    {
      sub_1B187967C((uint64_t)a2, (uint64_t)a1, v24, v25, v26, v27, v28, v29);
      sub_1B1949918((unint64_t)a1, v33, v34, v35, v36, v37, v38, v39);
      v47 = sub_1B187C160((uint64_t)a2, v40, v41, v42, v43, v44, v45, v46);
      sub_1B181415C((uint64_t)a1, v47, v48, v49, v50, v51, v52, v53);
    }
    sub_1B18141B0((uint64_t)a1, 0, v24, v25, v26, v27, v28, v29);
    sub_1B19498C8((unint64_t)a1, v54, v55, v56, v57, v58, v59, v60);
  }
}

uint64_t sub_1B1813FE4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFDictionary *v17;
  const void *v18;
  CFTypeRef v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  sub_1B18141B0(a1, 0, a3, a4, a5, a6, a7, a8);
  if (a2)
  {
    v17 = sub_1B186CFA8((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
    if (v17)
      *((_BYTE *)v17 + 360) &= ~1u;
  }
  v18 = *(const void **)(a1 + 24);
  if (v18 != a2)
  {
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 24) = 0;
    }
    if (a2)
      v19 = CFRetain(a2);
    else
      v19 = 0;
    *(_QWORD *)(a1 + 24) = v19;
  }
  if (a2)
  {
    v20 = (float32x4_t *)sub_1B1869AC8((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
    v21 = vmulq_f32(*v20, *v20);
    v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
    v22.f32[0] = sqrtf(v22.f32[0]);
    v23 = vmulq_f32(v20[1], v20[1]);
    v24 = vmulq_f32(v20[2], v20[2]);
    v22.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]);
    v22.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
    v25 = vabsq_f32(v22);
    *(float *)(a1 + 200) = 1.0 / fmaxf(fmaxf(v25.f32[0], v25.f32[2]), v25.f32[1]);
  }
  return sub_1B19AAB5C(*(_QWORD *)(a1 + 4184));
}

CFTypeRef sub_1B181410C(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 176);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 176) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 176) = result;
  }
  return result;
}

double sub_1B181415C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  *(_QWORD *)(a1 + 4272) = a2;
  return sub_1B19AAC98(*(_QWORD *)(a1 + 4184), a2);
}

CFTypeRef sub_1B18141B0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  result = *(CFTypeRef *)(a1 + 40);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 40) = 0;
    }
    if (cf)
    {
      *(_QWORD *)(a1 + 40) = CFRetain(cf);
      v18 = (float32x4_t *)sub_1B1869AC8((uint64_t)cf, v11, v12, v13, v14, v15, v16, v17);
      v19 = vmulq_f32(*v18, *v18);
      v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)));
      v20.f32[0] = sqrtf(v20.f32[0]);
      v21 = vmulq_f32(v18[1], v18[1]);
      v22 = vmulq_f32(v18[2], v18[2]);
      v20.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
      v20.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]);
      v23 = vabsq_f32(v20);
      *(float *)(a1 + 200) = 1.0 / fmaxf(fmaxf(v23.f32[0], v23.f32[2]), v23.f32[1]);
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 0;
    }
    return (CFTypeRef)sub_1B19AAB5C(*(_QWORD *)(a1 + 4184));
  }
  return result;
}

uint64_t sub_1B18142BC(uint64_t result)
{
  *(_QWORD *)(result + 888) = 0x7FF0000000000000;
  return result;
}

void sub_1B18142C8(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"context");
  v11 = *(double *)(a1 + 888);
  if (v11 > a2)
    v11 = a2;
  *(double *)(a1 + 888) = v11;
}

void sub_1B1814328(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  v9 = *(double *)(a1 + 904);
  if (v9 >= *(double *)(a1 + 888))
    v9 = *(double *)(a1 + 888);
  *(double *)(a1 + 888) = v9;
}

double sub_1B1814380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(double *)(a1 + 888);
}

uint64_t sub_1B18143C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_1B1814410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  return *(_QWORD *)(a1 + 160);
}

uint64_t sub_1B1814458(uint64_t a1)
{
  return *(unsigned int *)(a1 + 184);
}

uint64_t sub_1B1814460(uint64_t result, int a2)
{
  *(_DWORD *)(result + 184) = a2;
  return result;
}

uint64_t sub_1B1814468(uint64_t result, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(result + 192);
  *(_QWORD *)(result + 192) = a2;
  if (((v2 ^ a2) & 0x100) != 0)
    return sub_1B19AAB5C(*(_QWORD *)(result + 4184));
  return result;
}

uint64_t sub_1B1814484(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  BOOL v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  result = *(_QWORD *)(a1 + 128);
  if (result)
    v11 = 1;
  else
    v11 = a2 == 0;
  if (!v11)
  {
    result = sub_1B17F8830(a1);
    *(_QWORD *)(a1 + 128) = result;
  }
  return result;
}

float sub_1B18144E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(float *)(a1 + 200);
}

uint64_t sub_1B1814530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(_QWORD *)(a1 + 40);
}

float32x4_t *sub_1B1814578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v9;
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  v9 = *(float32x4_t **)(a1 + 48);
  if (!v9)
  {
    v9 = (float32x4_t *)sub_1B186A0A0();
    v10 = (float32x4_t *)sub_1B185ECD0();
    sub_1B185EDE4(v10, 2, v11, v12, v13, v14, v15, v16);
    sub_1B185FE54(v10, 0xDEFA017DEFA017, v17, v18, v19, v20, v21, v22, v30);
    sub_1B186CE28(v9, (const __CFDictionary *)v10, v23, v24, v25, v26, v27, v28);
    CFRelease(v10);
    *(_QWORD *)(a1 + 48) = v9;
  }
  return v9;
}

BOOL sub_1B1814618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFDictionary *v21;
  _BOOL8 result;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"context");
  }
  result = 1;
  if ((sub_1B187C0CC(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8) & 1) == 0)
  {
    v21 = sub_1B18146BC(a1, CFSTR("defaultLight"), v15, v16, v17, v18, v19, v20);
    if (!v21 || !CFEqual(v21, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
      return 0;
  }
  return result;
}

const __CFDictionary *sub_1B18146BC(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  result = *(const __CFDictionary **)(a1 + 832);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, key);
  return result;
}

uint64_t sub_1B1814720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(_QWORD *)(a1 + 24);
}

const void *sub_1B1814768(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *ValueAtIndex;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFArray *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFArray *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const __CFDictionary *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  ValueAtIndex = (const void *)a1[3];
  if (!ValueAtIndex)
  {
    ValueAtIndex = (const void *)a1[5];
    if (!ValueAtIndex)
    {
      v10 = (__n128 *)a1[2];
      if (v10 && (v11 = sub_1B187A934(a1[2], a2, a3, a4, a5, a6, a7, a8)) != 0)
      {
        v17 = sub_1B186C054(v11, CFSTR("kCameraKey"), 1, v12, v13, v14, v15, v16);
        v24 = v17;
        if (v17 && CFArrayGetCount(v17) >= 1)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v24, 0);
          sub_1B1813FE4((uint64_t)a1, ValueAtIndex, v25, v26, v27, v28, v29, v30);
          if (!a1[3])
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v31, v32, v33, v34, v35, v36, (uint64_t)"context->_pointOfView");
LABEL_19:
          CFRelease(v24);
          return ValueAtIndex;
        }
        v37 = sub_1B18146BC((uint64_t)a1, CFSTR("defaultCamera"), v18, v19, v20, v21, v22, v23);
        if (v37 && !CFEqual(v37, (CFTypeRef)*MEMORY[0x1E0C9AE50]))
        {
          ValueAtIndex = 0;
        }
        else
        {
          ValueAtIndex = (const void *)a1[5];
          if (!ValueAtIndex)
          {
            ValueAtIndex = (const void *)sub_1B17B2908(v10, 0, v38, v39, v40, v41, v42, v43);
            if (ValueAtIndex)
            {
              sub_1B18141B0((uint64_t)a1, ValueAtIndex, v44, v45, v46, v47, v48, v49);
              CFRelease(ValueAtIndex);
            }
          }
        }
        if (v24)
          goto LABEL_19;
      }
      else
      {
        return 0;
      }
    }
  }
  return ValueAtIndex;
}

CFTypeRef sub_1B18148C4(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  result = *(CFTypeRef *)(a1 + 32);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 32) = result;
  }
  return result;
}

uint64_t sub_1B181493C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(_QWORD *)(a1 + 32);
}

const void *sub_1B1814984(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  result = (const void *)a1[4];
  if (!result)
    return sub_1B1814768(a1, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1B18149E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return a1 + 56;
}

void sub_1B1814A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  *(_QWORD *)(a1 + 120) = a2;
}

uint64_t sub_1B1814A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_1B1814AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_1B1814B08(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  const __CFDictionary *v11;
  const __CFNumber *Value;
  unsigned int valuePtr;

  v8 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  v11 = *(const __CFDictionary **)(a1 + 832);
  if (v11)
  {
    Value = (const __CFNumber *)CFDictionaryGetValue(v11, key);
    if (Value)
    {
      valuePtr = 0;
      CFNumberGetValue(Value, kCFNumberSInt32Type, &valuePtr);
      return valuePtr;
    }
  }
  return v8;
}

uint64_t sub_1B1814B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(unsigned int *)(a1 + 840);
}

void sub_1B1814BD0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  if (*(_DWORD *)(a1 + 840) != a2)
  {
    *(_DWORD *)(a1 + 840) = a2;
    *(_BYTE *)(a1 + 212) = 1;
    sub_1B19AAB5C(*(_QWORD *)(a1 + 4184));
  }
}

uint64_t sub_1B1814C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(unsigned int *)(a1 + 844);
}

void sub_1B1814C8C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  if (*(_DWORD *)(a1 + 844) != a2)
  {
    *(_DWORD *)(a1 + 844) = a2;
    *(_BYTE *)(a1 + 212) = 1;
    sub_1B19AAB5C(*(_QWORD *)(a1 + 4184));
  }
}

uint64_t sub_1B1814D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(unsigned __int8 *)(a1 + 549);
}

uint64_t sub_1B1814D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(unsigned __int8 *)(a1 + 550);
}

__n128 sub_1B1814D90(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  if (*(unsigned __int8 *)(a1 + 550) != a2)
  {
    *(_BYTE *)(a1 + 550) = a2;
    *(_BYTE *)(a1 + 549) = a2;
    if (a2)
    {
      *(_BYTE *)(a1 + 560) = *(_BYTE *)(a1 + 218);
      *(_BYTE *)(a1 + 561) = *(_BYTE *)(a1 + 548);
      *(_BYTE *)(a1 + 562) = *(_BYTE *)(a1 + 217);
      v11 = *(_OWORD *)(a1 + 1984);
      *(_OWORD *)(a1 + 576) = *(_OWORD *)(a1 + 1968);
      *(_OWORD *)(a1 + 592) = v11;
      v12 = *(_OWORD *)(a1 + 2016);
      *(_OWORD *)(a1 + 608) = *(_OWORD *)(a1 + 2000);
      *(_OWORD *)(a1 + 624) = v12;
      v13 = *(_OWORD *)(a1 + 944);
      v14 = *(_OWORD *)(a1 + 960);
      v15 = *(_OWORD *)(a1 + 992);
      *(_OWORD *)(a1 + 736) = *(_OWORD *)(a1 + 976);
      *(_OWORD *)(a1 + 752) = v15;
      *(_OWORD *)(a1 + 704) = v13;
      *(_OWORD *)(a1 + 720) = v14;
      v16 = *(_OWORD *)(a1 + 2048);
      *(_OWORD *)(a1 + 640) = *(_OWORD *)(a1 + 2032);
      *(_OWORD *)(a1 + 656) = v16;
      v17 = *(_OWORD *)(a1 + 2080);
      *(_OWORD *)(a1 + 672) = *(_OWORD *)(a1 + 2064);
      *(_OWORD *)(a1 + 688) = v17;
      v18 = *(_OWORD *)(a1 + 1056);
      *(_OWORD *)(a1 + 800) = *(_OWORD *)(a1 + 1040);
      *(_OWORD *)(a1 + 816) = v18;
      result = *(__n128 *)(a1 + 1008);
      v19 = *(_OWORD *)(a1 + 1024);
      *(__n128 *)(a1 + 768) = result;
      *(_OWORD *)(a1 + 784) = v19;
      *(_BYTE *)(a1 + 218) = 1;
      if ((*(_BYTE *)(a1 + 4169) & 0x20) != 0)
        *(_BYTE *)(a1 + 548) = 1;
      *(_BYTE *)(a1 + 217) = 2;
    }
    else
    {
      *(_BYTE *)(a1 + 218) = *(_BYTE *)(a1 + 560);
      if ((*(_BYTE *)(a1 + 4169) & 0x20) != 0)
        *(_BYTE *)(a1 + 548) = *(_BYTE *)(a1 + 561);
      v20 = *(_OWORD *)(a1 + 592);
      *(_OWORD *)(a1 + 1968) = *(_OWORD *)(a1 + 576);
      *(_OWORD *)(a1 + 1984) = v20;
      v21 = *(_OWORD *)(a1 + 624);
      *(_OWORD *)(a1 + 2000) = *(_OWORD *)(a1 + 608);
      *(_OWORD *)(a1 + 2016) = v21;
      v22 = *(_OWORD *)(a1 + 720);
      *(_OWORD *)(a1 + 944) = *(_OWORD *)(a1 + 704);
      *(_OWORD *)(a1 + 960) = v22;
      v23 = *(_OWORD *)(a1 + 752);
      *(_OWORD *)(a1 + 976) = *(_OWORD *)(a1 + 736);
      *(_OWORD *)(a1 + 992) = v23;
      v24 = *(_OWORD *)(a1 + 656);
      *(_OWORD *)(a1 + 2032) = *(_OWORD *)(a1 + 640);
      *(_OWORD *)(a1 + 2048) = v24;
      v25 = *(_OWORD *)(a1 + 688);
      *(_OWORD *)(a1 + 2064) = *(_OWORD *)(a1 + 672);
      *(_OWORD *)(a1 + 2080) = v25;
      v26 = *(_OWORD *)(a1 + 784);
      *(_OWORD *)(a1 + 1008) = *(_OWORD *)(a1 + 768);
      *(_OWORD *)(a1 + 1024) = v26;
      result = *(__n128 *)(a1 + 800);
      v27 = *(_OWORD *)(a1 + 816);
      *(__n128 *)(a1 + 1040) = result;
      *(_BYTE *)(a1 + 217) = *(_BYTE *)(a1 + 562);
      *(_OWORD *)(a1 + 1056) = v27;
    }
  }
  return result;
}

uint64_t sub_1B1814EF8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 218);
}

uint64_t sub_1B1814F00(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 548);
}

unint64_t sub_1B1814F08(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a3;
  if (a3 >= 0x10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"eye < CFXRenderingEyeMaxCount");
  return a1 + ((uint64_t)a2 << 10) + ((unint64_t)v8 << 6) + 944;
}

uint64_t sub_1B1814F74(uint64_t result, char a2)
{
  *(_BYTE *)(result + 218) = a2;
  return result;
}

uint64_t sub_1B1814F7C(uint64_t result, char a2)
{
  if ((*(_BYTE *)(result + 4169) & 0x20) != 0)
    *(_BYTE *)(result + 548) = a2;
  return result;
}

uint64_t sub_1B1814F90(uint64_t result, char a2)
{
  *(_BYTE *)(result + 217) = a2;
  return result;
}

__n128 sub_1B1814F98(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  __n128 result;
  __int128 v13;
  __int128 v14;
  unint64_t v15;

  v8 = a4;
  if (a4 >= 0x10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"eye < CFXRenderingEyeMaxCount");
  result = *(__n128 *)a3;
  v13 = *(_OWORD *)(a3 + 16);
  v14 = *(_OWORD *)(a3 + 48);
  v15 = a1 + ((uint64_t)a2 << 10) + ((unint64_t)v8 << 6);
  *(_OWORD *)(v15 + 976) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v15 + 992) = v14;
  *(__n128 *)(v15 + 944) = result;
  *(_OWORD *)(v15 + 960) = v13;
  return result;
}

__n128 sub_1B1815014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 result)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  simd_float4 v36;
  simd_float4 v37;
  simd_float4 v38;
  float32x4_t v39;
  simd_float4 v40;
  simd_float4 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  simd_float4x4 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  simd_float4x4 v60;
  __int128 v61;
  simd_float4x4 v62[2];
  uint64_t v63;
  simd_float4x4 v64;

  v63 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 550))
  {
    v61 = *(_OWORD *)(a1 + 256);
    *(_OWORD *)(a1 + 272) = v61;
    v10 = sub_1B1814768((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    memset(&v60, 0, sizeof(v60));
    sub_1B186BDB8((uint64_t)v10, (uint64_t)&v60, v11, v12, v13, v14, v15, v16);
    v64 = __invert_f4(v60);
    v23 = 0;
    v60 = v64;
    v62[0].columns[0] = (simd_float4)xmmword_1B2244DB0;
    v62[0].columns[1] = (simd_float4)xmmword_1B2244DD0;
    memset(&v52, 0, 48);
    v62[0].columns[2] = (simd_float4)xmmword_1B2246580;
    do
    {
      v52.columns[v23] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2246590, COERCE_FLOAT(*(_OWORD *)&v62[0].columns[v23])), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v62[0].columns[v23].f32, 1), (float32x4_t)xmmword_1B22465A0, (float32x4_t)v62[0].columns[v23], 2);
      ++v23;
    }
    while (v23 != 3);
    v24 = 0;
    v62[0].columns[0] = v52.columns[0];
    v62[0].columns[1] = v52.columns[1];
    v62[0].columns[2] = v52.columns[2];
    memset(&v52, 0, 48);
    do
    {
      v52.columns[v24] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)&v62[0].columns[v24])), (float32x4_t)xmmword_1B22465B0, *(float32x2_t *)v62[0].columns[v24].f32, 1), (float32x4_t)xmmword_1B2244D90, (float32x4_t)v62[0].columns[v24], 2);
      ++v24;
    }
    while (v24 != 3);
    v25 = 0;
    v26 = (float32x4_t)v52.columns[0];
    v27 = (float32x4_t)v52.columns[1];
    v26.i32[3] = 0;
    v28 = (float32x4_t)v52.columns[2];
    v27.i32[3] = 0;
    v28.i32[3] = 0;
    v62[0] = v64;
    memset(&v52, 0, sizeof(v52));
    do
    {
      v52.columns[v25] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)&v62[0].columns[v25])), v27, *(float32x2_t *)v62[0].columns[v25].f32, 1), v28, (float32x4_t)v62[0].columns[v25], 2), (float32x4_t)xmmword_1B2244E20, (float32x4_t)v62[0].columns[v25], 3);
      ++v25;
    }
    while (v25 != 4);
    v29 = 0;
    v30 = (float32x4_t)v52.columns[3];
    v60 = v52;
    v62[0].columns[0] = (simd_float4)xmmword_1B2244DB0;
    v62[0].columns[1] = (simd_float4)xmmword_1B2244DD0;
    v62[0].columns[2] = (simd_float4)xmmword_1B2246580;
    memset(&v52, 0, 48);
    do
    {
      v52.columns[v29] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B22465C0, COERCE_FLOAT(*(_OWORD *)&v62[0].columns[v29])), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v62[0].columns[v29].f32, 1), (float32x4_t)xmmword_1B22465D0, (float32x4_t)v62[0].columns[v29], 2);
      ++v29;
    }
    while (v29 != 3);
    v31 = 0;
    v62[0].columns[0] = v52.columns[0];
    v62[0].columns[1] = v52.columns[1];
    v62[0].columns[2] = v52.columns[2];
    memset(&v52, 0, 48);
    do
    {
      v52.columns[v31] = (simd_float4)vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(_OWORD *)&v62[0].columns[v31])), (float32x4_t)xmmword_1B22465B0, *(float32x2_t *)v62[0].columns[v31].f32, 1), (float32x4_t)xmmword_1B2244D90, (float32x4_t)v62[0].columns[v31], 2);
      ++v31;
    }
    while (v31 != 3);
    v32 = 0;
    v33 = (float32x4_t)v52.columns[0];
    v34 = (float32x4_t)v52.columns[1];
    v35 = (float32x4_t)v52.columns[2];
    v33.i32[3] = 0;
    v34.i32[3] = 0;
    v35.i32[3] = 0;
    v62[0] = v64;
    memset(&v52, 0, sizeof(v52));
    do
    {
      v52.columns[v32] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(*(_OWORD *)&v62[0].columns[v32])), v34, *(float32x2_t *)v62[0].columns[v32].f32, 1), v35, (float32x4_t)v62[0].columns[v32], 2), (float32x4_t)xmmword_1B2244E20, (float32x4_t)v62[0].columns[v32], 3);
      ++v32;
    }
    while (v32 != 4);
    v36 = v52.columns[0];
    v37 = v52.columns[1];
    v38 = v52.columns[2];
    v60.columns[3] = (simd_float4)vaddq_f32(v30, (float32x4_t)xmmword_1B22465E0);
    v39 = vaddq_f32((float32x4_t)v52.columns[3], (float32x4_t)xmmword_1B22465F0);
    v40 = v60.columns[1];
    *(simd_float4 *)(a1 + 1968) = v60.columns[0];
    *(simd_float4 *)(a1 + 1984) = v40;
    v41 = v60.columns[3];
    *(simd_float4 *)(a1 + 2000) = v60.columns[2];
    *(simd_float4 *)(a1 + 2016) = v41;
    *(simd_float4 *)(a1 + 2032) = v36;
    *(simd_float4 *)(a1 + 2048) = v37;
    *(simd_float4 *)(a1 + 2064) = v38;
    *(float32x4_t *)(a1 + 2080) = v39;
    v58 = 0u;
    v59 = 0u;
    v56 = 0u;
    v57 = 0u;
    v54 = 0u;
    v55 = 0u;
    v53 = 0u;
    memset(&v52, 0, sizeof(v52));
    sub_1B17B33F4((uint64_t)v10, (uint64_t)&v52, v17, v18, v19, v20, v21, v22);
    v48 = sub_1B18667B4((unsigned __int8 *)&v52, (uint64_t)&v61, v42, v43, v44, v45, v46, v47);
    result = *(__n128 *)v48;
    v49 = *((_OWORD *)v48 + 1);
    v50 = *((_OWORD *)v48 + 2);
    v51 = *((_OWORD *)v48 + 3);
    *(_OWORD *)(a1 + 976) = v50;
    *(_OWORD *)(a1 + 992) = v51;
    *(__n128 *)(a1 + 944) = result;
    *(_OWORD *)(a1 + 960) = v49;
    *(__n128 *)(a1 + 1008) = result;
    *(_OWORD *)(a1 + 1024) = v49;
    *(_OWORD *)(a1 + 1056) = v51;
    *(_OWORD *)(a1 + 1040) = v50;
  }
  return result;
}

__n128 sub_1B181537C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 0x10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"index < CFXRenderingEyeMaxCount");
  return *(__n128 *)(a1 + 16 * a2 + 256);
}

void sub_1B18153D0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __n128 v11;

  if (a2 >= 0x10)
  {
    v11 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"index < CFXRenderingEyeMaxCount");
    a9 = v11;
  }
  *(__n128 *)(a1 + 16 * a2 + 256) = a9;
}

void sub_1B181542C(uint64_t a1, void *key, void *value, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFDictionary *Mutable;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)value, a4, a5, a6, a7, a8, (uint64_t)"context");
  Mutable = *(__CFDictionary **)(a1 + 832);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 832) = Mutable;
  }
  if (value)
    CFDictionarySetValue(Mutable, key, value);
  else
    CFDictionaryRemoveValue(Mutable, key);
}

void sub_1B18154C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  *(_BYTE *)(a1 + 214) = a2;
}

void sub_1B1815510(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  *(_BYTE *)(a1 + 213) = a2 != 0;
}

uint64_t sub_1B1815564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  return *(unsigned __int8 *)(a1 + 213);
}

void sub_1B18155AC(uint64_t *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  sub_1B1813ED0(a1, a2, a3, a4, a5, a6, a7, a8);
  if (a2)
  {
    if (!sub_1B187A934((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v18, v19, v20, v21, v22, v23, (uint64_t)"root");
    v24 = sub_1B187C160((uint64_t)a2, v17, v18, v19, v20, v21, v22, v23);
    sub_1B181415C((uint64_t)a1, v24, v25, v26, v27, v28, v29, v30);
    sub_1B19AAB5C(a1[523]);
    sub_1B194F7E4(a1, (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_1B181568C, CFSTR("kCFXNotificationEngineContextInvalidatePasses"), a2, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
  else
  {
    sub_1B194F838(a1, CFSTR("kCFXNotificationEngineContextInvalidatePasses"), 0);
  }
}

uint64_t sub_1B181568C(int a1, uint64_t *a2, int a3, int a4, CFDictionaryRef theDict)
{
  const void *Value;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!theDict)
    return sub_1B19AAB5C(a2[523]);
  Value = CFDictionaryGetValue(theDict, CFSTR("kCameraEffectKey"));
  v8 = CFDictionaryGetValue(theDict, CFSTR("kCameraKey"));
  result = (uint64_t)sub_1B1814768(a2, v9, v10, v11, v12, v13, v14, v15);
  if (result)
  {
    result = (uint64_t)sub_1B186CFA8(result, v17, v18, v19, v20, v21, v22, v23);
    if (result)
    {
      v24 = result;
      if (!Value || (result = sub_1B1865728((_QWORD *)result, (uint64_t)Value), (_DWORD)result))
      {
        if (!v8 || v8 == (const void *)v24)
          return sub_1B19AAB5C(a2[523]);
      }
    }
  }
  return result;
}

uint64_t sub_1B1815734(uint64_t a1, const char *a2)
{
  uint64_t v4;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 224);
  if (!v4)
  {
    v4 = objc_msgSend_generatorWithProfile_allowingHotReload_(VFXCommonProfileProgramGenerator, a2, 0, 0);
    *(_QWORD *)(a1 + 224) = v4;
  }
  return MEMORY[0x1E0DE7D20](v4, sel_programWithHashCode_engineContext_trackedResource_introspectionDataPtr_, a2, a1);
}

uint64_t sub_1B18157A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  *(_QWORD *)(a1 + 224) = 0;
  return sub_1B1813FE4(a1, 0, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B18157F0(uint64_t result, double a2)
{
  *(double *)(result + 896) = a2;
  return result;
}

uint64_t sub_1B18157F8(uint64_t result, double a2)
{
  *(double *)(result + 904) = a2;
  return result;
}

double sub_1B1815800(uint64_t a1)
{
  return *(double *)(a1 + 904);
}

uint64_t sub_1B1815808(uint64_t result, double a2)
{
  *(double *)(result + 912) = a2;
  return result;
}

double sub_1B1815810(uint64_t a1)
{
  return *(double *)(a1 + 912);
}

uint64_t sub_1B1815818(uint64_t a1)
{
  return *(unsigned int *)(a1 + 920);
}

CFTypeRef sub_1B1815820(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 168);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 168) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 168) = result;
  }
  return result;
}

uint64_t sub_1B1815870(uint64_t a1)
{
  return *(_QWORD *)(a1 + 168);
}

uint64_t sub_1B1815878(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!*(_QWORD *)(a1 + 856))
  {
    v2 = (const void *)sub_1B19077CC(0, 1, 1, 0, 2.0, -2.0, 0.0);
    v10 = sub_1B17B2334((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);
    *(_QWORD *)(a1 + 856) = v10;
    sub_1B193E5B0(v10, CFSTR("Quad"), v11, v12, v13, v14, v15, v16);
    if (v2)
      CFRelease(v2);
  }
  return *(_QWORD *)(a1 + 856);
}

uint64_t sub_1B18158E4(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)(result + 240) = a2;
  *(_QWORD *)(result + 248) = a3;
  return result;
}

double sub_1B18158EC(float32x4_t *a1)
{
  float32x4_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v25;
  float32x4_t v26;

  v1 = a1[15];
  v2 = a1[1].i64[0];
  if (v2)
  {
    v26 = v1;
    v3 = sub_1B187B0A0(v2, 0);
    if (v3 && (v11 = v3, (v12 = (float32x4_t *)sub_1B1841910(v3, v4, v5, v6, v7, v8, v9, v10)) != 0))
    {
      v25 = *v12;
      v20 = sub_1B1841E14(v11, v13, v14, v15, v16, v17, v18, v19);
      if (v20 == 1.0)
      {
        v22 = v25;
      }
      else
      {
        v21 = vmulq_n_f32(v25, v20);
        v21.i32[3] = v25.i32[3];
        v22 = v21;
      }
      v23 = vmulq_laneq_f32(v22, v22, 3);
      v23.i32[3] = v22.i32[3];
      v1.i64[0] = vaddq_f32(v23, vmulq_n_f32(v26, 1.0 - v22.f32[3])).u64[0];
    }
    else
    {
      v1.i64[0] = v26.i64[0];
    }
  }
  return *(double *)v1.i64;
}

uint64_t sub_1B181598C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v10 = sub_1B187B0A0(result, 0);
    return v10 && sub_1B1841A40(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return result;
}

void sub_1B18159F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
  *(_BYTE *)(a1 + 925) = 1;
  *(_QWORD *)(a1 + 928) = a2;
}

uint64_t sub_1B1815A4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 925);
}

uint64_t sub_1B1815A54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 928);
}

uint64_t sub_1B1815A5C(uint64_t a1, int a2)
{
  return a1 + ((uint64_t)a2 << 10) + 944;
}

__n128 sub_1B1815A6C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v3 = a1 + ((uint64_t)a2 << 10);
  result = *(__n128 *)a3;
  v5 = *(_OWORD *)(a3 + 16);
  v6 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v3 + 976) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v3 + 992) = v6;
  *(__n128 *)(v3 + 944) = result;
  *(_OWORD *)(v3 + 960) = v5;
  return result;
}

uint64_t sub_1B1815A88(uint64_t result, char a2)
{
  *(_BYTE *)(result + 216) = a2;
  return result;
}

uint64_t sub_1B1815A90(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 216);
}

__n128 sub_1B1815A98(__n128 *a1)
{
  return a1[16];
}

__n128 *sub_1B1815AA0(__n128 *result, __n128 a2)
{
  result[16] = a2;
  return result;
}

double sub_1B1815AA8(uint64_t a1)
{
  return *(double *)(a1 + 528);
}

uint64_t sub_1B1815AB0(uint64_t result, double a2)
{
  *(double *)(result + 528) = a2;
  return result;
}

uint64_t sub_1B1815AB8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 544);
}

uint64_t sub_1B1815AC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 544) = a2;
  return result;
}

__n128 sub_1B1815AC8(__n128 *a1)
{
  return a1[32];
}

__n128 *sub_1B1815AD0(__n128 *result, __n128 a2)
{
  result[32] = a2;
  return result;
}

BOOL sub_1B1815AD8(uint64_t a1, int a2)
{
  return (a2 & ~*(_DWORD *)(a1 + 4168)) == 0;
}

id sub_1B1815AE8(uint64_t a1, const CFX::RG::Resource *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (*(_QWORD *)(a1 + 4160))
    return sub_1B19AAC90(*(_QWORD *)(a1 + 4184), a2);
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: CFXEngineContextGetTextureFromHandle - no render context"), a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

id sub_1B1815B20(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (*(_QWORD *)(a1 + 4160))
    return sub_1B19AAB7C(*(_QWORD *)(a1 + 4184), a2, a3, a4);
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: CFXEngineContextGetTextureWithName"), a3, a4, a5, a6, a7, a8, vars0);
  return 0;
}

uint64_t sub_1B1815B58(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v21;

  v11 = sub_1B1842028(a2, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v11)
    v11 = sub_1B180CF10();
  *a3 = v11;
  v19 = *(void **)(a1 + 4160);
  if (v19)
    return objc_msgSend_textureForMaterialProperty_(v19, v12, a2, v14);
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: CFXEngineContextGetTextureForMaterialProperty"), v13, v14, v15, v16, v17, v18, v21);
  return 0;
}

uint64_t sub_1B1815BC8(unsigned int a1)
{
  if (a1 > 7)
    return 0;
  else
    return dword_1B224668C[a1];
}

void *sub_1B1815BE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *result;

  result = *(void **)(a1 + 4160);
  if (result)
    return (void *)objc_msgSend_currentFrameIndex(result, a2, a3, a4);
  return result;
}

uint64_t sub_1B1815C04(uint64_t a1)
{
  return 8 * *(unsigned __int8 *)(a1 + 215);
}

uint64_t sub_1B1815C10(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 548))
    return 2;
  else
    return 1;
}

CFTypeRef sub_1B1815C24(uint64_t a1, CFTypeRef cf, unsigned int a3)
{
  uint64_t v3;
  CFTypeRef result;
  _QWORD *v6;

  v3 = a1 + 8 * a3;
  result = *(CFTypeRef *)(v3 + 4024);
  if (result != cf)
  {
    v6 = (_QWORD *)(v3 + 4024);
    if (result)
    {
      CFRelease(result);
      *v6 = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *v6 = result;
  }
  return result;
}

uint64_t sub_1B1815C78(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4016) = a2;
  return result;
}

uint64_t sub_1B1815C80(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4016);
}

uint64_t sub_1B1815C88(uint64_t result, float a2)
{
  if (a2 != 0.0)
    *(float *)(result + 204) = a2;
  return result;
}

float sub_1B1815C9C(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t sub_1B1815CA4(uint64_t result, float a2)
{
  if (*(float *)(result + 208) != a2)
  {
    *(float *)(result + 208) = a2;
    return sub_1B19AAB5C(*(_QWORD *)(result + 4184));
  }
  return result;
}

float sub_1B1815CC0(uint64_t a1)
{
  return *(float *)(a1 + 208);
}

CFIndex sub_1B1815CC8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"context");
  result = a1[2];
  if (result)
  {
    v10 = sub_1B187B140(result, a2, a3, a4, a5, a6, a7, a8);
    v18 = sub_1B1820C0C(v10, v11, v12, v13, v14, v15, v16, v17);
    v26 = sub_1B19CFAB4(v18, v19, v20, v21, v22, v23, v24, v25);
    sub_1B17C7AE8(a1[19], v26);
    v27 = a1[20];
    sub_1B18D3750(v27, v26, v28, v29, v30, v31, v32, v33);
    return sub_1B18D3870(v27, v10, v34, v35, v36, v37, v38, v39);
  }
  return result;
}

void sub_1B1815D68(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  nullsub_16(*(_QWORD *)(a1 + 4184));
  sub_1B19AA81C(*(_QWORD *)(a1 + 4184), v2, v3, v4);
}

uint64_t sub_1B1815D90(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4172) = *(_BYTE *)(result + 4172) & 0xFE | a2;
  return result;
}

uint64_t sub_1B1815DA8(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4172) & 1;
}

uint64_t sub_1B1815DB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 4176) = a2;
  return result;
}

uint64_t sub_1B1815DC0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 4176);
}

uint64_t sub_1B1815DC8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4180) = a2;
  return result;
}

uint64_t sub_1B1815DD4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4180);
}

double sub_1B1815DE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  if (*(float *)(a1 + 264) <= 0.0 || *(float *)(a1 + 268) <= 0.0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong viewport"), a3, a4, a5, a6, a7, a8, (uint64_t)"viewport.z > 0 && viewport.w > 0");
  *(_QWORD *)&result = 1065353216;
  return result;
}

uint64_t sub_1B1815FE8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4256) = *(_BYTE *)(result + 4256) & 0xFE | a2;
  return result;
}

uint64_t sub_1B1816000(uint64_t a1)
{
  return *(_BYTE *)(a1 + 4256) & 1;
}

float32x2_t sub_1B1816010(float32x2_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float32x2_t result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = 0;
  if ((a1[532].i8[0] & 1) != 0 && a1[33].f32[0] != 0.0 && a1[33].f32[1] != 0.0)
  {
    v6 = objc_msgSend_currentFrameIndex(*(void **)&a1[520], a2, a3, a4, 0.0) + (int)a2;
    v7 = v6 & 7;
    v9 = -v6;
    v8 = v9 < 0;
    v10 = v9 & 7;
    if (v8)
      v11 = v7;
    else
      v11 = -v10;
    return vdiv_f32(a1[v11 + 524], a1[33]);
  }
  return result;
}

uint64_t sub_1B1816084(uint64_t a1)
{
  return *(_QWORD *)(a1 + 176);
}

uint64_t sub_1B181608C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 4280) = a2;
  return result;
}

uint64_t sub_1B1816098(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 4280);
}

void sub_1B18160A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  uint64_t v30;
  _QWORD *v31;
  const void *v32;

  if (a1)
  {
    sub_1B19AA7F0(a1[523]);
    sub_1B1949918((unint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
    sub_1B194F838(a1, CFSTR("kCFXNotificationEngineContextInvalidatePasses"), 0);
    v15 = a1[2];
    if (v15)
      sub_1B18797FC(v15, (uint64_t)a1, v9, v10, v11, v12, v13, v14);
    v16 = (const void *)a1[16];
    if (v16)
    {
      CFRelease(v16);
      a1[16] = 0;
    }
    v17 = (const void *)a1[17];
    if (v17)
    {
      CFRelease(v17);
      a1[17] = 0;
    }
    v18 = (const void *)a1[2];
    if (v18)
    {
      CFRelease(v18);
      a1[2] = 0;
    }
    v19 = (const void *)a1[3];
    if (v19)
    {
      CFRelease(v19);
      a1[3] = 0;
    }
    v20 = (const void *)a1[4];
    if (v20)
    {
      CFRelease(v20);
      a1[4] = 0;
    }
    v21 = (const void *)a1[5];
    if (v21)
    {
      CFRelease(v21);
      a1[5] = 0;
    }
    v22 = (const void *)a1[104];
    if (v22)
    {
      CFRelease(v22);
      a1[104] = 0;
    }
    v23 = (const void *)a1[6];
    if (v23)
    {
      CFRelease(v23);
      a1[6] = 0;
    }
    v24 = (const void *)a1[107];
    if (v24)
    {
      CFRelease(v24);
      a1[107] = 0;
    }
    v25 = (const void *)a1[22];
    if (v25)
    {
      CFRelease(v25);
      a1[22] = 0;
    }
    v26 = (const void *)a1[520];
    if (v26)
    {
      CFRelease(v26);
      a1[520] = 0;
    }
    v27 = (const void *)a1[21];
    if (v27)
    {
      CFRelease(v27);
      a1[21] = 0;
    }
    v28 = (const void *)a1[19];
    if (v28)
    {
      CFRelease(v28);
      a1[19] = 0;
    }
    v29 = (const void *)a1[20];
    if (v29)
    {
      CFRelease(v29);
      a1[20] = 0;
    }
    CStackAllocatorDestroy(a1[18]);
    v30 = 0;
    v31 = a1 + 503;
    do
    {
      v32 = (const void *)v31[v30];
      if (v32)
      {
        CFRelease(v32);
        v31[v30] = 0;
      }
      ++v30;
    }
    while (v30 != 16);
    a1[519] = 0;
  }
}

CFStringRef sub_1B1816218(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXEngineContext>"));
}

CFStringRef sub_1B1816238(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXEngineContext>"));
}

uint64_t sub_1B181684C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CFX::RG::Resource *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[5];

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65760);
  if ((v9 & 1) == 0)
  {
    v21 = a2;
    v22 = a3;
    v20 = __cxa_guard_acquire(&qword_1EEF65760);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v21;
    a3 = v22;
    if (v20)
    {
      qword_1EEF65758 = (uint64_t)sub_1B18173BC("CHROMATIC_TRANSFORM_COMPISTE_BLOOM_PASS", 0x27u);
      __cxa_guard_release(&qword_1EEF65760);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v21;
      a3 = v22;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v8[235], 0);
  *(_QWORD *)a1 = &off_1E63D04D8;
  v10 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 392) = v10;
  v11 = *(_OWORD *)(a5 + 48);
  v12 = *(_OWORD *)(a5 + 64);
  v13 = *(_OWORD *)(a5 + 80);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 408) = v11;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 472) = 0;
  v14 = *(_OWORD *)(a5 + 24);
  v15 = *(_OWORD *)(a5 + 40);
  v16 = *(_OWORD *)(a5 + 56);
  v17 = *(_OWORD *)(a5 + 88);
  v23[3] = *(_OWORD *)(a5 + 72);
  v23[4] = v17;
  v23[1] = v15;
  v23[2] = v16;
  v23[0] = v14;
  v18 = sub_1B179BD38(a4, (uint64_t)"CHROMATIC_TRANSFORM_COMPOSITE_BLOOM_OUTPUT", (uint64_t)v23);
  *(_QWORD *)(a1 + 488) = v18;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v18);
  return a1;
}

void sub_1B1816974(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B1816988(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
  a1[58] = v5;
  if (!v5)
  {
    a1[58] = (uint64_t)sub_1B1816A14(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
    v13 = (void *)sub_1B1813BC4(a1[46], v6, v7, v8, v9, v10, v11, v12);
    v17 = (void *)objc_msgSend_resourceManager(v13, v14, v15, v16);
    v18 = a1[58];
    v21 = objc_msgSend_newComputePipelineStateWithFunctionName_(v17, v19, (uint64_t)CFSTR("chromatic_transform_composite_bloom"), v20);
    v22 = *(void **)(v18 + 16);
    if (v22 != (void *)v21)
    {
      v23 = v21;
      if (v22)

      *(_QWORD *)(v18 + 16) = v23;
    }
  }
}

_QWORD *sub_1B1816A14(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63D04B8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B1816A88(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  id Texture;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  float v47;

  v5 = *a3;
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 472));
  v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 480));
  v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 488));
  v16 = sub_1B186CFA8(*(_QWORD *)(a1 + 376), v9, v10, v11, v12, v13, v14, v15);
  v24 = sub_1B186483C((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
  if (v24)
    v32 = sub_1B18E8CD4(v24, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
  else
    v32 = 0.0;
  v47 = v32;
  objc_msgSend_setBytes_length_atIndex_(v5, v25, (uint64_t)&v47, 4, 0);
  objc_msgSend_setTexture_atIndex_(v5, v33, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v5, v34, (uint64_t)v7, 1);
  objc_msgSend_setTexture_atIndex_(v5, v35, (uint64_t)v8, 2);
  v42 = *(_QWORD *)(a1 + 464);
  v43 = *(_QWORD *)(v42 + 16);
  if (!v43)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v36, v37, v38, v39, v40, v41, (uint64_t)"_ptr != NULL");
    v43 = *(_QWORD *)(v42 + 16);
  }
  v44 = sub_1B18FD774(v43);
  return objc_msgSend_dispatch_onTexture2D_(v5, v45, v44, (uint64_t)v8);
}

uint64_t sub_1B1816B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _BYTE *v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  CFX::RG::Resource *v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[5];

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65770);
  if ((v9 & 1) == 0)
  {
    v22 = a2;
    v23 = a3;
    v21 = __cxa_guard_acquire(&qword_1EEF65770);
    v8 = &unk_1EEF65000;
    a2 = v22;
    a3 = v23;
    if (v21)
    {
      byte_1EEF65768 = 1;
      __cxa_guard_release(&qword_1EEF65770);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v22;
      a3 = v23;
    }
  }
  if (v8[1896])
    v10 = 0x41EC325388DE9425;
  else
    v10 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v10, 0);
  *(_QWORD *)a1 = &off_1E63CF828;
  v11 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  *(_OWORD *)(a1 + 392) = v11;
  v12 = *(_OWORD *)(a5 + 48);
  v13 = *(_OWORD *)(a5 + 64);
  v14 = *(_OWORD *)(a5 + 80);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 440) = v14;
  *(_OWORD *)(a1 + 408) = v12;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v15 = *(_OWORD *)(a5 + 24);
  v16 = *(_OWORD *)(a5 + 40);
  v17 = *(_OWORD *)(a5 + 56);
  v18 = *(_OWORD *)(a5 + 88);
  v24[3] = *(_OWORD *)(a5 + 72);
  v24[4] = v18;
  v24[1] = v16;
  v24[2] = v17;
  v24[0] = v15;
  v19 = sub_1B179BD38(a4, (uint64_t)"CHROMATIC_TRANSFORM_OUTPUT", (uint64_t)v24);
  *(_QWORD *)(a1 + 480) = v19;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v19);
  return a1;
}

void sub_1B1816CC4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B1816CD8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  id v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  char v60;
  int v61;

  v10 = sub_1B186CFA8(a1[47], a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B1864D3C((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  v26 = v18;
  if (v18)
  {
    v61 = sub_1B18EB7AC(v18, v19, v20, v21, v22, v23, v24, v25);
    LODWORD(v26) = sub_1B18EBC24(v26, v27, v28, v29, v30, v31, v32, v33);
    v34 = v61;
  }
  else
  {
    v34 = 1;
    v61 = 1;
  }
  v60 = v26;
  v35 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v36 = 0x9DDFEA08EB382D69
      * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v34)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v34)));
  v37 = 0x9DDFEA08EB382D69 * (v36 ^ (v36 >> 47));
  v38 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v37 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                             * (v37 ^ v26)))) ^ ((0x9DDFEA08EB382D69 * (v37 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v26)) >> 47) ^ (0x9DDFEA08EB382D69 * (v37 ^ v26)))) >> 47));
  v39 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v38);
  a1[58] = v39;
  if (!v39)
  {
    a1[58] = (uint64_t)sub_1B1816E48(*(CFX::CrossFrameResourceManager **)(a2 + 32), v38);
    v47 = (void *)sub_1B1813BC4(a1[46], v40, v41, v42, v43, v44, v45, v46);
    v51 = (void *)objc_msgSend_resourceManager(v47, v48, v49, v50);
    v52 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v52, v53, (uint64_t)&v61, 29, CFSTR("sample_count"));
    objc_msgSend_setConstantValue_type_withName_(v52, v54, (uint64_t)&v60, 53, CFSTR("mask_enabled"));
    v55 = a1[58];
    v57 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v51, v56, (uint64_t)CFSTR("chromatic_transform"), (uint64_t)v52);
    v58 = *(void **)(v55 + 16);
    if (v58 != (void *)v57)
    {
      v59 = v57;
      if (v58)

      *(_QWORD *)(v55 + 16) = v59;
    }

  }
}

_QWORD *sub_1B1816E48(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF808;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B1816EBC(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  float v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  id Texture;
  id v124;
  const char *v125;
  const char *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  float v139;
  float32x2_t v140;
  float v141;
  float v142;
  float32x2_t v143;
  float v144;
  float v145;
  float32x2_t v146;
  __n128 v147;
  __n128 v148;
  __n128 v149;
  double v150;
  float v151;
  float v152;

  v10 = *a3;
  v11 = sub_1B186CFA8(*(_QWORD *)(a1 + 376), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v26 = (__n128 *)sub_1B1864D3C((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
  if (!v26)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v20, v21, v22, v23, v24, v25, (uint64_t)"chromaticTransform");
  v139 = sub_1B18E9308((uint64_t)v26, v19, v20, v21, v22, v23, v24, v25);
  v140 = vmul_n_f32(vmul_f32(COERCE_FLOAT32X2_T(sub_1B18EB8C8((uint64_t)v26, v27, v28, v29, v30, v31, v32, v33)), (float32x2_t)0xC000000040000000), v139);
  v34 = 1.0 - v139;
  v42 = v34 + (float)(v139 * sub_1B18E97B8((uint64_t)v26, v35, v36, v37, v38, v39, v40, v41));
  v141 = v42;
  v50 = (float)(sub_1B18E9854((uint64_t)v26, v43, v44, v45, v46, v47, v48, v49) / 180.0) * 3.14159265 * v139;
  v142 = v50;
  v143 = vmul_n_f32(COERCE_FLOAT32X2_T(sub_1B18EB964((uint64_t)v26, v51, v52, v53, v54, v55, v56, v57)), v139);
  v65 = v34 + (float)(v139 * sub_1B18EA708((uint64_t)v26, v58, v59, v60, v61, v62, v63, v64));
  v144 = v65;
  v73 = (float)(sub_1B18EA7A4((uint64_t)v26, v66, v67, v68, v69, v70, v71, v72) / 180.0) * 3.14159265 * v139;
  v145 = v73;
  v146 = vmul_n_f32(COERCE_FLOAT32X2_T(sub_1B18EBA00((uint64_t)v26, v74, v75, v76, v77, v78, v79, v80)), v139);
  v147 = sub_1B18EAB6C(v26, v81, v82, v83, v84, v85, v86, v87);
  v148 = sub_1B18EBA9C(v26, v88, v89, v90, v91, v92, v93, v94);
  v149 = sub_1B18EACA0(v26, v95, v96, v97, v98, v99, v100, v101);
  v150 = sub_1B18EBB34((uint64_t)v26, v102, v103, v104, v105, v106, v107, v108);
  v151 = sub_1B18E9CA0((uint64_t)v26, v109, v110, v111, v112, v113, v114, v115);
  v152 = sub_1B18E9DE0((uint64_t)v26, v116, v117, v118, v119, v120, v121, v122);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 472));
  v124 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 480));
  objc_msgSend_setBytes_length_atIndex_(v10, v125, (uint64_t)&v139, 112, 0);
  objc_msgSend_setTexture_atIndex_(v10, v126, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v10, v127, (uint64_t)v124, 1);
  v134 = *(_QWORD *)(a1 + 464);
  v135 = *(_QWORD *)(v134 + 16);
  if (!v135)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v128, v129, v130, v131, v132, v133, (uint64_t)"_ptr != NULL");
    v135 = *(_QWORD *)(v134 + 16);
  }
  v136 = sub_1B18FD774(v135);
  return objc_msgSend_dispatch_onTexture2D_(v10, v137, v136, (uint64_t)v124);
}

uint64_t *sub_1B1817100(CFX::RG *a1, CFX::RG::RenderGraphContext *a2, CFX::RG::RenderGraphBuilder **a3, CFX::RG::Resource *a4)
{
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  const char *v13;
  const CFX::RG::Resource *v14;
  __int128 *v15;
  __int128 v16;
  __int128 v17;
  __int128 *v18;
  __int128 v19;
  __int128 v20;
  uint64_t *v21;
  CFX::RG::Resource *v22;
  __int128 v23;
  uint64_t *v24;
  uint64_t *v25;
  CFX::RG::Resource *v26;
  const char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  _BYTE v45[160];
  _OWORD v46[10];

  v8 = *((_OWORD *)a3 + 8);
  v46[6] = *((_OWORD *)a3 + 7);
  v46[7] = v8;
  v9 = *((_OWORD *)a3 + 10);
  v46[8] = *((_OWORD *)a3 + 9);
  v46[9] = v9;
  v10 = *((_OWORD *)a3 + 4);
  v46[2] = *((_OWORD *)a3 + 3);
  v46[3] = v10;
  v11 = *((_OWORD *)a3 + 6);
  v46[4] = *((_OWORD *)a3 + 5);
  v46[5] = v11;
  v12 = *((_OWORD *)a3 + 2);
  v46[0] = *((_OWORD *)a3 + 1);
  v46[1] = v12;
  CFX::RG::TextureDescriptorReference::withSampleCount(v46, 1, (uint64_t)v45);
  v14 = (const CFX::RG::Resource *)CFX::RG::copyIfNeeded(a1, a3[23], a4, (CFX::RG::Pass *)v45, 0, v13);
  v15 = (__int128 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v14);
  v16 = v15[3];
  v42 = v15[2];
  v43 = v16;
  v44 = v15[4];
  v17 = v15[1];
  v40 = *v15;
  v41 = v17;
  if (a3[22])
  {
    v18 = (__int128 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v14);
    v19 = v18[4];
    v38 = v18[3];
    v39 = v19;
    v20 = v18[1];
    v37 = v18[2];
    v35 = *v18;
    v36 = v20;
    v28 = "ChromaticTransformCompositeBloomPass";
    v29 = *(_OWORD *)a3;
    v30 = v35;
    v31 = v20;
    v32 = v37;
    v33 = v38;
    v34 = v19;
    v21 = (uint64_t *)sub_1B18172C4((uint64_t *)a1, (uint64_t *)a1, (uint64_t)&v28);
    v21[59] = (uint64_t)v14;
    CFX::RG::Pass::readFrom(v21, v14);
    v22 = (CFX::RG::Resource *)*((_QWORD *)a3[22] + 93);
    v21[60] = (uint64_t)v22;
    CFX::RG::Pass::readFrom(v21, v22);
    CFX::RG::Pass::dependsOn(v21, a3[22]);
  }
  else
  {
    v21 = 0;
  }
  v28 = "ChromaticTransformPass";
  v23 = *(_OWORD *)a3;
  v31 = v41;
  v32 = v42;
  v33 = v43;
  v34 = v44;
  v29 = v23;
  v30 = v40;
  v24 = (uint64_t *)sub_1B1817318((uint64_t *)a1, (uint64_t *)a1, (uint64_t)&v28);
  v25 = v24;
  if (a3[22])
  {
    v26 = (CFX::RG::Resource *)v21[61];
    v24[59] = (uint64_t)v26;
    CFX::RG::Pass::readFrom(v24, v26);
    CFX::RG::Pass::dependsOn(v25, (CFX::RG::Pass *)v21);
  }
  else
  {
    v24[59] = (uint64_t)v14;
    CFX::RG::Pass::readFrom(v24, v14);
  }
  return v25;
}

uint64_t sub_1B18172C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B1817584(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B1817318(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18175E0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B1817370(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B1817398(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B18173BC(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B1817484(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63D04B8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B18174BC(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63D04B8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B1817504(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF808;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B181753C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF808;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1817584(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1F0u, 8u);
  return sub_1B181684C(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B18175E0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1E8u, 8u);
  return sub_1B1816B98(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B181763C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  CFX::RG::Resource *v22;
  int v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  _OWORD v28[10];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  char v37;
  char v38;
  uint64_t v39;
  int v40;
  __int16 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v29 = a2;
  *((_QWORD *)&v29 + 1) = a3;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65780);
  if ((v9 & 1) == 0)
  {
    v26 = a2;
    v24 = __cxa_guard_acquire(&qword_1EEF65780);
    a2 = v26;
    if (v24)
    {
      qword_1EEF65778 = (uint64_t)sub_1B1819A28("SSR_DEPTH_BACKFACE_PASS", 0x17u);
      __cxa_guard_release(&qword_1EEF65780);
      a2 = v26;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, qword_1EEF65778, 0);
  *(_QWORD *)a1 = &off_1E63CF6D8;
  v10 = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(a1 + 416) = v10;
  v11 = *(_OWORD *)(a5 + 56);
  v12 = *(_OWORD *)(a5 + 72);
  v13 = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a5 + 88);
  *(_OWORD *)(a1 + 480) = v13;
  *(_OWORD *)(a1 + 432) = v11;
  *(_OWORD *)(a1 + 448) = v12;
  v14 = *(_OWORD *)(a5 + 120);
  v15 = *(_OWORD *)(a5 + 136);
  v16 = *(_OWORD *)(a5 + 168);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a5 + 152);
  *(_OWORD *)(a1 + 544) = v16;
  *(_OWORD *)(a1 + 496) = v14;
  *(_OWORD *)(a1 + 512) = v15;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)&v30 = *(_QWORD *)(a1 + 368);
  LOBYTE(v34) = 0;
  v35 = 0;
  v32 = 0;
  v31 = 0uLL;
  v36 = xmmword_1B2245710;
  v37 = *(_BYTE *)(a1 + 376);
  v38 = 2;
  v39 = 32;
  v40 = 1;
  v41 = 1;
  *(_QWORD *)(a1 + 384) = sub_1B17CA2A0(v29, *((uint64_t *)&v29 + 1), (uint64_t *)&v29, (uint64_t *)&v30, &v31);
  v17 = v29;
  v18 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)&v31 = 0;
  WORD4(v31) = 0;
  BYTE10(v31) = 0;
  v32 = 8;
  v33 = 0;
  v19 = atomic_load((unsigned __int8 *)&qword_1EEF65780);
  if ((v19 & 1) == 0)
  {
    v27 = v29;
    v25 = __cxa_guard_acquire(&qword_1EEF65780);
    v17 = v27;
    if (v25)
    {
      qword_1EEF65778 = (uint64_t)sub_1B1819A28("SSR_DEPTH_BACKFACE_PASS", 0x17u);
      __cxa_guard_release(&qword_1EEF65780);
      v17 = v27;
    }
  }
  v34 = qword_1EEF65778;
  v30 = v17;
  v20 = sub_1B179C1C0(&v30, 0x40u, 8u);
  sub_1B182CDF0(v20, v18, (uint64_t)&v31, *(_QWORD *)(a1 + 384));
  *(_QWORD *)(a1 + 392) = v21;
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a5 + 24), 1, (uint64_t)v28);
  v22 = sub_1B17A34D0(a4, (uint64_t)"BACKFACE_DEPTH", v28);
  *(_QWORD *)(a1 + 560) = v22;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v22, 0x200000002, -1);
  return a1;
}

void sub_1B18178AC(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B18178C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1B19610E0(*(__n128 **)(a1 + 384), (const char *)a2, a3, a4);
  sub_1B196142C(*(_QWORD *)(a1 + 384), v6, v7, v8, v9, v10, v11, v12);
  sub_1B1961820(*(_QWORD *)(a1 + 384));
  sub_1B1961A30(*(uint64_t **)(a1 + 384), *(const char **)a2, *(_QWORD *)(a2 + 8), v13);
}

void sub_1B1817908(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B182CE18(*(_QWORD *)(a1 + 392), a2, a3, a4);
}

void sub_1B1817910(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;

  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  objc_msgSend_setCullMode_(*(void **)(v15 + 16), v16, 1, v17);
  objc_msgSend_setLockCullMode_(*(void **)(v15 + 16), v18, 1, v19);
  sub_1B182D4E8(*(_QWORD *)(a1 + 392), a2, a3, 0);
}

uint64_t sub_1B1817974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  CFX::RG::Resource *v14;
  __int128 v15;
  uint64_t v16;
  float v17;
  CFX::RG::Resource *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  _BYTE v28[23];
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[31];
  float v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  _BYTE v42[23];
  uint64_t v43;
  char v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[31];
  int v48;
  uint64_t v49;
  int v50;

  v8 = atomic_load((unsigned __int8 *)&qword_1EEF65790);
  if ((v8 & 1) == 0)
  {
    v21 = a2;
    v22 = a3;
    v20 = __cxa_guard_acquire(&qword_1EEF65790);
    a2 = v21;
    a3 = v22;
    if (v20)
    {
      qword_1EEF65788 = (uint64_t)sub_1B1819A28("SSR_DOWNSAMPLE_PASS", 0x13u);
      __cxa_guard_release(&qword_1EEF65790);
      a2 = v21;
      a3 = v22;
    }
  }
  sub_1B18F7354(a1, a2, a3, a5, qword_1EEF65788, 0);
  *(_QWORD *)a1 = &off_1E63CF0F0;
  memcpy((void *)(a1 + 376), a5 + 2, 0x150uLL);
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_QWORD *)(a1 + 752) = 0;
  v37 = *(_OWORD *)(a1 + 384);
  v9 = *(_QWORD *)(a1 + 400);
  v41 = *(_OWORD *)(a1 + 417);
  *(_OWORD *)v42 = *(_OWORD *)(a1 + 433);
  v10 = *(_OWORD *)(a1 + 465);
  v11 = *(_OWORD *)(a1 + 481);
  v12 = *(_OWORD *)(a1 + 497);
  v49 = *(_QWORD *)(a1 + 532);
  v13 = *(_QWORD *)(a1 + 448);
  *(_OWORD *)&v47[15] = *(_OWORD *)(a1 + 512);
  *(_OWORD *)v47 = v12;
  v46 = v11;
  v45 = v10;
  v50 = *(_DWORD *)(a1 + 540);
  *(float *)&v10 = 1.0 / (float)*(unsigned int *)(a1 + 704);
  v38 = v9;
  v39 = 115;
  v40 = 1;
  *(_QWORD *)&v42[15] = v13;
  v43 = 3;
  v44 = 1;
  v48 = v10;
  v14 = sub_1B17A34D0(a4, (uint64_t)"COLOR_DOWNSAMPLE", &v37);
  *(_QWORD *)(a1 + 744) = v14;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v14);
  *(_QWORD *)&v28[15] = *(_QWORD *)(a1 + 608);
  v23 = *(_OWORD *)(a1 + 544);
  v27 = *(_OWORD *)(a1 + 577);
  v15 = *(_OWORD *)(a1 + 625);
  v16 = *(_QWORD *)(a1 + 560);
  *(_OWORD *)v28 = *(_OWORD *)(a1 + 593);
  *(_OWORD *)&v33[15] = *(_OWORD *)(a1 + 672);
  v31 = v15;
  *(_OWORD *)v33 = *(_OWORD *)(a1 + 657);
  v32 = *(_OWORD *)(a1 + 641);
  v35 = *(_QWORD *)(a1 + 692);
  v36 = *(_DWORD *)(a1 + 700);
  v17 = 1.0 / (float)*(unsigned int *)(a1 + 704);
  v24 = v16;
  v25 = 65;
  v26 = 1;
  v29 = 3;
  v30 = 1;
  v34 = v17;
  v18 = sub_1B17A34D0(a4, (uint64_t)"DEPTH_DOWNSAMPLE", &v23);
  *(_QWORD *)(a1 + 752) = v18;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v18);
  return a1;
}

void sub_1B1817BB4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B1817BCC(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ *(unsigned int *)(a1 + 704));
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
  *(_QWORD *)(a1 + 712) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 712) = sub_1B1817CD8(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
    v15 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v8, v9, v10, v11, v12, v13, v14);
    v19 = (void *)objc_msgSend_resourceManager(v15, v16, v17, v18);
    v26 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v26, v20, a1 + 704, 29, CFSTR("SSRDownSample"));
    v21 = *(_QWORD *)(a1 + 712);
    v23 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v19, v22, (uint64_t)CFSTR("vfx_ssr_downsample_depth"), (uint64_t)v26);
    v24 = *(void **)(v21 + 16);
    if (v24 != (void *)v23)
    {
      v25 = v23;
      if (v24)

      *(_QWORD *)(v21 + 16) = v25;
    }

  }
}

_QWORD *sub_1B1817CD8(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF0D0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B1817D4C(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  id Texture;
  id v7;
  id v8;
  id v9;
  id v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  float32x2_t v24;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  _QWORD v60[3];
  _QWORD v61[3];
  float32x2_t v62;
  _BYTE v63[4];
  float v64;
  float v65;

  v5 = *a3;
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 720));
  v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 728));
  v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 736));
  v9 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 744));
  v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 752));
  objc_msgSend_setTexture_atIndex_(v5, v11, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v5, v12, (uint64_t)v7, 1);
  objc_msgSend_setTexture_atIndex_(v5, v13, (uint64_t)v8, 2);
  objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v9, 3);
  objc_msgSend_setTexture_atIndex_(v5, v15, (uint64_t)v10, 4);
  v23 = *(const void **)(a1 + 376);
  if (!v23)
    v23 = sub_1B1814768(*(uint64_t **)(a1 + 368), v16, v17, v18, v19, v20, v21, v22);
  sub_1B17B33F4((uint64_t)v23, (uint64_t)v63, v17, v18, v19, v20, v21, v22);
  v24.f32[0] = v65 * v64;
  __asm { FMOV            V3.2S, #1.0 }
  _D3.f32[0] = v65 - v64;
  v24.f32[1] = v65;
  v62 = vdiv_f32(_D3, v24);
  objc_msgSend_setBytes_length_atIndex_(v5, v30, (uint64_t)&v62, 8, 0);
  v37 = *(_QWORD *)(a1 + 712);
  v38 = *(_QWORD *)(v37 + 16);
  if (!v38)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v31, v32, v33, v34, v35, v36, (uint64_t)"_ptr != NULL");
    v38 = *(_QWORD *)(v37 + 16);
  }
  v39 = (void *)sub_1B18FD774(v38);
  v43 = objc_msgSend_threadExecutionWidth(v39, v40, v41, v42);
  v47 = objc_msgSend_maxTotalThreadsPerThreadgroup(v39, v44, v45, v46) / v43;
  v51 = objc_msgSend_width(v9, v48, v49, v50);
  v55 = objc_msgSend_height(v9, v52, v53, v54);
  objc_msgSend_setComputePipelineState_(v5, v56, (uint64_t)v39, v57);
  v61[0] = v51;
  v61[1] = v55;
  v61[2] = 1;
  v60[0] = v43;
  v60[1] = v47;
  v60[2] = 1;
  return objc_msgSend_dispatchThreads_threadsPerThreadgroup_(v5, v58, (uint64_t)v61, (uint64_t)v60);
}

uint64_t sub_1B1817F0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v8;
  _BYTE *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  CFX::RG::Resource *v26;
  CFX::RG::Resource *v27;
  int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[31];
  float v42;
  uint64_t v43;
  int v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[31];
  float v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _OWORD v65[2];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v8 = atomic_load((unsigned __int8 *)&qword_1EEF657A0);
  v9 = &unk_1EEF65000;
  if ((v8 & 1) == 0)
  {
    v30 = a2;
    v31 = a3;
    v29 = __cxa_guard_acquire(&qword_1EEF657A0);
    v9 = &unk_1EEF65000;
    a2 = v30;
    a3 = v31;
    if (v29)
    {
      byte_1EEF65798 = 1;
      __cxa_guard_release(&qword_1EEF657A0);
      v9 = (_BYTE *)&unk_1EEF65000;
      a2 = v30;
      a3 = v31;
    }
  }
  if (v9[1944])
    v10 = 0x1F324A86E1EC8E1BLL;
  else
    v10 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v10, 0);
  *(_QWORD *)a1 = &off_1E63CEE70;
  v11 = *(_OWORD *)(a5 + 24);
  v12 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 416) = v12;
  *(_OWORD *)(a1 + 384) = v11;
  v13 = *(_OWORD *)(a5 + 72);
  v14 = *(_OWORD *)(a5 + 88);
  v15 = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 480) = v15;
  *(_OWORD *)(a1 + 432) = v13;
  *(_OWORD *)(a1 + 448) = v14;
  v16 = *(_OWORD *)(a5 + 136);
  v17 = *(_OWORD *)(a5 + 152);
  v18 = *(_OWORD *)(a5 + 184);
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a5 + 168);
  *(_OWORD *)(a1 + 544) = v18;
  *(_OWORD *)(a1 + 496) = v16;
  *(_OWORD *)(a1 + 512) = v17;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  v66 = *(_OWORD *)(a1 + 392);
  v67 = *(_QWORD *)(a1 + 408);
  v19 = *(_BYTE *)(a1 + 424);
  v20 = *(_OWORD *)(a1 + 473);
  v21 = *(_OWORD *)(a1 + 505);
  v64 = *(_OWORD *)(a1 + 489);
  v65[0] = v21;
  *(_OWORD *)((char *)v65 + 15) = *(_OWORD *)(a1 + 520);
  v22 = *(_OWORD *)(a1 + 441);
  v60 = *(_OWORD *)(a1 + 425);
  v61 = v22;
  v62 = *(_OWORD *)(a1 + 457);
  v63 = v20;
  v59 = *(_DWORD *)(a1 + 548);
  v58 = *(_QWORD *)(a1 + 540);
  v23 = 1.0 / (float)*(unsigned int *)(a1 + 552);
  v25 = *(_QWORD *)(a1 + 408);
  v24 = *(_QWORD *)(a1 + 416);
  v45 = *(_OWORD *)(a1 + 392);
  v46 = v25;
  v47 = v24;
  v48 = v19;
  v49 = *(_OWORD *)(a1 + 425);
  v50 = *(_OWORD *)(a1 + 441);
  *(_OWORD *)&v54[15] = *(_OWORD *)(a1 + 520);
  *(_OWORD *)v54 = *(_OWORD *)(a1 + 505);
  v53 = *(_OWORD *)(a1 + 489);
  v52 = *(_OWORD *)(a1 + 473);
  v51 = *(_OWORD *)(a1 + 457);
  v55 = v23;
  v56 = *(_QWORD *)(a1 + 540);
  v57 = *(_DWORD *)(a1 + 548);
  v26 = sub_1B17A34D0(a4, (uint64_t)"SSR", &v45);
  *(_QWORD *)(a1 + 592) = v26;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v26, 0x100000000, 0);
  v32 = v66;
  v39 = v63;
  v40 = v64;
  *(_OWORD *)v41 = v65[0];
  *(_OWORD *)&v41[15] = *(_OWORD *)((char *)v65 + 15);
  v36 = v60;
  v37 = v61;
  v33 = v67;
  v34 = 115;
  v35 = 1;
  v38 = v62;
  v42 = v23;
  v43 = v58;
  v44 = v59;
  v27 = sub_1B17A34D0(a4, (uint64_t)"LOBE_FOOTPRINT", &v32);
  *(_QWORD *)(a1 + 600) = v27;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v27, 0x100000000, 1);
  return a1;
}

void sub_1B18181E8(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void *sub_1B18181FC(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  void *result;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  BOOL v61;
  int v62;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v12 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v5, v6, v7, v8, v9, v10, v11);
  v20 = sub_1B1813884(*(_QWORD *)(a1 + 368), v13, v14, v15, v16, v17, v18, v19);
  v28 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 592))+ 16);
  v29 = *(unsigned int *)(a1 + 552);
  v62 = *(_DWORD *)(a1 + 552);
  if (v20)
    v30 = sub_1B187B38C(v20, v21, v22, v23, v24, v25, v26, v27) > 0.0;
  else
    v30 = 0;
  v61 = v30;
  v31 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v28 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ v4)));
  v32 = 0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47));
  v33 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v32 ^ ((0x9DDFEA08EB382D69 * (v32 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v32 ^ v29)))) ^ ((0x9DDFEA08EB382D69 * (v32 ^ ((0x9DDFEA08EB382D69 * (v32 ^ v29)) >> 47) ^ (0x9DDFEA08EB382D69 * (v32 ^ v29)))) >> 47));
  v34 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v33 ^ ((0x9DDFEA08EB382D69 * (v33 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v33 ^ v30)))) ^ ((0x9DDFEA08EB382D69 * (v33 ^ ((0x9DDFEA08EB382D69 * (v33 ^ v30)) >> 47) ^ (0x9DDFEA08EB382D69 * (v33 ^ v30)))) >> 47));
  v35 = CFX::CrossFrameResourceManager::get(a2[4], v34);
  *(_QWORD *)(a1 + 560) = v35;
  if (!v35)
  {
    *(_QWORD *)(a1 + 560) = sub_1B181840C(a2[4], v34);
    v39 = (void *)objc_msgSend_resourceManager(v12, v36, v37, v38);
    v40 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v40, v41, (uint64_t)&v62, 29, CFSTR("SSRDownSample"));
    objc_msgSend_setConstantValue_type_withName_(v40, v42, (uint64_t)&v61, 53, CFSTR("SSREnableFog"));
    v43 = *(_QWORD *)(a1 + 560);
    v44 = (void *)sub_1B18FD768((uint64_t)v39);
    *((_QWORD *)&v55 + 1) = objc_msgSend_frameworkLibrary(v44, v45, v46, v47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    v56 = v28;
    v57 = 115;
    *((_QWORD *)&v58 + 1) = v40;
    *((_QWORD *)&v59 + 1) = CFSTR("vfx_ssr_raytrace_vert");
    *(_QWORD *)&v60 = CFSTR("vfx_ssr_raytrace_frag");
    v50 = objc_msgSend_newRenderPipelineStateWithDesc_(v39, v48, (uint64_t)&v54, v49);
    v51 = *(void **)(v43 + 16);
    if (v51 != (void *)v50)
    {
      v52 = v50;
      if (v51)

      *(_QWORD *)(v43 + 16) = v52;
    }

  }
  result = sub_1B17928F4(v12, a2[4]);
  *(_QWORD *)(*(_QWORD *)(a1 + 560) + 24) = result;
  return result;
}

_OWORD *sub_1B181840C(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_OWORD *)operator new();
    *v4 = 0u;
    v4[1] = 0u;
    *(_QWORD *)v4 = &off_1E63CEE50;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

__int128 *sub_1B1818484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 *result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 *v50;
  simd_float4 v51;
  simd_float4 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  id Texture;
  id v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  const char *v117;
  simd_float4 v118;
  simd_float4 v119;
  simd_float4 v120;
  simd_float4 v121;
  simd_float4x4 v122;
  _OWORD v123[4];
  uint64_t v124;
  float v125;
  float v126;
  int v127;
  __int128 v128;
  __int128 v129;
  __n128 v130;
  unsigned __int8 v131[4];
  uint64_t v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  simd_float4x4 v136;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  v14 = objc_msgSend_renderEncoder(v10, v11, v12, v13);
  v29 = sub_1B1813884(*(_QWORD *)(a1 + 368), v15, v16, v17, v18, v19, v20, v21);
  v30 = *(_QWORD *)(a1 + 384);
  if (v30
    || (result = (__int128 *)sub_1B1814768(*(uint64_t **)(a1 + 368), v22, v23, v24, v25, v26, v27, v28),
        (v30 = (uint64_t)result) != 0))
  {
    result = (__int128 *)sub_1B186CFA8(v30, v22, v23, v24, v25, v26, v27, v28);
    if (result)
    {
      sub_1B17B33F4(v30, (uint64_t)v131, v32, v33, v34, v35, v36, v37);
      v130 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v38, v39, v40, v41, v42, v43);
      v50 = sub_1B18667B4(v131, (uint64_t)&v130, v44, v45, v46, v47, v48, v49);
      v51 = *((simd_float4 *)v50 + 2);
      v52 = *((simd_float4 *)v50 + 3);
      v120 = *((simd_float4 *)v50 + 1);
      v121 = *(simd_float4 *)v50;
      v123[0] = *(_OWORD *)v50;
      v123[1] = v120;
      v118 = v52;
      v119 = v51;
      v123[2] = v51;
      v123[3] = v52;
      v124 = v132;
      v127 = sub_1B187B6C4(v29, v53, v54, v55, v56, v57, v58, v59);
      v126 = fmaxf(sub_1B187B758(v29, v60, v61, v62, v63, v64, v65, v66), 0.0);
      v125 = fmaxf(sub_1B187B7F4(v29, v67, v68, v69, v70, v71, v72, v73), 1.0);
      sub_1B18144E8(*(_QWORD *)(a1 + 368), v74, v75, v76, v77, v78, v79, v80);
      sub_1B187B55C(v29, v81, v82, v83, v84, v85, v86, v87);
      v128 = v88;
      result = (__int128 *)sub_1B187B514(v29, v89, v90, v91, v92, v93, v94, v95);
      v129 = *result;
      if (v127)
      {
        v103 = *(_QWORD *)(a1 + 560);
        v104 = *(void **)(v103 + 16);
        if (!v104)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v97, v98, v99, v100, v101, v102, (uint64_t)"_ptr != NULL");
          v104 = *(void **)(v103 + 16);
        }
        v105 = objc_msgSend_state(v104, v96, v97, v98);
        objc_msgSend_setRenderPipelineState_(*(void **)(v14 + 16), v106, v105, v107);
        v136.columns[1] = v120;
        v136.columns[0] = v121;
        v136.columns[3] = v118;
        v136.columns[2] = v119;
        v122 = __invert_f4(v136);
        v133 = 0;
        v134 = 0;
        v135 = 0;
        sub_1B1868D14(*(_QWORD *)(v14 + 24), &v122, 0x40uLL, &v133);
        objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v14 + 16), v108, v134, v135, 0);
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568));
        v110 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 576));
        v111 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 584));
        sub_1B179AEE4(v14, Texture, 0, v112);
        sub_1B179AEE4(v14, v111, 1, v113);
        sub_1B179AEE4(v14, v110, 2, v114);
        sub_1B179AEE4(v14, *(void **)(*(_QWORD *)(a1 + 560) + 24), 3, v115);
        v133 = 0;
        v134 = 0;
        v135 = 0;
        sub_1B1868D14(*(_QWORD *)(v14 + 24), v123, 0x80uLL, &v133);
        objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v14 + 16), v116, v134, v135, 0);
        return (__int128 *)sub_1B17C197C(v14, v117);
      }
    }
  }
  return result;
}

uint64_t sub_1B18186C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v8;
  _QWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int v22;
  char *v23;
  char v24;
  CFX::RG::Resource *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD v30[9];
  float v31;
  uint64_t v32;
  int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v8 = atomic_load((unsigned __int8 *)&qword_1EEF657B0);
  v9 = &unk_1EEF65000;
  if ((v8 & 1) == 0)
  {
    v28 = a2;
    v29 = a3;
    v27 = __cxa_guard_acquire(&qword_1EEF657B0);
    v9 = (_QWORD *)&unk_1EEF65000;
    a2 = v28;
    a3 = v29;
    if (v27)
    {
      qword_1EEF657A8 = (uint64_t)sub_1B1819A28("SSR_BLUR_PASS", 0xDu);
      __cxa_guard_release(&qword_1EEF657B0);
      v9 = (_QWORD *)&unk_1EEF65000;
      a2 = v28;
      a3 = v29;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v9[245], 0);
  *(_QWORD *)a1 = &off_1E63CE718;
  v10 = *(_OWORD *)(a5 + 24);
  v11 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 416) = v11;
  *(_OWORD *)(a1 + 384) = v10;
  v12 = *(_OWORD *)(a5 + 72);
  v13 = *(_OWORD *)(a5 + 88);
  v14 = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 480) = v14;
  *(_OWORD *)(a1 + 432) = v12;
  *(_OWORD *)(a1 + 448) = v13;
  v15 = *(_OWORD *)(a5 + 136);
  v16 = *(_OWORD *)(a5 + 152);
  v17 = *(_OWORD *)(a5 + 168);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a5 + 184);
  *(_OWORD *)(a1 + 512) = v16;
  *(_OWORD *)(a1 + 528) = v17;
  *(_OWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  v18 = *(_OWORD *)(a1 + 496);
  v43 = *(_OWORD *)(a1 + 480);
  v44 = v18;
  v45 = *(_OWORD *)(a1 + 512);
  v19 = *(_OWORD *)(a1 + 432);
  v39 = *(_OWORD *)(a1 + 416);
  v40 = v19;
  v20 = *(_OWORD *)(a1 + 464);
  v41 = *(_OWORD *)(a1 + 448);
  v42 = v20;
  v21 = *(_OWORD *)(a1 + 400);
  v37 = *(_OWORD *)(a1 + 384);
  v38 = v21;
  v35 = *(_QWORD *)(a1 + 532);
  v36 = *(_DWORD *)(a1 + 540);
  v22 = *(_DWORD *)(a1 + 544);
  v34 = *(_OWORD *)(a1 + 8);
  v23 = (char *)sub_1B179C1C0(&v34, 0x12u, 1u);
  strlcpy(v23, "SSR BLUR OUTPUT ", 0x11uLL);
  if (*(_BYTE *)(a1 + 548))
    v24 = 89;
  else
    v24 = 88;
  v23[16] = v24;
  v30[6] = v43;
  v30[7] = v44;
  v30[8] = v45;
  v30[0] = v37;
  v30[1] = v38;
  v30[2] = v39;
  v30[3] = v40;
  v30[4] = v41;
  v30[5] = v42;
  v31 = 1.0 / (float)v22;
  v32 = v35;
  v33 = v36;
  v25 = sub_1B17A34D0(a4, (uint64_t)v23, v30);
  *(_QWORD *)(a1 + 576) = v25;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v25, 0x100000000, 0);
  return a1;
}

void sub_1B18188FC(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B1818914(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  __CFString *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  _OWORD v36[6];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  const __CFString *v51;
  __CFString *v52;
  uint64_t v53;
  uint64_t v54;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 576))+ 16);
  v6 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v5 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v5 ^ v4)));
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ *(unsigned __int8 *)(a1 + 548));
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v7 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = CFX::CrossFrameResourceManager::get(a2[4], v9);
  *(_QWORD *)(a1 + 552) = v10;
  if (!v10)
  {
    *(_QWORD *)(a1 + 552) = sub_1B1818A8C(a2[4], v9);
    v18 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v11, v12, v13, v14, v15, v16, v17);
    v22 = (void *)objc_msgSend_resourceManager(v18, v19, v20, v21);
    v23 = (void *)sub_1B18FD768((uint64_t)v22);
    v27 = objc_msgSend_frameworkLibrary(v23, v24, v25, v26);
    v30 = *(unsigned __int8 *)(a1 + 548);
    v31 = *(_QWORD *)(a1 + 552);
    memset(v36, 0, 32);
    v32 = v30 ? CFSTR("vfx_ssr_blur_y") : CFSTR("vfx_ssr_blur_x");
    memset(&v36[2], 0, 64);
    v37 = 0;
    v38 = v27;
    v39 = v5;
    v49 = 0uLL;
    v50 = 0uLL;
    v40 = 0uLL;
    v41 = 0uLL;
    v42 = 0uLL;
    v43 = 0uLL;
    v44 = 0uLL;
    v45 = 0uLL;
    v46 = 0uLL;
    v47 = 0uLL;
    v48 = 0uLL;
    v51 = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    v52 = v32;
    v53 = 0;
    v54 = 0;
    v33 = objc_msgSend_newRenderPipelineStateWithDesc_(v22, v28, (uint64_t)v36, v29);
    v34 = *(void **)(v31 + 16);
    if (v34 != (void *)v33)
    {
      v35 = v33;
      if (v34)

      *(_QWORD *)(v31 + 16) = v35;
    }
  }
}

_QWORD *sub_1B1818A8C(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CE6F8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B1818B00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  id Texture;
  id v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  v21 = objc_msgSend_renderEncoder(v10, v11, v12, v13);
  v22 = *(_QWORD *)(a1 + 552);
  v23 = *(void **)(v22 + 16);
  if (!v23)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v15, v16, v17, v18, v19, v20, (uint64_t)"_ptr != NULL");
    v23 = *(void **)(v22 + 16);
  }
  v24 = objc_msgSend_state(v23, v14, v15, v16);
  objc_msgSend_setRenderPipelineState_(*(void **)(v21 + 16), v25, v24, v26);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 560));
  v28 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568));
  sub_1B179AEE4(v21, Texture, 0, v29);
  sub_1B179AEE4(v21, v28, 1, v30);
  return sub_1B17C197C(v21, v31);
}

double sub_1B1818BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double result;
  int v19;
  uint64_t v20;
  uint64_t v21;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF657C0);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v20 = a2;
    v21 = a3;
    v19 = __cxa_guard_acquire(&qword_1EEF657C0);
    v8 = &unk_1EEF65000;
    a2 = v20;
    a3 = v21;
    if (v19)
    {
      byte_1EEF657B8 = 1;
      __cxa_guard_release(&qword_1EEF657C0);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v20;
      a3 = v21;
    }
  }
  if (v8[1976])
    v9 = 0x9E9C786127469E8FLL;
  else
    v9 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v9, 0);
  *(_QWORD *)a1 = &off_1E63CEF30;
  v10 = *(_OWORD *)(a5 + 24);
  v11 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 416) = v11;
  *(_OWORD *)(a1 + 384) = v10;
  v12 = *(_OWORD *)(a5 + 72);
  v13 = *(_OWORD *)(a5 + 88);
  v14 = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 480) = v14;
  *(_OWORD *)(a1 + 432) = v12;
  *(_OWORD *)(a1 + 448) = v13;
  v15 = *(_OWORD *)(a5 + 136);
  v16 = *(_OWORD *)(a5 + 152);
  v17 = *(_OWORD *)(a5 + 168);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a5 + 184);
  *(_OWORD *)(a1 + 512) = v16;
  *(_OWORD *)(a1 + 528) = v17;
  *(_OWORD *)(a1 + 496) = v15;
  result = 0.0;
  *(_OWORD *)(a1 + 552) = 0u;
  *(_OWORD *)(a1 + 568) = 0u;
  *(_OWORD *)(a1 + 584) = 0u;
  return result;
}

void sub_1B1818CC8(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  const char *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _OWORD v33[6];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[23];
  id v48;
  uint64_t v49;
  const __CFString *v50;
  const __CFString *v51;
  uint64_t v52;
  uint64_t v53;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 560))+ 16);
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v5 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v5 ^ v4)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v5 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v5 ^ v4)))) >> 47));
  v7 = CFX::CrossFrameResourceManager::get(a2[4], v6);
  *(_QWORD *)(a1 + 552) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 552) = sub_1B1818E50(a2[4], v6);
    v15 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v8, v9, v10, v11, v12, v13, v14);
    v19 = (void *)objc_msgSend_resourceManager(v15, v16, v17, v18);
    v20 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v20, v21, a1 + 544, 29, CFSTR("SSRDownSample"));
    v22 = (void *)sub_1B18FD768((uint64_t)v19);
    v26 = objc_msgSend_frameworkLibrary(v22, v23, v24, v25);
    v27 = *(_QWORD *)(a1 + 552);
    memset(v33, 0, sizeof(v33));
    v34 = 0;
    v35 = v26;
    v36 = v5;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0;
    v42 = 1;
    memset(v47, 0, sizeof(v47));
    v43 = 0u;
    v44 = 0u;
    v45 = 0u;
    v46 = 0u;
    v48 = v20;
    v49 = 0;
    v50 = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    v52 = 0;
    v53 = 0;
    v51 = CFSTR("vfx_ssr_composite_frag");
    v30 = objc_msgSend_newRenderPipelineStateWithDesc_(v19, v28, (uint64_t)v33, v29);
    v31 = *(void **)(v27 + 16);
    if (v31 != (void *)v30)
    {
      v32 = v30;
      if (v31)

      *(_QWORD *)(v27 + 16) = v32;
    }

  }
}

_QWORD *sub_1B1818E50(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CEF10;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B1818EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  id Texture;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  v21 = objc_msgSend_renderEncoder(v10, v11, v12, v13);
  v22 = *(_QWORD *)(a1 + 552);
  v23 = *(void **)(v22 + 16);
  if (!v23)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v15, v16, v17, v18, v19, v20, (uint64_t)"_ptr != NULL");
    v23 = *(void **)(v22 + 16);
  }
  v24 = objc_msgSend_state(v23, v14, v15, v16);
  objc_msgSend_setRenderPipelineState_(*(void **)(v21 + 16), v25, v24, v26);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568));
  v28 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 576));
  v29 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 584));
  v30 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 592));
  sub_1B179AEE4(v21, Texture, 0, v31);
  sub_1B179AEE4(v21, v28, 1, v32);
  sub_1B179AEE4(v21, v29, 2, v33);
  sub_1B179AEE4(v21, v30, 3, v34);
  return sub_1B17C197C(v21, v35);
}

uint64_t *sub_1B1818FCC(uint64_t *a1, uint64_t *a2, CFX::RG::Pass *a3)
{
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  CFX::RG::Resource *v31;
  uint64_t *CopyPass;
  CFX::RG::Pass *v33;
  CFX::RG::Resource *v34;
  uint64_t *v35;
  CFX::RG::Pass *v36;
  uint64_t *v37;
  CFX::RG::Resource *v38;
  CFX::RG::Resource *v39;
  uint64_t *v40;
  CFX::RG::Pass *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  CFX::RG::Resource *v45;
  CFX::RG::Resource *v46;
  uint64_t v47;
  uint64_t *v48;
  CFX::RG::Resource *v49;
  CFX::RG::Resource *v50;
  uint64_t v51;
  uint64_t *v52;
  CFX::RG::Resource *v53;
  CFX::RG::Resource *v54;
  _OWORD *v55;
  CFX::RG::Resource *v56;
  uint64_t *v57;
  _OWORD *v58;
  CFX::RG::Resource *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  _OWORD *v63;
  CFX::RG::Resource *v64;
  CFX::RG::Resource *v65;
  CFX::RG::Pass *v67;
  CFX::RG::Resource *v68;
  _OWORD v69[10];
  _QWORD v70[2];
  __int16 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  int v82;
  __int128 v83;
  CFX::RG::Resource *v84;
  uint64_t v85;
  _OWORD v86[10];
  __int128 v87;
  CFX::RG::Resource *v88;
  uint64_t v89;
  _OWORD v90[10];
  _QWORD v91[2];
  __int16 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  int v103;
  char v104;
  _QWORD v105[2];
  __int16 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  int v117;
  char v118;
  _QWORD v119[2];
  __int16 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  int v132;
  __int128 v133;
  CFX::RG::Resource *v134;
  uint64_t v135;
  _OWORD v136[10];
  const char *v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  int v159;
  __int128 v160;
  CFX::RG::Resource *v161;
  uint64_t v162;
  _OWORD v163[10];
  __int128 v164;
  CFX::RG::Resource *v165;
  uint64_t v166;
  _OWORD v167[10];
  _QWORD v168[2];
  __int16 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  _OWORD v180[10];
  _OWORD v181[10];
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;

  v6 = (__int128 *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[2]);
  v7 = v6[1];
  v212 = *v6;
  v213 = v7;
  v8 = v6[5];
  v10 = v6[2];
  v9 = v6[3];
  v216 = v6[4];
  v217 = v8;
  v214 = v10;
  v215 = v9;
  v11 = v6[9];
  v13 = v6[6];
  v12 = v6[7];
  v220 = v6[8];
  v221 = v11;
  v218 = v13;
  v219 = v12;
  CFX::RG::TextureDescriptorReference::withSampleCount(&v212, 1, (uint64_t)&v202);
  v14 = (__int128 *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[3]);
  v15 = v14[1];
  v192 = *v14;
  v193 = v15;
  v16 = v14[5];
  v18 = v14[2];
  v17 = v14[3];
  v196 = v14[4];
  v197 = v16;
  v194 = v18;
  v195 = v17;
  v19 = v14[9];
  v21 = v14[6];
  v20 = v14[7];
  v200 = v14[8];
  v201 = v19;
  v198 = v21;
  v199 = v20;
  CFX::RG::TextureDescriptorReference::withSampleCount(&v192, 1, (uint64_t)&v182);
  v22 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[4]);
  v23 = v22[1];
  v181[0] = *v22;
  v181[1] = v23;
  v24 = v22[5];
  v26 = v22[2];
  v25 = v22[3];
  v181[4] = v22[4];
  v181[5] = v24;
  v181[2] = v26;
  v181[3] = v25;
  v27 = v22[9];
  v29 = v22[6];
  v28 = v22[7];
  v181[8] = v22[8];
  v181[9] = v27;
  v181[6] = v29;
  v181[7] = v28;
  CFX::RG::TextureDescriptorReference::withSampleCount(v181, 1, (uint64_t)v180);
  v176 = v198;
  v177 = v199;
  v178 = v200;
  v179 = v201;
  v172 = v194;
  v173 = v195;
  v174 = v196;
  v175 = v197;
  v170 = v192;
  v30 = *a2;
  v168[0] = "SSR backface depth";
  v168[1] = v30;
  v169 = 0;
  v171 = v193;
  v67 = (CFX::RG::Pass *)sub_1B18197BC(a1, a1, (uint64_t)v168);
  v167[6] = v208;
  v167[7] = v209;
  v167[8] = v210;
  v167[9] = v211;
  v167[2] = v204;
  v167[3] = v205;
  v167[4] = v206;
  v167[5] = v207;
  v167[0] = v202;
  v167[1] = v203;
  v31 = sub_1B17A34D0(a1, (uint64_t)"SSR COLOR COPY", v167);
  *(_QWORD *)&v164 = a2[2];
  DWORD2(v164) = 0;
  v68 = v31;
  v165 = v31;
  v166 = 0x100000000;
  CopyPass = (uint64_t *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy downsample color input", &v164);
  v33 = (CFX::RG::Pass *)CopyPass;
  if (a3)
    CFX::RG::Pass::dependsOn(CopyPass, a3);
  v163[6] = v188;
  v163[7] = v189;
  v163[8] = v190;
  v163[9] = v191;
  v163[2] = v184;
  v163[3] = v185;
  v163[4] = v186;
  v163[5] = v187;
  v163[0] = v182;
  v163[1] = v183;
  v34 = sub_1B17A34D0(a1, (uint64_t)"DOWNSAMPLE DEPTH INPUT", v163);
  *(_QWORD *)&v160 = a2[3];
  DWORD2(v160) = 0;
  v161 = v34;
  v162 = 0x100000000;
  v35 = (uint64_t *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy downsample depth input", &v160);
  v36 = (CFX::RG::Pass *)v35;
  if (a3)
    CFX::RG::Pass::dependsOn(v35, a3);
  v138 = *(_OWORD *)a2;
  v145 = v208;
  v146 = v209;
  v147 = v210;
  v148 = v211;
  v141 = v204;
  v142 = v205;
  v143 = v206;
  v144 = v207;
  v139 = v202;
  v140 = v203;
  v155 = v188;
  v156 = v189;
  v157 = v190;
  v158 = v191;
  v154 = v187;
  v151 = v184;
  v152 = v185;
  v153 = v186;
  v149 = v182;
  v137 = "SSR downsample";
  v150 = v183;
  v159 = *((_DWORD *)a2 + 14);
  v37 = (uint64_t *)sub_1B1819810(a1, a1, (uint64_t *)&v137);
  v37[90] = (uint64_t)v68;
  CFX::RG::Pass::readFrom(v37, v68);
  v37[91] = (uint64_t)v34;
  CFX::RG::Pass::readFrom(v37, v34);
  v38 = (CFX::RG::Resource *)*((_QWORD *)v67 + 70);
  v37[92] = (uint64_t)v38;
  CFX::RG::Pass::readFrom(v37, v38);
  CFX::RG::Pass::dependsOn(v37, v67);
  CFX::RG::Pass::dependsOn(v37, v33);
  CFX::RG::Pass::dependsOn(v37, v36);
  v136[6] = v180[6];
  v136[7] = v180[7];
  v136[8] = v180[8];
  v136[9] = v180[9];
  v136[2] = v180[2];
  v136[3] = v180[3];
  v136[4] = v180[4];
  v136[5] = v180[5];
  v136[0] = v180[0];
  v136[1] = v180[1];
  v39 = sub_1B17A34D0(a1, (uint64_t)"RAYTRACE NORMAL INPUT", v136);
  *(_QWORD *)&v133 = a2[4];
  DWORD2(v133) = 0;
  v134 = v39;
  v135 = 0x100000000;
  v40 = (uint64_t *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy raytrace normal input", &v133);
  v41 = (CFX::RG::Pass *)v40;
  if (a3)
    CFX::RG::Pass::dependsOn(v40, a3);
  v42 = *a2;
  v43 = a2[1];
  v119[0] = "SSR raytrace";
  v119[1] = v42;
  v120 = 0;
  v121 = v43;
  v128 = v208;
  v129 = v209;
  v130 = v210;
  v131 = v211;
  v124 = v204;
  v125 = v205;
  v126 = v206;
  v127 = v207;
  v122 = v202;
  v123 = v203;
  v132 = *((_DWORD *)a2 + 14);
  v44 = (uint64_t *)sub_1B1819864(a1, a1, (uint64_t)v119);
  v45 = (CFX::RG::Resource *)v37[93];
  v44[71] = (uint64_t)v45;
  CFX::RG::Pass::readFrom(v44, v45);
  v46 = (CFX::RG::Resource *)v37[94];
  v44[72] = (uint64_t)v46;
  CFX::RG::Pass::readFrom(v44, v46);
  v44[73] = (uint64_t)v39;
  CFX::RG::Pass::readFrom(v44, v39);
  CFX::RG::Pass::dependsOn(v44, (CFX::RG::Pass *)v37);
  CFX::RG::Pass::dependsOn(v44, v41);
  v113 = v208;
  v114 = v209;
  v115 = v210;
  v116 = v211;
  v109 = v204;
  v110 = v205;
  v111 = v206;
  v112 = v207;
  v107 = v202;
  v47 = *a2;
  v105[0] = "SSR blur X";
  v105[1] = v47;
  v106 = 0;
  v108 = v203;
  v117 = *((_DWORD *)a2 + 14);
  v118 = 0;
  v48 = (uint64_t *)sub_1B18198B8(a1, a1, (uint64_t)v105);
  v49 = (CFX::RG::Resource *)v44[74];
  v48[70] = (uint64_t)v49;
  CFX::RG::Pass::readFrom(v48, v49);
  v50 = (CFX::RG::Resource *)v44[75];
  v48[71] = (uint64_t)v50;
  CFX::RG::Pass::readFrom(v48, v50);
  v99 = v208;
  v100 = v209;
  v101 = v210;
  v102 = v211;
  v95 = v204;
  v96 = v205;
  v97 = v206;
  v98 = v207;
  v93 = v202;
  v51 = *a2;
  v91[0] = "SSR blur Y";
  v91[1] = v51;
  v92 = 0;
  v94 = v203;
  v103 = *((_DWORD *)a2 + 14);
  v104 = 1;
  v52 = (uint64_t *)sub_1B18198B8(a1, a1, (uint64_t)v91);
  v53 = (CFX::RG::Resource *)v48[72];
  v52[70] = (uint64_t)v53;
  CFX::RG::Pass::readFrom(v52, v53);
  v54 = (CFX::RG::Resource *)v44[75];
  v52[71] = (uint64_t)v54;
  CFX::RG::Pass::readFrom(v52, v54);
  v55 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[6]);
  CFX::RG::TextureDescriptorReference::withSampleCount(v55, 1, (uint64_t)v90);
  v56 = sub_1B17A34D0(a1, (uint64_t)"REFLECTANCE ROUGHNESS COPY", v90);
  *(_QWORD *)&v87 = a2[6];
  DWORD2(v87) = 0;
  v88 = v56;
  v89 = 0x100000000;
  v57 = (uint64_t *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy reflectance roughness input", &v87);
  if (a3)
    CFX::RG::Pass::dependsOn(v57, a3);
  v58 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[5]);
  CFX::RG::TextureDescriptorReference::withSampleCount(v58, 1, (uint64_t)v86);
  v59 = sub_1B17A34D0(a1, (uint64_t)"RADIANCE COPY", v86);
  *(_QWORD *)&v83 = a2[5];
  DWORD2(v83) = 0;
  v84 = v59;
  v85 = 0x100000000;
  v60 = (uint64_t *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy radiance input", &v83);
  if (a3)
    CFX::RG::Pass::dependsOn(v60, a3);
  v78 = v218;
  v79 = v219;
  v80 = v220;
  v81 = v221;
  v74 = v214;
  v75 = v215;
  v76 = v216;
  v77 = v217;
  v72 = v212;
  v61 = *a2;
  v70[0] = "SSR composite";
  v70[1] = v61;
  v71 = 0;
  v73 = v213;
  v82 = *((_DWORD *)a2 + 14);
  v62 = (uint64_t *)sub_1B181990C(a1, (uint64_t)a1, (uint64_t)v70);
  v63 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a2[2]);
  CFX::RG::TextureDescriptorReference::withSampleCount(v63, 1, (uint64_t)v69);
  v64 = sub_1B17A34D0(a1, (uint64_t)"SSR Composite output", v69);
  v62[70] = (uint64_t)v64;
  CFX::RG::Pass::renderTo((uint64_t)v62, (uint64_t)v64, 0x100000000, 0);
  a2[8] = (uint64_t)v64;
  v62[71] = (uint64_t)v68;
  CFX::RG::Pass::readFrom(v62, v68);
  v62[72] = (uint64_t)v59;
  CFX::RG::Pass::readFrom(v62, v59);
  v62[73] = (uint64_t)v56;
  CFX::RG::Pass::readFrom(v62, v56);
  v65 = (CFX::RG::Resource *)v52[72];
  v62[74] = (uint64_t)v65;
  CFX::RG::Pass::readFrom(v62, v65);
  if (a3)
    CFX::RG::Pass::dependsOn(v62, a3);
  CFX::RG::Pass::dependsOn(v62, (CFX::RG::Pass *)v52);
  return v62;
}

uint64_t sub_1B18197BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B1819CF0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B1819810(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B1819D4C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B1819864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B1819DA8(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B18198B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B1819E04(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B181990C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];

  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  sub_1B1819E60(v8[0], v5, v8, a2, a3);
  v8[0] = v6;
  sub_1B179C734(a1 + 18, v8);
  return v8[0];
}

void sub_1B1819964(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B181998C(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18199B4(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18199DC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B1819A04(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B1819A28(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B1819AF0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF0D0;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B1819B28(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF0D0;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B1819B70(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CEE50;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B1819BA8(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CEE50;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B1819BF0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CE6F8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B1819C28(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CE6F8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B1819C70(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CEF10;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B1819CA8(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CEF10;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1819CF0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x238u, 8u);
  return sub_1B181763C(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B1819D4C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x2F8u, 8u);
  return sub_1B1817974(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B1819DA8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x260u, 8u);
  return sub_1B1817F0C(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B1819E04(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x248u, 8u);
  return sub_1B18186C8(v8, *a3, a3[1], a4, a5);
}

double sub_1B1819E60(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v7 = sub_1B179C1C0(v10, 0x258u, 8u);
  return sub_1B1818BC0(v7, *a3, a3[1], v8, a5);
}

uint64_t sub_1B181A04C(int a1, uint64_t a2, CFTypeRef cf1, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!CFEqual(cf1, CFSTR("kCFXNotificationProfileWillDie")))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong notification sent"), v6, v7, v8, v9, v10, v11, (uint64_t)"CFEqual(name, kCFXNotificationProfileWillDie)");
  return MEMORY[0x1E0DE7D20](a2, sel_releaseProgramForResource_, a4, v7);
}

uint64_t sub_1B181A0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a2, sel_releaseProgramForResource_, a4, a4);
}

void sub_1B181A1EC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B181A5B8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  const __CFDictionary *v11;

  if (a3 >= 1)
  {
    v8 = a3;
    v9 = (uint64_t *)a2;
    do
    {
      v11 = (const __CFDictionary *)sub_1B19B9494(*v9, a2, a3, a4, a5, a6, a7, a8);
      if (v11)
        CFDictionaryApplyFunction(v11, (CFDictionaryApplierFunction)sub_1B181A618, a1);
      ++v9;
      --v8;
    }
    while (v8);
  }
}

void sub_1B181A618(void *key, void *value, CFMutableDictionaryRef theDict)
{
  CFDictionarySetValue(theDict, key, value);
}

uint64_t sub_1B181A62C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  uint64_t v11;

  if (a2 < 1)
  {
    LOWORD(v10) = 0;
  }
  else
  {
    v8 = a2;
    v10 = 0;
    do
    {
      v11 = *a1++;
      v10 |= sub_1B19B9728(v11, a2, a3, a4, a5, a6, a7, a8);
      --v8;
    }
    while (v8);
  }
  return (__int16)v10;
}

uint64_t sub_1B181A680(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t result;
  uint64_t vars0;

  switch(a1)
  {
    case 0:
      v8 = (uint64_t *)&off_1E63D5A30;
      goto LABEL_20;
    case 1:
      v8 = (uint64_t *)&off_1E63D5A38;
      goto LABEL_20;
    case 2:
      v8 = (uint64_t *)&off_1E63D5A40;
      goto LABEL_20;
    case 3:
      v8 = (uint64_t *)&off_1E63D5A48;
      goto LABEL_20;
    case 4:
      v8 = (uint64_t *)&off_1E63D5A50;
      goto LABEL_20;
    case 5:
      v8 = (uint64_t *)&off_1E63D5A58;
      goto LABEL_20;
    case 6:
      v8 = (uint64_t *)&off_1E63D5A60;
      goto LABEL_20;
    case 7:
      v8 = (uint64_t *)&off_1E63D5A68;
      goto LABEL_20;
    case 8:
      v8 = (uint64_t *)&off_1E63D5A70;
      goto LABEL_20;
    case 9:
      v8 = (uint64_t *)&off_1E63D5A78;
      goto LABEL_20;
    case 10:
      v8 = (uint64_t *)&off_1E63D5A80;
      goto LABEL_20;
    case 11:
      v8 = (uint64_t *)&off_1E63D5A90;
      goto LABEL_20;
    case 12:
      v8 = (uint64_t *)&off_1E63D5A98;
      goto LABEL_20;
    case 13:
      v8 = (uint64_t *)&off_1E63D5AA0;
      goto LABEL_20;
    case 14:
      v8 = (uint64_t *)&off_1E63D5AA8;
      goto LABEL_20;
    case 15:
      v8 = (uint64_t *)&off_1E63D5AB0;
      goto LABEL_20;
    case 16:
      v8 = (uint64_t *)&off_1E63D5A88;
LABEL_20:
      result = *v8;
      break;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown material property type"), a3, a4, a5, a6, a7, a8, vars0);
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1B181A798(int a1, int a2)
{
  if (qword_1EEF657D0 != -1)
    dispatch_once(&qword_1EEF657D0, &unk_1E63D0BB0);
  return *((_QWORD *)&unk_1EEF657D8 + 8 * (uint64_t)a1 + a2);
}

void sub_1B181A7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  const __CFAllocator *v10;
  const __CFString *v11;
  __CFString *MutableCopy;

  v8 = 0;
  v9 = &qword_1EEF657F8;
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  do
  {
    v11 = (const __CFString *)sub_1B181A680((char)v8, a2, a3, a4, a5, a6, a7, a8);
    *(v9 - 4) = (uint64_t)v11;
    MutableCopy = CFStringCreateMutableCopy(v10, 0, v11);
    CFStringUppercase(MutableCopy, 0);
    *(v9 - 3) = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("USE_%@"), MutableCopy);
    *(v9 - 2) = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("USE_%@_COLOR"), MutableCopy);
    *(v9 - 1) = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("USE_%@_INTENSITY"), MutableCopy);
    *v9 = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("USE_%@_TEXTURE_COMPONENT"), MutableCopy);
    v9[1] = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("USE_%@TEXCOORD"), MutableCopy);
    v9[2] = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("USE_%@_MAP"), MutableCopy);
    v9[3] = (uint64_t)CFStringCreateWithFormat(v10, 0, CFSTR("USE_%@_CUBEMAP"), MutableCopy);
    CFRelease(MutableCopy);
    ++v8;
    v9 += 8;
  }
  while (v8 != 17);
}

uint64_t sub_1B181A968(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  _DWORD v32[12];
  uint64_t v33;
  int v34;
  int v35;
  _DWORD v36[12];
  uint64_t v37;
  int v38;
  int v39;

  if (!a2)
    return 0;
  v9 = objc_msgSend__handle(a2, (const char *)a2, (uint64_t)a3, a4);
  v10 = *(_OWORD *)(a1 + 48);
  v11 = *(_DWORD *)(a1 + 4);
  v12 = *(_DWORD *)(a1 + 8);
  v13 = *(_DWORD *)(a1 + 16);
  v14 = *(_DWORD *)(a1 + 20);
  v15 = *(_DWORD *)(a1 + 24);
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(_DWORD *)(a1 + 36);
  v18 = *(_DWORD *)(a1 + 40);
  v36[0] = *(_DWORD *)a1;
  v36[1] = v13;
  v36[2] = v16;
  v36[3] = 0;
  v36[4] = v11;
  v36[5] = v14;
  v36[6] = v17;
  v36[7] = 0;
  v36[8] = v12;
  v36[9] = v15;
  v36[10] = v18;
  v36[11] = 0;
  v37 = v10;
  v38 = DWORD2(v10);
  v39 = 0;
  if (a3)
  {
    v19 = objc_msgSend__handle(a3, v6, v7, v8);
    v20 = *(_OWORD *)(a1 + 112);
    v21 = *(_DWORD *)(a1 + 68);
    v22 = *(_DWORD *)(a1 + 72);
    v23 = *(_DWORD *)(a1 + 80);
    v24 = *(_DWORD *)(a1 + 84);
    v25 = *(_DWORD *)(a1 + 88);
    v26 = *(_DWORD *)(a1 + 96);
    v27 = *(_DWORD *)(a1 + 100);
    v28 = *(_DWORD *)(a1 + 104);
    v32[0] = *(_DWORD *)(a1 + 64);
    v32[1] = v23;
    v32[2] = v26;
    v32[3] = 0;
    v32[4] = v21;
    v32[5] = v24;
    v32[6] = v27;
    v32[7] = 0;
    v32[8] = v22;
    v32[9] = v25;
    v32[10] = v28;
    v32[11] = 0;
    v33 = v20;
    v34 = DWORD2(v20);
    v35 = 0;
    v29 = sub_1B21FF5F0(704, 16);
    sub_1B21F00F4(v29, v9, v19, v36, v32);
    v30 = *(_DWORD *)(a1 + 136);
    *(_QWORD *)(v29 + 512) = *(_QWORD *)(a1 + 128);
    *(_DWORD *)(v29 + 520) = v30;
    *(_QWORD *)(v29 + 496) = 0x3E99999A3F000000;
    *(_DWORD *)(v29 + 504) = 1065353216;
    *(_BYTE *)(v29 + 592) = 1;
  }
  else
  {
    v29 = sub_1B21FF5F0(704, 16);
    sub_1B21F0188(v29, v9, v36);
  }
  return v29;
}

void sub_1B181AB30(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B21FF5FC(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B181AEB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __int128 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _DWORD v24[12];
  uint64_t v25;
  int v26;
  int v27;
  _DWORD v28[12];
  uint64_t v29;
  int v30;
  int v31;

  result = objc_msgSend__twistHandle(*(void **)(a1 + 96), a2, a3, a4);
  if (result)
  {
    v6 = *(_OWORD *)(a1 + 80);
    v7 = *(_DWORD *)(a1 + 36);
    v8 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 48);
    v10 = *(_DWORD *)(a1 + 52);
    v11 = *(_DWORD *)(a1 + 56);
    v12 = *(_DWORD *)(a1 + 64);
    v13 = *(_DWORD *)(a1 + 68);
    v14 = *(_DWORD *)(a1 + 72);
    v28[0] = *(_DWORD *)(a1 + 32);
    v28[1] = v9;
    v28[2] = v12;
    v28[3] = 0;
    v28[4] = v7;
    v28[5] = v10;
    v28[6] = v13;
    v28[7] = 0;
    v28[8] = v8;
    v28[9] = v11;
    v28[10] = v14;
    v28[11] = 0;
    v30 = DWORD2(v6);
    v29 = v6;
    v31 = 0;
    v15 = *(_OWORD *)(*(_QWORD *)(a1 + 96) + 160);
    v16 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 116);
    v17 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 120);
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 128);
    v19 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 132);
    v20 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 136);
    v21 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 144);
    v22 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 148);
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 152);
    v24[0] = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 112);
    v24[1] = v18;
    v24[2] = v21;
    v24[3] = 0;
    v24[4] = v16;
    v24[5] = v19;
    v24[6] = v22;
    v24[7] = 0;
    v24[8] = v17;
    v24[9] = v20;
    v24[10] = v23;
    v24[11] = 0;
    v25 = v15;
    v26 = DWORD2(v15);
    v27 = 0;
    return (*(uint64_t (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)result + 88))(result, v28, v24);
  }
  return result;
}

uint64_t sub_1B181B060(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  __int128 v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  _DWORD v24[12];
  uint64_t v25;
  int v26;
  int v27;
  _DWORD v28[12];
  uint64_t v29;
  int v30;
  int v31;

  result = objc_msgSend__twistHandle(*(void **)(a1 + 96), a2, a3, a4);
  if (result)
  {
    v6 = *(_OWORD *)(*(_QWORD *)(a1 + 96) + 96);
    v7 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 52);
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 56);
    v9 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 64);
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 68);
    v11 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 72);
    v12 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 80);
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 84);
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 88);
    v28[0] = *(_DWORD *)(*(_QWORD *)(a1 + 96) + 48);
    v28[1] = v9;
    v28[2] = v12;
    v28[3] = 0;
    v28[4] = v7;
    v28[5] = v10;
    v28[6] = v13;
    v28[7] = 0;
    v28[8] = v8;
    v28[9] = v11;
    v28[10] = v14;
    v28[11] = 0;
    v29 = v6;
    v30 = DWORD2(v6);
    v31 = 0;
    v15 = *(_OWORD *)(a1 + 80);
    v16 = *(_DWORD *)(a1 + 36);
    v17 = *(_DWORD *)(a1 + 40);
    v18 = *(_DWORD *)(a1 + 48);
    v19 = *(_DWORD *)(a1 + 52);
    v20 = *(_DWORD *)(a1 + 56);
    v21 = *(_DWORD *)(a1 + 64);
    v22 = *(_DWORD *)(a1 + 68);
    v23 = *(_DWORD *)(a1 + 72);
    v24[0] = *(_DWORD *)(a1 + 32);
    v24[1] = v18;
    v24[2] = v21;
    v24[3] = 0;
    v24[4] = v16;
    v24[5] = v19;
    v24[6] = v22;
    v24[7] = 0;
    v24[8] = v17;
    v24[9] = v20;
    v24[10] = v23;
    v24[11] = 0;
    v25 = v15;
    v26 = DWORD2(v15);
    v27 = 0;
    return (*(uint64_t (**)(uint64_t, _DWORD *, _DWORD *))(*(_QWORD *)result + 88))(result, v28, v24);
  }
  return result;
}

double sub_1B181B1F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  uint64_t v7;

  v5 = objc_msgSend__twistHandle(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 32) + 48;
    *(_DWORD *)(v5 + 512) = *(_DWORD *)(a1 + 40);
    *(_QWORD *)(v5 + 516) = *(_QWORD *)(v7 + 132);
    result = 0.000000381469873;
    *(_QWORD *)(v5 + 496) = 0x3E99999A3F000000;
    *(_DWORD *)(v5 + 504) = 1065353216;
  }
  return result;
}

double sub_1B181B2E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  int v7;
  int v8;

  v5 = objc_msgSend__twistHandle(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    v7 = *(_DWORD *)(a1 + 40);
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 184);
    *(_DWORD *)(v5 + 512) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 176);
    *(_DWORD *)(v5 + 516) = v7;
    *(_DWORD *)(v5 + 520) = v8;
    result = 0.000000381469873;
    *(_QWORD *)(v5 + 496) = 0x3E99999A3F000000;
    *(_DWORD *)(v5 + 504) = 1065353216;
  }
  return result;
}

double sub_1B181B3DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double result;
  int v7;

  v5 = objc_msgSend__twistHandle(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    v7 = *(_DWORD *)(a1 + 40);
    *(_QWORD *)(v5 + 512) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 176);
    *(_DWORD *)(v5 + 520) = v7;
    result = 0.000000381469873;
    *(_QWORD *)(v5 + 496) = 0x3E99999A3F000000;
    *(_DWORD *)(v5 + 504) = 1065353216;
  }
  return result;
}

uint64_t sub_1B181B74C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFX::CrossFrameResourceManager *a5, uint64_t a6)
{
  unsigned __int8 v10;
  uint64_t v11;
  CFX::RG::Resource *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  CFX::RG::Resource *v30;
  __int128 v31;
  CFX::RG::Resource *v32;
  __int128 v33;
  uint64_t v34;
  int v36;
  uint64_t v37;
  _OWORD v38[10];
  _BYTE v39[160];
  _OWORD v40[10];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;

  v10 = atomic_load((unsigned __int8 *)&qword_1EEF65C20);
  if ((v10 & 1) == 0)
  {
    v37 = a2;
    v36 = __cxa_guard_acquire(&qword_1EEF65C20);
    a2 = v37;
    if (v36)
    {
      byte_1EEF65C18 = 1;
      __cxa_guard_release(&qword_1EEF65C20);
      a2 = v37;
    }
  }
  if (byte_1EEF65C18)
    v11 = 0x8C1DCF5E2BFD8933;
  else
    v11 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a6, v11, 0);
  *(_QWORD *)a1 = &off_1E63CE9A0;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a6 + 24);
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  v12 = *(CFX::RG::Resource **)(a6 + 24);
  v13 = CFX::RG::Resource::textureDesc(v12);
  if (!*(_BYTE *)(v13 + 80))
    *(_BYTE *)(v13 + 80) = 1;
  *(_QWORD *)(v13 + 72) = 1;
  v14 = *(_QWORD *)(a6 + 32);
  v15 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v16 = CFX::CrossFrameResourceManager::get(a5, v15);
  v17 = (uint64_t *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v16;
  if (!v16)
  {
    v18 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    *(_QWORD *)(a1 + 400) = sub_1B181BAD0(a5, v18);
    v26 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v19, v20, v21, v22, v23, v24, v25);
    *(_BYTE *)(*v17 + 32) = *(_BYTE *)(*v17 + 32) & 0xFD | (objc_msgSend_features(v26, v27, v28, v29) >> 10) & 2;
    CFX::RG::TextureDescriptorReference::finalColor((uint64_t)v39);
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v39, MTLPixelFormatRGBA16Float, (uint64_t)v40);
    v30 = (CFX::RG::Resource *)malloc_type_malloc(0xE0uLL, 0xD5346062uLL);
    *(_QWORD *)&v31 = -1;
    *((_QWORD *)&v31 + 1) = -1;
    *((_OWORD *)v30 + 12) = v31;
    *((_OWORD *)v30 + 13) = v31;
    *((_OWORD *)v30 + 10) = v31;
    *((_OWORD *)v30 + 11) = v31;
    *((_OWORD *)v30 + 8) = v31;
    *((_OWORD *)v30 + 9) = v31;
    *((_OWORD *)v30 + 6) = v31;
    *((_OWORD *)v30 + 7) = v31;
    *((_OWORD *)v30 + 4) = v31;
    *((_OWORD *)v30 + 5) = v31;
    *((_OWORD *)v30 + 2) = v31;
    *((_OWORD *)v30 + 3) = v31;
    *(_OWORD *)v30 = v31;
    *((_OWORD *)v30 + 1) = v31;
    v41 = v40[0];
    v42 = v40[1];
    v45 = v40[4];
    v46 = v40[5];
    v43 = v40[2];
    v44 = v40[3];
    v49 = v40[8];
    v50 = v40[9];
    v47 = v40[6];
    v48 = v40[7];
    CFX::RG::Resource::Resource((uint64_t)v30, (uint64_t)"pingPongTex", (uint64_t)&v41, 2);
    sub_1B181C064((CFX::RG::Resource **)(*v17 + 16), v30);
    v16 = *v17;
    if ((*(_BYTE *)(*v17 + 32) & 2) == 0)
    {
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)v39);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)v39, MTLPixelFormatRGBA16Float, (uint64_t)v38);
      v32 = (CFX::RG::Resource *)malloc_type_malloc(0xE0uLL, 0xD5346062uLL);
      *(_QWORD *)&v33 = -1;
      *((_QWORD *)&v33 + 1) = -1;
      *((_OWORD *)v32 + 12) = v33;
      *((_OWORD *)v32 + 13) = v33;
      *((_OWORD *)v32 + 10) = v33;
      *((_OWORD *)v32 + 11) = v33;
      *((_OWORD *)v32 + 8) = v33;
      *((_OWORD *)v32 + 9) = v33;
      *((_OWORD *)v32 + 6) = v33;
      *((_OWORD *)v32 + 7) = v33;
      *((_OWORD *)v32 + 4) = v33;
      *((_OWORD *)v32 + 5) = v33;
      *((_OWORD *)v32 + 2) = v33;
      *((_OWORD *)v32 + 3) = v33;
      *(_OWORD *)v32 = v33;
      *((_OWORD *)v32 + 1) = v33;
      v41 = v38[0];
      v42 = v38[1];
      v45 = v38[4];
      v46 = v38[5];
      v43 = v38[2];
      v44 = v38[3];
      v49 = v38[8];
      v50 = v38[9];
      v47 = v38[6];
      v48 = v38[7];
      CFX::RG::Resource::Resource((uint64_t)v32, (uint64_t)"pingPongTex", (uint64_t)&v41, 2);
      sub_1B181C064((CFX::RG::Resource **)(*v17 + 24), v32);
      v16 = *v17;
    }
  }
  if ((*(_BYTE *)(v16 + 32) & 2) != 0)
  {
    *(_BYTE *)(v16 + 32) &= ~1u;
    if (sub_1B1815DC0(*(_QWORD *)(a1 + 368)))
      v34 = 0x100000001;
    else
      v34 = 0x100000002;
    CFX::RG::Pass::renderTo(a1, *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 400) + 32) & 1) + 16), v34, 0);
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1 + 400) + 32) = (*(_BYTE *)(*(_QWORD *)(a1 + 400) + 32) & 0xFE | sub_1B1815DC0(*(_QWORD *)(a1 + 368)) & 1) ^ 1;
    CFX::RG::Pass::renderTo(a1, *(_QWORD *)(*(_QWORD *)(a1 + 400) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 400) + 32) & 1) + 16), 0x100000000, 0);
  }
  CFX::RG::Pass::readFrom((uint64_t *)a1, v12);
  if (sub_1B1815DD4(*(_QWORD *)(a1 + 368)))
    CFX::RG::Pass::renderTo(a1, v14, 0x100000000, 1);
  return a1;
}

void sub_1B181BAA0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B181BAD0(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)v4 = &off_1E63CE960;
    *(_QWORD *)(v4 + 16) = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, v4);
  }
  return v4;
}

uint64_t sub_1B181BB50(uint64_t a1, CFX::CrossFrameResourceManager **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const __CFString *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const __CFString *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  CFX::CrossFrameResourceManager *v42;
  unint64_t v43;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  _OWORD v51[6];
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_BYTE *)(*(_QWORD *)(a1 + 400) + 32);
  v12 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 392))+ 16);
  v13 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v14 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v13 ^ ((0x9DDFEA08EB382D69 * (v13 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v13 ^ v12)))) ^ ((0x9DDFEA08EB382D69 * (v13 ^ ((0x9DDFEA08EB382D69 * (v13 ^ v12)) >> 47) ^ (0x9DDFEA08EB382D69 * (v13 ^ v12)))) >> 47));
  v15 = CFX::CrossFrameResourceManager::get(a2[4], v14);
  *(_QWORD *)(a1 + 408) = v15;
  if (!v15)
  {
    *(_QWORD *)(a1 + 408) = sub_1B181BD58(a2[4], v14);
    v19 = (void *)objc_msgSend_resourceManager(v10, v16, v17, v18);
    v20 = *(_QWORD *)(a1 + 408);
    memset(v51, 0, sizeof(v51));
    v52 = 0;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    v60 = 0u;
    v61 = 0u;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v65 = 0u;
    v66 = 0u;
    v67 = 0;
    v21 = (void *)sub_1B18FD768((uint64_t)v19);
    v53 = objc_msgSend_frameworkLibrary(v21, v22, v23, v24);
    *(_QWORD *)&v54 = 115;
    v27 = CFSTR("vfx_jittering_color_attachment");
    if ((v11 & 2) == 0)
      v27 = CFSTR("vfx_jittering_texture");
    *((_QWORD *)&v65 + 1) = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v66 = v27;
    v28 = objc_msgSend_newRenderPipelineStateWithDesc_(v19, v25, (uint64_t)v51, v26);
    v29 = *(void **)(v20 + 24);
    if (v29 != (void *)v28)
    {
      v30 = v28;
      if (v29)

      *(_QWORD *)(v20 + 24) = v30;
    }
    v31 = *(_QWORD *)(a1 + 408);
    v32 = (void *)sub_1B18FD768((uint64_t)v19);
    *((_QWORD *)&v46 + 1) = objc_msgSend_frameworkLibrary(v32, v33, v34, v35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    v47 = 115;
    v38 = CFSTR("vfx_jittering_color_attachment_drawable");
    v48 = v12;
    if ((v11 & 2) == 0)
      v38 = CFSTR("vfx_jittering_texture_drawable");
    *((_QWORD *)&v49 + 1) = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v50 = v38;
    v39 = objc_msgSend_newRenderPipelineStateWithDesc_(v19, v36, (uint64_t)&v45, v37);
    v40 = *(void **)(v31 + 16);
    if (v40 != (void *)v39)
    {
      v41 = v39;
      if (v40)

      *(_QWORD *)(v31 + 16) = v41;
    }
  }
  v42 = a2[4];
  v43 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  return sub_1B181BAD0(v42, v43);
}

_QWORD *sub_1B181BD58(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = &off_1E63CE980;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B181BDCC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const CFX::RG::Resource *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void **v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  id Texture;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x2_t v39;
  unsigned int v40;
  float32x2_t v41;
  uint64_t v47;
  const char *v49;
  const char *v50;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;

  v10 = sub_1B182AC68((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v11 = (const CFX::RG::Resource *)a1[48];
  v12 = sub_1B1815DD4(a1[46]);
  v20 = a1[51];
  if (v12)
  {
    v23 = *(void **)(v20 + 16);
    v22 = (void **)(v20 + 16);
    v21 = v23;
    if (v23)
      goto LABEL_4;
    goto LABEL_3;
  }
  v52 = *(void **)(v20 + 24);
  v22 = (void **)(v20 + 24);
  v21 = v52;
  if (!v52)
  {
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v14, v15, v16, v17, v18, v19, (uint64_t)"_ptr != NULL");
    v21 = *v22;
  }
LABEL_4:
  v24 = objc_msgSend_state(v21, v13, v14, v15);
  objc_msgSend_setRenderPipelineState_(*(void **)(v10 + 16), v25, v24, v26);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v11);
  sub_1B179AEE4(v10, Texture, 0, v28);
  v29 = a1[50];
  if ((*(_BYTE *)(v29 + 32) & 2) == 0)
  {
    v30 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v29 + 8 * ((*(_BYTE *)(v29 + 32) & 1) == 0) + 16));
    sub_1B179AEE4(v10, v30, 1, v31);
  }
  v32 = sub_1B1815DC0(a1[46]);
  v40 = v32 + 1;
  if (v32 == -1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Count should be > 0"), v33, v34, v35, v36, v37, v38, (uint64_t)"count > 0");
  *(float *)v39.i32 = (float)v40;
  v41 = (float32x2_t)vdup_lane_s32(v39, 0);
  __asm { FMOV            V2.2S, #-1.0 }
  LODWORD(v47) = vadd_f32((float32x2_t)v39, _D2).u32[0];
  __asm { FMOV            V2.2S, #1.0 }
  HIDWORD(v47) = vdiv_f32(_D2, v41).i32[1];
  v53 = v47;
  v54 = 0;
  v55 = 0;
  v56 = 0;
  sub_1B1868D14(*(_QWORD *)(v10 + 24), &v53, 8uLL, &v54);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v10 + 16), v49, v55, v56, 0);
  return sub_1B179AF64(v10, v50);
}

uint64_t sub_1B181BF34(uint64_t *a1, CFX::CrossFrameResourceManager *a2, uint64_t a3)
{
  return sub_1B181BF44(a1, (uint64_t)a1, a2, a3);
}

uint64_t sub_1B181BF44(uint64_t *a1, uint64_t a2, CFX::CrossFrameResourceManager *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[0] = sub_1B181C128(v9[0], v7, v9, a2, a3, a4);
  sub_1B179C734(a1 + 18, v9);
  return v9[0];
}

void sub_1B181BFA0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B181BFC4(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63CE960;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  return a1;
}

void sub_1B181C00C(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63CE960;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B181C064(CFX::RG::Resource **a1, CFX::RG::Resource *a2)
{
  CFX::RG::Resource *v3;
  void *v4;

  v3 = *a1;
  *a1 = a2;
  if (v3)
  {
    CFX::RG::Resource::~Resource(v3);
    free(v4);
  }
}

_QWORD *sub_1B181C090(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CE980;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  return a1;
}

void sub_1B181C0D4(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CE980;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B181C128(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, CFX::CrossFrameResourceManager *a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v9 = sub_1B179C1C0(v12, 0x1A0u, 8u);
  return sub_1B181B74C(v9, *a3, a3[1], v10, a5, a6);
}

void sub_1B181C184(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  char v11;
  char v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"description");
  v10 = 0;
  if (a2)
    v11 = 8;
  else
    v11 = 0;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a1 + 80) & 0xF7 | v11;
  if (a2)
    v12 = 4;
  else
    v12 = 0;
  do
  {
    *(_BYTE *)(a1 + 11 + v10) = *(_BYTE *)(a1 + 11 + v10) & 0xFB | v12;
    v10 += 8;
  }
  while (v10 != 64);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a1 + 75) & 0xFB | v12;
}

uint64_t sub_1B181C224(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const __CFString *v4;

  v4 = (const __CFString *)j__objc_msgSend_lowercaseString(a1, a2, a3, a4);
  if (CFEqual(v4, CFSTR("rgba")))
    return 2;
  if (CFStringHasPrefix(v4, CFSTR("rgba")))
  {
    if (CFStringHasPrefix(v4, CFSTR("rgba8")))
    {
      if (CFEqual(v4, CFSTR("rgba8unorm")) || CFEqual(v4, CFSTR("rgba8")))
        return 28;
      if (CFEqual(v4, CFSTR("rgba8snorm")) || CFEqual(v4, CFSTR("rgba8s")))
        return 29;
      if (CFEqual(v4, CFSTR("rgba8uint")) || CFEqual(v4, CFSTR("rgba8ui")))
        return 30;
      if (CFEqual(v4, CFSTR("rgba8sint")) || CFEqual(v4, CFSTR("rgba8i")))
        return 31;
    }
    else if (CFStringHasPrefix(v4, CFSTR("rgba16")))
    {
      if (CFEqual(v4, CFSTR("rgba16unorm")) || CFEqual(v4, CFSTR("rgba16")))
        return 32;
      if (CFEqual(v4, CFSTR("rgba16snorm")) || CFEqual(v4, CFSTR("rgba16s")))
        return 33;
      if (CFEqual(v4, CFSTR("rgba16uint")) || CFEqual(v4, CFSTR("rgba16ui")))
        return 34;
      if (CFEqual(v4, CFSTR("rgba16sint")) || CFEqual(v4, CFSTR("rgba16i")))
        return 35;
      if (CFEqual(v4, CFSTR("rgba16float")) || CFEqual(v4, CFSTR("rgba16f")))
        return 36;
    }
    else if (CFStringHasPrefix(v4, CFSTR("rgba32")))
    {
      if (CFEqual(v4, CFSTR("rgba32uint")) || CFEqual(v4, CFSTR("rgba32ui")))
        return 37;
      if (CFEqual(v4, CFSTR("rgba32sint")) || CFEqual(v4, CFSTR("rgba32i")))
        return 38;
      if (CFEqual(v4, CFSTR("rgba32float")) || CFEqual(v4, CFSTR("rgba32f")))
        return 39;
    }
  }
  else if (CFStringHasPrefix(v4, CFSTR("rg")))
  {
    if (CFStringHasPrefix(v4, CFSTR("rg8")))
    {
      if (CFEqual(v4, CFSTR("rg8unorm")) || CFEqual(v4, CFSTR("rg8")))
        return 15;
      if (CFEqual(v4, CFSTR("rg8snorm")) || CFEqual(v4, CFSTR("rg8s")))
        return 16;
      if (CFEqual(v4, CFSTR("rg8uint")) || CFEqual(v4, CFSTR("rg8ui")))
        return 17;
      if (CFEqual(v4, CFSTR("rg8sint")) || CFEqual(v4, CFSTR("rg8i")))
        return 18;
    }
    else if (CFStringHasPrefix(v4, CFSTR("rg16")))
    {
      if (CFEqual(v4, CFSTR("rg16unorm")) || CFEqual(v4, CFSTR("rg16")))
        return 19;
      if (CFEqual(v4, CFSTR("rg16snorm")) || CFEqual(v4, CFSTR("rg16s")))
        return 20;
      if (CFEqual(v4, CFSTR("rg16uint")) || CFEqual(v4, CFSTR("rg16ui")))
        return 21;
      if (CFEqual(v4, CFSTR("rg16sint")) || CFEqual(v4, CFSTR("rg16i")))
        return 22;
      if (CFEqual(v4, CFSTR("rg16float")) || CFEqual(v4, CFSTR("rg16f")))
        return 23;
    }
    else if (CFStringHasPrefix(v4, CFSTR("rg32")))
    {
      if (CFEqual(v4, CFSTR("rg32uint")) || CFEqual(v4, CFSTR("rg32ui")))
        return 24;
      if (CFEqual(v4, CFSTR("rg32sint")) || CFEqual(v4, CFSTR("rg32i")))
        return 25;
      if (CFEqual(v4, CFSTR("rg32float")) || CFEqual(v4, CFSTR("rg32f")))
        return 26;
    }
  }
  else if (CFStringHasPrefix(v4, CFSTR("r")))
  {
    if (CFStringHasPrefix(v4, CFSTR("r8")))
    {
      if (CFEqual(v4, CFSTR("r8unorm")) || CFEqual(v4, CFSTR("r8")))
        return 3;
      if (CFEqual(v4, CFSTR("r8snorm")) || CFEqual(v4, CFSTR("r8s")))
        return 4;
      if (CFEqual(v4, CFSTR("r8uint")) || CFEqual(v4, CFSTR("r8ui")))
        return 5;
      if (CFEqual(v4, CFSTR("r8sint")) || CFEqual(v4, CFSTR("r8i")))
        return 6;
    }
    else if (CFStringHasPrefix(v4, CFSTR("r16")))
    {
      if (CFEqual(v4, CFSTR("r16unorm")) || CFEqual(v4, CFSTR("r16")))
        return 7;
      if (CFEqual(v4, CFSTR("r16snorm")) || CFEqual(v4, CFSTR("r16s")))
        return 8;
      if (CFEqual(v4, CFSTR("r16uint")) || CFEqual(v4, CFSTR("r16ui")))
        return 9;
      if (CFEqual(v4, CFSTR("r16sint")) || CFEqual(v4, CFSTR("r16i")))
        return 10;
      if (CFEqual(v4, CFSTR("r16float")) || CFEqual(v4, CFSTR("r16f")))
        return 11;
    }
    else if (CFStringHasPrefix(v4, CFSTR("r32")))
    {
      if (CFEqual(v4, CFSTR("r32uint")) || CFEqual(v4, CFSTR("r32ui")))
        return 12;
      if (CFEqual(v4, CFSTR("r32sint")) || CFEqual(v4, CFSTR("r32i")))
        return 13;
      if (CFEqual(v4, CFSTR("r32float")) || CFEqual(v4, CFSTR("r32f")))
        return 14;
    }
  }
  if (CFEqual(v4, CFSTR("bgra8unorm")) || CFEqual(v4, CFSTR("bgra8")))
    return 27;
  if (!CFStringHasPrefix(v4, CFSTR("depth")))
    goto LABEL_145;
  if (CFEqual(v4, CFSTR("depth16unorm")) || CFEqual(v4, CFSTR("depth16")))
    return 40;
  if (CFEqual(v4, CFSTR("depth24unorm")) || CFEqual(v4, CFSTR("depth24")))
    return 41;
  if (CFEqual(v4, CFSTR("depth32float")) || CFEqual(v4, CFSTR("depth32f")))
    return 42;
  if (CFEqual(v4, CFSTR("depth24unorm_stencil8")))
    return 44;
  if (CFEqual(v4, CFSTR("depth32float_stencil8")))
    return 45;
LABEL_145:
  if (CFEqual(v4, CFSTR("stencil8")))
    return 43;
  return 0;
}

__CFString *sub_1B181CB34(int a1)
{
  if ((a1 - 1) > 0x2C)
    return 0;
  else
    return off_1E63D6A90[(char)(a1 - 1)];
}

uint64_t sub_1B181CB5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  sub_1B181CBA4((void **)a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1B181CB88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B181CBA4(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFIndex v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const __CFData *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  CFDataRef v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CFDataRef v88;
  unint64_t v89;
  uint64_t *v90;
  _QWORD *v91;
  CFIndex v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t *v98;
  char *v99;
  char *v100;
  uint64_t *v101;
  uint64_t v102;
  const __CFAllocator *allocator;
  void **v104;
  const __CFArray *v105;
  uint64_t v106;
  CFIndex v107;
  CFIndex v108;
  const UInt8 *BytePtr;
  const UInt8 *v110;
  const UInt8 *v111;
  const void *v112;
  unsigned int v113;
  uint64_t v114;
  UInt8 *bytes;
  UInt8 *v116;
  uint64_t v117;
  uint64_t v118;
  int v119[3];

  v112 = sub_1B1875E70(a2, 1, a3, a4, a5, a6, a7, a8);
  v106 = a2;
  v105 = sub_1B1874BE0(a2, v10, v11, v12, v13, v14, v15, v16);
  if ((uint64_t)v105 >= 1)
  {
    v22 = 0;
    v102 = (uint64_t)(a1 + 2);
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v104 = a1;
    while (1)
    {
      v23 = sub_1B1874C3C(v106, v22, 1, v17, v18, v19, v20, v21);
      v31 = sub_1B17A426C((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30);
      v32 = sub_1B17A47FC((uint64_t)v23);
      if (v31 > 5 || ((1 << v31) & 0x23) == 0 || v32 == 0)
        return;
      v35 = v32;
      v36 = 3 * v32;
      v37 = 12 * v32;
      v116 = (UInt8 *)malloc_type_malloc(12 * v32, 0xC565B4A9uLL);
      v38 = 16 * v36;
      bytes = (UInt8 *)malloc_type_malloc(v38, 0x7D0DAC3AuLL);
      v119[0] = 0;
      v39 = (const __CFData *)sub_1B17A4570((uint64_t)v23, v119);
      v107 = v22;
      v108 = v37;
      if (v119[0] == 4)
      {
        BytePtr = CFDataGetBytePtr(v39);
        v110 = 0;
        v111 = 0;
      }
      else if (v119[0] == 2)
      {
        v110 = CFDataGetBytePtr(v39);
        v111 = 0;
        BytePtr = 0;
      }
      else
      {
        v111 = v119[0] == 1 ? CFDataGetBytePtr(v39) : 0;
        BytePtr = 0;
        v110 = 0;
      }
      if (v35 >= 1)
        break;
LABEL_39:
      v71 = -[VFXMesh __createCFObject]_0();
      v72 = CFDataCreate(allocator, bytes, v38);
      v76 = (const void *)sub_1B17ED204(v72, 0, 3 * v35, 4, 1, v73, v74, v75);
      CFRelease(v72);
      sub_1B1874ECC(v71, v76, 0, 0, v77, v78, v79, v80);
      CFRelease(v76);
      v81 = sub_1B17A39B4();
      sub_1B17A3B60(v81, 0, v82, v83, v84, v85, v86, v87);
      v88 = CFDataCreate(allocator, v116, v108);
      sub_1B17A4464(v81, v35, v88, 4);
      CFRelease(v88);
      v90 = (uint64_t *)v104[1];
      v89 = (unint64_t)v104[2];
      if ((unint64_t)v90 >= v89)
      {
        v93 = ((char *)v90 - (_BYTE *)*v104) >> 4;
        v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 60)
          abort();
        v95 = v89 - (_QWORD)*v104;
        if (v95 >> 3 > v94)
          v94 = v95 >> 3;
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF0)
          v96 = 0xFFFFFFFFFFFFFFFLL;
        else
          v96 = v94;
        if (v96)
          v97 = (char *)sub_1B17F7824(v102, v96);
        else
          v97 = 0;
        v98 = (uint64_t *)&v97[16 * v93];
        *v98 = v71;
        v98[1] = v81;
        v100 = (char *)*v104;
        v99 = (char *)v104[1];
        v101 = v98;
        if (v99 == *v104)
        {
          v92 = v107;
        }
        else
        {
          v92 = v107;
          do
          {
            *((_OWORD *)v101 - 1) = *((_OWORD *)v99 - 1);
            v101 -= 2;
            v99 -= 16;
          }
          while (v99 != v100);
          v99 = (char *)*v104;
        }
        v91 = v98 + 2;
        *v104 = v101;
        v104[1] = v98 + 2;
        v104[2] = &v97[16 * v96];
        if (v99)
          operator delete(v99);
      }
      else
      {
        *v90 = v71;
        v90[1] = v81;
        v91 = v90 + 2;
        v92 = v107;
      }
      v104[1] = v91;
      free(v116);
      free(bytes);
      v22 = v92 + 1;
      if ((const __CFArray *)v22 == v105)
        return;
    }
    v46 = 0;
    v47 = 0;
    v48 = 6;
    v49 = 1;
    v50 = 2;
    v114 = v35;
    v113 = v31;
    while (1)
    {
      if (v31 == 5)
      {
        v51 = 0;
        v52 = (2 * v47) | 1;
        v53 = 2 * v47 + 2;
      }
      else if (v31 == 1)
      {
        v54 = 2 * v47;
        if ((v47 & 1) != 0)
        {
          v52 = v54 | 1;
          v53 = v54 + 2;
        }
        else
        {
          v52 = v54 + 2;
          v53 = v54 | 1;
        }
        v51 = v47;
      }
      else if (v31)
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
      }
      else
      {
        v51 = 3 * v47;
        v52 = v46 + 1;
        v53 = v46 + 2;
      }
      switch(v119[0])
      {
        case 4:
          v51 = *(unsigned int *)&BytePtr[4 * v51];
          v117 = *(unsigned int *)&BytePtr[4 * v52];
          v55 = *(unsigned int *)&BytePtr[4 * v53];
          break;
        case 2:
          v51 = *(unsigned __int16 *)&v110[2 * v51];
          v117 = *(unsigned __int16 *)&v110[2 * v52];
          v55 = *(unsigned __int16 *)&v110[2 * v53];
          break;
        case 1:
          v51 = v111[v51];
          v117 = v111[v52];
          v55 = v111[v53];
          break;
        default:
          v118 = v53;
          v117 = v52;
          goto LABEL_38;
      }
      v118 = v55;
LABEL_38:
      *(double *)&bytes[4 * v48 - 24] = sub_1B17EE400((uint64_t)v112, v51, v40, v41, v42, v43, v44, v45);
      *(_DWORD *)&bytes[4 * v48 - 16] = v56;
      *(float *)&bytes[4 * v48 - 12] = (float)(v46 % 3);
      *(_DWORD *)&v116[4 * v46] = v46;
      *(double *)&bytes[4 * v48 - 8] = sub_1B17EE400((uint64_t)v112, v117, v57, v58, v59, v60, v61, v62);
      *(_DWORD *)&bytes[4 * v48] = v63;
      *(float *)&bytes[4 * v48 + 4] = (float)(v46 + 1 - 3 * (v49 / 3));
      *(_DWORD *)&v116[4 * (v46 + 1)] = v46 + 1;
      *(double *)&bytes[4 * v48 + 8] = sub_1B17EE400((uint64_t)v112, v118, v64, v65, v66, v67, v68, v69);
      *(_DWORD *)&bytes[4 * v48 + 16] = v70;
      *(float *)&bytes[4 * v48 + 20] = (float)(v46 + 2 - 3 * (v50 / 3));
      *(_DWORD *)&v116[4 * (v46 + 2)] = v46 + 2;
      ++v47;
      v48 += 12;
      v49 += 3;
      v50 += 3;
      v46 += 3;
      v35 = v114;
      v31 = v113;
      if (v114 == v47)
        goto LABEL_39;
    }
  }
}

uint64_t *sub_1B181D0C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;

  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    do
    {
      v4 = *(const void **)(v2 + 8);
      CFRelease(*(CFTypeRef *)v2);
      CFRelease(v4);
      v2 += 16;
    }
    while (v2 != v3);
    v2 = *a1;
  }
  if (v2)
  {
    a1[1] = v2;
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1B181D124(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1B181D140(uint64_t a1, uint64_t a2, uint64_t a3, __int128 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;

  *(_QWORD *)(a1 + 24) = a6;
  result = (void *)sub_1B1813BC4(a2, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (result)
  {
    v16 = result;
    objc_msgSend_pushDebugGroup_(result, v14, (uint64_t)CFSTR("VFX - Draw wireframe"), v15);
    v20 = *(uint64_t **)a1;
    v21 = *(uint64_t **)(a1 + 8);
    if (*(uint64_t **)a1 != v21)
    {
      do
      {
        v22 = *v20;
        v23 = v20[1];
        v20 += 2;
        v29 = a4[2];
        v30 = a4[3];
        v27 = *a4;
        v28 = a4[1];
        v24 = sub_1B18A7BA0();
        LOBYTE(v26) = 1;
        objc_msgSend_renderMesh_meshElement_withProgram_engineContext_transform_color_rasterizerStates_blendState_texture_depthBias_(v16, v25, v22, v23, a3, a2, a5, 0, *(double *)&v27, *(double *)&v28, *(double *)&v29, *(double *)&v30, v24, 0, v26);
      }
      while (v20 != v21);
    }
    return (void *)objc_msgSend_popDebugGroup(v16, v17, v18, v19);
  }
  return result;
}

void sub_1B181D240(void **a1, unint64_t a2, unint64_t a3, unint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v11;
  __n128 *v12;
  unint64_t v13;
  __n128 **v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  __n128 **v21;
  char *v22;
  char *v23;
  char *v24;
  __n128 *v25;

  v11 = sub_1B181D374((uint64_t)a1, a2);
  v12 = (__n128 *)operator new();
  v12->n128_u64[0] = v11;
  v12[1].n128_u64[0] = a3;
  v12[1].n128_u64[1] = a4;
  v12[2] = a5;
  v12[3] = a6;
  v12[4] = a7;
  v12[5] = a8;
  v13 = (unint64_t)a1[2];
  v14 = (__n128 **)a1[1];
  if ((unint64_t)v14 >= v13)
  {
    v16 = ((char *)v14 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v16 + 1) >> 61)
      abort();
    v17 = v13 - (_QWORD)*a1;
    v18 = v17 >> 2;
    if (v17 >> 2 <= (unint64_t)(v16 + 1))
      v18 = v16 + 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v18;
    if (v19)
      v20 = (char *)sub_1B17F812C((uint64_t)(a1 + 2), v19);
    else
      v20 = 0;
    v21 = (__n128 **)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v12;
    v15 = v21 + 1;
    v24 = (char *)*a1;
    v23 = (char *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        v25 = (__n128 *)*((_QWORD *)v23 - 1);
        v23 -= 8;
        *--v21 = v25;
      }
      while (v23 != v24);
      v23 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v15;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *v14 = v12;
    v15 = v14 + 1;
  }
  a1[1] = v15;
}

uint64_t sub_1B181D374(uint64_t a1, unint64_t a2)
{
  _QWORD *v3;
  uint64_t **v4;
  uint64_t **v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t *v18;

  v17 = a2;
  v4 = (uint64_t **)(a1 + 32);
  v3 = *(_QWORD **)(a1 + 32);
  if (!v3)
    goto LABEL_12;
  v5 = (uint64_t **)(a1 + 32);
  do
  {
    v6 = v3[4];
    v7 = v6 >= a2;
    if (v6 >= a2)
      v8 = v3;
    else
      v8 = v3 + 1;
    if (v7)
      v5 = (uint64_t **)v3;
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v5 != v4 && (unint64_t)v5[4] <= a2)
    return (uint64_t)v5[5];
LABEL_12:
  v9 = operator new();
  sub_1B181CB5C(v9, a2, v10, v11, v12, v13, v14, v15);
  v18 = &v17;
  sub_1B181D66C(v4 - 1, &v17, (uint64_t)&unk_1B22458B0, (uint64_t **)&v18)[5] = v9;
  return v9;
}

void sub_1B181D43C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1020C4016EE4530);
  _Unwind_Resume(a1);
}

uint64_t sub_1B181D460(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v13;

  v9 = *a1;
  v10 = a1[1];
  if (*a1 != v10)
  {
    do
    {
      v13 = *v9++;
      sub_1B181D140(*(_QWORD *)v13, a2, a3, (__int128 *)(v13 + 32), v13 + 16, (uint64_t)a1[6], a7, a8);
      MEMORY[0x1B5E22E18](v13, 0x1020C406DF670C8);
    }
    while (v9 != v10);
    v9 = *a1;
  }
  a1[1] = v9;
  a1[6] = (uint64_t *)((char *)a1[6] + 1);
  return sub_1B181D4F8((uint64_t)a1);
}

uint64_t sub_1B181D4F8(uint64_t result)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;

  v1 = (uint64_t **)(result + 24);
  v2 = *(uint64_t **)(result + 24);
  v3 = (uint64_t *)(result + 32);
  if (v2 != (uint64_t *)(result + 32))
  {
    v4 = result;
    do
    {
      v5 = (uint64_t *)v2[5];
      if (v5[3] >= *(_QWORD *)(v4 + 48) - 100)
      {
        v8 = (uint64_t *)v2[1];
        if (v8)
        {
          do
          {
            v6 = v8;
            v8 = (uint64_t *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v6 = (uint64_t *)v2[2];
            v9 = *v6 == (_QWORD)v2;
            v2 = v6;
          }
          while (!v9);
        }
      }
      else
      {
        v6 = sub_1B181D914(v1, v2);
        operator delete(v2);
        v7 = sub_1B181D0C0(v5);
        result = MEMORY[0x1B5E22E18](v7, 0x1020C4016EE4530);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

_QWORD *sub_1B181D5C8()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = 0;
  result[1] = 0;
  result[5] = 0;
  result[4] = 0;
  result[2] = 0;
  result[3] = result + 4;
  return result;
}

uint64_t sub_1B181D604(uint64_t result)
{
  if (result)
  {
    sub_1B181D630(result);
    JUMPOUT(0x1B5E22E18);
  }
  return result;
}

uint64_t sub_1B181D630(uint64_t a1)
{
  void *v2;

  sub_1B1805B90(a1 + 24, *(_QWORD **)(a1 + 32));
  v2 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t *sub_1B181D66C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_1B181D728(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1B181D728(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_1B181D77C(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_1B181D77C(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t *sub_1B181D914(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_1B181D984(v6, a2);
  return v3;
}

uint64_t *sub_1B181D984(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

uint64_t sub_1B181DD08()
{
  if (qword_1ED4CEC58 != -1)
    dispatch_once(&qword_1ED4CEC58, &unk_1E63D0BD0);
  return qword_1ED4CEC60;
}

void sub_1B181DD48()
{
  if (!qword_1ED4CEC60)
  {
    qword_1ED4CEC60 = sub_1B179CB60(&qword_1ED4CEC60);
    qword_1ED4BBB08 = (uint64_t)sub_1B181EA94;
  }
}

uint64_t sub_1B181DD98()
{
  uint64_t result;

  if (qword_1ED4CEC58 != -1)
    dispatch_once(&qword_1ED4CEC58, &unk_1E63D0BD0);
  result = sub_1B179CB90(qword_1ED4CEC60, 0x98uLL);
  if (result)
  {
    *(_BYTE *)(result + 64) |= 1u;
    *(_QWORD *)(result + 80) = 0;
    *(_QWORD *)(result + 88) = 0;
  }
  return result;
}

CFHashCode sub_1B181DDF4(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFHashCode result;
  unint64_t v11;

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfileHashCode");
  result = CFHash(cf);
  v11 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * result) ^ ((0x9DDFEA08EB382D69 * result) >> 47));
  *(_QWORD *)(a1 + 152) = 0x9DDFEA08EB382D69 * (v11 ^ (v11 >> 47));
  return result;
}

uint64_t sub_1B181DE6C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 152);
}

_QWORD *sub_1B181DE74(const void *a1, const void *a2)
{
  _QWORD *v4;
  const void *v5;
  CFTypeRef v6;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  v4 = (_QWORD *)sub_1B181DD98();
  v5 = (const void *)v4[10];
  if (v5 != a1)
  {
    if (v5)
    {
      CFRelease(v5);
      v4[10] = 0;
    }
    if (a1)
      v6 = CFRetain(a1);
    else
      v6 = 0;
    v4[10] = v6;
  }
  v7 = (const void *)v4[11];
  if (v7 != a2)
  {
    if (v7)
    {
      CFRelease(v7);
      v4[11] = 0;
    }
    if (a2)
      v8 = CFRetain(a2);
    else
      v8 = 0;
    v4[11] = v8;
  }
  v9 = (const void *)v4[12];
  if (v9)
  {
    CFRelease(v9);
    v4[12] = 0;
  }
  v10 = (const void *)v4[13];
  if (v10)
  {
    CFRelease(v10);
    v4[13] = 0;
  }
  v11 = (const void *)v4[14];
  if (v11)
  {
    CFRelease(v11);
    v4[14] = 0;
  }
  v12 = (const void *)v4[15];
  if (v12)
  {
    CFRelease(v12);
    v4[15] = 0;
  }
  v13 = (const void *)v4[18];
  if (v13)
  {
    CFRelease(v13);
    v4[18] = 0;
  }
  sub_1B181DF60(v4);
  return v4;
}

CFHashCode sub_1B181DF60(_QWORD *a1)
{
  const void *v2;
  unint64_t v3;
  const void *v4;
  CFHashCode v5;
  CFHashCode result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = (const void *)a1[18];
  if (v2)
    v3 = 0x9DDFEA08EB382D69 * CFHash(v2);
  else
    v3 = 0;
  v4 = (const void *)a1[10];
  if (v4)
    v5 = CFHash(v4);
  else
    v5 = 0;
  result = a1[11];
  if (result)
    result = CFHash((CFTypeRef)result);
  v7 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ (v3 >> 47))) >> 47));
  v8 = 0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v5 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v5 ^ v7)));
  v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  a1[19] = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v9 ^ ((0x9DDFEA08EB382D69 * (result ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (result ^ v9)))) ^ ((0x9DDFEA08EB382D69 * (v9 ^ ((0x9DDFEA08EB382D69 * (result ^ v9)) >> 47) ^ (0x9DDFEA08EB382D69 * (result ^ v9)))) >> 47));
  return result;
}

_QWORD *sub_1B181E01C(const void *a1, const void *a2, const void *a3)
{
  _QWORD *v6;
  const void *v7;
  CFTypeRef v8;
  const void *v9;
  CFTypeRef v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;

  v6 = (_QWORD *)sub_1B181DD98();
  v7 = (const void *)v6[10];
  if (v7 != a1)
  {
    if (v7)
    {
      CFRelease(v7);
      v6[10] = 0;
    }
    if (a1)
      v8 = CFRetain(a1);
    else
      v8 = 0;
    v6[10] = v8;
  }
  v9 = (const void *)v6[11];
  if (v9 != a2)
  {
    if (v9)
    {
      CFRelease(v9);
      v6[11] = 0;
    }
    if (a2)
      v10 = CFRetain(a2);
    else
      v10 = 0;
    v6[11] = v10;
  }
  v11 = (const void *)v6[12];
  if (v11)
  {
    CFRelease(v11);
    v6[12] = 0;
  }
  v12 = (const void *)v6[13];
  if (v12)
  {
    CFRelease(v12);
    v6[13] = 0;
  }
  v13 = (const void *)v6[14];
  if (v13)
  {
    CFRelease(v13);
    v6[14] = 0;
  }
  v14 = (const void *)v6[15];
  if (v14)
  {
    CFRelease(v14);
    v6[15] = 0;
  }
  v15 = (const void *)v6[18];
  if (v15 != a3)
  {
    if (v15)
    {
      CFRelease(v15);
      v6[18] = 0;
    }
    if (a3)
      v16 = CFRetain(a3);
    else
      v16 = 0;
    v6[18] = v16;
  }
  sub_1B181DF60(v6);
  return v6;
}

uint64_t sub_1B181E12C(const void *a1, const void *a2, const void *a3, const void *a4, const void *a5, const void *a6, int a7, int a8)
{
  uint64_t v16;
  const void *v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeRef v20;
  const void *v21;
  CFTypeRef v22;
  const void *v23;
  CFTypeRef v24;
  const void *v25;
  CFTypeRef v26;
  const void *v27;
  CFTypeRef v28;
  const void *v29;

  v16 = sub_1B181DD98();
  v17 = *(const void **)(v16 + 80);
  if (v17 != a1)
  {
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(v16 + 80) = 0;
    }
    if (a1)
      v18 = CFRetain(a1);
    else
      v18 = 0;
    *(_QWORD *)(v16 + 80) = v18;
  }
  v19 = *(const void **)(v16 + 88);
  if (v19 != a2)
  {
    if (v19)
    {
      CFRelease(v19);
      *(_QWORD *)(v16 + 88) = 0;
    }
    if (a2)
      v20 = CFRetain(a2);
    else
      v20 = 0;
    *(_QWORD *)(v16 + 88) = v20;
  }
  v21 = *(const void **)(v16 + 96);
  if (v21 != a3)
  {
    if (v21)
    {
      CFRelease(v21);
      *(_QWORD *)(v16 + 96) = 0;
    }
    if (a3)
      v22 = CFRetain(a3);
    else
      v22 = 0;
    *(_QWORD *)(v16 + 96) = v22;
  }
  v23 = *(const void **)(v16 + 104);
  if (v23 != a4)
  {
    if (v23)
    {
      CFRelease(v23);
      *(_QWORD *)(v16 + 104) = 0;
    }
    if (a4)
      v24 = CFRetain(a4);
    else
      v24 = 0;
    *(_QWORD *)(v16 + 104) = v24;
  }
  v25 = *(const void **)(v16 + 112);
  if (v25 != a5)
  {
    if (v25)
    {
      CFRelease(v25);
      *(_QWORD *)(v16 + 112) = 0;
    }
    if (a5)
      v26 = CFRetain(a5);
    else
      v26 = 0;
    *(_QWORD *)(v16 + 112) = v26;
  }
  v27 = *(const void **)(v16 + 120);
  if (v27 != a6)
  {
    if (v27)
    {
      CFRelease(v27);
      *(_QWORD *)(v16 + 120) = 0;
    }
    if (a6)
      v28 = CFRetain(a6);
    else
      v28 = 0;
    *(_QWORD *)(v16 + 120) = v28;
  }
  v29 = *(const void **)(v16 + 144);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(v16 + 144) = 0;
  }
  *(_DWORD *)(v16 + 160) = a7;
  if (a8)
    sub_1B181E2D0((_QWORD *)v16);
  return v16;
}

void sub_1B181E2D0(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const __CFDictionary *v6;
  uint64_t v7;
  unint64_t v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  __int128 v14;
  __int128 v15;
  const void *v16;

  v10 = 0;
  v11 = &v10;
  v12 = 0x4800000000;
  v14 = 0u;
  v15 = 0u;
  v16 = 0;
  v13 = a1;
  v2 = (const void *)a1[10];
  if (v2)
    v2 = (const void *)CFHash(v2);
  *(_QWORD *)&v14 = v2;
  v3 = (const void *)a1[11];
  if (v3)
    v3 = (const void *)CFHash(v3);
  *((_QWORD *)&v14 + 1) = v3;
  v4 = (const void *)a1[12];
  if (v4)
    v4 = (const void *)CFHash(v4);
  v15 = (unint64_t)v4;
  v5 = (const void *)a1[18];
  if (v5)
    v5 = (const void *)CFHash(v5);
  v16 = v5;
  v6 = (const __CFDictionary *)a1[14];
  if (v6)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 0x40000000;
    v9[2] = sub_1B181EAB0;
    v9[3] = &unk_1E63D6C20;
    v9[4] = &v10;
    sub_1B17A0528(v6, (uint64_t)v9);
  }
  v7 = 0;
  v8 = 0x3EDF6BA1375BCBF0;
  do
  {
    v8 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v11[v7 + 3]) ^ ((0xC6A4A7935BD1E995 * v11[v7 + 3]) >> 47))) ^ v8);
    ++v7;
  }
  while (v7 != 6);
  a1[19] = (0xC6A4A7935BD1E995 * (v8 ^ (v8 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v8 ^ (v8 >> 47))) >> 47);
  _Block_object_dispose(&v10, 8);
}

uint64_t sub_1B181E40C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(_QWORD *)(a1 + 8 * a2 + 80);
}

CFHashCode sub_1B181E45C(_QWORD *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  CFTypeRef v11;
  CFTypeRef v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  v10 = (const void *)a1[12];
  if (v10)
  {
    CFRelease(v10);
    a1[12] = 0;
  }
  v11 = (CFTypeRef)a1[18];
  if (v11 != cf)
  {
    if (v11)
    {
      CFRelease(v11);
      a1[18] = 0;
    }
    if (cf)
      v12 = CFRetain(cf);
    else
      v12 = 0;
    a1[18] = v12;
  }
  return sub_1B181DF60(a1);
}

CFTypeRef sub_1B181E4E8(uint64_t a1, int a2, CFTypeRef cf, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  CFTypeRef result;
  _QWORD *v13;
  CFTypeRef v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)cf, a4, a5, a6, a7, a8, (uint64_t)"program");
  v11 = a1 + 8 * a2;
  v14 = *(CFTypeRef *)(v11 + 80);
  v13 = (_QWORD *)(v11 + 80);
  result = v14;
  if (v14 != cf)
  {
    if (result)
    {
      CFRelease(result);
      *v13 = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *v13 = result;
  }
  return result;
}

uint64_t sub_1B181E570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_1B181E5B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_1B181E600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_1B181E648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(_QWORD *)(a1 + 120);
}

uint64_t sub_1B181E690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(unsigned int *)(a1 + 160);
}

uint64_t sub_1B181E6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(_QWORD *)(a1 + 128);
}

uint64_t sub_1B181E720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return *(_QWORD *)(a1 + 136);
}

void sub_1B181E768(uint64_t a1, void *key, void *value)
{
  __CFDictionary *Mutable;

  Mutable = *(__CFDictionary **)(a1 + 136);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 136) = Mutable;
  }
  if (value)
    CFDictionarySetValue(Mutable, key, value);
  else
    CFDictionaryRemoveValue(Mutable, key);
}

uint64_t sub_1B181E7E0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_1B181E7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  return (*(unsigned __int8 *)(a1 + 64) >> 1) & 1;
}

void sub_1B181E834(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"program");
  if (a2)
    v10 = 2;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFD | v10;
}

uint64_t sub_1B181E898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"programDelegate");
  return a1 + 16;
}

uint64_t sub_1B181E8E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"programDelegate");
  return *(_QWORD *)(a1 + 32);
}

id sub_1B181E92C(_QWORD *a1)
{
  uint64_t v2;
  char v3;
  char v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  CFNumberRef v13;
  __CFNotificationCenter *LocalCenter;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *valuePtr;

  v2 = 0;
  valuePtr = a1;
  v3 = 1;
  do
  {
    v4 = v3;
    v5 = (const void *)a1[v2 + 10];
    if (v5)
      CFRelease(v5);
    v3 = 0;
    v2 = 1;
  }
  while ((v4 & 1) != 0);
  v6 = (const void *)a1[17];
  if (v6)
    CFRelease(v6);
  v7 = (const void *)a1[12];
  if (v7)
  {
    CFRelease(v7);
    a1[12] = 0;
  }
  v8 = (const void *)a1[13];
  if (v8)
  {
    CFRelease(v8);
    a1[13] = 0;
  }
  v9 = (const void *)a1[14];
  if (v9)
  {
    CFRelease(v9);
    a1[14] = 0;
  }
  v10 = (const void *)a1[15];
  if (v10)
  {
    CFRelease(v10);
    a1[15] = 0;
  }
  v11 = (const void *)a1[16];
  if (v11)
  {
    CFRelease(v11);
    a1[16] = 0;
  }
  v12 = (const void *)a1[18];
  if (v12)
  {
    CFRelease(v12);
    a1[18] = 0;
  }
  v13 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCFXNotificationProgramWillDie"), v13, 0, 1u);
  CFRelease(v13);
  v22 = (uint64_t)valuePtr;
  if (valuePtr[9])
  {
    CFRelease((CFTypeRef)valuePtr[9]);
    v22 = (uint64_t)valuePtr;
    valuePtr[9] = 0;
  }
  return sub_1B193E38C(v22, v15, v16, v17, v18, v19, v20, v21);
}

CFStringRef sub_1B181EA48(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
}

CFMutableArrayRef sub_1B181EA94()
{
  return CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
}

CFHashCode sub_1B181EAB0(uint64_t a1, CFTypeRef cf, const void *a3)
{
  CFHashCode v5;
  CFHashCode result;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = CFHash(cf);
  result = CFHash(a3);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = 0x9DDFEA08EB382D69
     * (*(_QWORD *)(v7 + 56) ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(v7 + 56) ^ v5)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                             * (*(_QWORD *)(v7 + 56) ^ v5)));
  *(_QWORD *)(v7 + 56) = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = *(_QWORD *)(v9 + 56);
  *(_QWORD *)(v9 + 56) = 0x9DDFEA08EB382D69
                       * ((0x9DDFEA08EB382D69
                         * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ result)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                   * (v10 ^ result)))) ^ ((0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ result)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ result)))) >> 47));
  return result;
}

double sub_1B181EB54@<D0>(_OWORD *a1@<X8>)
{
  double result;

  *a1 = xmmword_1B2246770;
  *(_QWORD *)&result = 4294902016;
  *(_OWORD *)((char *)a1 + 12) = *(__int128 *)((char *)&xmmword_1B2246770 + 12);
  return result;
}

unint64_t sub_1B181EB70(int *a1)
{
  uint64x2_t v1;
  int8x16_t v2;

  v1 = (uint64x2_t)vdupq_n_s64(a1[5] | ((unint64_t)(*((unsigned __int16 *)a1 + 12) | (*((unsigned __int8 *)a1 + 26) << 16)) << 32));
  v2 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v1, (uint64x2_t)xmmword_1B2246730), (int8x16_t)xmmword_1B2246760), vandq_s8((int8x16_t)vshlq_u64(v1, (uint64x2_t)xmmword_1B2246740), (int8x16_t)xmmword_1B2246750));
  return *((unsigned __int8 *)a1 + 8) | (2 * *((unsigned __int8 *)a1 + 9)) | (4 * *((unsigned __int8 *)a1 + 10)) | (32 * *((unsigned __int8 *)a1 + 11)) | ((unint64_t)*((unsigned __int8 *)a1 + 12) << 6) | *a1 | ((((unint64_t)*(unsigned int *)((char *)a1 + 13) >> 5) & 0x7FFF8 | *(int *)((char *)a1 + 13) | ((unint64_t)*(_WORD *)((char *)a1 + 17) << 19) | (*(unsigned __int16 *)((char *)a1 + 17) << 14) & 0x3FC00000 | (*((unsigned __int8 *)a1 + 19) << 25) & 0x7FFFFFFE000000) << 9) | ((unint64_t)(vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL)).u32[0] | a1[5]) << 37);
}

uint64_t sub_1B181EC44(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B181EC70(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  const void *Value;
  uint64_t v5;

  if (qword_1ED4CEE40 != -1)
    dispatch_once(&qword_1ED4CEE40, &unk_1E63D0BF0);
  if (!*(_BYTE *)(a1 + 8))
    *(_BYTE *)(a1 + 10) = 1;
  if (*(_BYTE *)(a1 + 11))
  {
    if (*(_BYTE *)(a1 + 12))
      goto LABEL_10;
  }
  else
  {
    *(_DWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 13) = 16776961;
    *(_BYTE *)(a1 + 12) = 0;
  }
  *(_DWORD *)(a1 + 23) = 0;
  *(_DWORD *)(a1 + 20) = 16776961;
LABEL_10:
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4C02D0);
  if (qword_1ED4D0660 != -1)
    dispatch_once_f(&qword_1ED4D0660, &qword_1ED4CEE48, (dispatch_function_t)sub_1B181EC44);
  v2 = sub_1B179CB90(qword_1ED4CEE48, 0x20uLL);
  v3 = *(_OWORD *)(a1 + 12);
  *(_OWORD *)(v2 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v2 + 28) = v3;
  Value = CFSetGetValue((CFSetRef)qword_1ED4CF788, (const void *)v2);
  if (Value)
  {
    v5 = (uint64_t)Value;
    CFRetain(Value);
    sub_1B181EE08((CFTypeRef)v2);
    v2 = v5;
  }
  else
  {
    CFSetSetValue((CFMutableSetRef)qword_1ED4CF788, (const void *)v2);
    *(_BYTE *)(v2 + 44) = 1;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4C02D0);
  return v2;
}

CFMutableSetRef sub_1B181EDB4()
{
  __int128 v0;
  CFMutableSetRef result;
  CFSetCallBacks v2;

  v0 = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 16);
  *(_OWORD *)&v2.version = *MEMORY[0x1E0C9B3B0];
  *(_OWORD *)&v2.release = v0;
  *(_OWORD *)&v2.equal = *(_OWORD *)(MEMORY[0x1E0C9B3B0] + 32);
  v2.retain = 0;
  v2.release = 0;
  result = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, &v2);
  qword_1ED4CF788 = (uint64_t)result;
  return result;
}

void sub_1B181EE08(CFTypeRef cf)
{
  if (cf)
  {
    if (*((_BYTE *)cf + 44))
    {
      os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4C02D0);
      CFRelease(cf);
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4C02D0);
    }
    else
    {
      CFRelease(cf);
    }
  }
}

__n128 sub_1B181EE68@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a2, a3, a4, a5, a6, a7, (uint64_t)"states");
  *(_OWORD *)a8 = *(_OWORD *)(a1 + 16);
  result = *(__n128 *)(a1 + 28);
  *(__n128 *)(a8 + 12) = result;
  return result;
}

uint64_t sub_1B181EEC0()
{
  uint64_t result;
  _OWORD v1[2];

  result = qword_1EEF65C28;
  if (!qword_1EEF65C28)
  {
    v1[0] = xmmword_1B2246770;
    *(_OWORD *)((char *)v1 + 12) = *(__int128 *)((char *)&xmmword_1B2246770 + 12);
    result = sub_1B181EC70((uint64_t)v1);
    qword_1EEF65C28 = result;
  }
  return result;
}

void sub_1B181EF14(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (a1[44])
  {
    if (os_unfair_lock_trylock((os_unfair_lock_t)&unk_1ED4C02D0))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Calling CFXRasterizerStatesCFFinalize outside of CFXReleaseRasterizerStates probably direct call to CFRelease"), v2, v3, v4, v5, v6, v7, (uint64_t)"!vfx_mutex_trylock(&s_RasterizerStatesRegistryLock)");
    if (!CFSetContainsValue((CFSetRef)qword_1ED4CF788, a1))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. RasterizerStates should be in the registry"), v8, v9, v10, v11, v12, v13, (uint64_t)"CFSetContainsValue(s_RasterizerStatesRegistry, cf)");
    CFSetRemoveValue((CFMutableSetRef)qword_1ED4CF788, a1);
    sub_1B194F874(CFSTR("kCFXNotificationRasterizerStatesDidDie"), a1, 0, 1u);
  }
}

BOOL sub_1B181EFD0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16)
      && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24)
      && *(_QWORD *)(a1 + 32) == *(_QWORD *)(a2 + 32)
      && *(_DWORD *)(a1 + 40) == (unint64_t)*(unsigned int *)(a2 + 40);
}

unint64_t sub_1B181F000(uint64_t a1)
{
  return sub_1B181EB70((int *)(a1 + 16));
}

CFStringRef sub_1B181F00C(uint64_t a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator((CFTypeRef)a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXRasterizerStates %p> ZRead:%d ZWrite:%d ZFunc:%d cull:%d fill:%d"), a1, *(unsigned __int8 *)(a1 + 24), *(unsigned __int8 *)(a1 + 25), *(unsigned __int8 *)(a1 + 26), *(unsigned int *)(a1 + 16), *(unsigned int *)(a1 + 20));
}

uint64_t sub_1B181F060(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B181F08C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_1EEF65C38 != -1)
    dispatch_once_f(&qword_1EEF65C38, &qword_1EEF65C30, (dispatch_function_t)sub_1B181F060);
  v8 = sub_1B179CB90(qword_1EEF65C30, 0x30uLL);
  if (!v8)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"t");
  *(_BYTE *)(v8 + 56) = a1;
  return v8;
}

uint64_t sub_1B181F11C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(uint64_t, uint64_t, _QWORD);
  uint64_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"imageProxy");
  v11 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(a1 + 16);
  if (!v11)
    return 0;
  result = v11(a3, a2, *(_QWORD *)(a1 + 48));
  if (result)
    *(_QWORD *)(result + 88) = a1;
  return result;
}

uint64_t sub_1B181F198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"imageProxy");
  return *(_QWORD *)(a1 + 48);
}

uint64_t sub_1B181F1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v9)(_QWORD);

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"imageProxy");
  v9 = *(uint64_t (**)(_QWORD))(a1 + 32);
  if (v9)
    return v9(*(_QWORD *)(a1 + 48));
  else
    return 1;
}

uint64_t sub_1B181F244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v12)(_QWORD, uint64_t, uint64_t, uint64_t);

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"imageProxy");
  v12 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 40);
  if (!v12)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, 0, a6, a7, a8, (uint64_t)"imageProxy->_callbacks.getCaptureDeviceInfo");
    v12 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 40);
  }
  return v12(*(_QWORD *)(a1 + 48), a2, a3, a4);
}

uint64_t sub_1B181F2D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"imageProxy");
  return *(unsigned __int8 *)(a1 + 56);
}

CFTypeRef sub_1B181F31C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  CFTypeRef result;

  v8 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"imageProxy");
  result = *(CFTypeRef *)(a1 + 48);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 48) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
    *(_BYTE *)(a1 + 56) = v8;
  }
  return result;
}

__n128 sub_1B181F3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;
  __int128 v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"imageProxy");
  result = *(__n128 *)a2;
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 32) = v11;
  return result;
}

uint64_t sub_1B181F3F4(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B181F420()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_1EEF65C48 != -1)
    dispatch_once_f(&qword_1EEF65C48, &qword_1EEF65C40, (dispatch_function_t)sub_1B181F3F4);
  v6 = sub_1B179CB90(qword_1EEF65C40, 0x50uLL);
  if (!v6)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v0, v1, v2, v3, v4, v5, (uint64_t)"t");
  return v6;
}

uint64_t sub_1B181F4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v12)(uint64_t, _QWORD, uint64_t, uint64_t);

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"t");
  v12 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a1 + 64);
  if (v12)
    return v12(a2, *(_QWORD *)(a1 + 80), a3, a4);
  else
    return 0;
}

CFTypeRef sub_1B181F530(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureProxy");
  result = *(CFTypeRef *)(a1 + 80);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 80) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 80) = result;
  }
  return result;
}

uint64_t sub_1B181F5A8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 88);
}

void sub_1B181F5B0(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"textureProxy");
  v10 = (_OWORD *)(a1 + 64);
  if (a2)
  {
    *v10 = *a2;
  }
  else
  {
    *(_QWORD *)v10 = 0;
    *(_QWORD *)(a1 + 72) = 0;
  }
}

void sub_1B181F614(uint64_t a1)
{
  CFNumberRef v1;
  __CFNotificationCenter *LocalCenter;
  const void *v3;
  uint64_t valuePtr;

  valuePtr = a1;
  v1 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCFXNotificationImageProxyWillDie"), v1, 0, 1u);
  CFRelease(v1);
  v3 = *(const void **)(valuePtr + 48);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(valuePtr + 48) = 0;
  }
}

CFStringRef sub_1B181F68C(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXImageProxy>"));
}

CFStringRef sub_1B181F6AC(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXImageProxy>"));
}

void sub_1B181F6D0(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 80);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 80) = 0;
  }
}

CFStringRef sub_1B181F6FC(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextureProxy>"));
}

CFStringRef sub_1B181F71C(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextureProxy>"));
}

void *vfx_allocate_memory_entry@<X0>(size_t a1@<X0>, size_t a2@<X1>, task_t a3@<W2>, uint64_t a4@<X8>)
{
  ipc_space_t *v8;
  mach_vm_address_t v9;
  void *result;
  char v11;
  memory_object_size_t v12;
  mach_port_t object_handle[2];
  mach_vm_address_t address;
  memory_object_size_t size;

  address = 0;
  size = (a1 + a2 - 1) & -(uint64_t)a2;
  *(_QWORD *)object_handle = 0;
  v8 = (ipc_space_t *)MEMORY[0x1E0C83DA0];
  if (!mach_make_memory_entry_64(*MEMORY[0x1E0C83DA0], &size, 0, 401411, object_handle, 0))
  {
    if (mach_vm_map(*v8, &address, size, 0, 1442840579, object_handle[0], 0, 0, 3, 3, 1u))
    {
      v9 = address;
    }
    else
    {
      if (a3 - 1 <= 0xFFFFFFFD)
      {
        if (mach_memory_entry_ownership(object_handle[0], a3, 4, 0))
        {
          sub_1B1F1B008(16);
        }
        else
        {
          mach_port_deallocate(*v8, object_handle[0]);
          object_handle[0] = 0;
        }
      }
      result = (void *)MEMORY[0x1B5E24258](*v8, address, 0, &object_handle[1]);
      v9 = address;
      if (!(_DWORD)result)
      {
        v11 = 0;
        v12 = size;
        *(_QWORD *)a4 = address;
        *(_QWORD *)(a4 + 8) = v12;
        *(_DWORD *)(a4 + 16) = object_handle[0];
        goto LABEL_15;
      }
    }
    if (v9)
      mach_vm_deallocate(*v8, v9, size);
  }
  if (object_handle[0])
    mach_port_deallocate(*v8, object_handle[0]);
  result = malloc_type_aligned_alloc(a2, a1, 0xB6DE8191uLL);
  if (!result)
    abort();
  *(_QWORD *)a4 = result;
  *(_QWORD *)(a4 + 8) = a1;
  v11 = 1;
  *(_DWORD *)(a4 + 16) = 0;
LABEL_15:
  *(_BYTE *)(a4 + 20) = v11;
  return result;
}

void vfx_deallocate_memory_entry(uint64_t a1)
{
  void *v2;
  mach_port_name_t v3;

  v2 = *(void **)a1;
  if (*(_BYTE *)(a1 + 20))
  {
    free(*(void **)a1);
  }
  else
  {
    if (v2)
      mach_vm_deallocate(*MEMORY[0x1E0C83DA0], (mach_vm_address_t)v2, *(_QWORD *)(a1 + 8));
    v3 = *(_DWORD *)(a1 + 16);
    if (v3 + 1 >= 2)
      mach_port_deallocate(*MEMORY[0x1E0C83DA0], v3);
  }
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
}

uint64_t vfx_attribute_memory(uint64_t result, task_t a2)
{
  uint64_t v2;

  if (!*(_BYTE *)(result + 20))
  {
    if (a2)
    {
      v2 = result;
      result = *(unsigned int *)(result + 16);
      if ((_DWORD)result)
      {
        if (mach_memory_entry_ownership(result, a2, 4, 0))
          sub_1B1F1B008(16);
        result = mach_port_deallocate(*MEMORY[0x1E0C83DA0], *(_DWORD *)(v2 + 16));
        *(_DWORD *)(v2 + 16) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B181F9A8(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t *sub_1B181F9D4(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  if (qword_1EEF65C58 != -1)
    dispatch_once_f(&qword_1EEF65C58, &qword_1EEF65C50, (dispatch_function_t)sub_1B181F9A8);
  v2 = (uint64_t *)sub_1B179CB90(qword_1EEF65C50, 0x80uLL);
  v2[5] = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
  v2[12] = (uint64_t)sub_1B19CEB14();
  v2[2] = a1;
  if (v2[3])
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Warning _lightNodes not NULL in CFXEnginePipelineSetup"), v3, v4, v5, v6, v7, v8, v19);
    v9 = (const void *)v2[3];
    if (v9)
    {
      CFRelease(v9);
      v2[3] = 0;
    }
  }
  sub_1B194F7E4(v2, (void (__cdecl *)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef))sub_1B1820B6C, CFSTR("kCFXNotificationNodeWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  if (!v2[4])
  {
    v10 = (_BYTE *)sub_1B194022C(v2[2]);
    v2[4] = (uint64_t)v10;
    sub_1B19406E0(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return v2;
}

void sub_1B181FACC(uint64_t a1, _QWORD *a2, void *cf1, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  if (!cf1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), 0, a4, a5, a6, a7, a8, (uint64_t)"attribute");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"attribute");
  }
  if (CFEqual(cf1, CFSTR("model"))
    || CFEqual(cf1, CFSTR("kCameraKey"))
    || CFEqual(cf1, CFSTR("kLightKey"))
    || CFEqual(cf1, CFSTR("kDeformerStackKey")))
  {
    CFRetain(a2);
    if (CFEqual(cf1, CFSTR("model")))
    {
LABEL_18:
      if (CFEqual(cf1, CFSTR("model")) || CFEqual(cf1, CFSTR("kLightKey")))
      {
        if (CFEqual(cf1, CFSTR("model")))
        {
          v51 = 0;
        }
        else if (CFEqual(cf1, CFSTR("kLightKey")))
        {
          v51 = 3;
        }
        else
        {
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported node attribute '%@'"), v45, v46, v47, v48, v49, v50, (uint64_t)cf1);
          v51 = -1;
        }
        v52 = sub_1B1869C40((uint64_t)a2, v44, v45, v46, v47, v48, v49, v50);
        if (!v52 || ((1 << v51) & v52) != 0)
        {
          v60 = *(_QWORD *)(a4 + 8);
          v61 = sub_1B17C6244(a2, v53, v54, v55, v56, v57, v58, v59);
          if (v61 == sub_1B1813884(v60, v62, v63, v64, v65, v66, v67, v68)
            && !sub_1B186C66C((uint64_t)a2, v69, v70, v71, v72, v73, v74, v75))
          {
            sub_1B181FD28(a1, v60, (uint64_t)a2, v76, v77, v78, v79, v80);
          }
        }
      }
      CFRelease(a2);
      return;
    }
    v31 = (uint64_t)sub_1B193E800((uint64_t)a2, cf1, v18, v19, v20, v21, v22, v23);
    if (!v31)
    {
      if (!CFEqual(cf1, CFSTR("kDeformerStackKey")))
      {
        if ((sub_1B1868D5C((uint64_t)a2, v32, v33, v34, v35, v36, v37, v38) & 1) != 0)
          goto LABEL_18;
        goto LABEL_17;
      }
      v31 = sub_1B1868F58((uint64_t)a2, v32, v33, v34, v35, v36, v37, v38);
    }
    if ((sub_1B1868D5C((uint64_t)a2, v24, v25, v26, v27, v28, v29, v30) & 1) != 0)
    {
      if (!v31)
        goto LABEL_18;
      goto LABEL_17;
    }
    if (v31)
    {
      sub_1B1820DBC(a1, a2, cf1, v39, v40, v41, v42, v43);
      goto LABEL_18;
    }
LABEL_17:
    sub_1B1820FC0(a1, a2, cf1, v39, v40, v41, v42, v43);
    goto LABEL_18;
  }
}

void sub_1B181FD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t i;
  _WORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _WORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v11 = *(unsigned int *)(a3 + 228);
  if ((_DWORD)v11)
  {
    for (i = 0; i != v11; ++i)
    {
      v13 = (_WORD *)sub_1B19CFB50(*(_QWORD *)(a1 + 96), *(_QWORD *)(a3 + 224), i, a4, a5, a6, a7, a8);
      sub_1B1820E98(a1, v13, v14, v15, v16, v17, v18, v19);
    }
  }
  v20 = *(_WORD **)(a3 + 232);
  if (v20)
  {
    v21 = (unsigned __int16)*v20;
    if (*v20)
    {
      v22 = 0;
      do
      {
        v23 = *(_QWORD *)(a3 + 232) + 12 * v22;
        v24 = *(unsigned int *)(v23 + 16);
        if ((_DWORD)v24)
        {
          v25 = 0;
          v26 = *(unsigned int *)(v23 + 12) | (unint64_t)(v24 << 32);
          do
          {
            v27 = (_WORD *)sub_1B19CFB50(*(_QWORD *)(a1 + 96), v26, v25, a4, a5, a6, a7, a8);
            if (v27)
              sub_1B1820E98(a1, v27, a3, a4, a5, a6, a7, a8);
            ++v25;
          }
          while (v24 != v25);
        }
        ++v22;
      }
      while (v22 != v21);
    }
  }
  sub_1B19CF8D8(a1, a3, a3, a4, a5, a6, a7, a8);
  if ((sub_1B1868D5C(a3, v28, v29, v30, v31, v32, v33, v34) & 1) == 0)
  {
    v42 = sub_1B1869C40(a3, v35, v36, v37, v38, v39, v40, v41);
    if ((_DWORD)v42)
      sub_1B18210B0(a1, a2, a3, v42, v43, v44, v45, v46);
  }
}

uint64_t sub_1B181FE60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  _QWORD v18[5];
  int v19;

  v8 = a3;
  sub_1B19CEBA4(*(_QWORD *)(a1 + 96), a2, a3, a4, a5, a6, a7, a8);
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = sub_1B181FEE8;
    v18[3] = &unk_1E63D6C60;
    v18[4] = a2;
    v19 = v8;
    return sub_1B18798D8(result, (uint64_t)v18, v11, v12, v13, v14, v15, v16);
  }
  return result;
}

uint64_t sub_1B181FEE0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

_QWORD *sub_1B181FEE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = sub_1B18143C8(a2, a2, a3, a4, a5, a6, a7, a8);
  sub_1B17C7EC8(v10, *(unsigned int **)(a1 + 32), *(unsigned int *)(a1 + 40), v11, v12, v13, v14, v15);
  v23 = sub_1B1814410(a2, v16, v17, v18, v19, v20, v21, v22);
  return sub_1B18D3DB4(v23, *(unsigned int **)(a1 + 32), v24, v25, v26, v27, v28, v29);
}

uint64_t sub_1B181FF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result)
    return sub_1B18798D8(result, (uint64_t)&unk_1E63D0C10, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1B181FF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = sub_1B18143C8(a2, a2, a3, a4, a5, a6, a7, a8);
  sub_1B17C7B88(v9);
  v17 = sub_1B1814410(a2, v10, v11, v12, v13, v14, v15, v16);
  return sub_1B18D37E4(v17);
}

uint64_t sub_1B181FF70(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD v20[6];

  v9 = *a1;
  v8 = a1[1];
  result = sub_1B1813884(v8, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v17 = result;
    v18 = 0;
    v19 = MEMORY[0x1E0C809B0];
    do
    {
      result = sub_1B187BF48(v17, v18, v11, v12, v13, v14, v15, v16);
      if (result)
      {
        v20[0] = v19;
        v20[1] = 3221225472;
        v20[2] = sub_1B182001C;
        v20[3] = &unk_1E63D6CA0;
        v20[4] = v9;
        v20[5] = v8;
        result = sub_1B186B018(result, (uint64_t)v20);
      }
      ++v18;
    }
    while (v18 != 4);
  }
  return result;
}

uint64_t sub_1B182001C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1B1820054(*(_QWORD *)(a1 + 32), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  sub_1B1820144(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2, v10, v11, v12, v13, v14);
  return 0;
}

void sub_1B1820054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t i;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _WORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v10)
  {
    for (i = 0; i != v10; ++i)
    {
      v12 = (_WORD *)sub_1B19CFB50(*(_QWORD *)(a1 + 96), *(_QWORD *)(a2 + 224), i, a4, a5, a6, a7, a8);
      sub_1B1820E98(a1, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  v19 = *(_WORD **)(a2 + 232);
  if (v19)
  {
    v20 = (unsigned __int16)*v19;
    if (*v19)
    {
      v21 = 0;
      do
      {
        v22 = *(_QWORD *)(a2 + 232) + 12 * v21;
        v23 = *(unsigned int *)(v22 + 16);
        if ((_DWORD)v23)
        {
          v24 = 0;
          v25 = *(unsigned int *)(v22 + 12) | (unint64_t)(v23 << 32);
          do
          {
            v26 = (_WORD *)sub_1B19CFB50(*(_QWORD *)(a1 + 96), v25, v24, a4, a5, a6, a7, a8);
            if (v26)
              sub_1B1820E98(a1, v26, a3, a4, a5, a6, a7, a8);
            ++v24;
          }
          while (v23 != v24);
        }
        ++v21;
      }
      while (v21 != v20);
    }
  }
  sub_1B1820F4C(a1, (const void *)a2, a3, a4, a5, a6, a7, a8);
  sub_1B19CF8D8(a1, a2, v27, v28, v29, v30, v31, v32);
}

uint64_t sub_1B1820144(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  result = sub_1B186C66C((uint64_t)a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0 && !a3[57])
  {
    result = sub_1B1869C40((uint64_t)a3, v12, v13, v14, v15, v16, v17, v18);
    if ((_DWORD)result)
    {
      sub_1B18210B0(a1, a2, (uint64_t)a3, result, v19, v20, v21, v22);
      return sub_1B1820CFC(a1, a3, v23, v24, v25, v26, v27, v28);
    }
  }
  return result;
}

void sub_1B18201BC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFDictionary *v17;

  v9 = sub_1B1813884(a1[1], a2, a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    v17 = (const __CFDictionary *)sub_1B1879B7C(v9, v10, v11, v12, v13, v14, v15, v16);
    if (v17)
      CFDictionaryApplyFunction(v17, (CFDictionaryApplierFunction)sub_1B1820204, a1);
  }
}

const __CFDictionary *sub_1B1820204(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  result = sub_1B1869D88((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v19 = a3;
    v17 = *a3;
    v18 = v19[1];
    sub_1B1820054(v17, (uint64_t)a1, v11, v12, v13, v14, v15, v16);
    return (const __CFDictionary *)sub_1B1820144(v17, v18, a1, v20, v21, v22, v23, v24);
  }
  return result;
}

void sub_1B1820260(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = a2;
  v11 = *a3;
  v12 = a3[1];
  if (a2 == 1)
  {
    if ((a2 & 0x40000) == 0)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong notification type"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"notifications._eventType == kCFXNotificationEventType_Node");
    if ((v9 & 0x40000) == 0)
    {
LABEL_3:
      if ((v9 & 0x80000) == 0)
        goto LABEL_10;
      goto LABEL_7;
    }
  }
  sub_1B1820054(v11, (uint64_t)a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B1820144(v11, v12, a1, v13, v14, v15, v16, v17);
  if ((v9 & 0x80000) == 0)
    goto LABEL_10;
LABEL_7:
  v18 = sub_1B17C6244(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (sub_1B186D018((uint64_t)a1))
    sub_1B18141B0(a3[1], 0, v20, v21, v22, v23, v24, v25);
  if (v18 == sub_1B1813884(a3[1], v19, v20, v21, v22, v23, v24, v25))
  {
    sub_1B1820144(v11, v12, a1, a4, a5, a6, a7, a8);
    return;
  }
LABEL_10:
  if ((v9 & 0x1F000) == 0)
    goto LABEL_16;
  if ((v9 & 0x1000) != 0)
  {
    sub_1B181FACC(v11, a1, CFSTR("model"), (uint64_t)a3, a5, a6, a7, a8);
    if ((v9 & 0x2000) == 0)
    {
LABEL_13:
      if ((v9 & 0x4000) == 0)
        goto LABEL_14;
      goto LABEL_21;
    }
  }
  else if ((v9 & 0x2000) == 0)
  {
    goto LABEL_13;
  }
  sub_1B181FACC(v11, a1, CFSTR("kCameraKey"), (uint64_t)a3, a5, a6, a7, a8);
  sub_1B18141B0(a3[1], 0, v27, v28, v29, v30, v31, v32);
  if ((v9 & 0x4000) == 0)
  {
LABEL_14:
    if ((v9 & 0x10000) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_21:
  sub_1B181FACC(v11, a1, CFSTR("kLightKey"), (uint64_t)a3, a5, a6, a7, a8);
  if ((v9 & 0x10000) != 0)
LABEL_15:
    sub_1B181FACC(v11, a1, CFSTR("kDeformerStackKey"), (uint64_t)a3, a5, a6, a7, a8);
LABEL_16:
  v26 = (v9 >> 9) & 4 | (v9 >> 7) & 8;
  if ((_DWORD)v26)
    sub_1B182042C(v11, (uint64_t)a1, v26, a4, a5, a6, a7, a8);
}

uint64_t sub_1B182042C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = *(unsigned int *)(a2 + 228);
  if ((_DWORD)v8)
  {
    v10 = result;
    v11 = 0;
    v12 = *(_QWORD *)(result + 96);
    v13 = *(unsigned int *)(a2 + 224) | (unint64_t)(v8 << 32);
    do
    {
      v14 = sub_1B19CFB50(v12, v13, v11, a4, a5, a6, a7, a8);
      result = sub_1B181FE60(v10, v14, a3, v15, v16, v17, v18, v19);
      ++v11;
    }
    while (v8 != v11);
  }
  return result;
}

void sub_1B18204A0(void *key, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFSet *Value;
  const __CFSet *Copy;
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  if (a2 == 2)
  {
    if ((a2 & 0x200) != 0)
    {
      Value = (const __CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(_QWORD *)a3 + 40), key);
      if (Value)
      {
        Copy = CFSetCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Value);
        context[0] = a3;
        context[1] = key;
        CFSetApplyFunction(Copy, (CFSetApplierFunction)sub_1B1820574, context);
        CFRelease(Copy);
      }
    }
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong notification type"), a3, a4, a5, a6, a7, a8, (uint64_t)"notifications._eventType == kCFXNotificationEventType_Material");
  }
}

uint64_t sub_1B1820574(uint64_t a1, uint64_t **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v10;
  float32x4_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"value");
  v10 = *a2;
  if (!*a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineIterationContext");
  v11 = (float32x4_t *)sub_1B17C2DEC(a1);
  if (v11)
  {
    v19 = (uint64_t)v11;
    sub_1B18690BC(v11, v12, v13, v14, v15, v16, v17, v18);
    v27 = sub_1B1813884(v10[1], v20, v21, v22, v23, v24, v25, v26);
    if (v27)
    {
      v30 = sub_1B187B1D0(v27, v28, v29, v14, v15, v16, v17, v18);
      sub_1B19D9CE0(v30, v19, v31, v32, v33, v34, v35, v36);
    }
  }
  return sub_1B181FE60(*v10, a1, 27, v14, v15, v16, v17, v18);
}

void sub_1B1820620(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v8 = a2;
  v25 = *MEMORY[0x1E0C80C00];
  v20 = *a3;
  if (a2 == 3)
  {
    if ((a2 & 0x400) == 0)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong notification type"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"notifications._eventType == kCFXNotificationEventType_Geometry");
    if ((v8 & 0x400) == 0)
    {
LABEL_3:
      if ((v8 & 0x800) == 0)
        return;
      goto LABEL_4;
    }
  }
  v21 = xmmword_1E63D6CC0;
  v22 = 0;
  *(_QWORD *)&v23 = v20;
  *((_QWORD *)&v23 + 1) = a1;
  v15 = sub_1B187A934(*(_QWORD *)(v20 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B17C49C8(v15, (uint64_t (**)(uint64_t, uint64_t))&v21, 0, (uint64_t)&v23, v16, v17, v18, v19);
  if ((v8 & 0x800) == 0)
    return;
LABEL_4:
  v21 = xmmword_1E63D6CD8;
  v22 = 0;
  v23 = v20;
  v24 = a1;
  v10 = sub_1B187A934(*(_QWORD *)(v20 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B17C49C8(v10, (uint64_t (**)(uint64_t, uint64_t))&v21, 0, (uint64_t)&v23, v11, v12, v13, v14);
}

uint64_t sub_1B1820738(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = *a2;
  v10 = a2[1];
  if (sub_1B1868FA0(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8) == v10)
    sub_1B182042C(v9, a1, 3, v11, v12, v13, v14, v15);
  return 0;
}

uint64_t sub_1B1820780(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *a2;
  v10 = a2[1];
  v11 = a2[2];
  if (sub_1B1868FA0((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8) == v11)
  {
    sub_1B1820054(v9, (uint64_t)a1, v12, v13, v14, v15, v16, v17);
    sub_1B1820144(v9, v10, a1, v18, v19, v20, v21, v22);
  }
  return 0;
}

void sub_1B18207D8(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;

  v8 = a2;
  v21 = *MEMORY[0x1E0C80C00];
  v10 = *a3;
  if (a2 != 4)
  {
    v16 = *a3;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong notification type"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"notifications._eventType == kCFXNotificationEventType_Light");
    v10 = v16;
  }
  if ((v8 & 0x200) != 0)
  {
    v17 = xmmword_1E63D6CF0;
    v18 = 0;
    v19 = v10;
    v20 = a1;
    v11 = sub_1B187A934(*(_QWORD *)(v10 + 16), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    sub_1B17C49C8(v11, (uint64_t (**)(uint64_t, uint64_t))&v17, 0, (uint64_t)&v19, v12, v13, v14, v15);
  }
}

uint64_t sub_1B18208A0(float32x4_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v9 = *a2;
  v10 = a2[1];
  v11 = (const __CFDictionary *)a2[2];
  if (sub_1B1868FE8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8) == v11)
  {
    if (sub_1B186064C((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18) == 5
      && sub_1B1860E14((uint64_t)v11, v19, v20, v21, v22, v23, v24, v25))
    {
      sub_1B18690BC(a1, v26, v20, v21, v22, v23, v24, v25);
    }
    sub_1B1820054(v9, (uint64_t)a1, v20, v21, v22, v23, v24, v25);
    sub_1B1820144(v9, v10, a1, v27, v28, v29, v30, v31);
  }
  return 0;
}

void sub_1B182091C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const __CFDictionary *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const __CFDictionary *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const void *v59;
  const void *v60;
  const void *v61;
  const void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineIterationContext");
  v9 = *a1;
  if (!*a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  v10 = *(_QWORD *)(v9 + 32);
  if (v10)
    v11 = sub_1B1940910(*(_QWORD *)(v9 + 32));
  else
    v11 = 0;
  v12 = sub_1B1814720(a1[1], a2, a3, a4, a5, a6, a7, a8);
  if (v12)
    sub_1B186CFA8(v12, v13, v14, v15, v16, v17, v18, v19);
  v27 = sub_1B187B38C(*(_QWORD *)(v9 + 16), v13, v14, v15, v16, v17, v18, v19) > 0.0;
  v28 = *(unsigned __int8 *)(v9 + 104);
  if (v28 != v27)
    *(_BYTE *)(v9 + 104) = v27;
  v29 = sub_1B187C05C(*(_QWORD *)(v9 + 16), v20, v21, v22, v23, v24, v25, v26);
  if (*(unsigned __int8 *)(v9 + 105) != v29)
  {
    *(_BYTE *)(v9 + 105) = v29;
    v53 = (const __CFDictionary *)sub_1B187B188(*(_QWORD *)(v9 + 16), v30, v31, v32, v33, v34, v35, v36);
    if (v53)
      sub_1B1794198(v53, (uint64_t *)a1[1], v9 + 112, v54, v55, v56, v57, v58);
    goto LABEL_23;
  }
  v37 = (const __CFDictionary *)sub_1B187B188(*(_QWORD *)(v9 + 16), v30, v31, v32, v33, v34, v35, v36);
  if (!v37)
  {
    if (v28 == v27)
      goto LABEL_16;
LABEL_23:
    sub_1B19CFBD8(*(_QWORD *)(v9 + 96), (uint64_t)sub_1B1820B58, v9);
    if (!v10)
      return;
    goto LABEL_17;
  }
  v45 = sub_1B1794198(v37, (uint64_t *)a1[1], v9 + 112, v40, v41, v42, v43, v44);
  if (v28 != v27 || (v45 & 1) != 0)
    goto LABEL_23;
LABEL_16:
  if (!v10)
    return;
LABEL_17:
  sub_1B1940858(v10, v38, v39, v40, v41, v42, v43, v44);
  if (v11)
  {
    sub_1B181FF70(a1, v46, v47, v48, v49, v50, v51, v52);
  }
  else
  {
    v59 = (const void *)sub_1B1869F5C();
    sub_1B19408D0(v10, v59, (void (__cdecl *)(const void *, const void *, void *))sub_1B1820260, a1);
    v60 = (const void *)sub_1B17A12B4();
    sub_1B19408D0(v10, v60, (void (__cdecl *)(const void *, const void *, void *))sub_1B1820620, a1);
    v61 = (const void *)sub_1B1877980();
    sub_1B19408D0(v10, v61, (void (__cdecl *)(const void *, const void *, void *))sub_1B18204A0, a1);
    v62 = (const void *)sub_1B185EA24();
    sub_1B19408D0(v10, v62, (void (__cdecl *)(const void *, const void *, void *))sub_1B18207D8, a1);
    sub_1B18201BC(a1, v63, v64, v65, v66, v67, v68, v69);
  }
}

uint64_t sub_1B1820B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B1820B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B181FE60(a2, a1, 16, a4, a5, a6, a7, a8);
}

void sub_1B1820B6C(uint64_t a1, uint64_t a2, __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  if (CFSTR("kCFXNotificationNodeWillDie") != a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong notification sent"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"name == kCFXNotificationNodeWillDie");
  context[0] = a2;
  context[1] = a4;
  v10 = *(const __CFDictionary **)(a2 + 24);
  if (v10)
    CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)sub_1B1821364, context);
}

uint64_t sub_1B1820C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  return *(_QWORD *)(a1 + 96);
}

void sub_1B1820C54(uint64_t a1, _WORD *a2)
{
  const void *v4;
  const void *v5;
  void *Value;

  if ((a2[40] & 7) != 4)
  {
    v4 = (const void *)sub_1B17C2E80((uint64_t)a2);
    if (v4)
    {
      v5 = v4;
      Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v4);
      if (!Value)
      {
        Value = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 40), v5, Value);
        CFRelease(Value);
      }
      CFSetAddValue((CFMutableSetRef)Value, a2);
    }
  }
}

uint64_t sub_1B1820CFC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (sub_1B1868FE8((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    sub_1B1820DBC(a1, a2, CFSTR("kLightKey"), v12, v13, v14, v15, v16);
  if (sub_1B186CFA8((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16))
    sub_1B1820DBC(a1, a2, CFSTR("kCameraKey"), v19, v20, v21, v22, v23);
  result = sub_1B1868F58((uint64_t)a2, v17, v18, v19, v20, v21, v22, v23);
  if (result)
    return sub_1B1820DBC(a1, a2, CFSTR("kDeformerStackKey"), v25, v26, v27, v28, v29);
  return result;
}

BOOL sub_1B1820DBC(uint64_t a1, const void *a2, void *key, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFSet *v11;
  int v12;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_8:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (key)
      goto LABEL_4;
    goto LABEL_9;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  if (!a2)
    goto LABEL_8;
LABEL_3:
  if (key)
    goto LABEL_4;
LABEL_9:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_4:
  v11 = (const __CFSet *)sub_1B18211F8(a1, key, 1, 0);
  v12 = CFSetContainsValue(v11, a2);
  if (!v12)
    CFSetAddValue(v11, a2);
  return v12 == 0;
}

void sub_1B1820E98(uint64_t a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  const void *v11;
  __CFSet *Value;
  const __CFSet *v13;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"rendererElement");
  if ((a2[40] & 7) != 4)
  {
    v10 = (const void *)sub_1B17C2E80((uint64_t)a2);
    if (v10)
    {
      v11 = v10;
      Value = (__CFSet *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 40), v10);
      if (Value)
      {
        v13 = Value;
        CFSetRemoveValue(Value, a2);
        if (!CFSetGetCount(v13))
          CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 40), v11);
      }
    }
  }
}

uint64_t sub_1B1820F4C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  sub_1B1820FC0(a1, a2, CFSTR("kCameraKey"), a4, a5, a6, a7, a8);
  return sub_1B1820FC0(a1, a2, CFSTR("kDeformerStackKey"), v10, v11, v12, v13, v14);
}

uint64_t sub_1B1820FC0(uint64_t a1, const void *a2, void *key, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const __CFSet *v12;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_9:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (key)
      goto LABEL_4;
    goto LABEL_10;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  if (!a2)
    goto LABEL_9;
LABEL_3:
  if (key)
    goto LABEL_4;
LABEL_10:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"key");
LABEL_4:
  result = (uint64_t)sub_1B18211F8(a1, key, 0, 0);
  if (result)
  {
    v12 = (const __CFSet *)result;
    if (CFSetGetCount((CFSetRef)result) < 1)
    {
      return 0;
    }
    else
    {
      result = CFSetContainsValue(v12, a2);
      if ((_DWORD)result)
      {
        CFSetRemoveValue(v12, a2);
        return 1;
      }
    }
  }
  return result;
}

void sub_1B18210B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _WORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const __CFArray *v36;
  CFIndex Count;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  CFIndex v43;
  uint64_t i;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _WORD *v49;

  v10 = sub_1B19CED70(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10 != 0xFFFFFFFF)
  {
    v17 = v10;
    v18 = HIDWORD(v10);
    if (HIDWORD(v10))
    {
      v19 = 0;
      *(_QWORD *)(a3 + 224) = v10;
      do
      {
        v20 = (_WORD *)sub_1B19CFB50(*(_QWORD *)(a1 + 96), *(_QWORD *)(a3 + 224), v19, v12, v13, v14, v15, v16);
        sub_1B1820C54(a1, v20);
        ++v19;
      }
      while (v18 != v19);
    }
    else
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. no render elements have been created"), v11, v12, v13, v14, v15, v16, (uint64_t)"span.count > 0");
      *(_QWORD *)(a3 + 224) = v17;
    }
    if ((sub_1B18692B4(a3) & 1) != 0)
    {
      v28 = sub_1B1868FA0(a3, v21, v22, v23, v24, v25, v26, v27);
      if (v28)
      {
        v36 = (const __CFArray *)sub_1B17A1994(v28, v29, v30, v31, v32, v33, v34, v35);
        Count = CFArrayGetCount(v36);
        if (Count >= 1)
        {
          v43 = Count;
          for (i = 0; i != v43; ++i)
          {
            v45 = *(_QWORD *)(a3 + 232) + 12 * i;
            v46 = *(unsigned int *)(v45 + 16);
            if ((_DWORD)v46)
            {
              v47 = 0;
              v48 = *(unsigned int *)(v45 + 12) | (unint64_t)(v46 << 32);
              do
              {
                v49 = (_WORD *)sub_1B19CFB50(*(_QWORD *)(a1 + 96), v48, v47, v38, v39, v40, v41, v42);
                if (v49)
                  sub_1B1820C54(a1, v49);
                ++v47;
              }
              while (v46 != v47);
            }
          }
        }
      }
    }
  }
}

const void *sub_1B18211F0(uint64_t a1, void *a2, int a3)
{
  return sub_1B18211F8(a1, a2, a3, 1);
}

const void *sub_1B18211F8(uint64_t a1, void *key, int a3, int a4)
{
  const __CFDictionary *Mutable;
  const void *Value;
  BOOL v10;
  BOOL v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;

  Mutable = *(const __CFDictionary **)(a1 + 24);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *(_QWORD *)(a1 + 24) = Mutable;
  }
  Value = CFDictionaryGetValue(Mutable, key);
  if (Value)
    v10 = 1;
  else
    v10 = a3 == 0;
  if (!v10)
  {
    Value = CFSetCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0);
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 24), key, Value);
    CFRelease(Value);
  }
  if (Value)
    v11 = a4 == 0;
  else
    v11 = 1;
  if (!v11 && CFEqual(key, CFSTR("kDeformerStackKey")))
  {
    v14 = 0;
    v15 = &v14;
    v16 = 0x2020000000;
    v17 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_1B1821E30;
    v13[3] = &unk_1E63D6D38;
    v13[4] = &v14;
    v13[5] = Value;
    sub_1B17A0428((const __CFSet *)Value, (uint64_t)v13);
    if (v15[3])
      Value = (const void *)v15[3];
    _Block_object_dispose(&v14, 8);
  }
  return Value;
}

void sub_1B182134C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1821364(void *key, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1820FC0(*(_QWORD *)a3, *(const void **)(a3 + 8), key, a4, a5, a6, a7, a8);
}

void sub_1B1821374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFDictionary *v9;
  const void *v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"pipeline");
  v9 = *(__CFDictionary **)(a1 + 40);
  if (v9)
    CFDictionaryRemoveAllValues(v9);
  sub_1B19CFA14(*(uint64_t **)(a1 + 96), a2, a3, a4, a5, a6, a7, a8);
  v10 = *(const void **)(a1 + 24);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_1B18213DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, const char **a5, uint64_t *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t CurrentPassMaterial;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t CurrentPassHash;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v15 = sub_1B1813BC4(a3, a2, a3, (uint64_t)a4, (uint64_t)a5, (uint64_t)a6, a7, a8);
  if (v15)
  {
    v23 = (void *)v15;
    v31 = sub_1B18143C8(a3, v16, v17, v18, v19, v20, v21, v22);
    if (a2)
    {
      CurrentPassMaterial = sub_1B17C2DF4(a1, a2, v25, v26, v27, v28, v29, v30);
    }
    else
    {
      if ((*(_WORD *)(a1 + 80) & 0x400) != 0 || !objc_msgSend_getCurrentPassMaterial(v23, v24, v25, v26))
      {
        v33 = *(_QWORD *)(a1 + 32);
        goto LABEL_22;
      }
      CurrentPassMaterial = objc_msgSend_getCurrentPassMaterial(v23, v24, v25, v26);
    }
    v33 = CurrentPassMaterial;
LABEL_22:
    CurrentPassHash = objc_msgSend_getCurrentPassHash(v23, v24, v25, v26);
    v46 = sub_1B17C7D94(v31, (char *)a1, a2, CurrentPassHash);
    if (!v33 || (v34 = (const char *)v46, sub_1B18786DC(v33, v36, v37, v38, v39, v40, v41, v42)))
    {
      if (!a2 || (v43 = sub_1B19ACE28(a2, v36, v37, v38, v39, v40, v41, v42)) == 0)
      {
        v44 = *(_QWORD *)(a1 + 40);
        if (v33 && !v44)
          v44 = sub_1B18786DC(v33, v36, v37, v38, v39, v40, v41, v42);
        if (!v44)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v37, v38, v39, v40, v41, v42, (uint64_t)"renderGraph");
          return;
        }
        goto LABEL_30;
      }
      goto LABEL_31;
    }
LABEL_41:
    if (!sub_1B187813C(v33, v36, v37, v38, v39, v40, v41, v42))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v49, v50, v51, v52, v53, v54, (uint64_t)"commonProfile");
    v43 = sub_1B1815734(a3, v34);
    if (!a4)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (a2 && sub_1B19AEE64(a2, v16, v17, v18, v19, v20, v21, v22))
    v34 = (const char *)sub_1B19AEEB4(a3, a2, (char *)a1, v18, v19, v20, v21, v22);
  else
    v34 = 0;
  v35 = sub_1B17C2DF4(a1, a2, v17, v18, v19, v20, v21, v22);
  v33 = v35;
  if (v35 && !sub_1B18786DC(v35, v36, v37, v38, v39, v40, v41, v42))
  {
    if (!v34)
    {
      v47 = sub_1B18143C8(a3, v36, v37, v38, v39, v40, v41, v42);
      v48 = sub_1B1814EF8(a3);
      v34 = (const char *)sub_1B17C7D94(v47, (char *)a1, a2, v48);
    }
    goto LABEL_41;
  }
  if (!a2 || (v43 = sub_1B19ACE28(a2, v36, v37, v38, v39, v40, v41, v42)) == 0)
  {
    v44 = *(_QWORD *)(a1 + 40);
    if (v33 && !v44)
      v44 = sub_1B18786DC(v33, v36, v37, v38, v39, v40, v41, v42);
    if (!v44)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: unexpected renderer element with no material/renderGraph/program"), v37, v38, v39, v40, v41, v42, a9);
      return;
    }
LABEL_30:
    v43 = sub_1B18D70D0(v44, v36, v37, v38, v39, v40, v41, v42);
  }
LABEL_31:
  v34 = 0;
  if (a4)
LABEL_32:
    *a4 = v33;
LABEL_33:
  if (a6)
    *a6 = v43;
  if (a5)
    *a5 = v34;
}

uint64_t sub_1B1821640(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

void sub_1B182164C(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFSet *Mutable;

  if (a1)
  {
    if (value)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
    if (value)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
LABEL_3:
  *(_BYTE *)(a1 + 88) = 1;
  Mutable = *(__CFSet **)(a1 + 80);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    *(_QWORD *)(a1 + 80) = Mutable;
  }
  CFSetAddValue(Mutable, value);
}

void sub_1B18216E4(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFSet *Mutable;

  if (a1)
  {
    if (value)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
    if (value)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
LABEL_3:
  *(_BYTE *)(a1 + 88) = 1;
  Mutable = *(__CFSet **)(a1 + 72);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    *(_QWORD *)(a1 + 72) = Mutable;
  }
  CFSetAddValue(Mutable, value);
}

void sub_1B182177C(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFSet *v10;
  __CFSet *Mutable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
  {
    if (value)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
    if (value)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
LABEL_3:
  *(_BYTE *)(a1 + 88) = 1;
  v10 = *(__CFSet **)(a1 + 64);
  if (v10)
    CFSetRemoveValue(v10, value);
  Mutable = *(__CFSet **)(a1 + 56);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    *(_QWORD *)(a1 + 56) = Mutable;
  }
  CFSetAddValue(Mutable, value);
  sub_1B18216E4(a1, value, v12, v13, v14, v15, v16, v17);
  sub_1B182164C(a1, value, v18, v19, v20, v21, v22, v23);
}

void sub_1B182183C(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFSet *v10;
  __CFSet *v11;
  __CFSet *v12;
  __CFSet *Mutable;

  if (a1)
  {
    if (value)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
    if (value)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
LABEL_3:
  *(_BYTE *)(a1 + 88) = 1;
  v10 = *(__CFSet **)(a1 + 56);
  if (v10)
    CFSetRemoveValue(v10, value);
  v11 = *(__CFSet **)(a1 + 72);
  if (v11)
    CFSetRemoveValue(v11, value);
  v12 = *(__CFSet **)(a1 + 80);
  if (v12)
    CFSetRemoveValue(v12, value);
  Mutable = *(__CFSet **)(a1 + 64);
  if (!Mutable)
  {
    Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
    *(_QWORD *)(a1 + 64) = Mutable;
  }
  CFSetAddValue(Mutable, value);
}

void sub_1B1821904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const __CFSet *v10;
  const __CFSet *v11;
  const __CFSet *v12;
  const __CFSet *v13;
  const __CFDictionary *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD context[4];

  context[3] = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  if (*(_BYTE *)(a1 + 88))
  {
    *(_BYTE *)(a1 + 88) = 0;
    v9 = *(_QWORD *)(a1 + 16);
    context[0] = a1;
    context[1] = sub_1B187A9C4(v9, a2, a3, a4, a5, a6, a7, a8);
    context[2] = v9;
    v10 = *(const __CFSet **)(a1 + 64);
    if (v10)
    {
      CFSetApplyFunction(v10, (CFSetApplierFunction)sub_1B1821A3C, context);
      CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 64));
    }
    v11 = *(const __CFSet **)(a1 + 56);
    if (v11)
    {
      CFSetApplyFunction(v11, (CFSetApplierFunction)sub_1B1821ABC, context);
      CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 56));
    }
    v12 = *(const __CFSet **)(a1 + 72);
    if (v12)
    {
      CFSetApplyFunction(v12, (CFSetApplierFunction)sub_1B1821B34, context);
      CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 72));
    }
    v13 = *(const __CFSet **)(a1 + 80);
    if (v13)
    {
      CFSetApplyFunction(v13, (CFSetApplierFunction)sub_1B1821BE4, context);
      CFSetRemoveAllValues(*(CFMutableSetRef *)(a1 + 80));
    }
    v14 = *(const __CFDictionary **)(a1 + 48);
    if (v14)
    {
      v21 = 0;
      CFDictionaryApplyFunction(v14, (CFDictionaryApplierFunction)sub_1B1821C70, &v21);
      sub_1B1879F0C(v9, v21, v15, v16, v17, v18, v19, v20);
    }
  }
}

void sub_1B1821A3C(void *key, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  const __CFDictionary *v11;
  uint64_t v12;
  const void *Value;
  const void *v14;
  const __CFString *v15;
  uint64_t v16;

  v10 = *a2;
  v11 = *(const __CFDictionary **)(*a2 + 48);
  if (v11)
  {
    v12 = a2[1];
    Value = CFDictionaryGetValue(v11, key);
    if (Value)
    {
      v14 = Value;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(v10 + 48), key);
      MEMORY[0x1E0DE7D20](v12, sel_destroyObject_, v14, v16);
      return;
    }
    v15 = CFSTR("Error: _applyDeleteEntities - can't find entity");
  }
  else
  {
    v15 = CFSTR("Error: _applyDeleteEntities - registry does not exist");
  }
  sub_1B17C4408(16, (uint64_t)v15, a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B1821ABC(void *key, _QWORD *a2)
{
  void *v3;
  uint64_t v4;
  const __CFDictionary *Mutable;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;

  v4 = *a2;
  v3 = (void *)a2[1];
  Mutable = *(const __CFDictionary **)(*a2 + 48);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
    *(_QWORD *)(v4 + 48) = Mutable;
  }
  if (CFDictionaryGetValue(Mutable, key))
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: _applyNewEntityForNode - node already has an entity"), v7, v8, v9, v10, v11, v12, v14);
  v13 = (const void *)objc_msgSend_newObject(v3, v6, v7, v8);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v4 + 48), key, v13);
}

void sub_1B1821B34(void *key, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFDictionary *v10;
  uint64_t v11;
  const void *Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const __CFDictionary *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = *(const __CFDictionary **)(*a2 + 48);
  if (v10)
  {
    v11 = a2[1];
    Value = CFDictionaryGetValue(v10, key);
    if (Value)
    {
      v20 = Value;
      v21 = sub_1B186DD10((uint64_t)key, v13, v14, v15, v16, v17, v18, v19);
      if (v21)
      {
        v29 = sub_1B198AB84((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28);
        MEMORY[0x1E0DE7D20](v11, sel_updateForceField_of_, v29, v20);
      }
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: _applyUpdateComponentForNode - can't find entity for node %@"), v14, v15, v16, v17, v18, v19, (uint64_t)key);
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: _applyUpdateComponentForNode - entity registry doesn't exist"), a3, a4, a5, a6, a7, a8, a9);
  }
}

const __CFDictionary *sub_1B1821BE4(const void *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;

  v10 = *a2;
  v9 = a2[1];
  v11 = a2[2];
  if (sub_1B186CDDC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
    sub_1B199BA14(v11, (uint64_t)a1, v13, v14, v15, v16, v17, v18, v29);
  sub_1B186D818((uint64_t)a1, v12, v13, v14, v15, v16, v17, v18);
  result = *(const __CFDictionary **)(v10 + 48);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a1);
    if (result)
    {
      v27 = result;
      result = (const __CFDictionary *)sub_1B1869AC8((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
      if (result)
        return (const __CFDictionary *)MEMORY[0x1E0DE7D20](v9, sel_updateWorldTransform_of_, v27, v28);
    }
  }
  return result;
}

uint64_t sub_1B1821C70(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1B186DBB0(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
    ++*a3;
  return result;
}

const __CFDictionary *sub_1B1821CA0(uint64_t a1, const void *a2)
{
  const __CFDictionary *result;

  result = *(const __CFDictionary **)(a1 + 48);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a2);
  return result;
}

void sub_1B1821CC0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  sub_1B194F838(a1, CFSTR("kCFXNotificationNodeWillDie"), 0);
  v16 = (_BYTE *)a1[4];
  if (v16)
  {
    sub_1B19407E8(v16, v9, v10, v11, v12, v13, v14, v15);
    v17 = (const void *)a1[4];
    if (v17)
    {
      CFRelease(v17);
      a1[4] = 0;
    }
  }
  v18 = (const void *)a1[3];
  if (v18)
  {
    CFRelease(v18);
    a1[3] = 0;
  }
  v19 = (const void *)a1[5];
  if (v19)
  {
    CFRelease(v19);
    a1[5] = 0;
  }
  v20 = (const void *)a1[12];
  if (v20)
  {
    CFRelease(v20);
    a1[12] = 0;
  }
  v21 = (const void *)a1[7];
  if (v21)
  {
    CFRelease(v21);
    a1[7] = 0;
  }
  v22 = (const void *)a1[9];
  if (v22)
  {
    CFRelease(v22);
    a1[9] = 0;
  }
  v23 = (const void *)a1[8];
  if (v23)
  {
    CFRelease(v23);
    a1[8] = 0;
  }
  v24 = (const void *)a1[10];
  if (v24)
  {
    CFRelease(v24);
    a1[10] = 0;
  }
  v25 = (const void *)a1[6];
  if (v25)
  {
    CFRelease(v25);
    a1[6] = 0;
  }
}

CFStringRef sub_1B1821DB8(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXEnginePipeline %p>"), a1);
}

CFStringRef sub_1B1821DF4(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXEnginePipeline %p>"), a1);
}

void sub_1B1821E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int128 v17;

  v15 = sub_1B1868F58(a2, a2, a3, a4, a5, a6, a7, a8);
  if (!v15)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"deformers");
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1B1821EC0;
  v16[3] = &unk_1E63D6D10;
  v17 = *(_OWORD *)(a1 + 32);
  sub_1B1998D3C(v15, (uint64_t)v16);
}

void sub_1B1821EC0(uint64_t a1, int a2, void *value)
{
  __CFSet *v5;

  v5 = *(__CFSet **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (!v5)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFSetCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFSetRef *)(a1 + 40));
    CFAutorelease(*(CFTypeRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
    v5 = *(__CFSet **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
  CFSetAddValue(v5, value);
}

uint64_t sub_1B1821F34(uint64_t a1, unsigned int a2)
{
  return a1 + 16 * a2;
}

BOOL sub_1B1821F3C(_OWORD *a1, __int128 *a2, void *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = *a1;
  v4 = a1[1];
  v16 = *(_QWORD *)a1;
  v17 = DWORD2(v3);
  v18 = 1065353216;
  v19 = v4;
  v20 = DWORD2(v4);
  v21 = 1065353216;
  v5 = a1[2];
  v22 = *((_QWORD *)a1 + 4);
  v23 = DWORD2(v5);
  v24 = 1065353216;
  v6 = *a2;
  v25 = *(_QWORD *)a2;
  v26 = DWORD2(v6);
  v27 = 1065353216;
  v13 = sub_1B184F550((uint64_t)&v16, 4u, 3, a3);
  if (!v13)
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: CFXTriangle3BarycentricCoordinates: unable to solve the equation"), v7, v8, v9, v10, v11, v12, v15);
  return v13;
}

BOOL sub_1B182200C(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  _BOOL8 result;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  float v19;
  float32x4_t v20;
  float v21;

  v2 = vsubq_f32(a1[1], *a1);
  v3 = vsubq_f32(a1[2], *a1);
  v4 = vsubq_f32(*a2, *a1);
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
  v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  v7 = vnegq_f32(v3);
  v8 = vmlaq_f32(vmulq_f32(v6, v7), v4, v5);
  v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2, (int32x4_t)v2), (int8x16_t)v2, 0xCuLL);
  v10 = vmulq_f32(vmlaq_f32(vmulq_f32(v9, v7), v2, v5), v8);
  if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), v10)).f32[0] < 0.0)return 0;
  v11 = vnegq_f32(v2);
  v12 = vmlaq_f32(vmulq_f32(v6, v11), v4, v9);
  v13 = vmlaq_f32(vmulq_f32(v5, v11), v3, v9);
  v14 = vmulq_f32(v13, v12);
  if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), v14)).f32[0] < 0.0)return 0;
  result = 0;
  v16 = vmulq_f32(v13, v13);
  v17 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), v16)).f32[0]);
  v18 = vmulq_f32(v8, v8);
  v19 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), v18)).f32[0])/ v17;
  if (v19 <= 1.0)
  {
    v20 = vmulq_f32(v12, v12);
    v21 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), v20)).f32[0])/ v17;
    if (v21 <= 1.0)
      return (float)(v19 + v21) <= 1.0;
  }
  return result;
}

uint64_t sub_1B1822120(uint64_t a1)
{
  return *(_DWORD *)(a1 + 92) & 3;
}

__n128 sub_1B182212C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 92) = 8;
  return result;
}

__n128 sub_1B1822148(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a1[92] & 8) == 0)
    sub_1B182217C((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  return *(__n128 *)a1;
}

__n128 sub_1B182217C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  __float2 v24;
  float32x4_t v25;
  simd_float4 v26;
  float v29;
  float v30;
  __n128 result;
  float32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float32x4_t v42;
  float32x2_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  simd_float4 x;
  float32x4_t v48;
  simd_float4 v49;

  v9 = *(_DWORD *)(a1 + 92);
  if ((v9 & 4) == 0)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateMatrix - no valid rep"), a3, a4, a5, a6, a7, a8, (uint64_t)"_affineValid(t)");
    v9 = *(_DWORD *)(a1 + 92);
  }
  if ((v9 & 8) != 0)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateMatrix - already valid"), a3, a4, a5, a6, a7, a8, (uint64_t)"!_matrixValid(t)");
    v9 = *(_DWORD *)(a1 + 92);
  }
  v10 = v9 & 3;
  if (v10 == 2)
  {
    v12 = *(float32x4_t *)(a1 + 64);
    v13 = vmulq_f32(v12, v12);
    v13.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u64[0];
    v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
    v14.i32[3] = 0;
    v15 = vrsqrteq_f32(v14);
    v16 = vmulq_f32(v15, vrsqrtsq_f32(v14, vmulq_f32(v15, v15)));
    v17 = (int8x16_t)vmulq_f32(v16, vrsqrtsq_f32(v14, vmulq_f32(v16, v16)));
    v18 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v13.f32[0] != 0.0)), 0x1FuLL));
    v18.i32[3] = 0;
    __asm { FMOV            V3.4S, #1.0 }
    v48 = vmulq_f32(v12, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v18), v17, _Q3));
    v24 = __sincosf_stret(vmuls_lane_f32(0.5, v12, 3));
    v11 = vmulq_n_f32(v48, v24.__sinval);
    v11.i32[3] = LODWORD(v24.__cosval);
  }
  else if (v10)
  {
    v25.i64[0] = 0x3F0000003F000000;
    v25.i64[1] = 0x3F0000003F000000;
    v26 = (simd_float4)vmulq_f32(*(float32x4_t *)(a1 + 64), v25);
    v26.i32[3] = 0;
    x = v26;
    v49 = _simd_cos_f4(v26);
    _Q0 = _simd_sin_f4(x);
    _Q7 = v49;
    v29 = vmuls_lane_f32(v49.f32[1], (float32x4_t)v49, 2);
    v30 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
    v11.f32[0] = vmlas_n_f32(-(float)(v49.f32[0] * v30), v29, _Q0.f32[0]);
    _S4 = vmuls_lane_f32(v49.f32[0], *(float32x2_t *)_Q0.f32, 1);
    __asm { FMLA            S5, S4, V7.S[2] }
    _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
    __asm { FMLA            S6, S4, V0.S[2] }
    v11.i32[1] = _S5;
    v11.i64[1] = __PAIR64__(COERCE_UNSIGNED_INT(vmlas_n_f32(v30 * _Q0.f32[0], v29, v49.f32[0])), _S6);
  }
  else
  {
    v11 = *(float32x4_t *)(a1 + 64);
  }
  result = *(__n128 *)(a1 + 80);
  v36 = vabsq_f32((float32x4_t)result);
  v36.i32[3] = 0;
  v37.i64[0] = 0x8000000080000000;
  v37.i64[1] = 0x8000000080000000;
  v38 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v36, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)result, v37));
  v39 = vmulq_f32(v11, v11);
  v40 = vmulq_laneq_f32(v11, v11, 3);
  v41 = vmulq_lane_f32(v11, *(float32x2_t *)v11.f32, 1).f32[0];
  v42 = vaddq_f32(v38, v38);
  v39.f32[0] = 0.5 - v39.f32[0];
  v43 = vmul_laneq_f32(*(float32x2_t *)v11.f32, v11, 2);
  v44.i32[3] = 0;
  v45.i32[3] = 0;
  v45.f32[0] = (float)(0.5 - v39.f32[1]) - v39.f32[2];
  v45.f32[1] = v41 + v40.f32[2];
  v45.f32[2] = v43.f32[0] - v40.f32[1];
  v44.f32[0] = v41 - v40.f32[2];
  v44.f32[1] = v39.f32[0] - v39.f32[2];
  v44.f32[2] = v43.f32[1] + v40.f32[0];
  *(int32x2_t *)v40.f32 = vrev64_s32(*(int32x2_t *)v40.f32);
  v46.i32[0] = vadd_f32(v43, *(float32x2_t *)v40.f32).u32[0];
  v46.i32[1] = vsub_f32(v43, *(float32x2_t *)&v40).i32[1];
  v46.f32[2] = v39.f32[0] - v39.f32[1];
  v46.i32[3] = 0;
  *(float32x4_t *)a1 = vmulq_n_f32(v45, v42.f32[0]);
  *(float32x4_t *)(a1 + 16) = vmulq_lane_f32(v44, *(float32x2_t *)v42.f32, 1);
  *(float32x4_t *)(a1 + 32) = vmulq_laneq_f32(v46, v42, 2);
  *(_DWORD *)(a1 + 60) = 1065353216;
  *(_DWORD *)(a1 + 92) = result.n128_u32[3] | 8;
  return result;
}

uint64_t sub_1B18223DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(a1 + 92) & 8) == 0)
    sub_1B182217C(a1, a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

double sub_1B182240C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int32 v9;
  int v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int8x16_t v17;
  int32x4_t v18;
  float32x4_t v24;
  simd_float4 v25;
  simd_float4 x;
  simd_float4 v34;

  v9 = a1[5].i32[3];
  if ((v9 & 4) == 0)
  {
    sub_1B182255C(a1, a2, a3, a4, a5, a6, a7, a8);
    v9 = a1[5].i32[3];
  }
  v10 = v9 & 3;
  if (v10 == 2)
  {
    v12 = a1[4];
    v13 = vmulq_f32(v12, v12);
    v13.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u64[0];
    v14 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0);
    v14.i32[3] = 0;
    v15 = vrsqrteq_f32(v14);
    v16 = vmulq_f32(v15, vrsqrtsq_f32(v14, vmulq_f32(v15, v15)));
    v17 = (int8x16_t)vmulq_f32(v16, vrsqrtsq_f32(v14, vmulq_f32(v16, v16)));
    v18 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v13.f32[0] != 0.0)), 0x1FuLL));
    v18.i32[3] = 0;
    __asm { FMOV            V3.4S, #1.0 }
    v11.i64[0] = vmulq_n_f32(vmulq_f32(v12, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v18), v17, _Q3)), __sincosf_stret(vmuls_lane_f32(0.5, v12, 3)).__sinval).u64[0];
  }
  else if (v10)
  {
    v24.i64[0] = 0x3F0000003F000000;
    v24.i64[1] = 0x3F0000003F000000;
    v25 = (simd_float4)vmulq_f32(a1[4], v24);
    v25.i32[3] = 0;
    x = v25;
    v34 = _simd_cos_f4(v25);
    _Q1 = _simd_sin_f4(x);
    _Q7 = v34;
    v11.f32[0] = vmlas_n_f32(-(float)(v34.f32[0] * vmuls_lane_f32(_Q1.f32[1], (float32x4_t)_Q1, 2)), vmuls_lane_f32(v34.f32[1], (float32x4_t)v34, 2), _Q1.f32[0]);
    _S4 = vmuls_lane_f32(v34.f32[0], *(float32x2_t *)_Q1.f32, 1);
    __asm { FMLA            S5, S4, V7.S[2] }
    _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
    __asm { FMLA            S6, S4, V1.S[2] }
    v11.i32[1] = _S5;
  }
  else
  {
    v11 = a1[4];
  }
  return *(double *)v11.i64;
}

float32x4_t sub_1B182255C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int32 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int8x16_t v34;
  float32x4_t v35;
  int32x4_t v36;
  float v37;
  float32x4_t v38;
  float v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v44;
  int8x16_t v45;
  float v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x2_t v49;
  uint64_t v50;
  int32x2_t v51;
  float32x4_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x4_t result;

  v9 = a1[5].i32[3];
  if ((v9 & 8) == 0)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateAffine - no valid rep"), a3, a4, a5, a6, a7, a8, (uint64_t)"_matrixValid(t)");
    v9 = a1[5].i32[3];
  }
  if ((v9 & 4) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateAffine - already valid"), a3, a4, a5, a6, a7, a8, (uint64_t)"!_affineValid(t)");
  v10 = *a1;
  v11 = a1[1];
  v12 = a1[2];
  v13 = vmulq_f32(v10, v10);
  v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
  v14.f32[0] = sqrtf(v14.f32[0]);
  v15 = vmulq_f32(v11, v11);
  v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
  v17 = vmulq_f32(v12, v12);
  v14.i32[1] = sqrtf(vaddq_f32(v16, vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]);
  v14.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]);
  a1[5] = v14;
  v18 = vzip2q_s32((int32x4_t)v13, (int32x4_t)v17);
  v19 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v13, (int32x4_t)v17), (int32x4_t)v15);
  v20 = (float32x4_t)vtrn2q_s32((int32x4_t)v13, (int32x4_t)v15);
  v20.i32[2] = v17.i32[1];
  v21 = vaddq_f32((float32x4_t)vzip1q_s32(v18, (int32x4_t)v16), vaddq_f32(v19, v20));
  v20.i64[0] = 0x80000000800000;
  v20.i64[1] = 0x80000000800000;
  v22 = vcgeq_f32(v20, v21);
  v21.i32[3] = 0;
  v23 = vrsqrteq_f32(v21);
  v24 = vmulq_f32(v23, vrsqrtsq_f32(v21, vmulq_f32(v23, v23)));
  v25 = v22;
  v25.i32[3] = 0;
  v26 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v25), (int8x16_t)v21, (int8x16_t)vmulq_f32(v24, vrsqrtsq_f32(v21, vmulq_f32(v24, v24))));
  v27 = vmulq_n_f32(v10, v26.f32[0]);
  v28 = vmulq_lane_f32(v11, *(float32x2_t *)v26.f32, 1);
  v29 = vmulq_laneq_f32(v12, v26, 2);
  v30 = (int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29);
  v31 = (int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28);
  v32 = (int32x4_t)v27;
  if (v22.i32[0])
  {
    v33 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v30, (int8x16_t)v29, 0xCuLL), vnegq_f32(v28)), v29, (float32x4_t)vextq_s8(v31, (int8x16_t)v28, 0xCuLL));
    v32 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v33, v33), (int8x16_t)v33, 0xCuLL);
  }
  v34 = (int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27);
  v35 = v28;
  if (v22.i32[1])
  {
    v36 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v34, (int8x16_t)v27, 0xCuLL), vnegq_f32(v29)), v27, (float32x4_t)vextq_s8(v30, (int8x16_t)v29, 0xCuLL));
    v35 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL);
  }
  if (v22.i32[2])
  {
    v22 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v31, (int8x16_t)v28, 0xCuLL), vnegq_f32(v27)), v28, (float32x4_t)vextq_s8(v34, (int8x16_t)v27, 0xCuLL));
    v29 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v22, v22), (int8x16_t)v22, 0xCuLL);
  }
  v37 = (float)(*(float *)v32.i32 + v35.f32[1]) + v29.f32[2];
  if (v37 > 0.0)
  {
    v38 = (float32x4_t)vzip2q_s32((int32x4_t)v35, vuzp1q_s32((int32x4_t)v35, (int32x4_t)v29));
    v38.i32[2] = v32.i32[1];
    v39 = sqrtf(v37 + 1.0);
    v40 = (float32x4_t)vtrn2q_s32((int32x4_t)v29, vzip2q_s32((int32x4_t)v29, v32));
    v40.i32[2] = v35.i32[0];
    v42 = vsubq_f32(v38, v40);
    v38.f32[3] = v39;
    v40.f32[3] = v39;
    v41 = vmulq_f32(v38, v40);
    v42.i32[3] = v41.i32[3];
LABEL_22:
    v41.f32[0] = 0.5 / v39;
    v52 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 0);
    goto LABEL_23;
  }
  if (*(float *)v32.i32 < v35.f32[1] || *(float *)v32.i32 < v29.f32[2])
  {
    if (v35.f32[1] <= v29.f32[2])
    {
      v39 = sqrtf((float)((float)(v29.f32[2] + 1.0) - *(float *)v32.i32) - v35.f32[1]);
      *(float32x2_t *)v42.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v32, (int32x4_t)v35), *(float32x2_t *)v29.f32);
      v53 = (float32x2_t)__PAIR64__(v32.u32[1], LODWORD(v39));
      v54 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 0);
      *(float32x2_t *)v41.f32 = vsub_f32(*(float32x2_t *)v32.i8, v54);
      v54.f32[0] = v39;
      v54.i32[0] = vmul_f32(v53, v54).u32[0];
      v54.i32[1] = v41.i32[1];
      *(float32x2_t *)&v42.u32[2] = v54;
      goto LABEL_22;
    }
    v46 = sqrtf((float)((float)(v35.f32[1] + 1.0) - *(float *)v32.i32) - v29.f32[2]);
    *(int32x2_t *)v22.i8 = vdup_laneq_s32((int32x4_t)v35, 2);
    v44 = (int8x16_t)v22;
    *(float *)v44.i32 = v46;
    v44.i32[0] = vmul_f32(*(float32x2_t *)v44.i8, (float32x2_t)__PAIR64__(v29.u32[1], LODWORD(v46))).u32[0];
    v44.i32[1] = vadd_f32(*(float32x2_t *)&v22, *(float32x2_t *)&v29).i32[1];
    v45 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.i8, 1), v35);
    v51 = (int32x2_t)vsubq_f32(v29, (float32x4_t)vdupq_laneq_s32(v32, 2)).u64[0];
    v52 = (float32x4_t)vextq_s8(vextq_s8(v45, v45, 4uLL), v44, 0xCuLL);
    v52.i32[3] = v51.i32[0];
  }
  else
  {
    v46 = sqrtf((float)((float)(*(float *)v32.i32 + 1.0) - v35.f32[1]) - v29.f32[2]);
    v47 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 0);
    v48 = vadd_f32(*(float32x2_t *)v32.i8, v47);
    v47.f32[0] = v46;
    v52.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v32.u32[1], LODWORD(v46)), v47).u32[0];
    v52.i32[1] = v48.i32[1];
    v49 = (float32x2_t)vzip2q_s32(v32, (int32x4_t)v35).u64[0];
    LODWORD(v50) = vadd_f32(v49, *(float32x2_t *)v29.f32).u32[0];
    v51 = (int32x2_t)vsub_f32(v49, *(float32x2_t *)v29.f32);
    HIDWORD(v50) = v51.i32[1];
    v52.i64[1] = v50;
  }
  *(float *)v51.i32 = 0.5 / v46;
  v42 = (float32x4_t)vdupq_lane_s32(v51, 0);
LABEL_23:
  result = vmulq_f32(v42, v52);
  a1[4] = result;
  a1[5].i32[3] = 4;
  return result;
}

void sub_1B182286C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v10;
  __n128 v11;

  v10 = *(_DWORD *)(a1 + 92);
  if ((v10 & 4) == 0)
  {
    v11 = a9;
    sub_1B18228BC((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    a9 = v11;
    v10 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v10 & 0xFFFFFFF4;
  *(__n128 *)(a1 + 64) = a9;
}

__n128 sub_1B18228BC(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int32 v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  __n128 result;

  v9 = a1[5].i32[3];
  if ((v9 & 8) == 0)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateAffineScale - no valid rep"), a3, a4, a5, a6, a7, a8, (uint64_t)"_matrixValid(t)");
    v9 = a1[5].i32[3];
  }
  if ((v9 & 4) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateAffineScale - already valid"), a3, a4, a5, a6, a7, a8, (uint64_t)"!_affineValid(t)");
  v10 = vmulq_f32(*a1, *a1);
  v13 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
  v11 = vmulq_f32(a1[1], a1[1]);
  v13.f32[0] = sqrtf(v13.f32[0]);
  v12 = vmulq_f32(a1[2], a1[2]);
  v13.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0]);
  v13.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0]);
  a1[5] = v13;
  a1[5].i32[3] = -1;
  result.n128_u64[0] = v13.i64[0];
  result.n128_u32[2] = v13.u32[2];
  return result;
}

__n128 sub_1B182298C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int32 v9;
  int v10;
  float32x4_t *v11;
  __int128 *v12;
  __int128 v13;
  __int128 v15;

  v9 = a1[5].i32[3];
  if ((v9 & 4) == 0)
  {
    sub_1B182255C(a1, a2, a3, a4, a5, a6, a7, a8);
    v9 = a1[5].i32[3];
  }
  DWORD2(v15) = 0;
  *(_QWORD *)&v15 = 0;
  v10 = v9 & 3;
  if (v10 == 2)
  {
    sub_1B1840AD8(a1[4]);
    v15 = v13;
LABEL_8:
    v12 = &v15;
    return (__n128)*v12;
  }
  if (v10 == 1)
  {
    v12 = (__int128 *)&a1[4];
    return (__n128)*v12;
  }
  if (v10)
    goto LABEL_8;
  v11 = a1 + 4;
  v12 = &v15;
  sub_1B17C9E14(v11, &v15);
  return (__n128)*v12;
}

void sub_1B1822A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v10;
  __n128 v11;

  v10 = *(_DWORD *)(a1 + 92);
  if ((v10 & 4) == 0)
  {
    v11 = a9;
    sub_1B18228BC((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    a9 = v11;
    v10 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v10 & 0xFFFFFFF4 | 1;
  *(__n128 *)(a1 + 64) = a9;
}

void sub_1B1822A68(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int32 v9;
  float32x4_t v10;
  int v11;
  float32x4_t v12;

  v9 = a1[5].i32[3];
  if ((v9 & 4) == 0)
  {
    sub_1B182255C(a1, a2, a3, a4, a5, a6, a7, a8);
    v9 = a1[5].i32[3];
  }
  v10 = 0uLL;
  v12 = 0u;
  v11 = v9 & 3;
  if (v11 != 2)
  {
    if (v11 == 1)
    {
      *(double *)v10.i64 = sub_1B18409E8(a1[4]);
    }
    else if (!v11)
    {
      sub_1B17C993C(a1 + 4, &v12);
      v10 = v12;
    }
    a1[4] = v10;
    a1[5].i32[3] = a1[5].i32[3] & 0xFFFFFFFC | 2;
  }
}

void sub_1B1822AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v10;
  __n128 v11;

  v10 = *(_DWORD *)(a1 + 92);
  if ((v10 & 4) == 0)
  {
    v11 = a9;
    sub_1B18228BC((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    a9 = v11;
    v10 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v10 & 0xFFFFFFF4 | 2;
  *(__n128 *)(a1 + 64) = a9;
}

__n128 sub_1B1822B4C(__n128 *a1)
{
  return a1[3];
}

__n128 sub_1B1822B54(__n128 *a1, __n128 result)
{
  result.n128_u32[3] = 1.0;
  a1[3] = result;
  return result;
}

__n128 sub_1B1822B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_BYTE *)(a1 + 92) & 4) == 0)
    sub_1B182255C((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  return *(__n128 *)(a1 + 80);
}

void sub_1B1822B94(float32x4_t *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v9;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float v42;
  float32x4_t v43;
  float v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v49;
  int8x16_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  uint64_t v55;
  int32x2_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;

  v9 = a2;
  v11 = a1[5].u32[3];
  if ((v11 & 4) == 0)
  {
    if ((v11 & 8) == 0)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateAffineRotation - no valid rep"), a4, a5, a6, a7, a8, a9, (uint64_t)"_matrixValid(t)");
      v9 = a2;
      if ((a1[5].i8[12] & 4) != 0)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _updateAffineRotation - already valid"), v12, v13, v14, v15, v16, v17, (uint64_t)"!_affineValid(t)");
        v9 = a2;
      }
    }
    v18 = a1[1];
    v19 = a1[2];
    v20 = (int32x4_t)vmulq_f32(*a1, *a1);
    v21 = (int32x4_t)vmulq_f32(v18, v18);
    v22 = (int32x4_t)vmulq_f32(v19, v19);
    v23 = vzip2q_s32(v20, v22);
    v24 = (float32x4_t)vzip1q_s32(vzip1q_s32(v20, v22), v21);
    v25 = (float32x4_t)vtrn2q_s32(v20, v21);
    v25.i32[2] = v22.i32[1];
    v26 = vaddq_f32((float32x4_t)vzip1q_s32(v23, vdupq_laneq_s32(v21, 2)), vaddq_f32(v24, v25));
    v25.i64[0] = 0x80000000800000;
    v25.i64[1] = 0x80000000800000;
    v27 = vcgeq_f32(v25, v26);
    v26.i32[3] = 0;
    v28 = vrsqrteq_f32(v26);
    v29 = vmulq_f32(v28, vrsqrtsq_f32(v26, vmulq_f32(v28, v28)));
    v30 = v27;
    v30.i32[3] = 0;
    v31 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v30), (int8x16_t)v26, (int8x16_t)vmulq_f32(v29, vrsqrtsq_f32(v26, vmulq_f32(v29, v29))));
    v32 = vmulq_n_f32(*a1, v31.f32[0]);
    v33 = vmulq_lane_f32(v18, *(float32x2_t *)v31.f32, 1);
    v34 = vmulq_laneq_f32(v19, v31, 2);
    v35 = (int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34);
    v36 = (int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33);
    v37 = (int32x4_t)v32;
    if (v27.i32[0])
    {
      v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v35, (int8x16_t)v34, 0xCuLL), vnegq_f32(v33)), v34, (float32x4_t)vextq_s8(v36, (int8x16_t)v33, 0xCuLL));
      v37 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL);
    }
    v39 = (int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32);
    v40 = v33;
    if (v27.i32[1])
    {
      v41 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v39, (int8x16_t)v32, 0xCuLL), vnegq_f32(v34)), v32, (float32x4_t)vextq_s8(v35, (int8x16_t)v34, 0xCuLL));
      v40 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL);
    }
    if (v27.i32[2])
    {
      v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v36, (int8x16_t)v33, 0xCuLL), vnegq_f32(v32)), v33, (float32x4_t)vextq_s8(v39, (int8x16_t)v32, 0xCuLL));
      v34 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL);
    }
    v42 = (float)(*(float *)v37.i32 + v40.f32[1]) + v34.f32[2];
    if (v42 > 0.0)
    {
      v43 = (float32x4_t)vzip2q_s32((int32x4_t)v40, vuzp1q_s32((int32x4_t)v40, (int32x4_t)v34));
      v43.i32[2] = v37.i32[1];
      v44 = sqrtf(v42 + 1.0);
      v45 = (float32x4_t)vtrn2q_s32((int32x4_t)v34, vzip2q_s32((int32x4_t)v34, v37));
      v45.i32[2] = v40.i32[0];
      v47 = vsubq_f32(v43, v45);
      v43.f32[3] = v44;
      v45.f32[3] = v44;
      v46 = vmulq_f32(v43, v45);
      v47.i32[3] = v46.i32[3];
LABEL_22:
      v46.f32[0] = 0.5 / v44;
      v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 0);
      goto LABEL_23;
    }
    if (*(float *)v37.i32 < v40.f32[1] || *(float *)v37.i32 < v34.f32[2])
    {
      if (v40.f32[1] <= v34.f32[2])
      {
        v44 = sqrtf((float)((float)(v34.f32[2] + 1.0) - *(float *)v37.i32) - v40.f32[1]);
        *(float32x2_t *)v47.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v37, (int32x4_t)v40), *(float32x2_t *)v34.f32);
        v58 = (float32x2_t)__PAIR64__(v37.u32[1], LODWORD(v44));
        v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 0);
        *(float32x2_t *)v46.f32 = vsub_f32(*(float32x2_t *)v37.i8, v59);
        v59.f32[0] = v44;
        v59.i32[0] = vmul_f32(v58, v59).u32[0];
        v59.i32[1] = v46.i32[1];
        *(float32x2_t *)&v47.u32[2] = v59;
        goto LABEL_22;
      }
      v51 = sqrtf((float)((float)(v40.f32[1] + 1.0) - *(float *)v37.i32) - v34.f32[2]);
      *(int32x2_t *)v27.i8 = vdup_laneq_s32((int32x4_t)v40, 2);
      v49 = (int8x16_t)v27;
      *(float *)v49.i32 = v51;
      v49.i32[0] = vmul_f32(*(float32x2_t *)v49.i8, (float32x2_t)__PAIR64__(v34.u32[1], LODWORD(v51))).u32[0];
      v49.i32[1] = vadd_f32(*(float32x2_t *)&v27, *(float32x2_t *)&v34).i32[1];
      v50 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.i8, 1), v40);
      v56 = (int32x2_t)vsubq_f32(v34, (float32x4_t)vdupq_laneq_s32(v37, 2)).u64[0];
      v57 = (float32x4_t)vextq_s8(vextq_s8(v50, v50, 4uLL), v49, 0xCuLL);
      v57.i32[3] = v56.i32[0];
    }
    else
    {
      v51 = sqrtf((float)((float)(*(float *)v37.i32 + 1.0) - v40.f32[1]) - v34.f32[2]);
      v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.f32, 0);
      v53 = vadd_f32(*(float32x2_t *)v37.i8, v52);
      v52.f32[0] = v51;
      v57.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v37.u32[1], LODWORD(v51)), v52).u32[0];
      v57.i32[1] = v53.i32[1];
      v54 = (float32x2_t)vzip2q_s32(v37, (int32x4_t)v40).u64[0];
      LODWORD(v55) = vadd_f32(v54, *(float32x2_t *)v34.f32).u32[0];
      v56 = (int32x2_t)vsub_f32(v54, *(float32x2_t *)v34.f32);
      HIDWORD(v55) = v56.i32[1];
      v57.i64[1] = v55;
    }
    *(float *)v56.i32 = 0.5 / v51;
    v47 = (float32x4_t)vdupq_lane_s32(v56, 0);
LABEL_23:
    a1[4] = vmulq_f32(v57, v47);
    v11 = a1[5].i32[3] & 0xFFFFFFF8 | 4;
  }
  a1[5].i32[3] = v11 & 0xFFFFFFF7;
  a1[5].i32[2] = v9.n128_i32[2];
  a1[5].i64[0] = v9.n128_u64[0];
}

double sub_1B1822E8C(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a1 + 92) & 0xFFFFFFF3 | 8;
  *(_OWORD *)a1 = xmmword_1B2244DB0;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244DD0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1B2244D90;
  *(_OWORD *)(a1 + 48) = xmmword_1B2244E20;
  return result;
}

void sub_1B1822EC8(uint64_t a1, void *a2, size_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v9;
  int v10;
  __n128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD v18[4];

  v9 = a5;
  v10 = a4;
  if (a5 >= 4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransformGetValue offset out of bounds"), a3, a4, a5, a6, a7, a8, (uint64_t)"offset < 4");
  switch(v10)
  {
    case 3:
      v14.n128_f64[0] = sub_1B182240C((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 4:
      sub_1B1822A68((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 5:
      v14 = sub_1B182298C((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      goto LABEL_11;
    case 6:
      v14 = *(__n128 *)(a1 + 48);
      goto LABEL_11;
    case 7:
      if ((*(_BYTE *)(a1 + 92) & 4) == 0)
        sub_1B182255C((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v14 = *(__n128 *)(a1 + 80);
LABEL_11:
      v18[0] = v14;
      goto LABEL_12;
    case 8:
      if ((*(_BYTE *)(a1 + 92) & 8) == 0)
        sub_1B182217C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      v15 = *(_OWORD *)(a1 + 16);
      v16 = *(_OWORD *)(a1 + 32);
      v17 = *(_OWORD *)(a1 + 48);
      v18[0] = *(_OWORD *)a1;
      v18[1] = v15;
      v18[2] = v16;
      v18[3] = v17;
LABEL_12:
      memcpy(a2, (char *)v18 + 4 * v9, a3);
      break;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransformGetValue - unexpected semantic"), a3, a4, a5, a6, a7, a8, a9);
      break;
  }
}

void sub_1B1822FF4(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;

  v8 = a4;
  if (a3 != 4)
  {
    if (a3 == 16)
    {
      v11 = *a2;
      goto LABEL_11;
    }
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransformSetValue unexpected size"), a3, a4, a5, a6, a7, a8, (uint64_t)"size == sizeof(float)");
  }
  *(double *)&v11 = sub_1B182240C((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  switch(v8)
  {
    case 0u:
      LODWORD(v11) = *(_DWORD *)a2;
      break;
    case 1u:
      DWORD1(v11) = *(_DWORD *)a2;
      break;
    case 2u:
      DWORD2(v11) = *(_DWORD *)a2;
      break;
    case 3u:
      HIDWORD(v11) = *(_DWORD *)a2;
      break;
    default:
      v13 = v11;
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransformSetValue unexptected component index %d"), a3, a4, a5, a6, a7, a8, v8);
      v11 = v13;
      break;
  }
LABEL_11:
  v12 = *(_DWORD *)(a1 + 92);
  if ((v12 & 4) == 0)
  {
    v14 = v11;
    sub_1B18228BC((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v11 = v14;
    v12 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v12 & 0xFFFFFFF4;
  *(_OWORD *)(a1 + 64) = v11;
}

void sub_1B18230F0(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  __int128 v11;
  int v12;
  __int128 v13;
  __int128 v14;

  v8 = a4;
  if (a3 != 4)
  {
    if (a3 == 16)
    {
      v11 = *a2;
      goto LABEL_11;
    }
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransformSetValue unexpected size"), a3, a4, a5, a6, a7, a8, (uint64_t)"size == sizeof(float)");
  }
  sub_1B1822A68((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  switch(v8)
  {
    case 0u:
      LODWORD(v11) = *(_DWORD *)a2;
      break;
    case 1u:
      DWORD1(v11) = *(_DWORD *)a2;
      break;
    case 2u:
      DWORD2(v11) = *(_DWORD *)a2;
      break;
    case 3u:
      HIDWORD(v11) = *(_DWORD *)a2;
      break;
    default:
      v13 = v11;
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransformSetValue unexptected component index %d"), a3, a4, a5, a6, a7, a8, v8);
      v11 = v13;
      break;
  }
LABEL_11:
  v12 = *(_DWORD *)(a1 + 92);
  if ((v12 & 4) == 0)
  {
    v14 = v11;
    sub_1B18228BC((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v11 = v14;
    v12 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v12 & 0xFFFFFFF4 | 2;
  *(_OWORD *)(a1 + 64) = v11;
}

void sub_1B18231F0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  __n128 v21;
  int v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;

  if (a3 >= 0xC)
  {
    a9.n128_u64[0] = *(_QWORD *)a2;
    a9.n128_u32[2] = *(_DWORD *)(a2 + 8);
    v11 = *(_DWORD *)(a1 + 92);
    if ((v11 & 4) == 0)
    {
      v23 = a9;
      sub_1B18228BC((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8);
      a9 = v23;
      v11 = *(_DWORD *)(a1 + 92);
    }
    *(_DWORD *)(a1 + 92) = v11 & 0xFFFFFFF4 | 1;
    *(__n128 *)(a1 + 64) = a9;
    return;
  }
  v12 = a4;
  if (a3 != 4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransformSetValue unexpected size"), a3, a4, a5, a6, a7, a8, (uint64_t)"size == sizeof(float)");
  v20 = sub_1B182298C((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v12 == 2)
  {
    v21.n128_u64[0] = v20.n128_u64[0];
    v21.n128_u32[2] = *(_DWORD *)a2;
  }
  else
  {
    if (v12 == 1)
    {
      v21.n128_u32[0] = v20.n128_u32[0];
      v21.n128_u32[1] = *(_DWORD *)a2;
    }
    else
    {
      if (v12)
      {
        v24 = v20;
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransformSetValue unexptected component index %d"), v14, v15, v16, v17, v18, v19, v12);
        v21 = v24;
        goto LABEL_16;
      }
      v21.n128_u32[0] = *(_DWORD *)a2;
      v21.n128_u32[1] = v20.n128_u32[1];
    }
    v21.n128_u32[2] = v20.n128_u32[2];
  }
  v21.n128_u32[3] = v20.n128_u32[3];
LABEL_16:
  v22 = *(_DWORD *)(a1 + 92);
  if ((v22 & 4) == 0)
  {
    v25 = v21;
    sub_1B18228BC((float32x4_t *)a1, v13, v14, v15, v16, v17, v18, v19);
    v21 = v25;
    v22 = *(_DWORD *)(a1 + 92);
  }
  *(_DWORD *)(a1 + 92) = v22 & 0xFFFFFFF4 | 1;
  *(__n128 *)(a1 + 64) = v21;
}

__n128 sub_1B1823328(__n128 *a1, unsigned __int32 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int32 v10;
  __n128 result;
  unsigned int v12;
  __n128 v13;
  __n128 v14;

  if (a3 < 0xC)
  {
    v12 = a4;
    if (a3 != 4)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransformSetValue unexpected size"), a3, a4, a5, a6, a7, a8, (uint64_t)"size == sizeof(float)");
    v13 = a1[3];
    if (v12 == 2)
    {
      v13.n128_u32[2] = *a2;
      result = v13;
    }
    else
    {
      if (v12 == 1)
      {
        result = a1[3];
        result.n128_u32[1] = *a2;
      }
      else
      {
        if (v12)
        {
          v14 = a1[3];
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransformSetValue unexptected component index %d"), a3, a4, a5, a6, a7, a8, v12);
          result = v14;
          goto LABEL_13;
        }
        result.n128_u32[0] = *a2;
        result.n128_u32[1] = HIDWORD(a1[3].n128_u64[0]);
      }
      result.n128_u32[2] = a1[3].n128_u64[1];
    }
LABEL_13:
    v10 = 1.0;
    goto LABEL_14;
  }
  result.n128_u64[0] = *(_QWORD *)a2;
  v10 = 1.0;
  result.n128_u32[2] = a2[2];
LABEL_14:
  result.n128_u32[3] = v10;
  a1[3] = result;
  return result;
}

void sub_1B1823408(float32x4_t *a1, __int32 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned int v11;

  if (a3 < 0xC)
  {
    v11 = a4;
    if (a3 != 4)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransformSetValue unexpected size"), a3, a4, a5, a6, a7, a8, (uint64_t)"size == sizeof(float)");
    if ((a1[5].i8[12] & 4) == 0)
      sub_1B182255C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if (v11 == 2)
    {
      a1[5].i32[2] = *a2;
    }
    else if (v11 == 1)
    {
      a1[5].i32[1] = *a2;
    }
    else if (v11)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransformSetValue unexptected component index %d"), a3, a4, a5, a6, a7, a8, v11);
    }
    else
    {
      a1[5].i32[0] = *a2;
    }
    a1[5].i32[3] &= ~8u;
  }
  else
  {
    a9.n128_u64[0] = *(_QWORD *)a2;
    a9.n128_u32[2] = a2[2];
    sub_1B1822B94(a1, a9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
}

_OWORD *sub_1B18234F8(_OWORD *result, _OWORD *a2, size_t a3, unsigned int a4)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = result;
  if (a3 == 96)
  {
    v8 = a2[1];
    *result = *a2;
    result[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    v11 = a2[5];
    result[4] = a2[4];
    result[5] = v11;
    result[2] = v9;
    result[3] = v10;
  }
  else
  {
    if (a3 == 64)
    {
      v5 = a2[1];
      v6 = a2[2];
      v7 = a2[3];
      *result = *a2;
      result[1] = v5;
      result[2] = v6;
      result[3] = v7;
    }
    else
    {
      result = memcpy((char *)result + 4 * a4, a2, a3);
    }
    *((_DWORD *)v4 + 23) = 8;
  }
  return result;
}

void sub_1B1823564(__n128 *a1, __int128 *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9, uint64_t a10)
{
  int v11;

  v11 = a4;
  if (a5 >= 4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransformSetValue offset out of bounds"), a3, a4, a5, a6, a7, a8, (uint64_t)"offset < 4");
  switch(v11)
  {
    case 3:
      sub_1B1822FF4((uint64_t)a1, a2, a3, a5, a5, a6, a7, a8);
      break;
    case 4:
      sub_1B18230F0((uint64_t)a1, a2, a3, a5, a5, a6, a7, a8);
      break;
    case 5:
      sub_1B18231F0((uint64_t)a1, (uint64_t)a2, a3, a5, a5, a6, a7, a8, a9);
      break;
    case 6:
      sub_1B1823328(a1, (unsigned __int32 *)a2, a3, a5, a5, a6, a7, a8);
      break;
    case 7:
      sub_1B1823408((float32x4_t *)a1, (__int32 *)a2, a3, a5, a5, a6, a7, a8, a9);
      break;
    case 8:
      sub_1B18234F8(a1, a2, a3, a5);
      break;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransformSetValue - unexpected semantic"), a3, a4, a5, a6, a7, a8, a10);
      break;
  }
}

uint64_t sub_1B1823798(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CEAF0;

  sub_1B181C064((CFX::RG::Resource **)(a1 + 24), 0);
  return a1;
}

void sub_1B18237D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B181C064((CFX::RG::Resource **)(v1 + 24), 0);
  _Unwind_Resume(a1);
}

void sub_1B18237F4(uint64_t a1)
{
  sub_1B1823798(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1823818(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 *v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  id v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  int IsDepth;
  id v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  CFX::RG::Resource *v70;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[5];
  _OWORD v77[10];
  id v78[24];
  unsigned __int16 v79[2];
  uint64_t v80;
  int v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  unsigned __int8 v91;
  const char *v92;
  uint64_t v93;
  int v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v10 = *a5;
  *(_QWORD *)&v87 = "BackBufferPass";
  *((_QWORD *)&v87 + 1) = v10;
  v11 = atomic_load((unsigned __int8 *)&qword_1EEF65C68);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65C68))
  {
    byte_1EEF65C60 = 1;
    __cxa_guard_release(&qword_1EEF65C68);
  }
  if (byte_1EEF65C60)
    v12 = 0x2940D000AB344474;
  else
    v12 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v87, v12, 0);
  *(_QWORD *)a1 = &off_1E63CEB10;
  v13 = a5[2];
  *(_OWORD *)(a1 + 376) = *(_OWORD *)a5;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = v13;
  v72 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v14, v15, v16, v17, v18, v19, v20);
  v73 = (void *)objc_msgSend_resourceManager(v72, v21, v22, v23);
  v24 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[1]);
  v75 = *v24;
  v74 = v24[1];
  v93 = *(_QWORD *)(v24 + 2);
  v94 = *((_DWORD *)v24 + 3);
  v25 = *((_QWORD *)v24 + 2);
  v26 = *(_OWORD *)(v24 + 20);
  v87 = *(_OWORD *)(v24 + 12);
  v88 = v26;
  v89 = *(_OWORD *)(v24 + 28);
  v90 = *((_QWORD *)v24 + 9);
  v27 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v27 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v25)))) ^ ((0x9DDFEA08EB382D69 * (v27 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v25)))) >> 47));
  v29 = CFX::CrossFrameResourceManager::get(a4[4], v28);
  v30 = (uint64_t *)(a1 + 400);
  *(_QWORD *)(a1 + 400) = v29;
  if (!v29)
  {
    v31 = (uint64_t)a4[4];
    v32 = (_QWORD *)operator new();
    *v32 = &off_1E63CEAD0;
    v32[1] = 0;
    v32[2] = 0;
    CFX::CrossFrameResourceManager::set(v31, v28, (uint64_t)v32);
    *v30 = (uint64_t)v32;
    LOBYTE(v92) = 0;
    LOBYTE(v92) = VFXMTLTexturePixelFormatIsDepth(v25);
    v91 = v92 ^ 1;
    v33 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v33, v34, (uint64_t)&v91, 53, CFSTR("is_color"));
    objc_msgSend_setConstantValue_type_withName_(v33, v35, (uint64_t)&v92, 53, CFSTR("is_depth"));
    v36 = *v30;
    v38 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v73, v37, (uint64_t)CFSTR("vfx_back_buffer_copy"), (uint64_t)v33);
    v39 = *(void **)(v36 + 16);
    if (v39 != (void *)v38)
    {
      if (v39)

      *(_QWORD *)(v36 + 16) = v38;
    }
  }
  v40 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v41 = 0x9DDFEA08EB382D69
      * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v75)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v75)));
  v42 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v74)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v74)));
  v43 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47))) ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47))) ^ v25)));
  v44 = 0x9DDFEA08EB382D69 * (v43 ^ (v43 >> 47));
  v45 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v44 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(a1 + 392) ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                 * (*(_QWORD *)(a1 + 392) ^ v44)))) ^ ((0x9DDFEA08EB382D69 * (v44 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(a1 + 392) ^ v44)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)(a1 + 392) ^ v44)))) >> 47));
  v46 = CFX::CrossFrameResourceManager::get(a4[4], v45);
  *(_QWORD *)(a1 + 408) = v46;
  if (!v46)
  {
    v47 = (uint64_t)a4[4];
    v48 = (_OWORD *)operator new();
    *v48 = 0u;
    v48[1] = 0u;
    *(_QWORD *)v48 = &off_1E63CEAF0;
    CFX::CrossFrameResourceManager::set(v47, v45, (uint64_t)v48);
    *(_QWORD *)(a1 + 408) = v48;
    IsDepth = VFXMTLTexturePixelFormatIsDepth(v25);
    v50 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
    v83 = v87;
    v79[0] = v75;
    v79[1] = v74;
    v80 = v93;
    v81 = v94;
    v84 = v88;
    v85 = v89;
    v82 = v25;
    v86 = v90;
    RGTextureDescriptorFillMTLDescriptor(v79, v50);
    objc_msgSend_setUsage_(v50, v51, 3, v52);
    if (IsDepth)
      objc_msgSend_setPixelFormat_(v50, v53, 55, v55);
    v56 = (void *)objc_msgSend_device(v72, v53, v54, v55);
    v59 = (void *)objc_msgSend_newTextureWithDescriptor_(v56, v57, (uint64_t)v50, v58);
    *(_QWORD *)(*(_QWORD *)(a1 + 408) + 16) = v59;
    if (IsDepth)
      objc_msgSend_setLabel_(v59, v60, (uint64_t)CFSTR("DepthBackBuffer"), v61);
    else
      objc_msgSend_setLabel_(v59, v60, (uint64_t)CFSTR("ColorBackBuffer"), v61);
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v62 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a5[1]);
    v63 = v62[1];
    v77[0] = *v62;
    v77[1] = v63;
    v64 = v62[2];
    v65 = v62[3];
    v66 = v62[5];
    v77[4] = v62[4];
    v77[5] = v66;
    v77[2] = v64;
    v77[3] = v65;
    v67 = v62[6];
    v68 = v62[7];
    v69 = v62[9];
    v77[8] = v62[8];
    v77[9] = v69;
    v77[6] = v67;
    v77[7] = v68;
    v76[0] = MEMORY[0x1E0C809B0];
    v76[1] = 3221225472;
    v76[2] = sub_1B1823D70;
    v76[3] = &unk_1E63D6D58;
    v76[4] = a1;
    CFX::RG::ExternalResourceDesc::ExternalResourceDesc(v78, v77, v76, 0);
    v92 = "backBufferTarget";
    v91 = 2;
    v70 = (CFX::RG::Resource *)sub_1B1823F80((uint64_t *)&v92, (__int128 *)v78, &v91);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 408) + 24), v70);
    CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v78);
    v46 = *(_QWORD *)(a1 + 408);
  }
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(v46 + 24));
  return a1;
}

void sub_1B1823D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39)
{
  CFX::RG::Pass *v39;

  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a39);
  CFX::RG::Pass::~Pass(v39);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1823D70(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 408) + 16);
}

uint64_t sub_1B1823D84(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v3;
  void *v4;
  id Texture;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;

  if (*(_QWORD *)(*(_QWORD *)(result + 400) + 16))
  {
    v3 = result;
    v4 = *a3;
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(result + 416));
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 408) + 16);
    objc_msgSend_setTexture_atIndex_(v4, v7, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v4, v8, v6, 1);
    v15 = *(_QWORD *)(v3 + 400);
    v16 = *(_QWORD *)(v15 + 16);
    if (!v16)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v9, v10, v11, v12, v13, v14, (uint64_t)"_ptr != NULL");
      v16 = *(_QWORD *)(v15 + 16);
    }
    v17 = sub_1B18FD774(v16);
    return objc_msgSend_dispatch_onTexture2D_(v4, v18, v17, v6);
  }
  return result;
}

uint64_t *sub_1B1823E44(uint64_t *this, CFX::RG::Resource *a2)
{
  this[52] = (uint64_t)a2;
  return CFX::RG::Pass::readFrom(this, a2);
}

uint64_t sub_1B1823E4C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 408) + 24);
}

uint64_t sub_1B1823E58(CFX::RG::RenderGraphContext *a1, uint64_t *a2)
{
  uint64_t *v4;

  v4 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  return sub_1B1823E84(v4, (CFX::CrossFrameResourceManager **)a1, a2);
}

uint64_t sub_1B1823E84(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B182402C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B1823EDC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B1823F00(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CEAD0;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B1823F38(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CEAD0;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_OWORD *sub_1B1823F80(uint64_t *a1, __int128 *a2, unsigned __int8 *a3)
{
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  id v10[24];

  v6 = malloc_type_malloc(0xE0uLL, 0xD5346062uLL);
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  *v6 = v7;
  v6[1] = v7;
  v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  v6[6] = v7;
  v6[7] = v7;
  v6[8] = v7;
  v6[9] = v7;
  v6[10] = v7;
  v6[11] = v7;
  v6[12] = v7;
  v6[13] = v7;
  v8 = *a1;
  CFX::RG::ExternalResourceDesc::ExternalResourceDesc((uint64_t)v10, a2);
  CFX::RG::Resource::Resource(v6, v8, v10, *a3);
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(v10);
  return v6;
}

void sub_1B1824018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, id a9)
{
  CFX::RG::ExternalResourceDesc::~ExternalResourceDesc(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B182402C(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A8u, 8u);
  return sub_1B1823818(v8, *a3, a3[1], a4, a5);
}

__n128 sub_1B1824088(_OWORD *a1, _OWORD *a2, __n128 *a3)
{
  __n128 result;

  *a1 = *a2;
  result = *a3;
  a1[1] = *a3;
  return result;
}

float32x4_t sub_1B182409C(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t result;

  *a1 = *a2;
  v2 = vsubq_f32(a2[1], *a2);
  v3 = (int32x4_t)vmulq_f32(v2, v2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  result = vmulq_n_f32(v2, vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).f32[0]);
  a1[1] = result;
  return result;
}

uint64_t sub_1B18240EC(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1B18240F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E63D0678;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 368) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = sub_1B1813884(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 24) = v9;
  v17 = sub_1B187B1D0(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 32) = v17;
  *(_WORD *)(a1 + 40) = 15;
  sub_1B19D7DD8(v17, 0xFu);
  return a1;
}

uint64_t sub_1B1824178(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63D0678;
  sub_1B19D7E4C(*(int16x4_t **)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
  return a1;
}

void sub_1B18241B0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63D0678;
  sub_1B19D7E4C(*(int16x4_t **)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B18241F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, CFX::CrossFrameResourceManager *a5, uint64_t *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  const char *v72;
  const char *v73;
  const char *v74;
  const char *v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  int v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  CFX::RG::Resource *v95;
  CFX::RG::Resource *v96;
  uint64_t v97;
  const char *v98;
  const char *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  CFX::RG::Resource *v105;
  CFX::RG::Resource *v106;
  const char *v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  int v118;
  int v119;
  int v120;
  _OWORD v121[5];
  _OWORD v122[5];
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _OWORD v128[5];
  _OWORD v129[5];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  int v135;
  int v136;
  char v137;
  _BOOL4 v138;
  unsigned int v139;
  BOOL v140;
  char v141;
  uint64_t v142[2];

  v11 = *a6;
  *(_QWORD *)&v130 = "DDGIPass";
  *((_QWORD *)&v130 + 1) = v11;
  LOBYTE(v11) = atomic_load((unsigned __int8 *)&qword_1EEF65C78);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65C78))
  {
    byte_1EEF65C70 = 1;
    __cxa_guard_release(&qword_1EEF65C78);
  }
  if (byte_1EEF65C70)
    v12 = 0x31E4B56277654EABLL;
  else
    v12 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v130, v12, 0);
  *(_QWORD *)a1 = &off_1E63D06B8;
  memcpy((void *)(a1 + 384), a6, 0x150uLL);
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  v20 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v13, v14, v15, v16, v17, v18, v19);
  *(_QWORD *)(a1 + 736) = v20;
  *(_QWORD *)(a1 + 744) = objc_msgSend_resourceManager(v20, v21, v22, v23);
  v24 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v25 = CFX::CrossFrameResourceManager::get(a5, v24);
  v33 = a1 + 720;
  *(_QWORD *)(a1 + 720) = v25;
  if (!v25)
  {
    v34 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    *(_QWORD *)&v130 = *(_QWORD *)(a1 + 368);
    *(_QWORD *)v33 = sub_1B1824A9C((uint64_t)a5, v34, (uint64_t *)&v130);
  }
  v35 = sub_1B1813884(*(_QWORD *)(a1 + 368), v26, v27, v28, v29, v30, v31, v32);
  v43 = sub_1B187B1D0(v35, v36, v37, v38, v39, v40, v41, v42);
  if (sub_1B1814768(*(uint64_t **)(a1 + 368), v44, v45, v46, v47, v48, v49, v50))
  {
    v51 = sub_1B187B0F0(v35, 0);
    v140 = v51 != 0;
    v139 = 0;
    v52 = sub_1B19DA3D0(v43);
    v138 = 0;
    v139 = v52;
    v138 = sub_1B19DA3E0(v43) != 0;
    v53 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    v54 = 0x9DDFEA08EB382D69
        * (v53 ^ ((0x9DDFEA08EB382D69 * (v53 ^ v51)) >> 47) ^ (0x9DDFEA08EB382D69 * (v53 ^ v51)));
    v55 = 0x9DDFEA08EB382D69 * (v54 ^ (v54 >> 47));
    v56 = 0x9DDFEA08EB382D69 * (v55 ^ *((unsigned __int8 *)a6 + 304));
    v57 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v55 ^ (v56 >> 47) ^ v56)) ^ ((0x9DDFEA08EB382D69 * (v55 ^ (v56 >> 47) ^ v56)) >> 47));
    v58 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v57 ^ ((0x9DDFEA08EB382D69 * (v57 ^ v139)) >> 47) ^ (0x9DDFEA08EB382D69 * (v57 ^ v139)))) ^ ((0x9DDFEA08EB382D69 * (v57 ^ ((0x9DDFEA08EB382D69 * (v57 ^ v139)) >> 47) ^ (0x9DDFEA08EB382D69 * (v57 ^ v139)))) >> 47));
    v59 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v58 ^ ((0x9DDFEA08EB382D69 * (v58 ^ v138)) >> 47) ^ (0x9DDFEA08EB382D69 * (v58 ^ v138)))) ^ ((0x9DDFEA08EB382D69 * (v58 ^ ((0x9DDFEA08EB382D69 * (v58 ^ v138)) >> 47) ^ (0x9DDFEA08EB382D69 * (v58 ^ v138)))) >> 47));
    v60 = 0x9DDFEA08EB382D69 * (v59 ^ COERCE_UNSIGNED_INT64(*((float *)a6 + 53)));
    v61 = (0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) ^ ((0x9DDFEA08EB382D69 * (v59 ^ (v60 >> 47) ^ v60)) >> 47);
    v62 = *((_OWORD *)a6 + 14);
    v63 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * v61) ^ ((0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v61) ^ (int)v62)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v61) ^ (int)v62)));
    v64 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47))) ^ SDWORD1(v62))) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47))) ^ SDWORD1(v62))));
    v65 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47))) ^ SDWORD2(v62))) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47))) ^ SDWORD2(v62))));
    v66 = 0x9DDFEA08EB382D69 * (v65 ^ (v65 >> 47));
    v67 = 0x9DDFEA08EB382D69 * (v66 ^ *((unsigned int *)a6 + 52));
    v68 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v66 ^ (v67 >> 47) ^ v67)) ^ ((0x9DDFEA08EB382D69 * (v66 ^ (v67 >> 47) ^ v67)) >> 47));
    v69 = CFX::CrossFrameResourceManager::get(a5, v68);
    *(_QWORD *)(a1 + 728) = v69;
    if (!v69)
    {
      v70 = operator new();
      *(_QWORD *)(v70 + 96) = 0;
      *(_OWORD *)(v70 + 64) = 0u;
      *(_OWORD *)(v70 + 80) = 0u;
      *(_OWORD *)(v70 + 32) = 0u;
      *(_OWORD *)(v70 + 48) = 0u;
      *(_OWORD *)v70 = 0u;
      *(_OWORD *)(v70 + 16) = 0u;
      *(_QWORD *)v70 = &off_1E63D0698;
      *(_BYTE *)(v70 + 96) = 0;
      CFX::CrossFrameResourceManager::set((uint64_t)a5, v68, v70);
      *(_QWORD *)(a1 + 728) = v70;
      sub_1B19D9F28(v43, *(_QWORD *)(a1 + 368));
      v137 = 0;
      v135 = 4;
      v136 = 14;
      v71 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      objc_msgSend_setConstantValue_type_withName_(v71, v72, (uint64_t)(a6 + 26), 33, CFSTR("rays_per_probe"));
      objc_msgSend_setConstantValue_type_withName_(v71, v73, (uint64_t)a6 + 212, 3, CFSTR("temporal_factor"));
      objc_msgSend_setConstantValue_type_withName_(v71, v74, (uint64_t)(a6 + 28), 31, CFSTR("probe_grid"));
      objc_msgSend_setConstantValue_type_withName_(v71, v75, (uint64_t)&v140, 53, CFSTR("has_IBL"));
      objc_msgSend_setConstantValue_type_withName_(v71, v76, (uint64_t)&v139, 33, CFSTR("light_count"));
      objc_msgSend_setConstantValue_type_withName_(v71, v77, (uint64_t)&v138, 33, CFSTR("raytracing_use_function_constant"));
      objc_msgSend_setConstantValue_type_withName_(v71, v78, a1 + 688, 53, CFSTR("use_depth_test"));
      objc_msgSend_setConstantValue_type_withName_(v71, v79, (uint64_t)&v137, 53, CFSTR("is_depth_pass"));
      objc_msgSend_setConstantValue_type_withName_(v71, v80, (uint64_t)&v135, 29, CFSTR("probe_res"));
      v81 = sub_1B19DA304(v43);
      v86 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(*(void **)(a1 + 744), v82, (uint64_t)CFSTR("vfx_ddgi_raytrace"), (uint64_t)v71, v81);
      v87 = *(_QWORD *)(a1 + 728);
      v88 = *(void **)(v87 + 16);
      if (v88 != (void *)v86)
      {
        v89 = *(_QWORD *)(a1 + 728);
        if (v88)
        {

          v89 = *(_QWORD *)(a1 + 728);
        }
        *(_QWORD *)(v87 + 16) = v86;
        v87 = v89;
      }
      v90 = *((_DWORD *)a6 + 52);
      v91 = (void *)objc_msgSend_device(*(void **)(a1 + 736), v83, v84, v85, a6[28], a6[29]);
      v93 = objc_msgSend_newBufferWithLength_options_(v91, v92, (32 * v90 * v119 * v118 * v120), 32);
      v94 = *(void **)(v87 + 88);
      if (v94 != (void *)v93)
      {
        if (v94)

        *(_QWORD *)(v87 + 88) = v93;
      }
      v133 = 0u;
      v134 = 0u;
      v131 = 0u;
      v132 = 0u;
      v130 = 0u;
      RGTextureDescriptorMake2D(6 * *((_WORD *)a6 + 114) * *((_WORD *)a6 + 112), 6 * *((_WORD *)a6 + 116), 115, (uint64_t)&v130);
      *((_QWORD *)&v132 + 1) = 3;
      v129[0] = v130;
      v129[1] = v131;
      v129[3] = v133;
      v129[4] = v134;
      v129[2] = v132;
      *(_QWORD *)&v123 = "DDGI_irradiance_0";
      LOBYTE(v142[0]) = 2;
      sub_1B1825D28((uint64_t *)&v123, (uint64_t)v129, (char *)v142);
      sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 728) + 56), v95);
      v128[2] = v132;
      v128[3] = v133;
      v128[4] = v134;
      v128[0] = v130;
      v128[1] = v131;
      *(_QWORD *)&v123 = "DDGI_irradiance_1";
      LOBYTE(v142[0]) = 2;
      sub_1B1825D28((uint64_t *)&v123, (uint64_t)v128, (char *)v142);
      sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 728) + 64), v96);
      v97 = *(_QWORD *)(a1 + 728);
      v100 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 744), v98, (uint64_t)CFSTR("vfx_ddgi_update"), (uint64_t)v71);
      v101 = *(void **)(v97 + 24);
      if (v101 != (void *)v100)
      {
        if (v101)

        *(_QWORD *)(v97 + 24) = v100;
      }
      v102 = *(_QWORD *)(a1 + 728);
      v103 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 744), v99, (uint64_t)CFSTR("vfx_ddgi_border"), (uint64_t)v71);
      v104 = *(void **)(v102 + 32);
      if (v104 != (void *)v103)
      {
        if (v104)

        *(_QWORD *)(v102 + 32) = v103;
      }
      if (*((_BYTE *)a6 + 304))
      {
        v126 = 0u;
        v127 = 0u;
        v124 = 0u;
        v125 = 0u;
        v123 = 0u;
        RGTextureDescriptorMake2D(16 * *((_WORD *)a6 + 114) * *((_WORD *)a6 + 112), 16 * *((_WORD *)a6 + 116), 65, (uint64_t)&v123);
        *((_QWORD *)&v125 + 1) = 3;
        v122[0] = v123;
        v122[1] = v124;
        v122[3] = v126;
        v122[4] = v127;
        v122[2] = v125;
        v142[0] = (uint64_t)"DDGI_depth_0";
        v141 = 2;
        sub_1B1825D28(v142, (uint64_t)v122, &v141);
        sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 728) + 72), v105);
        v121[2] = v125;
        v121[3] = v126;
        v121[4] = v127;
        v121[0] = v123;
        v121[1] = v124;
        v142[0] = (uint64_t)"DDGI_depth_1";
        v141 = 2;
        sub_1B1825D28(v142, (uint64_t)v121, &v141);
        sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 728) + 80), v106);
        v137 = 1;
        objc_msgSend_setConstantValue_type_withName_(v71, v107, (uint64_t)&v137, 53, CFSTR("is_depth_pass"));
        objc_msgSend_setConstantValue_type_withName_(v71, v108, (uint64_t)&v136, 29, CFSTR("probe_res"));
        v109 = *(_QWORD *)(a1 + 728);
        v112 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 744), v110, (uint64_t)CFSTR("vfx_ddgi_update"), (uint64_t)v71);
        v113 = *(void **)(v109 + 40);
        if (v113 != (void *)v112)
        {
          if (v113)

          *(_QWORD *)(v109 + 40) = v112;
        }
        v114 = *(_QWORD *)(a1 + 728);
        v115 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 744), v111, (uint64_t)CFSTR("vfx_ddgi_border"), (uint64_t)v71);
        v116 = *(void **)(v114 + 48);
        if (v116 != (void *)v115)
        {
          if (v116)

          *(_QWORD *)(v114 + 48) = v115;
        }
      }
      *(_DWORD *)(*(_QWORD *)v33 + 368) = 0;

      sub_1B19DA290(v43);
      v69 = *(_QWORD *)(a1 + 728);
    }
    CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(v69 + 8 * (*(_BYTE *)(v69 + 96) == 0) + 56));
    CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 728) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 728) + 96) + 56));
    if (*((_BYTE *)a6 + 304))
    {
      CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 728) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 728) + 96) == 0) + 72));
      CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 728) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 728) + 96) + 72));
    }
  }
  return a1;
}

void sub_1B1824A40(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1824A9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = operator new();
  sub_1B18240F4(v6, *a3, v7, v8, v9, v10, v11, v12);
  CFX::CrossFrameResourceManager::set(a1, a2, v6);
  return v6;
}

void sub_1B1824B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10A1C40565862A5);
  _Unwind_Resume(a1);
}

void sub_1B1824B28(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  uint64_t v87;
  id Texture;
  const char *v89;
  id v90;
  id v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  void *v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  const char *v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  const char *v146;
  uint64_t v147;
  const char *v148;
  const char *v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  __int128 v174;
  const char *v175;
  const char *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  __int128 v201;
  const char *v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  id v207;
  __int128 v208;
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  unint64_t v216;
  int64x2_t v217;
  unint64_t v218;
  int64x2_t v219;
  __n128 v220;
  unsigned __int8 v221[176];
  _OWORD v222[4];
  simd_float4x4 v223;

  if (!*(_QWORD *)(*(_QWORD *)(a1 + 728) + 16))
    return;
  v10 = *a3;
  v11 = sub_1B1813884(*(_QWORD *)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = sub_1B1814768(*(uint64_t **)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
  if (!v19 || !sub_1B186CFA8((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26))
    return;
  v34 = sub_1B1814768(*(uint64_t **)(a1 + 368), v27, v28, v29, v30, v31, v32, v33);
  sub_1B17B33F4((uint64_t)v34, (uint64_t)v221, v35, v36, v37, v38, v39, v40);
  v41 = (__int128 *)sub_1B1815A5C(*(_QWORD *)(a1 + 368), 1);
  v205 = v41[1];
  v206 = *v41;
  v203 = v41[3];
  v204 = v41[2];
  v220 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v42, v43, v44, v45, v46, v47);
  v55 = sub_1B187B1D0(v11, v48, v49, v50, v51, v52, v53, v54);
  sub_1B19D9F28(v55, *(_QWORD *)(a1 + 368));
  v56 = *(_OWORD **)(a1 + 720);
  v56[3] = v206;
  v56[4] = v205;
  v56[5] = v204;
  v56[6] = v203;
  *(simd_float4x4 *)(*(_QWORD *)(a1 + 720) + 112) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 720) + 48));
  v63 = sub_1B18667B4(v221, (uint64_t)&v220, v57, v58, v59, v60, v61, v62);
  v64 = 0;
  v65 = *((_OWORD *)v63 + 1);
  v66 = *((_OWORD *)v63 + 2);
  v67 = *((_OWORD *)v63 + 3);
  v68 = *(_OWORD **)(a1 + 720);
  v68[11] = *(_OWORD *)v63;
  v68[12] = v65;
  v68[13] = v66;
  v68[14] = v67;
  v69 = *(float32x4_t **)(a1 + 720);
  v70 = v69[11];
  v71 = v69[12];
  v72 = v69[13];
  v73 = v69[14];
  v74 = v69[4];
  v75 = v69[5];
  v76 = v69[6];
  v222[0] = v69[3];
  v222[1] = v74;
  v222[2] = v75;
  v222[3] = v76;
  do
  {
    v223.columns[v64] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v70, COERCE_FLOAT(v222[v64])), v71, *(float32x2_t *)&v222[v64], 1), v72, (float32x4_t)v222[v64], 2), v73, (float32x4_t)v222[v64], 3);
    ++v64;
  }
  while (v64 != 4);
  *(simd_float4x4 *)(*(_QWORD *)(a1 + 720) + 240) = __invert_f4(v223);
  v77 = *(_QWORD *)(a1 + 720);
  *(_DWORD *)(v77 + 312) = *(_DWORD *)(v77 + 368);
  *(_DWORD *)(v77 + 304) = *(_DWORD *)(a1 + 692);
  *(_OWORD *)(v77 + 320) = *(_OWORD *)(a1 + 656);
  *(_OWORD *)(*(_QWORD *)(a1 + 720) + 336) = *(_OWORD *)(a1 + 672);
  v78 = sub_1B187B0F0(v11, 0);
  if (v78)
    v86 = sub_1B1841E14(v78, (uint64_t)v79, v80, v81, v82, v83, v84, v85);
  else
    v86 = 0.0;
  v87 = *(_QWORD *)(a1 + 720);
  *(float *)(v87 + 352) = v86;
  objc_msgSend_setBytes_length_atIndex_(v10, v79, v87 + 48, 320, 8);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 728)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 728) + 96)+ 56));
  v90 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 728)+ 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 728) + 96) == 0)+ 56));
  if (!*(_BYTE *)(a1 + 688))
  {
    v207 = 0;
    goto LABEL_13;
  }
  v207 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 728)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 728) + 96)+ 72));
  if (!*(_BYTE *)(a1 + 688))
  {
LABEL_13:
    v91 = 0;
    goto LABEL_14;
  }
  v91 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 728)+ 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 728) + 96) == 0)+ 72));
LABEL_14:
  objc_msgSend_setTexture_atIndex_(v10, v89, (uint64_t)v90, 0);
  objc_msgSend_setTexture_atIndex_(v10, v92, (uint64_t)v91, 1);
  v93 = sub_1B187B0F0(v11, 0);
  if (v93)
  {
    v96 = objc_msgSend_textureForMaterialProperty_(*(void **)(a1 + 736), v94, v93, v95);
    objc_msgSend_setTexture_atIndex_(v10, v97, v96, 6);
  }
  v98 = sub_1B19DA2DC(v55);
  objc_msgSend_useHeap_(v10, v99, v98, v100);
  v101 = sub_1B19DA2EC(v55);
  objc_msgSend_setBuffer_offset_atIndex_(v10, v102, v101, 0, 0);
  v103 = sub_1B19DA2E4(v55);
  objc_msgSend_setAccelerationStructure_atBufferIndex_(v10, v104, v103, 1);
  if (sub_1B19DA3D0(v55))
  {
    v105 = sub_1B19DA2F4(v55);
    objc_msgSend_setBuffer_offset_atIndex_(v10, v106, v105, 0, 3);
  }
  if (sub_1B19DA3E0(v55))
  {
    v113 = *(_QWORD *)(a1 + 728);
    v114 = *(_QWORD *)(v113 + 16);
    if (!v114)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v107, v108, v109, v110, v111, v112, (uint64_t)"_ptr != NULL");
      v114 = *(_QWORD *)(v113 + 16);
    }
    v115 = (void *)sub_1B18FD774(v114);
    v116 = sub_1B19DA30C(v55, v115);
    objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(v10, v117, (uint64_t)v116, 4);
  }
  else
  {
    v116 = 0;
  }
  v118 = sub_1B19DA2FC(v55);
  v122 = sub_1B19DA3F0(v55, v119, v120, v121);
  objc_msgSend_useResources_count_usage_(v10, v123, v118, v122, 1);
  v130 = *(_QWORD *)(a1 + 728);
  v131 = *(_QWORD *)(v130 + 88);
  if (!v131)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), 0, v125, v126, v127, v128, v129, (uint64_t)"_ptr != NULL");
    v131 = *(_QWORD *)(v130 + 88);
  }
  objc_msgSend_setBuffer_offset_atIndex_(v10, v124, v131, 0, 2);
  v138 = *(_DWORD *)(a1 + 608) * *(_DWORD *)(a1 + 612) * *(_DWORD *)(a1 + 616) * *(_DWORD *)(a1 + 592);
  v139 = *(_QWORD *)(a1 + 728);
  v140 = *(_QWORD *)(v139 + 16);
  if (!v140)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v132, v133, v134, v135, v136, v137, (uint64_t)"_ptr != NULL");
    v140 = *(_QWORD *)(v139 + 16);
  }
  v141 = (void *)sub_1B18FD774(v140);
  v145 = objc_msgSend_threadExecutionWidth(v141, v142, v143, v144);
  objc_msgSend_setComputePipelineState_(v10, v146, (uint64_t)v141, v147);
  v218 = (v145 + v138 - 1) / v145;
  v219 = vdupq_n_s64(1uLL);
  v216 = v145;
  v217 = v219;
  objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v10, v148, (uint64_t)&v218, (uint64_t)&v216);

  objc_msgSend_setTexture_atIndex_(v10, v149, (uint64_t)Texture, 10);
  objc_msgSend_setTexture_atIndex_(v10, v150, (uint64_t)v90, 11);
  v157 = *(_QWORD *)(a1 + 728);
  v158 = *(_QWORD *)(v157 + 24);
  if (!v158)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v151, v152, v153, v154, v155, v156, (uint64_t)"_ptr != NULL");
    v158 = *(_QWORD *)(v157 + 24);
  }
  v159 = sub_1B18FD774(v158);
  objc_msgSend_dispatch_onTexture2D_(v10, v160, v159, (uint64_t)Texture);
  v167 = *(_QWORD *)(a1 + 728);
  v168 = *(_QWORD *)(v167 + 32);
  if (!v168)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v161, v162, v163, v164, v165, v166, (uint64_t)"_ptr != NULL");
    v168 = *(_QWORD *)(v167 + 32);
  }
  v169 = sub_1B18FD774(v168);
  objc_msgSend_setComputePipelineState_(v10, v170, v169, v171);
  v172 = *(int *)(a1 + 616);
  v173 = *(_QWORD *)(a1 + 608);
  *(_QWORD *)&v174 = (int)v173;
  *((_QWORD *)&v174 + 1) = SHIDWORD(v173);
  v214 = v174;
  v215 = v172;
  v212 = xmmword_1B22467B0;
  v213 = 1;
  objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v10, v175, (uint64_t)&v214, (uint64_t)&v212);
  if (*(_BYTE *)(a1 + 688))
  {
    objc_msgSend_setTexture_atIndex_(v10, v176, (uint64_t)v207, 10);
    objc_msgSend_setTexture_atIndex_(v10, v177, (uint64_t)v91, 11);
    v184 = *(_QWORD *)(a1 + 728);
    v185 = *(_QWORD *)(v184 + 40);
    if (!v185)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v178, v179, v180, v181, v182, v183, (uint64_t)"_ptr != NULL");
      v185 = *(_QWORD *)(v184 + 40);
    }
    v186 = sub_1B18FD774(v185);
    objc_msgSend_dispatch_onTexture2D_(v10, v187, v186, (uint64_t)v207);
    v194 = *(_QWORD *)(a1 + 728);
    v195 = *(_QWORD *)(v194 + 48);
    if (!v195)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v188, v189, v190, v191, v192, v193, (uint64_t)"_ptr != NULL");
      v195 = *(_QWORD *)(v194 + 48);
    }
    v196 = sub_1B18FD774(v195);
    objc_msgSend_setComputePipelineState_(v10, v197, v196, v198);
    v199 = *(int *)(a1 + 616);
    v200 = *(_QWORD *)(a1 + 608);
    *(_QWORD *)&v201 = (int)v200;
    *((_QWORD *)&v201 + 1) = SHIDWORD(v200);
    v210 = v201;
    v211 = v199;
    v208 = xmmword_1B22467C0;
    v209 = 1;
    objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v10, v202, (uint64_t)&v210, (uint64_t)&v208);
  }
  ++*(_DWORD *)(*(_QWORD *)(a1 + 720) + 368);
  sub_1B19DA290(v55);
  *(_BYTE *)(*(_QWORD *)(a1 + 728) + 96) ^= 1u;
}

uint64_t sub_1B18251B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  unsigned __int8 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  CFX::RG::Resource *v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[10];
  uint64_t v28[2];

  v8 = *a5;
  v28[0] = (uint64_t)"DDGIDebugPass";
  v28[1] = v8;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65C88);
  v10 = &unk_1EEF65000;
  if ((v9 & 1) == 0)
  {
    v25 = a2;
    v26 = a3;
    v24 = __cxa_guard_acquire(&qword_1EEF65C88);
    v10 = (_QWORD *)&unk_1EEF65000;
    a2 = v25;
    a3 = v26;
    if (v24)
    {
      qword_1EEF65C80 = sub_1B1825BB0((unint64_t)"DDGI_DEBUG_PASS", 0xFu);
      __cxa_guard_release(&qword_1EEF65C88);
      v10 = (_QWORD *)&unk_1EEF65000;
      a2 = v25;
      a3 = v26;
    }
  }
  sub_1B18F7354(a1, a2, a3, v28, v10[400], 0);
  *(_QWORD *)a1 = &off_1E63CE910;
  memcpy((void *)(a1 + 384), a5, 0x150uLL);
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  v18 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v11, v12, v13, v14, v15, v16, v17);
  *(_QWORD *)(a1 + 784) = v18;
  *(_QWORD *)(a1 + 792) = objc_msgSend_resourceManager(v18, v19, v20, v21);
  CFX::RG::TextureDescriptorReference::withSampleCount(a5 + 1, 1, (uint64_t)v27);
  v22 = sub_1B17A34D0(a4, (uint64_t)"DDGI Debug output", v27);
  *(_QWORD *)(a1 + 728) = v22;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v22);
  return a1;
}

void sub_1B18252E0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B18252F4(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  double v6;
  double v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  const char *v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  float v41;
  int v42;

  v42 = 4;
  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = *(_OWORD *)(a1 + 608);
  v6 = (double)(unint64_t)COERCE_FLOAT(*(_OWORD *)(a1 + 656));
  v7 = (double)(unint64_t)COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 656)));
  v8 = 0x9DDFEA08EB382D69 * (v4 ^ *(unsigned __int8 *)(a1 + 712));
  v9 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v8 >> 47) ^ v8)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v8 >> 47) ^ v8)) >> 47));
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ *(unsigned __int8 *)(a1 + 688));
  v11 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) ^ ((0x9DDFEA08EB382D69 * (v9 ^ (v10 >> 47) ^ v10)) >> 47));
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ (int)v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ (int)v5)))) ^ ((0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ (int)v5)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ (int)v5)))) >> 47));
  v13 = 0x9DDFEA08EB382D69
      * (v12 ^ ((0x9DDFEA08EB382D69 * (v12 ^ SDWORD1(v5))) >> 47) ^ (0x9DDFEA08EB382D69 * (v12 ^ SDWORD1(v5))));
  v14 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47))) ^ SDWORD2(v5))) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v13 ^ (v13 >> 47))) ^ SDWORD2(v5))));
  v15 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ *(_QWORD *)&v6)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v14 ^ (v14 >> 47))) ^ *(_QWORD *)&v6)));
  v16 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47))) ^ *(_QWORD *)&v7)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v15 ^ (v15 >> 47))) ^ *(_QWORD *)&v7)));
  v17 = 0x9DDFEA08EB382D69 * (v16 ^ (v16 >> 47));
  v18 = 0x9DDFEA08EB382D69
      * (v17 ^ COERCE_UNSIGNED_INT64((double)(unint64_t)COERCE_FLOAT(*(_QWORD *)(a1 + 664))));
  v19 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v17 ^ (v18 >> 47) ^ v18)) ^ ((0x9DDFEA08EB382D69 * (v17 ^ (v18 >> 47) ^ v18)) >> 47));
  v20 = 0x9DDFEA08EB382D69
      * (v19 ^ ((0x9DDFEA08EB382D69
               * (v19 ^ COERCE_UNSIGNED_INT64((double)(unint64_t)COERCE_FLOAT(*(_OWORD *)(a1 + 672))))) >> 47) ^ (0x9DDFEA08EB382D69 * (v19 ^ COERCE_UNSIGNED_INT64((double)(unint64_t)COERCE_FLOAT(*(_OWORD *)(a1 + 672))))));
  v21 = 0x9DDFEA08EB382D69 * (v20 ^ (v20 >> 47));
  v22 = 0x9DDFEA08EB382D69
      * (v21 ^ COERCE_UNSIGNED_INT64((double)(unint64_t)COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 672)))));
  v23 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) ^ ((0x9DDFEA08EB382D69 * (v21 ^ (v22 >> 47) ^ v22)) >> 47));
  v24 = 0x9DDFEA08EB382D69
      * (v23 ^ COERCE_UNSIGNED_INT64((double)(unint64_t)COERCE_FLOAT(*(_QWORD *)(a1 + 680))));
  v25 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) ^ ((0x9DDFEA08EB382D69 * (v23 ^ (v24 >> 47) ^ v24)) >> 47));
  v26 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v25);
  *(_QWORD *)(a1 + 720) = v26;
  if (!v26)
  {
    v27 = fmaxf(fmaxf(*(float *)(a1 + 656), *(float *)(a1 + 660)), *(float *)(a1 + 664)) * 0.05;
    v41 = v27;
    v28 = *(_QWORD *)(a2 + 32);
    v29 = (_QWORD *)operator new();
    v29[1] = 0;
    v29[2] = 0;
    *v29 = &off_1E63CE8F0;
    CFX::CrossFrameResourceManager::set(v28, v25, (uint64_t)v29);
    *(_QWORD *)(a1 + 720) = v29;
    v30 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v30, v31, (uint64_t)&v42, 29, CFSTR("probe_res"));
    objc_msgSend_setConstantValue_type_withName_(v30, v32, a1 + 712, 53, CFSTR("show_probes"));
    objc_msgSend_setConstantValue_type_withName_(v30, v33, a1 + 688, 53, CFSTR("use_depth_test"));
    objc_msgSend_setConstantValue_type_withName_(v30, v34, a1 + 608, 31, CFSTR("probe_grid"));
    objc_msgSend_setConstantValue_type_withName_(v30, v35, (uint64_t)&v41, 3, CFSTR("probe_debug_scale"));
    v36 = *(_QWORD *)(a1 + 720);
    v38 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 792), v37, (uint64_t)CFSTR("vfx_debug_ddgi"), (uint64_t)v30);
    v39 = *(void **)(v36 + 16);
    if (v39 != (void *)v38)
    {
      v40 = v38;
      if (v39)

      *(_QWORD *)(v36 + 16) = v40;
    }
  }
}

uint64_t sub_1B1825640(uint64_t result, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  simd_float4 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  __int128 v37;
  id Texture;
  id v39;
  id v40;
  id v41;
  id v42;
  const char *v43;
  id v44;
  id v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  simd_float4 v62;
  simd_float4 v63;
  simd_float4 v64;
  simd_float4 v65;
  __n128 v66;
  unsigned __int8 v67[176];
  _OWORD v68[4];
  simd_float4x4 v69;
  _OWORD v70[4];
  simd_float4x4 v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  simd_float4x4 v76;
  int v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  simd_float4x4 v81;

  v80 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(*(_QWORD *)(result + 720) + 16))
  {
    v9 = result;
    v10 = *a3;
    v11 = sub_1B1814768(*(uint64_t **)(result + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    sub_1B17B33F4((uint64_t)v11, (uint64_t)v67, v12, v13, v14, v15, v16, v17);
    v18 = (simd_float4 *)sub_1B1815A5C(*(_QWORD *)(v9 + 368), 1);
    v64 = v18[1];
    v65 = *v18;
    v62 = v18[3];
    v63 = v18[2];
    v66 = sub_1B181537C(*(_QWORD *)(v9 + 368), 0, v19, v20, v21, v22, v23, v24);
    memset(&v76, 0, sizeof(v76));
    v81.columns[1] = v64;
    v81.columns[0] = v65;
    v70[0] = v65;
    v70[1] = v64;
    v81.columns[3] = v62;
    v81.columns[2] = v63;
    v70[2] = v63;
    v70[3] = v62;
    v71 = __invert_f4(v81);
    v31 = sub_1B18667B4(v67, (uint64_t)&v66, v25, v26, v27, v28, v29, v30);
    v32 = 0;
    v33 = *(float32x4_t *)v31;
    v34 = *((float32x4_t *)v31 + 1);
    v35 = *((float32x4_t *)v31 + 2);
    v36 = *((float32x4_t *)v31 + 3);
    v72 = *(float32x4_t *)v31;
    v73 = v34;
    v74 = v35;
    v75 = v36;
    v68[0] = v65;
    v68[1] = v64;
    v68[2] = v63;
    v68[3] = v62;
    do
    {
      v69.columns[v32] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v33, COERCE_FLOAT(v68[v32])), v34, *(float32x2_t *)&v68[v32], 1), v35, (float32x4_t)v68[v32], 2), v36, (float32x4_t)v68[v32], 3);
      ++v32;
    }
    while (v32 != 4);
    v76 = __invert_f4(v69);
    v77 = *(_DWORD *)(v9 + 692);
    v37 = *(_OWORD *)(v9 + 672);
    v78 = *(_OWORD *)(v9 + 656);
    v79 = v37;
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 728));
    v39 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 752));
    v40 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 760));
    v41 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 768));
    v42 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 776));
    v44 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 736));
    if (*(_BYTE *)(v9 + 688))
      v45 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 744));
    else
      v45 = 0;
    objc_msgSend_setBytes_length_atIndex_(v10, v43, (uint64_t)v70, 320, 8);
    objc_msgSend_setTexture_atIndex_(v10, v46, (uint64_t)v39, 0);
    objc_msgSend_setTexture_atIndex_(v10, v47, (uint64_t)v42, 1);
    objc_msgSend_setTexture_atIndex_(v10, v48, (uint64_t)v40, 2);
    objc_msgSend_setTexture_atIndex_(v10, v49, (uint64_t)v41, 4);
    objc_msgSend_setTexture_atIndex_(v10, v50, (uint64_t)v44, 5);
    if (*(_BYTE *)(v9 + 688))
      objc_msgSend_setTexture_atIndex_(v10, v51, (uint64_t)v45, 6);
    objc_msgSend_setTexture_atIndex_(v10, v51, (uint64_t)Texture, 7);
    v58 = *(_QWORD *)(v9 + 720);
    v59 = *(_QWORD *)(v58 + 16);
    if (!v59)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v52, v53, v54, v55, v56, v57, (uint64_t)"_ptr != NULL");
      v59 = *(_QWORD *)(v58 + 16);
    }
    v60 = sub_1B18FD774(v59);
    return objc_msgSend_dispatch_onTexture2D_(v10, v61, v60, (uint64_t)Texture);
  }
  return result;
}

uint64_t *sub_1B1825904(uint64_t a1, CFX::RG::Resource *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(_QWORD *)(a1 + 752) = a2;
  *(_QWORD *)(a1 + 776) = a3;
  *(_QWORD *)(a1 + 760) = a4;
  *(_QWORD *)(a1 + 768) = a5;
  *(_QWORD *)(a1 + 736) = a6;
  *(_QWORD *)(a1 + 744) = a7;
  CFX::RG::Pass::readFrom((uint64_t *)a1, a2);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 776));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 760));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 768));
  return CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 736));
}

uint64_t *sub_1B1825968(uint64_t *a1, CFX::CrossFrameResourceManager *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  CFX::RG::Pass *v32;
  uint64_t *v33;
  uint64_t v34;
  float32x4_t v36;
  float32x4_t v37;

  if (*(_BYTE *)(a3 + 312))
  {
    v12 = sub_1B1813884(*(_QWORD *)a3, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v20 = sub_1B187A934(v12, v13, v14, v15, v16, v17, v18, v19);
    if (sub_1B18694A8(v20, &v36, 0, v21, v22, v23, v24, v25))
    {
      v26.i32[3] = v37.i32[3];
      v27 = vsubq_f32(v36, v37);
      v28 = vsubq_f32(vaddq_f32(v36, v37), v27);
      *(float32x2_t *)v26.f32 = vcvt_f32_s32(*(int32x2_t *)(a3 + 224));
      v26.f32[2] = (float)*(int *)(a3 + 232);
      v29 = vdivq_f32(v28, v26);
      v30.i64[0] = 0x3F0000003F000000;
      v30.i64[1] = 0x3F0000003F000000;
      a9 = (__n128)vsubq_f32(v28, v29);
      *(__n128 *)(a3 + 240) = a9;
      *(float32x4_t *)(a3 + 256) = vmlaq_f32(v27, v30, v29);
    }
  }
  a9.n128_u64[0] = (unint64_t)vdiv_f32(*(float32x2_t *)(a3 + 240), vcvt_f32_s32(vadd_s32(*(int32x2_t *)(a3 + 224), (int32x2_t)-1)));
  a9.n128_f32[2] = *(float *)(a3 + 248) / (float)(*(_DWORD *)(a3 + 232) - 1);
  v31 = *(_OWORD *)(a3 + 256);
  *(__n128 *)(a3 + 272) = a9;
  *(_OWORD *)(a3 + 288) = v31;
  v32 = (CFX::RG::Pass *)sub_1B1825AB4(a1, (uint64_t)a1, a2, (uint64_t *)a3);
  *(_QWORD *)(a3 + 200) = *(_QWORD *)(*((_QWORD *)v32 + 91)
                                    + 8 * *(unsigned __int8 *)(*((_QWORD *)v32 + 91) + 96)
                                    + 56);
  if (*(_BYTE *)(a3 + 313))
  {
    v33 = (uint64_t *)sub_1B1825B0C(a1, a1, (uint64_t *)a3);
    v34 = *((_QWORD *)v32 + 91) + 8 * *(unsigned __int8 *)(*((_QWORD *)v32 + 91) + 96);
    sub_1B1825904((uint64_t)v33, *(CFX::RG::Resource **)(a3 + 168), *(_QWORD *)(a3 + 176), *(_QWORD *)(a3 + 184), *(_QWORD *)(a3 + 192), *(_QWORD *)(v34 + 56), *(_QWORD *)(v34 + 72));
    CFX::RG::Pass::dependsOn(v33, v32);
    *(_QWORD *)(a3 + 320) = v33[91];
    return v33;
  }
  return (uint64_t *)v32;
}

uint64_t sub_1B1825AB4(uint64_t *a1, uint64_t a2, CFX::CrossFrameResourceManager *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[0] = sub_1B1825E34(v9[0], v7, v9, a2, a3, a4);
  sub_1B179C734(a1 + 18, v9);
  return v9[0];
}

uint64_t sub_1B1825B0C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B1825E90(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B1825B64(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B1825B8C(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unint64_t sub_1B1825BB0(unint64_t result, unsigned int a2)
{
  unint64_t v2;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995
       * ((0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * *(_QWORD *)result) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)result) >> 47))) ^ (0xC6A4A7935BD1E995 * a2));
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_9;
      case 2u:
        goto LABEL_8;
      case 3u:
        goto LABEL_7;
      case 4u:
        goto LABEL_6;
      case 5u:
        goto LABEL_5;
      case 6u:
        goto LABEL_4;
      case 7u:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 14) << 48;
LABEL_4:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 13) << 40;
LABEL_5:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 12) << 32;
LABEL_6:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 11) << 24;
LABEL_7:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 10) << 16;
LABEL_8:
        v2 ^= (unint64_t)*(unsigned __int8 *)(result + 9) << 8;
LABEL_9:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *(unsigned __int8 *)(result + 8));
        break;
      default:
        return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
    }
    return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
  }
  return result;
}

void sub_1B1825C5C(_QWORD *a1)
{
  sub_1B1825C80(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B1825C80(_QWORD *a1)
{
  void *v2;
  uint64_t i;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;

  *a1 = &off_1E63D0698;
  v2 = (void *)a1[11];
  if (v2)

  for (i = 10; i != 8; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  do
    sub_1B181C064((CFX::RG::Resource **)&a1[i--], 0);
  while (i != 6);
  v4 = (void *)a1[6];
  if (v4)

  v5 = (void *)a1[5];
  if (v5)

  v6 = (void *)a1[4];
  if (v6)

  v7 = (void *)a1[3];
  if (v7)

  v8 = (void *)a1[2];
  if (v8)

  return a1;
}

double sub_1B1825D28(uint64_t *a1, uint64_t a2, char *a3)
{
  _OWORD *v6;
  __int128 v7;
  uint64_t v8;
  double result;
  _BYTE v10[160];

  v6 = malloc_type_malloc(0xE0uLL, 0xD5346062uLL);
  *(_QWORD *)&v7 = -1;
  *((_QWORD *)&v7 + 1) = -1;
  *v6 = v7;
  v6[1] = v7;
  v6[2] = v7;
  v6[3] = v7;
  v6[4] = v7;
  v6[5] = v7;
  v6[6] = v7;
  v6[7] = v7;
  v6[8] = v7;
  v6[9] = v7;
  v6[10] = v7;
  v6[11] = v7;
  v6[12] = v7;
  v6[13] = v7;
  v8 = *a1;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v10, a2);
  *(_QWORD *)&result = CFX::RG::Resource::Resource((uint64_t)v6, v8, (uint64_t)v10, *a3).n128_u64[0];
  return result;
}

_QWORD *sub_1B1825DB4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CE8F0;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B1825DEC(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CE8F0;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1825E34(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, CFX::CrossFrameResourceManager *a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v9 = sub_1B179C1C0(v12, 0x2F0u, 0x10u);
  return sub_1B18241F8(v9, *a3, a3[1], v10, a5, a6);
}

uint64_t sub_1B1825E90(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x320u, 0x10u);
  return sub_1B18251B0(v8, *a3, a3[1], a4, a5);
}

void sub_1B1825EEC(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int128 v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    if ((unint64_t)(v9 + 1) >> 60)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 3;
    if (v10 >> 3 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1B17F7824(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_OWORD *)v16 - 1);
        v16 -= 16;
        *((_OWORD *)v14 - 1) = v18;
        v14 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1B1825FC4(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[5];
  v4 = (uint64_t)(a1 + 5);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[3];
    v10 = ((uint64_t)v7 - v9) >> 4;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60)
      abort();
    v12 = v5 - v9;
    if (v12 >> 3 > v11)
      v11 = v12 >> 3;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
      v13 = 0xFFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
      v14 = (char *)sub_1B17F7824(v4, v13);
    else
      v14 = 0;
    v15 = &v14[16 * v10];
    v16 = &v14[16 * v13];
    *(_OWORD *)v15 = *a2;
    v8 = v15 + 16;
    v18 = (char *)a1[3];
    v17 = (char *)a1[4];
    if (v17 != v18)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v17 - 1);
        v15 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)a1[3];
    }
    a1[3] = v15;
    a1[4] = v8;
    a1[5] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[4] = v8;
}

void sub_1B18260AC(uint64_t a1, __int16 a2)
{
  uint64_t v3;
  unint64_t v4;
  __int16 v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int16 v17;

  v3 = a1 + 64;
  v4 = *(_QWORD *)(a1 + 64);
  v5 = *(_WORD *)(a1 + 72) + a2;
  v6 = *(char **)(a1 + 56);
  if ((unint64_t)v6 >= v4)
  {
    v8 = *(char **)(a1 + 48);
    v9 = v6 - v8;
    if (v6 - v8 <= -3)
      abort();
    v10 = v9 >> 1;
    v11 = v4 - (_QWORD)v8;
    if (v11 <= (v9 >> 1) + 1)
      v12 = v10 + 1;
    else
      v12 = v11;
    if (v11 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      v14 = (char *)sub_1B1827A64(v3, v13);
      v8 = *(char **)(a1 + 48);
      v6 = *(char **)(a1 + 56);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v10];
    v16 = &v14[2 * v13];
    *(_WORD *)v15 = v5;
    v7 = v15 + 2;
    while (v6 != v8)
    {
      v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    *(_QWORD *)(a1 + 48) = v15;
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *(_WORD *)v6 = v5;
    v7 = v6 + 2;
  }
  *(_QWORD *)(a1 + 56) = v7;
}

void sub_1B1826184(_QWORD *a1, unsigned int a2)
{
  sub_1B17F76F8((uint64_t)a1, ((uint64_t)(a1[1] - *a1) >> 4) + a2);
  sub_1B18261CC((uint64_t)(a1 + 3), ((uint64_t)(a1[4] - a1[3]) >> 4) + a2);
}

void sub_1B18261CC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_1B1827A94((void **)a1, a2 - v2);
  }
}

void sub_1B18261FC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    sub_1B1827B9C((char **)a1, a2 - v2);
  }
}

void *sub_1B182622C(uint64_t *a1, const char *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend_meshSourceWithVertices_count_(VFXMeshSource, a2, *a1, (a1[1] - *a1) >> 4);
  v5 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v4, a1[6], a1[7] - a1[6]);
  v8 = objc_msgSend_meshElementWithData_primitiveType_primitiveCount_bytesPerIndex_(VFXMeshElement, v6, v5, 2, (unint64_t)((a1[7] - a1[6]) >> 1) >> 1, 2);
  v9 = a1[3];
  v10 = a1[4];
  if (v9 == v10)
  {
    v32 = v3;
    v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v7, (uint64_t)&v32, 1);
    v31 = v8;
    v17 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v19, (uint64_t)&v31, 1);
  }
  else
  {
    v11 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v7, v9, v10 - v9);
    v13 = objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v12, v11, (uint64_t)CFSTR("kGeometrySourceSemanticColor"), (a1[4] - a1[3]) >> 4, 1, 4, 4, 0, 0);
    v34[0] = v3;
    v34[1] = v13;
    v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v14, (uint64_t)v34, 2);
    v33 = v8;
    v17 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v16, (uint64_t)&v33, 1);
  }
  v20 = objc_msgSend_meshWithSources_elements_(VFXMesh, v18, v15, v17);
  v23 = (void *)objc_msgSend_modelWithMesh_(VFXModel, v21, v20, v22);
  v27 = (void *)objc_msgSend_material(v23, v24, v25, v26);
  objc_msgSend_setShadingModel_(v27, v28, 2, v29);
  return v23;
}

void *sub_1B18263D4(uint64_t *a1, const char *a2)
{
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v3 = objc_msgSend_meshSourceWithVertices_count_(VFXMeshSource, a2, *a1, (a1[1] - *a1) >> 4);
  v5 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v4, a1[6], a1[7] - a1[6]);
  v8 = objc_msgSend_meshElementWithData_primitiveType_primitiveCount_bytesPerIndex_(VFXMeshElement, v6, v5, 0, ((a1[7] - a1[6]) >> 1) / 3uLL, 2);
  v9 = a1[3];
  v10 = a1[4];
  if (v9 == v10)
  {
    v32 = v3;
    v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v7, (uint64_t)&v32, 1);
    v31 = v8;
    v17 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v19, (uint64_t)&v31, 1);
  }
  else
  {
    v11 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v7, v9, v10 - v9);
    v13 = objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v12, v11, (uint64_t)CFSTR("kGeometrySourceSemanticColor"), (a1[4] - a1[3]) >> 4, 1, 4, 4, 0, 0);
    v34[0] = v3;
    v34[1] = v13;
    v15 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v14, (uint64_t)v34, 2);
    v33 = v8;
    v17 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v16, (uint64_t)&v33, 1);
  }
  v20 = objc_msgSend_meshWithSources_elements_(VFXMesh, v18, v15, v17);
  v23 = (void *)objc_msgSend_modelWithMesh_(VFXModel, v21, v20, v22);
  v27 = (void *)objc_msgSend_material(v23, v24, v25, v26);
  objc_msgSend_setShadingModel_(v27, v28, 2, v29);
  return v23;
}

void *sub_1B1826588()
{
  __int128 v0;
  const char *v1;
  void *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v11 = 0u;
  v10 = xmmword_1B22467E0;
  sub_1B18266F0((uint64_t)&v11, (float32x4_t *)&v10, &xmmword_1B2246260, (float32x4_t)xmmword_1B22467F0);
  v8 = xmmword_1B2246810;
  v9 = xmmword_1B2246800;
  *(_QWORD *)&v0 = 0xBF000000BF000000;
  *((_QWORD *)&v0 + 1) = 0xBF000000BF000000;
  v6 = v0;
  v7 = xmmword_1B2246820;
  BYTE3(v0) = 0;
  BYTE7(v0) = 0;
  BYTE11(v0) = 0;
  HIBYTE(v0) = 0;
  v5 = v0;
  sub_1B1826830((uint64_t)&v11, &v5, &v9, &v8, &v7, &v6, &xmmword_1B2246280);
  v5 = xmmword_1B2246830;
  sub_1B1826918((uint64_t)&v11, (float32x4_t *)&v5, &xmmword_1B2246280, MEMORY[0x1E0C83FF0], 0.5, 0.5);
  v4 = xmmword_1B2246840;
  sub_1B1826918((uint64_t)&v11, (float32x4_t *)&v4, &xmmword_1B2246280, MEMORY[0x1E0C83FF0], 0.5, 0.5);
  v2 = sub_1B182622C((uint64_t *)&v11, v1);
  if ((_QWORD)v14)
  {
    *((_QWORD *)&v14 + 1) = v14;
    operator delete((void *)v14);
  }
  if (*((_QWORD *)&v12 + 1))
  {
    *(_QWORD *)&v13 = *((_QWORD *)&v12 + 1);
    operator delete(*((void **)&v12 + 1));
  }
  if ((_QWORD)v11)
  {
    *((_QWORD *)&v11 + 1) = v11;
    operator delete((void *)v11);
  }
  return v2;
}

void sub_1B18266D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B17DA70C(v1 - 96);
  _Unwind_Resume(a1);
}

void sub_1B18266F0(uint64_t a1, float32x4_t *a2, _OWORD *a3, float32x4_t a4)
{
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  uint64_t i;
  uint64_t v14;
  __int128 v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t v24;

  v6 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  v7 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v7;
  a4.i32[3] = 0;
  v8 = vsubq_f32(*a2, a4);
  v9 = (int32x4_t)vaddq_f32(a4, a4);
  v10 = (float32x4_t)vdupq_laneq_s32(v9, 3);
  v10.i32[0] = v9.i32[0];
  v16 = v8;
  v17 = vaddq_f32(v10, v8);
  v18 = vaddq_f32((float32x4_t)vextq_s8((int8x16_t)v9, (int8x16_t)vuzp2q_s32(v9, v9), 0xCuLL), v8);
  v19 = vaddq_f32(v10, v18);
  v11 = (int8x16_t)vzip2q_s32(v9, v9);
  v12 = (float32x4_t)vextq_s8(v11, v11, 8uLL);
  v20 = vaddq_f32(v12, v8);
  v21 = vaddq_f32(v12, v17);
  v22 = vaddq_f32(v12, v18);
  v23 = vaddq_f32(v12, v19);
  do
  {
    v15 = *(__int128 *)((char *)&v16 + v6);
    sub_1B1825EEC((void **)a1, &v15);
    sub_1B1825FC4((_QWORD *)a1, a3);
    v6 += 16;
  }
  while (v6 != 128);
  for (i = 0; i != 24; ++i)
    sub_1B18260AC(a1, word_1B2246880[i]);
  v14 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v14;
}

void sub_1B1826830(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6, _OWORD *a7)
{
  uint64_t v13;
  int v14;
  uint64_t i;
  uint64_t v16;

  v13 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v13;
  sub_1B1825EEC((void **)a1, a2);
  sub_1B1825EEC((void **)a1, a3);
  sub_1B1825EEC((void **)a1, a4);
  sub_1B1825EEC((void **)a1, a5);
  sub_1B1825EEC((void **)a1, a6);
  v14 = 5;
  do
  {
    sub_1B1825FC4((_QWORD *)a1, a7);
    --v14;
  }
  while (v14);
  for (i = 0; i != 16; ++i)
    sub_1B18260AC(a1, word_1B22468B0[i]);
  v16 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v16;
}

uint64_t sub_1B1826918(uint64_t a1, float32x4_t *a2, _OWORD *a3, float32x4_t *a4, float a5, float a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  float v15;
  __float2 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  int v27;
  __int16 v28;
  uint64_t result;
  unint64_t v30;

  v11 = a1 + 48;
  v12 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v12;
  sub_1B1826184((_QWORD *)a1, 0x18u);
  v13 = 0;
  v14 = 0.0;
  do
  {
    v15 = v14 * 6.28318531 / 12.0;
    v16 = __sincosf_stret(v15);
    v17 = a4[1];
    v18 = a4[2];
    v19 = a4[3];
    v20 = vaddq_f32(vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a4, a6), v17, v16.__sinval * a5), v18, v16.__cosval * a5), (float32x4_t)0, v19), *a2);
    *(float32x4_t *)(*(_QWORD *)a1 + 16 * (v13 + *(_DWORD *)(a1 + 72))) = vaddq_f32(vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(*a4, -a6), v17, v16.__sinval * a5), v18, v16.__cosval * a5), (float32x4_t)0, v19), *a2);
    *(float32x4_t *)(*(_QWORD *)a1 + 16 * (v13 + *(_DWORD *)(a1 + 72) + 12)) = v20;
    *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * (v13 + *(_DWORD *)(a1 + 72))) = *a3;
    *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * (v13 + *(_DWORD *)(a1 + 72) + 12)) = *a3;
    v14 = v14 + 1.0;
    ++v13;
  }
  while (v13 != 12);
  sub_1B18261FC(v11, ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1) + 72);
  v21 = 0;
  v22 = 0;
  v23 = *(_DWORD *)(a1 + 72);
  v24 = *(_DWORD *)(a1 + 76);
  v25 = *(_QWORD *)(a1 + 48);
  do
  {
    v26 = v23 + v22;
    v27 = v24 + v21;
    *(_WORD *)(v25 + 2 * (v24 + v21)) = v23 + v22;
    if (v21 == 66)
      v28 = 0;
    else
      v28 = v22 + 1;
    *(_WORD *)(v25 + 2 * (v27 + 1)) = v23 + v28;
    ++v22;
    *(_WORD *)(v25 + 2 * (v27 + 2)) = v26 + 12;
    result = (v27 + 3);
    *(_WORD *)(v25 + 2 * result) = v23 + 12 + v28;
    *(_WORD *)(v25 + 2 * (v27 + 4)) = v26;
    *(_WORD *)(v25 + 2 * (v27 + 5)) = v26 + 12;
    v21 += 6;
  }
  while (v21 != 72);
  v30 = (unint64_t)(*(_QWORD *)(a1 + 56) - v25) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v30;
  return result;
}

void *sub_1B1826B1C()
{
  const char *v0;
  void *v1;
  void *v3[2];
  void *v4[2];
  __int128 v5;
  void *__p[2];
  __int128 v7;

  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v4 = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  sub_1B1826BB0((uint64_t)v3, &xmmword_1B2246280);
  v1 = sub_1B182622C((uint64_t *)v3, v0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4[1])
  {
    *(void **)&v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
  return v1;
}

void sub_1B1826B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17DA70C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B1826BB0(uint64_t a1, _OWORD *a2)
{
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v13 = 0uLL;
  v11 = xmmword_1B2246860;
  v12 = xmmword_1B2246850;
  __asm { FMOV            V1.4S, #-1.0 }
  v9 = xmmword_1B2246870;
  v10 = _Q1;
  sub_1B182742C(a1, &v13, &v12, a2, a2);
  sub_1B182742C(a1, &v13, &v11, a2, a2);
  sub_1B182742C(a1, &v13, &v9, a2, a2);
  sub_1B182742C(a1, &v13, &v10, a2, a2);
  sub_1B18274D4(a1, &v12, &v11, &v9, &v10, a2);
}

void *sub_1B1826C78()
{
  const char *v5;
  void *v6;
  __int128 v8;
  void *v9[2];
  void *v10[2];
  __int128 v11;
  void *__p[2];
  __int128 v13;

  *(_OWORD *)__p = 0u;
  v13 = 0u;
  *(_OWORD *)v10 = 0u;
  v11 = 0u;
  v8 = xmmword_1B2244DF0;
  *(_OWORD *)v9 = 0u;
  __asm { FMOV            V0.4S, #1.0 }
  sub_1B18266F0((uint64_t)v9, (float32x4_t *)&v8, &xmmword_1B2246280, _Q0);
  v6 = sub_1B182622C((uint64_t *)v9, v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v10[1])
  {
    *(void **)&v11 = v10[1];
    operator delete(v10[1]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  return v6;
}

void sub_1B1826D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B17DA70C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B1826D20()
{
  const char *v5;
  void *v6;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_OWORD *)__p = 0u;
  v12 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  *(_OWORD *)v8 = 0u;
  v15 = xmmword_1B2246860;
  v16 = xmmword_1B2246850;
  __asm { FMOV            V0.4S, #-1.0 }
  v14 = _Q0;
  v13 = xmmword_1B2246870;
  sub_1B18274D4((uint64_t)v8, &v16, &v15, &v13, &v14, &xmmword_1B2246280);
  v6 = sub_1B182622C((uint64_t *)v8, v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[1])
  {
    *(void **)&v10 = v9[1];
    operator delete(v9[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  return v6;
}

void sub_1B1826DD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17DA70C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_1B1826DEC()
{
  const char *v5;
  void *v6;
  void *v8[2];
  void *v9[2];
  __int128 v10;
  void *__p[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_OWORD *)__p = 0u;
  v12 = 0u;
  *(_OWORD *)v9 = 0u;
  v10 = 0u;
  *(_OWORD *)v8 = 0u;
  v15 = xmmword_1B2246860;
  v16 = xmmword_1B2246850;
  __asm { FMOV            V0.4S, #-1.0 }
  v14 = _Q0;
  v13 = xmmword_1B2246870;
  sub_1B18274D4((uint64_t)v8, &v16, &v15, &v13, &v14, &xmmword_1B2246250);
  v6 = sub_1B182622C((uint64_t *)v8, v5);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[1])
  {
    *(void **)&v10 = v9[1];
    operator delete(v9[1]);
  }
  if (v8[0])
  {
    v8[1] = v8[0];
    operator delete(v8[0]);
  }
  return v6;
}

void sub_1B1826EA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17DA70C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void *sub_1B1826EB8()
{
  const char *v0;
  void *v1;
  void *v3[2];
  void *v4[2];
  __int128 v5;
  void *__p[2];
  __int128 v7;
  __int128 v8;

  *(_OWORD *)__p = 0u;
  v7 = 0u;
  *(_OWORD *)v4 = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  v8 = 0u;
  sub_1B18270EC((uint64_t)v3, (float32x2_t *)&v8, 1u);
  v1 = sub_1B182622C((uint64_t *)v3, v0);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v4[1])
  {
    *(void **)&v5 = v4[1];
    operator delete(v4[1]);
  }
  if (v3[0])
  {
    v3[1] = v3[0];
    operator delete(v3[0]);
  }
  return v1;
}

void sub_1B1826F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17DA70C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B1826F64(uint64_t a1, unsigned int a2)
{
  __int128 v2;

  v2 = 0u;
  sub_1B18270EC(a1, (float32x2_t *)&v2, a2);
}

void sub_1B1826F98(uint64_t a1, float32x2_t *a2, _OWORD *a3, int32x2_t a4)
{
  uint64_t v7;
  float32x2_t v8;
  double v9;
  int v10;
  float v11;
  __float2 v12;
  __int128 v13;
  int i;
  __int16 v15;
  uint64_t v16;
  __int128 v17;

  v7 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v7;
  v8 = (float32x2_t)vdup_lane_s32(a4, 0);
  v9 = 0.0;
  v10 = 24;
  do
  {
    v11 = v9 * 6.28318531 / 23.0;
    v12 = __sincosf_stret(v11);
    *(float32x2_t *)&v13 = vmla_f32(*a2, (float32x2_t)__PAIR64__(LODWORD(v12.__sinval), LODWORD(v12.__cosval)), v8);
    *((float *)&v13 + 2) = a2[1].f32[0] + 0.0;
    v17 = v13;
    sub_1B1825EEC((void **)a1, &v17);
    sub_1B1825FC4((_QWORD *)a1, a3);
    v9 = v9 + 1.0;
    --v10;
  }
  while (v10);
  for (i = 1; i != 25; ++i)
  {
    sub_1B18260AC(a1, i - 1);
    if (i == 24)
      v15 = 0;
    else
      v15 = i;
    sub_1B18260AC(a1, v15);
  }
  v16 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v16;
}

void sub_1B18270C0(uint64_t a1, _OWORD *a2, int32x2_t a3)
{
  __int128 v3;

  v3 = 0u;
  sub_1B1826F98(a1, (float32x2_t *)&v3, a2, a3);
}

void sub_1B18270EC(uint64_t a1, float32x2_t *a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int16 *v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  _BYTE *v22;
  float v23;
  __float2 v24;
  uint64_t v25;
  float v26;
  __int128 v27;
  float v28;
  __float2 v29;
  __int128 v30;
  int v31;
  double v32;
  float v33;
  __float2 v34;
  uint64_t v35;
  __int128 v36;
  float v37;
  __float2 v38;
  __int128 v39;
  _OWORD *v40;
  int v41;
  int v42;
  unsigned int v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  _BYTE *v47;
  uint64_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  __int16 *v52;
  int32x4_t v53;
  int32x4_t v54;
  __int16 v55;
  uint64_t v56;
  _BYTE v57[4];
  int v58;
  _OWORD *v59;
  float v60;
  float v61;
  double v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  int16x8x2_t v66;

  v65 = *MEMORY[0x1E0C80C00];
  v6 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v6;
  v7 = 48 * a3;
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v57[-16 * v7];
  v10 = (32 * v9);
  *(double *)&v14 = MEMORY[0x1E0C80A78](v11, v12);
  v15 = (__int16 *)&v57[-2 * v10];
  if (v16)
  {
    v59 = v13;
    v17 = 0;
    v58 = 2 * a3;
    v62 = (double)(a3 + 1);
    v19 = a2->f32[0];
    v18 = a2->f32[1];
    v60 = *((float *)&v14 + 1);
    v61 = v18;
    v20 = a2[1].f32[0];
    v63 = v14;
    v21 = *((float *)&v14 + 2);
    v22 = &v57[-16 * v7];
    do
    {
      v23 = (double)++v17 * 3.14159265 / v62;
      v24 = __sincosf_stret(v23);
      v25 = 0;
      v26 = *(float *)&v63 * v24.__sinval;
      *(float *)&v27 = v61 + (float)(v60 * v24.__cosval);
      v64 = v27;
      v28 = 0.0;
      do
      {
        v29 = __sincosf_stret(v28);
        *(float *)&v30 = v19 + (float)(v26 * v29.__cosval);
        DWORD1(v30) = v64;
        *((float *)&v30 + 2) = v20 + (float)((float)(v21 * v24.__sinval) * v29.__sinval);
        *(_OWORD *)&v22[v25] = v30;
        v28 = v28 + 0.2618;
        v25 += 16;
      }
      while (v25 != 384);
      v22 += 384;
    }
    while (v17 != a3);
    v31 = 0;
    v32 = 0.0;
    do
    {
      v33 = v32 * 3.14159265 / (double)a3;
      v34 = __sincosf_stret(v33);
      v35 = 0;
      v36 = v63;
      *(float *)&v36 = *(float *)&v63 * v34.__cosval;
      v64 = v36;
      v37 = 0.0;
      do
      {
        v38 = __sincosf_stret(v37);
        *(float32x2_t *)&v39 = vmla_f32(*a2, (float32x2_t)__PAIR64__(LODWORD(v38.__sinval), LODWORD(v38.__cosval)), *(float32x2_t *)&v64);
        *((float *)&v39 + 2) = a2[1].f32[0] + (float)((float)(v21 * v34.__sinval) * v38.__cosval);
        *(_OWORD *)&v22[v35] = v39;
        v37 = v37 + 0.2618;
        v35 += 16;
      }
      while (v35 != 384);
      v22 += 384;
      v32 = v32 + 1.0;
      ++v31;
    }
    while (v31 != a3);
    v40 = v59;
    v41 = v58;
    if (v58)
    {
      v42 = 0;
      v43 = 0;
      v44.i64[0] = 0x100000001;
      v44.i64[1] = 0x100000001;
      v45.i64[0] = 0x1800000018;
      v45.i64[1] = 0x1800000018;
      v46.i64[0] = 0x800000008;
      v46.i64[1] = 0x800000008;
      v47 = &v57[-2 * v10];
      do
      {
        v48 = 0;
        v49 = vdupq_n_s32(v43);
        v50 = (int32x4_t)xmmword_1B2240BB0;
        v51 = (int32x4_t)xmmword_1B2240BA0;
        do
        {
          v52 = (__int16 *)&v47[v48];
          v66.val[0] = vuzp1q_s16((int16x8_t)vaddq_s32(v50, v49), (int16x8_t)vaddq_s32(v51, v49));
          v53 = vaddq_s32(v51, v44);
          v54 = vaddq_s32(v50, v44);
          v66.val[1] = vuzp1q_s16((int16x8_t)vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)v54, (int8x16_t)vceqq_s32(v54, v45)), v49), (int16x8_t)vaddq_s32((int32x4_t)vbicq_s8((int8x16_t)v53, (int8x16_t)vceqq_s32(v53, v45)), v49));
          vst2q_s16(v52, v66);
          v50 = vaddq_s32(v50, v46);
          v51 = vaddq_s32(v51, v46);
          v48 += 32;
        }
        while (v48 != 96);
        v43 += 24;
        ++v42;
        v47 += 96;
      }
      while (v42 != v41);
    }
    if ((_DWORD)v7)
    {
      do
      {
        sub_1B1825EEC((void **)a1, v8);
        sub_1B1825FC4((_QWORD *)a1, v40);
        ++v8;
        --v7;
      }
      while (v7);
    }
    if ((_DWORD)v10)
    {
      do
      {
        v55 = *v15++;
        sub_1B18260AC(a1, v55);
        --v10;
      }
      while (v10);
    }
  }
  v56 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v56;
}

void sub_1B182742C(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5)
{
  uint64_t v9;
  uint64_t v10;

  v9 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v9;
  sub_1B1825EEC((void **)a1, a2);
  sub_1B1825EEC((void **)a1, a3);
  sub_1B1825FC4((_QWORD *)a1, a4);
  sub_1B1825FC4((_QWORD *)a1, a5);
  sub_1B18260AC(a1, 0);
  sub_1B18260AC(a1, 1);
  v10 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v10;
}

void sub_1B18274D4(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, _OWORD *a5, _OWORD *a6)
{
  uint64_t v12;
  uint64_t v13;

  v12 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v12;
  sub_1B182742C(a1, a2, a3, a6, a6);
  sub_1B182742C(a1, a3, a4, a6, a6);
  sub_1B182742C(a1, a4, a5, a6, a6);
  sub_1B182742C(a1, a5, a2, a6, a6);
  v13 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v13;
}

void sub_1B18275A0(uint64_t a1, float32x4_t *a2, float32x2_t *a3, _OWORD *a4, float a5, float a6)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float v16;
  float v17;
  float32x4_t v18;
  float v19;
  __float2 v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  __int16 v26;
  unint64_t v27;
  float32x4_t v28;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v33;

  v10 = a1 + 48;
  v11 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v11;
  sub_1B1826184((_QWORD *)a1, 0x33u);
  v12 = 0;
  v13 = *a2;
  v28 = *a2;
  v13.i32[0] = (__int32)a3[1];
  v14.i32[0] = 1.0;
  v15.i64[0] = 0x8000000080000000;
  v15.i64[1] = 0x8000000080000000;
  v15.i32[0] = vbslq_s8(v15, v14, (int8x16_t)v13).i32[0];
  v16 = COERCE_FLOAT(HIDWORD(*(unint64_t *)a3)) / (float)(fabsf(v13.f32[0]) + 1.0);
  v17 = vmuls_lane_f32(v16, *a3, 1);
  v18.f32[0] = -(float)(COERCE_FLOAT(*(_OWORD *)a3->f32) * v16);
  v13.f32[0] = v13.f32[0] + (float)(*(float *)v15.i32 * v17);
  v13.f32[1] = *(float *)v15.i32 * v18.f32[0];
  v13.f32[2] = -COERCE_FLOAT(*(_OWORD *)a3->f32);
  v18.f32[1] = 1.0 - v17;
  v18.i32[2] = vmuls_lane_f32(-*(float *)v15.i32, *a3, 1);
  v31 = vmulq_n_f32(v13, a6);
  v33 = vmlaq_n_f32(*a2, *(float32x4_t *)a3->f32, a5);
  v30 = vmulq_n_f32(v18, a6);
  v19 = 0.0;
  do
  {
    v20 = __sincosf_stret(v19);
    *(float32x4_t *)(*(_QWORD *)a1 + 16 * (v12 + *(_DWORD *)(a1 + 72))) = vmlaq_n_f32(vmlaq_n_f32(v33, v31, v20.__cosval), v30, v20.__sinval);
    *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * (v12 + *(_DWORD *)(a1 + 72))) = *a4;
    ++v12;
    v19 = v19 + 0.12566;
  }
  while (v12 != 50);
  *(float32x4_t *)(*(_QWORD *)a1 + 16 * (*(_DWORD *)(a1 + 72) + 50)) = v28;
  *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * (*(_DWORD *)(a1 + 72) + 50)) = *a4;
  sub_1B18261FC(v10, ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1) + 108);
  v21 = *(_DWORD *)(a1 + 72);
  v22 = *(_DWORD *)(a1 + 76);
  v23 = *(_QWORD *)(a1 + 48);
  v24 = 1;
  v25 = v22;
  do
  {
    *(_WORD *)(v23 + 2 * v25) = v21 + v24 - 1;
    if (v24 == 50)
      v26 = 0;
    else
      v26 = v24;
    *(_WORD *)(v23 + 2 * (v25 + 1)) = v21 + v26;
    v25 += 2;
    ++v24;
  }
  while (v24 != 51);
  *(_WORD *)(v23 + 2 * (v22 + 100)) = v21 + 50;
  *(_WORD *)(v23 + 2 * (v22 + 101)) = v21;
  *(_WORD *)(v23 + 2 * (v22 + 102)) = v21 + 50;
  *(_WORD *)(v23 + 2 * (v22 + 103)) = v21 + 12;
  *(_WORD *)(v23 + 2 * (v22 + 104)) = v21 + 50;
  *(_WORD *)(v23 + 2 * (v22 + 105)) = v21 + 25;
  *(_WORD *)(v23 + 2 * (v22 + 106)) = v21 + 50;
  *(_WORD *)(v23 + 2 * (v22 + 107)) = v21 + 37;
  v27 = (unint64_t)(*(_QWORD *)(a1 + 56) - v23) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v27;
}

void sub_1B18277E0(uint64_t a1, _OWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  unsigned __int16 v6;
  int v7;
  int v8;
  unsigned int v15;
  float64x2_t v16;
  __double2 v17;
  int v18;
  __int16 v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  __int16 v25;
  float64x2_t v26;
  __int128 v27;
  int v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;

  v4 = (_QWORD *)(a1 + 48);
  v5 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v5;
  sub_1B1826184((_QWORD *)a1, 0x25u);
  sub_1B18261FC((uint64_t)v4, ((uint64_t)(*(_QWORD *)(a1 + 56) - *v4) >> 1) + 180);
  v6 = 0;
  v7 = 5;
  v8 = 2;
  __asm
  {
    FMOV            V10.2S, #5.0
    FMOV            V0.4S, #0.75
  }
  v38 = *((_QWORD *)&_Q0 + 1);
  v39 = (float64x2_t)vdupq_n_s64(0x3F847AE140000000uLL);
  do
  {
    v15 = v6;
    v17 = __sincos_stret(((double)v15 + (double)v15) * 3.14159265 / 12.0);
    v16.f64[0] = v17.__cosval;
    v18 = *(_DWORD *)(a1 + 72);
    v19 = v8 + v18;
    v20 = v8 + v18 - 2;
    v21 = v7 + *(_DWORD *)(a1 + 76);
    v22 = *(_QWORD *)(a1 + 48);
    *(_WORD *)(v22 + 2 * (v21 - 5)) = v8 + v18 - 2;
    if (v6 == 11)
      v23 = -36;
    else
      v23 = 0;
    v24 = v8 + v23 + v18;
    v25 = v24 + 2;
    *(_WORD *)(v22 + 2 * (v21 - 4)) = v24 + 2;
    *(_WORD *)(v22 + 2 * (v21 - 3)) = v19 - 1;
    *(_WORD *)(v22 + 2 * (v21 - 2)) = v20;
    *(_WORD *)(v22 + 2 * (v21 - 1)) = v24 + 1;
    *(_WORD *)(v22 + 2 * v21) = v24 + 2;
    *(_WORD *)(v22 + 2 * (v21 + 1)) = v19 - 1;
    v24 += 3;
    *(_WORD *)(v22 + 2 * (v21 + 2)) = v24;
    *(_WORD *)(v22 + 2 * (v21 + 3)) = v19;
    *(_WORD *)(v22 + 2 * (v21 + 4)) = v19 - 1;
    *(_WORD *)(v22 + 2 * (v21 + 5)) = v25;
    *(_WORD *)(v22 + 2 * (v21 + 6)) = v24;
    v16.f64[1] = v17.__sinval;
    v26 = vmulq_f64(v16, v39);
    *(float32x2_t *)&v26.f64[0] = vcvt_f32_f64(v26);
    *(float64x2_t *)(*(_QWORD *)a1 + 16 * v20) = v26;
    *(float32x2_t *)&v16.f64[0] = vmul_f32(*(float32x2_t *)&v26.f64[0], _D10);
    LODWORD(v16.f64[1]) = 0.75;
    *((_QWORD *)&v27 + 1) = v38;
    *(float64_t *)&v27 = v26.f64[0];
    *(_OWORD *)(*(_QWORD *)a1 + 16 * (v8 + *(_DWORD *)(a1 + 72) - 1)) = v27;
    *(float64x2_t *)(*(_QWORD *)a1 + 16 * (v8 + *(_DWORD *)(a1 + 72))) = v16;
    ++v6;
    v7 += 12;
    v8 += 3;
  }
  while (v15 < 0xB);
  v28 = 0;
  v30 = *(_DWORD *)(a1 + 72);
  v29 = *(_DWORD *)(a1 + 76);
  v31 = v30 + 36;
  v32 = *(_QWORD *)(a1 + 48);
  v33 = v30 + 32;
  do
  {
    v34 = v29 + v28;
    *(_WORD *)(v32 + 2 * (v29 + v28 + 144)) = v31;
    if (v28 == 33)
      v35 = 36;
    else
      v35 = 0;
    *(_WORD *)(v32 + 2 * (v34 + 145)) = v35 + v33;
    *(_WORD *)(v32 + 2 * (v34 + 146)) = v33 + 3;
    v33 -= 3;
    v28 += 3;
  }
  while (v28 != 36);
  v36 = 0;
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v31) = xmmword_1B2244D90;
  do
  {
    *(_OWORD *)(*(_QWORD *)(a1 + 24) + 16 * (v36 + *(_DWORD *)(a1 + 72))) = *a2;
    ++v36;
  }
  while (v36 != 37);
  v37 = (*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 1;
  *(_DWORD *)(a1 + 72) = (*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  *(_DWORD *)(a1 + 76) = v37;
}

void *sub_1B1827A64(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    sub_1B179C4A8();
  return operator new(2 * a2);
}

void sub_1B1827A94(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      abort();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1B17F7824(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void sub_1B1827B9C(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      abort();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1B1827A64(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1B182A87C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_cameraInertiaWillStartForController_, *(_QWORD *)(a1 + 32), v6);
}

uint64_t sub_1B182A8A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 32);
  CACurrentMediaTime();
  return MEMORY[0x1E0DE7D20](v1, sel__updateInertiaAtTime_, v2, v3);
}

uint64_t sub_1B182A8C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = objc_msgSend_delegate(*(void **)(a1 + 32), a2, a3, a4);
  return MEMORY[0x1E0DE7D20](v5, sel_cameraInertiaDidEndForController_, *(_QWORD *)(a1 + 32), v6);
}

__n128 sub_1B182AAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  __n128 result;
  _OWORD v12[16];
  __int128 v13;
  uint64_t v14;

  v7 = 0;
  v8 = *a4;
  memset(v12, 0, sizeof(v12));
  v13 = 0u;
  BYTE12(v13) = 1;
  BYTE14(v13) = 1;
  v14 = 0;
  do
  {
    v9 = &v12[v7];
    *v9 = 0;
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = 0x3FF0000000000000;
    v7 += 2;
  }
  while (v7 != 16);
  BYTE3(v14) = 1;
  BYTE5(v14) = 1;
  HIBYTE(v14) = 1;
  v10 = CFX::RG::Pass::Pass(a1, a2, a3, v8, v12, a5, a6);
  *(_QWORD *)v10 = &off_1E63CE4D0;
  result = *(__n128 *)a4;
  *(_QWORD *)(v10 + 376) = a4[2];
  *(__n128 *)(v10 + 360) = result;
  return result;
}

uint64_t sub_1B182ABB0(uint64_t a1, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;

  v3 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
  v4 = v3[270];
  v5 = v3[271];
  v6 = v3[272];
  v7 = v3[273];
  *(_BYTE *)(a2 + 32) = v3[269] != 0;
  v11 = objc_msgSend_frontFacingWinding(*(void **)(a2 + 16), v8, v9, v10);
  v14 = v11;
  if (*(_BYTE *)(a2 + 32))
    v14 = *((_QWORD *)&xmmword_1B2246910 + v11);
  objc_msgSend_setFrontFacingWinding_(*(void **)(a2 + 16), v12, v14, v13);
  if (*(_BYTE *)(a2 + 32))
    v4 = *((_QWORD *)&xmmword_1B2246910 + v4);
  objc_msgSend_setFrontFacingWinding_(*(void **)(a2 + 16), v15, v4, v16);
  objc_msgSend_setTriangleFillMode_(*(void **)(a2 + 16), v17, v5, v18);
  objc_msgSend_setDepthClipMode_(*(void **)(a2 + 16), v19, v6, v20);
  return objc_msgSend_setCullMode_(*(void **)(a2 + 16), v21, v7, v22);
}

uint64_t sub_1B182AC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;

  v8 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  return objc_msgSend_renderEncoder(v8, v9, v10, v11);
}

uint64_t *sub_1B182AC80(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t (*v10)(uint64_t *, uint64_t);
  uint64_t v11;
  void *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  const __CFString *v30;
  uint64_t v31;

  v9 = result;
  switch((_DWORD)a3)
  {
    case 2:
      v11 = a4 + 8;
      v12 = *(void **)(a4 + 16);
      v13 = (void *)sub_1B1813BC4(result[46], a2, a3, a4, a5, a6, a7, a8);
      v17 = objc_msgSend_renderEncoder(v13, v14, v15, v16);
      v21 = objc_msgSend_renderTargetArrayLength(v12, v18, v19, v20);
      if (*((_BYTE *)v9 + 376) != 1)
      {
        if (!*((_BYTE *)v9 + 376))
        {
          if (*(_BYTE *)(v17 + 4) != 1)
          {
            *(_BYTE *)(v17 + 4) = 1;
            objc_msgSend_setVertexAmplificationCount_viewMappings_(*(void **)(v17 + 16), v22, 1, 0);
          }
          goto LABEL_19;
        }
        v30 = CFSTR("Unreachable code: Not implemented");
        goto LABEL_18;
      }
      v29 = *((unsigned __int8 *)v9 + 377);
      if (v29 == 1)
      {
        *(_DWORD *)v17 = v21;
      }
      else
      {
        if (v29 != 2)
        {
          v30 = CFSTR("Unreachable code: Layered rendering is lacking a multiple output vertex streams generator");
LABEL_18:
          sub_1B17C4408(16, (uint64_t)v30, v23, v24, v25, v26, v27, v28, v31);
          goto LABEL_19;
        }
        sub_1B182ADCC(v17, (const char *)v21, 1, v24, v25, v26, v27, v28);
      }
LABEL_19:
      sub_1B182ABB0((uint64_t)v9, v17);
      return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*v9 + 56))(v9, a2, v11);
    case 1:
      v10 = *(uint64_t (**)(uint64_t *, uint64_t))(*result + 48);
      return (uint64_t *)v10(result, a2);
    case 0:
      v10 = *(uint64_t (**)(uint64_t *, uint64_t))(*result + 40);
      return (uint64_t *)v10(result, a2);
  }
  return result;
}

uint64_t sub_1B182ADCC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (*(unsigned __int8 *)(result + 4) != (_DWORD)a2)
  {
    v8 = a2;
    v9 = result;
    *(_BYTE *)(result + 4) = (_BYTE)a2;
    if (a2 <= 1)
      return objc_msgSend_setVertexAmplificationCount_viewMappings_(*(void **)(result + 16), a2, 1, 0);
    if ((_DWORD)a3 == 2)
    {
      v10 = xmmword_1B2244C80;
    }
    else
    {
      if ((_DWORD)a3 != 1)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Vertex amplification shouldn't be active"), a3, a4, a5, a6, a7, a8, v11);
        return objc_msgSend_setVertexAmplificationCount_viewMappings_(*(void **)(v9 + 16), a2, v8, (uint64_t)&v11);
      }
      v10 = xmmword_1B2246900;
    }
    v11 = v10;
    return objc_msgSend_setVertexAmplificationCount_viewMappings_(*(void **)(v9 + 16), a2, v8, (uint64_t)&v11);
  }
  return result;
}

void sub_1B182AEBC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B182B100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__updateContraintAndAddToWorld_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4);
}

uint64_t sub_1B182B1A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__updateContraintAndAddToWorld_, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a4);
}

uint64_t sub_1B182BB54(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CF270;

  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1B182BB8C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_1E63CF270;

  *(_QWORD *)(a1 + 16) = 0;
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B182BBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, const void *a6)
{
  _BYTE *v9;
  unsigned __int8 v10;
  uint64_t v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _OWORD v16[10];

  v9 = &unk_1EEF65000;
  v10 = atomic_load((unsigned __int8 *)&qword_1EEF65C98);
  if ((v10 & 1) == 0)
  {
    v14 = a2;
    v15 = a3;
    v13 = __cxa_guard_acquire(&qword_1EEF65C98);
    v9 = &unk_1EEF65000;
    a2 = v14;
    a3 = v15;
    if (v13)
    {
      byte_1EEF65C90 = 1;
      __cxa_guard_release(&qword_1EEF65C98);
      v9 = (_BYTE *)&unk_1EEF65000;
      a2 = v14;
      a3 = v15;
    }
  }
  if (v9[3216])
    v11 = 0x1A7B0322067A52BCLL;
  else
    v11 = 0;
  CFX::RG::Pass::Pass(a1, a2, a3, (uint64_t)"MetalFXUpscalePass", 1, v11, 0);
  *(_QWORD *)a1 = &off_1E63CF290;
  memcpy((void *)(a1 + 360), a6, 0x2A0uLL);
  *(_QWORD *)(a1 + 1032) = 0;
  *(_QWORD *)(a1 + 1048) = 0;
  *(_QWORD *)(a1 + 1040) = 0;
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(a1 + 368), MTLPixelFormatRGBA16Float, (uint64_t)v16);
  *(_QWORD *)(a1 + 1056) = sub_1B17A34D0(a4, (uint64_t)"MetalFXUpscalePassOutput", v16);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 1008));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 1016));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 1024));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 1056));
  return a1;
}

void sub_1B182BD10(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B182BD24(uint64_t a1, CFX::CrossFrameResourceManager **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 360), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 1040) = v10;
  *(_QWORD *)(a1 + 1048) = objc_msgSend_resourceManager(v10, v11, v12, v13);
  v14 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 1056));
  v65 = *v14;
  v66 = v14[1];
  v15 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 1008));
  v16 = *v15;
  v17 = v15[1];
  v18 = *((_QWORD *)v15 + 2);
  v19 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 1016));
  v20 = *v19;
  v21 = v19[1];
  v22 = *((_QWORD *)v19 + 2);
  v23 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 1024));
  v24 = *v23;
  v67 = v23[1];
  v25 = *((_QWORD *)v23 + 2);
  v26 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v27 = 0x9DDFEA08EB382D69
      * (v26 ^ ((0x9DDFEA08EB382D69 * (v26 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v26 ^ v16)));
  v28 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47))) ^ v17)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v27 ^ (v27 >> 47))) ^ v17)));
  v29 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47))) ^ v18)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v28 ^ (v28 >> 47))) ^ v18)));
  v30 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47))) ^ v20)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47))) ^ v20)));
  v31 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47))) ^ v21)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v30 ^ (v30 >> 47))) ^ v21)));
  v32 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47))) ^ v22)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v31 ^ (v31 >> 47))) ^ v22)));
  v33 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47))) ^ v24)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v32 ^ (v32 >> 47))) ^ v24)));
  v34 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v33 ^ (v33 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v33 ^ (v33 >> 47))) ^ v67)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v33 ^ (v33 >> 47))) ^ v67)));
  v35 = 0x9DDFEA08EB382D69 * (v34 ^ (v34 >> 47));
  v36 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v25)))) ^ ((0x9DDFEA08EB382D69 * (v35 ^ ((0x9DDFEA08EB382D69 * (v35 ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * (v35 ^ v25)))) >> 47));
  result = CFX::CrossFrameResourceManager::get(a2[4], v36);
  *(_QWORD *)(a1 + 1032) = result;
  if (!result)
  {
    v38 = (uint64_t)a2[4];
    v39 = operator new();
    *(_BYTE *)(v39 + 8) = 0;
    *(_QWORD *)v39 = &off_1E63CF270;
    *(_QWORD *)(v39 + 16) = 0;
    CFX::CrossFrameResourceManager::set(v38, v36, v39);
    *(_QWORD *)(a1 + 1032) = v39;
    v40 = (void *)objc_opt_new();
    objc_msgSend_setColorTextureFormat_(v40, v41, v18, v42);
    objc_msgSend_setDepthTextureFormat_(v40, v43, v22, v44);
    objc_msgSend_setMotionTextureFormat_(v40, v45, v25, v46);
    objc_msgSend_setOutputTextureFormat_(v40, v47, 115, v48);
    objc_msgSend_setInputWidth_(v40, v49, v16, v50);
    objc_msgSend_setInputHeight_(v40, v51, v17, v52);
    objc_msgSend_setOutputWidth_(v40, v53, v65, v54);
    objc_msgSend_setOutputHeight_(v40, v55, v66, v56);
    objc_msgSend_setAutoExposureEnabled_(v40, v57, 1, v58);
    v62 = objc_msgSend_device(*(void **)(a1 + 1040), v59, v60, v61);
    result = objc_msgSend_newTemporalScalerWithDevice_(v40, v63, v62, v64);
    *(_QWORD *)(*(_QWORD *)(a1 + 1032) + 16) = result;
  }
  return result;
}

uint64_t sub_1B182BFF4(uint64_t a1, CFX::GPUResourceManager **a2, uint64_t a3)
{
  id Texture;
  id v7;
  id v8;
  id v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  _WORD *v35;
  unsigned int v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t v49;

  Texture = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 1008));
  v7 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 1016));
  v8 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 1024));
  v9 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 1056));
  objc_msgSend_setColorTexture_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v10, (uint64_t)Texture, v11);
  objc_msgSend_setDepthTexture_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v12, (uint64_t)v7, v13);
  objc_msgSend_setMotionTexture_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v14, (uint64_t)v8, v15);
  objc_msgSend_setOutputTexture_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v16, (uint64_t)v9, v17);
  v49 = sub_1B1816010(*(float32x2_t **)(a1 + 360), 0, v18, v19);
  v23 = 0.5;
  v24 = 0.5
      - (float)((float)(unint64_t)objc_msgSend_inputWidth(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v20, v21, v22)* v49.f32[0])* 0.5;
  *(float *)&v24 = v24;
  objc_msgSend_setJitterOffsetX_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v25, v26, v27, v24);
  v31 = 0.5
      - vmuls_lane_f32((float)(unint64_t)objc_msgSend_inputHeight(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v28, v29, v30), v49, 1)* 0.5;
  *(float *)&v31 = v31;
  *(float *)&v31 = -*(float *)&v31;
  objc_msgSend_setJitterOffsetY_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v32, v33, v34, v31);
  v35 = (_WORD *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 1024));
  LOWORD(v36) = *v35;
  *(float *)&v37 = (float)v36;
  LOWORD(v23) = v35[1];
  objc_msgSend_setMotionVectorScaleX_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v38, v39, v40, v37);
  *(float *)&v41 = (float)LODWORD(v23);
  objc_msgSend_setMotionVectorScaleY_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v42, v43, v44, v41);
  objc_msgSend_setDepthReversed_(*(void **)(*(_QWORD *)(a1 + 1032) + 16), v45, 1, v46);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 1032) + 16), sel_encodeToCommandBuffer_, *(_QWORD *)(a3 + 16), v47);
}

uint64_t sub_1B182C194(uint64_t result, CFX::GPUResourceManager **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((_DWORD)a3 == 2)
    return sub_1B182BFF4(result, a2, a4 + 8);
  if ((_DWORD)a3 == 1)
    return sub_1B182BD24(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1B182C1B4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 1056);
}

uint64_t sub_1B182C1BC(uint64_t *a1, uint64_t a2, const void *a3)
{
  return sub_1B182C1CC(a1, a1, a2, a3);
}

uint64_t sub_1B182C1CC(uint64_t *a1, uint64_t *a2, uint64_t a3, const void *a4)
{
  uint64_t v7;
  uint64_t v9[2];

  v7 = a1[1];
  v9[0] = *a1;
  v9[1] = v7;
  v9[0] = sub_1B182C24C(v9[0], v7, v9, a2, a3, a4);
  sub_1B179C734(a1 + 18, v9);
  return v9[0];
}

void sub_1B182C228(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B182C24C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, const void *a6)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[2];

  v12[0] = a1;
  v12[1] = a2;
  v9 = sub_1B179C1C0(v12, 0x428u, 8u);
  return sub_1B182BBD4(v9, *a3, a3[1], a4, v10, a6);
}

void sub_1B182C3D8(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1B182C3E8(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1B182C3F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) + 16) = 1;
  return objc_msgSend_update(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2, a3, a4);
}

void sub_1B182C508(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 32))
    dispatch_resume(*(dispatch_object_t *)(v1 + 48));
}

intptr_t sub_1B182C520(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1B182C778(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_update(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B182C780(uint64_t a1)
{

}

void sub_1B182C800(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_BYTE *)(v1 + 32))
  {
    dispatch_suspend(*(dispatch_object_t *)(v1 + 48));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 1;
  }
}

void sub_1B182C8A0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  dispatch_time_t v4;

  v1 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v1 + 32))
  {
    v3 = *(NSObject **)(v1 + 48);
    v4 = dispatch_time(0, 100000000);
    dispatch_source_set_timer(v3, v4, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_resume(*(dispatch_object_t *)(*(_QWORD *)(a1 + 32) + 48));
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  }
}

__n128 sub_1B182C904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *a5)
{
  unsigned __int8 v7;
  _BYTE *v8;
  uint64_t v9;
  __n128 result;
  int v11;
  uint64_t v12;
  uint64_t v13;

  v7 = atomic_load((unsigned __int8 *)&qword_1EEF65CA8);
  v8 = &unk_1EEF65000;
  if ((v7 & 1) == 0)
  {
    v12 = a2;
    v13 = a3;
    v11 = __cxa_guard_acquire(&qword_1EEF65CA8);
    v8 = &unk_1EEF65000;
    a2 = v12;
    a3 = v13;
    if (v11)
    {
      byte_1EEF65CA0 = 1;
      __cxa_guard_release(&qword_1EEF65CA8);
      v8 = (_BYTE *)&unk_1EEF65000;
      a2 = v12;
      a3 = v13;
    }
  }
  if (v8[3232])
    v9 = 0x6E138DDE28F25A91;
  else
    v9 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v9, 0);
  *(_QWORD *)a1 = &off_1E63CF438;
  result = a5[1];
  *(__n128 *)(a1 + 376) = result;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  return result;
}

void sub_1B182C9C8(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;

  prof_beginFlame((uint64_t)"DebugCopyStereoPass", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/DebugCopyStereoPass.mm", 22);
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v4, v5, v6, v7, v8, v9, v10);
  v15 = (void *)objc_msgSend_resourceManager(v11, v12, v13, v14);
  v16 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v17 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 408));
  v18 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v16 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(v17 + 16) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                                 * (*(_QWORD *)(v17 + 16) ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v16 ^ ((0x9DDFEA08EB382D69 * (*(_QWORD *)(v17 + 16) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (*(_QWORD *)(v17 + 16) ^ v16)))) >> 47));
  v19 = 0x9DDFEA08EB382D69 * (v18 ^ *(unsigned __int8 *)(v17 + 9));
  v20 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) ^ ((0x9DDFEA08EB382D69 * (v18 ^ (v19 >> 47) ^ v19)) >> 47));
  v21 = CFX::CrossFrameResourceManager::get(a2[4], v20);
  *(_QWORD *)(a1 + 392) = v21;
  if (!v21)
  {
    v22 = sub_1B182CAF0(a2[4], v20);
    *(_QWORD *)(a1 + 392) = v22;
    v25 = objc_msgSend_newComputePipelineStateWithFunctionName_(v15, v23, (uint64_t)CFSTR("debug_copy_stereo"), v24);
    v26 = (void *)v22[2];
    if (v26 != (void *)v25)
    {
      if (v26)

      v22[2] = v25;
    }
  }
  prof_endFlame();
}

void sub_1B182CAD4(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

_QWORD *sub_1B182CAF0(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF418;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B182CB64(uint64_t a1, uint64_t a2, void **a3)
{
  void *v6;
  id Texture;
  id v8;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;

  prof_beginFlame((uint64_t)"DebugCopyStereoPass", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/DebugCopyStereoPass.mm", 46);
  v6 = *a3;
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
  v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 408));
  objc_msgSend_setTexture_atIndex_(v6, v9, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v6, v10, (uint64_t)v8, 1);
  v17 = *(_QWORD *)(a1 + 392);
  v18 = *(_QWORD *)(v17 + 16);
  if (!v18)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v11, v12, v13, v14, v15, v16, (uint64_t)"_ptr != NULL");
    v18 = *(_QWORD *)(v17 + 16);
  }
  v19 = sub_1B18FD774(v18);
  objc_msgSend_dispatch_onTexture2D_(v6, v20, v19, (uint64_t)v8);
  prof_endFlame();
}

void sub_1B182CC34(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t *sub_1B182CC48(uint64_t *a1, unint64_t a2, unint64_t a3, __n128 *a4)
{
  uint64_t *v5;
  CFX::RG::Resource *v6;
  CFX::RG::Resource *v7;
  __n128 v9[2];

  v9[0].n128_u64[0] = a3;
  v9[0].n128_u64[1] = a2;
  v9[1] = *a4;
  v5 = (uint64_t *)sub_1B182CCA8(a1, (uint64_t)a1, v9);
  v6 = (CFX::RG::Resource *)a4->n128_u64[0];
  v5[50] = a4->n128_u64[0];
  CFX::RG::Pass::readFrom(v5, v6);
  v7 = (CFX::RG::Resource *)a4->n128_u64[1];
  v5[51] = (uint64_t)v7;
  CFX::RG::Pass::writeTo(v5, v7);
  return v5;
}

uint64_t sub_1B182CCA8(uint64_t *a1, uint64_t a2, __n128 *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[2];

  v5 = a1[1];
  v8[0] = *a1;
  v8[1] = v5;
  sub_1B182CDA4(v8[0], v5, v8, a2, a3);
  v8[0] = v6;
  sub_1B179C734(a1 + 18, v8);
  return v8[0];
}

void sub_1B182CD00(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B182CD24(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF418;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B182CD5C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF418;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

double sub_1B182CDA4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, __n128 *a5)
{
  uint64_t v7;
  uint64_t v8;
  double result;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v7 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  *(_QWORD *)&result = sub_1B182C904(v7, *a3, a3[1], v8, a5).n128_u64[0];
  return result;
}

__n128 sub_1B182CDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v5;

  *(_QWORD *)a1 = a2;
  result = *(__n128 *)a3;
  v5 = *(_QWORD *)(a3 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a3 + 16);
  *(__n128 *)(a1 + 8) = result;
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a4;
  return result;
}

uint64_t sub_1B182CE10(uint64_t a1)
{
  return sub_1B181DE6C(*(_QWORD *)(a1 + 56));
}

void sub_1B182CE18(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int32x4_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t i;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned __int8 v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  __int16 v101;
  unsigned int *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  uint64_t v111;
  unsigned int v112;
  int v113;
  _OWORD v114[6];
  uint64_t v115;
  _QWORD v116[2];

  v116[1] = *MEMORY[0x1E0C80C00];
  v8 = sub_1B1815BE8(*(_QWORD *)a1, a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"computeProgramHashCodes", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/SceneRenderer.mm", 80, v8 | 0x300000000);
  v16 = sub_1B1813884(*(_QWORD *)a1, v9, v10, v11, v12, v13, v14, v15);
  v24 = sub_1B187B140(v16, v17, v18, v19, v20, v21, v22, v23);
  v32 = sub_1B1820C0C(v24, v25, v26, v27, v28, v29, v30, v31);
  v40 = (int32x4_t *)sub_1B187B188(v16, v33, v34, v35, v36, v37, v38, v39);
  v48 = sub_1B18143C8(*(_QWORD *)a1, v41, v42, v43, v44, v45, v46, v47);
  v56 = sub_1B19CFAB4(v32, v49, v50, v51, v52, v53, v54, v55);
  sub_1B17C7AE8(v48, v56);
  sub_1B182D118(a1);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v112 = sub_1B1795ABC(v40, *(_QWORD *)a1, v57, v58, v59, v60, v61, v62);
  else
    v112 = 0;
  for (i = 0; ; ++i)
  {
    v64 = (_BYTE *)sub_1B181E7E0(*(_QWORD *)(a1 + 56));
    if (i >= sub_1B19D30F4(v64, v65, v66, v67, v68, v69, v70, v71))
      break;
    v72 = *(_QWORD *)(a1 + 56);
    if (v112)
    {
      v73 = sub_1B181E7E0(v72);
      sub_1B1795C98((uint64_t)v40, v73 + (i << 6) + 8208, *(_QWORD *)a1, v74, v75, v76, v77, v78);
      v115 = 0;
      memset(v114, 0, sizeof(v114));
      sub_1B1795EE4((uint64_t)v40, *(uint64_t **)a1, (uint64_t)v114);
      v113 = 0;
      if (sub_1B1795EC0((uint64_t)v40, v116, &v113))
      {
        sub_1B17962D8((uint64_t)v40, (uint64_t)v116, v79, v80, v81, v82, v83, v84);
        v90 = sub_1B179612C((uint64_t)v40, (uint64_t)v116, (_OWORD *)((char *)v114 + 4), v85, v86, v87, v88, v89);
        LOWORD(v114[0]) = v114[0] & 0xC03F | (v90 << 6);
      }
      v91 = *(unsigned int **)(sub_1B181E7E0(*(_QWORD *)(a1 + 56)) + 16 * i + 12816);
      v98 = *(unsigned int *)(sub_1B181E7E0(*(_QWORD *)(a1 + 56)) + 16 * i + 12824);
      if ((_DWORD)v98)
      {
        do
        {
          v99 = *v91++;
          v4 = v4 & 0xFFFFFFFF00000000 | v99;
          v100 = sub_1B19CFAFC(v32, v4, v92, v93, v94, v95, v96, v97);
          v101 = *(_WORD *)(v100 + 80);
          if ((v101 & 0x40) != 0)
            *(_WORD *)(v100 + 80) = (16 * LOWORD(v114[0])) & 0x380 | v101 & 0xFC7F;
          sub_1B182D1F8(a1, (uint64_t)a2, v100, v48, (unsigned __int16 *)v114);
          --v98;
        }
        while (v98);
      }
      sub_1B1796384((uint64_t)v40);
    }
    else
    {
      v102 = *(unsigned int **)(sub_1B181E7E0(v72) + 16 * i + 12816);
      v109 = *(unsigned int *)(sub_1B181E7E0(*(_QWORD *)(a1 + 56)) + 16 * i + 12824);
      if ((_DWORD)v109)
      {
        do
        {
          v110 = *v102++;
          v5 = v5 & 0xFFFFFFFF00000000 | v110;
          v111 = sub_1B19CFAFC(v32, v5, v103, v104, v105, v106, v107, v108);
          sub_1B182D1F8(a1, (uint64_t)a2, v111, v48, 0);
          --v109;
        }
        while (v109);
      }
    }
  }
  prof_endFlame();
}

void sub_1B182D0C8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B182D118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *(unsigned __int16 *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v3 + 112))
  {
    v4 = (unint64_t)*(unsigned __int8 *)(sub_1B181E7E0(v3) + 12560) << 16;
    v3 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v4 = 0x10000;
  }
  result = sub_1B181E7E0(v3);
  v6 = 0xC6A4A7935BD1E995
     * (((v4 | v2) & 0xFFFFFFFF87FFFFFFLL | ((((unint64_t)((8 * (*(_BYTE *)(result + 12563) & 3)) & 0x9F | (32 * (*(_BYTE *)(a1 + 18) & 3u))) >> 3) & 0xF) << 27)) ^ 0x1A929E4D6F47A654);
  v7 = 0xC6A4A7935BD1E995 * (v6 ^ (v6 >> 47));
  v8 = 0x9DDFEA08EB382D69 * (*(_QWORD *)(a1 + 40) ^ (v7 >> 47) ^ v7);
  v9 = 0x9DDFEA08EB382D69 * (v7 ^ ((v8 ^ v7) >> 47) ^ v8);
  *(_QWORD *)(a1 + 48) = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  return result;
}

void sub_1B182D1F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char v30;
  char v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 *v38;
  const void *v39;
  uint64_t v40;
  _QWORD *v41;

  v10 = sub_1B1815BE8(*(_QWORD *)a1, (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"computeProgramHashCodeForRendererElement", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/SceneRenderer.mm", 175, v10 | 0x300000000);
  if (!sub_1B17C2B78(a3) && (*(_QWORD *)(a3 + 16) || *(_QWORD *)(a3 + 24)))
  {
    v41 = *(_QWORD **)(a3 + 8);
    v11 = sub_1B17C7D94(a4, (char *)a3, 0, *(_QWORD *)(a1 + 48));
    if (!v11 || !sub_1B195713C((uint64_t)v41, v11, a5, v12, v13, v14, v15, v16))
    {
      v40 = sub_1B17C2EA0(a3);
      v39 = sub_1B17C2EC0(a3);
      v38 = (__n128 *)sub_1B17C2E5C(a3);
      v23 = sub_1B17C2E80(a3);
      v24 = *(_QWORD *)(a3 + 8);
      if (v24)
      {
        if ((*(_BYTE *)(v24 + 221) & 0x10) != 0)
        {
          v25 = *(_QWORD *)(a3 + 40);
          if (v25)
            sub_1B18D7048(v25, v24, v17, v18, v19, v20, v21, v22);
        }
      }
      v37 = *(unsigned __int16 *)(a1 + 16);
      v26 = *(_QWORD *)(a1 + 56);
      if (*(_BYTE *)(v26 + 112))
      {
        v27 = (unint64_t)*(unsigned __int8 *)(sub_1B181E7E0(v26) + 12560) << 16;
        v26 = *(_QWORD *)(a1 + 56);
      }
      else
      {
        v27 = 0x10000;
      }
      v28 = *(unsigned __int16 *)(a3 + 80);
      v30 = *(_BYTE *)(sub_1B181E7E0(v26) + 12563);
      v31 = *(_BYTE *)(a1 + 18);
      if (*(_QWORD *)(a1 + 8))
      {
        a5 = 0;
        v23 = *(_QWORD *)(a1 + 8);
      }
      else if (sub_1B182D404(a1, a3))
      {
        v23 = sub_1B17933B0(*(CFX::CrossFrameResourceManager **)(a2 + 32));
        a5 = 0;
      }
      v32 = (const void *)sub_1B1957258(v41, v38, v40, (uint64_t)v39, a5, v23, v27 | v37 | ((unint64_t)((v28 >> 11) & 7 | (8 * (v30 & 3)) & 0x9F | (32 * (v31 & 3))) << 24), v29);
      sub_1B17C7F58(a4, (unsigned int *)a3, v32, *(_QWORD *)(a1 + 48), v33, v34, v35, v36);
      if (v32)
        CFRelease(v32);
    }
  }
  prof_endFlame();
}

void sub_1B182D3D8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B182D404(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = sub_1B17C2E80(a2);
  if ((*(_BYTE *)(a1 + 24) & 8) == 0)
    return 0;
  v5 = v4;
  result = sub_1B17C2E50(a2);
  if (!(_DWORD)result)
    return result;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 112) || sub_1B1878320(v5, v7, v8, v9, v10, v11, v12, v13) >= 0.0)
    return 0;
  v14 = sub_1B17C2E5C(a2);
  v21 = v14;
  if (!v5)
  {
    if (!v14)
      return 1;
    v30 = sub_1B193F9D0(v14, 0, v15, v16, v17, v18, v19, v20);
    return v30 ^ 1;
  }
  v29 = sub_1B193F9D0(v5, 0, v15, v16, v17, v18, v19, v20);
  result = 0;
  if ((v29 & 1) != 0)
    return result;
  if (v21)
  {
    v30 = sub_1B193F9D0(v21, 0, v23, v24, v25, v26, v27, v28);
    if ((v30 & 1) != 0)
      return v30 ^ 1;
  }
  v31 = sub_1B187813C(v5, v22, v23, v24, v25, v26, v27, v28);
  v37 = sub_1B1840E70(v31, 16, 0, v32, v33, v34, v35, v36);
  return !v37 || !sub_1B1841A40(v37, v38, v39, v40, v41, v42, v43, v44);
}

void sub_1B182D4E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int16 v4;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  float32x4_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int canRecycleParticleBuffers;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t i;
  unint64_t v78;
  float32x2_t *v79;
  void *v80;
  float64x2_t v81;
  const char *v82;
  uint64_t v83;
  CFTypeRef cf;
  _OWORD v85[3];
  _OWORD v86[3];

  v4 = a4;
  v7 = sub_1B1815BE8(*(_QWORD *)a1, a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"render", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/SceneRenderer.mm", 259, v7 | 0x300000000);
  v8 = *(unsigned __int8 *)(a3 + 17);
  v9 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(v9 + 112))
  {
    v10 = *(unsigned __int8 *)(sub_1B181E7E0(v9) + 12560);
    v9 = *(_QWORD *)(a1 + 56);
  }
  else
  {
    v10 = 1;
  }
  v11 = *(unsigned __int8 *)(sub_1B181E7E0(v9) + 12563);
  v12 = *(unsigned __int8 *)(a1 + 18);
  v13 = *(unsigned __int8 *)(a1 + 33);
  v21 = sub_1B1813884(*(_QWORD *)a1, v14, v15, v16, v17, v18, v19, v20);
  v29 = (const void *)sub_1B187A934(v21, v22, v23, v24, v25, v26, v27, v28);
  CFRetain(v29);
  cf = v29;
  v37 = (void *)sub_1B1813BC4(*(_QWORD *)a1, v30, v31, v32, v33, v34, v35, v36);
  objc_msgSend_setRenderPassParameters_(v37, v38, (v11 << 16) | (v12 << 24) | (v13 << 32) | ((unint64_t)v10 << 8) | v8, v39);
  objc_msgSend_setCurrentPassHash_(v37, v40, *(_QWORD *)(a1 + 48), v41);
  objc_msgSend_setCurrentPassMaterial_(v37, v42, *(_QWORD *)(a1 + 8), v43);
  v51 = *(_QWORD *)(a1 + 56);
  if ((*(_BYTE *)(v51 + 120) & 4) == 0)
  {
    if (*(_BYTE *)(v51 + 113) == 2)
    {
      if (*(_BYTE *)(v51 + 80))
      {
        v52 = *(float32x4_t *)(v51 + 64);
        v53 = *(void **)a3;
        v85[0] = vcvtq_f64_f32(*(float32x2_t *)v52.f32);
        v85[1] = vcvt_hight_f64_f32(v52);
        v85[2] = xmmword_1B2245B90;
        objc_msgSend_setViewport_(v53, v44, (uint64_t)v85, v46);
      }
    }
    else
    {
      v76 = 0;
      for (i = 11288; ; i += 16)
      {
        v78 = *(_BYTE *)(v51 + 112) ? *(unsigned __int8 *)(sub_1B181E7E0(v51) + 12560) : 1;
        if (v76 >= v78)
          break;
        v79 = (float32x2_t *)(sub_1B181E7E0(*(_QWORD *)(a1 + 56)) + i);
        v80 = *(void **)a3;
        v81 = vcvtq_f64_f32(*v79);
        v86[0] = vcvtq_f64_f32(v79[-1]);
        v86[1] = v81;
        v86[2] = xmmword_1B2245B90;
        objc_msgSend_setViewport_(v80, v82, (uint64_t)v86, v83);
        ++v76;
        v51 = *(_QWORD *)(a1 + 56);
      }
    }
  }
  if (!sub_1B187B140(v21, (uint64_t)v44, v45, v46, v47, v48, v49, v50))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v54, v55, v56, v57, v58, v59, (uint64_t)"enginePipeline");
  v60 = *(_QWORD *)a1;
  v61 = sub_1B181E7E0(*(_QWORD *)(a1 + 56));
  sub_1B1815A6C(v60, 0, v61 + ((unint64_t)HIBYTE(v4) << 6) + 9232);
  v62 = *(_QWORD *)a1;
  v63 = sub_1B181E7E0(*(_QWORD *)(a1 + 56));
  sub_1B1815A6C(v62, 1, v63 + ((unint64_t)HIBYTE(v4) << 6) + 8208);
  sub_1B182D7C8(a1, v4);
  v67 = sub_1B1816084(*(_QWORD *)a1);
  if (v67)
  {
    canRecycleParticleBuffers = *(_BYTE *)(a1 + 33) != 0;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 113) != 2)
      canRecycleParticleBuffers = objc_msgSend_canRecycleParticleBuffers(v37, v64, v65, v66);
    if (canRecycleParticleBuffers)
    {
      v69 = (char *)objc_msgSend_currentCommandBuffer(v37, v64, v65, v66);
      sub_1B18D3194(v67, v69, v70, v71, v72, v73, v74, v75);
    }
  }
  CFRelease(cf);
  prof_endFlame();
}

void sub_1B182D790(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B182D7C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char v30;
  char v31;
  const void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  double v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  _QWORD v76[6];
  char v77;
  BOOL v78;
  char v79;
  _BYTE v80[160];
  _BYTE v81[13088];
  __int16 v82;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v12 = sub_1B1813884(*v4, v2, v6, v7, v8, v9, v10, v11);
  v20 = sub_1B187B140(v12, v13, v14, v15, v16, v17, v18, v19);
  v28 = (void *)sub_1B1813BC4(*v5, v21, v22, v23, v24, v25, v26, v27);
  bzero(v80, 0x33F0uLL);
  v29 = v5[7];
  v30 = *(_BYTE *)(v29 + 112);
  if (v30)
  {
    v31 = *(_BYTE *)(sub_1B181E7E0(v29) + 12560);
    v29 = v5[7];
    v30 = *(_BYTE *)(v29 + 112);
  }
  else
  {
    v31 = 1;
  }
  v80[24] = v31;
  v80[25] = HIBYTE(v3);
  v80[26] = (*(_BYTE *)(v29 + 120) & 4) != 0;
  v80[27] = v30;
  v80[28] = *((_BYTE *)v5 + 18);
  v82 = *((_WORD *)v5 + 8);
  v32 = (const void *)sub_1B181E7E0(v29);
  memcpy(v81, v32, sizeof(v81));
  if ((v5[3] & 2) != 0)
  {
    v40 = sub_1B187B0A0(v12, 0);
    if (v40)
      sub_1B1813AE4(*v5, v40, (uint64_t)v80, v35, v36, v37, v38, v39);
  }
  v41 = sub_1B1813794(*v5, v33, v34, v35, v36, v37, v38, v39);
  v42 = 16 * v3;
  v43 = *(unsigned int *)(sub_1B181E7E0(v5[7]) + v42 + 12824);
  v50 = *(void **)(sub_1B181E7E0(v5[7]) + v42 + 12816);
  if (!v50)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v44, v45, v46, v47, v48, v49, (uint64_t)"visibleElements");
  v51 = CACurrentMediaTime();
  prof_beginFlame((uint64_t)"sync and sort", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/SceneRenderer.mm", 366);
  v59 = (void *)sub_1B1814410(*v5, v52, v53, v54, v55, v56, v57, v58);
  sub_1B18D39A0((uint64_t)v59, (uint64_t *)*v5, (uint64_t)v50, v43, v5[6], v60, v61, v62);
  sub_1B18D37F0(v59, *v5, v50, v43);
  *(double *)(v41 + 152) = *(double *)(v41 + 152) + CACurrentMediaTime() - v51;
  prof_endFlame();
  if (sub_1B1815818(*v5))
  {
    v70 = sub_1B1813794(*v5, v63, v64, v65, v66, v67, v68, v69);
    v71 = sub_1B1815818(*v5) + ~*(_DWORD *)(v70 + 12);
    if (v43 >= v71)
      v43 = v71;
    else
      v43 = v43;
  }
  v72 = CACurrentMediaTime();
  prof_beginFlame((uint64_t)"process rendererElements", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/SceneRenderer.mm", 386);
  v73 = *v5;
  v76[0] = v20;
  v76[1] = v73;
  v77 = v5[3] & 1;
  v74 = v5[6];
  v78 = (*(_BYTE *)(v5[7] + 120) & 2) != 0;
  v76[2] = v80;
  v76[3] = 0;
  v79 = *((_BYTE *)v5 + 33);
  v76[4] = v74;
  v76[5] = 0;
  objc_msgSend_processRendererElements_count_engineIterationContext_(v28, v75, (uint64_t)v50, v43, v76);
  *(double *)(v41 + 152) = *(double *)(v41 + 152) + CACurrentMediaTime() - v72;
  prof_endFlame();
}

uint64_t sub_1B182DA64(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

_QWORD *sub_1B182DA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"objcConstraint");
  if (qword_1EEF65CB8 != -1)
    dispatch_once_f(&qword_1EEF65CB8, &qword_1EEF65CB0, (dispatch_function_t)sub_1B182DA64);
  result = (_QWORD *)sub_1B179CB90(qword_1EEF65CB0, 0x18uLL);
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

uint64_t sub_1B182DB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t (*v11)(_QWORD, uint64_t, uint64_t);

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"delegate");
  v11 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t))(a1 + 24);
  if (v11)
    return v11(*(_QWORD *)(a1 + 16), a2, a3);
  else
    return 1;
}

void sub_1B182DBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v11)(_QWORD, uint64_t, uint64_t);

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"delegate");
  v11 = *(void (**)(_QWORD, uint64_t, uint64_t))(a1 + 32);
  if (v11)
    v11(*(_QWORD *)(a1 + 16), a2, a3);
}

CFStringRef sub_1B182DC30(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAvoidOccluderConstraintDelegate %p>"), a1);
}

CFStringRef sub_1B182DC6C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXAvoidOccluderConstraintDelegate %p>"), a1);
}

uint64_t sub_1B182DCA8(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B182DCD4()
{
  if (qword_1EEF65CC0 != -1)
    dispatch_once_f(&qword_1EEF65CC0, &qword_1ED4CF720, (dispatch_function_t)sub_1B182DCA8);
  return qword_1ED4CF720;
}

double sub_1B182DD1C(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  unint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  double result;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;
  float v25;
  float v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float v30;

  v4 = vsubq_f32(a2, a1);
  v5 = vsubq_f32(a3, a1);
  v6 = vsubq_f32(a4, a1);
  v7 = vmulq_f32(v4, v6);
  v8 = vmulq_f32(v5, v6);
  v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
  v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1)));
  if (v9.f32[0] <= 0.0)
  {
    v11 = a1.i64[0];
    if (v10.f32[0] <= 0.0)
      return *(double *)&v11;
  }
  v12 = vsubq_f32(a4, a2);
  v13 = vmulq_f32(v4, v12);
  v14 = vmulq_f32(v5, v12);
  v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
  v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1)));
  if (v15.f32[0] >= 0.0)
  {
    v11 = a2.i64[0];
    if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v15, v16))).u8[0] & 1) == 0)
      return *(double *)&v11;
  }
  v18 = (float)(v9.f32[0] * v16.f32[0]) - (float)(v15.f32[0] * v10.f32[0]);
  if (v15.f32[0] <= 0.0 && v9.f32[0] >= 0.0 && v18 <= 0.0)
  {
    *(_QWORD *)&result = vmlaq_n_f32(a1, v4, vdivq_f32(v9, vsubq_f32(v9, v15)).f32[0]).u64[0];
    return result;
  }
  v19 = vsubq_f32(a4, a3);
  v20 = vmulq_f32(v4, v19);
  v21 = vmulq_f32(v5, v19);
  v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1)));
  v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1)));
  if (v23.f32[0] >= 0.0)
  {
    v11 = a3.i64[0];
    if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v23, v22))).u8[0] & 1) == 0)
      return *(double *)&v11;
  }
  v24 = (float)(v22.f32[0] * v10.f32[0]) - (float)(v9.f32[0] * v23.f32[0]);
  if (v23.f32[0] <= 0.0 && v24 <= 0.0 && v10.f32[0] >= 0.0)
  {
    LODWORD(v25) = vdivq_f32(v10, vsubq_f32(v10, v23)).u32[0];
LABEL_20:
    *(_QWORD *)&result = vmlaq_n_f32(a1, v5, v25).u64[0];
    return result;
  }
  v26 = (float)(v15.f32[0] * v23.f32[0]) - (float)(v22.f32[0] * v16.f32[0]);
  if (v26 > 0.0 || (v27 = vsubq_f32(v16, v15), v27.f32[0] < 0.0) || (v28 = vsubq_f32(v22, v23), v28.f32[0] < 0.0))
  {
    v29 = 1.0 / (float)(v18 + (float)(v26 + v24));
    v30 = v24 * v29;
    v25 = v18 * v29;
    a1 = vmlaq_n_f32(a1, v4, v30);
    goto LABEL_20;
  }
  *(_QWORD *)&result = vmlaq_n_f32(a2, vsubq_f32(a3, a2), vdivq_f32(v27, vaddq_f32(v27, v28)).f32[0]).u64[0];
  return result;
}

void sub_1B182DEC4(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, float a5, double a6)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x2_t v20;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  BOOL v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float v35;
  float v36;
  float32x4_t v38;
  float v39;
  float32x4_t v40[3];
  float32x4_t v41;
  float32x4_t v42;

  v8 = *a1;
  v7 = a1[1];
  v9 = vsubq_f32(v7, *a1);
  v10 = a1[2];
  v11 = vsubq_f32(v10, *a1);
  v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v9)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
  v13 = (int32x4_t)vmulq_f32(v12, v12);
  v13.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v13.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v13, 2), *(float32x2_t *)v13.i8)).u32[0];
  *(float32x2_t *)v11.f32 = vrsqrte_f32((float32x2_t)v13.u32[0]);
  *(float32x2_t *)v11.f32 = vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32)));
  v14 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vmul_f32(*(float32x2_t *)v11.f32, vrsqrts_f32((float32x2_t)v13.u32[0], vmul_f32(*(float32x2_t *)v11.f32, *(float32x2_t *)v11.f32))).f32[0]);
  v15 = vmulq_f32(*a1, v14);
  v16 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
  v17 = *a2;
  v18 = vmulq_f32(*a2, v14);
  v19 = vmulq_f32(v14, vnegq_f32(v14));
  v20 = (float32x2_t)vdivq_f32(vsubq_f32(v16, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1)))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)))).u64[0];
  if (v20.f32[0] >= 0.0)
  {
    if (v20.f32[0] <= *(float *)&a6)
    {
      v39 = *(float *)&a6;
      v29 = vmlsq_lane_f32(v17, v14, v20, 0);
    }
    else
    {
      v25 = vmlsq_lane_f32(v17, v14, *(float32x2_t *)&a6, 0);
      v26 = vmulq_f32(v14, v25);
      v27 = vmulq_f32(v14, *a3);
      v28 = (float)(v16.f32[0]
                  - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0];
      if (v28 < 0.0)
        return;
      v39 = *(float *)&a6;
      v29 = vmlaq_n_f32(v25, *a3, v28);
    }
    v38 = v29;
    v42 = v29;
    v40[2] = v10;
    v41 = v29;
    v40[0] = v8;
    v40[1] = v7;
    v30 = sub_1B182200C(v40, &v42);
    v31 = v38;
    if (!v30)
    {
      *(double *)v31.i64 = sub_1B182DD1C(*a1, a1[1], a1[2], v42);
      v41 = v31;
    }
    v32 = vsubq_f32(*a2, v31);
    v33 = vmulq_f32(v32, v32);
    v33.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0]);
    v34 = vmulq_f32(v32, vnegq_f32(*a3));
    v34.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0];
    v35 = -(float)((float)((float)((float)-v34.f32[0] * v34.f32[0]) + (float)(v33.f32[0] * v33.f32[0]))
                 - (float)(v39 * v39));
    v36 = v34.f32[0] - sqrtf(v35);
    if (v35 < 0.0)
      v36 = -1.0;
    if (v36 >= 0.0 && v36 <= a5)
      (*(void (**)(uint64_t, float32x4_t *, float32x4_t *))(a4 + 16))(a4, a1, &v41);
  }
}

float32x4_t sub_1B182E0E0(float32x4_t *a1, double a2, float32x4_t a3, float32x4_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v8;
  int32x4_t v11;
  float32x4_t v12;
  float v13;
  float v14;
  float32x4_t v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int v23;
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x2_t v28;
  float32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  _QWORD v44[4];
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  float32x4_t *v53;
  float v54;
  int v55;
  _OWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  float *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  float32x4_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v8 = LODWORD(a2);
  v71 = *MEMORY[0x1E0C80C00];
  *(float *)&a2 = *(float *)&a2 + 0.001;
  v11 = vdupq_lane_s32(*(int32x2_t *)&a2, 0);
  v11.i32[3] = 0;
  v37 = (float32x4_t)v11;
  while (1)
  {
    v12 = vmulq_f32(a4, a4);
    LODWORD(v13) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).u32[0];
    v14 = sqrtf(v13);
    if (v14 < 0.001)
      break;
    v62 = 0;
    v63 = &v62;
    v64 = 0x2000000000;
    v65 = 0;
    v58 = 0;
    v59 = (float *)&v58;
    v60 = 0x2000000000;
    v61 = 2139095039;
    v66 = 0;
    v67 = (float32x4_t *)&v66;
    v68 = 0x3000000000;
    v15 = a3;
    v15.i32[3] = 1.0;
    v16 = v13;
    v17 = vrsqrte_f32((float32x2_t)LODWORD(v13));
    v18 = vmul_f32(v17, vrsqrts_f32((float32x2_t)LODWORD(v16), vmul_f32(v17, v17)));
    v19 = vmulq_n_f32(a4, vmul_f32(v18, vrsqrts_f32((float32x2_t)LODWORD(v16), vmul_f32(v18, v18))).f32[0]);
    v20 = vaddq_f32(a4, a3);
    v38 = v20;
    v20.i32[3] = 1.0;
    v21 = vminnmq_f32(vsubq_f32(v15, v37), vsubq_f32(v20, v37));
    v22 = vmaxnmq_f32(vaddq_f32(v37, v15), vaddq_f32(v37, v20));
    v15.i64[0] = 0x3F0000003F000000;
    v15.i64[1] = 0x3F0000003F000000;
    v69 = 0;
    v70 = 0;
    v40 = vmulq_f32(vsubq_f32(v22, v21), v15);
    v41 = vmulq_f32(vaddq_f32(v21, v22), v15);
    a1[13] = v41;
    a1[14] = v40;
    a1[11].i64[0] = a1[10].i64[1];
    v57 = 0;
    memset(v56, 0, sizeof(v56));
    v44[0] = MEMORY[0x1E0C809B0];
    v44[1] = 0x40000000;
    v44[2] = sub_1B182E418;
    v44[3] = &unk_1E63D6E98;
    v45 = v41;
    v46 = v40;
    v52 = a7;
    v53 = a1;
    v47 = a3;
    v48 = v19;
    v39 = v19;
    v54 = v14;
    v55 = v8;
    v49 = &v62;
    v50 = &v58;
    v51 = &v66;
    v42 = a4;
    v43 = a3;
    sub_1B197CAD0((uint64_t)v44, (uint64_t)v56);
    *(_QWORD *)&v56[0] = a1[10].i64[0];
    sub_1B197DAF0(a6, (uint64_t)v56);
    v23 = *((unsigned __int8 *)v63 + 24);
    if (*((_BYTE *)v63 + 24))
    {
      v24 = v67[2];
      v25 = v59[6];
      v26 = vsubq_f32(vmlaq_n_f32(v43, v39, v25), v24);
      v27 = (int32x4_t)vmulq_f32(v26, v26);
      v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v27, 2), vadd_f32(*(float32x2_t *)v27.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.i8, 1))).u32[0];
      v28 = vrsqrte_f32((float32x2_t)v27.u32[0]);
      v29 = vmul_f32(v28, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v28, v28)));
      v30 = vmulq_n_f32(v26, vmul_f32(v29, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v29, v29))).f32[0]);
      v31 = vmulq_f32(v24, v30);
      v32 = vmlaq_n_f32(v43, v39, v14 + -0.001);
      v33 = vmulq_f32(v32, v30);
      v34 = vmulq_f32(v30, v30);
      v42 = vsubq_f32(vmlaq_n_f32(v32, v30, (float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0]- vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0])/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0]), v24);
      v43 = vmlaq_n_f32(v43, v39, v25 + -0.001);
    }
    else
    {
      v36 = v38;
    }
    _Block_object_dispose(&v66, 8);
    _Block_object_dispose(&v58, 8);
    _Block_object_dispose(&v62, 8);
    a4 = v42;
    a3 = v43;
    if (!v23)
      return v36;
  }
  return a3;
}

void sub_1B182E418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  float32x2_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x2_t v41;
  simd_float4x4 v42;
  const __CFArray *v43;
  uint64_t v44;
  const void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  CFIndex i;
  const void *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  int32x4_t v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  simd_float4 v92;
  __int128 v93;
  __int128 v94;
  simd_float4 v95;
  _QWORD v97[4];
  simd_float4 v98;
  __int128 v99;
  simd_float4 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  _OWORD v111[3];
  uint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  _QWORD v117[4];
  simd_float4 v118;
  __int128 v119;
  simd_float4 v120;
  __int128 v121;
  __int128 v122;
  simd_float4 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  simd_float4x4 v128;

  if (a3 >= 1)
  {
    v10 = 0;
    v11 = (float32x2_t)vdup_n_s32(0x3727C5ACu);
    do
    {
      v12 = *(_QWORD *)(a2 + 8 * v10);
      v13 = *(_QWORD *)(a1 + 120);
      if (v12 != v13 && !sub_1B186C870(*(_QWORD *)(a2 + 8 * v10), v13, a3, a4, a5, a6, a7, a8))
      {
        v15 = sub_1B1868FA0(v12, v14, a3, a4, a5, a6, a7, a8);
        v23 = sub_1B17A1ACC(v15, v16, v17, v18, v19, v20, v21, v22);
        v31 = sub_1B1869AC8(v12, v24, v25, v26, v27, v28, v29, v30);
        v42.columns[0] = *(simd_float4 *)v31;
        v39 = vmulq_f32((float32x4_t)v42.columns[0], (float32x4_t)v42.columns[0]);
        v42.columns[2] = *(simd_float4 *)(v31 + 32);
        v39.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]);
        v42.columns[1] = (simd_float4)vmulq_f32(*(float32x4_t *)(v31 + 16), *(float32x4_t *)(v31 + 16));
        v40 = vmulq_f32((float32x4_t)v42.columns[2], (float32x4_t)v42.columns[2]);
        v41 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).u64[0];
        *(float *)v41.i32 = sqrtf(*(float *)v41.i32);
        v39.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42.columns[1], 2), vaddq_f32((float32x4_t)v42.columns[1], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.columns[1].f32, 1))).f32[0]);
        *(int32x2_t *)v42.columns[1].f32 = vcgt_f32(v11, vabd_f32(*(float32x2_t *)v39.f32, (float32x2_t)vdup_lane_s32(v41, 0)));
        v94 = *(_OWORD *)(v31 + 16);
        v95 = *(simd_float4 *)v31;
        v92 = v42.columns[2];
        v93 = *(_OWORD *)(v31 + 48);
        if ((vpmin_u32(*(uint32x2_t *)v42.columns[1].f32, *(uint32x2_t *)v42.columns[1].f32).u32[0] & 0x80000000) != 0)
        {
          v42.columns[1] = *(simd_float4 *)(v31 + 16);
          v42.columns[3] = *(simd_float4 *)(v31 + 48);
          v128 = __invert_f4(v42);
          v81 = *(int32x4_t *)(a1 + 48);
          v128.columns[3] = (simd_float4)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v128.columns[3], (float32x4_t)v128.columns[2], *(float32x4_t *)(a1 + 32), 2), (float32x4_t)v128.columns[1], *(float32x2_t *)(a1 + 32), 1), (float32x4_t)v128.columns[0], COERCE_FLOAT(*(_OWORD *)(a1 + 32)));
          v128.columns[3].i32[3] = HIDWORD(*(_OWORD *)(a1 + 32));
          v82 = (float32x4_t)v81;
          v82.i32[1] = v81.i32[0];
          v82.i32[2] = v81.i32[0];
          v117[0] = MEMORY[0x1E0C809B0];
          v117[1] = 0x40000000;
          v117[2] = sub_1B182E780;
          v117[3] = &unk_1E63D6E20;
          v128.columns[1] = (simd_float4)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v81.i8, 1), v81), vabsq_f32((float32x4_t)v128.columns[1])), v82, vabsq_f32((float32x4_t)v128.columns[0])), (float32x4_t)vzip2q_s32(vtrn1q_s32(v81, v81), v81), vabsq_f32((float32x4_t)v128.columns[2]));
          v118 = v95;
          v119 = v94;
          v120 = v92;
          v121 = v93;
          v83 = *(_QWORD *)(a1 + 128);
          v128.columns[2] = *(simd_float4 *)(a1 + 80);
          v122 = *(_OWORD *)(a1 + 64);
          v123 = v128.columns[2];
          v127 = *(_QWORD *)(a1 + 136);
          v124 = *(_OWORD *)(a1 + 96);
          v84 = *(_QWORD *)(a1 + 112);
          v126 = v83;
          v125 = v84;
          sub_1B1876B54((uint64_t)v23, (uint64_t)v117, (float32x4_t)v128.columns[3], (float32x4_t)v128.columns[1], v85, v86, v87, v88, v89, v90);
        }
        else
        {
          v43 = sub_1B1874BE0((uint64_t)v23, v32, v33, v34, v35, v36, v37, v38);
          if (v43)
          {
            v44 = (uint64_t)v43;
            v45 = sub_1B1875E70((uint64_t)v23, 0, a3, a4, a5, a6, a7, a8);
            if (sub_1B17EDAE0((uint64_t)v45, v46, v47, v48, v49, v50, v51, v52))
            {
              v60 = sub_1B17ED6C4((uint64_t)v45, v53, a3, a4, a5, a6, a7, a8);
              v62 = v61;
              if ((v61 & 0xFF00000000) != 0x800000000)
                sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed.  - Only vector3 type is supported."), v54, v55, v56, v57, v58, v59, (uint64_t)"vertices.type == kCFXBaseTypeVector3");
              v63 = sub_1B1875D94((uint64_t)v23, 0, 0, v55, v56, v57, v58, v59);
              if (v44 >= 1)
              {
                v64 = v63;
                for (i = 0; i != v44; ++i)
                {
                  v66 = sub_1B1874C3C((uint64_t)v23, i, 0, a4, a5, a6, a7, a8);
                  v116 = 0;
                  v114 = 0u;
                  v115 = 0u;
                  v113 = 0u;
                  sub_1B17A4804((uint64_t)v66, v64, v67, v68, v69, v70, v71, v72, (uint64_t)&v113);
                  if ((BYTE10(v114) & 0xFA) != 0)
                  {
                    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Slider can only process triangles."), v73, v74, v75, v76, v77, v78, v91);
                  }
                  else
                  {
                    v111[0] = v113;
                    v111[1] = v114;
                    v111[2] = v115;
                    v112 = v116;
                    v97[0] = MEMORY[0x1E0C809B0];
                    v97[1] = 0x40000000;
                    v97[2] = sub_1B182ED20;
                    v97[3] = &unk_1E63D6E70;
                    v109 = v62 - 1;
                    v98 = v95;
                    v99 = v94;
                    v100 = v92;
                    v101 = v93;
                    v79 = *(_QWORD *)(a1 + 128);
                    v107 = v62;
                    v108 = v79;
                    v80 = *(_OWORD *)(a1 + 80);
                    v102 = *(_OWORD *)(a1 + 64);
                    v103 = v80;
                    v110 = *(_QWORD *)(a1 + 136);
                    v104 = *(_OWORD *)(a1 + 96);
                    v105 = *(_QWORD *)(a1 + 112);
                    v106 = v60;
                    sub_1B17A5198((uint64_t *)v111, (uint64_t)v97, v73, v74, v75, v76, v77, v78);
                  }
                }
              }
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != a3);
  }
}

uint64_t sub_1B182E780(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v5;
  float32x4_t *v6;
  float32x4_t *v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  _QWORD *v16;
  float32x4_t *v17;
  unint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  _OWORD *f32;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t *v31;
  float32x4_t *v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  _QWORD v38[4];
  __int128 v39;
  uint64_t v40;
  _QWORD *v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;

  if (a3)
  {
    v5 = 0;
    v6 = (float32x4_t *)(a1 + 96);
    v7 = (float32x4_t *)(a1 + 112);
    v8 = a3;
    do
    {
      v9 = *(float32x4_t *)(a2 + 16 * (3 * v5));
      v10 = *(float32x4_t *)(a2 + 16 * (3 * v5 + 1));
      v11 = *(float32x4_t *)(a2 + 16 * (3 * v5 + 2));
      v12 = *(float32x4_t *)(a1 + 32);
      v13 = *(float32x4_t *)(a1 + 48);
      v14 = *(float32x4_t *)(a1 + 64);
      v15 = *(float32x4_t *)(a1 + 80);
      v42 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v15, v14, v9, 2), v13, *(float32x2_t *)v9.f32, 1), v12, v9.f32[0]);
      v43 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v15, v14, v10, 2), v13, *(float32x2_t *)v10.f32, 1), v12, v10.f32[0]);
      v44 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v15, v14, v11, 2), v13, *(float32x2_t *)v11.f32, 1), v12, v11.f32[0]);
      v16 = *(_QWORD **)(a1 + 152);
      if (v16[16])
      {
        v17 = (float32x4_t *)v16[31];
        v18 = v16[32];
        if ((unint64_t)v17 >= v18)
        {
          v22 = v16[30];
          v23 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v17 - v22) >> 4);
          v24 = v23 + 1;
          if (v23 + 1 > 0x555555555555555)
            abort();
          v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - v22) >> 4);
          if (2 * v25 > v24)
            v24 = 2 * v25;
          if (v25 >= 0x2AAAAAAAAAAAAAALL)
            v26 = 0x555555555555555;
          else
            v26 = v24;
          if (v26)
            v27 = (char *)sub_1B1830490((uint64_t)(v16 + 32), v26);
          else
            v27 = 0;
          v28 = (float32x4_t *)&v27[48 * v23];
          v29 = v42;
          v10.i32[1] = v43.i32[1];
          v30 = v44;
          v28[1] = v43;
          v28[2] = v30;
          *v28 = v29;
          v32 = (float32x4_t *)v16[30];
          v31 = (float32x4_t *)v16[31];
          v33 = v28;
          if (v31 != v32)
          {
            do
            {
              v34 = v31[-3];
              v10 = v31[-2];
              v35 = v31[-1];
              v33[-2] = v10;
              v33[-1] = v35;
              v33[-3] = v34;
              v33 -= 3;
              v31 -= 3;
            }
            while (v31 != v32);
            v31 = (float32x4_t *)v16[30];
          }
          f32 = (_OWORD *)v28[3].f32;
          v16[30] = v33;
          v16[31] = v28 + 3;
          v16[32] = &v27[48 * v26];
          if (v31)
            operator delete(v31);
        }
        else
        {
          v19 = v42;
          v10.i32[1] = v43.i32[1];
          v20 = v44;
          v17[1] = v43;
          v17[2] = v20;
          *v17 = v19;
          f32 = (_OWORD *)v17[3].f32;
        }
        v16[31] = f32;
        v16 = *(_QWORD **)(a1 + 152);
      }
      v36 = *(float *)(a1 + 160);
      v10.i32[0] = *(_DWORD *)(a1 + 164);
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 0x40000000;
      v38[2] = sub_1B182E9B0;
      v38[3] = &unk_1E63D6DF8;
      v39 = *(_OWORD *)(a1 + 128);
      v40 = *(_QWORD *)(a1 + 144);
      v41 = v16;
      sub_1B182DEC4(&v42, v6, v7, (uint64_t)v38, v36, *(double *)v10.i64);
      ++v5;
    }
    while (v5 != v8);
  }
  return 0;
}

void sub_1B182E9B0(_QWORD *a1, __int128 *a2, _OWORD *a3, float a4)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  float v15;
  float v16;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;

  v6 = *(_QWORD *)(a1[5] + 8);
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) || (v7 = *(float *)(v6 + 24), v7 > a4))
  {
    *(float *)(v6 + 24) = a4;
    *(_OWORD *)(*(_QWORD *)(a1[6] + 8) + 32) = *a3;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    v8 = a1[7];
    if (!*(_QWORD *)(v8 + 128))
      return;
    *(_QWORD *)(v8 + 248) -= 48;
    v9 = (_QWORD *)a1[7];
    v10 = (_OWORD *)v9[34];
    v11 = v9[35];
    if ((unint64_t)v10 >= v11)
    {
      v27 = v9[33];
      v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v27) >> 4);
      v29 = v28 + 1;
      if (v28 + 1 > 0x555555555555555)
        goto LABEL_55;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v27) >> 4);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x2AAAAAAAAAAAAAALL)
        v31 = 0x555555555555555;
      else
        v31 = v29;
      if (v31)
        v32 = (char *)sub_1B1830490((uint64_t)(v9 + 35), v31);
      else
        v32 = 0;
      v33 = &v32[48 * v28];
      v34 = &v32[48 * v31];
      v35 = *a2;
      v36 = a2[2];
      *((_OWORD *)v33 + 1) = a2[1];
      *((_OWORD *)v33 + 2) = v36;
      *(_OWORD *)v33 = v35;
      v14 = v33 + 48;
      v38 = (char *)v9[33];
      v37 = (char *)v9[34];
      if (v37 != v38)
      {
        do
        {
          v39 = *((_OWORD *)v37 - 3);
          v40 = *((_OWORD *)v37 - 1);
          *((_OWORD *)v33 - 2) = *((_OWORD *)v37 - 2);
          *((_OWORD *)v33 - 1) = v40;
          *((_OWORD *)v33 - 3) = v39;
          v33 -= 48;
          v37 -= 48;
        }
        while (v37 != v38);
        v37 = (char *)v9[33];
      }
      v9[33] = v33;
      v9[34] = v14;
      v9[35] = v34;
      if (v37)
        operator delete(v37);
    }
    else
    {
      v12 = *a2;
      v13 = a2[2];
      v10[1] = a2[1];
      v10[2] = v13;
      *v10 = v12;
      v14 = v10 + 3;
    }
    v9[34] = v14;
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v41 = v18[23];
    if ((unint64_t)v19 < v41)
      goto LABEL_34;
    v45 = v18[21];
    v46 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v45) >> 4);
    v47 = v46 + 1;
    if (v46 + 1 <= 0x555555555555555)
    {
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v45) >> 4);
      if (2 * v48 > v47)
        v47 = 2 * v48;
      if (v48 >= 0x2AAAAAAAAAAAAAALL)
        v49 = 0x555555555555555;
      else
        v49 = v47;
      if (v49)
        v50 = (char *)sub_1B1830490((uint64_t)(v18 + 23), v49);
      else
        v50 = 0;
      v51 = &v50[48 * v46];
      v52 = &v50[48 * v49];
      v53 = *a2;
      v54 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v54;
      *(_OWORD *)v51 = v53;
      v44 = v51 + 48;
      v56 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v56)
        goto LABEL_51;
      do
      {
        v57 = *((_OWORD *)v55 - 3);
        v58 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v58;
        *((_OWORD *)v51 - 3) = v57;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v56);
LABEL_50:
      v55 = (char *)v18[21];
LABEL_51:
      v18[21] = v51;
      v18[22] = v44;
      v18[23] = v52;
      if (v55)
        operator delete(v55);
      goto LABEL_53;
    }
LABEL_55:
    abort();
  }
  v15 = v7 + -0.001;
  v16 = v7 + 0.001;
  if (v15 < a4 && v16 > a4)
  {
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v20 = v18[23];
    if ((unint64_t)v19 < v20)
    {
LABEL_34:
      v42 = *a2;
      v43 = a2[2];
      v19[1] = a2[1];
      v19[2] = v43;
      *v19 = v42;
      v44 = v19 + 3;
LABEL_53:
      v18[22] = v44;
      return;
    }
    v21 = v18[21];
    v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v21) >> 4);
    v23 = v22 + 1;
    if (v22 + 1 <= 0x555555555555555)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v21) >> 4);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x2AAAAAAAAAAAAAALL)
        v25 = 0x555555555555555;
      else
        v25 = v23;
      if (v25)
        v26 = (char *)sub_1B1830490((uint64_t)(v18 + 23), v25);
      else
        v26 = 0;
      v51 = &v26[48 * v22];
      v52 = &v26[48 * v25];
      v59 = *a2;
      v60 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v60;
      *(_OWORD *)v51 = v59;
      v44 = v51 + 48;
      v61 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v61)
        goto LABEL_51;
      do
      {
        v62 = *((_OWORD *)v55 - 3);
        v63 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v63;
        *((_OWORD *)v51 - 3) = v62;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v61);
      goto LABEL_50;
    }
    goto LABEL_55;
  }
}

void sub_1B182ED20(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  float *v14;
  float v15;
  float v16;
  float v17;
  unsigned int v18;
  float *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  _QWORD *v27;
  float32x4_t *v28;
  unint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  _OWORD *f32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  float32x4_t *v39;
  char *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t *v43;
  float32x4_t *v44;
  float32x4_t v45;
  float32x4_t v46;
  float v47;
  _QWORD v48[4];
  __int128 v49;
  uint64_t v50;
  _QWORD *v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;

  if (a4 <= 2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected vertex count"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"vertexCountPerPolygon >= 3");
  v10 = *(_QWORD *)(a1 + 152);
  v11 = *(unsigned __int8 *)(a1 + 165);
  v12 = *(_DWORD *)(a1 + 176);
  v13 = *a3;
  if (v12 < *a3)
    v13 = *(_DWORD *)(a1 + 176);
  v14 = (float *)(v10 + v13 * v11);
  v15 = *v14;
  v16 = v14[1];
  v17 = v14[2];
  if (v12 >= a3[1])
    v18 = a3[1];
  else
    v18 = *(_DWORD *)(a1 + 176);
  v19 = (float *)(v10 + v18 * v11);
  if (v12 >= a3[2])
    v12 = a3[2];
  v20 = *(float32x4_t *)(a1 + 32);
  v21 = *(float32x4_t *)(a1 + 48);
  v22 = *(float32x4_t *)(a1 + 64);
  v23 = *(float32x4_t *)(a1 + 80);
  v24 = vaddq_f32(v23, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v20, v15), v21, v16), v22, v17));
  v25 = vaddq_f32(v23, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v20, *v19), v21, v19[1]), v22, v19[2]));
  v26 = vaddq_f32(v23, vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v20, *(float *)(v10 + v12 * v11)), v21, *(float *)(v10 + v12 * v11 + 4)), v22, *(float *)(v10 + v12 * v11 + 8)));
  v52 = v24;
  v53 = v25;
  v54 = v26;
  v27 = *(_QWORD **)(a1 + 168);
  if (v27[16])
  {
    v28 = (float32x4_t *)v27[31];
    v29 = v27[32];
    if ((unint64_t)v28 >= v29)
    {
      v33 = v27[30];
      v34 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v28 - v33) >> 4);
      v35 = v34 + 1;
      if (v34 + 1 > 0x555555555555555)
        abort();
      v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v29 - v33) >> 4);
      if (2 * v36 > v35)
        v35 = 2 * v36;
      if (v36 >= 0x2AAAAAAAAAAAAAALL)
        v37 = 0x555555555555555;
      else
        v37 = v35;
      if (v37)
        v38 = (char *)sub_1B1830490((uint64_t)(v27 + 32), v37);
      else
        v38 = 0;
      v39 = (float32x4_t *)&v38[48 * v34];
      v40 = &v38[48 * v37];
      v41 = v52;
      v25.i32[1] = v53.i32[1];
      v42 = v54;
      v39[1] = v53;
      v39[2] = v42;
      *v39 = v41;
      f32 = (_OWORD *)v39[3].f32;
      v44 = (float32x4_t *)v27[30];
      v43 = (float32x4_t *)v27[31];
      if (v43 != v44)
      {
        do
        {
          v45 = v43[-3];
          v25 = v43[-2];
          v46 = v43[-1];
          v39[-2] = v25;
          v39[-1] = v46;
          v39[-3] = v45;
          v39 -= 3;
          v43 -= 3;
        }
        while (v43 != v44);
        v43 = (float32x4_t *)v27[30];
      }
      v27[30] = v39;
      v27[31] = f32;
      v27[32] = v40;
      if (v43)
        operator delete(v43);
    }
    else
    {
      v30 = v52;
      v25.i32[1] = v53.i32[1];
      v31 = v54;
      v28[1] = v53;
      v28[2] = v31;
      *v28 = v30;
      f32 = (_OWORD *)v28[3].f32;
    }
    v27[31] = f32;
    v27 = *(_QWORD **)(a1 + 168);
  }
  v47 = *(float *)(a1 + 180);
  v25.i32[0] = *(_DWORD *)(a1 + 184);
  v48[0] = MEMORY[0x1E0C809B0];
  v48[1] = 0x40000000;
  v48[2] = sub_1B182EF6C;
  v48[3] = &unk_1E63D6E48;
  v49 = *(_OWORD *)(a1 + 128);
  v50 = *(_QWORD *)(a1 + 144);
  v51 = v27;
  sub_1B182DEC4(&v52, (float32x4_t *)(a1 + 96), (float32x4_t *)(a1 + 112), (uint64_t)v48, v47, *(double *)v25.i64);
}

void sub_1B182EF6C(_QWORD *a1, __int128 *a2, _OWORD *a3, float a4)
{
  uint64_t v6;
  float v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD *v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  float v15;
  float v16;
  _QWORD *v18;
  _OWORD *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;

  v6 = *(_QWORD *)(a1[5] + 8);
  if (!*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) || (v7 = *(float *)(v6 + 24), v7 > a4))
  {
    *(float *)(v6 + 24) = a4;
    *(_OWORD *)(*(_QWORD *)(a1[6] + 8) + 32) = *a3;
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    v8 = a1[7];
    if (!*(_QWORD *)(v8 + 128))
      return;
    *(_QWORD *)(v8 + 248) -= 48;
    v9 = (_QWORD *)a1[7];
    v10 = (_OWORD *)v9[34];
    v11 = v9[35];
    if ((unint64_t)v10 >= v11)
    {
      v27 = v9[33];
      v28 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v10 - v27) >> 4);
      v29 = v28 + 1;
      if (v28 + 1 > 0x555555555555555)
        goto LABEL_55;
      v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v27) >> 4);
      if (2 * v30 > v29)
        v29 = 2 * v30;
      if (v30 >= 0x2AAAAAAAAAAAAAALL)
        v31 = 0x555555555555555;
      else
        v31 = v29;
      if (v31)
        v32 = (char *)sub_1B1830490((uint64_t)(v9 + 35), v31);
      else
        v32 = 0;
      v33 = &v32[48 * v28];
      v34 = &v32[48 * v31];
      v35 = *a2;
      v36 = a2[2];
      *((_OWORD *)v33 + 1) = a2[1];
      *((_OWORD *)v33 + 2) = v36;
      *(_OWORD *)v33 = v35;
      v14 = v33 + 48;
      v38 = (char *)v9[33];
      v37 = (char *)v9[34];
      if (v37 != v38)
      {
        do
        {
          v39 = *((_OWORD *)v37 - 3);
          v40 = *((_OWORD *)v37 - 1);
          *((_OWORD *)v33 - 2) = *((_OWORD *)v37 - 2);
          *((_OWORD *)v33 - 1) = v40;
          *((_OWORD *)v33 - 3) = v39;
          v33 -= 48;
          v37 -= 48;
        }
        while (v37 != v38);
        v37 = (char *)v9[33];
      }
      v9[33] = v33;
      v9[34] = v14;
      v9[35] = v34;
      if (v37)
        operator delete(v37);
    }
    else
    {
      v12 = *a2;
      v13 = a2[2];
      v10[1] = a2[1];
      v10[2] = v13;
      *v10 = v12;
      v14 = v10 + 3;
    }
    v9[34] = v14;
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v41 = v18[23];
    if ((unint64_t)v19 < v41)
      goto LABEL_34;
    v45 = v18[21];
    v46 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v45) >> 4);
    v47 = v46 + 1;
    if (v46 + 1 <= 0x555555555555555)
    {
      v48 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - v45) >> 4);
      if (2 * v48 > v47)
        v47 = 2 * v48;
      if (v48 >= 0x2AAAAAAAAAAAAAALL)
        v49 = 0x555555555555555;
      else
        v49 = v47;
      if (v49)
        v50 = (char *)sub_1B1830490((uint64_t)(v18 + 23), v49);
      else
        v50 = 0;
      v51 = &v50[48 * v46];
      v52 = &v50[48 * v49];
      v53 = *a2;
      v54 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v54;
      *(_OWORD *)v51 = v53;
      v44 = v51 + 48;
      v56 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v56)
        goto LABEL_51;
      do
      {
        v57 = *((_OWORD *)v55 - 3);
        v58 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v58;
        *((_OWORD *)v51 - 3) = v57;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v56);
LABEL_50:
      v55 = (char *)v18[21];
LABEL_51:
      v18[21] = v51;
      v18[22] = v44;
      v18[23] = v52;
      if (v55)
        operator delete(v55);
      goto LABEL_53;
    }
LABEL_55:
    abort();
  }
  v15 = v7 + -0.001;
  v16 = v7 + 0.001;
  if (v15 < a4 && v16 > a4)
  {
    v18 = (_QWORD *)a1[7];
    v19 = (_OWORD *)v18[22];
    v20 = v18[23];
    if ((unint64_t)v19 < v20)
    {
LABEL_34:
      v42 = *a2;
      v43 = a2[2];
      v19[1] = a2[1];
      v19[2] = v43;
      *v19 = v42;
      v44 = v19 + 3;
LABEL_53:
      v18[22] = v44;
      return;
    }
    v21 = v18[21];
    v22 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v19 - v21) >> 4);
    v23 = v22 + 1;
    if (v22 + 1 <= 0x555555555555555)
    {
      v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v21) >> 4);
      if (2 * v24 > v23)
        v23 = 2 * v24;
      if (v24 >= 0x2AAAAAAAAAAAAAALL)
        v25 = 0x555555555555555;
      else
        v25 = v23;
      if (v25)
        v26 = (char *)sub_1B1830490((uint64_t)(v18 + 23), v25);
      else
        v26 = 0;
      v51 = &v26[48 * v22];
      v52 = &v26[48 * v25];
      v59 = *a2;
      v60 = a2[2];
      *((_OWORD *)v51 + 1) = a2[1];
      *((_OWORD *)v51 + 2) = v60;
      *(_OWORD *)v51 = v59;
      v44 = v51 + 48;
      v61 = (char *)v18[21];
      v55 = (char *)v18[22];
      if (v55 == v61)
        goto LABEL_51;
      do
      {
        v62 = *((_OWORD *)v55 - 3);
        v63 = *((_OWORD *)v55 - 1);
        *((_OWORD *)v51 - 2) = *((_OWORD *)v55 - 2);
        *((_OWORD *)v51 - 1) = v63;
        *((_OWORD *)v51 - 3) = v62;
        v51 -= 48;
        v55 -= 48;
      }
      while (v55 != v61);
      goto LABEL_50;
    }
    goto LABEL_55;
  }
}

uint64_t sub_1B182F2DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  double v47;
  float32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  simd_float4x4 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const void *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  simd_float4x4 v96;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  v11 = *(float32x4_t **)(a2 + 16);
  v95.i32[2] = 0;
  v95.i64[0] = 0;
  sub_1B186B5BC((uint64_t)a3, (__n128 *)&v95, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = sub_1B17C6244(a3, v12, v13, v14, v15, v16, v17, v18);
  if (v19)
  {
    v27 = *(float32x4_t **)(a2 + 56);
    v28 = sub_1B187B260(v19, v20, v21, v22, v23, v24, v25, v26);
    v36 = sub_1B1869AC8((uint64_t)a3, v29, v30, v31, v32, v33, v34, v35);
    v38 = *(float32x4_t *)(v36 + 16);
    v39 = *(float32x4_t *)(v36 + 32);
    v40 = vmulq_f32(*(float32x4_t *)v36, *(float32x4_t *)v36);
    v41 = vmulq_f32(v38, v38);
    v42 = vmulq_f32(v39, v39);
    v40.f32[0] = fmaxf(fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0])), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]));
    v43 = v11[9];
    HIDWORD(v47) = v95.i32[1];
    v44 = vsubq_f32(vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v36 + 48), v39, v43, 2), v38, *(float32x2_t *)v43.f32, 1), *(float32x4_t *)v36, v43.f32[0]), v95);
    v45 = vaddq_f32(*v27, v44);
    v92 = v44;
    v46 = vaddq_f32(v95, v44);
    *(float *)&v47 = vmuls_lane_f32(v40.f32[0], v43, 3);
    v48 = v46;
    v48.i32[3] = LODWORD(v47);
    v11[12] = v48;
    if (v11[8].i64[0])
    {
      v11[15].i64[1] = v11[15].i64[0];
      v11[17].i64[0] = v11[16].i64[1];
    }
    v93 = vsubq_f32(sub_1B182E0E0(v11, v47, v45, vsubq_f32(v46, v45), v37, v28, (uint64_t)a3), v92);
    *v27 = v93;
    v56 = sub_1B186B574((uint64_t)a3, v49, v50, v51, v52, v53, v54, v55);
    if (v56)
    {
      v64 = *(simd_float4x4 *)sub_1B1869AC8(v56, v57, v58, v59, v60, v61, v62, v63);
    }
    else
    {
      v64.columns[0] = (simd_float4)xmmword_1B2244DB0;
      v64.columns[1] = (simd_float4)xmmword_1B2244DD0;
      v64.columns[2] = (simd_float4)xmmword_1B2244D90;
      v64.columns[3] = (simd_float4)xmmword_1B2244E20;
    }
    v96 = __invert_f4(v64);
    v94 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v96.columns[3], (float32x4_t)v96.columns[2], v93, 2), (float32x4_t)v96.columns[1], *(float32x2_t *)v93.f32, 1), (float32x4_t)v96.columns[0], v93.f32[0]);
    v72 = (const void *)sub_1B19C45CC(a4, v65, v66, v67, v68, v69, v70, v71);
    v80 = (void *)sub_1B19C4614(a4, v73, v74, v75, v76, v77, v78, v79);
    v88 = sub_1B179E250(8, v81, v82, v83, v84, v85, v86, v87);
    sub_1B17C58FC(v72, v80, &v94, v88, 6, 0, v89, v90);
  }
  return 1;
}

void sub_1B182F4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t *v19;
  float32x4_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  float32x4_t *v33;
  float32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  float32x4_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66[4];

  v66[0] = xmmword_1B2244DB0;
  v66[1] = xmmword_1B2244DD0;
  v66[2] = xmmword_1B2244D90;
  v66[3] = xmmword_1B2244E20;
  v65 = xmmword_1B2244E40;
  sub_1B17FA598(a2, v66, &v65, a4, a5, a6, a7, a8, *(__n128 *)(a1 + 192));
  v64 = xmmword_1B2244E50;
  sub_1B17FB0F8(a2, (float32x4_t *)(a1 + 208), (uint64_t)v66, (float *)&v64, v10, v11, v12, v13);
  v19 = *(float32x4_t **)(a1 + 240);
  v20 = *(float32x4_t **)(a1 + 248);
  v63 = xmmword_1B2244E40;
  while (v19 != v20)
  {
    sub_1B17FA4D4(a2, 0, (float *)&v63, v14, v15, v16, v17, v18, *v19, v19[1]);
    sub_1B17FA4D4(a2, 0, (float *)&v63, v21, v22, v23, v24, v25, v19[1], v19[2]);
    v26 = v19[2];
    v27 = *v19;
    v19 += 3;
    sub_1B17FA4D4(a2, 0, (float *)&v63, v28, v29, v30, v31, v32, v26, v27);
  }
  v33 = *(float32x4_t **)(a1 + 168);
  v34 = *(float32x4_t **)(a1 + 176);
  v62 = xmmword_1B2244E50;
  while (v33 != v34)
  {
    sub_1B17FA4D4(a2, 0, (float *)&v62, v14, v15, v16, v17, v18, *v33, v33[1]);
    sub_1B17FA4D4(a2, 0, (float *)&v62, v35, v36, v37, v38, v39, v33[1], v33[2]);
    v40 = v33[2];
    v41 = *v33;
    v33 += 3;
    sub_1B17FA4D4(a2, 0, (float *)&v62, v42, v43, v44, v45, v46, v40, v41);
  }
  v48 = *(float32x4_t **)(a1 + 264);
  v47 = *(float32x4_t **)(a1 + 272);
  v61 = xmmword_1B2244E10;
  while (v48 != v47)
  {
    sub_1B17FA4D4(a2, 0, (float *)&v61, v14, v15, v16, v17, v18, *v48, v48[1]);
    sub_1B17FA4D4(a2, 0, (float *)&v61, v49, v50, v51, v52, v53, v48[1], v48[2]);
    v54 = v48[2];
    v55 = *v48;
    v48 += 3;
    sub_1B17FA4D4(a2, 0, (float *)&v61, v56, v57, v58, v59, v60, v54, v55);
  }
}

uint64_t sub_1B182F67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 *v9;
  __n128 v11;

  v11.n128_u32[2] = 0;
  v11.n128_u64[0] = 0;
  sub_1B186B5BC(a3, &v11, a3, a4, a5, a6, a7, a8);
  v9 = (__n128 *)malloc_type_calloc(1uLL, 0x10uLL, 0x1000040451B5BE8uLL);
  *(_QWORD *)(a2 + 56) = v9;
  *v9 = v11;
  return 1;
}

const __CFString *sub_1B182F6E0()
{
  return CFSTR("transform");
}

uint64_t sub_1B182F6F0()
{
  uint64_t v0;

  if (qword_1EEF65CC0 != -1)
    dispatch_once_f(&qword_1EEF65CC0, &qword_1ED4CF720, (dispatch_function_t)sub_1B182DCA8);
  v0 = sub_1B179CB90(qword_1ED4CF720, 0x110uLL);
  sub_1B19BAA84(v0);
  *(_QWORD *)(v0 + 160) = -1;
  *(_DWORD *)(v0 + 156) = 1065353216;
  *(_QWORD *)(v0 + 80) = sub_1B182F67C;
  *(_QWORD *)(v0 + 88) = sub_1B182F2DC;
  *(_QWORD *)(v0 + 96) = sub_1B182F6E0;
  *(_QWORD *)(v0 + 112) = sub_1B182F4D0;
  return v0;
}

void sub_1B182F790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  *(_QWORD *)(a1 + 160) = a2;
}

void sub_1B182F7DC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  *(float *)(a1 + 156) = a2;
}

__n128 sub_1B182F830(__n128 *a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = result;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    result = v10;
  }
  result.n128_u32[3] = a1[9].n128_u32[3];
  a1[9] = result;
  return result;
}

uint64_t sub_1B182F888(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B182F8B4()
{
  if (qword_1EEF65CC8 != -1)
    dispatch_once_f(&qword_1EEF65CC8, &qword_1ED4CF730, (dispatch_function_t)sub_1B182F888);
  return qword_1ED4CF730;
}

CFTypeRef sub_1B182F8FC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  result = *(CFTypeRef *)(a1 + 144);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 144) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 144) = result;
  }
  return result;
}

CFTypeRef sub_1B182F974(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  result = *(CFTypeRef *)(a1 + 136);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 136) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 136) = result;
  }
  return result;
}

void sub_1B182F9EC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  v11 = 0.0001;
  if (a2 >= 0.0001)
    v11 = a2;
  *(float *)(a1 + 168) = v11;
}

BOOL sub_1B182FA5C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v73;
  float32x4_t v74;
  _QWORD v75[4];
  float32x4_t v76;
  float32x4_t v77;
  uint64_t *v78;
  uint64_t *v79;
  _QWORD *v80;
  uint64_t v81;
  _QWORD *v82;
  _OWORD v83[2];
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  float *v90;
  uint64_t v91;
  int v92;
  float32x4_t v93;
  float32x4_t v94;
  _QWORD v95[4];
  uint64_t v96;
  unint64_t *v97;
  _BYTE v98[80];
  uint64_t v99;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  v11 = sub_1B17C6244(a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (!v11)
    return 0;
  v19 = sub_1B187B260(v11, v12, v13, v14, v15, v16, v17, v18);
  v20 = *(_QWORD *)(a2 + 16);
  v21 = *(_QWORD *)(v20 + 136);
  v99 = v21;
  v22 = v21 != 0;
  if (v21)
  {
    v23 = v19;
    v96 = 0xA00000000;
    v97 = (unint64_t *)v98;
    v95[0] = 0;
    v95[1] = v95;
    v95[2] = 0x2000000000;
    v95[3] = &v96;
    if (*(_BYTE *)(v20 + 152))
    {
      sub_1B182FD58((uint64_t)&v96, v21);
      sub_1B182FD58((uint64_t)&v96, (uint64_t)a3);
    }
    else
    {
      sub_1B17A7C40((uint64_t)&v96, &v99);
      *(_QWORD *)&v83[0] = a3;
      sub_1B17A7C40((uint64_t)&v96, v83);
    }
    v24 = 126 - 2 * __clz(v96);
    if ((_DWORD)v96)
      v25 = v24;
    else
      v25 = 0;
    sub_1B1830590((uint64_t)v97, &v97[v96], (uint64_t)v83, v25, 1);
    v94.i32[2] = 0;
    v94.i64[0] = 0;
    sub_1B186B5BC((uint64_t)a3, (__n128 *)&v94, v26, v27, v28, v29, v30, v31);
    v93.i32[2] = 0;
    v93.i64[0] = 0;
    sub_1B186B5BC(v99, (__n128 *)&v93, v32, v33, v34, v35, v36, v37);
    v38 = vsubq_f32(v94, v93);
    v39 = vmulq_f32(v38, v38);
    v39.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).u64[0];
    v39.f32[0] = sqrtf(v39.f32[0]);
    v40 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
    __asm { FMOV            V2.4S, #1.0 }
    v73 = v40;
    v89 = 0;
    v90 = (float *)&v89;
    v91 = 0x2000000000;
    v92 = 2139095039;
    v85 = 0;
    v86 = &v85;
    v87 = 0x2000000000;
    v88 = 0;
    v84 = 0;
    memset(v83, 0, sizeof(v83));
    v75[0] = MEMORY[0x1E0C809B0];
    v75[1] = 0x40000000;
    v75[2] = sub_1B182FDC4;
    v75[3] = &unk_1E63D6EE8;
    v78 = &v85;
    v79 = &v89;
    v76 = v93;
    v77 = v94;
    v80 = v95;
    v81 = v20;
    v82 = a3;
    sub_1B197CAD0((uint64_t)v75, (uint64_t)v83);
    *(_QWORD *)&v83[0] = *(_QWORD *)(v20 + 160);
    sub_1B197D60C(v23, (uint64_t)v83);
    if (*((_BYTE *)v86 + 24))
    {
      v74 = vmlaq_n_f32(v93, v73, v90[6] - *(float *)(v20 + 168));
      v53 = (const void *)sub_1B19C45CC(a4, v46, v47, v48, v49, v50, v51, v52);
      v61 = (void *)sub_1B19C4614(a4, v54, v55, v56, v57, v58, v59, v60);
      v69 = sub_1B179E250(8, v62, v63, v64, v65, v66, v67, v68);
      sub_1B17C58FC(v53, v61, &v74, v69, 6, 0, v70, v71);
    }
    _Block_object_dispose(&v85, 8);
    _Block_object_dispose(&v89, 8);
    _Block_object_dispose(v95, 8);
    if (HIDWORD(v96) && v97 != (unint64_t *)v98)
      free(v97);
  }
  return v22;
}

uint64_t sub_1B182FD58(uint64_t a1, uint64_t a2)
{
  _QWORD v4[5];
  uint64_t v5;

  v5 = a2;
  sub_1B17A7C40(a1, &v5);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_1B1831044;
  v4[3] = &unk_1E63D6F08;
  v4[4] = a1;
  return sub_1B186B018(v5, (uint64_t)v4);
}

void sub_1B182FDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  BOOL v18;
  float v19;
  unint64_t v20;
  unsigned int *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  simd_float4x4 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeRef v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const __CFArray *v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CFIndex v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  int32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float v82;
  const void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  BOOL v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  uint64_t v112;
  _QWORD v113[4];
  float32x4_t v114;
  float32x4_t v115;
  int8x16_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  float v120;
  float v121;
  _OWORD v122[3];
  uint64_t v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  simd_float4x4 v134;
  simd_float4x4 v135;

  if (a3 >= 1)
  {
    v128 = v13;
    v129 = v12;
    v130 = v11;
    v131 = v10;
    v132 = v8;
    v133 = v9;
    v14 = a3;
    v15 = a2;
    v17 = 0;
    v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) != 0;
    v19 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
    do
    {
      v20 = *(_QWORD *)(v15 + 8 * v17);
      v21 = *(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
      v22 = *v21;
      if (!(_DWORD)v22)
        goto LABEL_30;
      v23 = (unint64_t *)*((_QWORD *)v21 + 1);
      v24 = &v23[v22];
      do
      {
        v25 = v22 >> 1;
        v26 = &v23[v22 >> 1];
        v28 = *v26;
        v27 = v26 + 1;
        v22 += ~(v22 >> 1);
        if (v28 < v20)
          v23 = v27;
        else
          v22 = v25;
      }
      while (v22);
      if (v23 == v24 || v20 < *v23)
      {
LABEL_30:
        v29 = sub_1B1868FA0(*(_QWORD *)(v15 + 8 * v17), a2, a3, a4, a5, a6, a7, a8);
        v37 = (simd_float4x4 *)sub_1B1869AC8(v20, v30, v31, v32, v33, v34, v35, v36);
        v134 = *v37;
        v101 = (float32x4_t)v37->columns[0];
        v102 = (float32x4_t)v134.columns[1];
        v103 = (float32x4_t)v134.columns[2];
        v135 = __invert_f4(*v37);
        v107 = (float32x4_t)v135.columns[1];
        v108 = (float32x4_t)v135.columns[0];
        v110 = (float32x4_t)v135.columns[3];
        v104 = *(float32x4_t *)(a1 + 32);
        v105 = (float32x4_t)v135.columns[2];
        v106 = *(float32x4_t *)(a1 + 48);
        v45 = sub_1B17A1ACC(v29, v38, v39, v40, v41, v42, v43, v44);
        v53 = sub_1B1874BE0((uint64_t)v45, v46, v47, v48, v49, v50, v51, v52);
        if (v53)
        {
          v54 = (uint64_t)v53;
          v55 = sub_1B1875E70((uint64_t)v45, 0, a3, a4, a5, a6, a7, a8);
          if (sub_1B17EDAE0((uint64_t)v55, v56, v57, v58, v59, v60, v61, v62))
          {
            v100 = v18;
            v112 = sub_1B17ED6C4((uint64_t)v55, a2, a3, a4, a5, a6, a7, a8);
            v64 = v63;
            v70 = sub_1B1875D94((uint64_t)v45, 0, 0, v65, v66, v67, v68, v69);
            if ((v64 & 0xFF00000000) != 0x800000000)
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed.  - Only vector3 type is supported."), a3, a4, a5, a6, a7, a8, (uint64_t)"positions.type == kCFXBaseTypeVector3");
            if (v54 >= 1)
            {
              v71 = 0;
              v72 = vmulq_f32(v101, v101);
              v73 = vmulq_f32(v102, v102);
              v74 = vmulq_f32(v103, v103);
              v75 = fmaxf(fmaxf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1))).f32[0]), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).f32[0])), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v73, 2), vaddq_f32(v73, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v73.f32, 1))).f32[0]));
              v76 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v110, v105, v104, 2), v107, *(float32x2_t *)v104.f32, 1), v108, v104.f32[0]);
              v77 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v110, v105, v106, 2), v107, *(float32x2_t *)v106.f32, 1), v108, v106.f32[0]);
              v78 = vsubq_f32(v77, v76);
              v79 = (int32x4_t)vmulq_f32(v78, v78);
              v79.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v79, 2), vadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1))).u32[0];
              *(float32x2_t *)v74.f32 = vrsqrte_f32((float32x2_t)v79.u32[0]);
              *(float32x2_t *)v74.f32 = vmul_f32(*(float32x2_t *)v74.f32, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32)));
              v109 = vmulq_n_f32(v78, vmul_f32(*(float32x2_t *)v74.f32, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32))).f32[0]);
              v111 = v76;
              v80 = vsubq_f32(v76, v77);
              v81 = vmulq_f32(v80, v80);
              v82 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).f32[0]);
              do
              {
                v83 = sub_1B1874C3C((uint64_t)v45, v71, 0, a4, a5, a6, a7, a8);
                v127 = 0;
                v125 = 0u;
                v126 = 0u;
                v124 = 0u;
                sub_1B17A4804((uint64_t)v83, v70, v84, v85, v86, v87, v88, v89, (uint64_t)&v124);
                if ((BYTE10(v125) & 0xFA) != 0)
                {
                  sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Occluder can only process triangles."), v90, v91, v92, v93, v94, v95, v97);
                }
                else
                {
                  v122[0] = v124;
                  v122[1] = v125;
                  v122[2] = v126;
                  v123 = v127;
                  v113[0] = MEMORY[0x1E0C809B0];
                  v113[1] = 0x40000000;
                  v113[2] = sub_1B18301C8;
                  v113[3] = &unk_1E63D6EC0;
                  v117 = v112;
                  v118 = v64;
                  v119 = v64 - 1;
                  v114 = v111;
                  v115 = v109;
                  v120 = v82;
                  v121 = v75;
                  v116 = vextq_s8(*(int8x16_t *)(a1 + 64), *(int8x16_t *)(a1 + 64), 8uLL);
                  sub_1B17A5198((uint64_t *)v122, (uint64_t)v113, v90, v91, v92, v93, v94, v95);
                }
                ++v71;
              }
              while (v54 != v71);
            }
            v15 = a2;
            v14 = a3;
            if (*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) < v19)
            {
              v96 = *(_QWORD *)(*(_QWORD *)(a1 + 88) + 144);
              if (v96)
              {
                if ((sub_1B182DB2C(v96, v20, *(_QWORD *)(a1 + 96), a4, a5, a6, a7, a8) & 1) != 0)
                {
                  sub_1B182DBAC(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 144), v20, *(_QWORD *)(a1 + 96), a4, a5, a6, a7, a8);
                }
                else
                {
                  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v100;
                  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = v19;
                }
              }
            }
            v18 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) != 0;
            v19 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
          }
        }
      }
      ++v17;
    }
    while (v17 != v14);
  }
}

float32_t sub_1B18301C8(float32x4_t *a1, uint64_t a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  unsigned __int32 v12;
  __int32 v13;
  uint64_t v14;
  float32x4_t v15;
  __int32 v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  float v34;
  float32x4_t v35[3];
  float32x4_t v36;

  if (a4 <= 2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected vertex count"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"vertexCountPerPolygon >= 3");
  v10 = a1[5].i64[0];
  v11 = a1[5].u8[13];
  v12 = a1[6].u32[0];
  v13 = *a3;
  if (v12 < *a3)
    v13 = a1[6].i32[0];
  v14 = v10 + (v13 * v11);
  v15.i64[0] = *(_QWORD *)v14;
  v15.i32[2] = *(_DWORD *)(v14 + 8);
  v15.i32[3] = 1.0;
  if (v12 >= a3[1])
    v16 = a3[1];
  else
    v16 = a1[6].i32[0];
  v17 = v10 + (v16 * v11);
  v18.i64[0] = *(_QWORD *)v17;
  v18.i32[2] = *(_DWORD *)(v17 + 8);
  v18.i32[3] = 1.0;
  if (v12 >= a3[2])
    v12 = a3[2];
  v19 = v10 + v12 * v11;
  v20.i64[0] = *(_QWORD *)v19;
  v20.i32[2] = *(_DWORD *)(v19 + 8);
  v20.i32[3] = 1.0;
  v21 = vsubq_f32(v18, v15);
  v22 = vsubq_f32(v20, v15);
  v23 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), vnegq_f32(v21)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
  v24 = (int32x4_t)vmulq_f32(v23, v23);
  v24.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), *(float32x2_t *)v24.i8)).u32[0];
  *(float32x2_t *)v22.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
  *(float32x2_t *)v22.f32 = vmul_f32(*(float32x2_t *)v22.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32)));
  v25 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vmul_f32(*(float32x2_t *)v22.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v22.f32, *(float32x2_t *)v22.f32))).f32[0]);
  v26 = vmulq_f32(v15, v25);
  v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)));
  v28 = a1[2];
  v29 = a1[3];
  v30 = vmulq_f32(v28, v25);
  v31 = vmulq_f32(v29, v25);
  v32 = vdivq_f32(vsubq_f32(v27, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1)))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)))).f32[0];
  if (v32 > 0.0 && v32 < a1[6].f32[1])
  {
    v36 = vmlaq_n_f32(v28, v29, v32);
    v35[0] = v15;
    v35[1] = v18;
    v35[2] = v20;
    v15.f32[0] = v32 * a1[6].f32[2];
    if (v15.f32[0] < *(float *)(*(_QWORD *)(a1[4].i64[0] + 8) + 24))
    {
      v34 = v32;
      if (sub_1B182200C(v35, &v36))
      {
        *(_BYTE *)(*(_QWORD *)(a1[4].i64[1] + 8) + 24) = 1;
        v15.f32[0] = v34 * a1[6].f32[2];
        *(_DWORD *)(*(_QWORD *)(a1[4].i64[0] + 8) + 24) = v15.i32[0];
      }
    }
  }
  return v15.f32[0];
}

const __CFString *sub_1B18303A8()
{
  return CFSTR("transform");
}

uint64_t sub_1B18303B8()
{
  uint64_t v0;

  if (qword_1EEF65CC8 != -1)
    dispatch_once_f(&qword_1EEF65CC8, &qword_1ED4CF730, (dispatch_function_t)sub_1B182F888);
  v0 = sub_1B179CB90(qword_1ED4CF730, 0xA0uLL);
  sub_1B19BAA84(v0);
  *(_QWORD *)(v0 + 160) = 1;
  *(_DWORD *)(v0 + 168) = 925353388;
  *(_BYTE *)(v0 + 152) = 1;
  *(_QWORD *)(v0 + 88) = sub_1B182FA5C;
  *(_QWORD *)(v0 + 96) = sub_1B18303A8;
  return v0;
}

CFStringRef sub_1B1830450(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintAcceleration>"));
}

CFStringRef sub_1B1830470(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintAcceleration>"));
}

void *sub_1B1830490(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    sub_1B179C4A8();
  return operator new(48 * a2);
}

void sub_1B18304D8(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(const void **)(a1 + 144);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 144) = 0;
  }
  sub_1B19BA9D8(a1);
}

CFStringRef sub_1B1830518(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintAvoidOccluder %p>"), a1);
}

CFStringRef sub_1B1830554(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintAvoidOccluder %p>"), a1);
}

uint64_t sub_1B1830590(uint64_t result, unint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  char v18;
  BOOL v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  BOOL v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;

  v8 = (unint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v20 = *(a2 - 1);
        v21 = *v9;
        if (v20 < *v9)
        {
          *v9 = v20;
          *(a2 - 1) = v21;
        }
        return result;
      case 3uLL:
        return sub_1B1830928(v9, v9 + 1, a2 - 1);
      case 4uLL:
        return sub_1B1830C80(v9, v9 + 1, v9 + 2, a2 - 1);
      case 5uLL:
        return sub_1B1830D00(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
      default:
        if (v12 > 191)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              return (uint64_t)sub_1B1830DA4(v9, a2, a2, a3);
            return result;
          }
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1B1830928(&v9[v13 >> 1], v9, a2 - 1);
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          else
          {
            sub_1B1830928(v9, &v9[v13 >> 1], a2 - 1);
            sub_1B1830928(v9 + 1, v15 - 1, a2 - 2);
            sub_1B1830928(v9 + 2, &v9[v14 + 1], a2 - 3);
            sub_1B1830928(v15 - 1, v15, &v9[v14 + 1]);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_12;
          }
          if (*(v9 - 1) >= *v9)
          {
            result = (uint64_t)sub_1B18309B0(v9, (uint64_t *)a2);
            v9 = (unint64_t *)result;
            goto LABEL_17;
          }
LABEL_12:
          v17 = sub_1B1830A60(v9, a2);
          if ((v18 & 1) == 0)
            goto LABEL_15;
          v19 = sub_1B1830B14(v9, v17);
          v9 = v17 + 1;
          result = sub_1B1830B14(v17 + 1, a2);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_15:
            result = sub_1B1830590(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_17:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        v22 = v9 + 1;
        v24 = v9 == a2 || v22 == a2;
        if ((a5 & 1) != 0)
        {
          if (!v24)
          {
            v25 = 0;
            v26 = v9;
            do
            {
              v28 = *v26;
              v27 = v26[1];
              v26 = v22;
              if (v27 < v28)
              {
                v29 = v25;
                while (1)
                {
                  *(unint64_t *)((char *)v9 + v29 + 8) = v28;
                  if (!v29)
                    break;
                  v28 = *(unint64_t *)((char *)v9 + v29 - 8);
                  v29 -= 8;
                  if (v27 >= v28)
                  {
                    v30 = (unint64_t *)((char *)v9 + v29 + 8);
                    goto LABEL_42;
                  }
                }
                v30 = v9;
LABEL_42:
                *v30 = v27;
              }
              v22 = v26 + 1;
              v25 += 8;
            }
            while (v26 + 1 != a2);
          }
        }
        else if (!v24)
        {
          do
          {
            v32 = *v8;
            v31 = v8[1];
            v8 = v22;
            if (v31 < v32)
            {
              do
              {
                *v22 = v32;
                v32 = *(v22 - 2);
                --v22;
              }
              while (v31 < v32);
              *v22 = v31;
            }
            v22 = v8 + 1;
          }
          while (v8 + 1 != a2);
        }
        return result;
    }
  }
}

uint64_t sub_1B1830928(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

unint64_t *sub_1B18309B0(unint64_t *a1, uint64_t *a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v2 = *a1;
  if (*a1 >= *(a2 - 1))
  {
    v5 = (uint64_t *)(a1 + 1);
    do
    {
      v3 = (unint64_t *)v5;
      if (v5 >= a2)
        break;
      ++v5;
    }
    while (v2 >= *v3);
  }
  else
  {
    v3 = a1;
    do
    {
      v4 = v3[1];
      ++v3;
    }
    while (v2 >= v4);
  }
  if (v3 < (unint64_t *)a2)
  {
    do
      v6 = *--a2;
    while (v2 < v6);
  }
  if (v3 < (unint64_t *)a2)
  {
    v7 = *v3;
    v8 = *a2;
    do
    {
      *v3 = v8;
      *a2 = v7;
      do
      {
        v9 = v3[1];
        ++v3;
        v7 = v9;
      }
      while (v2 >= v9);
      do
      {
        v10 = *--a2;
        v8 = v10;
      }
      while (v2 < v10);
    }
    while (v3 < (unint64_t *)a2);
  }
  if (v3 - 1 != a1)
    *a1 = *(v3 - 1);
  *(v3 - 1) = v2;
  return v3;
}

unint64_t *sub_1B1830A60(unint64_t *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = 0;
  v3 = *a1;
  do
    v4 = a1[++v2];
  while (v4 < v3);
  v5 = &a1[v2];
  v6 = &a1[v2 - 1];
  if (v2 == 1)
  {
    do
    {
      if (v5 >= a2)
        break;
      v8 = *--a2;
    }
    while (v8 >= v3);
  }
  else
  {
    do
      v7 = *--a2;
    while (v7 >= v3);
  }
  if (v5 < a2)
  {
    v9 = *a2;
    v10 = &a1[v2];
    v11 = a2;
    do
    {
      *v10 = v9;
      *v11 = v4;
      do
      {
        v12 = v10[1];
        ++v10;
        v4 = v12;
      }
      while (v12 < v3);
      do
      {
        v13 = *--v11;
        v9 = v13;
      }
      while (v13 >= v3);
    }
    while (v10 < v11);
    v6 = v10 - 1;
  }
  if (v6 != a1)
    *a1 = *v6;
  *v6 = v3;
  return v6;
}

BOOL sub_1B1830B14(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1B1830928(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1B1830C80(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1B1830D00(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1B1830928(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t sub_1B1830C80(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  result = sub_1B1830928(a1, a2, a3);
  v9 = *a3;
  if (*a4 < *a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*a3 < *a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*a2 < *a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B1830D00(unint64_t *a1, unint64_t *a2, unint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  result = sub_1B1830C80(a1, a2, a3, a4);
  v11 = *a4;
  if (*a5 < *a4)
  {
    *a4 = *a5;
    *a5 = v11;
    v12 = *a3;
    if (*a4 < *a3)
    {
      *a3 = *a4;
      *a4 = v12;
      v13 = *a2;
      if (*a3 < *a2)
      {
        *a2 = *a3;
        *a3 = v13;
        v14 = *a1;
        if (*a2 < *a1)
        {
          *a1 = *a2;
          *a2 = v14;
        }
      }
    }
  }
  return result;
}

unint64_t *sub_1B1830DA4(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  unint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;

  if (a1 != a2)
  {
    v6 = a2;
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1B1830F80((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = v6;
    if (v6 != a3)
    {
      v14 = v6;
      do
      {
        v15 = *v14;
        if (*v14 < *a1)
        {
          *v14 = *a1;
          *a1 = v15;
          sub_1B1830F80((uint64_t)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = (unint64_t)v8 >> 3;
      do
      {
        v17 = 0;
        v18 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v17 + 1];
          v21 = (2 * v17) | 1;
          v17 = 2 * v17 + 2;
          if (v17 >= v16)
          {
            v22 = *v20;
            v17 = v21;
          }
          else
          {
            v22 = *v20;
            if (*v20 >= v20[1])
            {
              v17 = v21;
            }
            else
            {
              v22 = v20[1];
              ++v20;
            }
          }
          *v19 = v22;
          v19 = v20;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        if (v20 == --v6)
        {
          *v20 = v18;
        }
        else
        {
          *v20 = *v6;
          *v6 = v18;
          v23 = (char *)v20 - (char *)a1 + 8;
          if (v23 >= 9)
          {
            v24 = (((unint64_t)v23 >> 3) - 2) >> 1;
            v25 = &a1[v24];
            v26 = *v25;
            v27 = *v20;
            if (*v25 < *v20)
            {
              do
              {
                *v20 = v26;
                v20 = v25;
                if (!v24)
                  break;
                v24 = (v24 - 1) >> 1;
                v25 = &a1[v24];
                v26 = *v25;
              }
              while (*v25 < v27);
              *v20 = v27;
            }
          }
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1B1830F80(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (a3 >= 2)
  {
    v4 = (uint64_t)a4 - result;
    v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      v6 = v4 >> 2;
      v7 = (v4 >> 2) + 1;
      v8 = (unint64_t *)(result + 8 * v7);
      v9 = v6 + 2;
      if (v9 >= a3)
      {
        v10 = *v8;
      }
      else
      {
        v10 = *v8;
        if (*v8 < v8[1])
        {
          v10 = v8[1];
          ++v8;
          v7 = v9;
        }
      }
      v11 = *a4;
      if (v10 >= *a4)
      {
        do
        {
          *a4 = v10;
          a4 = v8;
          if (v5 < v7)
            break;
          v12 = (2 * v7) | 1;
          v8 = (unint64_t *)(result + 8 * v12);
          v7 = 2 * v7 + 2;
          if (v7 >= a3)
          {
            v10 = *v8;
            v7 = v12;
          }
          else
          {
            v10 = *v8;
            if (*v8 >= v8[1])
            {
              v7 = v12;
            }
            else
            {
              v10 = v8[1];
              ++v8;
            }
          }
        }
        while (v10 >= v11);
        *a4 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B1831044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  v10 = a2;
  if (a2 && sub_1B186989C(a2, a2, a3, a4, a5, a6, a7, a8))
    sub_1B17A7C40(*(_QWORD *)(a1 + 32), &v10);
  return 0;
}

id sub_1B183108C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CGContext *v18;
  CGContext *v19;
  void *Data;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  size_t BitsPerComponent;
  size_t BitsPerPixel;
  size_t v30;
  id v31;
  void *v32;
  size_t BytesPerRow;
  const char *v34;
  uint64_t v35;
  size_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  void *isCube;
  uint64_t v46;
  BOOL v47;
  double v48;

  if ((a2 & 1) == 0 && sub_1B1809FF4((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8))
  {
    v9 = sub_1B1809F74(a1, a2, a3, a4, a5, a6, a7, a8);
    v10 = sub_1B183108C(v9, 1);
    CFRelease(v9);
    return (id)v10;
  }
  if (sub_1B180B014((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8) == 2)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXImageToMDLTexture not supported for image 3D"), v12, v13, v14, v15, v16, v17, v46);
  }
  else
  {
    v18 = (CGContext *)sub_1B180ADA4((uint64_t)a1, 1, v12, v13, v14, v15, v16, v17);
    if (v18)
    {
      v19 = v18;
      Data = CGBitmapContextGetData(v18);
      v48 = sub_1B18097E8((uint64_t)a1, v21, v22, v23, v24, v25, v26, v27);
      BitsPerComponent = CGBitmapContextGetBitsPerComponent(v19);
      BitsPerPixel = CGBitmapContextGetBitsPerPixel(v19);
      if (BitsPerComponent == 8)
      {
        v30 = BitsPerPixel >> 3;
        v31 = objc_alloc(MEMORY[0x1E0CC7808]);
        v32 = (void *)MEMORY[0x1E0C99D50];
        BytesPerRow = CGBitmapContextGetBytesPerRow(v19);
        v35 = objc_msgSend_dataWithBytes_length_(v32, v34, (uint64_t)Data, (unint64_t)vmuls_lane_f32((float)BytesPerRow, *(float32x2_t *)&v48, 1));
        v36 = CGBitmapContextGetBytesPerRow(v19);
        v47 = sub_1B180B014((uint64_t)a1, v37, v38, v39, v40, v41, v42, v43) == 3;
        isCube = (void *)objc_msgSend_initWithData_topLeftOrigin_name_dimensions_rowStride_channelCount_channelEncoding_isCube_(v31, v44, v35, 1, 0, v36, v30, 1, COERCE_DOUBLE(vcvt_s32_f32(*(float32x2_t *)&v48)), v47);
        CFRelease(v19);
        return isCube;
      }
      CFRelease(v19);
    }
  }
  return 0;
}

uint64_t sub_1B1831230(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CGImage *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v5 = (CGImage *)objc_msgSend_imageFromTexture(a1, a2, a3, a4);
  v6 = sub_1B1809F34(v5);
  if (objc_msgSend_isCube(a1, v7, v8, v9))
  {
    sub_1B180B1A0(v6);
    if (!sub_1B1809FF4(v6, v10, v11, v12, v13, v14, v15, v16))
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Failed to create cubemap from Model I/O texture"), v17, v18, v19, v20, v21, v22, v24);
  }
  return v6;
}

uint64_t sub_1B18312BC(void *a1, char *a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t result;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[4];
  _OWORD v53[4];
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_transform(a1, a2, a3, a4))
  {
    v13 = (void *)objc_msgSend_transform(a1, v10, v11, v12);
    objc_msgSend_matrix(v13, v14, v15, v16);
    v17 = 0;
    v52[0] = v18;
    v52[1] = v19;
    v52[2] = v20;
    v52[3] = v21;
    do
    {
      v53[v17] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a5, COERCE_FLOAT(v52[v17])), (float32x4_t)a6, *(float32x2_t *)&v52[v17], 1), (float32x4_t)a7, (float32x4_t)v52[v17], 2), (float32x4_t)a8, (float32x4_t)v52[v17], 3);
      ++v17;
    }
    while (v17 != 4);
    a5 = (__n128)v53[0];
    a6 = (__n128)v53[1];
    a7 = (__n128)v53[2];
    a8 = (__n128)v53[3];
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v25 = objc_alloc(MEMORY[0x1E0CC7818]);
    v29 = (void *)objc_msgSend_initWithMatrix_(v25, v26, v27, v28, a5.n128_f64[0], a6.n128_f64[0], a7.n128_f64[0], a8.n128_f64[0]);
    objc_msgSend_setTransform_(a1, v30, (uint64_t)v29, v31);

    return objc_msgSend_addObject_(a2, v32, (uint64_t)a1, v33);
  }
  else
  {
    result = objc_msgSend_children(a1, v22, v23, v24);
    if (result)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v38 = (void *)objc_msgSend_children(a1, v35, v36, v37);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v48, (uint64_t)v54, 16);
      if (result)
      {
        v40 = result;
        v41 = *(_QWORD *)v49;
        do
        {
          v42 = 0;
          do
          {
            if (*(_QWORD *)v49 != v41)
              objc_enumerationMutation(v38);
            sub_1B18312BC(*(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v42++), a2, a5, a6, a7, a8);
          }
          while (v40 != v42);
          result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v43, (uint64_t)&v48, (uint64_t)v54, 16);
          v40 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

char *sub_1B18314B4(void *a1)
{
  char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v14 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 16);
  v15 = *(__n128 *)MEMORY[0x1E0C83FF0];
  v12 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 48);
  v13 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 32);
  v2 = (char *)objc_opt_new();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v3, (uint64_t)&v16, (uint64_t)v20, 16);
  if (v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)v17;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(a1);
        sub_1B18312BC(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v9++), v2, v5, v6, v15, v14, v13, v12);
      }
      while (v7 != v9);
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v10, (uint64_t)&v16, (uint64_t)v20, 16);
    }
    while (v7);
  }
  return v2;
}

uint64_t sub_1B18315D4(void *a1, char *a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t result;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _OWORD v52[4];
  _OWORD v53[4];
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_transform(a1, a2, a3, a4))
  {
    v13 = (void *)objc_msgSend_transform(a1, v10, v11, v12);
    objc_msgSend_matrix(v13, v14, v15, v16);
    v17 = 0;
    v52[0] = v18;
    v52[1] = v19;
    v52[2] = v20;
    v52[3] = v21;
    do
    {
      v53[v17] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)a5, COERCE_FLOAT(v52[v17])), (float32x4_t)a6, *(float32x2_t *)&v52[v17], 1), (float32x4_t)a7, (float32x4_t)v52[v17], 2), (float32x4_t)a8, (float32x4_t)v52[v17], 3);
      ++v17;
    }
    while (v17 != 4);
    a5 = (__n128)v53[0];
    a6 = (__n128)v53[1];
    a7 = (__n128)v53[2];
    a8 = (__n128)v53[3];
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v25 = objc_alloc(MEMORY[0x1E0CC7818]);
    v29 = (void *)objc_msgSend_initWithMatrix_(v25, v26, v27, v28, a5.n128_f64[0], a6.n128_f64[0], a7.n128_f64[0], a8.n128_f64[0]);
    objc_msgSend_setTransform_(a1, v30, (uint64_t)v29, v31);

    return objc_msgSend_addObject_(a2, v32, (uint64_t)a1, v33);
  }
  else
  {
    result = objc_msgSend_children(a1, v22, v23, v24);
    if (result)
    {
      v50 = 0u;
      v51 = 0u;
      v48 = 0u;
      v49 = 0u;
      v38 = (void *)objc_msgSend_children(a1, v35, v36, v37);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v48, (uint64_t)v54, 16);
      if (result)
      {
        v40 = result;
        v41 = *(_QWORD *)v49;
        do
        {
          v42 = 0;
          do
          {
            if (*(_QWORD *)v49 != v41)
              objc_enumerationMutation(v38);
            sub_1B18315D4(*(_QWORD *)(*((_QWORD *)&v48 + 1) + 8 * v42++), a2, a5, a6, a7, a8);
          }
          while (v40 != v42);
          result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v43, (uint64_t)&v48, (uint64_t)v54, 16);
          v40 = result;
        }
        while (result);
      }
    }
  }
  return result;
}

char *sub_1B18317CC(void *a1)
{
  char *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v14 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 16);
  v15 = *(__n128 *)MEMORY[0x1E0C83FF0];
  v12 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 48);
  v13 = *(__n128 *)(MEMORY[0x1E0C83FF0] + 32);
  v2 = (char *)objc_opt_new();
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v3, (uint64_t)&v16, (uint64_t)v20, 16);
  if (v4)
  {
    v7 = v4;
    v8 = *(_QWORD *)v17;
    do
    {
      v9 = 0;
      do
      {
        if (*(_QWORD *)v17 != v8)
          objc_enumerationMutation(a1);
        sub_1B18315D4(*(void **)(*((_QWORD *)&v16 + 1) + 8 * v9++), v2, v5, v6, v15, v14, v13, v12);
      }
      while (v7 != v9);
      v7 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v10, (uint64_t)&v16, (uint64_t)v20, 16);
    }
    while (v7);
  }
  return v2;
}

BOOL sub_1B18318EC(void *a1, char *a2, void *a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  id v19;
  const char *v20;
  uint64_t inited;
  const char *v22;
  uint64_t v23;
  id v24;
  const char *v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  _QWORD v66[2];
  _QWORD v67[3];

  v67[2] = *MEMORY[0x1E0C80C00];
  v7 = (void *)objc_msgSend_objectForKeyedSubscript_(a3, a2, (uint64_t)CFSTR("kSceneSourcePreserveOriginalTopology"), a4);
  if (v7)
    v11 = objc_msgSend_BOOLValue(v7, v8, v9, v10);
  else
    v11 = sub_1B179FDD8();
  v14 = v11;
  if (objc_msgSend_instancesRespondToSelector_(MEMORY[0x1E0CC7780], v12, (uint64_t)sel_initThroughSCNKitBridgeWithURL_options_error_, v13))
  {
    v66[0] = *MEMORY[0x1E0CC7710];
    v66[1] = CFSTR("kMDLAssetDefaultUSDColorSpace");
    v67[0] = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v15, v14, v16);
    v67[1] = sub_1B179D2EC();
    v18 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v17, (uint64_t)v67, (uint64_t)v66, 2);
    v19 = objc_alloc(MEMORY[0x1E0CC7780]);
    inited = objc_msgSend_initThroughSCNKitBridgeWithURL_options_error_(v19, v20, (uint64_t)a2, v18, 0);
  }
  else
  {
    v24 = objc_alloc(MEMORY[0x1E0CC7780]);
    inited = objc_msgSend_initThroughSCNKitBridgeWithURL_preserveTopology_error_(v24, v25, (uint64_t)a2, v14, 0);
  }
  v26 = (void *)inited;
  v27 = (void *)objc_msgSend_valueForKey_(a3, v22, (uint64_t)CFSTR("VFXWorldLoaderLoadTexturesInCPUMemory"), v23);
  if (objc_msgSend_BOOLValue(v27, v28, v29, v30))
  {
    v34 = (void *)objc_msgSend_pathExtension(a2, v31, v32, v33);
    v38 = (void *)objc_msgSend_lowercaseString(v34, v35, v36, v37);
    if (objc_msgSend_isEqualToString_(v38, v39, (uint64_t)CFSTR("usdz"), v40))
      objc_msgSend_loadTextures(v26, v31, v32, v33);
  }
  v41 = (void *)objc_msgSend_currentThread(MEMORY[0x1E0CB3978], v31, v32, v33);
  v45 = (void *)objc_msgSend_threadDictionary(v41, v42, v43, v44);
  v49 = objc_msgSend_resolver(v26, v46, v47, v48);
  objc_msgSend_setValue_forKey_(v45, v50, v49, (uint64_t)CFSTR("VFX_MDLCurrentAssetResolver"));
  if (v26)
  {
    v54 = objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v51, v52, v53);
    objc_msgSend_loadMDLAsset_options_context_(a1, v55, (uint64_t)v26, (uint64_t)a3, v54);
    v59 = (void *)objc_msgSend_currentThread(MEMORY[0x1E0CB3978], v56, v57, v58);
    v63 = (void *)objc_msgSend_threadDictionary(v59, v60, v61, v62);
    objc_msgSend_setValue_forKey_(v63, v64, 0, (uint64_t)CFSTR("VFX_MDLCurrentAssetResolver"));

  }
  return v26 != 0;
}

id VFXNodesToMDLAsset(void *a1)
{
  id result;
  const char *v3;
  void *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  result = objc_alloc_init(MEMORY[0x1E0CC7780]);
  if (result)
  {
    v4 = result;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v3, (uint64_t)&v14, (uint64_t)v18, 16);
    if (v5)
    {
      v8 = v5;
      v9 = *(_QWORD *)v15;
      do
      {
        v10 = 0;
        do
        {
          if (*(_QWORD *)v15 != v9)
            objc_enumerationMutation(a1);
          v11 = objc_msgSend_objectWithVFXNode_(MEMORY[0x1E0CC77C8], v6, *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * v10), v7);
          objc_msgSend_addObject_(v4, v12, v11, v13);
          ++v10;
        }
        while (v8 != v10);
        v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v6, (uint64_t)&v14, (uint64_t)v18, 16);
      }
      while (v8);
    }
    return v4;
  }
  return result;
}

id sub_1B1831BF0(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_jointPaths(a1, a2, a3, a4);
  v6 = (void *)objc_opt_new();
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v7, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v8)
  {
    v11 = v8;
    v12 = *(_QWORD *)v23;
    while (2)
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v23 != v12)
          objc_enumerationMutation(v5);
        v14 = *(_QWORD *)(*((_QWORD *)&v22 + 1) + 8 * i);
        v15 = objc_msgSend_objectForKeyedSubscript_(a2, v9, v14, v10);
        if (!v15)
        {
          NSLog(CFSTR("While creating VFXSkinner: Could not find VFXNode %@"), v14);
          objc_msgSend_removeAllObjects(v6, v18, v19, v20);
          return v6;
        }
        objc_msgSend_addObject_(v6, v16, v15, v17);
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v9, (uint64_t)&v22, (uint64_t)v26, 16);
      if (v11)
        continue;
      break;
    }
  }
  return v6;
}

id sub_1B1831D2C(void *a1)
{
  void *v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[4];
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  simd_float4x4 v45;

  v2 = (void *)objc_opt_new();
  v6 = (void *)objc_msgSend_jointBindTransforms(a1, v3, v4, v5);
  v10 = objc_msgSend_bytes(v6, v7, v8, v9);
  v14 = (void *)objc_msgSend_jointBindTransforms(a1, v11, v12, v13);
  v18 = objc_msgSend_length(v14, v15, v16, v17);
  objc_msgSend_meshBindTransform(a1, v19, v20, v21);
  v38 = v23;
  v39 = v22;
  v36 = v25;
  v37 = v24;
  if (v18 >= 0x40)
  {
    v26 = 0;
    v27 = v18 >> 6;
    do
    {
      v45 = __invert_f4(*(simd_float4x4 *)(v10 + (v26 << 6)));
      v31 = 0;
      v40[0] = v39;
      v40[1] = v38;
      v40[2] = v37;
      v40[3] = v36;
      do
      {
        *(__int128 *)((char *)&v41 + v31 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v45.columns[0], COERCE_FLOAT(v40[v31])), (float32x4_t)v45.columns[1], *(float32x2_t *)&v40[v31], 1), (float32x4_t)v45.columns[2], (float32x4_t)v40[v31], 2), (float32x4_t)v45.columns[3], (float32x4_t)v40[v31], 3);
        ++v31;
      }
      while (v31 != 4);
      v32 = objc_msgSend_valueWithVFXMatrix4_(MEMORY[0x1E0CB3B18], v28, v29, v30, *(double *)&v41, *(double *)&v42, *(double *)&v43, *(double *)&v44);
      objc_msgSend_addObject_(v2, v33, v32, v34);
      ++v26;
    }
    while (v26 != v27);
  }
  return v2;
}

void *sub_1B1831E40(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  double *v5;
  uint64_t v6;
  double v7;
  double v8;
  void *v9;
  unint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;

  v5 = *(double **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 == *(_QWORD *)a2)
    return 0;
  v7 = *v5;
  v8 = *(double *)(v4 - 8) - *v5;
  if (v8 < 2.22044605e-16)
    return 0;
  v13 = v6 >> 3;
  v14 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], (const char *)a2, v6 >> 3, a4);
  v20 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v15, v13, v16);
  v21 = 0;
  if (v13 <= 1)
    v22 = 1;
  else
    v22 = v13;
  do
  {
    v23 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v17, v18, v19, (*(double *)(*(_QWORD *)a2 + 8 * v21) - v7) / v8);
    LODWORD(v24) = *(_DWORD *)(*a3 + 4 * v21);
    v28 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v25, v26, v27, v24);
    objc_msgSend_addObject_(v14, v29, v23, v30);
    objc_msgSend_addObject_(v20, v31, v28, v32);
    ++v21;
  }
  while (v22 != v21);
  v9 = (void *)objc_msgSend_animationWithKeyPath_(MEMORY[0x1E0CD2798], v17, a1, v19);
  objc_msgSend_setValues_(v9, v33, (uint64_t)v20, v34);
  objc_msgSend_setKeyTimes_(v9, v35, (uint64_t)v14, v36);
  objc_msgSend_setDuration_(v9, v37, v38, v39, v8);
  objc_msgSend_setBeginTime_(v9, v40, v41, v42, v7);
  objc_msgSend_setAdditive_(v9, v43, 0, v44);
  objc_msgSend_setRemovedOnCompletion_(v9, v45, 0, v46);
  return v9;
}

id sub_1B1831FA4(void *a1)
{
  void *v2;
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  id v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  void *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  double v123;
  _DWORD *v124;
  _DWORD *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  id v129;
  uint64_t v131;
  void *__p;
  void *v133;
  uint64_t v134;

  v2 = (void *)objc_opt_new();
  v3 = (void *)objc_opt_new();
  v7 = (void *)objc_msgSend_shapeSetTargetCounts(a1, v4, v5, v6);
  v11 = objc_msgSend_count(v7, v8, v9, v10);
  v15 = (void *)objc_msgSend_targetShapes(a1, v12, v13, v14);
  v19 = objc_msgSend_count(v15, v16, v17, v18);
  if (v19)
  {
    v23 = v19;
    for (i = 0; i != v23; ++i)
    {
      v25 = (void *)objc_msgSend_targetShapes(a1, v20, v21, v22);
      v28 = (void *)objc_msgSend_objectAtIndexedSubscript_(v25, v26, i, v27);
      v31 = (void *)objc_msgSend_modelWithMDLMesh_(VFXModel, v29, (uint64_t)v28, v30);
      v35 = objc_msgSend_name(v28, v32, v33, v34);
      objc_msgSend_setName_(v31, v36, v35, v37);
      objc_msgSend_setEdgeCreasesSource_(v31, v38, 0, v39);
      objc_msgSend_setEdgeCreasesElement_(v31, v40, 0, v41);
      v45 = objc_msgSend_mesh(v31, v42, v43, v44);
      objc_msgSend_addObject_(v3, v46, v45, v47);
    }
  }
  if (v11)
  {
    v131 = (uint64_t)v3;
    v48 = objc_alloc(MEMORY[0x1E0C99DE8]);
    v54 = (void *)objc_msgSend_initWithCapacity_(v48, v49, 0, v50);
    v55 = 0;
    v56 = 0;
    do
    {
      v57 = (void *)objc_msgSend_shapeSetTargetCounts(a1, v51, v52, v53);
      v60 = (void *)objc_msgSend_objectAtIndexedSubscript_(v57, v58, v55, v59);
      v64 = objc_msgSend_unsignedIntegerValue(v60, v61, v62, v63);
      v65 = v64 - 1;
      if (v64 != 1)
      {
        v66 = v65 + v56;
        do
        {
          v67 = (void *)objc_msgSend_shapeSetTargetWeights(a1, v51, v52, v53);
          v70 = (void *)objc_msgSend_objectAtIndexedSubscript_(v67, v68, v56, v69);
          objc_msgSend_addObject_(v54, v71, (uint64_t)v70, v72);
          objc_msgSend_floatValue(v70, v73, v74, v75);
          if (v76 >= 1.0)
          {
            objc_msgSend_floatValue(v70, v51, v52, v53);
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Found in-between morph target with influence weight of %f"), v77, v78, v79, v80, v81, v82, (uint64_t)"influenceWeightNumber.floatValue < 1.f");
          }
          ++v56;
          --v65;
        }
        while (v65);
        v56 = v66;
      }
      ++v56;
      ++v55;
    }
    while (v55 != v11);
    v83 = objc_msgSend_shapeSetTargetCounts(a1, v51, v52, v53);
    v3 = (void *)v131;
    objc_msgSend_setTargets_withInBetweenTargetCounts_inBetweenWeights_(v2, v84, v131, v83, v54);

  }
  else
  {
    objc_msgSend_setTargets_(v2, v20, (uint64_t)v3, v22);
  }
  v88 = (void *)objc_msgSend_weights(a1, v85, v86, v87);
  v92 = objc_msgSend_elementCount(v88, v89, v90, v91);
  v133 = 0;
  v134 = 0;
  __p = 0;
  if (v92)
  {
    v96 = v92;
    sub_1B183C0A8(&__p, v92);
    v97 = (char *)v133;
    bzero(v133, 4 * v96);
    v133 = &v97[4 * v96];
  }
  v98 = (void *)objc_msgSend_keyTimes(v88, v93, v94, v95);
  if (objc_msgSend_count(v98, v99, v100, v101))
  {
    v105 = __p;
    v106 = objc_msgSend_elementCount(v88, v102, v103, v104);
    v110 = (void *)objc_msgSend_keyTimes(v88, v107, v108, v109);
    v113 = (void *)objc_msgSend_objectAtIndexedSubscript_(v110, v111, 0, v112);
    objc_msgSend_doubleValue(v113, v114, v115, v116);
    objc_msgSend_getFloatArray_maxCount_atTime_(v88, v117, (uint64_t)v105, v106);
  }
  v118 = v3;
  v122 = (void *)objc_opt_new();
  v124 = __p;
  v125 = v133;
  if (__p != v133)
  {
    do
    {
      LODWORD(v123) = *v124;
      v126 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v119, v120, v121, v123);
      objc_msgSend_addObject_(v122, v127, v126, v128);
      ++v124;
    }
    while (v124 != v125);
  }
  objc_msgSend_setWeights_(v2, v119, (uint64_t)v122, v121);

  v129 = v2;
  if (__p)
  {
    v133 = __p;
    operator delete(__p);
  }
  return v129;
}

void sub_1B18322B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B18322D4(void *a1, void *a2, void *a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  char *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t i;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  double v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  void *v44;
  int isEqualToString;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  void *__p;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;

  if (objc_msgSend_morpher(a2, (const char *)a2, (uint64_t)a3, a4))
  {
    v8 = (void *)objc_msgSend_weights(a1, v5, v6, v7);
    if (objc_msgSend_isAnimated(v8, v9, v10, v11))
    {
      v15 = objc_msgSend_timeSampleCount(v8, v12, v13, v14);
      v20 = objc_msgSend_elementCount(v8, v16, v17, v18);
      v66 = 0;
      v67 = 0;
      v68 = 0;
      if (v15)
      {
        sub_1B183C0E4(&v66, v15);
        v21 = (char *)v67;
        bzero(v67, 8 * v15);
        v67 = &v21[8 * v15];
        objc_msgSend_getTimes_maxCount_(v8, v22, (uint64_t)v66, v15);
      }
      else
      {
        objc_msgSend_getTimes_maxCount_(v8, v19, 0, 0);
      }
      v25 = v20 * v15;
      v63 = 0;
      v64 = 0;
      v65 = 0;
      if (v20 * v15)
      {
        sub_1B183C0A8(&v63, v20 * v15);
        v26 = (char *)v64;
        bzero(v64, 4 * v25);
        v64 = &v26[4 * v25];
      }
      if (v20)
        objc_msgSend_getFloatArray_maxCount_(v8, v23, (uint64_t)v63, v20 * v15);
      __p = 0;
      v61 = 0;
      v62 = 0;
      if (v15)
      {
        sub_1B183C0A8(&__p, v15);
        v27 = (char *)v61;
        bzero(v61, 4 * v15);
        v61 = &v27[4 * v15];
      }
      if (v20)
      {
        v28 = 0;
        for (i = 0; i != v20; ++i)
        {
          if (v15)
          {
            v30 = __p;
            v31 = (char *)v63 + v28;
            v32 = v15;
            do
            {
              *v30++ = *v31;
              v31 += v20;
              --v32;
            }
            while (v32);
          }
          v33 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v23, (uint64_t)CFSTR("morpher.weights[%d]"), v24, i);
          v35 = sub_1B1831E40(v33, (uint64_t)&v66, &__p, v34);
          v37 = v35;
          if (v35)
          {
            objc_msgSend_duration(v35, v23, v36, v24);
            if (v38 != 0.0)
            {
              v39 = (void *)objc_msgSend_valueForKey_(a3, v23, (uint64_t)CFSTR("kSceneSourceAnimationLoadingMode"), v24);
              v44 = v39;
              if (v39)
              {
                isEqualToString = objc_msgSend_isEqualToString_(v39, v40, (uint64_t)CFSTR("playRepeatedly"), v42);
                LODWORD(v49) = 2139095040;
                if (!isEqualToString)
                  *(float *)&v49 = 0.0;
                objc_msgSend_setRepeatCount_(v37, v46, v47, v48, v49);
                v52 = objc_msgSend_isEqualToString_(v44, v50, (uint64_t)CFSTR("playRepeatedly"), v51) ^ 1;
                objc_msgSend_setRemovedOnCompletion_(v37, v53, v52, v54);
              }
              else
              {
                LODWORD(v43) = 2139095040;
                objc_msgSend_setRepeatCount_(v37, v40, v41, v42, v43);
                objc_msgSend_setRemovedOnCompletion_(v37, v56, 0, v57);
              }
              objc_msgSend_addAnimation_forKey_(a2, v55, (uint64_t)v37, 0);
            }
          }
          v28 += 4;
        }
      }
      if (__p)
      {
        v61 = __p;
        operator delete(__p);
      }
      if (v63)
      {
        v64 = v63;
        operator delete(v63);
      }
      if (v66)
      {
        v67 = v66;
        operator delete(v66);
      }
    }
  }
}

void sub_1B183256C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void sub_1B183311C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,_QWORD *a59)
{
  sub_1B183C9F4(a59);
  _Unwind_Resume(a1);
}

void sub_1B1833180(void *a1, char *a2, uint64_t a3, void *a4, uint64_t **a5)
{
  void *v5;
  void *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  void **v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t j;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t k;
  const char *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t m;
  void *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  double v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  const char *v121;
  uint64_t v122;
  double v123;
  const char *v124;
  uint64_t v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  void *v129;
  const char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  const char *v144;
  char v145;
  void *v146;
  const char *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t n;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  void *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  uint64_t *v171;
  void **v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  double *v182;
  uint64_t ii;
  void *v184;
  uint64_t v185;
  void *v186;
  id obj;
  void *v188;
  uint64_t *v190;
  void *v191;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  void *__p;
  void *v207;
  uint64_t v208;
  uint64_t *v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uint64_t *v222;
  _BYTE v223[128];
  _BYTE v224[128];
  _BYTE v225[128];
  _BYTE v226[128];
  _BYTE v227[128];
  float64x2_t v228[8];
  uint64_t v229;

  v5 = (void *)a3;
  v229 = *MEMORY[0x1E0C80C00];
  v210 = 0u;
  v211 = 0u;
  v212 = 0u;
  v213 = 0u;
  v7 = (void *)objc_msgSend_children(a1, a2, a3, (uint64_t)a4);
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v8, (uint64_t)&v210, (uint64_t)v226, 16);
  if (v11)
  {
    v12 = *(_QWORD *)v211;
    do
    {
      for (i = 0; i != v11; ++i)
      {
        if (*(_QWORD *)v211 != v12)
          objc_enumerationMutation(v7);
        sub_1B1833180(*(_QWORD *)(*((_QWORD *)&v210 + 1) + 8 * i), a2, v5, a4, a5);
      }
      v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v14, (uint64_t)&v210, (uint64_t)v226, 16);
    }
    while (v11);
  }
  v18 = objc_msgSend_componentConformingToProtocol_(a1, v9, (uint64_t)&unk_1EF0198D8, v10);
  if (v18)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
      v19 = (void *)v18;
    else
      v19 = 0;
  }
  else
  {
    v19 = 0;
  }
  v23 = (uint64_t *)sub_1B183C314(a1, v15, v16, v17);
  v209 = v23;
  if (v23)
  {
    v24 = (void *)objc_opt_new();
    __p = 0;
    v207 = 0;
    v208 = 0;
    sub_1B183C370(a1, MEMORY[0x1E0C83FF0], v24, &__p);
    if (objc_msgSend_count(v24, v25, v26, v27))
    {
      v190 = sub_1B183C61C(a5, &v209)[1];
      v28 = (void *)MEMORY[0x1E0C99DE8];
      v32 = (void *)objc_msgSend_jointPaths(v23, v29, v30, v31);
      v36 = objc_msgSend_count(v32, v33, v34, v35);
      v191 = (void *)objc_msgSend_arrayWithCapacity_(v28, v37, v36, v38);
      v42 = (uint64_t *)objc_msgSend_skeleton(v19, v39, v40, v41);
      v222 = v42;
      v43 = (void **)sub_1B183C61C(a5, &v222);
      if (objc_msgSend_jointPaths(v19, v44, v45, v46))
        v50 = (void *)objc_msgSend_jointPaths(v19, v47, v48, v49);
      else
        v50 = (void *)objc_msgSend_jointPaths(v42, v47, v48, v49);
      v52 = v50;
      v220 = 0u;
      v221 = 0u;
      v218 = 0u;
      v219 = 0u;
      v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v50, v51, (uint64_t)&v218, (uint64_t)v228, 16);
      obj = v24;
      v188 = v19;
      v186 = v5;
      v56 = 0;
      if (v55)
      {
        v57 = *(_QWORD *)v219;
        do
        {
          for (j = 0; j != v55; ++j)
          {
            if (*(_QWORD *)v219 != v57)
              objc_enumerationMutation(v52);
            v59 = *(_QWORD *)(*((_QWORD *)&v218 + 1) + 8 * j);
            v61 = objc_msgSend_objectForKeyedSubscript_(*v43, v53, v59, v54);
            if (v61)
            {
              objc_msgSend_addObject_(v191, v60, v61, v62);
            }
            else
            {
              if (!v56)
              {
                v63 = objc_alloc(MEMORY[0x1E0C99DE8]);
                v67 = objc_msgSend_count(v52, v64, v65, v66);
                v56 = (void *)objc_msgSend_initWithCapacity_(v63, v68, v67, v69);
              }
              objc_msgSend_addObject_(v56, v60, v59, v62);
            }
          }
          v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v218, (uint64_t)v228, 16);
        }
        while (v55);
        if (v56)
        {
          v5 = v186;
          v24 = obj;
          v19 = v188;
          if (objc_msgSend_count(v56, v53, v70, v54))
          {
            v216 = 0u;
            v217 = 0u;
            v214 = 0u;
            v215 = 0u;
            v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v71, (uint64_t)&v214, (uint64_t)v227, 16);
            if (v72)
            {
              v73 = *(_QWORD *)v215;
              do
              {
                for (k = 0; k != v72; ++k)
                {
                  if (*(_QWORD *)v215 != v73)
                    objc_enumerationMutation(v56);
                  NSLog(CFSTR("Bad joint path detected for joint: %@"), *(_QWORD *)(*((_QWORD *)&v214 + 1) + 8 * k));
                }
                v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v56, v75, (uint64_t)&v214, (uint64_t)v227, 16);
              }
              while (v72);
            }
          }
        }
        else
        {
          v5 = v186;
          v24 = obj;
          v19 = v188;
        }
      }

      v79 = sub_1B183C6E8(v19, v76, v77, v78);
      v204 = 0u;
      v205 = 0u;
      v202 = 0u;
      v203 = 0u;
      v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(v24, v80, (uint64_t)&v202, (uint64_t)v225, 16);
      if (v84)
      {
        v85 = *(_QWORD *)v203;
        do
        {
          for (m = 0; m != v84; ++m)
          {
            if (*(_QWORD *)v203 != v85)
              objc_enumerationMutation(obj);
            v87 = *(void **)(*((_QWORD *)&v202 + 1) + 8 * m);
            v88 = objc_msgSend_path(v87, v81, v82, v83);
            v91 = (void *)objc_msgSend_objectForKeyedSubscript_(a2, v89, v88, v90);
            v95 = (void *)objc_msgSend_model(v91, v92, v93, v94);
            v99 = objc_msgSend_mesh(v95, v96, v97, v98);
            v103 = sub_1B1837CBC(v87, v100, v101, v102);
            v107 = sub_1B1837D64(v87, v104, v105, v106);
            v109 = (void *)objc_msgSend_skinnerWithBaseMesh_bones_boneInverseBindTransforms_boneWeights_boneIndices_(VFXSkinner, v108, v99, (uint64_t)v191, v79, v103, v107);
            v112 = objc_msgSend_componentConformingToProtocol_(v87, v110, (uint64_t)&unk_1EF0198D8, v111);
            if (v87 != a1 && (v116 = (void *)v112) != 0 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
            {
              objc_msgSend_geometryBindTransform(v116, v113, v114, v115);
              v117 = sub_1B183C8DC(v228);
              objc_msgSend_setBaseMeshBindTransform_(v109, v118, v119, v120, v117);
            }
            else
            {
              if (v188)
                objc_msgSend_geometryBindTransform(v188, v113, v114, v115);
              else
                memset(v228, 0, sizeof(v228));
              v123 = sub_1B183C8DC(v228);
              objc_msgSend_setBaseMeshBindTransform_(v109, v124, v125, v126, v123);
            }
            objc_msgSend_setSkeleton_(v109, v121, (uint64_t)v190, v122);
            objc_msgSend_setSkinner_(v91, v127, (uint64_t)v109, v128);
          }
          v24 = obj;
          v84 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v81, (uint64_t)&v202, (uint64_t)v225, 16);
        }
        while (v84);
        v5 = v186;
        v19 = v188;
      }
    }
    else
    {
      v190 = 0;
    }

    if (__p)
    {
      v207 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v190 = 0;
  }
  if (v19)
  {
    v129 = (void *)objc_msgSend_jointAnimation(v19, v20, v21, v22);
    if (v129)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (!v190)
        {
          v133 = objc_msgSend_path(a1, v130, v131, v132);
          v190 = (uint64_t *)objc_msgSend_objectForKeyedSubscript_(a2, v134, v133, v135);
        }
        v136 = objc_msgSend_name(v129, v130, v131, v132);
        v142 = objc_msgSend_objectForKeyedSubscript_(a4, v137, v136, v138);
        if (v142)
        {
          v143 = objc_msgSend_name(v129, v139, v140, v141);
          objc_msgSend_addAnimation_forKey_(v190, v144, v142, v143);
          v145 = 1;
        }
        else
        {
          v145 = 0;
        }
        v200 = 0u;
        v201 = 0u;
        v198 = 0u;
        v199 = 0u;
        v146 = (void *)objc_msgSend_animations(v5, v139, v140, v141);
        v149 = objc_msgSend_countByEnumeratingWithState_objects_count_(v146, v147, (uint64_t)&v198, (uint64_t)v224, 16);
        if (v149)
        {
          v150 = *(_QWORD *)v199;
          do
          {
            for (n = 0; n != v149; ++n)
            {
              if (*(_QWORD *)v199 != v150)
                objc_enumerationMutation(v146);
              v152 = *(void **)(*((_QWORD *)&v198 + 1) + 8 * n);
              if (v152 != v129)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v155 = (void *)sub_1B183C910(v129, v148, v153, v154);
                  v159 = sub_1B183C910(v152, v156, v157, v158);
                  if (v155)
                  {
                    if (v159)
                    {
                      if (objc_msgSend_isEqualToString_(v155, v148, v159, v160))
                      {
                        v163 = objc_msgSend_name(v152, v148, v161, v162);
                        v168 = objc_msgSend_objectForKeyedSubscript_(a4, v164, v163, v165);
                        if (v168)
                        {
                          v169 = objc_msgSend_name(v152, v148, v166, v167);
                          objc_msgSend_addAnimation_forKey_(v190, v170, v168, v169);
                          v145 = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
            v149 = objc_msgSend_countByEnumeratingWithState_objects_count_(v146, v148, (uint64_t)&v198, (uint64_t)v224, 16);
          }
          while (v149);
        }
        v171 = v209;
        if (v209)
        {
          if ((v145 & 1) != 0)
          {
            v172 = (void **)sub_1B183C61C(a5, &v209);
            v196 = 0u;
            v197 = 0u;
            v194 = 0u;
            v195 = 0u;
            v176 = (void *)objc_msgSend_jointPaths(v171, v173, v174, v175);
            v180 = objc_msgSend_countByEnumeratingWithState_objects_count_(v176, v177, (uint64_t)&v194, (uint64_t)v223, 16);
            if (v180)
            {
              v181 = *(_QWORD *)v195;
              v182 = (double *)MEMORY[0x1E0C83FF0];
              do
              {
                for (ii = 0; ii != v180; ++ii)
                {
                  if (*(_QWORD *)v195 != v181)
                    objc_enumerationMutation(v176);
                  v184 = (void *)objc_msgSend_objectForKeyedSubscript_(*v172, v178, *(_QWORD *)(*((_QWORD *)&v194 + 1) + 8 * ii), v179);
                  if (v184)
                    objc_msgSend_setTransform_(v184, v178, v185, v179, *v182, v182[2], v182[4], v182[6]);
                }
                v180 = objc_msgSend_countByEnumeratingWithState_objects_count_(v176, v178, (uint64_t)&v194, (uint64_t)v223, 16);
              }
              while (v180);
            }
          }
        }
      }
    }
  }
}

void sub_1B1833938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B18339E8(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3 || !objc_msgSend_rootNode(a3, a2, (uint64_t)a3, a4))
    return 0;
  v9 = objc_msgSend_rootNode(a3, v6, v7, v8);
  return MEMORY[0x1E0DE7D20](a1, sel_assetWithVFXNode_, v9, v10);
}

uint64_t sub_1B1833A38(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!a3 || !objc_msgSend_rootNode(a3, a2, (uint64_t)a3, a4))
    return 0;
  v10 = objc_msgSend_rootNode(a3, v7, v8, v9);
  return MEMORY[0x1E0DE7D20](a1, sel_assetWithVFXNode_bufferAllocator_, v10, a4);
}

uint64_t sub_1B1833A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    return MEMORY[0x1E0DE7D20](a1, sel_assetWithVFXNode_bufferAllocator_, a3, 0);
  else
    return 0;
}

id sub_1B1833AB0(objc_class *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  if (!a3)
    return 0;
  v6 = [a1 alloc];
  v9 = (void *)objc_msgSend_initWithBufferAllocator_(v6, v7, a4, v8);
  v11 = objc_msgSend_objectWithVFXNode_bufferAllocator_(MEMORY[0x1E0CC77C8], v10, a3, a4);
  objc_msgSend_addObject_(v9, v12, v11, v13);
  return v9;
}

uint64_t sub_1B1833B18(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_objectWithVFXNode_bufferAllocator_(a1, a2, a3, 0);
}

id sub_1B1833B20(objc_class *a1, uint64_t a2, void *a3, uint64_t a4)
{
  id v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  double v15;
  double v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  double v68;
  double v69;
  double v70;
  double v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  v6 = objc_alloc_init(a1);
  v7 = (void *)objc_opt_new();
  objc_msgSend_setTransform_(v6, v8, (uint64_t)v7, v9);

  objc_msgSend_transform(a3, v10, v11, v12);
  v70 = v14;
  v71 = v13;
  v68 = v16;
  v69 = v15;
  v20 = (void *)objc_msgSend_transform(v6, v17, v18, v19);
  objc_msgSend_setMatrix_(v20, v21, v22, v23, v71, v70, v69, v68);
  v27 = objc_msgSend_name(a3, v24, v25, v26);
  objc_msgSend_setName_(v6, v28, v27, v29);
  objc_setAssociatedObject(v6, CFSTR("VFXMDLAssociatedObject"), a3, (void *)0x301);
  objc_setAssociatedObject(a3, CFSTR("VFXMDLAssociatedObject"), v6, 0);
  v33 = objc_msgSend_camera(a3, v30, v31, v32);
  if (v33)
  {
    v37 = objc_msgSend_cameraWithVFXCamera_(MEMORY[0x1E0CC7788], v34, v33, v36);
    objc_msgSend_addChild_(v6, v38, v37, v39);
  }
  v40 = (void *)objc_msgSend_light(a3, v34, v35, v36);
  if (v40)
  {
    v44 = (uint64_t)v40;
    if (objc_msgSend_type(v40, v41, v42, v43) == 4)
      v47 = objc_msgSend_lightProbeWithVFXLight_node_(MEMORY[0x1E0CC7798], v45, v44, (uint64_t)a3);
    else
      v47 = objc_msgSend_lightWithVFXLight_(MEMORY[0x1E0CC7790], v45, v44, v46);
    objc_msgSend_addChild_(v6, v48, v47, v49);
  }
  v50 = objc_msgSend_model(a3, v41, v42, v43);
  if (v50)
  {
    v54 = objc_msgSend_meshWithVFXModel_bufferAllocator_(MEMORY[0x1E0CC77B0], v51, v50, a4);
    objc_msgSend_addChild_(v6, v55, v54, v56);
  }
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v57 = (void *)objc_msgSend_childNodes(a3, v51, v52, v53);
  v59 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v58, (uint64_t)&v72, (uint64_t)v76, 16);
  if (v59)
  {
    v61 = v59;
    v62 = *(_QWORD *)v73;
    do
    {
      v63 = 0;
      do
      {
        if (*(_QWORD *)v73 != v62)
          objc_enumerationMutation(v57);
        v64 = objc_msgSend_objectWithVFXNode_bufferAllocator_(MEMORY[0x1E0CC77C8], v60, *(_QWORD *)(*((_QWORD *)&v72 + 1) + 8 * v63), a4);
        objc_msgSend_addChild_(v6, v65, v64, v66);
        ++v63;
      }
      while (v61 != v63);
      v61 = objc_msgSend_countByEnumeratingWithState_objects_count_(v57, v60, (uint64_t)&v72, (uint64_t)v76, 16);
    }
    while (v61);
  }
  return v6;
}

void sub_1B1833D68(uint64_t a1, uint64_t *a2, char **a3, uint64_t a4, uint64_t a5, int a6, unint64_t a7, int a8, char a9)
{
  unint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  char **v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t i;
  int v32;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  int v43;
  int *v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  char *v49;
  int v50;
  int v51;
  int *v52;
  uint64_t v53;
  _DWORD *v54;
  int v55;
  uint64_t v56;
  int *v57;
  int *v58;
  int v59;
  int v60;
  int v61;
  char *v62;
  unint64_t v63;
  uint64_t j;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  int v75;
  char *v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  int *v92;
  uint64_t v93;
  _DWORD *v95;
  uint64_t v98;
  unint64_t v99;
  int v100;
  _QWORD *v101;
  int v102;
  char **v103;

  v14 = a6;
  v15 = (_QWORD *)operator new[]();
  v98 = operator new[]();
  v16 = a6 + 1;
  v100 = a6;
  v17 = operator new[]();
  v18 = a3;
  v95 = (_DWORD *)v17;
  v99 = v14;
  v19 = a7 / v14;
  if ((int)(a7 / v14) < 1)
  {
LABEL_91:
    MEMORY[0x1B5E22E00](v15, 0x1000C8000313F17, v18);
    MEMORY[0x1B5E22E00](v98, 0x1000C8052888210);
    JUMPOUT(0x1B5E22E00);
  }
  v20 = 0;
  v21 = 0;
  v22 = v16;
  v23 = (a6 - 1);
  v24 = (int)v23;
  v25 = v18 + 2;
  v26 = v23 & ~((int)v23 >> 31);
  v27 = v19;
  v28 = a6;
  v29 = v16;
  v30 = 4 * v99;
  v92 = (int *)(v17 + 4);
  v93 = v29;
  v91 = a6 - 1;
  v103 = v18;
  v101 = v18 + 2;
  v89 = v22;
  v90 = a8;
  v87 = (int)v23;
  v88 = v23;
  v86 = v26;
  while (1)
  {
    if (v100 <= 0)
    {
      v34 = *v15;
      v36 = *a2;
      v37 = *v15 * v99;
      if (*(_DWORD *)(*a2 + 4 * v37) != -1)
        goto LABEL_24;
    }
    else
    {
      for (i = 0; i != v100; ++i)
      {
        v32 = v21 + i * v19;
        if (a9)
          v32 = v20 + i;
        switch(a5)
        {
          case 1:
            v33 = *(unsigned __int8 *)(a4 + v32);
            goto LABEL_12;
          case 2:
            v33 = *(unsigned __int16 *)(a4 + 2 * v32);
            goto LABEL_12;
          case 4:
            v33 = *(unsigned int *)(a4 + 4 * v32);
            goto LABEL_12;
          case 8:
            v33 = *(_QWORD *)(a4 + 8 * v32);
LABEL_12:
            v15[i] = v33;
            break;
          default:
            break;
        }
      }
      v34 = *v15;
      v35 = (_DWORD *)v98;
      v36 = *a2;
      v37 = *v15 * v99;
      v38 = v30 * *v15;
      v39 = v100;
      do
      {
        *v35++ = *(_DWORD *)(v36 + v38);
        v38 += 4;
        --v39;
      }
      while (v39);
      if (*(_DWORD *)(v36 + 4 * v37) != -1)
      {
LABEL_24:
        v42 = (int *)v98;
        v43 = *(_DWORD *)(v98 + 4 * v24);
        v44 = (int *)(v15 + 1);
        v45 = v26;
        do
        {
          if (!v45)
            goto LABEL_85;
          v47 = *v44;
          v44 += 2;
          v46 = v47;
          v48 = *v42++;
          --v45;
        }
        while (v48 == v46);
        if (v43 < 0)
        {
          v62 = v18[1];
          v63 = ((v62 - *v18) >> 2) / v22;
        }
        else
        {
          v49 = *v18;
          v50 = *(_DWORD *)(v98 + 4 * v24);
          while (1)
          {
            v51 = v50;
            if (v100 < 0)
              break;
            v52 = (int *)&v49[4 * v50 * (int)v22];
            v53 = v93;
            v54 = v95;
            do
            {
              v55 = *v52++;
              *v54++ = v55;
              --v53;
            }
            while (v53);
            if (v100 < 2)
              break;
            v50 = v95[v99];
            v56 = v91;
            v57 = v92;
            v58 = (int *)(v15 + 1);
            while (1)
            {
              v60 = *v58;
              v58 += 2;
              v59 = v60;
              v61 = *v57++;
              if (v61 != v59)
                break;
              if (!--v56)
                goto LABEL_42;
            }
            if (v50 < 0)
              goto LABEL_43;
          }
          v51 = v43;
LABEL_42:
          LODWORD(v34) = v51 + a8;
          if (v51 + a8 != -1)
            goto LABEL_85;
LABEL_43:
          v62 = v18[1];
          v63 = ((v62 - *v18) >> 2) / v22;
          if ((v43 & 0x80000000) == 0)
          {
            *(_DWORD *)&(*v18)[4 * v100 + 4 * v51 * (int)v22] = v63;
            goto LABEL_45;
          }
        }
        *(_DWORD *)(v36 + 4 * (v99 - 1 + v37)) = v63;
LABEL_45:
        v102 = v63;
        if (v100 < 1)
        {
          v66 = v62;
        }
        else
        {
          for (j = 0; j != v100; ++j)
          {
            v65 = v15[j];
            if ((unint64_t)v62 >= *v25)
            {
              v67 = *v18;
              v68 = (v62 - *v18) >> 2;
              v69 = v68 + 1;
              if ((unint64_t)(v68 + 1) >> 62)
                goto LABEL_92;
              v70 = *v25 - (_QWORD)v67;
              if (v70 >> 1 > v69)
                v69 = v70 >> 1;
              if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFFCLL)
                v71 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v71 = v69;
              if (v71)
              {
                v72 = (char *)sub_1B17F7E58((uint64_t)v25, v71);
                v18 = v103;
                v73 = v72;
                v67 = *v103;
                v62 = v103[1];
              }
              else
              {
                v73 = 0;
              }
              v74 = &v73[4 * v68];
              *(_DWORD *)v74 = v65;
              v66 = v74 + 4;
              while (v62 != v67)
              {
                v75 = *((_DWORD *)v62 - 1);
                v62 -= 4;
                *((_DWORD *)v74 - 1) = v75;
                v74 -= 4;
              }
              *v18 = v74;
              v18[1] = v66;
              v18[2] = &v73[4 * v71];
              if (v67)
              {
                operator delete(v67);
                v18 = v103;
              }
              v25 = v101;
              LODWORD(v63) = v102;
            }
            else
            {
              *(_DWORD *)v62 = v65;
              v66 = v62 + 4;
            }
            v18[1] = v66;
            v62 = v66;
          }
        }
        if ((unint64_t)v66 >= *v25)
        {
          v77 = *v18;
          v78 = (v66 - *v18) >> 2;
          v79 = v78 + 1;
          a8 = v90;
          if ((unint64_t)(v78 + 1) >> 62)
LABEL_92:
            abort();
          v80 = *v25 - (_QWORD)v77;
          if (v80 >> 1 > v79)
            v79 = v80 >> 1;
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL)
            v81 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v81 = v79;
          if (v81)
          {
            v82 = (char *)sub_1B17F7E58((uint64_t)v25, v81);
            v18 = v103;
            v83 = v82;
            v77 = *v103;
            v66 = v103[1];
          }
          else
          {
            v83 = 0;
          }
          v84 = &v83[4 * v78];
          *(_DWORD *)v84 = -1;
          v76 = v84 + 4;
          while (v66 != v77)
          {
            v85 = *((_DWORD *)v66 - 1);
            v66 -= 4;
            *((_DWORD *)v84 - 1) = v85;
            v84 -= 4;
          }
          *v18 = v84;
          v18[1] = v76;
          v18[2] = &v83[4 * v81];
          if (v77)
          {
            operator delete(v77);
            v18 = v103;
          }
          v23 = v88;
          v22 = v89;
          v26 = v86;
          v24 = v87;
          v25 = v101;
          LODWORD(v63) = v102;
          v30 = 4 * v99;
          v27 = v19;
        }
        else
        {
          *(_DWORD *)v66 = -1;
          v76 = v66 + 4;
          v22 = v89;
          a8 = v90;
          v24 = v87;
          v23 = v88;
          v27 = v19;
          v26 = v86;
          v30 = 4 * v99;
        }
        LODWORD(v34) = v63 + a8;
        v18[1] = v76;
        goto LABEL_85;
      }
      v40 = 0;
      do
      {
        if (v40 == v23)
        {
          *(_DWORD *)(v36 + 4 * (v37 + v23)) = -1;
          ++v40;
        }
        else
        {
          v41 = v37 + v40++;
          *(_DWORD *)(v36 + 4 * v41) = v15[v40];
        }
      }
      while (v40 != v100);
    }
LABEL_85:
    switch(a5)
    {
      case 1:
        *(_BYTE *)(a1 + v21) = v34;
        break;
      case 2:
        *(_WORD *)(a1 + 2 * v21) = v34;
        break;
      case 4:
        *(_DWORD *)(a1 + 4 * v21) = v34;
        break;
      case 8:
        *(_QWORD *)(a1 + 8 * v21) = (int)v34;
        break;
      default:
        break;
    }
    ++v21;
    v20 += v28;
    if (v21 == v27)
      goto LABEL_91;
  }
}

id sub_1B1834340(void *a1, int a2, char **a3, char **a4, _DWORD *a5)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  char v13;
  int v14;
  unint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  unint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  char hasInterleavedIndicesChannels;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  id v103;
  const char *v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  int v115;

  *a5 = 1;
  v7 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
  if (objc_msgSend_count(a1, v8, v9, v10))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    do
    {
      v16 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v11, v15, v12);
      if (objc_msgSend_indicesChannelCount(v16, v17, v18, v19) >= 2)
      {
        *a5 = objc_msgSend_indicesChannelCount(v16, v20, v21, v22);
        v13 = 1;
      }
      v23 = (void *)objc_msgSend_data(v16, v20, v21, v22);
      v27 = objc_msgSend_length(v23, v24, v25, v26);
      v14 += v27 / objc_msgSend_bytesPerIndex(v16, v28, v29, v30);
      ++v15;
    }
    while (v15 < objc_msgSend_count(a1, v31, v32, v33));
    if ((v13 & 1) != 0)
    {
      v115 = -1;
      sub_1B18345A4(a3, v14, &v115);
      if (objc_msgSend_count(a1, v34, v35, v36))
      {
        v39 = 0;
        do
        {
          v40 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v37, v39, v38);
          hasInterleavedIndicesChannels = objc_msgSend_hasInterleavedIndicesChannels(v40, v41, v42, v43);
          v48 = objc_msgSend_indicesChannelCount(v40, v45, v46, v47);
          v52 = objc_msgSend_bytesPerIndex(v40, v49, v50, v51);
          v56 = objc_msgSend_primitiveCount(v40, v53, v54, v55);
          v60 = (void *)objc_msgSend_data(v40, v57, v58, v59);
          objc_msgSend_bytes(v60, v61, v62, v63);
          v67 = (void *)objc_msgSend_data(v40, v64, v65, v66);
          v71 = objc_msgSend_length(v67, v68, v69, v70);
          if (objc_msgSend_primitiveType(v40, v72, v73, v74) == 1
            || objc_msgSend_primitiveType(v40, v75, v76, v77) != 4)
          {
            v97 = (void *)objc_msgSend_data(v40, v75, v76, v77);
            v93 = objc_msgSend_bytes(v97, v98, v99, v100);
          }
          else
          {
            v78 = v56 * v52;
            v79 = (void *)objc_msgSend_data(v40, v75, v76, v77);
            v83 = (void *)objc_msgSend_data(v40, v80, v81, v82);
            v87 = objc_msgSend_length(v83, v84, v85, v86);
            v89 = (void *)objc_msgSend_subdataWithRange_(v79, v88, v78, v87 - v78);
            v93 = objc_msgSend_bytes(v89, v90, v91, v92);
            v71 = objc_msgSend_length(v89, v94, v95, v96);
          }
          v101 = (v71 / v52);
          v102 = malloc_type_malloc(v101 / v48 * v52, 0xC11D35D3uLL);
          sub_1B1833D68((uint64_t)v102, (uint64_t *)a3, a4, v93, v52, v48, v101, a2, hasInterleavedIndicesChannels);
          v103 = objc_alloc(MEMORY[0x1E0C99D50]);
          v105 = (void *)objc_msgSend_initWithBytesNoCopy_length_(v103, v104, (uint64_t)v102, v101 / v48 * v52);
          objc_msgSend_addObject_(v7, v106, (uint64_t)v105, v107);

          ++v39;
        }
        while (v39 < objc_msgSend_count(a1, v108, v109, v110));
      }
    }
  }
  return v7;
}

char *sub_1B18345A4(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      abort();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = sub_1B183C0A8(a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

uint64_t sub_1B18346B0(void *a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_meshWithVFXModel_bufferAllocator_(a1, a2, a3, 0);
}

uint64_t sub_1B18346B8(void *a1, const char *a2, _QWORD *a3, _QWORD *a4, int a5, int a6, int a7, char *a8)
{
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v41;
  int v44;

  v44 = (int)a2;
  v11 = objc_msgSend_dataStride(a1, a2, (uint64_t)a3, (uint64_t)a4);
  result = objc_msgSend_dataOffset(a1, v12, v13, v14);
  v19 = (int)result;
  v41 = a6;
  if (a6 >= 1)
  {
    v20 = 0;
    v21 = v44 - 1;
    v22 = a8;
    do
    {
      if (v44)
        v23 = *(_DWORD *)(*a3 + 4 * v21);
      else
        v23 = v20;
      v24 = (void *)objc_msgSend_data(a1, v16, v17, v18);
      v28 = objc_msgSend_bytes(v24, v25, v26, v27);
      result = (uint64_t)memcpy(v22, (const void *)(v28 + v19 + (v23 * v11)), v11);
      ++v20;
      v22 += v11;
      v21 += a5;
    }
    while (v41 != v20);
  }
  if (a7 >= 1)
  {
    v29 = a7;
    v30 = &a8[v11 * (uint64_t)v41];
    v31 = 4 * v44;
    v32 = 4 * (a5 + 1);
    do
    {
      v33 = *(_DWORD *)(*a4 + v31);
      v34 = (void *)objc_msgSend_data(a1, v16, v17, v18);
      v38 = objc_msgSend_bytes(v34, v35, v36, v37);
      result = (uint64_t)memcpy(v30, (const void *)(v38 + v19 + (v33 * v11)), v11);
      v30 += v11;
      v31 += v32;
      --v29;
    }
    while (v29);
  }
  return result;
}

id sub_1B1834810(objc_class *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  int v77;
  char *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  int v91;
  char *v92;
  int v93;
  uint64_t v94;
  int v95;
  id v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  id v103;
  const char *v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  void *v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  void *v126;
  id v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t i;
  void *v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  void *v145;
  const char *v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  void *v163;
  const char *v164;
  uint64_t v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  const char *v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  void *v216;
  const char *v217;
  uint64_t v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  const char *v226;
  void *v227;
  const char *v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t j;
  void *v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  void *v241;
  const char *v242;
  uint64_t v243;
  const char *v244;
  uint64_t v245;
  uint64_t v246;
  void *v247;
  const char *v248;
  uint64_t v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const char *v257;
  uint64_t v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  const char *v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  void *v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  void *v278;
  const char *v279;
  uint64_t v280;
  void *v281;
  const char *v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  void *v287;
  const char *v288;
  uint64_t v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  void *v299;
  const char *v300;
  uint64_t v301;
  void *v302;
  const char *v303;
  uint64_t v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  void *v312;
  const char *v313;
  uint64_t v314;
  void *v315;
  const char *v316;
  uint64_t v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  void *Material;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  void *v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  void *v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  const char *v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  void *v357;
  const char *v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  const char *v363;
  uint64_t v364;
  uint64_t v365;
  void *v366;
  const char *v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  const char *v379;
  uint64_t v380;
  const char *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  int v385;
  uint64_t v386;
  void *v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  void *v391;
  const char *v392;
  uint64_t v393;
  void *v394;
  const char *v395;
  uint64_t v396;
  const char *v397;
  uint64_t v398;
  uint64_t v399;
  void *v400;
  const char *v401;
  uint64_t v402;
  void *v403;
  const char *v404;
  uint64_t v405;
  const char *v406;
  uint64_t v407;
  uint64_t v408;
  void *v409;
  const char *v410;
  uint64_t v411;
  void *v412;
  const char *v413;
  uint64_t v414;
  const char *v415;
  uint64_t v416;
  uint64_t v417;
  void *v418;
  const char *v419;
  const char *v420;
  uint64_t v421;
  uint64_t v422;
  void *v423;
  const char *v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  const char *v428;
  uint64_t v429;
  uint64_t v430;
  void *v431;
  const char *v432;
  uint64_t v433;
  void *v434;
  const char *v435;
  uint64_t v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  void *v440;
  const char *v441;
  uint64_t v442;
  void *v443;
  const char *v444;
  uint64_t v445;
  const char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  const char *v450;
  uint64_t v451;
  uint64_t v452;
  void *v453;
  const char *v454;
  uint64_t v455;
  void *v456;
  const char *v457;
  uint64_t v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  const char *v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  const char *v467;
  uint64_t v468;
  void *v469;
  const char *v470;
  uint64_t v471;
  const char *v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  const char *v476;
  void *v477;
  const char *v478;
  uint64_t v479;
  uint64_t v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  void *v484;
  const char *v485;
  uint64_t v486;
  void *v487;
  const char *v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  const char *v492;
  uint64_t v493;
  uint64_t v494;
  void *v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  uint64_t v499;
  const char *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  void *v507;
  const char *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  const char *v512;
  uint64_t v513;
  void *v514;
  const char *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  uint64_t v523;
  float *v524;
  uint64_t v525;
  const char *v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  int v533;
  uint64_t v534;
  uint64_t v535;
  void *v536;
  uint64_t v537;
  void *v538;
  const char *v539;
  uint64_t v540;
  void *v541;
  const char *v542;
  uint64_t v543;
  const char *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  const char *v548;
  uint64_t v549;
  uint64_t v550;
  void *v551;
  const char *v552;
  uint64_t v553;
  void *v554;
  const char *v555;
  uint64_t v556;
  const char *v557;
  uint64_t v558;
  uint64_t v559;
  void *v560;
  const char *v561;
  uint64_t v562;
  void *v563;
  const char *v564;
  uint64_t v565;
  const char *v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  const char *v570;
  void *v571;
  const char *v572;
  const char *v573;
  uint64_t v574;
  uint64_t v575;
  void *v576;
  const char *v577;
  uint64_t v578;
  uint64_t v579;
  char *v580;
  const char *v581;
  uint64_t v582;
  uint64_t v583;
  void *v584;
  const char *v585;
  uint64_t v586;
  void *v587;
  const char *v588;
  uint64_t v589;
  const char *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  const char *v594;
  uint64_t v595;
  uint64_t v596;
  void *v597;
  const char *v598;
  uint64_t v599;
  void *v600;
  const char *v601;
  uint64_t v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  const char *v606;
  uint64_t v607;
  uint64_t v608;
  void *v609;
  const char *v610;
  uint64_t v611;
  void *v612;
  const char *v613;
  uint64_t v614;
  const char *v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  const char *v619;
  uint64_t v620;
  uint64_t v621;
  void *v622;
  const char *v623;
  uint64_t v624;
  void *v625;
  const char *v626;
  uint64_t v627;
  const char *v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631;
  const char *v632;
  void *v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  uint64_t v637;
  const char *v638;
  uint64_t v639;
  uint64_t v640;
  void *v641;
  const char *v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  const char *v646;
  uint64_t v647;
  unint64_t v648;
  unint64_t k;
  const char *v650;
  uint64_t v651;
  uint64_t v652;
  void *v653;
  uint64_t v654;
  const char *v655;
  uint64_t v656;
  const char *v657;
  uint64_t v658;
  void *v659;
  uint64_t v660;
  void *v661;
  const char *v662;
  uint64_t v663;
  uint64_t v664;
  const char *v665;
  uint64_t v666;
  uint64_t v667;
  const char *v668;
  uint64_t v669;
  id v670;
  const char *v671;
  void *v672;
  const char *v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  const char *v677;
  uint64_t v678;
  uint64_t v680;
  objc_class *v681;
  void *v682;
  void *v684;
  id value;
  id v686;
  int v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  id obj;
  id obja;
  id objb;
  int v694;
  int v695;
  uint64_t v696;
  id v697;
  uint64_t v698;
  int v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  unint64_t v705;
  int v706;
  void *v707;
  void *v708;
  uint64_t v709;
  __int128 v710;
  __int128 v711;
  __int128 v712;
  __int128 v713;
  __int128 v714;
  __int128 v715;
  __int128 v716;
  __int128 v717;
  __int128 v718;
  __int128 v719;
  __int128 v720;
  __int128 v721;
  __int128 v722;
  __int128 v723;
  __int128 v724;
  __int128 v725;
  _BYTE v726[12];
  uint64_t v727;
  uint64_t v728;
  void *v729;
  void *v730;
  uint64_t v731;
  void *v732;
  char *v733;
  char *v734;
  void *v735;
  char *v736;
  char *v737;
  void *v738;
  char *v739;
  char *v740;
  void *__p;
  char *v742;
  char *v743;
  _BYTE v744[128];
  _BYTE v745[128];
  _BYTE v746[128];
  _BYTE v747[128];
  uint64_t v748;

  v681 = a1;
  v748 = *MEMORY[0x1E0C80C00];
  v5 = objc_opt_class();
  value = a3;
  if ((objc_msgSend_isMemberOfClass_(a3, v6, v5, v7) & 1) == 0)
    objc_msgSend_flush(VFXTransaction, v8, v9, v10);
  v11 = atomic_load((unsigned __int8 *)&qword_1EEF65CD8);
  if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65CD8))
  {
    qword_1EEF65CD0 = objc_opt_new();
    __cxa_guard_release(&qword_1EEF65CD8);
  }
  v12 = qword_1EEF65CD0;
  if (a4)
    v12 = a4;
  v707 = (void *)v12;
  v742 = 0;
  __p = 0;
  v743 = 0;
  v739 = 0;
  v738 = 0;
  v740 = 0;
  v736 = 0;
  v735 = 0;
  v737 = 0;
  v732 = 0;
  v733 = 0;
  v734 = 0;
  v684 = (void *)objc_msgSend_mesh(a3, v8, v9, v10);
  v16 = (void *)objc_msgSend_meshSources(v684, v13, v14, v15);
  v20 = (void *)objc_msgSend_modelSourceChannels(a3, v17, v18, v19);
  v27 = objc_msgSend_count(v20, v21, v22, v23);
  if (v27)
  {
    v28 = 0;
    v706 = 0;
    while (v28 < objc_msgSend_count(v16, (const char *)v24, v25, v26) && v28 < v27)
    {
      v31 = (void *)objc_msgSend_objectAtIndexedSubscript_(v16, v29, v28, v30);
      v35 = (void *)objc_msgSend_modelSourceChannels(a3, v32, v33, v34);
      v38 = (void *)objc_msgSend_objectAtIndexedSubscript_(v35, v36, v28, v37);
      v42 = objc_msgSend_unsignedIntegerValue(v38, v39, v40, v41);
      v46 = (void *)objc_msgSend_semantic(v31, v43, v44, v45);
      if (objc_msgSend_isEqualToString_(v46, v47, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), v48))
      {
        v49 = v742;
        if (v742 >= v743)
        {
          v56 = (char *)__p;
          v57 = (v742 - (_BYTE *)__p) >> 2;
          v58 = v57 + 1;
          if ((unint64_t)(v57 + 1) >> 62)
            goto LABEL_203;
          v59 = v743 - (_BYTE *)__p;
          if ((v743 - (_BYTE *)__p) >> 1 > v58)
            v58 = v59 >> 1;
          if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
            v24 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v24 = v58;
          if (v24)
          {
            v60 = (char *)sub_1B17F7E58((uint64_t)&v743, v24);
            v49 = v742;
            v56 = (char *)__p;
          }
          else
          {
            v60 = 0;
          }
          v76 = &v60[4 * v57];
          *(_DWORD *)v76 = v42;
          v50 = v76 + 4;
          while (v49 != v56)
          {
            v77 = *((_DWORD *)v49 - 1);
            v49 -= 4;
            *((_DWORD *)v76 - 1) = v77;
            v76 -= 4;
          }
          __p = v76;
          v742 = v50;
          v743 = &v60[4 * v24];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *(_DWORD *)v742 = v42;
          v50 = v49 + 4;
        }
        v742 = v50;
      }
      else
      {
        v51 = (void *)objc_msgSend_semantic(v31, (const char *)v24, v25, v26);
        if (objc_msgSend_isEqualToString_(v51, v52, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), v53))
        {
          v54 = v739;
          if (v739 >= v740)
          {
            v66 = (char *)v738;
            v67 = (v739 - (_BYTE *)v738) >> 2;
            v68 = v67 + 1;
            if ((unint64_t)(v67 + 1) >> 62)
              goto LABEL_203;
            v69 = v740 - (_BYTE *)v738;
            if ((v740 - (_BYTE *)v738) >> 1 > v68)
              v68 = v69 >> 1;
            if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v68;
            if (v24)
            {
              v70 = (char *)sub_1B17F7E58((uint64_t)&v740, v24);
              v54 = v739;
              v66 = (char *)v738;
            }
            else
            {
              v70 = 0;
            }
            v83 = &v70[4 * v67];
            *(_DWORD *)v83 = v42;
            v55 = v83 + 4;
            while (v54 != v66)
            {
              v84 = *((_DWORD *)v54 - 1);
              v54 -= 4;
              *((_DWORD *)v83 - 1) = v84;
              v83 -= 4;
            }
            v738 = v83;
            v739 = v55;
            v740 = &v70[4 * v24];
            if (v66)
              operator delete(v66);
          }
          else
          {
            *(_DWORD *)v739 = v42;
            v55 = v54 + 4;
          }
          v739 = v55;
        }
        else
        {
          v61 = (void *)objc_msgSend_semantic(v31, (const char *)v24, v25, v26);
          if (objc_msgSend_isEqualToString_(v61, v62, (uint64_t)CFSTR("kGeometrySourceSemanticTexcoord"), v63))
          {
            v64 = v736;
            if (v736 >= v737)
            {
              v78 = (char *)v735;
              v79 = (v736 - (_BYTE *)v735) >> 2;
              v80 = v79 + 1;
              if ((unint64_t)(v79 + 1) >> 62)
                goto LABEL_203;
              v81 = v737 - (_BYTE *)v735;
              if ((v737 - (_BYTE *)v735) >> 1 > v80)
                v80 = v81 >> 1;
              if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL)
                v24 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v24 = v80;
              if (v24)
              {
                v82 = (char *)sub_1B17F7E58((uint64_t)&v737, v24);
                v64 = v736;
                v78 = (char *)v735;
              }
              else
              {
                v82 = 0;
              }
              v90 = &v82[4 * v79];
              *(_DWORD *)v90 = v42;
              v65 = v90 + 4;
              while (v64 != v78)
              {
                v91 = *((_DWORD *)v64 - 1);
                v64 -= 4;
                *((_DWORD *)v90 - 1) = v91;
                v90 -= 4;
              }
              v735 = v90;
              v736 = v65;
              v737 = &v82[4 * v24];
              if (v78)
                operator delete(v78);
            }
            else
            {
              *(_DWORD *)v736 = v42;
              v65 = v64 + 4;
            }
            v736 = v65;
          }
          else
          {
            v71 = (void *)objc_msgSend_semantic(v31, (const char *)v24, v25, v26);
            if (objc_msgSend_isEqualToString_(v71, v72, (uint64_t)CFSTR("kGeometrySourceSemanticColor"), v73))
            {
              v74 = v733;
              if (v733 >= v734)
              {
                v85 = (char *)v732;
                v86 = (v733 - (_BYTE *)v732) >> 2;
                v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62)
LABEL_203:
                  abort();
                v88 = v734 - (_BYTE *)v732;
                if ((v734 - (_BYTE *)v732) >> 1 > v87)
                  v87 = v88 >> 1;
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL)
                  v24 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v24 = v87;
                if (v24)
                {
                  v89 = (char *)sub_1B17F7E58((uint64_t)&v734, v24);
                  v85 = (char *)v732;
                  v74 = v733;
                }
                else
                {
                  v89 = 0;
                }
                v92 = &v89[4 * v86];
                *(_DWORD *)v92 = v42;
                v75 = v92 + 4;
                while (v74 != v85)
                {
                  v93 = *((_DWORD *)v74 - 1);
                  v74 -= 4;
                  *((_DWORD *)v92 - 1) = v93;
                  v92 -= 4;
                }
                v732 = v92;
                v733 = v75;
                v734 = &v89[4 * v24];
                if (v85)
                  operator delete(v85);
              }
              else
              {
                *(_DWORD *)v733 = v42;
                v75 = v74 + 4;
              }
              v733 = v75;
            }
          }
        }
      }
      if (!(v42 | v706))
        v706 = objc_msgSend_vectorCount(v31, (const char *)v24, v25, v26);
      ++v28;
    }
    if (v742 == __p)
    {
LABEL_88:
      v96 = 0;
      goto LABEL_194;
    }
  }
  else
  {
    v94 = objc_msgSend_indexOfObjectPassingTest_(v16, (const char *)v24, (uint64_t)&unk_1E63D0C50, v26);
    v95 = v94;
    if (v94 == 0x7FFFFFFFFFFFFFFFLL)
      goto LABEL_88;
    v97 = (v742 - (_BYTE *)__p) >> 2;
    v98 = v97 + 1;
    if ((unint64_t)(v97 + 1) >> 62)
      abort();
    v99 = v743 - (_BYTE *)__p;
    if ((v743 - (_BYTE *)__p) >> 1 > v98)
      v98 = v99 >> 1;
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL)
      v100 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v100 = v98;
    if (v100)
      v101 = (char *)sub_1B17F7E58((uint64_t)&v743, v100);
    else
      v101 = 0;
    v102 = &v101[4 * v97];
    *(_DWORD *)v102 = v95;
    __p = v102;
    v743 = &v101[4 * v100];
    v706 = 0;
    v742 = v102 + 4;
  }
  v103 = objc_alloc_init(MEMORY[0x1E0CC7838]);
  v708 = (void *)objc_opt_new();
  v106 = (void *)objc_msgSend_modelSourcesForSemantic_(value, v104, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), v105);
  v109 = (void *)objc_msgSend_objectAtIndexedSubscript_(v106, v107, 0, v108);
  v704 = objc_msgSend_vectorCount(v109, v110, v111, v112);
  v729 = 0;
  v730 = 0;
  v731 = 0;
  *(_DWORD *)&v726[8] = 0;
  v727 = 0;
  v728 = 0;
  v116 = (void *)objc_msgSend_meshElements(v684, v113, v114, v115);
  v119 = (void *)objc_msgSend_objectAtIndexedSubscript_(v116, v117, 0, v118);
  *(_QWORD *)v726 = objc_msgSend_indicesChannelCount(v119, v120, v121, v122);
  v126 = (void *)objc_msgSend_meshElements(v684, v123, v124, v125);
  v127 = sub_1B1834340(v126, v706, (char **)&v729, (char **)&v726[4], v726);
  v709 = objc_msgSend_count(v127, v128, v129, v130);
  if (v709)
  {
    v704 = v706 + (((v727 - *(_QWORD *)&v726[4]) >> 2) / (unint64_t)(*(int *)v726 + 1));
    v705 = ((v727 - *(_QWORD *)&v726[4]) >> 2) / (unint64_t)(*(int *)v726 + 1);
  }
  else
  {
    LODWORD(v705) = 0;
  }
  v724 = 0u;
  v725 = 0u;
  v722 = 0u;
  v723 = 0u;
  v135 = objc_msgSend_countByEnumeratingWithState_objects_count_(v106, v131, (uint64_t)&v722, (uint64_t)v747, 16);
  v682 = v127;
  if (!v135)
  {
    v136 = 0;
    goto LABEL_118;
  }
  obj = v106;
  v136 = 0;
  v137 = 0;
  v700 = *(_QWORD *)v723;
  v138 = *MEMORY[0x1E0CC7760];
  v694 = *(_DWORD *)v726;
  do
  {
    for (i = 0; i != v135; ++i)
    {
      if (*(_QWORD *)v723 != v700)
        objc_enumerationMutation(obj);
      v140 = *(void **)(*((_QWORD *)&v722 + 1) + 8 * i);
      v141 = v138;
      if ((_DWORD)v137)
      {
        v680 = v137;
        v141 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v132, (uint64_t)CFSTR("blendShape%d"), v134);
      }
      v142 = (void *)objc_msgSend_attributes(v103, v132, v133, v134);
      v145 = (void *)objc_msgSend_objectAtIndexedSubscript_(v142, v143, v136, v144);
      objc_msgSend_setName_(v145, v146, v141, v147);
      v151 = (void *)objc_msgSend_attributes(v103, v148, v149, v150);
      v154 = (void *)objc_msgSend_objectAtIndexedSubscript_(v151, v152, v136, v153);
      objc_msgSend_setFormat_(v154, v155, 786435, v156);
      v160 = (void *)objc_msgSend_attributes(v103, v157, v158, v159);
      v163 = (void *)objc_msgSend_objectAtIndexedSubscript_(v160, v161, v136, v162);
      objc_msgSend_setBufferIndex_(v163, v164, v136, v165);
      if (v709)
      {
        v169 = (void *)objc_msgSend_newBuffer_type_(v707, v166, 12 * v704, 1);
        v170 = (const char *)*((unsigned int *)__p + (int)v137);
        v174 = (void *)objc_msgSend_map(v169, v171, v172, v173);
        v178 = (char *)objc_msgSend_bytes(v174, v175, v176, v177);
        sub_1B18346B8(v140, v170, &v729, &v726[4], v694, v706, v705, v178);
        v182 = (void *)objc_msgSend_attributes(v103, v179, v180, v181);
        v185 = (void *)objc_msgSend_objectAtIndexedSubscript_(v182, v183, v136, v184);
        objc_msgSend_setOffset_(v185, v186, 0, v187);
        v191 = (void *)objc_msgSend_layouts(v103, v188, v189, v190);
        v194 = (void *)objc_msgSend_objectAtIndexedSubscript_(v191, v192, v136, v193);
        objc_msgSend_setStride_(v194, v195, 12, v196);
      }
      else
      {
        if (objc_msgSend_vectorCount(v140, v166, v167, v168) != v704)
          continue;
        v199 = objc_msgSend_dataOffset(v140, v132, v133, v134);
        v203 = (void *)objc_msgSend_attributes(v103, v200, v201, v202);
        v206 = (void *)objc_msgSend_objectAtIndexedSubscript_(v203, v204, v136, v205);
        objc_msgSend_setOffset_(v206, v207, v199, v208);
        v212 = objc_msgSend_dataStride(v140, v209, v210, v211);
        v216 = (void *)objc_msgSend_layouts(v103, v213, v214, v215);
        v219 = (void *)objc_msgSend_objectAtIndexedSubscript_(v216, v217, v136, v218);
        objc_msgSend_setStride_(v219, v220, v212, v221);
        v225 = objc_msgSend_data(v140, v222, v223, v224);
        v169 = (void *)objc_msgSend_newBufferWithData_type_(v707, v226, v225, 1);
      }
      objc_msgSend_addObject_(v708, v197, (uint64_t)v169, v198);

      ++v136;
      v137 = (v137 + 1);
    }
    v135 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v132, (uint64_t)&v722, (uint64_t)v747, 16);
  }
  while (v135);
LABEL_118:
  v227 = (void *)objc_msgSend_modelSourcesForSemantic_(value, v132, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), v134);
  v720 = 0u;
  v721 = 0u;
  v718 = 0u;
  v719 = 0u;
  v232 = objc_msgSend_countByEnumeratingWithState_objects_count_(v227, v228, (uint64_t)&v718, (uint64_t)v746, 16);
  if (v232)
  {
    obja = v227;
    v233 = 0;
    v701 = *(_QWORD *)v719;
    v234 = *MEMORY[0x1E0CC7750];
    v695 = *(_DWORD *)v726;
    do
    {
      for (j = 0; j != v232; ++j)
      {
        if (*(_QWORD *)v719 != v701)
          objc_enumerationMutation(obja);
        v236 = *(void **)(*((_QWORD *)&v718 + 1) + 8 * j);
        v237 = v234;
        if ((_DWORD)v233)
        {
          v680 = v233;
          v237 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v229, (uint64_t)CFSTR("normal%d"), v231);
        }
        v238 = (void *)objc_msgSend_attributes(v103, v229, v230, v231);
        v241 = (void *)objc_msgSend_objectAtIndexedSubscript_(v238, v239, v136, v240);
        objc_msgSend_setName_(v241, v242, v237, v243);
        v247 = (void *)objc_msgSend_attributes(v103, v244, v245, v246);
        v250 = (void *)objc_msgSend_objectAtIndexedSubscript_(v247, v248, v136, v249);
        objc_msgSend_setFormat_(v250, v251, 786435, v252);
        v256 = (void *)objc_msgSend_attributes(v103, v253, v254, v255);
        v259 = (void *)objc_msgSend_objectAtIndexedSubscript_(v256, v257, v136, v258);
        objc_msgSend_setBufferIndex_(v259, v260, v136, v261);
        if (v709)
        {
          v265 = (void *)objc_msgSend_newBuffer_type_(v707, v262, 12 * v704, 1);
          v266 = (const char *)*((unsigned int *)v738 + (int)v233);
          v270 = (void *)objc_msgSend_map(v265, v267, v268, v269);
          v274 = (char *)objc_msgSend_bytes(v270, v271, v272, v273);
          sub_1B18346B8(v236, v266, &v729, &v726[4], v695, v706, v705, v274);
          v278 = (void *)objc_msgSend_attributes(v103, v275, v276, v277);
          v281 = (void *)objc_msgSend_objectAtIndexedSubscript_(v278, v279, v136, v280);
          objc_msgSend_setOffset_(v281, v282, 0, v283);
          v287 = (void *)objc_msgSend_layouts(v103, v284, v285, v286);
          v290 = (void *)objc_msgSend_objectAtIndexedSubscript_(v287, v288, v136, v289);
          objc_msgSend_setStride_(v290, v291, 12, v292);
        }
        else
        {
          if (objc_msgSend_vectorCount(v236, v262, v263, v264) != v704)
            continue;
          v295 = objc_msgSend_dataOffset(v236, v229, v230, v231);
          v299 = (void *)objc_msgSend_attributes(v103, v296, v297, v298);
          v302 = (void *)objc_msgSend_objectAtIndexedSubscript_(v299, v300, v136, v301);
          objc_msgSend_setOffset_(v302, v303, v295, v304);
          v308 = objc_msgSend_dataStride(v236, v305, v306, v307);
          v312 = (void *)objc_msgSend_layouts(v103, v309, v310, v311);
          v315 = (void *)objc_msgSend_objectAtIndexedSubscript_(v312, v313, v136, v314);
          objc_msgSend_setStride_(v315, v316, v308, v317);
          v321 = objc_msgSend_data(v236, v318, v319, v320);
          v265 = (void *)objc_msgSend_newBufferWithData_type_(v707, v322, v321, 1);
        }
        objc_msgSend_addObject_(v708, v293, (uint64_t)v265, v294);

        ++v136;
        v233 = (v233 + 1);
      }
      v232 = objc_msgSend_countByEnumeratingWithState_objects_count_(obja, v229, (uint64_t)&v718, (uint64_t)v746, 16);
    }
    while (v232);
  }
  if (!objc_msgSend_firstMaterial(value, v229, v230, v231))
    goto LABEL_136;
  Material = (void *)objc_msgSend_firstMaterial(value, v323, v324, v325);
  v330 = (void *)objc_msgSend_multiply(Material, v327, v328, v329);
  objc_msgSend_contents(v330, v331, v332, v333);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (v334 = (void *)objc_msgSend_firstMaterial(value, v323, v324, v325),
        v338 = (void *)objc_msgSend_multiply(v334, v335, v336, v337),
        objc_msgSend_contents(v338, v339, v340, v341),
        objc_opt_class(),
        (objc_opt_isKindOfClass() & 1) != 0))
  {
    v342 = (void *)objc_msgSend_firstMaterial(value, v323, v324, v325);
    v346 = (void *)objc_msgSend_multiply(v342, v343, v344, v345);
    v698 = objc_msgSend_mappingChannel(v346, v347, v348, v349);
  }
  else
  {
LABEL_136:
    v698 = -1;
  }
  if (!objc_msgSend_firstMaterial(value, v323, v324, v325))
    goto LABEL_141;
  v353 = (void *)objc_msgSend_firstMaterial(value, v350, v351, v352);
  v357 = (void *)objc_msgSend_selfIllumination(v353, v354, v355, v356);
  objc_msgSend_contents(v357, v358, v359, v360);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (v362 = (void *)objc_msgSend_firstMaterial(value, v350, v361, v352),
        v366 = (void *)objc_msgSend_selfIllumination(v362, v363, v364, v365),
        objc_msgSend_contents(v366, v367, v368, v369),
        objc_opt_class(),
        (objc_opt_isKindOfClass() & 1) != 0))
  {
    v370 = (void *)objc_msgSend_firstMaterial(value, v350, v361, v352);
    v374 = (void *)objc_msgSend_selfIllumination(v370, v371, v372, v373);
    v696 = objc_msgSend_mappingChannel(v374, v375, v376, v377);
  }
  else
  {
LABEL_141:
    v696 = -1;
  }
  v378 = (void *)objc_msgSend_modelSourcesForSemantic_(value, v350, (uint64_t)CFSTR("kGeometrySourceSemanticTexcoord"), v352);
  v716 = 0u;
  v717 = 0u;
  v714 = 0u;
  v715 = 0u;
  v380 = objc_msgSend_countByEnumeratingWithState_objects_count_(v378, v379, (uint64_t)&v714, (uint64_t)v745, 16);
  if (!v380)
  {
    v385 = v136;
    goto LABEL_170;
  }
  v686 = v378;
  v384 = 0;
  objb = *(id *)v715;
  v690 = *MEMORY[0x1E0CC7770];
  v689 = *MEMORY[0x1E0CC7718];
  v688 = *MEMORY[0x1E0CC7748];
  v687 = *(_DWORD *)v726;
  v385 = v136;
  while (2)
  {
    v702 = v380;
    v386 = 0;
    while (2)
    {
      if (*(id *)v715 != objb)
        objc_enumerationMutation(v686);
      v387 = *(void **)(*((_QWORD *)&v714 + 1) + 8 * v386);
      v388 = v690;
      if ((_DWORD)v384)
      {
        v680 = v384;
        v388 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v381, (uint64_t)CFSTR("textureCoordinate%d"), v383);
      }
      v389 = v689;
      if (v698 != (int)v384)
        v389 = v388;
      if (v696 == (int)v384)
        v390 = v688;
      else
        v390 = v389;
      v391 = (void *)objc_msgSend_attributes(v103, v381, v382, v383);
      v394 = (void *)objc_msgSend_objectAtIndexedSubscript_(v391, v392, v385, v393);
      objc_msgSend_setName_(v394, v395, v390, v396);
      v400 = (void *)objc_msgSend_attributes(v103, v397, v398, v399);
      v403 = (void *)objc_msgSend_objectAtIndexedSubscript_(v400, v401, v385, v402);
      objc_msgSend_setFormat_(v403, v404, 786434, v405);
      v409 = (void *)objc_msgSend_attributes(v103, v406, v407, v408);
      v412 = (void *)objc_msgSend_objectAtIndexedSubscript_(v409, v410, v385, v411);
      objc_msgSend_setBufferIndex_(v412, v413, v385, v414);
      if (v709)
      {
        v418 = (void *)objc_msgSend_newBuffer_type_(v707, v415, 8 * v704, 1);
        v419 = (const char *)*((unsigned int *)v735 + (int)v384);
        v423 = (void *)objc_msgSend_map(v418, v420, v421, v422);
        v427 = (char *)objc_msgSend_bytes(v423, v424, v425, v426);
        sub_1B18346B8(v387, v419, &v729, &v726[4], v687, v706, v705, v427);
        v431 = (void *)objc_msgSend_attributes(v103, v428, v429, v430);
        v434 = (void *)objc_msgSend_objectAtIndexedSubscript_(v431, v432, v385, v433);
        objc_msgSend_setOffset_(v434, v435, 0, v436);
        v440 = (void *)objc_msgSend_layouts(v103, v437, v438, v439);
        v443 = (void *)objc_msgSend_objectAtIndexedSubscript_(v440, v441, v385, v442);
        objc_msgSend_setStride_(v443, v444, 8, v445);
        goto LABEL_158;
      }
      if (objc_msgSend_vectorCount(v387, v415, v416, v417) == v704)
      {
        v449 = objc_msgSend_dataOffset(v387, v381, v382, v383);
        v453 = (void *)objc_msgSend_attributes(v103, v450, v451, v452);
        v456 = (void *)objc_msgSend_objectAtIndexedSubscript_(v453, v454, v385, v455);
        objc_msgSend_setOffset_(v456, v457, v449, v458);
        v462 = objc_msgSend_dataStride(v387, v459, v460, v461);
        v466 = (void *)objc_msgSend_layouts(v103, v463, v464, v465);
        v469 = (void *)objc_msgSend_objectAtIndexedSubscript_(v466, v467, v385, v468);
        objc_msgSend_setStride_(v469, v470, v462, v471);
        v475 = objc_msgSend_data(v387, v472, v473, v474);
        v418 = (void *)objc_msgSend_newBufferWithData_type_(v707, v476, v475, 1);
LABEL_158:
        v477 = (void *)objc_msgSend_map(v418, v446, v447, v448);
        if (objc_msgSend_bytes(v477, v478, v479, v480))
        {
          v484 = (void *)objc_msgSend_attributes(v103, v481, v482, v483);
          v487 = (void *)objc_msgSend_objectAtIndexedSubscript_(v484, v485, v385, v486);
          v491 = objc_msgSend_format(v487, v488, v489, v490);
          v495 = (void *)objc_msgSend_map(v418, v492, v493, v494);
          v499 = objc_msgSend_bytes(v495, v496, v497, v498);
          v503 = objc_msgSend_offset(v487, v500, v501, v502);
          v507 = (void *)objc_msgSend_layouts(v103, v504, v505, v506);
          v511 = objc_msgSend_bufferIndex(v487, v508, v509, v510);
          v514 = (void *)objc_msgSend_objectAtIndexedSubscript_(v507, v512, v511, v513);
          v518 = objc_msgSend_stride(v514, v515, v516, v517);
          if (v491 == 786434)
          {
            if (v704)
            {
              v524 = (float *)(v499 + v503 + 4);
              v525 = v704;
              do
              {
                *v524 = 1.0 - *v524;
                v524 = (float *)((char *)v524 + v518);
                --v525;
              }
              while (v525);
            }
          }
          else
          {
            sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Warning: unable to flip non-float2 texture coordinates, skipping\n"), v519, v483, v520, v521, v522, v523, v680);
          }
        }
        objc_msgSend_addObject_(v708, v481, (uint64_t)v418, v483);

        ++v385;
        v384 = (v384 + 1);
      }
      if (++v386 != v702)
        continue;
      break;
    }
    v380 = objc_msgSend_countByEnumeratingWithState_objects_count_(v686, v381, (uint64_t)&v714, (uint64_t)v745, 16);
    if (v380)
      continue;
    break;
  }
LABEL_170:
  v712 = 0u;
  v713 = 0u;
  v710 = 0u;
  v711 = 0u;
  v697 = (id)objc_msgSend_modelSourcesForSemantic_(value, v381, (uint64_t)CFSTR("kGeometrySourceSemanticColor"), v383);
  v530 = objc_msgSend_countByEnumeratingWithState_objects_count_(v697, v526, (uint64_t)&v710, (uint64_t)v744, 16);
  if (v530)
  {
    LODWORD(v531) = 0;
    v703 = *(_QWORD *)v711;
    v532 = *MEMORY[0x1E0CC7730];
    v699 = *(_DWORD *)v726;
    v533 = v385;
    do
    {
      v534 = 0;
      v535 = v533;
      v531 = (int)v531;
      do
      {
        if (*(_QWORD *)v711 != v703)
          objc_enumerationMutation(v697);
        v536 = *(void **)(*((_QWORD *)&v710 + 1) + 8 * v534);
        v537 = v532;
        if (v531)
          v537 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v527, (uint64_t)CFSTR("color%d"), v529, v531, v681);
        v538 = (void *)objc_msgSend_attributes(v103, v527, v528, v529);
        v541 = (void *)objc_msgSend_objectAtIndexedSubscript_(v538, v539, v535 + v534, v540);
        objc_msgSend_setName_(v541, v542, v537, v543);
        v547 = objc_msgSend_componentsPerVector(v536, v544, v545, v546);
        v551 = (void *)objc_msgSend_attributes(v103, v548, v549, v550);
        v554 = (void *)objc_msgSend_objectAtIndexedSubscript_(v551, v552, v535 + v534, v553);
        objc_msgSend_setFormat_(v554, v555, v547 | 0xC0000, v556);
        v560 = (void *)objc_msgSend_attributes(v103, v557, v558, v559);
        v563 = (void *)objc_msgSend_objectAtIndexedSubscript_(v560, v561, v535 + v534, v562);
        objc_msgSend_setBufferIndex_(v563, v564, v535 + v534, v565);
        if (v709)
        {
          v569 = objc_msgSend_dataStride(v536, v566, v567, v568);
          v571 = (void *)objc_msgSend_newBuffer_type_(v707, v570, v569 * v704, 1);
          v572 = (const char *)*((unsigned int *)v732 + v531);
          v576 = (void *)objc_msgSend_map(v571, v573, v574, v575);
          v580 = (char *)objc_msgSend_bytes(v576, v577, v578, v579);
          sub_1B18346B8(v536, v572, &v729, &v726[4], v699, v706, v705, v580);
          v584 = (void *)objc_msgSend_attributes(v103, v581, v582, v583);
          v587 = (void *)objc_msgSend_objectAtIndexedSubscript_(v584, v585, v535 + v534, v586);
          objc_msgSend_setOffset_(v587, v588, 0, v589);
          v593 = objc_msgSend_dataStride(v536, v590, v591, v592);
          v597 = (void *)objc_msgSend_layouts(v103, v594, v595, v596);
          v600 = (void *)objc_msgSend_objectAtIndexedSubscript_(v597, v598, v535 + v534, v599);
          objc_msgSend_setStride_(v600, v601, v593, v602);
        }
        else
        {
          v605 = objc_msgSend_dataOffset(v536, v566, v567, v568);
          v609 = (void *)objc_msgSend_attributes(v103, v606, v607, v608);
          v612 = (void *)objc_msgSend_objectAtIndexedSubscript_(v609, v610, v535 + v534, v611);
          objc_msgSend_setOffset_(v612, v613, v605, v614);
          v618 = objc_msgSend_dataStride(v536, v615, v616, v617);
          v622 = (void *)objc_msgSend_layouts(v103, v619, v620, v621);
          v625 = (void *)objc_msgSend_objectAtIndexedSubscript_(v622, v623, v535 + v534, v624);
          objc_msgSend_setStride_(v625, v626, v618, v627);
          v631 = objc_msgSend_data(v536, v628, v629, v630);
          v571 = (void *)objc_msgSend_newBufferWithData_type_(v707, v632, v631, 1);
        }
        objc_msgSend_addObject_(v708, v603, (uint64_t)v571, v604);

        ++v531;
        ++v534;
      }
      while (v530 != v534);
      v530 = objc_msgSend_countByEnumeratingWithState_objects_count_(v697, v527, (uint64_t)&v710, (uint64_t)v744, 16);
      v533 = v535 + v534;
    }
    while (v530);
  }
  v730 = v729;
  v727 = *(_QWORD *)&v726[4];
  v633 = (void *)objc_opt_new();
  v637 = objc_msgSend_meshElementCount(v684, v634, v635, v636);
  v641 = (void *)objc_msgSend_materials(value, v638, v639, v640);
  v645 = objc_msgSend_count(v641, v642, v643, v644);
  if (v637)
  {
    v648 = v645;
    for (k = 0; k != v637; ++k)
    {
      v652 = objc_msgSend_meshElementAtIndex_(v684, v646, k, v647);
      v653 = (void *)MEMORY[0x1E0CC77F8];
      if (v709)
      {
        v654 = objc_msgSend_objectAtIndexedSubscript_(v682, v650, k, v651);
        v656 = objc_msgSend_submeshWithUniquedIndexData_andVFXModelElement_bufferAllocator_(v653, v655, v654, v652, a4);
      }
      else
      {
        v656 = objc_msgSend_submeshWithVFXModelElement_bufferAllocator_positionSourceChannel_(MEMORY[0x1E0CC77F8], v650, v652, a4, *(int *)__p);
      }
      v659 = (void *)v656;
      objc_msgSend_addObject_(v633, v657, v656, v658);
      if (v648)
      {
        v661 = (void *)objc_msgSend_materials(value, v646, v660, v647);
        v664 = objc_msgSend_objectAtIndexedSubscript_(v661, v662, k % v648, v663);
        v667 = objc_msgSend_materialWithVFXMaterial_(MEMORY[0x1E0CC77A0], v665, v664, v666);
        objc_msgSend_setMaterial_(v659, v668, v667, v669);
      }
    }
  }
  v670 = [v681 alloc];
  v672 = (void *)objc_msgSend_initWithVertexBuffers_vertexCount_descriptor_submeshes_(v670, v671, (uint64_t)v708, v704, v103, v633);

  v676 = objc_msgSend_name(value, v673, v674, v675);
  objc_msgSend_setName_(v672, v677, v676, v678);
  objc_setAssociatedObject(v672, CFSTR("VFXMDLAssociatedObject"), value, (void *)0x301);
  v96 = v672;
  if (*(_QWORD *)&v726[4])
  {
    v727 = *(_QWORD *)&v726[4];
    operator delete(*(void **)&v726[4]);
  }
  if (v729)
  {
    v730 = v729;
    operator delete(v729);
  }
LABEL_194:
  if (v732)
  {
    v733 = (char *)v732;
    operator delete(v732);
  }
  if (v735)
  {
    v736 = (char *)v735;
    operator delete(v735);
  }
  if (v738)
  {
    v739 = (char *)v738;
    operator delete(v738);
  }
  if (__p)
  {
    v742 = (char *)__p;
    operator delete(__p);
  }
  return v96;
}

void sub_1B1835C08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EEF65CD8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1835D4C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;

  v4 = (void *)objc_msgSend_semantic(a2, (const char *)a2, a3, a4);
  return objc_msgSend_isEqualToString_(v4, v5, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), v6);
}

id sub_1B1835D70(void *a1, const char *a2, uint64_t a3)
{
  return (id)objc_msgSend_newSubmeshWithVFXModelElement_bufferAllocator_(a1, a2, a3, 0);
}

id sub_1B1835D88(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return (id)objc_msgSend_newSubmeshWithVFXModelElement_bufferAllocator_(a1, a2, a3, a4);
}

id sub_1B1835D9C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return (id)objc_msgSend_newSubmeshWithVFXModelElement_bufferAllocator_positionSourceChannel_(a1, a2, a3, a4);
}

id sub_1B1835DB0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return (id)objc_msgSend_newSubmeshWithUniquedIndexData_andVFXModelElement_bufferAllocator_(a1, a2, a3, a4);
}

uint64_t sub_1B1835DC4(objc_class *a1, const char *a2, void *a3, unint64_t a4, int a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, void *a11, unint64_t a12, uint64_t a13)
{
  unint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  uint64_t v45;

  v20 = a12;
  v21 = objc_msgSend_bytes(a3, a2, (uint64_t)a3, a4);
  if (a6 >= 2 && a5)
  {
    v25 = v21;
    v26 = a8 * a6;
    v27 = (void *)objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v22, a4 / a6, v24);
    v31 = objc_msgSend_mutableBytes(v27, v28, v29, v30);
    if (a8 * a6 <= a4)
    {
      v33 = 0;
      v34 = a4 / v26;
      if (a4 / v26 <= 1)
        v34 = 1;
      do
      {
        switch(a8)
        {
          case 1uLL:
            *(_BYTE *)(v31 + v33) = *(_BYTE *)(v25 + a7);
            break;
          case 2uLL:
            *(_WORD *)(v31 + 2 * v33) = *(_WORD *)(v25 + 2 * a7);
            break;
          case 4uLL:
            *(_DWORD *)(v31 + 4 * v33) = *(_DWORD *)(v25 + 4 * a7);
            break;
          case 8uLL:
            *(_QWORD *)(v31 + 8 * v33) = *(_QWORD *)(v25 + 8 * a7);
            break;
          default:
            break;
        }
        ++v33;
        a7 += a6;
      }
      while (v34 != v33);
    }
    v35 = objc_msgSend_newBufferWithData_type_(a11, v32, (uint64_t)v27, 2);
  }
  else
  {
    v36 = objc_msgSend_length(a3, v22, v23, v24);
    v38 = objc_msgSend_subdataWithRange_(a3, v37, v36 / a6 * a7, v36 / a6);
    v35 = objc_msgSend_newBufferWithData_type_(a11, v39, v38, 2);
  }
  v40 = (void *)v35;
  v44 = [a1 alloc];
  if (!a12)
    v20 = objc_msgSend_length(v40, v41, v42, v43) / a8;
  v45 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v44, v41, (uint64_t)&stru_1E63FD500, (uint64_t)v40, v20, a9, a10, 0, a13);

  return v45;
}

uint64_t sub_1B1835F70(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_newSubmeshWithVFXModelElement_bufferAllocator_positionSourceChannel_(a1, a2, a3, a4, 0);
}

uint64_t sub_1B1835F78(objc_class *a1, const char *a2, uint64_t a3, void *a4, void *a5)
{
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t i;
  uint64_t v49;
  id v50;
  id v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  id v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  const char *v63;
  uint64_t v64;
  unint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  const char *v73;

  v9 = objc_msgSend_bytesPerIndex(a4, a2, a3, (uint64_t)a4);
  v14 = objc_msgSend_primitiveCount(a4, v10, v11, v12);
  if (qword_1EEF65CE8 != -1)
    dispatch_once(&qword_1EEF65CE8, &unk_1E63D6F58);
  if (a5)
    v15 = objc_msgSend_newBufferWithData_type_(a5, v13, a3, 2);
  else
    v15 = objc_msgSend_newBufferWithData_type_((void *)qword_1EEF65CE0, v13, a3, 2);
  v19 = (void *)v15;
  v20 = objc_msgSend_bytesPerIndex(a4, v16, v17, v18);
  v24 = 32;
  if (v20 == 2)
    v24 = 16;
  if (v20 == 1)
    v25 = 8;
  else
    v25 = v24;
  if (objc_msgSend_primitiveType(a4, v21, v22, v23) == 1)
  {
    v29 = objc_msgSend_primitiveCount(a4, v26, v27, v28) + 2;
    v30 = [a1 alloc];
    v32 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v30, v31, (uint64_t)&stru_1E63FD500, (uint64_t)v19, v29, v25, 3, 0, 0);
LABEL_28:
    v64 = v32;
    goto LABEL_29;
  }
  if (objc_msgSend_primitiveType(a4, v26, v27, v28) != 4)
  {
    v65 = objc_msgSend_primitiveType(a4, v33, v34, v35);
    if (v65 > 3)
    {
      v70 = 0;
      v69 = 1;
    }
    else
    {
      v69 = qword_1B2246990[v65];
      v70 = qword_1B22469B0[v65];
    }
    v71 = objc_msgSend_primitiveCount(a4, v66, v67, v68) * v69;
    v72 = [a1 alloc];
    v32 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v72, v73, (uint64_t)&stru_1E63FD500, (uint64_t)v19, v71, v25, v70, 0, 0);
    goto LABEL_28;
  }
  v36 = (void *)objc_msgSend_data(a4, v33, v34, v35);
  v40 = objc_msgSend_bytes(v36, v37, v38, v39);
  v43 = (void *)objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v41, 8 * v14, v42);
  v47 = objc_msgSend_mutableBytes(v43, v44, v45, v46);
  if (v14 >= 1)
  {
    for (i = 0; i != v14; ++i)
    {
      switch(v9)
      {
        case 1uLL:
          LOBYTE(v49) = *(_BYTE *)(v40 + i);
          goto LABEL_21;
        case 2uLL:
          LOWORD(v49) = *(_WORD *)(v40 + 2 * i);
          goto LABEL_21;
        case 4uLL:
          LODWORD(v49) = *(_DWORD *)(v40 + 4 * i);
          goto LABEL_21;
        case 8uLL:
          v49 = *(_QWORD *)(v40 + 8 * i);
LABEL_21:
          *(_BYTE *)(v47 + i) = v49;
          break;
        default:
          continue;
      }
    }
  }
  v50 = objc_alloc_init(MEMORY[0x1E0CC7800]);
  v51 = objc_alloc(MEMORY[0x1E0CC77C0]);
  v53 = objc_msgSend_initWithType_data_(v51, v52, 2, (uint64_t)v43);
  objc_msgSend_setFaceCount_(v50, v54, v14, v55);
  objc_msgSend_setFaceTopology_(v50, v56, v53, v57);
  v58 = [a1 alloc];
  v62 = objc_msgSend_length(v19, v59, v60, v61);
  v64 = objc_msgSend_initWithName_indexBuffer_indexCount_indexType_geometryType_material_topology_(v58, v63, (uint64_t)&stru_1E63FD500, (uint64_t)v19, v62 / v9, v25, 5, 0, v50);

  v19 = (void *)v53;
LABEL_29:

  return v64;
}

uint64_t sub_1B1836248()
{
  uint64_t result;

  result = objc_opt_new();
  qword_1EEF65CE0 = result;
  return result;
}

uint64_t sub_1B183626C(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t i;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  id v80;
  id v81;
  const char *v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  unint64_t v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int hasInterleavedIndicesChannels;

  hasInterleavedIndicesChannels = objc_msgSend_hasInterleavedIndicesChannels(a3, a2, (uint64_t)a3, a4);
  v103 = objc_msgSend_indicesChannelCount(a3, v9, v10, v11);
  v15 = objc_msgSend_bytesPerIndex(a3, v12, v13, v14);
  v19 = objc_msgSend_primitiveCount(a3, v16, v17, v18);
  v23 = (void *)objc_msgSend_data(a3, v20, v21, v22);
  v30 = objc_msgSend_length(v23, v24, v25, v26);
  v31 = atomic_load((unsigned __int8 *)&qword_1EEF65CF8);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65CF8))
  {
    qword_1EEF65CF0 = objc_opt_new();
    __cxa_guard_release(&qword_1EEF65CF8);
  }
  if (a4)
    v32 = a4;
  else
    v32 = qword_1EEF65CF0;
  v33 = objc_msgSend_bytesPerIndex(a3, v27, v28, v29);
  v37 = 32;
  if (v33 == 2)
    v37 = 16;
  if (v33 == 1)
    v38 = 8;
  else
    v38 = v37;
  if (objc_msgSend_primitiveType(a3, v34, v35, v36) == 1)
  {
    v42 = objc_msgSend_primitiveCount(a3, v39, v40, v41) + 2;
    v46 = objc_msgSend_data(a3, v43, v44, v45);
    return objc_msgSend_newSubmeshWithGeometryData_indexBufferLength_interleaved_channelCount_channelIdx_bytesPerIndex_indexType_geometryType_allocator_indexCount_topology_(a1, v47, v46, v30, hasInterleavedIndicesChannels, v103, a5, v15, v38, 3, v32, v42, 0);
  }
  else if (objc_msgSend_primitiveType(a3, v39, v40, v41) == 4)
  {
    v102 = a5;
    v52 = (void *)objc_msgSend_data(a3, v49, v50, v51);
    v56 = objc_msgSend_bytes(v52, v53, v54, v55);
    v59 = (void *)objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v57, v19, v58);
    v63 = objc_msgSend_mutableBytes(v59, v60, v61, v62);
    if (v19 >= 1)
    {
      for (i = 0; i != v19; ++i)
      {
        switch(v15)
        {
          case 1:
            LOBYTE(v68) = *(_BYTE *)(v56 + i);
            goto LABEL_20;
          case 2:
            LOWORD(v68) = *(_WORD *)(v56 + 2 * i);
            goto LABEL_20;
          case 4:
            LODWORD(v68) = *(_DWORD *)(v56 + 4 * i);
            goto LABEL_20;
          case 8:
            v68 = *(_QWORD *)(v56 + 8 * i);
LABEL_20:
            *(_BYTE *)(v63 + i) = v68;
            break;
          default:
            continue;
        }
      }
    }
    v69 = (void *)objc_msgSend_data(a3, v64, v65, v66);
    v73 = (void *)objc_msgSend_data(a3, v70, v71, v72);
    v77 = objc_msgSend_length(v73, v74, v75, v76);
    v79 = objc_msgSend_subdataWithRange_(v69, v78, v19 * v15, v77 - v19 * v15);
    v80 = objc_alloc_init(MEMORY[0x1E0CC7800]);
    v81 = objc_alloc(MEMORY[0x1E0CC77C0]);
    v83 = (void *)objc_msgSend_initWithType_data_(v81, v82, 2, (uint64_t)v59);
    objc_msgSend_setFaceCount_(v80, v84, v19, v85);
    objc_msgSend_setFaceTopology_(v80, v86, (uint64_t)v83, v87);
    v89 = objc_msgSend_newSubmeshWithGeometryData_indexBufferLength_interleaved_channelCount_channelIdx_bytesPerIndex_indexType_geometryType_allocator_indexCount_topology_(a1, v88, v79, v30, hasInterleavedIndicesChannels, v103, v102, v15, v38, 5, v32, 0, v80);

    return v89;
  }
  else
  {
    v90 = objc_msgSend_primitiveType(a3, v49, v50, v51);
    if (v90 > 3)
    {
      v95 = 0;
      v94 = 1;
    }
    else
    {
      v94 = qword_1B2246990[v90];
      v95 = qword_1B22469B0[v90];
    }
    v96 = objc_msgSend_primitiveCount(a3, v91, v92, v93) * v94;
    v100 = objc_msgSend_data(a3, v97, v98, v99);
    return objc_msgSend_newSubmeshWithGeometryData_indexBufferLength_interleaved_channelCount_channelIdx_bytesPerIndex_indexType_geometryType_allocator_indexCount_topology_(a1, v101, v100, v30, hasInterleavedIndicesChannels, v103, a5, v15, v38, v95, v32, v96, 0);
  }
}

void sub_1B1836568(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EEF65CF8);
  _Unwind_Resume(a1);
}

id sub_1B1836580(objc_class *a1, uint64_t a2, void *a3)
{
  void *v5;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;

  v5 = (void *)objc_opt_new();
  v6 = [a1 alloc];
  v10 = objc_msgSend_name(a3, v7, v8, v9);
  v12 = (void *)objc_msgSend_initWithName_scatteringFunction_(v6, v11, v10, (uint64_t)v5);

  v16 = objc_msgSend_name(a3, v13, v14, v15);
  objc_msgSend_setName_(v12, v17, v16, v18);
  objc_setAssociatedObject(v12, CFSTR("VFXMDLAssociatedObject"), a3, (void *)0x301);
  objc_setAssociatedObject(a3, CFSTR("VFXMDLAssociatedObject"), v12, 0);
  v22 = (void *)objc_msgSend_emission(a3, v19, v20, v21);
  sub_1B1836784(v12, CFSTR("emission"), v22, 13);
  v26 = (void *)objc_msgSend_diffuse(a3, v23, v24, v25);
  sub_1B1836784(v12, CFSTR("baseColor"), v26, 0);
  v30 = (void *)objc_msgSend_specular(a3, v27, v28, v29);
  sub_1B1836784(v12, CFSTR("specular"), v30, 3);
  v34 = (void *)objc_msgSend_reflective(a3, v31, v32, v33);
  sub_1B1836784(v12, CFSTR("reflective"), v34, 32769);
  v38 = (void *)objc_msgSend_transparent(a3, v35, v36, v37);
  sub_1B1836784(v12, CFSTR("opacity"), v38, 15);
  v42 = (void *)objc_msgSend_metalness(a3, v39, v40, v41);
  sub_1B1836784(v12, CFSTR("metallic"), v42, 2);
  v46 = (void *)objc_msgSend_roughness(a3, v43, v44, v45);
  sub_1B1836784(v12, CFSTR("roughness"), v46, 6);
  v50 = (void *)objc_msgSend_ambientOcclusion(a3, v47, v48, v49);
  sub_1B1836784(v12, CFSTR("ambientOcclusion"), v50, 22);
  v54 = (void *)objc_msgSend_displacement(a3, v51, v52, v53);
  sub_1B1836784(v12, CFSTR("displacement"), v54, 20);
  v58 = (void *)objc_msgSend_normal(a3, v55, v56, v57);
  sub_1B1836784(v12, CFSTR("normal"), v58, 19);
  if (objc_msgSend_isDoubleSided(a3, v59, v60, v61))
    objc_msgSend_setMaterialFace_(v12, v62, 2, v63);
  return v12;
}

void sub_1B1836784(void *a1, const char *a2, void *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  const char *v12;
  char isKindOfClass;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  float32x4_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  float v42;
  float v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  double v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  _DWORD *CFXImageRef;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  double v100;
  double v101;
  double v102;
  double v103;
  id v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  id v109;
  const char *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  double v118;
  double v119;
  double v120;
  float32x4_t v121;
  double v122;
  id v123;
  _OWORD v124[4];

  v10 = objc_msgSend_propertyNamed_(a1, a2, (uint64_t)a2, a4);
  v123 = (id)v10;
  if (!v10)
  {
    v11 = objc_alloc(MEMORY[0x1E0CC77A8]);
    v123 = (id)objc_msgSend_initWithName_semantic_(v11, v12, (uint64_t)a2, a4);
  }
  objc_msgSend_contents(a3, v7, v8, v9);
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v17 = (void *)objc_msgSend_contents(a3, v14, v15, v16);
  if ((isKindOfClass & 1) != 0)
  {
    objc_msgSend_vfx_colorComponentsForModelIO(v17, v18, v19, v20);
    v121 = v23;
    v23.i32[0] = v23.i32[3];
    if (v23.f32[3] == 1.0)
    {
      objc_msgSend_setType_(v123, v21, 7, v22, *(double *)v23.i64);
      objc_msgSend_intensity(a3, v24, v25, v26);
      objc_msgSend_setFloat3Value_(v123, v28, v29, v30, *(double *)vmulq_n_f32(v121, v27).i64);
    }
    else
    {
      objc_msgSend_setType_(v123, v21, 8, v22, *(double *)v23.i64);
      objc_msgSend_intensity(a3, v72, v73, v74);
      objc_msgSend_setFloat4Value_(v123, v76, v77, v78, *(double *)vmulq_n_f32(v121, v75).i64);
    }
  }
  else
  {
    objc_opt_class();
    v31 = objc_opt_isKindOfClass();
    v35 = objc_msgSend_contents(a3, v32, v33, v34);
    v38 = (void *)v35;
    if ((v31 & 1) != 0)
    {
      if (v35)
      {
        objc_msgSend_setType_(v123, v36, 5, v37);
        objc_msgSend_intensity(a3, v39, v40, v41);
        v43 = v42;
        objc_msgSend_floatValue(v38, v44, v45, v46);
        *(float *)&v48 = v43 * v47;
        objc_msgSend_setFloatValue_(v123, v49, v50, v51, v48);
      }
    }
    else
    {
      objc_opt_class();
      v52 = objc_opt_isKindOfClass();
      v56 = (void *)objc_msgSend_contents(a3, v53, v54, v55);
      if ((v52 & 1) != 0)
      {
        v60 = (void *)objc_msgSend_pathExtension(v56, v57, v58, v59);
        if (!objc_msgSend_isEqualToString_(v60, v61, (uint64_t)CFSTR("usdz"), v62))
        {
          objc_msgSend_setType_(v123, v63, 2, v65);
          v69 = objc_msgSend_contents(a3, v66, v67, v68);
          objc_msgSend_setURLValue_(v123, v70, v69, v71);
          goto LABEL_18;
        }
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          objc_msgSend_setType_(v123, v63, 1, v65);
          v82 = objc_msgSend_contents(a3, v79, v80, v81);
          objc_msgSend_setStringValue_(v123, v83, v82, v84);
          goto LABEL_18;
        }
      }
      CFXImageRef = (_DWORD *)objc_msgSend_getCFXImageRef(a3, v63, v64, v65);
      if (CFXImageRef)
      {
        v92 = sub_1B183108C(CFXImageRef, 0, v86, v87, v88, v89, v90, v91);
        objc_msgSend_contentsTransform(a3, v93, v94, v95);
        v124[0] = v96;
        v124[1] = v97;
        v124[2] = v98;
        v124[3] = v99;
        v100 = sub_1B183CA2C((uint64_t)v124);
        if (v92)
        {
          v118 = v100;
          v119 = v101;
          v120 = v102;
          v122 = v103;
          v104 = objc_alloc(MEMORY[0x1E0CC7818]);
          v108 = (void *)objc_msgSend_initWithMatrix_(v104, v105, v106, v107, v118, v119, v120, v122);
          v109 = objc_alloc_init(MEMORY[0x1E0CC7810]);
          objc_msgSend_setTransform_(v109, v110, (uint64_t)v108, v111);
          objc_msgSend_setTexture_(v109, v112, (uint64_t)v92, v113);
          objc_msgSend_setType_(v123, v114, 3, v115);
          objc_msgSend_setTextureSamplerValue_(v123, v116, (uint64_t)v109, v117);

        }
      }
    }
  }
LABEL_18:
  if (!v10)
  {
    if (v123)

  }
}

uint64_t sub_1B1836A60()
{
  return 0;
}

id sub_1B1836A68(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  char isKindOfClass;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;

  v4 = objc_alloc_init(MEMORY[0x1E0CC77D8]);
  objc_setAssociatedObject(v4, CFSTR("VFXMDLAssociatedObject"), a3, (void *)0x301);
  objc_msgSend_setColorSpace_(v4, v5, *MEMORY[0x1E0C9DA10], v6);
  objc_msgSend_color(a3, v7, v8, v9);
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v14 = (void *)objc_msgSend_color(a3, v11, v12, v13);
  v17 = (uint64_t)v14;
  if ((isKindOfClass & 1) != 0)
    v17 = objc_msgSend_CGColor(v14, v15, (uint64_t)v14, v16);
  objc_msgSend_setColor_(v4, v15, v17, v16);
  LODWORD(v18) = 0;
  objc_msgSend_setAttenuationStartDistance_(v4, v19, v20, v21, v18);
  objc_msgSend_attenuationDistance(a3, v22, v23, v24);
  objc_msgSend_setAttenuationEndDistance_(v4, v25, v26, v27);
  LODWORD(v28) = 2.0;
  objc_msgSend_setAttenuationFalloffExponent_(v4, v29, v30, v31, v28);
  objc_msgSend_spotInnerAngle(a3, v32, v33, v34);
  objc_msgSend_setInnerConeAngle_(v4, v35, v36, v37);
  objc_msgSend_spotOuterAngle(a3, v38, v39, v40);
  objc_msgSend_setOuterConeAngle_(v4, v41, v42, v43);
  if (objc_msgSend_type(a3, v44, v45, v46))
  {
    if (objc_msgSend_type(a3, v47, v48, v49) == 3)
    {
      objc_msgSend_setLightType_(v4, v50, 3, v52);
    }
    else if (objc_msgSend_type(a3, v50, v51, v52) == 2)
    {
      objc_msgSend_setLightType_(v4, v53, 2, v55);
    }
    else if (objc_msgSend_type(a3, v53, v54, v55) == 1)
    {
      objc_msgSend_setLightType_(v4, v56, 4, v57);
    }
  }
  else
  {
    objc_msgSend_setLightType_(v4, v47, 1, v49);
  }
  return v4;
}

id sub_1B1836BBC(objc_class *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  const char *v59;
  uint64_t v60;

  v4 = objc_alloc_init(a1);
  objc_setAssociatedObject(v4, CFSTR("VFXMDLAssociatedObject"), a3, (void *)0x301);
  objc_msgSend_focusDistance(a3, v5, v6, v7);
  objc_msgSend_setFocusDistance_(v4, v8, v9, v10);
  objc_msgSend_sensorHeight(a3, v11, v12, v13);
  objc_msgSend_setSensorVerticalAperture_(v4, v14, v15, v16);
  v20 = (void *)objc_msgSend_depthOfField(a3, v17, v18, v19);
  v24 = objc_msgSend_apertureBladeCount(v20, v21, v22, v23);
  objc_msgSend_setApertureBladeCount_(v4, v25, v24, v26);
  objc_msgSend_fieldOfView(a3, v27, v28, v29);
  objc_msgSend_setFieldOfView_(v4, v30, v31, v32);
  objc_msgSend_zNear(a3, v33, v34, v35);
  objc_msgSend_setNearVisibilityDistance_(v4, v36, v37, v38);
  objc_msgSend_zFar(a3, v39, v40, v41);
  objc_msgSend_setFarVisibilityDistance_(v4, v42, v43, v44);
  v48 = (void *)objc_msgSend_depthOfField(a3, v45, v46, v47);
  objc_msgSend_fStop(v48, v49, v50, v51);
  objc_msgSend_setFStop_(v4, v52, v53, v54);
  v58 = objc_msgSend_usesOrthographicProjection(a3, v55, v56, v57);
  objc_msgSend_setProjection_(v4, v59, v58, v60);
  return v4;
}

uint64_t **sub_1B1837818(void *a1, uint64_t *a2, uint64_t **a3)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  uint64_t *v26;
  __int128 v27;
  __int128 v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t i;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t j;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t **result;
  uint64_t v82;
  uint64_t *v83;
  uint64_t **v84;
  void *v85;
  uint64_t *v86;
  void *v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t *v100;
  _BYTE v101[128];
  _BYTE v102[128];
  _BYTE v103[128];
  uint64_t v104;

  v84 = a3;
  v85 = a1;
  v104 = *MEMORY[0x1E0C80C00];
  v100 = a2;
  v4 = (void *)objc_opt_new();
  v8 = (void *)objc_msgSend_jointPaths(a2, v5, v6, v7);
  v12 = objc_msgSend_count(v8, v9, v10, v11);
  v13 = v12;
  v14 = v12;
  v16 = MEMORY[0x1E0C80A78](v12, v15);
  v20 = (void *)objc_msgSend_jointRestTransforms(a2, v17, v18, v19, v16);
  v86 = &v82 - 8 * v14;
  if (objc_msgSend_getFloat4x4Array_maxCount_(v20, v21, (uint64_t)v86, v14) < (unint64_t)v13)
  {
    v25 = (_OWORD *)MEMORY[0x1E0C83FF0];
    v26 = v86;
    do
    {
      v27 = v25[1];
      *(_OWORD *)v26 = *v25;
      *((_OWORD *)v26 + 1) = v27;
      v28 = v25[3];
      *((_OWORD *)v26 + 2) = v25[2];
      *((_OWORD *)v26 + 3) = v28;
      v26 += 8;
      --v14;
    }
    while (v14);
  }
  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v83 = a2;
  v87 = (void *)objc_msgSend_jointPaths(a2, v22, v23, v24);
  v30 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v29, (uint64_t)&v96, (uint64_t)v103, 16);
  if (v30)
  {
    v34 = v30;
    v35 = 0;
    v36 = *(_QWORD *)v97;
    do
    {
      for (i = 0; i != v34; ++i)
      {
        if (*(_QWORD *)v97 != v36)
          objc_enumerationMutation(v87);
        v38 = *(void **)(*((_QWORD *)&v96 + 1) + 8 * i);
        v39 = objc_msgSend_rangeOfString_options_(v38, v31, (uint64_t)CFSTR("/"), 4);
        v41 = (uint64_t)v38;
        if (v39 != 0x7FFFFFFFFFFFFFFFLL)
          v41 = objc_msgSend_substringFromIndex_(v38, v31, v39 + 1, v40);
        if (v41)
        {
          v42 = (void *)objc_opt_new();
          objc_msgSend_setName_(v42, v43, v41, v44);
          if (v42)
          {
            objc_msgSend_setObject_forKeyedSubscript_(v4, v31, (uint64_t)v42, (uint64_t)v38);
            objc_msgSend_setTransform_(v42, v45, v46, v47, *(double *)&v86[8 * (unint64_t)(v35 + i)], *(double *)&v86[8 * (unint64_t)(v35 + i) + 2], *(double *)&v86[8 * (unint64_t)(v35 + i) + 4], *(double *)&v86[8 * (unint64_t)(v35 + i) + 6]);

          }
        }
      }
      v34 = objc_msgSend_countByEnumeratingWithState_objects_count_(v87, v31, (uint64_t)&v96, (uint64_t)v103, 16);
      v35 += i;
    }
    while (v34);
  }
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v48 = (void *)objc_msgSend_jointPaths(v83, v31, v32, v33);
  v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v48, v49, (uint64_t)&v92, (uint64_t)v102, 16);
  if (v50)
  {
    v52 = v50;
    v53 = *(_QWORD *)v93;
    do
    {
      v54 = 0;
      do
      {
        if (*(_QWORD *)v93 != v53)
          objc_enumerationMutation(v48);
        v55 = *(void **)(*((_QWORD *)&v92 + 1) + 8 * v54);
        v56 = objc_msgSend_rangeOfString_options_(v55, v51, (uint64_t)CFSTR("/"), 4);
        if (v56)
          v58 = v56 == 0x7FFFFFFFFFFFFFFFLL;
        else
          v58 = 1;
        if (!v58)
        {
          v59 = objc_msgSend_substringToIndex_(v55, v51, v56, v57);
          if (v59)
          {
            v61 = v59;
            if (objc_msgSend_valueForKey_(v4, v51, v59, v60))
            {
              v63 = (void *)objc_msgSend_objectForKeyedSubscript_(v4, v51, v61, v62);
              v66 = objc_msgSend_objectForKeyedSubscript_(v4, v64, (uint64_t)v55, v65);
              objc_msgSend_addChildNode_(v63, v67, v66, v68);
            }
          }
        }
        ++v54;
      }
      while (v52 != v54);
      v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v48, v51, (uint64_t)&v92, (uint64_t)v102, 16);
      v52 = v69;
    }
    while (v69);
  }
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v70 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v51, (uint64_t)&v88, (uint64_t)v101, 16);
  v73 = v85;
  if (v70)
  {
    v74 = v70;
    v75 = *(_QWORD *)v89;
    do
    {
      for (j = 0; j != v74; ++j)
      {
        if (*(_QWORD *)v89 != v75)
          objc_enumerationMutation(v4);
        v77 = (void *)objc_msgSend_objectForKeyedSubscript_(v4, v71, *(_QWORD *)(*((_QWORD *)&v88 + 1) + 8 * j), v72);
        if (!objc_msgSend_parentNode(v77, v78, v79, v80))
          objc_msgSend_addChildNode_(v73, v71, (uint64_t)v77, v72);
      }
      v74 = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v71, (uint64_t)&v88, (uint64_t)v101, 16);
    }
    while (v74);
  }
  result = sub_1B183C61C(v84, &v100);
  *result = (uint64_t *)v4;
  result[1] = (uint64_t *)v73;
  return result;
}

uint64_t sub_1B1837CBC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;

  v5 = objc_msgSend_vertexCount(a1, a2, a3, a4);
  v8 = (void *)objc_msgSend_vertexAttributeDataForAttributeNamed_(a1, v6, *MEMORY[0x1E0CC7740], v7);
  v12 = objc_msgSend_dataStart(v8, v9, v10, v11);
  v16 = objc_msgSend_format(v8, v13, v14, v15) & 0xFFF;
  v18 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v17, v12, 4 * v16 * v5);
  return objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v19, v18, (uint64_t)CFSTR("kGeometrySourceSemanticBoneWeights"), v5, 1, v16, 4, 0, 4 * v16);
}

uint64_t sub_1B1837D64(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;

  v5 = objc_msgSend_vertexCount(a1, a2, a3, a4);
  v8 = (void *)objc_msgSend_vertexAttributeDataForAttributeNamed_(a1, v6, *MEMORY[0x1E0CC7738], v7);
  v12 = objc_msgSend_dataStart(v8, v9, v10, v11);
  v16 = objc_msgSend_format(v8, v13, v14, v15) & 0xFFF;
  v18 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v17, v12, 2 * v16 * v5);
  return objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v19, v18, (uint64_t)CFSTR("kGeometrySourceSemanticBoneIndices"), v5, 0, v16, 2, 0, 2 * v16);
}

uint64_t sub_1B1837F74(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;

  v4 = *(void **)(a1 + 32);
  v5 = (void *)MEMORY[0x1E0CB3940];
  v6 = objc_msgSend_name(a2, (const char *)a2, a3, a4);
  v10 = (void *)objc_msgSend_UUID(MEMORY[0x1E0CB3A28], v7, v8, v9);
  v14 = objc_msgSend_UUIDString(v10, v11, v12, v13);
  v17 = objc_msgSend_stringWithFormat_(v5, v15, (uint64_t)CFSTR("AO_%@_%@.png"), v16, v6, v14);
  return objc_msgSend_stringByAppendingPathComponent_(v4, v18, v17, v19);
}

void sub_1B1837FE0(uint64_t a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t i;
  void *v14;
  uint64_t v15;
  char AmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed;
  uint64_t v17;
  _QWORD v18[6];
  __int128 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[7];
  _QWORD v30[6];
  _QWORD v31[6];
  _QWORD v32[6];
  _BYTE v33[128];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x3052000000;
  v32[3] = sub_1B18382C4;
  v32[4] = sub_1B18382D4;
  v32[5] = 0;
  v31[0] = 0;
  v31[1] = v31;
  v31[2] = 0x3052000000;
  v31[3] = sub_1B18382C4;
  v31[4] = sub_1B18382D4;
  v31[5] = 0;
  v30[0] = 0;
  v30[1] = v30;
  v30[2] = 0x3052000000;
  v30[3] = sub_1B18382C4;
  v30[4] = sub_1B18382D4;
  v30[5] = 0;
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = sub_1B18382E0;
  v29[3] = &unk_1E63D6FA8;
  v29[4] = v32;
  v29[5] = v31;
  v29[6] = v30;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v3 = *(void **)(a1 + 32);
  v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, a2, (uint64_t)&v25, (uint64_t)v33, 16);
  if (v5)
  {
    v8 = *(_QWORD *)v26;
    v9 = *MEMORY[0x1E0CC7730];
    v10 = *MEMORY[0x1E0CC7718];
    v11 = *MEMORY[0x1E0CC7748];
    v12 = 1;
    do
    {
      for (i = 0; i != v5; ++i)
      {
        if (*(_QWORD *)v26 != v8)
          objc_enumerationMutation(v3);
        v14 = *(void **)(*((_QWORD *)&v25 + 1) + 8 * i);
        if (*(_BYTE *)(a1 + 96))
        {
          LODWORD(v6) = *(_DWORD *)(a1 + 88);
          LODWORD(v7) = *(_DWORD *)(a1 + 92);
          v15 = *(_QWORD *)(a1 + 40);
          if (*(_BYTE *)(a1 + 97))
            AmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed = objc_msgSend_generateAmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed_(v14, v4, v15, v9, v6, v7);
          else
            AmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed = objc_msgSend_generateAmbientOcclusionTextureWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed_materialPropertyNamed_(v14, v4, v15, v10, CFSTR("aoTexture"), v6, v7);
        }
        else if (*(_BYTE *)(a1 + 97))
        {
          AmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed = objc_msgSend_generateLightMapVertexColorsWithLightsToConsider_objectsToConsider_vertexAttributeNamed_(v14, v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), v9);
        }
        else
        {
          LODWORD(v6) = *(_DWORD *)(a1 + 88);
          AmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed = objc_msgSend_generateLightMapTextureWithQuality_lightsToConsider_objectsToConsider_vertexAttributeNamed_materialPropertyNamed_(v14, v4, *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40), v11, CFSTR("lightmapTexture"), v6);
        }
        v12 &= AmbientOcclusionVertexColorsWithQuality_attenuationFactor_objectsToConsider_vertexAttributeNamed;
      }
      v5 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v4, (uint64_t)&v25, (uint64_t)v33, 16);
    }
    while (v5);
  }
  else
  {
    v12 = 1;
  }
  v18[0] = MEMORY[0x1E0C809B0];
  v18[1] = 3221225472;
  v18[2] = sub_1B183830C;
  v18[3] = &unk_1E63D6FD0;
  v23 = v12;
  v17 = *(_QWORD *)(a1 + 56);
  v24 = *(_BYTE *)(a1 + 96);
  v18[4] = v17;
  v18[5] = v29;
  v19 = *(_OWORD *)(a1 + 64);
  v21 = v31;
  v22 = v32;
  v20 = *(_QWORD *)(a1 + 80);
  dispatch_async(MEMORY[0x1E0C80D38], v18);
  _Block_object_dispose(v30, 8);
  _Block_object_dispose(v31, 8);
  _Block_object_dispose(v32, 8);
}

void sub_1B1838288(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a43, 8);
  _Block_object_dispose(&a49, 8);
  _Unwind_Resume(a1);
}

void sub_1B18382C4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1B18382D4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

_QWORD *sub_1B18382E0(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    *(_QWORD *)(*(_QWORD *)(result[4] + 8) + 40) = a2;
    *(_QWORD *)(*(_QWORD *)(result[5] + 8) + 40) = a3;
    *(_QWORD *)(*(_QWORD *)(result[6] + 8) + 40) = a4;
  }
  return result;
}

uint64_t sub_1B183830C(uint64_t a1, const char *a2)
{
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 88))
  {
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v3 = *(void **)(a1 + 32);
    v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, a2, (uint64_t)&v15, (uint64_t)v19, 16);
    if (v4)
    {
      v6 = v4;
      v7 = *(_QWORD *)v16;
      v8 = *MEMORY[0x1E0CC7718];
      v9 = *MEMORY[0x1E0CC7748];
      do
      {
        for (i = 0; i != v6; ++i)
        {
          if (*(_QWORD *)v16 != v7)
            objc_enumerationMutation(v3);
          v11 = *(void **)(*((_QWORD *)&v15 + 1) + 8 * i);
          v12 = *(_QWORD *)(a1 + 40);
          v13 = *(_QWORD *)(a1 + 48);
          if (*(_BYTE *)(a1 + 89))
            objc_msgSend__updateAssociatedVFXNodeWithGeometrySetter_texturePathProvider_vertexAttributeNamed_materialPropertyNamed_(v11, v5, v12, v13, v8, CFSTR("aoTexture"));
          else
            objc_msgSend__updateAssociatedVFXNodeWithGeometrySetter_texturePathProvider_vertexAttributeNamed_materialPropertyNamed_(v11, v5, v12, v13, v9, CFSTR("lightmapTexture"));
          (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
        }
        v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v15, (uint64_t)v19, 16);
      }
      while (v6);
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
}

void sub_1B1838BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B1838DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12, uint64_t a13, char a14, _QWORD *a15)
{
  sub_1B1805B90((uint64_t)&a11, a12);
  sub_1B1805B90((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1838E28(void *a1, char *a2, uint64_t **a3, uint64_t a4)
{
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unsigned int *v60;
  int v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  void *v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unint64_t v114;
  unint64_t *v115;

  result = objc_msgSend_topology(a1, a2, (uint64_t)a3, a4);
  if (result)
  {
    v11 = (void *)objc_msgSend_topology(a1, v8, v9, v10);
    if (objc_msgSend_edgeCreases(v11, v12, v13, v14))
    {
      v18 = (void *)objc_msgSend_topology(a1, v15, v16, v17);
      if (objc_msgSend_edgeCreaseIndices(v18, v19, v20, v21))
      {
        v22 = (void *)objc_msgSend_topology(a1, v15, v16, v17);
        v26 = (void *)objc_msgSend_edgeCreaseIndices(v22, v23, v24, v25);
        v30 = (void *)objc_msgSend_map(v26, v27, v28, v29);
        v34 = objc_msgSend_bytes(v30, v31, v32, v33);
        v38 = (void *)objc_msgSend_topology(a1, v35, v36, v37);
        v42 = (void *)objc_msgSend_edgeCreases(v38, v39, v40, v41);
        v46 = (void *)objc_msgSend_map(v42, v43, v44, v45);
        v50 = (int *)objc_msgSend_bytes(v46, v47, v48, v49);
        v54 = (void *)objc_msgSend_topology(a1, v51, v52, v53);
        v58 = objc_msgSend_edgeCreaseCount(v54, v55, v56, v57);
        if (v58 >= 1)
        {
          v59 = v58;
          v60 = (unsigned int *)(v34 + 4);
          do
          {
            v114 = *v60 | ((unint64_t)*(v60 - 1) << 32);
            v61 = *v50++;
            v115 = &v114;
            *((_DWORD *)sub_1B183CD4C((uint64_t **)a2, &v114, (uint64_t)&unk_1B22458B0, &v115) + 10) = v61;
            v60 += 2;
            --v59;
          }
          while (v59);
        }
      }
    }
    v62 = (void *)objc_msgSend_topology(a1, v15, v16, v17);
    result = objc_msgSend_vertexCreases(v62, v63, v64, v65);
    if (result)
    {
      v69 = (void *)objc_msgSend_topology(a1, v66, v67, v68);
      result = objc_msgSend_vertexCreaseIndices(v69, v70, v71, v72);
      if (result)
      {
        v76 = (void *)objc_msgSend_topology(a1, v73, v74, v75);
        v80 = (void *)objc_msgSend_vertexCreaseIndices(v76, v77, v78, v79);
        v84 = (void *)objc_msgSend_map(v80, v81, v82, v83);
        v88 = (unint64_t *)objc_msgSend_bytes(v84, v85, v86, v87);
        v92 = (void *)objc_msgSend_topology(a1, v89, v90, v91);
        v96 = (void *)objc_msgSend_vertexCreases(v92, v93, v94, v95);
        v100 = (void *)objc_msgSend_map(v96, v97, v98, v99);
        v104 = (int *)objc_msgSend_bytes(v100, v101, v102, v103);
        v108 = (void *)objc_msgSend_topology(a1, v105, v106, v107);
        result = objc_msgSend_vertexCreaseCount(v108, v109, v110, v111);
        if ((int)result >= 1)
        {
          v112 = result;
          do
          {
            v113 = *v104++;
            v115 = v88;
            result = (uint64_t)sub_1B183CE0C(a3, (unsigned int *)v88, (uint64_t)&unk_1B22458B0, (unsigned int **)&v115);
            *(_DWORD *)(result + 32) = v113;
            v88 = (unint64_t *)((char *)v88 + 4);
            --v112;
          }
          while (v112);
        }
      }
    }
  }
  return result;
}

unint64_t sub_1B1838FD0(void *a1, const char *a2, void *a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  int v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  int v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v73;

  v4 = (void *)a4;
  v5 = a2;
  v6 = (void *)objc_msgSend_vertexDescriptor(a3, a2, (uint64_t)a3, a4);
  v10 = (void *)objc_msgSend_attributes(v6, v7, v8, v9);
  result = objc_msgSend_count(v10, v11, v12, v13);
  if (result)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = *MEMORY[0x1E0CC7760];
    v22 = *MEMORY[0x1E0CC7750];
    v23 = *MEMORY[0x1E0CC7738];
    v73 = *MEMORY[0x1E0CC7740];
    v70 = *MEMORY[0x1E0CC7730];
    do
    {
      v24 = (void *)objc_msgSend_attributes(v6, v15, v16, v17);
      v27 = (void *)objc_msgSend_objectAtIndexedSubscript_(v24, v25, v18, v26);
      if (objc_msgSend_format(v27, v28, v29, v30))
      {
        v34 = (void *)objc_msgSend_name(v27, v31, v32, v33);
        v37 = objc_msgSend_containsString_(v34, v35, v21, v36);
        if ((v20 & v37 & 1) != 0)
        {
          v20 = 1;
        }
        else
        {
          v20 |= v37;
          v38 = (void *)objc_msgSend_name(v27, v31, v32, v33);
          v41 = objc_msgSend_containsString_(v38, v39, v22, v40);
          if ((v19 & v41 & 1) != 0)
          {
            v19 = 1;
          }
          else
          {
            v19 |= v41;
            v42 = (void *)objc_msgSend_name(v27, v31, v32, v33);
            if ((objc_msgSend_containsString_(v42, v43, v23, v44) & 1) == 0)
            {
              v45 = (void *)objc_msgSend_name(v27, v31, v32, v33);
              if ((objc_msgSend_containsString_(v45, v46, v73, v47) & 1) == 0)
              {
                v48 = (void *)objc_msgSend_name(v27, v31, v32, v33);
                if ((objc_msgSend_hasSuffix_(v48, v49, (uint64_t)CFSTR("UVi"), v50) & 1) == 0)
                {
                  v69 = (char *)v5;
                  v51 = v4;
                  v52 = (void *)objc_msgSend_name(v27, v31, v32, v33);
                  if (objc_msgSend_containsString_(v52, v53, v70, v54)
                    && (v56 = (void *)objc_msgSend_objectForKeyedSubscript_(v4, v31, (uint64_t)CFSTR("kSceneSourceUSDIgnoreVertexColors"), v55), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)&& (objc_msgSend_BOOLValue(v56, v31, v57, v58) & 1) != 0|| (v59 = objc_msgSend_geometrySourceWithMDLVertexAttribute_mesh_(VFXMeshSource, v31, (uint64_t)v27, (uint64_t)a3)) == 0)
                  {
                    v4 = v51;
                    v5 = v69;
                  }
                  else
                  {
                    objc_msgSend_addObject_(a1, v31, v59, v33);
                    v62 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v60, v18, v61);
                    objc_msgSend_addObject_(v69, v63, v62, v64);
                    v4 = v51;
                    v5 = v69;
                  }
                }
              }
            }
          }
        }
      }
      ++v18;
      v65 = (void *)objc_msgSend_attributes(v6, v31, v32, v33);
      result = objc_msgSend_count(v65, v66, v67, v68);
    }
    while (v18 < result);
  }
  return result;
}

uint64_t sub_1B18391F0(uint64_t result, uint64_t a2, void *a3, uint64_t a4)
{
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  BOOL v64;
  const char *v65;
  uint64_t v66;

  if (*(_QWORD *)(a2 + 16))
  {
    v6 = (void *)result;
    v7 = (void *)objc_msgSend_vertexDescriptor(a3, (const char *)a2, (uint64_t)a3, a4);
    v17 = (void *)objc_msgSend_attributeNamed_(v7, v8, *MEMORY[0x1E0CC7760], v9);
    if (!v17)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v11, v12, v13, v14, v15, v16, (uint64_t)"positionAttribute");
    v18 = (void *)objc_msgSend_vertexBuffers(a3, v10, v11, v12);
    v22 = objc_msgSend_bufferIndex(v17, v19, v20, v21);
    v25 = (void *)objc_msgSend_objectAtIndexedSubscript_(v18, v23, v22, v24);
    v29 = objc_msgSend_length(v25, v26, v27, v28);
    v33 = (void *)objc_msgSend_vertexDescriptor(a3, v30, v31, v32);
    v37 = (void *)objc_msgSend_layouts(v33, v34, v35, v36);
    v41 = objc_msgSend_bufferIndex(v17, v38, v39, v40);
    v44 = (void *)objc_msgSend_objectAtIndexedSubscript_(v37, v42, v41, v43);
    v48 = v29 / objc_msgSend_stride(v44, v45, v46, v47);
    v51 = (void *)objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v49, 4 * v48, v50);
    objc_msgSend_setLength_(v51, v52, 4 * v48, v53);
    v57 = (void *)objc_msgSend_mutableBytes(v51, v54, v55, v56);
    bzero(v57, 4 * v48);
    v61 = *(_QWORD **)a2;
    v60 = (_QWORD *)(a2 + 8);
    v59 = v61;
    if (v61 != v60)
    {
      do
      {
        *((_DWORD *)v57 + *((unsigned int *)v59 + 7)) = *((_DWORD *)v59 + 8);
        v62 = (_QWORD *)v59[1];
        if (v62)
        {
          do
          {
            v63 = v62;
            v62 = (_QWORD *)*v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            v63 = (_QWORD *)v59[2];
            v64 = *v63 == (_QWORD)v59;
            v59 = v63;
          }
          while (!v64);
        }
        v59 = v63;
      }
      while (v63 != v60);
    }
    result = objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v58, (uint64_t)v51, (uint64_t)CFSTR("kGeometrySourceSemanticVertexCrease"), v48, 1, 1, 4, 0, 4);
    if (result)
      return objc_msgSend_addObject_(v6, v65, result, v66);
  }
  return result;
}

uint64_t sub_1B18393A0(uint64_t result, char *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _QWORD *v27;
  unsigned int v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  BOOL v32;
  const char *v33;

  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v7 = (_QWORD *)result;
    v8 = 4 * v4;
    v9 = (void *)objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], a2, 4 * v4, a4);
    objc_msgSend_setLength_(v9, v10, v8, v11);
    v15 = objc_msgSend_mutableBytes(v9, v12, v13, v14);
    v16 = 8 * v7[2];
    v19 = (void *)objc_msgSend_dataWithLength_(MEMORY[0x1E0C99DF0], v17, v16, v18);
    objc_msgSend_setLength_(v19, v20, v16, v21);
    v25 = objc_msgSend_mutableBytes(v19, v22, v23, v24);
    v27 = (_QWORD *)*v7;
    if ((_QWORD *)*v7 != v7 + 1)
    {
      v28 = 0;
      do
      {
        v29 = v27[4];
        *(_DWORD *)(v25 + 8 * v28) = HIDWORD(v29);
        *(_DWORD *)(v25 + 4 * ((2 * v28) | 1)) = v29;
        *(_DWORD *)(v15 + 4 * v28) = *((_DWORD *)v27 + 10);
        v30 = (_QWORD *)v27[1];
        if (v30)
        {
          do
          {
            v31 = v30;
            v30 = (_QWORD *)*v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            v31 = (_QWORD *)v27[2];
            v32 = *v31 == (_QWORD)v27;
            v27 = v31;
          }
          while (!v32);
        }
        ++v28;
        v27 = v31;
      }
      while (v31 != v7 + 1);
    }
    *(_QWORD *)a2 = objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v26, (uint64_t)v9, (uint64_t)CFSTR("kGeometrySourceSemanticEdgeCrease"), v7[2], 1, 1, 4, 0, 4);
    result = objc_msgSend_meshElementWithData_primitiveType_primitiveCount_bytesPerIndex_(VFXMeshElement, v33, (uint64_t)v19, 2, v7[2], 4);
    *a3 = result;
  }
  return result;
}

void sub_1B1839A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,_QWORD *a34,uint64_t a35,char a36,_QWORD *a37)
{
  sub_1B1805B90((uint64_t)&a33, a34);
  sub_1B1805B90((uint64_t)&a36, a37);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1839F10(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  if (!objc_msgSend_faceIndexing(a1, a2, a3, a4))
    return 0;
  if (objc_msgSend_geometryType(a1, v5, v6, v7) != 5)
    return 0;
  v11 = (void *)objc_msgSend_topology(a1, v8, v9, v10);
  if (!objc_msgSend_faceTopology(v11, v12, v13, v14))
    return 0;
  v18 = (void *)objc_msgSend_indexBuffer(a1, v15, v16, v17);
  if (!objc_msgSend_length(v18, v19, v20, v21))
    return 0;
  v28 = (unint64_t)objc_msgSend_indexType(a1, v22, v23, v24) >> 3;
  if (v28 == 4)
    return sub_1B183A66C(a1, v25, v26, v27);
  if (v28 != 2)
  {
    if (v28 == 1)
      return sub_1B1839FBC(a1, v25, v26, v27);
    return 0;
  }
  return sub_1B183A318(a1, v25, v26, v27);
}

uint64_t sub_1B1839FBC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  char *v50;
  char v51;
  char *v52;
  unint64_t v53;
  int64_t v54;
  uint64_t v55;
  unint64_t v56;
  size_t v57;
  char *v58;
  char *v59;
  char *v60;
  char *v61;
  char v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  int64_t v67;
  uint64_t v68;
  unint64_t v69;
  size_t v70;
  char *v71;
  char *v72;
  char *v73;
  char v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t i;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  const char *v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  void *__p;
  char *v107;
  char *v108;

  v5 = (void *)objc_msgSend_topology(a1, a2, a3, a4);
  v9 = (void *)objc_msgSend_faceTopology(v5, v6, v7, v8);
  v13 = (void *)objc_msgSend_map(v9, v10, v11, v12);
  v17 = objc_msgSend_bytes(v13, v14, v15, v16);
  if (!v17)
    return 0;
  v21 = v17;
  v22 = (void *)objc_msgSend_indexBuffer(a1, v18, v19, v20);
  v26 = (void *)objc_msgSend_map(v22, v23, v24, v25);
  v30 = objc_msgSend_bytes(v26, v27, v28, v29);
  if (!v30)
    return 0;
  v34 = v30;
  v35 = (void *)objc_msgSend_topology(a1, v31, v32, v33);
  v39 = objc_msgSend_faceCount(v35, v36, v37, v38);
  v43 = (void *)objc_msgSend_indexBuffer(a1, v40, v41, v42);
  v47 = objc_msgSend_length(v43, v44, v45, v46);
  __p = 0;
  v107 = 0;
  v108 = 0;
  sub_1B183CEC8((unint64_t *)&__p, v47 + v39);
  v104 = v39;
  if (v39)
  {
    v49 = 0;
    v50 = v107;
    do
    {
      v51 = *(_BYTE *)(v21 + v49);
      if (v50 >= v108)
      {
        v53 = (unint64_t)__p;
        v54 = v50 - (_BYTE *)__p;
        v55 = v50 - (_BYTE *)__p + 1;
        if (v55 < 0)
          abort();
        v56 = v108 - (_BYTE *)__p;
        if (2 * (v108 - (_BYTE *)__p) > (unint64_t)v55)
          v55 = 2 * v56;
        if (v56 >= 0x3FFFFFFFFFFFFFFFLL)
          v57 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v57 = v55;
        if (v57)
          v58 = (char *)operator new(v57);
        else
          v58 = 0;
        v59 = &v58[v54];
        v60 = &v58[v54];
        *v60 = v51;
        v52 = v60 + 1;
        if (v50 != (char *)v53)
        {
          v61 = &v50[~v53];
          do
          {
            v62 = *--v50;
            (v61--)[(_QWORD)v58] = v62;
          }
          while (v50 != (char *)v53);
          v50 = (char *)__p;
          v59 = v58;
        }
        __p = v59;
        v107 = v52;
        v108 = &v58[v57];
        if (v50)
          operator delete(v50);
        v39 = v104;
      }
      else
      {
        *v50 = v51;
        v52 = v50 + 1;
      }
      v107 = v52;
      ++v49;
      v50 = v52;
    }
    while (v49 != v39);
  }
  if (v47)
  {
    v63 = 0;
    v64 = v107;
    do
    {
      if (v64 >= v108)
      {
        v66 = (unint64_t)__p;
        v67 = v64 - (_BYTE *)__p;
        v68 = v64 - (_BYTE *)__p + 1;
        if (v68 < 0)
          abort();
        v69 = v108 - (_BYTE *)__p;
        if (2 * (v108 - (_BYTE *)__p) > (unint64_t)v68)
          v68 = 2 * v69;
        if (v69 >= 0x3FFFFFFFFFFFFFFFLL)
          v70 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
          v71 = (char *)operator new(v70);
        else
          v71 = 0;
        v72 = &v71[v67];
        v71[v67] = *(_BYTE *)(v34 + v63);
        v65 = (uint64_t)&v71[v67 + 1];
        if (v64 != (char *)v66)
        {
          v73 = &v64[~v66];
          do
          {
            v74 = *--v64;
            (v73--)[(_QWORD)v71] = v74;
          }
          while (v64 != (char *)v66);
          v64 = (char *)__p;
          v72 = v71;
        }
        __p = v72;
        v107 = &v71[v67 + 1];
        v108 = &v71[v70];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *v64 = *(_BYTE *)(v34 + v63);
        v65 = (uint64_t)(v64 + 1);
      }
      v107 = (char *)v65;
      ++v63;
      v64 = (char *)v65;
    }
    while (v63 != v47);
  }
  else
  {
    v65 = (uint64_t)v107;
  }
  v79 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v48, (uint64_t)__p, v65 - (_QWORD)__p, v104);
  v80 = 0;
  for (i = 0; ; ++i)
  {
    v82 = (void *)objc_msgSend_faceIndexing(a1, v76, v77, v78);
    if (i >= objc_msgSend_count(v82, v83, v84, v85))
      break;
    v89 = (void *)objc_msgSend_faceIndexing(a1, v86, v87, v88);
    v92 = (void *)objc_msgSend_objectAtIndexedSubscript_(v89, v90, i, v91);
    if (v80 < objc_msgSend_unsignedIntValue(v92, v93, v94, v95))
    {
      v96 = (void *)objc_msgSend_faceIndexing(a1, v76, v77, v78);
      v99 = (void *)objc_msgSend_objectAtIndexedSubscript_(v96, v97, i, v98);
      v80 = objc_msgSend_unsignedIntValue(v99, v100, v101, v102);
    }
  }
  v75 = objc_msgSend_meshElementWithData_primitiveType_primitiveCount_indicesChannelCount_interleavedIndicesChannels_bytesPerIndex_(VFXMeshElement, v86, v79, 4, v105, v80 + 1, 1, 1);
  if (__p)
  {
    v107 = (char *)__p;
    operator delete(__p);
  }
  return v75;
}

void sub_1B183A2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B183A318(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  __int16 v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  __int16 v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  __int16 v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t i;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v99;
  void *__p;
  char *v101;
  char *v102;

  v5 = (void *)objc_msgSend_topology(a1, a2, a3, a4);
  v9 = (void *)objc_msgSend_faceTopology(v5, v6, v7, v8);
  v13 = (void *)objc_msgSend_map(v9, v10, v11, v12);
  v17 = objc_msgSend_bytes(v13, v14, v15, v16);
  if (!v17)
    return 0;
  v21 = v17;
  v22 = (void *)objc_msgSend_indexBuffer(a1, v18, v19, v20);
  v26 = (void *)objc_msgSend_map(v22, v23, v24, v25);
  v30 = objc_msgSend_bytes(v26, v27, v28, v29);
  if (!v30)
    return 0;
  v34 = v30;
  v35 = (void *)objc_msgSend_topology(a1, v31, v32, v33);
  v39 = objc_msgSend_faceCount(v35, v36, v37, v38);
  v43 = (void *)objc_msgSend_indexBuffer(a1, v40, v41, v42);
  __p = 0;
  v101 = 0;
  v102 = 0;
  v99 = objc_msgSend_length(v43, v44, v45, v46);
  sub_1B183CF6C(&__p, v39 + (v99 >> 1));
  if (v39)
  {
    v48 = 0;
    v49 = v101;
    do
    {
      v50 = *(unsigned __int8 *)(v21 + v48);
      if (v49 >= v102)
      {
        v52 = (char *)__p;
        v53 = v49 - (_BYTE *)__p;
        if (v49 - (_BYTE *)__p <= -3)
          abort();
        v54 = v53 >> 1;
        if (v102 - (_BYTE *)__p <= (unint64_t)((v53 >> 1) + 1))
          v55 = v54 + 1;
        else
          v55 = v102 - (_BYTE *)__p;
        if ((unint64_t)(v102 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v47 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v47 = v55;
        if (v47)
        {
          v56 = (char *)sub_1B1827A64((uint64_t)&v102, v47);
          v52 = (char *)__p;
          v49 = v101;
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[2 * v54];
        *(_WORD *)v57 = v50;
        v51 = v57 + 2;
        while (v49 != v52)
        {
          v58 = *((_WORD *)v49 - 1);
          v49 -= 2;
          *((_WORD *)v57 - 1) = v58;
          v57 -= 2;
        }
        __p = v57;
        v101 = v51;
        v102 = &v56[2 * v47];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_WORD *)v49 = v50;
        v51 = v49 + 2;
      }
      v101 = v51;
      ++v48;
      v49 = v51;
    }
    while (v48 != v39);
  }
  if (v99 > 1)
  {
    v61 = 0;
    if (v99 >> 1 <= 1)
      v62 = 1;
    else
      v62 = v99 >> 1;
    v63 = v101;
    do
    {
      if (v63 >= v102)
      {
        v64 = (char *)__p;
        v65 = v63 - (_BYTE *)__p;
        if (v63 - (_BYTE *)__p <= -3)
          abort();
        v66 = v65 >> 1;
        if (v102 - (_BYTE *)__p <= (unint64_t)((v65 >> 1) + 1))
          v67 = v66 + 1;
        else
          v67 = v102 - (_BYTE *)__p;
        if ((unint64_t)(v102 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFFELL)
          v47 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v47 = v67;
        if (v47)
        {
          v68 = (char *)sub_1B1827A64((uint64_t)&v102, v47);
          v64 = (char *)__p;
          v63 = v101;
        }
        else
        {
          v68 = 0;
        }
        v69 = &v68[2 * v66];
        *(_WORD *)v69 = *(_WORD *)(v34 + 2 * v61);
        v59 = v69 + 2;
        while (v63 != v64)
        {
          v70 = *((_WORD *)v63 - 1);
          v63 -= 2;
          *((_WORD *)v69 - 1) = v70;
          v69 -= 2;
        }
        __p = v69;
        v101 = v59;
        v102 = &v68[2 * v47];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_WORD *)v63 = *(_WORD *)(v34 + 2 * v61);
        v59 = v63 + 2;
      }
      v101 = v59;
      ++v61;
      v63 = v59;
    }
    while (v61 != v62);
  }
  else
  {
    v59 = v101;
  }
  v74 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], (const char *)v47, (uint64_t)__p, v59 - (_BYTE *)__p, v99);
  v75 = 0;
  for (i = 0; ; ++i)
  {
    v77 = (void *)objc_msgSend_faceIndexing(a1, v71, v72, v73);
    if (i >= objc_msgSend_count(v77, v78, v79, v80))
      break;
    v84 = (void *)objc_msgSend_faceIndexing(a1, v81, v82, v83);
    v87 = (void *)objc_msgSend_objectAtIndexedSubscript_(v84, v85, i, v86);
    if (v75 < objc_msgSend_unsignedIntValue(v87, v88, v89, v90))
    {
      v91 = (void *)objc_msgSend_faceIndexing(a1, v71, v72, v73);
      v94 = (void *)objc_msgSend_objectAtIndexedSubscript_(v91, v92, i, v93);
      v75 = objc_msgSend_unsignedIntValue(v94, v95, v96, v97);
    }
  }
  v60 = objc_msgSend_meshElementWithData_primitiveType_primitiveCount_indicesChannelCount_interleavedIndicesChannels_bytesPerIndex_(VFXMeshElement, v81, v74, 4, v39, v75 + 1, 1, 2);
  if (__p)
  {
    v101 = (char *)__p;
    operator delete(__p);
  }
  return v60;
}

void sub_1B183A634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B183A66C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  int v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  int v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t i;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v99;
  void *__p;
  char *v101;
  char *v102;

  v5 = (void *)objc_msgSend_topology(a1, a2, a3, a4);
  v9 = (void *)objc_msgSend_faceTopology(v5, v6, v7, v8);
  v13 = (void *)objc_msgSend_map(v9, v10, v11, v12);
  v17 = objc_msgSend_bytes(v13, v14, v15, v16);
  if (!v17)
    return 0;
  v21 = v17;
  v22 = (void *)objc_msgSend_indexBuffer(a1, v18, v19, v20);
  v26 = (void *)objc_msgSend_map(v22, v23, v24, v25);
  v30 = objc_msgSend_bytes(v26, v27, v28, v29);
  if (!v30)
    return 0;
  v34 = v30;
  v35 = (void *)objc_msgSend_topology(a1, v31, v32, v33);
  v39 = objc_msgSend_faceCount(v35, v36, v37, v38);
  v43 = (void *)objc_msgSend_indexBuffer(a1, v40, v41, v42);
  __p = 0;
  v101 = 0;
  v102 = 0;
  v99 = objc_msgSend_length(v43, v44, v45, v46);
  sub_1B17F7530(&__p, v39 + (v99 >> 2));
  if (v39)
  {
    v48 = 0;
    v49 = v101;
    do
    {
      v50 = *(unsigned __int8 *)(v21 + v48);
      if (v49 >= v102)
      {
        v52 = (char *)__p;
        v53 = (v49 - (_BYTE *)__p) >> 2;
        v54 = v53 + 1;
        if ((unint64_t)(v53 + 1) >> 62)
          abort();
        v55 = v102 - (_BYTE *)__p;
        if ((v102 - (_BYTE *)__p) >> 1 > v54)
          v54 = v55 >> 1;
        if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v54;
        if (v47)
        {
          v56 = (char *)sub_1B17F7E58((uint64_t)&v102, v47);
          v52 = (char *)__p;
          v49 = v101;
        }
        else
        {
          v56 = 0;
        }
        v57 = &v56[4 * v53];
        *(_DWORD *)v57 = v50;
        v51 = v57 + 4;
        while (v49 != v52)
        {
          v58 = *((_DWORD *)v49 - 1);
          v49 -= 4;
          *((_DWORD *)v57 - 1) = v58;
          v57 -= 4;
        }
        __p = v57;
        v101 = v51;
        v102 = &v56[4 * v47];
        if (v52)
          operator delete(v52);
      }
      else
      {
        *(_DWORD *)v49 = v50;
        v51 = v49 + 4;
      }
      v101 = v51;
      ++v48;
      v49 = v51;
    }
    while (v48 != v39);
  }
  if (v99 > 3)
  {
    v61 = 0;
    if (v99 >> 2 <= 1)
      v62 = 1;
    else
      v62 = v99 >> 2;
    v63 = v101;
    do
    {
      if (v63 >= v102)
      {
        v64 = (char *)__p;
        v65 = (v63 - (_BYTE *)__p) >> 2;
        v66 = v65 + 1;
        if ((unint64_t)(v65 + 1) >> 62)
          abort();
        v67 = v102 - (_BYTE *)__p;
        if ((v102 - (_BYTE *)__p) >> 1 > v66)
          v66 = v67 >> 1;
        if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFFCLL)
          v47 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v47 = v66;
        if (v47)
        {
          v68 = (char *)sub_1B17F7E58((uint64_t)&v102, v47);
          v64 = (char *)__p;
          v63 = v101;
        }
        else
        {
          v68 = 0;
        }
        v69 = &v68[4 * v65];
        *(_DWORD *)v69 = *(_DWORD *)(v34 + 4 * v61);
        v59 = v69 + 4;
        while (v63 != v64)
        {
          v70 = *((_DWORD *)v63 - 1);
          v63 -= 4;
          *((_DWORD *)v69 - 1) = v70;
          v69 -= 4;
        }
        __p = v69;
        v101 = v59;
        v102 = &v68[4 * v47];
        if (v64)
          operator delete(v64);
      }
      else
      {
        *(_DWORD *)v63 = *(_DWORD *)(v34 + 4 * v61);
        v59 = v63 + 4;
      }
      v101 = v59;
      ++v61;
      v63 = v59;
    }
    while (v61 != v62);
  }
  else
  {
    v59 = v101;
  }
  v74 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], (const char *)v47, (uint64_t)__p, v59 - (_BYTE *)__p, v99);
  v75 = 0;
  for (i = 0; ; ++i)
  {
    v77 = (void *)objc_msgSend_faceIndexing(a1, v71, v72, v73);
    if (i >= objc_msgSend_count(v77, v78, v79, v80))
      break;
    v84 = (void *)objc_msgSend_faceIndexing(a1, v81, v82, v83);
    v87 = (void *)objc_msgSend_objectAtIndexedSubscript_(v84, v85, i, v86);
    if (v75 < objc_msgSend_unsignedIntValue(v87, v88, v89, v90))
    {
      v91 = (void *)objc_msgSend_faceIndexing(a1, v71, v72, v73);
      v94 = (void *)objc_msgSend_objectAtIndexedSubscript_(v91, v92, i, v93);
      v75 = objc_msgSend_unsignedIntValue(v94, v95, v96, v97);
    }
  }
  v60 = objc_msgSend_meshElementWithData_primitiveType_primitiveCount_indicesChannelCount_interleavedIndicesChannels_bytesPerIndex_(VFXMeshElement, v81, v74, 4, v39, v75 + 1, 1, 4);
  if (__p)
  {
    v101 = (char *)__p;
    operator delete(__p);
  }
  return v60;
}

void sub_1B183A990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_1B183B1B8(void *result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  const char *v56;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  float v104;
  float v105;
  float v106;
  float v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  void *v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  const char *v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  void *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  const char *v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  void *v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  float32x4_t v186;
  uint64_t v187;
  float32x4_t v188;
  int8x16_t v189;
  int32x2_t v190;
  float32x4_t v191;
  int8x16_t v192;
  int32x2_t v193;
  int8x16_t v194;
  int32x2_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  __int128 v203;
  uint64_t v204;
  float32x4_t v205;
  uint64_t v206;
  float32x4_t v207;
  float32x4_t v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  void *v217;
  unint64_t v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  const char *v234;
  uint64_t v235;
  void *v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  float32x4_t v243;
  float32x4_t v244;
  __int128 v245;
  __int128 v246;
  float32x4_t v247;
  float32x4_t v248;
  __int128 v249;

  if (!result)
    return result;
  v6 = a4;
  v7 = result;
  v8 = (void *)objc_msgSend_propertyWithSemantic_(a2, (const char *)a2, a3, a4);
  if (objc_msgSend_type(v8, v9, v10, v11) == 2 && objc_msgSend_URLValue(v8, v12, v13, v14))
  {
    v15 = objc_msgSend_URLValue(v8, v12, v13, v14);
LABEL_32:
    objc_msgSend_setContents_(v7, v16, v15, v17);
    goto LABEL_33;
  }
  if (objc_msgSend_type(v8, v12, v13, v14) == 1 && objc_msgSend_stringValue(v8, v18, v19, v20))
  {
    if (!objc_msgSend_URLValue(v8, v18, v19, v20))
    {
      v133 = (void *)objc_msgSend_stringValue(v8, v21, v22, v23);
      if (!objc_msgSend_length(v133, v134, v135, v136))
        goto LABEL_33;
      v15 = objc_msgSend_stringValue(v8, v84, v85, v86);
      goto LABEL_32;
    }
    v24 = (void *)objc_msgSend_URLValue(v8, v21, v22, v23);
    v28 = (void *)objc_msgSend_path(v24, v25, v26, v27);
    if (objc_msgSend_stringValue(v8, v29, v30, v31)
      && (v35 = (void *)objc_msgSend_pathExtension(v28, v32, v33, v34),
          objc_msgSend_isEqualToString_(v35, v36, (uint64_t)CFSTR("usdz"), v37))
      && (v38 = (void *)objc_msgSend_currentThread(MEMORY[0x1E0CB3978], v32, v33, v34),
          v42 = (void *)objc_msgSend_threadDictionary(v38, v39, v40, v41),
          (v45 = objc_msgSend_valueForKey_(v42, v43, (uint64_t)CFSTR("VFX_MDLCurrentAssetResolver"), v44)) != 0)
      && (v46 = (void *)v45, (objc_opt_respondsToSelector() & 1) != 0)
      && (v47 = objc_msgSend_stringValue(v8, v32, v33, v34),
          v50 = (void *)objc_msgSend_resolveInsideArchiveWithAssetNamed_(v46, v48, v47, v49),
          (unint64_t)objc_msgSend_count(v50, v51, v52, v53) >= 2))
    {
      v54 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v32, (uint64_t)v28, v34);
      v55 = objc_alloc(MEMORY[0x1E0CB3998]);
      v57 = (void *)objc_msgSend_initWithURL_resolvingAgainstBaseURL_(v55, v56, v54, 0);
      v58 = (void *)MEMORY[0x1E0CB3940];
      v61 = (void *)objc_msgSend_objectAtIndexedSubscript_(v50, v59, 0, v60);
      v65 = objc_msgSend_intValue(v61, v62, v63, v64);
      v68 = (void *)objc_msgSend_objectAtIndexedSubscript_(v50, v66, 1, v67);
      v72 = objc_msgSend_intValue(v68, v69, v70, v71);
      v75 = objc_msgSend_stringWithFormat_(v58, v73, (uint64_t)CFSTR("offset=%d&size=%d"), v74, v65, v72);
      objc_msgSend_setQuery_(v57, v76, v75, v77);
      v81 = objc_msgSend_URL(v57, v78, v79, v80);
      objc_msgSend_setContents_(v7, v82, v81, v83);

    }
    else
    {
      v110 = objc_msgSend_stringValue(v8, v32, v33, v34);
      v114 = objc_msgSend_URLValue(v8, v111, v112, v113);
      objc_msgSend__setImagePath_withResolvedURL_(v7, v115, v110, v114);
    }
    goto LABEL_33;
  }
  if (objc_msgSend_type(v8, v18, v19, v20) != 3)
  {
    if (objc_msgSend_type(v8, v87, v88, v89) == 8)
    {
      objc_msgSend_float4Value(v8, v101, v102, v103);
      v15 = objc_msgSend_vfx_colorWithModelIORed_green_blue_alpha_options_(MEMORY[0x1E0DC3658], v108, a5, v109, v107, v104, v105, v106);
      goto LABEL_32;
    }
    if (objc_msgSend_type(v8, v101, v102, v103) == 7)
    {
      objc_msgSend_float3Value(v8, v116, v117, v118);
      v241 = v119;
      v123 = (void *)objc_msgSend_propertyName(v7, v120, v121, v122);
      if (objc_msgSend_isEqualToString_(v123, v124, (uint64_t)CFSTR("emission"), v125)
        && *(float *)&v241 == 1.0
        && *((float *)&v241 + 1) == 1.0
        && *((float *)&v241 + 2) == 1.0)
      {
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: ignoring white emission color from ModelIO"), v127, v128, v129, v130, v131, v132, v240);
        goto LABEL_33;
      }
      v15 = objc_msgSend_vfx_colorWithModelIORed_green_blue_alpha_options_(MEMORY[0x1E0DC3658], v126, a5, v128, *(float *)&v241, *((float *)&v241 + 1), *((float *)&v241 + 2), 1.0);
      goto LABEL_32;
    }
    if (objc_msgSend_type(v8, v116, v117, v118) == 5)
    {
      objc_msgSend_floatValue(v8, v137, v138, v139);
      v15 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v140, v141, v142);
      goto LABEL_32;
    }
    if (objc_msgSend_type(v8, v137, v138, v139) == 4)
    {
      v236 = (void *)MEMORY[0x1E0DC3658];
      v237 = objc_msgSend_color(v8, v84, v85, v86);
      v15 = objc_msgSend_colorWithCGColor_(v236, v238, v237, v239);
      goto LABEL_32;
    }
LABEL_33:
    if (v6)
    {
      objc_msgSend_setWrapS_(v7, v84, 2, v86);
      objc_msgSend_setWrapT_(v7, v143, 2, v144);
    }
    goto LABEL_35;
  }
  if (!objc_msgSend_textureSamplerValue(v8, v87, v88, v89))
    goto LABEL_33;
  v90 = (void *)objc_msgSend_textureSamplerValue(v8, v84, v85, v86);
  if (!objc_msgSend_texture(v90, v91, v92, v93))
    goto LABEL_33;
  v94 = (void *)objc_msgSend_textureSamplerValue(v8, v84, v85, v86);
  v98 = objc_msgSend_texture(v94, v95, v96, v97);
  objc_msgSend_setContents_(v7, v99, v98, v100);
LABEL_35:
  result = (void *)objc_msgSend_textureSamplerValue(v8, v84, v85, v86);
  if (result)
  {
    v148 = (void *)objc_msgSend_textureSamplerValue(v8, v145, v146, v147);
    v152 = objc_msgSend_textureComponents(v148, v149, v150, v151);
    objc_msgSend_setTextureComponents_(v7, v153, __rbit32(v152) >> 28, v154);
    v158 = (void *)objc_msgSend_textureSamplerValue(v8, v155, v156, v157);
    v162 = objc_msgSend_mappingChannel(v158, v159, v160, v161);
    objc_msgSend_setMappingChannel_(v7, v163, v162, v164);
    v168 = (void *)objc_msgSend_textureSamplerValue(v8, v165, v166, v167);
    if (objc_msgSend_transform(v168, v169, v170, v171))
    {
      v175 = (void *)objc_msgSend_textureSamplerValue(v8, v172, v173, v174);
      v179 = (void *)objc_msgSend_transform(v175, v176, v177, v178);
      objc_msgSend_matrix(v179, v180, v181, v182);
      v187 = 0;
      v189 = (int8x16_t)vmulq_f32(v188, v188);
      v190 = (int32x2_t)vextq_s8(v189, v189, 8uLL).u64[0];
      *(float *)v190.i32 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v189.i8, (float32x2_t)v190)));
      v192 = (int8x16_t)vmulq_f32(v191, v191);
      v193 = (int32x2_t)vextq_s8(v192, v192, 8uLL).u64[0];
      *(float *)v193.i32 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v192.i8, (float32x2_t)v193)));
      v194 = (int8x16_t)vmulq_f32(v186, v186);
      v195 = (int32x2_t)vextq_s8(v194, v194, 8uLL).u64[0];
      *(float *)v195.i32 = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v194.i8, (float32x2_t)v195)));
      v196 = vdivq_f32(v188, (float32x4_t)vdupq_lane_s32(v190, 0));
      v197 = vdivq_f32(v191, (float32x4_t)vdupq_lane_s32(v193, 0));
      v198 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
      v199 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
      v200 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
      v201 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
      LODWORD(v203) = v202.i32[0];
      DWORD1(v203) = vnegq_f32(v202).i32[1];
      *((_QWORD *)&v203 + 1) = __PAIR64__(1.0, v202.u32[2]);
      v242 = *MEMORY[0x1E0C83FF0];
      v243 = v199;
      v244 = v200;
      v245 = v203;
      do
      {
        *(__int128 *)((char *)&v246 + v187) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v198, COERCE_FLOAT(*(__int128 *)((char *)&v242 + v187))), v199, *(float32x2_t *)((char *)&v242 + v187), 1), v200, *(float32x4_t *)((char *)&v242 + v187), 2), (float32x4_t)xmmword_1B2246A10, *(float32x4_t *)((char *)&v242 + v187), 3);
        v187 += 16;
      }
      while (v187 != 64);
      v204 = 0;
      v205 = vdivq_f32(v186, (float32x4_t)vdupq_lane_s32(v195, 0));
      v196.i32[1] = vnegq_f32(v196).i32[1];
      v197.f32[0] = -v197.f32[0];
      v242 = v246;
      v243 = v247;
      v244 = v248;
      v245 = v249;
      do
      {
        *(__int128 *)((char *)&v246 + v204) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v196, COERCE_FLOAT(*(__int128 *)((char *)&v242 + v204))), v197, *(float32x2_t *)((char *)&v242 + v204), 1), v205, *(float32x4_t *)((char *)&v242 + v204), 2), v201, *(float32x4_t *)((char *)&v242 + v204), 3);
        v204 += 16;
      }
      while (v204 != 64);
      v206 = 0;
      v207.i32[0] = 0;
      v207.i64[1] = 0;
      v207.i32[1] = v193.i32[0];
      v208.i64[0] = 0;
      v208.i64[1] = v195.u32[0];
      v242 = v246;
      v243 = v247;
      v244 = v248;
      v245 = v249;
      do
      {
        *(__int128 *)((char *)&v246 + v206) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v190.u32[0], COERCE_FLOAT(*(__int128 *)((char *)&v242 + v206))), v207, *(float32x2_t *)((char *)&v242 + v206), 1), v208, *(float32x4_t *)((char *)&v242 + v206), 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)((char *)&v242 + v206), 3);
        v206 += 16;
      }
      while (v206 != 64);
      v209 = 0;
      v242 = v246;
      v243 = v247;
      v244 = v248;
      v245 = v249;
      do
      {
        *(__int128 *)((char *)&v246 + v209) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v198, COERCE_FLOAT(*(__int128 *)((char *)&v242 + v209))), v199, *(float32x2_t *)((char *)&v242 + v209), 1), v200, *(float32x4_t *)((char *)&v242 + v209), 2), (float32x4_t)xmmword_1B2244E50, *(float32x4_t *)((char *)&v242 + v209), 3);
        v209 += 16;
      }
      while (v209 != 64);
      objc_msgSend_setContentsTransform_(v7, v183, v184, v185, *(double *)&v246, *(double *)v247.i64, *(double *)v248.i64, *(double *)&v249);
    }
    v210 = (void *)objc_msgSend_textureSamplerValue(v8, v172, v173, v174);
    result = (void *)objc_msgSend_hardwareFilter(v210, v211, v212, v213);
    if (result)
    {
      v217 = result;
      v218 = objc_msgSend_sWrapMode(result, v214, v215, v216);
      if (v218 <= 2)
        objc_msgSend_setWrapS_(v7, v219, qword_1B22469D0[v218], v221);
      v222 = objc_msgSend_tWrapMode(v217, v219, v220, v221);
      if (v222 <= 2)
        objc_msgSend_setWrapT_(v7, v223, qword_1B22469D0[v222], v225);
      v226 = objc_msgSend_minFilter(v217, v223, v224, v225);
      if (v226)
      {
        if (v226 == 1)
          objc_msgSend_setMinificationFilter_(v7, v227, 2, v229);
      }
      else
      {
        objc_msgSend_setMinificationFilter_(v7, v227, 1, v229);
      }
      v230 = objc_msgSend_magFilter(v217, v227, v228, v229);
      if (v230)
      {
        if (v230 == 1)
          objc_msgSend_setMagnificationFilter_(v7, v231, 2, v233);
      }
      else
      {
        objc_msgSend_setMagnificationFilter_(v7, v231, 1, v233);
      }
      result = (void *)objc_msgSend_mipFilter(v217, v231, v232, v233);
      if (result)
      {
        if (result == (void *)1)
          return (void *)objc_msgSend_setMipFilter_(v7, v234, 2, v235);
      }
      else
      {
        return (void *)objc_msgSend_setMipFilter_(v7, v234, 1, v235);
      }
    }
  }
  return result;
}

uint64_t sub_1B183BC40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id AssociatedObject;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t i;
  void *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  id v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t j;
  void *v76;
  id v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  const char *v90;
  const char *v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t result;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  id obj;
  uint64_t v108;
  void *v109;
  void *v110;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  _BYTE v130[128];
  _BYTE v131[128];
  _BYTE v132[128];
  _BYTE v133[128];
  uint64_t v134;

  v134 = *MEMORY[0x1E0C80C00];
  AssociatedObject = objc_getAssociatedObject(a1, CFSTR("VFXMDLAssociatedObject"));
  if (AssociatedObject)
  {
    v11 = AssociatedObject;
    v128 = 0u;
    v129 = 0u;
    v126 = 0u;
    v127 = 0u;
    obj = (id)objc_msgSend_children(a1, v8, v9, v10);
    v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v126, (uint64_t)v133, 16);
    if (v13)
    {
      v14 = v13;
      v15 = 0;
      v16 = *(_QWORD *)v127;
      v17 = 0x1E0C99000uLL;
      v104 = *(_QWORD *)v127;
      v105 = a3;
      do
      {
        v18 = 0;
        v106 = v14;
        do
        {
          if (*(_QWORD *)v127 != v16)
            objc_enumerationMutation(obj);
          v19 = *(void **)(*((_QWORD *)&v126 + 1) + 8 * v18);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            v108 = v18;
            if ((v15 & 1) != 0)
              sub_1B17C4408(16, (uint64_t)CFSTR("Error: a MDLObject has more than 1 child mesh - not supported"), v21, v22, v23, v24, v25, v26, v102);
            v27 = (void *)objc_msgSend_model(v11, v20, v21, v22);
            v31 = (id)objc_msgSend_materials(v27, v28, v29, v30);
            v34 = (void *)objc_msgSend_modelWithMDLMesh_(VFXModel, v32, (uint64_t)v19, v33);
            v109 = v31;
            v110 = (void *)objc_msgSend_array(*(void **)(v17 + 3560), v35, v36, v37);
            v38 = *(void **)(v17 + 3560);
            v42 = objc_msgSend_count(v31, v39, v40, v41);
            v45 = (void *)objc_msgSend_arrayWithCapacity_(v38, v43, v42, v44);
            v122 = 0u;
            v123 = 0u;
            v124 = 0u;
            v125 = 0u;
            v49 = (void *)objc_msgSend_submeshes(v19, v46, v47, v48);
            v51 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v50, (uint64_t)&v122, (uint64_t)v132, 16);
            if (v51)
            {
              v55 = v51;
              v56 = *(_QWORD *)v123;
              do
              {
                for (i = 0; i != v55; ++i)
                {
                  if (*(_QWORD *)v123 != v56)
                    objc_enumerationMutation(v49);
                  v58 = *(void **)(*((_QWORD *)&v122 + 1) + 8 * i);
                  if (objc_msgSend_material(v58, v52, v53, v54) && objc_msgSend_indexCount(v58, v52, v53, v54))
                  {
                    v59 = objc_msgSend_material(v58, v52, v53, v54);
                    objc_msgSend_addObject_(v45, v60, v59, v61);
                  }
                }
                v55 = objc_msgSend_countByEnumeratingWithState_objects_count_(v49, v52, (uint64_t)&v122, (uint64_t)v132, 16);
              }
              while (v55);
            }
            v62 = *(void **)(v17 + 3560);
            v63 = objc_msgSend_count(v109, v52, v53, v54);
            v66 = (void *)objc_msgSend_arrayWithCapacity_(v62, v64, v63, v65);
            v67 = objc_alloc(MEMORY[0x1E0CB37A0]);
            v70 = (void *)objc_msgSend_initWithString_(v67, v68, (uint64_t)&stru_1E63FD500, v69);
            v118 = 0u;
            v119 = 0u;
            v120 = 0u;
            v121 = 0u;
            v72 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v71, (uint64_t)&v118, (uint64_t)v131, 16);
            if (v72)
            {
              v73 = v72;
              v74 = *(_QWORD *)v119;
              do
              {
                for (j = 0; j != v73; ++j)
                {
                  if (*(_QWORD *)v119 != v74)
                    objc_enumerationMutation(v45);
                  v76 = *(void **)(*((_QWORD *)&v118 + 1) + 8 * j);
                  v77 = objc_getAssociatedObject(v76, CFSTR("VFXMDLAssociatedObject"));
                  if (v77)
                  {
                    v85 = (void *)objc_msgSend_copy(v77, v78, v79, v80);
                    v102 = (uint64_t)v70;
                    v87 = objc_msgSend__integrateModelKitComputedMaps_withGeometry_node_texturePathProvider_vertexAttributeNamed_materialPropertyNamed_filePath_(v85, v86, (uint64_t)v76, (uint64_t)v34, v11, a4, a5, a6);
                    if (v87)
                      objc_msgSend_addObject_(v110, v88, v87, v89);
                    objc_msgSend_addObject_(v66, v88, (uint64_t)v85, v89);

                  }
                  else
                  {
                    sub_1B17C4408(16, (uint64_t)CFSTR("Error: failed to find MKMaterial corresponding VFXMaterial"), v79, v80, v81, v82, v83, v84, v102);
                  }
                }
                v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v45, v90, (uint64_t)&v118, (uint64_t)v131, 16);
              }
              while (v73);
            }

            objc_msgSend_setMaterials_(v34, v91, (uint64_t)v66, v92);
            a3 = v105;
            if (v105)
              (*(void (**)(uint64_t, void *, void *, void *))(v105 + 16))(v105, v11, v34, v110);
            else
              objc_msgSend_setModel_(v11, v93, (uint64_t)v34, v94);
            v14 = v106;
            v16 = v104;
            v17 = 0x1E0C99000;
            v18 = v108;

            v15 = 1;
          }
          ++v18;
        }
        while (v18 != v14);
        v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v20, (uint64_t)&v126, (uint64_t)v133, 16);
      }
      while (v14);
    }
  }
  v116 = 0u;
  v117 = 0u;
  v114 = 0u;
  v115 = 0u;
  v95 = (void *)objc_msgSend_children(a1, v8, v9, v10);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v95, v96, (uint64_t)&v114, (uint64_t)v130, 16);
  if (result)
  {
    v99 = result;
    v100 = *(_QWORD *)v115;
    do
    {
      v101 = 0;
      do
      {
        if (*(_QWORD *)v115 != v100)
          objc_enumerationMutation(v95);
        objc_msgSend__updateAssociatedVFXNodeWithGeometrySetter_texturePathProvider_vertexAttributeNamed_materialPropertyNamed_(*(void **)(*((_QWORD *)&v114 + 1) + 8 * v101++), v98, a3, a4, a5, a6);
      }
      while (v99 != v101);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v95, v98, (uint64_t)&v114, (uint64_t)v130, 16);
      v99 = result;
    }
    while (result);
  }
  return result;
}

char *sub_1B183C0A8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    abort();
  result = (char *)sub_1B17F7E58((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

char *sub_1B183C0E4(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    abort();
  result = (char *)sub_1B17F812C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_1B183C120(void *a1, const char *a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[128];
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v9 = (void *)MEMORY[0x1E0C99DE8];
  v10 = objc_msgSend_count(a1, a2, a3, a4);
  v13 = (void *)objc_msgSend_arrayWithCapacity_(v9, v11, v10, v12);
  v17 = objc_msgSend_count(a1, v14, v15, v16);
  if (a6 != 0.0 && v17 > 1)
  {
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v18, (uint64_t)&v40, (uint64_t)v44, 16);
    if (v25)
    {
      v29 = v25;
      v30 = *(_QWORD *)v41;
      do
      {
        v31 = 0;
        do
        {
          if (*(_QWORD *)v41 != v30)
            objc_enumerationMutation(a1);
          objc_msgSend_doubleValue(*(void **)(*((_QWORD *)&v40 + 1) + 8 * v31), v26, v27, v28);
          v36 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v33, v34, v35, (v32 - a5) / a6);
          objc_msgSend_addObject_(v13, v37, v36, v38);
          ++v31;
        }
        while (v29 != v31);
        v29 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v26, (uint64_t)&v40, (uint64_t)v44, 16);
      }
      while (v29);
    }
  }
  else
  {
    v22 = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v18, v19, v20, 0.0);
    objc_msgSend_addObject_(v13, v23, v22, v24);
  }
  return v13;
}

void *sub_1B183C28C(uint64_t a1, const char *a2, int a3, uint64_t a4)
{
  int v4;
  int v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  double *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v4 = a4;
  v6 = (int)a2;
  v11 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], a2, (int)a2, a4);
  if (v6 >= 1)
  {
    v12 = 16 * a3;
    v13 = (double *)(a1 + 16 * v4);
    do
    {
      v14 = objc_msgSend_valueWithVFXFloat3_(MEMORY[0x1E0CB3B18], v8, v9, v10, *v13);
      objc_msgSend_addObject_(v11, v15, v14, v16);
      v13 = (double *)((char *)v13 + v12);
      --v6;
    }
    while (v6);
  }
  return v11;
}

uint64_t sub_1B183C314(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = objc_msgSend_componentConformingToProtocol_(a1, a2, (uint64_t)&unk_1EF0198D8, a4);
  if (v4 && (v5 = (void *)v4, objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    return objc_msgSend_skeleton(v5, v6, v7, v8);
  else
    return 0;
}

uint64_t sub_1B183C370(void *a1, float32x4_t *a2, void *a3, void **a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  float32x4_t v20;
  float32x4_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  _OWORD *f32;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  float32x4_t *v34;
  char *v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  char *v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  void *v43;
  const char *v44;
  uint64_t result;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[4];
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  _BYTE v66[128];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_transform(a1, (const char *)a2, (uint64_t)a3, (uint64_t)a4))
  {
    v55 = *a2;
    v56 = a2[1];
    v53 = a2[3];
    v54 = a2[2];
    v11 = (void *)objc_msgSend_transform(a1, v8, v9, v10);
    objc_msgSend_matrix(v11, v12, v13, v14);
    v15 = 0;
    v61[0] = v16;
    v61[1] = v17;
    v61[2] = v18;
    v61[3] = v19;
    do
    {
      *(float32x4_t *)((char *)&v62 + v15 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(v61[v15])), v56, *(float32x2_t *)&v61[v15], 1), v54, (float32x4_t)v61[v15], 2), v53, (float32x4_t)v61[v15], 3);
      ++v15;
    }
    while (v15 != 4);
  }
  else
  {
    v20 = a2[1];
    v62 = *a2;
    v63 = v20;
    v21 = a2[3];
    v64 = a2[2];
    v65 = v21;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_addObject_(a3, (const char *)v22, (uint64_t)a1, v24);
    v25 = (unint64_t)a4[2];
    v26 = (float32x4_t *)a4[1];
    if ((unint64_t)v26 >= v25)
    {
      v30 = ((char *)v26 - (_BYTE *)*a4) >> 6;
      v31 = v30 + 1;
      if ((unint64_t)(v30 + 1) >> 58)
        abort();
      v32 = v25 - (_QWORD)*a4;
      if (v32 >> 5 > v31)
        v31 = v32 >> 5;
      if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFC0)
        v22 = 0x3FFFFFFFFFFFFFFLL;
      else
        v22 = v31;
      if (v22)
        v33 = (char *)sub_1B183C9C0((uint64_t)(a4 + 2), v22);
      else
        v33 = 0;
      v34 = (float32x4_t *)&v33[64 * v30];
      v35 = &v33[64 * v22];
      v36 = v63;
      *v34 = v62;
      v34[1] = v36;
      v37 = v65;
      v34[2] = v64;
      v34[3] = v37;
      f32 = (_OWORD *)v34[4].f32;
      v39 = (char *)*a4;
      v38 = (float32x4_t *)a4[1];
      if (v38 != *a4)
      {
        do
        {
          v40 = v38[-4];
          v41 = v38[-3];
          v42 = v38[-1];
          v34[-2] = v38[-2];
          v34[-1] = v42;
          v34[-4] = v40;
          v34[-3] = v41;
          v34 -= 4;
          v38 -= 4;
        }
        while (v38 != (float32x4_t *)v39);
        v38 = (float32x4_t *)*a4;
      }
      *a4 = v34;
      a4[1] = f32;
      a4[2] = v35;
      if (v38)
        operator delete(v38);
    }
    else
    {
      v27 = v63;
      *v26 = v62;
      v26[1] = v27;
      v28 = v65;
      v26[2] = v64;
      v26[3] = v28;
      f32 = (_OWORD *)v26[4].f32;
    }
    a4[1] = f32;
  }
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v43 = (void *)objc_msgSend_children(a1, (const char *)v22, v23, v24);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v43, v44, (uint64_t)&v57, (uint64_t)v66, 16);
  v49 = result;
  if (result)
  {
    v50 = *(_QWORD *)v58;
    do
    {
      v51 = 0;
      do
      {
        if (*(_QWORD *)v58 != v50)
          objc_enumerationMutation(v43);
        v52 = *(void **)(*((_QWORD *)&v57 + 1) + 8 * v51);
        if (!sub_1B183C314(v52, v46, v47, v48))
          sub_1B183C370(v52, &v62, a3, a4);
        ++v51;
      }
      while (v49 != v51);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v43, v46, (uint64_t)&v57, (uint64_t)v66, 16);
      v49 = result;
    }
    while (result);
  }
  return result;
}

uint64_t **sub_1B183C61C(uint64_t **a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t **v4;
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v4 = a1 + 1;
  v3 = a1[1];
  v5 = *a2;
  if (v3)
  {
    while (1)
    {
      while (1)
      {
        v6 = (uint64_t **)v3;
        v7 = v3[4];
        if ((unint64_t)v5 >= v7)
          break;
        v3 = *v6;
        v4 = v6;
        if (!*v6)
          goto LABEL_9;
      }
      if (v7 >= (unint64_t)v5)
        break;
      v3 = v6[1];
      if (!v3)
      {
        v4 = v6 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v6 = a1 + 1;
LABEL_9:
    v8 = (uint64_t *)v6;
    v6 = (uint64_t **)operator new(0x38uLL);
    v6[5] = 0;
    v6[6] = 0;
    v6[4] = v5;
    *v6 = 0;
    v6[1] = 0;
    v6[2] = v8;
    *v4 = (uint64_t *)v6;
    v9 = (uint64_t *)**a1;
    v10 = (uint64_t *)v6;
    if (v9)
    {
      *a1 = v9;
      v10 = *v4;
    }
    sub_1B181D77C(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v6 + 5;
}

void *sub_1B183C6E8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t i;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  double v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t j;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  double v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v69;
  float64x2_t v70;

  v5 = (void *)objc_msgSend_skeleton(a1, a2, a3, a4);
  v9 = (void *)objc_msgSend_jointBindTransforms(v5, v6, v7, v8);
  v13 = objc_msgSend_elementCount(v9, v10, v11, v12);
  v17 = objc_msgSend_jointPaths(a1, v14, v15, v16);
  v19 = v17;
  if (v17)
  {
    v17 = objc_opt_new();
    v21 = (void *)v17;
    if (v13)
    {
      for (i = 0; i != v13; ++i)
      {
        v23 = objc_msgSend_numberWithUnsignedInt_(MEMORY[0x1E0CB37E8], v18, i, v20);
        v27 = (void *)objc_msgSend_jointPaths(v5, v24, v25, v26);
        v30 = objc_msgSend_objectAtIndexedSubscript_(v27, v28, i, v29);
        v17 = objc_msgSend_setObject_forKeyedSubscript_(v21, v31, v23, v30);
      }
    }
  }
  else
  {
    v21 = 0;
  }
  v32 = MEMORY[0x1E0C80A78](v17, v18);
  v36 = (void *)objc_msgSend_jointBindTransforms(v5, v33, v34, v35, v32);
  objc_msgSend_getDouble4x4Array_maxCount_(v36, v37, (unint64_t)(&v69 - 16 * v13) & 0xFFFFFFFFFFFFFFE0, v13);
  if (v19)
  {
    v41 = (void *)objc_msgSend_jointPaths(a1, v38, v39, v40);
    v13 = objc_msgSend_count(v41, v42, v43, v44);
  }
  v48 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v38, v13, v40);
  if (v13)
  {
    for (j = 0; j != v13; ++j)
    {
      if (v19)
      {
        v50 = (void *)objc_msgSend_jointPaths(a1, v45, v46, v47);
        v53 = objc_msgSend_objectAtIndexedSubscript_(v50, v51, j, v52);
        v56 = (void *)objc_msgSend_objectForKeyedSubscript_(v21, v54, v53, v55);
        objc_msgSend_unsignedLongValue(v56, v57, v58, v59);
      }
      __invert_d4();
      v60 = (void *)MEMORY[0x1E0CB3B18];
      v61 = sub_1B183C8DC(&v70);
      v65 = objc_msgSend_valueWithVFXMatrix4_(v60, v62, v63, v64, v61);
      objc_msgSend_addObject_(v48, v66, v65, v67);
    }
  }
  if (v21)

  return v48;
}

double sub_1B183C8DC(float64x2_t *a1)
{
  double result;

  *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*a1), a1[1]).u64[0];
  return result;
}

uint64_t sub_1B183C910(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;

  v5 = (void *)objc_msgSend_jointPaths(a1, a2, a3, a4);
  if (!objc_msgSend_count(v5, v6, v7, v8))
    return 0;
  v12 = (void *)objc_msgSend_jointPaths(a1, v9, v10, v11);
  v15 = (void *)objc_msgSend_objectAtIndexedSubscript_(v12, v13, 0, v14);
  v19 = v15;
  if (!v15)
    return (uint64_t)v19;
  if (!objc_msgSend_length(v15, v16, v17, v18))
    return 0;
  v22 = (void *)objc_msgSend_substringToIndex_(v19, v20, 1, v21);
  if (objc_msgSend_isEqualToString_(v22, v23, (uint64_t)CFSTR("/"), v24))
    v19 = (void *)objc_msgSend_substringFromIndex_(v19, v25, 1, v26);
  v27 = objc_msgSend_rangeOfString_(v19, v25, (uint64_t)CFSTR("/"), v26);
  if (v27 != 0x7FFFFFFFFFFFFFFFLL)
    return objc_msgSend_substringToIndex_(v19, v28, v27, v29);
  return (uint64_t)v19;
}

void *sub_1B183C9C0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58)
    sub_1B179C4A8();
  return operator new(a2 << 6);
}

void sub_1B183C9F4(_QWORD *a1)
{
  if (a1)
  {
    sub_1B183C9F4(*a1);
    sub_1B183C9F4(a1[1]);
    operator delete(a1);
  }
}

double sub_1B183CA2C(uint64_t a1)
{
  uint64_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int32x2_t v7;
  float32x4_t v8;
  __int128 v9;
  float32x4_t v10;
  float32x2_t v11;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  uint64_t v36;
  float32x4_t v37;
  __int128 v39;
  __int128 v40;
  float32x4_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  float32x4_t v45;
  __int128 v46;

  v1 = 0;
  v2 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
  v3 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
  v4 = *(float32x4_t *)(a1 + 16);
  v5 = (int8x16_t)vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
  *(float32x2_t *)v5.i8 = vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL));
  v6 = (int8x16_t)vmulq_f32(v4, v4);
  *(float32x2_t *)v6.i8 = vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL));
  v7 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v6.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v5.i8, *(int32x2_t *)v6.i8)));
  v8 = *(float32x4_t *)(a1 + 32);
  v9 = *(_OWORD *)(a1 + 48);
  v10 = vmulq_f32(v8, v8);
  v11 = (float32x2_t)vextq_s8((int8x16_t)v10, (int8x16_t)v10, 8uLL).u64[0];
  v11.f32[0] = sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v10.f32, v11)));
  *(int32x2_t *)v10.f32 = v7;
  v10.i64[1] = __PAIR64__(1.0, v11.u32[0]);
  __asm { FMOV            V5.4S, #1.0 }
  v17 = vdivq_f32(_Q5, v10);
  v18.i64[0] = 0;
  v18.i64[1] = v17.u32[2];
  v19 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
  v20 = *(int32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
  v21 = vdivq_f32(*(float32x4_t *)a1, (float32x4_t)vdupq_lane_s32(v7, 0));
  v22 = (int32x4_t)vdivq_f32(v4, (float32x4_t)vdupq_lane_s32(v7, 1));
  v23 = (int32x4_t)vdivq_f32(v8, (float32x4_t)vdupq_lane_s32((int32x2_t)v11, 0));
  v24 = vzip1q_s32((int32x4_t)v21, v23);
  v25 = vzip2q_s32((int32x4_t)v21, v23);
  v26 = vzip1q_s32(v22, v20);
  v27 = vzip2q_s32(v22, v20);
  v28 = (float32x4_t)vzip1q_s32(v24, v26);
  v29 = (float32x4_t)vzip1q_s32(v25, v27);
  v41 = v8;
  v42 = v9;
  do
  {
    *(__int128 *)((char *)&v43 + v1) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(*(__int128 *)((char *)&v39 + v1))), v3, *(float32x2_t *)((char *)&v39 + v1), 1), v19, *(float32x4_t *)((char *)&v39 + v1), 2), (float32x4_t)xmmword_1B2246A10, *(float32x4_t *)((char *)&v39 + v1), 3);
    v1 += 16;
  }
  while (v1 != 64);
  v30 = 0;
  v32.i64[0] = 0;
  v32.i32[2] = 0;
  v31.i32[0] = 0;
  v31.i64[1] = 0;
  v31.i32[1] = v17.i32[1];
  v32.i32[3] = v17.i32[3];
  v33 = (float32x4_t)vzip2q_s32(v24, v26);
  v39 = v43;
  v40 = v44;
  v41 = v45;
  v42 = v46;
  do
  {
    *(__int128 *)((char *)&v43 + v30) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v17.u32[0], COERCE_FLOAT(*(__int128 *)((char *)&v39 + v30))), v31, *(float32x2_t *)((char *)&v39 + v30), 1), v18, *(float32x4_t *)((char *)&v39 + v30), 2), v32, *(float32x4_t *)((char *)&v39 + v30), 3);
    v30 += 16;
  }
  while (v30 != 64);
  v34 = 0;
  v35 = (float32x4_t)vzip2q_s32(v25, v27);
  v39 = v43;
  v40 = v44;
  v41 = v45;
  v42 = v46;
  do
  {
    *(__int128 *)((char *)&v43 + v34) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v28, COERCE_FLOAT(*(__int128 *)((char *)&v39 + v34))), v33, *(float32x2_t *)((char *)&v39 + v34), 1), v29, *(float32x4_t *)((char *)&v39 + v34), 2), v35, *(float32x4_t *)((char *)&v39 + v34), 3);
    v34 += 16;
  }
  while (v34 != 64);
  v36 = 0;
  v39 = v43;
  v40 = v44;
  v41 = v45;
  v42 = v46;
  do
  {
    *(__int128 *)((char *)&v43 + v36) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v2, COERCE_FLOAT(*(__int128 *)((char *)&v39 + v36))), v3, *(float32x2_t *)((char *)&v39 + v36), 1), v19, *(float32x4_t *)((char *)&v39 + v36), 2), (float32x4_t)xmmword_1B2244E50, *(float32x4_t *)((char *)&v39 + v36), 3);
    v36 += 16;
  }
  while (v36 != 64);
  v37 = vmulq_n_f32(v21, *(float *)v7.i32);
  v37.i32[1] = vnegq_f32(v37).i32[1];
  return *(double *)v37.i64;
}

void sub_1B183CC28(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      abort();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

uint64_t **sub_1B183CD4C(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[4] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    sub_1B181D728(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1B183CE0C(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t **v9;
  unsigned int v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_1B181D728(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1B183CEC8(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void sub_1B183CF6C(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int16 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 1)
  {
    if ((a2 & 0x8000000000000000) != 0)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B1827A64(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFELL];
    v9 = &v6[2 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_WORD *)v11 - 1);
        v11 -= 2;
        *((_WORD *)v12 - 1) = v13;
        v12 -= 2;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1B183CFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E63CF798;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_DWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = sub_1B1813884(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 24) = v9;
  v17 = sub_1B187B1D0(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 32) = v17;
  *(_WORD *)(a1 + 48) = 15;
  sub_1B19D7DD8(v17, 0xFu);
  return a1;
}

void sub_1B183D094(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 576);
  if (v3)

  v4 = *(void **)(v1 + 560);
  if (v4)

  _Unwind_Resume(exception_object);
}

uint64_t sub_1B183D0B8(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &off_1E63CF798;
  sub_1B19D7E4C(*(int16x4_t **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  v2 = *(void **)(a1 + 576);
  if (v2)

  v3 = *(void **)(a1 + 560);
  if (v3)

  return a1;
}

void sub_1B183D108(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 576);
  if (v3)

  v4 = *(void **)(v1 + 560);
  if (v4)

  _Unwind_Resume(exception_object);
}

void sub_1B183D130(uint64_t a1)
{
  sub_1B183D0B8(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B183D154(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  int v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  unsigned __int16 *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  unsigned int v72;
  _BOOL4 v73;
  unsigned int v74;
  BOOL v75;

  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = (void *)objc_msgSend_resourceManager(v11, v12, v13, v14);
  v23 = sub_1B1813884(*(_QWORD *)(a1 + 16), v16, v17, v18, v19, v20, v21, v22);
  v31 = sub_1B1814768(*(uint64_t **)(a1 + 16), v24, v25, v26, v27, v28, v29, v30);
  if (v31 && sub_1B186CFA8((uint64_t)v31, v32, v33, v34, v35, v36, v37, v38))
  {
    v39 = sub_1B187B0F0(v23, 0) != 0;
    v75 = v39;
    v74 = sub_1B19DA3D0(*(_QWORD *)(a1 + 32));
    v40 = sub_1B19DA3E0(*(_QWORD *)(a1 + 32));
    v72 = *(_DWORD *)(a3 + 172);
    v73 = v40 != 0;
    v41 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v74) ^ ((0x9DDFEA08EB382D69 * v74) >> 47));
    v42 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ (v40 != 0))) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ (v40 != 0))));
    v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    v44 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) ^ ((0x9DDFEA08EB382D69 * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) >> 47));
    v45 = 0x9DDFEA08EB382D69
        * (v44 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v72)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v72)));
    v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
    if (*(_QWORD *)(a1 + 552) != v46)
    {
      *(_QWORD *)(a1 + 552) = v46;
      sub_1B19D9F28(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16));
      v47 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      objc_msgSend_setConstantValue_type_withName_(v47, v48, (uint64_t)&v74, 33, CFSTR("LightCount"));
      objc_msgSend_setConstantValue_type_withName_(v47, v49, (uint64_t)&v75, 53, CFSTR("has_IBL"));
      objc_msgSend_setConstantValue_type_withName_(v47, v50, (uint64_t)&v73, 33, CFSTR("raytracing_use_function_constant"));
      objc_msgSend_setConstantValue_type_withName_(v47, v51, (uint64_t)&v72, 33, CFSTR("quality_mode"));
      v52 = sub_1B19DA304(*(_QWORD *)(a1 + 32));
      v54 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(v15, v53, (uint64_t)CFSTR("vfx_rt_subsurface_trace"), (uint64_t)v47, v52);

      v55 = *(void **)(a1 + 560);
      if (v55 != (void *)v54)
      {
        if (v55)

        *(_QWORD *)(a1 + 560) = v54;
      }
      *(_DWORD *)(a1 + 460) = 0;
      sub_1B19DA290(*(_QWORD *)(a1 + 32));
    }
    v56 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, *(const CFX::RG::Resource **)(a3 + 248));
    v60 = *v56;
    v61 = v56[1];
    v62 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v60) ^ ((0x9DDFEA08EB382D69 * v60) >> 47));
    v63 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)));
    v64 = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47));
    if (*(_QWORD *)(a1 + 568) != v64)
    {
      *(_QWORD *)(a1 + 568) = v64;
      v65 = v60 >> 1;
      v66 = v61 >> 1;
      v67 = (void *)objc_msgSend_device(v11, v57, v58, v59);
      v69 = objc_msgSend_newBufferWithLength_options_(v67, v68, 96 * v65 * (unint64_t)v66, 32);
      v70 = *(void **)(a1 + 576);
      if (v70 != (void *)v69)
      {
        v71 = v69;
        if (v70)

        *(_QWORD *)(a1 + 576) = v71;
      }
      *(_DWORD *)(a1 + 460) = 0;
    }
  }
}

uint64_t sub_1B183D3F8(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  CFX::CrossFrameResourceManager *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38[2];

  v8 = *(_QWORD *)a5;
  v38[0] = (uint64_t)"RTSubsurfaceTracePass";
  v38[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF65D08);
  if ((v8 & 1) == 0)
  {
    v37 = a3;
    v35 = a2;
    v36 = __cxa_guard_acquire(&qword_1EEF65D08);
    a2 = v35;
    a3 = v37;
    if (v36)
    {
      qword_1EEF65D00 = (uint64_t)sub_1B183EB9C("RT_SUBSURFACE_TRACE", 0x13u);
      __cxa_guard_release(&qword_1EEF65D08);
      a2 = v35;
      a3 = v37;
    }
  }
  sub_1B18F7354(a1, a2, a3, v38, qword_1EEF65D00, 0);
  *(_QWORD *)a1 = &off_1E63CF7B8;
  *(_QWORD *)(a1 + 376) = a5;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  v16 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 392) = v16;
  *(_QWORD *)(a1 + 400) = objc_msgSend_resourceManager(v16, v17, v18, v19);
  v20 = a4[4];
  v21 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v22 = CFX::CrossFrameResourceManager::get(v20, v21);
  v28 = (uint64_t *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v22;
  if (!v22)
  {
    v29 = (uint64_t)a4[4];
    v30 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    v38[0] = *(_QWORD *)(a1 + 368);
    v31 = sub_1B183D5B0(v29, v30, v38);
    *(_QWORD *)(a1 + 384) = v31;
    *(_DWORD *)(v31 + 460) = 0;
    v32 = sub_1B17928F4(*(void **)(a1 + 392), a4[4]);
    v22 = *v28;
    *(_QWORD *)(*v28 + 544) = v32;
  }
  sub_1B183D154(v22, (CFX::RG::RenderGraphContext *)a4, *(_QWORD *)(a1 + 376), v23, v24, v25, v26, v27);
  v33 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(v33 + 312) = *(_QWORD *)(a1 + 384) + 64;
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(v33 + 272));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 240));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 248));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 176));
  return a1;
}

void sub_1B183D598(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B183D5B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = operator new();
  sub_1B183CFF8(v6, *a3, v7, v8, v9, v10, v11, v12);
  CFX::CrossFrameResourceManager::set(a1, a2, v6);
  return v6;
}

void sub_1B183D614(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10A1C40FAE558D7);
  _Unwind_Resume(a1);
}

void sub_1B183D63C(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id Texture;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  const char *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  _OWORD *v83;
  float32x4_t *v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  _OWORD *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  void *v132;
  const char *v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void *v167;
  void *v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  uint64_t v173;
  float32x2_t v174;
  _QWORD v175[3];
  __n128 v176;
  unsigned __int8 v177[176];
  float32x4_t v178[4];
  _OWORD v179[5];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 560))
  {
    v10 = *a3;
    v11 = sub_1B1813884(*(_QWORD *)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = sub_1B1814768(*(uint64_t **)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
    if (v19)
    {
      if (sub_1B186CFA8((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26))
      {
        v34 = sub_1B1814768(*(uint64_t **)(a1 + 368), v27, v28, v29, v30, v31, v32, v33);
        sub_1B17B33F4((uint64_t)v34, (uint64_t)v177, v35, v36, v37, v38, v39, v40);
        v41 = (__int128 *)sub_1B1815A5C(*(_QWORD *)(a1 + 368), 1);
        v171 = v41[1];
        v172 = *v41;
        v169 = v41[3];
        v170 = v41[2];
        v176 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v42, v43, v44, v45, v46, v47);
        v173 = v11;
        v55 = sub_1B187B1D0(v11, v48, v49, v50, v51, v52, v53, v54);
        sub_1B19D9F28(v55, *(_QWORD *)(a1 + 368));
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 264));
        v57 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 248));
        v58 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 256));
        v59 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 280));
        v60 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 176));
        v61 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 240));
        objc_msgSend_setTexture_atIndex_(v10, v62, (uint64_t)Texture, 0);
        v168 = v57;
        objc_msgSend_setTexture_atIndex_(v10, v63, (uint64_t)v57, 1);
        objc_msgSend_setTexture_atIndex_(v10, v64, (uint64_t)v58, 2);
        objc_msgSend_setTexture_atIndex_(v10, v65, (uint64_t)v59, 3);
        objc_msgSend_setTexture_atIndex_(v10, v66, (uint64_t)v60, 4);
        objc_msgSend_setTexture_atIndex_(v10, v67, (uint64_t)v61, 5);
        objc_msgSend_setTexture_atIndex_(v10, v68, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 544), 9);
        v174 = sub_1B1816010(**(float32x2_t ***)(a1 + 376), 0, v69, v70);
        v71 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 312);
        v71[4] = v172;
        v71[5] = v171;
        v71[6] = v170;
        v71[7] = v169;
        v78 = sub_1B18667B4(v177, (uint64_t)&v176, v72, v73, v74, v75, v76, v77);
        v79 = 0;
        v80 = *((_OWORD *)v78 + 1);
        v81 = *((_OWORD *)v78 + 2);
        v82 = *((_OWORD *)v78 + 3);
        v83 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 312);
        v83[12] = *(_OWORD *)v78;
        v83[13] = v80;
        v83[14] = v81;
        v83[15] = v82;
        v84 = *(float32x4_t **)(a1 + 384);
        v85 = v84[16];
        v86 = v84[17];
        v87 = v84[18];
        v88 = v84[19];
        v89 = v84[9];
        v90 = v84[10];
        v91 = v84[11];
        v178[0] = v84[8];
        v178[1] = v89;
        v178[2] = v90;
        v178[3] = v91;
        do
        {
          v179[v79] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v85, COERCE_FLOAT(*(_OWORD *)&v178[v79])), v86, *(float32x2_t *)v178[v79].f32, 1), v87, v178[v79], 2), v88, v178[v79], 3);
          ++v79;
        }
        while (v79 != 4);
        v92 = v179[1];
        v93 = v179[2];
        v94 = v179[3];
        v95 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 312);
        *v95 = v179[0];
        v95[1] = v92;
        v95[2] = v93;
        v95[3] = v94;
        *(simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 128) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 384) + 128));
        *(simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 256) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 384) + 64));
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 384) = (float)((float)(unint64_t)objc_msgSend_width(Texture, v96, v97, v98)
                                                                               * v174.f32[0])
                                                                       * 0.5;
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 388) = vmuls_lane_f32((float)(unint64_t)objc_msgSend_height(Texture, v99, v100, v101), v174, 1)* 0.5;
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 400) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 208);
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 416) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 224);
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 448) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 192);
        v102 = *(_QWORD *)(a1 + 376);
        v103 = *(_QWORD *)(v102 + 312);
        *(float *)(v103 + 432) = (float)*(int *)(v102 + 184);
        objc_msgSend_setBytes_length_atIndex_(v10, v104, v103, 480, 8);
        v105 = sub_1B187B0F0(v173, 0);
        if (v105)
          v113 = sub_1B1841E14(v105, (uint64_t)v106, v107, v108, v109, v110, v111, v112);
        else
          v113 = 0.0;
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 464) = v113;
        objc_msgSend_setBuffer_offset_atIndex_(v10, v106, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 576), 0, 10);
        v114 = sub_1B19DA2DC(v55);
        objc_msgSend_useHeap_(v10, v115, v114, v116);
        v117 = sub_1B19DA2EC(v55);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v118, v117, 0, 0);
        v119 = sub_1B19DA2E4(v55);
        objc_msgSend_setAccelerationStructure_atBufferIndex_(v10, v120, v119, 1);
        if (sub_1B19DA3D0(v55))
        {
          v121 = sub_1B19DA2F4(v55);
          objc_msgSend_setBuffer_offset_atIndex_(v10, v122, v121, 0, 2);
        }
        if (sub_1B19DA3E0(v55))
        {
          v129 = *(_QWORD *)(a1 + 384);
          v130 = *(_QWORD *)(v129 + 560);
          if (!v130)
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v123, v124, v125, v126, v127, v128, (uint64_t)"_ptr != NULL");
            v130 = *(_QWORD *)(v129 + 560);
          }
          v131 = (void *)sub_1B18FD774(v130);
          v132 = sub_1B19DA30C(v55, v131);
          objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(v10, v133, (uint64_t)v132, 3);
        }
        else
        {
          v132 = 0;
        }
        v134 = sub_1B19DA2FC(v55);
        v138 = sub_1B19DA3F0(v55, v135, v136, v137);
        objc_msgSend_useResources_count_usage_(v10, v139, v134, v138, 1);
        v146 = *(_QWORD *)(a1 + 384);
        v147 = *(_QWORD *)(v146 + 560);
        if (!v147)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v140, v141, v142, v143, v144, v145, (uint64_t)"_ptr != NULL");
          v147 = *(_QWORD *)(v146 + 560);
        }
        v148 = sub_1B18FD774(v147);
        objc_msgSend_setComputePipelineState_(v10, v149, v148, v150);
        v154 = (unint64_t)objc_msgSend_width(v168, v151, v152, v153) >> 1;
        v164 = (unint64_t)objc_msgSend_height(v168, v155, v156, v157) >> 1;
        v165 = *(_QWORD *)(a1 + 384);
        v166 = *(_QWORD *)(v165 + 560);
        if (!v166)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v158, v159, v160, v161, v162, v163, (uint64_t)"_ptr != NULL");
          v166 = *(_QWORD *)(v165 + 560);
        }
        v167 = (void *)sub_1B18FD774(v166);
        v175[0] = v154;
        v175[1] = v164;
        v175[2] = 1;
        RGMTLComputeCommandEncoderDispatchOnGrid2D(v10, v167, (uint64_t)v175, 1);

        sub_1B19DA290(v55);
      }
    }
  }
}

uint64_t sub_1B183DB98(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  CFX::RG::Resource *v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[10];
  uint64_t v46[2];

  v8 = *a5;
  v46[0] = (uint64_t)"RTSubsurfaceUpscalePass";
  v46[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF65D18);
  if ((v8 & 1) == 0)
  {
    v43 = a2;
    v44 = a3;
    v42 = __cxa_guard_acquire(&qword_1EEF65D18);
    a2 = v43;
    a3 = v44;
    if (v42)
    {
      qword_1EEF65D10 = (uint64_t)sub_1B183EB9C("RT_SUBSURFACE_UPSCALE", 0x15u);
      __cxa_guard_release(&qword_1EEF65D18);
      a2 = v43;
      a3 = v44;
    }
  }
  sub_1B18F7354(a1, a2, a3, v46, qword_1EEF65D10, 0);
  *(_QWORD *)a1 = &off_1E63CF9E8;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v16 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 400) = v16;
  *(_QWORD *)(a1 + 408) = objc_msgSend_resourceManager(v16, v17, v18, v19);
  v20 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v21 = CFX::CrossFrameResourceManager::get(a4[4], v20);
  *(_QWORD *)(a1 + 384) = v21;
  if (!v21)
  {
    *(_QWORD *)(a1 + 384) = sub_1B183DD44(a4[4], v20);
    v29 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v22, v23, v24, v25, v26, v27, v28);
    v33 = (void *)objc_msgSend_resourceManager(v29, v30, v31, v32);
    v34 = *(_QWORD *)(a1 + 384);
    v37 = objc_msgSend_newComputePipelineStateWithFunctionName_(v33, v35, (uint64_t)CFSTR("vfx_rt_subsurface_upscale"), v36);
    v38 = *(void **)(v34 + 16);
    if (v38 != (void *)v37)
    {
      if (v38)

      *(_QWORD *)(v34 + 16) = v37;
    }
  }
  v39 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(*(_QWORD *)(a1 + 376) + 8), MTLPixelFormatRGBA16Float, (uint64_t)v45);
  v40 = sub_1B17A34D0(v39, (uint64_t)"SubsurfaceUpscale", v45);
  *(_QWORD *)(a1 + 392) = v40;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v40);
  return a1;
}

void sub_1B183DD24(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B183DD44(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF9C8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B183DDBC(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  id Texture;
  id v7;
  const char *v8;
  const char *v9;
  const char *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;

  if (*(_QWORD *)(*(_QWORD *)(result + 384) + 16))
  {
    v4 = result;
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(result + 376) + 312), 480, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 264));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 248));
    objc_msgSend_setTexture_atIndex_(v5, v8, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)v7, 1);
    objc_msgSend_setBuffer_offset_atIndex_(v5, v10, *(_QWORD *)(*(_QWORD *)(v4 + 376) + 304), 0, 0);
    v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 392));
    objc_msgSend_setTexture_atIndex_(v5, v12, (uint64_t)v11, 10);
    v19 = *(_QWORD *)(v4 + 384);
    v20 = *(_QWORD *)(v19 + 16);
    if (!v20)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v13, v14, v15, v16, v17, v18, (uint64_t)"_ptr != NULL");
      v20 = *(_QWORD *)(v19 + 16);
    }
    v21 = sub_1B18FD774(v20);
    return objc_msgSend_dispatch_onTexture2D_(v5, v22, v21, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1B183DEF0(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  int v31;
  uint64_t v32;
  _OWORD v33[10];
  uint64_t v34[2];

  v9 = *(_QWORD *)a5;
  v34[0] = (uint64_t)"RTSubsurfaceTemporalDenoisePass";
  v34[1] = v9;
  LOBYTE(v9) = atomic_load((unsigned __int8 *)&qword_1EEF65D28);
  if ((v9 & 1) == 0)
  {
    v32 = a3;
    v31 = __cxa_guard_acquire(&qword_1EEF65D28);
    a3 = v32;
    if (v31)
    {
      qword_1EEF65D20 = (uint64_t)sub_1B183EB9C("RT_SUBSURFACE_TEMPORAL_DENOISE", 0x1Eu);
      __cxa_guard_release(&qword_1EEF65D28);
      a3 = v32;
    }
  }
  sub_1B18F7354(a1, a2, a3, v34, qword_1EEF65D20, 0);
  *(_QWORD *)a1 = &off_1E63D0268;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 416) = v17;
  *(_QWORD *)(a1 + 424) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, *(const CFX::RG::Resource **)(a5 + 248));
  v21 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v22 = CFX::CrossFrameResourceManager::get(a4[4], v21);
  *(_QWORD *)(a1 + 384) = v22;
  if (!v22)
  {
    v23 = (uint64_t)a4[4];
    v24 = (_QWORD *)operator new();
    *v24 = &off_1E63D0248;
    v24[1] = 0;
    v24[2] = 0;
    CFX::CrossFrameResourceManager::set(v23, v21, (uint64_t)v24);
    *(_QWORD *)(a1 + 384) = v24;
    v27 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 424), v25, (uint64_t)CFSTR("vfx_rt_subsurface_temporal_denoise"), v26);
    v28 = (void *)v24[2];
    if (v28 != (void *)v27)
    {
      if (v28)

      v24[2] = v27;
    }
  }
  v29 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(*(_QWORD *)(a1 + 376) + 8), MTLPixelFormatRGBA16Float, (uint64_t)v33);
  *(_QWORD *)(a1 + 408) = sub_1B17A34D0(v29, (uint64_t)"SubsurfaceUpscale", v33);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 272));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 408));
  return a1;
}

void sub_1B183E0D4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B183E0F4(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  id Texture;
  id v7;
  uint64_t v8;
  const CFX::RG::Resource *v9;
  id v10;
  id v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  id v16;
  id v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;

  if (*(_QWORD *)(*(_QWORD *)(result + 384) + 16))
  {
    v4 = result;
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(result + 376) + 312), 480, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 392));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 264));
    v8 = *(_QWORD *)(v4 + 376);
    v9 = *(const CFX::RG::Resource **)(v8 + 288);
    if (v9)
    {
      v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v9);
      v8 = *(_QWORD *)(v4 + 376);
    }
    else
    {
      v10 = 0;
    }
    v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v8 + 272));
    objc_msgSend_setTexture_atIndex_(v5, v12, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v13, (uint64_t)v7, 1);
    objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v10, 2);
    objc_msgSend_setTexture_atIndex_(v5, v15, (uint64_t)v11, 3);
    v16 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 408));
    v17 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 400));
    objc_msgSend_setTexture_atIndex_(v5, v18, (uint64_t)v16, 10);
    objc_msgSend_setTexture_atIndex_(v5, v19, (uint64_t)v17, 11);
    v26 = *(_QWORD *)(v4 + 384);
    v27 = *(_QWORD *)(v26 + 16);
    if (!v27)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v20, v21, v22, v23, v24, v25, (uint64_t)"_ptr != NULL");
      v27 = *(_QWORD *)(v26 + 16);
    }
    v28 = sub_1B18FD774(v27);
    return objc_msgSend_dispatch_onTexture2D_(v5, v29, v28, (uint64_t)v16);
  }
  return result;
}

uint64_t sub_1B183E28C(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int16 v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  CFX::RG::Resource *v41;
  CFX::RG::Resource *v42;
  uint64_t v44;
  int v45;
  _OWORD v46[5];
  _OWORD v47[5];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  const char *v54;

  v9 = *a5;
  *(_QWORD *)&v48 = "RTSubsurfaceSpatialDenoisePass";
  *((_QWORD *)&v48 + 1) = v9;
  LOBYTE(v9) = atomic_load((unsigned __int8 *)&qword_1EEF65D38);
  if ((v9 & 1) == 0)
  {
    v44 = a3;
    v45 = __cxa_guard_acquire(&qword_1EEF65D38);
    a3 = v44;
    if (v45)
    {
      qword_1EEF65D30 = (uint64_t)sub_1B183EB9C("RT_SUBSURFACE_SPATIAL_DENOISE", 0x1Du);
      __cxa_guard_release(&qword_1EEF65D38);
      a3 = v44;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v48, qword_1EEF65D30, 0);
  *(_QWORD *)a1 = &off_1E63D0188;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 408) = v17;
  *(_QWORD *)(a1 + 416) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  v21 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[31]);
  v22 = *v21;
  v23 = v21[1];
  v24 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v25 = CFX::CrossFrameResourceManager::get(a4[4], v24);
  *(_QWORD *)(a1 + 384) = v25;
  if (!v25)
  {
    v26 = (uint64_t)a4[4];
    v27 = (_OWORD *)operator new();
    *v27 = 0u;
    v27[1] = 0u;
    *(_QWORD *)v27 = &off_1E63D0148;
    CFX::CrossFrameResourceManager::set(v26, v24, (uint64_t)v27);
    *(_QWORD *)(a1 + 384) = v27;
    v30 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 416), v28, (uint64_t)CFSTR("vfx_rt_subsurface_spatial_denoise"), v29);
    v31 = (void *)*((_QWORD *)v27 + 2);
    if (v31 != (void *)v30)
    {
      if (v31)

      *((_QWORD *)v27 + 2) = v30;
    }
  }
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  if (v22 <= 1)
    v32 = 1;
  else
    v32 = v22;
  if (v23 <= 1)
    v33 = 1;
  else
    v33 = v23;
  RGTextureDescriptorMake2D(v32, v33, 115, (uint64_t)&v48);
  v34 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v35 = 0x9DDFEA08EB382D69
      * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (unsigned __int16)v48)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * (v34 ^ (unsigned __int16)v48)));
  v36 = 0x9DDFEA08EB382D69 * (v35 ^ (v35 >> 47));
  v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))))) ^ ((0x9DDFEA08EB382D69 * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))))) >> 47));
  v38 = CFX::CrossFrameResourceManager::get(a4[4], v37);
  *(_QWORD *)(a1 + 392) = v38;
  if (!v38)
  {
    v39 = (uint64_t)a4[4];
    v40 = (_QWORD *)operator new();
    *v40 = &off_1E63D0168;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = 0;
    CFX::CrossFrameResourceManager::set(v39, v37, (uint64_t)v40);
    *(_QWORD *)(a1 + 392) = v40;
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v47[2] = v50;
    v47[3] = v51;
    v47[4] = v52;
    v47[0] = v48;
    v47[1] = v49;
    v54 = "pingPongTex0";
    v53 = 2;
    sub_1B1825D28((uint64_t *)&v54, (uint64_t)v47, &v53);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 16), v41);
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v46[2] = v50;
    v46[3] = v51;
    v46[4] = v52;
    v46[0] = v48;
    v46[1] = v49;
    v54 = "pingPongTex1";
    v53 = 2;
    sub_1B1825D28((uint64_t *)&v54, (uint64_t)v46, &v53);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 24), v42);
  }
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 272));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 384) + 24) == 0) + 16));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 24) + 16));
  return a1;
}

void sub_1B183E5FC(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1B183E628(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  id Texture;
  id v7;
  const char *v8;
  const char *v9;
  id v10;
  id v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  __int128 v52;
  __n128 result;
  __int128 v54;
  uint64_t v55;
  int v56;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 16))
  {
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 376) + 312), 480, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 264));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 248));
    objc_msgSend_setTexture_atIndex_(v5, v8, (uint64_t)Texture, 1);
    objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)v7, 2);
    v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
    v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 392)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 24)+ 16));
    v56 = 1065353216;
    objc_msgSend_setBytes_length_atIndex_(v5, v12, (uint64_t)&v56, 4, 9);
    objc_msgSend_setTexture_atIndex_(v5, v13, (uint64_t)v10, 0);
    objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v11, 10);
    v21 = *(_QWORD *)(a1 + 384);
    v22 = *(_QWORD *)(v21 + 16);
    if (!v22)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v15, v16, v17, v18, v19, v20, (uint64_t)"_ptr != NULL");
      v22 = *(_QWORD *)(v21 + 16);
    }
    v23 = sub_1B18FD774(v22);
    objc_msgSend_dispatch_onTexture2D_(v5, v24, v23, (uint64_t)v11);
    v56 = 0x40000000;
    objc_msgSend_setBytes_length_atIndex_(v5, v25, (uint64_t)&v56, 4, 9);
    objc_msgSend_setTexture_atIndex_(v5, v26, (uint64_t)v11, 0);
    objc_msgSend_setTexture_atIndex_(v5, v27, (uint64_t)v10, 10);
    v34 = *(_QWORD *)(a1 + 384);
    v35 = *(_QWORD *)(v34 + 16);
    if (!v35)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v28, v29, v30, v31, v32, v33, (uint64_t)"_ptr != NULL");
      v35 = *(_QWORD *)(v34 + 16);
    }
    v36 = sub_1B18FD774(v35);
    objc_msgSend_dispatch_onTexture2D_(v5, v37, v36, (uint64_t)v11);
    v56 = 1082130432;
    objc_msgSend_setBytes_length_atIndex_(v5, v38, (uint64_t)&v56, 4, 9);
    objc_msgSend_setTexture_atIndex_(v5, v39, (uint64_t)v10, 0);
    objc_msgSend_setTexture_atIndex_(v5, v40, (uint64_t)v11, 10);
    v47 = *(_QWORD *)(a1 + 384);
    v48 = *(_QWORD *)(v47 + 16);
    if (!v48)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v41, v42, v43, v44, v45, v46, (uint64_t)"_ptr != NULL");
      v48 = *(_QWORD *)(v47 + 16);
    }
    v49 = sub_1B18FD774(v48);
    objc_msgSend_dispatch_onTexture2D_(v5, v50, v49, (uint64_t)v11);
    v51 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 312);
    v52 = *(_OWORD *)(v51 + 272);
    *(_OWORD *)(v51 + 320) = *(_OWORD *)(v51 + 256);
    *(_OWORD *)(v51 + 336) = v52;
    result = *(__n128 *)(v51 + 288);
    v54 = *(_OWORD *)(v51 + 304);
    *(__n128 *)(v51 + 352) = result;
    *(_OWORD *)(v51 + 368) = v54;
    v55 = *(_QWORD *)(a1 + 384);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 396);
    *(_BYTE *)(v55 + 24) ^= 1u;
  }
  return result;
}

CFX::RG::Pass *sub_1B183E8A8(CFX::RG::RenderGraphContext *a1, uint64_t *a2)
{
  uint64_t *v4;
  CFX::RG::Pass *v5;
  uint64_t *v6;
  uint64_t *v7;
  CFX::RG::Resource *v8;
  uint64_t *v9;
  CFX::RG::Resource *v10;
  CFX::RG::Resource *v11;

  v4 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  v5 = (CFX::RG::Pass *)sub_1B183E9AC(v4, (CFX::CrossFrameResourceManager **)a1, (uint64_t)a2);
  a2[38] = *(_QWORD *)(*((_QWORD *)v5 + 48) + 576);
  v6 = (uint64_t *)sub_1B183EA00(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  CFX::RG::Pass::dependsOn(v6, v5);
  v7 = (uint64_t *)sub_1B183EA54(v4, (CFX::CrossFrameResourceManager **)a1, (uint64_t)a2);
  v8 = (CFX::RG::Resource *)v6[49];
  v7[49] = (uint64_t)v8;
  CFX::RG::Pass::readFrom(v7, v8);
  CFX::RG::Pass::dependsOn(v7, (CFX::RG::Pass *)v6);
  v9 = (uint64_t *)sub_1B183EAA8(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  v10 = (CFX::RG::Resource *)v7[51];
  v9[50] = (uint64_t)v10;
  CFX::RG::Pass::readFrom(v9, v10);
  CFX::RG::Pass::dependsOn(v9, (CFX::RG::Pass *)v7);
  v11 = *(CFX::RG::Resource **)(v9[49] + 8 * (*(_BYTE *)(v9[48] + 24) == 0) + 16);
  v7[50] = (uint64_t)v11;
  CFX::RG::Pass::readFrom(v7, v11);
  a2[37] = *(_QWORD *)(v9[49] + 8 * *(unsigned __int8 *)(v9[48] + 24) + 16);
  return v5;
}

uint64_t sub_1B183E9AC(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B183EE84(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B183EA00(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B183EEE0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B183EA54(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B183EF3C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B183EAA8(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B183EF98(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B183EB00(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B183EB28(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B183EB50(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B183EB78(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B183EB9C(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B183EC64(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF9C8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B183EC9C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF9C8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B183ECE4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63D0248;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B183ED1C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63D0248;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B183ED64(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63D0148;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B183ED9C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63D0148;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B183EDE4(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63D0168;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  return a1;
}

void sub_1B183EE2C(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63D0168;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B183EE84(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x198u, 8u);
  return sub_1B183D3F8(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B183EEE0(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  return sub_1B183DB98(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B183EF3C(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B183DEF0(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B183EF98(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A8u, 8u);
  return sub_1B183E28C(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B183EFF4(void *a1, const char *a2, void *a3, void *a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  unint64_t v21;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t j;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t k;
  const char *v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[128];
  _BYTE v77[128];
  _BYTE v78[128];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v7 = objc_msgSend_count(a3, a2, (uint64_t)a3, (uint64_t)a4);
  if (v7 != objc_msgSend_count(a4, v8, v9, v10))
  {
    NSLog(CFSTR("Error: ranges and strings arrays must be of the same size"));
    return 0;
  }
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  v12 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v11, (uint64_t)&v72, (uint64_t)v78, 16);
  if (v12)
  {
    v16 = v12;
    v17 = 0;
    v18 = 0;
    v19 = *(_QWORD *)v73;
    while (2)
    {
      for (i = 0; i != v16; ++i)
      {
        if (*(_QWORD *)v73 != v19)
          objc_enumerationMutation(a3);
        v21 = objc_msgSend_rangeValue(*(void **)(*((_QWORD *)&v72 + 1) + 8 * i), v13, v14, v15);
        if (v21 < (unint64_t)v17)
        {
          NSLog(CFSTR("Error: ranges must be ordered"));
          return 0;
        }
        v17 = &v13[v21];
        v18 += (uint64_t)v13;
      }
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v13, (uint64_t)&v72, (uint64_t)v78, 16);
      if (v16)
        continue;
      break;
    }
  }
  else
  {
    v18 = 0;
  }
  v70 = 0u;
  v71 = 0u;
  v68 = 0u;
  v69 = 0u;
  v23 = objc_msgSend_countByEnumeratingWithState_objects_count_(a4, v13, (uint64_t)&v68, (uint64_t)v77, 16);
  if (v23)
  {
    v27 = v23;
    v28 = 0;
    v29 = *(_QWORD *)v69;
    do
    {
      for (j = 0; j != v27; ++j)
      {
        if (*(_QWORD *)v69 != v29)
          objc_enumerationMutation(a4);
        v28 += objc_msgSend_length(*(void **)(*((_QWORD *)&v68 + 1) + 8 * j), v24, v25, v26);
      }
      v27 = objc_msgSend_countByEnumeratingWithState_objects_count_(a4, v24, (uint64_t)&v68, (uint64_t)v77, 16);
    }
    while (v27);
  }
  else
  {
    v28 = 0;
  }
  v32 = v28 - v18 + objc_msgSend_length(a1, v24, v25, v26);
  if (v32 <= 0)
  {
    NSLog(CFSTR("Error: incorrect ranges : cumulated size larger than the original string"));
    return 0;
  }
  v63 = a1;
  v34 = (void *)objc_msgSend_stringWithCapacity_(MEMORY[0x1E0CB37A0], v31, v32, v33);
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  v36 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v35, (uint64_t)&v64, (uint64_t)v76, 16);
  if (v36)
  {
    v40 = v36;
    v41 = 0;
    v42 = 0;
    v43 = *(_QWORD *)v65;
    do
    {
      for (k = 0; k != v40; ++k)
      {
        if (*(_QWORD *)v65 != v43)
          objc_enumerationMutation(a3);
        v46 = objc_msgSend_rangeValue(*(void **)(*((_QWORD *)&v64 + 1) + 8 * k), v37, v38, v39);
        v47 = v45;
        v48 = v46 - v42;
        if (v46 > v42)
        {
          v49 = objc_msgSend_substringWithRange_(v63, v45, v42, v48);
          objc_msgSend_appendString_(v34, v50, v49, v51);
        }
        v52 = objc_msgSend_objectAtIndexedSubscript_(a4, v45, v41 + k, v48);
        objc_msgSend_appendString_(v34, v53, v52, v54);
        v42 = (unint64_t)&v47[v46];
      }
      v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v37, (uint64_t)&v64, (uint64_t)v76, 16);
      v41 += k;
    }
    while (v40);
  }
  else
  {
    v42 = 0;
  }
  if (v42 < objc_msgSend_length(v63, v37, v38, v39))
  {
    v58 = objc_msgSend_length(v63, v55, v56, v57);
    v60 = objc_msgSend_substringWithRange_(v63, v59, v42, v58 - v42);
    objc_msgSend_appendString_(v34, v61, v60, v62);
  }
  return objc_msgSend_stringWithString_(MEMORY[0x1E0CB3940], v55, (uint64_t)v34, v57);
}

uint64_t sub_1B183F330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  _QWORD *v24;
  int v25;
  __int16 v26;
  __int16 v27;
  int v28;
  BOOL v29;
  char v30;
  _QWORD *v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  CFX::RG::Resource *v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  _QWORD v50[2];

  v10 = atomic_load((unsigned __int8 *)&qword_1EEF65D58);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65D58))
  {
    qword_1EEF65D50 = (uint64_t)sub_1B183FCD4("RENDER_ELEMENT_PASS", 0x13u);
    __cxa_guard_release(&qword_1EEF65D58);
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a4, qword_1EEF65D50, a5);
  *(_QWORD *)a1 = &off_1E63CF308;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  v18 = *(_QWORD *)(a4 + 40);
  v20 = *(_QWORD *)(a4 + 56);
  v19 = *(_QWORD *)(a4 + 64);
  v21 = *(_QWORD *)(a4 + 72);
  v22 = *(_QWORD *)(a4 + 80);
  v42 = *(_QWORD *)(a4 + 88);
  v40 = *(_QWORD *)(a4 + 48);
  v41 = *(CFX::RG::Resource **)(a4 + 96);
  v23 = v20 != 0;
  if (v19)
  {
    v24 = (_QWORD *)CFX::RG::Pass::commonRenderParameters((CFX::RG::Pass *)a1);
    v23 |= 0x804u;
    v24[12] = 0;
    v24[13] = 0;
    v24[14] = 0;
    v24[15] = 0x47EFFFFFE0000000;
  }
  v25 = sub_1B1814B88(*(_QWORD *)(a4 + 8), v11, v12, v13, v14, v15, v16, v17);
  v26 = v23 | 0x80;
  if (!v21)
    v26 = v23;
  if (v22)
    v26 |= 2u;
  if (v19)
    v26 |= 4u;
  if (v42)
    v26 |= 0x200u;
  v27 = v26 | 8;
  if (!v41)
    v27 = v26;
  v28 = *(unsigned __int8 *)(a4 + 24);
  if (v25)
    v29 = v28 == 0;
  else
    v29 = 1;
  if (!v29)
    v27 |= 0x400u;
  v43 = 0;
  v44 = v27;
  if (*(_BYTE *)(a4 + 16) == 1)
  {
    v30 = sub_1B1815C10(*(_QWORD *)(a4 + 8));
    v31 = (_QWORD *)&unk_1EEF65000;
    LOBYTE(v28) = *(_BYTE *)(a4 + 24);
  }
  else
  {
    v30 = 0;
    v31 = &unk_1EEF65000;
  }
  v45 = v30;
  v46 = 3;
  v47 = 0;
  v48 = v28;
  v32 = atomic_load((unsigned __int8 *)&qword_1EEF65D58);
  if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65D58))
  {
    v31[426] = sub_1B183FCD4("RENDER_ELEMENT_PASS", 0x13u);
    __cxa_guard_release(&qword_1EEF65D58);
  }
  v49 = v31[426];
  if (*(_BYTE *)(a4 + 16) == 1)
    v33 = sub_1B179F7DC(*(_QWORD *)(a4 + 8));
  else
    v33 = 1;
  *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1) + 268) = v33;
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a4 + 32);
  v34 = *(_QWORD *)(a1 + 368);
  v50[0] = a2;
  v50[1] = a3;
  v35 = sub_1B179C1C0(v50, 0x40u, 8u);
  sub_1B182CDF0(v35, v34, (uint64_t)&v43, *(_QWORD *)(a1 + 392));
  *(_QWORD *)(a1 + 384) = v36;
  if (v18)
  {
    if (*(_QWORD *)(a4 + 104))
      v37 = 0x100000001;
    else
      v37 = 0x100000002;
    CFX::RG::Pass::renderTo(a1, v18, v37, 0);
  }
  if (v40)
  {
    if (*(_QWORD *)(a4 + 112))
      v38 = 0x200000001;
    else
      v38 = 0x200000002;
    CFX::RG::Pass::renderTo(a1, v40, v38, -1);
  }
  if (v20)
    CFX::RG::Pass::renderTo(a1, v20, 0x100000002, 2);
  if (v19)
    CFX::RG::Pass::renderTo(a1, v19, 0x100000002, 3);
  if (v22)
    CFX::RG::Pass::renderTo(a1, v22, 0x100000002, 4);
  if (v21)
    CFX::RG::Pass::renderTo(a1, v21, 0x100000002, 5);
  if (v42)
    CFX::RG::Pass::renderTo(a1, v42, 0x100000002, 6);
  if (v41)
    CFX::RG::Pass::readFrom((uint64_t *)a1, v41);
  return a1;
}

void sub_1B183F698(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B183F6B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  float32x4_t v7;
  float64x2_t *v8;
  CFX::CrossFrameResourceManager *v9;
  unint64_t v10;
  uint64_t v11;
  float32x4_t v12;

  v6 = sub_1B1815BE8(a1[46], (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Main::Setup", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderElementsPass.mm", 116, v6 | 0x300000000);
  *(double *)v7.i64 = sub_1B18158EC((float32x4_t *)a1[46]);
  v12 = v7;
  v8 = (float64x2_t *)(*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1);
  *v8 = vcvtq_f64_f32(*(float32x2_t *)v12.f32);
  v8[1] = vcvt_hight_f64_f32(v12);
  v9 = *(CFX::CrossFrameResourceManager **)(a2 + 32);
  v10 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v11 = sub_1B183F778(v9, v10);
  a1[50] = v11;
  sub_1B19618B0(a1[49], v11 + 2064, 0x10u);
  prof_endFlame();
}

void sub_1B183F764(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B183F778(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = operator new();
    sub_1B1840554(v4);
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, v4);
  }
  return v4;
}

void sub_1B183F7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;

  v6 = sub_1B1815BE8(*(_QWORD *)(a1 + 368), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Main::Prepare", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderElementsPass.mm", 126, v6 | 0x300000000);
  sub_1B182CE18(*(_QWORD *)(a1 + 384), (const char *)a2, v7, v8);
  v16 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
  v24 = sub_1B1813884(*(_QWORD *)(a1 + 368), v17, v18, v19, v20, v21, v22, v23);
  v32 = sub_1B187B188(v24, v25, v26, v27, v28, v29, v30, v31);
  v33 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v32) ^ ((0x9DDFEA08EB382D69 * v32) >> 47));
  v34 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), 0x9DDFEA08EB382D69 * (v33 ^ (v33 >> 47)));
  if (v34)
  {
    v37 = *(_QWORD *)(v34 + 48);
    if (v37)
      objc_msgSend__setReflectionProbeArrayTexture_(v16, v35, v37, v36);
  }
  prof_endFlame();
}

void sub_1B183F894(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B183F8B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  const CFX::RG::Resource *v8;
  id Texture;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float32x2_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x2_t v18;
  uint64_t v19;
  int8x16_t *v20;
  int8x16_t v21;
  int8x16_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD *v35;
  _OWORD v36[4];
  _OWORD v37[4];

  v7 = sub_1B1815BE8(a1[46], (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Main::Render", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/RenderElementsPass.mm", 142, v7 | 0x300000000);
  v8 = (const CFX::RG::Resource *)a1[51];
  if (v8)
  {
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v8);
    objc_msgSend_useResource_usage_stages_(*(void **)a3, v10, (uint64_t)Texture, 1, 2);
  }
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t *))(*a1 + 32))(a1) + 268) && (*(_BYTE *)(a1[49] + 121) & 1) != 0)
    v11 = (unint64_t)*(unsigned __int8 *)(a3 + 17) << 8;
  else
    v11 = 0;
  sub_1B182D4E8(a1[48], (const char *)a2, a3, v11);
  sub_1B1961910(a1[49], a1[50] + 2064, 0x10u);
  sub_1B1961970(a1[49], a1[50] + 16, 0x10u);
  sub_1B19619D0(a1[49], a1[50] + 1040, 0x10u);
  if (sub_1B1816000(a1[46]) && *(_BYTE *)(a1[49] + 132))
  {
    v14 = 0;
    do
    {
      v15 = sub_1B1816010((float32x2_t *)a1[46], 0, v12, v13);
      v18 = sub_1B1816010((float32x2_t *)a1[46], (const char *)1, v16, v17);
      v19 = 0;
      v20 = (int8x16_t *)(a1[50] + (v14 << 6));
      v21 = v20[67];
      *(float32x2_t *)v22.i8 = vadd_f32(vsub_f32(v18, v15), *(float32x2_t *)v21.i8);
      v22.i64[1] = vextq_s8(v21, v21, 8uLL).u64[0];
      v20[67] = v22;
      v23 = a1[50];
      v24 = (float32x4_t *)(v23 + (v14 << 6));
      v25 = v24[65];
      v26 = v24[66];
      v27 = v24[67];
      v28 = v24[68];
      v29 = v24[2];
      v30 = v24[3];
      v31 = v24[4];
      v36[0] = v24[1];
      v36[1] = v29;
      v36[2] = v30;
      v36[3] = v31;
      do
      {
        v37[v19] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v25, COERCE_FLOAT(v36[v19])), v26, *(float32x2_t *)&v36[v19], 1), v27, (float32x4_t)v36[v19], 2), v28, (float32x4_t)v36[v19], 3);
        ++v19;
      }
      while (v19 != 4);
      v32 = v37[1];
      v33 = v37[2];
      v34 = v37[3];
      v35 = (_OWORD *)(v23 + (v14 << 6));
      v35[129] = v37[0];
      v35[130] = v32;
      v35[131] = v33;
      v35[132] = v34;
      ++v14;
    }
    while (v14 < *(unsigned __int8 *)(a1[49] + 132));
  }
  prof_endFlame();
}

void sub_1B183FA90(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B183FAAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v8;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  CFX::RG::Resource *v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[10];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v8 = &unk_1EEF65000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF65D68);
  if ((v9 & 1) == 0)
  {
    v21 = a2;
    v22 = a3;
    v20 = __cxa_guard_acquire(&qword_1EEF65D68);
    v8 = (_QWORD *)&unk_1EEF65000;
    a2 = v21;
    a3 = v22;
    if (v20)
    {
      qword_1EEF65D60 = (uint64_t)sub_1B183FCD4("LINEARIZE_DEPTH_PASS", 0x14u);
      __cxa_guard_release(&qword_1EEF65D68);
      v8 = (_QWORD *)&unk_1EEF65000;
      a2 = v21;
      a3 = v22;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v8[428], 0);
  *(_QWORD *)a1 = &off_1E63CF220;
  v10 = *(_OWORD *)(a5 + 24);
  v11 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 416) = v11;
  *(_OWORD *)(a1 + 384) = v10;
  v12 = *(_OWORD *)(a5 + 72);
  v13 = *(_OWORD *)(a5 + 88);
  v14 = *(_OWORD *)(a5 + 120);
  *(_OWORD *)(a1 + 464) = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 480) = v14;
  *(_OWORD *)(a1 + 432) = v12;
  *(_OWORD *)(a1 + 448) = v13;
  v15 = *(_OWORD *)(a5 + 136);
  v16 = *(_OWORD *)(a5 + 152);
  v17 = *(_OWORD *)(a5 + 168);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a5 + 184);
  *(_OWORD *)(a1 + 512) = v16;
  *(_OWORD *)(a1 + 528) = v17;
  *(_OWORD *)(a1 + 496) = v15;
  *(_QWORD *)(a1 + 568) = 0;
  *(_OWORD *)(a1 + 552) = 0u;
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a1 + 392), 1, (uint64_t)&v24);
  *((_QWORD *)&v25 + 1) = 25;
  LOBYTE(v26) = 1;
  v23[6] = v30;
  v23[7] = v31;
  v23[8] = v32;
  v23[9] = v33;
  v23[4] = v28;
  v23[5] = v29;
  v23[2] = v26;
  v23[3] = v27;
  v23[0] = v24;
  v23[1] = v25;
  v18 = sub_1B17A34D0(a4, (uint64_t)"LINEAR_DEPTH", v23);
  *(_QWORD *)(a1 + 568) = v18;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v18, 0x100000000, 0);
  return a1;
}

void sub_1B183FC30(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B183FC44(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2;
  _DWORD *v3;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  v2 = atomic_load((unsigned __int8 *)&qword_1EEF65D48);
  v3 = &unk_1EEF65000;
  if ((v2 & 1) == 0)
  {
    v7 = a2;
    v8 = a1;
    v5 = __cxa_guard_acquire(&qword_1EEF65D48);
    v3 = (_DWORD *)&unk_1EEF65000;
    v6 = v5;
    a2 = v7;
    a1 = v8;
    if (v6)
    {
      qword_1EEF65D40 = (uint64_t)sub_1B183FCD4("VFX-Depth-Linear", 0x10u);
      __cxa_guard_release(&qword_1EEF65D48);
      v3 = (_DWORD *)&unk_1EEF65000;
      a2 = v7;
      a1 = v8;
    }
  }
  return CFX::GPUResourceManager::registerNamedFrameResource(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568), v3[848]);
}

unsigned __int8 *sub_1B183FCD4(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

void sub_1B183FD9C(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  _OWORD v30[6];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  const __CFString *v45;
  const __CFString *v46;
  uint64_t v47;
  uint64_t v48;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(a2[4], v4);
  *(_QWORD *)(a1 + 552) = v5;
  if (!v5)
  {
    *(_QWORD *)(a1 + 552) = sub_1B183FEB8(a2[4], v4);
    v13 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v6, v7, v8, v9, v10, v11, v12);
    v17 = (void *)objc_msgSend_resourceManager(v13, v14, v15, v16);
    v18 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 568))+ 16);
    v19 = (void *)sub_1B18FD768((uint64_t)v17);
    v23 = objc_msgSend_frameworkLibrary(v19, v20, v21, v22);
    v24 = *(_QWORD *)(a1 + 552);
    memset(v30, 0, sizeof(v30));
    v31 = 0;
    v32 = v23;
    v33 = v18;
    v43 = 0u;
    v44 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0u;
    v41 = 0u;
    v42 = 0u;
    v45 = CFSTR("vertex_draw_quad");
    v46 = CFSTR("linearize_depth2");
    v47 = 0;
    v48 = 0;
    v27 = objc_msgSend_newRenderPipelineStateWithDesc_(v17, v25, (uint64_t)v30, v26);
    v28 = *(void **)(v24 + 16);
    if (v28 != (void *)v27)
    {
      v29 = v27;
      if (v28)

      *(_QWORD *)(v24 + 16) = v29;
    }
  }
}

_QWORD *sub_1B183FEB8(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF200;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void *sub_1B183FF2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float32_t v33;
  float32x2_t v34;
  const char *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  id Texture;
  uint64_t v54;
  const char *v55;
  float32x2_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  v21 = objc_msgSend_renderEncoder(v10, v11, v12, v13);
  result = *(void **)(a1 + 384);
  if (result || (result = (void *)sub_1B1814768(*(uint64_t **)(a1 + 368), v14, v15, v16, v17, v18, v19, v20)) != 0)
  {
    result = sub_1B186CFA8((uint64_t)result, v14, v15, v16, v17, v18, v19, v20);
    if (result)
    {
      v30 = sub_1B1866E38((uint64_t)result, v23, v24, v25, v26, v27, v28, v29);
      v32 = *(float *)(v30 + 4);
      v31 = *(float *)(v30 + 8);
      v33 = v31 - v32;
      v34.f32[0] = v31 * v32;
      __asm { FMOV            V3.2S, #1.0 }
      _D3.f32[0] = v33;
      v34.f32[1] = v31;
      v56 = vdiv_f32(_D3, v34);
      v57 = 0;
      v58 = 0;
      v59 = 0;
      sub_1B1868D14(*(_QWORD *)(v21 + 24), &v56, 8uLL, &v57);
      objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v21 + 16), v40, v58, v59, 0);
      v48 = *(_QWORD *)(a1 + 552);
      v49 = *(void **)(v48 + 16);
      if (!v49)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v42, v43, v44, v45, v46, v47, (uint64_t)"_ptr != NULL");
        v49 = *(void **)(v48 + 16);
      }
      v50 = objc_msgSend_state(v49, v41, v42, v43);
      objc_msgSend_setRenderPipelineState_(*(void **)(v21 + 16), v51, v50, v52);
      Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 560));
      sub_1B179AEE4(v21, Texture, 0, v54);
      return (void *)sub_1B17C197C(v21, v55);
    }
  }
  return result;
}

uint64_t *sub_1B1840038(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  CFX::RG::Pass *CopyPass;
  CFX::RG::Pass *v25;
  _OWORD *v26;
  CFX::RG::Resource *v27;
  uint64_t v28;
  unint64_t v29;
  CFX::RG::Pass *v30;
  uint64_t v31;
  uint64_t *v32;
  CFX::RG::Resource *v33;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD v48[2];
  __int16 v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  CFX::RG::Resource *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _OWORD v58[10];
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[5];
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;

  v70 = 0;
  v71 = &v70;
  v72 = 0x2020000000;
  v73 = 0;
  v10 = sub_1B1813884(*(_QWORD *)(a2 + 8), a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B187AA20(v10, v11, v12, v13, v14, v15, v16, v17);
  if (v18 && sub_1B1816084(*(_QWORD *)(a2 + 8)))
  {
    v19 = (void *)sub_1B181FEE0(v18);
    v69[0] = MEMORY[0x1E0C809B0];
    v69[1] = 3221225472;
    v69[2] = sub_1B1840414;
    v69[3] = &unk_1E63D7020;
    v69[4] = &v70;
    objc_msgSend_enumerateDrawCall_(v19, v20, (uint64_t)v69, v21);
  }
  v22 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v10) ^ ((0x9DDFEA08EB382D69 * v10) >> 47));
  *(_QWORD *)&v35 = 0x9DDFEA08EB382D69 * (v22 ^ (v22 >> 47));
  v23 = (uint64_t *)sub_1B184045C(a1, a2, (uint64_t *)&v35);
  if (*(_QWORD *)(a2 + 104))
  {
    *(_QWORD *)&v35 = *(_QWORD *)(a2 + 104);
    DWORD2(v35) = 0;
    v36 = *(_QWORD *)(a2 + 40);
    v37 = 0x100000000;
    CopyPass = (CFX::RG::Pass *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy input color", &v35);
    CFX::RG::Pass::dependsOn(v23, CopyPass);
  }
  if (*(_QWORD *)(a2 + 112))
  {
    *(_QWORD *)&v35 = *(_QWORD *)(a2 + 112);
    DWORD2(v35) = 0;
    v36 = *(_QWORD *)(a2 + 48);
    v37 = 0x100000000;
    v25 = (CFX::RG::Pass *)CFX::RG::makeCopyPass(a1, (uint64_t)"Copy input depth", &v35);
    CFX::RG::Pass::dependsOn(v23, v25);
  }
  if (*((_BYTE *)v71 + 24))
  {
    v26 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)(a2 + 48));
    CFX::RG::TextureDescriptorReference::withSampleCount(v26, 1, (uint64_t)&v59);
    v58[6] = v65;
    v58[7] = v66;
    v58[8] = v67;
    v58[9] = v68;
    v58[2] = v61;
    v58[3] = v62;
    v58[4] = v63;
    v58[5] = v64;
    v58[0] = v59;
    v58[1] = v60;
    v27 = sub_1B17A34D0(a1, (uint64_t)"DEPTH PREPASS", v58);
    v28 = *(_QWORD *)(a2 + 8);
    v48[0] = "Depth prepass";
    v48[1] = v28;
    v49 = *(_WORD *)(a2 + 16);
    v50 = 0;
    v51 = *(_QWORD *)(a2 + 32);
    v52 = 0;
    v53 = v27;
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v29 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v10 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (v10 ^ 1)) >> 47) ^ 1);
    *(_QWORD *)&v35 = 0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47));
    v30 = (CFX::RG::Pass *)sub_1B184045C(a1, (uint64_t)v48, (uint64_t *)&v35);
    v31 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v35 = "Linearize depth";
    *((_QWORD *)&v35 + 1) = v31;
    LOWORD(v36) = 0;
    v37 = sub_1B181DE6C(*(_QWORD *)(a2 + 32));
    v44 = v65;
    v45 = v66;
    v46 = v67;
    v47 = v68;
    v40 = v61;
    v41 = v62;
    v42 = v63;
    v43 = v64;
    v38 = v59;
    v39 = v60;
    v32 = (uint64_t *)sub_1B18404B0(a1, a1, (uint64_t)&v35);
    v32[70] = (uint64_t)v27;
    CFX::RG::Pass::readFrom(v32, v27);
    CFX::RG::Pass::dependsOn(v32, v30);
    CFX::RG::Pass::dependsOn(v23, (CFX::RG::Pass *)v32);
    v33 = (CFX::RG::Resource *)v32[71];
    CFX::RG::Pass::readFrom(v23, v33);
    v23[51] = (uint64_t)v33;
  }
  _Block_object_dispose(&v70, 8);
  return v23;
}

void sub_1B18403C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 96), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1840414(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_BYTE *)(v4 + 24))
  {
    result = 1;
  }
  else
  {
    result = objc_msgSend_needsLinearDepth(a2, (const char *)a2, a3, a4);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  }
  *(_BYTE *)(v4 + 24) = result;
  return result;
}

uint64_t sub_1B184045C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B184065C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B18404B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18406B8(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B1840508(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B1840530(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1840554(uint64_t result)
{
  uint64_t v1;
  _OWORD *v2;

  v1 = 0;
  *(_BYTE *)(result + 8) = 0;
  *(_QWORD *)result = &off_1E63CF2E8;
  do
  {
    v2 = (_OWORD *)(result + v1);
    v2[129] = xmmword_1B2244DB0;
    v2[130] = xmmword_1B2244DD0;
    v2[131] = xmmword_1B2244D90;
    v2[132] = xmmword_1B2244E20;
    v2[1] = xmmword_1B2244DB0;
    v2[2] = xmmword_1B2244DD0;
    v2[3] = xmmword_1B2244D90;
    v2[4] = xmmword_1B2244E20;
    v2[65] = xmmword_1B2244DB0;
    v2[66] = xmmword_1B2244DD0;
    v2[67] = xmmword_1B2244D90;
    v1 += 64;
    v2[68] = xmmword_1B2244E20;
  }
  while (v1 != 1024);
  return result;
}

void sub_1B18405C8()
{
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B18405DC(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF200;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B1840614(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF200;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B184065C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B183F330(v8, *a3, a3[1], a4, *a5);
}

uint64_t sub_1B18406B8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x240u, 8u);
  return sub_1B183FAAC(v8, *a3, a3[1], a4, a5);
}

float32x4_t sub_1B1840714(float32x4_t *a1, float32x4_t *a2, uint64_t a3, unsigned int a4)
{
  float *v4;
  float32x4_t *v5;
  float32x4_t *v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t result;

  if (a4)
  {
    v4 = (float *)(a3 + 32);
    v5 = a2 + 2;
    v6 = a1 + 2;
    v7 = a4;
    do
    {
      v8 = v5[-2];
      v9 = v5[-1];
      v10 = *v5;
      v11 = v5[1];
      v5 += 4;
      v12 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, *(v4 - 8)), v9, *(v4 - 7)), v10, *(v4 - 6)), v11, *(v4 - 5));
      v13 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, *(v4 - 4)), v9, *(v4 - 3)), v10, *(v4 - 2)), v11, *(v4 - 1));
      v14 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, *v4), v9, v4[1]), v10, v4[2]), v11, v4[3]);
      result = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v8, v4[4]), v9, v4[5]), v10, v4[6]), v11, v4[7]);
      v6[-2] = v12;
      v6[-1] = v13;
      *v6 = v14;
      v6[1] = result;
      v6 += 4;
      v4 += 16;
      --v7;
    }
    while (v7);
  }
  return result;
}

float32x4_t *sub_1B18407A8(float32x4_t *result, uint64_t a2, unsigned int a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float32x4_t a7)
{
  uint64_t v7;
  float *v8;
  float32x4_t *v9;

  if (a3)
  {
    v7 = a3;
    v8 = (float *)(a2 + 32);
    v9 = result + 2;
    do
    {
      v9[-2] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a4, *(v8 - 8)), a5, *(v8 - 7)), a6, *(v8 - 6)), a7, *(v8 - 5));
      v9[-1] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a4, *(v8 - 4)), a5, *(v8 - 3)), a6, *(v8 - 2)), a7, *(v8 - 1));
      *v9 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a4, *v8), a5, v8[1]), a6, v8[2]), a7, v8[3]);
      v9[1] = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(a4, v8[4]), a5, v8[5]), a6, v8[6]), a7, v8[7]);
      v8 += 16;
      v9 += 4;
      --v7;
    }
    while (v7);
  }
  return result;
}

int32x4_t sub_1B184083C(uint64_t a1, int32x4_t *a2, unsigned int a3)
{
  uint64_t v3;
  float *v4;
  int32x4_t *v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  float *v10;
  float32x2x2_t v11;
  int32x4_t v12;
  int32x4_t result;
  float32x2x2_t v14;

  if (a3)
  {
    v3 = a3;
    v4 = (float *)(a1 + 32);
    v5 = a2 + 2;
    do
    {
      v6 = v5[-2];
      v7 = v5[-1];
      v8 = *v5;
      v9 = v5[1];
      v5 += 4;
      v10 = v4 - 8;
      v11 = (float32x2x2_t)vzip1q_s32(v6, v8);
      v14.val[0] = (float32x2_t)vzip2q_s32(v6, v8).u64[0];
      v12 = vzip1q_s32(v7, v9);
      v14.val[1] = (float32x2_t)vzip2q_s32(v7, v9).u64[0];
      result = vzip2q_s32((int32x4_t)v11, v12);
      vst2_f32(v10, v11);
      *((int32x4_t *)v4 - 1) = result;
      vst2_f32(v4, v14);
      v4 += 12;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t vfx_frustum_classify_aabb(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x2_t v35;
  float32x4_t v36;

  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (int32x4_t)vmulq_f32(a2, *a1);
  v7 = (int32x4_t)vmulq_f32(a2, v3);
  v8 = (int32x4_t)vmulq_f32(a2, v4);
  v9 = (int32x4_t)vmulq_f32(a2, v5);
  v10 = vzip1q_s32(v6, v8);
  v11 = vzip2q_s32(v6, v8);
  v12 = vzip1q_s32(v7, v9);
  v13 = vzip2q_s32(v7, v9);
  v14 = vaddq_f32((float32x4_t)vzip2q_s32(v11, v13), vaddq_f32((float32x4_t)vzip1q_s32(v11, v13), vaddq_f32((float32x4_t)vzip1q_s32(v10, v12), (float32x4_t)vzip2q_s32(v10, v12))));
  v15 = (int32x4_t)vmulq_f32(a3, vabsq_f32(*a1));
  v16 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v3));
  v17 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v4));
  v18 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v5));
  v19 = vzip1q_s32(v15, v17);
  v20 = vzip2q_s32(v15, v17);
  v21 = vzip1q_s32(v16, v18);
  v22 = vzip2q_s32(v16, v18);
  v23 = (int8x16_t)vmaxnmq_f32(vsubq_f32(vabsq_f32(v14), vaddq_f32((float32x4_t)vzip2q_s32(v20, v22), vaddq_f32((float32x4_t)vzip1q_s32(v20, v22), vaddq_f32((float32x4_t)vzip1q_s32(v19, v21), (float32x4_t)vzip2q_s32(v19, v21))))), (float32x4_t)0);
  v22.i64[0] = 0x8000000080000000;
  v22.i64[1] = 0x8000000080000000;
  v24 = (float32x4_t)vbslq_s8((int8x16_t)v22, (int8x16_t)v14, v23);
  if ((vmaxvq_u32((uint32x4_t)vcltzq_f32(v24)) & 0x80000000) != 0)
    return 1;
  v26 = a1[4];
  v25 = a1[5];
  v27 = (int32x4_t)vmulq_f32(a2, v26);
  v28 = (int32x4_t)vmulq_f32(a2, v25);
  v29 = (int8x16_t)vzip1q_s32(v27, v28);
  v30 = (int8x16_t)vzip2q_s32(v27, v28);
  *(float32x2_t *)v30.i8 = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v30, v30, 8uLL), vadd_f32(*(float32x2_t *)v30.i8, vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL))));
  v31 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v26));
  v32 = (int32x4_t)vmulq_f32(a3, vabsq_f32(v25));
  v33 = (int8x16_t)vzip1q_s32(v31, v32);
  v34 = (int8x16_t)vzip2q_s32(v31, v32);
  v35 = (float32x2_t)vbsl_s8((int8x8_t)0x8000000080000000, *(int8x8_t *)v30.i8, (int8x8_t)vmaxnm_f32(vsub_f32(vabs_f32(*(float32x2_t *)v30.i8), vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL), vadd_f32(*(float32x2_t *)v34.i8, vadd_f32(*(float32x2_t *)v33.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v33, v33, 8uLL))))), 0));
  *(int32x2_t *)v34.i8 = vcltz_f32(v35);
  if ((vpmax_u32(*(uint32x2_t *)v34.i8, *(uint32x2_t *)v34.i8).u32[0] & 0x80000000) != 0)
    return 1;
  *(float32x2_t *)v36.f32 = vmul_f32(*(float32x2_t *)v24.f32, v35);
  v36.i64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
  return (vmaxvq_u32((uint32x4_t)vceqzq_f32(v36)) >> 30) & 2;
}

double sub_1B18409E8(float32x4_t a1)
{
  __float2 v1;
  __float2 v2;
  __float2 v3;
  float32x4_t v4;
  int32x4_t v5;
  float32x2_t v6;
  float32x2_t v7;
  double result;
  float32x4_t v10;

  v1 = __sincosf_stret(0.5 * a1.f32[0]);
  v2 = __sincosf_stret(vmuls_lane_f32(0.5, *(float32x2_t *)a1.f32, 1));
  v3 = __sincosf_stret(vmuls_lane_f32(0.5, a1, 2));
  v4.f32[0] = (float)(v3.__cosval * (float)(v1.__sinval * v2.__sinval))
            + (float)((float)(v1.__cosval * v2.__cosval) * v3.__sinval);
  v4.f32[1] = (float)(v3.__sinval * (float)(v1.__cosval * v2.__sinval))
            + (float)((float)(v1.__sinval * v2.__cosval) * v3.__cosval);
  v4.f32[2] = (float)((float)(v1.__cosval * v2.__sinval) * v3.__cosval)
            - (float)((float)(v1.__sinval * v2.__cosval) * v3.__sinval);
  v10 = v4;
  acosf((float)((float)(v1.__cosval * v2.__cosval) * v3.__cosval)- (float)((float)(v1.__sinval * v2.__sinval) * v3.__sinval));
  v5 = (int32x4_t)vmulq_f32(v10, v10);
  v5.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v5, 2), vadd_f32(*(float32x2_t *)v5.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.i8, 1))).u32[0];
  v6 = vrsqrte_f32((float32x2_t)v5.u32[0]);
  v7 = vmul_f32(v6, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v6, v6)));
  *(_QWORD *)&result = vmulq_n_f32(v10, vmul_f32(v7, vrsqrts_f32((float32x2_t)v5.u32[0], vmul_f32(v7, v7))).f32[0]).u64[0];
  return result;
}

void sub_1B1840AD8(float32x4_t a1)
{
  float v1;
  __float2 v2;
  float32x4_t v3;
  float32x4_t v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v15;
  float v16;
  __float2 v17;
  __float2 v18;
  float v19;
  float v20;
  float v22;

  v1 = a1.f32[3];
  v2 = __sincosf_stret(a1.f32[3]);
  v3 = vmulq_f32(a1, a1);
  v3.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).u64[0];
  v4 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 0);
  v5 = 1.0 - v2.__cosval;
  v4.i32[3] = 0;
  v6 = vrsqrteq_f32(v4);
  v7 = vmulq_f32(v6, vrsqrtsq_f32(v4, vmulq_f32(v6, v6)));
  v8 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v3.f32[0] != 0.0)), 0x1FuLL));
  v8.i32[3] = 0;
  v9 = (int8x16_t)vcltzq_s32(v8);
  __asm { FMOV            V2.4S, #1.0 }
  v15 = vmulq_f32((float32x4_t)vbslq_s8(v9, (int8x16_t)vmulq_f32(v7, vrsqrtsq_f32(v4, vmulq_f32(v7, v7))), _Q2), a1);
  v16 = vmuls_lane_f32(v2.__sinval, v15, 2)
      + (float)(vmuls_lane_f32(v15.f32[0], *(float32x2_t *)v15.f32, 1) * (float)(1.0 - v2.__cosval));
  v22 = v15.f32[0];
  if (v16 <= 0.998)
  {
    if (v16 >= -0.998)
    {
      v19 = v15.f32[1];
      v20 = v15.f32[2];
      atan2f((float)(v5 * (float)-(float)(v15.f32[0] * v15.f32[2])) + (float)(v15.f32[1] * v2.__sinval), 1.0 - (float)((float)((float)(v20 * v20) + (float)(v19 * v19)) * v5));
      asinf(v16);
      atan2f((float)(v5 * (float)-(float)(v19 * v20)) + (float)(v22 * v2.__sinval), 1.0 - (float)((float)((float)(v20 * v20) + (float)(v22 * v22)) * v5));
    }
    else
    {
      v18 = __sincosf_stret(v1 * 0.5);
      atan2f(v18.__sinval * v22, v18.__cosval);
    }
  }
  else
  {
    v17 = __sincosf_stret(v1 * 0.5);
    atan2f(v17.__sinval * v22, v17.__cosval);
  }
}

uint64_t sub_1B1840C88(int a1)
{
  if (a1 == 3)
    return -1;
  else
    return 0;
}

uint64_t sub_1B1840C94(int a1, int a2)
{
  if ((byte_1EEF65D70 & 1) == 0)
  {
    dword_1EEF65D74[0] = 16777473;
    word_1EEF65D78 = 257;
    unk_1EEF65D7A = 0;
    byte_1EEF65D7E = 0;
    byte_1EEF65D85 = 0;
    unk_1EEF65D7F = 0;
    unk_1EEF65D83 = 256;
    unk_1EEF65D86 = 0x101010101010101;
    unk_1EEF65D8D = 16843009;
    qword_1EEF65D94 = 0x101010100000000;
    word_1EEF65D9C = 257;
    unk_1EEF65D9E = 16843008;
    unk_1EEF65DA2 = 0;
    unk_1EEF65DAA = 0x101010100010000;
    word_1EEF65DB2 = 0;
    qword_1EEF65DB4 = 0x101010101010101;
    *(uint64_t *)((char *)&qword_1EEF65DB4 + 5) = 0x101010101010101;
    unk_1EEF65DC9 = 0;
    unk_1EEF65DC1 = 0;
    unk_1EEF65DD0 = 0;
    byte_1EEF65D70 = 1;
  }
  return *((unsigned __int8 *)&dword_1EEF65D74[5 * a1] + a2);
}

void sub_1B1840D44(CFTypeRef *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef *v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"effect");
  switch(a2)
  {
    case 0:
      v10 = a1 + 4;
      goto LABEL_21;
    case 1:
      v10 = a1 + 5;
      goto LABEL_21;
    case 2:
      v10 = a1 + 6;
      goto LABEL_21;
    case 3:
      v10 = a1 + 7;
      goto LABEL_21;
    case 4:
      v10 = a1 + 8;
      goto LABEL_21;
    case 5:
      v10 = a1 + 9;
      goto LABEL_21;
    case 6:
      v10 = a1 + 10;
      goto LABEL_21;
    case 7:
      v10 = a1 + 12;
      goto LABEL_21;
    case 8:
      v10 = a1 + 11;
      goto LABEL_21;
    case 9:
      v10 = a1 + 13;
      goto LABEL_21;
    case 10:
      v10 = a1 + 14;
      goto LABEL_21;
    case 11:
      v10 = a1 + 16;
      goto LABEL_21;
    case 12:
      v10 = a1 + 17;
      goto LABEL_21;
    case 13:
      v10 = a1 + 18;
      goto LABEL_21;
    case 14:
      v10 = a1 + 19;
      goto LABEL_21;
    case 15:
      v10 = a1 + 20;
      goto LABEL_21;
    case 16:
      v10 = a1 + 15;
LABEL_21:
      if (*v10)
      {
        CFRelease(*v10);
        *v10 = 0;
      }
      break;
    default:
      return;
  }
}

void *sub_1B1840E44(int a1)
{
  uint64_t v1;

  v1 = a1 - 1;
  if (v1 > 0xE)
    return &unk_1EEF55080;
  else
    return *(&off_1E63D70E0 + v1);
}

uint64_t sub_1B1840E70(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v11;
  uint64_t result;
  uint64_t v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v8 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"profile");
  switch(a2)
  {
    case 0:
      v11 = (uint64_t *)(a1 + 32);
      goto LABEL_22;
    case 1:
      v11 = (uint64_t *)(a1 + 40);
      goto LABEL_22;
    case 2:
      v11 = (uint64_t *)(a1 + 48);
      goto LABEL_22;
    case 3:
      v11 = (uint64_t *)(a1 + 56);
      goto LABEL_22;
    case 4:
      v11 = (uint64_t *)(a1 + 64);
      goto LABEL_22;
    case 5:
      v11 = (uint64_t *)(a1 + 72);
      goto LABEL_22;
    case 6:
      v11 = (uint64_t *)(a1 + 80);
      goto LABEL_22;
    case 7:
      v11 = (uint64_t *)(a1 + 96);
      goto LABEL_22;
    case 8:
      v11 = (uint64_t *)(a1 + 88);
      goto LABEL_22;
    case 9:
      v11 = (uint64_t *)(a1 + 104);
      goto LABEL_22;
    case 10:
      v11 = (uint64_t *)(a1 + 112);
      goto LABEL_22;
    case 11:
      v11 = (uint64_t *)(a1 + 128);
      goto LABEL_22;
    case 12:
      v11 = (uint64_t *)(a1 + 136);
      goto LABEL_22;
    case 13:
      v11 = (uint64_t *)(a1 + 144);
      goto LABEL_22;
    case 14:
      v11 = (uint64_t *)(a1 + 152);
      goto LABEL_22;
    case 15:
      v11 = (uint64_t *)(a1 + 160);
      goto LABEL_22;
    case 16:
      v11 = (uint64_t *)(a1 + 120);
LABEL_22:
      result = *v11;
      if (v8)
      {
        if (!result)
        {
          v13 = sub_1B1840FAC(a1, a2);
          *v11 = v13;
          v14 = (float *)sub_1B1840E44(a2);
          sub_1B184105C(v13, v14, v15, v16, v17, v18, v19, v20);
          result = *v11;
        }
      }
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1B1840FAC(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  __int16 v6;
  __int16 v7;

  if (qword_1EEF65DF0 != -1)
    dispatch_once(&qword_1EEF65DF0, &unk_1E63D1890);
  result = sub_1B179CB90(qword_1EEF65DE8, 0x50uLL);
  *(_BYTE *)(result + 58) = a2;
  *(_QWORD *)(result + 80) = 0xFFFFFFFE3F800000;
  *(_QWORD *)(result + 88) = a1;
  v5 = a2 - 4;
  if (v5 > 0x15)
    v6 = 256;
  else
    v6 = word_1B2246AB4[v5];
  if (a2 == 16)
    v7 = 4096;
  else
    v7 = 7680;
  *(_WORD *)(result + 56) = v6 | v7 | *(_WORD *)(result + 56) & 0xE0FF;
  return result;
}

void sub_1B184105C(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v18[0] = 0;
  v18[1] = 0;
  sub_1B184264C(a1, 2, a3, a4, a5, a6, a7, a8);
  if (!a2)
  {
    a2 = (float *)v18;
    sub_1B179CD74((float *)v18, 0.0, 0.0, 0.0, 1.0);
  }
  if (!sub_1B179CC0C(a2, (float *)(a1 + 16)))
  {
    v10 = sub_1B179CD10((float *)(a1 + 16));
    *(_OWORD *)(a1 + 16) = *(_OWORD *)a2;
    if (*(_BYTE *)(a1 + 58) == 4 && !v10)
      sub_1B179CD10((float *)(a1 + 16));
    sub_1B18426C4(a1, 0, v11, v12, v13, v14, v15, v16, v17);
  }
}

const __CFString *sub_1B1841124(unsigned int a1)
{
  if (a1 > 4)
    return CFSTR("VFXhadingModelInvalid");
  else
    return off_1E63D7158[a1];
}

void sub_1B1841148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  uint64_t v17;
  float v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_12:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dst");
    if (a1)
      goto LABEL_4;
    goto LABEL_13;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  if (!a2)
    goto LABEL_12;
LABEL_3:
  if (a1)
    goto LABEL_4;
LABEL_13:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
LABEL_4:
  sub_1B18412A8(a2, *(unsigned int *)(a1 + 24), a3, a4, a5, a6, a7, a8);
  for (i = 0; i != 5; ++i)
  {
    v17 = byte_1B2246AAF[i];
    v18 = sub_1B1841434((float *)a1, byte_1B2246AAF[i], v10, v11, v12, v13, v14, v15);
    sub_1B184135C(a2, v17, v19, v20, v21, v22, v23, v24, v18);
  }
  v25 = 0;
  do
  {
    v26 = sub_1B1840E70(a1, (char)v25, 0, v11, v12, v13, v14, v15);
    if (v26)
    {
      v28 = v26;
      v29 = sub_1B1840E70(a2, (char)v25, 1, v11, v12, v13, v14, v15);
      sub_1B18414AC(v28, v29, v30, v31, v32, v33, v34, v35, v37);
    }
    v36 = v25++;
  }
  while (v36 < 0x11);
  *(_DWORD *)(a2 + 201) = *(_DWORD *)(a2 + 201) & 0xFFFFFFFE | *(_DWORD *)(a1 + 201) & 1;
  sub_1B1841628(a2, *(unsigned __int8 *)(a1 + 184), v27, v11, v12, v13, v14, v15);
  *(_DWORD *)(a2 + 201) = *(_DWORD *)(a2 + 201) & 0xFFFFFFEF | (16 * ((*(_DWORD *)(a1 + 201) >> 4) & 1));
}

void sub_1B18412A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  if (*(_DWORD *)(a1 + 24) != v8)
  {
    *(_DWORD *)(a1 + 24) = v8;
    sub_1B1841840(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B1841314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  return *(unsigned int *)(a1 + 24);
}

void sub_1B184135C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  int v10;
  float v12;

  v10 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  switch(v10)
  {
    case 19:
      v12 = *(float *)(a1 + 176);
      if (v12 == a9)
        return;
      *(float *)(a1 + 176) = a9;
      goto LABEL_11;
    case 18:
      v12 = *(float *)(a1 + 172);
      if (v12 == a9)
        return;
      *(float *)(a1 + 172) = a9;
LABEL_11:
      if (a9 != 0.0 && v12 != 0.0)
      {
        sub_1B1878414(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
        return;
      }
      goto LABEL_15;
    case 17:
      *(float *)(a1 + 168) = a9;
LABEL_15:
      sub_1B1841840(a1, a2, a3, a4, a5, a6, a7, a8);
      break;
  }
}

float sub_1B1841434(float *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  if (a2 == 19)
    return a1[44];
  if (a2 == 18)
    return a1[43];
  result = 0.0;
  if (a2 == 17)
    return a1[42];
  return result;
}

void sub_1B18414AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int16 v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  _OWORD *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v11 = *(_WORD *)(a1 + 56);
  switch((char)v11)
  {
    case 0:
      if ((_BYTE)v11)
        v12 = 0;
      else
        v12 = *(const void **)(a1 + 16);
      sub_1B1841D60(a2, v12, a3, a4, a5, a6, a7, a8, v56);
      break;
    case 1:
      if (v11 == 1)
        v13 = *(const void **)(a1 + 16);
      else
        v13 = 0;
      sub_1B1842998(a2, v13, a3, a4, a5, a6, a7, a8, v56);
      break;
    case 2:
      sub_1B184105C(a2, (float *)(a1 + 16), a3, a4, a5, a6, a7, a8);
      break;
    case 3:
      if (v11 == 4)
        v14 = *(const void **)(a1 + 16);
      else
        v14 = 0;
      sub_1B1843174(a2, v14, a3, a4, a5, a6, a7, a8, v56);
      break;
    case 4:
      v15 = (const void *)sub_1B1842D98(a1, a2, a3, a4, a5, a6, a7, a8);
      sub_1B1842F40(a2, v15, v16, v17, v18, v19, v20, v21, v56);
      break;
    case 5:
      if (v11 == 5)
        v22 = *(const void **)(a1 + 16);
      else
        v22 = 0;
      sub_1B1843200(a2, v22, a3, a4, a5, a6, a7, a8, v56);
      break;
    case 6:
      if (v11 == 6)
        v23 = *(const void **)(a1 + 16);
      else
        v23 = 0;
      sub_1B18432D4(a2, v23, a3, a4, a5, a6, a7, a8, v56);
      break;
    default:
      break;
  }
  sub_1B18420F4(a2, *(CFTypeRef *)(a1 + 64), a3, a4, a5, a6, a7, a8, v56);
  if (*(_QWORD *)(a1 + 72))
  {
    v31 = sub_1B179E238(0x40uLL);
    *(_QWORD *)(a2 + 72) = v31;
    v32 = *(_OWORD **)(a1 + 72);
    v34 = v32[2];
    v33 = v32[3];
    v35 = v32[1];
    *v31 = *v32;
    v31[1] = v35;
    v31[2] = v34;
    v31[3] = v33;
  }
  v36 = sub_1B1841F58(a1, v24, v25, v26, v27, v28, v29, v30);
  sub_1B1841FB8(a2, v36, v37, v38, v39, v40, v41, v42, v57);
  sub_1B1843400(a2, (*(unsigned __int16 *)(a1 + 56) >> 9) & 0xF, v43, v44, v45, v46, v47, v48, v58);
  sub_1B1841E5C(a2, *(float *)(a1 + 80), v49, v50, v51, v52, v53, v54, v55, a9);
}

void sub_1B1841628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  if (*(unsigned __int8 *)(a1 + 184) != v8)
  {
    *(_BYTE *)(a1 + 184) = v8;
    sub_1B1841840(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B1841694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t j;
  uint64_t v17;
  float v18;
  int v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  sub_1B18412A8(a1, 3, a3, a4, a5, a6, a7, a8);
  for (i = 0; i != 17; ++i)
    sub_1B1840D44((CFTypeRef *)a1, byte_1B2246A9E[i], v9, v10, v11, v12, v13, v14);
  for (j = 0; j != 5; ++j)
  {
    v17 = byte_1B2246AAF[j];
    if ((v17 - 17) >= 2)
      v18 = 0.0;
    else
      v18 = 1.0;
    sub_1B184135C(a1, v17, v9, v10, v11, v12, v13, v14, v18);
  }
  *(_BYTE *)(a1 + 184) = 0;
  v19 = *(_DWORD *)(a1 + 201);
  *(_QWORD *)(a1 + 192) = 0;
  *(_DWORD *)(a1 + 180) = 0;
  *(_BYTE *)(a1 + 200) = 1;
  *(_DWORD *)(a1 + 201) = v19 & 0xFFFFFFAC;
}

double sub_1B1841774()
{
  double result;

  if (!qword_1EEF65DD8)
  {
    qword_1EEF65DD8 = sub_1B179CB60(&qword_1EEF65DD8);
    qword_1ED4AE630 = (uint64_t)sub_1B1843988;
    *(_QWORD *)&result = 0x1B1844C90;
    xmmword_1ED4AE620 = xmmword_1E63D2EC0;
  }
  return result;
}

uint64_t sub_1B18417D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (qword_1EEF65DE0 != -1)
    dispatch_once(&qword_1EEF65DE0, &unk_1E63D0C70);
  v2 = sub_1B179CB90(qword_1EEF65DD8, 0xC0uLL);
  v10 = v2;
  if (v2)
  {
    *(_QWORD *)(v2 + 16) = a1;
    sub_1B1841694(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  return v10;
}

void sub_1B1841840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v9 = *(_QWORD **)(a1 + 16);
  if (v9)
  {
    v10 = sub_1B17C6244(v9, a2, a3, a4, a5, a6, a7, a8);
    sub_1B187A8A4(v10, 3, *(const void **)(a1 + 16), 0, v11, v12, v13, v14);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: orphan effect common profile detected"), a3, a4, a5, a6, a7, a8, v22);
  }
  sub_1B1878414(*(_QWORD *)(a1 + 16), v15, v16, v17, v18, v19, v20, v21);
}

void *sub_1B1841890(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  v10 = sub_1B1840E70(a1, a2, 0, a4, a5, a6, a7, a8);
  if (v10 && *(_BYTE *)(v10 + 56) == 2)
    return (void *)(v10 + 16);
  else
    return sub_1B1840E44(a2);
}

uint64_t sub_1B1841910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 56) == 2)
    return a1 + 16;
  else
    return 0;
}

uint64_t sub_1B1841964(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float v23;
  int32x2_t v24;
  float v25;
  float32x4_t v27;

  v27 = *(float32x4_t *)sub_1B1841890(a1, a2, a3, a4, a5, a6, a7, a8);
  v15 = sub_1B1840E70(a1, a2, 0, v10, v11, v12, v13, v14);
  if (v15 && sub_1B1841A40(v15, v16, v17, v18, v19, v20, v21, v22))
    sub_1B179CD74(v27.f32, 1.0, 1.0, 1.0, 1.0);
  v23 = sub_1B1841B14(a1, a2, v17, v18, v19, v20, v21, v22);
  if (v23 != 1.0)
  {
    if (a2 == 5)
    {
      *(float *)v24.i32 = 1.0 - v23;
      *(float32x2_t *)v27.f32 = vmla_n_f32((float32x2_t)vdup_lane_s32(v24, 0), *(float32x2_t *)v27.f32, v23);
      v25 = (float)(1.0 - v23) + (float)(v23 * v27.f32[2]);
    }
    else
    {
      if (a2 == 4)
      {
        v27 = vmulq_n_f32(v27, v23);
        return v27.i64[0];
      }
      *(float32x2_t *)v27.f32 = vmul_n_f32(*(float32x2_t *)v27.f32, v23);
      v25 = v23 * v27.f32[2];
    }
    v27.f32[2] = v25;
  }
  return v27.i64[0];
}

BOOL sub_1B1841A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  uint64_t v18;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"materialProperty");
  }
  v15 = *(_WORD *)(a1 + 56);
  if (!(_BYTE)v15)
  {
    v18 = *(_QWORD *)(a1 + 16);
    if (v18)
    {
      if ((sub_1B180B6F8(v18, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
        return 1;
      v15 = *(_WORD *)(a1 + 56);
    }
  }
  if (v15 == 5 && *(_QWORD *)(a1 + 16) || sub_1B1842D98(a1, a2, a3, a4, a5, a6, a7, a8))
    return 1;
  v16 = *(unsigned __int8 *)(a1 + 56);
  return (v16 == 4 || v16 == 1) && *(_QWORD *)(a1 + 16) != 0;
}

float sub_1B1841B14(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  v10 = sub_1B1840E70(a1, a2, 0, a4, a5, a6, a7, a8);
  if (v10)
    return *(float *)(v10 + 80);
  else
    return 1.0;
}

float sub_1B1841B7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float result;

  LODWORD(result) = sub_1B1841964(a1, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B1841B94(uint64_t a1, int a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  v11 = sub_1B1840E70(a1, a2, 1, a4, a5, a6, a7, a8);
  if (v11)
    sub_1B184105C(v11, a3, v12, v13, v14, v15, v16, v17);
}

uint64_t sub_1B1841C14(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  result = sub_1B1840E70(a1, a2, 0, a4, a5, a6, a7, a8);
  if (result)
  {
    if (*(_BYTE *)(result + 56))
      return 0;
    else
      return *(_QWORD *)(result + 16);
  }
  return result;
}

uint64_t sub_1B1841C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 56))
    return 0;
  else
    return *(_QWORD *)(a1 + 16);
}

void sub_1B1841CDC(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  v12 = sub_1B1840E70(a1, a2, a3 != 0, a4, a5, a6, a7, a8);
  if (v12)
    sub_1B1841D60(v12, a3, v13, v14, v15, v16, v17, v18, a9);
}

void sub_1B1841D60(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v11 = *(const void **)(a1 + 16);
  sub_1B184264C(a1, 0, a3, a4, a5, a6, a7, a8);
  v18 = *(const void **)(a1 + 16);
  if (v18 != a2)
  {
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2)
      v19 = CFRetain(a2);
    else
      v19 = 0;
    *(_QWORD *)(a1 + 16) = v19;
  }
  if (v11 != a2)
    sub_1B18426C4(a1, 1, v12, v13, v14, v15, v16, v17, a9);
}

float sub_1B1841E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  return *(float *)(a1 + 80);
}

void sub_1B1841E5C(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"materialProperty");
  if (*(float *)(a1 + 80) != a2)
  {
    *(float *)(a1 + 80) = a2;
    sub_1B18426C4(a1, 0, a4, a5, a6, a7, a8, a9, a10);
  }
}

uint64_t sub_1B1841ED8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  v10 = sub_1B1840E70(a1, a2, 0, a4, a5, a6, a7, a8);
  if (!v10)
    return -1;
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 == -2)
  {
    if (*(_BYTE *)(v10 + 58) == 3)
      return -1;
    else
      return 0;
  }
  return v11;
}

uint64_t sub_1B1841F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v9 = *(_DWORD *)(a1 + 84);
  if (v9 == -2)
  {
    if (*(_BYTE *)(a1 + 58) == 3)
      return -1;
    else
      return 0;
  }
  return v9;
}

void sub_1B1841FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_DWORD *)(a1 + 84) != a2)
  {
    *(_DWORD *)(a1 + 84) = a2;
    sub_1B18426C4(a1, 0, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B1842028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  return *(_QWORD *)(a1 + 64);
}

void sub_1B1842070(uint64_t a1, int a2, const void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  v12 = sub_1B1840E70(a1, a2, a3 != 0, a4, a5, a6, a7, a8);
  if (v12)
    sub_1B18420F4(v12, a3, v13, v14, v15, v16, v17, v18, a9);
}

void sub_1B18420F4(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef v11;
  CFTypeRef v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v11 = *(CFTypeRef *)(a1 + 64);
  if (v11 != cf)
  {
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (cf)
      v12 = CFRetain(cf);
    else
      v12 = 0;
    *(_QWORD *)(a1 + 64) = v12;
    sub_1B18426C4(a1, 0, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B1842184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  __int16 v10;
  __int16 v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  v9 = *(_DWORD *)(a1 + 24);
  if (v9 >= 5)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXCommonProfileGetHashCode: inconsistency error"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile->_shadingModel < CFXShadingModelCount && CFXShadingModelCount < 15");
    LOWORD(v9) = *(_WORD *)(a1 + 24);
  }
  v10 = v9 | (16 * *(unsigned __int8 *)(a1 + 200));
  if (sub_1B18780F0(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8))
    v11 = 32;
  else
    v11 = 0;
  return (unsigned __int16)(v10 | v11 | ((*(_WORD *)(a1 + 201) & 1) << 6) | (32 * *(_WORD *)(a1 + 201)) & 0x780 | ((*(_BYTE *)(a1 + 184) & 0xF) << 11));
}

uint64_t sub_1B1842240(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = sub_1B1840E70((uint64_t)a1, a2, 0, a4, a5, a6, a7, a8);
  if (a2 < 0x11)
    return sub_1B18422A8(v10, a2, v11, v12, v13, v14, v15, v16);
  if ((a2 - 17) >= 3)
    return 0;
  return 16 * (sub_1B1841434(a1, a2, v11, v12, v13, v14, v15, v16) == 0.0);
}

uint64_t sub_1B18422A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v9;
  int v10;
  _BOOL4 v11;
  _BOOL4 v12;
  _BOOL4 v13;
  BOOL v14;
  float *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;

  if (!a1)
    goto LABEL_11;
  v9 = sub_1B1841A40(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = 1;
  if (!v9)
  {
    LODWORD(a2) = *(unsigned __int8 *)(a1 + 58);
    v14 = a2 > 0x10 || ((1 << a2) & 0x10640) == 0;
    if (!v14)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v10 = 0;
      goto LABEL_13;
    }
    if (*(_BYTE *)(a1 + 56) == 2)
    {
      v15 = (float *)(a1 + 16);
      goto LABEL_12;
    }
LABEL_11:
    v15 = (float *)sub_1B1840E44((char)a2);
LABEL_12:
    v13 = sub_1B179CCCC(v15);
    v12 = sub_1B179CD10(v15);
    v10 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v11 = v15[3] >= 1.0;
    if (!a1)
      goto LABEL_16;
    goto LABEL_13;
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
LABEL_13:
  v16 = (*(float *)(a1 + 80) != 1.0) << 12;
  v19 = (*(unsigned __int16 *)(a1 + 56) >> 9) & 0xF;
  v14 = v19 == 15;
  v18 = v19 << 13;
  if (v14)
    v18 = 0;
  v17 = v10;
LABEL_16:
  if (v13)
    v20 = 2;
  else
    v20 = 0;
  if (v12)
    v21 = 4;
  else
    v21 = 0;
  if (v11)
    v22 = 8;
  else
    v22 = 0;
  return v17 | v16 | v20 | v21 | v18 | v22;
}

void sub_1B18423E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  if (((((*(_DWORD *)(a1 + 201) & 1) == 0) ^ v8) & 1) == 0)
  {
    *(_DWORD *)(a1 + 201) = *(_DWORD *)(a1 + 201) & 0xFFFFFFFE | v8;
    sub_1B1841840(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B184245C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  return *(_DWORD *)(a1 + 201) & 1;
}

void sub_1B18424A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  if (*(unsigned __int8 *)(a1 + 200) != v8)
  {
    *(_BYTE *)(a1 + 200) = v8;
    *(_DWORD *)(a1 + 201) |= 2u;
    sub_1B1841840(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B1842520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  return *(unsigned __int8 *)(a1 + 200);
}

uint64_t sub_1B1842568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  return *(unsigned __int8 *)(a1 + 184);
}

uint64_t sub_1B18425B0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B1840E70(a1, a2, 0, a4, a5, a6, a7, a8);
  if (result)
    return sub_1B1841A40(result, v9, v10, v11, v12, v13, v14, v15);
  return result;
}

uint64_t sub_1B18425D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commonProfile");
  return (*(unsigned __int8 *)(a1 + 201) >> 2) & 1;
}

uint64_t sub_1B1842620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B18425B0(a1, 7, a3, a4, a5, a6, a7, a8);
}

float sub_1B1842628(uint64_t a1)
{
  return *(float *)(a1 + 180);
}

void sub_1B1842630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (*(float *)(a1 + 180) != a9)
  {
    *(float *)(a1 + 180) = a9;
    sub_1B1878414(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B184264C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  v9 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(unsigned __int8 *)(a1 + 56) != v9)
  {
    sub_1B1844CFC(a1, a2, a3, a4, a5, a6, a7, a8);
    if (v9 == 2)
      *(_OWORD *)(a1 + 16) = *(_OWORD *)sub_1B1840E44(*(char *)(a1 + 58));
    *(_BYTE *)(a1 + 56) = v9;
  }
}

void sub_1B18426C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  CFTypeID v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  uint64_t v23;
  CFTypeID v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v9 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(char *)(a1 + 58) <= 19 && (v11 = *(_QWORD *)(a1 + 88)) != 0)
  {
    if (v9)
      *(_DWORD *)(v11 + 201) &= ~0x40u;
    sub_1B1841840(v11, a2, a3, a4, a5, a6, a7, a8);
  }
  else
  {
    v12 = *(unsigned __int8 *)(a1 + 58);
    if ((v12 - 21) < 2)
    {
      v22 = *(float32x4_t **)(a1 + 88);
      if (v22)
        sub_1B185E894(v22, a2, a3, a4, a5, a6, a7, a8, a9);
    }
    else if (v12 == 24)
    {
      v23 = *(_QWORD *)(a1 + 88);
      if (v23)
      {
        v24 = CFGetTypeID(*(CFTypeRef *)(a1 + 88));
        if (v9)
        {
          if (v24 == sub_1B185EA24())
          {
            sub_1B185E978(v23, v25, v26, v27, v28, v29, v30, v31);
          }
          else
          {
            if (v24 != sub_1B187A3A8())
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. LightingEnvironment not set on a Light or a World"), v40, v41, v42, v43, v44, v45, (uint64_t)"typeID == CFXWorldGetTypeID()");
            sub_1B187BFC4(v23, v39, v40, v41, v42, v43, v44, v45);
            sub_1B199BB44(v23, (const void *)a1, v46, v47, v48, v49, v50, v51, a9);
          }
        }
        else if (v24 == sub_1B187A3A8())
        {
          sub_1B199BD58(v23, (const void *)a1);
        }
      }
    }
    else if (v12 == 26)
    {
      v13 = *(_QWORD **)(a1 + 88);
      if (v13)
      {
        v14 = CFGetTypeID(v13);
        if (v14 == sub_1B17A12B4())
        {
          sub_1B17A20D4(v13, v15, v16, v17, v18, v19, v20, v21);
        }
        else if (v14 == sub_1B1877980())
        {
          sub_1B1878850((uint64_t)v13, v32, v33, v34, v35, v36, v37, v38);
        }
      }
    }
  }
}

uint64_t sub_1B1842894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  return a1 + 16;
}

BOOL sub_1B18428DC(uint64_t a1)
{
  float *v2;

  if (a1)
  {
    if (*(_BYTE *)(a1 + 56))
    {
      if (*(_BYTE *)(a1 + 56) == 2)
      {
        v2 = (float *)sub_1B1840E44(*(char *)(a1 + 58));
        return sub_1B179CC0C((float *)(a1 + 16), v2);
      }
      return 0;
    }
    if (*(_QWORD *)(a1 + 16))
      return 0;
  }
  return 1;
}

uint64_t sub_1B184293C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 56) == 1)
    return *(_QWORD *)(a1 + 16);
  else
    return 0;
}

void sub_1B1842998(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v11 = *(const void **)(a1 + 16);
  sub_1B184264C(a1, 1, a3, a4, a5, a6, a7, a8);
  v18 = *(const void **)(a1 + 16);
  if (v18 != a2)
  {
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2)
      v19 = CFRetain(a2);
    else
      v19 = 0;
    *(_QWORD *)(a1 + 16) = v19;
    *(_QWORD *)(a1 + 40) = 0;
  }
  if (v11 != a2)
    sub_1B18426C4(a1, 1, v12, v13, v14, v15, v16, v17, a9);
}

uint64_t sub_1B1842A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 56) != 1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. invalid content type"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty->_contentsType == kCFXContentTypeAsset");
  return *(_QWORD *)(a1 + 40);
}

void sub_1B1842AC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  *(_QWORD *)(a1 + 40) = a2;
}

uint64_t sub_1B1842B0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  return *(_QWORD *)(a1 + 72);
}

BOOL sub_1B1842B54(uint64_t a1)
{
  return *(_QWORD *)(a1 + 72) != 0;
}

void sub_1B1842B64(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v10;
  float32x4_t *v11;
  float32x4_t v12;
  unsigned int v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  unsigned int v26;
  _QWORD *v27;
  const void *v28;
  uint64_t v29;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v10 = *(float32x4_t **)(a1 + 72);
  v11 = (float32x4_t *)MEMORY[0x1E0C83FF0];
  if (!v10)
  {
    if (!a2)
      return;
    v10 = (float32x4_t *)malloc_type_malloc(0x40uLL, 0x1000040FA0F61DDuLL);
    *(_QWORD *)(a1 + 72) = v10;
    v13 = 1;
    goto LABEL_8;
  }
  v12 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
  v13 = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(v10[1], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16))), (int8x16_t)vcgeq_f32(v12, vabdq_f32(*v10, *MEMORY[0x1E0C83FF0]))), vandq_s8((int8x16_t)vcgeq_f32(v12, vabdq_f32(v10[2], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32))), (int8x16_t)vcgeq_f32(v12, vabdq_f32(v10[3], *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48)))))) >> 31;
  if (a2)
  {
LABEL_8:
    v14 = *a2;
    v15 = a2[1];
    v16 = a2[3];
    v10[2] = a2[2];
    v10[3] = v16;
    *v10 = v14;
    v10[1] = v15;
    goto LABEL_9;
  }
  *v10 = (float32x4_t)xmmword_1B2244DB0;
  v10[1] = (float32x4_t)xmmword_1B2244DD0;
  v10[2] = (float32x4_t)xmmword_1B2244D90;
  v10[3] = (float32x4_t)xmmword_1B2244E20;
LABEL_9:
  sub_1B18426C4(a1, 0, a3, a4, a5, a6, a7, a8, v29);
  v24 = *(float32x4_t **)(a1 + 72);
  if (v24)
  {
    v25 = (float32x4_t)vdupq_n_s32(0x3727C5ACu);
    v26 = vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgeq_f32(v25, vabdq_f32(v24[1], v11[1])), (int8x16_t)vcgeq_f32(v25, vabdq_f32(*v24, *v11))), vandq_s8((int8x16_t)vcgeq_f32(v25, vabdq_f32(v24[2], v11[2])), (int8x16_t)vcgeq_f32(v25, vabdq_f32(v24[3], v11[3]))))) >> 31;
  }
  else
  {
    v26 = 1;
  }
  if (v26 != v13 && *(_BYTE *)(a1 + 58) == 24)
  {
    v27 = *(_QWORD **)(a1 + 88);
    if (v27)
    {
      v28 = (const void *)sub_1B17C6244(v27, v17, v18, v19, v20, v21, v22, v23);
      sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v28, 0, 1u);
    }
  }
}

uint64_t sub_1B1842D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 56) == 5)
    return *(_QWORD *)(a1 + 16);
  else
    return 0;
}

uint64_t sub_1B1842D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 == 5)
  {
    v10 = a1 + 32;
    return *(_QWORD *)v10;
  }
  if (v9 == 3)
  {
    v10 = a1 + 16;
    return *(_QWORD *)v10;
  }
  return 0;
}

uint64_t sub_1B1842E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 56) == 4)
    return *(_QWORD *)(a1 + 16);
  else
    return 0;
}

BOOL sub_1B1842E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"materialProperty");
  }
  return *(_BYTE *)(a1 + 56) == 6 && *(_QWORD *)(a1 + 16) != 0;
}

uint64_t sub_1B1842EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 56) == 6)
    return *(_QWORD *)(a1 + 16);
  else
    return 0;
}

void sub_1B1842F40(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v11 = *(const void **)(a1 + 16);
  sub_1B184264C(a1, 3, a3, a4, a5, a6, a7, a8);
  v18 = *(const void **)(a1 + 16);
  if (v18 != a2)
  {
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2)
      v19 = CFRetain(a2);
    else
      v19 = 0;
    *(_QWORD *)(a1 + 16) = v19;
  }
  if (v11 != a2)
    sub_1B18426C4(a1, 1, v12, v13, v14, v15, v16, v17, a9);
}

void sub_1B1842FF4(uint64_t a1, int *a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v11 = *(const char **)(a1 + 64);
  if (!v11)
    v11 = (const char *)sub_1B180CF10();
  switch(*(_BYTE *)(a1 + 56))
  {
    case 0:
      v12 = *(_QWORD *)(a1 + 16);
      if (!v12 || !sub_1B180B6F8(*(_QWORD *)(a1 + 16), (uint64_t)v11, (uint64_t)a3, a4, a5, a6, a7, a8))
        return;
      if ((sub_1B1843134(a1) & 2) != 0 && sub_1B180AF30(v12, v13, v14, v15, v16, v17, v18, v19))
      {
        v20 = 4;
      }
      else
      {
        v32 = sub_1B180B014(v12, v13, v14, v15, v16, v17, v18, v19);
        if (v32 > 7)
        {
LABEL_21:
          v21 = sub_1B180A948(v12, v13, v14, v15, v16, v17, v18, v19) ^ 1;
          goto LABEL_22;
        }
        v20 = dword_1B2246AE0[v32];
      }
      *a2 = v20;
      goto LABEL_21;
    case 1:
      if (!*(_QWORD *)(a1 + 16))
        return;
      v21 = 1;
      v22 = sub_1B1815BC8(1u);
      goto LABEL_15;
    case 4:
      v23 = *(void **)(a1 + 16);
      if (!v23)
        return;
      v22 = sub_1B189DB38(v23, v11, (uint64_t)a3, a4);
      v21 = 0;
LABEL_15:
      *a2 = v22;
      goto LABEL_22;
    case 5:
      v24 = *(_QWORD *)(a1 + 16);
      if (!v24)
        return;
      *a2 = sub_1B1815BC8(1u);
      v21 = sub_1B181F1E0(v24, v25, v26, v27, v28, v29, v30, v31);
LABEL_22:
      *a3 = v21;
      return;
    default:
      return;
  }
}

uint64_t sub_1B1843134(uint64_t a1)
{
  int v1;
  unsigned int v2;
  int v3;
  int v4;

  v1 = *(char *)(a1 + 58);
  v2 = v1 - 23;
  if (v1 == 3)
    v3 = 2;
  else
    v3 = 0;
  if (v1 == 25)
    v4 = 8;
  else
    v4 = v3;
  if (v2 < 2)
    v4 = 6;
  return v4 | ((*(_WORD *)(a1 + 56) & 0x100) == 0);
}

void sub_1B1843174(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  CFTypeRef v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  sub_1B184264C(a1, 4, a3, a4, a5, a6, a7, a8);
  v17 = *(const void **)(a1 + 16);
  if (v17 != a2)
  {
    if (v17)
    {
      CFRelease(v17);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2)
      v18 = CFRetain(a2);
    else
      v18 = 0;
    *(_QWORD *)(a1 + 16) = v18;
  }
  sub_1B18426C4(a1, 1, v11, v12, v13, v14, v15, v16, a9);
}

void sub_1B1843200(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v11 = *(const void **)(a1 + 16);
  sub_1B184264C(a1, 5, a3, a4, a5, a6, a7, a8);
  v18 = *(const void **)(a1 + 16);
  if (v18 != a2)
  {
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2)
      v19 = CFRetain(a2);
    else
      v19 = 0;
    *(_QWORD *)(a1 + 16) = v19;
    if (*(char *)(a1 + 58) <= 19)
    {
      v20 = *(_QWORD *)(a1 + 88);
      if (v20)
        *(_DWORD *)(v20 + 201) &= 0xFFF0007F;
    }
  }
  if (v11 != a2)
    sub_1B18426C4(a1, 1, v12, v13, v14, v15, v16, v17, a9);
}

void sub_1B18432D4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  CFTypeRef v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  if (*(_BYTE *)(a1 + 58) == 24)
  {
    v11 = *(const void **)(a1 + 16);
    sub_1B184264C(a1, 6, a3, a4, a5, a6, a7, a8);
    v18 = *(const void **)(a1 + 16);
    if (v18 != a2)
    {
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(a1 + 16) = 0;
      }
      if (a2)
        v19 = CFRetain(a2);
      else
        v19 = 0;
      *(_QWORD *)(a1 + 16) = v19;
      if (*(char *)(a1 + 58) <= 19)
      {
        v20 = *(_QWORD *)(a1 + 88);
        if (v20)
          *(_DWORD *)(v20 + 201) &= 0xFFF0007F;
      }
    }
    if (v11 != a2)
      sub_1B18426C4(a1, 1, v12, v13, v14, v15, v16, v17, a9);
  }
}

uint64_t sub_1B18433B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  return (*(unsigned __int16 *)(a1 + 56) >> 9) & 0xF;
}

void sub_1B1843400(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unsigned int v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v11 = *(unsigned __int16 *)(a1 + 56);
  if (((v11 >> 9) & 0xF) != a2)
  {
    *(_WORD *)(a1 + 56) = v11 & 0xE1FF | ((a2 & 0xF) << 9);
    sub_1B18426C4(a1, 0, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B1843480()
{
  if (qword_1EEF65DF0 != -1)
    dispatch_once(&qword_1EEF65DF0, &unk_1E63D1890);
  return qword_1EEF65DE8;
}

double sub_1B18434C0()
{
  double result;

  if (!qword_1EEF65DE8)
  {
    qword_1EEF65DE8 = sub_1B179CB60(&qword_1EEF65DE8);
    *(_QWORD *)&result = 0x1B1844E14;
    xmmword_1ED4AF2C8 = xmmword_1E63D3020;
    qword_1ED4AF2D8 = (uint64_t)sub_1B1844EDC;
  }
  return result;
}

uint64_t sub_1B1843520(unsigned int a1)
{
  return (a1 > 0x19) | (0x1BE192Fu >> a1) & 1;
}

uint64_t sub_1B1843540(uint64_t a1)
{
  return *(char *)(a1 + 58);
}

uint64_t sub_1B1843548(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 56)) & 1;
}

void sub_1B1843554(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int16 v9;
  __int16 v10;

  v9 = *(_WORD *)(a1 + 56);
  if (((((v9 & 0x100) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v10 = 256;
    else
      v10 = 0;
    *(_WORD *)(a1 + 56) = v9 & 0xFEFF | v10;
    sub_1B18426C4(a1, 0, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B184358C(int a1, int a2)
{
  int v2;
  int v3;
  int v4;

  if (a1 == 3)
    v2 = 2;
  else
    v2 = 0;
  if (a1 == 25)
    v3 = 8;
  else
    v3 = v2;
  if ((a1 - 23) >= 2)
    v4 = v3;
  else
    v4 = 6;
  return v4 | a2 ^ 1u;
}

uint64_t sub_1B18435C0(unsigned int a1)
{
  return (a1 < 0x11) & (0x146D0u >> a1);
}

void sub_1B18435E0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;

  sub_1B194F874(CFSTR("kCFXNotificationProfileWillDie"), a1, 0, 1u);
  if (a1)
  {
    v2 = (_QWORD *)a1[4];
    if (v2)
      v2[11] = 0;
    v3 = (_QWORD *)a1[5];
    if (v3)
      v3[11] = 0;
    v4 = a1[6];
    if (v4)
      *(_QWORD *)(v4 + 88) = 0;
    v5 = a1[7];
    if (v5)
      *(_QWORD *)(v5 + 88) = 0;
    v6 = a1[8];
    if (v6)
      *(_QWORD *)(v6 + 88) = 0;
    v7 = a1[9];
    if (v7)
      *(_QWORD *)(v7 + 88) = 0;
    v8 = a1[10];
    if (v8)
      *(_QWORD *)(v8 + 88) = 0;
    v9 = a1[12];
    if (v9)
      *(_QWORD *)(v9 + 88) = 0;
    v10 = a1[11];
    if (v10)
      *(_QWORD *)(v10 + 88) = 0;
    v11 = a1[13];
    if (v11)
      *(_QWORD *)(v11 + 88) = 0;
    v12 = a1[14];
    if (v12)
      *(_QWORD *)(v12 + 88) = 0;
    v13 = a1[15];
    if (v13)
      *(_QWORD *)(v13 + 88) = 0;
    v14 = a1[16];
    if (v14)
      *(_QWORD *)(v14 + 88) = 0;
    v15 = a1[17];
    if (v15)
      *(_QWORD *)(v15 + 88) = 0;
    v16 = a1[18];
    if (v16)
      *(_QWORD *)(v16 + 88) = 0;
    v17 = a1[19];
    if (v17)
      *(_QWORD *)(v17 + 88) = 0;
    v18 = a1[20];
    if (v18)
      *(_QWORD *)(v18 + 88) = 0;
    if (v2)
    {
      CFRelease(v2);
      a1[4] = 0;
      v3 = (_QWORD *)a1[5];
    }
    if (v3)
    {
      CFRelease(v3);
      a1[5] = 0;
    }
    v19 = (const void *)a1[6];
    if (v19)
    {
      CFRelease(v19);
      a1[6] = 0;
    }
    v20 = (const void *)a1[7];
    if (v20)
    {
      CFRelease(v20);
      a1[7] = 0;
    }
    v21 = (const void *)a1[8];
    if (v21)
    {
      CFRelease(v21);
      a1[8] = 0;
    }
    v22 = (const void *)a1[9];
    if (v22)
    {
      CFRelease(v22);
      a1[9] = 0;
    }
    v23 = (const void *)a1[10];
    if (v23)
    {
      CFRelease(v23);
      a1[10] = 0;
    }
    v24 = (const void *)a1[12];
    if (v24)
    {
      CFRelease(v24);
      a1[12] = 0;
    }
    v25 = (const void *)a1[11];
    if (v25)
    {
      CFRelease(v25);
      a1[11] = 0;
    }
    v26 = (const void *)a1[13];
    if (v26)
    {
      CFRelease(v26);
      a1[13] = 0;
    }
    v27 = (const void *)a1[14];
    if (v27)
    {
      CFRelease(v27);
      a1[14] = 0;
    }
    v28 = (const void *)a1[16];
    if (v28)
    {
      CFRelease(v28);
      a1[16] = 0;
    }
    v29 = (const void *)a1[17];
    if (v29)
    {
      CFRelease(v29);
      a1[17] = 0;
    }
    v30 = (const void *)a1[18];
    if (v30)
    {
      CFRelease(v30);
      a1[18] = 0;
    }
    v31 = (const void *)a1[19];
    if (v31)
    {
      CFRelease(v31);
      a1[19] = 0;
    }
    v32 = (const void *)a1[20];
    if (v32)
    {
      CFRelease(v32);
      a1[20] = 0;
    }
    v33 = (const void *)a1[15];
    if (v33)
    {
      CFRelease(v33);
      a1[15] = 0;
    }
  }
}

__CFString *sub_1B18437FC(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const __CFString *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  _BOOL4 v27;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXCommonProfile %p :"), a1);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v3, v4, v5, v6, v7, v8, (uint64_t)"commonProfile");
  v9 = *(int *)(a1 + 24);
  if (v9 > 4)
    v10 = CFSTR("VFXhadingModelInvalid");
  else
    v10 = off_1E63D7158[v9];
  CFStringAppendFormat(Mutable, 0, CFSTR(" shadingModel:%@"), v10);
  CFStringAppendFormat(Mutable, 0, CFSTR(" perPixelLit:%d"), *(unsigned __int8 *)(a1 + 200));
  CFStringAppendFormat(Mutable, 0, CFSTR(" transparencyMode:%d"), *(unsigned __int8 *)(a1 + 184));
  for (i = 0; i != 20; ++i)
  {
    if (sub_1B1840C94(*(_DWORD *)(a1 + 24), (char)i))
    {
      v17 = sub_1B1840E70(a1, (char)i, 0, v12, v13, v14, v15, v16);
      if (v17)
      {
        v25 = v17;
        v26 = off_1E63D7040[i];
        v27 = sub_1B1841A40(v17, v18, v19, v20, v21, v22, v23, v24);
        CFStringAppendFormat(Mutable, 0, CFSTR("[%@] texture:%d xform:%d"), v26, v27, *(_QWORD *)(v25 + 72) != 0);
      }
    }
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

__CFArray *sub_1B1843988(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  __CFDictionary *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  __CFDictionary *v36;
  CFNumberRef v37;
  CFNumberRef v38;
  CFNumberRef v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  const CFDictionaryKeyCallBacks *v44;
  const CFDictionaryValueCallBacks *v45;
  __CFDictionary *v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  __CFDictionary *v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  const CFDictionaryValueCallBacks *v54;
  __CFDictionary *v55;
  CFNumberRef v56;
  CFNumberRef v57;
  CFNumberRef v58;
  __CFDictionary *v59;
  CFNumberRef v60;
  CFNumberRef v61;
  CFNumberRef v62;
  const CFDictionaryKeyCallBacks *v63;
  const CFDictionaryValueCallBacks *v64;
  __CFDictionary *v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  __CFDictionary *v69;
  CFNumberRef v70;
  CFNumberRef v71;
  CFNumberRef v72;
  __CFDictionary *v73;
  CFNumberRef v74;
  CFNumberRef v75;
  CFNumberRef v76;
  __CFDictionary *v77;
  CFNumberRef v78;
  CFNumberRef v79;
  CFNumberRef v80;
  __CFDictionary *v81;
  CFNumberRef v82;
  CFNumberRef v83;
  CFNumberRef v84;
  __CFDictionary *v85;
  CFNumberRef v86;
  CFNumberRef v87;
  CFNumberRef v88;
  __CFDictionary *v89;
  CFNumberRef v90;
  CFNumberRef v91;
  CFNumberRef v92;
  uint64_t v94;
  int v95;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 32;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v7 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("emission"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 40;
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v11 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v8, CFSTR("name"), CFSTR("diffuse"));
  CFDictionarySetValue(v8, CFSTR("type"), v9);
  CFDictionarySetValue(v8, CFSTR("address"), v11);
  CFDictionarySetValue(v8, CFSTR("semantic"), v10);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v11);
  CFRelease(v9);
  v12 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 48;
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v12, CFSTR("name"), CFSTR("specular"));
  CFDictionarySetValue(v12, CFSTR("type"), v13);
  CFDictionarySetValue(v12, CFSTR("address"), v15);
  CFDictionarySetValue(v12, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v12);
  CFRelease(v14);
  CFRelease(v12);
  CFRelease(v15);
  CFRelease(v13);
  v16 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 56;
  v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v19 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v16, CFSTR("name"), CFSTR("reflective"));
  CFDictionarySetValue(v16, CFSTR("type"), v17);
  CFDictionarySetValue(v16, CFSTR("address"), v19);
  CFDictionarySetValue(v16, CFSTR("semantic"), v18);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v18);
  CFRelease(v16);
  CFRelease(v19);
  CFRelease(v17);
  v20 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 64;
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v23 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v20, CFSTR("name"), CFSTR("transparent"));
  CFDictionarySetValue(v20, CFSTR("type"), v21);
  CFDictionarySetValue(v20, CFSTR("address"), v23);
  CFDictionarySetValue(v20, CFSTR("semantic"), v22);
  CFArrayAppendValue(Mutable, v20);
  CFRelease(v22);
  CFRelease(v20);
  CFRelease(v23);
  CFRelease(v21);
  v24 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 72;
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v27 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v24, CFSTR("name"), CFSTR("multiply"));
  CFDictionarySetValue(v24, CFSTR("type"), v25);
  CFDictionarySetValue(v24, CFSTR("address"), v27);
  CFDictionarySetValue(v24, CFSTR("semantic"), v26);
  CFArrayAppendValue(Mutable, v24);
  CFRelease(v26);
  CFRelease(v24);
  CFRelease(v27);
  CFRelease(v25);
  v28 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 80;
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v31 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v28, CFSTR("name"), CFSTR("normal"));
  CFDictionarySetValue(v28, CFSTR("type"), v29);
  CFDictionarySetValue(v28, CFSTR("address"), v31);
  CFDictionarySetValue(v28, CFSTR("semantic"), v30);
  CFArrayAppendValue(Mutable, v28);
  CFRelease(v30);
  CFRelease(v28);
  CFRelease(v31);
  CFRelease(v29);
  v32 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 104;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v35 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v32, CFSTR("name"), CFSTR("metalness"));
  CFDictionarySetValue(v32, CFSTR("type"), v33);
  CFDictionarySetValue(v32, CFSTR("address"), v35);
  CFDictionarySetValue(v32, CFSTR("semantic"), v34);
  CFArrayAppendValue(Mutable, v32);
  CFRelease(v34);
  CFRelease(v32);
  CFRelease(v35);
  CFRelease(v33);
  v36 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 112;
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v38 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v39 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v36, CFSTR("name"), CFSTR("roughness"));
  CFDictionarySetValue(v36, CFSTR("type"), v37);
  CFDictionarySetValue(v36, CFSTR("address"), v39);
  CFDictionarySetValue(v36, CFSTR("semantic"), v38);
  CFArrayAppendValue(Mutable, v36);
  CFRelease(v38);
  CFRelease(v36);
  CFRelease(v39);
  CFRelease(v37);
  v40 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 120;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v43 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v40, CFSTR("name"), CFSTR("displacement"));
  CFDictionarySetValue(v40, CFSTR("type"), v41);
  CFDictionarySetValue(v40, CFSTR("address"), v43);
  CFDictionarySetValue(v40, CFSTR("semantic"), v42);
  CFArrayAppendValue(Mutable, v40);
  CFRelease(v42);
  CFRelease(v40);
  CFRelease(v43);
  CFRelease(v41);
  v44 = v3;
  v45 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v46 = CFDictionaryCreateMutable(0, 4, v44, MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 128;
  v47 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v48 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v49 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v46, CFSTR("name"), CFSTR("clearCoat"));
  CFDictionarySetValue(v46, CFSTR("type"), v47);
  CFDictionarySetValue(v46, CFSTR("address"), v49);
  CFDictionarySetValue(v46, CFSTR("semantic"), v48);
  CFArrayAppendValue(Mutable, v46);
  CFRelease(v48);
  CFRelease(v46);
  CFRelease(v49);
  CFRelease(v47);
  v50 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v45);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 136;
  v51 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v52 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v53 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v50, CFSTR("name"), CFSTR("clearCoatRoughness"));
  CFDictionarySetValue(v50, CFSTR("type"), v51);
  CFDictionarySetValue(v50, CFSTR("address"), v53);
  CFDictionarySetValue(v50, CFSTR("semantic"), v52);
  CFArrayAppendValue(Mutable, v50);
  CFRelease(v52);
  CFRelease(v50);
  CFRelease(v53);
  CFRelease(v51);
  v54 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v55 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 144;
  v56 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v57 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v58 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v55, CFSTR("name"), CFSTR("clearCoatNormal"));
  CFDictionarySetValue(v55, CFSTR("type"), v56);
  CFDictionarySetValue(v55, CFSTR("address"), v58);
  CFDictionarySetValue(v55, CFSTR("semantic"), v57);
  CFArrayAppendValue(Mutable, v55);
  CFRelease(v57);
  CFRelease(v55);
  CFRelease(v58);
  CFRelease(v56);
  v59 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v54);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 152;
  v60 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v61 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v62 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v59, CFSTR("name"), CFSTR("subsurface"));
  CFDictionarySetValue(v59, CFSTR("type"), v60);
  CFDictionarySetValue(v59, CFSTR("address"), v62);
  CFDictionarySetValue(v59, CFSTR("semantic"), v61);
  CFArrayAppendValue(Mutable, v59);
  CFRelease(v61);
  CFRelease(v59);
  CFRelease(v62);
  CFRelease(v60);
  v63 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v64 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v65 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v95 = 2;
  valuePtr = 5;
  v94 = a1 + 160;
  v66 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v67 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v68 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v65, CFSTR("name"), CFSTR("subsurfaceRadius"));
  CFDictionarySetValue(v65, CFSTR("type"), v66);
  CFDictionarySetValue(v65, CFSTR("address"), v68);
  CFDictionarySetValue(v65, CFSTR("semantic"), v67);
  CFArrayAppendValue(Mutable, v65);
  CFRelease(v67);
  CFRelease(v65);
  CFRelease(v68);
  CFRelease(v66);
  v69 = CFDictionaryCreateMutable(0, 4, v63, v64);
  v95 = 0;
  valuePtr = 1;
  v94 = a1 + 168;
  v70 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v71 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v72 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v69, CFSTR("name"), CFSTR("shininess"));
  CFDictionarySetValue(v69, CFSTR("type"), v70);
  CFDictionarySetValue(v69, CFSTR("address"), v72);
  CFDictionarySetValue(v69, CFSTR("semantic"), v71);
  CFArrayAppendValue(Mutable, v69);
  CFRelease(v71);
  CFRelease(v69);
  CFRelease(v72);
  CFRelease(v70);
  v73 = CFDictionaryCreateMutable(0, 4, v63, v64);
  v95 = 0;
  valuePtr = 1;
  v94 = a1 + 172;
  v74 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v75 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v76 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v73, CFSTR("name"), CFSTR("indexOfRefraction"));
  CFDictionarySetValue(v73, CFSTR("type"), v74);
  CFDictionarySetValue(v73, CFSTR("address"), v76);
  CFDictionarySetValue(v73, CFSTR("semantic"), v75);
  CFArrayAppendValue(Mutable, v73);
  CFRelease(v75);
  CFRelease(v73);
  CFRelease(v76);
  CFRelease(v74);
  v77 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v64);
  v95 = 0;
  valuePtr = 1;
  v94 = a1 + 176;
  v78 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v79 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v80 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v77, CFSTR("name"), CFSTR("fresnelExponent"));
  CFDictionarySetValue(v77, CFSTR("type"), v78);
  CFDictionarySetValue(v77, CFSTR("address"), v80);
  CFDictionarySetValue(v77, CFSTR("semantic"), v79);
  CFArrayAppendValue(Mutable, v77);
  CFRelease(v79);
  CFRelease(v77);
  CFRelease(v80);
  CFRelease(v78);
  v81 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v64);
  v95 = 0;
  valuePtr = 2;
  v94 = a1 + 24;
  v82 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v83 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v84 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v81, CFSTR("name"), CFSTR("shadingModel"));
  CFDictionarySetValue(v81, CFSTR("type"), v82);
  CFDictionarySetValue(v81, CFSTR("address"), v84);
  CFDictionarySetValue(v81, CFSTR("semantic"), v83);
  CFArrayAppendValue(Mutable, v81);
  CFRelease(v83);
  CFRelease(v81);
  CFRelease(v84);
  CFRelease(v82);
  v85 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v64);
  v95 = 0;
  valuePtr = 2;
  v94 = a1 + 184;
  v86 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v87 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v88 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v85, CFSTR("name"), CFSTR("transparencyMode"));
  CFDictionarySetValue(v85, CFSTR("type"), v86);
  CFDictionarySetValue(v85, CFSTR("address"), v88);
  CFDictionarySetValue(v85, CFSTR("semantic"), v87);
  CFArrayAppendValue(Mutable, v85);
  CFRelease(v87);
  CFRelease(v85);
  CFRelease(v88);
  CFRelease(v86);
  v89 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v64);
  v95 = 0;
  valuePtr = 2;
  v94 = a1 + 192;
  v90 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v91 = CFNumberCreate(0, kCFNumberSInt32Type, &v95);
  v92 = CFNumberCreate(0, kCFNumberLongType, &v94);
  CFDictionarySetValue(v89, CFSTR("name"), CFSTR("imagesCount"));
  CFDictionarySetValue(v89, CFSTR("type"), v90);
  CFDictionarySetValue(v89, CFSTR("address"), v92);
  CFDictionarySetValue(v89, CFSTR("semantic"), v91);
  CFArrayAppendValue(Mutable, v89);
  CFRelease(v91);
  CFRelease(v89);
  CFRelease(v92);
  CFRelease(v90);
  return Mutable;
}

void sub_1B1844C90(uint64_t a1, void *a2, const void *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v12 = sub_1B1842184(a1, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  memcpy(a2, a3, a4);
  if (v12 != sub_1B1842184(a1, v13, v14, v15, v16, v17, v18, v19))
    sub_1B1841840(a1, v20, v21, v22, v23, v24, v25, v26);
  sub_1B1878414(*(_QWORD *)(a1 + 16), v20, v21, v22, v23, v24, v25, v26);
}

void sub_1B1844CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  const void *v10;
  _QWORD *v11;
  const void *v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"materialProperty");
  v9 = *(unsigned __int8 *)(a1 + 56);
  if (v9 <= 6)
  {
    if (v9 == 2)
    {
      v11 = (_QWORD *)(a1 + 16);
    }
    else
    {
      v11 = (_QWORD *)(a1 + 16);
      v10 = *(const void **)(a1 + 16);
      if (!v10)
        goto LABEL_9;
      CFRelease(v10);
    }
    *v11 = 0;
  }
LABEL_9:
  v12 = *(const void **)(a1 + 32);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 32) = 0;
  }
}

void sub_1B1844D84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  const void *v10;
  const void *v11;

  v9 = (void *)a1[9];
  if (v9)
    free(v9);
  sub_1B1844CFC((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = (const void *)a1[8];
  if (v10)
  {
    CFRelease(v10);
    a1[8] = 0;
  }
  v11 = (const void *)a1[6];
  if (v11)
  {
    CFRelease(v11);
    a1[6] = 0;
  }
}

CFStringRef sub_1B1844DD4(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXMaterialProperty>"));
}

CFStringRef sub_1B1844DF4(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXMaterialProperty>"));
}

void sub_1B1844E14(uint64_t a1, void *__s1, void *__s2, size_t __n)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (memcmp(__s1, __s2, __n))
  {
    memcpy(__s1, __s2, __n);
    if (!a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"materialProperty");
    if (*(char *)(a1 + 58) <= 19)
    {
      v15 = *(_QWORD *)(a1 + 88);
      if (v15)
      {
        if ((void *)(a1 + 16) == __s2 && *(_BYTE *)(a1 + 56) != 2)
          *(_DWORD *)(v15 + 201) &= ~0x40u;
        sub_1B1841840(v15, v8, v9, v10, v11, v12, v13, v14);
      }
    }
  }
}

__CFArray *sub_1B1844EDC(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  const __CFString *v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  __CFDictionary *v14;
  CFNumberRef v15;
  __CFArray *v16;
  CFNumberRef v17;
  uint64_t v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  uint64_t v33;
  int v34;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  switch(*(_BYTE *)(a1 + 56))
  {
    case 0:
      v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = 2;
      valuePtr = 5;
      v33 = a1 + 16;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
      v6 = CFNumberCreate(0, kCFNumberLongType, &v33);
      v7 = CFSTR("image");
      goto LABEL_9;
    case 1:
      v8 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = 2;
      valuePtr = 5;
      v33 = a1 + 16;
      v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
      v11 = CFNumberCreate(0, kCFNumberLongType, &v33);
      CFDictionarySetValue(v8, CFSTR("name"), CFSTR("asset"));
      CFDictionarySetValue(v8, CFSTR("type"), v9);
      CFDictionarySetValue(v8, CFSTR("address"), v11);
      CFDictionarySetValue(v8, CFSTR("semantic"), v10);
      CFArrayAppendValue(Mutable, v8);
      CFRelease(v10);
      CFRelease(v8);
      CFRelease(v11);
      CFRelease(v9);
      goto LABEL_4;
    case 2:
      v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = 0;
      valuePtr = 12;
      v33 = a1 + 16;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
      v6 = CFNumberCreate(0, kCFNumberLongType, &v33);
      v7 = CFSTR("color");
      goto LABEL_9;
    case 3:
LABEL_4:
      v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = 2;
      valuePtr = 5;
      v33 = a1 + 16;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
      v6 = CFNumberCreate(0, kCFNumberLongType, &v33);
      v7 = CFSTR("texture");
      goto LABEL_9;
    case 4:
      v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = 2;
      valuePtr = 5;
      v33 = a1 + 16;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
      v6 = CFNumberCreate(0, kCFNumberLongType, &v33);
      v7 = CFSTR("mtltexture");
      goto LABEL_9;
    case 5:
      v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = 2;
      valuePtr = 5;
      v33 = a1 + 16;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
      v6 = CFNumberCreate(0, kCFNumberLongType, &v33);
      v7 = CFSTR("imageProxy");
      goto LABEL_9;
    case 6:
      v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v34 = 2;
      valuePtr = 5;
      v33 = a1 + 16;
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
      v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
      v6 = CFNumberCreate(0, kCFNumberLongType, &v33);
      v7 = CFSTR("precomputedLightingEnvironment");
LABEL_9:
      CFDictionarySetValue(v3, CFSTR("name"), v7);
      CFDictionarySetValue(v3, CFSTR("type"), v4);
      CFDictionarySetValue(v3, CFSTR("address"), v6);
      CFDictionarySetValue(v3, CFSTR("semantic"), v5);
      CFArrayAppendValue(Mutable, v3);
      CFRelease(v5);
      CFRelease(v3);
      CFRelease(v6);
      CFRelease(v4);
      break;
    default:
      break;
  }
  v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v14 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v34 = 2;
  valuePtr = 5;
  v33 = a1 + 64;
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v16 = Mutable;
  v17 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
  v18 = a1;
  v19 = CFNumberCreate(0, kCFNumberLongType, &v33);
  CFDictionarySetValue(v14, CFSTR("name"), CFSTR("sampler"));
  CFDictionarySetValue(v14, CFSTR("type"), v15);
  CFDictionarySetValue(v14, CFSTR("address"), v19);
  CFDictionarySetValue(v14, CFSTR("semantic"), v17);
  CFArrayAppendValue(v16, v14);
  CFRelease(v17);
  CFRelease(v14);
  CFRelease(v19);
  CFRelease(v15);
  v20 = CFDictionaryCreateMutable(0, 4, v12, v13);
  v34 = 2;
  valuePtr = 5;
  v33 = v18 + 72;
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
  v23 = CFNumberCreate(0, kCFNumberLongType, &v33);
  CFDictionarySetValue(v20, CFSTR("name"), CFSTR("transforms"));
  CFDictionarySetValue(v20, CFSTR("type"), v21);
  CFDictionarySetValue(v20, CFSTR("address"), v23);
  CFDictionarySetValue(v20, CFSTR("semantic"), v22);
  CFArrayAppendValue(v16, v20);
  CFRelease(v22);
  CFRelease(v20);
  CFRelease(v23);
  CFRelease(v21);
  v24 = CFDictionaryCreateMutable(0, 4, v12, v13);
  v34 = 0;
  valuePtr = 2;
  v33 = v18 + 84;
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
  v27 = CFNumberCreate(0, kCFNumberLongType, &v33);
  CFDictionarySetValue(v24, CFSTR("name"), CFSTR("uvSet"));
  CFDictionarySetValue(v24, CFSTR("type"), v25);
  CFDictionarySetValue(v24, CFSTR("address"), v27);
  CFDictionarySetValue(v24, CFSTR("semantic"), v26);
  CFArrayAppendValue(v16, v24);
  CFRelease(v26);
  CFRelease(v24);
  CFRelease(v27);
  CFRelease(v25);
  v28 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v13);
  v34 = 0;
  valuePtr = 1;
  v33 = v18 + 80;
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v34);
  v31 = CFNumberCreate(0, kCFNumberLongType, &v33);
  CFDictionarySetValue(v28, CFSTR("name"), CFSTR("intensity"));
  CFDictionarySetValue(v28, CFSTR("type"), v29);
  CFDictionarySetValue(v28, CFSTR("address"), v31);
  CFDictionarySetValue(v28, CFSTR("semantic"), v30);
  CFArrayAppendValue(v16, v28);
  CFRelease(v30);
  CFRelease(v28);
  CFRelease(v31);
  CFRelease(v29);
  return v16;
}

uint64_t sub_1B1845AAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int shouldFlip;
  void *v39;
  const char *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  double v45;
  CGFloat v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  CATransform3D v69;
  CATransform3D v70;
  CATransform3D v71;
  CATransform3D v72;
  CATransform3D v73;
  CATransform3D b;
  CATransform3D a;
  CATransform3D v76;
  CATransform3D v77;
  CATransform3D v78;
  CATransform3D v79;
  CATransform3D v80;
  CATransform3D v81;
  CATransform3D v82;

  objc_msgSend_begin(MEMORY[0x1E0CD28B0], a2, a3, a4);
  if (!pthread_main_np())
    objc_msgSend_activateBackground_(MEMORY[0x1E0CD28B0], v5, 1, v6);
  objc_msgSend_setValue_forKey_(MEMORY[0x1E0CD28B0], v5, MEMORY[0x1E0C9AAB0], *MEMORY[0x1E0CD3160]);
  if (*(_BYTE *)(a1 + 72))
    objc_msgSend_setLayer_(*(void **)(a1 + 32), v7, *(_QWORD *)(a1 + 40), v9);
  if (*(_BYTE *)(a1 + 73))
  {
    v10 = (void *)objc_msgSend_layerToFocusForRenderedLayer_(*(void **)(a1 + 48), v7, *(_QWORD *)(a1 + 40), v9);
    v17 = objc_msgSend_usesBoundsInPixels(*(void **)(a1 + 48), v11, v12, v13);
    v18 = *(void **)(a1 + 40);
    if (v10 != v18)
    {
      objc_msgSend_setAnchorPoint_(*(void **)(a1 + 40), v14, v15, v16, 0.0, 0.0);
      objc_msgSend_setAnchorPoint_(v10, v19, v20, v21, 0.0, 0.0);
      objc_msgSend_setPosition_(*(void **)(a1 + 40), v22, v23, v24, 0.0, 0.0);
      objc_msgSend_setPosition_(v10, v25, v26, v27, 0.0, 0.0);
    }
    objc_msgSend_bounds(v10, v14, v15, v16);
    v29 = v28;
    v31 = v30;
    if (v17)
    {
      objc_msgSend_contentsScale(v10, v7, v8, v9);
      v29 = v32 * v29;
      v31 = v32 * v31;
    }
    if (v29 != 0.0 || v31 != 0.0)
    {
      v33 = *(double *)(a1 + 56) / v29;
      v34 = *(double *)(a1 + 64) / v31;
      shouldFlip = objc_msgSend_shouldFlip(*(void **)(a1 + 48), v7, v8, v9);
      if (shouldFlip)
      {
        if (v10 == v18)
        {
          objc_msgSend_anchorPoint(*(void **)(a1 + 40), v35, v36, v37);
          v46 = v29 * ((v33 + -1.0) * v45);
          objc_msgSend_anchorPoint(*(void **)(a1 + 40), v47, v48, v49);
          CATransform3DMakeTranslation(&v80, v46, v31 * ((v34 + -1.0) * v50), 0.0);
          v51 = *(void **)(a1 + 40);
          v79 = v80;
          objc_msgSend_setTransform_(v51, v52, (uint64_t)&v79, v53);
        }
        else
        {
          CATransform3DMakeTranslation(&v82, 0.0, *(CGFloat *)(a1 + 64), 0.0);
          v39 = *(void **)(a1 + 40);
          v81 = v82;
          objc_msgSend_setTransform_(v39, v40, (uint64_t)&v81, v41);
        }
      }
      else
      {
        CATransform3DMakeTranslation(&v78, 0.0, 0.0, 0.0);
        v42 = *(void **)(a1 + 40);
        v77 = v78;
        objc_msgSend_setTransform_(v42, v43, (uint64_t)&v77, v44);
      }
      CATransform3DMakeScale(&a, v33, v34, 1.0);
      v57 = *(void **)(a1 + 40);
      if (v57)
        objc_msgSend_transform(v57, v54, v55, v56);
      else
        memset(&b, 0, sizeof(b));
      CATransform3DConcat(&v76, &a, &b);
      v58 = *(void **)(a1 + 40);
      v73 = v76;
      objc_msgSend_setTransform_(v58, v59, (uint64_t)&v73, v60);
      if (shouldFlip)
      {
        CATransform3DMakeScale(&v71, 1.0, -1.0, 1.0);
        v64 = *(void **)(a1 + 40);
        if (v64)
          objc_msgSend_transform(v64, v61, v62, v63);
        else
          memset(&v70, 0, sizeof(v70));
        CATransform3DConcat(&v72, &v71, &v70);
        v65 = *(void **)(a1 + 40);
        v69 = v72;
        objc_msgSend_setTransform_(v65, v66, (uint64_t)&v69, v67);
      }
    }
  }
  return objc_msgSend_commit(MEMORY[0x1E0CD28B0], v7, v8, v9);
}

uint64_t sub_1B18463F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 64);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  return result;
}

__CFArray *sub_1B1846410(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  uint64_t v22;
  int v23;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 2;
  valuePtr = 5;
  v22 = a1 + 64;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("LOD"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v23 = 0;
  valuePtr = 1;
  v22 = a1 + 72;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("threshold"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 0;
  valuePtr = 2;
  v22 = a1 + 76;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("thresholdType"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 0;
  valuePtr = 2;
  v22 = a1 + 48;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("worldRef"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  return Mutable;
}

uint64_t sub_1B1846814()
{
  if (qword_1ED4CED10 != -1)
    dispatch_once(&qword_1ED4CED10, &unk_1E63D0C90);
  return qword_1ED4CED18;
}

double sub_1B1846854()
{
  double result;

  if (!qword_1ED4CED18)
  {
    qword_1ED4CED18 = sub_1B179CB60(&qword_1ED4CED18);
    *(_QWORD *)&result = 0x1B18463F4;
    unk_1ED4BE3E8 = xmmword_1E63D2FC8;
    unk_1ED4BE3F8 = unk_1E63D2FD8;
    qword_1ED4BE408 = 0;
    qword_1ED4BE3D0 = (uint64_t)sub_1B1846410;
  }
  return result;
}

uint64_t sub_1B18468C0(const void *a1, int a2, float a3)
{
  uint64_t v6;
  const void *v7;
  CFTypeRef v8;

  if (qword_1ED4CED10 != -1)
    dispatch_once(&qword_1ED4CED10, &unk_1E63D0C90);
  v6 = sub_1B179CB90(qword_1ED4CED18, 0x40uLL);
  *(_DWORD *)(v6 + 76) = a2;
  *(float *)(v6 + 72) = a3;
  v7 = *(const void **)(v6 + 64);
  if (v7 != a1)
  {
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v6 + 64) = 0;
    }
    if (a1)
      v8 = CFRetain(a1);
    else
      v8 = 0;
    *(_QWORD *)(v6 + 64) = v8;
  }
  return v6;
}

uint64_t sub_1B184696C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"lod");
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1B18469B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"lod");
  return *(unsigned int *)(a1 + 76);
}

float sub_1B18469FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"lod");
  return *(float *)(a1 + 72);
}

id sub_1B1846A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return sub_1B193E38C(a1, a2, a3, a4, a5, a6, a7, a8);
}

CFStringRef sub_1B1846A78(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXLOD>"));
}

CFStringRef sub_1B1846A98(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXLOD>"));
}

uint64_t sub_1B1846AB8(CFDataRef theData, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Length;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __CFData *MutableCopy;
  uint64_t v18;
  CFIndex v19;

  if (!(_DWORD)a5)
    return 0;
  if (theData)
  {
    Length = CFDataGetLength(theData);
    MutableCopy = CFDataCreateMutableCopy(0, Length, theData);
  }
  else
  {
    v19 = a4 * a3 * sub_1B179E250(a5, a2, a3, a4, a5, a6, a7, a8);
    MutableCopy = CFDataCreateMutable(0, 0);
    CFDataSetLength(MutableCopy, v19);
  }
  v18 = sub_1B17ED204(MutableCopy, a2, a3, a4, a5, v14, v15, v16);
  CFRelease(MutableCopy);
  if (v18)
    *(_BYTE *)(v18 + 88) |= 1u;
  return v18;
}

uint64_t sub_1B1846B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;

  v8 = *(_QWORD *)(a1 + 64);
  result = sub_1B18F385C(v8);
  v17 = result - a4;
  if (result > a4)
  {
    v18 = (int)sub_1B17ED7B4(a1, v10, v11, v12, v13, v14, v15, v16) - 1;
    v19 = 1.0;
    v20 = 1.0;
    if (v18 <= 5)
    {
      v19 = flt_1B2246B10[v18];
      v20 = flt_1B2246B28[(int)v18];
    }
    result = sub_1B18F3B74(v8);
    if (a3 >= 1)
    {
      v21 = result;
      v22 = 0;
      v23 = a2 + a4;
      v24 = a2 + 8 * a4;
      v25 = a2 + 4 * a4;
      do
      {
        v26 = 0;
        do
        {
          if (v17 - 1 == v26)
            v27 = v20;
          else
            v27 = v19;
          result = sub_1B18F3854(v8);
          if ((int)result > 5)
          {
            if ((_DWORD)result != 6)
            {
              if ((_DWORD)result != 15)
                goto LABEL_19;
LABEL_16:
              *(_BYTE *)(v23 + v26) = (int)v27;
              goto LABEL_19;
            }
            *(double *)(v24 + 8 * v26) = v27;
          }
          else if ((_DWORD)result == 1)
          {
            *(float *)(v25 + 4 * v26) = v27;
          }
          else if ((_DWORD)result == 4)
          {
            goto LABEL_16;
          }
LABEL_19:
          ++v26;
        }
        while (v17 != v26);
        ++v22;
        v23 += v21;
        v24 += v21;
        v25 += v21;
      }
      while (v22 != a3);
    }
  }
  return result;
}

void sub_1B1846CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  _QWORD *v11;
  __CFData *v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v29;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  v11 = *(_QWORD **)(a1 + 64);
  v12 = sub_1B18F3A4C(v11, a2, a3, a4, a5, a6, a7, a8);
  v13 = a9;
  v13.n128_u32[3] = 0;
  v29 = (float32x4_t)v13;
  v21 = sub_1B18F3960((uint64_t)v11, v14, v15, v16, v17, v18, v19, v20);
  sub_1B198D91C(v21, (uint64_t)v12, v22, v23, v24, v25, v26, v27, v29);
}

void sub_1B1846D4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  _QWORD *v11;
  __CFData *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  v11 = *(_QWORD **)(a1 + 64);
  v12 = sub_1B18F3A4C(v11, a2, a3, a4, a5, a6, a7, a8);
  v20 = sub_1B18F3960((uint64_t)v11, v13, v14, v15, v16, v17, v18, v19);
  sub_1B198D91C(v20, (uint64_t)v12, v21, v22, v23, v24, v25, v26, a9);
}

__CFData *sub_1B1846DBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  const __CFData *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex Length;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  v10 = *(_QWORD **)(a1 + 64);
  v11 = (const __CFData *)sub_1B18F3970((uint64_t)v10, a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B18F3B74((uint64_t)v10);
  if (!v11)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"data");
  Length = CFDataGetLength(v11);
  if (Length != sub_1B18F39CC((uint64_t)v10) * v18)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. We do not support appending to really complicated interleavings"), v20, v21, v22, v23, v24, v25, (uint64_t)"(size_t)CFDataGetLength(data) == stride * CFXSourceAccessorGetCount(accessor)");
  v26 = CFDataGetLength(v11);
  CFDataSetLength(v11, v26 + v18 * (_QWORD)a2);
  v27 = sub_1B18F39CC((uint64_t)v10);
  sub_1B18F3BA4((uint64_t)v10, (uint64_t)&a2[v27]);
  return sub_1B18F3A4C(v10, v27, v28, v29, v30, v31, v32, v33);
}

uint64_t sub_1B1846EC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  __CFData *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  uint64_t v16;
  __CFData *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  v11 = *(_QWORD *)(a1 + 64);
  v12 = sub_1B1846DBC(a1, (const char *)a3, a3, a4, a5, a6, a7, a8);
  v13 = sub_1B18F3B74(v11);
  if (a3 >= 1)
  {
    v14 = v13;
    v15 = (float *)(a2 + 4);
    v16 = a3;
    v17 = v12;
    do
    {
      v18 = sub_1B18F3854(v11);
      if (v18 > 5)
      {
        if (v18 == 6)
        {
          *(double *)v17 = *(v15 - 1);
          *((double *)v17 + 1) = *v15;
          *((double *)v17 + 2) = v15[1];
          goto LABEL_14;
        }
        if (v18 == 15)
          goto LABEL_11;
      }
      else
      {
        if (v18 == 1)
        {
          *(float *)v17 = *(v15 - 1);
          *((float *)v17 + 1) = *v15;
          *((float *)v17 + 2) = v15[1];
          goto LABEL_14;
        }
        if (v18 == 4)
        {
LABEL_11:
          *(_BYTE *)v17 = (int)*(v15 - 1);
          *((_BYTE *)v17 + 1) = (int)*v15;
          *((_BYTE *)v17 + 2) = (int)v15[1];
          goto LABEL_14;
        }
      }
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshSourceAppendVector3 - Type not supported"), v19, v20, v21, v22, v23, v24, v26);
LABEL_14:
      v17 = (__CFData *)((char *)v17 + v14);
      v15 += 4;
      --v16;
    }
    while (v16);
  }
  return sub_1B1846B84(a1, (uint64_t)v12, a3, 3);
}

uint64_t sub_1B1847030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  __CFData *v12;
  uint64_t v13;
  uint64_t v14;
  float *v15;
  __CFData *v16;
  uint64_t i;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  v11 = *(_QWORD *)(a1 + 64);
  v12 = sub_1B1846DBC(a1, (const char *)a3, a3, a4, a5, a6, a7, a8);
  v13 = sub_1B18F3B74(v11);
  if (a3 >= 1)
  {
    v14 = v13;
    v15 = (float *)(a2 + 4);
    v16 = v12;
    for (i = a3; i; --i)
    {
      v18 = sub_1B18F3854(v11);
      if (v18 > 5)
      {
        if (v18 == 6)
        {
          *(double *)v16 = COERCE_FLOAT(*(_QWORD *)(v15 - 1));
          *((double *)v16 + 1) = *v15;
          goto LABEL_14;
        }
        if (v18 == 15)
          goto LABEL_11;
      }
      else
      {
        if (v18 == 1)
        {
          *(_DWORD *)v16 = *(_QWORD *)(v15 - 1);
          *((float *)v16 + 1) = *v15;
          goto LABEL_14;
        }
        if (v18 == 4)
        {
LABEL_11:
          *(_BYTE *)v16 = (int)COERCE_FLOAT(*(_QWORD *)(v15 - 1));
          *((_BYTE *)v16 + 1) = (int)*v15;
          goto LABEL_14;
        }
      }
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshSourceAppendVector2 - Type not supported"), v19, v20, v21, v22, v23, v24, v26);
LABEL_14:
      v15 += 2;
      v16 = (__CFData *)((char *)v16 + v14);
    }
  }
  return sub_1B1846B84(a1, (uint64_t)v12, a3, 2);
}

uint64_t sub_1B1847180(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;

  if (a3 <= 0x14 && (v8 = a3, ((1 << a3) & 0x108052) != 0))
  {
    v11 = sub_1B179E250(a3, a2, a3, a4, a5, a6, a7, a8);
    v18 = (const void *)sub_1B18F38F8(v8, a2, 0, v11 * a2, 0);
    if (!v18)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"accessor");
    v25 = sub_1B17ED34C(v18, a1);
    if (!v25)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v19, v20, v21, v22, v23, v24, (uint64_t)"meshSource");
    sub_1B18F3B34((uint64_t)v18, v25);
    CFRelease(v18);
    *(_BYTE *)(v25 + 88) |= 4u;
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshSourceCreate: unsupported type"), a3, a4, a5, a6, a7, a8, v27);
    return 0;
  }
  return v25;
}

void sub_1B1847284(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((sub_1B18F5BEC(a1) & 1) == 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Cannot set volatile data of a non volatile source"), v4, v5, v6, v7, v8, v9, (uint64_t)"CFXMeshSourceIsVolatile(source)");
  sub_1B18F5B04(a1, a2, v4, v5, v6, v7, v8, v9);
}

BOOL sub_1B18472DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B18F59D8(a1, a2, a3, a4, a5, a6, a7, a8) != 0;
}

uint64_t sub_1B18472F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
  return *(unsigned __int8 *)(a1 + 98);
}

uint64_t sub_1B18476E0(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B184770C()
{
  uint64_t result;

  if (qword_1EEF65E00 != -1)
    dispatch_once_f(&qword_1EEF65E00, &qword_1EEF65DF8, (dispatch_function_t)sub_1B18476E0);
  result = sub_1B179CB90(qword_1EEF65DF8, 0xF0uLL);
  *(_DWORD *)(result + 232) = 3;
  return result;
}

void sub_1B1847764(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11;
  unsigned int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  v11 = *(_DWORD *)(a1 + 232);
  if (v11 == 2)
  {
    v12 = 48;
  }
  else
  {
    if (v11 != 3)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: unsupported SH order"), a3, a4, a5, a6, a7, a8, a9);
      return;
    }
    v12 = 112;
  }
  v13 = malloc_type_calloc((a2 + 4), v12, 0xDC1EB90AuLL);
  v20 = malloc_type_calloc((a2 + 4), 0x10uLL, 0x1000040451B5BE8uLL);
  if (*(_QWORD *)(a1 + 24))
  {
    if (!*(_DWORD *)(a1 + 36))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v14, v15, v16, v17, v18, v19, (uint64_t)"probesSystem->_probesCapacity");
    if (!*(_QWORD *)(a1 + 16))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v14, v15, v16, v17, v18, v19, (uint64_t)"probesSystem->_probesPositions");
    memcpy(v13, *(const void **)(a1 + 24), (*(_DWORD *)(a1 + 36) + 4) * v12);
    free(*(void **)(a1 + 24));
    memcpy(v20, *(const void **)(a1 + 16), 16 * (*(_DWORD *)(a1 + 36) + 4));
    free(*(void **)(a1 + 16));
  }
  *(_QWORD *)(a1 + 16) = v20;
  *(_QWORD *)(a1 + 24) = v13;
  *(_DWORD *)(a1 + 36) = a2;
}

void sub_1B18478B4(uint64_t a1)
{
  __int128 v1;
  __int128 v2;
  __int128 v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v17;
  float v33;
  float32x4_t v56;
  float v61;
  float32x4_t v68;
  unsigned int v70;
  float32x4_t v72;
  float32x4_t v74;
  float32x4_t v75;
  simd_float3x3 v76;
  simd_float3x3 v77;

  v7 = *(unsigned int *)(a1 + 224);
  if ((_DWORD)v7)
  {
    v8 = *(_QWORD *)(a1 + 16) + 64;
    v9 = *(_QWORD *)(a1 + 192);
    v10 = *(_QWORD *)(a1 + 64) + 32;
    v11 = (int *)(*(_QWORD *)(a1 + 48) + 8);
    do
    {
      v12 = v11[1];
      if ((_DWORD)v12 == 0x7FFFFFFF)
      {
        v13 = *(v11 - 2);
        v14 = *(v11 - 1);
        v15 = *v11;
        _Q3 = *(float32x4_t *)(v9 + 16 * v15);
        v17 = *(float32x4_t *)(v8 + 16 * v15);
        _Q7 = vsubq_f32(*(float32x4_t *)(v8 + 16 * v13), v17);
        _Q17 = vsubq_f32(*(float32x4_t *)(v9 + 16 * v13), _Q3);
        _Q16 = vsubq_f32(*(float32x4_t *)(v8 + 16 * v14), v17);
        _Q4 = vsubq_f32(*(float32x4_t *)(v9 + 16 * v14), _Q3);
        _S19 = _Q4.i32[2];
        _S20 = _Q4.i32[1];
        _Q22.f32[0] = vmuls_lane_f32(-_Q17.f32[2], *(float32x2_t *)_Q4.f32, 1);
        _S24 = vmuls_lane_f32(_Q4.f32[0], _Q17, 2);
        _S27 = vmuls_lane_f32(_Q17.f32[0], *(float32x2_t *)_Q4.f32, 1);
        __asm
        {
          FMLS            S26, S27, V3.S[2]
          FMLS            S26, S24, V3.S[1]
          FMLS            S26, S22, V3.S[0]
          FMLA            S22, S19, V17.S[1]
        }
        v33 = -_Q17.f32[0];
        __asm { FMLS            S24, S19, V17.S[0] }
        _Q22.i32[1] = _S24;
        _Q22.i32[2] = vmlas_n_f32((float)-_Q17.f32[1] * _Q4.f32[0], _Q4.f32[1], _Q17.f32[0]);
        _S24 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q4.f32, 1);
        __asm { FMLS            S30, S24, V3.S[2] }
        _S24 = _Q16.f32[1];
        _S31 = vmuls_lane_f32(_Q17.f32[0], *(float32x2_t *)_Q16.f32, 1);
        __asm { FMLS            S30, S31, V3.S[2] }
        _S23 = (float)-_Q17.f32[1] * _Q16.f32[0];
        __asm { FMLS            S30, S23, V3.S[2] }
        _S31 = vmuls_lane_f32(_Q4.f32[0], _Q7, 2);
        __asm { FMLS            S30, S31, V3.S[1] }
        _S31 = vmuls_lane_f32(-_Q7.f32[2], *(float32x2_t *)_Q4.f32, 1);
        __asm { FMLS            S30, S31, V3.S[0] }
        _S31 = vmuls_lane_f32(_Q16.f32[0], _Q17, 2);
        __asm { FMLS            S30, S31, V3.S[1] }
        _Q21.f32[0] = vmuls_lane_f32(-_Q17.f32[2], *(float32x2_t *)_Q16.f32, 1);
        __asm { FMLS            S30, S21, V3.S[0] }
        _Q21.f32[0] = vmuls_lane_f32(-_Q7.f32[0], _Q4, 2);
        __asm { FMLS            S30, S21, V3.S[1] }
        _Q21.f32[0] = vmuls_lane_f32(_Q4.f32[2], *(float32x2_t *)_Q7.f32, 1);
        __asm { FMLS            S30, S21, V3.S[0] }
        _S9 = _Q16.i32[2];
        _S10 = vmuls_lane_f32(-_Q17.f32[0], _Q16, 2);
        __asm { FMLS            S30, S10, V3.S[1] }
        _S11 = vmuls_lane_f32(_Q17.f32[1], _Q16, 2);
        __asm { FMLS            S30, S11, V3.S[0] }
        v56 = vmulq_f32(v17, _Q22);
        _Q22.f32[3] = _S30
                    - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0];
        __asm
        {
          FMLA            S21, S9, V17.S[1]
          FMLS            S21, S24, V17.S[2]
          FMLS            S21, S20, V7.S[2]
          FMLS            S10, S19, V7.S[0]
          FMLA            S10, S4, V7.S[2]
          FMLA            S10, S16, V17.S[2]
          FMLS            S29, S16, V17.S[1]
        }
        _Q21.i32[1] = _S10;
        _Q21.i32[2] = _S29;
        _Q17.f32[0] = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q16.f32, 1);
        v61 = (float)-_Q7.f32[1] * _Q16.f32[0];
        __asm { FMLS            S18, S17, V3.S[2] }
        _Q17.f32[0] = vmuls_lane_f32(-_Q7.f32[0], _Q16, 2);
        __asm { FMLS            S18, S17, V3.S[1] }
        _Q17.f32[0] = vmuls_lane_f32(_Q7.f32[1], _Q16, 2);
        __asm { FMLS            S18, S17, V3.S[0] }
        _S20 = vmuls_lane_f32(_Q16.f32[0], _Q7, 2);
        __asm { FMLS            S18, S20, V3.S[1] }
        _Q16.f32[0] = vmuls_lane_f32(-_Q7.f32[2], *(float32x2_t *)_Q16.f32, 1);
        __asm { FMLS            S18, S16, V3.S[0] }
        v68 = vmulq_f32(v17, _Q21);
        _Q21.f32[3] = _S18
                    - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0];
        __asm
        {
          FMLS            S17, S24, V7.S[2]
          FMLS            S20, S9, V7.S[0]
        }
        *(float *)&v70 = vmlas_n_f32(v61, _S24, _Q7.f32[0]);
        v72.i64[0] = __PAIR64__(_S20, _Q17.u32[0]);
        v72.i64[1] = v70;
        _Q5 = vmulq_f32(v17, v72);
        v72.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)_Q5, 2), vaddq_f32(_Q5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q5.f32, 1))).f32[0];
        _Q5.f32[0] = vmuls_lane_f32(_Q17.f32[1], _Q4, 2);
        __asm { FMLS            S26, S5, V3.S[0] }
        _Q4.f32[0] = vmuls_lane_f32(v33, _Q4, 2);
        __asm { FMLS            S26, S4, V3.S[1] }
        if (fabsf(*(float *)_D26.i32) > 0.0001)
        {
          v74 = (float32x4_t)vdupq_lane_s32(_D26, 0);
          _Q22 = vdivq_f32(_Q22, v74);
          _Q21 = vdivq_f32(_Q21, v74);
          v72 = vdivq_f32(v72, v74);
        }
        *(float32x4_t *)(v10 - 32) = _Q22;
        *(float32x4_t *)(v10 - 16) = _Q21;
        *(float32x4_t *)v10 = v72;
      }
      else
      {
        v75 = *(float32x4_t *)(v8 + 16 * v12);
        v76.columns[0] = (simd_float3)vsubq_f32(*(float32x4_t *)(v8 + 16 * *(v11 - 2)), v75);
        v76.columns[1] = (simd_float3)vsubq_f32(*(float32x4_t *)(v8 + 16 * *(v11 - 1)), v75);
        v76.columns[2] = (simd_float3)vsubq_f32(*(float32x4_t *)(v8 + 16 * *v11), v75);
        v76.columns[0].i32[3] = HIDWORD(v1);
        v76.columns[1].i32[3] = HIDWORD(v3);
        v76.columns[2].i32[3] = HIDWORD(v2);
        v77 = __invert_f3(v76);
        *(_OWORD *)(v10 - 16) = 0u;
        *(_OWORD *)v10 = 0u;
        v77.columns[0].i32[3] = 0;
        v77.columns[1].i32[3] = *(_DWORD *)(v10 - 4);
        *(simd_float3 *)(v10 - 32) = v77.columns[0];
        *(simd_float3 *)(v10 - 16) = v77.columns[1];
        v77.columns[2].i32[3] = *(_DWORD *)(v10 + 12);
        *(simd_float3 *)v10 = v77.columns[2];
      }
      v10 += 48;
      v11 += 12;
      --v7;
    }
    while (v7);
  }
}

void sub_1B1847BC4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  int v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL4 v51;
  _BOOL4 v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  unint64_t v58;
  unint64_t j;
  const void *v60;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  v64 = malloc_type_calloc(8uLL, (*(_DWORD *)(a1 + 32) + 4), 0x47021FF1uLL);
  if (a2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(a1 + 48);
    v62 = a2;
    v5 = v4 + 16;
    v6 = v64;
    do
    {
      v7 = 0;
      v8 = v4 + 48 * v3;
      v9 = &dword_1B2246B98;
      do
      {
        *(_DWORD *)(v5 + v7) = -1;
        v10 = *(_DWORD *)(v8 + 4 * *(v9 - 2));
        if (v10 >= *(_DWORD *)(v8 + 4 * *(v9 - 1)))
          v10 = *(_DWORD *)(v8 + 4 * *(v9 - 1));
        if (v10 >= *(_DWORD *)(v8 + 4 * *v9))
          v10 = *(_DWORD *)(v8 + 4 * *v9);
        v11 = v6[v10];
        if (!v11)
        {
          v12 = v10;
          v11 = sub_1B185BCB0();
          v64[v12] = v11;
          v6 = v64;
        }
        v9 += 3;
        sub_1B185CBE8(v11, v3);
        v7 += 4;
      }
      while (v7 != 16);
      ++v3;
      v5 += 48;
    }
    while (v3 != a2);
    for (i = 0; i != v62; ++i)
    {
      v20 = 0;
      v63 = v4 + 48 * i;
      do
      {
        v21 = v4 + 48 * i + 4 * v20;
        v23 = *(_DWORD *)(v21 + 16);
        v22 = (_DWORD *)(v21 + 16);
        if (v23 == -1)
        {
          v24 = &dword_1B2246B90[3 * v20];
          v25 = *(int *)(v63 + 4 * *v24);
          v26 = *(int *)(v63 + 4 * v24[1]);
          v27 = *(int *)(v63 + 4 * v24[2]);
          if (v25 >= v26)
            v28 = v26;
          else
            v28 = v25;
          if (v25 <= v26)
            v29 = v26;
          else
            v29 = v25;
          if (v28 >= v27)
            v30 = v27;
          else
            v30 = v28;
          if (v29 <= v27)
            v31 = v27;
          else
            v31 = v29;
          if (v30 != v26 && v31 != v26)
            v27 = v26;
          if (v30 == v25 || v31 == v25)
            v34 = v27;
          else
            v34 = v25;
          v35 = v64[v30];
          if (!v35)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _computeNeighbourIndexes - missing tetrahedron"), v13, v14, v15, v16, v17, v18, (uint64_t)"tetrahedronIndexes");
          v36 = sub_1B185BD00(v35);
          if (v36 != -1)
          {
            v37 = v36;
            v38 = -1;
            do
            {
              if (v37 == i)
              {
                v39 = -1;
              }
              else
              {
                v40 = 0;
                v41 = v4 + 48 * v37;
                v42 = &dword_1B2246B98;
                do
                {
                  v43 = *(int *)(v41 + 4 * *(v42 - 2));
                  v44 = *(int *)(v41 + 4 * *(v42 - 1));
                  v45 = *(int *)(v41 + 4 * *v42);
                  if (v43 >= v44)
                    v46 = *(int *)(v41 + 4 * *(v42 - 1));
                  else
                    v46 = *(int *)(v41 + 4 * *(v42 - 2));
                  if (v43 <= v44)
                    v47 = *(int *)(v41 + 4 * *(v42 - 1));
                  else
                    v47 = *(int *)(v41 + 4 * *(v42 - 2));
                  if (v46 >= v45)
                    v46 = *(int *)(v41 + 4 * *v42);
                  if (v47 <= v45)
                    v47 = *(int *)(v41 + 4 * *v42);
                  if (v46 == v44 || v47 == v44)
                    v44 = *(int *)(v41 + 4 * *v42);
                  if (v46 == v43 || v47 == v43)
                    v43 = v44;
                  v51 = v46 == v30 && v43 == v34;
                  v52 = v47 == v31;
                  if (v51 && v52)
                    v39 = v37;
                  else
                    v39 = -1;
                  if (v51 && v52)
                    v38 = v40;
                  v53 = v39 != -1 || v40++ >= 3;
                  v42 += 3;
                }
                while (!v53);
              }
              v54 = sub_1B185BD74(v35, v37);
              if (v39 != -1)
                break;
              v37 = v54;
            }
            while (v54 != -1);
            if (v39 != -1)
            {
              v55 = v4 + 48 * v39 + 4 * v38;
              v57 = *(_DWORD *)(v55 + 16);
              v56 = (_DWORD *)(v55 + 16);
              if (v57 != -1)
                sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. overwrite a neighbour index"), v13, v14, v15, v16, v17, v18, (uint64_t)"_tetrahedrons[tetraderonIndex].neighbourIndexes[otherTetraderonFaceIndex] == -1");
              *v22 = v39;
              *v56 = i;
            }
          }
        }
        ++v20;
      }
      while (v20 != 4);
    }
  }
  v58 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v58)
  {
    for (j = 0; j < v58; ++j)
    {
      v60 = (const void *)v64[j];
      if (v60)
      {
        CFRelease(v60);
        v64[j] = 0;
        v58 = *(unsigned int *)(a1 + 32);
      }
    }
  }
  free(v64);
}

void sub_1B1847EF8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (a2)
  {
    if (*(_DWORD *)(a1 + 36) < a2)
      sub_1B1847764(a1, a2, a3, a4, a5, a6, a7, a8, v10);
  }
  else
  {
    free(*(void **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    free(*(void **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    sub_1B1847F68((void **)a1);
    *(_DWORD *)(a1 + 36) = 0;
  }
  *(_DWORD *)(a1 + 32) = a2;
  *(_BYTE *)(a1 + 228) = 1;
}

void sub_1B1847F68(void **a1)
{
  free(a1[6]);
  a1[6] = 0;
  free(a1[8]);
  a1[8] = 0;
  free(a1[24]);
  a1[24] = 0;
}

void sub_1B1847FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFData *v19;
  const __CFData *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const UInt8 *BytePtr;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const UInt8 *v35;
  const UInt8 *v36;
  _OWORD *v37;
  uint64_t v38;
  uint64_t v39;
  float32x2_t v40;
  uint64_t v41;
  float32x2_t v42;
  __int128 v43;
  uint64_t v44;
  _OWORD *v45;
  __int128 v46;
  _OWORD *v47;
  __int128 v48;
  float32x2_t v49;
  __int128 v50;
  __n128 v51;
  _QWORD v52[3];
  __int128 v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v51.n128_u32[2] = 0;
  v10 = a2 + 4;
  v51.n128_u64[0] = 0;
  sub_1B186B5BC(a3, &v51, a3, a4, a5, a6, a7, a8);
  *(__n128 *)(*(_QWORD *)(a1 + 16) + 16 * v10) = v51;
  v11 = *(unsigned int *)(a1 + 232);
  v19 = (const __CFData *)sub_1B18613C0(a4, v12, v13, v14, v15, v16, v17, v18);
  if (v19)
  {
    v20 = v19;
    v21 = v11 * v11;
    if (12 * v11 * (unint64_t)v11 != CFDataGetLength(v19))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong data size for SH"), v22, v23, v24, v25, v26, v27, (uint64_t)"sh_sizeof(shOrder) == (size_t)CFDataGetLength(irradianceSH)");
    BytePtr = CFDataGetBytePtr(v20);
    v35 = &BytePtr[4 * v21];
    v52[0] = BytePtr;
    v52[1] = v35;
    v36 = &BytePtr[8 * v21];
    v52[2] = v36;
    if ((_DWORD)v11 == 3)
    {
      v38 = 0;
      v39 = *(_QWORD *)(a1 + 24);
      v40 = (float32x2_t)vdup_n_s32(0xBEA6C6BC);
      do
      {
        v41 = v52[v38];
        v42.i32[0] = *(_DWORD *)(v41 + 12);
        v42.i32[1] = *(_DWORD *)(v41 + 4);
        *(float32x2_t *)&v43 = vmul_f32(v42, v40);
        *((float *)&v43 + 2) = *(float *)(v41 + 8) * 0.32573;
        *((float *)&v43 + 3) = (float)(*(float *)(v41 + 24) * -0.078848) + (float)(*(float *)v41 * 0.28209);
        *(&v53 + v38++) = v43;
      }
      while (v38 != 3);
      v44 = 0;
      v45 = (_OWORD *)(v39 + 112 * v10);
      v46 = v54;
      *v45 = v53;
      v45[1] = v46;
      v45[2] = v55;
      do
      {
        *(&v53 + v44) = (__int128)vmulq_f32(*(float32x4_t *)(v52[v44] + 16), (float32x4_t)xmmword_1B2246B60);
        ++v44;
      }
      while (v44 != 3);
      v47 = (_OWORD *)(v39 + 112 * v10);
      v48 = v54;
      v47[3] = v53;
      v47[4] = v48;
      v47[5] = v55;
      v49.i32[0] = *((_DWORD *)BytePtr + 8);
      v49.i32[1] = *((_DWORD *)v35 + 8);
      *(float32x2_t *)&v50 = vmul_f32(v49, (float32x2_t)vdup_n_s32(0x3E0BD8A0u));
      *((_QWORD *)&v50 + 1) = __PAIR64__(1.0, *((float *)v36 + 8) * 0.13657);
      v47[6] = v50;
    }
    else if ((_DWORD)v11 == 2)
    {
      v37 = (_OWORD *)(*(_QWORD *)(a1 + 24) + 48 * v10);
      *v37 = *(_OWORD *)BytePtr;
      v37[1] = *(_OWORD *)v35;
      v37[2] = *(_OWORD *)v36;
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: SH order unsupported : %d"), v29, v30, v31, v32, v33, v34, v11);
    }
  }
}

void sub_1B18481FC(uint64_t a1, uint64_t a2)
{
  size_t v2;
  _QWORD *v3;
  _BYTE *v4;
  float32x4_t v5;
  _BYTE *v6;
  float32x4_t *v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  int32x2_t v13;
  uint64_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;
  uint64_t v33;
  float32x4_t *v34;
  float32x4_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t *v42;
  uint64_t v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  float32x4_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v62;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  _DWORD *v72;
  int v73;
  int v74;
  uint64_t v75;
  unsigned int v76;
  int v77;
  uint64_t v79;
  __int32 *v80;
  unsigned int v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  __int32 v85;
  float32x4_t *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  int v96;
  __int128 *v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD *f32;
  int v102;
  uint64_t v103;
  uint64_t v108;
  int *v109;
  float32x4_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  float32x4_t v114;
  uint64_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  uint64_t v128;
  int32x4_t v129;
  float32x4_t *v130;
  float32x4_t *v131;
  float32x4_t v132;
  float32x4_t v133;
  int32x2_t v134;
  unsigned int v135;
  float32x4_t *v136;
  float32x4_t v137;
  uint64_t v138;
  float32x4_t v139;
  uint64_t v140;
  float32x4_t *v142;
  uint64_t v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  float32x4_t *v151;
  _BYTE *v152;
  _QWORD *v153;
  float32x4_t *v154;
  uint64_t v155;
  uint64_t v156;
  _DWORD *v157;
  uint64_t v158;
  _DWORD *v159;

  *(_QWORD *)(a1 + 240) = a2;
  *(_QWORD *)(a1 + 248) = 0;
  if (!*(_BYTE *)(a1 + 228))
    return;
  *(_BYTE *)(a1 + 228) = 0;
  if (*(_DWORD *)(a1 + 32) <= 3u)
  {
    *(_DWORD *)(a1 + 224) = 0;
    return;
  }
  sub_1B1847F68((void **)a1);
  v2 = (100 * *(_DWORD *)(a1 + 32) + 400);
  *(_QWORD *)(a1 + 48) = malloc_type_valloc(16 * (v2 + 2 * v2), 0x1000040EED21634uLL);
  *(_QWORD *)(a1 + 64) = malloc_type_valloc(16 * (v2 + 2 * v2), 0x1000040EED21634uLL);
  v3 = malloc_type_calloc(8uLL, v2, 0xD31E8CEEuLL);
  v159 = malloc_type_calloc(0xCuLL, v2, 0xF3A354A8uLL);
  v149 = malloc_type_calloc(8uLL, v2, 0x84CFB5CAuLL);
  v146 = v2;
  v4 = malloc_type_calloc(v2, 1uLL, 0x100004077774924uLL);
  v6 = v4;
  v7 = *(float32x4_t **)(a1 + 48);
  v8 = *(unsigned int *)(a1 + 32);
  v150 = *(_QWORD *)(a1 + 16);
  v143 = v8;
  if ((_DWORD)v8)
  {
    v9 = (float32x4_t *)(*(_QWORD *)(a1 + 16) + 64);
    v10 = 0uLL;
    v11 = v9;
    do
    {
      v12 = *v11++;
      v13.i32[1] = v12.i32[1];
      v10 = vaddq_f32(v10, v12);
      --v8;
    }
    while (v8);
    v14 = v143;
    *(float *)v13.i32 = (float)v143;
    v5 = (float32x4_t)vdupq_lane_s32(v13, 0);
    v15 = vdivq_f32(v10, v5);
    v5.i32[0] = 0;
    do
    {
      v16 = *v9++;
      v17 = vsubq_f32(v15, v16);
      v18 = vmulq_f32(v17, v17);
      v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0];
      if (v5.f32[0] <= v19)
        v5.f32[0] = v19;
      --v14;
    }
    while (v14);
  }
  else
  {
    v15 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
    v5.i32[0] = 0;
  }
  v20 = 0;
  v5.f32[0] = (float)(sqrtf(v5.f32[0]) * 9.0) / 2.4495;
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 0);
  do
  {
    *(float32x4_t *)(v150 + v20 * 16) = vmlaq_f32(v15, v21, (float32x4_t)xmmword_1B2246BD0[v20]);
    ++v20;
  }
  while (v20 != 4);
  *v7 = (float32x4_t)xmmword_1B2240BB0;
  *v4 = 1;
  if (!sub_1B1849718(v7, v150))
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: _buildTetrahedrons - failed with first tetrahedron"), v22, v23, v24, v25, v26, v27, v140);
  v28 = v143;
  if (!(_DWORD)v143)
  {
    LODWORD(v30) = 1;
    goto LABEL_144;
  }
  v145 = 0;
  v142 = v7 + 2;
  v29 = 12;
  LODWORD(v30) = 1;
  v152 = v6;
  v153 = v3;
  v151 = v7;
  do
  {
    while (!(_DWORD)v30)
    {
      v87 = 0;
      if (++v145 == v28)
        goto LABEL_159;
    }
    v31 = 0;
    v147 = 0;
    v32 = *(float32x4_t *)(v150 + 16 * (v145 + 4));
    v144 = v30;
    v33 = v30;
    v34 = v142;
    do
    {
      v35 = vsubq_f32(v32, *v34);
      v36 = vmulq_f32(v35, v35);
      if (COERCE_FLOAT(HIDWORD(*(unsigned __int128 *)v34)) + 0.00001 >= vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).f32[0])
      {
        v3[v147] = v31;
        v6[v31] = 0;
        ++v147;
      }
      ++v31;
      v34 += 3;
    }
    while (v33 != v31);
    if (!v147)
    {
      LODWORD(v30) = v144;
      goto LABEL_140;
    }
    v37 = 0;
    v38 = 0;
    v39 = v147;
    do
    {
      v40 = 0;
      v148 = v37;
      v41 = v3[v37];
      v42 = &v7[3 * v41];
      v154 = v42;
      v155 = v41;
      do
      {
        v43 = 0;
        v44 = &dword_1B2246B90[3 * v40];
        v45 = v44[1];
        v46 = v42->i32[*v44];
        v47 = v42->i32[v45];
        v48 = v44[2];
        v49 = v42->i32[v48];
        if (v46 >= v47)
          v50 = v42->i32[v45];
        else
          v50 = v46;
        if (v46 <= v47)
          v51 = v42->i32[v45];
        else
          v51 = v46;
        if (v50 >= v49)
          v50 = v42->i32[v48];
        if (v51 <= v49)
          v51 = v42->i32[v48];
        if (v50 == v47 || v51 == v47)
          v47 = v42->i32[v48];
        if (v50 != v46 && v51 != v46)
          v47 = v46;
        v54 = 1;
        while (1)
        {
          v55 = v3[v43];
          if (v55 != v41)
            break;
LABEL_79:
          v54 = ++v43 < v39;
          if (v43 == v39)
            goto LABEL_82;
        }
        v56 = 0;
        v57 = &v7[3 * v55];
        while (1)
        {
          v58 = v57->i32[dword_1B2246B90[v56]];
          v22 = v57->i32[dword_1B2246B90[v56 + 1]];
          v59 = v57->i32[dword_1B2246B90[v56 + 2]];
          if (v58 >= v22)
            v23 = v57->i32[dword_1B2246B90[v56 + 1]];
          else
            v23 = v57->i32[dword_1B2246B90[v56]];
          if (v58 <= v22)
            v24 = v57->i32[dword_1B2246B90[v56 + 1]];
          else
            v24 = v57->i32[dword_1B2246B90[v56]];
          if (v23 >= v59)
            v23 = v57->i32[dword_1B2246B90[v56 + 2]];
          if (v24 <= v59)
            v24 = v57->i32[dword_1B2246B90[v56 + 2]];
          if (v23 != v22 && v24 != v22)
            v59 = v57->i32[dword_1B2246B90[v56 + 1]];
          if (v23 != v58 && v24 != v58)
            v59 = v57->i32[dword_1B2246B90[v56]];
          v62 = v23 == v50 && v59 == v47;
          if (v62 && v24 == v51)
            break;
          v56 += 3;
          if (v56 == 12)
            goto LABEL_79;
        }
        if (!v54)
        {
LABEL_82:
          v156 = v40;
          v64 = 0;
          v65 = v38;
          v66 = &v159[3 * v38];
          *v66 = v46;
          v66[1] = v42->i32[v45];
          v157 = v66;
          v66[2] = v42->i32[v48];
          do
          {
            v67 = v64;
            if (v64 == 3)
              break;
            ++v64;
            v68 = v67 == 2 ? 0 : v67 + 1;
            v69 = v38;
            if ((_DWORD)v38)
            {
              v70 = 0;
              v71 = 0;
              v72 = v159;
              v73 = v157[v67];
              v74 = v157[v68];
              do
              {
                v75 = 0;
                v76 = 0;
                do
                {
                  v77 = v72[v75];
                  if (v77 == v73 || v77 == v74)
                    ++v76;
                  ++v75;
                }
                while (v75 != 3);
                if (v76 >= 3)
                  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _faceHasEdgeSharedWithMoreThanTwoOtherOpenFace"), v22, v23, v24, v29, v38, v39, (uint64_t)"vCount <=2");
                if (v76 == 2)
                  ++v71;
                ++v70;
                v72 += 3;
              }
              while (v70 != v65);
            }
            else
            {
              v71 = 0;
            }
            v38 = v69;
          }
          while (v71 < 2);
          if (v67 <= 2)
            v38 = v38;
          else
            v38 = (v38 + 1);
          v6 = v152;
          v3 = v153;
          v7 = v151;
          v29 = 12;
          v39 = v147;
          v42 = v154;
          v41 = v155;
          v40 = v156;
        }
        ++v40;
      }
      while (v40 != 4);
      v149[v148] = v41;
      v37 = v148 + 1;
    }
    while (v148 + 1 != v39);
    if (!(_DWORD)v38)
    {
      LODWORD(v30) = v144;
      v81 = v147;
LABEL_127:
      v88 = 0;
      v89 = v81;
      v90 = v30 - 1;
      v158 = v81;
      do
      {
        v91 = v149[v88];
        v92 = v90;
        do
        {
          v93 = v92;
          v94 = v6[v92--];
          if (v94)
            v95 = 0;
          else
            v95 = v91 < v93;
        }
        while (v95);
        LODWORD(v30) = v30 - 1;
        if (v91 >= v93)
        {
          if (v30 > v91)
          {
            v102 = v30;
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. validTetraCount > indexToRecycle"), v22, v23, v24, v29, v38, v39, (uint64_t)"validTetraCount <= (uint32_t)indexToRecycle");
            LODWORD(v30) = v102;
          }
        }
        else
        {
          if (!v94)
          {
            v96 = v30;
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. will make an invalid tetrahedron valid"), v22, v23, v24, v29, v38, v39, (uint64_t)"tetrahedronIsValid[indexValid]");
            LODWORD(v30) = v96;
            v89 = v158;
          }
          v97 = (__int128 *)&v7[3 * (int)v93];
          v98 = *v97;
          v99 = v97[1];
          v100 = v97[2];
          f32 = (_OWORD *)v7[3 * v91].f32;
          f32[1] = v99;
          f32[2] = v100;
          *f32 = v98;
          v6[v91] = 1;
          v6[v93] = 0;
        }
        ++v88;
        --v90;
      }
      while (v88 != v89);
      goto LABEL_140;
    }
    v79 = v38;
    v80 = v159 + 2;
    v30 = v144;
    v81 = v147;
    do
    {
      if (v81)
      {
        v82 = v30;
        v83 = v81 - 1;
        v84 = v149[v81 - 1];
      }
      else
      {
        v82 = (v30 + 1);
        v84 = v30;
        if (v30 >= v146)
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: tetrahedrisation: index out of bounds"), v22, v23, v24, v29, v38, v39, v140);
        v83 = 0;
      }
      v6[v84] = 1;
      v85 = *v80;
      v86 = &v7[3 * v84];
      v86->i64[0] = *((_QWORD *)v80 - 1);
      v86->i32[2] = v85;
      v86->i32[3] = v145 + 4;
      if (sub_1B1849718(v86, v150))
      {
        v30 = v82;
        v81 = v83;
      }
      else
      {
        v6[v84] = 0;
        v149[v83] = v84;
        v81 = v83 + 1;
        v30 = v82;
      }
      v80 += 3;
      --v79;
    }
    while (v79);
    if (v81)
      goto LABEL_127;
LABEL_140:
    v28 = v143;
    ++v145;
    v29 = 12;
  }
  while (v145 != v143);
  if (!(_DWORD)v30)
  {
    v87 = 0;
    goto LABEL_159;
  }
LABEL_144:
  v103 = 0;
  __asm { FMOV            V0.4S, #0.25 }
  do
  {
    v108 = 0;
    v109 = (int *)&v7[3 * v103];
    v110 = vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v150 + 16 * *v109), *(float32x4_t *)(v150 + 16 * v109[1])), *(float32x4_t *)(v150 + 16 * v109[2])), *(float32x4_t *)(v150 + 16 * v109[3])), _Q0);
    do
    {
      v111 = dword_1B2246B90[v108];
      v112 = dword_1B2246B90[v108 + 1];
      v113 = v109[v111];
      v114 = *(float32x4_t *)(v150 + 16 * v113);
      v115 = v109[v112];
      v116 = vsubq_f32(*(float32x4_t *)(v150 + 16 * v115), v114);
      v117 = vsubq_f32(*(float32x4_t *)(v150 + 16 * v109[dword_1B2246B90[v108 + 2]]), v114);
      v118 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), (int8x16_t)v117, 0xCuLL), vnegq_f32(v116)), v117, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), (int8x16_t)v116, 0xCuLL));
      v119 = vmulq_f32(v118, v118);
      v119.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v119.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v119, 2), v119)).u64[0];
      v120 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v119.f32, 0);
      v120.i32[3] = 0;
      v121 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL);
      v122 = vrsqrteq_f32(v120);
      v123 = vmulq_f32(v122, vrsqrtsq_f32(v120, vmulq_f32(v122, v122)));
      v124 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v119.f32[0] != 0.0)), 0x1FuLL));
      v124.i32[3] = 0;
      v125 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v124), (int8x16_t)vmulq_f32(v121, vmulq_f32(v123, vrsqrtsq_f32(v120, vmulq_f32(v123, v123)))), (int8x16_t)v121);
      v126 = vmulq_f32(v114, v125);
      v127 = vmulq_f32(v110, v125);
      if (vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1)))).f32[0] > 0.0)
      {
        v109[v111] = v115;
        v109[v112] = v113;
      }
      v108 += 3;
    }
    while (v108 != 12);
    ++v103;
  }
  while (v103 != v30);
  v128 = 0;
  v87 = 0;
  v129.i64[0] = 0x300000003;
  v129.i64[1] = 0x300000003;
  v130 = v7;
  do
  {
    if (v130->i32[0] >= 4 && v130->i32[1] >= 4 && v130->i32[2] >= 4 && v130->i32[3] >= 4)
    {
      if (v128 != v87)
      {
        v131 = &v7[3 * v87];
        v132 = *v130;
        v133 = v130[2];
        v131[1] = v130[1];
        v131[2] = v133;
        *v131 = v132;
      }
      v7[3 * v87] = (float32x4_t)vaddq_s32((int32x4_t)v7[3 * v87], v129);
      ++v87;
    }
    ++v128;
    v130 += 3;
  }
  while (v30 != v128);
LABEL_159:
  *(_DWORD *)(a1 + 224) = v87;
  sub_1B1847BC4(a1, v87);
  sub_1B18478B4(a1);
  v135 = *(_DWORD *)(a1 + 224);
  if (v135)
  {
    v136 = (float32x4_t *)(*(_QWORD *)(a1 + 48) + 32);
    v137 = 0uLL;
    v138 = *(unsigned int *)(a1 + 224);
    do
    {
      v139 = *v136;
      v136 += 3;
      v134.i32[1] = v139.i32[1];
      v137 = vaddq_f32(v137, v139);
      --v138;
    }
    while (v138);
  }
  else
  {
    v137 = 0uLL;
  }
  *(float *)v134.i32 = (float)v135;
  *(float32x4_t *)(a1 + 208) = vdivq_f32(v137, (float32x4_t)vdupq_lane_s32(v134, 0));
  free(v3);
  free(v159);
  free(v149);
  free(v6);
}

uint64_t sub_1B1848B84(uint64_t result)
{
  *(_QWORD *)(result + 240) = 0;
  return result;
}

void sub_1B1848B8C(float a1, float a2, float a3)
{
  float v3;
  float v4;
  float v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;

  v3 = (float)((float)((float)(a3 * -27.0) + (float)((float)(a1 * 9.0) * a2))
             + (float)((float)((float)(a1 * -2.0) * a1) * a1))
     / 54.0;
  v4 = (float)((float)((float)(a2 * 3.0) - (float)(a1 * a1)) / 9.0)
     * (float)((float)((float)((float)(a2 * 3.0) - (float)(a1 * a1)) / 9.0)
             * (float)((float)((float)(a2 * 3.0) - (float)(a1 * a1)) / 9.0));
  v5 = v4 + (float)(v3 * v3);
  if (v5 >= 0.0)
  {
    v10 = sqrtf(v5);
    cbrtf(v3 + v10);
    cbrtf(v3 - v10);
  }
  else
  {
    v6 = acosf(v3 / sqrtf(-v4));
    cosf(v6 / 3.0);
    v7 = v6;
    v8 = (v7 + 6.28318531) / 3.0;
    cosf(v8);
    v9 = (v7 + 12.5663706) / 3.0;
    cosf(v9);
  }
}

__n64 sub_1B1848CB4(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  float32x4_t v12;
  float v13;
  __n64 result;

  v4 = vsubq_f32(a2, a1);
  v5 = vsubq_f32(a3, a1);
  v6 = vsubq_f32(a4, a1);
  v7 = vmulq_f32(v4, v4);
  v7.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  v8 = vmulq_f32(v4, v5);
  v9 = vmulq_f32(v5, v5);
  v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
  LODWORD(v10) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
  v11 = vmulq_f32(v4, v6);
  v11.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0];
  v12 = vmulq_f32(v5, v6);
  v12.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0];
  v5.f32[0] = -v8.f32[0];
  v8.f32[0] = vmlas_n_f32((float)-v8.f32[0] * v8.f32[0], v10, v7.f32[0]);
  v13 = vmlas_n_f32(v5.f32[0] * v12.f32[0], v11.f32[0], v10) / v8.f32[0];
  result.n64_f32[0] = (float)(1.0 - v13)
                    - (float)(vmlas_n_f32(v5.f32[0] * v11.f32[0], v12.f32[0], v7.f32[0]) / v8.f32[0]);
  result.n64_f32[1] = v13;
  return result;
}

BOOL sub_1B1848D60(uint64_t a1, unsigned int *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9, float a10)
{
  unsigned int v10;
  float32x4_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  float v32;
  uint64_t v33;
  unsigned int v34;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  float32x4_t v46;

  v10 = *(_DWORD *)(a1 + 224);
  if (!v10)
    return 0;
  v12 = (float32x4_t)a9;
  v13 = *(_QWORD *)(a1 + 16) + 64;
  v14 = *(_QWORD *)(a1 + 48);
  v43 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 192);
  v38 = (float32x4_t)vdupq_laneq_s32(a9, 2);
  v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.i8, 1);
  if (*a2 >= v10)
    v16 = 0;
  else
    v16 = *a2;
  v44 = (float32x4_t)vdupq_n_s32(0xB8D1B717);
  while (1)
  {
    v17 = (int *)(v14 + 48 * v16);
    v18 = v17[3];
    if ((_DWORD)v18 == 0x7FFFFFFF)
    {
      v20 = *v17;
      v19 = v17[1];
      v21 = *(float32x4_t *)(v13 + 16 * v20);
      v22 = v17[2];
      v23 = vsubq_f32(*(float32x4_t *)(v13 + 16 * v19), v21);
      v24 = vsubq_f32(*(float32x4_t *)(v13 + 16 * v22), v21);
      v25 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL), vnegq_f32(v23)), v24, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL));
      v26 = vmulq_f32(vsubq_f32(v12, v21), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL));
      v27 = (float32x4_t)xmmword_1B22463E0;
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0] >= 0.0)
      {
        v28 = vmlaq_f32(vmlaq_f32(vmulq_n_f32(*(float32x4_t *)(v43 + 48 * v16), v12.f32[0]), v39, *(float32x4_t *)(v43 + 48 * v16 + 16)), v38, *(float32x4_t *)(v43 + 48 * v16 + 32));
        v40 = *(float32x4_t *)(v13 + 16 * v20);
        v41 = *(float32x4_t *)(v13 + 16 * v19);
        v42 = *(float32x4_t *)(v13 + 16 * v22);
        sub_1B1848B8C(v28.f32[0], v28.f32[1], v28.f32[2]);
        *(__n64 *)v30.f32 = sub_1B1848CB4(vmlaq_n_f32(v40, *(float32x4_t *)(v15 + 16 * v20), v29), vmlaq_n_f32(v41, *(float32x4_t *)(v15 + 16 * v19), v29), vmlaq_n_f32(v42, *(float32x4_t *)(v15 + 16 * v22), v29), (float32x4_t)a9);
        v12 = (float32x4_t)a9;
        v27 = v30;
        v27.i32[3] = 0;
      }
    }
    else
    {
      *(double *)v31.i64 = sub_1B1849008(*(float32x4_t *)(v43 + 48 * v16), *(float32x4_t *)(v43 + 48 * v16 + 16), *(float32x4_t *)(v43 + 48 * v16 + 32), *(float32x4_t *)(v13 + 16 * v18), v12);
      v12 = (float32x4_t)a9;
      v27 = v31;
    }
    if ((vminvq_u32((uint32x4_t)vcgtq_f32(v27, v44)) & 0x80000000) != 0)
    {
      *a3 = v27;
      *a2 = v16;
      return *(float *)(v14 + 48 * v16 + 44) >= a10;
    }
    v32 = v27.f32[1];
    v33 = v27.f32[1] < v27.f32[0];
    if (v27.f32[1] >= v27.f32[0])
      v32 = v27.f32[0];
    if (v27.f32[2] < v32)
    {
      v32 = v27.f32[2];
      v33 = 2;
    }
    if (v27.f32[3] < v32)
      v33 = 3;
    v34 = *(_DWORD *)(v14 + 48 * v16 + 4 * dword_1B2246BC0[v33] + 16);
    if (v34 == -1)
      break;
    v16 = v34;
    if (!--v10)
      return 0;
  }
  if (v16 == -1)
  {
    v46 = v27;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Should never have been outside the tetras"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"lastIndex != (uint32_t)-1");
    v27 = v46;
  }
  *a3 = v27;
  *a2 = v16;
  return 1;
}

double sub_1B1849008(float32x4_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5;
  double result;

  v5 = vsubq_f32(a5, a4);
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1, v5.f32[0]), a2, *(float32x2_t *)v5.f32, 1), a3, v5, 2).u64[0];
  return result;
}

void sub_1B1849038(_QWORD *a1, unsigned int a2, float32x4_t a3, float a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v29;

  v11 = a1[2] + 64;
  v12 = (int *)(a1[6] + 48 * a2);
  v29 = xmmword_1B2246B70;
  *((float *)&v29 + 2) = 0.25098 * a4;
  sub_1B17FA4D4(a1[31], 0, (float *)&v29, a6, a7, a8, a9, a10, *(float32x4_t *)(v11 + 16 * *v12), a3);
  sub_1B17FA4D4(a1[31], 0, (float *)&v29, v13, v14, v15, v16, v17, *(float32x4_t *)(v11 + 16 * v12[1]), a3);
  sub_1B17FA4D4(a1[31], 0, (float *)&v29, v18, v19, v20, v21, v22, *(float32x4_t *)(v11 + 16 * v12[2]), a3);
  sub_1B17FA4D4(a1[31], 0, (float *)&v29, v23, v24, v25, v26, v27, *(float32x4_t *)(v11 + 16 * v12[3]), a3);
}

float32x4_t sub_1B184910C(uint64_t a1, unsigned int *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  _BOOL4 v12;
  int *v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t result;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t *v28;
  uint64_t v29;
  float32x4_t v30;
  int32x4_t v31;
  __n128 v32;

  if (!a2)
  {
    v31 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"cacheIndex");
    a9 = v31;
  }
  v32 = 0uLL;
  v12 = sub_1B1848D60(a1, a2, (float32x4_t *)&v32, a4, a5, a6, a7, a8, a9, 0.0);
  v13 = (int *)(*(_QWORD *)(a1 + 48) + 48 * *a2);
  v14 = *(_QWORD *)(a1 + 24) + 192;
  if (v12)
  {
    v15 = (float32x4_t *)(v14 + 48 * *v13);
    result = (float32x4_t)v32;
    v17 = vmulq_n_f32(*v15, v32.n128_f32[0]);
    *a3 = v17;
    v18 = vmulq_n_f32(v15[1], result.f32[0]);
    a3[1] = v18;
    v19 = vmulq_n_f32(v15[2], result.f32[0]);
    a3[2] = v19;
    v20 = (float32x4_t *)(v14 + 48 * v13[1]);
    v21 = vmlaq_lane_f32(v17, *v20, *(float32x2_t *)result.f32, 1);
    *a3 = v21;
    v22 = vmlaq_lane_f32(v18, v20[1], *(float32x2_t *)result.f32, 1);
    a3[1] = v22;
    v23 = vmlaq_lane_f32(v19, v20[2], *(float32x2_t *)result.f32, 1);
    a3[2] = v23;
    v24 = (float32x4_t *)(v14 + 48 * v13[2]);
    v25 = vmlaq_laneq_f32(v21, *v24, result, 2);
    *a3 = v25;
    v26 = vmlaq_laneq_f32(v22, v24[1], result, 2);
    a3[1] = v26;
    v27 = vmlaq_laneq_f32(v23, v24[2], result, 2);
    a3[2] = v27;
    v28 = (float32x4_t *)(v14 + 48 * v13[3]);
    *a3 = vmlaq_laneq_f32(v25, *v28, result, 3);
    a3[1] = vmlaq_laneq_f32(v26, v28[1], result, 3);
    a3[2] = vmlaq_laneq_f32(v27, v28[2], result, 3);
  }
  else
  {
    v29 = v14 + 48 * *v13;
    result = *(float32x4_t *)v29;
    v30 = *(float32x4_t *)(v29 + 32);
    a3[1] = *(float32x4_t *)(v29 + 16);
    a3[2] = v30;
    *a3 = result;
  }
  return result;
}

float32x4_t sub_1B1849274(_QWORD *a1, unsigned int *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int32x4_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int *v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t *v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t *v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t result;
  int v46;
  float32x4_t *v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;

  v53 = a9;
  if (!a2)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"cacheIndex");
    a9 = v53;
  }
  v55 = 0uLL;
  if (sub_1B1848D60((uint64_t)a1, a2, &v55, a4, a5, a6, a7, a8, a9, 0.0))
  {
    v18 = (float32x4_t)v53;
    v19 = v55;
    if (a1[31])
    {
      v54 = v55;
      sub_1B1849038(a1, *a2, v18, v55.f32[0], v12, v13, v14, v15, v16, v17);
      v19 = v54;
    }
    v20 = (int *)(a1[6] + 48 * *a2);
    v21 = a1[3] + 448;
    v22 = (float32x4_t *)(v21 + 112 * *v20);
    v23 = vmulq_n_f32(*v22, v19.f32[0]);
    *a3 = v23;
    v24 = vmulq_n_f32(v22[1], v19.f32[0]);
    a3[1] = v24;
    v25 = vmulq_n_f32(v22[2], v19.f32[0]);
    a3[2] = v25;
    v26 = vmulq_n_f32(v22[3], v19.f32[0]);
    a3[3] = v26;
    v27 = vmulq_n_f32(v22[4], v19.f32[0]);
    a3[4] = v27;
    v28 = vmulq_n_f32(v22[5], v19.f32[0]);
    a3[5] = v28;
    v29 = vmulq_n_f32(v22[6], v19.f32[0]);
    a3[6] = v29;
    v30 = (float32x4_t *)(v21 + 112 * v20[1]);
    v31 = vmlaq_lane_f32(v23, *v30, *(float32x2_t *)v19.f32, 1);
    *a3 = v31;
    v32 = vmlaq_lane_f32(v24, v30[1], *(float32x2_t *)v19.f32, 1);
    a3[1] = v32;
    v33 = vmlaq_lane_f32(v25, v30[2], *(float32x2_t *)v19.f32, 1);
    a3[2] = v33;
    v34 = vmlaq_lane_f32(v26, v30[3], *(float32x2_t *)v19.f32, 1);
    a3[3] = v34;
    v35 = vmlaq_lane_f32(v27, v30[4], *(float32x2_t *)v19.f32, 1);
    a3[4] = v35;
    v36 = vmlaq_lane_f32(v28, v30[5], *(float32x2_t *)v19.f32, 1);
    a3[5] = v36;
    v37 = vmlaq_lane_f32(v29, v30[6], *(float32x2_t *)v19.f32, 1);
    a3[6] = v37;
    v38 = (float32x4_t *)(v21 + 112 * v20[2]);
    v39 = vmlaq_laneq_f32(v31, *v38, v19, 2);
    *a3 = v39;
    v40 = vmlaq_laneq_f32(v32, v38[1], v19, 2);
    a3[1] = v40;
    v41 = vmlaq_laneq_f32(v33, v38[2], v19, 2);
    a3[2] = v41;
    v42 = vmlaq_laneq_f32(v34, v38[3], v19, 2);
    a3[3] = v42;
    v43 = vmlaq_laneq_f32(v35, v38[4], v19, 2);
    a3[4] = v43;
    v44 = vmlaq_laneq_f32(v36, v38[5], v19, 2);
    a3[5] = v44;
    result = vmlaq_laneq_f32(v37, v38[6], v19, 2);
    a3[6] = result;
    v46 = v20[3];
    if (v46 <= 2147483645)
    {
      v47 = (float32x4_t *)(v21 + 112 * v46);
      *a3 = vmlaq_laneq_f32(v39, *v47, v19, 3);
      a3[1] = vmlaq_laneq_f32(v40, v47[1], v19, 3);
      a3[2] = vmlaq_laneq_f32(v41, v47[2], v19, 3);
      a3[3] = vmlaq_laneq_f32(v42, v47[3], v19, 3);
      a3[4] = vmlaq_laneq_f32(v43, v47[4], v19, 3);
      a3[5] = vmlaq_laneq_f32(v44, v47[5], v19, 3);
      result = vmlaq_laneq_f32(result, v47[6], v19, 3);
      a3[6] = result;
    }
  }
  else
  {
    v48 = (float32x4_t *)a1[3];
    v49 = v48[28];
    v50 = v48[30];
    a3[1] = v48[29];
    a3[2] = v50;
    *a3 = v49;
    result = v48[31];
    v51 = v48[32];
    v52 = v48[34];
    a3[5] = v48[33];
    a3[6] = v52;
    a3[3] = result;
    a3[4] = v51;
  }
  return result;
}

__n128 sub_1B18494D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 result)
{
  uint64_t v11;
  float32x2_t v12;
  uint64_t v13;
  float32x2_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  float32x2_t v19;
  _QWORD v20[3];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 232) == 3)
  {
    if (a3 != 108)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong data size for SH"), a3, a4, a5, a6, a7, a8, (uint64_t)"sh_sizeof(shOrder) == (size_t)shLength");
    v11 = 0;
    v20[0] = a2;
    v20[1] = a2 + 36;
    v20[2] = a2 + 72;
    v12 = (float32x2_t)vdup_n_s32(0xBEA6C6BC);
    do
    {
      v13 = v20[v11];
      v14.i32[0] = *(_DWORD *)(v13 + 12);
      v14.i32[1] = *(_DWORD *)(v13 + 4);
      *(float32x2_t *)&v15 = vmul_f32(v14, v12);
      *((float *)&v15 + 2) = *(float *)(v13 + 8) * 0.32573;
      *((float *)&v15 + 3) = (float)(*(float *)(v13 + 24) * -0.078848) + (float)(*(float *)v13 * 0.28209);
      *(&v21 + v11++) = v15;
    }
    while (v11 != 3);
    v16 = 0;
    v17 = v22;
    *(_OWORD *)(a1 + 80) = v21;
    *(_OWORD *)(a1 + 96) = v17;
    *(_OWORD *)(a1 + 112) = v23;
    do
    {
      *(&v21 + v16) = (__int128)vmulq_f32(*(float32x4_t *)(v20[v16] + 16), (float32x4_t)xmmword_1B2246B60);
      ++v16;
    }
    while (v16 != 3);
    v18 = v22;
    *(_OWORD *)(a1 + 128) = v21;
    *(_OWORD *)(a1 + 144) = v18;
    *(_OWORD *)(a1 + 160) = v23;
    v19.i32[0] = *(_DWORD *)(a2 + 32);
    v19.i32[1] = *(_DWORD *)(a2 + 68);
    result.n128_u64[0] = (unint64_t)vmul_f32(v19, (float32x2_t)vdup_n_s32(0x3E0BD8A0u));
    result.n128_f32[2] = *(float *)(a2 + 104) * 0.13657;
    result.n128_u32[3] = 1.0;
    *(__n128 *)(a1 + 176) = result;
  }
  return result;
}

uint64_t sub_1B1849664(uint64_t a1)
{
  return *(unsigned int *)(a1 + 232);
}

void sub_1B1849670(void **a1)
{
  free(a1[3]);
  free(a1[2]);
  sub_1B1847F68(a1);
}

CFStringRef sub_1B18496A0(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXLightProbesSystem %p>"), a1);
}

CFStringRef sub_1B18496DC(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXLightProbesSystem %p>"), a1);
}

BOOL sub_1B1849718(float32x4_t *a1, uint64_t a2)
{
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  double v7;
  int8x16_t v8;
  double v9;
  int8x16_t v10;
  float32x2_t v12;
  float64x2_t v14;
  float64x2_t v15;
  float64x2_t v17;
  float64x2_t v18;
  double v25;
  float64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  float64x2_t v32;
  float32_t v33;
  float32x4_t v34;
  float32x4_t v36;
  float32x4_t v37;

  v2 = *(float32x4_t *)(a2 + 16 * a1->i32[0]);
  v3 = *(float32x4_t *)(a2 + 16 * a1->i32[1]);
  v4 = *(float32x4_t *)(a2 + 16 * a1->i32[2]);
  v5 = *(float32x4_t *)(a2 + 16 * a1->i32[3]);
  v6 = (int8x16_t)vsubq_f32(v3, v2);
  v7 = *(float *)v6.i32;
  v8 = (int8x16_t)vsubq_f32(v4, v2);
  v9 = *(float *)&v8.i32[1];
  v10 = (int8x16_t)vsubq_f32(v5, v2);
  _D20 = *(float *)&v10.i32[1];
  v12.i32[0] = vextq_s8(v8, v8, 8uLL).u32[0];
  v12.i32[1] = v8.i32[0];
  v8.i32[0] = vextq_s8(v10, v10, 8uLL).u32[0];
  v8.i32[1] = v10.i32[0];
  _Q5 = vcvtq_f64_f32((float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 4uLL));
  v14 = vcvtq_f64_f32(*(float32x2_t *)v8.i8);
  v15 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14.f64[0], 0);
  v15.f64[0] = _D20;
  _Q17 = vcvtq_f64_f32(v12);
  v17 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q17.f64[0], 0);
  v17.f64[0] = v9;
  v18 = vmlaq_f64(vmulq_f64(_Q17, vnegq_f64(v15)), v14, v17);
  __asm
  {
    FMLA            D22, D20, V17.D[1]
    FMLA            D23, D22, V5.D[1]
  }
  v25 = fabs(_D23);
  if (v25 < 0.00001)
  {
    __asm { FMOV            V4.4S, #0.25 }
    v34 = vsubq_f32(vmulq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v2, v3), v4), v5), _Q4), v2);
  }
  else
  {
    v26 = -_Q17.f64[1] * _Q5.f64[0] + v7 * v9;
    v27 = vmlad_n_f64(-(v7 * _D20), v14.f64[1], _Q5.f64[0]);
    v28 = vmlad_n_f64(_D20 * _D20 + v14.f64[1] * v14.f64[1], v14.f64[0], v14.f64[0]);
    v29 = vmlad_n_f64(v9 * v9 + _Q17.f64[1] * _Q17.f64[1], _Q17.f64[0], _Q17.f64[0]);
    v30 = vmulq_f64(_Q5, _Q5).f64[0] + v7 * v7 + _Q5.f64[1] * _Q5.f64[1];
    v31 = (v29 * v27 + v30 * _D22 + v28 * v26) * (0.5 / _D23);
    *(_QWORD *)&v32.f64[0] = vdupq_laneq_s64((int64x2_t)_Q5, 1).u64[0];
    v32.f64[1] = v7;
    v34 = (float32x4_t)vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_f64(vmulq_f64(vnegq_f64(_Q5), v14), v32, v15), v29), v18, v30), vmlaq_f64(vmulq_f64(v32, vnegq_f64(v17)), _Q17, _Q5), v28), 0.5 / _D23);
    *(float32x2_t *)v34.f32 = vcvt_f32_f64((float64x2_t)v34);
    v33 = v31;
    v34.f32[2] = v33;
  }
  v36 = vaddq_f32(v2, v34);
  v37 = vmulq_f32(v34, v34);
  v36.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u32[0];
  a1[2] = v36;
  return v25 >= 0.00001;
}

uint64_t sub_1B1849898(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

_QWORD *sub_1B18498C4(uint64_t a1, CFIndex a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  _QWORD *v67;
  _QWORD *v68;

  if (qword_1EEF65E10 != -1)
    dispatch_once_f(&qword_1EEF65E10, &qword_1EEF65E08, (dispatch_function_t)sub_1B1849898);
  v10 = (_QWORD *)sub_1B179CB90(qword_1EEF65E08, 0x18uLL);
  if (!v10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v4, v5, v6, v7, v8, v9, (uint64_t)"edges");
  v10[2] = 0;
  v10[3] = 0;
  v11 = sub_1B1874C3C(a1, a2, 1, v5, v6, v7, v8, v9);
  v12 = sub_1B17A47FC((uint64_t)v11);
  v19 = sub_1B1875E70(a1, 1, v13, v14, v15, v16, v17, v18);
  v27 = sub_1B17EDAE0((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26);
  v28 = (uint64_t)(float)(v27 * v27);
  v33 = malloc_type_calloc(1uLL, v28, 0x90787BC3uLL);
  if (v12 < 1)
  {
    v10[3] = 0;
  }
  else
  {
    v67 = v10 + 2;
    v68 = v10;
    v34 = 0;
    v35 = 0;
    do
    {
      v36 = sub_1B17A4A74((uint64_t)v11, v34, 0, 0, v29, v30, v31, v32);
      v41 = sub_1B17A4A74((uint64_t)v11, v34, 1, 0, v37, v38, v39, v40);
      v46 = sub_1B17A4A74((uint64_t)v11, v34, 2, 0, v42, v43, v44, v45);
      if (v36 >= v41)
        v47 = v41;
      else
        v47 = v36;
      if (v36 <= v41)
        v48 = v41;
      else
        v48 = v36;
      v49 = v48 + v47 * v27;
      if (!v33[v49])
      {
        v33[v49] = 1;
        ++v35;
      }
      if (v41 >= v46)
        v50 = v46;
      else
        v50 = v41;
      if (v41 <= v46)
        v51 = v46;
      else
        v51 = v41;
      v52 = v51 + v50 * v27;
      if (!v33[v52])
      {
        v33[v52] = 1;
        ++v35;
      }
      if (v46 >= v36)
        v53 = v36;
      else
        v53 = v46;
      if (v46 <= v36)
        v54 = v36;
      else
        v54 = v46;
      v55 = v54 + v53 * v27;
      if (!v33[v55])
      {
        v33[v55] = 1;
        ++v35;
      }
      ++v34;
    }
    while (v12 != v34);
    v10 = v68;
    v68[3] = v35;
    if (v35)
    {
      v56 = (char *)malloc_type_malloc(16 * v35, 0x1000040451B5BE8uLL);
      *v67 = v56;
      if (v28 < 1)
      {
        v64 = 0;
      }
      else
      {
        v63 = 0;
        v64 = 0;
        do
        {
          if (v33[v63])
          {
            v65 = (uint64_t *)&v56[16 * v64];
            *v65 = v63 / v27;
            v65[1] = v63 + -v27 * (v63 / v27);
            ++v64;
          }
          ++v63;
        }
        while (v28 != v63);
      }
      if (v64 != v68[3])
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. memory smasher found in CFXEdgeArrayCreateFromMeshElement (%ld != %ld)"), v57, v58, v59, v60, v61, v62, (uint64_t)"edgeCount == edges->_count");
    }
  }
  free(v33);
  v10[4] = v10[3];
  return v10;
}

uint64_t sub_1B1849B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"edges");
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1B1849B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"edges");
  if (*(_QWORD *)(a1 + 24) <= a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXEdgeArrayGetEdgeAtIndex index out of bounds"), a3, a4, a5, a6, a7, a8, (uint64_t)"index < edges->_count");
  return *(_QWORD *)(a1 + 16) + 16 * a2;
}

uint64_t sub_1B1849C0C(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

_QWORD *sub_1B1849C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  int64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t j;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t k;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t m;
  unsigned int v43;
  uint64_t v44;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"element");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"vertices");
LABEL_3:
  if (qword_1EEF65E20 != -1)
    dispatch_once_f(&qword_1EEF65E20, &qword_1EEF65E18, (dispatch_function_t)sub_1B1849C0C);
  v11 = (_QWORD *)sub_1B179CB90(qword_1EEF65E18, 0x30uLL);
  v19 = sub_1B17EDAE0(a2, v12, v13, v14, v15, v16, v17, v18);
  if (a3)
    v20 = *(_QWORD *)(a3 + 24);
  else
    v20 = 0;
  v21 = sub_1B17A47FC(a1);
  if (!v19)
    return 0;
  v22 = v21;
  v11[2] = malloc_type_calloc(8uLL, v19, 0xE4C4B12FuLL);
  v11[5] = v19;
  v11[7] = v22;
  if (v22 >= 1)
  {
    for (i = 0; i != v22; ++i)
    {
      for (j = 0; j != 3; ++j)
      {
        v29 = sub_1B17A4A74(a1, i, j, 0, v23, v24, v25, v26);
        v30 = *(_QWORD *)(v11[2] + 8 * v29);
        if (!v30)
        {
          *(_QWORD *)(v11[2] + 8 * v29) = sub_1B185BCB0();
          v30 = *(_QWORD *)(v11[2] + 8 * v29);
        }
        sub_1B185CBE8(v30, i);
      }
    }
  }
  if (v20)
  {
    v11[3] = malloc_type_calloc(8uLL, v20, 0xC800F8E9uLL);
    v11[6] = v20;
    v11[4] = malloc_type_calloc(0x18uLL, v22, 0xDED69EC2uLL);
    v37 = malloc_type_calloc(1uLL, v22, 0xBE71C7ACuLL);
    if (v20 >= 1)
    {
      for (k = 0; k != v20; ++k)
      {
        v39 = (_QWORD *)sub_1B1849B94(a3, k, v31, v32, v33, v34, v35, v36);
        v40 = sub_1B185CBF8(*(_QWORD *)(v11[2] + 8 * *v39), *(_QWORD *)(v11[2] + 8 * v39[1]));
        *(_QWORD *)(v11[3] + 8 * k) = v40;
        v41 = sub_1B185BD00(v40);
        if (v41 != -1)
        {
          for (m = v41; m != -1; m = sub_1B185BD74(v40, m))
          {
            v43 = v37[m];
            if (v43 >= 3)
            {
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTriangulationInfoCreateFromMeshElement - edge out of bounds"), v31, v32, v33, v34, v35, v36, (uint64_t)"edgeIndexesPerFaceCounter[j] <= 2");
              v43 = v37[m];
            }
            v44 = v11[4] + 24 * m;
            v37[m] = v43 + 1;
            *(_QWORD *)(v44 + 8 * v43) = k;
          }
        }
      }
    }
    free(v37);
  }
  return v11;
}

uint64_t sub_1B1849EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"info");
  return *(_QWORD *)(a1 + 32) + 24 * a2;
}

void sub_1B1849F34(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 16);
  if (v1)
    free(v1);
}

CFStringRef sub_1B1849F44()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CFXEdgeArray>"));
}

CFStringRef sub_1B1849F60()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CFXEdgeArray>"));
}

void sub_1B1849F80(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;
  const void *v4;
  uint64_t v5;
  uint64_t j;
  const void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = a1[6];
  if (v2 >= 1)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(const void **)(a1[3] + 8 * i);
      if (v4)
      {
        CFRelease(v4);
        *(_QWORD *)(a1[3] + 8 * i) = 0;
        v2 = a1[6];
      }
    }
  }
  v5 = a1[5];
  if (v5 >= 1)
  {
    for (j = 0; j < v5; ++j)
    {
      v7 = *(const void **)(a1[2] + 8 * j);
      if (v7)
      {
        CFRelease(v7);
        *(_QWORD *)(a1[2] + 8 * j) = 0;
        v5 = a1[5];
      }
    }
  }
  v8 = (void *)a1[3];
  if (v8)
    free(v8);
  v9 = (void *)a1[2];
  if (v9)
    free(v9);
  v10 = (void *)a1[4];
  if (v10)
    free(v10);
}

CFStringRef sub_1B184A038()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CFXTriangulationInfo>"));
}

CFStringRef sub_1B184A054()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CFXTriangulationInfo>"));
}

uint64_t sub_1B184A070(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B184A09C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (qword_1EEF65E30 != -1)
    dispatch_once_f(&qword_1EEF65E30, &qword_1EEF65E28, (dispatch_function_t)sub_1B184A070);
  v6 = sub_1B179CB90(qword_1EEF65E28, 0x28uLL);
  if (!v6)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v0, v1, v2, v3, v4, v5, (uint64_t)"MeshElementEditor");
  return v6;
}

uint64_t sub_1B184A124(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFData *v17;
  uint64_t v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"element");
  if (sub_1B17A426C((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8))
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshElementEditorCreateWithMeshElement: mesh element is not a triangle array"), v10, v11, v12, v13, v14, v15, v19);
    return 0;
  }
  else
  {
    v16 = sub_1B184A09C();
    v17 = (const __CFData *)sub_1B17A4570((uint64_t)a1, (_DWORD *)(v16 + 40));
    *(_QWORD *)(v16 + 16) = CFRetain(a1);
    *(_QWORD *)(v16 + 48) = sub_1B17A47FC((uint64_t)a1);
    *(_QWORD *)(v16 + 32) = CFDataCreateMutableCopy(0, 3 * a2 * *(unsigned int *)(v16 + 40), v17);
  }
  return v16;
}

uint64_t sub_1B184A1E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  UInt8 *MutableBytePtr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(a1 + 32));
  v13 = *(unsigned int *)(a1 + 40);
  v14 = (3 * a2 + a3) * v13;
  switch((_DWORD)v13)
  {
    case 4:
      return *(unsigned int *)&MutableBytePtr[v14];
    case 2:
      return *(unsigned __int16 *)&MutableBytePtr[v14];
    case 1:
      return (char)MutableBytePtr[v14];
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXMeshElementEditorSetIndex unknown bytes per index"), v7, v8, v9, v10, v11, v12, v16);
  return -1;
}

void sub_1B184A270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  UInt8 *MutableBytePtr;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  MutableBytePtr = CFDataGetMutableBytePtr(*(CFMutableDataRef *)(a1 + 32));
  v20 = *(unsigned int *)(a1 + 40);
  v21 = v20 - 1;
  v22 = (3 * a2 + a3) * v20;
  switch(v21)
  {
    case 0:
      MutableBytePtr[v22] = a4;
      break;
    case 1:
      *(_WORD *)&MutableBytePtr[v22] = a4;
      break;
    case 3:
      *(_DWORD *)&MutableBytePtr[v22] = a4;
      break;
    case 7:
      *(_QWORD *)&MutableBytePtr[v22] = a4;
      break;
    default:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXMeshElementEditorSetIndex unknown bytes per index"), v14, v15, v16, v17, v18, v19, a9);
      break;
  }
}

void sub_1B184A314(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFData *v18;
  CFIndex Length;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"editor");
  v14 = *(const void **)(a1 + 24);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 24) = 0;
  }
  if (*(_QWORD *)(a1 + 48) >= a2)
  {
    v15 = sub_1B184A1E8(a1, a2, 1);
    v16 = sub_1B184A1E8(a1, a2, 2);
    v17 = *(_QWORD *)(a1 + 48);
    v18 = *(const __CFData **)(a1 + 32);
    Length = CFDataGetLength(v18);
    CFDataSetLength(v18, Length + (9 * *(_DWORD *)(a1 + 40)));
    sub_1B184A270(a1, a2, 1, a4, v20, v21, v22, v23, v64);
    sub_1B184A270(a1, a2, 2, a3, v24, v25, v26, v27, v65);
    sub_1B184A270(a1, v17, 0, a3, v28, v29, v30, v31, v66);
    sub_1B184A270(a1, v17, 1, a5, v32, v33, v34, v35, v67);
    sub_1B184A270(a1, v17, 2, v16, v36, v37, v38, v39, v68);
    sub_1B184A270(a1, v17 + 1, 0, a3, v40, v41, v42, v43, v69);
    sub_1B184A270(a1, v17 + 1, 1, a4, v44, v45, v46, v47, v70);
    sub_1B184A270(a1, v17 + 1, 2, a5, v48, v49, v50, v51, v71);
    sub_1B184A270(a1, v17 + 2, 0, a4, v52, v53, v54, v55, v72);
    sub_1B184A270(a1, v17 + 2, 1, v15, v56, v57, v58, v59, v73);
    sub_1B184A270(a1, v17 + 2, 2, a5, v60, v61, v62, v63, v74);
    *(_QWORD *)(a1 + 48) += 3;
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshElementEditorSubdivideTriangleAtIndex: triangleIndex out of bounds"), a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B184A50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFDataRef Copy;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"editor");
  v9 = *(_QWORD *)(a1 + 24);
  if (!v9)
  {
    v9 = sub_1B17A39B4();
    v17 = sub_1B17A42B4(*(_QWORD *)(a1 + 16), v10, v11, v12, v13, v14, v15, v16);
    sub_1B17A43C4(v9, v17, v18, v19, v20, v21, v22, v23);
    Copy = CFDataCreateCopy(0, *(CFDataRef *)(a1 + 32));
    sub_1B17A3C5C(v9, 0, *(_QWORD *)(a1 + 48), Copy, *(unsigned int *)(a1 + 40), v25, v26, v27);
    CFRelease(Copy);
    *(_QWORD *)(a1 + 24) = v9;
  }
  return v9;
}

void sub_1B184A5B8(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
}

CFStringRef sub_1B184A604()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CFXMeshElementEditor>"));
}

CFStringRef sub_1B184A620()
{
  return CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("<CFXMeshElementEditor>"));
}

double sub_1B184A63C(uint64_t a1)
{
  double result;

  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_BYTE *)(a1 + 133) = 1;
  *(_QWORD *)&result = 83951873;
  *(_DWORD *)(a1 + 129) = 83951873;
  return result;
}

void sub_1B184A660(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  sub_1B195BC00((uint64_t)a1);
  sub_1B1928B18((uint64_t)a1);
  v2 = (const void *)a1[19];
  if (v2)
  {
    CFRelease(v2);
    a1[19] = 0;
  }
  v3 = (const void *)a1[18];
  if (v3)
  {
    CFRelease(v3);
    a1[18] = 0;
  }
  v4 = (const void *)a1[17];
  if (v4)
  {
    CFRelease(v4);
    a1[17] = 0;
  }
}

CFTypeRef sub_1B184A6B8(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef result;

  *(_BYTE *)(a2 + 133) = *(_BYTE *)(a1 + 133);
  *(_DWORD *)(a2 + 128) = *(_DWORD *)(a1 + 128);
  *(_BYTE *)(a2 + 132) = *(_BYTE *)(a1 + 132);
  sub_1B195BC00(a2);
  sub_1B1928B18(a2);
  v4 = *(const void **)(a2 + 152);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 152) = 0;
  }
  v5 = *(CFTypeRef *)(a2 + 144);
  v6 = *(CFTypeRef *)(a1 + 144);
  if (v5 != v6)
  {
    if (v5)
    {
      CFRelease(*(CFTypeRef *)(a2 + 144));
      *(_QWORD *)(a2 + 144) = 0;
      v6 = *(CFTypeRef *)(a1 + 144);
    }
    if (v6)
      v6 = CFRetain(v6);
    *(_QWORD *)(a2 + 144) = v6;
  }
  v7 = *(CFTypeRef *)(a2 + 136);
  result = *(CFTypeRef *)(a1 + 136);
  if (v7 != result)
  {
    if (v7)
    {
      CFRelease(*(CFTypeRef *)(a2 + 136));
      *(_QWORD *)(a2 + 136) = 0;
      result = *(CFTypeRef *)(a1 + 136);
    }
    if (result)
      result = CFRetain(result);
    *(_QWORD *)(a2 + 136) = result;
  }
  return result;
}

BOOL sub_1B184A770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex v21;
  const void *ValueAtIndex;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v8 = *(_BYTE *)(a1 + 200);
  v9 = v8 & 0xC;
  if ((v8 & 0xC) == 0)
  {
    v11 = sub_1B17A0848(a1, a2, a3, a4, a5, a6, a7, a8);
    v18 = (const __CFArray *)sub_1B1876264(v11, 0, v12, v13, v14, v15, v16, v17);
    Count = CFArrayGetCount(v18);
    if (Count < 1)
    {
LABEL_6:
      v9 = 4;
    }
    else
    {
      v20 = Count;
      v21 = 0;
      while (1)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v18, v21);
        v30 = sub_1B17A426C((uint64_t)ValueAtIndex, v23, v24, v25, v26, v27, v28, v29);
        if (!sub_1B17A44A0(v30))
          break;
        if (v20 == ++v21)
          goto LABEL_6;
      }
      v9 = 8;
    }
    *(_BYTE *)(a1 + 200) = v9 | v8 & 0xF3;
  }
  return v9 == 4;
}

BOOL sub_1B184A810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 176) != 4 && sub_1B184A770(a1, a2, a3, a4, a5, a6, a7, a8);
}

BOOL sub_1B184A830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 176) == 4 && sub_1B184A770(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B184A850(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  const void *v11;

  v10 = a1[8].n128_u8[0];
  if ((_DWORD)v10 != (_DWORD)a2)
  {
    a1[8].n128_u8[0] = a2;
    v11 = (const void *)a1[9].n128_u64[1];
    if (v11)
    {
      CFRelease(v11);
      a1[9].n128_u64[1] = 0;
    }
    sub_1B17A0600((uint64_t)a1);
  }
  sub_1B184A8B4(a1, a1[11].n128_u8[0], a1[11].n128_u8[0], v10, a2, a6, a7, a8);
}

void sub_1B184A8B4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  if ((sub_1B195BB14(a1, a2, a3, a4, a5, a6, a7, a8) & 1) != 0
    || (v10 == 4 ? (v20 = v8 == 0) : (v20 = 1),
        v20 ? (v21 = 0) : (v21 = 1),
        v11 == 4 ? (v22 = v9 == 0) : (v22 = 1),
        v22 ? (v23 = 0) : (v23 = 1),
        v23 != v21))
  {
    v24 = 7;
LABEL_16:
    v25 = sub_1B17C6244(a1, v13, v14, v15, v16, v17, v18, v19);
    sub_1B187A8A4(v25, v24, a1, 0, v26, v27, v28, v29);
    return;
  }
  if ((v11 == 0) == (v10 != 0))
  {
    v24 = 6;
    goto LABEL_16;
  }
}

uint64_t sub_1B184A964(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 129);
}

void sub_1B184A96C(__n128 *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  if (a1[8].n128_u8[1] != a2)
  {
    a1[8].n128_u8[1] = a2;
    v9 = (const void *)a1[9].n128_u64[1];
    if (v9)
    {
      CFRelease(v9);
      a1[9].n128_u64[1] = 0;
    }
    sub_1B17A0600((uint64_t)a1);
  }
  sub_1B184A8B4(a1, a1[11].n128_u8[0], a1[11].n128_u8[0], a1[8].n128_u8[0], a1[8].n128_u8[0], a6, a7, a8);
}

uint64_t sub_1B184A9C4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 130);
}

void sub_1B184A9CC(uint64_t a1, int a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a2 != *(_DWORD *)(a1 + 130))
  {
    *(_DWORD *)(a1 + 130) = a2;
    v3 = *(const void **)(a1 + 152);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 152) = 0;
    }
    sub_1B17A0600(a1);
    sub_1B184A8B4((__n128 *)a1, *(unsigned __int8 *)(a1 + 176), *(unsigned __int8 *)(a1 + 176), *(unsigned __int8 *)(a1 + 128), *(unsigned __int8 *)(a1 + 128), v4, v5, v6);
  }
}

void sub_1B184AA40(__n128 *a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeRef v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (CFTypeRef)a1[9].n128_u64[0];
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      a1[9].n128_u64[0] = 0;
    }
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    a1[9].n128_u64[0] = (unint64_t)v5;
    v6 = (const void *)a1[9].n128_u64[1];
    if (v6)
    {
      CFRelease(v6);
      a1[9].n128_u64[1] = 0;
    }
    sub_1B17A0600((uint64_t)a1);
  }
  sub_1B1928AC8((uint64_t)a1);
  sub_1B184A8B4(a1, a1[11].n128_u8[0], a1[11].n128_u8[0], a1[8].n128_u8[0], a1[8].n128_u8[0], v7, v8, v9);
}

void sub_1B184AAC4(__n128 *a1, CFTypeRef cf)
{
  CFTypeRef v3;
  CFTypeRef v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (CFTypeRef)a1[8].n128_u64[1];
  if (v3 != cf)
  {
    if (v3)
    {
      CFRelease(v3);
      a1[8].n128_u64[1] = 0;
    }
    if (cf)
      v5 = CFRetain(cf);
    else
      v5 = 0;
    a1[8].n128_u64[1] = (unint64_t)v5;
    v6 = (const void *)a1[9].n128_u64[1];
    if (v6)
    {
      CFRelease(v6);
      a1[9].n128_u64[1] = 0;
    }
    sub_1B17A0600((uint64_t)a1);
  }
  sub_1B1928AC8((uint64_t)a1);
  sub_1B184A8B4(a1, a1[11].n128_u8[0], a1[11].n128_u8[0], a1[8].n128_u8[0], a1[8].n128_u8[0], v7, v8, v9);
}

BOOL sub_1B184AB48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return *(_BYTE *)(a1 + 176) == 4 && *(_BYTE *)(a1 + 128) && sub_1B184A770(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B184AB68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E63CFBD8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 600) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_BYTE *)(a1 + 592) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = sub_1B1813884(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 24) = v9;
  v17 = sub_1B187B1D0(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 32) = v17;
  *(_WORD *)(a1 + 48) = 15;
  sub_1B19D7DD8(v17, 0xFu);
  return a1;
}

void sub_1B184AC2C(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  CFX::RG::Resource **v4;

  sub_1B181C064(v4, 0);
  sub_1B2227AE0(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B184AC54(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E63CFBD8;
  sub_1B19D7E4C(*(int16x4_t **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  sub_1B181C064((CFX::RG::Resource **)(a1 + 600), 0);
  for (i = 584; i != 568; i -= 8)
  {
    v3 = *(void **)(a1 + i);
    if (v3)

  }
  v4 = *(void **)(a1 + 560);
  if (v4)

  return a1;
}

void sub_1B184ACC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B181C064((CFX::RG::Resource **)(v1 + 600), 0);
  sub_1B2227B28(v1 + 592, v1 + 576, v1);
  _Unwind_Resume(a1);
}

void sub_1B184ACEC(uint64_t a1)
{
  sub_1B184AC54(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B184AD10(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  unsigned __int16 *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  __int16 v82;
  __int16 v83;
  CFX::RG::Resource *v84;
  _OWORD v85[5];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned int v91;
  _BOOL4 v92;
  unsigned int v93;
  BOOL v94;
  char v95;
  const char *v96;

  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = (void *)objc_msgSend_resourceManager(v11, v12, v13, v14);
  v23 = sub_1B1813884(*(_QWORD *)(a1 + 16), v16, v17, v18, v19, v20, v21, v22);
  v31 = sub_1B1814768(*(uint64_t **)(a1 + 16), v24, v25, v26, v27, v28, v29, v30);
  if (v31 && sub_1B186CFA8((uint64_t)v31, v32, v33, v34, v35, v36, v37, v38))
  {
    v39 = sub_1B187B0F0(v23, 0) != 0;
    v94 = v39;
    v93 = sub_1B19DA3D0(*(_QWORD *)(a1 + 32));
    v40 = sub_1B19DA3E0(*(_QWORD *)(a1 + 32)) != 0;
    v91 = *(_DWORD *)(a3 + 172);
    v92 = v40;
    v41 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v93) ^ ((0x9DDFEA08EB382D69 * v93) >> 47));
    v42 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v40)));
    v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    v44 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) ^ ((0x9DDFEA08EB382D69 * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) >> 47));
    v45 = 0x9DDFEA08EB382D69
        * (v44 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v91)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v91)));
    v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
    if (*(_QWORD *)(a1 + 552) != v46)
    {
      *(_QWORD *)(a1 + 552) = v46;
      sub_1B19D9F28(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16));
      v47 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      objc_msgSend_setConstantValue_type_withName_(v47, v48, (uint64_t)&v93, 33, CFSTR("LightCount"));
      objc_msgSend_setConstantValue_type_withName_(v47, v49, (uint64_t)&v94, 53, CFSTR("has_IBL"));
      objc_msgSend_setConstantValue_type_withName_(v47, v50, (uint64_t)&v92, 33, CFSTR("raytracing_use_function_constant"));
      objc_msgSend_setConstantValue_type_withName_(v47, v51, (uint64_t)&v91, 33, CFSTR("quality_mode"));
      v52 = sub_1B19DA304(*(_QWORD *)(a1 + 32));
      v54 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(v15, v53, (uint64_t)CFSTR("vfx_rt_indirect_diffuse_trace"), (uint64_t)v47, v52);

      v55 = *(void **)(a1 + 560);
      if (v55 != (void *)v54)
      {
        if (v55)

        *(_QWORD *)(a1 + 560) = v54;
      }
      *(_DWORD *)(a1 + 460) = 0;
      sub_1B19DA290(*(_QWORD *)(a1 + 32));
    }
    v56 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, *(const CFX::RG::Resource **)(a3 + 240));
    v60 = *v56;
    v61 = v56[1];
    v62 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v60) ^ ((0x9DDFEA08EB382D69 * v60) >> 47));
    v63 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)));
    v64 = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47));
    if (*(_QWORD *)(a1 + 568) != v64)
    {
      *(_QWORD *)(a1 + 568) = v64;
      v65 = v60 >> 1;
      v66 = v61 >> 1;
      v67 = (v61 >> 1) * (v60 >> 1);
      v68 = (void *)objc_msgSend_device(v11, v57, v58, v59);
      v69 = 96 * v67;
      v71 = objc_msgSend_newBufferWithLength_options_(v68, v70, v69, 32);
      v75 = *(void **)(a1 + 576);
      if (v75 != (void *)v71)
      {
        v76 = v71;
        if (v75)

        *(_QWORD *)(a1 + 576) = v76;
      }
      v77 = (void *)objc_msgSend_device(v11, v72, v73, v74);
      v79 = objc_msgSend_newBufferWithLength_options_(v77, v78, v69, 32);
      v80 = *(void **)(a1 + 584);
      if (v80 != (void *)v79)
      {
        v81 = v79;
        if (v80)

        *(_QWORD *)(a1 + 584) = v81;
      }
      *(_DWORD *)(a1 + 460) = 0;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v86 = 0u;
      if (v65 <= 1)
        v82 = 1;
      else
        v82 = v65;
      if (v66 <= 1)
        v83 = 1;
      else
        v83 = v66;
      RGTextureDescriptorMake2D(v82, v83, 25, (uint64_t)&v86);
      CFX::RG::RenderGraphContext::currentBuilder(a2);
      v85[2] = v88;
      v85[3] = v89;
      v85[4] = v90;
      v85[0] = v86;
      v85[1] = v87;
      v96 = "distanceTex";
      v95 = 2;
      sub_1B1825D28((uint64_t *)&v96, (uint64_t)v85, &v95);
      sub_1B181C064((CFX::RG::Resource **)(a1 + 600), v84);
    }
    *(_BYTE *)(a1 + 592) ^= 1u;
  }
}

uint64_t sub_1B184B074(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  CFX::CrossFrameResourceManager *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39[2];

  v8 = *(_QWORD *)a5;
  v39[0] = (uint64_t)"RTIndirectDiffuseTracePass";
  v39[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF65E40);
  if ((v8 & 1) == 0)
  {
    v38 = a3;
    v36 = a2;
    v37 = __cxa_guard_acquire(&qword_1EEF65E40);
    a2 = v36;
    a3 = v38;
    if (v37)
    {
      byte_1EEF65E38 = 1;
      __cxa_guard_release(&qword_1EEF65E40);
      a2 = v36;
      a3 = v38;
    }
  }
  if (byte_1EEF65E38)
    v9 = 0xA1BA6B715A2CCB31;
  else
    v9 = 0;
  sub_1B18F7354(a1, a2, a3, v39, v9, 0);
  *(_QWORD *)a1 = &off_1E63CFBF8;
  *(_QWORD *)(a1 + 376) = a5;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 392) = v17;
  *(_QWORD *)(a1 + 400) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  v21 = a4[4];
  v22 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v23 = CFX::CrossFrameResourceManager::get(v21, v22);
  v29 = (uint64_t *)(a1 + 384);
  *(_QWORD *)(a1 + 384) = v23;
  if (!v23)
  {
    v30 = (uint64_t)a4[4];
    v31 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    v39[0] = *(_QWORD *)(a1 + 368);
    v32 = sub_1B184B248(v30, v31, v39);
    *(_QWORD *)(a1 + 384) = v32;
    *(_DWORD *)(v32 + 460) = 0;
    v33 = sub_1B17928F4(*(void **)(a1 + 392), a4[4]);
    v23 = *v29;
    *(_QWORD *)(*v29 + 544) = v33;
  }
  sub_1B184AD10(v23, (CFX::RG::RenderGraphContext *)a4, *(_QWORD *)(a1 + 376), v24, v25, v26, v27, v28);
  v34 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) = v34 + 64;
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(v34 + 600));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 384) + 600));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 256));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 240));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 176));
  return a1;
}

void sub_1B184B230(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B184B248(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = operator new();
  sub_1B184AB68(v6, *a3, v7, v8, v9, v10, v11, v12);
  CFX::CrossFrameResourceManager::set(a1, a2, v6);
  return v6;
}

void sub_1B184B2AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10A1C4028DC6F4DLL);
  _Unwind_Resume(a1);
}

void sub_1B184B2D4(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id Texture;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  const char *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  _OWORD *v86;
  float32x4_t *v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _OWORD *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  const char *v117;
  const char *v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  void *v177;
  float32x2_t v178;
  _QWORD v179[3];
  __n128 v180;
  unsigned __int8 v181[176];
  float32x4_t v182[4];
  _OWORD v183[5];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 560))
  {
    v10 = *a3;
    v11 = sub_1B1813884(*(_QWORD *)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = sub_1B1814768(*(uint64_t **)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
    if (v19)
    {
      if (sub_1B186CFA8((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26))
      {
        v34 = sub_1B1814768(*(uint64_t **)(a1 + 368), v27, v28, v29, v30, v31, v32, v33);
        sub_1B17B33F4((uint64_t)v34, (uint64_t)v181, v35, v36, v37, v38, v39, v40);
        v41 = (__int128 *)sub_1B1815A5C(*(_QWORD *)(a1 + 368), 1);
        v175 = v41[1];
        v176 = *v41;
        v173 = v41[3];
        v174 = v41[2];
        v180 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v42, v43, v44, v45, v46, v47);
        v55 = sub_1B187B1D0(v11, v48, v49, v50, v51, v52, v53, v54);
        sub_1B19D9F28(v55, *(_QWORD *)(a1 + 368));
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 248));
        v57 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 240));
        v58 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 264));
        v59 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 176));
        v60 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 256));
        v61 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 384) + 600));
        objc_msgSend_setTexture_atIndex_(v10, v62, (uint64_t)Texture, 0);
        v177 = v57;
        objc_msgSend_setTexture_atIndex_(v10, v63, (uint64_t)v57, 1);
        objc_msgSend_setTexture_atIndex_(v10, v64, (uint64_t)v58, 2);
        objc_msgSend_setTexture_atIndex_(v10, v65, (uint64_t)v59, 3);
        objc_msgSend_setTexture_atIndex_(v10, v66, (uint64_t)v60, 4);
        objc_msgSend_setTexture_atIndex_(v10, v67, (uint64_t)v61, 5);
        v68 = sub_1B187B0F0(v11, 0);
        if (v68)
        {
          v72 = objc_msgSend_textureForMaterialProperty_(*(void **)(a1 + 392), v69, v68, v71);
          if (v72)
            objc_msgSend_setTexture_atIndex_(v10, v73, v72, 6);
        }
        v178 = sub_1B1816010(**(float32x2_t ***)(a1 + 376), 0, v70, v71);
        v74 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 312);
        v74[4] = v176;
        v74[5] = v175;
        v74[6] = v174;
        v74[7] = v173;
        v81 = sub_1B18667B4(v181, (uint64_t)&v180, v75, v76, v77, v78, v79, v80);
        v82 = 0;
        v83 = *((_OWORD *)v81 + 1);
        v84 = *((_OWORD *)v81 + 2);
        v85 = *((_OWORD *)v81 + 3);
        v86 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 312);
        v86[12] = *(_OWORD *)v81;
        v86[13] = v83;
        v86[14] = v84;
        v86[15] = v85;
        v87 = *(float32x4_t **)(a1 + 384);
        v88 = v87[16];
        v89 = v87[17];
        v90 = v87[18];
        v91 = v87[19];
        v92 = v87[9];
        v93 = v87[10];
        v94 = v87[11];
        v182[0] = v87[8];
        v182[1] = v92;
        v182[2] = v93;
        v182[3] = v94;
        do
        {
          v183[v82] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, COERCE_FLOAT(*(_OWORD *)&v182[v82])), v89, *(float32x2_t *)v182[v82].f32, 1), v90, v182[v82], 2), v91, v182[v82], 3);
          ++v82;
        }
        while (v82 != 4);
        v95 = v183[1];
        v96 = v183[2];
        v97 = v183[3];
        v98 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 312);
        *v98 = v183[0];
        v98[1] = v95;
        v98[2] = v96;
        v98[3] = v97;
        *(simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 128) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 384) + 128));
        *(simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 256) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 384) + 64));
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 384) = (float)((float)(unint64_t)objc_msgSend_width(Texture, v99, v100, v101)
                                                                               * v178.f32[0])
                                                                       * 0.5;
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 388) = vmuls_lane_f32((float)(unint64_t)objc_msgSend_height(Texture, v102, v103, v104), v178, 1)* 0.5;
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 400) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 208);
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 416) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 224);
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 448) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 192);
        v105 = *(_QWORD *)(a1 + 376);
        v106 = *(_QWORD *)(v105 + 312);
        *(float *)(v106 + 432) = (float)*(int *)(v105 + 184);
        objc_msgSend_setBytes_length_atIndex_(v10, v107, v106, 480, 8);
        v108 = sub_1B187B0F0(v11, 0);
        if (v108)
          v116 = sub_1B1841E14(v108, (uint64_t)v109, v110, v111, v112, v113, v114, v115);
        else
          v116 = 0.0;
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 464) = v116;
        objc_msgSend_setTexture_atIndex_(v10, v109, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 544), 9);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v117, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 592) + 576), 0, 10);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v118, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 384) + 592) == 0) + 576), 0, 11);
        v119 = sub_1B19DA2DC(v55);
        objc_msgSend_useHeap_(v10, v120, v119, v121);
        v122 = sub_1B19DA2EC(v55);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v123, v122, 0, 0);
        v124 = sub_1B19DA2E4(v55);
        objc_msgSend_setAccelerationStructure_atBufferIndex_(v10, v125, v124, 1);
        if (sub_1B19DA3D0(v55))
        {
          v126 = sub_1B19DA2F4(v55);
          objc_msgSend_setBuffer_offset_atIndex_(v10, v127, v126, 0, 2);
        }
        if (sub_1B19DA3E0(v55))
        {
          v134 = *(_QWORD *)(a1 + 384);
          v135 = *(_QWORD *)(v134 + 560);
          if (!v135)
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v128, v129, v130, v131, v132, v133, (uint64_t)"_ptr != NULL");
            v135 = *(_QWORD *)(v134 + 560);
          }
          v136 = (void *)sub_1B18FD774(v135);
          v137 = sub_1B19DA30C(v55, v136);
          objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(v10, v138, (uint64_t)v137, 3);
        }
        else
        {
          v137 = 0;
        }
        v139 = sub_1B19DA2FC(v55);
        v143 = sub_1B19DA3F0(v55, v140, v141, v142);
        objc_msgSend_useResources_count_usage_(v10, v144, v139, v143, 1);
        v151 = *(_QWORD *)(a1 + 384);
        v152 = *(_QWORD *)(v151 + 560);
        if (!v152)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v145, v146, v147, v148, v149, v150, (uint64_t)"_ptr != NULL");
          v152 = *(_QWORD *)(v151 + 560);
        }
        v153 = sub_1B18FD774(v152);
        objc_msgSend_setComputePipelineState_(v10, v154, v153, v155);
        v159 = (unint64_t)objc_msgSend_width(v177, v156, v157, v158) >> 1;
        v169 = (unint64_t)objc_msgSend_height(v177, v160, v161, v162) >> 1;
        v170 = *(_QWORD *)(a1 + 384);
        v171 = *(_QWORD *)(v170 + 560);
        if (!v171)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v163, v164, v165, v166, v167, v168, (uint64_t)"_ptr != NULL");
          v171 = *(_QWORD *)(v170 + 560);
        }
        v172 = (void *)sub_1B18FD774(v171);
        v179[0] = v159;
        v179[1] = v169;
        v179[2] = 1;
        RGMTLComputeCommandEncoderDispatchOnGrid2D(v10, v172, (uint64_t)v179, 1);

        sub_1B19DA290(v55);
      }
    }
  }
}

uint64_t sub_1B184B894(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v61;
  uint64_t v62;
  int v63;
  const char *v64;
  uint64_t v65;

  v8 = *a5;
  v64 = "RTIndirectDiffuseSpatialReSTIRPass";
  v65 = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF65E50);
  if ((v8 & 1) == 0)
  {
    v61 = a3;
    v62 = a2;
    v63 = __cxa_guard_acquire(&qword_1EEF65E50);
    a2 = v62;
    a3 = v61;
    if (v63)
    {
      qword_1EEF65E48 = (uint64_t)sub_1B184CF48("RT_INDIRECT_DIFFUSE_SPATIAL_RESTIR", 0x22u);
      __cxa_guard_release(&qword_1EEF65E50);
      a2 = v62;
      a3 = v61;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v64, qword_1EEF65E48, 0);
  *(_QWORD *)a1 = &off_1E63D03D8;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v9 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[30]);
  v10 = *v9;
  v11 = v9[1];
  v19 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)(a1 + 400) = v19;
  *(_QWORD *)(a1 + 408) = objc_msgSend_resourceManager(v19, v20, v21, v22, v64, v65);
  v23 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v24 = CFX::CrossFrameResourceManager::get(a4[4], v23);
  *(_QWORD *)(a1 + 384) = v24;
  if (!v24)
  {
    v25 = (uint64_t)a4[4];
    v26 = (_QWORD *)operator new();
    *v26 = &off_1E63D0398;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = 0;
    CFX::CrossFrameResourceManager::set(v25, v23, (uint64_t)v26);
    *(_QWORD *)(a1 + 384) = v26;
    v27 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    LODWORD(v64) = 0;
    objc_msgSend_setConstantValue_type_withName_(v27, v28, (uint64_t)&v64, 29, CFSTR("spatial_pass_id"));
    v29 = *(_QWORD *)(a1 + 384);
    v32 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 408), v30, (uint64_t)CFSTR("vfx_rt_indirect_diffuse_spatial_restir"), (uint64_t)v27);
    v33 = *(void **)(v29 + 16);
    if (v33 != (void *)v32)
    {
      if (v33)

      *(_QWORD *)(v29 + 16) = v32;
    }
    LODWORD(v64) = 1;
    objc_msgSend_setConstantValue_type_withName_(v27, v31, (uint64_t)&v64, 29, CFSTR("spatial_pass_id"));
    v34 = *(_QWORD *)(a1 + 384);
    v36 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 408), v35, (uint64_t)CFSTR("vfx_rt_indirect_diffuse_spatial_restir"), (uint64_t)v27);
    v37 = *(void **)(v34 + 24);
    if (v37 != (void *)v36)
    {
      if (v37)

      *(_QWORD *)(v34 + 24) = v36;
    }

  }
  v38 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v39 = 0x9DDFEA08EB382D69
      * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v10)));
  v40 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
  v41 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v11)))) >> 47));
  v42 = CFX::CrossFrameResourceManager::get(a4[4], v41);
  *(_QWORD *)(a1 + 392) = v42;
  if (!v42)
  {
    v43 = (uint64_t)a4[4];
    v44 = (_QWORD *)operator new();
    *v44 = &off_1E63D03B8;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = 0;
    CFX::CrossFrameResourceManager::set(v43, v41, (uint64_t)v44);
    *(_QWORD *)(a1 + 392) = v44;
    v48 = (void *)objc_msgSend_device(*(void **)(a1 + 400), v45, v46, v47);
    v53 = objc_msgSend_newBufferWithLength_options_(v48, v49, 96 * (v10 >> 1) * (unint64_t)(v11 >> 1), 32);
    v54 = (void *)v44[2];
    if (v54 != (void *)v53)
    {
      if (v54)

      v44[2] = v53;
    }
    v55 = *(_QWORD *)(a1 + 392);
    v56 = (void *)objc_msgSend_device(*(void **)(a1 + 400), v50, v51, v52);
    v58 = objc_msgSend_newBufferWithLength_options_(v56, v57, 96 * (v10 >> 1) * (unint64_t)(v11 >> 1), 32);
    v59 = *(void **)(v55 + 24);
    if (v59 != (void *)v58)
    {
      if (v59)

      *(_QWORD *)(v55 + 24) = v58;
    }
  }
  return a1;
}

void sub_1B184BBE4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B184BC0C(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v3;
  _QWORD *v5;
  void *v6;
  id Texture;
  id v8;
  id v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  _QWORD v65[3];
  _QWORD v66[3];

  v3 = *(_QWORD *)(result + 384);
  if (*(_QWORD *)(v3 + 16) && *(_QWORD *)(v3 + 24))
  {
    v5 = (_QWORD *)result;
    v6 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(result + 376) + 312), 480, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v5[47] + 248));
    v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v5[47] + 240));
    v9 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v5[47] + 288));
    objc_msgSend_setTexture_atIndex_(v6, v10, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v6, v11, (uint64_t)v8, 1);
    objc_msgSend_setTexture_atIndex_(v6, v12, (uint64_t)v9, 2);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v13, *(_QWORD *)(v5[47] + 296), 0, 0);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v14, *(_QWORD *)(v5[49] + 16), 0, 1);
    v21 = v5[48];
    v22 = *(_QWORD *)(v21 + 16);
    if (!v22)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v15, v16, v17, v18, v19, v20, (uint64_t)"_ptr != NULL");
      v22 = *(_QWORD *)(v21 + 16);
    }
    v23 = sub_1B18FD774(v22);
    objc_msgSend_setComputePipelineState_(v6, v24, v23, v25);
    v29 = (unint64_t)objc_msgSend_width(v8, v26, v27, v28) >> 1;
    v39 = (unint64_t)objc_msgSend_height(v8, v30, v31, v32) >> 1;
    v40 = v5[48];
    v41 = *(_QWORD *)(v40 + 16);
    if (!v41)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v33, v34, v35, v36, v37, v38, (uint64_t)"_ptr != NULL");
      v41 = *(_QWORD *)(v40 + 16);
    }
    v42 = (void *)sub_1B18FD774(v41);
    v66[0] = v29;
    v66[1] = v39;
    v66[2] = 1;
    RGMTLComputeCommandEncoderDispatchOnGrid2D(v6, v42, (uint64_t)v66, 1);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v43, *(_QWORD *)(v5[49] + 16), 0, 0);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v44, *(_QWORD *)(v5[49] + 24), 0, 1);
    v51 = v5[48];
    v52 = *(_QWORD *)(v51 + 24);
    if (!v52)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v45, v46, v47, v48, v49, v50, (uint64_t)"_ptr != NULL");
      v52 = *(_QWORD *)(v51 + 24);
    }
    v53 = sub_1B18FD774(v52);
    objc_msgSend_setComputePipelineState_(v6, v54, v53, v55);
    v62 = v5[48];
    v63 = *(_QWORD *)(v62 + 24);
    if (!v63)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v56, v57, v58, v59, v60, v61, (uint64_t)"_ptr != NULL");
      v63 = *(_QWORD *)(v62 + 24);
    }
    v64 = (void *)sub_1B18FD774(v63);
    v65[0] = v29;
    v65[1] = v39;
    v65[2] = 1;
    return RGMTLComputeCommandEncoderDispatchOnGrid2D(v6, v64, (uint64_t)v65, 1);
  }
  return result;
}

uint64_t sub_1B184BE70(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  CFX::RG::Resource *v40;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD v45[10];
  uint64_t v46[2];

  v8 = *a5;
  v46[0] = (uint64_t)"RTIndirectDiffuseUpscalePass";
  v46[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF65E60);
  if ((v8 & 1) == 0)
  {
    v43 = a2;
    v44 = a3;
    v42 = __cxa_guard_acquire(&qword_1EEF65E60);
    a2 = v43;
    a3 = v44;
    if (v42)
    {
      qword_1EEF65E58 = (uint64_t)sub_1B184CF48("RT_INDIRECT_DIFFUSE_UPSCALE", 0x1Bu);
      __cxa_guard_release(&qword_1EEF65E60);
      a2 = v43;
      a3 = v44;
    }
  }
  sub_1B18F7354(a1, a2, a3, v46, qword_1EEF65E58, 0);
  *(_QWORD *)a1 = &off_1E63CFFD8;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v16 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 400) = v16;
  *(_QWORD *)(a1 + 408) = objc_msgSend_resourceManager(v16, v17, v18, v19);
  v20 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v21 = CFX::CrossFrameResourceManager::get(a4[4], v20);
  *(_QWORD *)(a1 + 384) = v21;
  if (!v21)
  {
    *(_QWORD *)(a1 + 384) = sub_1B184C01C(a4[4], v20);
    v29 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v22, v23, v24, v25, v26, v27, v28);
    v33 = (void *)objc_msgSend_resourceManager(v29, v30, v31, v32);
    v34 = *(_QWORD *)(a1 + 384);
    v37 = objc_msgSend_newComputePipelineStateWithFunctionName_(v33, v35, (uint64_t)CFSTR("vfx_rt_indirect_diffuse_upscale"), v36);
    v38 = *(void **)(v34 + 16);
    if (v38 != (void *)v37)
    {
      if (v38)

      *(_QWORD *)(v34 + 16) = v37;
    }
  }
  v39 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(*(_QWORD *)(a1 + 376) + 8), MTLPixelFormatRGBA16Float, (uint64_t)v45);
  v40 = sub_1B17A34D0(v39, (uint64_t)"IndirectDiffuseUpscale", v45);
  *(_QWORD *)(a1 + 392) = v40;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v40);
  return a1;
}

void sub_1B184BFFC(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B184C01C(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CFFB8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B184C094(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  id Texture;
  id v7;
  const char *v8;
  const char *v9;
  const char *v10;
  id v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;

  if (*(_QWORD *)(*(_QWORD *)(result + 384) + 16))
  {
    v4 = result;
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(result + 376) + 312), 480, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 248));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 240));
    objc_msgSend_setTexture_atIndex_(v5, v8, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)v7, 1);
    objc_msgSend_setBuffer_offset_atIndex_(v5, v10, *(_QWORD *)(*(_QWORD *)(v4 + 376) + 304), 0, 0);
    v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 392));
    objc_msgSend_setTexture_atIndex_(v5, v12, (uint64_t)v11, 10);
    v19 = *(_QWORD *)(v4 + 384);
    v20 = *(_QWORD *)(v19 + 16);
    if (!v20)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v13, v14, v15, v16, v17, v18, (uint64_t)"_ptr != NULL");
      v20 = *(_QWORD *)(v19 + 16);
    }
    v21 = sub_1B18FD774(v20);
    return objc_msgSend_dispatch_onTexture2D_(v5, v22, v21, (uint64_t)v11);
  }
  return result;
}

uint64_t sub_1B184C1C8(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  int v31;
  uint64_t v32;
  _OWORD v33[10];
  uint64_t v34[2];

  v9 = *(_QWORD *)a5;
  v34[0] = (uint64_t)"RTIndirectDiffuseTemporalDenoisePass";
  v34[1] = v9;
  LOBYTE(v9) = atomic_load((unsigned __int8 *)&qword_1EEF65E70);
  if ((v9 & 1) == 0)
  {
    v32 = a3;
    v31 = __cxa_guard_acquire(&qword_1EEF65E70);
    a3 = v32;
    if (v31)
    {
      qword_1EEF65E68 = (uint64_t)sub_1B184CF48("RT_INDIRECT_DIFFUSE_TEMPORAL_DENOISE", 0x24u);
      __cxa_guard_release(&qword_1EEF65E70);
      a3 = v32;
    }
  }
  sub_1B18F7354(a1, a2, a3, v34, qword_1EEF65E68, 0);
  *(_QWORD *)a1 = &off_1E63D0548;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 416) = v17;
  *(_QWORD *)(a1 + 424) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, *(const CFX::RG::Resource **)(a5 + 240));
  v21 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v22 = CFX::CrossFrameResourceManager::get(a4[4], v21);
  *(_QWORD *)(a1 + 384) = v22;
  if (!v22)
  {
    v23 = (uint64_t)a4[4];
    v24 = (_QWORD *)operator new();
    *v24 = &off_1E63D0528;
    v24[1] = 0;
    v24[2] = 0;
    CFX::CrossFrameResourceManager::set(v23, v21, (uint64_t)v24);
    *(_QWORD *)(a1 + 384) = v24;
    v27 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 424), v25, (uint64_t)CFSTR("vfx_rt_indirect_diffuse_temporal_denoise"), v26);
    v28 = (void *)v24[2];
    if (v28 != (void *)v27)
    {
      if (v28)

      v24[2] = v27;
    }
  }
  v29 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(*(_QWORD *)(a1 + 376) + 8), MTLPixelFormatRGBA16Float, (uint64_t)v33);
  *(_QWORD *)(a1 + 408) = sub_1B17A34D0(v29, (uint64_t)"IndirectDiffuseUpscale", v33);
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 256));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 408));
  return a1;
}

void sub_1B184C3AC(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B184C3CC(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  id Texture;
  id v7;
  uint64_t v8;
  const CFX::RG::Resource *v9;
  id v10;
  id v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  id v16;
  id v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;

  if (*(_QWORD *)(*(_QWORD *)(result + 384) + 16))
  {
    v4 = result;
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(result + 376) + 312), 480, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 392));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 248));
    v8 = *(_QWORD *)(v4 + 376);
    v9 = *(const CFX::RG::Resource **)(v8 + 272);
    if (v9)
    {
      v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v9);
      v8 = *(_QWORD *)(v4 + 376);
    }
    else
    {
      v10 = 0;
    }
    v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v8 + 256));
    objc_msgSend_setTexture_atIndex_(v5, v12, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v13, (uint64_t)v7, 1);
    objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v10, 2);
    objc_msgSend_setTexture_atIndex_(v5, v15, (uint64_t)v11, 3);
    v16 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 408));
    v17 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 400));
    objc_msgSend_setTexture_atIndex_(v5, v18, (uint64_t)v16, 10);
    objc_msgSend_setTexture_atIndex_(v5, v19, (uint64_t)v17, 11);
    v26 = *(_QWORD *)(v4 + 384);
    v27 = *(_QWORD *)(v26 + 16);
    if (!v27)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v20, v21, v22, v23, v24, v25, (uint64_t)"_ptr != NULL");
      v27 = *(_QWORD *)(v26 + 16);
    }
    v28 = sub_1B18FD774(v27);
    return objc_msgSend_dispatch_onTexture2D_(v5, v29, v28, (uint64_t)v16);
  }
  return result;
}

uint64_t sub_1B184C564(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int16 v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  CFX::RG::Resource *v41;
  CFX::RG::Resource *v42;
  uint64_t v44;
  int v45;
  _OWORD v46[5];
  _OWORD v47[5];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  const char *v54;

  v9 = *a5;
  *(_QWORD *)&v48 = "RTIndirectDiffuseSpatialDenoisePass";
  *((_QWORD *)&v48 + 1) = v9;
  LOBYTE(v9) = atomic_load((unsigned __int8 *)&qword_1EEF65E80);
  if ((v9 & 1) == 0)
  {
    v44 = a3;
    v45 = __cxa_guard_acquire(&qword_1EEF65E80);
    a3 = v44;
    if (v45)
    {
      qword_1EEF65E78 = (uint64_t)sub_1B184CF48("RT_INDIRECT_DIFFUSE_SPATIAL_DENOISE", 0x23u);
      __cxa_guard_release(&qword_1EEF65E80);
      a3 = v44;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v48, qword_1EEF65E78, 0);
  *(_QWORD *)a1 = &off_1E63D0468;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 408) = v17;
  *(_QWORD *)(a1 + 416) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  v21 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[30]);
  v22 = *v21;
  v23 = v21[1];
  v24 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v25 = CFX::CrossFrameResourceManager::get(a4[4], v24);
  *(_QWORD *)(a1 + 384) = v25;
  if (!v25)
  {
    v26 = (uint64_t)a4[4];
    v27 = (_OWORD *)operator new();
    *v27 = 0u;
    v27[1] = 0u;
    *(_QWORD *)v27 = &off_1E63D0428;
    CFX::CrossFrameResourceManager::set(v26, v24, (uint64_t)v27);
    *(_QWORD *)(a1 + 384) = v27;
    v30 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 416), v28, (uint64_t)CFSTR("vfx_rt_indirect_diffuse_spatial_denoise"), v29);
    v31 = (void *)*((_QWORD *)v27 + 2);
    if (v31 != (void *)v30)
    {
      if (v31)

      *((_QWORD *)v27 + 2) = v30;
    }
  }
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  if (v22 <= 1)
    v32 = 1;
  else
    v32 = v22;
  if (v23 <= 1)
    v33 = 1;
  else
    v33 = v23;
  RGTextureDescriptorMake2D(v32, v33, 115, (uint64_t)&v48);
  v34 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v35 = 0x9DDFEA08EB382D69
      * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (unsigned __int16)v48)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * (v34 ^ (unsigned __int16)v48)));
  v36 = 0x9DDFEA08EB382D69 * (v35 ^ (v35 >> 47));
  v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))))) ^ ((0x9DDFEA08EB382D69 * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))))) >> 47));
  v38 = CFX::CrossFrameResourceManager::get(a4[4], v37);
  *(_QWORD *)(a1 + 392) = v38;
  if (!v38)
  {
    v39 = (uint64_t)a4[4];
    v40 = (_QWORD *)operator new();
    *v40 = &off_1E63D0448;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = 0;
    CFX::CrossFrameResourceManager::set(v39, v37, (uint64_t)v40);
    *(_QWORD *)(a1 + 392) = v40;
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v47[2] = v50;
    v47[3] = v51;
    v47[4] = v52;
    v47[0] = v48;
    v47[1] = v49;
    v54 = "pingPongTex0";
    v53 = 2;
    sub_1B1825D28((uint64_t *)&v54, (uint64_t)v47, &v53);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 16), v41);
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v46[2] = v50;
    v46[3] = v51;
    v46[4] = v52;
    v46[0] = v48;
    v46[1] = v49;
    v54 = "pingPongTex1";
    v53 = 2;
    sub_1B1825D28((uint64_t *)&v54, (uint64_t)v46, &v53);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 24), v42);
  }
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 256));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 384) + 24) == 0) + 16));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 24) + 16));
  return a1;
}

void sub_1B184C8D4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1B184C900(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  id Texture;
  id v7;
  id v8;
  const char *v9;
  const char *v10;
  const char *v11;
  id v12;
  id v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  __int128 v54;
  __n128 result;
  __int128 v56;
  uint64_t v57;
  int v58;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 16))
  {
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 376) + 312), 480, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 248));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 240));
    v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 288));
    objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)Texture, 1);
    objc_msgSend_setTexture_atIndex_(v5, v10, (uint64_t)v7, 2);
    objc_msgSend_setTexture_atIndex_(v5, v11, (uint64_t)v8, 3);
    v12 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
    v13 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 392)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 24)+ 16));
    v58 = 1065353216;
    objc_msgSend_setBytes_length_atIndex_(v5, v14, (uint64_t)&v58, 4, 9);
    objc_msgSend_setTexture_atIndex_(v5, v15, (uint64_t)v12, 0);
    objc_msgSend_setTexture_atIndex_(v5, v16, (uint64_t)v13, 10);
    v23 = *(_QWORD *)(a1 + 384);
    v24 = *(_QWORD *)(v23 + 16);
    if (!v24)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v17, v18, v19, v20, v21, v22, (uint64_t)"_ptr != NULL");
      v24 = *(_QWORD *)(v23 + 16);
    }
    v25 = sub_1B18FD774(v24);
    objc_msgSend_dispatch_onTexture2D_(v5, v26, v25, (uint64_t)v13);
    v58 = 0x40000000;
    objc_msgSend_setBytes_length_atIndex_(v5, v27, (uint64_t)&v58, 4, 9);
    objc_msgSend_setTexture_atIndex_(v5, v28, (uint64_t)v13, 0);
    objc_msgSend_setTexture_atIndex_(v5, v29, (uint64_t)v12, 10);
    v36 = *(_QWORD *)(a1 + 384);
    v37 = *(_QWORD *)(v36 + 16);
    if (!v37)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v30, v31, v32, v33, v34, v35, (uint64_t)"_ptr != NULL");
      v37 = *(_QWORD *)(v36 + 16);
    }
    v38 = sub_1B18FD774(v37);
    objc_msgSend_dispatch_onTexture2D_(v5, v39, v38, (uint64_t)v13);
    v58 = 1082130432;
    objc_msgSend_setBytes_length_atIndex_(v5, v40, (uint64_t)&v58, 4, 9);
    objc_msgSend_setTexture_atIndex_(v5, v41, (uint64_t)v12, 0);
    objc_msgSend_setTexture_atIndex_(v5, v42, (uint64_t)v13, 10);
    v49 = *(_QWORD *)(a1 + 384);
    v50 = *(_QWORD *)(v49 + 16);
    if (!v50)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v43, v44, v45, v46, v47, v48, (uint64_t)"_ptr != NULL");
      v50 = *(_QWORD *)(v49 + 16);
    }
    v51 = sub_1B18FD774(v50);
    objc_msgSend_dispatch_onTexture2D_(v5, v52, v51, (uint64_t)v13);
    v53 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 312);
    v54 = *(_OWORD *)(v53 + 272);
    *(_OWORD *)(v53 + 320) = *(_OWORD *)(v53 + 256);
    *(_OWORD *)(v53 + 336) = v54;
    result = *(__n128 *)(v53 + 288);
    v56 = *(_OWORD *)(v53 + 304);
    *(__n128 *)(v53 + 352) = result;
    *(_OWORD *)(v53 + 368) = v56;
    v57 = *(_QWORD *)(a1 + 384);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 312) + 396);
    *(_BYTE *)(v57 + 24) ^= 1u;
  }
  return result;
}

CFX::RG::Pass *sub_1B184CBA4(CFX::RG::RenderGraphContext *a1, uint64_t *a2)
{
  uint64_t *v4;
  CFX::RG::Pass *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  CFX::RG::Resource *v11;
  uint64_t *v12;
  CFX::RG::Resource *v13;
  CFX::RG::Resource *v14;

  v4 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  v5 = (CFX::RG::Pass *)sub_1B184CCDC(v4, (CFX::CrossFrameResourceManager **)a1, (uint64_t)a2);
  v6 = *((_QWORD *)v5 + 48);
  v7 = *(_QWORD *)(v6 + 8 * *(unsigned __int8 *)(v6 + 592) + 576);
  a2[36] = *(_QWORD *)(v6 + 600);
  a2[37] = v7;
  v8 = (uint64_t *)sub_1B184CD30(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  CFX::RG::Pass::dependsOn(v8, v5);
  a2[38] = *(_QWORD *)(v8[49] + 24);
  v9 = (uint64_t *)sub_1B184CD84(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  CFX::RG::Pass::dependsOn(v9, (CFX::RG::Pass *)v8);
  v10 = (uint64_t *)sub_1B184CDD8(v4, (CFX::CrossFrameResourceManager **)a1, (uint64_t)a2);
  v11 = (CFX::RG::Resource *)v9[49];
  v10[49] = (uint64_t)v11;
  CFX::RG::Pass::readFrom(v10, v11);
  CFX::RG::Pass::dependsOn(v10, (CFX::RG::Pass *)v9);
  v12 = (uint64_t *)sub_1B184CE2C(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  v13 = (CFX::RG::Resource *)v10[51];
  v12[50] = (uint64_t)v13;
  CFX::RG::Pass::readFrom(v12, v13);
  CFX::RG::Pass::dependsOn(v12, (CFX::RG::Pass *)v10);
  v14 = *(CFX::RG::Resource **)(v12[49] + 8 * (*(_BYTE *)(v12[48] + 24) == 0) + 16);
  v10[50] = (uint64_t)v14;
  CFX::RG::Pass::readFrom(v10, v14);
  a2[35] = *(_QWORD *)(v12[49] + 8 * *(unsigned __int8 *)(v12[48] + 24) + 16);
  return v5;
}

uint64_t sub_1B184CCDC(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B184D370(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B184CD30(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B184D3CC(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B184CD84(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B184D428(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B184CDD8(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B184D484(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B184CE2C(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B184D4E0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B184CE84(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B184CEAC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B184CED4(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B184CEFC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B184CF24(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B184CF48(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B184D010(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63D0398;
  for (i = 3; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B184D058(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63D0398;
  v2 = 3;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

_QWORD *sub_1B184D0B0(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63D03B8;
  for (i = 3; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B184D0F8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63D03B8;
  v2 = 3;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

_QWORD *sub_1B184D150(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CFFB8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B184D188(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CFFB8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B184D1D0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63D0528;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B184D208(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63D0528;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B184D250(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63D0428;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B184D288(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63D0428;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B184D2D0(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63D0448;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  return a1;
}

void sub_1B184D318(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63D0448;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B184D370(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x198u, 8u);
  return sub_1B184B074(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B184D3CC(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  return sub_1B184B894(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B184D428(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  return sub_1B184BE70(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B184D484(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B184C1C8(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B184D4E0(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A8u, 8u);
  return sub_1B184C564(v8, *a3, a3[1], a4, a5);
}

void sub_1B184D53C(id a1)
{

}

id sub_1B184D554(id obj)
{
  return objc_storeWeak(&qword_1ED4BFF30, obj);
}

void sub_1B184D580(void *a1)
{
  id v1;
  id WeakRetained;

  v1 = a1;
  WeakRetained = objc_loadWeakRetained(&qword_1ED4BFF30);

  if (WeakRetained == v1)
    objc_storeWeak(&qword_1ED4BFF30, 0);
}

id sub_1B184D5D8(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  id v8;
  id v9;
  VFXDisplayLink *v10;
  const char *v11;
  void *v12;
  _QWORD v14[4];
  id v15;
  id location;

  v8 = a3;
  v9 = a4;
  objc_initWeak(&location, a1);
  v10 = [VFXDisplayLink alloc];
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1B184D6DC;
  v14[3] = &unk_1E63D71D0;
  objc_copyWeak(&v15, &location);
  v12 = (void *)objc_msgSend_initWithQueue_screen_policy_block_(v10, v11, (uint64_t)v8, (uint64_t)v9, a5, v14);
  objc_destroyWeak(&v15);
  objc_destroyWeak(&location);

  return v12;
}

void sub_1B184D6B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B184D6DC(uint64_t a1, double a2)
{
  id WeakRetained;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v7 = WeakRetained;
    objc_msgSend_VFX_displayLinkCallback_(WeakRetained, v4, v5, v6, a2);
    WeakRetained = v7;
  }

}

void sub_1B184D8FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B184D92C(uint64_t a1)
{
  id *v2;
  id WeakRetained;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  OS_os_workgroup *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  id v36;
  os_workgroup_join_token_opaque_s v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v2 = (id *)(a1 + 48);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  memset(&v37, 0, sizeof(v37));
  if (WeakRetained)
  {
    v4 = (void *)objc_opt_class();
    v15 = objc_msgSend_usesSeparateWorkGroup(v4, v5, v6, v7);
    if (v15)
    {
      sub_1B17C4408(0, (uint64_t)CFSTR("Info: [VFXView] Using separate work group"), v9, v10, v11, v12, v13, v14, *(uint64_t *)&v37.sig);
      os_workgroup_attr_set_flags();
      v16 = (OS_os_workgroup *)os_workgroup_create();
      os_workgroup_join(v16, &v37);
    }
    else
    {
      v16 = 0;
    }
    objc_msgSend_renderer(WeakRetained, v8, v9, v10, *(_OWORD *)&v37.sig, *(_OWORD *)&v37.opaque[12], *(_QWORD *)&v37.opaque[28], v38);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend__renderingQueue(v17, v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_VFX_setupDisplayLinkWithQueue_screen_policy_(WeakRetained, v22, (uint64_t)v21, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 56));
    v23 = (void *)objc_claimAutoreleasedReturnValue();

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }

  objc_msgSend_currentRunLoop(MEMORY[0x1E0C99E58], v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  pthread_setname_np("com.apple.VFXview-renderer");
  pthread_set_fixedpriority_self();
  v28 = objc_loadWeakRetained(v2);

  if (v28)
  {
    v29 = *MEMORY[0x1E0C99748];
    do
    {
      v30 = (void *)MEMORY[0x1B5E23520]();
      objc_msgSend_dateWithTimeIntervalSinceNow_(MEMORY[0x1E0C99D68], v31, v32, v33, 1.0);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_runMode_beforeDate_(v27, v35, v29, (uint64_t)v34);

      objc_autoreleasePoolPop(v30);
      v36 = objc_loadWeakRetained(v2);

    }
    while (v36);
  }
  if (v15)
    os_workgroup_leave(v16, &v37);

}

uint64_t sub_1B184DB20(uint64_t a1)
{
  pthread_t v2;

  v2 = 0;
  return pthread_create(&v2, (const pthread_attr_t *)(a1 + 32), (void *(__cdecl *)(void *))sub_1B184DB54, *(void **)(a1 + 96));
}

void sub_1B184DB54(void *a1)
{
  void (**v1)(_QWORD);
  uint64_t v2;
  void *v3;

  v1 = a1;
  if (qword_1ED4C0248[0] != -1)
    dispatch_once(qword_1ED4C0248, &unk_1E63D0CB0);
  v2 = pthread_setspecific(qword_1ED4C0240, v1);
  v3 = (void *)MEMORY[0x1B5E23520](v2);
  v1[2](v1);
  objc_autoreleasePoolPop(v3);
  pthread_exit(0);
}

uint64_t sub_1B184DBC4()
{
  return pthread_key_create((pthread_key_t *)&qword_1ED4C0240, (void (__cdecl *)(void *))j___Block_release);
}

id sub_1B184E0A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = (id)objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E6478AD8, a4);
  qword_1EEF65E88 = (uint64_t)result;
  return result;
}

void sub_1B184E160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B184E178(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t result;

  v6 = (void *)objc_msgSend_name(a2, (const char *)a2, (uint64_t)a3, a4);
  result = objc_msgSend_isEqualToString_(v6, v7, *(_QWORD *)(a1 + 32), v8);
  if ((_DWORD)result)
  {
    if (++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 2)
      *a3 = 1;
  }
  return result;
}

void sub_1B184E81C(void *a1)
{
  objc_begin_catch(a1);
  objc_end_catch();
}

uint64_t sub_1B184EB98(uint64_t a1, const char *a2)
{
  return objc_msgSend__applyUnsharing_alreadyShared_(*(void **)(a1 + 32), a2, (uint64_t)a2, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1B184EBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel__applyOverride_forKeyPath_, a3, a2);
}

uint64_t sub_1B184F0D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t result;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;

  if (objc_msgSend_light(a2, (const char *)a2, a3, a4))
  {
    v8 = (void *)objc_msgSend_light(a2, v5, v6, v7);
    v12 = (id)objc_msgSend_copy(v8, v9, v10, v11);
    objc_msgSend_setLight_(a2, v13, (uint64_t)v12, v14);
  }
  result = objc_msgSend_camera(a2, v5, v6, v7);
  if (result)
  {
    v19 = (void *)objc_msgSend_camera(a2, v16, v17, v18);
    v23 = (id)objc_msgSend_copy(v19, v20, v21, v22);
    return objc_msgSend_setCamera_(a2, v24, (uint64_t)v23, v25);
  }
  return result;
}

BOOL sub_1B184F550(uint64_t a1, unsigned int a2, int a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  float *v37;
  uint64_t v38;

  v8 = a3;
  bzero(a4, 4 * a3);
  if ((int)a2 < 1)
  {
    v10 = 1;
  }
  else
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = (a3 + 1);
    v13 = 4 * a2;
    v14 = 4 * (a2 - 1) * a2;
    v15 = v14 + 4;
    v16 = 1;
    v17 = a1;
    v18 = a1;
    do
    {
      v19 = v9 + 1;
      v20 = v9 * a2;
      if (v9 + 1 >= (unint64_t)a2)
      {
        v22 = v9;
      }
      else
      {
        v21 = 1;
        v22 = v9;
        do
        {
          if (fabsf(*(float *)(v18 + 4 * v21)) > fabsf(*(float *)(a1 + 4 * (v20 + v22))))
            v22 = v9 + v21;
          ++v21;
        }
        while (v9 - a2 + v21);
      }
      if (v9 != v22 && v9 <= v8)
      {
        v23 = 0;
        v24 = v17 + 4 * v22;
        v25 = v12;
        do
        {
          v26 = *(_DWORD *)(v18 + v23);
          *(_DWORD *)(v18 + v23) = *(_DWORD *)(v24 + v23);
          *(_DWORD *)(v24 + v23) = v26;
          v23 += v13;
          --v25;
        }
        while (v25);
      }
      v27 = v9 + (int)(v11 * a2);
      if (fabsf(*(float *)(a1 + 4 * v27)) >= 0.000001)
      {
        v28 = v15;
        v29 = v16;
        if (v19 < a2)
        {
          do
          {
            v30 = a1;
            v31 = a2;
            do
            {
              --v31;
              *(float *)(v30 + v28) = *(float *)(v30 + v28)
                                    - (float)((float)(*(float *)(v30 + v14) * *(float *)(a1 + 4 * (v29 + v20)))
                                            / *(float *)(a1 + 4 * v27));
              v30 -= 4 * a2;
            }
            while (v31 > v9);
            ++v29;
            v28 += 4;
          }
          while (v29 != a2);
        }
      }
      else if (v9 < v8)
      {
        return v10;
      }
      ++v11;
      --v12;
      ++v16;
      v18 += v13 + 4;
      v17 += v13;
      v15 += 4;
      v14 += 4;
      ++v9;
      v10 = v19 >= a2;
    }
    while (v19 != a2);
  }
  if (a3 >= 1)
  {
    v32 = 0;
    v33 = a1 + 4 * (v8 + (int)v8 * (uint64_t)(int)a2) - 4;
    v34 = 4 * (int)a2;
    v35 = v8;
    do
    {
      v36 = 0.0;
      if (v35 < v8)
      {
        v37 = (float *)v33;
        v38 = v32;
        do
        {
          v36 = v36 + (float)(*v37 * *((float *)a4 + v8 + v38));
          v37 = (float *)((char *)v37 + v34);
          ++v38;
        }
        while ((_DWORD)v38);
      }
      *((float *)a4 + v35 - 1) = (float)(*(float *)(a1 + 4 * (v35 - 1 + (int)(a3 * a2))) - v36)
                               / *(float *)(a1 + 4 * (int)((a2 + 1) * (v35 - 1)));
      --v32;
      v33 += v34 ^ 0xFFFFFFFFFFFFFFFCLL;
    }
    while (v35-- > 1);
  }
  return v10;
}

void sub_1B184FEBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10A0C400A278675);
  _Unwind_Resume(a1);
}

void sub_1B1850928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B1850954(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1B1850964(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

void sub_1B1850970(uint64_t a1, void *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id Weak;
  const char *v35;
  unsigned int *v36;
  unsigned int v37;

  prof_eventSmallData(1, (uint64_t)"Current CB creation to completion", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1202, *(unsigned int *)(a1 + 48) | 0x300000000);
  objc_msgSend_GPUEndTime(a2, v4, v5, v6);
  v8 = v7;
  objc_msgSend_GPUStartTime(a2, v9, v10, v11);
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) + 200) = v8 - v12;
  if (objc_msgSend_status(a2, v13, v14, v15) != 4)
  {
    objc_msgSend_commandBufferDidCompleteWithError_(*(void **)(*(_QWORD *)(a1 + 32) + 112), v16, (uint64_t)a2, v17);
    v21 = objc_msgSend_status(a2, v18, v19, v20);
    objc_msgSend_error(a2, v22, v23, v24);
    objc_msgSend_logs(a2, v25, v26, v27);
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Main command buffer execution failed with status %d, error: %@\n%@"), v28, v29, v30, v31, v32, v33, v21);
    Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 18512));
    objc_msgSend_renderContext_commandBufferDidCompleteWithError_(Weak, v35, *(_QWORD *)(a1 + 32), (uint64_t)a2);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
  v36 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 176);
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  prof_commit();
}

void sub_1B1850E08(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B1850E30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t result;

  v9 = *(void **)a1;
  if (!v9)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_encoder != nil");
    v9 = *(void **)a1;
  }
  result = objc_msgSend_endEncoding(v9, a2, a3, a4);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_1B1850E84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;

  objc_msgSend_kernelStartTime(a2, (const char *)a2, a3, a4);
  v7 = v6;
  objc_msgSend_kernelEndTime(a2, v8, v9, v10);
  v12 = v11;
  v13 = *(unsigned int *)(a1 + 32) | 0x300000000;
  v14 = prof_clockTicksFromSecondsMonotonic(v7);
  v15 = prof_clockTicksFromSecondsMonotonic(v12);
  prof_eventTimeRangeSmallData(v14, v15, (uint64_t)"Resource CB kernel time", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1256, v13);
  objc_msgSend_GPUStartTime(a2, v16, v17, v18);
  v20 = v19;
  objc_msgSend_GPUEndTime(a2, v21, v22, v23);
  v25 = v24;
  v26 = *(unsigned int *)(a1 + 32) | 0x300000000;
  v27 = prof_clockTicksFromSecondsMonotonic(v20);
  v28 = prof_clockTicksFromSecondsMonotonic(v25);
  prof_eventTimeRangeSmallData(v27, v28, (uint64_t)"Resource CB GPU time", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1257, v26);
}

uint64_t sub_1B1850F68(uint64_t a1)
{
  char isKindOfClass;
  const char *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = *(uint64_t (***)(_QWORD))(a1 + 32);
  if ((isKindOfClass & 1) == 0)
    return v4[2](v4);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v3, (uint64_t)&v10, (uint64_t)v14, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8++) + 16))();
      }
      while (v6 != v8);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v10, (uint64_t)v14, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B18510A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  double v6;
  double v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;

  objc_msgSend_kernelStartTime(a2, (const char *)a2, a3, a4);
  v7 = v6;
  objc_msgSend_kernelEndTime(a2, v8, v9, v10);
  v12 = v11;
  v13 = *(unsigned int *)(a1 + 40) | 0x300000000;
  v14 = prof_clockTicksFromSecondsMonotonic(v7);
  v15 = prof_clockTicksFromSecondsMonotonic(v12);
  prof_eventTimeRangeSmallData(v14, v15, (uint64_t)"Kernel time", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1288, v13);
  objc_msgSend_GPUStartTime(a2, v16, v17, v18);
  v20 = v19;
  objc_msgSend_GPUEndTime(a2, v21, v22, v23);
  v25 = v24;
  v26 = *(unsigned int *)(a1 + 40) | 0x300000000;
  v27 = prof_clockTicksFromSecondsMonotonic(v20);
  v28 = prof_clockTicksFromSecondsMonotonic(v25);
  prof_eventTimeRangeSmallData(v27, v28, (uint64_t)"CommandBuffer GPU time", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1289, v26);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 505))
  {
    v32 = (void *)objc_msgSend_sharedCaptureManager(MEMORY[0x1E0CC6A48], v29, v30, v31);
    objc_msgSend_stopCapture(v32, v33, v34, v35);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 505) = 0;
  }
}

uint64_t sub_1B18511B4(uint64_t a1)
{
  char isKindOfClass;
  const char *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = *(uint64_t (***)(_QWORD))(a1 + 32);
  if ((isKindOfClass & 1) == 0)
    return v4[2](v4);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v3, (uint64_t)&v10, (uint64_t)v14, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8++) + 16))();
      }
      while (v6 != v8);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v10, (uint64_t)v14, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B18512F4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  double v11;
  unint64_t v12;

  objc_msgSend_presentedTime(a2, (const char *)a2, a3, a4);
  if (v9 == 0.0)
  {
    prof_eventSmallData(2, (uint64_t)"Drawable present skipped", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1346, *(unsigned int *)(a1 + 32) | 0x300000000);
  }
  else
  {
    objc_msgSend_presentedTime(a2, v6, v7, v8);
    v10 = *(unsigned int *)(a1 + 32) | 0x300000000;
    v12 = prof_clockTicksFromSecondsMonotonic(v11);
    prof_eventTimeSmallData(2, v12, (uint64_t)"Presented time", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1348, v10);
  }
}

uint64_t sub_1B1851384(uint64_t a1)
{
  char isKindOfClass;
  const char *v3;
  uint64_t (**v4)(_QWORD);
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  objc_opt_class();
  isKindOfClass = objc_opt_isKindOfClass();
  v4 = *(uint64_t (***)(_QWORD))(a1 + 32);
  if ((isKindOfClass & 1) == 0)
    return v4[2](v4);
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v3, (uint64_t)&v10, (uint64_t)v14, 16);
  if (result)
  {
    v6 = result;
    v7 = *(_QWORD *)v11;
    do
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v11 != v7)
          objc_enumerationMutation(v4);
        (*(void (**)(void))(*(_QWORD *)(*((_QWORD *)&v10 + 1) + 8 * v8++) + 16))();
      }
      while (v6 != v8);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v4, v9, (uint64_t)&v10, (uint64_t)v14, 16);
      v6 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B18517BC(uint64_t a1, void *a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id Weak;
  const char *v26;

  prof_eventSmallData(1, (uint64_t)"Resource CB creation to completion", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/NewRenderer/VFXMTLRenderContext.mm", 1706, *(unsigned int *)(*(_QWORD *)(a1 + 32) + 8) | 0x300000000);
  if (objc_msgSend_status(a2, v4, v5, v6) != 4)
  {
    objc_msgSend_commandBufferDidCompleteWithError_(*(void **)(*(_QWORD *)(a1 + 32) + 112), v7, (uint64_t)a2, v8);
    v12 = objc_msgSend_status(a2, v9, v10, v11);
    objc_msgSend_error(a2, v13, v14, v15);
    objc_msgSend_logs(a2, v16, v17, v18);
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Resource command buffer execution failed with status %d, error: %@\n%@"), v19, v20, v21, v22, v23, v24, v12);
    Weak = objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 18512));
    objc_msgSend_renderContext_commandBufferDidCompleteWithError_(Weak, v26, *(_QWORD *)(a1 + 32), (uint64_t)a2);
  }
  prof_commit();
}

double sub_1B1851BC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  double result;

  v4 = *(_QWORD *)(a1 + 32);
  if (v4)
  {
    v6 = objc_msgSend_contents(a2, (const char *)a2, a3, a4);
    v10 = objc_msgSend_length(a2, v7, v8, v9);
    *(_QWORD *)&result = sub_1B18494D4(v4, v6, v10, v11, v12, v13, v14, v15, v16).n128_u64[0];
  }
  return result;
}

__n128 sub_1B1853044(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  unsigned int v11;
  __n128 v19;
  float32x2_t v20;
  float v21;
  __n128 result;
  float v23;
  __n128 v24;
  uint64x2_t v25;
  char v26;

  v26 = 0;
  v25 = 0uLL;
  sub_1B181F244(a1, (uint64_t)&v26, (uint64_t)&v25.i64[1], (uint64_t)&v25, a5, a6, a7, a8);
  v9 = sub_1B1815AB8((uint64_t)a2);
  v11 = v9;
  if (!v26)
  {
    switch(v9)
    {
      case 4u:
        _Q0.n128_u64[0] = 1065353216;
        goto LABEL_14;
      case 3u:
        _Q0.n128_u64[0] = 0x3F80000000000000;
LABEL_16:
        v24 = _Q0;
        __asm { FMOV            V0.2S, #1.0 }
        goto LABEL_19;
      case 2u:
        goto LABEL_11;
    }
LABEL_17:
    __asm { FMOV            V0.2S, #1.0 }
    goto LABEL_18;
  }
  if (v9 == 4)
    goto LABEL_17;
  if (v9 != 3)
  {
    if (v9 == 2)
    {
      _Q0.n128_u64[0] = 0x3F80000000000000;
LABEL_14:
      v24 = _Q0;
      __asm { FMOV            V0.2S, #1.0 }
      goto LABEL_19;
    }
    _Q0.n128_u64[0] = 1065353216;
    goto LABEL_16;
  }
LABEL_11:
  __asm { FMOV            V0.2S, #1.0 }
  _Q0.n128_u64[0] = 0;
LABEL_18:
  v24 = _Q0;
LABEL_19:
  v19 = sub_1B1815A98(a2);
  v19.n128_u64[0] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
  v20 = vmul_f32((float32x2_t)vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(v11 < 3), 0x1FuLL)), (int8x8_t)vrev64_s32((int32x2_t)v19.n128_u64[0]), (int8x8_t)v19.n128_u64[0]), vcvt_f32_f64(vcvtq_f64_u64(v25)));
  if (v20.f32[0] <= v20.f32[1])
  {
    if (v20.f32[0] < v20.f32[1])
    {
      v23 = v20.f32[0] / v20.f32[1];
      result = v24;
      result.n128_f32[0] = (float)((float)(v24.n128_f32[0] + -0.5) * v23) + 0.5;
    }
    else
    {
      return v24;
    }
  }
  else
  {
    v21 = v20.f32[1] / v20.f32[0];
    result = v24;
    result.n128_f32[1] = (float)((float)(v24.n128_f32[1] + -0.5) * v21) + 0.5;
  }
  return result;
}

uint64_t sub_1B1853864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t result;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD v88[10];
  uint64_t v89;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"rendererElement");
  v11 = sub_1B17C2DEC(a2);
  v87 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 544);
  if (sub_1B17C2F38(a2, v13, v14, v15, v16, v17, v18, v19))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Hidden nodes should have been removed from the pipeline already"), v21, v22, v23, v24, v25, v26, (uint64_t)"CFXRendererElementIsHidden(rendererElement) != true");
  if (v11 && sub_1B186A4D4(v11, v20, v21, v22, v23, v24, v25, v26) <= 0.0 && (*(_WORD *)(a2 + 80) & 7) != 4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Fully transparents objects should have been removed from the pipeline already"), v27, v28, v29, v30, v31, v32, (uint64_t)"theNode==NULL || CFXNodeGetOpacity(theNode) > 0 || (rendererElement->_renderableAttributeKind == kCFXRenderableAttributeKindVFXCore)");
  if (sub_1B17C2B78(a2))
  {
    v40 = (_BYTE *)(a1 + 18552);
    if (!*(_QWORD *)(a2 + 48))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. RenderElement external encoder is nil"), v34, v35, v36, v37, v38, v39, (uint64_t)"rendererElement->_handler.encoder");
    ++*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8);
    if (a3)
    {
      *(_WORD *)(a1 + 18556) = *(_WORD *)(a3 + 13280);
      result = sub_1B1814B88(v87, (uint64_t)v33, v34, v35, v36, v37, v38, v39);
      *(_DWORD *)(a1 + 18560) = result;
      v42 = *(unsigned __int8 *)(a3 + 12769);
      *v40 = v42;
      if (v42 && *(__int16 *)(a2 + 80) < 0)
        return result;
    }
    else
    {
      *(_WORD *)(a1 + 18556) = 0;
      *(_DWORD *)(a1 + 18560) = sub_1B1814B88(v87, (uint64_t)v33, v34, v35, v36, v37, v38, v39);
      *v40 = 0;
    }
    (*(void (**)(void))(*(_QWORD *)(a2 + 48) + 16))();
    return objc_msgSend__clearRenderCaches((void *)a1, v81, v82, v83);
  }
  v43 = *(_QWORD *)(a2 + 40);
  if (!v43)
  {
    v84 = *(_QWORD *)(a2 + 32);
    if (!v84)
      return objc_msgSend_drawRenderElement_withPass_((void *)a1, v33, a2, v12);
    v43 = sub_1B18786DC(v84, (uint64_t)v33, v34, v35, v36, v37, v38, v39);
    if (!v43)
      return objc_msgSend_drawRenderElement_withPass_((void *)a1, v33, a2, v12);
  }
  if (a3 && *(_QWORD *)a3 && (*(_BYTE *)(*(_QWORD *)a3 + 186) & 0x10) != 0)
    return objc_msgSend_drawRenderElement_withPass_((void *)a1, v33, a2, v12);
  result = sub_1B18D62C8();
  if (v43 != result)
  {
    v86 = sub_1B17C2F14(a2);
    result = sub_1B18D63A8(v43, v44, v45, v46, v47, v48, v49, v50);
    if (result >= 1)
    {
      v57 = result;
      for (i = 0; i != v57; ++i)
      {
        v59 = sub_1B18D6464(v43, i, v51, v52, v53, v54, v55, v56);
        result = sub_1B19AD094(v59, v60, v61, v62, v63, v64, v65, v66);
        if ((result & 1) == 0)
        {
          v68 = sub_1B19ACF10(v59, v67, v51, v52, v53, v54, v55, v56);
          v88[0] = v59;
          v88[1] = v43;
          v88[2] = v11;
          v88[3] = v87;
          v88[5] = 0;
          v88[6] = 0;
          v69 = *(_QWORD *)(v59 + 280);
          v88[4] = a3 + 160;
          v88[7] = v69;
          v88[8] = a2;
          v88[9] = *(unsigned __int8 *)(a3 + 25);
          v89 = 0;
          LOWORD(v89) = *(_WORD *)(a3 + 27);
          sub_1B19AE6DC((uint64_t)v88);
          switch(v68)
          {
            case 1:
            case 7:
              sub_1B19AE6F0((uint64_t)v88);
              break;
            case 2:
              v77 = sub_1B19AF264(v59, (uint64_t)v70, v71, v72, v73, v74, v75, v76);
              if (v77)
                v80 = v77;
              else
                v80 = v86;
              if (v80)
                objc_msgSend_setRasterizerStates_((void *)a1, v78, v80, v79);
              objc_msgSend_drawRenderElement_withPass_((void *)a1, v78, a2, v59);
              break;
            case 3:
            case 6:
            case 8:
              break;
            case 4:
              objc_msgSend_drawFullScreenQuadForPass_((void *)a1, v70, v59, v72);
              break;
            default:
              sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXEngineContextRenderRenderGraph - unknown draw instruction"), v71, v72, v73, v74, v75, v76, v85);
              break;
          }
          result = sub_1B19AE704((uint64_t)v88);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B18545A0()
{
  unsigned __int8 v0;
  unsigned __int8 *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1ED4BB4B0);
  v1 = (unsigned __int8 *)&unk_1ED4BB000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1ED4BB4B0);
    v1 = (unsigned __int8 *)&unk_1ED4BB000;
    if (v3)
    {
      byte_1ED4BB4B8 = 17;
      __cxa_guard_release(&qword_1ED4BB4B0);
      v1 = (_BYTE *)&unk_1ED4BB000;
    }
  }
  return v1[1208];
}

uint64_t sub_1B185659C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x2x2_t v27;
  float32x2x2_t v28;
  int32x4_t v29;
  int32x4_t v30;
  float32x4_t *v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float *v36;
  float *v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _OWORD *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _OWORD *v48;
  _OWORD *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t i;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[32];
  _OWORD v58[2];
  _OWORD v59[4];

  v8 = result;
  *(_QWORD *)(*(_QWORD *)(result + 32) + 16416) = a2;
  if (a2)
  {
    v10 = (_OWORD *)sub_1B18D138C(*(_QWORD *)(*(_QWORD *)(result + 32) + 568), *(_DWORD *)(a2 + 88), a3, a4, a5, a6, a7, a8);
    v18 = v10[1];
    v19 = v10[2];
    v20 = v10[3];
    v21 = *(_OWORD **)(v8 + 32);
    v21[822] = *v10;
    v21[823] = v18;
    v21[824] = v19;
    v21[825] = v20;
    v22 = *(_QWORD *)(v8 + 48);
    if (v22 && *(_DWORD *)(v8 + 72) == 1)
    {
      v56 = 0;
      v23 = sub_1B18E5458(v22, &v56);
      if (v56 != 3)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. there should be exactly one transposed matrix in here"), v12, v13, v14, v15, v16, v17, (uint64_t)"vectorCount == 3");
      v24 = 0;
      v25 = *(int32x4_t *)(v23 + 16);
      v26 = *(int32x4_t *)(v23 + 32);
      v27 = (float32x2x2_t)vzip1q_s32(*(int32x4_t *)v23, v26);
      v28 = (float32x2x2_t)vzip2q_s32(*(int32x4_t *)v23, v26);
      v29 = vzip1q_s32(v25, (int32x4_t)0);
      v30 = vzip2q_s32(v25, (int32x4_t)xmmword_1B2244E20);
      v31 = *(float32x4_t **)(v8 + 32);
      v32 = v31[822];
      v33 = v31[823];
      v34 = v31[824];
      v35 = v31[825];
      v36 = (float *)v57;
      vst2_f32(v36, v27);
      v36 += 4;
      *(int32x4_t *)v36 = vzip2q_s32((int32x4_t)v27, v29);
      v37 = (float *)v58;
      vst2_f32(v37, v28);
      v58[1] = vzip2q_s32((int32x4_t)v28, v30);
      do
      {
        v59[v24 / 0x10] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v32, COERCE_FLOAT(*(_OWORD *)&v57[v24])), v33, *(float32x2_t *)&v57[v24], 1), v34, *(float32x4_t *)&v57[v24], 2), v35, *(float32x4_t *)&v57[v24], 3);
        v24 += 16;
      }
      while (v24 != 64);
      v38 = (float32x4_t)v59[1];
      v39 = (float32x4_t)v59[2];
      v40 = (float32x4_t)v59[3];
      v31[822] = (float32x4_t)v59[0];
      v31[823] = v38;
      v31[824] = v39;
      v31[825] = v40;
    }
    result = sub_1B186B928(a2, v11, v12, v13, v14, v15, v16, v17);
    v41 = *(_OWORD *)(result + 16);
    v42 = *(_OWORD *)(result + 32);
    v43 = *(_OWORD *)(result + 48);
    v44 = *(_OWORD **)(v8 + 32);
    v44[826] = *(_OWORD *)result;
    v44[827] = v41;
    v44[828] = v42;
    v44[829] = v43;
  }
  else
  {
    v45 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 16);
    v46 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 32);
    v47 = *(_OWORD *)(MEMORY[0x1E0C83FF0] + 48);
    v48 = *(_OWORD **)(result + 32);
    v48[822] = *MEMORY[0x1E0C83FF0];
    v48[823] = v45;
    v48[824] = v46;
    v48[825] = v47;
    v49 = *(_OWORD **)(result + 32);
    v49[829] = v49[825];
    v49[828] = v49[824];
    v49[827] = v49[823];
    v49[826] = v49[822];
  }
  *(_DWORD *)(*(_QWORD *)(v8 + 32) + 16424) = 0;
  *(_QWORD *)(*(_QWORD *)(v8 + 32) + 16432) = *(_QWORD *)(v8 + 56);
  if (*(_DWORD *)(v8 + 76))
  {
    v50 = 0;
    do
    {
      result = objc_msgSend_semanticsCount(*(void **)(v8 + 40), (const char *)a2, a3, a4);
      if (result >= 1)
      {
        v51 = 0;
        for (i = 0; i < result; ++i)
        {
          (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v8 + 40) + 48) + v51) + 16))();
          result = objc_msgSend_semanticsCount(*(void **)(v8 + 40), v53, v54, v55);
          v51 += 16;
        }
      }
      ++v50;
    }
    while (v50 < *(unsigned int *)(v8 + 76));
  }
  return result;
}

__n128 sub_1B1857748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v5;
  __int128 v6;

  result = *(__n128 *)(a4 + 13152);
  v5 = *(_OWORD *)(a4 + 13168);
  v6 = *(_OWORD *)(a4 + 13200);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a4 + 13184);
  *(_OWORD *)(a2 + 48) = v6;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  return result;
}

void sub_1B1857764(uint64_t a1, simd_float4x4 *a2, uint64_t a3, uint64_t a4)
{
  *a2 = __invert_f4(*(simd_float4x4 *)(a4 + 13152));
}

__n128 sub_1B185779C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  uint64_t v22;
  __n128 result;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];
  _OWORD v27[4];

  v6 = *(_DWORD *)(a4 + 16424);
  if ((v6 & 2) == 0)
  {
    *(_DWORD *)(a4 + 16424) = v6 | 2;
    if (a6)
    {
      v7 = 0;
      v8 = *(_OWORD *)(a4 + 13152);
      v9 = *(_OWORD *)(a4 + 13168);
      v10 = *(_OWORD *)(a4 + 13184);
      v11 = *(_OWORD *)(a4 + 13200);
      do
      {
        v12 = 0;
        v13 = (float32x4_t *)(a4 + 592 + 784 * v7);
        v14 = *v13;
        v15 = v13[1];
        v16 = v13[2];
        v17 = v13[3];
        v26[0] = v8;
        v26[1] = v9;
        v26[2] = v10;
        v26[3] = v11;
        do
        {
          v27[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v26[v12])), v15, *(float32x2_t *)&v26[v12], 1), v16, (float32x4_t)v26[v12], 2), v17, (float32x4_t)v26[v12], 3);
          ++v12;
        }
        while (v12 != 4);
        v18 = v27[1];
        v19 = v27[2];
        v20 = v27[3];
        v21 = (_OWORD *)(a4 + 14304 + (v7 << 6));
        *v21 = v27[0];
        v21[1] = v18;
        v21[2] = v19;
        v21[3] = v20;
        ++v7;
      }
      while (v7 != a6);
    }
  }
  v22 = a4 + ((unint64_t)a5 << 6);
  result = *(__n128 *)(v22 + 14304);
  v24 = *(_OWORD *)(v22 + 14320);
  v25 = *(_OWORD *)(v22 + 14352);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v22 + 14336);
  *(_OWORD *)(a2 + 48) = v25;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v24;
  return result;
}

void sub_1B1857870(uint64_t a1, simd_float4x4 *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD v22[4];
  _OWORD v23[4];

  v6 = *(_DWORD *)(a4 + 16424);
  if ((v6 & 2) == 0)
  {
    *(_DWORD *)(a4 + 16424) = v6 | 2;
    if (a6)
    {
      v7 = 0;
      v8 = *(_OWORD *)(a4 + 13152);
      v9 = *(_OWORD *)(a4 + 13168);
      v10 = *(_OWORD *)(a4 + 13184);
      v11 = *(_OWORD *)(a4 + 13200);
      do
      {
        v12 = 0;
        v13 = (float32x4_t *)(a4 + 592 + 784 * v7);
        v14 = *v13;
        v15 = v13[1];
        v16 = v13[2];
        v17 = v13[3];
        v22[0] = v8;
        v22[1] = v9;
        v22[2] = v10;
        v22[3] = v11;
        do
        {
          v23[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v22[v12])), v15, *(float32x2_t *)&v22[v12], 1), v16, (float32x4_t)v22[v12], 2), v17, (float32x4_t)v22[v12], 3);
          ++v12;
        }
        while (v12 != 4);
        v18 = v23[1];
        v19 = v23[2];
        v20 = v23[3];
        v21 = (_OWORD *)(a4 + 14304 + (v7 << 6));
        *v21 = v23[0];
        v21[1] = v18;
        v21[2] = v19;
        v21[3] = v20;
        ++v7;
      }
      while (v7 != a6);
    }
  }
  *a2 = __invert_f4(*(simd_float4x4 *)(a4 + ((unint64_t)a5 << 6) + 14304));
}

__n128 sub_1B1857960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, unsigned int a6)
{
  int *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  __int128 v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  __n128 result;
  __int128 v45;
  __int128 v46;
  _OWORD v47[4];
  _OWORD v48[4];

  v6 = (int *)(a4 + 16424);
  v7 = *(_DWORD *)(a4 + 16424);
  if ((v7 & 1) == 0)
  {
    *v6 = v7 | 1;
    if ((v7 & 2) == 0)
    {
      *v6 = v7 | 3;
      if (!a6)
        goto LABEL_11;
      v8 = 0;
      v9 = *(_OWORD *)(a4 + 13152);
      v10 = *(_OWORD *)(a4 + 13168);
      v11 = *(_OWORD *)(a4 + 13184);
      v12 = *(_OWORD *)(a4 + 13200);
      do
      {
        v13 = 0;
        v14 = (float32x4_t *)(a4 + 592 + 784 * v8);
        v15 = *v14;
        v16 = v14[1];
        v17 = v14[2];
        v18 = v14[3];
        v47[0] = v9;
        v47[1] = v10;
        v47[2] = v11;
        v47[3] = v12;
        do
        {
          v48[v13] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(v47[v13])), v16, *(float32x2_t *)&v47[v13], 1), v17, (float32x4_t)v47[v13], 2), v18, (float32x4_t)v47[v13], 3);
          ++v13;
        }
        while (v13 != 4);
        v19 = v48[1];
        v20 = v48[2];
        v21 = v48[3];
        v22 = (_OWORD *)(a4 + 14304 + (v8 << 6));
        *v22 = v48[0];
        v22[1] = v19;
        v22[2] = v20;
        v22[3] = v21;
        ++v8;
      }
      while (v8 != a6);
    }
    if (a6)
    {
      v23 = a4 + 13280;
      v24 = a6;
      __asm { FMOV            V0.4S, #1.0 }
      do
      {
        v30 = *(float32x4_t *)(v23 + 1024);
        v31 = *(float32x4_t *)(v23 + 1040);
        v32 = *(float32x4_t *)(v23 + 1056);
        v33 = *(_OWORD *)(v23 + 1072);
        v34 = (int32x4_t)vmulq_f32(v30, v30);
        v35 = (int32x4_t)vmulq_f32(v31, v31);
        v36 = (int32x4_t)vmulq_f32(v32, v32);
        v37 = vzip2q_s32(v34, v36);
        v38 = (float32x4_t)vzip1q_s32(vzip1q_s32(v34, v36), v35);
        v39 = (float32x4_t)vtrn2q_s32(v34, v35);
        v39.i32[2] = v36.i32[1];
        v40 = vaddq_f32((float32x4_t)vzip1q_s32(v37, vdupq_laneq_s32(v35, 2)), vaddq_f32(v38, v39));
        v41 = vceqzq_f32(v40);
        v41.i32[3] = 0;
        v42 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v41), (int8x16_t)v40, (int8x16_t)vdivq_f32(_Q0, v40));
        *(float32x4_t *)v23 = vmulq_n_f32(v30, v42.f32[0]);
        *(float32x4_t *)(v23 + 16) = vmulq_lane_f32(v31, *(float32x2_t *)v42.f32, 1);
        *(float32x4_t *)(v23 + 32) = vmulq_laneq_f32(v32, v42, 2);
        *(_OWORD *)(v23 + 48) = v33;
        v23 += 64;
        --v24;
      }
      while (v24);
    }
  }
LABEL_11:
  v43 = a4 + ((unint64_t)a5 << 6);
  result = *(__n128 *)(v43 + 13280);
  v45 = *(_OWORD *)(v43 + 13296);
  v46 = *(_OWORD *)(v43 + 13328);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v43 + 13312);
  *(_OWORD *)(a2 + 48) = v46;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v45;
  return result;
}

__n128 sub_1B1857AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  uint64_t v22;
  __n128 result;
  __int128 v24;
  __int128 v25;
  _OWORD v26[4];
  _OWORD v27[4];

  v6 = *(_DWORD *)(a4 + 16424);
  if ((v6 & 4) == 0)
  {
    *(_DWORD *)(a4 + 16424) = v6 | 4;
    if (a6)
    {
      v7 = 0;
      v8 = *(_OWORD *)(a4 + 13152);
      v9 = *(_OWORD *)(a4 + 13168);
      v10 = *(_OWORD *)(a4 + 13184);
      v11 = *(_OWORD *)(a4 + 13200);
      do
      {
        v12 = 0;
        v13 = (float32x4_t *)(a4 + 592 + 784 * v7);
        v14 = v13[12];
        v15 = v13[13];
        v16 = v13[14];
        v17 = v13[15];
        v26[0] = v8;
        v26[1] = v9;
        v26[2] = v10;
        v26[3] = v11;
        do
        {
          v27[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v26[v12])), v15, *(float32x2_t *)&v26[v12], 1), v16, (float32x4_t)v26[v12], 2), v17, (float32x4_t)v26[v12], 3);
          ++v12;
        }
        while (v12 != 4);
        v18 = v27[1];
        v19 = v27[2];
        v20 = v27[3];
        v21 = (_OWORD *)(a4 + 15328 + (v7 << 6));
        *v21 = v27[0];
        v21[1] = v18;
        v21[2] = v19;
        v21[3] = v20;
        ++v7;
      }
      while (v7 != a6);
    }
  }
  v22 = a4 + ((unint64_t)a5 << 6);
  result = *(__n128 *)(v22 + 15328);
  v24 = *(_OWORD *)(v22 + 15344);
  v25 = *(_OWORD *)(v22 + 15376);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(v22 + 15360);
  *(_OWORD *)(a2 + 48) = v25;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v24;
  return result;
}

__n128 sub_1B1857B9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  __int128 v5;
  __int128 v6;

  result = *(__n128 *)(a4 + 13216);
  v5 = *(_OWORD *)(a4 + 13232);
  v6 = *(_OWORD *)(a4 + 13264);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a4 + 13248);
  *(_OWORD *)(a2 + 48) = v6;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v5;
  return result;
}

float sub_1B1857BB8(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  float result;

  result = *(float *)(a4 + 1048);
  *a2 = result;
  return result;
}

void sub_1B1857BC4(uint64_t a1, simd_float4x4 *a2, uint64_t a3, uint64_t a4, unsigned int a5, int a6)
{
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  _OWORD *v21;
  _OWORD v22[4];
  _OWORD v23[4];

  v6 = *(_DWORD *)(a4 + 16424);
  if ((v6 & 4) == 0)
  {
    *(_DWORD *)(a4 + 16424) = v6 | 4;
    if (a6)
    {
      v7 = 0;
      v8 = *(_OWORD *)(a4 + 13152);
      v9 = *(_OWORD *)(a4 + 13168);
      v10 = *(_OWORD *)(a4 + 13184);
      v11 = *(_OWORD *)(a4 + 13200);
      do
      {
        v12 = 0;
        v13 = (float32x4_t *)(a4 + 592 + 784 * v7);
        v14 = v13[12];
        v15 = v13[13];
        v16 = v13[14];
        v17 = v13[15];
        v22[0] = v8;
        v22[1] = v9;
        v22[2] = v10;
        v22[3] = v11;
        do
        {
          v23[v12] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, COERCE_FLOAT(v22[v12])), v15, *(float32x2_t *)&v22[v12], 1), v16, (float32x4_t)v22[v12], 2), v17, (float32x4_t)v22[v12], 3);
          ++v12;
        }
        while (v12 != 4);
        v18 = v23[1];
        v19 = v23[2];
        v20 = v23[3];
        v21 = (_OWORD *)(a4 + 15328 + (v7 << 6));
        *v21 = v23[0];
        v21[1] = v18;
        v21[2] = v19;
        v21[3] = v20;
        ++v7;
      }
      while (v7 != a6);
    }
  }
  *a2 = __invert_f4(*(simd_float4x4 *)(a4 + ((unint64_t)a5 << 6) + 15328));
}

__n128 sub_1B1857CB4(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  float32x4_t v6;
  float32x4_t v7;
  __n128 result;
  float32x4_t v9;
  float32x4_t v10;

  sub_1B1869150(a4[1026].i64[0], &v9);
  v6 = v9;
  v7 = v10;
  a4[1022] = vsubq_f32(v9, v10);
  a4[1023] = vaddq_f32(v6, v7);
  result = (__n128)a4[1023];
  *(float32x4_t *)a2 = a4[1022];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

__n128 sub_1B1857D08(uint64_t a1, uint64_t a2, uint64_t a3, float32x4_t *a4)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  __n128 result;
  float32x4_t v13;
  int32x4_t v14;

  sub_1B1869150(a4[1026].i64[0], &v13);
  v6 = a4[822];
  v7 = a4[823];
  v8 = a4[824];
  v9 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a4[825], v8, v13, 2), v7, *(float32x2_t *)v13.f32, 1), v6, v13.f32[0]);
  v9.i32[3] = v13.i32[3];
  v10 = (float32x4_t)v14;
  v10.i32[1] = v14.i32[0];
  v10.i32[2] = v14.i32[0];
  v11 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v14.i8, 1), v14), vabsq_f32(v7)), v10, vabsq_f32(v6)), (float32x4_t)vzip2q_s32(vtrn1q_s32(v14, v14), v14), vabsq_f32(v8));
  a4[1024] = vsubq_f32(v9, v11);
  a4[1025] = vaddq_f32(v11, v9);
  result = (__n128)a4[1025];
  *(float32x4_t *)a2 = a4[1024];
  *(__n128 *)(a2 + 16) = result;
  return result;
}

void sub_1B1857DB0(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  float v10;

  v9 = *(_QWORD *)(a4 + 16416);
  if (v9)
    sub_1B186C4A8(v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  else
    v10 = 1.0;
  *a2 = v10;
}

__n128 sub_1B1857DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  float32x4_t v34;
  __int128 v35;
  __int128 v36;
  __n128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v9 = a3;
  v11 = (_QWORD *)sub_1B1796998(*(_QWORD *)(a4 + 528), a2, a3, a4, a5, a6, a7, a8);
  v12 = sub_1B1849664((uint64_t)v11);
  if (v12 == 3)
  {
    sub_1B1849274(v11, *(unsigned int **)(a4 + 16432), &v34, v13, v14, v15, v16, v17, *(int32x4_t *)(a4 + 13200));
    if (v9 != 112)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. size mismatch for sh coefficients"), v26, v27, v28, v29, v30, v31, (uint64_t)"size == sizeof(coefs)");
    v32 = v39;
    *(_OWORD *)(a2 + 64) = v38;
    *(_OWORD *)(a2 + 80) = v32;
    *(_OWORD *)(a2 + 96) = v40;
    v33 = v35;
    *(float32x4_t *)a2 = v34;
    *(_OWORD *)(a2 + 16) = v33;
    result = v37;
    *(_OWORD *)(a2 + 32) = v36;
    *(__n128 *)(a2 + 48) = result;
  }
  else if (v12 == 2)
  {
    sub_1B184910C((uint64_t)v11, *(unsigned int **)(a4 + 16432), &v34, v13, v14, v15, v16, v17, *(int32x4_t *)(a4 + 13200));
    if (v9 != 48)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. size mismatch for sh coefficients"), v19, v20, v21, v22, v23, v24, (uint64_t)"size == sizeof(coefs)");
    v25 = v35;
    *(float32x4_t *)a2 = v34;
    *(_OWORD *)(a2 + 16) = v25;
    result.n128_u64[0] = v36;
    *(_OWORD *)(a2 + 32) = v36;
  }
  return result;
}

uint64_t sub_1B1857EDC(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1B186CC98(*(_QWORD *)(a4 + 16416), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  *a2 = result;
  return result;
}

void sub_1B1857F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE v46[128];
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v6 = *(char *)(a2 + 9);
  v7 = *(char *)(a2 + 10);
  v8 = (void *)objc_msgSend_bufferAtIndices_(*(void **)(a3 + 18144), (const char *)a2, *(unsigned __int16 *)(a2 + 9), a4);
  if (objc_msgSend_buffer(v8, v9, v10, v11))
  {
    v15 = *(void **)(a2 + 16);
    if (v15)
    {
      v41 = 0u;
      v42 = 0u;
      v39 = 0u;
      v40 = 0u;
      v16 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v12, (uint64_t)&v39, (uint64_t)v46, 16);
      if (v16)
      {
        v17 = v16;
        v18 = *(_QWORD *)v40;
        do
        {
          for (i = 0; i != v17; ++i)
          {
            if (*(_QWORD *)v40 != v18)
              objc_enumerationMutation(v15);
            objc_msgSend_useResource_usage_stages_(*(void **)(*(_QWORD *)(a3 + 248) + 16), v12, *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * i), 4, 255);
          }
          v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v12, (uint64_t)&v39, (uint64_t)v46, 16);
        }
        while (v17);
      }
    }
    v20 = *(_QWORD *)(a3 + 248);
    v21 = objc_msgSend_buffer(v8, v12, v13, v14);
    v26 = objc_msgSend_offset(v8, v22, v23, v24);
    v27 = *(unsigned __int16 *)(a2 + 9);
    if ((_BYTE)v27 != 0xFF)
      objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v20 + 16), v25, v21, v26, (char)v27);
    if ((~v27 & 0xFF00) != 0)
      objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v20 + 16), v25, v21, v26, (uint64_t)(__int16)v27 >> 8);
  }
  else if ((_DWORD)v6 != -1
         && !objc_msgSend_vertexBufferBoundAt_(*(void **)(*(_QWORD *)(a3 + 248) + 16), v12, v6, v14)
         || (_DWORD)v7 != -1
         && !objc_msgSend_fragmentBufferBoundAt_(*(void **)(*(_QWORD *)(a3 + 248) + 16), v12, v7, v14))
  {
    v29 = *(_QWORD *)(a3 + 248);
    v30 = (void *)objc_msgSend_binding((void *)a2, v12, v28, v14);
    v34 = objc_msgSend_bufferDataSize(v30, v31, v32, v33);
    v35 = *(unsigned __int16 *)(a2 + 9);
    v43 = 0;
    v44 = 0;
    v45 = 0;
    sub_1B1868B34(*(_QWORD *)(v29 + 24), v34, &v43);
    bzero(v43, v34);
    v37 = v44;
    v38 = v45;
    if ((_BYTE)v35 != 0xFF)
      objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v29 + 16), v36, v44, v45, (char)v35);
    if ((~v35 & 0xFF00) != 0)
      objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v29 + 16), v36, v37, v38, (uint64_t)(__int16)v35 >> 8);
  }
}

uint64_t sub_1B1858170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;

  result = objc_msgSend_textureAtIndices_(*(void **)(a3 + 18144), (const char *)a2, *(unsigned __int16 *)(a2 + 9), a4);
  v10 = (void *)result;
  if (!result)
  {
    v11 = (void *)objc_msgSend_binding((void *)a2, v7, v8, v9);
    v15 = objc_msgSend_textureType(v11, v12, v13, v14);
    v10 = (void *)objc_msgSend_defaultTextureForTextureType_(*(void **)(a3 + 112), v16, v15, v17);
    result = (uint64_t)objc_loadWeak((id *)(a3 + 18504));
    if (result)
    {
      v18 = (void *)result;
      v19 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v7, (uint64_t)CFSTR("Unable to find texture for binding %@ and shadable %@"), v9, a2, *(_QWORD *)(a3 + 18144));
      result = objc_msgSend_renderContext_didFallbackToDefaultTextureForSource_message_(v18, v20, a3, a2, v19);
    }
  }
  v21 = *(_QWORD *)(a3 + 248);
  v22 = *(_WORD *)(a2 + 9);
  if ((_BYTE)v22 != 0xFF)
    result = sub_1B185B808(*(_QWORD *)(a3 + 248), v10, (char)v22, v9);
  if ((~v22 & 0xFF00) != 0)
    result = sub_1B179AEE4(v21, v10, (uint64_t)v22 >> 8, v9);
  v23 = *(unsigned __int8 *)(a2 + 11);
  v24 = *(unsigned __int8 *)(a2 + 12);
  if (v24 != 255 || (_DWORD)v23 != 255)
  {
    result = objc_msgSend_samplerAtIndices_(*(void **)(a3 + 18144), v7, v23 | (v24 << 8), v9);
    v26 = result;
    v27 = *(_QWORD *)(a3 + 248);
    if ((_DWORD)v23 != 255)
      result = objc_msgSend_setVertexSamplerState_atIndex_(*(void **)(v27 + 16), v25, result, (char)v23);
    if ((_DWORD)v24 != 255)
      return objc_msgSend_setFragmentSamplerState_atIndex_(*(void **)(v27 + 16), v25, v26, (char)v24);
  }
  return result;
}

uint64_t sub_1B18582EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  result = objc_msgSend_samplerAtIndices_(*(void **)(a3 + 18144), (const char *)a2, *(unsigned __int16 *)(a2 + 9), a4);
  v8 = result;
  v9 = *(_QWORD *)(a3 + 248);
  v10 = *(unsigned __int16 *)(a2 + 9);
  if ((_BYTE)v10 != 0xFF)
    result = objc_msgSend_setVertexSamplerState_atIndex_(*(void **)(v9 + 16), v7, result, (char)v10);
  if ((~v10 & 0xFF00) != 0)
    return objc_msgSend_setFragmentSamplerState_atIndex_(*(void **)(v9 + 16), v7, v8, (uint64_t)(__int16)v10 >> 8);
  return result;
}

uint64_t sub_1B1858380(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t result;

  v3 = a3[31];
  v4 = a3[2137];
  v5 = a3[2138];
  v6 = *(unsigned __int16 *)(a2 + 9);
  if (*(_BYTE *)(a2 + 9) != 0xFF)
    result = objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v3 + 16), (const char *)a2, a3[2137], v5, (char)v6);
  if ((~v6 & 0xFF00) != 0)
    return objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v3 + 16), (const char *)a2, v4, v5, (uint64_t)(__int16)v6 >> 8);
  return result;
}

uint64_t sub_1B1858408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v9 = *(_DWORD *)(a3 + 17112);
  v3 = *(unsigned __int16 *)(a2 + 9);
  v4 = *(_QWORD *)(a3 + 248);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  result = (uint64_t)sub_1B1868D14(*(_QWORD *)(v4 + 24), &v9, 4uLL, &v10);
  v7 = v11;
  v8 = v12;
  if ((_BYTE)v3 != 0xFF)
    result = objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v4 + 16), v6, v11, v12, (char)v3);
  if ((~v3 & 0xFF00) != 0)
    return objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v4 + 16), v6, v7, v8, (uint64_t)(__int16)v3 >> 8);
  return result;
}

uint64_t sub_1B18584B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v10;
  float v11;
  uint64_t result;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float v18;
  unsigned int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;

  __asm { FMOV            V0.4S, #1.0 }
  v23 = _Q0;
  v10 = *(_QWORD *)(a3 + 18104);
  if (v10)
  {
    v11 = *(float *)(a3 + 1268) * *(float *)(a3 + 740);
    *(float *)&v19 = sub_1B17A47CC(v10) * v11;
    v18 = sub_1B17A47DC(*(_QWORD *)(a3 + 18104));
    DWORD2(v23) = sub_1B17A47EC(*(_QWORD *)(a3 + 18104));
    *(_QWORD *)&v23 = __PAIR64__(LODWORD(v18), v19);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  result = (uint64_t)sub_1B1868D14(*(_QWORD *)(a3 + 384), &v23, 0x10uLL, &v20);
  v14 = *(_QWORD *)(a3 + 248);
  v16 = v21;
  v15 = v22;
  v17 = *(unsigned __int16 *)(a2 + 9);
  if ((_BYTE)v17 != 0xFF)
    result = objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v14 + 16), v13, v21, v22, (char)v17);
  if ((~v17 & 0xFF00) != 0)
    return objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v14 + 16), v13, v16, v15, (uint64_t)(__int16)v17 >> 8);
  return result;
}

uint64_t sub_1B18585B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  __int16 v6;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 248);
  v5 = *(void **)(a3 + 17000);
  v6 = *(_WORD *)(a2 + 9);
  if (*(_BYTE *)(a2 + 9) != 0xFF)
    result = sub_1B185B808(v4, v5, (char)v6, a4);
  if ((~v6 & 0xFF00) != 0)
    return sub_1B179AEE4(v4, v5, (uint64_t)v6 >> 8, a4);
  return result;
}

uint64_t sub_1B185862C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;
  __int16 v6;
  uint64_t result;

  v4 = *(_QWORD *)(a3 + 248);
  v5 = *(void **)(a3 + 17008);
  v6 = *(_WORD *)(a2 + 9);
  if (*(_BYTE *)(a2 + 9) != 0xFF)
    result = sub_1B185B808(v4, v5, (char)v6, a4);
  if ((~v6 & 0xFF00) != 0)
    return sub_1B179AEE4(v4, v5, (uint64_t)v6 >> 8, a4);
  return result;
}

void *sub_1B18586A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int16 v10;

  result = (void *)objc_msgSend_areaLightPrecomputedDataTexture(*(void **)(a3 + 112), (const char *)a2, a3, a4);
  v8 = result;
  v9 = *(_QWORD *)(a3 + 248);
  v10 = *(_WORD *)(a2 + 9);
  if ((_BYTE)v10 != 0xFF)
    result = (void *)sub_1B185B808(v9, result, (char)v10, v7);
  if ((~v10 & 0xFF00) != 0)
    return (void *)sub_1B179AEE4(v9, v8, (uint64_t)v10 >> 8, v7);
  return result;
}

void sub_1B1858734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  float32x4_t v9[32];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a3 + 512);
  if (!v5)
  {
    sub_1B17B3DA8(v9, 32, 1.0, 1.0, 1.0);
    v5 = objc_msgSend_newBufferWithBytes_length_options_(*(void **)(a3 + 120), v6, (uint64_t)v9, 512, 0);
    *(_QWORD *)(a3 + 512) = v5;
  }
  v7 = *(_QWORD *)(a3 + 248);
  v8 = *(unsigned __int16 *)(a2 + 9);
  if ((_BYTE)v8 != 0xFF)
    objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v7 + 16), (const char *)a2, v5, 0, (char)v8);
  if ((~v8 & 0xFF00) != 0)
    objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v7 + 16), (const char *)a2, v5, 0, (uint64_t)(__int16)v8 >> 8);
}

void sub_1B1858828(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id Weak;
  void *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  __int16 v56;
  const char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;

  v13 = sub_1B1840E70(*(_QWORD *)(a4 + 18152), a2, 0, a4, a5, a6, a7, a8);
  if (v13)
  {
    v14 = (void *)objc_msgSend_textureForMaterialProperty_((void *)a4, v10, v13, v12);
    v62 = (uint64_t)v14;
    v22 = sub_1B1842028(v13, v15, v16, v17, v18, v19, v20, v21);
    if (v14)
      goto LABEL_9;
  }
  else
  {
    v22 = 0;
  }
  v23 = (void *)objc_msgSend_binding((void *)a3, v10, v11, v12);
  v27 = objc_msgSend_textureType(v23, v24, v25, v26);
  v14 = (void *)objc_msgSend_defaultTextureForTextureType_(*(void **)(a4 + 112), v28, v27, v29);
  v62 = (uint64_t)v14;
  if (!v14)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v30, v31, v32, v33, v34, v35, (uint64_t)"texture");
  Weak = objc_loadWeak((id *)(a4 + 18504));
  if (Weak)
  {
    v37 = Weak;
    v61 = a3;
    v38 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v10, (uint64_t)CFSTR("Unable to find texture for binding %@ and effect materialProperty %@"), v12);
    objc_msgSend_renderContext_didFallbackToDefaultTextureForSource_message_(v37, v39, a4, a3, v38);
  }
LABEL_9:
  if (!v22)
    v22 = sub_1B180CF10();
  v40 = *(char *)(a3 + 11);
  v41 = *(char *)(a3 + 12);
  if (objc_msgSend_pixelFormat(v14, v10, v11, v12) == 520 || objc_msgSend_pixelFormat(v14, v42, v43, v44) == 500)
  {
    v52 = sub_1B18FD03C(*(_QWORD *)(a4 + 112), v22);
    v53 = *(void **)(*(_QWORD *)(a4 + 248) + 16);
    if (*(unsigned __int8 *)(a3 + 9) != 255)
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Not supported"), v46, v47, v48, v49, v50, v51, v61);
    if (*(unsigned __int8 *)(a3 + 10) != 255)
    {
      sub_1B189E888(*(__IOSurface **)(a4 + 240), (const char *)&v62, 1, v47);
      objc_msgSend_setFragmentTexture_atTextureIndex_samplerState_atSamplerIndex_(v53, v54, v62, *(char *)(a3 + 10), v52, v41);
    }
  }
  else
  {
    v55 = *(_QWORD *)(a4 + 248);
    v56 = *(_WORD *)(a3 + 9);
    if ((_BYTE)v56 != 0xFF)
      sub_1B185B808(*(_QWORD *)(a4 + 248), v14, (char)v56, v45);
    if ((~v56 & 0xFF00) != 0)
      sub_1B179AEE4(v55, v14, (uint64_t)v56 >> 8, v45);
    if ((_DWORD)v41 != -1 || (_DWORD)v40 != -1)
    {
      v59 = sub_1B18FD03C(*(_QWORD *)(a4 + 112), v22);
      v60 = *(_QWORD *)(a4 + 248);
      if ((_DWORD)v40 != -1)
        objc_msgSend_setVertexSamplerState_atIndex_(*(void **)(v60 + 16), v58, (uint64_t)v59, v40);
      if ((_DWORD)v41 != -1)
        objc_msgSend_setFragmentSamplerState_atIndex_(*(void **)(v60 + 16), v58, (uint64_t)v59, v41);
    }
  }
}

uint64_t sub_1B1858AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(char *)(a1 + 40), a2, a3);
}

uint64_t sub_1B1858AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t result;

  v4 = *(void **)(a3 + 17120);
  if (v4)
  {
    v5 = *(_QWORD *)(a3 + 248);
    v6 = *(_WORD *)(a2 + 9);
    if (*(_BYTE *)(a2 + 9) != 0xFF)
      result = sub_1B185B808(v5, v4, (char)v6, a4);
    if ((~v6 & 0xFF00) != 0)
      return sub_1B179AEE4(v5, v4, (uint64_t)v6 >> 8, a4);
  }
  return result;
}

void sub_1B1858B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  id Weak;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  __int16 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;

  v6 = a3 + 8 * *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 17128);
  if (v7)
  {
    v8 = *(_QWORD *)(v6 + 17192);
  }
  else
  {
    v10 = (void *)objc_msgSend_binding((void *)a2, (const char *)a2, a3, a4);
    v14 = objc_msgSend_textureType(v10, v11, v12, v13);
    v7 = (void *)objc_msgSend_defaultTextureForTextureType_(*(void **)(a3 + 112), v15, v14, v16);
    Weak = objc_loadWeak((id *)(a3 + 18504));
    if (Weak)
    {
      v23 = Weak;
      v24 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], (const char *)a2, (uint64_t)CFSTR("Unable to find IES or gobo texture for binding %@"), a4, a2);
      objc_msgSend_renderContext_didFallbackToDefaultTextureForSource_message_(v23, v25, a3, a2, v24);
    }
    v8 = *(_QWORD *)(a3 + 8 * *(_QWORD *)(a1 + 32) + 17192);
    if (!v7)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v18, a4, v19, v20, v21, v22, (uint64_t)"texture");
  }
  v26 = *(_QWORD *)(a3 + 248);
  v27 = *(_WORD *)(a2 + 9);
  if (*(_BYTE *)(a2 + 9) != 0xFF)
    sub_1B185B808(*(_QWORD *)(a3 + 248), v7, (char)v27, a4);
  if ((~v27 & 0xFF00) != 0)
    sub_1B179AEE4(v26, v7, (uint64_t)v27 >> 8, a4);
  v28 = *(unsigned __int8 *)(a2 + 11);
  v29 = *(char *)(a2 + 12);
  if (v29 != -1 || v28 != 255)
  {
    v30 = *(_QWORD *)(a3 + 248);
    if ((char)v28 != -1)
      objc_msgSend_setVertexSamplerState_atIndex_(*(void **)(v30 + 16), (const char *)a2, v8, (char)v28);
    if ((_DWORD)v29 != -1)
      objc_msgSend_setFragmentSamplerState_atIndex_(*(void **)(v30 + 16), (const char *)a2, v8, v29);
  }
}

__n128 sub_1B1858CDC(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 *v4;
  __n128 result;

  v4 = *(__n128 **)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568);
  result = *v4;
  *a2 = *v4;
  return result;
}

uint64_t sub_1B1858CF4(uint64_t result, float32x4_t *a2, uint64_t a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;

  if (a4[1048].i8[0])
  {
    v4 = *(float32x4_t *)(a4[1035].i64[*(_QWORD *)(result + 32) + 1] + 16);
    v5 = vaddq_f32(a4[1043], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4[1040], v4.f32[0]), a4[1041], *(float32x2_t *)v4.f32, 1), a4[1042], v4, 2));
  }
  else
  {
    v5 = *(float32x4_t *)(a4[1035].i64[*(_QWORD *)(result + 32) + 1] + 16);
  }
  *a2 = v5;
  return result;
}

uint64_t sub_1B1858D4C(uint64_t result, float32x4_t *a2, uint64_t a3, float32x4_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;

  if (a4[1048].i8[0])
  {
    v4 = *(float32x4_t *)(a4[1035].i64[*(_QWORD *)(result + 32) + 1] + 32);
    v5 = vmlaq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a4[1040], v4.f32[0]), a4[1041], *(float32x2_t *)v4.f32, 1), a4[1042], v4, 2), (float32x4_t)0, a4[1043]);
  }
  else
  {
    v5 = *(float32x4_t *)(a4[1035].i64[*(_QWORD *)(result + 32) + 1] + 32);
  }
  *a2 = v5;
  return result;
}

__n128 sub_1B1858DA8(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568) + 64);
  *a2 = result;
  return result;
}

__n128 sub_1B1858DC0(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568) + 48);
  *a2 = result;
  return result;
}

__n128 sub_1B1858DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568);
  result = *(__n128 *)(v4 + 128);
  v6 = *(_OWORD *)(v4 + 144);
  v7 = *(_OWORD *)(v4 + 160);
  v8 = *(_OWORD *)(v4 + 176);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v8;
  return result;
}

__n128 sub_1B1858DF8(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568) + 80);
  *a2 = result;
  return result;
}

__n128 sub_1B1858E10(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568) + 96);
  *a2 = result;
  return result;
}

void *sub_1B1858E28(uint64_t a1, void *__dst, uint64_t __n, simd_float4x4 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  size_t v11;
  uint64_t i;
  float32x4_t *v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  simd_float4x4 v24;
  _OWORD v25[4];
  _BYTE __src[264];
  uint64_t v27;
  simd_float4x4 v28;

  v27 = *MEMORY[0x1E0C80C00];
  v11 = __n;
  if (__n >= 0x101)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Cannot set more than 4 matrices for cascade shadows"), __n, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"size <= (sizeof(simd_float4x4) * CFX_MAX_CASCADE_COUNT)");
  if (!a4[262].columns[0].i8[0])
    return memcpy(__dst, (const void *)(a4[258].columns[3].i64[*(_QWORD *)(a1 + 32) + 1] + 128), v11);
  for (i = 0; i != 4; ++i)
  {
    v13 = (float32x4_t *)(a4[258].columns[3].i64[*(_QWORD *)(a1 + 32) + 1] + (i << 6));
    v22 = v13[8];
    v23 = v13[9];
    v20 = v13[11];
    v21 = v13[10];
    v28 = __invert_f4(a4[260]);
    v14 = 0;
    v24 = v28;
    do
    {
      v25[v14] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v22, COERCE_FLOAT(*(_OWORD *)&v24.columns[v14])), v23, *(float32x2_t *)v24.columns[v14].f32, 1), v21, (float32x4_t)v24.columns[v14], 2), v20, (float32x4_t)v24.columns[v14], 3);
      ++v14;
    }
    while (v14 != 4);
    v15 = v25[1];
    v16 = v25[2];
    v17 = v25[3];
    v18 = &__src[64 * i];
    *v18 = v25[0];
    v18[1] = v15;
    v18[2] = v16;
    v18[3] = v17;
  }
  return memcpy(__dst, __src, v11);
}

float sub_1B1858FDC(uint64_t a1, float *a2, uint64_t a3, uint64_t a4)
{
  float result;

  result = *(float *)(*(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568) + 116);
  *a2 = result;
  return result;
}

__n128 sub_1B1858FF4(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568) + 384);
  *a2 = result;
  return result;
}

__n128 sub_1B185900C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __n128 result;
  __int128 v6;
  __int128 v7;
  __int128 v8;

  v4 = *(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568);
  result = *(__n128 *)(v4 + 128);
  v6 = *(_OWORD *)(v4 + 144);
  v7 = *(_OWORD *)(v4 + 160);
  v8 = *(_OWORD *)(v4 + 176);
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v6;
  *(_OWORD *)(a2 + 32) = v7;
  *(_OWORD *)(a2 + 48) = v8;
  return result;
}

__n128 sub_1B185902C(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4)
{
  __n128 result;

  result = *(__n128 *)(*(_QWORD *)(a4 + 8 * *(_QWORD *)(a1 + 32) + 16568) + 384);
  *a2 = result;
  return result;
}

void sub_1B1859044(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v10 = a3[2157];
  v11 = a3[2158];
  v12 = a3[*(_QWORD *)(a1 + 32) + 2159];
  if (!v10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"buffer");
  v13 = v12 + v11;
  v14 = a3[31];
  v15 = *(unsigned __int16 *)(a2 + 9);
  if ((_BYTE)v15 != 0xFF)
    objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(v14 + 16), (const char *)a2, v10, v13, (char)v15);
  if ((~v15 & 0xFF00) != 0)
    objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v14 + 16), (const char *)a2, v10, v13, (uint64_t)(__int16)v15 >> 8);
}

void *sub_1B185911C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *result;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int16 v10;

  result = (void *)objc_msgSend_specularDFGDiffuseHammonTextureWithRenderContext_(*(void **)(a3 + 112), (const char *)a2, a3, a4);
  v8 = result;
  v9 = *(_QWORD *)(a3 + 248);
  v10 = *(_WORD *)(a2 + 9);
  if ((_BYTE)v10 != 0xFF)
    result = (void *)sub_1B185B808(v9, result, (char)v10, v7);
  if ((~v10 & 0xFF00) != 0)
    return (void *)sub_1B179AEE4(v9, v8, (uint64_t)v10 >> 8, v7);
  return result;
}

uint64_t sub_1B18591A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;

  v10 = sub_1B1813884(*(_QWORD *)(a3 + 144), a2, a3, a4, a5, a6, a7, a8);
  v11 = sub_1B187B0F0(v10, 0);
  if (!v11
    || (v19 = v11, !sub_1B1841A40(v11, (uint64_t)v12, v13, v14, v15, v16, v17, v18))
    && !sub_1B1842E64(v19, (uint64_t)v12, v20, v14, v21, v22, v23, v24)
    || (result = objc_msgSend_radianceTextureForMaterialProperty_((void *)a3, v12, v19, v14),
        (v26 = (void *)result) == 0))
  {
    if (!sub_1B1814618(*(_QWORD *)(a3 + 144), (uint64_t)v12, v13, v14, v15, v16, v17, v18)
      || (result = objc_msgSend_defaultLightingEnvironmentRadianceTexture(*(void **)(a3 + 112), v27, v28, v14),
          (v26 = (void *)result) == 0))
    {
      result = objc_msgSend_defaultCubeTexture(*(void **)(a3 + 112), v27, v28, v14);
      v26 = (void *)result;
    }
  }
  v29 = *(_QWORD *)(a3 + 248);
  v30 = *(_WORD *)(a2 + 9);
  if ((_BYTE)v30 != 0xFF)
    result = sub_1B185B808(v29, v26, (char)v30, v14);
  if ((~v30 & 0xFF00) != 0)
    return sub_1B179AEE4(v29, v26, (uint64_t)v30 >> 8, v14);
  return result;
}

uint64_t sub_1B1859290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;

  v10 = sub_1B1813884(*(_QWORD *)(a3 + 144), a2, a3, a4, a5, a6, a7, a8);
  v11 = sub_1B187B0F0(v10, 0);
  if (!v11
    || (v19 = v11, !sub_1B1841A40(v11, (uint64_t)v12, v13, v14, v15, v16, v17, v18))
    && !sub_1B1842E64(v19, (uint64_t)v12, v20, v14, v21, v22, v23, v24)
    || (result = objc_msgSend_irradianceTextureForMaterialProperty_((void *)a3, v12, v19, v14),
        (v26 = (void *)result) == 0))
  {
    if (!sub_1B1814618(*(_QWORD *)(a3 + 144), (uint64_t)v12, v13, v14, v15, v16, v17, v18)
      || (result = objc_msgSend_defaultLightingEnvironmentIrradianceTexture(*(void **)(a3 + 112), v27, v28, v14),
          (v26 = (void *)result) == 0))
    {
      result = objc_msgSend_defaultCubeTexture(*(void **)(a3 + 112), v27, v28, v14);
      v26 = (void *)result;
    }
  }
  v29 = *(_QWORD *)(a3 + 248);
  v30 = *(_WORD *)(a2 + 9);
  if ((_BYTE)v30 != 0xFF)
    result = sub_1B185B808(v29, v26, (char)v30, v14);
  if ((~v30 & 0xFF00) != 0)
    return sub_1B179AEE4(v29, v26, (uint64_t)v30 >> 8, v14);
  return result;
}

uint64_t sub_1B1859378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v5;
  __int16 v6;
  uint64_t result;

  v4 = *(void **)(a3 + 17344);
  v5 = *(_QWORD *)(a3 + 248);
  v6 = *(_WORD *)(a2 + 9);
  if (*(_BYTE *)(a2 + 9) != 0xFF)
    result = sub_1B185B808(v5, v4, (char)v6, a4);
  if ((~v6 & 0xFF00) != 0)
    return sub_1B179AEE4(v5, v4, (uint64_t)v6 >> 8, a4);
  return result;
}

uint64_t sub_1B18593F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  void *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  __int16 v20;

  result = (uint64_t)sub_1B1815B20(*(_QWORD *)(a3 + 144), CFSTR("VFX-SSAO"), a3, a4, a5, a6, a7, a8);
  v14 = (void *)result;
  if (!result)
  {
    v14 = (void *)objc_msgSend_defaultTexture(*(void **)(a3 + 112), v11, v12, v13);
    result = (uint64_t)objc_loadWeak((id *)(a3 + 18504));
    if (result)
    {
      v16 = (void *)result;
      v17 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v15, (uint64_t)CFSTR("Unable to find \"VFX-SSAO\" texture in render graph for binding %@"), v13, a2);
      result = objc_msgSend_renderContext_didFallbackToDefaultTextureForSource_message_(v16, v18, a3, a2, v17);
    }
  }
  v19 = *(_QWORD *)(a3 + 248);
  v20 = *(_WORD *)(a2 + 9);
  if ((_BYTE)v20 != 0xFF)
    result = sub_1B185B808(v19, v14, (char)v20, v13);
  if ((~v20 & 0xFF00) != 0)
    return sub_1B179AEE4(v19, v14, (uint64_t)v20 >> 8, v13);
  return result;
}

uint64_t sub_1B18594E4(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  const char *v8;
  _QWORD v10[5];

  v7 = objc_msgSend_frequency(a2, (const char *)a2, a3, (uint64_t)a4);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1B1859568;
  v10[3] = &unk_1E63D7840;
  v10[4] = a2;
  return objc_msgSend_addResourceBindingsForArgument_frequency_needsRenderResource_block_(a4, v8, a3, v7, 0, v10);
}

uint64_t sub_1B1859568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id *v10;
  id *v11;
  id *v12;
  id *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *(_WORD *)(a3 + 317) = *(_WORD *)(a2 + 9);
  v10 = *(id **)(a3 + 18176);
  if (v10)
    v11 = sub_1B193E758(v10);
  else
    v11 = 0;
  v12 = *(id **)(a3 + 18128);
  if (v12)
    v13 = sub_1B193E758(v12);
  else
    v13 = 0;
  v14 = sub_1B1814A78(*(_QWORD *)(a3 + 144), a2, a3, a4, a5, a6, a7, a8);
  v18 = objc_msgSend_block(*(void **)(a1 + 32), v15, v16, v17);
  return (*(uint64_t (**)(uint64_t, uint64_t, id *, id *, uint64_t))(v18 + 16))(v18, a3, v11, v13, v14);
}

void sub_1B1859750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (sub_1B18472D8(a2))
  {
    v11 = sub_1B17EE3B4(a2, v4, v5, v6, v7, v8, v9, v10);
    sub_1B18F3BA4(v11, *(_QWORD *)(a1 + 32));
    v19 = *(_QWORD *)(a1 + 40) + sub_1B18F3D80(v11, v12, v13, v14, v15, v16, v17, v18);
    sub_1B1847284(a2, v19);
  }
}

void sub_1B1859894(uint64_t a1, uint64_t a2)
{
  if (sub_1B18472D8(a2))
    sub_1B1847284(a2, 0);
}

void sub_1B185B05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1B185B070(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!a2)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commandBuffer");
    if (a3)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"commandEncoder");
    goto LABEL_3;
  }
  if (!a3)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a1 + 8) = a2;
  result = objc_msgSend_setEncoder_(*(void **)(a1 + 16), a2, a3, a4);
  *(_QWORD *)(a1 + 24) = a4;
  *(_DWORD *)a1 = 1;
  *(_BYTE *)(a1 + 4) = 1;
  *(_BYTE *)(a1 + 32) = 0;
  return result;
}

void sub_1B185B438(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B185B888(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B185B808(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v13;

  v13 = (uint64_t)a2;
  if (a2 && (objc_msgSend_conformsToProtocol_(a2, (const char *)a2, (uint64_t)&unk_1EF023E28, a4) & 1) == 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. texture is not a MTLTexture"), v6, a4, v7, v8, v9, v10, (uint64_t)"!texture || [texture conformsToProtocol:@protocol(MTLTexture)]");
  sub_1B189E888(*(__IOSurface **)(a1 + 8), (const char *)&v13, 1, a4);
  return objc_msgSend_setVertexTexture_atIndex_(*(void **)(a1 + 16), v11, v13, a3);
}

uint64_t sub_1B185B888(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

char *sub_1B185B8D0(uint64_t a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  char *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v7 >= v8)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = (char *)*v10;
      if (*v10)
      {
        do
        {
          v12 = *((_QWORD *)v11 + 1);
          if (v12 == v7)
          {
            if (*((_QWORD *)v11 + 2) == v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = *(char **)v11;
        }
        while (v11);
      }
    }
  }
  v11 = (char *)operator new(0xB0uLL);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = v7;
  *((_QWORD *)v11 + 2) = **a4;
  *((_QWORD *)v11 + 21) = 0;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 88) = 0u;
  *(_OWORD *)(v11 + 72) = 0u;
  *(_OWORD *)(v11 + 56) = 0u;
  *(_OWORD *)(v11 + 40) = 0u;
  *(_OWORD *)(v11 + 24) = 0u;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_1B179C4B4(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *(_QWORD *)v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *(_QWORD *)v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v11)
  {
    v21 = *(_QWORD *)(*(_QWORD *)v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_1B185BB04(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B185BB18(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

double sub_1B185BB44(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  __int128 v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;

  if (a2)
  {
    v4 = *(_BYTE *)(a1 + 16);
    *(_BYTE *)(a1 + 16) = v4 | 3;
    if ((*(_BYTE *)(a2 + 16) & 1) == 0)
    {
      if ((*(_BYTE *)(a2 + 16) & 2) != 0)
      {
        v6 = *(_OWORD *)(a2 + 24);
        *(_OWORD *)(a1 + 24) = v6;
        *(_BYTE *)(a1 + 16) = v4 & 0xFC | 2;
      }
      else
      {
        *(_BYTE *)(a1 + 16) = v4 & 0xFC | 2;
        if ((*(_BYTE *)(a2 + 16) & 1) != 0)
        {
          v5 = 0;
        }
        else if ((*(_BYTE *)(a2 + 16) & 2) != 0)
        {
          v5 = 1;
        }
        else
        {
          v5 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
        }
        *(_BYTE *)(a1 + 16) = v4 & 0xFC;
        v7 = malloc_type_calloc(16 * v5 + 56, 1uLL, 0x382B03EuLL);
        *(_QWORD *)(a1 + 24) = v7;
        v8 = a1 + 24;
        v7[6] = 0;
        **(_QWORD **)(a1 + 24) = v5;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) = v5;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = 0;
        v9 = a1 + 24;
        if ((*(_BYTE *)(a1 + 16) & 2) == 0)
          v9 = *(_QWORD *)v8 + 56;
        v10 = (_QWORD *)(a2 + 24);
        if ((*(_BYTE *)(a2 + 16) & 2) == 0)
          v10 = (_QWORD *)(*v10 + 56);
        if (v5 >= 1)
        {
          v11 = (_QWORD *)(v9 + 8);
          do
          {
            v12 = *(_OWORD *)v10;
            v10 += 2;
            *(_QWORD *)&v6 = v12;
            *(_OWORD *)(v11 - 1) = v12;
            *(_QWORD *)&v12 = *v11;
            v11 += 2;
            *(_QWORD *)(*(_QWORD *)v8 + 16) += v12;
            --v5;
          }
          while (v5);
        }
      }
    }
  }
  return *(double *)&v6;
}

uint64_t sub_1B185BC64()
{
  if (qword_1ED4D0650 != -1)
    dispatch_once_f(&qword_1ED4D0650, &qword_1ED4CECE8, (dispatch_function_t)sub_1B185BB18);
  return sub_1B179CB90(qword_1ED4CECE8, 0x18uLL);
}

uint64_t sub_1B185BCB0()
{
  uint64_t result;

  result = sub_1B185BC64();
  *(_BYTE *)(result + 16) |= 0xBu;
  return result;
}

uint64_t sub_1B185BCD4(uint64_t a1)
{
  uint64_t v1;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    v1 = a1 + 32;
  else
    v1 = *(_QWORD *)(a1 + 24) + 16;
  return *(_QWORD *)v1;
}

uint64_t sub_1B185BD00(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 16) & 1) == 0)
  {
    v1 = (uint64_t *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 16) & 2) != 0)
      return *v1;
    v2 = *v1;
    if (*(_QWORD *)(v2 + 8))
    {
      v1 = (uint64_t *)(v2 + 56);
      return *v1;
    }
  }
  return -1;
}

uint64_t sub_1B185BD30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return 0;
  v1 = (uint64_t *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v4 = 0;
    return v1[2 * v4];
  }
  v2 = *v1;
  v3 = *(_QWORD *)(v2 + 8);
  if (!v3)
    return 0;
  v1 = (uint64_t *)(v2 + 56);
  v4 = v3 - 1;
  return v1[2 * v4];
}

uint64_t sub_1B185BD74(uint64_t a1, uint64_t a2)
{
  return sub_1B185BD80(a1, a2, 0, 1);
}

uint64_t sub_1B185BD80(uint64_t a1, uint64_t a2, int a3, int a4)
{
  char v5;
  uint64_t v6;
  pthread_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  pthread_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return -1;
  v5 = a3;
  v6 = a2;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v10 = *(_QWORD **)(a1 + 24);
    v15 = (char *)v10 + *(_QWORD *)(a1 + 32);
    v16 = (uint64_t)(v15 - 1);
    if (a4)
    {
      if (a3)
      {
        if ((uint64_t)v10 < a2)
        {
          if ((uint64_t)v15 > a2)
            return v6;
          v8 = 0;
LABEL_47:
          v27 = sub_1B185C07C(a1, v6);
          if (v27 == -1)
            return -1;
          v28 = a1 + 24;
          if ((*(_BYTE *)(a1 + 16) & 2) != 0)
            v29 = (_QWORD *)(a1 + 24);
          else
            v29 = v10 + 7;
          v30 = v29[2 * v27];
          if (v6 <= v30)
            v16 = v30;
          else
            v16 = v6;
          if ((pthread_t)v10[6] == v8)
          {
            v10[4] = v27;
            *(_QWORD *)(*(_QWORD *)v28 + 40) = v16 - v30;
            v26 = *(_QWORD *)v28;
            goto LABEL_56;
          }
          return v16;
        }
      }
      else if ((uint64_t)v10 <= a2)
      {
        if (v16 > a2)
          return a2 + 1;
        v8 = 0;
LABEL_45:
        if (v6 == 0x7FFFFFFFFFFFFFFFLL)
          return -1;
        ++v6;
        goto LABEL_47;
      }
      return *(_QWORD *)(a1 + 24);
    }
    if (a3)
    {
      if (v16 <= a2)
        return v16;
      v16 = a2;
      if ((uint64_t)v10 <= a2)
        return v16;
      goto LABEL_32;
    }
    if ((uint64_t)v15 <= a2)
      return v16;
    if ((uint64_t)v10 < a2)
      return a2 - 1;
    goto LABEL_30;
  }
  v8 = pthread_self();
  v9 = a1 + 24;
  v10 = *(_QWORD **)(a1 + 24);
  if ((pthread_t)v10[6] == v8 && v10[3] == v6)
  {
    if ((v5 & 1) == 0)
    {
      v11 = v10 + 7;
      if ((*(_BYTE *)(a1 + 16) & 2) != 0)
        v11 = (_QWORD *)(a1 + 24);
      if (a4)
      {
        v12 = v10[4];
        if (v11[2 * v12 + 1] - 1 > v10[5])
        {
          v10[3] = v6 + 1;
          v13 = *(_QWORD *)v9;
          v14 = *(_QWORD *)(*(_QWORD *)v9 + 40) + 1;
LABEL_59:
          *(_QWORD *)(v13 + 40) = v14;
          return *(_QWORD *)(*(_QWORD *)v9 + 24);
        }
        v31 = (*(_BYTE *)(a1 + 16) & 1) == 0;
        if ((*(_BYTE *)(a1 + 16) & 3) == 0)
          v31 = v10[1];
        v32 = v12 + 1;
        if (v32 < v31)
        {
          v10[4] = v32;
          v33 = v11[2 * *(_QWORD *)(*(_QWORD *)v9 + 32)];
          *(_QWORD *)(*(_QWORD *)v9 + 40) = 0;
          *(_QWORD *)(*(_QWORD *)v9 + 24) = v33;
          return *(_QWORD *)(*(_QWORD *)v9 + 24);
        }
      }
      else
      {
        if ((uint64_t)v10[5] >= 1)
        {
          v10[3] = v6 - 1;
          v13 = *(_QWORD *)v9;
          v14 = *(_QWORD *)(*(_QWORD *)v9 + 40) - 1;
          goto LABEL_59;
        }
        v34 = v10[4];
        v35 = v34 < 1;
        v36 = v34 - 1;
        if (!v35)
        {
          v10[4] = v36;
          v37 = &v11[2 * *(_QWORD *)(*(_QWORD *)v9 + 32)];
          v38 = *v37;
          *(_QWORD *)(*(_QWORD *)v9 + 40) = v37[1] - 1;
          *(_QWORD *)(*(_QWORD *)v9 + 24) = *(_QWORD *)(*(_QWORD *)v9 + 40) + v38;
          return *(_QWORD *)(*(_QWORD *)v9 + 24);
        }
      }
      v10[6] = 0;
      return -1;
    }
    return v6;
  }
  if (a4)
  {
    if ((v5 & 1) != 0)
      goto LABEL_47;
    goto LABEL_45;
  }
  if ((v5 & 1) == 0)
  {
LABEL_30:
    if (!v6)
      return -1;
    --v6;
  }
LABEL_32:
  v17 = sub_1B185C4DC(a1, v6);
  if (v17 == -1)
    return -1;
  v18 = v17;
  v19 = a1 + 24;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    v20 = (_QWORD *)(a1 + 24);
  else
    v20 = v10 + 7;
  v21 = &v20[2 * v17];
  v22 = *v21;
  v23 = v21[1] + *v21;
  if (v6 >= v23)
    v16 = v23 - 1;
  else
    v16 = v6;
  v24 = pthread_self();
  v25 = *(_QWORD *)(a1 + 24);
  if (*(pthread_t *)(v25 + 48) == v24)
  {
    *(_QWORD *)(v25 + 32) = v18;
    *(_QWORD *)(*(_QWORD *)v19 + 40) = v16 - v22;
    v26 = *(_QWORD *)v19;
LABEL_56:
    *(_QWORD *)(v26 + 24) = v16;
  }
  return v16;
}

uint64_t sub_1B185C07C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return -1;
  v2 = (uint64_t *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    goto LABEL_6;
  v3 = *v2;
  v4 = *(_QWORD *)(v3 + 8);
  v5 = v4 == 1;
  v6 = v4 < 1;
  v7 = v4 - 1;
  if (v6)
    return -1;
  v2 = (uint64_t *)(v3 + 56);
  if (!v5)
  {
    v9 = 0;
    v10 = v7;
    do
    {
      v11 = v10 + v9;
      if (v10 + v9 < 0 != __OFADD__(v10, v9))
        ++v11;
      result = v11 >> 1;
      v12 = &v2[2 * (v11 >> 1)];
      if (*v12 <= a2)
      {
        if (v12[1] + *v12 > a2)
          return result;
        v9 = result + 1;
      }
      else
      {
        v10 = result;
      }
    }
    while (v9 < v10);
    goto LABEL_7;
  }
LABEL_6:
  v7 = 0;
  v9 = 0;
LABEL_7:
  if (v2[2 * v9 + 1] + v2[2 * v9] > a2)
    return v9;
  if (v9 < v7)
    return v9 + 1;
  return -1;
}

uint64_t sub_1B185C12C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _opaque_pthread_t *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return 0;
  v4 = a1 + 24;
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if (*(_QWORD *)v4 <= a2)
      return *(_QWORD *)(a1 + 32) + *(_QWORD *)v4 > a2;
    return 0;
  }
  v5 = *(_opaque_pthread_t **)(*(_QWORD *)v4 + 48);
  if (v5 != pthread_self())
  {
    v6 = *(_BYTE *)(a1 + 16);
    goto LABEL_5;
  }
  v12 = *(_QWORD *)v4;
  if (*(_QWORD *)(*(_QWORD *)v4 + 24) != a2)
  {
    v6 = *(_BYTE *)(a1 + 16);
    v13 = v12 + 56;
    if ((v6 & 2) != 0)
      v13 = v4;
    v14 = (_QWORD *)(v13 + 16 * *(_QWORD *)(v12 + 32));
    if (*v14 > a2 || v14[1] + *v14 <= a2)
    {
LABEL_5:
      if ((v6 & 1) == 0)
      {
        if ((v6 & 2) != 0)
          goto LABEL_9;
        v7 = *(_QWORD *)(*(_QWORD *)v4 + 8);
        if (v7 >= 1)
        {
          v4 = *(_QWORD *)v4 + 56;
          v8 = v7 - 1;
          if (v7 != 1)
          {
            v15 = 0;
            do
            {
              v16 = v15 + v8;
              if (v15 + v8 < 0 != __OFADD__(v15, v8))
                ++v16;
              v9 = v16 >> 1;
              v17 = (_QWORD *)(v4 + 16 * v9);
              if (*v17 <= a2)
              {
                if (v17[1] + *v17 > a2)
                  return v9 != -1;
                v15 = v9 + 1;
              }
              else
              {
                v8 = v9;
              }
            }
            while (v15 < v8);
            v9 = v15;
LABEL_10:
            v10 = (_QWORD *)(v4 + 16 * v9);
            if (*v10 <= a2 && v10[1] + *v10 > a2)
              return v9 != -1;
            goto LABEL_12;
          }
LABEL_9:
          v9 = 0;
          goto LABEL_10;
        }
      }
LABEL_12:
      v9 = -1;
      return v9 != -1;
    }
  }
  return 1;
}

void sub_1B185C290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  if (!a3)
    return;
  v3 = a3;
  v6 = a2 + a3;
  v7 = sub_1B185C4DC(a1, a2);
  if (v7 == -1)
    v13 = 0;
  else
    v13 = v7;
  v14 = a1 + 24;
  for (i = 16 * v13; ; i += 16)
  {
    v16 = (*(_BYTE *)(a1 + 16) & 1) == 0;
    if ((*(_BYTE *)(a1 + 16) & 3) == 0)
      v16 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if (v13 >= v16)
      break;
    v17 = a1 + 24;
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
      v17 = *(_QWORD *)v14 + 56;
    v18 = (uint64_t *)(v17 + i);
    v19 = *v18;
    v8 = v6 - *v18;
    if (v6 < *v18)
    {
      sub_1B185C57C(a1, a2, v3, v13, v9, v10, v11, v12);
      return;
    }
    v20 = v18[1] + v19;
    if (a2 < v19)
    {
      v19 = a2;
      if (v6 <= v20)
        v8 = v20 - a2;
      else
        v8 = v3;
      if (v6 <= v20)
        v3 = v20 - a2;
LABEL_22:
      sub_1B185C684(a1, v13, v19, v8, v9, v10, v11, v12);
      break;
    }
    if (v6 <= v20)
      return;
    if (v20 >= a2)
      goto LABEL_22;
    ++v13;
  }
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (v13)
      goto LABEL_38;
    v22 = 1;
  }
  else if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    if (v13 != 1)
      goto LABEL_38;
    v22 = 2;
  }
  else
  {
    v21 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if (v21 != v13)
      goto LABEL_38;
    v22 = v21 + 1;
  }
  sub_1B185CE28(a1, v22);
  v23 = *(_BYTE *)(a1 + 16);
  if ((v23 & 2) != 0)
  {
    *(_QWORD *)(a1 + 24) = a2;
    *(_QWORD *)(a1 + 32) = v3;
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) = 0;
    v24 = *(_QWORD *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 16) & 2) != 0)
      v25 = a1 + 24;
    else
      v25 = v24 + 56;
    v26 = *(_QWORD *)(v24 + 8);
    *(_QWORD *)(v24 + 8) = v26 + 1;
    v27 = (uint64_t *)(v25 + 16 * v26);
    *v27 = a2;
    v27[1] = v3;
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) += v3;
    v23 = *(_BYTE *)(a1 + 16);
  }
  *(_BYTE *)(a1 + 16) = v23 & 0xFE;
LABEL_38:
  while (1)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0)
      v28 = 0;
    else
      v28 = (*(_BYTE *)(a1 + 16) & 2) != 0 ? 1 : *(_QWORD *)(*(_QWORD *)v14 + 8);
    if (v13 >= v28 - 1)
      break;
    v29 = a1 + 24;
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
      v29 = *(_QWORD *)v14 + 56;
    v30 = (uint64_t *)(v29 + 16 * v13);
    v31 = *v30;
    v32 = v30[1];
    v33 = (uint64_t *)(v29 + 16 * (v13 + 1));
    v34 = v32 + v31;
    if (v34 < *v33)
      break;
    v35 = v33[1] + *v33;
    if (v34 < v35)
    {
      sub_1B185C684(a1, v13, v31, v35 - v31, v9, v10, v11, v12);
      sub_1B185C744(a1, ++v13, v36, v37, v38, v39, v40, v41);
    }
    else
    {
      sub_1B185C744(a1, v13 + 1, v31, v8, v9, v10, v11, v12);
    }
  }
}

uint64_t sub_1B185C4DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t *v11;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    return -1;
  v2 = (uint64_t *)(a1 + 24);
  if ((*(_BYTE *)(a1 + 16) & 2) != 0)
    goto LABEL_5;
  v3 = *v2;
  v4 = *(_QWORD *)(v3 + 8);
  if (v4 < 1)
    return -1;
  v2 = (uint64_t *)(v3 + 56);
  v5 = v4 - 1;
  if (v4 != 1)
  {
    v6 = 0;
    do
    {
      v10 = v5 + v6;
      if (v5 + v6 < 0 != __OFADD__(v5, v6))
        ++v10;
      result = v10 >> 1;
      v11 = &v2[2 * (v10 >> 1)];
      if (*v11 <= a2)
      {
        if (v11[1] + *v11 > a2)
          return result;
        v6 = result + 1;
      }
      else
      {
        v5 = result;
      }
    }
    while (v6 < v5);
    goto LABEL_6;
  }
LABEL_5:
  v6 = 0;
LABEL_6:
  v7 = v2[2 * v6];
  v8 = v6 - 1;
  if (v6 <= 0)
    v8 = -1;
  if (v7 > a2)
    return v8;
  else
    return v6;
}

void sub_1B185C57C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  _QWORD *v15;
  char v16;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v12 = 0;
  }
  else if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v12 = 1;
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  }
  if (v12 >= a4)
  {
    sub_1B185CE28(a1, v12 + 1);
    v13 = (_QWORD *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
      v13 = (_QWORD *)(*v13 + 56);
    if (v12 > a4)
    {
      v14 = &v13[2 * v12];
      do
      {
        --v12;
        *v14 = *(v14 - 1);
        --v14;
      }
      while (v12 > a4);
    }
    v15 = &v13[2 * a4];
    *v15 = a2;
    v15[1] = a3;
    v16 = *(_BYTE *)(a1 + 16);
    if ((v16 & 2) == 0)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) = 0;
      ++*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) += a3;
      v16 = *(_BYTE *)(a1 + 16);
    }
    *(_BYTE *)(a1 + 16) = v16 & 0xFE;
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Index %ld out of range bounds [0...%ld]"), a3, a4, a5, a6, a7, a8, a4);
  }
}

void sub_1B185C684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    v8 = 0;
  }
  else if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v8 = 1;
  }
  else
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  }
  if (a4 <= 0)
  {
    sub_1B185C744(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  else if (v8 >= a2)
  {
    v9 = a1 + 24;
    v10 = a1 + 24;
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
      v10 = *(_QWORD *)v9 + 56;
    v11 = (uint64_t *)(v10 + 16 * a2);
    v12 = v11[1];
    *v11 = a3;
    v11[1] = a4;
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
    {
      *(_QWORD *)(*(_QWORD *)v9 + 48) = 0;
      *(_QWORD *)(*(_QWORD *)v9 + 16) -= v12;
      *(_QWORD *)(*(_QWORD *)v9 + 16) += a4;
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Index %ld out of range bounds [0...%ld]"), a3, a4, a5, a6, a7, a8, a2);
  }
}

void sub_1B185C744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  char v15;

  v8 = *(_BYTE *)(a1 + 16);
  if ((v8 & 1) != 0)
  {
    v9 = 0;
  }
  else if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v9 = 1;
  }
  else
  {
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  }
  if (v9 >= a2)
  {
    v10 = (_QWORD *)(a1 + 24);
    if ((*(_BYTE *)(a1 + 16) & 2) == 0)
      v10 = (_QWORD *)(*v10 + 56);
    v11 = &v10[2 * a2];
    v12 = v11[1];
    if (a2 + 1 < v9)
    {
      v13 = v11 + 2;
      v14 = ~a2 + v9;
      do
      {
        *(v13 - 1) = *v13;
        ++v13;
        --v14;
      }
      while (v14);
      v8 = *(_BYTE *)(a1 + 16);
    }
    if ((v8 & 2) != 0)
    {
      v15 = v8 | 1;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 48) = 0;
      --*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
      *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) -= v12;
      v15 = *(_BYTE *)(a1 + 16) & 0xFE | (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) == 0);
    }
    *(_BYTE *)(a1 + 16) = v15;
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Index %ld out of range bounds [0...%ld]"), a3, a4, a5, a6, a7, a8, a2);
  }
}

void sub_1B185C83C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;

  if (a2 && a2 != a1)
  {
    if ((*(_BYTE *)(a1 + 16) & 1) != 0 || (*(_BYTE *)(a1 + 16) & 2) == 0 && !*(_QWORD *)(*(_QWORD *)(a1 + 24) + 8))
    {
      sub_1B185C900(a1);
      sub_1B185BB44(a1, a2);
      return;
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      return;
    if ((*(_BYTE *)(a2 + 16) & 2) != 0)
    {
      v10 = 1;
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v10 < 1)
        return;
    }
    for (i = 0; i != v10; ++i)
    {
      v12 = sub_1B185C940(a2, i, a3, a4, a5, a6, a7, a8);
      sub_1B185C290(a1, v12, v13);
    }
  }
}

void sub_1B185C900(uint64_t a1)
{
  char v2;
  void *v3;

  v2 = *(_BYTE *)(a1 + 16);
  if ((v2 & 2) == 0)
  {
    v3 = *(void **)(a1 + 24);
    if (v3)
    {
      free(v3);
      v2 = *(_BYTE *)(a1 + 16);
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_BYTE *)(a1 + 16) = v2 | 3;
}

uint64_t sub_1B185C940(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v10 = *(_BYTE *)(a1 + 16);
  if ((v10 & 1) != 0)
  {
    v11 = 0;
  }
  else if ((*(_BYTE *)(a1 + 16) & 2) != 0)
  {
    v11 = 1;
  }
  else
  {
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8);
  }
  if (v11 < a2)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Index %ld out of bounds [0...%ld]"), a3, a4, a5, a6, a7, a8, a2);
    v10 = *(_BYTE *)(a1 + 16);
  }
  v12 = (_QWORD *)(a1 + 24);
  if ((v10 & 2) == 0)
    v12 = (_QWORD *)(*v12 + 56);
  return v12[2 * a2];
}

void sub_1B185C9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a3)
  {
    if (a2 < 1)
    {
      v11 = 0;
    }
    else
    {
      v11 = sub_1B185C07C(a1, a2);
      if (v11 == -1)
        return;
    }
    v12 = a2 + a3;
    v13 = a1 + 24;
    while (1)
    {
      if ((*(_BYTE *)(a1 + 16) & 1) != 0)
        v14 = 0;
      else
        v14 = (*(_BYTE *)(a1 + 16) & 2) != 0 ? 1 : *(_QWORD *)(*(_QWORD *)v13 + 8);
      if (v11 >= v14)
        break;
      v15 = a1 + 24;
      if ((*(_BYTE *)(a1 + 16) & 2) == 0)
        v15 = *(_QWORD *)v13 + 56;
      v16 = (uint64_t *)(v15 + 16 * v11);
      v17 = *v16;
      if (v12 < *v16)
        break;
      v18 = v16[1] + v17;
      if (a2 > v17)
      {
        if (v18 > v12)
        {
          sub_1B185C684(a1, v11, v12, v18 - v12, a5, a6, a7, a8);
          sub_1B185C57C(a1, v17, a2 - v17, v11, v20, v21, v22, v23);
          return;
        }
        if (a2 < v18)
          sub_1B185C684(a1, v11, v17, a2 - v17, a5, a6, a7, a8);
        ++v11;
      }
      else
      {
        v19 = v18 - v12;
        if (v18 > v12)
        {
          sub_1B185C684(a1, v11, v12, v19, a5, a6, a7, a8);
          return;
        }
        sub_1B185C744(a1, v11, a3, v19, a5, a6, a7, a8);
      }
    }
  }
}

void sub_1B185CB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2
    && (*(_BYTE *)(a1 + 16) & 1) == 0
    && ((*(_BYTE *)(a1 + 16) & 2) != 0 || *(uint64_t *)(*(_QWORD *)(a1 + 24) + 8) >= 1))
  {
    if (a2 == a1)
    {
      sub_1B185C900(a2);
      return;
    }
    if ((*(_BYTE *)(a2 + 16) & 1) != 0)
      return;
    if ((*(_BYTE *)(a2 + 16) & 2) != 0)
    {
      v10 = 1;
    }
    else
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 8);
      if (v10 < 1)
        return;
    }
    for (i = 0; i != v10; ++i)
    {
      v12 = sub_1B185C940(a2, i, a3, a4, a5, a6, a7, a8);
      sub_1B185C9C4(a1, v12, v13, v13, v14, v15, v16, v17);
    }
  }
}

void sub_1B185CBE8(uint64_t a1, uint64_t a2)
{
  sub_1B185C290(a1, a2, 1);
}

void sub_1B185CBF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B185C9C4(a1, a2, 1, a4, a5, a6, a7, a8);
}

uint64_t sub_1B185CBF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = sub_1B185BC64();
  *(_BYTE *)(v4 + 16) |= 0xBu;
  v5 = (_BYTE *)sub_1B185BC64();
  v5[16] |= 0xBu;
  sub_1B185C83C(v4, a1, v6, v7, v8, v9, v10, v11);
  sub_1B185C83C((uint64_t)v5, a1, v12, v13, v14, v15, v16, v17);
  sub_1B185CB2C((uint64_t)v5, a2, v18, v19, v20, v21, v22, v23);
  sub_1B185CB2C(v4, (uint64_t)v5, v24, v25, v26, v27, v28, v29);
  CFRelease(v5);
  return v4;
}

void sub_1B185CC94(uint64_t a1)
{
  void *v1;

  if ((*(_BYTE *)(a1 + 16) & 2) == 0)
  {
    v1 = *(void **)(a1 + 24);
    if (v1)
      free(v1);
  }
}

__CFString *sub_1B185CCB0(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;

  Mutable = CFStringCreateMutable(0, 256);
  CFStringAppend(Mutable, CFSTR("indexSet "));
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
    goto LABEL_15;
  if ((*(_BYTE *)(a1 + 16) & 2) == 0)
  {
    v3 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v3 + 16))
    {
      v4 = *(_QWORD *)(v3 + 8);
      CFStringAppendFormat(Mutable, 0, CFSTR("[number of indexes: %lu (in %lu ranges), indexes: ("), *(_QWORD *)(v3 + 16), v4);
      if (v4 < 1)
      {
        v9 = CFSTR(")]");
        goto LABEL_16;
      }
      v5 = v3 + 56;
      goto LABEL_8;
    }
LABEL_15:
    v9 = CFSTR("(no index)");
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    goto LABEL_15;
  v5 = a1 + 24;
  v4 = 1;
  CFStringAppendFormat(Mutable, 0, CFSTR("[number of indexes: %lu (in %lu ranges), indexes: ("), v6, 1);
LABEL_8:
  v7 = 0;
  v8 = (uint64_t *)(v5 + 8);
  v9 = CFSTR(")]");
  do
  {
    if (v7)
      CFStringAppend(Mutable, CFSTR(" "));
    v10 = *(v8 - 1);
    v11 = *v8;
    CFStringAppendFormat(Mutable, 0, CFSTR("%lu"), v10);
    if (v11 >= 2)
      CFStringAppendFormat(Mutable, 0, CFSTR("-%lu"), v10 + v11 - 1);
    ++v7;
    v8 += 2;
  }
  while (v4 != v7);
LABEL_16:
  CFStringAppend(Mutable, v9);
  return Mutable;
}

__n128 sub_1B185CE28(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 result;
  _BOOL8 v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  __n128 v12;

  v3 = *(_BYTE *)(a1 + 16);
  if ((v3 & 2) != 0)
    v4 = 1;
  else
    v4 = **(_QWORD **)(a1 + 24);
  if (v4 < a2)
  {
    if (a2 == 1)
    {
      *(_BYTE *)(a1 + 16) = v3 | 2;
    }
    else
    {
      v5 = 2 * v4;
      if (v5 <= a2)
        v5 = a2;
      if (a2 >= 4)
        v6 = v5;
      else
        v6 = 4;
      if ((*(_BYTE *)(a1 + 16) & 2) != 0)
      {
        v8 = (v3 & 1) == 0;
        if ((*(_BYTE *)(a1 + 16) & 1) != 0)
          v9 = 0;
        else
          v9 = *(_QWORD *)(a1 + 32);
        v10 = (_QWORD *)(a1 + 24);
        v12 = *(__n128 *)(a1 + 24);
        *(_BYTE *)(a1 + 16) = v3 & 0xFD;
        v11 = malloc_type_calloc(16 * v6 + 56, 1uLL, 0x3964E8B3uLL);
        *(_QWORD *)(a1 + 24) = v11;
        v11[6] = 0;
        **(_QWORD **)(a1 + 24) = v6;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) = v8;
        *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) = v9;
        if ((*(_BYTE *)(a1 + 16) & 2) == 0)
          v10 = (_QWORD *)(*v10 + 56);
        result = v12;
        *(__n128 *)v10 = v12;
      }
      else
      {
        *(_QWORD *)(a1 + 24) = malloc_type_realloc(*(void **)(a1 + 24), 16 * v6 + 56, 0xE75AF901uLL);
      }
    }
  }
  return result;
}

id sub_1B185CF48(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  const void *v10;
  const void *v11;

  v9 = (const void *)a1[15];
  if (v9)
  {
    CFRelease(v9);
    a1[15] = 0;
  }
  v10 = (const void *)a1[12];
  if (v10)
  {
    CFRelease(v10);
    a1[12] = 0;
  }
  v11 = (const void *)a1[8];
  if (v11)
  {
    CFRelease(v11);
    a1[8] = 0;
  }
  return sub_1B193E38C((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B185CF98(uint64_t result)
{
  *(_DWORD *)(result + 104) = 1065353216;
  *(_DWORD *)(result + 80) = 1065353216;
  *(_WORD *)(result + 84) |= 0x68u;
  return result;
}

uint64_t sub_1B185CFB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 88))();
}

const void *sub_1B185CFC0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  v10 = *(const __CFArray **)(a1 + 64);
  if (!v10)
    return 0;
  v11 = sub_1B19C18E0(a2, v10, 1);
  v19 = (const void *)v11;
  if (v11 && !sub_1B19C4614(v11, v12, v13, v14, v15, v16, v17, v18))
  {
    CFRelease(v19);
    return 0;
  }
  return v19;
}

CFTypeRef sub_1B185D040(uint64_t a1, CFTypeRef cf)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 64);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t sub_1B185D090(uint64_t a1)
{
  return *(_QWORD *)(a1 + 64);
}

BOOL sub_1B185D098(const void *a1)
{
  CFTypeID v1;

  v1 = CFGetTypeID(a1);
  return v1 == sub_1B18FF324();
}

void sub_1B185D0C4(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animation");
  *(float *)(a1 + 72) = a2;
}

float sub_1B185D118(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(float *)(a1 + 72);
}

float sub_1B185D160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v9;
  float v12;
  float v13;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  v9 = *(float *)(a1 + 76);
  if (v9 == INFINITY || v9 == 3.4028e38)
    return 3.4028e38;
  v12 = 1.0;
  if (v9 == 0.0)
    v9 = 1.0;
  v13 = v9 * *(float *)(a1 + 72);
  if ((*(_WORD *)(a1 + 84) & 1) != 0)
    v12 = 2.0;
  return v13 * v12;
}

void sub_1B185D1F4(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animation");
  *(float *)(a1 + 76) = a2;
}

float sub_1B185D248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(float *)(a1 + 76);
}

void sub_1B185D290(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFFE | a2;
}

uint64_t sub_1B185D2E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(_WORD *)(a1 + 84) & 1;
}

CFTypeRef sub_1B185D334(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  result = *(CFTypeRef *)(a1 + 120);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 120) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 120) = result;
  }
  return result;
}

uint64_t sub_1B185D3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(_QWORD *)(a1 + 120);
}

void sub_1B185D3F4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if (a2)
    v10 = 2;
  else
    v10 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFFD | v10;
}

uint64_t sub_1B185D458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return (*(unsigned __int16 *)(a1 + 84) >> 2) & 1;
}

void sub_1B185D4A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if (a2)
    v10 = 4;
  else
    v10 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFFB | v10;
}

uint64_t sub_1B185D508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return (*(unsigned __int16 *)(a1 + 84) >> 1) & 1;
}

uint64_t sub_1B185D554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return (*(unsigned __int16 *)(a1 + 84) >> 3) & 1;
}

void sub_1B185D5A0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if (a2)
    v10 = 8;
  else
    v10 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFFF7 | v10;
}

CFStringRef sub_1B185D604(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return sub_1B193E5B0(a1, theString, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B185D654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return sub_1B193E568(a1, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B185D69C(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animation");
  *(double *)(a1 + 136) = a2;
}

double sub_1B185D6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(double *)(a1 + 136);
}

void sub_1B185D738(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animation");
  *(float *)(a1 + 80) = a2;
}

float sub_1B185D78C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(float *)(a1 + 80);
}

void sub_1B185D7D4(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animation");
  *(float *)(a1 + 108) = a2;
}

float sub_1B185D828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(float *)(a1 + 108);
}

void sub_1B185D870(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"animation");
  *(float *)(a1 + 112) = a2;
}

float sub_1B185D8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(float *)(a1 + 112);
}

uint64_t sub_1B185D90C(_WORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  CFTypeID v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex i;
  const void *v28;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if ((_DWORD)a2)
    v10 = 16;
  else
    v10 = 0;
  a1[42] = a1[42] & 0xFFEF | v10;
  v11 = CFGetTypeID(a1);
  result = sub_1B18FF324();
  if (v11 == result)
  {
    result = sub_1B18FF4FC((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19);
    if (result >= 1)
    {
      v26 = result;
      for (i = 0; i != v26; ++i)
      {
        v28 = sub_1B18FF544((uint64_t)a1, i, v20, v21, v22, v23, v24, v25);
        result = sub_1B185D90C(v28, a2);
      }
    }
  }
  return result;
}

uint64_t sub_1B185D9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return (*(unsigned __int16 *)(a1 + 84) >> 4) & 1;
}

BOOL sub_1B185DA14(_BYTE *a1)
{
  CFTypeID v2;

  v2 = CFGetTypeID(a1);
  if (qword_1EEF65EA8 != -1)
    dispatch_once(&qword_1EEF65EA8, &unk_1E63D1B70);
  if (v2 != qword_1EEF65EA0)
    return 0;
  if (a1[372])
    return 1;
  return a1[373] != 0;
}

uint64_t sub_1B185DA94()
{
  if (qword_1EEF65EA8 != -1)
    dispatch_once(&qword_1EEF65EA8, &unk_1E63D1B70);
  return qword_1EEF65EA0;
}

uint64_t sub_1B185DAD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return a1 + 144;
}

uint64_t sub_1B185DB1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(_QWORD *)(a1 + 96);
}

CFTypeRef sub_1B185DB64(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  result = *(CFTypeRef *)(a1 + 96);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 96) = result;
  }
  return result;
}

void sub_1B185DBDC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if (a2)
    v10 = 256;
  else
    v10 = 0;
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFEFF | v10;
}

uint64_t sub_1B185DC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return HIBYTE(*(unsigned __int16 *)(a1 + 84)) & 1;
}

uint64_t sub_1B185DC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return (*(unsigned __int16 *)(a1 + 84) >> 5) & 3;
}

void sub_1B185DCD8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  *(_WORD *)(a1 + 84) = *(_WORD *)(a1 + 84) & 0xFF9F | (32 * (a2 & 3));
}

uint64_t sub_1B185DD34(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFTypeID v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  v16 = CFGetTypeID(cf);
  if (qword_1EEF65EA8 != -1)
    dispatch_once(&qword_1EEF65EA8, &unk_1E63D1B70);
  if (v16 == qword_1EEF65EA0)
  {
    *((_QWORD *)cf + 11) = sub_1B185DE38;
    return sub_1B185DF7C((uint64_t)cf, a2, v10, v11, v12, v13, v14, v15);
  }
  else if (v16 == sub_1B180713C())
  {
    *((_QWORD *)cf + 11) = sub_1B1807304;
    return sub_1B18073E4((uint64_t)cf, a2, v18, v19, v20, v21, v22, v23);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: CFXAnimationSetup - unknown animation class"), v18, v19, v20, v21, v22, v23, v24);
    return 0;
  }
}

BOOL sub_1B185DE38(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  double v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v11 = a9.n128_f64[0];
  if (a1)
  {
    if (a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"anim");
  if (!a3)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"outputAddress");
LABEL_4:
  v13 = *(_QWORD *)(a1 + 376);
  if (v13)
  {
    if (*(_BYTE *)(a1 + 372))
      v14 = a3;
    else
      v14 = a1 + 176;
    if (*(_BYTE *)(a1 + 373))
    {
      v15 = a3;
      if ((*(_BYTE *)(a1 + 374) & 4) != 0)
      {
        v15 = a1 + 304;
        sub_1B179EBD4(*(__int16 *)(a1 + 368), v14, a1 + 240, a1 + 304, a5, a6, a7, a8, v20);
      }
    }
    else
    {
      v15 = a1 + 304;
    }
    if (a2)
    {
      a9.n128_f64[0] = 1.0 - v11;
      v16 = (*(unsigned __int16 *)(a1 + 84) >> 1) & 1;
      v17 = v15;
      v18 = v14;
    }
    else
    {
      v16 = (*(unsigned __int16 *)(a1 + 84) >> 1) & 1;
      a9.n128_f64[0] = v11;
      v17 = v14;
      v18 = v15;
    }
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, __n128))(a1 + 376))(v17, v18, 0, 0, 0, v16, a3, a9);
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXSimpleAnimationEvaluate - invalid evaluation function"), a3, a4, a5, a6, a7, a8, v20);
  }
  return v13 != 0;
}

uint64_t sub_1B185DF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t (*v20)();
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v88;

  if (a1)
  {
    if (a2)
    {
LABEL_3:
      v10 = sub_1B19C4770(a2, a2, a3, a4, a5, a6, a7, a8);
      v18 = sub_1B19C46E0(a2, v11, v12, v13, v14, v15, v16, v17);
      goto LABEL_6;
    }
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
    if (a2)
      goto LABEL_3;
  }
  v18 = 0;
  v10 = *(_WORD *)(a1 + 368);
LABEL_6:
  v19 = v10;
  v20 = sub_1B17FFEC0(v10, v18, 0, 0);
  *(_QWORD *)(a1 + 376) = v20;
  if (!v20)
    return 0;
  v28 = *(unsigned __int8 *)(a1 + 374);
  if ((~v28 & 3) != 0)
  {
    if ((~v28 & 5) == 0)
    {
      sub_1B179EBD4(*(__int16 *)(a1 + 368), a1 + 176, a1 + 240, a1 + 304, v24, v25, v26, v27, v88);
      return 1;
    }
    if ((~v28 & 6) == 0)
    {
      sub_1B179EED0(*(__int16 *)(a1 + 368), a1 + 304, a1 + 240, a1 + 176, v24, v25, v26, v27, v88);
      return 1;
    }
    if ((v28 & 1) != 0)
    {
      v29 = 1;
      *(_BYTE *)(a1 + 373) = 1;
      return v29;
    }
    if ((v28 & 2) != 0)
    {
      v29 = 1;
      *(_BYTE *)(a1 + 372) = 1;
      return v29;
    }
    if ((v28 & 4) != 0)
    {
      *(_WORD *)(a1 + 372) = 257;
      return 1;
    }
    v30 = sub_1B19C4614(a2, v21, v22, v23, v24, v25, v26, v27);
    if (v30)
    {
      v37 = (const void *)v30;
      v29 = 1;
      v38 = (const void *)sub_1B191E290(v19, 1, v31, v32, v33, v34, v35, v36);
      v46 = (const void *)sub_1B19C45CC(a2, v39, v40, v41, v42, v43, v44, v45);
      v54 = (void *)sub_1B191E41C((uint64_t)v38, v47, v48, v49, v50, v51, v52, v53);
      v62 = sub_1B191E340((uint64_t)v38, v55, v56, v57, v58, v59, v60, v61);
      v70 = sub_1B19C46E0(a2, v63, v64, v65, v66, v67, v68, v69);
      v78 = sub_1B19C4728(a2, v71, v72, v73, v74, v75, v76, v77);
      sub_1B17C5830(v46, v37, v54, v62, v70, v78, v79, v80);
      sub_1B185E69C(a1, (uint64_t)v38, v81, v82, v83, v84, v85, v86);
      *(_BYTE *)(a1 + 373) = 1;
      CFRelease(v38);
      return v29;
    }
    return 0;
  }
  return 1;
}

__n128 sub_1B185E154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 result;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
LABEL_3:
  v10 = (const __CFString *)sub_1B185D654(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B185D604(a2, v10, v11, v12, v13, v14, v15, v16);
  sub_1B185D040(a2, *(CFTypeRef *)(a1 + 64));
  v23 = *(_DWORD *)(a1 + 72);
  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v17, v18, v19, v20, v21, v22, (uint64_t)"animation");
  v24 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a2 + 72) = v23;
  *(_DWORD *)(a2 + 76) = v24;
  *(_WORD *)(a2 + 84) = *(_WORD *)(a2 + 84) & 0xFFFE | *(_WORD *)(a1 + 84) & 1;
  sub_1B185D334(a2, *(CFTypeRef *)(a1 + 120), v17, v18, v19, v20, v21, v22);
  v25 = *(_WORD *)(a2 + 84) & 0xFFFD | (2 * ((*(unsigned __int16 *)(a1 + 84) >> 1) & 1));
  *(_WORD *)(a2 + 84) = v25;
  v26 = v25 & 0xFFFFFFFB | (4 * ((*(unsigned __int16 *)(a1 + 84) >> 2) & 1));
  *(_WORD *)(a2 + 84) = v26;
  *(_WORD *)(a2 + 84) = v26 & 0xFFF7 | *(_WORD *)(a1 + 84) & 8;
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_DWORD *)(a2 + 80) = *(_DWORD *)(a1 + 80);
  sub_1B185D90C((_WORD *)a2, (*(unsigned __int16 *)(a1 + 84) >> 4) & 1, v27, v28, v29, v30, v31, v32);
  *(_WORD *)(a2 + 84) = *(_WORD *)(a2 + 84) & 0xFF9F | *(_WORD *)(a1 + 84) & 0x60;
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  *(_DWORD *)(a2 + 112) = *(_DWORD *)(a1 + 112);
  sub_1B185DB64(a2, *(CFTypeRef *)(a1 + 96), v33, v34, v35, v36, v37, v38);
  *(_QWORD *)(a2 + 160) = *(_QWORD *)(a1 + 160);
  *(_WORD *)(a2 + 84) = *(_WORD *)(a2 + 84) & 0xFF7F | *(_WORD *)(a1 + 84) & 0x80;
  result = *(__n128 *)(a1 + 144);
  *(__n128 *)(a2 + 144) = result;
  return result;
}

CFTypeRef *sub_1B185E2E8(CFTypeRef cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeID v9;
  CFTypeRef *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  if (!cf)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
  v9 = CFGetTypeID(cf);
  if (qword_1EEF65EA8 != -1)
    dispatch_once(&qword_1EEF65EA8, &unk_1E63D1B70);
  if (v9 == qword_1EEF65EA0)
  {
    v10 = (CFTypeRef *)sub_1B185E424();
    sub_1B185E488((uint64_t)cf, (uint64_t)v10, v11, v12, v13, v14, v15, v16);
  }
  else if (v9 == sub_1B180713C())
  {
    v10 = (CFTypeRef *)sub_1B18071BC();
    sub_1B1807754((uint64_t)cf, (uint64_t)v10, v23, v24, v25, v26, v27, v28);
  }
  else if (v9 == sub_1B18FF324())
  {
    v10 = (CFTypeRef *)sub_1B18FF3A4();
    sub_1B18FF624((uint64_t)cf, (uint64_t)v10, v29, v30, v31, v32, v33, v34);
  }
  else
  {
    if (v9 != sub_1B190B104())
    {
      sub_1B193EAC4((uint64_t)cf, 0, v35, v36, v37, v38, v39, v40);
      return 0;
    }
    v10 = (CFTypeRef *)sub_1B190B184();
    sub_1B190BCA8((uint64_t)cf, (uint64_t)v10, v41, v42, v43, v44, v45, v46);
  }
  sub_1B193EAC4((uint64_t)cf, v10, v17, v18, v19, v20, v21, v22);
  if (v10)
    sub_1B185E154((uint64_t)cf, (uint64_t)v10, v47, v48, v49, v50, v51, v52);
  return v10;
}

uint64_t sub_1B185E424()
{
  uint64_t result;

  if (qword_1EEF65EA8 != -1)
    dispatch_once(&qword_1EEF65EA8, &unk_1E63D1B70);
  result = sub_1B179CB90(qword_1EEF65EA0, 0x170uLL);
  *(_DWORD *)(result + 104) = 1065353216;
  *(_DWORD *)(result + 80) = 1065353216;
  *(_WORD *)(result + 84) |= 0x68u;
  return result;
}

void *sub_1B185E488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *result;
  char v11;
  char v12;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
    if (a2)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dest");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  *(_QWORD *)(a2 + 376) = *(_QWORD *)(a1 + 376);
  memcpy((void *)(a2 + 176), (const void *)(a1 + 176), *(__int16 *)(a1 + 370));
  memcpy((void *)(a2 + 304), (const void *)(a1 + 304), *(__int16 *)(a1 + 370));
  result = memcpy((void *)(a2 + 240), (const void *)(a1 + 240), *(__int16 *)(a1 + 370));
  v11 = *(_BYTE *)(a2 + 374) & 0xFE | *(_BYTE *)(a1 + 374) & 1;
  *(_BYTE *)(a2 + 374) = v11;
  v12 = v11 & 0xFD | (2 * ((*(_BYTE *)(a1 + 374) & 2) != 0));
  *(_BYTE *)(a2 + 374) = v12;
  *(_BYTE *)(a2 + 374) = v12 & 0xFB | *(_BYTE *)(a1 + 374) & 4;
  *(_DWORD *)(a2 + 370) = *(_DWORD *)(a1 + 370);
  *(_WORD *)(a2 + 368) = *(_WORD *)(a1 + 368);
  return result;
}

void sub_1B185E584()
{
  if (!qword_1EEF65EA0)
    qword_1EEF65EA0 = sub_1B179CB60(&qword_1EEF65EA0);
}

size_t sub_1B185E5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  *(_WORD *)(a1 + 368) = sub_1B191E464(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 374) |= 2u;
  return sub_1B191E598(a2, (void *)(a1 + 304), v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1B185E62C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if ((*(_BYTE *)(a1 + 374) & 2) == 0)
    return 0;
  v9 = sub_1B191E290(*(__int16 *)(a1 + 368), 1, a3, a4, a5, a6, a7, a8);
  sub_1B191E4F4(v9, (CFTypeRef)(a1 + 304), v10, v11, v12, v13, v14, v15);
  return v9;
}

size_t sub_1B185E69C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  *(_WORD *)(a1 + 368) = sub_1B191E464(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 374) |= 1u;
  return sub_1B191E598(a2, (void *)(a1 + 176), v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1B185E704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if ((*(_BYTE *)(a1 + 374) & 1) == 0)
    return 0;
  v9 = sub_1B191E290(*(__int16 *)(a1 + 368), 1, a3, a4, a5, a6, a7, a8);
  sub_1B191E4F4(v9, (CFTypeRef)(a1 + 176), v10, v11, v12, v13, v14, v15);
  return v9;
}

size_t sub_1B185E774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  *(_WORD *)(a1 + 368) = sub_1B191E464(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a1 + 374) |= 4u;
  return sub_1B191E598(a2, (void *)(a1 + 240), v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1B185E7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  if ((*(_BYTE *)(a1 + 374) & 4) == 0)
    return 0;
  v9 = sub_1B191E290(*(__int16 *)(a1 + 368), 1, a3, a4, a5, a6, a7, a8);
  sub_1B191E4F4(v9, (CFTypeRef)(a1 + 240), v10, v11, v12, v13, v14, v15);
  return v9;
}

CFStringRef sub_1B185E854(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXSimpleAnimation>"));
}

CFStringRef sub_1B185E874(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXSimpleAnimation>"));
}

void sub_1B185E894(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v10 = sub_1B17C6244(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v18 = sub_1B187B188(v10, v11, v12, v13, v14, v15, v16, v17);
    if (v18)
    {
      v19 = v18;
      sub_1B1795820(v18, a1, v12, v13, v14, v15, v16, v17);
      if (!a1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"light");
      if (a1[18].i64[0])
        sub_1B1794784(v19, a1);
    }
  }
  sub_1B199BAB8(a1, v11, v12, v13, v14, v15, v16, v17, a9);
}

uint64_t sub_1B185E930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(_QWORD *)(a1 + 288);
}

void sub_1B185E978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4)
  {
    ++*(_DWORD *)(a1 + 388);
    v9 = (const void *)sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v9, 0, 1u);
  }
}

float sub_1B185EA08(unsigned int a1)
{
  float result;

  result = 0.0;
  if (a1 <= 6)
    return flt_1B2246E60[a1];
  return result;
}

uint64_t sub_1B185EA24()
{
  if (qword_1ED4CED20 != -1)
    dispatch_once(&qword_1ED4CED20, &unk_1E63D0D10);
  return qword_1ED4CED28;
}

double sub_1B185EA64()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double result;

  if (!qword_1ED4CED28)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CED28);
    qword_1ED4CED28 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("attenuationDistance"), 0x54u, 1, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("color"), 0x40u, 12, 0, 0, 0, v4, v5);
    sub_1B19C326C(CFSTR("intensity"), 0x58u, 1, 0, 0, 0, v6, v7);
    sub_1B19C326C(CFSTR("orthographicScale"), 0x70u, 1, 0, 0, 0, v8, v9);
    sub_1B19C326C(CFSTR("shadowBias"), 0x108u, 6, 0, 0, 0, v10, v11);
    sub_1B19C326C(CFSTR("shadowIntensity"), 0x60u, 1, 0, 0, 0, v12, v13);
    sub_1B19C326C(CFSTR("shadowRadius"), 0x74u, 1, 0, 0, 0, v14, v15);
    sub_1B19C326C(CFSTR("spotFalloffExponent"), 0x138u, 1, 0, 0, 0, v16, v17);
    sub_1B19C326C(CFSTR("spotInnerAngle"), 0x134u, 1, 0, 0, 0, v18, v19);
    sub_1B19C326C(CFSTR("spotOuterAngle"), 0x130u, 1, 0, 0, 0, v20, v21);
    sub_1B19C326C(CFSTR("temperature"), 0x5Cu, 1, 0, 0, 0, v22, v23);
    sub_1B19C326C(CFSTR("zFar"), 0x100u, 1, 0, 0, 0, v24, v25);
    sub_1B19C326C(CFSTR("zNear"), 0xFCu, 1, 0, 0, 0, v26, v27);
    sub_1B19C326C(CFSTR("shadowCascadeDebugFactor"), 0x80u, 1, 0, 0, 0, v28, v29);
    sub_1B19C326C(CFSTR("areaExtents"), 0x150u, 8, 0, 0, 0, v30, v31);
    sub_1B19C3258();
    qword_1ED4BE4A8 = (uint64_t)sub_1B1862A08;
    *(_QWORD *)&result = 0x1B1863AC4;
    xmmword_1ED4BE498 = xmmword_1E63D2FF0;
    qword_1ED4BE4E8 = (uint64_t)sub_1B1863C44;
  }
  return result;
}

uint64_t sub_1B185ECD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD v21[2];

  if (qword_1ED4CED20 != -1)
    dispatch_once(&qword_1ED4CED20, &unk_1E63D0D10);
  v0 = sub_1B179CB90(qword_1ED4CED28, 0x180uLL);
  v21[0] = 0;
  v21[1] = 0;
  sub_1B185EDE4((float32x4_t *)v0, 1, v1, v2, v3, v4, v5, v6);
  sub_1B179CD74((float *)v21, 1.0, 1.0, 1.0, 1.0);
  sub_1B185EE88((float32x4_t *)v0, (float *)v21, v7, v8, v9, v10, v11, v12, v20);
  if (!v0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v13, v14, v15, v16, v17, v18, (uint64_t)"light");
  *(_QWORD *)(v0 + 264) = 0x3FF0000000000000;
  *(int32x2_t *)(v0 + 104) = vdup_n_s32(0x44800000u);
  *(_QWORD *)(v0 + 252) = 0x42C800003DCCCCCDLL;
  *(_QWORD *)(v0 + 240) = -1;
  *(_WORD *)(v0 + 132) = 272;
  *(_OWORD *)(v0 + 84) = xmmword_1B2246CF0;
  *(_BYTE *)(v0 + 249) = *(_BYTE *)(v0 + 249) & 0xC7 | 8;
  *(_DWORD *)(v0 + 128) = 0;
  *(_OWORD *)(v0 + 112) = xmmword_1B2246D00;
  sub_1B185EFAC(v0);
  return v0;
}

void sub_1B185EDE4(float32x4_t *a1, __int32 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] != a2)
  {
    sub_1B185F12C((uint64_t)a1);
    a1[5].i32[0] = a2;
    sub_1B185EFAC((uint64_t)a1);
    sub_1B185E894(a1, v10, v11, v12, v13, v14, v15, v16, v25);
    v24 = (const void *)sub_1B17C6244(a1, v17, v18, v19, v20, v21, v22, v23);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v24, 0, 1u);
  }
}

void sub_1B185EE88(float32x4_t *a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  BOOL v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"color");
LABEL_3:
  if (!sub_1B179CC0C(a2, a1[4].f32))
  {
    v11 = sub_1B179CCCC(a1[4].f32);
    v12 = sub_1B179CCCC(a2);
    v21 = *(float32x4_t *)a2;
    a1[4] = *(float32x4_t *)a2;
    if (v11 || v12)
      sub_1B185E894(a1, v13, v14, v15, v16, v17, v18, v19, v22);
    sub_1B185F658(a1, v13, v14, v15, v16, v17, v18, v19, v21, v20, a9);
  }
}

void sub_1B185EF58(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"light");
  *(float *)(a1 + 96) = a2;
}

double sub_1B185EFAC(uint64_t a1)
{
  double result;

  switch(*(_DWORD *)(a1 + 80))
  {
    case 3:
      result = 8.58993629e10;
      *(_QWORD *)(a1 + 304) = 0x4234000042700000;
      *(_DWORD *)(a1 + 312) = 0x40000000;
      break;
    case 4:
      *(_QWORD *)(a1 + 304) = 0;
      *(_DWORD *)(a1 + 392) = 1;
      *(_QWORD *)(a1 + 384) = 0x1FFFFFFFFLL;
      *(_WORD *)(a1 + 396) = 0;
      result = 0.0;
      __asm { FMOV            V1.4S, #10.0 }
      *(_OWORD *)(a1 + 320) = _Q1;
      *(_OWORD *)(a1 + 336) = 0u;
      *(_BYTE *)(a1 + 398) = 0;
      __asm { FMOV            V1.4S, #1.0 }
      *(_OWORD *)(a1 + 352) = _Q1;
      *(_OWORD *)(a1 + 368) = 0u;
      break;
    case 5:
      *(_QWORD *)(a1 + 368) = 0;
      *(_BYTE *)(a1 + 304) = *(_BYTE *)(a1 + 304) & 0xFC | 2;
      *(_OWORD *)(a1 + 320) = xmmword_1B2246E30;
      *(_OWORD *)(a1 + 336) = unk_1B2246E40;
      result = 0.0;
      *(_OWORD *)(a1 + 352) = xmmword_1B2246E50;
      break;
    case 6:
      *(_QWORD *)(a1 + 304) = 0;
      result = 2.19902369e13;
      *(_QWORD *)(a1 + 312) = 0x42B4000042C80000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B185F064(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  result = *(_QWORD *)(a1 + 272);
  if (a2)
  {
    if (!result)
    {
      result = sub_1B1840FAC(a1, 21);
      *(_QWORD *)(a1 + 272) = result;
    }
  }
  return result;
}

uint64_t sub_1B185F0C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  result = *(_QWORD *)(a1 + 280);
  if (a2)
  {
    if (!result)
    {
      result = sub_1B1840FAC(a1, 24);
      *(_QWORD *)(a1 + 280) = result;
    }
  }
  return result;
}

void sub_1B185F12C(uint64_t a1)
{
  int v2;
  const void *v3;
  const void *v4;

  v2 = *(_DWORD *)(a1 + 80);
  if (v2 == 4)
  {
LABEL_4:
    v3 = *(const void **)(a1 + 304);
    if (v3)
    {
      CFRelease(v3);
      *(_QWORD *)(a1 + 304) = 0;
    }
    return;
  }
  if (v2 != 5)
  {
    if (v2 != 6)
      return;
    goto LABEL_4;
  }
  v4 = *(const void **)(a1 + 368);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 368) = 0;
  }
  if (*(_BYTE *)(a1 + 320) == 4)
    free(*(void **)(a1 + 360));
}

void sub_1B185F1A4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  unint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  float v28;
  uint64_t v29;
  uint64_t v30;
  int v31;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 5)
  {
    v10 = *(unsigned __int8 *)(a1 + 320);
    v11 = *a2;
    if (v10 != 4 || v11 == 4)
    {
      if (v11 == 4)
      {
        v13 = a2[32];
        if (v13 > 2)
        {
          v24 = (_QWORD *)*((_QWORD *)a2 + 5);
          if (v10 == 4)
            v25 = *(void **)(a1 + 360);
          else
            v25 = 0;
          v26 = malloc_type_realloc(v25, 8 * v13, 0x9B7D0981uLL);
          v27 = 0;
          *((_QWORD *)a2 + 5) = v26;
          v28 = 0.0;
          do
          {
            v29 = v24[v27];
            v30 = v27 + 1;
            if ((_DWORD)v13 - 1 == (_DWORD)v27)
              v31 = 0;
            else
              v31 = v27 + 1;
            v28 = v28
                + vmlas_n_f32((float)-*((float *)&v29 + 1) * COERCE_FLOAT(v24[v31]), COERCE_FLOAT(HIDWORD(v24[v31])), *(float *)&v29);
            v27 = v30;
          }
          while (v13 != v30);
          if (v28 >= 0.0)
          {
            memcpy(v26, v24, 8 * v13);
          }
          else
          {
            do
              *v26++ = v24[(int)--v13];
            while (v13);
          }
        }
        else
        {
          *a2 = 1;
          *(_QWORD *)&v14 = 0x3F0000003F000000;
          *((_QWORD *)&v14 + 1) = 0x3F0000003F000000;
          *((_OWORD *)a2 + 1) = v14;
        }
      }
    }
    else
    {
      free(*(void **)(a1 + 360));
    }
    v15 = *(_OWORD *)a2;
    v16 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 336) = *((_OWORD *)a2 + 1);
    *(_OWORD *)(a1 + 352) = v16;
    *(_OWORD *)(a1 + 320) = v15;
    sub_1B1860874(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    sub_1B1860DE0((float32x4_t *)a1, v17, v18, v19, v20, v21, v22, v23);
  }
}

uint64_t sub_1B185F324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  float v14;
  _BOOL4 v15;
  int v16;
  uint64_t result;
  unsigned int v18;
  char v19;
  int v20;
  unsigned int v21;

  v9 = *(_DWORD *)(a1 + 80);
  if (v9 == 5)
    v10 = (*(_BYTE *)(a1 + 320) & 7) << 7;
  else
    v10 = 0;
  v11 = *(_QWORD *)(a1 + 272);
  if (v11)
  {
    if (sub_1B1841A40(v11, a2, a3, a4, a5, a6, a7, a8))
      v12 = 8;
    else
      v12 = 0;
    v13 = *(_DWORD *)(a1 + 80);
  }
  else
  {
    v12 = 0;
    v13 = v9;
  }
  if ((v13 - 1) < 2)
    goto LABEL_16;
  if (v13 == 3)
  {
    v14 = *(float *)(a1 + 304);
  }
  else
  {
    if (v13 != 6)
      goto LABEL_17;
    v14 = *(float *)(a1 + 316);
  }
  if (v14 < 180.0)
  {
LABEL_16:
    v15 = *(_BYTE *)(a1 + 248) != 0;
    goto LABEL_18;
  }
LABEL_17:
  v15 = 0;
LABEL_18:
  if (v15)
    v16 = 16;
  else
    v16 = 0;
  result = v10 | v12 | v9 & 7 | v16;
  if (v15)
  {
    if (*(unsigned __int8 *)(a1 + 132) >= 0x40u)
      v18 = 64;
    else
      v18 = *(unsigned __int8 *)(a1 + 132);
    if (*(_BYTE *)(a1 + 132))
      v19 = v18;
    else
      v19 = 1;
    v20 = (v19 & 0x1F) << 10;
    if (v18 >= 0x1F)
      v20 = 31744;
    if (*(float *)(a1 + 116) == 0.0)
      v20 = 1024;
    result = v20 | (32 * (*(float *)(a1 + 96) < 1.0)) | result;
    if (v13 == 2)
    {
      v21 = *(unsigned __int8 *)(a1 + 133);
      result = result & 0xFFFC7FFF | ((v21 & 7) << 15);
      if (v21 >= 2)
        return result | ((*(float *)(a1 + 128) != 0.0) << 19) | 0x40000;
    }
  }
  return result;
}

uint64_t sub_1B185F474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 272);
  if (result)
    return sub_1B1841A40(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1B185F484(uint64_t a1)
{
  int v1;
  float v2;

  v1 = *(_DWORD *)(a1 + 80);
  if ((v1 - 1) < 2)
    return 1;
  if (v1 == 6)
  {
    v2 = *(float *)(a1 + 316);
    return v2 < 180.0;
  }
  if (v1 == 3)
  {
    v2 = *(float *)(a1 + 304);
    return v2 < 180.0;
  }
  return 0;
}

uint64_t sub_1B185F4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(unsigned __int8 *)(a1 + 248);
}

uint64_t sub_1B185F51C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(unsigned __int8 *)(a1 + 132) >= 0x40u)
    v9 = 64;
  else
    v9 = *(unsigned __int8 *)(a1 + 132);
  if (*(_BYTE *)(a1 + 132))
    return v9;
  else
    return 1;
}

float sub_1B185F578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 116);
}

BOOL sub_1B185F5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(_DWORD *)(a1 + 80) == 2;
}

uint64_t sub_1B185F610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(unsigned __int8 *)(a1 + 133);
}

void sub_1B185F658(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11)
{
  if (a1[5].i32[0] == 5)
    sub_1B1860BF0((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a11);
}

uint64_t sub_1B185F68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return a1 + 64;
}

float sub_1B185F6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 96);
}

void sub_1B185F71C(float32x4_t *a1, void *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] == 6)
  {
    v10 = (const void *)a1[19].i64[0];
    if (v10 != cf)
    {
      if (v10)
      {
        CFRelease(v10);
        a1[19].i64[0] = 0;
      }
      if (cf)
        v11 = CFRetain(cf);
      else
        v11 = 0;
      a1[19].i64[0] = (uint64_t)v11;
    }
    v12 = j__objc_msgSend__infoHangle(cf, (const char *)cf, a3, a4);
    if (v12)
    {
      a1[19].i32[3] = *(_DWORD *)(v12 + 20);
      v20 = *(float *)(v12 + 4);
    }
    else
    {
      a1[19].i32[3] = 1110704128;
      v20 = 1.0;
    }
    a1[19].f32[2] = v20;
    sub_1B185E894(a1, v13, v14, v15, v16, v17, v18, v19, v29);
    v28 = (const void *)sub_1B17C6244(a1, v21, v22, v23, v24, v25, v26, v27);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v28, 0, 1u);
  }
}

uint64_t sub_1B185F808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) != 6)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Light should be a IES"), a3, a4, a5, a6, a7, a8, (uint64_t)"light->_type == kCFXLightTypeIES");
  return *(_QWORD *)(a1 + 304);
}

float sub_1B185F878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) != 6)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Light should be a IES"), a3, a4, a5, a6, a7, a8, (uint64_t)"light->_type == kCFXLightTypeIES");
  return *(float *)(a1 + 316);
}

uint64_t sub_1B185F8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  float v11;
  float v12;
  BOOL v13;
  char v14;
  float v20;
  float v21;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"projInfoOut");
LABEL_3:
  v10 = *(_DWORD *)(a1 + 80);
  v11 = 60.0;
  v12 = 90.0;
  switch(v10)
  {
    case 1:
    case 4:
      break;
    case 3:
      v11 = *(float *)(a1 + 304);
      goto LABEL_5;
    case 6:
      v12 = *(float *)(a1 + 316);
      break;
    default:
LABEL_5:
      v13 = v11 < 180.0 && v11 > 0.0;
      v12 = 60.0;
      if (v13)
        v12 = v11;
      break;
  }
  v14 = *(_BYTE *)a2 & 0xC2 | (v10 == 2);
  *(_BYTE *)a2 = v14;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(a2 + 32) = _D1;
  v20 = *(float *)(a1 + 252);
  v21 = *(float *)(a1 + 256);
  if (v21 == 0.0)
    v21 = 100.0;
  *(float *)(a2 + 4) = v20;
  *(float *)(a2 + 8) = v21;
  if (v20 == 0.0)
    *(_DWORD *)(a2 + 4) = 1065353216;
  *(_BYTE *)a2 = v14 & 0xC1;
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a1 + 112);
  *(float *)(a2 + 44) = v12;
  return 1;
}

float sub_1B185FA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 3)
    return *(float *)(a1 + 304);
  else
    return 60.0;
}

float sub_1B185FA80(uint64_t a1, int a2, float a3)
{
  float v3;
  float v4;

  v3 = *(float *)(a1 + 84) * a3;
  v4 = fmaxf(v3, 0.0);
  if (!a2)
    return v4;
  if (v3 <= 0.0)
    return 0.0;
  return -1.0 / v3;
}

void sub_1B185FB00(uint64_t a1)
{
  int v1;
  float v2;
  double v3;
  float v4;
  float v5;
  float v6;

  v1 = *(_DWORD *)(a1 + 80);
  if (v1 == 3)
  {
    v2 = fminf(*(float *)(a1 + 304), 180.0);
    v4 = *(float *)(a1 + 308);
    if (v4 >= (float)(v2 + -0.1))
      v4 = v2 + -0.1;
    v3 = (float)(v4 * 0.5);
  }
  else
  {
    v2 = 0.0;
    v3 = 0.0;
    if (v1 == 6)
      v2 = *(float *)(a1 + 316);
  }
  v5 = v3 / 180.0 * 3.14159265;
  cosf(v5);
  v6 = (float)(v2 * 0.5) / 180.0 * 3.14159265;
  fmaxf(cosf(v6), 0.0);
}

float sub_1B185FC40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 84);
}

uint64_t sub_1B185FC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(_BYTE *)(a1 + 249) & 1;
}

void sub_1B185FCD4(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v10 = a1[15].i8[9];
  if (((((v10 & 1) == 0) ^ v8) & 1) == 0)
  {
    a1[15].i8[9] = v10 & 0xFE | v8;
    sub_1B185E894(a1, a2, a3, a4, a5, a6, a7, a8, v19);
    v18 = (const void *)sub_1B17C6244(a1, v11, v12, v13, v14, v15, v16, v17);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v18, 0, 1u);
  }
}

void sub_1B185FD78(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[15].u8[8] != v9)
  {
    a1[15].i8[8] = v9;
    v11 = (const void *)sub_1B17C6244(a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v11, 0, 1u);
    sub_1B185E894(a1, v12, v13, v14, v15, v16, v17, v18, a9);
  }
}

uint64_t sub_1B185FE0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(_QWORD *)(a1 + 240);
}

void sub_1B185FE54(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[15].i64[0] != a2)
  {
    a1[15].i64[0] = a2;
    sub_1B185E894(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

float sub_1B185FEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 88);
}

void sub_1B185FF08(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11)
{
  unsigned __int32 v11;

  v11 = a9.i32[0];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  a1[5].i32[2] = v11;
  sub_1B185F658(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

float sub_1B185FF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  float v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v9 = *(int *)(a1 + 80);
  v10 = 0.0;
  if (v9 <= 6)
    v10 = flt_1B2246E60[v9];
  return *(float *)(a1 + 88) / v10;
}

float sub_1B185FFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 112);
}

void sub_1B1860010(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  a1[7].f32[0] = a9;
  sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
}

double sub_1B1860068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(double *)(a1 + 264);
}

void sub_1B18600B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  *(double *)(a1 + 264) = a9;
  sub_1B199BAB8((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8, a10);
}

double sub_1B1860108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(double *)(a1 + 104);
}

void sub_1B1860150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x2_t a9, uint64_t a10)
{
  uint32x2_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v12 = (uint32x2_t)vcge_f32((float32x2_t)0x3400000034000000, vabd_f32(a9, *(float32x2_t *)(a1 + 104)));
  if ((vpmin_u32(v12, v12).u32[0] & 0x80000000) == 0)
  {
    *(double *)(a1 + 104) = *(double *)&a9;
    v13 = (const void *)sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v13, 0, 1u);
    sub_1B185E894((float32x4_t *)a1, v14, v15, v16, v17, v18, v19, v20, a10);
  }
}

void sub_1B1860200(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  float v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v12 = a1[7].f32[1];
  if (v12 != a9)
  {
    a1[7].f32[1] = a9;
    if (a9 == 0.0 || v12 == 0.0)
    {
      v13 = (const void *)sub_1B17C6244(a1, a2, a3, a4, a5, a6, a7, a8);
      sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v13, 0, 1u);
      sub_1B185E894(a1, v14, v15, v16, v17, v18, v19, v20, a10);
    }
  }
}

uint64_t sub_1B18602B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(unsigned __int8 *)(a1 + 132);
}

void sub_1B18602F8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[8].u8[4] != v9)
  {
    a1[8].i8[4] = v9;
    v11 = (const void *)sub_1B17C6244(a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v11, 0, 1u);
    sub_1B185E894(a1, v12, v13, v14, v15, v16, v17, v18, a9);
  }
}

float sub_1B186038C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  result = 2.0;
  if (*(_DWORD *)(a1 + 80) == 3)
    return *(float *)(a1 + 312);
  return result;
}

void sub_1B18603E4(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] == 3)
  {
    a1[19].f32[2] = a9;
    sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
  }
}

float sub_1B186045C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 3)
    return *(float *)(a1 + 308);
  else
    return 45.0;
}

void sub_1B18604BC(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] == 3)
  {
    a1[19].f32[1] = a9;
    sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
  }
}

void sub_1B1860534(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] == 3)
  {
    a1[19].f32[0] = a9;
    sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
  }
}

float sub_1B18605AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 92);
}

void sub_1B18605F4(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11)
{
  unsigned __int32 v11;

  v11 = a9.i32[0];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  a1[5].i32[3] = v11;
  sub_1B185F658(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

uint64_t sub_1B186064C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(unsigned int *)(a1 + 80);
}

float sub_1B1860694(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 256);
}

void sub_1B18606DC(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  a1[16].f32[0] = a9;
  sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
}

float sub_1B1860734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 252);
}

void sub_1B186077C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  a1[15].f32[3] = a9;
  sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
}

uint64_t sub_1B18607D4(uint64_t a1)
{
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;

  if (*(_DWORD *)(a1 + 80) != 5 || (*(_BYTE *)(a1 + 304) & 2) == 0)
    return 0;
  v2 = *(_QWORD *)(a1 + 368);
  if (!v2)
  {
    v2 = -[VFXModel __createCFObject]_0();
    *(_QWORD *)(a1 + 368) = v2;
    v4 = (void *)sub_1B1877ABC();
    v12 = sub_1B187813C((uint64_t)v4, v5, v6, v7, v8, v9, v10, v11);
    sub_1B18412A8(v12, 0, v13, v14, v15, v16, v17, v18);
    sub_1B18781DC((uint64_t)v4, 1, v19, v20, v21, v22, v23, v24);
    sub_1B17A1B04(v2, v4, v25, v26, v27, v28, v29, v30);
    if (v4)
      CFRelease(v4);
    sub_1B1860874(a1, v31, v32, v33, v34, v35, v36, v37);
    sub_1B1860BF0(a1, v38, v39, v40, v41, v42, v43, v44, v45, v46);
  }
  return v2;
}

void sub_1B1860874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  float v10;
  const __CFAllocator *v11;
  CFDataRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFDataRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const CFArrayCallBacks *v20;
  const __CFArray *v21;
  const __CFArray *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const __CFString *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  CGPath *Mutable;
  unint64_t v51;
  float32x2_t v52;
  double v53;
  double v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  void *v63;
  void *values;
  UInt8 v65[2];
  UInt8 bytes[4];
  uint64_t v67;
  _BYTE v68[12];
  CGPath *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a1 + 368);
  if (v8)
  {
    switch(*(_BYTE *)(a1 + 320))
    {
      case 0:
        v10 = *(float *)(a1 + 336);
        *(float *)bytes = -v10;
        v67 = 0;
        *(float *)v68 = v10;
        *(_QWORD *)&v68[4] = 0;
        *(_WORD *)v65 = 256;
        v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v12 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 24);
        values = (void *)sub_1B17ED204(v12, 0, 2, 3, 1, v13, v14, v15);
        CFRelease(v12);
        v16 = CFDataCreate(v11, v65, 2);
        v63 = (void *)sub_1B17A39B4();
        sub_1B17A3C5C((uint64_t)v63, 2, 1, v16, 1, v17, v18, v19);
        CFRelease(v16);
        v62 = 0;
        v20 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
        v21 = CFArrayCreate(v11, (const void **)&values, 1, MEMORY[0x1E0C9B378]);
        v22 = CFArrayCreate(v11, (const void **)&v63, 1, v20);
        v28 = (const void *)sub_1B17AF674(v21, v22, (uint64_t)&v62, v23, v24, v25, v26, v27);
        sub_1B193E5B0((uint64_t)v28, CFSTR("Area Light - Line"), v29, v30, v31, v32, v33, v34);
        CFRelease(v22);
        CFRelease(v21);
        v35 = v63;
        goto LABEL_16;
      case 1:
        v36 = sub_1B19077CC(0, 1, 1, 0, COERCE_FLOAT(*(_OWORD *)(a1 + 336)) + COERCE_FLOAT(*(_OWORD *)(a1 + 336)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 336))) + COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 336))), 0.0);
        v28 = (const void *)v36;
        v43 = CFSTR("Area light - Rectangle");
        goto LABEL_8;
      case 2:
        v36 = sub_1B19077CC(0, 1, 1, 0, COERCE_FLOAT(*(_OWORD *)(a1 + 336)) + COERCE_FLOAT(*(_OWORD *)(a1 + 336)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 336))) + COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 336))), 0.0);
        v28 = (const void *)v36;
        v43 = CFSTR("Area Light - Ellipse");
        goto LABEL_8;
      case 3:
        v36 = sub_1B18E3BCC(0, 1, 1, 1, 0, 0, *(float *)(a1 + 336) + *(float *)(a1 + 336), *(float *)(a1 + 340) + *(float *)(a1 + 340), *(float *)(a1 + 344) + *(float *)(a1 + 344), 0.0);
        v28 = (const void *)v36;
        v43 = CFSTR("Area Light - Ellipsoid");
LABEL_8:
        sub_1B193E5B0(v36, v43, v37, v38, v39, v40, v41, v42);
        goto LABEL_17;
      case 4:
        Mutable = CGPathCreateMutable();
        if (*(_BYTE *)(a1 + 352))
        {
          v51 = 0;
          do
          {
            v52 = vmul_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 360) + 8 * v51), (float32x2_t)0x3F800000BF800000);
            v53 = v52.f32[0];
            v54 = v52.f32[1];
            if (v51)
              CGPathAddLineToPoint(Mutable, 0, v53, v54);
            else
              CGPathMoveToPoint(Mutable, 0, v53, v54);
            ++v51;
          }
          while (v51 < *(unsigned __int8 *)(a1 + 352));
        }
        CGPathCloseSubpath(Mutable);
        *(float *)bytes = 0.0;
        v67 = 1065353216;
        *(_QWORD *)v68 = 0;
        *(_DWORD *)&v68[8] = 2139095039;
        v69 = Mutable;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v55 = (const void *)sub_1B19DC748((uint64_t)bytes);
        *(float *)bytes = 0.0;
        v67 = 1065353216;
        *(_QWORD *)v68 = 0;
        *(_DWORD *)&v68[8] = 2139095039;
        v69 = Mutable;
        v70 = 0;
        v71 = 0;
        v72 = 0;
        v28 = (const void *)sub_1B19981C0((uint64_t)v55, (__int128 *)bytes);
        sub_1B193E5B0((uint64_t)v28, CFSTR("Area light - Polygon"), v56, v57, v58, v59, v60, v61);
        CFRelease(v55);
        v35 = Mutable;
LABEL_16:
        CFRelease(v35);
LABEL_17:
        sub_1B17A14D4(v8, (uint64_t)v28, v44, v45, v46, v47, v48, v49);
        if (v28)
          CFRelease(v28);
        break;
      default:
        sub_1B17A14D4(*(_QWORD *)(a1 + 368), 0, a3, a4, a5, a6, a7, a8);
        break;
    }
  }
}

void sub_1B1860BF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFString *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const __CFAllocator *v46;
  __int16 *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int16 *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  UInt8 bytes[16];

  v10 = *(_QWORD *)(a1 + 368);
  if (v10)
  {
    *(__n128 *)bytes = sub_1B18611B0((float32x4_t *)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    v18 = sub_1B17A08FC(v10, 0, v12, v13, v14, v15, v16, v17);
    sub_1B187806C((uint64_t)v18, *(_BYTE *)(a1 + 304) & 1, v19, v20, v21, v22, v23, v24);
    switch(*(_BYTE *)(a1 + 320))
    {
      case 0:
      case 1:
      case 4:
        v32 = sub_1B187813C((uint64_t)v18, v25, v26, v27, v28, v29, v30, v31);
        sub_1B1841B94(v32, 1, (float *)bytes, v33, v34, v35, v36, v37);
        break;
      case 2:
        v38 = CFSTR("area_shape_ellipse_frag");
        goto LABEL_6;
      case 3:
        sub_1B187806C((uint64_t)v18, 1, v26, v27, v28, v29, v30, v31);
        v38 = CFSTR("area_shape_ellipsoid_frag");
LABEL_6:
        v39 = sub_1B181DE74(CFSTR("area_shape_vert"), v38);
        sub_1B1878944((uint64_t)v18, v39, v40, v41, v42, v43, v44, v45);
        CFRelease(v39);
        v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
        v47 = (__int16 *)CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 16);
        sub_1B193FB20((uint64_t)v18, CFSTR("color"), v47, v48, v49, v50, v51, v52);
        CFRelease(v47);
        v53 = *(_OWORD *)(a1 + 336);
        HIDWORD(v53) = 0;
        v60 = v53;
        v54 = (__int16 *)CFDataCreate(v46, (const UInt8 *)&v60, 16);
        sub_1B193FB20((uint64_t)v18, CFSTR("halfExtents"), v54, v55, v56, v57, v58, v59);
        CFRelease(v54);
        break;
      default:
        return;
    }
  }
}

void sub_1B1860D48(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v10;
  const void *v11;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] == 5)
  {
    if (v8)
      v10 = 2;
    else
      v10 = 0;
    a1[19].i8[0] = a1[19].i8[0] & 0xFD | v10;
    if ((v8 & 1) == 0)
    {
      v11 = (const void *)a1[23].i64[0];
      if (v11)
      {
        CFRelease(v11);
        a1[23].i64[0] = 0;
      }
    }
    sub_1B1860DE0(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B1860DE0(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1B185E894(a1, a2, a3, a4, a5, a6, a7, a8, v21);
  v16 = sub_1B17C6244(a1, v9, v10, v11, v12, v13, v14, v15);
  sub_1B187A8A4(v16, 9, a1, 0, v17, v18, v19, v20);
}

uint64_t sub_1B1860E14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 5)
    return (*(unsigned __int8 *)(a1 + 304) >> 1) & 1;
  else
    return 0;
}

void sub_1B1860E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_DWORD *)(a1 + 80) == 5)
  {
    *(__n128 *)(a1 + 336) = a9;
    sub_1B1860874(a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B1860DE0((float32x4_t *)a1, v10, v11, v12, v13, v14, v15, v16);
  }
}

__n128 sub_1B1860EB4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  result.n128_u64[0] = 0;
  if (a1[5].n128_u32[0] == 5)
    return a1[21];
  return result;
}

void sub_1B1860F0C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11)
{
  char v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v11 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] == 5)
  {
    a1[19].i8[0] = a1[19].i8[0] & 0xFE | v11;
    sub_1B1860BF0((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
    sub_1B199BAB8(a1, v13, v14, v15, v16, v17, v18, v19, a11);
  }
}

uint64_t sub_1B1860F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 5)
    return *(_BYTE *)(a1 + 304) & 1;
  else
    return 0;
}

__n128 sub_1B1860FEC@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  __int128 *v10;
  __int128 v11;
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a2, a3, a4, a5, a6, a7, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 5)
    v10 = (__int128 *)(a1 + 320);
  else
    v10 = &xmmword_1B2246E30;
  v11 = v10[1];
  *(_OWORD *)a8 = *v10;
  *(_OWORD *)(a8 + 16) = v11;
  result = (__n128)v10[2];
  *(__n128 *)(a8 + 32) = result;
  return result;
}

BOOL sub_1B186105C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 80) == 6 && *(_QWORD *)(a1 + 304) != 0;
}

BOOL sub_1B1861080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 88) == 0.0 || sub_1B179CCCC((float *)(a1 + 64));
}

double sub_1B18610E8(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float32x4_t v6;
  double result;

  a2.i32[0] = a1[5].i32[3];
  if (a2.f32[0] == 0.0)
  {
    v3 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    a3.i32[0] = 1170939904;
    v4 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a3, a2)), 0);
    v5 = vaddq_f32((float32x4_t)vbslq_s8(v4, (int8x16_t)xmmword_1B2246D20, (int8x16_t)xmmword_1B2246D10), vdivq_f32((float32x4_t)vbslq_s8(v4, (int8x16_t)xmmword_1B2246D40, (int8x16_t)xmmword_1B2246D30), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a2.f32, 0), (float32x4_t)vbslq_s8(v4, (int8x16_t)xmmword_1B2246D60, (int8x16_t)xmmword_1B2246D50))));
    v5.i32[3] = 0;
    v6 = vmaxnmq_f32(v5, (float32x4_t)0);
    v6.i32[3] = 0;
    v3 = vminnmq_f32(v6, (float32x4_t)xmmword_1B2244F70);
  }
  *(_QWORD *)&result = vmulq_f32(v3, a1[4]).u64[0];
  return result;
}

double sub_1B1861194(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10)
{
  double result;

  *(_QWORD *)&result = sub_1B18611B0(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10).n128_u64[0];
  return result;
}

__n128 sub_1B18611B0(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10)
{
  float32x4_t v10;
  int8x16_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  __n128 result;
  float32x4_t v18;

  a9.i32[0] = a1[5].i32[3];
  if (a9.f32[0] == 0.0)
  {
    v10 = (float32x4_t)xmmword_1B2244DB0;
  }
  else
  {
    a10.i32[0] = 1170939904;
    v11 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(a10, a9)), 0);
    v12 = vaddq_f32((float32x4_t)vbslq_s8(v11, (int8x16_t)xmmword_1B2246D20, (int8x16_t)xmmword_1B2246D10), vdivq_f32((float32x4_t)vbslq_s8(v11, (int8x16_t)xmmword_1B2246D40, (int8x16_t)xmmword_1B2246D30), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)a9.f32, 0), (float32x4_t)vbslq_s8(v11, (int8x16_t)xmmword_1B2246D60, (int8x16_t)xmmword_1B2246D50))));
    v12.i32[3] = 0;
    v13 = vmaxnmq_f32(v12, (float32x4_t)0);
    v13.i32[3] = 0;
    v10 = vminnmq_f32(v13, (float32x4_t)xmmword_1B2244F70);
  }
  v14 = vmulq_f32(v10, a1[4]);
  v15 = v14;
  if (a1[5].i32[0] == 6)
  {
    v16 = vmulq_n_f32(v14, a1[19].f32[2] * 0.0014641);
    v16.i32[3] = HIDWORD(*(_OWORD *)&a1[4]);
    v18 = v16;
  }
  else
  {
    v15.i32[3] = HIDWORD(*(_OWORD *)&a1[4]);
    v18 = v15;
  }
  result.n128_u64[0] = vmulq_n_f32(v18, sub_1B185FF60((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8)).u64[0];
  result.n128_u32[3] = v18.u32[3];
  return result;
}

void sub_1B18612AC(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9, uint64_t a10)
{
  float v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v12 = a1[5].f32[1];
  a1[5].f32[1] = a9;
  if ((a9 == 0.0) == (v12 == 0.0))
    sub_1B199BAB8(a1, a2, a3, a4, a5, a6, a7, a8, a10);
  else
    sub_1B185E894(a1, a2, a3, a4, a5, a6, a7, a8, a10);
}

void sub_1B1861334(float32x4_t *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  CFTypeRef v11;
  CFTypeRef v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v11 = (CFTypeRef)a1[18].i64[1];
  if (v11 != cf)
  {
    if (v11)
    {
      CFRelease(v11);
      a1[18].i64[1] = 0;
    }
    if (cf)
      v12 = CFRetain(cf);
    else
      v12 = 0;
    a1[18].i64[1] = (uint64_t)v12;
    sub_1B185E894(a1, (uint64_t)cf, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B18613C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(_QWORD *)(a1 + 296);
}

void sub_1B1861408(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __int8 v9;

  v9 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].i32[0] == 4)
  {
    a1[24].i8[12] = v9;
    sub_1B185E894(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B1861474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4)
    return *(unsigned __int8 *)(a1 + 396);
  else
    return 0;
}

void sub_1B18614D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4 && *(_BYTE *)(a1 + 396) == 1 && *(unsigned __int8 *)(a1 + 397) != v8)
  {
    *(_BYTE *)(a1 + 397) = v8;
    sub_1B1861554(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B1861554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4 && *(_BYTE *)(a1 + 396) == 1)
  {
    ++*(_DWORD *)(a1 + 392);
    v9 = (const void *)sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v9, 0, 1u);
  }
}

uint64_t sub_1B18615F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4)
    return *(unsigned __int8 *)(a1 + 397);
  else
    return 0;
}

void sub_1B186164C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4)
    *(_BYTE *)(a1 + 398) = a2;
}

BOOL sub_1B18616A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(_DWORD *)(a1 + 80) == 4 && *(_BYTE *)(a1 + 398) != 0;
}

void sub_1B1861708(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"light");
    a2 = v10;
  }
  if (a1[5].n128_u32[0] == 4)
    a1[23] = a2;
}

__n128 sub_1B1861764(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  result.n128_u64[0] = 0;
  if (a1[5].n128_u32[0] == 4)
    return a1[23];
  return result;
}

void sub_1B18617BC(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"light");
    a2 = v10;
  }
  if (a1[5].n128_u32[0] == 4)
    a1[22] = a2;
}

__n128 sub_1B1861818(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].n128_u32[0] == 4)
    return a1[22];
  else
    __asm { FMOV            V0.4S, #1.0 }
  return result;
}

float32x4_t sub_1B1861874(float32x4_t *a1, float32x4_t result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float32x4_t v10;

  if (!a1)
  {
    v10 = result;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"light");
    result = v10;
  }
  if (a1[5].i32[0] == 4)
  {
    result.i32[3] = 0;
    result = vminnmq_f32(result, (float32x4_t)xmmword_1B2246D70);
    a1[20] = result;
  }
  return result;
}

__n128 sub_1B18618E0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a1[5].n128_u32[0] == 4)
    return a1[20];
  else
    __asm { FMOV            V0.4S, #10.0 }
  return result;
}

void sub_1B186193C(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"light");
    a2 = v10;
  }
  if (a1[5].n128_u32[0] == 4)
    a1[21] = a2;
}

__n128 sub_1B1861998(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  result.n128_u64[0] = 0;
  if (a1[5].n128_u32[0] == 4)
    return a1[21];
  return result;
}

void sub_1B18619F0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4)
    *(_WORD *)(a1 + 384) = a2;
}

uint64_t sub_1B1861A48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4)
    return *(__int16 *)(a1 + 384);
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1B1861AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (*(_DWORD *)(a1 + 80) == 4 && *(_BYTE *)(a1 + 396) == 1)
    return *(unsigned int *)(a1 + 392);
  else
    return 1;
}

float sub_1B1861B0C(unsigned int a1, float a2)
{
  float v2;

  v2 = 0.0;
  if (a1 <= 6)
    v2 = flt_1B2246E60[a1];
  if (a1 == 6)
    a2 = a2 * 0.683;
  return (float)(a2 * v2) / 1000.0;
}

float sub_1B1861B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  float32x4_t *v10;
  int v11;
  float32x4_t v12;
  float v13;
  float v14;
  unsigned int v15;
  float32x2_t v16;
  int32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  float v28;
  float v29;
  float v30;
  float32x4_t v32;
  float32x4_t v34;

  v10 = (float32x4_t *)sub_1B1869AC8(a2, a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_DWORD *)(a1 + 80);
  if ((v11 | 2) != 3)
    return 1.0;
  v12 = vsubq_f32(v10[3], a9);
  v13 = *(float *)(a1 + 84);
  v14 = 1.0;
  if (v13 > 0.0)
  {
    *(float *)&v15 = v13 * v13;
    v16 = vrecpe_f32((float32x2_t)COERCE_UNSIGNED_INT(v13 * v13));
    _D0 = vmul_f32(v16, vrecps_f32((float32x2_t)v15, v16));
    _D0.i32[0] = vmul_f32(_D0, vrecps_f32((float32x2_t)v15, _D0)).u32[0];
    _Q1 = vmulq_f32(v12, v12);
    _Q1.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)_Q1, 2), vaddq_f32(_Q1, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 1))).u32[0];
    __asm { FMLS            S4, S0, V1.S[0] }
    _D0.f32[0] = fminf(fmaxf(_S4, 0.0), 1.0);
    v14 = (float)(1.0 / fmaxf(_Q1.f32[0], 0.0001)) * (float)(_D0.f32[0] * _D0.f32[0]);
  }
  if (v11 == 3)
  {
    v32 = v12;
    v34 = vnegq_f32(v10[2]);
    sub_1B185FB00(a1);
    v24 = (int32x4_t)vmulq_f32(v32, v32);
    v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
    v25 = vrsqrte_f32((float32x2_t)v24.u32[0]);
    v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v25, v25)));
    v27 = vmulq_f32(vmulq_n_f32(v32, vmul_f32(v26, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(v26, v26))).f32[0]), v34);
    v30 = fminf(fmaxf(vmlas_n_f32(v29, v28, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]), 0.0), 1.0);
    return v14 * (float)(v30 * v30);
  }
  return v14;
}

void sub_1B1861CB0(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  __int32 v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  __float2 v42;
  float32x4_t v43;
  float32x2_t v44;
  float v45;
  float v46;
  float v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  float v62;
  float v63;
  uint64_t v64;
  float v65;
  float v66;
  float v67;
  float v68;
  __int128 v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  __n128 v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float v78[6];
  int v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;

  v9 = a5;
  v90 = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    if (a4)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), 0, a4, a5, a6, a7, a8, (uint64_t)"light");
    if (a4)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"lightNode");
LABEL_3:
  v13 = sub_1B1869AC8(a4, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v69 = *(_OWORD *)(v13 + 32);
  v71 = *(float32x4_t *)(v13 + 48);
  v77.i32[2] = 0;
  v77.i64[0] = 0;
  v20 = sub_1B186B5BC(a2, (__n128 *)&v77, v14, v15, v16, v17, v18, v19);
  v74 = sub_1B18611B0(a3, v21, v22, v23, v24, v25, v26, v27, (float32x4_t)v20, v28);
  v35 = vmulq_n_f32((float32x4_t)v74, sub_1B1861B4C((uint64_t)a3, a4, v29, v30, v31, v32, v33, v34, v77));
  v36 = a3[5].i32[0];
  if (v36 == 1)
  {
    v38 = vsubq_f32(v71, v77);
    v39 = vmulq_f32(v38, v38);
    v40 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1);
    v40.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, v40)).f32[0]);
    v88 = xmmword_1B2246D80;
    v89 = 0x3F88CF6B3F973FD9;
    v75 = v35;
    if (v40.f32[0] <= 0.1)
    {
      v41 = 1.5708;
    }
    else
    {
      v70 = v40.i64[0];
      v72 = v38;
      v41 = asinf(0.1 / v40.f32[0]);
      v40.i64[0] = v70;
      v38 = v72;
    }
    v73 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0));
    v42 = __sincosf_stret(v41);
    v78[0] = 1.7725 - (float)(v42.__cosval * 1.7725);
    v78[1] = (float)((float)(v42.__sinval * v42.__sinval) * 3.07) * 0.5;
    if (v9 < 3)
    {
      v43 = v75;
      if (v9 != 2)
        return;
      v79 = 1049652923;
      v48 = v73.f32[2] * 0.488602512;
      v80 = vmuls_lane_f32(-0.4886, *(float32x2_t *)v73.f32, 1);
      v81 = v48;
      v82 = -0.4886 * v73.f32[0];
    }
    else
    {
      v78[2] = (float)((float)(v42.__cosval * -3.9633) * (float)((float)(v42.__cosval * v42.__cosval) + -1.0)) * 0.5;
      v43 = v75;
      if (v9 == 3)
      {
        v44 = *(float32x2_t *)v73.f32;
        v79 = 1049652923;
        v45 = v73.f32[2] * 0.488602512;
        v46 = vmuls_lane_f32(v73.f32[2], v73, 2) * 0.946174696 + -0.315391565;
        v80 = vmuls_lane_f32(-0.4886, *(float32x2_t *)v73.f32, 1);
        v81 = v45;
        v47 = v73.f32[2] * -1.09254843;
        v84 = vmuls_lane_f32(v47, *(float32x2_t *)v73.f32, 1);
        v85 = v46;
        v82 = -0.4886 * v73.f32[0];
        v83 = vmlas_n_f32(vmuls_lane_f32(v44.f32[0], v44, 1), v73.f32[1], v73.f32[0]) * 0.54627;
        v86 = v47 * v73.f32[0];
        v87 = vmlas_n_f32(vmuls_lane_f32(-v73.f32[1], *(float32x2_t *)v73.f32, 1), v44.f32[0], v44.f32[0]) * 0.54627;
      }
      else
      {
        v78[3] = (float)((float)((float)(v42.__cosval * v42.__cosval) * 3.5171)
                       + (float)((float)((float)(v42.__cosval * v42.__cosval) * (float)(v42.__cosval * v42.__cosval))
                               * -2.9309))
               + -0.58618;
        if (v9 > 4)
          return;
        sub_1B1863C78((uint64_t)&v79, v73.f32[0], v73.f32[1], v73.f32[2]);
        v43 = v75;
      }
    }
    v49 = 0;
    v50 = 0;
    v52 = 1;
    do
    {
      v53 = (2 * (v50 & 0x7FFFFFFF)) | 1;
      v54 = vmulq_n_f32(v43, v78[v50] * *((float *)&v88 + v50));
      v55 = v49;
      do
      {
        v56 = 4 * v55;
        v57 = *(float *)((char *)&v79 + v56);
        *(float *)(a6 + v56) = *(float *)(a6 + v56) + (float)(v57 * v54.f32[0]);
        *(float *)(a6 + 4 * v9 * v9 + v56) = *(float *)(a6 + 4 * v9 * v9 + v56) + (float)(v57 * v54.f32[1]);
        v51 = a6 + 8 * v9 * v9;
        *(float *)(v51 + v56) = *(float *)(v51 + v56) + (float)(v57 * v54.f32[2]);
        ++v55;
        --v53;
      }
      while (v53);
      ++v50;
      v49 += v52;
      v52 += 2;
    }
    while (v50 != v9);
  }
  else if (v36 == 2 && v9 - 7 >= 0xFFFFFFFB)
  {
    switch(v9)
    {
      case 4u:
        v76 = v35;
        sub_1B1863C78((uint64_t)&v79, *(float *)&v69, *((float *)&v69 + 1), *((float *)&v69 + 2));
        v35 = v76;
        break;
      case 3u:
        v79 = 1049652923;
        v58 = *((float *)&v69 + 2) * 0.488602512;
        v59 = (float)(*((float *)&v69 + 2) * *((float *)&v69 + 2)) * 0.946174696 + -0.315391565;
        v80 = *((float *)&v69 + 1) * -0.4886;
        v81 = v58;
        v60 = *((float *)&v69 + 2) * -1.09254843;
        v84 = *((float *)&v69 + 1) * v60;
        v85 = v59;
        v82 = *(float *)&v69 * -0.4886;
        v83 = (float)((float)(*(float *)&v69 * *((float *)&v69 + 1)) + (float)(*(float *)&v69 * *((float *)&v69 + 1)))
            * 0.54627;
        v86 = *(float *)&v69 * v60;
        v87 = (float)((float)(*(float *)&v69 * *(float *)&v69) - (float)(*((float *)&v69 + 1) * *((float *)&v69 + 1)))
            * 0.54627;
        break;
      case 2u:
        v79 = 1049652923;
        v37 = *((float *)&v69 + 2) * 0.488602512;
        v80 = *((float *)&v69 + 1) * -0.4886;
        v81 = v37;
        v82 = *(float *)&v69 * -0.4886;
        break;
    }
    v61 = 0;
    v62 = 0.75;
    if (v9 > 2)
      v62 = 1.0625;
    if (v9 > 4)
      v62 = v62 + -0.09375;
    v63 = 3.1416 / v62;
    v65 = (float)(3.1416 / v62) * v35.f32[0];
    v66 = vmuls_lane_f32(v63, *(float32x2_t *)v35.f32, 1);
    v67 = vmuls_lane_f32(v63, v35, 2);
    do
    {
      v68 = *(float *)((char *)&v79 + v61);
      *(float *)(a6 + v61) = *(float *)(a6 + v61) + (float)(v68 * v65);
      *(float *)(a6 + 4 * v9 * v9 + v61) = *(float *)(a6 + 4 * v9 * v9 + v61) + (float)(v68 * v66);
      v64 = a6 + 8 * v9 * v9;
      *(float *)(v64 + v61) = *(float *)(v64 + v61) + (float)(v68 * v67);
      v61 += 4;
    }
    while (4 * v9 * v9 != v61);
  }
}

void sub_1B1862234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  char v10;
  char v11;
  const void *v12;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v10 = *(_BYTE *)(a1 + 249);
  if (((((v10 & 8) == 0) ^ v8) & 1) == 0)
  {
    if (v8)
      v11 = 8;
    else
      v11 = 0;
    *(_BYTE *)(a1 + 249) = v10 & 0xF7 | v11;
    if (*(unsigned __int8 *)(a1 + 133) >= 2u)
    {
      v12 = (const void *)sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
      sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v12, 0, 1u);
    }
  }
}

uint64_t sub_1B18622E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return (*(unsigned __int8 *)(a1 + 249) >> 3) & 1;
}

uint64_t sub_1B1862334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BOOL4 v16;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"light");
  }
  v15 = *(_DWORD *)(a1 + 80);
  v16 = v15 == 2 && *(unsigned __int8 *)(a1 + 133) > 1u;
  if (v15 == 2)
    return v16 | ((*(_BYTE *)(a1 + 249) & 8) >> 3);
  else
    return 0;
}

void sub_1B18623C8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (v8 <= 1)
    v10 = 1;
  else
    v10 = v8;
  if (v10 >= 4)
    v10 = 4;
  if (v10 != a1[8].u8[5])
  {
    a1[8].i8[5] = v10;
    sub_1B185E894(a1, a2, a3, a4, a5, a6, a7, a8, v19);
    v18 = (const void *)sub_1B17C6244(a1, v11, v12, v13, v14, v15, v16, v17);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v18, 0, 1u);
  }
}

void sub_1B1862470(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"light");
  *(float *)(a1 + 120) = a2;
}

float sub_1B18624C4(uint64_t a1)
{
  return *(float *)(a1 + 120);
}

void sub_1B18624CC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"light");
  *(float *)(a1 + 124) = a2;
}

float sub_1B1862520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 124);
}

void sub_1B1862568(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32_t a9)
{
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  v11 = a1[8].f32[0] != 0.0;
  a1[8].f32[0] = a9;
  if ((a9 != 0.0) != v11)
  {
    sub_1B185E894(a1, a2, a3, a4, a5, a6, a7, a8, v20);
    v19 = (const void *)sub_1B17C6244(a1, v12, v13, v14, v15, v16, v17, v18);
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v19, 0, 1u);
  }
}

float sub_1B1862618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(float *)(a1 + 128);
}

void sub_1B1862660(float32x4_t *a1, unsigned __int32 a2, void *__src, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)__src, a4, a5, a6, a7, a8, (uint64_t)"light");
  a1[8].i32[2] = a2;
  memcpy(&a1[9], __src, 16 * a2);
  sub_1B199BAB8(a1, v12, v13, v14, v15, v16, v17, v18, a9);
}

uint64_t sub_1B18626CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return a1 + 144;
}

uint64_t sub_1B1862714(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return *(unsigned int *)(a1 + 136);
}

void sub_1B186275C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a2)
    v10 = 16;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a1 + 249) & 0xEF | v10;
}

uint64_t sub_1B18627C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  return (*(unsigned __int8 *)(a1 + 249) >> 4) & 1;
}

void sub_1B186280C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"light");
  if (a2)
    v10 = 32;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a1 + 249) & 0xDF | v10;
}

uint64_t sub_1B1862870(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 249) >> 5) & 1;
}

id sub_1B1862880(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  const void *v10;
  const void *v11;

  sub_1B185F12C((uint64_t)a1);
  v9 = (const void *)a1[34];
  if (v9)
  {
    CFRelease(v9);
    a1[34] = 0;
  }
  v10 = (const void *)a1[35];
  if (v10)
  {
    CFRelease(v10);
    a1[35] = 0;
  }
  v11 = (const void *)a1[37];
  if (v11)
  {
    CFRelease(v11);
    a1[37] = 0;
  }
  return sub_1B193E38C((uint64_t)a1, v2, v3, v4, v5, v6, v7, v8);
}

CFStringRef sub_1B18628D8(unsigned __int8 *a1)
{
  int v2;
  const __CFAllocator *v3;
  const __CFString *v4;

  v2 = a1[248];
  v3 = CFGetAllocator(a1);
  v4 = sub_1B1862950((uint64_t)a1);
  if (v2)
    return CFStringCreateWithFormat(v3, 0, CFSTR("<CFXLight %p> Type:%@ CastsShadow(Samples:%d Cascade:%d)"), a1, v4, a1[132], a1[133]);
  else
    return CFStringCreateWithFormat(v3, 0, CFSTR("<CFXLight %p> Type:%@"), a1, v4);
}

const __CFString *sub_1B1862950(uint64_t a1)
{
  int v1;
  const __CFString *result;
  int v4;
  const __CFString *v5;
  unint64_t v6;

  v1 = *(_DWORD *)(a1 + 80);
  result = CFSTR("Ambient");
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("Omni");
      break;
    case 2:
      result = CFSTR("Directional");
      break;
    case 3:
      result = CFSTR("Spot");
      break;
    case 4:
      v4 = *(unsigned __int8 *)(a1 + 396);
      v5 = CFSTR("IES");
      if (v4 == 1)
        v5 = CFSTR("Radiance");
      if (v4)
        result = v5;
      else
        result = CFSTR("Irradiance");
      break;
    case 5:
      v6 = *(char *)(a1 + 320);
      if (v6 >= 5)
        goto LABEL_12;
      result = off_1E63D7900[v6];
      break;
    case 6:
      result = CFSTR("IES");
      break;
    default:
LABEL_12:
      result = CFSTR("Unknown");
      break;
  }
  return result;
}

__CFArray *sub_1B1862A08(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  const CFDictionaryValueCallBacks *v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const CFDictionaryKeyCallBacks *v17;
  __CFDictionary *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  CFNumberRef v21;
  const CFDictionaryValueCallBacks *v22;
  __CFDictionary *v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  __CFDictionary *v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  __CFDictionary *v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  __CFDictionary *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  const CFDictionaryKeyCallBacks *v39;
  __CFDictionary *v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  __CFDictionary *v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  __CFDictionary *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  __CFArray *v52;
  const CFDictionaryKeyCallBacks *v53;
  __CFDictionary *v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  __CFDictionary *v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  const CFDictionaryValueCallBacks *v62;
  __CFDictionary *v63;
  uint64_t v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  __CFArray *v68;
  const CFDictionaryKeyCallBacks *v69;
  __CFDictionary *v70;
  CFNumberRef v71;
  CFNumberRef v72;
  CFNumberRef v73;
  __CFDictionary *v74;
  CFNumberRef v75;
  CFNumberRef v76;
  CFNumberRef v77;
  __CFDictionary *v78;
  CFNumberRef v79;
  CFNumberRef v80;
  CFNumberRef v81;
  __CFDictionary *v82;
  CFNumberRef v83;
  CFNumberRef v84;
  CFNumberRef v85;
  uint64_t v87;
  int v88;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 12;
  v87 = a1 + 64;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v7 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("Color"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 88;
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v11 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v8, CFSTR("name"), CFSTR("intensity"));
  CFDictionarySetValue(v8, CFSTR("type"), v9);
  CFDictionarySetValue(v8, CFSTR("address"), v11);
  CFDictionarySetValue(v8, CFSTR("semantic"), v10);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v11);
  CFRelease(v9);
  v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v13 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 2;
  v87 = a1 + 80;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("type"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v18 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v12);
  v88 = 0;
  valuePtr = 3;
  v87 = a1 + 248;
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v20 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v21 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v18, CFSTR("name"), CFSTR("castShadow"));
  CFDictionarySetValue(v18, CFSTR("type"), v19);
  CFDictionarySetValue(v18, CFSTR("address"), v21);
  CFDictionarySetValue(v18, CFSTR("semantic"), v20);
  CFArrayAppendValue(Mutable, v18);
  CFRelease(v20);
  CFRelease(v18);
  CFRelease(v21);
  CFRelease(v19);
  v22 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v23 = CFDictionaryCreateMutable(0, 4, v17, MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 96;
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v26 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v23, CFSTR("name"), CFSTR("shadowIntensity"));
  CFDictionarySetValue(v23, CFSTR("type"), v24);
  CFDictionarySetValue(v23, CFSTR("address"), v26);
  CFDictionarySetValue(v23, CFSTR("semantic"), v25);
  CFArrayAppendValue(Mutable, v23);
  CFRelease(v25);
  CFRelease(v23);
  CFRelease(v26);
  CFRelease(v24);
  v27 = CFDictionaryCreateMutable(0, 4, v17, v22);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 252;
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v30 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("zNear"));
  CFDictionarySetValue(v27, CFSTR("type"), v28);
  CFDictionarySetValue(v27, CFSTR("address"), v30);
  CFDictionarySetValue(v27, CFSTR("semantic"), v29);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v29);
  CFRelease(v27);
  CFRelease(v30);
  CFRelease(v28);
  v31 = CFDictionaryCreateMutable(0, 4, v17, v22);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 256;
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v34 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v31, CFSTR("name"), CFSTR("zFar"));
  CFDictionarySetValue(v31, CFSTR("type"), v32);
  CFDictionarySetValue(v31, CFSTR("address"), v34);
  CFDictionarySetValue(v31, CFSTR("semantic"), v33);
  CFArrayAppendValue(Mutable, v31);
  CFRelease(v33);
  CFRelease(v31);
  CFRelease(v34);
  CFRelease(v32);
  v35 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v22);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 116;
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v38 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v35, CFSTR("name"), CFSTR("shadowSoftenFactor"));
  CFDictionarySetValue(v35, CFSTR("type"), v36);
  CFDictionarySetValue(v35, CFSTR("address"), v38);
  CFDictionarySetValue(v35, CFSTR("semantic"), v37);
  CFArrayAppendValue(Mutable, v35);
  CFRelease(v37);
  CFRelease(v35);
  CFRelease(v38);
  CFRelease(v36);
  v39 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v40 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v22);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 84;
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v43 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v40, CFSTR("name"), CFSTR("attenuationDistance"));
  CFDictionarySetValue(v40, CFSTR("type"), v41);
  CFDictionarySetValue(v40, CFSTR("address"), v43);
  CFDictionarySetValue(v40, CFSTR("semantic"), v42);
  CFArrayAppendValue(Mutable, v40);
  CFRelease(v42);
  CFRelease(v40);
  CFRelease(v43);
  CFRelease(v41);
  v44 = CFDictionaryCreateMutable(0, 4, v39, v22);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 308;
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v47 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v44, CFSTR("name"), CFSTR("spotInnerAngle"));
  CFDictionarySetValue(v44, CFSTR("type"), v45);
  CFDictionarySetValue(v44, CFSTR("address"), v47);
  CFDictionarySetValue(v44, CFSTR("semantic"), v46);
  CFArrayAppendValue(Mutable, v44);
  CFRelease(v46);
  CFRelease(v44);
  CFRelease(v47);
  CFRelease(v45);
  v48 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 304;
  v49 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v50 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v51 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v48, CFSTR("name"), CFSTR("spotOuterAngle"));
  CFDictionarySetValue(v48, CFSTR("type"), v49);
  CFDictionarySetValue(v48, CFSTR("address"), v51);
  CFDictionarySetValue(v48, CFSTR("semantic"), v50);
  v52 = Mutable;
  CFArrayAppendValue(Mutable, v48);
  CFRelease(v50);
  CFRelease(v48);
  CFRelease(v51);
  CFRelease(v49);
  v53 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v54 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 1;
  v87 = a1 + 312;
  v55 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v56 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v57 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v54, CFSTR("name"), CFSTR("spotFalloffExponent"));
  CFDictionarySetValue(v54, CFSTR("type"), v55);
  CFDictionarySetValue(v54, CFSTR("address"), v57);
  CFDictionarySetValue(v54, CFSTR("semantic"), v56);
  CFArrayAppendValue(v52, v54);
  CFRelease(v56);
  CFRelease(v54);
  CFRelease(v57);
  CFRelease(v55);
  v58 = CFDictionaryCreateMutable(0, 4, v53, MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 6;
  v87 = a1 + 264;
  v59 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v60 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v61 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v58, CFSTR("name"), CFSTR("shadowBias"));
  CFDictionarySetValue(v58, CFSTR("type"), v59);
  CFDictionarySetValue(v58, CFSTR("address"), v61);
  CFDictionarySetValue(v58, CFSTR("semantic"), v60);
  CFArrayAppendValue(v52, v58);
  CFRelease(v60);
  CFRelease(v58);
  CFRelease(v61);
  CFRelease(v59);
  v62 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v63 = CFDictionaryCreateMutable(0, 4, v53, MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 7;
  v64 = a1;
  v87 = a1 + 104;
  v65 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v66 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v67 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v63, CFSTR("name"), CFSTR("shadowMapSize"));
  CFDictionarySetValue(v63, CFSTR("type"), v65);
  CFDictionarySetValue(v63, CFSTR("address"), v67);
  CFDictionarySetValue(v63, CFSTR("semantic"), v66);
  v68 = v52;
  CFArrayAppendValue(v52, v63);
  CFRelease(v66);
  CFRelease(v63);
  CFRelease(v67);
  CFRelease(v65);
  v69 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v70 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v88 = 0;
  valuePtr = 1;
  v87 = v64 + 112;
  v71 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v72 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v73 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v70, CFSTR("name"), CFSTR("directionalExtent"));
  CFDictionarySetValue(v70, CFSTR("type"), v71);
  CFDictionarySetValue(v70, CFSTR("address"), v73);
  CFDictionarySetValue(v70, CFSTR("semantic"), v72);
  CFArrayAppendValue(v68, v70);
  CFRelease(v72);
  CFRelease(v70);
  CFRelease(v73);
  CFRelease(v71);
  v74 = CFDictionaryCreateMutable(0, 4, v69, MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 1;
  v87 = v64 + 132;
  v75 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v76 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v77 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v74, CFSTR("name"), CFSTR("shadowMaxSampleCount"));
  CFDictionarySetValue(v74, CFSTR("type"), v75);
  CFDictionarySetValue(v74, CFSTR("address"), v77);
  CFDictionarySetValue(v74, CFSTR("semantic"), v76);
  CFArrayAppendValue(v68, v74);
  CFRelease(v76);
  CFRelease(v74);
  CFRelease(v77);
  CFRelease(v75);
  v78 = CFDictionaryCreateMutable(0, 4, v69, MEMORY[0x1E0C9B3A0]);
  v88 = 0;
  valuePtr = 2;
  v87 = v64 + 240;
  v79 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v80 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v81 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v78, CFSTR("name"), CFSTR("categoryBitMask"));
  CFDictionarySetValue(v78, CFSTR("type"), v79);
  CFDictionarySetValue(v78, CFSTR("address"), v81);
  CFDictionarySetValue(v78, CFSTR("semantic"), v80);
  CFArrayAppendValue(v68, v78);
  CFRelease(v80);
  CFRelease(v78);
  CFRelease(v81);
  CFRelease(v79);
  v82 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v88 = 2;
  valuePtr = 5;
  v87 = v64 + 272;
  v83 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v84 = CFNumberCreate(0, kCFNumberSInt32Type, &v88);
  v85 = CFNumberCreate(0, kCFNumberLongType, &v87);
  CFDictionarySetValue(v82, CFSTR("name"), CFSTR("gobo"));
  CFDictionarySetValue(v82, CFSTR("type"), v83);
  CFDictionarySetValue(v82, CFSTR("address"), v85);
  CFDictionarySetValue(v82, CFSTR("semantic"), v84);
  CFArrayAppendValue(v68, v82);
  CFRelease(v84);
  CFRelease(v82);
  CFRelease(v85);
  CFRelease(v83);
  return v68;
}

void sub_1B1863AC4(float32x4_t *a1, float32x4_t *__dst, float32_t *__src, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (&a1[15].u32[2] == (unsigned __int32 *)__dst)
  {
    sub_1B185FD78(a1, *(unsigned __int8 *)__src, (uint64_t)__src, __n, a5, a6, a7, a8, a9);
  }
  else if (&a1[5].i32[1] == (__int32 *)__dst)
  {
    sub_1B18612AC(a1, (uint64_t)__dst, (uint64_t)__src, __n, a5, a6, a7, a8, *__src, a9);
  }
  else if (&a1[4] > __dst || (float32x4_t *)((char *)&a1[4].u64[1] + 4) < __dst)
  {
    if (&a1[21] > __dst || &a1[24] < __dst)
    {
      memcpy(__dst, __src, __n);
    }
    else
    {
      if (a1[5].i32[0] != 5 && (byte_1EEF65EB0 & 1) == 0)
      {
        byte_1EEF65EB0 = 1;
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: animating areaExtents on a non area light"), (uint64_t)__src, __n, a5, a6, a7, a8, v35);
      }
      memcpy(__dst, __src, __n);
      sub_1B1860874((uint64_t)a1, v21, v22, v23, v24, v25, v26, v27);
      sub_1B1860DE0(a1, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  else
  {
    v13 = sub_1B179CCCC(a1[4].f32);
    memcpy(__dst, __src, __n);
    if (v13 == sub_1B179CCCC(a1[4].f32))
      sub_1B199BAB8(a1, v14, v15, v16, v17, v18, v19, v20, a9);
    else
      sub_1B185E894(a1, v14, v15, v16, v17, v18, v19, v20, a9);
  }
}

uint64_t sub_1B1863C44(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;

  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B17987F8(v10, a2))
    return a1;
  else
    return 0;
}

float sub_1B1863C78(uint64_t a1, float a2, float a3, float a4)
{
  float v4;
  double v5;
  float v6;
  double v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float result;

  v4 = a4 * a4;
  *(_DWORD *)a1 = 1049652923;
  v5 = a4;
  v6 = v5 * 0.488602512;
  v7 = v4;
  v8 = v7 * 0.946174696 + -0.315391565;
  v9 = (v7 * 1.86588166 + -1.119529) * v5;
  *(float *)(a1 + 4) = a3 * -0.4886;
  *(float *)(a1 + 8) = v6;
  v10 = v5 * -1.09254843;
  *(float *)(a1 + 20) = v10 * a3;
  *(float *)(a1 + 24) = v8;
  *(float *)&v7 = v7 * -2.285229 + 0.457045799;
  *(float *)(a1 + 44) = *(float *)&v7 * a3;
  *(float *)(a1 + 48) = v9;
  v11 = (float)(a2 * a3) + (float)(a2 * a3);
  *(float *)(a1 + 12) = a2 * -0.4886;
  *(float *)(a1 + 16) = v11 * 0.54627;
  v12 = (float)(a2 * a2) - (float)(a3 * a3);
  *(float *)(a1 + 28) = v10 * a2;
  *(float *)(a1 + 32) = v12 * 0.54627;
  *(float *)&v5 = v5 * 1.44530572;
  *(float *)(a1 + 52) = *(float *)&v7 * a2;
  *(float *)(a1 + 56) = v12 * *(float *)&v5;
  *(float *)(a1 + 36) = (float)((float)(v12 * a3) + (float)(a2 * v11)) * -0.59004;
  *(float *)(a1 + 40) = v11 * *(float *)&v5;
  result = (float)((float)(a2 * v12) - (float)(v11 * a3)) * -0.59004;
  *(float *)(a1 + 60) = result;
  return result;
}

void sub_1B1863D98(void *a1)
{
  const __CFDictionary *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  void *values;

  values = a1;
  v1 = CFDictionaryCreate(0, (const void **)&off_1E63D5980, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v9 = (const void *)sub_1B17C6244(values, v2, v3, v4, v5, v6, v7, v8);
  sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v9, v1, 1u);
  CFRelease(v1);
}

uint64_t sub_1B1863E18()
{
  if (qword_1ED4CEB90 != -1)
    dispatch_once(&qword_1ED4CEB90, &unk_1E63D0D30);
  return qword_1ED4CEB98;
}

double sub_1B1863E58()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double result;

  if (!qword_1ED4CEB98)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEB98);
    qword_1ED4CEB98 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("sensorHeight"), 0xF8u, 1, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("filmOffset"), 0x50u, 7, 0, 0, 0, v4, v5);
    sub_1B19C326C(CFSTR("postProjectionTransformTranslation"), 0x58u, 7, 0, 0, 0, v6, v7);
    sub_1B19C326C(CFSTR("postProjectionTransformScale"), 0x60u, 7, 0, 0, 0, v8, v9);
    sub_1B19C326C(CFSTR("focusDistance"), 0xF0u, 1, 0, 0, 0, v10, v11);
    sub_1B19C326C(CFSTR("focalLength"), 0xF4u, 1, 0, 0, 0, v12, v13);
    sub_1B19C326C(CFSTR("fieldOfView"), 0x6Cu, 1, 0, 0, 0, v14, v15);
    sub_1B19C326C(CFSTR("orthographicScale"), 0x68u, 1, 0, 0, 0, v16, v17);
    sub_1B19C326C(CFSTR("projectionTransform"), 0x70u, 10, 0, 0, 0, v18, v19);
    sub_1B19C326C(CFSTR("zFar"), 0x48u, 1, 0, 0, 0, v20, v21);
    sub_1B19C326C(CFSTR("zNear"), 0x44u, 1, 0, 0, 0, v22, v23);
    sub_1B19C326C(CFSTR("depthOfField"), 0x100u, 5, 1, 0, 0, v24, v25);
    sub_1B19C326C(CFSTR("motionBlur"), 0x108u, 5, 1, 0, 0, v26, v27);
    sub_1B19C326C(CFSTR("grain"), 0x110u, 5, 1, 0, 0, v28, v29);
    sub_1B19C326C(CFSTR("exposure"), 0x118u, 5, 1, 0, 0, v30, v31);
    sub_1B19C326C(CFSTR("toneMapping"), 0x120u, 5, 1, 0, 0, v32, v33);
    sub_1B19C326C(CFSTR("bloom"), 0x128u, 5, 1, 0, 0, v34, v35);
    sub_1B19C326C(CFSTR("vignetting"), 0x130u, 5, 1, 0, 0, v36, v37);
    sub_1B19C326C(CFSTR("lensBlur"), 0x138u, 5, 1, 0, 0, v38, v39);
    sub_1B19C326C(CFSTR("colorFringe"), 0x140u, 5, 1, 0, 0, v40, v41);
    sub_1B19C326C(CFSTR("colorGrading"), 0x148u, 5, 1, 0, 0, v42, v43);
    sub_1B19C326C(CFSTR("chromaticTransform"), 0x150u, 5, 1, 0, 0, v44, v45);
    sub_1B19C326C(CFSTR("doughnutBokeh"), 0x158u, 5, 1, 0, 0, v46, v47);
    sub_1B19C326C(CFSTR("ssao"), 0x160u, 5, 1, 0, 0, v48, v49);
    sub_1B19C3258();
    xmmword_1ED4BDB50 = xmmword_1E63D2DF8;
    qword_1ED4BDB60 = (uint64_t)sub_1B18671FC;
    *(_QWORD *)&result = 0x1B1868904;
    unk_1ED4BDB78 = xmmword_1E63D2E08;
    unk_1ED4BDB88 = unk_1E63D2E18;
    qword_1ED4BDB98 = 0;
    unk_1ED4BDBA0 = sub_1B18688D0;
  }
  return result;
}

double sub_1B18641FC()
{
  uint64_t v0;
  char v6;
  double result;

  if (qword_1ED4CEB90 != -1)
    dispatch_once(&qword_1ED4CEB90, &unk_1E63D0D30);
  v0 = sub_1B179CB90(qword_1ED4CEB98, 0x1B0uLL);
  *(_QWORD *)(v0 + 68) = 0x42C800003DCCCCCDLL;
  *(_QWORD *)(v0 + 88) = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *(_QWORD *)(v0 + 96) = _D1;
  *(_QWORD *)(v0 + 104) = 0x427000003F800000;
  *(_DWORD *)(v0 + 248) = 1103101952;
  *(_QWORD *)(v0 + 240) = 0x4248000040200000;
  *(_QWORD *)(v0 + 432) = -1;
  v6 = *(_BYTE *)(v0 + 360);
  *(_OWORD *)(v0 + 368) = xmmword_1B2244DB0;
  *(_OWORD *)(v0 + 384) = xmmword_1B2244DD0;
  result = 0.0;
  *(_OWORD *)(v0 + 400) = xmmword_1B2244D90;
  *(_OWORD *)(v0 + 416) = xmmword_1B2244E20;
  *(_BYTE *)(v0 + 360) = v6 & 0xFC;
  return result;
}

void sub_1B18642B4(_BYTE *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  char v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = a1[360];
  if (((((v10 & 2) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v11 = 2;
    else
      v11 = 0;
    a1[360] = v10 & 0xFD | v11;
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186433C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 256);
}

void sub_1B1864384(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[32];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[32];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[32] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[32] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186443C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 264);
}

void sub_1B1864484(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[33];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[33];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[33] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[33] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186453C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 272);
}

void sub_1B1864584(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[34];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[34];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[34] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[34] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186463C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 280);
}

void sub_1B1864684(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[35];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[35];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[35] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[35] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186473C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 288);
}

void sub_1B1864784(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[36];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[36];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[36] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[36] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186483C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 296);
}

void sub_1B1864884(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[37];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[37];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[37] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[37] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186493C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 304);
}

void sub_1B1864984(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[38];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[38];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[38] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[38] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B1864A3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 312);
}

void sub_1B1864A84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[39];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[39];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[39] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[39] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B1864B3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 328);
}

void sub_1B1864B84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[41];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[41];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[41] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[41] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B1864C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 320);
}

void sub_1B1864C84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[40];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[40];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[40] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[40] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B1864D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 336);
}

void sub_1B1864D84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[42];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[42];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[42] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[42] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B1864E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 344);
}

void sub_1B1864E84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[43];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[43];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[43] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[43] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B1864F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 352);
}

void sub_1B1864F84(uint64_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const void *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v10 = (void *)a1[44];
  if (v10 != a2)
  {
    if (v10)
    {
      sub_1B17C5DD0(v10, a1[6], a3, a4, a5, a6, a7, a8);
      v11 = (const void *)a1[44];
      if (v11 != a2)
      {
        if (v11)
        {
          CFRelease(v11);
          a1[44] = 0;
        }
        if (!a2)
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    else if (a2)
    {
LABEL_12:
      a2 = (void *)CFRetain(a2);
LABEL_13:
      a1[44] = (uint64_t)a2;
    }
    if (a2)
      sub_1B17C5FC0((uint64_t *)a2, a1[6], a3, a4, a5, a6, a7, a8);
    sub_1B1863D98(a1);
  }
}

uint64_t sub_1B186503C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  result = *(_QWORD *)(a1 + 256);
  if (result)
    return sub_1B18E8ACC(result);
  return result;
}

uint64_t sub_1B18650B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 264);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B1865144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 280);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) != 0.0;
  return result;
}

uint64_t sub_1B18651D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 296);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B186525C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 304);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B18652E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 312);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B1865374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 320);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E91D8(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B1865400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 272);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B186548C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  result = *(_QWORD *)(a1 + 288);
  if (result)
    return sub_1B18E8ACC(result);
  return result;
}

uint64_t sub_1B1865508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  result = *(_QWORD *)(a1 + 328);
  if (result)
    return sub_1B18E8ACC(result);
  return result;
}

uint64_t sub_1B1865584(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 344);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B1865610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 352);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E8CD4(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

uint64_t sub_1B186569C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 336);
  if (!v15)
    return 0;
  result = sub_1B18E8ACC(v15);
  if ((_DWORD)result)
    return sub_1B18E9308(v15, v17, v18, v19, v20, v21, v22, v23) > 0.0;
  return result;
}

BOOL sub_1B1865728(_QWORD *a1, uint64_t a2)
{
  return a1[37] == a2
      || a1[32] == a2
      || a1[33] == a2
      || a1[34] == a2
      || a1[35] == a2
      || a1[36] == a2
      || a1[38] == a2
      || a1[39] == a2
      || a1[40] == a2
      || a1[41] == a2
      || a1[42] == a2
      || a1[43] != 0;
}

void sub_1B18657C4(__n128 *a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;

  if (!a1)
  {
    v16 = a5;
    v14 = a3;
    v15 = a4;
    v13 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a7, a8, a9, a10, a11, a12, (uint64_t)"camera");
    a2 = v13;
    a3 = v14;
    a4 = v15;
    a5 = v16;
  }
  a1[11] = a2;
  a1[12] = a3;
  a1[13] = a4;
  a1[14] = a5;
  a1[4].n128_u8[0] |= 4u;
}

uint64_t sub_1B1865834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return (*(unsigned __int8 *)(a1 + 64) >> 1) & 1;
}

void sub_1B1865880(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  if (a2)
    v10 = 2;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFD | v10;
}

uint64_t sub_1B18658E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 432);
}

void sub_1B186592C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  *(_QWORD *)(a1 + 432) = a2;
}

float sub_1B1865978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(float *)(a1 + 104);
}

uint64_t sub_1B18659C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_BYTE *)(a1 + 64) & 1;
}

uint64_t sub_1B1865A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  result = *(_QWORD *)(a1 + 280);
  if (result)
    return sub_1B18E98F0(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1B1865A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return (*(unsigned __int8 *)(a1 + 360) >> 1) & 1;
}

float sub_1B1865AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(float *)(a1 + 72);
}

float sub_1B1865B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(float *)(a1 + 68);
}

float sub_1B1865B64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(float *)(a1 + 244);
}

float sub_1B1865BAC(float *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long double v11;
  float result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  a1[61] = a2;
  v11 = atan(a1[62] * 0.5 / a2);
  *(float *)&v11 = v11 + v11;
  result = *(float *)&v11 / 3.14159265 * 180.0;
  a1[27] = result;
  return result;
}

float sub_1B1865C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(float *)(a1 + 108);
}

float sub_1B1865C90(float *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float v11;
  double v12;
  float result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  a1[27] = a2;
  v11 = a2 / 180.0 * 3.14159265;
  v12 = a1[62] * 0.5;
  result = v12 / tanf(v11 * 0.5);
  a1[61] = result;
  return result;
}

uint64_t sub_1B1865D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return (*(unsigned __int8 *)(a1 + 64) >> 3) & 7;
}

void sub_1B1865D7C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xC7 | (8 * (a2 & 7));
}

float sub_1B1865DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(float *)(a1 + 240);
}

void sub_1B1865E20(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  *(float *)(a1 + 240) = a2;
}

double sub_1B1865E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(double *)(a1 + 80);
}

void sub_1B1865EBC(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  *(double *)(a1 + 80) = a2;
}

double sub_1B1865F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(double *)(a1 + 88);
}

void sub_1B1865F58(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  *(double *)(a1 + 88) = a2;
}

double sub_1B1865FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(double *)(a1 + 96);
}

void sub_1B1865FF4(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  *(double *)(a1 + 96) = a2;
}

float sub_1B1866048(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"camera");
  }
  v15 = *(_QWORD *)(a1 + 256);
  if (v15)
    v16 = sub_1B18E8CD4(v15, a2, a3, a4, a5, a6, a7, a8);
  else
    v16 = 5.5999999;
  return *(float *)(a1 + 244) / fmax(v16, 0.00001);
}

float sub_1B18660E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(float *)(a1 + 248);
}

float sub_1B1866128(float *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float v11;
  float v12;
  float result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  v11 = 0.0001;
  if (a2 >= 0.0001)
    v11 = a2;
  a1[62] = v11;
  v12 = a1[27] / 180.0 * 3.14159265;
  result = v11 * 0.5 / tanf(v12 * 0.5);
  a1[61] = result;
  return result;
}

void sub_1B18661D8(uint64_t a1, float *a2, float *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  unsigned int v13;
  float v14;
  int v15;
  float v17;
  float v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  v13 = *(unsigned __int8 *)(a1 + 64);
  if ((v13 & 0x38) != 0x20)
  {
    v15 = (v13 >> 3) & 7;
    if (v15)
    {
      if (v15 == 3)
        goto LABEL_14;
      if (v15 == 1 && a9 >= 1.0)
        goto LABEL_14;
    }
    else if (a9 < 1.0)
    {
LABEL_14:
      v18 = *(float *)(a1 + 108);
      *a2 = v18;
      v14 = v18 / a9;
      goto LABEL_15;
    }
    v17 = *(float *)(a1 + 108);
    *a3 = v17;
    *a2 = v17 * a9;
    return;
  }
  *a2 = *(float *)(a1 + 108);
  v14 = *(float *)(a1 + 108);
LABEL_15:
  *a3 = v14;
}

uint64_t sub_1B18662A8(unsigned __int8 *a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11;
  _BOOL4 v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"infos");
  v11 = (*a1 >> 3) & 7;
  if (v11 == 3)
    return 1;
  v12 = a2 < 1.0;
  if (v11)
    v12 = 0;
  if (v11 == 1)
    return a2 >= 1.0;
  else
    return v12;
}

void sub_1B1866330(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  *(float *)(a1 + 104) = a2;
  *(_BYTE *)(a1 + 64) &= ~4u;
}

void sub_1B1866390(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 64) & 0xFA | a2;
}

void sub_1B18663EC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  *(float *)(a1 + 72) = a2;
  *(_BYTE *)(a1 + 64) &= ~4u;
}

void sub_1B186644C(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"infos");
  *(float *)(a1 + 8) = a2;
  *(_BYTE *)a1 &= ~4u;
}

void sub_1B18664AC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"camera");
  if (a2 == 0.0 && (*(_BYTE *)(a1 + 64) & 1) == 0)
    sub_1B17C4408(0, (uint64_t)CFSTR("Info: invalid zNear value (0) set to camera"), a4, a5, a6, a7, a8, a9, v11);
  *(float *)(a1 + 68) = a2;
  *(_BYTE *)(a1 + 64) &= ~4u;
}

void sub_1B186652C(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"infos");
  *(float *)(a1 + 4) = a2;
  *(_BYTE *)a1 &= ~4u;
}

double sub_1B186658C()
{
  return 0.0;
}

uint64_t sub_1B1866598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return *(_QWORD *)(a1 + 440);
}

float sub_1B18665E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"infos");
  return *(float *)(a1 + 44);
}

double sub_1B1866628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"infos");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v9, v10, v11, v12, v13, v14, (uint64_t)"infos");
  }
  return *(float *)(a1 + 44);
}

float sub_1B1866690(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"infos");
  return *(float *)(a1 + 4);
}

float sub_1B18666D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"infos");
  return *(float *)(a1 + 8);
}

float sub_1B1866720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"infos");
  return *(float *)(a1 + 40);
}

uint64_t sub_1B1866768(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"infos");
  return *a1 & 1;
}

unsigned __int8 *sub_1B18667B4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  double v11;
  float32x2_t v12;
  uint32x2_t v13;
  float v14;
  float v15;
  float v16;
  float32x2_t v17;
  double v18;
  float v19;
  float64x2_t v25;
  float64x2_t v26;
  float v27;
  float v28;
  float64x2_t v29;
  double v30;
  double v31;
  float v32;
  __int128 v33;
  __int128 v34;
  double v35;
  float v36;
  unsigned __int8 *result;
  double v38;
  float v39;
  float v40;
  double v41;
  float v42;
  float v43;
  double v44;
  double v45;
  unsigned int v46;
  float v47;
  double v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  float v52;
  float v54;
  float v55;
  double v56;
  double v57;
  double v58;
  float v59;
  double v60;
  double v61;
  float v62;
  unsigned int v63;
  float v64;
  float v65;
  int v66;
  double v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  float64x2_t v72;
  __int128 v73;
  float32x4_t v74;
  float32x2_t v75;
  uint32x2_t v76;
  uint32x2_t v78;
  uint64_t v79;
  float32x4_t v80;
  __int128 v81;
  float64x2_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  float64x2_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  float64x2_t v90;
  __int128 v91;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"infos");
  v10 = *a1;
  if ((v10 & 4) != 0)
    return a1 + 48;
  if ((v10 & 1) != 0)
  {
    v38 = *((float *)a1 + 10);
    if (!a2)
      goto LABEL_15;
    LODWORD(v39) = HIDWORD(*(_OWORD *)a2);
    v40 = 1.0;
    if (v39 != 0.0)
      v40 = COERCE_FLOAT(*(_QWORD *)(a2 + 8)) / v39;
    if ((v10 & 0x38) != 0x20)
    {
      v66 = sub_1B18662A8(a1, v40, a2, a3, a4, a5, a6, a7, a8);
      v67 = v40;
      if (v66)
      {
        v41 = v38 / v67;
      }
      else
      {
        v41 = v38;
        v38 = v38 * v67;
      }
    }
    else
    {
LABEL_15:
      v41 = *((float *)a1 + 10);
    }
    v42 = *((float *)a1 + 1);
    v43 = *((float *)a1 + 2);
    v44 = v42;
    v45 = v42 + 1.0;
    if (v43 > v42)
      v45 = v43;
    *(float *)&v46 = 2.0 / (v38 + v38);
    v29.f64[0] = 0.0;
    v33 = v46;
    v47 = 2.0 / (v41 + v41);
    LODWORD(v34) = 0;
    *((_QWORD *)&v34 + 1) = 0;
    *((float *)&v34 + 1) = v47;
    v48 = v44 - v45;
    *(float *)&v49 = 1.0 / v48;
    *(_QWORD *)&v29.f64[1] = v49;
    *(float *)&v50 = -(v38 - v38) / (v38 + v38);
    *(float *)&v51 = -(v41 - v41) / (v41 + v41);
    __asm { FMOV            V3.4S, #1.0 }
    *(_QWORD *)&_Q3 = __PAIR64__(v51, v50);
    v52 = v44 / v48;
    *((float *)&_Q3 + 2) = v52;
    *((_OWORD *)a1 + 3) = v46;
    *((_OWORD *)a1 + 4) = (unint64_t)v34;
    *((float64x2_t *)a1 + 5) = v29;
    goto LABEL_41;
  }
  v11 = *((float *)a1 + 11);
  if (a2
    && (v12 = *(float32x2_t *)(a1 + 16),
        v13 = (uint32x2_t)vmvn_s8((int8x8_t)vceqz_f32(v12)),
        (vpmax_u32(v13, v13).u32[0] & 0x80000000) != 0))
  {
    v14 = v11 / 180.0 * 3.14159265 * 0.5;
    v15 = *((float *)a1 + 1);
    v16 = v15 * tanf(v14);
    v17 = vdiv_f32(vadd_f32(v12, v12), *(float32x2_t *)(a2 + 8));
    v18 = v15;
    v19 = *((float *)a1 + 2);
    __asm { FMOV            V7.2S, #1.0 }
    v29 = vcvtq_f64_f32(vmul_n_f32(vadd_f32(v17, _D7), -v16));
    v25 = vcvtq_f64_f32(vmul_n_f32(vsub_f32(_D7, v17), v16));
    v26 = vsubq_f64(v25, v29);
    v27 = (v18 + v18) / v26.f64[0];
    v28 = (v18 + v18) / v26.f64[1];
    *(float32x2_t *)&v29.f64[0] = vcvt_f32_f64(vdivq_f64(vaddq_f64(v25, v29), v26));
    v30 = v15 + 1.0;
    if (v19 > v15)
      v30 = v19;
    v31 = v30 / (v18 - v30);
    v32 = v31;
    LODWORD(v34) = 0;
    *((_QWORD *)&v34 + 1) = 0;
    v33 = LODWORD(v27);
    *((float *)&v34 + 1) = v28;
    v35 = v31 * v18;
    v36 = -1.0;
    *(float *)&v29.f64[1] = v32;
  }
  else
  {
    v54 = *((float *)a1 + 1);
    v55 = *((float *)a1 + 2);
    v56 = v54;
    v57 = __tanpi(v11 / 360.0);
    if (v57 == 0.0)
      v58 = 1.0;
    else
      v58 = 1.0 / v57;
    v59 = v58;
    v60 = v56 + 1.0;
    if (v55 > v54)
      v60 = v55;
    v61 = v60 / (v56 - v60);
    v62 = v61;
    v33 = LODWORD(v59);
    LODWORD(v34) = 0;
    *((_QWORD *)&v34 + 1) = 0;
    *((float *)&v34 + 1) = v59;
    v29.f64[0] = 0.0;
    v35 = v61 * v56;
    *(float *)&v29.f64[1] = v62;
    v36 = -1.0;
  }
  *((float *)&v29.f64[1] + 1) = v36;
  *(float *)&v63 = v35;
  *(_QWORD *)&_Q3 = 0;
  *((_QWORD *)&_Q3 + 1) = v63;
  *((_OWORD *)a1 + 3) = v33;
  *((_OWORD *)a1 + 4) = v34;
  *((float64x2_t *)a1 + 5) = v29;
  *((_OWORD *)a1 + 6) = _Q3;
  if ((v10 & 0x38) != 0x20)
  {
    if (a2)
    {
      LODWORD(v64) = HIDWORD(*(_OWORD *)a2);
      v65 = COERCE_FLOAT(*(_QWORD *)(a2 + 8)) / v64;
      if (v64 == 0.0)
        v65 = 1.0;
    }
    else
    {
      v65 = 1.0;
    }
    v68 = (v10 >> 3) & 7;
    if (v68)
    {
      if (v68 == 3 || v68 == 1 && v65 >= 1.0)
        goto LABEL_37;
    }
    else if (v65 < 1.0)
    {
LABEL_37:
      *((float *)a1 + 17) = v65 * *((float *)&v34 + 1);
      v34 = *((_OWORD *)a1 + 4);
      goto LABEL_41;
    }
    *((float *)a1 + 12) = *(float *)&v33 / v65;
    v33 = *((_OWORD *)a1 + 3);
  }
LABEL_41:
  v69 = 0;
  result = a1 + 48;
  v84 = v33;
  v85 = v34;
  v86 = v29;
  v87 = _Q3;
  v88 = 0u;
  v89 = 0u;
  v90 = 0u;
  v91 = 0u;
  do
  {
    *(__int128 *)((char *)&v88 + v69) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(__int128 *)((char *)&v84 + v69))), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)((char *)&v84 + v69), 1), (float32x4_t)xmmword_1B2244DF0, *(float32x4_t *)((char *)&v84 + v69), 2), (float32x4_t)xmmword_1B2244E10, *(float32x4_t *)((char *)&v84 + v69), 3);
    v69 += 16;
  }
  while (v69 != 64);
  v70 = v88;
  v71 = v89;
  v72 = v90;
  v73 = v91;
  *((_OWORD *)a1 + 3) = v88;
  *((_OWORD *)a1 + 4) = v71;
  *((float64x2_t *)a1 + 5) = v72;
  *((_OWORD *)a1 + 6) = v73;
  v74.i64[0] = *((_QWORD *)a1 + 3);
  v75 = *(float32x2_t *)(a1 + 32);
  v76 = (uint32x2_t)vmvn_s8((int8x8_t)vceqz_f32(*(float32x2_t *)v74.f32));
  if ((vpmax_u32(v76, v76).u32[0] & 0x80000000) != 0)
    goto LABEL_45;
  __asm { FMOV            V1.2S, #1.0 }
  v78 = (uint32x2_t)vmvn_s8((int8x8_t)vceq_f32(v75, _D1));
  if ((vpmax_u32(v78, v78).u32[0] & 0x80000000) != 0)
  {
LABEL_45:
    v79 = 0;
    v80.i32[0] = 0;
    v80.i32[3] = 0;
    *(uint64_t *)((char *)v80.i64 + 4) = HIDWORD(*((_QWORD *)a1 + 4));
    v74.i32[2] = 0;
    v74.i32[3] = 1.0;
    v84 = v70;
    v85 = v71;
    v86 = v72;
    v87 = v73;
    v88 = 0u;
    v89 = 0u;
    v90 = 0u;
    v91 = 0u;
    do
    {
      *(__int128 *)((char *)&v88 + v79) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v75.u32[0], COERCE_FLOAT(*(__int128 *)((char *)&v84 + v79))), v80, *(float32x2_t *)((char *)&v84 + v79), 1), (float32x4_t)xmmword_1B2244D90, *(float32x4_t *)((char *)&v84 + v79), 2), v74, *(float32x4_t *)((char *)&v84 + v79), 3);
      v79 += 16;
    }
    while (v79 != 64);
    v81 = v89;
    v82 = v90;
    v83 = v91;
    *((_OWORD *)a1 + 3) = v88;
    *((_OWORD *)a1 + 4) = v81;
    *((float64x2_t *)a1 + 5) = v82;
    *((_OWORD *)a1 + 6) = v83;
  }
  return result;
}

uint64_t sub_1B1866C40(float *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  _OWORD *v9;
  unsigned int v10;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  float v21;
  uint64_t v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float v29;
  __int128 v30;
  float32x4_t v31;
  int v32;
  float v34;
  float v35;
  float v36;
  float v37;
  uint64_t v38;
  float32x2_t v39;
  float *v40;
  float v46;
  uint64_t v47;
  float32x4_t v48;
  __n128 v49;
  simd_float4x4 v50;
  simd_float4x4 v51;

  v9 = (_OWORD *)a4;
  v10 = a3;
  v49 = a9;
  v13 = *(unsigned __int8 *)a1;
  if ((v13 & 5) == 0)
  {
    v28 = a1[11] / 180.0 * 3.14159265;
    v48 = (float32x4_t)a9;
    v29 = tanf(v28 * 0.5);
    v31 = vdivq_f32(v48, (float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 3));
    v32 = (v13 >> 3) & 7;
    if (v32)
    {
      if (v32 != 3 && (v32 != 1 || v31.f32[2] < 1.0))
      {
LABEL_12:
        v31.f32[0] = v31.f32[2] * v29;
        if (!v10)
          return 1;
        goto LABEL_17;
      }
    }
    else if (v31.f32[2] >= 1.0)
    {
      goto LABEL_12;
    }
    v31.f32[0] = v29;
    v29 = v29 / v31.f32[2];
    if (!v10)
      return 1;
LABEL_17:
    v31.f32[1] = v29;
    v35 = a1[1];
    v34 = a1[2];
    v36 = v35 * v34;
    v37 = v35 - v34;
    v38 = v10;
    v39 = (float32x2_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL).u64[0];
    v40 = (float *)(a2 + 8);
    __asm { FMOV            V5.2S, #-1.0 }
    do
    {
      v46 = v36 / (float)(v34 + (float)(*v40 * v37));
      *(float32x2_t *)&v30 = vsub_f32(*(float32x2_t *)(v40 - 2), *(float32x2_t *)v48.f32);
      *(float32x2_t *)&v30 = vmul_n_f32(vmul_f32(*(float32x2_t *)v31.f32, vadd_f32(vdiv_f32(vadd_f32(*(float32x2_t *)&v30, *(float32x2_t *)&v30), v39), _D5)), v46);
      *((float *)&v30 + 2) = -v46;
      *v9++ = v30;
      v40 += 4;
      --v38;
    }
    while (v38);
    return 1;
  }
  v50 = *(simd_float4x4 *)sub_1B18667B4((unsigned __int8 *)a1, (uint64_t)&v49, a3, a4, a5, a6, a7, a8);
  v51 = __invert_f4(v50);
  v20 = v49;
  v21 = v49.n128_f32[2];
  if (v49.n128_f32[2] == 0.0 || v49.n128_f32[3] == 0.0)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXProjectionInfosUnproject : invalid viewport dimension"), v14, v15, v16, v17, v18, v19, v47);
    return 0;
  }
  if (v10)
  {
    v22 = v10;
    v23 = (float *)(a2 + 8);
    do
    {
      v24 = (float)((float)(*(v23 - 2) - v20.n128_f32[0]) + (float)(*(v23 - 2) - v20.n128_f32[0])) / v21;
      v25 = (float)((float)((float)(*(v23 - 1) - v20.n128_f32[1]) + (float)(*(v23 - 1) - v20.n128_f32[1]))
                  / v20.n128_f32[3])
          + -1.0;
      v26 = *v23;
      v23 += 4;
      *v9++ = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32((float32x4_t)v51.columns[3], (float32x4_t)v51.columns[2], 1.0 - v26), (float32x4_t)v51.columns[1], v25), (float32x4_t)v51.columns[0], v24 + -1.0);
      --v22;
    }
    while (v22);
  }
  return 1;
}

uint64_t sub_1B1866E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"camera");
  return a1 + 64;
}

void sub_1B1866E84(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  const void *v17;
  const void *v18;
  const void *v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;

  sub_1B193E38C((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = (const void *)a1[55];
  if (v9)
  {
    CFRelease(v9);
    a1[55] = 0;
  }
  v10 = (const void *)a1[41];
  if (v10)
  {
    CFRelease(v10);
    a1[41] = 0;
  }
  v11 = (const void *)a1[33];
  if (v11)
  {
    CFRelease(v11);
    a1[33] = 0;
  }
  v12 = (const void *)a1[32];
  if (v12)
  {
    CFRelease(v12);
    a1[32] = 0;
  }
  v13 = (const void *)a1[34];
  if (v13)
  {
    CFRelease(v13);
    a1[34] = 0;
  }
  v14 = (const void *)a1[35];
  if (v14)
  {
    CFRelease(v14);
    a1[35] = 0;
  }
  v15 = (const void *)a1[36];
  if (v15)
  {
    CFRelease(v15);
    a1[36] = 0;
  }
  v16 = (const void *)a1[37];
  if (v16)
  {
    CFRelease(v16);
    a1[37] = 0;
  }
  v17 = (const void *)a1[38];
  if (v17)
  {
    CFRelease(v17);
    a1[38] = 0;
  }
  v18 = (const void *)a1[39];
  if (v18)
  {
    CFRelease(v18);
    a1[39] = 0;
  }
  v19 = (const void *)a1[40];
  if (v19)
  {
    CFRelease(v19);
    a1[40] = 0;
  }
  v20 = (const void *)a1[41];
  if (v20)
  {
    CFRelease(v20);
    a1[41] = 0;
  }
  v21 = (const void *)a1[42];
  if (v21)
  {
    CFRelease(v21);
    a1[42] = 0;
  }
  v22 = (const void *)a1[43];
  if (v22)
  {
    CFRelease(v22);
    a1[43] = 0;
  }
  v23 = (const void *)a1[44];
  if (v23)
  {
    CFRelease(v23);
    a1[44] = 0;
  }
}

CFStringRef sub_1B1866F98(_BYTE *cf)
{
  char v2;
  float v3;
  float v4;
  float v5;
  float v6;
  const __CFAllocator *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  const __CFAllocator *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;

  v2 = cf[64];
  if ((v2 & 4) != 0)
  {
    v30 = *((_OWORD *)cf + 13);
    v31 = *((_OWORD *)cf + 14);
    v28 = *((_OWORD *)cf + 11);
    v29 = *((_OWORD *)cf + 12);
    v19 = CFGetAllocator(cf);
    v27 = sub_1B193E568((uint64_t)cf, v20, v21, v22, v23, v24, v25, v26);
    return CFStringCreateWithFormat(v19, 0, CFSTR("<CFXCamera:%p \"%@\" custom, [%.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f ; %.3f %.3f %.3f %.3f]>"),
             *(float *)&v28,
             *((float *)&v28 + 1),
             cf,
             v27,
             *(float *)&v28,
             *((float *)&v28 + 1),
             *((float *)&v28 + 2),
             *((float *)&v28 + 3),
             *(float *)&v29,
             *((float *)&v29 + 1),
             *((float *)&v29 + 2),
             *((float *)&v29 + 3),
             *(float *)&v30,
             *((float *)&v30 + 1),
             *((float *)&v30 + 2),
             *((float *)&v30 + 3),
             *(float *)&v31,
             *((float *)&v31 + 1),
             *((float *)&v31 + 2),
             *((float *)&v31 + 3));
  }
  else
  {
    v3 = *((float *)cf + 26);
    v4 = *((float *)cf + 27);
    v6 = *((float *)cf + 17);
    v5 = *((float *)cf + 18);
    v7 = CFGetAllocator(cf);
    v15 = sub_1B193E568((uint64_t)cf, v8, v9, v10, v11, v12, v13, v14);
    v16 = v6;
    v17 = v5;
    if ((v2 & 1) != 0)
      return CFStringCreateWithFormat(v7, 0, CFSTR("<CFXCamera:%p \"%@\" ortho, near:%.3f far:%.3f scale: %.3f>"), v16, v17, cf, v15, v6, v5, v3);
    else
      return CFStringCreateWithFormat(v7, 0, CFSTR("<CFXCamera:%p \"%@\" persp, near:%.3f far:%.3f fov:%.3f>"), v16, v17, cf, v15, v6, v5, v4);
  }
}

float sub_1B1867118(uint64_t a1, float *__dst, float *__src, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float *v9;
  float result;
  float *v12;
  long double v13;

  v9 = (float *)(a1 + 108);
  if ((float *)(a1 + 108) == __dst)
    return sub_1B1865C90((float *)a1, *__src, (uint64_t)__dst, (uint64_t)__src, __n, a5, a6, a7, a8);
  memcpy(__dst, __src, __n);
  if (a1 + 112 <= (unint64_t)__dst && a1 + 128 > (unint64_t)__dst)
    *(_BYTE *)(a1 + 64) |= 4u;
  v12 = (float *)(a1 + 244);
  if ((float *)(a1 + 248) == __dst || v12 == __dst)
  {
    v13 = atan(*(float *)(a1 + 248) * 0.5 / *v12);
    *(float *)&v13 = v13 + v13;
    result = *(float *)&v13 / 3.14159265 * 180.0;
    *v9 = result;
  }
  return result;
}

__CFArray *sub_1B18671FC(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  const CFDictionaryValueCallBacks *v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  const CFDictionaryValueCallBacks *v29;
  __CFDictionary *v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  __CFDictionary *v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  __CFDictionary *v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  const CFDictionaryValueCallBacks *v42;
  __CFDictionary *v43;
  uint64_t v44;
  CFNumberRef v45;
  CFNumberRef v46;
  CFNumberRef v47;
  const CFDictionaryKeyCallBacks *v48;
  __CFDictionary *v49;
  CFNumberRef v50;
  CFNumberRef v51;
  CFNumberRef v52;
  __CFDictionary *v53;
  CFNumberRef v54;
  CFNumberRef v55;
  CFNumberRef v56;
  __CFDictionary *v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  const CFDictionaryKeyCallBacks *v61;
  const CFDictionaryValueCallBacks *v62;
  __CFDictionary *v63;
  CFNumberRef v64;
  CFNumberRef v65;
  CFNumberRef v66;
  __CFDictionary *v67;
  CFNumberRef v68;
  CFNumberRef v69;
  CFNumberRef v70;
  __CFDictionary *v71;
  CFNumberRef v72;
  CFNumberRef v73;
  CFNumberRef v74;
  __CFDictionary *v75;
  CFNumberRef v76;
  CFNumberRef v77;
  CFNumberRef v78;
  __CFDictionary *v79;
  CFNumberRef v80;
  CFNumberRef v81;
  CFNumberRef v82;
  __CFDictionary *v83;
  CFNumberRef v84;
  CFNumberRef v85;
  CFNumberRef v86;
  __CFDictionary *v87;
  CFNumberRef v88;
  CFNumberRef v89;
  CFNumberRef v90;
  const CFDictionaryKeyCallBacks *v91;
  __CFDictionary *v92;
  CFNumberRef v93;
  CFNumberRef v94;
  CFNumberRef v95;
  const CFDictionaryValueCallBacks *v96;
  __CFDictionary *v97;
  CFNumberRef v98;
  CFNumberRef v99;
  CFNumberRef v100;
  __CFDictionary *v101;
  CFNumberRef v102;
  CFNumberRef v103;
  CFNumberRef v104;
  __CFDictionary *v105;
  CFNumberRef v106;
  CFNumberRef v107;
  CFNumberRef v108;
  __CFDictionary *v109;
  CFNumberRef v110;
  CFNumberRef v111;
  CFNumberRef v112;
  uint64_t v114;
  int v115;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 1;
  v114 = a1 + 108;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v7 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("fieldOfView"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 1;
  v114 = a1 + 248;
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v11 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v8, CFSTR("name"), CFSTR("sensorHeight"));
  CFDictionarySetValue(v8, CFSTR("type"), v9);
  CFDictionarySetValue(v8, CFSTR("address"), v11);
  CFDictionarySetValue(v8, CFSTR("semantic"), v10);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v11);
  CFRelease(v9);
  v12 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v13 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 1;
  v114 = a1 + 244;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("focalLength"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, v3, v12);
  v115 = 0;
  valuePtr = 7;
  v114 = a1 + 80;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("filmOffset"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 7;
  v114 = a1 + 88;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v24 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("postProjectionTransformTranslation"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 7;
  v114 = a1 + 96;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v28 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v25, CFSTR("name"), CFSTR("postProjectionTransformScale"));
  CFDictionarySetValue(v25, CFSTR("type"), v26);
  CFDictionarySetValue(v25, CFSTR("address"), v28);
  CFDictionarySetValue(v25, CFSTR("semantic"), v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  v29 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v30 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 6;
  v114 = a1 + 104;
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v33 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v30, CFSTR("name"), CFSTR("orthoScale"));
  CFDictionarySetValue(v30, CFSTR("type"), v31);
  CFDictionarySetValue(v30, CFSTR("address"), v33);
  CFDictionarySetValue(v30, CFSTR("semantic"), v32);
  CFArrayAppendValue(Mutable, v30);
  CFRelease(v32);
  CFRelease(v30);
  CFRelease(v33);
  CFRelease(v31);
  v34 = CFDictionaryCreateMutable(0, 4, v3, v29);
  v115 = 0;
  valuePtr = 1;
  v114 = a1 + 72;
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v37 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v34, CFSTR("name"), CFSTR("zfar"));
  CFDictionarySetValue(v34, CFSTR("type"), v35);
  CFDictionarySetValue(v34, CFSTR("address"), v37);
  CFDictionarySetValue(v34, CFSTR("semantic"), v36);
  CFArrayAppendValue(Mutable, v34);
  CFRelease(v36);
  CFRelease(v34);
  CFRelease(v37);
  CFRelease(v35);
  v38 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v29);
  v115 = 0;
  valuePtr = 1;
  v114 = a1 + 68;
  v39 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v40 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v41 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v38, CFSTR("name"), CFSTR("znear"));
  CFDictionarySetValue(v38, CFSTR("type"), v39);
  CFDictionarySetValue(v38, CFSTR("address"), v41);
  CFDictionarySetValue(v38, CFSTR("semantic"), v40);
  CFArrayAppendValue(Mutable, v38);
  CFRelease(v40);
  CFRelease(v38);
  CFRelease(v41);
  CFRelease(v39);
  v42 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v43 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 10;
  v44 = a1;
  v114 = a1 + 112;
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v46 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v47 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v43, CFSTR("name"), CFSTR("matrix"));
  CFDictionarySetValue(v43, CFSTR("type"), v45);
  CFDictionarySetValue(v43, CFSTR("address"), v47);
  CFDictionarySetValue(v43, CFSTR("semantic"), v46);
  CFArrayAppendValue(Mutable, v43);
  CFRelease(v46);
  CFRelease(v43);
  CFRelease(v47);
  CFRelease(v45);
  v48 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v49 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v42);
  v115 = 0;
  valuePtr = 1;
  v114 = v44 + 240;
  v50 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v51 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v52 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v49, CFSTR("name"), CFSTR("focusDistance"));
  CFDictionarySetValue(v49, CFSTR("type"), v50);
  CFDictionarySetValue(v49, CFSTR("address"), v52);
  CFDictionarySetValue(v49, CFSTR("semantic"), v51);
  CFArrayAppendValue(Mutable, v49);
  CFRelease(v51);
  CFRelease(v49);
  CFRelease(v52);
  CFRelease(v50);
  v53 = CFDictionaryCreateMutable(0, 4, v48, MEMORY[0x1E0C9B3A0]);
  v115 = 0;
  valuePtr = 2;
  v114 = v44 + 432;
  v54 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v55 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v56 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v53, CFSTR("name"), CFSTR("categoryBitMask"));
  CFDictionarySetValue(v53, CFSTR("type"), v54);
  CFDictionarySetValue(v53, CFSTR("address"), v56);
  CFDictionarySetValue(v53, CFSTR("semantic"), v55);
  CFArrayAppendValue(Mutable, v53);
  CFRelease(v55);
  CFRelease(v53);
  CFRelease(v56);
  CFRelease(v54);
  v57 = CFDictionaryCreateMutable(0, 4, v48, MEMORY[0x1E0C9B3A0]);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 256;
  v58 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v59 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v60 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v57, CFSTR("name"), CFSTR("depthOfField"));
  CFDictionarySetValue(v57, CFSTR("type"), v58);
  CFDictionarySetValue(v57, CFSTR("address"), v60);
  CFDictionarySetValue(v57, CFSTR("semantic"), v59);
  CFArrayAppendValue(Mutable, v57);
  CFRelease(v59);
  CFRelease(v57);
  CFRelease(v60);
  CFRelease(v58);
  v61 = v48;
  v62 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v63 = CFDictionaryCreateMutable(0, 4, v61, MEMORY[0x1E0C9B3A0]);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 264;
  v64 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v65 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v66 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v63, CFSTR("name"), CFSTR("motionBlur"));
  CFDictionarySetValue(v63, CFSTR("type"), v64);
  CFDictionarySetValue(v63, CFSTR("address"), v66);
  CFDictionarySetValue(v63, CFSTR("semantic"), v65);
  CFArrayAppendValue(Mutable, v63);
  CFRelease(v65);
  CFRelease(v63);
  CFRelease(v66);
  CFRelease(v64);
  v67 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 272;
  v68 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v69 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v70 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v67, CFSTR("name"), CFSTR("grain"));
  CFDictionarySetValue(v67, CFSTR("type"), v68);
  CFDictionarySetValue(v67, CFSTR("address"), v70);
  CFDictionarySetValue(v67, CFSTR("semantic"), v69);
  CFArrayAppendValue(Mutable, v67);
  CFRelease(v69);
  CFRelease(v67);
  CFRelease(v70);
  CFRelease(v68);
  v71 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 280;
  v72 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v73 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v74 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v71, CFSTR("name"), CFSTR("exposure"));
  CFDictionarySetValue(v71, CFSTR("type"), v72);
  CFDictionarySetValue(v71, CFSTR("address"), v74);
  CFDictionarySetValue(v71, CFSTR("semantic"), v73);
  CFArrayAppendValue(Mutable, v71);
  CFRelease(v73);
  CFRelease(v71);
  CFRelease(v74);
  CFRelease(v72);
  v75 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 288;
  v76 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v77 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v78 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v75, CFSTR("name"), CFSTR("toneMapping"));
  CFDictionarySetValue(v75, CFSTR("type"), v76);
  CFDictionarySetValue(v75, CFSTR("address"), v78);
  CFDictionarySetValue(v75, CFSTR("semantic"), v77);
  CFArrayAppendValue(Mutable, v75);
  CFRelease(v77);
  CFRelease(v75);
  CFRelease(v78);
  CFRelease(v76);
  v79 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 296;
  v80 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v81 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v82 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v79, CFSTR("name"), CFSTR("bloom"));
  CFDictionarySetValue(v79, CFSTR("type"), v80);
  CFDictionarySetValue(v79, CFSTR("address"), v82);
  CFDictionarySetValue(v79, CFSTR("semantic"), v81);
  CFArrayAppendValue(Mutable, v79);
  CFRelease(v81);
  CFRelease(v79);
  CFRelease(v82);
  CFRelease(v80);
  v83 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 304;
  v84 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v85 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v86 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v83, CFSTR("name"), CFSTR("vignetting"));
  CFDictionarySetValue(v83, CFSTR("type"), v84);
  CFDictionarySetValue(v83, CFSTR("address"), v86);
  CFDictionarySetValue(v83, CFSTR("semantic"), v85);
  CFArrayAppendValue(Mutable, v83);
  CFRelease(v85);
  CFRelease(v83);
  CFRelease(v86);
  CFRelease(v84);
  v87 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 312;
  v88 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v89 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v90 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v87, CFSTR("name"), CFSTR("lensBlur"));
  CFDictionarySetValue(v87, CFSTR("type"), v88);
  CFDictionarySetValue(v87, CFSTR("address"), v90);
  CFDictionarySetValue(v87, CFSTR("semantic"), v89);
  CFArrayAppendValue(Mutable, v87);
  CFRelease(v89);
  CFRelease(v87);
  CFRelease(v90);
  CFRelease(v88);
  v91 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v92 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v62);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 320;
  v93 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v94 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v95 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v92, CFSTR("name"), CFSTR("colorFringe"));
  CFDictionarySetValue(v92, CFSTR("type"), v93);
  CFDictionarySetValue(v92, CFSTR("address"), v95);
  CFDictionarySetValue(v92, CFSTR("semantic"), v94);
  CFArrayAppendValue(Mutable, v92);
  CFRelease(v94);
  CFRelease(v92);
  CFRelease(v95);
  CFRelease(v93);
  v96 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v97 = CFDictionaryCreateMutable(0, 4, v91, MEMORY[0x1E0C9B3A0]);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 328;
  v98 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v99 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v100 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v97, CFSTR("name"), CFSTR("colorGrading"));
  CFDictionarySetValue(v97, CFSTR("type"), v98);
  CFDictionarySetValue(v97, CFSTR("address"), v100);
  CFDictionarySetValue(v97, CFSTR("semantic"), v99);
  CFArrayAppendValue(Mutable, v97);
  CFRelease(v99);
  CFRelease(v97);
  CFRelease(v100);
  CFRelease(v98);
  v101 = CFDictionaryCreateMutable(0, 4, v91, v96);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 336;
  v102 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v103 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v104 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v101, CFSTR("name"), CFSTR("chromaticTransform"));
  CFDictionarySetValue(v101, CFSTR("type"), v102);
  CFDictionarySetValue(v101, CFSTR("address"), v104);
  CFDictionarySetValue(v101, CFSTR("semantic"), v103);
  CFArrayAppendValue(Mutable, v101);
  CFRelease(v103);
  CFRelease(v101);
  CFRelease(v104);
  CFRelease(v102);
  v105 = CFDictionaryCreateMutable(0, 4, v91, v96);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 344;
  v106 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v107 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v108 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v105, CFSTR("name"), CFSTR("doughnutBokeh"));
  CFDictionarySetValue(v105, CFSTR("type"), v106);
  CFDictionarySetValue(v105, CFSTR("address"), v108);
  CFDictionarySetValue(v105, CFSTR("semantic"), v107);
  CFArrayAppendValue(Mutable, v105);
  CFRelease(v107);
  CFRelease(v105);
  CFRelease(v108);
  CFRelease(v106);
  v109 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v115 = 1;
  valuePtr = 5;
  v114 = v44 + 352;
  v110 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v111 = CFNumberCreate(0, kCFNumberSInt32Type, &v115);
  v112 = CFNumberCreate(0, kCFNumberLongType, &v114);
  CFDictionarySetValue(v109, CFSTR("name"), CFSTR("ssao"));
  CFDictionarySetValue(v109, CFSTR("type"), v110);
  CFDictionarySetValue(v109, CFSTR("address"), v112);
  CFDictionarySetValue(v109, CFSTR("semantic"), v111);
  CFArrayAppendValue(Mutable, v109);
  CFRelease(v111);
  CFRelease(v109);
  CFRelease(v112);
  CFRelease(v110);
  return Mutable;
}

uint64_t sub_1B18688D0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;

  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B17987F8(v10, a2))
    return a1;
  else
    return 0;
}

uint64_t sub_1B1868904(uint64_t result, uint64_t a2)
{
  _QWORD *v3;

  v3 = (_QWORD *)result;
  if (*(_QWORD *)(result + 256))
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[33])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[34])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[35])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[36])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[37])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[38])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[39])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[40])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[41])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[42])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[43])
    result = (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  if (v3[44])
    return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
  return result;
}

uint64_t sub_1B1868A30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a4;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 16) = a3;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

void sub_1B1868A7C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v3 = v2;
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 40) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_1B1868A9C(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 56) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return result;
}

uint64_t sub_1B1868AB0(uint64_t a1)
{
  id *v2;

  v2 = *(id **)(a1 + 32);
  if (v2 != *(id **)(a1 + 40))
  {
    do
    {

      v2 += 2;
    }
    while (v2 != *(id **)(a1 + 40));
    v2 = *(id **)(a1 + 32);
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B1868B10(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 32);
  if (v3)
  {
    *(_QWORD *)(v1 + 40) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B1868B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  result = sub_1B18FD774(*(_QWORD *)a1);
  v10 = (a2 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = *(_QWORD *)(a1 + 88);
  v12 = v11 + v10;
  if (v11 + v10 > *(_QWORD *)(a1 + 80))
  {
    do
    {
      v13 = *(_QWORD *)(a1 + 32);
      v14 = *(unsigned int *)(a1 + 56);
      if (v14 >= ((unint64_t)(*(_QWORD *)(a1 + 40) - v13) >> 4))
      {
        v17 = 0;
        do
          v17 += *(_QWORD *)(a1 + 8);
        while (v10 > (unint64_t)v17);
        v18 = sub_1B18FBF28(*(_QWORD *)a1, v17, 16 * *(_QWORD *)(a1 + 24));
        v19 = v18;
        *(_QWORD *)(a1 + 64) = v18;
        v21 = *(_QWORD *)(a1 + 40);
        v20 = *(_QWORD *)(a1 + 48);
        if (v21 >= v20)
        {
          v23 = *(_QWORD *)(a1 + 32);
          v24 = (uint64_t)(v21 - v23) >> 4;
          v25 = v24 + 1;
          if ((unint64_t)(v24 + 1) >> 60)
            abort();
          v26 = v20 - v23;
          if (v26 >> 3 > v25)
            v25 = v26 >> 3;
          if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
            v7 = 0xFFFFFFFFFFFFFFFLL;
          else
            v7 = v25;
          if (v7)
            v27 = (char *)sub_1B17F7824(a1 + 48, v7);
          else
            v27 = 0;
          v28 = &v27[16 * v24];
          *(_QWORD *)v28 = v19;
          *((_DWORD *)v28 + 2) = 1;
          v30 = *(char **)(a1 + 32);
          v29 = *(char **)(a1 + 40);
          v31 = v28;
          if (v29 != v30)
          {
            do
            {
              *((_OWORD *)v31 - 1) = *((_OWORD *)v29 - 1);
              v31 -= 16;
              v29 -= 16;
            }
            while (v29 != v30);
            v29 = *(char **)(a1 + 32);
          }
          v22 = v28 + 16;
          *(_QWORD *)(a1 + 32) = v31;
          *(_QWORD *)(a1 + 40) = v28 + 16;
          *(_QWORD *)(a1 + 48) = &v27[16 * v7];
          if (v29)
            operator delete(v29);
        }
        else
        {
          *(_QWORD *)v21 = v18;
          *(_DWORD *)(v21 + 8) = 1;
          v22 = (char *)(v21 + 16);
        }
        *(_QWORD *)(a1 + 40) = v22;
        LODWORD(v14) = *(_DWORD *)(a1 + 56);
        v16 = *(void **)(a1 + 64);
      }
      else
      {
        v15 = v13 + 16 * v14;
        v16 = *(void **)v15;
        *(_QWORD *)(a1 + 64) = *(_QWORD *)v15;
        ++*(_DWORD *)(v15 + 8);
      }
      *(_DWORD *)(a1 + 56) = v14 + 1;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 72) = objc_msgSend_contents(v16, (const char *)v7, v8, v9);
      result = objc_msgSend_length(*(void **)(a1 + 64), v32, v33, v34);
      *(_QWORD *)(a1 + 80) = result;
      v11 = *(_QWORD *)(a1 + 88);
      v12 = v11 + v10;
    }
    while (v11 + v10 > result);
  }
  a3[2] = v11;
  v35 = *(_QWORD *)(a1 + 64);
  *a3 = *(_QWORD *)(a1 + 72) + v11;
  a3[1] = v35;
  *(_QWORD *)(a1 + 88) = v12;
  return result;
}

void *sub_1B1868D14@<X0>(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, void **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1B1868B34(a1, a3, a4);
  return memcpy(*a4, a2, a3);
}

uint64_t sub_1B1868D5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(unsigned __int8 *)(a1 + 200);
}

void sub_1B1868DA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  v8 = *(_QWORD *)(a1 + 48);
  if (v8)
    sub_1B1868DB4(a1, v8, a3, a4, a5, a6, a7, a8);
}

void sub_1B1868DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v10 = sub_1B186989C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (((v10 ^ (*(_DWORD *)(a1 + 216) == -1)) & 1) == 0)
  {
    v18 = v10;
    v19 = sub_1B187B260(a2, v11, v12, v13, v14, v15, v16, v17);
    if (v18)
    {
      v26 = sub_1B197CB84(v19, a1, v20, v21, v22, v23, v24, v25);
    }
    else
    {
      sub_1B197D1C8(v19, *(_DWORD *)(a1 + 216), v20, v21, v22, v23, v24, v25);
      v26 = -1;
    }
    *(_DWORD *)(a1 + 216) = v26;
    v34 = sub_1B187B2A8(a2, v27, v28, v29, v30, v31, v32, v33);
    sub_1B18D12BC(v34, *(_DWORD *)(a1 + 88), *(unsigned int *)(a1 + 216), v35, v36, v37, v38, v39);
  }
}

float32x4_t sub_1B1868E40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  float32x4_t result;
  const void *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  const __CFDictionary *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;

  if ((*(_BYTE *)(a1 + 223) & 1) == 0)
  {
    *(_OWORD *)(a1 + 272) = xmmword_1B2244E20;
    *(_OWORD *)(a1 + 288) = xmmword_1B2246ED0;
    v9 = *(uint64_t **)(a1 + 248);
    if (!v9 || (sub_1B1998DF0(v9, a1 + 272) & 1) == 0)
    {
      v11 = *(const void **)(a1 + 240);
      if (v11)
      {
        v41 = 0uLL;
        v40 = 0uLL;
        if (sub_1B17C5C88(v11, 0, (uint64_t)&v41, (uint64_t)&v40, a5, a6, a7, a8))
        {
          v13 = v40;
          v12 = v41;
          v12.i32[3] = 1.0;
          v13.i32[3] = 1.0;
          v14.i64[0] = 0x3F0000003F000000;
          v14.i64[1] = 0x3F0000003F000000;
          *(float32x4_t *)(a1 + 272) = vmulq_f32(vaddq_f32(v12, v13), v14);
          *(float32x4_t *)(a1 + 288) = vmulq_f32(vsubq_f32(v13, v12), v14);
        }
      }
      v15 = sub_1B1868FE8(a1, a2, a3, a4, a5, a6, a7, a8);
      if (v15)
      {
        v23 = (uint64_t)v15;
        if (sub_1B186064C((uint64_t)v15, v16, v17, v18, v19, v20, v21, v22) == 5)
        {
          if (sub_1B1860E14(v23, v24, v25, v26, v27, v28, v29, v30))
          {
            v31 = (const void *)sub_1B18607D4(v23);
            if (v31)
            {
              v41 = 0uLL;
              v40 = 0uLL;
              if (sub_1B17C5C88(v31, 0, (uint64_t)&v41, (uint64_t)&v40, v32, v33, v34, v35))
              {
                v37 = v40;
                v36 = v41;
                v36.i32[3] = 1.0;
                v37.i32[3] = 1.0;
                v38.i64[0] = 0x3F0000003F000000;
                v38.i64[1] = 0x3F0000003F000000;
                v39 = vmulq_f32(vaddq_f32(v36, v37), v38);
                result = vmulq_f32(vsubq_f32(v37, v36), v38);
                *(float32x4_t *)(a1 + 272) = v39;
                *(float32x4_t *)(a1 + 288) = result;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B1868F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(_QWORD *)(a1 + 248);
}

uint64_t sub_1B1868FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(_QWORD *)(a1 + 240);
}

const __CFDictionary *sub_1B1868FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 221) & 2) != 0)
    return sub_1B193E800(a1, CFSTR("kLightKey"), a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

void sub_1B1869058(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  sub_1B18690BC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B187A8A4(a1[3].i64[0], 2, a1, CFSTR("model"), v9, v10, v11, v12);
}

void sub_1B18690BC(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17[2];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((a1[13].i8[12] & 4) == 0)
    sub_1B1868E40((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  if (a1[13].i32[2] != -1)
  {
    v9 = a1[3].i64[0];
    if (v9)
    {
      v10 = (_QWORD *)sub_1B187B260(v9, a2, a3, a4, a5, a6, a7, a8);
      v16 = a1[18];
      v17[0] = a1[17];
      v17[1] = v16;
      if ((vminvq_u32((uint32x4_t)vcgezq_f32(a1[18])) & 0x80000000) != 0)
        sub_1B197CC7C(v10, a1[13].u32[2], v17, v11, v12, v13, v14, v15);
    }
  }
}

uint64_t sub_1B1869150(uint64_t a1, _OWORD *a2)
{
  __int128 v2;

  v2 = *(_OWORD *)(a1 + 288);
  *a2 = *(_OWORD *)(a1 + 272);
  a2[1] = v2;
  return vminvq_u32((uint32x4_t)vcgezq_f32(*(float32x4_t *)(a1 + 288))) >> 31;
}

void sub_1B1869170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex Count;
  uint64_t v14;
  uint64_t v15;
  const void *ValueAtIndex;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  CFIndex v26;
  float *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v9 = *(void **)(a1 + 232);
  if (v9)
    free(v9);
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 220) &= ~0x4000u;
  v10 = *(_QWORD *)(a1 + 240);
  if (v10)
  {
    v11 = (const __CFArray *)sub_1B17A1994(v10, a2, a3, a4, a5, a6, a7, a8);
    if (v11)
    {
      v12 = v11;
      if (CFArrayGetCount(v11) >= 1)
      {
        Count = CFArrayGetCount(v12);
        v14 = Count;
        if (Count >= 0)
          v15 = Count;
        else
          v15 = Count + 1;
        ValueAtIndex = CFArrayGetValueAtIndex(v12, v15 >> 1);
        v24 = sub_1B18469B4((uint64_t)ValueAtIndex, v17, v18, v19, v20, v21, v22, v23);
        v25 = (char *)malloc_type_malloc(12 * v14 + 8, 0xB0A92020uLL);
        *(_QWORD *)(a1 + 232) = v25;
        *(_WORD *)v25 = v14;
        v25[2] = v24;
        *(_DWORD *)(*(_QWORD *)(a1 + 232) + 4) = 0;
        *(_DWORD *)(a1 + 220) |= 0x4000u;
        if (v14 >= 1)
        {
          v26 = 0;
          v27 = (float *)(v25 + 16);
          do
          {
            v28 = CFArrayGetValueAtIndex(v12, v26);
            *(v27 - 2) = sub_1B18469FC((uint64_t)v28, v29, v30, v31, v32, v33, v34, v35);
            *(_QWORD *)(v27 - 1) = 0xFFFFFFFFLL;
            ++v26;
            v27 += 3;
          }
          while (v14 != v26);
        }
      }
    }
  }
  sub_1B187A8A4(*(_QWORD *)(a1 + 48), 2, (const void *)a1, CFSTR("model"), a5, a6, a7, a8);
}

uint64_t sub_1B18692B4(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 221) >> 6) & 1;
}

float32x4_t sub_1B18692C0(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5)
{
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t result;

  v5 = *a1;
  v6 = *a2;
  v5.i32[3] = 1.0;
  v6.i32[3] = 1.0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  v8 = vmulq_f32(vaddq_f32(v5, v6), v7);
  v9 = (int32x4_t)vmulq_f32(vsubq_f32(v6, v5), v7);
  v10 = a5[1];
  v11 = a5[2];
  v12 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a5[3], v11, v8, 2), v10, *(float32x2_t *)v8.f32, 1), *a5, v8.f32[0]);
  v12.i32[3] = v8.i32[3];
  v13 = (float32x4_t)v9;
  v13.i32[1] = v9.i32[0];
  v13.i32[2] = v9.i32[0];
  v14 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v9.i8, 1), v9), vabsq_f32(v10)), v13, vabsq_f32(*a5)), (float32x4_t)vzip2q_s32(vtrn1q_s32(v9, v9), v9), vabsq_f32(v11));
  *a3 = vsubq_f32(v12, v14);
  result = vaddq_f32(v14, v12);
  *a4 = result;
  return result;
}

uint64_t sub_1B1869348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = *(_QWORD *)(a1 + 240);
  if (result)
  {
    result = (uint64_t)sub_1B17A08FC(result, 0, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      result = sub_1B187813C(result, v9, v10, v11, v12, v13, v14, v15);
      if (result)
        return (sub_1B1841314(result, v16, v17, v18, v19, v20, v21, v22) & 0xFFFFFFFD) != 0;
    }
  }
  return result;
}

uint64_t sub_1B1869380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;

  v8 = *(_DWORD *)(a1 + 220);
  if ((v8 & 2) != 0)
  {
    if ((v8 & 4) != 0)
    {
      LODWORD(v10) = 0;
    }
    else
    {
      v10 = *(_QWORD *)(a1 + 240);
      if (v10)
      {
        LODWORD(v10) = sub_1B17A096C(v10, a2, a3, a4, a5, a6, a7, a8);
        v8 = *(_DWORD *)(a1 + 220);
      }
    }
    v8 = v8 & 0xFFFFFFFC | v10;
    *(_DWORD *)(a1 + 220) = v8;
  }
  return v8 & 1;
}

uint64_t sub_1B18693D0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 220) >> 2) & 1;
}

void sub_1B18693DC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v10;
  __int128 v11;

  v10 = *(_DWORD *)(a1 + 220);
  if (a3 != 2 || (v10 & 4) == 0)
  {
    if (a2)
    {
      v11 = a2[1];
      *(_OWORD *)(a1 + 272) = *a2;
      *(_OWORD *)(a1 + 288) = v11;
    }
    else
    {
      sub_1B1868E40(a1, 0, a3, a4, a5, a6, a7, a8);
      v10 = *(_DWORD *)(a1 + 220);
    }
    if (a3 != 2)
    {
      v10 = v10 & 0xFFFFFFFB | (4 * (a3 == 1));
      *(_DWORD *)(a1 + 220) = v10;
    }
    if ((v10 & 4) != 0)
      *(_DWORD *)(a1 + 220) = v10 & 0xFFFFFFFC;
    sub_1B18690BC((float32x4_t *)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B186945C(uint64_t result, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*(_DWORD *)(result + 216) != -1)
  {
    v8 = result;
    result = *(_QWORD *)(result + 48);
    if (result)
    {
      v10 = sub_1B187B260(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      return sub_1B197CEA0(v10, *(_DWORD *)(v8 + 216), a2, v11, v12, v13, v14, v15);
    }
  }
  return result;
}

uint64_t sub_1B18694A8(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  double (*v16)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  char v24;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (*(_BYTE *)(a1 + 200))
    return 0;
  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  if ((*(_BYTE *)(a1 + 221) & 0x10) != 0 && *(_QWORD *)(a1 + 240))
  {
    v11 = 0;
  }
  else
  {
    v12 = *(_OWORD *)(a1 + 288);
    *a2 = *(_OWORD *)(a1 + 272);
    a2[1] = v12;
    v11 = vminvq_u32((uint32x4_t)vcgezq_f32(*(float32x4_t *)(a1 + 288))) >> 31;
  }
  v24 = v11;
  v13 = *(_QWORD *)(a1 + 72);
  if (v13)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 0x40000000;
    v16 = sub_1B1869664;
    v17 = &unk_1E63D7950;
    v18 = &v21;
    v19 = a3;
    v20 = a2;
    do
    {
      ((void (*)(_QWORD *, uint64_t))v16)(v15, v13);
      v13 = *(_QWORD *)(v13 + 80);
    }
    while (v13);
    v11 = *((_BYTE *)v22 + 24) != 0;
  }
  _Block_object_dispose(&v21, 8);
  return v11;
}

uint64_t sub_1B18695D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 221) & 0x10) != 0)
    return *(_QWORD *)(a1 + 240);
  else
    return 0;
}

uint64_t sub_1B1869628(uint64_t result, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(result + 72); i; i = *(_QWORD *)(i + 80))
    result = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, i);
  return result;
}

double sub_1B1869664(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t v32;
  int32x4_t v33;
  float32x4_t v35;
  int32x4_t v36;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10.i64[0] = 0;
  v35 = 0u;
  v36 = 0u;
  if ((*(_BYTE *)(a2 + 221) & 0x10) != 0 && *(_QWORD *)(a2 + 240))
  {
    v11 = (_BYTE *)a1[5];
    if (v11)
      *v11 = 1;
  }
  else if (sub_1B18694A8(a2, &v35, a1[5]))
  {
    *(double *)v19.i64 = sub_1B18697A0(a2, v12, v13, v14, v15, v16, v17, v18);
    v23 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v21, v20, v35, 2), v22, *(float32x2_t *)v35.f32, 1), v19, v35.f32[0]);
    v23.i32[3] = v35.i32[3];
    v24 = (float32x4_t)v36;
    v24.i32[1] = v36.i32[0];
    v24.i32[2] = v36.i32[0];
    v25 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v36.i8, 1), v36), vabsq_f32(v22)), v24, vabsq_f32(v19)), (float32x4_t)vzip2q_s32(vtrn1q_s32(v36, v36), v36), vabsq_f32(v20));
    v35 = v23;
    v36 = (int32x4_t)v25;
    v26 = *(_QWORD *)(a1[4] + 8);
    if (*(_BYTE *)(v26 + 24))
    {
      v27 = (float32x4_t *)a1[6];
      v28 = v27[1];
      v29 = vminnmq_f32(vsubq_f32(*v27, v28), vsubq_f32(v23, v25));
      v30 = vmaxnmq_f32(vaddq_f32(*v27, v28), vaddq_f32(v23, v25));
      v28.i64[0] = 0x3F0000003F000000;
      v28.i64[1] = 0x3F0000003F000000;
      v31 = vmulq_f32(vaddq_f32(v29, v30), v28);
      v10 = vmulq_f32(vsubq_f32(v30, v29), v28);
      *v27 = v31;
      v27[1] = v10;
    }
    else
    {
      *(_BYTE *)(v26 + 24) = 1;
      v32 = a1[6];
      v10.i64[0] = v35.i64[0];
      v33 = v36;
      *(float32x4_t *)v32 = v35;
      *(int32x4_t *)(v32 + 16) = v33;
    }
  }
  return *(double *)v10.i64;
}

double sub_1B18697A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  _OWORD v26[4];
  _OWORD v27[4];
  simd_float4x4 v28;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v12 = sub_1B1822148((_BYTE *)(a1 + 96), a2, a3, a4, a5, a6, a7, a8);
  v13 = (float32x4_t)v9;
  v14 = (float32x4_t)v10;
  v15 = (float32x4_t)v11;
  v16 = *(_QWORD *)(a1 + 192);
  if (v16)
  {
    if (*(float *)(v16 + 124) == 0.0)
    {
      v24 = v9;
      v25 = v12;
      v22 = v11;
      v23 = v10;
      v28 = __invert_f4(*(simd_float4x4 *)v16);
      v15 = (float32x4_t)v22;
      v14 = (float32x4_t)v23;
      v13 = (float32x4_t)v24;
      v12 = v25;
      *(simd_float4x4 *)(v16 + 64) = v28;
      v16 = *(_QWORD *)(a1 + 192);
    }
    v17 = 0;
    v18 = *(_OWORD *)(v16 + 80);
    v19 = *(_OWORD *)(v16 + 96);
    v20 = *(_OWORD *)(v16 + 112);
    v26[0] = *(_OWORD *)(v16 + 64);
    v26[1] = v18;
    v26[2] = v19;
    v26[3] = v20;
    memset(v27, 0, sizeof(v27));
    do
    {
      v27[v17] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v12, COERCE_FLOAT(v26[v17])), v13, *(float32x2_t *)&v26[v17], 1), v14, (float32x4_t)v26[v17], 2), v15, (float32x4_t)v26[v17], 3);
      ++v17;
    }
    while (v17 != 4);
    v12.n128_u64[0] = *(_QWORD *)&v27[0];
  }
  return v12.n128_f64[0];
}

uint64_t sub_1B186989C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*(_QWORD *)(a1 + 240))
    return 1;
  v9 = *(_DWORD *)(a1 + 220);
  if ((v9 & 0x2000) != 0)
    return 1;
  if ((v9 & 0x200) != 0)
  {
    v10 = sub_1B1868FE8(a1, a2, a3, a4, a5, a6, a7, a8);
    if ((sub_1B1860E14((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17) & 1) != 0)
      return 1;
    v9 = *(_DWORD *)(a1 + 220);
  }
  return HIBYTE(v9) & 1;
}

uint64_t sub_1B18698EC(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v2;
  unsigned int v3;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v24;
  int32x4_t v25;

  v2 = a1[18];
  *a2 = a1[17];
  a2[1] = v2;
  v3 = vminvq_u32((uint32x4_t)vcgezq_f32(a1[18])) >> 31;
  for (i = a1[4].i64[1]; i; i = *(_QWORD *)(i + 80))
  {
    v24 = 0u;
    v25 = 0u;
    if (sub_1B18698EC(i, &v24))
    {
      *(double *)v13.i64 = sub_1B18697A0(i, v6, v7, v8, v9, v10, v11, v12);
      v17 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v15, v14, v24, 2), v16, *(float32x2_t *)v24.f32, 1), v13, v24.f32[0]);
      v17.i32[3] = v24.i32[3];
      v18 = (float32x4_t)v25;
      v18.i32[1] = v25.i32[0];
      v18.i32[2] = v25.i32[0];
      v19 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v25.i8, 1), v25), vabsq_f32(v16)), v18, vabsq_f32(v13)), (float32x4_t)vzip2q_s32(vtrn1q_s32(v25, v25), v25), vabsq_f32(v14));
      v20 = a2[1];
      v21 = vminnmq_f32(vsubq_f32(v17, v19), vsubq_f32(*a2, v20));
      v22 = vmaxnmq_f32(vaddq_f32(v19, v17), vaddq_f32(*a2, v20));
      v20.i64[0] = 0x3F0000003F000000;
      v20.i64[1] = 0x3F0000003F000000;
      *a2 = vmulq_f32(vaddq_f32(v21, v22), v20);
      a2[1] = vmulq_f32(vsubq_f32(v22, v21), v20);
      LOBYTE(v3) = 1;
    }
  }
  return v3 & 1;
}

uint64_t sub_1B18699E8(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  float32x4_t v32;

  if ((a1[13].i8[14] & 0xE0) == 0
    && (v25 = a1[3].i64[0]) != 0
    && (v26 = sub_1B187B260(v25, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) != 0)
  {
    *(__n128 *)a3 = sub_1B197DDE8(v26, (uint64_t)a1, a2, v27, v28, v29, v30, v31);
    a3[1] = v32;
    return vminvq_u32((uint32x4_t)vcgezq_f32(v32)) >> 31;
  }
  else
  {
    result = sub_1B18698EC(a1, a3);
    if ((_DWORD)result)
    {
      if ((a2 & 1) == 0)
      {
        v19 = sub_1B1869AC8((uint64_t)a1, v12, v13, v14, v15, v16, v17, v18);
        v20 = *(float32x4_t *)(v19 + 16);
        v21 = *(float32x4_t *)(v19 + 32);
        v22 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v19 + 48), v21, *a3, 2), v20, *(float32x2_t *)a3->f32, 1), *(float32x4_t *)v19, COERCE_FLOAT(*a3));
        v22.i32[3] = HIDWORD(*(unsigned __int128 *)a3);
        v23 = a3[1];
        v23.i32[1] = v23.i32[0];
        v23.i32[2] = (__int32)a3[1];
        v24 = vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)a3[1].f32, 1), (int32x4_t)a3[1]), vabsq_f32(v20)), v23, vabsq_f32(*(float32x4_t *)v19)), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a3[1], (int32x4_t)a3[1]), (int32x4_t)a3[1]), vabsq_f32(v21));
        *a3 = v22;
        a3[1] = v24;
        return 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B1869AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v9 = *(_QWORD *)(a1 + 48);
  if (!v9)
    return sub_1B18223DC(a1 + 96, a2, a3, a4, a5, a6, a7, a8);
  v10 = sub_1B187B2A8(v9, a2, a3, a4, a5, a6, a7, a8);
  if (!v10)
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: CFXNodeGetWorldMatrix - no transform tree"), v11, v12, v13, v14, v15, v16, v20);
    return sub_1B18223DC(a1 + 96, a2, a3, a4, a5, a6, a7, a8);
  }
  v17 = v10;
  v18 = *(_DWORD *)(a1 + 88);
  if (v18 == -1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Node should have a TT handle already"), v11, v12, v13, v14, v15, v16, (uint64_t)"node->_transformHandle != kCFXTransformHandleInvalid");
    v18 = *(_DWORD *)(a1 + 88);
  }
  return sub_1B18D138C(v17, v18, v11, v12, v13, v14, v15, v16);
}

double sub_1B1869B70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint32x4_t a9)
{
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  __n128 v20;
  int v21;

  v10 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (!*(_BYTE *)(a1 + 200))
  {
    v12 = *(_QWORD *)(a1 + 48);
    if (!v12)
      goto LABEL_11;
    v13 = sub_1B187B260(v12, a2, a3, a4, a5, a6, a7, a8);
    if (!v13)
      goto LABEL_11;
    if (v10)
    {
      v19 = sub_1B197DDE8(v13, a1, 1, v14, v15, v16, v17, v18);
LABEL_10:
      *(__n128 *)a3 = v19;
      *(__n128 *)(a3 + 16) = v20;
LABEL_11:
      a9 = (uint32x4_t)vcgezq_f32(*(float32x4_t *)(a3 + 16));
      a9.i32[0] = vminvq_u32(a9);
      return *(double *)a9.i64;
    }
    v21 = *(_DWORD *)(a1 + 216);
    if (v21 != -1)
    {
      v19.n128_f64[0] = sub_1B197DD18(v13, v21, 1);
      goto LABEL_10;
    }
    a9.i64[0] = 0;
    *(_OWORD *)a3 = xmmword_1B2244E20;
    *(_OWORD *)(a3 + 16) = xmmword_1B2246ED0;
  }
  return *(double *)a9.i64;
}

uint64_t sub_1B1869C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const __CFDictionary *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (sub_1B1869D10(a1, a2, a3, a4, a5, a6, a7, a8))
  {
    v16 = 4;
  }
  else
  {
    if (!a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"node");
    if (*(_QWORD *)(a1 + 240))
      v16 = 1;
    else
      v16 = 16 * (sub_1B1869DF4(a1, CFSTR("kParticleEmitter"), v10, v11, v12, v13, v14, v15) != 0);
  }
  v17 = sub_1B1868FE8(a1, v9, v10, v11, v12, v13, v14, v15);
  if (v17 && sub_1B186064C((uint64_t)v17, v18, v19, v20, v21, v22, v23, v24) == 5)
    v16 |= 8u;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v19, v20, v21, v22, v23, v24, (uint64_t)"node");
  return (*(_DWORD *)(a1 + 220) >> 20) & 0x20 | v16;
}

uint64_t sub_1B1869D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 221) & 0x20) != 0
    && (v9 = sub_1B193E800(a1, CFSTR("kFilterKey"), a3, a4, a5, a6, a7, a8)) != 0)
  {
    return sub_1B19C45CC((uint64_t)v9, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    return 0;
  }
}

const __CFDictionary *sub_1B1869D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1869DF4(a1, CFSTR("kParticleEmitter"), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B1869D98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return (*(unsigned __int8 *)(a1 + 223) >> 1) & 1;
}

const __CFDictionary *sub_1B1869DE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1869DF4(a1, CFSTR("kBehaviorGraph"), a3, a4, a5, a6, a7, a8);
}

const __CFDictionary *sub_1B1869DF4(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return sub_1B193E800(a1, key, a3, a4, a5, a6, a7, a8);
}

void sub_1B1869E44(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1869E54(a1, a2, CFSTR("kBehaviorGraph"), a4, a5, a6, a7, a8);
}

void sub_1B1869E54(uint64_t a1, const __CFDictionary *a2, void *key, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const __CFDictionary *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  _BOOL8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = *(_QWORD *)(a1 + 48);
  v12 = sub_1B1869DF4(a1, key, (uint64_t)key, a4, a5, a6, a7, a8);
  if (v11)
    v20 = v12 == 0;
  else
    v20 = 1;
  if (!v20)
    sub_1B17C5DD0(v12, *(_QWORD *)(a1 + 48), v14, v15, v16, v17, v18, v19);
  v21 = sub_1B17C61FC(a1, v13, v14, v15, v16, v17, v18, v19) != 0;
  sub_1B193E88C((CFTypeRef *)a1, key, a2, v21, v22, v23, v24, v25);
  v26 = *(_DWORD *)(a1 + 220);
  v40 = sub_1B186DD80(a1, v27, v28, v29, v30, v31, v32, v33) != 0;
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFEFFFFFF | ((v40 & 1) << 24);
  if (v11 && (v26 & 0x1000000) != v40 << 24)
  {
    if ((v26 & 0x1000000) != 0)
    {
      sub_1B1879B6C(v11, (const void *)a1);
      if (!a2)
        return;
      goto LABEL_13;
    }
    sub_1B1879A30(v11, (void *)a1, v34, v35, v36, v37, v38, v39);
  }
  if (!a2)
    return;
LABEL_13:
  v41 = *(_QWORD *)(a1 + 48);
  if (v41)
    sub_1B17C5FC0((uint64_t *)a2, v41, v34, v35, v36, v37, v38, v39);
}

uint64_t sub_1B1869F5C()
{
  if (qword_1ED4CED90 != -1)
    dispatch_once(&qword_1ED4CED90, &unk_1E63D0D50);
  return qword_1ED4CED98;
}

double sub_1B1869F9C()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  if (!qword_1ED4CED98)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CED98);
    qword_1ED4CED98 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("hidden"), 0xC8u, 3, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("opacity"), 0xCCu, 1, 0, 0, 0, v4, v5);
    sub_1B19C3258();
    unk_1ED4BEA98 = xmmword_1E63D30C8;
    xmmword_1ED4BEA80 = xmmword_1E63D30A8;
    unk_1ED4BEAA8 = xmmword_1E63D30D8;
    qword_1ED4BEA90 = (uint64_t)sub_1B186E374;
    unk_1ED4BEAB8 = *(_OWORD *)&off_1E63D30E8;
    qword_1ED4BEAC8 = 0;
    unk_1ED4BEAD0 = sub_1B186F5E4;
    *(_QWORD *)&result = 0x1B1869DE4;
    unk_1ED4BEAE8 = xmmword_1E63D30B8;
  }
  return result;
}

uint64_t sub_1B186A0A0()
{
  uint64_t v0;
  unsigned int v1;

  if (qword_1ED4CED90 != -1)
    dispatch_once(&qword_1ED4CED90, &unk_1E63D0D50);
  v0 = sub_1B179CB90(qword_1ED4CED98, 0x120uLL);
  sub_1B1822E8C(v0 + 96);
  *(_DWORD *)(v0 + 204) = 1065353216;
  *(_BYTE *)(v0 + 200) = 0;
  v1 = *(_DWORD *)(v0 + 220) & 0xFFEFFFD1 | 0x10002A;
  *(_QWORD *)(v0 + 208) = 1;
  *(_DWORD *)(v0 + 216) = -1;
  *(_DWORD *)(v0 + 220) = v1;
  *(_DWORD *)(v0 + 88) = -1;
  *(_OWORD *)(v0 + 272) = xmmword_1B2244E20;
  *(_OWORD *)(v0 + 288) = xmmword_1B2246ED0;
  return v0;
}

uint64_t sub_1B186A148(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  _QWORD *v33;
  unsigned int v34;
  __int128 v35;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v10;
  v11 = *(_OWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 144);
  v13 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 176) = v13;
  *(_OWORD *)(a2 + 128) = v11;
  *(_OWORD *)(a2 + 144) = v12;
  v14 = *(__int128 **)(a1 + 192);
  if (v14)
    sub_1B186A2DC(a2, v14, a3, a4, a5, a6, a7, a8);
  sub_1B186A3A0(a2, *(float *)(a1 + 204), (uint64_t)v14, a3, a4, a5, a6, a7, a8);
  sub_1B186A51C(a2, *(unsigned __int8 *)(a1 + 200), v15, v16, v17, v18, v19, v20);
  v27 = *(void **)(a1 + 240);
  if (v27)
    sub_1B186A58C((float32x4_t *)a2, v27, v21, v22, v23, v24, v25, v26);
  sub_1B193EAC4(a1, (CFTypeRef *)a2, v21, v22, v23, v24, v25, v26);
  v28 = *(_DWORD *)(a2 + 220) & 0xFFFFFBFF | (((*(_DWORD *)(a1 + 220) >> 10) & 1) << 10);
  *(_DWORD *)(a2 + 220) = v28;
  v29 = v28 & 0xFFFF7FFF | (((*(_DWORD *)(a1 + 220) >> 15) & 1) << 15);
  *(_DWORD *)(a2 + 220) = v29;
  v30 = v29 & 0xFFFFDFFF | (((*(_DWORD *)(a1 + 220) >> 13) & 1) << 13);
  *(_DWORD *)(a2 + 220) = v30;
  v31 = v30 & 0xFFFFEFFF | (((*(_DWORD *)(a1 + 220) >> 12) & 1) << 12);
  *(_DWORD *)(a2 + 220) = v31;
  v32 = v31 & 0xFFFFFDFF | (((*(_DWORD *)(a1 + 220) >> 9) & 1) << 9);
  *(_DWORD *)(a2 + 220) = v32;
  v33 = *(_QWORD **)(a1 + 248);
  if (v33)
  {
    v33 = (_QWORD *)sub_1B1998710(v33, a2);
    v32 = *(_DWORD *)(a2 + 220);
  }
  *(_QWORD *)(a2 + 248) = v33;
  v34 = v32 & 0xFFFFF7FF | (((*(_DWORD *)(a1 + 220) >> 11) & 1) << 11);
  *(_DWORD *)(a2 + 220) = v34;
  v35 = *(_OWORD *)(a1 + 288);
  *(_OWORD *)(a2 + 272) = *(_OWORD *)(a1 + 272);
  *(_OWORD *)(a2 + 288) = v35;
  *(_DWORD *)(a2 + 220) = v34 & 0xFFFFFFFB | (4 * ((*(_DWORD *)(a1 + 220) >> 2) & 1));
  *(_QWORD *)(a2 + 208) = *(_QWORD *)(a1 + 208);
  return a2;
}

BOOL sub_1B186A28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(_QWORD *)(a1 + 192) != 0;
}

uint64_t sub_1B186A2DC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = *(_OWORD **)(a1 + 192);
  if (!v10)
  {
    v10 = sub_1B179E238(0x80uLL);
    *(_QWORD *)(a1 + 192) = v10;
  }
  v11 = *a2;
  v12 = a2[1];
  v13 = a2[3];
  v10[2] = a2[2];
  v10[3] = v13;
  *v10 = v11;
  v10[1] = v12;
  v14 = *(_QWORD *)(a1 + 192);
  if (v14)
    *(_DWORD *)(v14 + 124) = 0;
  return sub_1B186BA34(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B186A358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(_QWORD *)(a1 + 192);
}

void sub_1B186A3A0(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[5];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"node");
  v11 = *(float *)(a1 + 204);
  if (v11 != a2)
  {
    if (a2 >= 1.0 && v11 < 1.0)
    {
      *(float *)(a1 + 204) = a2;
      sub_1B186C528(a1, 1, a4, a5, a6, a7, a8, a9);
    }
    else
    {
      if (a2 >= 1.0)
      {
        *(float *)(a1 + 204) = a2;
        sub_1B186C528(a1, 0, a4, a5, a6, a7, a8, a9);
        goto LABEL_14;
      }
      *(float *)(a1 + 204) = a2;
      sub_1B186C528(a1, v11 >= 1.0, a4, a5, a6, a7, a8, a9);
      if (v11 < 1.0)
        goto LABEL_14;
    }
    v19 = *(_QWORD *)(a1 + 48);
    sub_1B187A8A4(v19, 4, (const void *)a1, 0, v15, v16, v17, v18);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = sub_1B186F8A8;
    v20[3] = &unk_1E63D7AF0;
    v20[4] = v19;
    sub_1B186B018(a1, (uint64_t)v20);
LABEL_14:
    if (a2 == 0.0 || v11 == 0.0)
      sub_1B186C5D4(a1, 1, v13, v14, v15, v16, v17, v18);
  }
}

float sub_1B186A4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(float *)(a1 + 204);
}

void sub_1B186A51C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (*(unsigned __int8 *)(a1 + 200) != a2)
  {
    *(_BYTE *)(a1 + 200) = a2;
    sub_1B186C7BC(a1, a2 ^ 1u, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B186A58C(float32x4_t *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  CFTypeRef v24;
  uint64_t v25;
  uint64_t v26;
  CFTypeID v27;
  int v28;
  int v29;
  __int32 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t *v51;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"node");
  }
  v16 = (void *)a1[15].i64[0];
  if (!v16)
  {
    if (!a2)
      goto LABEL_12;
    goto LABEL_10;
  }
  sub_1B17A1FA4(a1[15].i64[0], a1, a3, a4, a5, a6, a7, a8);
  sub_1B17C5DD0(v16, a1[3].i64[0], v17, v18, v19, v20, v21, v22);
  v23 = (const void *)a1[15].i64[0];
  if (v23 == a2)
    goto LABEL_12;
  if (v23)
  {
    CFRelease(v23);
    a1[15].i64[0] = 0;
  }
  if (a2)
  {
LABEL_10:
    v24 = CFRetain(a2);
    goto LABEL_11;
  }
  v24 = 0;
LABEL_11:
  a1[15].i64[0] = (uint64_t)v24;
LABEL_12:
  if (a2)
    sub_1B17A1E70((uint64_t)a2, a1, a3, a4, a5, a6, a7, a8);
  v25 = a1[3].i64[0];
  if (v25)
    sub_1B194F874(CFSTR("kCFXNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("model"), 1u);
  if (!a2)
    goto LABEL_21;
  v26 = a1[3].i64[0];
  if (v26)
    sub_1B17C5FC0((uint64_t *)a2, v26, a3, a4, a5, a6, a7, a8);
  v27 = CFGetTypeID(a2);
  if (v27 == sub_1B18D9D1C())
  {
    v28 = 4096;
  }
  else
  {
LABEL_21:
    v28 = 0;
    v29 = 0;
    v30 = a1[13].i32[3];
    if ((v30 & 0x1000) == 0)
      goto LABEL_23;
  }
  sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), (const void *)a1[3].i64[0], 0, 1u);
  v30 = a1[13].i32[3];
  v29 = v28;
LABEL_23:
  a1[13].i32[3] = v30 & 0xFFFFEFFF | v29;
  v31 = (_QWORD *)a1[15].i64[1];
  if (v31)
    sub_1B199896C(v31, a2, a3, a4, a5, a6, a7, a8);
  sub_1B1869170((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  sub_1B18690BC(a1, v32, v33, v34, v35, v36, v37, v38);
  sub_1B186C5D4((uint64_t)a1, 0, v39, v40, v41, v42, v43, v44);
  v51 = a1;
  do
  {
    v51[13].i32[3] |= 2u;
    v51 = (float32x4_t *)v51[4].i64[0];
  }
  while (v51);
  if (v25)
    sub_1B1868DB4((uint64_t)a1, v25, v45, v46, v47, v48, v49, v50);
}

uint64_t sub_1B186A758(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD v19[2];
  void (*v20)(uint64_t, uint64_t);
  void *v21;
  uint64_t v22;
  char v23;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = sub_1B186A0A0();
  sub_1B186A148(a1, v10, v11, v12, v13, v14, v15, v16);
  if (a2)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v20 = sub_1B186A818;
    v21 = &unk_1E63D7990;
    v23 = a2;
    v22 = v10;
    for (i = *(_QWORD *)(a1 + 72); i; i = *(_QWORD *)(i + 80))
      v20((uint64_t)v19, i);
  }
  return v10;
}

void sub_1B186A818(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = (const void *)sub_1B186A758(a2, *(unsigned __int8 *)(a1 + 40));
  sub_1B186A858(*(_QWORD *)(a1 + 32), v3, v4, v5, v6, v7, v8, v9);
  CFRelease(v3);
}

uint64_t sub_1B186A858(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;

  if (cf)
  {
    v10 = *(_QWORD *)(a1 + 72);
    if (!v10)
    {
      *(_QWORD *)(a1 + 72) = CFRetain(cf);
      return sub_1B186B1B4(a1, (uint64_t)cf, a3, a4, a5, a6, a7, a8);
    }
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"child");
    v10 = *(_QWORD *)(a1 + 72);
    if (!v10)
      return sub_1B186B1B4(a1, (uint64_t)cf, a3, a4, a5, a6, a7, a8);
  }
  do
  {
    v11 = v10;
    v10 = *(_QWORD *)(v10 + 80);
  }
  while (v10);
  if (cf)
    *(_QWORD *)(v11 + 80) = CFRetain(cf);
  return sub_1B186B1B4(a1, (uint64_t)cf, a3, a4, a5, a6, a7, a8);
}

__n128 *sub_1B186A8EC(const void *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  CFTypeRef v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v8 = a3;
  v10 = sub_1B17A148C(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v18 = (__n128 *)v10;
  if (a2)
  {
    v19 = sub_1B17A0848(v10, v11, v12, v13, v14, v15, v16, v17);
    sub_1B18762F4(v19, a2, v20, v21, v22, v23, v24, v25);
  }
  v26 = sub_1B184A9C4((uint64_t)v18);
  sub_1B184A9CC((uint64_t)v18, v26 & 0xFFFFFF00);
  sub_1B184A850(v18, v8, v27, v28, v29, v30, v31, v32);
  v33 = sub_1B18F8384((uint64_t)v18);
  CFRetain(v33);
  sub_1B184A850(v18, 0, v34, v35, v36, v37, v38, v39);
  sub_1B17A14D4((uint64_t)v18, (uint64_t)v33, v40, v41, v42, v43, v44, v45);
  CFRelease(v33);
  return v18;
}

float32x4_t *sub_1B186A984(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const void *v53;
  CFTypeRef *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const __CFArray *v77;
  __CFArray *Mutable;
  CFIndex Count;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  CFIndex v85;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  __n128 *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  CFTypeRef v125;
  const __CFArray *v126;
  const __CFArray *v127;
  void *v128;
  __n128 *v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  CFArrayRef Copy;
  uint64_t v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;

  if (!(_DWORD)a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. need subdivision level"), a3, a4, a5, a6, a7, a8, (uint64_t)"subdivisionLevel > 0");
  v17 = (float32x4_t *)sub_1B186A758(a1, 0, a3, a4, a5, a6, a7, a8);
  if (!v17)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v11, v12, v13, v14, v15, v16, (uint64_t)"node");
  v18 = (const void *)v17[15].i64[0];
  if (v18)
  {
    v19 = sub_1B186ACAC(a1, v10, v11, v12, v13, v14, v15, v16);
    v24 = sub_1B186A8EC(v18, 0, a2, 0, v20, v21, v22, v23);
    sub_1B186A58C(v17, v24, v25, v26, v27, v28, v29, v30);
    CFRelease(v24);
    v38 = sub_1B17A0848((uint64_t)v18, v31, v32, v33, v34, v35, v36, v37);
    v45 = sub_1B1876264(v38, 0, v39, v40, v41, v42, v43, v44);
    if (v19)
    {
      v53 = (const void *)v45;
      v149 = v19;
      v54 = sub_1B19437AC(v19, v46, v47, v48, v49, v50, v51, v52);
      sub_1B19439D8((uint64_t)v54, v24, v55, v56, v57, v58, v59, v60);
      v147 = (uint64_t *)v54;
      v61 = sub_1B17A0A4C((uint64_t)v54);
      if (sub_1B1942C9C(v61, v62, v63, v64, v65, v66, v67, v68))
        sub_1B19426F0(v61, v38, 0, 0, v69, v70, v71, v72);
      if (sub_1B1942070(v61))
        sub_1B1942AB4(v61, v38, 0, 0, v73, v74, v75, v76, v146);
      v148 = v38;
      v77 = (const __CFArray *)sub_1B17A0A4C(v61);
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      Count = CFArrayGetCount(v77);
      if (Count >= 1)
      {
        v85 = Count;
        for (i = 0; i != v85; ++i)
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v77, i);
          v92 = sub_1B186A8EC(ValueAtIndex, v53, a2, 0, v88, v89, v90, v91);
          CFArrayAppendValue(Mutable, v92);
          CFRelease(v92);
        }
      }
      sub_1B1941D64(v61, Mutable, 0, v80, v81, v82, v83, v84);
      sub_1B186AD08(v17, v147, v93, v94, v95, v96, v97, v98);
      CFRelease(v147);
      v38 = v148;
      v19 = v149;
    }
    v99 = *(_QWORD *)(a1 + 248);
    if (v99)
    {
      v100 = sub_1B1998B4C(v99, v46, v47, v48, v49, v50, v51, v52);
      if (v100)
      {
        v101 = v100;
        v102 = sub_1B17A0A4C(v100);
        v110 = sub_1B18741B0(v38, v103, v104, v105, v106, v107, v108, v109);
        v111 = (__n128 *)-[VFXModel __createCFObject]_0();
        sub_1B17A14D4((uint64_t)v111, v110, v112, v113, v114, v115, v116, v117);
        if (v19)
        {
          v124 = sub_1B184A9C4((uint64_t)v111);
          sub_1B184A9CC((uint64_t)v111, v124 & 0xFFFFFF00);
        }
        sub_1B184A850(v111, a2, v118, v119, v120, v121, v122, v123);
        v125 = sub_1B18F8384((uint64_t)v111);
        v126 = (const __CFArray *)sub_1B181F5A8(v101);
        v127 = v126;
        if (v126)
          LOWORD(v126) = CFArrayGetCount(v126);
        v128 = (void *)sub_1B18F0220((uint64_t)v125, (__int16)v126);
        CFRelease(v111);
        if (v128)
        {
          v129 = (__n128 *)sub_1B18F0998(v102);
          sub_1B18F098C((uint64_t)v128, *v129, v129[1], v129[2], v129[3]);
          v130 = (void *)sub_1B181F5A8(v102);
          sub_1B18F060C((uint64_t)v128, v130, v131, v132, v133, v134, v135, v136);
          v137 = (uint64_t *)sub_1B18E4404(v128);
          CFRelease(v128);
          if (v127)
          {
            Copy = CFArrayCreateCopy(0, v127);
            sub_1B18E45B0((uint64_t)v137, Copy);
            CFRelease(Copy);
          }
          sub_1B186AE48(v17, v137, v138, v139, v140, v141, v142, v143);
          CFRelease(v137);
        }
      }
    }
  }
  return v17;
}

uint64_t sub_1B186ACAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  result = *(_QWORD *)(a1 + 248);
  if (result)
    return sub_1B1998A28(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B186AD08(float32x4_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  CFTypeRef *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = sub_1B186ACAC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if ((uint64_t *)v10 != a2)
  {
    v18 = (void *)v10;
    if (v10)
    {
      v19 = sub_1B17C61FC((uint64_t)a1, v11, v12, v13, v14, v15, v16, v17);
      sub_1B17C5DD0(v18, v19, v20, v21, v22, v23, v24, v25);
    }
    if (a2)
    {
      v26 = a1[3].i64[0];
      if (v26)
        sub_1B17C5FC0(a2, v26, v12, v13, v14, v15, v16, v17);
      v28 = (CFTypeRef *)&a1[15].i64[1];
      v27 = (_QWORD *)a1[15].i64[1];
      if (!v27)
      {
        v27 = (_QWORD *)sub_1B1998670((uint64_t)a1);
        a1[15].i64[1] = (uint64_t)v27;
        if (!v27)
          goto LABEL_17;
      }
    }
    else
    {
      v28 = (CFTypeRef *)&a1[15].i64[1];
      v27 = (_QWORD *)a1[15].i64[1];
      if (!v27)
      {
LABEL_17:
        if (sub_1B17C61FC((uint64_t)a1, v11, v12, v13, v14, v15, v16, v17))
          sub_1B194F874(CFSTR("kCFXNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("kDeformerStackKey"), 1u);
        sub_1B1869058(a1, v36, v37, v38, v39, v40, v41, v42);
        return;
      }
    }
    sub_1B1998A70((uint64_t)v27, a2, v12, v13, v14, v15, v16, v17);
    if (sub_1B199883C(v27, v29, v30, v31, v32, v33, v34, v35) && *v28)
    {
      CFRelease(*v28);
      *v28 = 0;
    }
    goto LABEL_17;
  }
}

uint64_t sub_1B186AE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 248);
  if (result)
    return sub_1B1998B4C(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B186AE48(float32x4_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = a1[15].i64[1];
  if (!v10)
  {
    if (!a2)
      return;
LABEL_11:
    v28 = a1[3].i64[0];
    if (v28)
      sub_1B17C5FC0(a2, v28, a3, a4, a5, a6, a7, a8);
    sub_1B18E4744((uint64_t)a2, (uint64_t)a1, a3, a4, a5, a6, a7, a8);
    v27 = (_QWORD *)a1[15].i64[1];
    if (!v27)
    {
      v27 = (_QWORD *)sub_1B1998670((uint64_t)a1);
      a1[15].i64[1] = (uint64_t)v27;
      if (!v27)
        goto LABEL_18;
    }
    goto LABEL_15;
  }
  v11 = sub_1B1998B4C(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if ((uint64_t *)v11 == a2)
    return;
  v13 = (void *)v11;
  if (v11)
  {
    v14 = sub_1B17C61FC((uint64_t)a1, v12, a3, a4, a5, a6, a7, a8);
    sub_1B17C5DD0(v13, v14, v15, v16, v17, v18, v19, v20);
    sub_1B18E4744((uint64_t)v13, 0, v21, v22, v23, v24, v25, v26);
  }
  if (a2)
    goto LABEL_11;
  v27 = (_QWORD *)a1[15].i64[1];
  if (v27)
  {
LABEL_15:
    sub_1B1998B94(v27, a2, a3, a4, a5, a6, a7, a8);
    if (sub_1B199883C(v27, v29, v30, v31, v32, v33, v34, v35))
    {
      v36 = (const void *)a1[15].i64[1];
      if (v36)
      {
        CFRelease(v36);
        a1[15].i64[1] = 0;
      }
    }
  }
LABEL_18:
  if (sub_1B17C61FC((uint64_t)a1, v12, a3, a4, a5, a6, a7, a8))
    sub_1B194F874(CFSTR("kCFXNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("kDeformerStackKey"), 1u);
  sub_1B1869058(a1, v37, v38, v39, v40, v41, v42, v43);
}

uint64_t sub_1B186AF90(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 72);
  if (!v1)
    return 0;
  LODWORD(result) = 0;
  do
  {
    result = (result + 1);
    v1 = *(_QWORD *)(v1 + 80);
  }
  while (v1);
  return result;
}

BOOL sub_1B186AFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  BOOL v5;
  char v6;

  v6 = 0;
  v2 = *(_QWORD *)(a1 + 72);
  if (!v2)
    return 0;
  do
  {
    (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, v2, &v6);
    v2 = *(_QWORD *)(v2 + 80);
    result = v6 != 0;
    if (v6)
      v5 = 1;
    else
      v5 = v2 == 0;
  }
  while (!v5);
  return result;
}

uint64_t sub_1B186B018(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, result);
    if (v4 == 2)
      return 1;
    v5 = v3;
    while (1)
    {
      if (v4 == 1 || (v6 = (_QWORD *)v5[9]) == 0)
      {
        if (v5 == v3)
          return 0;
        while (1)
        {
          v6 = (_QWORD *)v5[10];
          if (v6)
            break;
          v5 = (_QWORD *)v5[8];
          if (v5)
            v7 = v5 == v3;
          else
            v7 = 1;
          if (v7)
            return 0;
        }
      }
      v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(a2 + 16))(a2, v6);
      v5 = v6;
      if (v4 == 2)
        return 1;
    }
  }
  return result;
}

uint64_t sub_1B186B0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return sub_1B193E568(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B186B104(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  if (result)
  {
    v3 = (_QWORD *)result;
    v4 = result;
    do
    {
LABEL_3:
      v5 = (_QWORD *)v4;
      if (*(_BYTE *)(v4 + 200))
        break;
      v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v4);
      if (v6 == 2)
        return 1;
      v4 = v5[9];
    }
    while (v6 != 1 && v4 != 0);
    while (v5 != v3)
    {
      v4 = v5[10];
      if (v4)
        goto LABEL_3;
      v5 = (_QWORD *)v5[8];
    }
    return 0;
  }
  return result;
}

uint64_t sub_1B186B18C(uint64_t a1, unsigned int a2)
{
  uint64_t result;
  unsigned int v3;

  result = *(_QWORD *)(a1 + 72);
  if (a2 && result)
  {
    v3 = 1;
    do
    {
      result = *(_QWORD *)(result + 80);
      if (v3 >= a2)
        break;
      ++v3;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B186B1B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  *(_QWORD *)(a2 + 64) = a1;
  sub_1B186BA34(a2, a2, a3, a4, a5, a6, a7, a8);
  if (a1)
  {
    if ((*(_DWORD *)(a2 + 220) & 3) != 0)
    {
      v16 = a1;
      do
      {
        *(_DWORD *)(v16 + 220) |= 2u;
        v16 = *(_QWORD *)(v16 + 64);
      }
      while (v16);
      if (!a2)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"node");
    }
  }
  v17 = *(_QWORD *)(a2 + 64);
  if (v17)
  {
    v18 = *(_DWORD *)(a2 + 220) & 0xFFFFFF7F | (((*(_DWORD *)(v17 + 220) >> 7) & 1) << 7);
    *(_DWORD *)(a2 + 220) = v18;
    v19 = v18 & 0xFF1FFFFF | (((*(_DWORD *)(v17 + 220) >> 21) & 7) << 21);
    *(_DWORD *)(a2 + 220) = v19;
  }
  else
  {
    v19 = *(_DWORD *)(a2 + 220);
  }
  sub_1B186DEF4(a2, (v19 >> 7) & 1, (v19 >> 21) & 7, v11, v12, v13, v14, v15);
  sub_1B186C528(a2, 0, v20, v21, v22, v23, v24, v25);
  v32 = *(_QWORD *)(a1 + 48);
  v33 = *(_QWORD *)(a2 + 48);
  if (v32)
  {
    if (v33 != v32)
    {
      sub_1B17C5DD0((void *)a2, v33, v26, v27, v28, v29, v30, v31);
      sub_1B17C5FC0((uint64_t *)a2, *(_QWORD *)(a1 + 48), v34, v35, v36, v37, v38, v39);
    }
  }
  else
  {
    sub_1B17C5DD0((void *)a2, v33, v26, v27, v28, v29, v30, v31);
  }
  return sub_1B186C7BC(a2, 1, v26, v27, v28, v29, v30, v31);
}

uint64_t sub_1B186B2BC(uint64_t a1, _QWORD *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v8 = a3;
  if (cf[10])
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. child is already inserted in a tree"), a3, a4, a5, a6, a7, a8, (uint64_t)"child->_nextSibling == NULL");
  if (cf[8])
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. child is already inserted in a tree"), a3, a4, a5, a6, a7, a8, (uint64_t)"child->_parent == NULL");
  if (v8)
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = (v8 - 1);
    if (v8 != 1)
    {
      do
      {
        v11 = *(_QWORD *)(v11 + 80);
        --v12;
      }
      while (v12);
    }
    v13 = *(_QWORD *)(v11 + 80);
    *(_QWORD *)(v11 + 80) = cf;
    CFRetain(cf);
    cf[10] = v13;
  }
  else
  {
    cf[10] = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = cf;
    CFRetain(cf);
  }
  return sub_1B186B1B4(a1, (uint64_t)cf, v14, v15, v16, v17, v18, v19);
}

uint64_t sub_1B186B388(uint64_t a1, _QWORD *cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (cf[8])
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. child is already inserted in a tree"), a3, a4, a5, a6, a7, a8, (uint64_t)"child->_parent == NULL");
  if (cf[10])
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. child is already inserted in a tree"), a3, a4, a5, a6, a7, a8, (uint64_t)"child->_nextSibling == NULL");
  if (a3)
  {
    if (*(_QWORD *)(a3 + 64) != a1)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. prevChild is not parented to the right node"), a3, a4, a5, a6, a7, a8, (uint64_t)"prevSibling->_parent == node");
    v11 = *(_QWORD *)(a3 + 80);
    *(_QWORD *)(a3 + 80) = cf;
    CFRetain(cf);
    cf[10] = v11;
  }
  else
  {
    cf[10] = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 72) = cf;
    CFRetain(cf);
  }
  return sub_1B186B1B4(a1, (uint64_t)cf, v12, v13, v14, v15, v16, v17);
}

void sub_1B186B464(_QWORD *cf, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v10;
  _QWORD *i;

  v8 = cf[8];
  if (v8)
  {
    v10 = *(_QWORD **)(v8 + 72);
    if (v10 == cf)
    {
      *(_QWORD *)(v8 + 72) = cf[10];
    }
    else
    {
      if (!v10)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"prevChild");
      for (i = (_QWORD *)v10[10]; i != cf; i = (_QWORD *)v10[10])
      {
        v10 = i;
        if (!i)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"prevChild");
      }
      v10[10] = cf[10];
    }
    cf[10] = 0;
    cf[8] = 0;
    sub_1B17C5DD0(cf, cf[6], a3, a4, a5, a6, a7, a8);
    CFRelease(cf);
  }
}

uint64_t sub_1B186B53C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  _BOOL4 v4;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = v2 == 0;
  v4 = v2 == 0;
  v5 = 0;
  while (!v3 && v2 != a2)
  {
    ++v5;
    v2 = *(_QWORD *)(v2 + 80);
    v3 = v2 == 0;
    v4 = v2 == 0;
  }
  if (v4)
    return 0xFFFFFFFFLL;
  else
    return v5;
}

uint64_t sub_1B186B574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(_QWORD *)(a1 + 64);
}

__n128 sub_1B186B5BC(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a2)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"position");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  result = *(__n128 *)(sub_1B1869AC8(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8) + 48);
  *a2 = result;
  return result;
}

float32x4_t sub_1B186B63C(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float v35;
  float32x4_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  int8x16_t v42;
  int8x16_t v43;
  float v44;
  float32x2_t v45;
  float32x2_t v46;
  float32x2_t v47;
  uint64_t v48;
  int32x2_t v49;
  float32x4_t v50;
  float32x2_t v51;
  float32x2_t v52;
  float32x4_t result;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"orientation");
LABEL_3:
  v10 = sub_1B1869AC8(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v11 = *(float32x4_t *)(v10 + 16);
  v12 = *(float32x4_t *)(v10 + 32);
  v13 = (int32x4_t)vmulq_f32(*(float32x4_t *)v10, *(float32x4_t *)v10);
  v14 = (int32x4_t)vmulq_f32(v11, v11);
  v15 = (int32x4_t)vmulq_f32(v12, v12);
  v16 = vzip2q_s32(v13, v15);
  v17 = (float32x4_t)vzip1q_s32(vzip1q_s32(v13, v15), v14);
  v18 = (float32x4_t)vtrn2q_s32(v13, v14);
  v18.i32[2] = v15.i32[1];
  v19 = vaddq_f32((float32x4_t)vzip1q_s32(v16, vdupq_laneq_s32(v14, 2)), vaddq_f32(v17, v18));
  v18.i64[0] = 0x80000000800000;
  v18.i64[1] = 0x80000000800000;
  v20 = vcgeq_f32(v18, v19);
  v19.i32[3] = 0;
  v21 = vrsqrteq_f32(v19);
  v22 = vmulq_f32(v21, vrsqrtsq_f32(v19, vmulq_f32(v21, v21)));
  v23 = v20;
  v23.i32[3] = 0;
  v24 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v23), (int8x16_t)v19, (int8x16_t)vmulq_f32(v22, vrsqrtsq_f32(v19, vmulq_f32(v22, v22))));
  v25 = vmulq_n_f32(*(float32x4_t *)v10, v24.f32[0]);
  v26 = vmulq_lane_f32(v11, *(float32x2_t *)v24.f32, 1);
  v27 = vmulq_laneq_f32(v12, v24, 2);
  v28 = (int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27);
  v29 = (int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26);
  v30 = (int32x4_t)v25;
  if (v20.i32[0])
  {
    v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v28, (int8x16_t)v27, 0xCuLL), vnegq_f32(v26)), v27, (float32x4_t)vextq_s8(v29, (int8x16_t)v26, 0xCuLL));
    v30 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
  }
  v32 = (int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25);
  v33 = v26;
  if (v20.i32[1])
  {
    v34 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v32, (int8x16_t)v25, 0xCuLL), vnegq_f32(v27)), v25, (float32x4_t)vextq_s8(v28, (int8x16_t)v27, 0xCuLL));
    v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v34, v34), (int8x16_t)v34, 0xCuLL);
  }
  if (v20.i32[2])
  {
    v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v29, (int8x16_t)v26, 0xCuLL), vnegq_f32(v25)), v26, (float32x4_t)vextq_s8(v32, (int8x16_t)v25, 0xCuLL));
    v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL);
  }
  v35 = (float)(*(float *)v30.i32 + v33.f32[1]) + v27.f32[2];
  if (v35 > 0.0)
  {
    v36 = (float32x4_t)vzip2q_s32((int32x4_t)v33, vuzp1q_s32((int32x4_t)v33, (int32x4_t)v27));
    v36.i32[2] = v30.i32[1];
    v37 = sqrtf(v35 + 1.0);
    v38 = (float32x4_t)vtrn2q_s32((int32x4_t)v27, vzip2q_s32((int32x4_t)v27, v30));
    v38.i32[2] = v33.i32[0];
    v40 = vsubq_f32(v36, v38);
    v36.f32[3] = v37;
    v38.f32[3] = v37;
    v39 = vmulq_f32(v36, v38);
    v40.i32[3] = v39.i32[3];
LABEL_22:
    v39.f32[0] = 0.5 / v37;
    v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0);
    goto LABEL_23;
  }
  if (*(float *)v30.i32 < v33.f32[1] || *(float *)v30.i32 < v27.f32[2])
  {
    if (v33.f32[1] <= v27.f32[2])
    {
      v37 = sqrtf((float)((float)(v27.f32[2] + 1.0) - *(float *)v30.i32) - v33.f32[1]);
      *(float32x2_t *)v40.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v30, (int32x4_t)v33), *(float32x2_t *)v27.f32);
      v51 = (float32x2_t)__PAIR64__(v30.u32[1], LODWORD(v37));
      v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 0);
      *(float32x2_t *)v39.f32 = vsub_f32(*(float32x2_t *)v30.i8, v52);
      v52.f32[0] = v37;
      v52.i32[0] = vmul_f32(v51, v52).u32[0];
      v52.i32[1] = v39.i32[1];
      *(float32x2_t *)&v40.u32[2] = v52;
      goto LABEL_22;
    }
    v44 = sqrtf((float)((float)(v33.f32[1] + 1.0) - *(float *)v30.i32) - v27.f32[2]);
    *(int32x2_t *)v20.i8 = vdup_laneq_s32((int32x4_t)v33, 2);
    v42 = (int8x16_t)v20;
    *(float *)v42.i32 = v44;
    v42.i32[0] = vmul_f32(*(float32x2_t *)v42.i8, (float32x2_t)__PAIR64__(v27.u32[1], LODWORD(v44))).u32[0];
    v42.i32[1] = vadd_f32(*(float32x2_t *)&v20, *(float32x2_t *)&v27).i32[1];
    v43 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.i8, 1), v33);
    v49 = (int32x2_t)vsubq_f32(v27, (float32x4_t)vdupq_laneq_s32(v30, 2)).u64[0];
    v50 = (float32x4_t)vextq_s8(vextq_s8(v43, v43, 4uLL), v42, 0xCuLL);
    v50.i32[3] = v49.i32[0];
  }
  else
  {
    v44 = sqrtf((float)((float)(*(float *)v30.i32 + 1.0) - v33.f32[1]) - v27.f32[2]);
    v45 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v33.f32, 0);
    v46 = vadd_f32(*(float32x2_t *)v30.i8, v45);
    v45.f32[0] = v44;
    v50.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v30.u32[1], LODWORD(v44)), v45).u32[0];
    v50.i32[1] = v46.i32[1];
    v47 = (float32x2_t)vzip2q_s32(v30, (int32x4_t)v33).u64[0];
    LODWORD(v48) = vadd_f32(v47, *(float32x2_t *)v27.f32).u32[0];
    v49 = (int32x2_t)vsub_f32(v47, *(float32x2_t *)v27.f32);
    HIDWORD(v48) = v49.i32[1];
    v50.i64[1] = v48;
  }
  *(float *)v49.i32 = 0.5 / v44;
  v40 = (float32x4_t)vdupq_lane_s32(v49, 0);
LABEL_23:
  result = vmulq_f32(v40, v50);
  *a2 = result;
  return result;
}

double sub_1B186B90C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;
  simd_float4x4 v9;

  v9 = *(simd_float4x4 *)sub_1B1869AC8(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)&result = (unint64_t)__invert_f4(v9);
  return result;
}

uint64_t sub_1B186B928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v9 = *(_QWORD *)(a1 + 48);
  if (!v9)
    return sub_1B18223DC(a1 + 96, a2, a3, a4, a5, a6, a7, a8);
  v16 = sub_1B187B2A8(v9, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(_DWORD *)(a1 + 88);
  if (v17 == -1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Node should have a TT handle already"), v10, v11, v12, v13, v14, v15, (uint64_t)"node->_transformHandle != kCFXTransformHandleInvalid");
    v17 = *(_DWORD *)(a1 + 88);
  }
  return sub_1B18D1450(v16, v17, v10, v11, v12, v13, v14, v15);
}

double sub_1B186B9C0(__n128 *a1)
{
  double result;

  *(_QWORD *)&result = sub_1B1822B4C(a1 + 6).n128_u64[0];
  return result;
}

void sub_1B186B9C8(__n128 *a1, float32x4_t a2)
{
  __n128 *v3;
  uint32x4_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a1 + 6;
  v4 = (uint32x4_t)vceqq_f32((float32x4_t)sub_1B1822B4C(a1 + 6), a2);
  v4.i32[3] = v4.i32[2];
  if ((vminvq_u32(v4) & 0x80000000) == 0)
  {
    sub_1B1822B54(v3, (__n128)a2);
    sub_1B186BA34((uint64_t)a1, v5, v6, v7, v8, v9, v10, v11);
  }
}

uint64_t sub_1B186BA34(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[5];
  _OWORD v38[4];

  v8 = *(_QWORD *)(result + 48);
  if (v8)
  {
    v9 = result;
    v10 = sub_1B187B2A8(*(_QWORD *)(result + 48), a2, a3, a4, a5, a6, a7, a8);
    if (v10 && *(_DWORD *)(v9 + 88) != -1)
    {
      v18 = v10;
      *(double *)&v19 = sub_1B18697A0(v9, v11, v12, v13, v14, v15, v16, v17);
      v38[0] = v19;
      v38[1] = v20;
      v38[2] = v21;
      v38[3] = v22;
      sub_1B18D1138(v18, *(_DWORD *)(v9 + 88), v38, v23, v24, v25, v26, v27);
    }
    v28 = sub_1B187B1D0(v8, v11, v12, v13, v14, v15, v16, v17);
    if (v28)
      sub_1B19D9C08(v28, v9, v30, v31, v32, v33, v34, v35);
    v36 = sub_1B187B140(v8, v29, v30, v31, v32, v33, v34, v35);
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 0x40000000;
    v37[2] = sub_1B186F7E4;
    v37[3] = &unk_1E63D7A88;
    v37[4] = v36;
    return sub_1B186B018(v9, (uint64_t)v37);
  }
  return result;
}

double sub_1B186BAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_QWORD *)&result = sub_1B1822B64(a1 + 96, a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

void sub_1B186BB04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  float32x4_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = (float32x4_t *)(a1 + 96);
  v18 = (uint32x4_t)vceqq_f32((float32x4_t)sub_1B1822B64(a1 + 96, a2, a3, a4, a5, a6, a7, a8), a9);
  v18.i32[3] = v18.i32[2];
  if ((vminvq_u32(v18) & 0x80000000) == 0)
  {
    sub_1B1822B94(v10, (__n128)a9, v11, v12, v13, v14, v15, v16, v17);
    sub_1B186BA34(a1, v19, v20, v21, v22, v23, v24, v25);
  }
}

double sub_1B186BB70(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B182240C(a1 + 6, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B186BB78(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1822A68(a1 + 6, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B186BB80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1B1822AF8(a1 + 96, a2, a3, a4, a5, a6, a7, a8, a9);
  return sub_1B186BA34(a1, v10, v11, v12, v13, v14, v15, v16);
}

double sub_1B186BBA8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_QWORD *)&result = sub_1B182298C(a1 + 6, a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

uint64_t sub_1B186BBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1B1822A14(a1 + 96, a2, a3, a4, a5, a6, a7, a8, a9);
  return sub_1B186BA34(a1, v10, v11, v12, v13, v14, v15, v16);
}

void sub_1B186BBD8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = (uint64_t)&a1[6];
  *(double *)v18.i64 = sub_1B182240C(a1 + 6, a2, a3, a4, a5, a6, a7, a8);
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v18, (float32x4_t)a9)) & 0x80000000) == 0)
  {
    sub_1B182286C(v10, v11, v12, v13, v14, v15, v16, v17, a9);
    sub_1B186BA34((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
  }
}

uint64_t sub_1B186BC40(uint64_t a1)
{
  return a1 + 96;
}

uint64_t sub_1B186BC48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1B182212C(a1 + 96, a2);
  return sub_1B186BA34(a1, v3, v4, v5, v6, v7, v8, v9);
}

double sub_1B186BC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  *(_QWORD *)&result = sub_1B1822148((_BYTE *)(a1 + 96), a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

double sub_1B186BCB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  __int128 v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v9 = *(_QWORD *)(a1 + 192);
  if (v9)
    v10 = *(_OWORD *)(v9 + 48);
  else
    *(_QWORD *)&v10 = 0;
  return *(double *)&v10;
}

uint64_t sub_1B186BD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  __n128 *v10;
  uint64_t v11;
  __n128 v13;
  __int128 v14[4];

  if (!a1)
  {
    v13 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    a9 = v13;
  }
  v10 = *(__n128 **)(a1 + 192);
  if (v10)
  {
    a9.n128_u32[3] = v10[3].n128_u32[3];
    v10[3] = a9;
  }
  else
  {
    a9.n128_u32[3] = 1.0;
    v14[0] = xmmword_1B2244DB0;
    v14[1] = xmmword_1B2244DD0;
    v14[2] = xmmword_1B2244D90;
    v14[3] = (__int128)a9;
    sub_1B186A2DC(a1, v14, a3, a4, a5, a6, a7, a8);
  }
  v11 = *(_QWORD *)(a1 + 192);
  if (v11)
    *(_DWORD *)(v11 + 124) = 0;
  return sub_1B186BA34(a1, a2, a3, a4, a5, a6, a7, a8);
}

__n128 sub_1B186BDB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"m");
  v10 = sub_1B1869AC8(a1, a2, a3, a4, a5, a6, a7, a8);
  result = *(__n128 *)(v10 + 32);
  v12 = *(_OWORD *)(v10 + 48);
  v14 = *(_OWORD *)v10;
  v13 = *(_OWORD *)(v10 + 16);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v12;
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v13;
  return result;
}

__n128 sub_1B186BE18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  _OWORD v32[4];
  __n128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"m");
  if (*(_DWORD *)(a1 + 88) == -1)
  {
    v20 = sub_1B1869AC8(a1, a2, a3, a4, a5, a6, a7, a8);
    result = *(__n128 *)(v20 + 32);
    v21 = *(_OWORD *)(v20 + 48);
    v23 = *(_OWORD *)v20;
    v22 = *(_OWORD *)(v20 + 16);
    *(__n128 *)(a2 + 32) = result;
    *(_OWORD *)(a2 + 48) = v21;
    *(_OWORD *)a2 = v23;
    *(_OWORD *)(a2 + 16) = v22;
  }
  else
  {
    result.n128_f64[0] = sub_1B18697A0(a1, a2, a3, a4, a5, a6, a7, a8);
    v14 = *(_QWORD *)(a1 + 64);
    if (v14)
    {
      v30 = 0u;
      v31 = 0u;
      v28 = 0u;
      v29 = 0u;
      v24 = result;
      v25 = v11;
      v26 = v12;
      v27 = v13;
      sub_1B186BE18(v14, &v28);
      v15 = 0;
      v16 = v28;
      v17 = v29;
      v18 = v30;
      v19 = v31;
      v32[0] = v24;
      v32[1] = v25;
      v32[2] = v26;
      v32[3] = v27;
      v33 = 0u;
      v34 = 0u;
      v35 = 0u;
      v36 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v33 + v15 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v16, COERCE_FLOAT(v32[v15])), v17, *(float32x2_t *)&v32[v15], 1), v18, (float32x4_t)v32[v15], 2), v19, (float32x4_t)v32[v15], 3);
        ++v15;
      }
      while (v15 != 4);
      result = v33;
      v11 = v34;
      v12 = v35;
      v13 = v36;
    }
    *(__n128 *)a2 = result;
    *(_OWORD *)(a2 + 16) = v11;
    *(_OWORD *)(a2 + 32) = v12;
    *(_OWORD *)(a2 + 48) = v13;
  }
  return result;
}

uint64_t sub_1B186BF28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD v12[6];
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"root");
    if (a2)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"name");
    goto LABEL_3;
  }
  if (!a2)
    goto LABEL_5;
LABEL_3:
  v13 = 0;
  v14 = &v13;
  v15 = 0x2000000000;
  v16 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = sub_1B186C004;
  v12[3] = &unk_1E63D79B8;
  v12[4] = &v13;
  v12[5] = a2;
  sub_1B186B018(a1, (uint64_t)v12);
  v10 = v14[3];
  _Block_object_dispose(&v13, 8);
  return v10;
}

uint64_t sub_1B186C004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1B186B0BC(a2, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    if (CFEqual((CFTypeRef)result, *(CFTypeRef *)(a1 + 40)))
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
      return 2;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFMutableArrayRef sub_1B186C054(uint64_t a1, __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  CFMutableArrayRef Mutable;
  CFMutableArrayRef v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD v16[6];
  uint64_t v17;
  _QWORD v18[6];
  _QWORD v19[6];

  v8 = a3;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"root");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"attributeName");
LABEL_3:
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v12 = Mutable;
  if (CFSTR("model") == a2)
  {
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = sub_1B186C1D4;
    v19[3] = &unk_1E63D79D8;
    v19[4] = Mutable;
    v13 = v19;
LABEL_10:
    v14 = v13 + 5;
    goto LABEL_11;
  }
  if (CFSTR("kDeformerStackKey") == a2)
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = sub_1B186C244;
    v18[3] = &unk_1E63D79F8;
    v18[4] = Mutable;
    v13 = v18;
    goto LABEL_10;
  }
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = sub_1B186C2B4;
  v16[3] = &unk_1E63D7A18;
  v16[4] = a2;
  v16[5] = Mutable;
  v13 = v16;
  v14 = &v17;
LABEL_11:
  *(_BYTE *)v14 = v8;
  sub_1B186B018(a1, (uint64_t)v13);
  return v12;
}

uint64_t sub_1B186C1D4(uint64_t a1, _QWORD *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!value)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (value[30] && (CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), value), *(_BYTE *)(a1 + 40)))
    return 2;
  else
    return 0;
}

uint64_t sub_1B186C244(uint64_t a1, _QWORD *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!value)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (value[31] && (CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 32), value), *(_BYTE *)(a1 + 40)))
    return 2;
  else
    return 0;
}

uint64_t sub_1B186C2B4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1B193E9C0((uint64_t)a2, *(void **)(a1 + 32), a3, a4, a5, a6, a7, a8)
    && (CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), a2), *(_BYTE *)(a1 + 48)))
  {
    return 2;
  }
  else
  {
    return 0;
  }
}

__CFArray *sub_1B186C304(_QWORD *a1, uint64_t a2, int a3)
{
  __CFArray *Mutable;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  sub_1B186C368(a1, a2, a3, Mutable);
  return Mutable;
}

BOOL sub_1B186C368(_QWORD *a1, uint64_t a2, int a3, __CFArray *a4)
{
  int v8;
  BOOL v9;
  uint64_t v10;
  BOOL v11;
  _QWORD v13[2];
  uint64_t (*v14)(uint64_t, uint64_t, char *);
  void *v15;
  uint64_t v16;
  __CFArray *v17;
  char v18;
  unsigned __int8 v19;
  char v20;

  v19 = 1;
  if ((*(unsigned int (**)(uint64_t, _QWORD *, unsigned __int8 *))(a2 + 16))(a2, a1, &v19))
    CFArrayAppendValue(a4, a1);
  v8 = v19;
  if (v19)
    v9 = a3 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v14 = sub_1B186F814;
    v15 = &unk_1E63D7AB0;
    v18 = a3;
    v16 = a2;
    v17 = a4;
    v20 = 0;
    v10 = a1[9];
    if (v10)
    {
      do
      {
        v14((uint64_t)v13, v10, &v20);
        v10 = *(_QWORD *)(v10 + 80);
        if (v20)
          v11 = 1;
        else
          v11 = v10 == 0;
      }
      while (!v11);
      v8 = v19;
    }
    else
    {
      v8 = 1;
    }
  }
  return v8 != 0;
}

CFStringRef sub_1B186C458(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return sub_1B193E5B0(a1, theString, a3, a4, a5, a6, a7, a8);
}

void sub_1B186C4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v9 = *(_DWORD *)(a1 + 220);
  if ((v9 & 0x20) != 0)
  {
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a1 + 204);
    if (*(_QWORD *)(a1 + 64))
    {
      *(float *)(a1 + 256) = sub_1B186C4A8() * *(float *)(a1 + 256);
      v9 = *(_DWORD *)(a1 + 220);
    }
    *(_DWORD *)(a1 + 220) = v9 & 0xFFFFFFDF;
  }
}

void sub_1B186C528(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v11;
  _QWORD v12[5];
  char v13;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = *(_DWORD *)(a1 + 220);
  if (*(_QWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 220) = v10 & 0xFFFFFFDF;
    v11 = *(_QWORD *)(a1 + 48);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = sub_1B186F850;
    v12[3] = &unk_1E63D7AD0;
    v13 = a2;
    v12[4] = v11;
    sub_1B186B018(a1, (uint64_t)v12);
  }
  else
  {
    *(_DWORD *)(a1 + 220) = v10 | 0x20;
  }
}

uint64_t sub_1B186C5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD v18[5];

  result = *(_QWORD *)(a1 + 48);
  if (result)
  {
    v10 = a2;
    result = sub_1B187B260(result, a2, a3, a4, a5, a6, a7, a8);
    if (result)
    {
      if (v10)
      {
        v18[0] = MEMORY[0x1E0C809B0];
        v18[1] = 0x40000000;
        v18[2] = sub_1B186F8E8;
        v18[3] = &unk_1E63D7B10;
        v18[4] = result;
        return sub_1B186B018(a1, (uint64_t)v18);
      }
      else
      {
        v17 = *(_DWORD *)(a1 + 216);
        if (v17 != -1)
          return sub_1B197D060(result, v17, v11, v12, v13, v14, v15, v16);
      }
    }
  }
  return result;
}

BOOL sub_1B186C66C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL8 result;

  v8 = a1;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (*(_BYTE *)(v8 + 200))
    return 1;
  do
  {
    v8 = *(_QWORD *)(v8 + 64);
    result = v8 != 0;
  }
  while (v8 && !*(_BYTE *)(v8 + 200));
  return result;
}

BOOL sub_1B186C6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BOOL8 result;

  v8 = a1;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (*(_BYTE *)(v8 + 200) || *(float *)(v8 + 204) <= 0.0)
    return 1;
  do
  {
    v8 = *(_QWORD *)(v8 + 64);
    result = v8 != 0;
  }
  while (v8 && !*(_BYTE *)(v8 + 200) && *(float *)(v8 + 204) > 0.0);
  return result;
}

BOOL sub_1B186C75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(_BYTE *)(a1 + 200) || *(float *)(a1 + 204) <= 0.0;
}

uint64_t sub_1B186C7BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[6];
  char v18;

  v8 = *(_QWORD *)(result + 48);
  if (v8)
  {
    v9 = a2;
    v10 = result;
    if (sub_1B186989C(result, a2, a3, a4, a5, a6, a7, a8))
    {
      if (*(_DWORD *)(v10 + 216) == -1)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Node should already be in CullingSystem"), v11, v12, v13, v14, v15, v16, (uint64_t)"!CFXNodeShouldBePutInCullingSystem(root) || (root->_cullingHandle != kCFXCullingHandleInvalid)");
    }
    sub_1B186C5D4(v10, 1, v11, v12, v13, v14, v15, v16);
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 0x40000000;
    v17[2] = sub_1B186F910;
    v17[3] = &unk_1E63D7B30;
    v18 = v9;
    v17[4] = v10;
    v17[5] = v8;
    return sub_1B186B018(v10, (uint64_t)v17);
  }
  return result;
}

BOOL sub_1B186C870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = a1;
  if (a1)
  {
    if (a2)
      goto LABEL_6;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a2)
      goto LABEL_6;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"ancestor");
  do
LABEL_6:
    v9 = *(_QWORD *)(v9 + 64);
  while (v9 != a2 && v9 != 0);
  return v9 != 0;
}

_QWORD *sub_1B186C8F8(CFArrayRef theArray, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v10;
  _QWORD *ValueAtIndex;
  CFIndex i;
  _QWORD *v13;
  _QWORD *v14;

  if (!theArray)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"arrayOfNodes");
  Count = CFArrayGetCount(theArray);
  if (!Count)
    return 0;
  v10 = Count;
  ValueAtIndex = CFArrayGetValueAtIndex(theArray, 0);
  if (v10 >= 2)
  {
    for (i = 1; i != v10; ++i)
    {
      v13 = CFArrayGetValueAtIndex(theArray, i);
      if (!ValueAtIndex)
        break;
      while (!v13)
      {
LABEL_11:
        ValueAtIndex = (_QWORD *)ValueAtIndex[8];
        if (!ValueAtIndex)
          return ValueAtIndex;
      }
      v14 = v13;
      while (v14 != ValueAtIndex)
      {
        v14 = (_QWORD *)v14[8];
        if (!v14)
          goto LABEL_11;
      }
    }
  }
  return ValueAtIndex;
}

const __CFDictionary *sub_1B186C9C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *result;
  uint64_t valuePtr;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  result = sub_1B193E800(a1, CFSTR("kRenderingPriorityKey"), a3, a4, a5, a6, a7, a8);
  if (result)
  {
    valuePtr = 0;
    CFNumberGetValue(result, kCFNumberLongType, &valuePtr);
    return (const __CFDictionary *)valuePtr;
  }
  return result;
}

void sub_1B186CA30(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const __CFDictionary *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFDictionary *valuePtr;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (sub_1B186C9C0(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8) != a2)
  {
    if (a2)
    {
      valuePtr = a2;
      v15 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
      sub_1B193E9B8((CFTypeRef *)a1, CFSTR("kRenderingPriorityKey"), v15, v16, v17, v18, v19, v20);
      CFRelease(v15);
    }
    else
    {
      sub_1B193E9B8((CFTypeRef *)a1, CFSTR("kRenderingPriorityKey"), 0, v10, v11, v12, v13, v14);
    }
    sub_1B187A8A4(*(_QWORD *)(a1 + 48), 5, (const void *)a1, 0, v21, v22, v23, v24);
  }
}

uint64_t sub_1B186CAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return (*(unsigned __int8 *)(a1 + 222) >> 4) & 1;
}

void sub_1B186CB40(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = *(_DWORD *)(a1 + 220);
  if (((((v10 & 0x100000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v11 = 0x100000;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 220) = v10 & 0xFFEFFFFF | v11;
    sub_1B187A8A4(*(_QWORD *)(a1 + 48), 5, (const void *)a1, 0, a5, a6, a7, a8);
    sub_1B186C5D4(a1, 0, v12, v13, v14, v15, v16, v17);
  }
}

void sub_1B186CBE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = *(_DWORD *)(a1 + 220);
  if (((((v10 & 0x2000000) == 0) ^ a2) & 1) == 0)
  {
    if (a2)
      v11 = 0x2000000;
    else
      v11 = 0;
    *(_DWORD *)(a1 + 220) = v10 & 0xFDFFFFFF | v11;
    v12 = *(_QWORD *)(a1 + 48);
    sub_1B187A8A4(v12, 8, (const void *)a1, 0, a5, a6, a7, a8);
    sub_1B187A8A4(v12, 5, (const void *)a1, 0, v13, v14, v15, v16);
    sub_1B186C5D4(a1, 0, v17, v18, v19, v20, v21, v22);
  }
}

uint64_t sub_1B186CC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return *(_QWORD *)(a1 + 208);
}

uint64_t sub_1B186CCE0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  a1[26] = a2;
  sub_1B187A8A4(a1[6], 5, a1, 0, a5, a6, a7, a8);
  return sub_1B186C5D4((uint64_t)a1, 0, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_1B186CD48(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 220) >> 3) & 1;
}

uint64_t sub_1B186CD54(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 8;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFFF7 | v2;
  return result;
}

uint64_t sub_1B186CD74(uint64_t a1)
{
  return *(_BYTE *)(a1 + 221) & 1;
}

uint64_t sub_1B186CD80(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 256;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFFFEFF | v2;
  return result;
}

uint64_t sub_1B186CDA0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 222) & 1;
}

uint64_t sub_1B186CDAC(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x10000;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFFFEFFFF | v2;
  return result;
}

CFTypeRef sub_1B186CDCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  result = *(CFTypeRef *)(a1 + 240);
  if (result)
    return sub_1B17A1ACC((uint64_t)result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

uint64_t sub_1B186CDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return (*(unsigned __int8 *)(a1 + 221) >> 1) & 1;
}

void sub_1B186CE28(float32x4_t *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v10 = (const void *)a1[3].i64[0];
  if (v10)
  {
    v11 = sub_1B1868FE8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    if (v11)
    {
      sub_1B17C5DD0(v11, a1[3].i64[0], a3, a4, a5, a6, a7, a8);
      v19 = sub_1B187B188((uint64_t)v10, v12, v13, v14, v15, v16, v17, v18);
      sub_1B17955E8(v19, a1);
      sub_1B199B938((uint64_t)v10, (uint64_t)a1, v20, v21, v22, v23, v24, v25, v78);
    }
  }
  v26 = sub_1B17C61FC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8) != 0;
  sub_1B193E88C((CFTypeRef *)a1, CFSTR("kLightKey"), a2, v26, v27, v28, v29, v30);
  if (a2)
  {
    v31 = a1[3].i64[0];
    if (v31)
      sub_1B17C5FC0((uint64_t *)a2, v31, v32, v33, v34, v35, v36, v37);
  }
  a1[13].i32[3] = a1[13].i32[3] & 0xFFFFFDFF | ((a2 != 0) << 9);
  if (a2 && v10)
  {
    v38 = sub_1B187B188((uint64_t)v10, v31, v32, v33, v34, v35, v36, v37);
    sub_1B1795378(v38, a1, v39, v40, v41, v42, v43, v44, v78);
    sub_1B1795820(v38, a2, v45, v46, v47, v48, v49, v50);
    sub_1B199B278((uint64_t)v10, (uint64_t)a1, v51, v52, v53, v54, v55, v56, v79);
  }
  else if (!a2)
  {
    return;
  }
  if (sub_1B186064C((uint64_t)a2, v31, v32, v33, v34, v35, v36, v37) == 5
    && sub_1B1860E14((uint64_t)a2, v57, v58, v59, v60, v61, v62, v63))
  {
    sub_1B18690BC(a1, v64, v65, v66, v67, v68, v69, v70);
  }
  if (sub_1B185F484((uint64_t)a2))
  {
    if (sub_1B185F4D4((uint64_t)a2, v71, v72, v73, v74, v75, v76, v77))
      sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), v10, 0, 1u);
  }
}

const __CFDictionary *sub_1B186CFA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 221) & 4) != 0)
    return sub_1B193E800(a1, CFSTR("kCameraKey"), a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

uint64_t sub_1B186D018(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 221) >> 2) & 1;
}

void sub_1B186D024(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFDictionary *v17;
  _BOOL8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (sub_1B17C61FC(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v17 = sub_1B186CFA8(a1, v10, v11, v12, v13, v14, v15, v16);
    if (v17)
      sub_1B17C5DD0(v17, *(_QWORD *)(a1 + 48), v11, v12, v13, v14, v15, v16);
  }
  v18 = sub_1B17C61FC(a1, v10, v11, v12, v13, v14, v15, v16) != 0;
  sub_1B193E88C((CFTypeRef *)a1, CFSTR("kCameraKey"), a2, v18, v19, v20, v21, v22);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFFFBFF | ((a2 != 0) << 10);
  if (a2)
  {
    v29 = *(_QWORD *)(a1 + 48);
    if (v29)
      sub_1B17C5FC0((uint64_t *)a2, v29, v23, v24, v25, v26, v27, v28);
  }
}

uint64_t sub_1B186D0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 248);
  if (result)
    return sub_1B1998C64(result, a2, a3, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B186D108(_QWORD *a1, const __CFArray *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;

  v4 = (_QWORD *)a1[31];
  if (a2 && !v4)
  {
    v4 = (_QWORD *)sub_1B1998670((uint64_t)a1);
    a1[31] = v4;
  }
  if (v4)
  {
    sub_1B1998CAC((uint64_t)v4, a2);
    if (sub_1B199883C(v4, v5, v6, v7, v8, v9, v10, v11))
    {
      v12 = (const void *)a1[31];
      if (v12)
      {
        CFRelease(v12);
        a1[31] = 0;
      }
    }
    if (a1[6])
      sub_1B194F874(CFSTR("kCFXNotificationEntityAttributeDidChange"), a1, (const __CFDictionary *)CFSTR("kDeformerStackKey"), 1u);
  }
}

const __CFDictionary *sub_1B186D1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 221) & 8) != 0)
    return sub_1B193E800(a1, CFSTR("kLightmapInfoKey"), a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

const __CFDictionary *sub_1B186D220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 222) & 4) != 0)
    return sub_1B193E800(a1, CFSTR("kAudioPlayer"), a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

CFIndex sub_1B186D290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 222) & 4) == 0)
    return 0;
  v10 = sub_1B193E800(a1, CFSTR("kAudioPlayer"), a3, a4, a5, a6, a7, a8);
  return CFArrayGetCount(v10);
}

uint64_t sub_1B186D304(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"player");
LABEL_3:
  v10 = sub_1B186D290(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  sub_1B186D3AC(a1, a2, v10, v11, v12, v13, v14, v15);
  result = sub_1B186C66C(a1, v16, v17, v18, v19, v20, v21, v22);
  if ((result & 1) == 0)
    return sub_1B1949590(a2, v24, v25, v26);
  return result;
}

uint64_t sub_1B186D3AC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *Mutable;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"player");
LABEL_3:
  Mutable = sub_1B193E800(a1, CFSTR("kAudioPlayer"), a3, a4, a5, a6, a7, a8);
  if (!Mutable)
  {
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    sub_1B193E9B8((CFTypeRef *)a1, CFSTR("kAudioPlayer"), Mutable, v12, v13, v14, v15, v16);
    CFRelease(Mutable);
  }
  CFArrayInsertValueAtIndex(Mutable, a3, a2);
  *(_DWORD *)(a1 + 220) |= 0x40000u;
  v24 = sub_1B1869AC8(a1, v17, v18, v19, v20, v21, v22, v23);
  sub_1B1949530(a2, v24, v25, v26);
  return sub_1B1949608(a2, v27, v28, v29);
}

void sub_1B186D4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v9;
  CFIndex Count;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFIndex v16;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v9 = sub_1B193E800(a1, CFSTR("kAudioPlayer"), a3, a4, a5, a6, a7, a8);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v16 = Count;
      do
      {
        sub_1B186D55C(a1, 0, 1, v11, v12, v13, v14, v15);
        --v16;
      }
      while (v16);
    }
    sub_1B193E9B8((CFTypeRef *)a1, CFSTR("kAudioPlayer"), 0, v11, v12, v13, v14, v15);
  }
  *(_DWORD *)(a1 + 220) &= ~0x40000u;
}

void sub_1B186D55C(uint64_t a1, CFIndex a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const __CFArray *v11;
  __CFArray *v12;
  void *ValueAtIndex;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = sub_1B193E800(a1, CFSTR("kAudioPlayer"), a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    v12 = v11;
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(v11, a2);
    v14 = ValueAtIndex;
    if (ValueAtIndex)
      CFRetain(ValueAtIndex);
    CFArrayRemoveValueAtIndex(v12, a2);
    if (CFArrayGetCount(v12))
      *(_DWORD *)(a1 + 220) &= ~0x40000u;
    if (v8)
      sub_1B1949658(v14, v15, v16, v17);
    sub_1B18FD8D4((uint64_t)v14);
    if (v14)
      CFRelease(v14);
  }
}

void sub_1B186D644(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v11;
  const __CFArray *v12;
  CFIndex FirstIndexOfValue;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFRange v19;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"ps");
LABEL_3:
  v11 = sub_1B193E800(a1, CFSTR("kAudioPlayer"), a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    v12 = v11;
    v19.length = CFArrayGetCount(v11);
    v19.location = 0;
    FirstIndexOfValue = CFArrayGetFirstIndexOfValue(v12, v19, a2);
    if (FirstIndexOfValue != -1)
      sub_1B186D55C(a1, FirstIndexOfValue, a3, v14, v15, v16, v17, v18);
  }
}

void sub_1B186D71C(uint64_t a1, void *cf, CFIndex a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (a1)
  {
    if (cf)
    {
LABEL_3:
      CFRetain(cf);
      sub_1B186D55C(a1, a3, 1, v11, v12, v13, v14, v15);
      sub_1B186D3AC(a1, cf, a3, v16, v17, v18, v19, v20);
      v28 = sub_1B1869AC8(a1, v21, v22, v23, v24, v25, v26, v27);
      sub_1B1949530(cf, v28, v29, v30);
      CFRelease(cf);
      return;
    }
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (cf)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"ps");
  sub_1B186D55C(a1, a3, 1, v31, v32, v33, v34, v35);
  sub_1B186D3AC(a1, 0, a3, v36, v37, v38, v39, v40);
  v48 = sub_1B1869AC8(a1, v41, v42, v43, v44, v45, v46, v47);
  sub_1B1949530(0, v48, v49, v50);
}

void sub_1B186D818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  uint64_t v17;
  CFIndex Count;
  CFIndex v19;
  CFIndex i;
  void *ValueAtIndex;
  uint64_t v22;
  uint64_t v23;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 222) & 4) != 0)
  {
    v16 = sub_1B193E800(a1, CFSTR("kAudioPlayer"), a3, a4, a5, a6, a7, a8);
    if (!v16)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"array");
    v17 = sub_1B1869AC8(a1, v9, v10, v11, v12, v13, v14, v15);
    Count = CFArrayGetCount(v16);
    if (Count >= 1)
    {
      v19 = Count;
      for (i = 0; i != v19; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v16, i);
        sub_1B1949530(ValueAtIndex, v17, v22, v23);
      }
    }
  }
}

const __CFDictionary *sub_1B186D8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 221) & 0x80) != 0)
    return sub_1B193E800(a1, CFSTR("kConstraints"), a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

void sub_1B186D958(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const __CFArray *v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex i;
  void *ValueAtIndex;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFIndex v49;
  CFIndex v50;
  CFIndex j;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (sub_1B17C61FC(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v17 = sub_1B186D8E8(a1, v10, v11, v12, v13, v14, v15, v16);
    if (v17)
    {
      v18 = v17;
      Count = CFArrayGetCount(v17);
      if (Count >= 1)
      {
        v20 = Count;
        for (i = 0; i != v20; ++i)
        {
          ValueAtIndex = (void *)CFArrayGetValueAtIndex(v18, i);
          v30 = sub_1B17C61FC(a1, v23, v24, v25, v26, v27, v28, v29);
          sub_1B17C5DD0(ValueAtIndex, v30, v31, v32, v33, v34, v35, v36);
        }
      }
    }
  }
  v37 = sub_1B17C61FC(a1, v10, v11, v12, v13, v14, v15, v16) != 0;
  sub_1B193E88C((CFTypeRef *)a1, CFSTR("kConstraints"), a2, v37, v38, v39, v40, v41);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFF7FFF | ((a2 != 0) << 15);
  v48 = *(_QWORD *)(a1 + 48);
  if (v48)
  {
    sub_1B1879954(*(_QWORD *)(a1 + 48), (_QWORD *)a1, v42, v43, v44, v45, v46, v47);
    if (a2)
    {
      v49 = CFArrayGetCount(a2);
      if (v49 >= 1)
      {
        v50 = v49;
        for (j = 0; j != v50; ++j)
        {
          v52 = (uint64_t *)CFArrayGetValueAtIndex(a2, j);
          sub_1B17C5FC0(v52, v48, v53, v54, v55, v56, v57, v58);
        }
      }
    }
  }
}

void sub_1B186DAA0(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFFFFFBF | ((a2 != 0) << 6);
  sub_1B193E9B8((CFTypeRef *)a1, CFSTR("kPhysicsBodyKey"), a2, a4, a5, a6, a7, a8);
}

const __CFDictionary *sub_1B186DB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return sub_1B193E800(a1, CFSTR("kPhysicsBodyKey"), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B186DB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return (*(unsigned __int8 *)(a1 + 220) >> 6) & 1;
}

uint64_t sub_1B186DBB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  return (*(unsigned __int8 *)(a1 + 222) >> 3) & 1;
}

void sub_1B186DBFC(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v17 = sub_1B17C61FC(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v17)
  {
    v18 = sub_1B186DD10(a1, v10, v11, v12, v13, v14, v15, v16);
    if (v18)
    {
      v19 = v18;
      sub_1B1879E94(v17, (void *)a1, v11, v12, v13, v14, v15, v16);
      sub_1B198ABCC((uint64_t)v19, 0, v20, v21, v22, v23, v24, v25);
      sub_1B17C5DD0(v19, *(_QWORD *)(a1 + 48), v26, v27, v28, v29, v30, v31);
    }
  }
  v32 = sub_1B17C61FC(a1, v10, v11, v12, v13, v14, v15, v16) != 0;
  sub_1B193E88C((CFTypeRef *)a1, CFSTR("kForceFieldKey"), a2, v32, v33, v34, v35, v36);
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFFF7FFFF | ((a2 != 0) << 19);
  if (a2)
  {
    sub_1B198ABCC((uint64_t)a2, a1, v37, v38, v39, v40, v41, v42);
    v49 = *(_QWORD *)(a1 + 48);
    if (v49)
      sub_1B17C5FC0((uint64_t *)a2, v49, v43, v44, v45, v46, v47, v48);
    if (v17)
      sub_1B1879E1C(v17, (void *)a1, v43, v44, v45, v46, v47, v48);
  }
}

const __CFDictionary *sub_1B186DD10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 222) & 8) != 0)
    return sub_1B193E800(a1, CFSTR("kForceFieldKey"), a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

const __CFDictionary *sub_1B186DD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_1B1869DF4(a1, CFSTR("kParticleEmitter"), a3, a4, a5, a6, a7, a8);
  if (!result)
    return sub_1B1869DF4(a1, CFSTR("kParticleCollider"), v10, v11, v12, v13, v14, v15);
  return result;
}

void sub_1B186DDCC(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1869E54(a1, a2, CFSTR("kParticleEmitter"), a4, a5, a6, a7, a8);
}

const __CFDictionary *sub_1B186DDDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1869DF4(a1, CFSTR("kParticleCollider"), a3, a4, a5, a6, a7, a8);
}

void sub_1B186DDEC(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1869E54(a1, a2, CFSTR("kParticleCollider"), a4, a5, a6, a7, a8);
}

const __CFDictionary *sub_1B186DDFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1869DF4(a1, CFSTR("kBehaviorGraph"), a3, a4, a5, a6, a7, a8);
}

void sub_1B186DE0C(uint64_t a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1869E54(a1, a2, CFSTR("kBehaviorGraph"), a4, a5, a6, a7, a8);
}

void sub_1B186DE1C(uint64_t a1, CFArrayRef theArray, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  if (a1)
  {
    if (theArray)
    {
LABEL_3:
      v10 = (CFArrayGetCount(theArray) > 0) << 13;
      goto LABEL_6;
    }
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
    if (theArray)
      goto LABEL_3;
  }
  v10 = 0;
LABEL_6:
  v11 = *(_DWORD *)(a1 + 220);
  *(_DWORD *)(a1 + 220) = v11 & 0xFFFFDFFF | v10;
  sub_1B186DEF4(a1, v10 != 0, (v11 >> 21) & 7, a4, a5, a6, a7, a8);
  v18 = *(_QWORD *)(a1 + 48);
  if (v18)
  {
    sub_1B1879D18(*(CFTypeRef **)(a1 + 48), (const void *)a1, v12, v13, v14, v15, v16, v17);
    sub_1B1868DB4(a1, v18, v19, v20, v21, v22, v23, v24);
    v32 = sub_1B187B140(v18, v25, v26, v27, v28, v29, v30, v31);
    sub_1B1820054(v32, a1, v33, v34, v35, v36, v37, v38);
    sub_1B186C7BC(a1, 1, v39, v40, v41, v42, v43, v44);
  }
}

void sub_1B186DEF4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  int v12;
  uint64_t i;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = *(_DWORD *)(a1 + 220);
  v12 = (v11 >> 6) & 0x80;
  if (a2)
    v12 = 128;
  *(_DWORD *)(a1 + 220) = v12 & 0xFF1FFFFF | ((a3 & 7) << 21) | v11 & 0xFF1FFF7F;
  for (i = *(_QWORD *)(a1 + 72); i; i = *(_QWORD *)(i + 80))
    sub_1B186DEF4(i, (*(_DWORD *)(a1 + 220) >> 7) & 1, a3);
}

const __CFDictionary *sub_1B186DF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if ((*(_BYTE *)(a1 + 221) & 0x20) != 0)
    return sub_1B193E800(a1, CFSTR("kFilterKey"), a3, a4, a5, a6, a7, a8);
  else
    return 0;
}

void sub_1B186E00C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;

  v8 = a2;
  if (a2 >= 4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. layer index out of bound"), a3, a4, a5, a6, a7, a8, (uint64_t)"layer < CFX_MAX_LAYERS");
  *(_DWORD *)(a1 + 220) = *(_DWORD *)(a1 + 220) & 0xFF1FFFFF | ((v8 & 7) << 21);
}

uint64_t sub_1B186E064(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 220) >> 21) & 7;
}

uint64_t sub_1B186E070(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x4000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xFBFFFFFF | v2;
  return result;
}

uint64_t sub_1B186E090(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 223) >> 2) & 1;
}

uint64_t sub_1B186E09C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 223) >> 3) & 1;
}

uint64_t sub_1B186E0A8(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;

  if (!a1)
    return 0;
  do
  {
    v1 = *(_DWORD *)(a1 + 220);
    v2 = (v1 >> 27) & 1;
    if ((v1 & 0x8000000) != 0)
      break;
    a1 = *(_QWORD *)(a1 + 64);
  }
  while (a1);
  return v2;
}

uint64_t sub_1B186E0D0(uint64_t result, int a2)
{
  int v2;

  if (a2)
    v2 = 0x8000000;
  else
    v2 = 0;
  *(_DWORD *)(result + 220) = *(_DWORD *)(result + 220) & 0xF7FFFFFF | v2;
  return result;
}

id sub_1B186E0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  void *v25;
  uint64_t v27;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v9 = *(_QWORD *)(a1 + 240);
  if (v9)
    sub_1B17A1FA4(v9, (const void *)a1, a3, a4, a5, a6, a7, a8);
  sub_1B194F874(CFSTR("kCFXNotificationNodeWillDie"), (const void *)a1, 0, 1u);
  v17 = *(void **)(a1 + 192);
  if (v17)
    free(v17);
  v18 = *(_DWORD *)(a1 + 220);
  if ((v18 & 0x40000) != 0)
  {
    sub_1B186D4B0(a1, v10, v11, v12, v13, v14, v15, v16);
    v18 = *(_DWORD *)(a1 + 220);
  }
  if ((v18 & 0x80000) != 0)
    sub_1B186DBFC(a1, 0, v11, v12, v13, v14, v15, v16);
  v19 = *(_QWORD **)(a1 + 72);
  if (v19)
  {
    do
    {
      v20 = v19[8];
      if (v20 == a1)
      {
        v19[8] = 0;
      }
      else if (v20)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: inconsistency in world graph found in CFXNode finalize"), v11, v12, v13, v14, v15, v16, v27);
      }
      v21 = (_QWORD *)v19[10];
      v19[10] = 0;
      CFRelease(v19);
      v19 = v21;
    }
    while (v21);
  }
  v22 = *(const void **)(a1 + 80);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(a1 + 80) = 0;
  }
  v23 = *(const void **)(a1 + 240);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 240) = 0;
  }
  v24 = *(const void **)(a1 + 248);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 248) = 0;
  }
  v25 = *(void **)(a1 + 232);
  if (v25)
    free(v25);
  return sub_1B193E38C(a1, v10, v11, v12, v13, v14, v15, v16);
}

__CFString *sub_1B186E22C(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const __CFDictionary *v25;
  const __CFDictionary *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v10 = sub_1B186B0BC(a1, v3, v4, v5, v6, v7, v8, v9);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXNode:%p \"%@\"\n"), a1, v10);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v11, v12, v13, v14, v15, v16, (uint64_t)"node");
  CFStringAppendFormat(Mutable, 0, CFSTR("  geometry: %@\n"), *(_QWORD *)(a1 + 240));
  v24 = *(_DWORD *)(a1 + 220);
  if ((v24 & 0x200) != 0)
  {
    v25 = sub_1B1868FE8(a1, v17, v18, v19, v20, v21, v22, v23);
    CFStringAppendFormat(Mutable, 0, CFSTR("  light: %@\n"), v25);
    v24 = *(_DWORD *)(a1 + 220);
  }
  if ((v24 & 0x400) != 0)
  {
    v26 = sub_1B186CFA8(a1, v17, v18, v19, v20, v21, v22, v23);
    CFStringAppendFormat(Mutable, 0, CFSTR("  camera: %@\n"), v26);
  }
  v27 = *(_QWORD *)(a1 + 248);
  if (v27)
  {
    v28 = sub_1B1998B4C(v27, v17, v18, v19, v20, v21, v22, v23);
    if (v28)
      CFStringAppendFormat(Mutable, 0, CFSTR("  skinner: %@\n"), v28);
  }
  v29 = sub_1B186ACAC(a1, v17, v18, v19, v20, v21, v22, v23);
  if (v29)
    CFStringAppendFormat(Mutable, 0, CFSTR("  morpher: %@\n"), v29);
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

__CFArray *sub_1B186E374(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFNumberRef v24;
  CFNumberRef v25;
  CFNumberRef v26;
  __CFDictionary *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  __CFDictionary *v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  const CFDictionaryValueCallBacks *v42;
  __CFDictionary *v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  const CFDictionaryKeyCallBacks *v47;
  __CFDictionary *v48;
  CFNumberRef v49;
  CFNumberRef v50;
  CFNumberRef v51;
  __CFDictionary *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  __CFDictionary *v56;
  CFNumberRef v57;
  CFNumberRef v58;
  CFNumberRef v59;
  __CFDictionary *v60;
  CFNumberRef v61;
  CFNumberRef v62;
  CFNumberRef v63;
  __CFDictionary *v64;
  CFNumberRef v65;
  CFNumberRef v66;
  CFNumberRef v67;
  __CFDictionary *v68;
  CFNumberRef v69;
  CFNumberRef v70;
  CFNumberRef v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __CFDictionary *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  CFNumberRef v94;
  CFNumberRef v95;
  CFNumberRef v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  __CFDictionary *v105;
  uint64_t v106;
  CFNumberRef v107;
  CFNumberRef v108;
  CFNumberRef v109;
  uint64_t v111;
  uint64_t valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x500000001;
  v111 = sub_1B193E634(a1, v6, v7, v8, v9, v10, v11, v12);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("id"));
  CFDictionarySetValue(v5, CFSTR("type"), v13);
  CFDictionarySetValue(v5, CFSTR("address"), v15);
  CFDictionarySetValue(v5, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v14);
  CFRelease(v5);
  CFRelease(v15);
  CFRelease(v13);
  v16 = CFDictionaryCreateMutable(0, 4, v3, v4);
  valuePtr = 0x500000001;
  v111 = sub_1B193E568(a1, v17, v18, v19, v20, v21, v22, v23);
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v26 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v16, CFSTR("name"), CFSTR("name"));
  CFDictionarySetValue(v16, CFSTR("type"), v24);
  CFDictionarySetValue(v16, CFSTR("address"), v26);
  CFDictionarySetValue(v16, CFSTR("semantic"), v25);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v25);
  CFRelease(v16);
  CFRelease(v26);
  CFRelease(v24);
  v27 = CFDictionaryCreateMutable(0, 4, v3, v4);
  valuePtr = 0x500000001;
  v111 = sub_1B193E7B8(a1, v28, v29, v30, v31, v32, v33, v34);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v37 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v27, CFSTR("name"), CFSTR("attributes"));
  CFDictionarySetValue(v27, CFSTR("type"), v35);
  CFDictionarySetValue(v27, CFSTR("address"), v37);
  CFDictionarySetValue(v27, CFSTR("semantic"), v36);
  CFArrayAppendValue(Mutable, v27);
  CFRelease(v36);
  CFRelease(v27);
  CFRelease(v37);
  CFRelease(v35);
  v38 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0xA00000000;
  v111 = a1 + 96;
  v39 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v40 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v41 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v38, CFSTR("name"), CFSTR("transforms"));
  CFDictionarySetValue(v38, CFSTR("type"), v39);
  CFDictionarySetValue(v38, CFSTR("address"), v41);
  CFDictionarySetValue(v38, CFSTR("semantic"), v40);
  CFArrayAppendValue(Mutable, v38);
  CFRelease(v40);
  CFRelease(v38);
  CFRelease(v41);
  CFRelease(v39);
  v42 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v43 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x500000002;
  v111 = a1 + 72;
  v44 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v46 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v43, CFSTR("name"), CFSTR("firstChild"));
  CFDictionarySetValue(v43, CFSTR("type"), v44);
  CFDictionarySetValue(v43, CFSTR("address"), v46);
  CFDictionarySetValue(v43, CFSTR("semantic"), v45);
  CFArrayAppendValue(Mutable, v43);
  CFRelease(v45);
  CFRelease(v43);
  CFRelease(v46);
  CFRelease(v44);
  v47 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v48 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v42);
  valuePtr = 0x500000002;
  v111 = a1 + 80;
  v49 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v50 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v51 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v48, CFSTR("name"), CFSTR("nextSibling"));
  CFDictionarySetValue(v48, CFSTR("type"), v49);
  CFDictionarySetValue(v48, CFSTR("address"), v51);
  CFDictionarySetValue(v48, CFSTR("semantic"), v50);
  CFArrayAppendValue(Mutable, v48);
  CFRelease(v50);
  CFRelease(v48);
  CFRelease(v51);
  CFRelease(v49);
  v52 = CFDictionaryCreateMutable(0, 4, v47, v42);
  valuePtr = 0x100000000;
  v111 = a1 + 204;
  v53 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v54 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v55 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v52, CFSTR("name"), CFSTR("opacity"));
  CFDictionarySetValue(v52, CFSTR("type"), v53);
  CFDictionarySetValue(v52, CFSTR("address"), v55);
  CFDictionarySetValue(v52, CFSTR("semantic"), v54);
  CFArrayAppendValue(Mutable, v52);
  CFRelease(v54);
  CFRelease(v52);
  CFRelease(v55);
  CFRelease(v53);
  v56 = CFDictionaryCreateMutable(0, 4, v47, v42);
  valuePtr = 0x300000000;
  v111 = a1 + 200;
  v57 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v58 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v59 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v56, CFSTR("name"), CFSTR("hidden"));
  CFDictionarySetValue(v56, CFSTR("type"), v57);
  CFDictionarySetValue(v56, CFSTR("address"), v59);
  CFDictionarySetValue(v56, CFSTR("semantic"), v58);
  CFArrayAppendValue(Mutable, v56);
  CFRelease(v58);
  CFRelease(v56);
  CFRelease(v59);
  CFRelease(v57);
  v60 = CFDictionaryCreateMutable(0, 4, v47, MEMORY[0x1E0C9B3A0]);
  v111 = a1 + 64;
  valuePtr = 0;
  v61 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v62 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v63 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v60, CFSTR("name"), CFSTR("parent"));
  CFDictionarySetValue(v60, CFSTR("type"), v61);
  CFDictionarySetValue(v60, CFSTR("address"), v63);
  CFDictionarySetValue(v60, CFSTR("semantic"), v62);
  CFArrayAppendValue(Mutable, v60);
  CFRelease(v62);
  CFRelease(v60);
  CFRelease(v63);
  CFRelease(v61);
  v64 = CFDictionaryCreateMutable(0, 4, v47, MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x500000002;
  v111 = a1 + 240;
  v65 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v66 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v67 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v64, CFSTR("name"), CFSTR("geometry"));
  CFDictionarySetValue(v64, CFSTR("type"), v65);
  CFDictionarySetValue(v64, CFSTR("address"), v67);
  CFDictionarySetValue(v64, CFSTR("semantic"), v66);
  CFArrayAppendValue(Mutable, v64);
  CFRelease(v66);
  CFRelease(v64);
  CFRelease(v67);
  CFRelease(v65);
  v68 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  valuePtr = 0x200000000;
  v111 = a1 + 208;
  v69 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
  v70 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v71 = CFNumberCreate(0, kCFNumberLongType, &v111);
  CFDictionarySetValue(v68, CFSTR("name"), CFSTR("categoryBitMask"));
  CFDictionarySetValue(v68, CFSTR("type"), v69);
  CFDictionarySetValue(v68, CFSTR("address"), v71);
  CFDictionarySetValue(v68, CFSTR("semantic"), v70);
  CFArrayAppendValue(Mutable, v68);
  CFRelease(v70);
  CFRelease(v68);
  CFRelease(v71);
  CFRelease(v69);
  if (sub_1B186ACAC(a1, v72, v73, v74, v75, v76, v77, v78))
  {
    v86 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    valuePtr = 0x500000001;
    v111 = sub_1B186ACAC(a1, v87, v88, v89, v90, v91, v92, v93);
    v94 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v95 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v96 = CFNumberCreate(0, kCFNumberLongType, &v111);
    CFDictionarySetValue(v86, CFSTR("name"), CFSTR("morpher"));
    CFDictionarySetValue(v86, CFSTR("type"), v94);
    CFDictionarySetValue(v86, CFSTR("address"), v96);
    CFDictionarySetValue(v86, CFSTR("semantic"), v95);
    CFArrayAppendValue(Mutable, v86);
    CFRelease(v95);
    CFRelease(v86);
    CFRelease(v96);
    CFRelease(v94);
  }
  v97 = *(_QWORD *)(a1 + 248);
  if (v97 && sub_1B1998B4C(v97, v79, v80, v81, v82, v83, v84, v85))
  {
    v105 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    valuePtr = 0x500000001;
    v106 = *(_QWORD *)(a1 + 248);
    if (v106)
      v106 = sub_1B1998B4C(v106, v98, v99, v100, v101, v102, v103, v104);
    v111 = v106;
    v107 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
    v108 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v109 = CFNumberCreate(0, kCFNumberLongType, &v111);
    CFDictionarySetValue(v105, CFSTR("name"), CFSTR("skinner"));
    CFDictionarySetValue(v105, CFSTR("type"), v107);
    CFDictionarySetValue(v105, CFSTR("address"), v109);
    CFDictionarySetValue(v105, CFSTR("semantic"), v108);
    CFArrayAppendValue(Mutable, v105);
    CFRelease(v108);
    CFRelease(v105);
    CFRelease(v109);
    CFRelease(v107);
  }
  return Mutable;
}

uint64_t sub_1B186EFC8(float32x4_t *a1, int a2, float32x4_t *a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;

  v14 = 0u;
  v15 = 0u;
  if (a2)
  {
    if ((sub_1B18699E8(a1, 1, &v14, (uint64_t)a4, a5, a6, a7, a8) & 1) != 0)
    {
LABEL_3:
      v10 = v14;
      v11 = v15;
      *a3 = vsubq_f32(v14, v15);
      *a4 = vaddq_f32(v10, v11);
      return 1;
    }
  }
  else
  {
    v13 = a1[18];
    v14 = a1[17];
    v15 = v13;
    if ((vminvq_u32((uint32x4_t)vcgezq_f32(a1[18])) & 0x80000000) != 0)
      goto LABEL_3;
  }
  return 0;
}

uint64_t sub_1B186F048(_QWORD *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  float32x4_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  _QWORD *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  __int128 v50;
  float32x4_t v51;
  float32x4_t v52;

  if (!a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), 0, a4, a5, a6, a7, a8, (uint64_t)"sphereOut");
  v52 = 0uLL;
  v51 = 0uLL;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = (const void *)a1[30];
  if (v11)
  {
    v12 = a1[31];
    if (!v12 || (v13 = sub_1B1998B4C(v12, a2, (uint64_t)a3, a4, a5, a6, a7, a8)) == 0)
    {
      v20 = sub_1B17C5D30(v11, a2, (uint64_t)&v52, a4, a5, a6, a7, a8);
      if (!(_DWORD)a2)
        goto LABEL_32;
      goto LABEL_16;
    }
    v47 = 0u;
    v48 = 0u;
    sub_1B18E5470(v13, (uint64_t)a1, (uint64_t)&v47, a4, a5, a6, a7, a8);
    goto LABEL_11;
  }
  if (sub_1B1869DF4((uint64_t)a1, CFSTR("kParticleEmitter"), (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    v47 = 0u;
    v48 = 0u;
    sub_1B1869B70((uint64_t)a1, a2, (uint64_t)&v47, v15, v16, v17, v18, v19, (uint32x4_t)0);
LABEL_11:
    v20 = v14;
    v21 = v47;
    v21.i32[3] = vmaxvq_f32(v48);
    v52 = v21;
    if (!(_DWORD)a2)
      goto LABEL_32;
    goto LABEL_16;
  }
  v20 = 0;
  if (!(_DWORD)a2)
    goto LABEL_32;
LABEL_16:
  v22 = a1[9];
  if (v22)
  {
    LODWORD(v23) = 0;
    do
    {
      v23 = (v23 + 1);
      v22 = *(_QWORD *)(v22 + 80);
    }
    while (v22);
    if ((_DWORD)v23)
    {
      for (i = 0; i != v23; ++i)
      {
        v25 = (_QWORD *)a1[9];
        if ((_DWORD)i && v25)
        {
          v26 = 1;
          do
          {
            v25 = (_QWORD *)v25[10];
            if (v26 >= i)
              break;
            ++v26;
          }
          while (v25);
        }
        if (sub_1B17C5D30(v25, 1, (uint64_t)&v51, v15, v16, v17, v18, v19))
        {
          v49 = 0u;
          v50 = 0u;
          v47 = 0u;
          v48 = 0u;
          *(double *)v29.i64 = sub_1B18697A0((uint64_t)v25, v27, v28, v15, v16, v17, v18, v19);
          v47 = v29;
          v48 = v30;
          v49 = v31;
          v50 = v32;
          v40 = sub_1B1822B64((uint64_t)(v25 + 12), v33, v34, v35, v36, v37, v38, v39);
          sub_1B17ADCE8(&v51, &v47, (uint64_t)&v51, v41, v42, v43, v44, v45, v40);
          if ((v20 & 1) != 0)
            sub_1B17D43E4(&v52, &v51, &v52);
          else
            v52 = v51;
          v20 = 1;
        }
      }
    }
  }
LABEL_32:
  if ((v20 & 1) == 0)
    return 0;
  *a3 = v52;
  return 1;
}

void sub_1B186F240(void **a1, __n128 *__dst, __int128 *__src, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 + 12 == (void **)__dst)
  {
    sub_1B1823564(__dst, __src, __n, a5, a6, a6, a7, a8, a9, v17);
    sub_1B186BA34((uint64_t)a1, v10, v11, v12, v13, v14, v15, v16);
  }
  else if (a1[24] == __dst)
  {
    sub_1B186A2DC((uint64_t)a1, __src, (uint64_t)__src, __n, a5, a6, a7, a8);
  }
  else if ((__n128 *)((char *)a1 + 204) == __dst)
  {
    sub_1B186A3A0((uint64_t)a1, *(float *)__src, (uint64_t)__dst, (uint64_t)__src, __n, a5, a6, a7, a8);
  }
  else if (a1 + 25 == (void **)__dst)
  {
    sub_1B186A51C((uint64_t)a1, *(unsigned __int8 *)__src, (uint64_t)__src, __n, a5, a6, a7, a8);
  }
  else
  {
    memcpy(__dst, __src, __n);
  }
}

void sub_1B186F2FC(uint64_t a1, const void *a2, void *__dst, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if ((const void *)(a1 + 96) == a2)
    sub_1B1822EC8((uint64_t)a2, __dst, __n, a5, a6, a6, a7, a8, a9);
  else
    memcpy(__dst, a2, __n);
}

uint64_t sub_1B186F32C(_QWORD *a1, void (**a2)(_QWORD), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  const __CFArray *v29;
  uint64_t v30;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t j;
  _QWORD v34[2];
  uint64_t (*v35)(uint64_t);
  void *v36;
  void (**v37)(_QWORD);

  v10 = (const __CFDictionary *)sub_1B193E7B8((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
    CFDictionaryApplyFunction(v10, (CFDictionaryApplierFunction)sub_1B186F594, a2);
  v17 = a1[30];
  if (v17)
    a2[2](a2);
  v18 = sub_1B186ACAC((uint64_t)a1, v17, v11, v12, v13, v14, v15, v16);
  if (v18)
    ((void (*)(void (**)(_QWORD), uint64_t))a2[2])(a2, v18);
  v26 = a1[31];
  if (v26)
  {
    v27 = sub_1B1998B4C(v26, v19, v20, v21, v22, v23, v24, v25);
    if (v27)
      ((void (*)(void (**)(_QWORD), uint64_t))a2[2])(a2, v27);
  }
  result = (uint64_t)sub_1B186D8E8((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
  if (result)
  {
    v29 = (const __CFArray *)result;
    result = CFArrayGetCount((CFArrayRef)result);
    if (result >= 1)
    {
      v30 = result;
      for (i = 0; i != v30; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v29, i);
        result = ((uint64_t (*)(void (**)(_QWORD), const void *))a2[2])(a2, ValueAtIndex);
      }
    }
  }
  v34[0] = MEMORY[0x1E0C809B0];
  v34[1] = 0x40000000;
  v35 = sub_1B186F5D8;
  v36 = &unk_1E63D7A40;
  v37 = a2;
  for (j = a1[9]; j; j = *(_QWORD *)(j + 80))
    result = ((uint64_t (*)(_QWORD *, uint64_t))v35)(v34, j);
  return result;
}

void sub_1B186F468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v10 = sub_1B187B2A8(a2, a2, a3, a4, a5, a6, a7, a8);
  v16 = *(_QWORD *)(a1 + 64);
  if (v16)
    v17 = *(unsigned int *)(v16 + 88);
  else
    v17 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 88) = sub_1B18D0764(v10, a1, v17, v11, v12, v13, v14, v15);
  sub_1B1868DB4(a1, a2, v18, v19, v20, v21, v22, v23);
}

void sub_1B186F4B8(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_1B187A178(a2, a1, a3, a4, a5, a6, a7, a8);
  if (a1[22] != -1)
  {
    v17 = sub_1B187B2A8(a2, v10, v11, v12, v13, v14, v15, v16);
    if (v17)
      sub_1B18D0A0C(v17, a1[22], v11, v12, v13, v14, v15, v16);
    a1[22] = -1;
  }
  if (a1[54] != -1)
  {
    v18 = sub_1B187B260(a2, v10, v11, v12, v13, v14, v15, v16);
    if (v18)
      sub_1B197D1C8(v18, a1[54], v19, v20, v21, v22, v23, v24);
    a1[54] = -1;
  }
}

void sub_1B186F534(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1[4].i64[0])
    sub_1B186C7BC((uint64_t)a1, 1, a3, a4, a5, a6, a7, a8);
  v10 = a1[15].i64[1];
  if (v10)
  {
    v11 = sub_1B1998B4C(v10, a2, a3, a4, a5, a6, a7, a8);
    if (v11)
    {
      v12 = v11;
      if (sub_1B17A0A4C(v11))
        sub_1B18E534C(v12, a1, v13, v14, v15, v16, v17, v18, a9);
    }
  }
}

const void *sub_1B186F594(uint64_t a1, const void *a2, uint64_t a3)
{
  const void *result;

  result = sub_1B193EBA0(a2);
  if ((_DWORD)result)
    return (const void *)(*(uint64_t (**)(uint64_t, const void *))(a3 + 16))(a3, a2);
  return result;
}

uint64_t sub_1B186F5D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B186F5E4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const __CFDictionary *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  const void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const __CFDictionary *v65;
  uint64_t v66;
  BOOL v67;
  _QWORD v69[2];
  uint64_t (*v70)(uint64_t, uint64_t, char *);
  void *v71;
  uint64_t *v72;
  const void *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  char v78;

  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B17987F8(v10, a2))
    return a1;
  v18 = (const void *)sub_1B193E568(a1, v11, v12, v13, v14, v15, v16, v17);
  if (v18)
  {
    if (sub_1B17987F8(v18, a2))
      return a1;
  }
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v19, v20, v21, v22, v23, v24, (uint64_t)"node");
  v25 = sub_1B17C62B4(*(const void **)(a1 + 240), (uint64_t)a2);
  if (!v25)
  {
    v33 = sub_1B1868FE8(a1, v26, v27, v28, v29, v30, v31, v32);
    v25 = sub_1B17C62B4(v33, (uint64_t)a2);
    if (!v25)
    {
      v41 = (const void *)sub_1B186ACAC(a1, v34, v35, v36, v37, v38, v39, v40);
      v25 = sub_1B17C62B4(v41, (uint64_t)a2);
      if (!v25)
      {
        v49 = *(const void **)(a1 + 248);
        if (v49)
          v49 = (const void *)sub_1B1998B4C((uint64_t)v49, v42, v43, v44, v45, v46, v47, v48);
        v25 = sub_1B17C62B4(v49, (uint64_t)a2);
        if (!v25)
        {
          v57 = (const void *)sub_1B18695D0(a1, v50, v51, v52, v53, v54, v55, v56);
          v25 = sub_1B17C62B4(v57, (uint64_t)a2);
          if (!v25)
          {
            v65 = sub_1B186CFA8(a1, v58, v59, v60, v61, v62, v63, v64);
            v25 = sub_1B17C62B4(v65, (uint64_t)a2);
            if (!v25)
            {
              v74 = 0;
              v75 = &v74;
              v76 = 0x2000000000;
              v77 = 0;
              v69[0] = MEMORY[0x1E0C809B0];
              v69[1] = 0x40000000;
              v70 = sub_1B186F790;
              v71 = &unk_1E63D7A68;
              v72 = &v74;
              v73 = a2;
              v78 = 0;
              v66 = *(_QWORD *)(a1 + 72);
              if (v66)
              {
                do
                {
                  v70((uint64_t)v69, v66, &v78);
                  v66 = *(_QWORD *)(v66 + 80);
                  if (v78)
                    v67 = 1;
                  else
                    v67 = v66 == 0;
                }
                while (!v67);
                v25 = v75[3];
              }
              else
              {
                v25 = 0;
              }
              _Block_object_dispose(&v74, 8);
            }
          }
        }
      }
    }
  }
  return v25;
}

uint64_t sub_1B186F790(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_1B186F5E4(a2, *(_QWORD *)(a1 + 40));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *a3 = 1;
  return result;
}

uint64_t sub_1B186F7E4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a2[55] & 0xC0200) != 0)
    sub_1B182164C(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_1B186F814(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = sub_1B186C368(a2, *(_QWORD *)(a1 + 32), *(unsigned __int8 *)(a1 + 48), *(_QWORD *)(a1 + 40));
  if ((result & 1) == 0)
    *a3 = 1;
  return result;
}

uint64_t sub_1B186F850(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL v8;

  if (*(_BYTE *)(a1 + 40))
    v8 = 1;
  else
    v8 = (a2[55] & 0x20) == 0;
  if (!v8)
    return 1;
  a2[55] |= 0x20u;
  if (*(_BYTE *)(a1 + 40))
    sub_1B187A8A4(*(_QWORD *)(a1 + 32), 4, a2, 0, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_1B186F8A8(uint64_t a1, float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2[51] < 1.0)
    return 1;
  sub_1B187A8A4(*(_QWORD *)(a1 + 32), 4, a2, 0, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_1B186F8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = *(_DWORD *)(a2 + 216);
  if (v8 != -1)
    sub_1B197D060(*(_QWORD *)(a1 + 32), v8, a3, a4, a5, a6, a7, a8);
  return 0;
}

uint64_t sub_1B186F910(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  const __CFDictionary *v21;
  uint64_t v22;
  CFTypeID v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (*(_BYTE *)(a2 + 200) && (*(_BYTE *)(a1 + 48) || *(_QWORD *)(a1 + 32) != a2))
    return 1;
  if (sub_1B186989C(a2, a2, a3, a4, a5, a6, a7, a8) && *(_DWORD *)(a2 + 216) == -1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Node should already be in CullingSystem"), v12, v13, v14, v15, v16, v17, (uint64_t)"!CFXNodeShouldBePutInCullingSystem(child) || (child->_cullingHandle != kCFXCullingHandleInvalid)");
  if (*(_BYTE *)(a1 + 48))
  {
    sub_1B187A8A4(*(_QWORD *)(a2 + 48), 0, (const void *)a2, 0, v14, v15, v16, v17);
    v18 = *(_QWORD *)(a1 + 40);
    if (v18)
      sub_1B1879FA8(v18, a2, v12, v13, v14, v15, v16, v17);
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 40);
    if (v19)
      sub_1B187A360(v19, (_BYTE *)a2, v12, v13, v14, v15, v16, v17);
  }
  v20 = (*(_BYTE *)(a2 + 221) & 0x10) != 0 && *(_QWORD *)(a2 + 240) != 0;
  v21 = sub_1B1868FE8(a2, v11, v12, v13, v14, v15, v16, v17);
  if (v21)
  {
    v22 = (uint64_t)v21;
    v23 = CFGetTypeID(v21);
    if (v23 == sub_1B185EA24())
    {
      if (sub_1B185F484(v22))
      {
        if (((sub_1B185F4D4(v22, v24, v25, v26, v27, v28, v29, v30) | v20) & 1) == 0)
          return 0;
        goto LABEL_24;
      }
    }
  }
  if (v20)
LABEL_24:
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), *(const void **)(a1 + 40), 0, 1u);
  return 0;
}

_BYTE *sub_1B186FA7C(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t i;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  objc_super v36;
  _BYTE v37[128];
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v36.receiver = a1;
  v36.super_class = (Class)VFXMTLDeformerStack;
  v9 = objc_msgSendSuper2(&v36, sel_init);
  v17 = v9;
  if (v9)
  {
    *((_QWORD *)v9 + 1) = a5;
    *((_QWORD *)v9 + 2) = a2;
    *((_QWORD *)v9 + 3) = a3;
    v9[40] = a4;
    v9[41] = a4;
    v18 = (void *)sub_1B1998C64(a2, v10, v11, v12, v13, v14, v15, v16);
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v32, (uint64_t)v37, 16);
    if (v20)
    {
      v24 = v20;
      v25 = *(_QWORD *)v33;
      do
      {
        for (i = 0; i != v24; ++i)
        {
          if (*(_QWORD *)v33 != v25)
            objc_enumerationMutation(v18);
          v27 = *(void **)(*((_QWORD *)&v32 + 1) + 8 * i);
          v17[41] = 0;
          v17[43] |= objc_msgSend_deformedMeshReliesOnTransforms(v27, v21, v22, v23);
          v17[44] |= objc_msgSend_deformedMeshReliesOnFrustum(v27, v28, v29, v30);
        }
        v24 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v21, (uint64_t)&v32, (uint64_t)v37, 16);
      }
      while (v24);
    }
  }
  return v17;
}

uint64_t sub_1B186FCC4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 104);
  return result;
}

void sub_1B187078C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 120), 8);
  _Unwind_Resume(a1);
}

void sub_1B1870820(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  if (a3 != 7 && (a3 == 3 || a4 <= 0) && (a3 != 3 || a4 <= 7))
  {
    if (sub_1B18472D8(a2))
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Volatile meshes are not supported by the deformer stack"), v12, v13, v14, v15, v16, v17, a9);
    }
    else if (a3 != 4 && a3 != 1)
    {
      if (a3)
      {
        if (!*(_BYTE *)(a1 + 72))
        {
          v37 = sub_1B18FA92C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2);
          if (v37)
          {
            v40 = (uint64_t)v37;
            if (objc_msgSend_indexOfObject_(*(void **)(a1 + 40), v38, (uint64_t)v37, v39) == 0x7FFFFFFFFFFFFFFFLL)
            {
              objc_msgSend_count(*(void **)(a1 + 40), v41, v42, v43);
              objc_msgSend_addObject_(*(void **)(a1 + 40), v44, v40, v45);
            }
            MEMORY[0x1E0DE7D20](VFXMTLResourceManager, sel__fillVertexDescriptor_withMeshSource_semantic_inputSet_bufferIndex_, *(_QWORD *)(a1 + 48), a2);
          }
        }
      }
      else
      {
        v18 = sub_1B189D6B0(30);
        v26 = sub_1B17EDAE0(a2, v19, v20, v21, v22, v23, v24, v25);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = v26;
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112) = sub_1B18FC078(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), (const char *)(v26 * v18), 32);
        v31 = *(_QWORD *)(a1 + 32);
        v32 = *(unsigned __int8 *)(v31 + 41);
        if ((_DWORD)v32 == *(unsigned __int8 *)(v31 + 40))
        {
          v33 = *(id *)(v31 + 112);
        }
        else
        {
          v46 = sub_1B1875540(*(_QWORD *)(a1 + 64), 0, 0, v32, v27, v28, v29, v30);
          v54 = sub_1B17EDAE0((uint64_t)v46, v47, v48, v49, v50, v51, v52, v53);
          v33 = (id)sub_1B18FC078(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), (const char *)(v54 * v18), 32);
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 80) = v33;
        v55 = objc_msgSend_count(*(void **)(a1 + 40), v34, v35, v36);
        objc_msgSend_addObject_(*(void **)(a1 + 40), v56, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112), v57);
        v61 = (void *)objc_msgSend_attributes(*(void **)(a1 + 48), v58, v59, v60);
        v64 = (void *)objc_msgSend_objectAtIndexedSubscript_(v61, v62, 0, v63);
        objc_msgSend_setFormat_(v64, v65, 30, v66);
        objc_msgSend_setOffset_(v64, v67, 0, v68);
        objc_msgSend_setBufferIndex_(v64, v69, v55 + 18, v70);
        v74 = (void *)objc_msgSend_layouts(*(void **)(a1 + 48), v71, v72, v73);
        v78 = objc_msgSend_bufferIndex(v64, v75, v76, v77);
        v81 = (void *)objc_msgSend_objectAtIndexedSubscript_(v74, v79, v78, v80);
        objc_msgSend_setStride_(v81, v82, v18, v83);
        objc_msgSend_setStepFunction_(v81, v84, 1, v85);
        v89 = objc_msgSend_offset(v64, v86, v87, v88);
        v93 = objc_msgSend_stride(v81, v90, v91, v92);
        v94 = *(_QWORD *)(a1 + 32);
        *(_BYTE *)(v94 + 232) = 1;
        *(_QWORD *)(v94 + 240) = 30;
        *(_QWORD *)(v94 + 248) = v89;
        *(_QWORD *)(v94 + 256) = v93;
      }
    }
  }
}

uint64_t sub_1B187139C(uint64_t result)
{
  if (result)
    *(_BYTE *)(result + 42) = 0;
  return result;
}

_QWORD *sub_1B1871E0C(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, const void *a7)
{
  _QWORD *v13;
  _QWORD *v14;
  const char *v15;
  objc_super v17;

  if (!a1)
    return 0;
  v17.receiver = a1;
  v17.super_class = (Class)VFXModelDeformerInstanceWrapper;
  v13 = objc_msgSendSuper2(&v17, sel_init);
  v14 = v13;
  if (v13)
  {
    v13[1] = a2;
    v13[2] = a3;
    memcpy(v13 + 4, a7, 0x180uLL);
    v14[3] = objc_msgSend_newDeformerInstanceForNode_outputs_computeVertexCount_context_(a3, v15, a4, a5, a6, v14);
  }
  return v14;
}

uint64_t sub_1B1872064(uint64_t result)
{
  if (result)
    return sub_1B194C100(*(_QWORD *)(result + 736));
  return result;
}

BOOL sub_1B1872074(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 43) != 0;
  return result;
}

BOOL sub_1B1872088(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 44) != 0;
  return result;
}

uint64_t sub_1B187209C(uint64_t a1, uint64_t a2, unsigned __int8 a3, __int128 *a4, __int128 *a5, _BOOL8 *a6)
{
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  _BOOL8 v45;
  void *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t i;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void **v65;
  const char *v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  const char *v73;
  uint64_t v74;
  const char *v75;
  void **v76;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[5];
  _QWORD v88[6];
  unsigned __int8 v89;

  if (!a1)
    return 0;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x1E0C809B0];
  v88[0] = MEMORY[0x1E0C809B0];
  v88[1] = 3221225472;
  v88[2] = sub_1B1872474;
  v88[3] = &unk_1E63D7B80;
  v88[4] = a1;
  v88[5] = a2;
  v89 = a3;
  sub_1B1998D3C(v12, (uint64_t)v88);
  v14 = *a4;
  v15 = a4[1];
  v16 = a4[3];
  *(_OWORD *)(a1 + 448) = a4[2];
  *(_OWORD *)(a1 + 464) = v16;
  *(_OWORD *)(a1 + 416) = v14;
  *(_OWORD *)(a1 + 432) = v15;
  v17 = a4[4];
  v18 = a4[5];
  v19 = a4[7];
  *(_OWORD *)(a1 + 512) = a4[6];
  *(_OWORD *)(a1 + 528) = v19;
  *(_OWORD *)(a1 + 480) = v17;
  *(_OWORD *)(a1 + 496) = v18;
  v20 = a4[8];
  v21 = a4[9];
  v22 = a4[11];
  *(_OWORD *)(a1 + 576) = a4[10];
  *(_OWORD *)(a1 + 592) = v22;
  *(_OWORD *)(a1 + 544) = v20;
  *(_OWORD *)(a1 + 560) = v21;
  v23 = *a5;
  v24 = a5[2];
  *(_OWORD *)(a1 + 624) = a5[1];
  *(_OWORD *)(a1 + 640) = v24;
  *(_OWORD *)(a1 + 608) = v23;
  v25 = a5[3];
  v26 = a5[4];
  v27 = a5[6];
  *(_OWORD *)(a1 + 688) = a5[5];
  *(_OWORD *)(a1 + 704) = v27;
  *(_OWORD *)(a1 + 656) = v25;
  *(_OWORD *)(a1 + 672) = v26;
  *(_QWORD *)(a1 + 720) = a2;
  objc_msgSend_reconfigureIfNeededWithContext_programHashCodeRequirements_((void *)a1, v28, a2, a3);
  v87[0] = v13;
  v87[1] = 3221225472;
  v87[2] = sub_1B1872564;
  v87[3] = &unk_1E63D7BA8;
  v87[4] = a1;
  v36 = *(_QWORD *)(a1 + 56);
  v37 = *(_QWORD *)(a1 + 80);
  v38 = *(_QWORD *)(a1 + 88);
  if (*(_QWORD *)(a1 + 48))
    v39 = *(_QWORD *)(a1 + 48);
  else
    v39 = *(_QWORD *)(a1 + 80);
  v78 = v39;
  v79 = v37;
  if (v36)
    v40 = v36;
  else
    v40 = v38;
  v80 = v40;
  v81 = v38;
  v42 = *(_QWORD *)(a1 + 96);
  v41 = *(_QWORD *)(a1 + 104);
  if (*(_QWORD *)(a1 + 64))
    v43 = *(_QWORD *)(a1 + 64);
  else
    v43 = *(_QWORD *)(a1 + 96);
  v82 = v43;
  v83 = v42;
  v84 = 0u;
  v85 = 0u;
  v86 = 0u;
  v44 = *(void **)(a1 + 736);
  if (v44)
  {
    v45 = objc_msgSend_updateWithComputeContext_positions_normals_tangents_(v44, v29, a1, v39, v40, v43) == 1;
    v37 = *(_QWORD *)(a1 + 80);
    v38 = *(_QWORD *)(a1 + 88);
    v78 = v39;
    v79 = v37;
    v80 = v40;
    v81 = v38;
    v42 = *(_QWORD *)(a1 + 96);
    v82 = v43;
    v83 = v42;
  }
  else
  {
    v45 = 0;
  }
  v46 = *(void **)(a1 + 744);
  if (v46)
  {
    if (objc_msgSend_updateWithComputeContext_positions_normals_tangents_(v46, v29, a1, v37, v38, v42) == 1)
      v45 = 1;
    v78 = v37;
    v80 = v38;
    v82 = v42;
  }
  if (*(_QWORD *)(a1 + 760))
  {
    v47 = (void *)sub_1B1998C64(*(_QWORD *)(a1 + 16), (uint64_t)v29, v30, v31, v32, v33, v34, v35);
    v51 = objc_msgSend_count(*(void **)(a1 + 760), v48, v49, v50);
    if (v51)
    {
      v52 = 0;
      for (i = 0; i != v51; ++i)
      {
        v54 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 760), v29, i, v31);
        v58 = sub_1B1872580(v54, (const char *)v87, (uint64_t)&v78, v55);
        if (v59 == 1)
        {
          v45 = 1;
          v52 = 1;
        }
        v60 = (void *)objc_msgSend_objectAtIndexedSubscript_(v47, v56, i, v57, v58);
        if ((objc_msgSend_requiredOutputs(v60, v61, v62, v63) & 8) != 0)
        {
          if (v54)
            v64 = objc_msgSend_meshForDeformedTopology(*(void **)(v54 + 24), v29, v30, v31);
          else
            v64 = objc_msgSend_meshForDeformedTopology(0, v29, v30, v31);
          v41 = v64;
        }
      }
      LODWORD(v51) = v52;
    }
  }
  else
  {
    LODWORD(v51) = 0;
  }
  if (*(unsigned __int8 *)(a1 + 40) != *(unsigned __int8 *)(a1 + 41))
  {
    v65 = (void **)objc_msgSend_currentComputeEncoder((void *)a1, v29, v30, v31);
    objc_msgSend_setBuffer_offset_atIndex_(*v65, v66, *(_QWORD *)(a1 + 80), 0, 0);
    objc_msgSend_setBuffer_offset_atIndex_(*v65, v67, *(_QWORD *)(a1 + 112), 0, 1);
    v69 = *(_QWORD *)(a1 + 88);
    if (v69)
    {
      objc_msgSend_setBuffer_offset_atIndex_(*v65, v68, v69, 0, 2);
      objc_msgSend_setBuffer_offset_atIndex_(*v65, v70, *(_QWORD *)(a1 + 120), 0, 3);
    }
    v71 = *(_QWORD *)(a1 + 96);
    if (v71)
    {
      objc_msgSend_setBuffer_offset_atIndex_(*v65, v68, v71, 0, 4);
      objc_msgSend_setBuffer_offset_atIndex_(*v65, v72, *(_QWORD *)(a1 + 128), 0, 5);
    }
    objc_msgSend_setBuffer_offset_atIndex_(*v65, v68, *(_QWORD *)(a1 + 344), 0, 6);
    objc_msgSend_setBytes_length_atIndex_(*v65, v73, a1 + 328, 4, 7);
    v74 = sub_1B18FD774(*(_QWORD *)(a1 + 336));
    objc_msgSend_dispatchOnVertices_vertexCount_(*v65, v75, v74, *(unsigned int *)(a1 + 328));
  }
  if (v45)
    objc_msgSend_updateWithComputeContext_positions_normals_tangents_(*(void **)(a1 + 752), v29, a1, *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  v76 = *(void ***)(a1 + 728);
  if (v76)
    objc_msgSend_resetCache(*v76, v29, v30, v31);
  *a6 = v45;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  if ((_DWORD)v51)
    sub_1B18690BC(*(float32x4_t **)(a1 + 24), (uint64_t)v29, v30, v31, v32, v33, v34, v35);
  return v41;
}

uint64_t sub_1B1872474(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[7];
  _BYTE v25[200];
  _BYTE v26[8];
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  result = sub_1B19988A4(a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result)
  {
    v14 = objc_msgSend_renderResourceForDeformerStack_node_dataKind_(*(void **)(*(_QWORD *)(a1 + 32) + 8), v13, (uint64_t)a2, a3, a4);
    v21 = v14;
    if (v14)
    {
      if (*(_BYTE *)(v14 + 43))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Transform of dependency node is not available"), v15, v16, v17, v18, v19, v20, (uint64_t)"[dependencyDeformerStack computeDeformedMeshReliesOnTransforms] == NO");
      if (*(_BYTE *)(v21 + 44))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Frustum info for dependency node is not available"), v15, v16, v17, v18, v19, v20, (uint64_t)"[dependencyDeformerStack computeDeformedMeshReliesOnFrustum] == NO");
    }
    v22 = *(_QWORD *)(a1 + 40);
    v23 = *(unsigned __int8 *)(a1 + 48);
    v24[4] = v31;
    v24[5] = v32;
    v24[6] = v33;
    v24[0] = v27;
    v24[1] = v28;
    v24[2] = v29;
    v24[3] = v30;
    return sub_1B187209C(v21, v22, v23, v25, v24, v26);
  }
  return result;
}

uint64_t sub_1B1872564(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void **)objc_msgSend_currentComputeEncoder(*(void **)(a1 + 32), a2, a3, a4);
  return objc_msgSend_getEncoderAndResetCache(*v4, v5, v6, v7);
}

double sub_1B1872580(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  __int128 v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  double result;
  _QWORD v12[5];

  if (a1)
  {
    *(_QWORD *)(a1 + 416) = a2;
    v6 = *(_OWORD *)(a3 + 16);
    v7 = *(_OWORD *)(a3 + 32);
    *(_OWORD *)(a1 + 432) = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 448) = v6;
    *(_OWORD *)(a1 + 464) = v7;
    *(_OWORD *)(a1 + 480) = 0u;
    *(_OWORD *)(a1 + 496) = 0u;
    *(_OWORD *)(a1 + 512) = 0u;
    v8 = *(void **)(a1 + 16);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = sub_1B187271C;
    v12[3] = &unk_1E63D7BD0;
    v12[4] = a1;
    objc_msgSend__enumerateDependencyNodesUsingBlock_(v8, a2, (uint64_t)v12, a4);
    objc_msgSend_updateWithContext_(*(void **)(a1 + 24), v9, a1, v10);
    *(_QWORD *)a3 = *(_QWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 16) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a3 + 40);
    result = 0.0;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_QWORD *)(a1 + 416) = 0;
    *(_QWORD *)(a1 + 424) = 0;
  }
  return result;
}

void sub_1B187271C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  __int16 v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  VFXMTLMesh *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v4 = a4;
  v7 = objc_msgSend_nodeRef(a3, a2, (uint64_t)a3, a4);
  v15 = sub_1B1868F58(v7, v8, v9, v10, v11, v12, v13, v14);
  if (v15)
  {
    v24 = objc_msgSend_renderResourceForDeformerStack_node_dataKind_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8), v16, v15, v7, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 41));
    if (a2 != (const char *)1)
    {
      if (!a2)
      {
        if ((v4 & 0x100) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480) = objc_msgSend_dependencyBufferForInput_dependencyStack_(*(void **)(a1 + 32), v23, 256, v24);
          if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 480))
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v25, v26, v27, v28, v29, v30, (uint64_t)"_currentUpdateBuffers.dependency0Positions");
        }
        if ((v4 & 0x200) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488) = objc_msgSend_dependencyBufferForInput_dependencyStack_(*(void **)(a1 + 32), v23, 512, v24);
          if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 488))
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v31, v32, v33, v34, v35, v36, (uint64_t)"_currentUpdateBuffers.dependency0Normals");
        }
        if ((v4 & 0x400) != 0)
        {
          v37 = objc_msgSend_dependencyBufferForInput_dependencyStack_(*(void **)(a1 + 32), v23, 1024, v24);
LABEL_22:
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 496) = v37;
          if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 496))
            return;
          v67 = "_currentUpdateBuffers.dependency0Tangents";
LABEL_42:
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v38, v39, v40, v41, v42, v43, (uint64_t)v67);
          return;
        }
      }
      return;
    }
    if ((v4 & 0x800) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504) = objc_msgSend_dependencyBufferForInput_dependencyStack_(*(void **)(a1 + 32), v23, 2048, v24);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 504))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v68, v69, v70, v71, v72, v73, (uint64_t)"_currentUpdateBuffers.dependency1Positions");
    }
    if ((v4 & 0x1000) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 512) = objc_msgSend_dependencyBufferForInput_dependencyStack_(*(void **)(a1 + 32), v23, 4096, v24);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 512))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v74, v75, v76, v77, v78, v79, (uint64_t)"_currentUpdateBuffers.dependency1Normals");
    }
    if ((v4 & 0x2000) == 0)
      return;
    v80 = objc_msgSend_dependencyBufferForInput_dependencyStack_(*(void **)(a1 + 32), v23, 0x2000, v24);
LABEL_40:
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520) = v80;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 520))
      return;
    v67 = "_currentUpdateBuffers.dependency1Tangents";
    goto LABEL_42;
  }
  v44 = sub_1B1868FA0(v7, (uint64_t)v16, v17, v18, v19, v20, v21, v22);
  v52 = sub_1B17A0848(v44, v45, v46, v47, v48, v49, v50, v51);
  v54 = sub_1B18FB1C0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8), v52, *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 41));
  if (a2 == (const char *)1)
  {
    if ((v4 & 0x800) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504) = objc_msgSend_dependencyBufferForInput_dependencyMesh_(*(void **)(a1 + 32), v53, 2048, (uint64_t)v54);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 504))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v81, v82, v83, v84, v85, v86, (uint64_t)"_currentUpdateBuffers.dependency1Positions");
    }
    if ((v4 & 0x1000) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 512) = objc_msgSend_dependencyBufferForInput_dependencyMesh_(*(void **)(a1 + 32), v53, 4096, (uint64_t)v54);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 512))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v87, v88, v89, v90, v91, v92, (uint64_t)"_currentUpdateBuffers.dependency1Normals");
    }
    if ((v4 & 0x2000) == 0)
      return;
    v80 = objc_msgSend_dependencyBufferForInput_dependencyMesh_(*(void **)(a1 + 32), v53, 0x2000, (uint64_t)v54);
    goto LABEL_40;
  }
  if (!a2)
  {
    if ((v4 & 0x100) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 480) = objc_msgSend_dependencyBufferForInput_dependencyMesh_(*(void **)(a1 + 32), v53, 256, (uint64_t)v54);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 480))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v55, v56, v57, v58, v59, v60, (uint64_t)"_currentUpdateBuffers.dependency0Positions");
    }
    if ((v4 & 0x200) != 0)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 488) = objc_msgSend_dependencyBufferForInput_dependencyMesh_(*(void **)(a1 + 32), v53, 512, (uint64_t)v54);
      if (!*(_QWORD *)(*(_QWORD *)(a1 + 32) + 488))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v61, v62, v63, v64, v65, v66, (uint64_t)"_currentUpdateBuffers.dependency0Normals");
    }
    if ((v4 & 0x400) != 0)
    {
      v37 = objc_msgSend_dependencyBufferForInput_dependencyMesh_(*(void **)(a1 + 32), v53, 1024, (uint64_t)v54);
      goto LABEL_22;
    }
  }
}

uint64_t sub_1B1872CB4(void *a1, const char *a2, uint64_t *a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;

  v7 = (void *)objc_msgSend_attributes(a1, a2, (uint64_t)a3, a4);
  v10 = (void *)objc_msgSend_objectAtIndexedSubscript_(v7, v8, (uint64_t)a2, v9);
  objc_msgSend_setFormat_(v10, v11, a3[1], v12);
  objc_msgSend_setOffset_(v10, v13, a3[2], v14);
  objc_msgSend_setBufferIndex_(v10, v15, (uint64_t)(a2 + 10), v16);
  v20 = (void *)objc_msgSend_layouts(a1, v17, v18, v19);
  v24 = objc_msgSend_bufferIndex(v10, v21, v22, v23);
  v27 = (void *)objc_msgSend_objectAtIndexedSubscript_(v20, v25, v24, v26);
  objc_msgSend_setStepFunction_(v27, v28, 5, v29);
  return objc_msgSend_setStride_(v27, v30, a3[3], v31);
}

_DWORD *sub_1B18730CC(void *a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const __CFArray *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _DWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  CFIndex i;
  const void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  void *v81;
  _DWORD *v82;
  int v83;
  _DWORD *v84;
  uint64_t v85;
  int *v86;
  int v87;
  unsigned int v88;
  int v89;
  char v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  CFIndex j;
  const void *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _DWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  size_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int v125;
  unint64_t v126;
  unsigned int v127;
  char v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  char *v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  unint64_t k;
  uint64_t v142;
  int v143;
  int v144;
  uint64_t v145;
  unsigned int v146;
  unsigned int v147;
  void *v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  void *v152;
  const char *v153;
  uint64_t v154;
  void *v155;
  uint64_t v157;
  unint64_t v158;
  char v159;
  uint64_t v160;
  void *v161;
  unsigned __int8 v162;
  _DWORD *v163;
  unsigned int v164;
  int v166;
  BOOL v167;
  _DWORD *v168;
  _QWORD v169[9];
  int v170;
  BOOL v171;
  _OWORD v172[3];
  uint64_t v173;
  _QWORD v174[6];
  int v175;
  _OWORD v176[3];
  uint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  uint64_t v181;
  unsigned int v182;
  objc_super v183;

  if (!a1)
    return 0;
  v183.receiver = a1;
  v183.super_class = (Class)VFXMTLSmoothNormalsDeformer;
  v8 = objc_msgSendSuper2(&v183, sel_init);
  if (!v8)
    return 0;
  v13 = v8;
  v161 = a5;
  v14 = sub_1B1875540(a2, 0, 0, a3, v9, v10, v11, v12);
  v163 = v13;
  v13[4] = sub_1B17EDAE0((uint64_t)v14, v15, v16, v17, v18, v19, v20, v21);
  v29 = sub_1B1874BE0(a2, v22, v23, v24, v25, v26, v27, v28);
  v162 = sub_1B1875D94(a2, 0, 0, v30, v31, v32, v33, v34);
  v41 = sub_1B1875E70(a2, 0, v35, v36, v37, v38, v39, v40);
  v49 = sub_1B17EDAE0((uint64_t)v41, v42, v43, v44, v45, v46, v47, v48);
  v182 = 0;
  v160 = sub_1B18760B0(a2, &v182);
  v57 = sub_1B1816084(a2);
  v58 = 0;
  if (!v57)
    v58 = sub_1B19999D8((uint64_t)v14, v50, v51, v52, v53, v54, v55, v56);
  v168 = malloc_type_calloc(4uLL, v49, 0xF3BC1C75uLL);
  if ((uint64_t)v29 >= 1)
  {
    for (i = 0; (const __CFArray *)i != v29; ++i)
    {
      v65 = sub_1B1874C3C(a2, i, 0, v59, v60, v61, v62, v63);
      v181 = 0;
      v179 = 0u;
      v180 = 0u;
      v178 = 0u;
      sub_1B17A4804((uint64_t)v65, v162, v66, v67, v68, v69, v70, v71, (uint64_t)&v178);
      if ((BYTE10(v179) & 0xFA) != 0)
      {
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: VFXMTLSmoothNormalsDeformer can only process triangles and polygons"), v72, v73, v74, v75, v76, v77, v157);
      }
      else
      {
        v176[0] = v178;
        v176[1] = v179;
        v176[2] = v180;
        v177 = v181;
        v174[0] = MEMORY[0x1E0C809B0];
        v174[1] = 3221225472;
        v174[2] = sub_1B18737DC;
        v174[3] = &unk_1E63D7BF0;
        v175 = v49;
        v174[4] = v58;
        v174[5] = v168;
        sub_1B17A5198((uint64_t *)v176, (uint64_t)v174, v72, v73, v74, v75, v76, v77);
      }
    }
  }
  if (v58 && (_DWORD)v49)
  {
    v78 = 0;
    do
    {
      v79 = v58[v78];
      if (v78 != v79)
        v168[v78] = v168[v79];
      ++v78;
    }
    while (v49 != v78);
  }
  v80 = (char *)malloc_type_malloc((4 * v49 + 4) & 0x3FFFFFFFCLL, 0x1A989224uLL);
  v81 = v168;
  *(_DWORD *)v80 = 0;
  v82 = v163;
  if ((_DWORD)v49)
  {
    v83 = 0;
    v84 = v80 + 4;
    v85 = v49;
    v86 = v168;
    do
    {
      v87 = *v86++;
      v83 += v87;
      *v84++ = v83;
      --v85;
    }
    while (v85);
  }
  v88 = v182;
  if (!v57)
    v88 = v49;
  v164 = v88;
  v167 = v88 < 0x10000;
  v89 = *(_DWORD *)&v80[4 * v49];
  if (v88 < 0x10000)
    v90 = 1;
  else
    v90 = 2;
  if (v89)
  {
    v159 = v90;
    v166 = *(_DWORD *)&v80[4 * v49];
    v158 = (unint64_t)(3 * v89) << v90;
    v98 = (char *)malloc_type_calloc(v158, 1uLL, 0x368D7902uLL);
    if ((uint64_t)v29 >= 1)
    {
      for (j = 0; (const __CFArray *)j != v29; ++j)
      {
        v100 = sub_1B1874C3C(a2, j, 0, v93, v94, v95, v96, v97);
        v181 = 0;
        v179 = 0u;
        v180 = 0u;
        v178 = 0u;
        sub_1B17A4804((uint64_t)v100, v162, v101, v102, v103, v104, v105, v106, (uint64_t)&v178);
        if ((BYTE10(v179) & 0xFA) != 0)
        {
          sub_1B17C4408(0, (uint64_t)CFSTR("Warning: VFXMTLSmoothNormalsDeformer can only process triangles and polygons"), v107, v108, v109, v110, v111, v112, v157);
        }
        else
        {
          v172[0] = v178;
          v172[1] = v179;
          v172[2] = v180;
          v173 = v181;
          v169[0] = MEMORY[0x1E0C809B0];
          v169[1] = 3221225472;
          v169[2] = sub_1B18738A4;
          v169[3] = &unk_1E63D7C10;
          v169[4] = v58;
          v169[5] = v168;
          v170 = v166;
          v171 = v167;
          v169[6] = v80;
          v169[7] = v98;
          v169[8] = v98;
          sub_1B17A5198((uint64_t *)v172, (uint64_t)v169, v107, v108, v109, v110, v111, v112);
        }
      }
    }
    if (v58)
    {
      v113 = v168;
      if ((_DWORD)v49)
      {
        v114 = 0;
        do
        {
          v115 = v58[v114];
          if (v114 != v115)
          {
            if (!v113[v114])
            {
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. splitted vertices should not have been decremented yet"), v92, v93, v94, v95, v96, v97, (uint64_t)"perVertexTriangleCount[vertexIndex] > 0");
              v113 = v168;
            }
            if (v113[v115])
            {
              sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. welded vertices should have been entirely decremented"), v92, v93, v94, v95, v96, v97, (uint64_t)"perVertexTriangleCount[weldedVertexIndex] == 0");
              v113 = v168;
            }
            v116 = (3 * *(_DWORD *)&v80[4 * v115]);
            v117 = (3 * *(_DWORD *)&v80[4 * v114]);
            v118 = (3 * v113[v114]);
            if (HIWORD(v164))
            {
              v119 = &v98[4 * v117];
              v120 = 4 * v118;
              v121 = &v98[4 * v116];
            }
            else
            {
              v119 = &v98[2 * v117];
              v120 = 2 * v118;
              v121 = &v98[2 * v116];
            }
            memcpy(v119, v121, v120);
            v113 = v168;
          }
          ++v114;
        }
        while (v49 != v114);
      }
      free(v58);
    }
    if (v160)
    {
      v122 = 4 * (v182 + 1);
      v123 = (char *)malloc_type_malloc(v122, 0xEC9EA934uLL);
      v124 = v123;
      *(_DWORD *)v123 = 0;
      v82 = v163;
      if (v182)
      {
        v125 = 0;
        v126 = 0;
        v127 = v164;
        v128 = v159;
        do
        {
          v125 += *(_DWORD *)&v80[4 * (*(_DWORD *)(v160 + 4 * v126) + 1)]
                - *(_DWORD *)&v80[4 * *(unsigned int *)(v160 + 4 * v126)];
          *(_DWORD *)&v123[4 * v126++ + 4] = v125;
        }
        while (v126 < v182);
        v129 = (3 * *(_DWORD *)&v123[4 * v182]);
      }
      else
      {
        v129 = 0;
        v127 = v164;
        v128 = v159;
      }
      v135 = v129 << v128;
      v136 = (char *)malloc_type_calloc(v129 << v128, 1uLL, 0x1F702E45uLL);
      v140 = v136;
      if (v182)
      {
        for (k = 0; k < v182; ++k)
        {
          v142 = *(unsigned int *)(v160 + 4 * k);
          v143 = *(_DWORD *)&v80[4 * (v142 + 1)];
          v144 = *(_DWORD *)&v80[4 * v142];
          v145 = (v143 - v144);
          v146 = 3 * v144;
          v147 = 3 * *(_DWORD *)&v124[4 * k];
          if (v127 >= 0x10000)
          {
            if (v143 != v144)
            {
              do
              {
                *(_DWORD *)&v136[4 * v147] = *(_DWORD *)(v57 + 4 * *(unsigned int *)&v98[4 * v146]);
                *(_DWORD *)&v136[4 * v147 + 4] = *(_DWORD *)(v57 + 4 * *(unsigned int *)&v98[4 * v146 + 4]);
                *(_DWORD *)&v136[4 * v147 + 8] = *(_DWORD *)(v57 + 4 * *(unsigned int *)&v98[4 * v146 + 8]);
                v147 += 3;
                v146 += 3;
                --v145;
              }
              while (v145);
            }
          }
          else if (v143 != v144)
          {
            do
            {
              *(_WORD *)&v136[2 * v147] = *(_DWORD *)(v57 + 4 * *(unsigned __int16 *)&v98[2 * v146]);
              *(_WORD *)&v136[2 * v147 + 2] = *(_DWORD *)(v57 + 4 * *(unsigned __int16 *)&v98[2 * v146 + 2]);
              *(_WORD *)&v136[2 * v147 + 4] = *(_DWORD *)(v57 + 4 * *(unsigned __int16 *)&v98[2 * v146 + 4]);
              v147 += 3;
              v146 += 3;
              --v145;
            }
            while (v145);
          }
        }
      }
      v148 = (void *)objc_msgSend_currentBlitEncoder(v161, v137, v138, v139);
      *((_QWORD *)v163 + 3) = sub_1B18FBFCC((uint64_t)a4, v124, v122, v148);
      v152 = (void *)objc_msgSend_currentBlitEncoder(v161, v149, v150, v151);
      *((_QWORD *)v163 + 4) = sub_1B18FBFCC((uint64_t)a4, v140, v135, v152);
      free(v124);
      free(v140);
    }
    else
    {
      v130 = (void *)objc_msgSend_currentBlitEncoder(v161, v91, v92, v93);
      v82 = v163;
      *((_QWORD *)v163 + 3) = sub_1B18FBFCC((uint64_t)a4, v80, (4 * v49 + 4) & 0x3FFFFFFFCLL, v130);
      v134 = (void *)objc_msgSend_currentBlitEncoder(v161, v131, v132, v133);
      *((_QWORD *)v163 + 4) = sub_1B18FBFCC((uint64_t)a4, v98, v158, v134);
    }
    free(v98);
    v81 = v168;
  }
  free(v81);
  free(v80);
  if (v164 >= 0x10000)
    v155 = (void *)objc_msgSend_computePipelineStateForKernel_(a4, v153, (uint64_t)CFSTR("unify_u32"), v154);
  else
    v155 = (void *)objc_msgSend_computePipelineStateForKernel_(a4, v153, (uint64_t)CFSTR("unify_u16"), v154);
  *((_QWORD *)v82 + 5) = v155;
  return v82;
}

void sub_1B18737DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  unsigned int *v9;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;

  v8 = a4;
  v9 = (unsigned int *)a3;
  if (a4 > 2
    || (sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected vertex count"), a3, a4, a5, a6, a7, a8, (uint64_t)"indicesCount >= 3"), v8))
  {
    v11 = v8;
    do
    {
      v12 = *(_QWORD *)(a1 + 32);
      v13 = v9;
      if (v12)
        v13 = (unsigned int *)(v12 + 4 * *v9);
      v14 = *v13;
      if (v14 >= *(_DWORD *)(a1 + 48))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. indexed index overflow"), a3, a4, a5, a6, a7, a8, (uint64_t)"vertexIndex < originalVertexCount");
      ++*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v14);
      ++v9;
      --v11;
    }
    while (v11);
  }
}

void sub_1B18738A4(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;

  v8 = a4;
  if (a4 > 2
    || (sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. expecting at least triangles here"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"indicesCount >= 3"), v8))
  {
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v13 = v8;
    v14 = a3;
    do
    {
      v15 = v14;
      if (v11)
        v15 = (unsigned int *)(v11 + 4 * *v14);
      v16 = *v15;
      v17 = *(_DWORD *)(v12 + 4 * v16);
      if (!v17)
        break;
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v16);
      v19 = v17 - 1;
      *(_DWORD *)(v12 + 4 * v16) = v19;
      v20 = v18 + v19;
      if ((v18 + v19) >= *(_DWORD *)(a1 + 72))
        break;
      v21 = *a3;
      if (*(_BYTE *)(a1 + 76))
      {
        v22 = *(_QWORD *)(a1 + 56);
        v23 = 3 * v20;
        *(_WORD *)(v22 + 2 * v23) = v21;
        v24 = a3[2];
        *(_WORD *)(v22 + 2 * (v23 + 1)) = a3[1];
        *(_WORD *)(v22 + 2 * (v23 + 2)) = v24;
      }
      else
      {
        v25 = *(_QWORD *)(a1 + 64);
        v26 = 3 * v20;
        *(_DWORD *)(v25 + 4 * v26) = v21;
        *(_DWORD *)(v25 + 4 * (v26 + 1)) = a3[1];
        *(_DWORD *)(v25 + 4 * (v26 + 2)) = a3[2];
      }
      ++v14;
      --v13;
    }
    while (v13);
  }
}

void sub_1B1873AE8(uint64_t a1)
{
  CFNumberRef v1;
  __CFNotificationCenter *LocalCenter;
  uint64_t valuePtr;

  valuePtr = a1;
  v1 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCFXNotificationMeshWillDie"), v1, 0, 1u);
  CFRelease(v1);
}

void sub_1B1873B48(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t i;

  v2 = *(const void **)(a1 + 144);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v3 = *(const void **)(a1 + 112);
  if (v3)
  {
    for (i = 0; i != 18; i += 2)
      *(_WORD *)(a1 + i + 120) = 255;
    CFRelease(v3);
    *(_QWORD *)(a1 + 112) = 0;
  }
}

void sub_1B1873BA0(uint64_t a1)
{
  uint64_t v2;
  CFIndex Count;

  v2 = a1 + 112;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 112));
  free(*(void **)(a1 + 152));
  *(_QWORD *)(a1 + 152) = malloc_type_calloc(Count, 1uLL, 0x100004077774924uLL);
  sub_1B1873C04(a1, v2);
}

void sub_1B1873C04(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  char v8;
  const void *ValueAtIndex;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  int v37;
  int v38;
  char v39;
  char v40;

  for (i = 0; i != 18; i += 2)
    *(_WORD *)(a2 + i + 8) = 255;
  *(_BYTE *)(a1 + 200) &= ~0x80u;
  Count = CFArrayGetCount(*(CFArrayRef *)a2);
  if (Count >= 1)
  {
    v6 = Count;
    v7 = 0;
    v8 = -1;
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)a2, v7);
      v17 = sub_1B17ED7B4((uint64_t)ValueAtIndex, v10, v11, v12, v13, v14, v15, v16);
      v25 = v17;
      if (v17 == v8)
      {
        if (!v8 && *(_BYTE *)(a2 + 9))
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. No double position sources allowed"), v19, v20, v21, v22, v23, v24, (uint64_t)"semantic != kCFXMeshSourceSemanticPosition || data->sourcesSemanticInfos[semantic].count == 0");
        v26 = a2 + 2 * v8;
        v27 = *(_BYTE *)(v26 + 9) + 1;
        *(_BYTE *)(v26 + 9) = v27;
        if (v8 != 3 && v27 >= 2u)
        {
          v28 = sub_1B193E568(a1, v18, v19, v20, v21, v22, v23, v24);
          sub_1B17ED08C(v8);
          sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Mesh '%@' : sources of redundant semantic '%@' will be ignored in rendering"), v29, v30, v31, v32, v33, v34, v28);
        }
      }
      else
      {
        if (v17 <= v8)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Mesh sources are not sorted correctly"), v19, v20, v21, v22, v23, v24, (uint64_t)"semantic > currentSemantic");
        v35 = a2 + 2 * v25;
        v37 = *(unsigned __int8 *)(v35 + 8);
        v36 = (_BYTE *)(v35 + 8);
        if (v37 != 255)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Mesh sources with same semantic non contiguous"), v19, v20, v21, v22, v23, v24, (uint64_t)"data->sourcesSemanticInfos[semantic].index == -1");
        *v36 = v7;
        *(_BYTE *)(a2 + 2 * v25 + 9) = 1;
        v8 = v25;
      }
      if (v25 == 2)
      {
        v38 = sub_1B17EDED8((uint64_t)ValueAtIndex, v18, v19, v20, v21, v22, v23, v24);
        v39 = *(_BYTE *)(a1 + 200);
        v40 = v39 & 0x80;
        if (v38)
          v40 = 0x80;
        *(_BYTE *)(a1 + 200) = v40 & 0x80 | v39 & 0x7F;
      }
      ++v7;
    }
    while (v6 != v7);
  }
}

void *sub_1B1873DD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  CFIndex Count;
  void *v14;

  if (!*(_QWORD *)(a1 + 112))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh->_renderableData.sources");
  if (!*(_QWORD *)(a1 + 144))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh->_renderableData.elements");
  v9 = *(CFTypeRef *)(a1 + 64);
  v10 = *(CFTypeRef *)(a1 + 112);
  if (v9 != v10)
  {
    if (v9)
    {
      CFRelease(*(CFTypeRef *)(a1 + 64));
      *(_QWORD *)(a1 + 64) = 0;
      v10 = *(CFTypeRef *)(a1 + 112);
    }
    if (v10)
      v10 = CFRetain(v10);
    *(_QWORD *)(a1 + 64) = v10;
  }
  v11 = *(CFTypeRef *)(a1 + 96);
  v12 = *(CFTypeRef *)(a1 + 144);
  if (v11 != v12)
  {
    if (v11)
    {
      CFRelease(*(CFTypeRef *)(a1 + 96));
      *(_QWORD *)(a1 + 96) = 0;
      v12 = *(CFTypeRef *)(a1 + 144);
    }
    if (v12)
      v12 = CFRetain(v12);
    *(_QWORD *)(a1 + 96) = v12;
  }
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a1 + 120);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a1 + 136);
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 112));
  free(*(void **)(a1 + 104));
  v14 = malloc_type_malloc(Count, 0x8524CE99uLL);
  *(_QWORD *)(a1 + 104) = v14;
  return memcpy(v14, *(const void **)(a1 + 152), Count);
}

void sub_1B1873EE0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *ValueAtIndex;

  if (a2 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v10 = a1 + 112;
  }
  else if (a2)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
    v10 = 0;
  }
  else
  {
    v10 = a1 + 64;
  }
  for (i = 0; i != 9; ++i)
  {
    v12 = v10 + 2 * i;
    v15 = *(char *)(v12 + 8);
    v13 = v12 + 8;
    v14 = v15;
    if (v15 != -1)
    {
      v16 = *(unsigned __int8 *)(v13 + 1);
      if (*(_BYTE *)(v13 + 1))
      {
        v17 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)v10, v14 + v17);
          (*(void (**)(uint64_t, const void *, _QWORD, uint64_t, _QWORD))(a3 + 16))(a3, ValueAtIndex, (char)i, v17, *(unsigned __int8 *)(v14 + v17 + *(_QWORD *)(v10 + 40)));
          ++v17;
        }
        while (v16 != v17);
      }
    }
  }
}

uint64_t sub_1B1873FCC(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  char v5;
  char v6;

  result = sub_1B17ED1FC(a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(_BYTE *)(v4 + 200);
  if (result | ((v5 & 4) >> 2))
    v6 = 4;
  else
    v6 = 0;
  *(_BYTE *)(v4 + 200) = v6 | v5 & 0xFB;
  return result;
}

uint64_t sub_1B1874018()
{
  if (qword_1ED4CED50 != -1)
    dispatch_once(&qword_1ED4CED50, &unk_1E63D0D70);
  return qword_1ED4CED58;
}

double sub_1B1874058()
{
  double result;

  if (!qword_1ED4CED58)
  {
    qword_1ED4CED58 = sub_1B179CB60(&qword_1ED4CED58);
    qword_1ED4BE658 = (uint64_t)sub_1B187709C;
    *(_QWORD *)&result = 0x1B18774D8;
    unk_1ED4BE670 = xmmword_1E63D3030;
    unk_1ED4BE680 = unk_1E63D3040;
    qword_1ED4BE690 = 0;
    unk_1ED4BE698 = sub_1B18774A4;
  }
  return result;
}

uint64_t sub_1B1874190()
{
  uint64_t result;

  result = -[VFXMesh __createCFObject]_0();
  *(_BYTE *)(result + 200) |= 1u;
  return result;
}

uint64_t sub_1B18741B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  v9 = -[VFXMesh __createCFObject]_0();
  sub_1B1874210(a1, v9, 0, v10, v11, v12, v13, v14);
  return v9;
}

void sub_1B1874210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __CFArray *Mutable;
  CFIndex i;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const void *v42;
  const void *v43;
  const __CFAllocator *v44;
  const __CFArray *v45;
  CFMutableArrayRef MutableCopy;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dst");
LABEL_3:
  sub_1B18759BC(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a3)
  {
    v18 = (CFIndex)sub_1B1874BE0(a1, v11, v12, v13, v14, v15, v16, v17);
    Mutable = CFArrayCreateMutable(0, v18, MEMORY[0x1E0C9B378]);
    if (v18 >= 1)
    {
      for (i = 0; i != v18; ++i)
      {
        v27 = sub_1B1874C3C(a1, i, 0, v20, v21, v22, v23, v24);
        v35 = (const void *)sub_1B17A3E74((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34);
        CFArrayAppendValue(Mutable, v35);
        CFRelease(v35);
      }
    }
    sub_1B18762F4(a2, Mutable, v19, v20, v21, v22, v23, v24);
    CFRelease(Mutable);
  }
  else
  {
    v42 = *(const void **)(a2 + 96);
    if (v42)
    {
      CFRelease(v42);
      *(_QWORD *)(a2 + 96) = 0;
    }
    v43 = *(const void **)(a2 + 144);
    if (v43)
    {
      CFRelease(v43);
      *(_QWORD *)(a2 + 144) = 0;
    }
    v44 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    *(_QWORD *)(a2 + 96) = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(a1 + 96));
    v45 = *(const __CFArray **)(a1 + 144);
    if (v45)
      MutableCopy = CFArrayCreateMutableCopy(v44, 0, v45);
    else
      MutableCopy = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
    *(_QWORD *)(a2 + 144) = MutableCopy;
  }
  *(_BYTE *)(a2 + 200) = *(_BYTE *)(a2 + 200) & 0x87 | *(_BYTE *)(a1 + 200) & 0x78;
  sub_1B193EAC4(a1, (CFTypeRef *)a2, v36, v37, v38, v39, v40, v41);
}

uint64_t sub_1B18743C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  v9 = -[VFXMesh __createCFObject]_0();
  sub_1B1874210(a1, v9, 1, v10, v11, v12, v13, v14);
  return v9;
}

uint64_t sub_1B1874420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  v9 = -[VFXMesh __createCFObject]_0();
  sub_1B1874210(a1, v9, 1, v10, v11, v12, v13, v14);
  sub_1B18BA2D4(v9, 1, v15, v16, v17, v18, v19, v20);
  sub_1B1873DD4(v9, v21, v22, v23, v24, v25, v26, v27);
  return v9;
}

void sub_1B1874494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  void *v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v9 = *(void **)(a1 + 184);
  if (v9)
    free(v9);
  v10 = *(void **)(a1 + 192);
  if (v10)
    free(v10);
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 200) &= ~2u;
}

uint64_t sub_1B1874504(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  float32x4_t v31;
  uint64_t v32;
  float32x4_t v33;
  uint64_t v34;
  float32x4_t v35;
  unsigned int v36;
  int v37;
  int v38;
  _OWORD *v39;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v11 = *(_OWORD **)(a1 + 192);
  if (!v11)
  {
    v12 = sub_1B1875540(a1, 0, 0, 0, a5, a6, a7, a8);
    v43 = 0u;
    if (v12
      && (v20 = sub_1B17ED6C4((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19), v29 = v21, (_DWORD)v21))
    {
      v30 = v20;
      v31 = 0uLL;
      if (v20)
      {
        if ((v21 & 0xFF000000000000) == 0x1000000000000)
        {
          v32 = 0;
          v33 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v31.i64[0] = 0x80000000800000;
          v31.i64[1] = 0x80000000800000;
          do
          {
            v34 = v20 + v32;
            v35.i64[0] = *(_QWORD *)v34;
            v35.i64[1] = *(unsigned int *)(v34 + 8);
            v33 = vminnmq_f32(v33, v35);
            v31 = vmaxnmq_f32(v31, v35);
            v32 += BYTE5(v21);
            --v29;
          }
          while (v29);
        }
        else
        {
          v36 = 0;
          v37 = BYTE4(v21);
          v33 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
          v38 = BYTE5(v21);
          v31.i64[0] = 0x80000000800000;
          v31.i64[1] = 0x80000000800000;
          do
          {
            v41 = v31;
            v44 = v33;
            *(double *)v28.i64 = sub_1B198D4F8(v37, (const float *)(v30 + v36), v22, v23, v24, v25, v26, v27, v28, v33.f32[0], v31.f32[0]);
            v33 = vminnmq_f32(v44, v28);
            v31 = vmaxnmq_f32(v41, v28);
            v36 += v38;
            --v29;
          }
          while (v29);
        }
        v43 = v33;
      }
    }
    else
    {
      v31 = 0uLL;
    }
    v42 = v31;
    v39 = sub_1B179E238(0x20uLL);
    *(_QWORD *)(a1 + 192) = v39;
    *v39 = v43;
    *(float32x4_t *)(*(_QWORD *)(a1 + 192) + 16) = v42;
    v11 = *(_OWORD **)(a1 + 192);
  }
  *a2 = *v11;
  *a3 = *(_OWORD *)(*(_QWORD *)(a1 + 192) + 16);
  return 1;
}

uint64_t sub_1B1874680(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  float v32;
  uint64_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float v36;
  unsigned int v37;
  int v38;
  int v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  _OWORD *v43;
  float32x4_t v44;
  __int128 v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v10 = *(_OWORD **)(a1 + 184);
  if (v10)
    goto LABEL_23;
  v45 = 0uLL;
  v48.i32[2] = 0;
  v48.i64[0] = 0;
  v47.i32[2] = 0;
  v47.i64[0] = 0;
  sub_1B1874504(a1, &v48, &v47, a4, a5, a6, a7, a8);
  v11.i64[0] = 0x3F0000003F000000;
  v11.i64[1] = 0x3F0000003F000000;
  v44 = vmulq_f32(vaddq_f32(v47, v48), v11);
  v46 = v44;
  v16 = sub_1B1875540(a1, 0, 0, 0, v12, v13, v14, v15);
  if (v16)
  {
    result = sub_1B17ED6C4((uint64_t)v16, v17, v18, v19, v20, v21, v22, v23);
    if (!result)
      return result;
    v29 = result;
    v30 = v25;
    if ((v25 & 0xFF000000000000) == 0x1000000000000)
    {
      if ((_DWORD)v25)
      {
        v31 = 0;
        v32 = 0.0;
        do
        {
          v33 = result + v31;
          v26.i64[0] = *(_QWORD *)v33;
          v26.i32[2] = *(_DWORD *)(v33 + 8);
          v34 = vsubq_f32(v26, v44);
          v35 = vmulq_f32(v34, v34);
          v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)));
          if (v26.f32[0] > v32)
            v32 = v26.f32[0];
          v31 += BYTE5(v25);
          --v30;
        }
        while (v30);
        goto LABEL_21;
      }
    }
    else if ((_DWORD)v25)
    {
      v37 = 0;
      v38 = BYTE4(v25);
      v39 = BYTE5(v25);
      v32 = 0.0;
      do
      {
        *(double *)v40.i64 = sub_1B198D4F8(v38, (const float *)(v29 + v37), v18, v19, v20, v21, v22, v23, v26, v27.f32[0], v28.f32[0]);
        v41 = vsubq_f32(v40, v44);
        v42 = vmulq_f32(v41, v41);
        v27 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1);
        v28 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2);
        v26 = vaddq_f32(v28, vaddq_f32(v42, v27));
        if (v26.f32[0] > v32)
          v32 = v26.f32[0];
        v37 += v39;
        --v30;
      }
      while (v30);
      goto LABEL_21;
    }
    v32 = 0.0;
LABEL_21:
    v36 = sqrtf(v32);
    goto LABEL_22;
  }
  v36 = 0.0;
LABEL_22:
  sub_1B17D4358(&v45, (__int128 *)&v46, v18, v19, v20, v21, v22, v23, v36);
  v43 = sub_1B179E238(0x10uLL);
  *(_QWORD *)(a1 + 184) = v43;
  *v43 = v45;
  v10 = *(_OWORD **)(a1 + 184);
LABEL_23:
  *a2 = *v10;
  return 1;
}

uint64_t sub_1B187484C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CFIndex v15;
  float32x4_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  float32x4_t v46;
  uint64_t v47;
  uint64_t v48;
  _DWORD *v49;
  uint64_t v50;
  float32x4_t v51;
  unsigned __int16 *v52;
  unint64_t v53;
  float32x4_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;

  if ((*(_BYTE *)(result + 200) & 2) == 0)
  {
    v8 = result;
    result = (uint64_t)sub_1B1874BE0(result, a2, a3, a4, a5, a6, a7, a8);
    if (result >= 1)
    {
      v14 = result;
      v15 = 0;
      v59 = vdupq_n_s32(0x7F7FFFFFu);
      do
      {
        v16 = (float32x4_t *)sub_1B1874C3C(v8, v15, 0, v9, v10, v11, v12, v13);
        v71 = 0;
        v69 = 0u;
        v70 = 0u;
        v68 = 0u;
        sub_1B17A4804((uint64_t)v16, 0, v17, v18, v19, v20, v21, v22, (uint64_t)&v68);
        if ((_QWORD)v68 && (float32x4_t *)sub_1B17A4FB0((uint64_t)v16) == v16)
        {
          result = (uint64_t)sub_1B1875540(v8, 0, 0, 0, v23, v24, v25, v26);
          if (result)
          {
            result = sub_1B17ED6C4(result, v27, v28, v9, v10, v11, v12, v13);
            if (result)
            {
              v31 = result;
              v32 = v29;
              v33 = sub_1B17A4304((uint64_t)v16, v29, v30, v9, v10, v11, v12, v13);
              v41 = v33;
              v42.i64[0] = 0x80000000800000;
              v42.i64[1] = 0x80000000800000;
              if ((v32 & 0xFF000000000000) == 0x1000000000000)
              {
                switch(BYTE11(v69))
                {
                  case 4u:
                    v43 = (float32x4_t)v59;
                    if (v33 >= 1)
                    {
                      v49 = (_DWORD *)(v68 + 4 * *((_QWORD *)&v70 + 1));
                      v43 = (float32x4_t)v59;
                      do
                      {
                        v50 = v31 + *v49 * BYTE5(v32);
                        v51.i64[0] = *(_QWORD *)v50;
                        v51.i64[1] = *(unsigned int *)(v50 + 8);
                        v43 = vminnmq_f32(v43, v51);
                        v42 = vmaxnmq_f32(v42, v51);
                        v49 += v71;
                        --v41;
                      }
                      while (v41);
                    }
                    goto LABEL_43;
                  case 2u:
                    v43 = (float32x4_t)v59;
                    if (v33 >= 1)
                    {
                      v52 = (unsigned __int16 *)(v68 + 2 * *((_QWORD *)&v70 + 1));
                      v43 = (float32x4_t)v59;
                      do
                      {
                        v53 = v31 + BYTE5(v32) * (unint64_t)*v52;
                        v54.i64[0] = *(_QWORD *)v53;
                        v54.i64[1] = *(unsigned int *)(v53 + 8);
                        v43 = vminnmq_f32(v43, v54);
                        v42 = vmaxnmq_f32(v42, v54);
                        v52 += v71;
                        --v41;
                      }
                      while (v41);
                    }
                    goto LABEL_43;
                  case 1u:
                    v43 = (float32x4_t)v59;
                    if (v33 >= 1)
                    {
                      v44 = (unsigned __int8 *)(v68 + *((_QWORD *)&v70 + 1));
                      v43 = (float32x4_t)v59;
                      do
                      {
                        v45 = v31 + BYTE5(v32) * (unint64_t)*v44;
                        v46.i64[0] = *(_QWORD *)v45;
                        v46.i64[1] = *(unsigned int *)(v45 + 8);
                        v43 = vminnmq_f32(v43, v46);
                        v42 = vmaxnmq_f32(v42, v46);
                        v44 += v71;
                        --v41;
                      }
                      while (v41);
                    }
                    goto LABEL_43;
                }
              }
              else
              {
                switch(BYTE11(v69))
                {
                  case 4u:
                    v43 = (float32x4_t)v59;
                    if (v33 >= 1)
                    {
                      v55 = 0;
                      v56 = v68;
                      v43 = (float32x4_t)v59;
                      do
                      {
                        v61 = v43;
                        v65 = v42;
                        *(double *)v40.i64 = sub_1B198D4F8(BYTE4(v32), (const float *)(v31+ *(_DWORD *)(v56 + 4 * (*((_QWORD *)&v70 + 1) + v71 * v55))* BYTE5(v32)), v34, v35, v36, v37, v38, v39, v40, v42.f32[0], v43.f32[0]);
                        v43 = vminnmq_f32(v61, v40);
                        v42 = vmaxnmq_f32(v65, v40);
                        ++v55;
                      }
                      while (v41 != v55);
                    }
                    goto LABEL_43;
                  case 2u:
                    v43 = (float32x4_t)v59;
                    if (v33 >= 1)
                    {
                      v57 = 0;
                      v58 = v68;
                      v43 = (float32x4_t)v59;
                      do
                      {
                        v62 = v43;
                        v66 = v42;
                        *(double *)v40.i64 = sub_1B198D4F8(BYTE4(v32), (const float *)(v31+ BYTE5(v32)* (unint64_t)*(unsigned __int16 *)(v58 + 2 * (*((_QWORD *)&v70 + 1) + v71 * v57))), v34, v35, v36, v37, v38, v39, v40, v42.f32[0], v43.f32[0]);
                        v43 = vminnmq_f32(v62, v40);
                        v42 = vmaxnmq_f32(v66, v40);
                        ++v57;
                      }
                      while (v41 != v57);
                    }
                    goto LABEL_43;
                  case 1u:
                    v43 = (float32x4_t)v59;
                    if (v33 >= 1)
                    {
                      v47 = 0;
                      v48 = v68;
                      v43 = (float32x4_t)v59;
                      do
                      {
                        v60 = v43;
                        v64 = v42;
                        *(double *)v40.i64 = sub_1B198D4F8(BYTE4(v32), (const float *)(v31+ BYTE5(v32)* (unint64_t)*(unsigned __int8 *)(v48 + *((_QWORD *)&v70 + 1) + v71 * v47)), v34, v35, v36, v37, v38, v39, v40, v42.f32[0], v43.f32[0]);
                        v43 = vminnmq_f32(v60, v40);
                        v42 = vmaxnmq_f32(v64, v40);
                        ++v47;
                      }
                      while (v41 != v47);
                    }
                    goto LABEL_43;
                }
              }
              v43 = (float32x4_t)v59;
LABEL_43:
              v63 = v43;
              v67 = v42;
              v16[11] = v43;
              v16[12] = v42;
              result = (uint64_t)sub_1B1876218(v8, v15);
              if (result)
              {
                *(float32x4_t *)(result + 176) = v63;
                *(float32x4_t *)(result + 192) = v67;
              }
            }
          }
        }
        else
        {
          v16[11] = 0u;
          v16[12] = 0u;
          result = (uint64_t)sub_1B1876218(v8, v15);
          if (result)
          {
            *(_OWORD *)(result + 176) = 0u;
            *(_OWORD *)(result + 192) = 0u;
          }
        }
        ++v15;
      }
      while (v15 != v14);
    }
    *(_BYTE *)(v8 + 200) |= 2u;
  }
  return result;
}

const __CFArray *sub_1B1874BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  result = *(const __CFArray **)(a1 + 96);
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

const void *sub_1B1874C3C(uint64_t a1, CFIndex idx, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  const __CFArray *v11;

  v8 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (!*(_QWORD *)(a1 + 96))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh->_originalData.elements");
  if (v8 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v11 = *(const __CFArray **)(a1 + 144);
    return CFArrayGetValueAtIndex(v11, idx);
  }
  if (!v8)
  {
    v11 = *(const __CFArray **)(a1 + 96);
    return CFArrayGetValueAtIndex(v11, idx);
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"CFXMeshGetElementAtIndex");
  return 0;
}

void sub_1B1874D10(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  CFArrayRef *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex Count;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[5];

  v8 = a4;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (v8 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v12 = (CFArrayRef *)(a1 + 112);
  }
  else if (v8)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
    v12 = 0;
  }
  else
  {
    v12 = (CFArrayRef *)(a1 + 64);
  }
  v13 = (char *)v12 + 2 * a2;
  v16 = v13[8];
  v15 = v13 + 8;
  v14 = v16;
  if (v16 != -1 && v15[1] > a3)
  {
    v17 = v14 + a3;
    Count = CFArrayGetCount(*v12);
    if (v17 >= Count)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Mesh sources are malformed"), v18, v19, v20, v21, v22, v23, (uint64_t)"sourceIndex < oldSourceCount");
    CFArrayRemoveValueAtIndex(*v12, v17);
    v25 = *(void **)(a1 + 152);
    if (v25)
    {
      free(v25);
      *(_QWORD *)(a1 + 152) = 0;
    }
    if (v8)
    {
      sub_1B1873C04(a1, (uint64_t)v12);
    }
    else
    {
      if (Count - 1 > v17)
      {
        do
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 104) + v17) = *(_BYTE *)(*(_QWORD *)(a1 + 104) + v17 + 1);
          ++v17;
        }
        while (Count - 1 != v17);
      }
      sub_1B1873C04(a1, (uint64_t)v12);
      v26 = MEMORY[0x1E0C809B0];
      *(_BYTE *)(a1 + 200) &= ~4u;
      v32[0] = v26;
      v32[1] = 0x40000000;
      v32[2] = sub_1B1873FCC;
      v32[3] = &unk_1E63D7C30;
      v32[4] = a1;
      sub_1B1873EE0(a1, 0, (uint64_t)v32, v27, v28, v29, v30, v31);
      sub_1B1873B48(a1);
    }
    sub_1B1873AE8(a1);
  }
}

uint64_t sub_1B1874ECC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1874ED4(a1, a2, a3, a4, 0, a6, a7, a8);
}

uint64_t sub_1B1874ED4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  char v10;
  CFArrayRef *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  unsigned __int8 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  CFIndex v34;
  CFIndex Count;
  void *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[5];

  v9 = a4;
  v10 = a3;
  if (a1)
  {
    if (a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (!a2)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
LABEL_4:
  if ((_DWORD)a5 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v13 = (CFArrayRef *)(a1 + 112);
  }
  else if ((_DWORD)a5)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
    v13 = 0;
  }
  else
  {
    v13 = (CFArrayRef *)(a1 + 64);
  }
  v14 = sub_1B17ED7B4((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v19 = v14;
  if (v14)
  {
    v20 = v14;
    if ((v14 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_19:
    v34 = 0;
  }
  else
  {
    if (sub_1B1875540(a1, 0, 0, a5, v15, v16, v17, v18))
    {
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Can't add two position sources"), v22, v23, v24, v25, v26, v27, v44);
      return -1;
    }
    sub_1B1874494(a1, v21, v22, v23, v24, v25, v26, v27);
    v20 = v19;
LABEL_17:
    while (1)
    {
      v29 = (char *)v13 + 2 * v20;
      v32 = v29[8];
      v30 = v29 + 8;
      v31 = v32;
      if (v32 != -1)
        break;
      v33 = (char)v20--;
      if (v33 < 1)
        goto LABEL_19;
    }
    v34 = v30[1] + v31;
  }
  Count = CFArrayGetCount(*v13);
  CFArrayInsertValueAtIndex(*v13, v34, a2);
  if (!(_DWORD)a5)
  {
    v36 = *(void **)(a1 + 152);
    if (v36)
    {
      free(v36);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v37 = malloc_type_realloc(*(void **)(a1 + 104), Count + 1, 0x7E1412FFuLL);
    *(_QWORD *)(a1 + 104) = v37;
    if (Count > v34)
    {
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 104) + Count) = *(_BYTE *)(*(_QWORD *)(a1 + 104) + Count - 1);
        --Count;
      }
      while (Count > v34);
      v37 = *(_BYTE **)(a1 + 104);
    }
    v37[v34] = v10;
    sub_1B1873C04(a1, (uint64_t)v13);
    v38 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 200) &= ~4u;
    v45[0] = v38;
    v45[1] = 0x40000000;
    v45[2] = sub_1B1873FCC;
    v45[3] = &unk_1E63D7C30;
    v45[4] = a1;
    sub_1B1873EE0(a1, 0, (uint64_t)v45, v39, v40, v41, v42, v43);
    sub_1B1873B48(a1);
    if (!v9)
      return *((unsigned __int8 *)v13 + 2 * v19 + 9) - 1;
    goto LABEL_23;
  }
  sub_1B1873BA0(a1);
  if (v9)
LABEL_23:
    sub_1B1873AE8(a1);
  return *((unsigned __int8 *)v13 + 2 * v19 + 9) - 1;
}

uint64_t sub_1B1875140(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFIndex v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  CFIndex v38;
  CFIndex Count;
  uint64_t v40;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[5];

  v8 = a5;
  v9 = a4;
  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
    if (a2)
    {
LABEL_3:
      if (!v9)
        goto LABEL_9;
      goto LABEL_7;
    }
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"meshSource");
  if (!v9)
    goto LABEL_9;
LABEL_7:
  if (v8 == 1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Renderable data kind must not give a channel"), a3, a4, a5, a6, a7, a8, (uint64_t)"(dataKind != kCFXMeshDataKindRenderable) || (channel == kCFXSharedRenderableIndexChannel)");
LABEL_12:
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v13 = a1 + 112;
    goto LABEL_13;
  }
LABEL_9:
  if (v8 == 1)
    goto LABEL_12;
  if (v8)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
    v13 = 0;
  }
  else
  {
    v13 = a1 + 64;
  }
LABEL_13:
  v14 = sub_1B17ED7B4((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v21 = v14;
  v22 = v13 + 2 * v14;
  v25 = *(char *)(v22 + 8);
  v24 = v22 + 8;
  v23 = v25;
  if (v25 != -1 && *(unsigned __int8 *)(v24 + 1) > a3)
  {
    v26 = v23 + a3;
    CFArraySetValueAtIndex(*(CFMutableArrayRef *)v13, v26, a2);
    if (v9 != 255)
      *(_BYTE *)(*(_QWORD *)(v13 + 40) + v26) = v9;
    if (v8)
      goto LABEL_40;
    goto LABEL_37;
  }
  if (v9 == 255)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. need to provide a valid channel index when adding a new source"), v15, v16, v17, v18, v19, v20, (uint64_t)"channel != kAutomaticChannelIndex");
    if (v21 < 0)
    {
LABEL_26:
      v38 = 0;
      goto LABEL_27;
    }
  }
  else if (v14 < 0)
  {
    goto LABEL_26;
  }
  v32 = v21;
  while (1)
  {
    v33 = v13 + 2 * v32;
    v36 = *(char *)(v33 + 8);
    v35 = v33 + 8;
    v34 = v36;
    if (v36 != -1)
      break;
    v37 = (char)v32--;
    if (v37 < 1)
      goto LABEL_26;
  }
  v40 = *(unsigned __int8 *)(v35 + 1);
  if (v40 < a3)
    return 0;
  v38 = v40 + v34;
LABEL_27:
  Count = CFArrayGetCount(*(CFArrayRef *)v13);
  CFArrayInsertValueAtIndex(*(CFMutableArrayRef *)v13, v38, a2);
  if (!v8)
  {
    v42 = *(void **)(a1 + 152);
    if (v42)
    {
      free(v42);
      *(_QWORD *)(a1 + 152) = 0;
    }
    v43 = malloc_type_realloc(*(void **)(a1 + 104), Count + 1, 0x7E1412FFuLL);
    *(_QWORD *)(a1 + 104) = v43;
    if (Count > v38)
    {
      do
      {
        *(_BYTE *)(*(_QWORD *)(a1 + 104) + Count) = *(_BYTE *)(*(_QWORD *)(a1 + 104) + Count - 1);
        --Count;
      }
      while (Count > v38);
      v43 = *(_BYTE **)(a1 + 104);
    }
    v43[v38] = v9;
    sub_1B1873C04(a1, v13);
LABEL_37:
    v44 = MEMORY[0x1E0C809B0];
    *(_BYTE *)(a1 + 200) &= ~4u;
    v52[0] = v44;
    v52[1] = 0x40000000;
    v52[2] = sub_1B1873FCC;
    v52[3] = &unk_1E63D7C30;
    v52[4] = a1;
    sub_1B1873EE0(a1, 0, (uint64_t)v52, v27, v28, v29, v30, v31);
    if (!v21)
      sub_1B1874494(a1, v45, v46, v47, v48, v49, v50, v51);
    sub_1B1873B48(a1);
    goto LABEL_40;
  }
  sub_1B1873BA0(a1);
LABEL_40:
  sub_1B1873AE8(a1);
  return 1;
}

uint64_t sub_1B1875414(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1875140(a1, a2, a3, a4, 0, a6, a7, a8);
}

uint64_t sub_1B187541C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1875140(a1, a2, a3, 0, 1, a6, a7, a8);
}

uint64_t sub_1B1875428(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  CFArrayRef *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a3;
  if (a1)
  {
    if (a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (!a2)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
LABEL_4:
  if (v8 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v11 = (CFArrayRef *)(a1 + 112);
  }
  else if (v8)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
    v11 = 0;
  }
  else
  {
    v11 = (CFArrayRef *)(a1 + 64);
  }
  v12 = (char *)v11 + 2 * (int)sub_1B17ED7B4((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = v12[8];
  v13 = v12 + 8;
  v14 = v15;
  if (v15 == -1)
    return -1;
  v16 = v13[1];
  if (!v13[1])
    return -1;
  v17 = 0;
  while (CFArrayGetValueAtIndex(*v11, v14 + v17) != a2)
  {
    if (v16 == ++v17)
      return -1;
  }
  return v17;
}

const void *sub_1B1875540(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  CFArrayRef *v12;
  CFArrayRef *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = a4;
  if ((_DWORD)a4 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v12 = (CFArrayRef *)(a1 + 112);
    if (a1)
      goto LABEL_9;
  }
  else if ((_DWORD)a4)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
    v12 = 0;
    if (a1)
      goto LABEL_9;
  }
  else
  {
    v12 = (CFArrayRef *)(a1 + 64);
    if (a1)
      goto LABEL_9;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
LABEL_9:
  if (v8 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v13 = (CFArrayRef *)(a1 + 112);
  }
  else if (v8)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"__meshDataForDataKind");
    v13 = 0;
  }
  else
  {
    v13 = (CFArrayRef *)(a1 + 64);
  }
  v14 = (char *)v13 + 2 * a2;
  v17 = v14[8];
  v16 = v14 + 8;
  v15 = v17;
  if (v17 == -1 || v16[1] <= a3)
    return 0;
  v18 = v15 + a3;
  if (v18 >= CFArrayGetCount(*v13))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Mesh sources are malformed"), v19, v20, v21, v22, v23, v24, (uint64_t)"sourceIndex < CFArrayGetCount(meshData->sources)");
  if (v18 == -1)
    return 0;
  else
    return CFArrayGetValueAtIndex(*v12, v18);
}

BOOL sub_1B18756B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  _QWORD *v11;
  CFArrayRef *v12;
  char *v14;
  char *v15;
  CFIndex v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v8 = a3;
  v9 = a2;
  if ((_DWORD)a3 == 1)
  {
    if ((_DWORD)a4)
      sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v11 = (_QWORD *)(a1 + 112);
  }
  else
  {
    if ((_DWORD)a3)
      sub_1B2227B70(a1, a2, a3, a4, a5, a6, a7, a8);
    v11 = (_QWORD *)(a1 + 64);
  }
  if (!*v11)
    return 0;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (v8 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v12 = (CFArrayRef *)(a1 + 112);
  }
  else
  {
    v12 = (CFArrayRef *)(a1 + 64);
  }
  v14 = (char *)v12 + 2 * v9;
  v17 = v14[8];
  v15 = v14 + 8;
  v16 = v17;
  if (v17 != -1)
  {
    if (v15[1])
    {
      if (CFArrayGetCount(*v12) <= v16)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Mesh sources are malformed"), v18, v19, v20, v21, v22, v23, (uint64_t)"sourceIndex < CFArrayGetCount(meshData->sources)");
    }
    else
    {
      v16 = -1;
    }
  }
  return v16 != -1;
}

void sub_1B18757DC(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"source");
LABEL_3:
  v10 = sub_1B1875428(a1, a2, 0, a4, a5, a6, a7, a8);
  if (v10 != -1)
  {
    v18 = v10;
    v19 = sub_1B17ED7B4((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17);
    sub_1B1874D10(a1, v19, v18, 0, v20, v21, v22, v23);
  }
}

const void *sub_1B187589C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  while (1)
  {
    result = sub_1B1875540(a1, a2, 0, 0, a5, a6, a7, a8);
    if (!result)
      break;
    sub_1B1874D10(a1, a2, 0, 0, v11, v12, v13, v14);
  }
  return result;
}

void sub_1B1875914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFIndex i;
  _QWORD *ValueAtIndex;
  const void *v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v9 = *(const __CFArray **)(a1 + 64);
  if (v9)
  {
    Count = CFArrayGetCount(v9);
    if (Count >= 1)
    {
      v11 = Count;
      for (i = 0; i != v11; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v9, i);
        v14 = (const void *)ValueAtIndex[9];
        if (v14 && (ValueAtIndex[11] & 4) == 0 && !ValueAtIndex[10])
        {
          CFRelease(v14);
          ValueAtIndex[9] = 0;
        }
      }
    }
  }
}

void sub_1B18759BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  __int128 v11;
  __int128 v12;
  const void *v13;
  const void *v14;
  const __CFAllocator *v15;
  const __CFArray *v16;
  CFMutableArrayRef MutableCopy;
  CFIndex Count;
  const __CFArray *v19;
  CFIndex v20;
  CFIndex i;
  const void *ValueAtIndex;
  const void *v23;
  CFIndex j;
  const void *v25;
  const void *v26;
  const void *v27;
  void *v28;
  const void *v29;
  void *v30;
  uint64_t v31;
  size_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  void *v47;

  v8 = a3;
  if (a1)
  {
    if (a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  if (!a2)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dst");
LABEL_4:
  v11 = *(_OWORD *)(a1 + 72);
  *(_WORD *)(a2 + 88) = *(_WORD *)(a1 + 88);
  *(_OWORD *)(a2 + 72) = v11;
  v12 = *(_OWORD *)(a1 + 120);
  *(_WORD *)(a2 + 136) = *(_WORD *)(a1 + 136);
  *(_OWORD *)(a2 + 120) = v12;
  v13 = *(const void **)(a2 + 64);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a2 + 64) = 0;
  }
  v14 = *(const void **)(a2 + 112);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a2 + 112) = 0;
  }
  v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  *(_QWORD *)(a2 + 64) = CFArrayCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, *(CFArrayRef *)(a1 + 64));
  v16 = *(const __CFArray **)(a1 + 112);
  if (v16)
    MutableCopy = CFArrayCreateMutableCopy(v15, 0, v16);
  else
    MutableCopy = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE20], 0, MEMORY[0x1E0C9B378]);
  *(_QWORD *)(a2 + 112) = MutableCopy;
  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  v19 = *(const __CFArray **)(a1 + 112);
  if (v19)
  {
    v20 = CFArrayGetCount(v19);
    if (!v8)
      goto LABEL_23;
  }
  else
  {
    v20 = 0;
    if (!v8)
      goto LABEL_23;
  }
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), i);
      v23 = (const void *)sub_1B17EE2C0((uint64_t)ValueAtIndex);
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 64), i, v23);
      CFRelease(v23);
    }
  }
  if (v20 >= 1)
  {
    for (j = 0; j != v20; ++j)
    {
      v25 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 112), j);
      v26 = (const void *)sub_1B17EE2C0((uint64_t)v25);
      CFArraySetValueAtIndex(*(CFMutableArrayRef *)(a2 + 112), j, v26);
      CFRelease(v26);
    }
  }
LABEL_23:
  v27 = *(const void **)(a1 + 104);
  free(*(void **)(a2 + 104));
  v28 = malloc_type_calloc(Count, 1uLL, 0x100004077774924uLL);
  *(_QWORD *)(a2 + 104) = v28;
  if (v27)
    memcpy(v28, v27, Count);
  v29 = *(const void **)(a1 + 152);
  free(*(void **)(a2 + 152));
  v30 = malloc_type_calloc(v20, 1uLL, 0x100004077774924uLL);
  *(_QWORD *)(a2 + 152) = v30;
  if (v29)
    memcpy(v30, v29, v20);
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 160);
  v31 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v31)
  {
    v32 = 4 * v31;
    v33 = malloc_type_realloc(*(void **)(a2 + 168), 4 * v31, 0xF0AD4153uLL);
    *(_QWORD *)(a2 + 168) = v33;
    memcpy(v33, *(const void **)(a1 + 168), v32);
  }
  else
  {
    free(*(void **)(a2 + 168));
    *(_QWORD *)(a2 + 168) = 0;
  }
  if (*(_QWORD *)(a1 + 176))
  {
    v38 = sub_1B1875540(a1, 0, 0, 0, v34, v35, v36, v37);
    v46 = 4 * sub_1B17EDAE0((uint64_t)v38, v39, v40, v41, v42, v43, v44, v45);
    v47 = malloc_type_realloc(*(void **)(a2 + 176), v46, 0xB0799675uLL);
    *(_QWORD *)(a2 + 176) = v47;
    memcpy(v47, *(const void **)(a1 + 176), v46);
    if (!v8)
      return;
    goto LABEL_32;
  }
  free(*(void **)(a2 + 176));
  *(_QWORD *)(a2 + 176) = 0;
  if (v8)
LABEL_32:
    sub_1B1875F0C(a1, a2);
}

CFIndex sub_1B1875CD4(uint64_t a1, _QWORD *a2)
{
  CFIndex result;
  unsigned __int8 *v5;
  uint64_t v6;
  CFIndex v7;
  unsigned __int8 *v8;
  int v9;

  result = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (result)
  {
    v5 = *(unsigned __int8 **)(a1 + 104);
    v6 = *v5;
    if (result < 2)
    {
LABEL_6:
      if (a2)
        *a2 = v6;
      return 1;
    }
    else
    {
      v7 = result - 1;
      v8 = v5 + 1;
      while (1)
      {
        v9 = *v8++;
        if (v9 != (_DWORD)v6)
          return 0;
        if (!--v7)
          goto LABEL_6;
      }
    }
  }
  return result;
}

uint64_t sub_1B1875D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh->_originalData.sourceChannels");
    v9 = *(_QWORD *)(a1 + 104);
  }
  return *(unsigned __int8 *)(v9 + a2);
}

uint64_t sub_1B1875D94(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v11 = a1 + 2 * a2;
  v14 = *(char *)(v11 + 72);
  v13 = v11 + 72;
  v12 = v14;
  if (v14 == -1 || *(unsigned __int8 *)(v13 + 1) <= a3)
    goto LABEL_8;
  v15 = v12 + a3;
  if (v12 + a3 >= CFArrayGetCount(*(CFArrayRef *)(a1 + 64)))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Mesh sources are malformed"), v16, v17, v18, v19, v20, v21, (uint64_t)"sourceIndex < CFArrayGetCount(meshData->sources)");
  if (v15 == -1)
  {
LABEL_8:
    sub_1B17ED08C(a2);
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Could not find source with semantic %@ at index %d"), v22, v23, v24, v25, v26, v27, (uint64_t)"sourceIndex != kCFNotFound");
    v15 = -1;
  }
  return *(unsigned __int8 *)(*(_QWORD *)(a1 + 104) + v15);
}

const void *sub_1B1875E70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1875540(a1, 0, 0, a2, a5, a6, a7, a8);
}

CFArrayRef sub_1B1875E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  CFArrayRef *v10;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (v8 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v10 = (CFArrayRef *)(a1 + 112);
  }
  else
  {
    if (v8)
      sub_1B2227B70(a1, a2, a3, a4, a5, a6, a7, a8);
    v10 = (CFArrayRef *)(a1 + 64);
  }
  return CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE20], *v10);
}

uint64_t sub_1B1875F00(uint64_t a1, int a2)
{
  return *(unsigned __int8 *)(a1 + 2 * a2 + 73);
}

void sub_1B1875F0C(uint64_t a1, uint64_t a2)
{
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  const void *ValueAtIndex;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  CFIndex v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFIndex v24;
  CFIndex v25;
  CFIndex v26;
  const void *v27;
  CFIndex v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  uint64_t v39;

  Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
  if (Count >= 1)
  {
    v5 = Count;
    v6 = 0;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v6);
      v15 = sub_1B18F5B98((uint64_t)ValueAtIndex, v8, v9, v10, v11, v12, v13, v14);
      if (!v15)
        goto LABEL_17;
      v16 = *(const void **)(v15 + 16);
      if (v16 == ValueAtIndex)
        goto LABEL_17;
      v17 = CFArrayGetCount(*(CFArrayRef *)(a1 + 64));
      if (v17 < 1)
        break;
      v24 = v17;
      if (CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), 0) == v16)
      {
        v28 = 0;
      }
      else
      {
        v25 = 1;
        while (1)
        {
          v26 = v25;
          if (v24 == v25)
            break;
          v27 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 64), v25);
          v25 = v26 + 1;
          if (v27 == v16)
          {
            v28 = v26;
            goto LABEL_13;
          }
        }
        v28 = 0;
LABEL_13:
        if (v26 >= v24)
          break;
      }
      v29 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), v6);
      v37 = sub_1B18F5B98((uint64_t)v29, v30, v31, v32, v33, v34, v35, v36);
      v38 = CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 64), v28);
      sub_1B18F3B34(v37, (uint64_t)v38);
LABEL_17:
      if (++v6 == v5)
        return;
    }
    if ((byte_1EEF65EB8 & 1) == 0)
    {
      byte_1EEF65EB8 = 1;
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: __CFXMeshCopy - unable to resolve interleaved mesh"), v18, v19, v20, v21, v22, v23, v39);
    }
    goto LABEL_17;
  }
}

uint64_t sub_1B1876058(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  v2 = 0;
  result = 0;
  v4 = a1 + 73;
  do
  {
    result += *(unsigned __int8 *)(v4 + v2);
    v2 += 2;
  }
  while (v2 != 18);
  return result;
}

uint64_t sub_1B1876080(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 200) >> 7;
}

BOOL sub_1B187608C(uint64_t a1, int a2)
{
  return *(_BYTE *)(a1 + 2 * a2 + 73) != 0;
}

const void *sub_1B18760A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1875540(a1, 1, 0, a2, a5, a6, a7, a8);
}

uint64_t sub_1B18760B0(uint64_t a1, _DWORD *a2)
{
  if (a2)
    *a2 = *(_DWORD *)(a1 + 160);
  return *(_QWORD *)(a1 + 168);
}

void sub_1B18760C4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  *(_BYTE *)(a1 + 200) &= ~2u;
  sub_1B1873B48(a1);
  CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 96), a2);
}

CFIndex sub_1B1876128(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  CFRange v11;
  const __CFArray *v12;

  v8 = a3;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (!*(_QWORD *)(a1 + 96))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh->_originalData.elements");
  if (v8 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    v11.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 144));
    v12 = *(const __CFArray **)(a1 + 144);
    goto LABEL_9;
  }
  if (!v8)
  {
    v11.length = CFArrayGetCount(*(CFArrayRef *)(a1 + 96));
    v12 = *(const __CFArray **)(a1 + 96);
LABEL_9:
    v11.location = 0;
    return CFArrayGetFirstIndexOfValue(v12, v11, a2);
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"CFXMeshGetIndexOfElement");
  return -1;
}

const void *sub_1B1876218(uint64_t a1, CFIndex idx)
{
  const __CFArray *Count;

  Count = *(const __CFArray **)(a1 + 144);
  if (Count)
    Count = (const __CFArray *)CFArrayGetCount(Count);
  if ((uint64_t)Count <= idx)
    return 0;
  else
    return CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 144), idx);
}

uint64_t sub_1B1876264(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  if (a2 == 1)
  {
    sub_1B18BA2D4(a1, 1, a3, a4, a5, a6, a7, a8);
    return *(_QWORD *)(a1 + 144);
  }
  else if (a2)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Internal consistency error in %s"), a3, a4, a5, a6, a7, a8, (uint64_t)"CFXMeshGetMeshElements");
    return 0;
  }
  else
  {
    return *(_QWORD *)(a1 + 96);
  }
}

void sub_1B18762F4(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  const __CFAllocator *v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  v10 = *(CFTypeRef *)(a1 + 96);
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 96) = 0;
    }
    if (cf)
    {
      v11 = CFGetAllocator(cf);
      *(_QWORD *)(a1 + 96) = CFArrayCreateMutableCopy(v11, 0, (CFArrayRef)cf);
    }
    *(_BYTE *)(a1 + 200) &= ~2u;
    sub_1B1873B48(a1);
  }
}

void sub_1B1876390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  *(_BYTE *)(a1 + 200) &= ~2u;
  sub_1B1873B48(a1);
  CFArrayRemoveAllValues(*(CFMutableArrayRef *)(a1 + 96));
}

void sub_1B18763EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  CFIndex v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFData *v34;
  uint64_t v35;
  const UInt8 *BytePtr;
  uint64_t v37;
  UInt8 *v38;
  _BYTE *v39;
  UInt8 v40;
  UInt8 *v41;
  __int16 v42;
  UInt8 *v43;
  int v44;
  CFDataRef v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  CFDataRef v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const __CFAllocator *allocator;
  size_t size;

  v10 = sub_1B1874BE0(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((uint64_t)v10 >= 1)
  {
    v16 = v10;
    v17 = 0;
    allocator = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    do
    {
      v18 = sub_1B1874C3C(a1, v17, 1, v11, v12, v13, v14, v15);
      if ((int)sub_1B17A426C((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25) != a2)
      {
        if ((unint64_t)(a2 - 4) < 0xFFFFFFFFFFFFFFFELL)
        {
          sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Can only convert to lines or points element type"), v27, v11, v12, v13, v14, v15, v53);
          return;
        }
        if (!sub_1B17A426C((uint64_t)v18, v26, v27, v11, v12, v13, v14, v15))
        {
          LODWORD(size) = 0;
          v34 = (const __CFData *)sub_1B17A4570((uint64_t)v18, &size);
          v35 = sub_1B17A47FC((uint64_t)v18);
          if ((_DWORD)size == 2)
          {
            BytePtr = CFDataGetBytePtr(v34);
            if (a2 == 3)
              goto LABEL_24;
            if (a2 != 2)
              goto LABEL_25;
            v54 = 3 * v35;
            v37 = 6 * v35;
            v38 = (UInt8 *)malloc_type_calloc(6 * v35, size, 0x9CD0CE31uLL);
            v41 = v38;
            if (v35 >= 1)
            {
              do
              {
                *(_WORD *)v41 = *(_WORD *)BytePtr;
                *((_WORD *)v41 + 1) = *((_WORD *)BytePtr + 1);
                *((_WORD *)v41 + 2) = *((_WORD *)BytePtr + 1);
                *((_WORD *)v41 + 3) = *((_WORD *)BytePtr + 2);
                *((_WORD *)v41 + 4) = *((_WORD *)BytePtr + 2);
                v42 = *(_WORD *)BytePtr;
                BytePtr += 6;
                *((_WORD *)v41 + 5) = v42;
                v41 += 12;
                --v35;
              }
              while (v35);
            }
          }
          else
          {
            if ((_DWORD)size == 1)
            {
              BytePtr = CFDataGetBytePtr(v34);
              if (a2 != 3)
              {
                if (a2 == 2)
                {
                  v54 = 3 * v35;
                  v37 = 6 * v35;
                  v38 = (UInt8 *)malloc_type_calloc(6 * v35, size, 0x5BF38C37uLL);
                  v39 = v38;
                  if (v35 >= 1)
                  {
                    do
                    {
                      *v39 = *BytePtr;
                      v39[1] = BytePtr[1];
                      v39[2] = BytePtr[1];
                      v39[3] = BytePtr[2];
                      v39[4] = BytePtr[2];
                      v40 = *BytePtr;
                      BytePtr += 3;
                      v39[5] = v40;
                      v39 += 6;
                      --v35;
                    }
                    while (v35);
                  }
                  goto LABEL_23;
                }
LABEL_25:
                sub_1B1873B48(a1);
                goto LABEL_26;
              }
LABEL_24:
              v49 = CFDataCreate(allocator, BytePtr, 3 * v35 * size);
              sub_1B17A3C5C((uint64_t)v18, 3, 3 * v35, v49, size, v50, v51, v52);
              CFRelease(v49);
              goto LABEL_25;
            }
            BytePtr = CFDataGetBytePtr(v34);
            if (a2 == 3)
              goto LABEL_24;
            if (a2 != 2)
              goto LABEL_25;
            v54 = 3 * v35;
            v37 = 6 * v35;
            v38 = (UInt8 *)malloc_type_calloc(6 * v35, size, 0xB6420FDBuLL);
            v43 = v38;
            if (v35 >= 1)
            {
              do
              {
                *(_DWORD *)v43 = *(_DWORD *)BytePtr;
                *((_DWORD *)v43 + 1) = *((_DWORD *)BytePtr + 1);
                *((_DWORD *)v43 + 2) = *((_DWORD *)BytePtr + 1);
                *((_DWORD *)v43 + 3) = *((_DWORD *)BytePtr + 2);
                *((_DWORD *)v43 + 4) = *((_DWORD *)BytePtr + 2);
                v44 = *(_DWORD *)BytePtr;
                BytePtr += 12;
                *((_DWORD *)v43 + 5) = v44;
                v43 += 24;
                --v35;
              }
              while (v35);
            }
          }
LABEL_23:
          v45 = CFDataCreate(allocator, v38, v37 * size);
          sub_1B17A3C5C((uint64_t)v18, 2, v54, v45, size, v46, v47, v48);
          CFRelease(v45);
          free(v38);
          goto LABEL_25;
        }
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Can only convert from triangle array to another element type"), v28, v29, v30, v31, v32, v33, v53);
      }
LABEL_26:
      ++v17;
    }
    while ((const __CFArray *)v17 != v16);
  }
}

uint64_t sub_1B1876730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  return (*(unsigned __int8 *)(a1 + 200) >> 2) & 1;
}

uint64_t sub_1B187677C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  return sub_1B193E568(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B18767C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  return *(_QWORD *)(a1 + 208);
}

uint64_t sub_1B187680C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mesh");
  return *(_BYTE *)(a1 + 200) & 1;
}

BOOL sub_1B1876858(float32x4_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float a10, float32x4_t a11, double a12, double a13, __n128 a14, __n128 a15)
{
  int v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float32x4_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  float v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint32x4_t v69;
  unsigned __int32 v70;
  __n128 *v71;
  __n128 v73;
  __n128 v74;
  unint64_t v75;
  int v76;

  v15 = a3 - a2;
  if (a3 <= a2)
  {
    return 0;
  }
  else
  {
    v17 = a1[3].i64[1];
    v18 = a1[4].u8[5];
    v19 = a2;
    v76 = a1[4].u8[6];
    v20 = a1[4].u8[4];
    v75 = a3;
    v21 = 1;
    do
    {
      v22 = a1[1].u8[10];
      if (a1[1].i8[10])
      {
        if ((v19 & 1) != 0)
          v23 = 1;
        else
          v23 = 2;
        if ((v19 & 1) != 0)
          v24 = 2;
        else
          v24 = 1;
        v25 = v22 != 5;
        v26 = v22 == 1;
        if (v22 == 1)
          v25 = 1;
        v27 = 1;
        if (v22 == 1)
          v28 = v23;
        else
          v28 = 2;
        if (v26)
          v29 = v24;
        else
          v29 = 1;
      }
      else
      {
        v25 = 3;
        v27 = 3;
        v28 = 2;
        v29 = 1;
      }
      v30 = a1->i64[0];
      if (a1->i64[0])
      {
        v31 = a1[1].u8[11];
        v32 = a1[2].i64[1];
        v33 = a1[3].i64[0];
        switch(v31)
        {
          case 4:
            v34 = *(_DWORD *)(v30 + 4 * (v32 + v33 * v19 * v25));
            v39 = v27 * v19;
            v36 = *(_DWORD *)(v30 + 4 * (v32 + (v29 + v39) * v33));
            v37 = *(_DWORD *)(v30 + 4 * (v32 + (v39 + v28) * v33));
            break;
          case 2:
            v34 = *(unsigned __int16 *)(v30 + 2 * (v32 + v33 * v19 * v25));
            v40 = v27 * v19;
            v36 = *(unsigned __int16 *)(v30 + 2 * (v32 + (v29 + v40) * v33));
            v37 = *(unsigned __int16 *)(v30 + 2 * (v32 + (v40 + v28) * v33));
            break;
          case 1:
            v34 = *(unsigned __int8 *)(v30 + v32 + v33 * v19 * v25);
            v35 = v27 * v19;
            v36 = *(unsigned __int8 *)(v30 + v32 + (v29 + v35) * v33);
            v37 = *(unsigned __int8 *)(v30 + v32 + (v35 + v28) * v33);
            break;
          default:
            sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid bytes per index (%d)"), a3, a4, a5, a6, a7, a8, a1[1].u8[11]);
            v37 = 0;
            v36 = 0;
            v34 = 0;
            break;
        }
      }
      else
      {
        v34 = v19 * v25;
        v38 = v27 * v19;
        v36 = v29 + v38;
        v37 = v38 + v28;
      }
      v41 = v17 + (v34 * v18);
      if (v76 == 1)
      {
        a14.n128_u64[0] = *(_QWORD *)v41;
        a14.n128_u32[2] = *(_DWORD *)(v41 + 8);
        v42 = v17 + (v36 * v18);
        a15.n128_u64[0] = *(_QWORD *)v42;
        a15.n128_u32[2] = *(_DWORD *)(v42 + 8);
        v43 = v17 + (v37 * v18);
        a9.i64[0] = *(_QWORD *)v43;
        a9.i32[2] = *(_DWORD *)(v43 + 8);
      }
      else
      {
        *(double *)v44.i64 = sub_1B198D4F8(v20, (const float *)v41, a3, a4, a5, a6, a7, a8, a9, a10, a11.f32[0]);
        v74 = (__n128)v44;
        *(double *)v53.i64 = sub_1B198D4F8(v20, (const float *)(v17 + (v36 * v18)), v45, v46, v47, v48, v49, v50, v44, v51, v52);
        v73 = (__n128)v53;
        *(double *)a9.i64 = sub_1B198D4F8(v20, (const float *)(v17 + (v37 * v18)), v54, v55, v56, v57, v58, v59, v53, v60, v61);
        a15 = v73;
        a14 = v74;
      }
      v62 = (float32x4_t)a15;
      v62.i32[3] = 0;
      v63 = a9;
      v63.i32[3] = 0;
      v64 = vminnmq_f32(v62, v63);
      v65 = (float32x4_t)a14;
      v65.i32[3] = 0;
      v64.i32[3] = 0;
      v66 = vminnmq_f32(v65, v64);
      v67 = vmaxnmq_f32(v62, v63);
      v67.i32[3] = 0;
      v68 = vmaxnmq_f32(v65, v67);
      v66.i32[3] = 1.0;
      v68.i32[3] = 1.0;
      v65.i64[0] = 0x3F0000003F000000;
      v65.i64[1] = 0x3F0000003F000000;
      a11 = vabdq_f32(a1[5], vmulq_f32(vaddq_f32(v66, v68), v65));
      v69 = (uint32x4_t)vcgeq_f32(vaddq_f32(a1[6], vmulq_f32(vsubq_f32(v68, v66), v65)), a11);
      v69.i32[3] = v69.i32[2];
      a10 = COERCE_FLOAT(vminvq_u32(v69));
      if ((LODWORD(a10) & 0x80000000) != 0)
      {
        v70 = a1[200].u32[0];
        a1[200].i32[0] = v70 + 1;
        v71 = (__n128 *)&a1[3 * v70];
        v71[8] = a14;
        v71[9] = a15;
        v71[10] = (__n128)a9;
        if (a1[200].i32[0] == 64)
        {
          a1[200].i32[0] = 0;
          if (((*(uint64_t (**)(void))(a1[7].i64[0] + 16))() & 1) != 0)
            break;
        }
      }
      v21 = ++v19 < v75;
      --v15;
    }
    while (v15);
  }
  return v21;
}

uint64_t sub_1B1876B54(uint64_t a1, uint64_t a2, float32x4_t a3, float32x4_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  CFIndex i;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  double v56;
  double v57;
  __n128 v58;
  __n128 v59;
  double v60;
  __n128 v61;
  __n128 v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t j;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v75;
  __int128 v76;
  __int128 v77;
  float32x4_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  float32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  float32x4_t v86;
  float32x4_t v87;
  __int128 v88;
  _BYTE v89[3072];
  int v90;

  v12 = sub_1B1875540(a1, 0, 0, 0, a7, a8, a9, a10);
  result = sub_1B17EDAE0((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
  if (result)
  {
    result = (uint64_t)sub_1B1874BE0(a1, v21, v22, v23, v24, v25, v26, v27);
    if (result)
    {
      v35 = result;
      memset(v89, 0, 384);
      v88 = 0u;
      v85 = 0u;
      v82 = 0u;
      v83 = 0;
      v80 = 0u;
      v81 = 0u;
      result = sub_1B17ED6C4((uint64_t)v12, v28, v29, v30, v31, v32, v33, v34);
      v84 = result;
      *(_QWORD *)&v85 = v41;
      v86 = a3;
      v87 = a4;
      v90 = 0;
      *(_QWORD *)&v88 = a2;
      if (v35 >= 1)
      {
        for (i = 0; i != v35; ++i)
        {
          v43 = sub_1B1874C3C(a1, i, 0, v36, v37, v38, v39, v40);
          sub_1B17A4804((uint64_t)v43, 0, v44, v45, v46, v47, v48, v49, (uint64_t)&v76);
          v80 = v76;
          v81 = v77;
          v82 = v78;
          v83 = v79;
          if (DWORD2(v76) < 0x101)
          {
            result = sub_1B1876858((float32x4_t *)&v80, 0, DWORD2(v76), v50, v51, v52, v53, v54, v78, *(float *)&v77, v55, v56, v57, v58, v59);
            if ((result & 1) != 0)
              return result;
          }
          else
          {
            v75 = 0;
            v76 = v80;
            v77 = v81;
            v78 = v82;
            v79 = v83;
            result = sub_1B17A8F58((uint64_t)v43, &v76, v84, v85, (uint64_t)&v75, v52, v53, v54);
            v63 = v75;
            if (v75)
            {
              v64 = result;
              v65 = 0;
              for (j = 0; j < v63; ++j)
              {
                v67 = *(float32x4_t *)(v64 + v65);
                v68 = *(float32x4_t *)(v64 + v65 + 16);
                v69 = vaddq_f32(v87, v68);
                v70 = (float32x4_t)vcgeq_f32(v69, vabdq_f32(v86, v67));
                v70.i32[3] = v70.i32[2];
                v70.i32[0] = vminvq_u32((uint32x4_t)v70);
                v71 = v65 + 32;
                if (v70.i32[0] < 0)
                {
                  if (v71 >= DWORD2(v80))
                    v72 = DWORD2(v80);
                  else
                    v72 = v71;
                  result = sub_1B1876858((float32x4_t *)&v80, v65, v72, v36, v37, v38, v39, v40, v70, v69.f32[0], v67, *(double *)v68.i64, v60, v61, v62);
                  if ((result & 1) != 0)
                    return result;
                  v63 = v75;
                }
                v65 = v71;
              }
            }
          }
        }
        if (v90)
          return (*(uint64_t (**)(uint64_t, _BYTE *))(a2 + 16))(a2, v89);
      }
    }
  }
  return result;
}

id sub_1B1876D64(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;

  sub_1B1873AE8(a1);
  v2 = *(const void **)(a1 + 96);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v4 = *(const void **)(a1 + 144);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v5 = *(const void **)(a1 + 112);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 112) = 0;
  }
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 152));
  free(*(void **)(a1 + 168));
  free(*(void **)(a1 + 176));
  v13 = *(void **)(a1 + 192);
  if (v13)
    free(v13);
  v14 = *(void **)(a1 + 184);
  if (v14)
    free(v14);
  return sub_1B193E38C(a1, v6, v7, v8, v9, v10, v11, v12);
}

__CFString *sub_1B1876E04(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFIndex v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  CFIndex v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v55[5];
  _QWORD v56[5];

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v10 = sub_1B193E568(a1, v3, v4, v5, v6, v7, v8, v9);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXMesh %p \"%@\"\n"), a1, v10);
  if ((uint64_t)sub_1B1874BE0(a1, v11, v12, v13, v14, v15, v16, v17) >= 1)
  {
    v23 = 0;
    do
    {
      v24 = sub_1B1874C3C(a1, v23, 0, v18, v19, v20, v21, v22);
      CFStringAppendFormat(Mutable, 0, CFSTR("  element%d: %@\n"), v23++, v24);
    }
    while (v23 < (uint64_t)sub_1B1874BE0(a1, v25, v26, v27, v28, v29, v30, v31));
  }
  v32 = MEMORY[0x1E0C809B0];
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 0x40000000;
  v56[2] = sub_1B1876FAC;
  v56[3] = &unk_1E63D7C70;
  v56[4] = Mutable;
  sub_1B1873EE0(a1, 0, (uint64_t)v56, v18, v19, v20, v21, v22);
  if (*(_QWORD *)(a1 + 112))
  {
    if ((uint64_t)sub_1B1874BE0(a1, v33, v34, v35, v36, v37, v38, v39) >= 1)
    {
      v45 = 0;
      do
      {
        v46 = sub_1B1874C3C(a1, v45, 1, v40, v41, v42, v43, v44);
        CFStringAppendFormat(Mutable, 0, CFSTR("  renderable element%d: %@\n"), v45++, v46);
      }
      while (v45 < (uint64_t)sub_1B1874BE0(a1, v47, v48, v49, v50, v51, v52, v53));
    }
    v55[0] = v32;
    v55[1] = 0x40000000;
    v55[2] = sub_1B187702C;
    v55[3] = &unk_1E63D7C90;
    v55[4] = Mutable;
    sub_1B1873EE0(a1, 1, (uint64_t)v55, v40, v41, v42, v43, v44);
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

void sub_1B1876FAC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  __CFString *v8;
  const __CFString *v9;

  v8 = *(__CFString **)(a1 + 32);
  v9 = sub_1B17ED08C(a3);
  if (a4 < 1)
    CFStringAppendFormat(v8, 0, CFSTR("  source %@ (channel:%d) : %@\n"), v9, a5, a2);
  else
    CFStringAppendFormat(v8, 0, CFSTR("  source %@%d (channel:%d) : %@\n"), v9, a4, a5, a2);
}

void sub_1B187702C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  __CFString *v6;
  const __CFString *v7;

  v6 = *(__CFString **)(a1 + 32);
  v7 = sub_1B17ED08C(a3);
  if (a4 < 1)
    CFStringAppendFormat(v6, 0, CFSTR("  renderable source %@: %@\n"), v7, a2);
  else
    CFStringAppendFormat(v6, 0, CFSTR("  renderable source %@%d: %@\n"), v7, a4, a2);
}

__CFArray *sub_1B187709C(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  uint64_t v22;
  int v23;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 2;
  valuePtr = 5;
  v22 = a1 + 64;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("sources"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v23 = 0;
  valuePtr = 5;
  v22 = a1 + 184;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("boundingSphere"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 0;
  valuePtr = 5;
  v22 = a1 + 192;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("boundingBox"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v23 = 2;
  valuePtr = 5;
  v22 = a1 + 96;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v23);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v22);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("meshElements"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  return Mutable;
}

uint64_t sub_1B18774A4(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;

  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B17987F8(v10, a2))
    return a1;
  else
    return 0;
}

void sub_1B18774DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17C4408(16, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1B18774E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  if ((objc_opt_respondsToSelector() & 1) != 0)
    return MEMORY[0x1E0DE7D20](a1, sel_documentEnclosingURL, v2, v3);
  else
    return 0;
}

uint64_t sub_1B1877980()
{
  if (qword_1ED4CED30 != -1)
    dispatch_once(&qword_1ED4CED30, &unk_1E63D0D90);
  return qword_1ED4CED38;
}

double sub_1B18779C0()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  if (!qword_1ED4CED38)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CED38);
    qword_1ED4CED38 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("doubleSided"), 0x68u, 3, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("cullMode"), 0x5Eu, 4, 0, 0, 0, v4, v5);
    sub_1B19C326C(CFSTR("alphaCutoff"), 0x58u, 1, 0, 0, 0, v6, v7);
    sub_1B19C3258();
    qword_1ED4BE580 = (uint64_t)sub_1B1878C98;
    qword_1ED4BE5C0 = (uint64_t)sub_1B187952C;
    xmmword_1ED4BE570 = xmmword_1E63D3000;
    *(_QWORD *)&result = 0x1B1879584;
    unk_1ED4BE5D8 = xmmword_1E63D3010;
  }
  return result;
}

uint64_t sub_1B1877ABC()
{
  uint64_t v0;

  if (qword_1ED4CED30 != -1)
    dispatch_once(&qword_1ED4CED30, &unk_1E63D0D90);
  v0 = sub_1B179CB90(qword_1ED4CED38, 0x60uLL);
  *(_QWORD *)(v0 + 64) = sub_1B18417D4(v0);
  *(_BYTE *)(v0 + 104) = 0;
  *(_WORD *)(v0 + 96) = 3840;
  *(_DWORD *)(v0 + 92) = 257;
  *(_DWORD *)(v0 + 88) = -1082130432;
  sub_1B1877B44(v0);
  return v0;
}

uint64_t sub_1B1877B44(uint64_t a1)
{
  int v2;
  uint64_t result;
  _OWORD v4[2];
  _OWORD v5[2];

  sub_1B181EE08(*(CFTypeRef *)(a1 + 80));
  memset(v5, 0, 28);
  sub_1B181EB54(v5);
  if (*(_BYTE *)(a1 + 104))
    v2 = 2;
  else
    v2 = *(unsigned __int8 *)(a1 + 94);
  *(_QWORD *)&v5[0] = __PAIR64__(*(unsigned __int8 *)(a1 + 95), v2);
  BYTE8(v5[0]) = *(_BYTE *)(a1 + 93) != 0;
  BYTE9(v5[0]) = *(_BYTE *)(a1 + 92) != 0;
  v4[0] = v5[0];
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)((char *)v5 + 12);
  result = sub_1B181EC70((uint64_t)v4);
  *(_QWORD *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1B1877BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  v9 = sub_1B1877ABC();
  sub_1B1877C38(a1, v9, v10, v11, v12, v13, v14, v15);
  return v9;
}

uint64_t sub_1B1877C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFString *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"src");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"dst");
LABEL_3:
  *(_BYTE *)(a2 + 104) = *(_BYTE *)(a1 + 104);
  *(_DWORD *)(a2 + 92) = *(_DWORD *)(a1 + 92);
  *(_BYTE *)(a2 + 97) = *(_BYTE *)(a1 + 97);
  *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 88);
  v10 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a2 + 64);
  if (v10)
  {
    sub_1B1841148(v10, v11, a3, a4, a5, a6, a7, a8);
  }
  else if (v11)
  {
    CFRelease(*(CFTypeRef *)(a2 + 64));
    *(_QWORD *)(a2 + 64) = 0;
  }
  sub_1B193EAC4(a1, (CFTypeRef *)a2, a3, a4, a5, a6, a7, a8);
  v19 = (const __CFString *)sub_1B1877D60(a1, v12, v13, v14, v15, v16, v17, v18);
  sub_1B1877D10(a2, v19, v20, v21, v22, v23, v24, v25);
  return sub_1B1877B44(a2);
}

CFStringRef sub_1B1877D10(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return sub_1B193E5B0(a1, theString, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B1877D60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return sub_1B193E568(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B1877DA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;

  v69 = xmmword_1B2244E30;
  v70 = xmmword_1B2244E20;
  v2 = sub_1B1877ABC();
  sub_1B1841148(*(_QWORD *)(a1 + 64), *(_QWORD *)(v2 + 64), v3, v4, v5, v6, v7, v8);
  v14 = 0;
  v15 = *(_QWORD *)(v2 + 64);
  do
  {
    sub_1B1841CDC(v15, (char)v14, 0, v9, v10, v11, v12, v13, v67);
    sub_1B1841B94(*(_QWORD *)(v2 + 64), (char)v14++, (float *)&v70, v16, v17, v18, v19, v20);
    v15 = *(_QWORD *)(v2 + 64);
  }
  while (v14 != 16);
  sub_1B18412A8(v15, 0, v21, v9, v10, v11, v12, v13);
  sub_1B1841CDC(*(_QWORD *)(v2 + 64), 1, 0, v22, v23, v24, v25, v26, v67);
  sub_1B1841B94(*(_QWORD *)(v2 + 64), 1, (float *)&v69, v27, v28, v29, v30, v31);
  sub_1B1841CDC(*(_QWORD *)(v2 + 64), 5, 0, v32, v33, v34, v35, v36, v68);
  sub_1B1841B94(*(_QWORD *)(v2 + 64), 5, (float *)&v69, v37, v38, v39, v40, v41);
  sub_1B1877ED4(v2, 1u, v42, v43, v44, v45, v46, v47);
  sub_1B1877F64(v2, 0, v48, v49, v50, v51, v52, v53);
  sub_1B1877FE8(v2, 15, v54, v55, v56, v57, v58, v59);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v60, v61, v62, v63, v64, v65, (uint64_t)"material");
  sub_1B187806C(v2, *(unsigned __int8 *)(a1 + 104), v60, v61, v62, v63, v64, v65);
  return v2;
}

void sub_1B1877ED4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (a2 >= 2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. invalid fill mode"), a3, a4, a5, a6, a7, a8, (uint64_t)"fillMode == kCFXFillModeFill || fillMode == kCFXFillModeLines");
  if (*(unsigned __int8 *)(a1 + 95) != a2)
  {
    *(_BYTE *)(a1 + 95) = a2;
    sub_1B1877B44(a1);
  }
}

void sub_1B1877F64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (*(unsigned __int8 *)(a1 + 96) != v8)
  {
    *(_BYTE *)(a1 + 96) = v8;
    v10 = sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B187A8A4(v10, 3, (const void *)a1, 0, v11, v12, v13, v14);
    sub_1B1877B44(a1);
  }
}

void sub_1B1877FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (*(unsigned __int8 *)(a1 + 97) != v8)
  {
    *(_BYTE *)(a1 + 97) = v8;
    v10 = sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B187A8A4(v10, 3, (const void *)a1, 0, v11, v12, v13, v14);
    sub_1B1877B44(a1);
  }
}

void sub_1B187806C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (*(unsigned __int8 *)(a1 + 104) != v8)
  {
    *(_BYTE *)(a1 + 104) = v8;
    v10 = sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B187A8A4(v10, 3, (const void *)a1, 0, v11, v12, v13, v14);
    sub_1B1877B44(a1);
  }
}

uint64_t sub_1B18780F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(unsigned __int8 *)(a1 + 104);
}

uint64_t sub_1B187813C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1B1878184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (*(_QWORD *)(a1 + 72))
    return 0;
  else
    return *(_QWORD *)(a1 + 64);
}

void sub_1B18781DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (*(unsigned __int8 *)(a1 + 94) != a2)
  {
    *(_BYTE *)(a1 + 94) = a2;
    sub_1B1877B44(a1);
  }
}

uint64_t sub_1B1878248(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(unsigned __int8 *)(a1 + 94);
}

uint64_t sub_1B1878290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(unsigned __int8 *)(a1 + 95);
}

uint64_t sub_1B18782D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(unsigned __int8 *)(a1 + 96);
}

float sub_1B1878320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(float *)(a1 + 88);
}

void sub_1B1878368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  v11 = *(float *)(a1 + 88);
  if (v11 != a9)
  {
    *(float *)(a1 + 88) = a9;
    ++*(_DWORD *)(a1 + 100);
    if (a9 < 0.0 == v11 >= 0.0)
    {
      v12 = sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
      sub_1B187A8A4(v12, 3, (const void *)a1, 0, v13, v14, v15, v16);
    }
  }
}

void sub_1B1878414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  ++*(_DWORD *)(a1 + 100);
}

void sub_1B1878464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (*(unsigned __int8 *)(a1 + 92) != v8)
  {
    *(_BYTE *)(a1 + 92) = v8;
    v10 = sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B187A8A4(v10, 3, (const void *)a1, 0, v11, v12, v13, v14);
    sub_1B1877B44(a1);
  }
}

BOOL sub_1B18784E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(_BYTE *)(a1 + 92) != 0;
}

uint64_t sub_1B1878538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(unsigned __int8 *)(a1 + 97);
}

void sub_1B1878580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  if (*(unsigned __int8 *)(a1 + 93) != v8)
  {
    *(_BYTE *)(a1 + 93) = v8;
    v10 = sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B187A8A4(v10, 3, (const void *)a1, 0, v11, v12, v13, v14);
    sub_1B1877B44(a1);
  }
}

BOOL sub_1B1878604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(_BYTE *)(a1 + 93) != 0;
}

uint64_t sub_1B1878654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BOOL4 v12;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  v9 = *(_QWORD *)(a1 + 72);
  if (v9)
    return sub_1B18D6F50(v9, a2, a3, a4, a5, a6, a7, a8);
  v11 = sub_1B1840E70(*(_QWORD *)(a1 + 64), 4, 0, a4, a5, a6, a7, a8);
  v12 = sub_1B18428DC(v11);
  result = 0;
  if (v12)
    return *(_BYTE *)(a1 + 96) == 0;
  return result;
}

uint64_t sub_1B18786DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_1B1878724(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  const __CFString *v10;
  int v11;
  const char *v13;

  switch(*(_BYTE *)(a1 + 96))
  {
    case 0:
      if (!a2)
        goto LABEL_11;
      v8 = sub_1B1840E70(*(_QWORD *)(a1 + 64), 4, 0, a4, a5, a6, a7, a8);
      if (!sub_1B18428DC(v8))
        goto LABEL_11;
      result = sub_1B18A7C20();
      break;
    case 1:
      if (!*(_QWORD *)(a1 + 64))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material->_commonProfile");
      if (a5)
        goto LABEL_11;
      v13 = "oBlendColor";
      v10 = CFSTR("Assertion '%s' failed. Null argument");
      v11 = 17;
      goto LABEL_10;
    case 2:
      result = sub_1B18A7A2C();
      break;
    case 3:
      result = sub_1B18A7C98();
      break;
    case 4:
      if ((_DWORD)a4)
        result = sub_1B18A7B24();
      else
        result = sub_1B18A7AA8();
      break;
    case 5:
      result = sub_1B18A7D94();
      break;
    case 6:
      result = sub_1B18A7D14();
      break;
    default:
      v10 = CFSTR("Unreachable code: Blend mode not implemented.");
      v11 = 16;
LABEL_10:
      sub_1B17C4408(v11, (uint64_t)v10, a3, a4, a5, a6, a7, a8, (uint64_t)v13);
LABEL_11:
      result = sub_1B18A7BA0();
      break;
  }
  return result;
}

void sub_1B1878850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v9 = sub_1B17C6244((_QWORD *)a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B187A8A4(v9, 3, (const void *)a1, 0, v10, v11, v12, v13);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v14, v15, v16, v17, v18, v19, (uint64_t)"material");
  ++*(_DWORD *)(a1 + 100);
  sub_1B194F874(CFSTR("kCFXShadableDidChange"), *(const void **)(a1 + 64), 0, 1u);
}

CFTypeRef sub_1B18788CC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

CFTypeRef sub_1B1878944(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  v10 = *(_QWORD **)(a1 + 72);
  if (!v10)
  {
    v10 = (_QWORD *)sub_1B18D623C(1uLL);
    sub_1B18788CC(a1, v10, v11, v12, v13, v14, v15, v16);
    CFRelease(v10);
  }
  if (sub_1B18D63A8((uint64_t)v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8) < 1)
  {
    v29 = (const void *)sub_1B19ACAD0();
    sub_1B18D62F4(v10, v29, v30, v31, v32, v33, v34, v35, v43);
    CFRelease(v29);
  }
  else
  {
    v29 = (const void *)sub_1B18D6464((uint64_t)v10, 0, v17, v18, v19, v20, v21, v22);
  }
  sub_1B19ACEC0((uint64_t)v29, 2, v23, v24, v25, v26, v27, v28);
  return sub_1B19ACDB0((uint64_t)v29, a2, v36, v37, v38, v39, v40, v41);
}

uint64_t sub_1B1878A10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return *(unsigned int *)(a1 + 100);
}

const __CFDictionary *sub_1B1878A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  return sub_1B193E800(a1, CFSTR("kBehaviorGraph"), a3, a4, a5, a6, a7, a8);
}

void sub_1B1878AAC(CFTypeRef *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFDictionary *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"material");
  v10 = sub_1B17C6244(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B1878A58((uint64_t)a1, v11, v12, v13, v14, v15, v16, v17);
  if (v10 && v18)
    sub_1B17C5DD0(v18, v10, v19, v20, v21, v22, v23, v24);
  sub_1B193E88C(a1, CFSTR("kBehaviorGraph"), a2, v10 != 0, v21, v22, v23, v24);
  if (a2)
  {
    if (v10)
      sub_1B17C5FC0((uint64_t *)a2, v10, v25, v26, v27, v28, v29, v30);
  }
}

id sub_1B1878B68(uint64_t a1)
{
  const void *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  sub_1B194F874(CFSTR("kCFXNotificationMaterialWillDie"), (const void *)a1, 0, 1u);
  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v3 = *(const void **)(a1 + 72);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 72) = 0;
  }
  sub_1B181EE08(*(CFTypeRef *)(a1 + 80));
  return sub_1B193E38C(a1, v4, v5, v6, v7, v8, v9, v10);
}

__CFString *sub_1B1878BD0(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  v10 = sub_1B193E568(a1, v3, v4, v5, v6, v7, v8, v9);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXMaterial %p : \"%@\", "), a1, v10);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v11, v12, v13, v14, v15, v16, (uint64_t)"material");
  if (*(_QWORD *)(a1 + 72) || !*(_QWORD *)(a1 + 64))
    CFStringAppendFormat(Mutable, 0, CFSTR("custom %@"), *(_QWORD *)(a1 + 72));
  else
    CFStringAppendFormat(Mutable, 0, CFSTR("common profile %@"), *(_QWORD *)(a1 + 64));
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

__CFArray *sub_1B1878C98(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __CFDictionary *v22;
  CFNumberRef v23;
  CFNumberRef v24;
  CFNumberRef v25;
  __CFDictionary *v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  __CFDictionary *v30;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  const CFDictionaryValueCallBacks *v34;
  __CFDictionary *v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  __CFDictionary *v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  __CFDictionary *v43;
  CFNumberRef v44;
  CFNumberRef v45;
  CFNumberRef v46;
  __CFDictionary *v47;
  CFNumberRef v48;
  CFNumberRef v49;
  CFNumberRef v50;
  __CFDictionary *v51;
  CFNumberRef v52;
  CFNumberRef v53;
  CFNumberRef v54;
  uint64_t v56;
  int v57;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 1;
  valuePtr = 5;
  v56 = sub_1B1877D60(a1, v6, v7, v8, v9, v10, v11, v12);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("name"));
  CFDictionarySetValue(v5, CFSTR("type"), v13);
  CFDictionarySetValue(v5, CFSTR("address"), v15);
  CFDictionarySetValue(v5, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v14);
  CFRelease(v5);
  CFRelease(v15);
  CFRelease(v13);
  v22 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v57 = 1;
  valuePtr = 5;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v16, v17, v18, v19, v20, v21, (uint64_t)"material");
  v56 = *(_QWORD *)(a1 + 64);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v24 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v25 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v22, CFSTR("name"), CFSTR("commonProfile"));
  CFDictionarySetValue(v22, CFSTR("type"), v23);
  CFDictionarySetValue(v22, CFSTR("address"), v25);
  CFDictionarySetValue(v22, CFSTR("semantic"), v24);
  CFArrayAppendValue(Mutable, v22);
  CFRelease(v24);
  CFRelease(v22);
  CFRelease(v25);
  CFRelease(v23);
  v26 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 4;
  v56 = a1 + 94;
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v28 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v29 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v26, CFSTR("name"), CFSTR("cullMode"));
  CFDictionarySetValue(v26, CFSTR("type"), v27);
  CFDictionarySetValue(v26, CFSTR("address"), v29);
  CFDictionarySetValue(v26, CFSTR("semantic"), v28);
  CFArrayAppendValue(Mutable, v26);
  CFRelease(v28);
  CFRelease(v26);
  CFRelease(v29);
  CFRelease(v27);
  v30 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 4;
  v56 = a1 + 95;
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v32 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v33 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v30, CFSTR("name"), CFSTR("fillMode"));
  CFDictionarySetValue(v30, CFSTR("type"), v31);
  CFDictionarySetValue(v30, CFSTR("address"), v33);
  CFDictionarySetValue(v30, CFSTR("semantic"), v32);
  CFArrayAppendValue(Mutable, v30);
  CFRelease(v32);
  CFRelease(v30);
  CFRelease(v33);
  CFRelease(v31);
  v34 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v35 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 1;
  v56 = a1 + 88;
  v36 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v37 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v38 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v35, CFSTR("name"), CFSTR("alphaCutoff"));
  CFDictionarySetValue(v35, CFSTR("type"), v36);
  CFDictionarySetValue(v35, CFSTR("address"), v38);
  CFDictionarySetValue(v35, CFSTR("semantic"), v37);
  CFArrayAppendValue(Mutable, v35);
  CFRelease(v37);
  CFRelease(v35);
  CFRelease(v38);
  CFRelease(v36);
  v39 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v34);
  v57 = 0;
  valuePtr = 3;
  v56 = a1 + 93;
  v40 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v41 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v42 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v39, CFSTR("name"), CFSTR("enableReadsFromDepthBuffer"));
  CFDictionarySetValue(v39, CFSTR("type"), v40);
  CFDictionarySetValue(v39, CFSTR("address"), v42);
  CFDictionarySetValue(v39, CFSTR("semantic"), v41);
  CFArrayAppendValue(Mutable, v39);
  CFRelease(v41);
  CFRelease(v39);
  CFRelease(v42);
  CFRelease(v40);
  v43 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 3;
  v56 = a1 + 92;
  v44 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v45 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v46 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v43, CFSTR("name"), CFSTR("enableWriteInDepthBuffer"));
  CFDictionarySetValue(v43, CFSTR("type"), v44);
  CFDictionarySetValue(v43, CFSTR("address"), v46);
  CFDictionarySetValue(v43, CFSTR("semantic"), v45);
  CFArrayAppendValue(Mutable, v43);
  CFRelease(v45);
  CFRelease(v43);
  CFRelease(v46);
  CFRelease(v44);
  v47 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 3;
  v56 = a1 + 104;
  v48 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v49 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v50 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v47, CFSTR("name"), CFSTR("doubleSided"));
  CFDictionarySetValue(v47, CFSTR("type"), v48);
  CFDictionarySetValue(v47, CFSTR("address"), v50);
  CFDictionarySetValue(v47, CFSTR("semantic"), v49);
  CFArrayAppendValue(Mutable, v47);
  CFRelease(v49);
  CFRelease(v47);
  CFRelease(v50);
  CFRelease(v48);
  v51 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v57 = 0;
  valuePtr = 2;
  v56 = a1 + 48;
  v52 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v53 = CFNumberCreate(0, kCFNumberSInt32Type, &v57);
  v54 = CFNumberCreate(0, kCFNumberLongType, &v56);
  CFDictionarySetValue(v51, CFSTR("name"), CFSTR("worldRef"));
  CFDictionarySetValue(v51, CFSTR("type"), v52);
  CFDictionarySetValue(v51, CFSTR("address"), v54);
  CFDictionarySetValue(v51, CFSTR("semantic"), v53);
  CFArrayAppendValue(Mutable, v51);
  CFRelease(v53);
  CFRelease(v51);
  CFRelease(v54);
  CFRelease(v52);
  return Mutable;
}

uint64_t sub_1B187952C(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;

  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B17987F8(v10, a2))
    return a1;
  else
    return 0;
}

void sub_1B1879560(uint64_t a1, void *__dst, float *__src, size_t __n, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((void *)(a1 + 88) == __dst)
    sub_1B1878368(a1, (uint64_t)__dst, (uint64_t)__src, __n, a5, a6, a7, a8, *__src);
  else
    memcpy(__dst, __src, __n);
}

const __CFDictionary *sub_1B1879590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return sub_1B193E800(a1, CFSTR("kBehaviorGraph"), a3, a4, a5, a6, a7, a8);
}

void sub_1B18795E8(CFTypeRef *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  v10 = sub_1B1879590((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
    sub_1B17C5DD0(v10, (uint64_t)a1, v11, v12, v13, v14, v15, v16);
  sub_1B193E88C(a1, CFSTR("kBehaviorGraph"), a2, 1, v13, v14, v15, v16);
  if (a2)
    sub_1B17C5FC0((uint64_t *)a2, (uint64_t)a1, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_1B187967C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned __int16 v20;
  _QWORD *v21;

  sub_1B187973C(a1, a2, a3, a4, a5, a6, a7, a8);
  v17 = *(unsigned __int16 *)(a1 + 224);
  if (v17 == 1)
  {
    v18 = *(_QWORD *)(a1 + 216);
    v19 = malloc_type_malloc(0x10uLL, 0x2004093837F09uLL);
    *(_QWORD *)(a1 + 216) = v19;
    *v19 = v18;
    *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8) = a2;
    *(_WORD *)(a1 + 224) = 2;
  }
  else if (*(_WORD *)(a1 + 224))
  {
    v20 = v17 + 1;
    *(_WORD *)(a1 + 224) = v20;
    v21 = malloc_type_realloc(*(void **)(a1 + 216), 8 * v20, 0x2004093837F09uLL);
    *(_QWORD *)(a1 + 216) = v21;
    v21[*(unsigned __int16 *)(a1 + 224) - 1] = a2;
  }
  else
  {
    *(_WORD *)(a1 + 224) = 1;
    *(_QWORD *)(a1 + 216) = a2;
  }
  return sub_1B18797B4(a1, v10, v11, v12, v13, v14, v15, v16);
}

void sub_1B187973C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  prof_beginFlame((uint64_t)"CFXWorldLock", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Core/CFXWorld.m", 1028);
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 296));
  prof_endFlame();
}

void sub_1B18797A0(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B18797B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return pthread_mutex_unlock((pthread_mutex_t *)(a1 + 296));
}

uint64_t sub_1B18797FC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  if (*(_WORD *)(result + 224))
  {
    v9 = result;
    sub_1B187973C(result, a2, a3, a4, a5, a6, a7, a8);
    v17 = *(unsigned __int16 *)(v9 + 224);
    if (*(_WORD *)(v9 + 224))
    {
      if (v17 == 1)
      {
        if (*(_QWORD *)(v9 + 216) == a2)
        {
          *(_WORD *)(v9 + 224) = 0;
          *(_QWORD *)(v9 + 216) = 0;
        }
      }
      else
      {
        v18 = 0;
        v19 = 8;
        do
        {
          v20 = *(char **)(v9 + 216);
          if (*(_QWORD *)&v20[8 * v18] == a2)
          {
            if ((unsigned __int16)v17 == 2)
            {
              v21 = *(_QWORD *)&v20[v19];
              free(v20);
              *(_QWORD *)(v9 + 216) = v21;
              LOWORD(v17) = 1;
              *(_WORD *)(v9 + 224) = 1;
            }
            else
            {
              LOWORD(v17) = v17 - 1;
              *(_WORD *)(v9 + 224) = v17;
              *(_QWORD *)&v20[8 * v18] = *(_QWORD *)&v20[8 * (unsigned __int16)v17];
            }
          }
          ++v18;
          v19 -= 8;
        }
        while (v18 < (unsigned __int16)v17);
      }
    }
    return sub_1B18797B4(v9, v10, v11, v12, v13, v14, v15, v16);
  }
  return result;
}

uint64_t sub_1B18798D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  sub_1B187973C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (*(_WORD *)(a1 + 224))
  {
    if (*(_WORD *)(a1 + 224) == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)(a1 + 216));
    }
    else
    {
      v17 = 0;
      do
        (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * v17++));
      while (v17 < *(unsigned __int16 *)(a1 + 224));
    }
  }
  return sub_1B18797B4(a1, v10, v11, v12, v13, v14, v15, v16);
}

void sub_1B1879954(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const __CFArray *v16;
  uint64_t v17;
  CFStringRef v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v16 = sub_1B186D8E8((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"world");
  v17 = *(_QWORD *)(a1 + 96);
  v18 = CFStringCreateWithFormat(0, 0, CFSTR("nodeConstraints-%p"), a2);
  sub_1B19C0AFC(v17, v16, a2, (uint64_t)v18, v19, v20, v21, v22);
  CFRelease(v18);
}

uint64_t sub_1B18799E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_1B1879A30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;

  if (!*(_QWORD *)(a1 + 192))
    *(_QWORD *)(a1 + 192) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
  v10 = sub_1B186DD80((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 192), a2, v10);
  else
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: unexpected call to CFXWorldRegisterNodeCoreEntityHandle"), v11, v12, v13, v14, v15, v16, v31);
  v24 = !sub_1B186C66C((uint64_t)a2, v17, v18, v19, v20, v21, v22, v23);
  return sub_1B1879AB8(a1, a2, v24, v25, v26, v27, v28, v29);
}

uint64_t sub_1B1879AB8(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *Value;

  if (a1)
  {
    if (key)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
    if (key)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
LABEL_3:
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 192), key);
  if (!Value)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v11, v12, v13, v14, v15, v16, (uint64_t)"entityHandle");
  return sub_1B18F4DFC(Value, a3, v11, v12, v13, v14, v15, v16);
}

void sub_1B1879B6C(uint64_t a1, const void *a2)
{
  __CFDictionary *v2;

  v2 = *(__CFDictionary **)(a1 + 192);
  if (v2)
    CFDictionaryRemoveValue(v2, a2);
}

uint64_t sub_1B1879B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 192);
}

void sub_1B1879BC4(uint64_t a1, const void *a2, uint64_t a3)
{
  CFNumberRef v5;
  uint64_t valuePtr;

  valuePtr = a3;
  if (!*(_QWORD *)(a1 + 200))
    *(_QWORD *)(a1 + 200) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
  v5 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt64Type, &valuePtr);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 200), a2, v5);
  if (v5)
    CFRelease(v5);
}

void sub_1B1879C54(uint64_t a1, const void *a2)
{
  __CFDictionary *v2;

  v2 = *(__CFDictionary **)(a1 + 200);
  if (v2)
    CFDictionaryRemoveValue(v2, a2);
}

const __CFDictionary *sub_1B1879C64(uint64_t a1, const void *a2)
{
  const __CFDictionary *result;
  uint64_t valuePtr;

  result = *(const __CFDictionary **)(a1 + 200);
  if (result)
  {
    result = (const __CFDictionary *)CFDictionaryGetValue(result, a2);
    if (result)
    {
      valuePtr = 0;
      CFNumberGetValue(result, kCFNumberSInt64Type, &valuePtr);
      return (const __CFDictionary *)valuePtr;
    }
  }
  return result;
}

uint64_t sub_1B1879CA0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 208);
}

void sub_1B1879CA8(uint64_t a1)
{
  __CFArray *v1;

  v1 = *(__CFArray **)(a1 + 208);
  if (v1)
    CFArrayRemoveAllValues(v1);
}

uint64_t sub_1B1879CB8(uint64_t result, void *value)
{
  uint64_t v3;
  __CFArray *Mutable;

  if (value)
  {
    v3 = result;
    Mutable = *(__CFArray **)(result + 208);
    if (!Mutable)
    {
      Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
      *(_QWORD *)(v3 + 208) = Mutable;
    }
    CFArrayAppendValue(Mutable, value);
    result = *(_QWORD *)(v3 + 144);
    if (result)
      return sub_1B19D9F14(result);
  }
  return result;
}

void sub_1B1879D18(CFTypeRef *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFArray *v10;
  __CFSet *Mutable;
  __CFSet *v12;

  v10 = (const __CFArray *)sub_1B1869D10((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10 && CFArrayGetCount(v10) >= 1)
  {
    Mutable = (__CFSet *)a1[14];
    if (!Mutable)
    {
      Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
      a1[14] = Mutable;
    }
    CFSetAddValue(Mutable, a2);
  }
  else
  {
    v12 = (__CFSet *)a1[14];
    if (v12)
    {
      CFSetRemoveValue(v12, a2);
      if (!CFSetGetCount((CFSetRef)a1[14]))
      {
        CFRelease(a1[14]);
        a1[14] = 0;
      }
    }
  }
  sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), a1, 0, 1u);
}

const __CFDictionary *sub_1B1879DB8(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  result = *(const __CFDictionary **)(a1 + 120);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, key);
  return result;
}

void sub_1B1879E1C(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"worldRef");
    if (value)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"nodeRef");
    goto LABEL_3;
  }
  if (!value)
    goto LABEL_5;
LABEL_3:
  sub_1B182177C(*(_QWORD *)(a1 + 128), value, a3, a4, a5, a6, a7, a8);
}

void sub_1B1879E94(uint64_t a1, void *value, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"worldRef");
    if (value)
      goto LABEL_3;
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"nodeRef");
    goto LABEL_3;
  }
  if (!value)
    goto LABEL_5;
LABEL_3:
  sub_1B182183C(*(_QWORD *)(a1 + 128), value, a3, a4, a5, a6, a7, a8);
}

void sub_1B1879F0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"worldRef");
  *(_DWORD *)(a1 + 292) = a2;
}

BOOL sub_1B1879F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"worldRef");
  return *(_DWORD *)(a1 + 292) > 0;
}

uint64_t sub_1B1879FA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  const __CFArray *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFArray *v18;
  CFIndex Count;
  CFIndex v20;
  CFIndex i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *ValueAtIndex;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
    if (a2)
    {
LABEL_3:
      if (!a1)
        goto LABEL_14;
      goto LABEL_7;
    }
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  if (!a1)
    goto LABEL_14;
LABEL_7:
  v10 = *(_DWORD *)(a2 + 220);
  if ((v10 & 0x8000) != 0)
  {
    sub_1B1879954(a1, (_QWORD *)a2, a3, a4, a5, a6, a7, a8);
    v10 = *(_DWORD *)(a2 + 220);
    if ((v10 & 0x40) == 0)
    {
LABEL_9:
      if ((v10 & 0x80000) == 0)
        goto LABEL_10;
      goto LABEL_27;
    }
  }
  else if ((v10 & 0x40) == 0)
  {
    goto LABEL_9;
  }
  sub_1B180FD88((id *)a1, (id *)a2);
  v10 = *(_DWORD *)(a2 + 220);
  if ((v10 & 0x80000) == 0)
  {
LABEL_10:
    if ((v10 & 0x2000) == 0)
      goto LABEL_11;
    goto LABEL_28;
  }
LABEL_27:
  sub_1B1879E1C(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(a2 + 220);
  if ((v10 & 0x2000) == 0)
  {
LABEL_11:
    if ((v10 & 0x200) == 0)
      goto LABEL_12;
LABEL_29:
    sub_1B1795378(*(_QWORD *)(a1 + 136), (const void *)a2, a3, a4, a5, a6, a7, a8, v38);
    sub_1B199B278(a1, a2, v32, v33, v34, v35, v36, v37, v39);
    if ((*(_DWORD *)(a2 + 220) & 0x1000000) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_28:
  sub_1B1879D18((CFTypeRef *)a1, (const void *)a2, a3, a4, a5, a6, a7, a8);
  v10 = *(_DWORD *)(a2 + 220);
  if ((v10 & 0x200) != 0)
    goto LABEL_29;
LABEL_12:
  if ((v10 & 0x1000000) != 0)
LABEL_13:
    sub_1B1879A30(a1, (void *)a2, a3, a4, a5, a6, a7, a8);
LABEL_14:
  v11 = sub_1B186D220(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    v18 = v11;
    Count = CFArrayGetCount(v11);
    if (Count >= 1)
    {
      v20 = Count;
      for (i = 0; i != v20; ++i)
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(v18, i);
        if (!ValueAtIndex)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. There should only be valid audio sources in this array"), v23, v24, v25, v26, v27, v28, (uint64_t)"player != NULL");
        sub_1B1949608(ValueAtIndex, v22, v23, v24);
      }
    }
  }
  v30 = *(_QWORD *)(a1 + 480);
  if (v30)
    sub_1B17DD610(v30, a2, v12, v13);
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return sub_1B19D9BF8(result, a2, v12, v13, v14, v15, v16, v17);
  return result;
}

uint64_t sub_1B187A178(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFDictionary *v10;

  if (*(_QWORD *)(a1 + 176))
  {
    if ((*((_BYTE *)key + 223) & 1) != 0)
    {
      v10 = *(__CFDictionary **)(a1 + 192);
      if (v10)
        CFDictionaryRemoveValue(v10, key);
    }
  }
  return sub_1B187A1C0(a1, (id *)key, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B187A1C0(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  CFStringRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __CFSet *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t result;
  uint64_t v56;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  v10 = *(_QWORD *)(a1 + 128);
  if (v10)
    sub_1B1820054(v10, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B186D8E8((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v11 = *(_QWORD *)(a1 + 96);
    v56 = (uint64_t)a2;
    v12 = CFStringCreateWithFormat(0, 0, CFSTR("nodeConstraints-%p"));
    sub_1B19C0AFC(v11, 0, a2, (uint64_t)v12, v13, v14, v15, v16);
    CFRelease(v12);
  }
  if (sub_1B186CD74((uint64_t)a2))
    sub_1B1821640(*(_QWORD *)(a1 + 128));
  if (sub_1B186DB64((uint64_t)a2, v17, v18, v19, v20, v21, v22, v23))
    sub_1B180FF2C((id *)a1, a2);
  if (sub_1B186DBB0((uint64_t)a2, v24, v25, v26, v27, v28, v29, v30))
    sub_1B1879E94(a1, a2, v32, v33, v34, v35, v36, v37);
  if (*(_QWORD *)(a1 + 136) && sub_1B186CDDC((uint64_t)a2, v31, v32, v33, v34, v35, v36, v37))
  {
    sub_1B17955E8(*(_QWORD *)(a1 + 136), a2);
    sub_1B199B938(a1, (uint64_t)a2, v38, v39, v40, v41, v42, v43, v56);
  }
  if (sub_1B1869D10((uint64_t)a2, v31, v32, v33, v34, v35, v36, v37))
  {
    v51 = *(__CFSet **)(a1 + 112);
    if (v51)
    {
      CFSetRemoveValue(v51, a2);
      if (!CFSetGetCount(*(CFSetRef *)(a1 + 112)))
      {
        CFRelease(*(CFTypeRef *)(a1 + 112));
        *(_QWORD *)(a1 + 112) = 0;
      }
    }
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), (const void *)a1, 0, 1u);
  }
  sub_1B186D4B0((uint64_t)a2, v44, v45, v46, v47, v48, v49, v50);
  v54 = *(_QWORD *)(a1 + 480);
  if (v54)
    sub_1B17DD618(v54, (uint64_t)a2, v52, v53);
  result = *(_QWORD *)(a1 + 144);
  if (result)
    return sub_1B19D9E04(result, (uint64_t)a2);
  return result;
}

uint64_t sub_1B187A360(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_QWORD *)(a1 + 176) && (a2[223] & 1) != 0)
    sub_1B1879AB8(a1, a2, 0, a4, a5, a6, a7, a8);
  return sub_1B187A1C0(a1, (id *)a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B187A3A8()
{
  if (qword_1ED4CEEC8 != -1)
    dispatch_once(&qword_1ED4CEEC8, &unk_1E63D0DB0);
  return qword_1ED4CEED0;
}

double sub_1B187A3E8()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;

  if (!qword_1ED4CEED0)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEED0);
    qword_1ED4CEED0 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("fogColor"), 0x1A0u, 12, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("fogDensityExponent"), 0x190u, 1, 0, 0, 0, v4, v5);
    sub_1B19C326C(CFSTR("fogEndDistance"), 0x18Cu, 1, 0, 0, 0, v6, v7);
    sub_1B19C326C(CFSTR("fogStartDistance"), 0x188u, 1, 0, 0, 0, v8, v9);
    sub_1B19C326C(CFSTR("wantsScreenSpaceReflection"), 0x1B0u, 3, 0, 0, 0, v10, v11);
    sub_1B19C326C(CFSTR("screenSpaceReflectionSampleCount"), 0x1B2u, 2, 0, 0, 0, v12, v13);
    sub_1B19C326C(CFSTR("screenSpaceReflectionMaximumDistance"), 0x1B4u, 1, 0, 0, 0, v14, v15);
    sub_1B19C326C(CFSTR("screenSpaceReflectionStride"), 0x1B8u, 1, 0, 0, 0, v16, v17);
    sub_1B19C3258();
    *(_OWORD *)&algn_1ED4BEED0[16] = xmmword_1E63D3238;
    *(_OWORD *)&algn_1ED4BEED0[32] = unk_1E63D3248;
    qword_1ED4BEF00 = 0;
    unk_1ED4BEF08 = sub_1B187C484;
    qword_1ED4BEEC8 = (uint64_t)sub_1B187C508;
    *(_QWORD *)&result = 0x1B187958CLL;
    unk_1ED4BEF20 = xmmword_1E63D3228;
  }
  return result;
}

uint64_t sub_1B187A58C()
{
  return sub_1B187A598(1, 0);
}

uint64_t sub_1B187A598(char a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int default_ring_capacity;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  pthread_mutexattr_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4CEEC8 != -1)
    dispatch_once(&qword_1ED4CEEC8, &unk_1E63D0DB0);
  v4 = sub_1B179CB90(qword_1ED4CEED0, 0x1E0uLL);
  v5 = v4;
  if (v4)
  {
    *(_QWORD *)(v4 + 48) = v4;
    *(_BYTE *)(v4 + 72) = a1;
    *(_QWORD *)(v4 + 88) = sub_1B17F1738();
    *(_QWORD *)(v5 + 96) = sub_1B19C0A9C(v5);
    *(_QWORD *)(v5 + 104) = sub_1B19C4910();
    *(_QWORD *)(v5 + 136) = sub_1B1795140(v5);
    *(_QWORD *)(v5 + 144) = sub_1B19D7CE0();
    *(_QWORD *)(v5 + 152) = sub_1B191D8EC();
    *(_QWORD *)(v5 + 248) = 0x3F80000042700000;
    *(_DWORD *)(v5 + 276) = 1065353216;
    *(_DWORD *)(v5 + 288) = 1065353216;
    if (a2)
      v6 = CFRetain(a2);
    else
      v6 = 0;
    *(_QWORD *)(v5 + 80) = v6;
    *(_QWORD *)(v5 + 392) = 0;
    *(_DWORD *)(v5 + 400) = 1065353216;
    sub_1B179CD74((float *)(v5 + 416), 1.0, 1.0, 1.0, 1.0);
    *(_BYTE *)(v5 + 432) = 0;
    *(_WORD *)(v5 + 434) = 64;
    *(_QWORD *)(v5 + 436) = 0x41000000447A0000;
    *(_QWORD *)(v5 + 128) = sub_1B181F9D4(v5);
    v7 = (const void *)sub_1B18D06DC(v5);
    *(_QWORD *)(v5 + 168) = v7;
    *(_QWORD *)(v5 + 160) = sub_1B197CB24(v7);
    if (prof_getEnabled())
    {
      default_ring_capacity = vfx_counters_get_default_ring_capacity();
      *(_QWORD *)(v5 + 488) = vfx_counters_create(default_ring_capacity);
    }
    sub_1B17F42CC(*(_QWORD *)(v5 + 88), *(CFTypeRef *)(v5 + 104), v8, v9, v10, v11, v12, v13);
    v23.__sig = 0;
    *(_QWORD *)v23.__opaque = 0;
    pthread_mutexattr_init(&v23);
    pthread_mutexattr_settype(&v23, 2);
    pthread_mutexattr_setpolicy_np(&v23, 1);
    pthread_mutex_init((pthread_mutex_t *)(v5 + 296), &v23);
    pthread_mutexattr_destroy(&v23);
    if ((a1 & 1) != 0)
      *(_QWORD *)(v5 + 176) = sub_1B18D28DC(v5, v15, v16, v17, v18, v19, v20, v21);
    *(_QWORD *)(v5 + 184) = 0;
  }
  return v5;
}

void sub_1B187A780(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  CFTypeRef v27;
  uint64_t v28;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  if (*(uint64_t **)(a1 + 64) != a2)
  {
    sub_1B1821374(*(_QWORD *)(a1 + 128), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v17 = *(_QWORD **)(a1 + 64);
    if (v17)
    {
      if (sub_1B17C6244(v17, v10, v11, v12, v13, v14, v15, v16) == a1)
        sub_1B17C5DD0(*(void **)(a1 + 64), a1, v18, v19, v20, v21, v22, v23);
      else
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: CFXWorldSetRootNode - old root node seems to be already connected to another world"), v18, v19, v20, v21, v22, v23, v28);
      v25 = *(uint64_t **)(a1 + 64);
      v24 = a2;
      if (v25 == a2)
        goto LABEL_17;
      if (v25)
      {
        CFRelease(*(CFTypeRef *)(a1 + 64));
        *(_QWORD *)(a1 + 64) = 0;
      }
      if (!a2)
      {
        v24 = 0;
        goto LABEL_16;
      }
    }
    else
    {
      v24 = a2;
      if (!a2)
        goto LABEL_17;
    }
    v24 = (uint64_t *)CFRetain(a2);
LABEL_16:
    *(_QWORD *)(a1 + 64) = v24;
LABEL_17:
    v26 = *(uint64_t **)(a1 + 448);
    if (v26 != a2)
    {
      if (v26)
      {
        CFRelease(*(CFTypeRef *)(a1 + 448));
        *(_QWORD *)(a1 + 448) = 0;
      }
      if (a2)
        v27 = CFRetain(a2);
      else
        v27 = 0;
      *(_QWORD *)(a1 + 448) = v27;
      v24 = *(uint64_t **)(a1 + 64);
    }
    if (v24)
      sub_1B17C5FC0(v24, a1, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1B187A8A4(uint64_t a1, uint64_t a2, const void *a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  uint64_t v12;

  v10 = a2;
  if (a3)
  {
    if (!a1)
      return;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), 0, (uint64_t)a4, a5, a6, a7, a8, (uint64_t)"originator");
  if (a1)
  {
LABEL_3:
    v12 = sub_1B1820B10(*(_QWORD *)(a1 + 128), a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
    sub_1B1940344(v12, v10, a3, a4);
  }
}

void sub_1B187A92C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18216E4(*(_QWORD *)(a1 + 128), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B187A934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 64);
}

uint64_t sub_1B187A97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 88);
}

uint64_t sub_1B187A9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  result = *(_QWORD *)(a1 + 176);
  if (result)
    return sub_1B181FEE0(result);
  return result;
}

uint64_t sub_1B187AA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 176);
}

uint64_t sub_1B187AA68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 80);
}

double sub_1B187AAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(double *)(a1 + 232);
}

double sub_1B187AAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(double *)(a1 + 240);
}

void sub_1B187AB40(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(double *)(a1 + 232) = a2;
}

void sub_1B187AB94(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(double *)(a1 + 240) = a2;
}

float sub_1B187ABE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 248);
}

void sub_1B187AC30(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(float *)(a1 + 248) = a2;
}

float sub_1B187AC84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 252);
}

void sub_1B187ACCC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(float *)(a1 + 252) = a2;
}

float sub_1B187AD20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 288);
}

__n128 sub_1B187AD68(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  result = a1[17];
  *a2 = result;
  return result;
}

uint64_t sub_1B187ADB8(uint64_t a1)
{
  return a1 + 296;
}

void sub_1B187ADC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  ++*(_DWORD *)(a1 + 360);
  sub_1B17969E0(*(_QWORD *)(a1 + 136));
  sub_1B18D1504(*(_QWORD *)(a1 + 168), v9, v10, v11, v12, v13, v14, v15);
}

void sub_1B187AE1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[5];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1B187AEEC;
  v16[3] = &unk_1E63D7CD8;
  v16[4] = &v17;
  sub_1B18798D8(a1, (uint64_t)v16, a3, a4, a5, a6, a7, a8);
  if (*((_BYTE *)v18 + 24))
    sub_1B18D154C(*(_QWORD *)(a1 + 168), v9, v10, v11, v12, v13, v14, v15);
  _Block_object_dispose(&v17, 8);
}

void sub_1B187AED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B187AEEC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1B1815A90(a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) |= result;
  return result;
}

uint64_t sub_1B187AF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(unsigned int *)(a1 + 360);
}

void sub_1B187AF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  ++*(_DWORD *)(a1 + 364);
}

uint64_t sub_1B187AFBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(unsigned int *)(a1 + 364);
}

BOOL sub_1B187B004(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return (a2 & ~*(unsigned __int8 *)(a1 + 72)) == 0;
}

uint64_t sub_1B187B058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_1B187B0A0(uint64_t a1, int a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (a2 && !*(_QWORD *)(a1 + 368))
  {
    v3 = sub_1B1840FAC(a1, 23);
    *(_QWORD *)(a1 + 368) = v3;
    v4 = (const void *)sub_1B180CF6C();
    sub_1B18420F4(v3, v4, v5, v6, v7, v8, v9, v10, v12);
  }
  return *(_QWORD *)(a1 + 368);
}

uint64_t sub_1B187B0F0(uint64_t a1, int a2)
{
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  if (a2 && !*(_QWORD *)(a1 + 376))
  {
    v3 = sub_1B1840FAC(a1, 24);
    *(_QWORD *)(a1 + 376) = v3;
    v4 = (const void *)sub_1B180CF6C();
    sub_1B18420F4(v3, v4, v5, v6, v7, v8, v9, v10, v12);
  }
  return *(_QWORD *)(a1 + 376);
}

uint64_t sub_1B187B140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 128);
}

uint64_t sub_1B187B188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 136);
}

uint64_t sub_1B187B1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 144);
}

uint64_t sub_1B187B218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 152);
}

uint64_t sub_1B187B260(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 160);
}

uint64_t sub_1B187B2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 168);
}

float sub_1B187B2F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 400);
}

void sub_1B187B338(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(float *)(a1 + 400) = a2;
}

float sub_1B187B38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 396);
}

void sub_1B187B3D4(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(float *)(a1 + 396) = a2;
}

float sub_1B187B428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 392);
}

void sub_1B187B470(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(float *)(a1 + 392) = a2;
}

__n128 sub_1B187B4C4(__n128 *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  result = *a2;
  a1[26] = *a2;
  return result;
}

uint64_t sub_1B187B514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return a1 + 416;
}

void sub_1B187B55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
}

uint64_t sub_1B187B5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(unsigned __int8 *)(a1 + 432);
}

void sub_1B187B644(_BYTE *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  if (a1[432] != a2)
  {
    a1[432] = a2;
    sub_1B194F874(CFSTR("kCFXNotificationEngineContextInvalidatePasses"), a1, 0, 1u);
  }
}

uint64_t sub_1B187B6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(unsigned __int16 *)(a1 + 434);
}

void sub_1B187B70C(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  *(_WORD *)(a1 + 434) = a2;
}

float sub_1B187B758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 436);
}

void sub_1B187B7A0(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(float *)(a1 + 436) = a2;
}

float sub_1B187B7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(float *)(a1 + 440);
}

void sub_1B187B83C(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"world");
  *(float *)(a1 + 440) = a2;
}

void sub_1B187B890(uint64_t a1, simd_float4x4 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  float v13;
  unint64_t v14;
  float32x4_t v15;
  float32x4_t v20;
  float v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unint64_t v26;
  float32x4_t v27;
  int8x16_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  float32x2_t v32;
  unint64_t v33;
  float32x4_t v34;
  int8x16_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  float32x2_t v39;
  simd_float4 v40;
  simd_float4 v41;
  simd_float4 v42;
  simd_float4 v43;
  simd_float4 v44;
  simd_float4 v45;
  simd_float4 v46;
  simd_float4 v47;
  simd_float4 v48;
  simd_float4 v49;
  simd_float4 v50;
  simd_float4 v51;
  simd_float4x4 v52;

  v52 = __invert_f4(*a2);
  v10 = v52.columns[0];
  v11 = v52.columns[1];
  v12 = v52.columns[2];
  if (!a1)
  {
    v42 = v52.columns[1];
    v43 = v52.columns[0];
    v40 = v52.columns[3];
    v41 = v52.columns[2];
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v4, v5, v6, v7, v8, v9, (uint64_t)"world");
    v52.columns[3] = v40;
    v12 = v41;
    v11 = v42;
    v10 = v43;
  }
  v13 = COERCE_FLOAT(*(_QWORD *)(a1 + 280));
  if (v13 == 1.0)
  {
    v14 = 0;
    v52.columns[1] = (simd_float4)vrsqrteq_f32((float32x4_t)xmmword_1B2244F70);
    v52.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v52.columns[1], vrsqrtsq_f32((float32x4_t)xmmword_1B2244F70, vmulq_f32((float32x4_t)v52.columns[1], (float32x4_t)v52.columns[1])));
    v52.columns[1] = (simd_float4)vmulq_f32(vmulq_f32((float32x4_t)v52.columns[1], vrsqrtsq_f32((float32x4_t)xmmword_1B2244F70, vmulq_f32((float32x4_t)v52.columns[1], (float32x4_t)v52.columns[1]))), (float32x4_t)xmmword_1B2244DB0);
    v15 = vmulq_f32((float32x4_t)v52.columns[1], (float32x4_t)v52.columns[1]);
    __asm { FMOV            V0.4S, #1.0 }
    v20 = vmlaq_f32(v15, (float32x4_t)vdupq_n_s32(0xB33BBD2E), vsubq_f32((float32x4_t)v52.columns[0], v15));
    v52.columns[2].f32[0] = vmuls_lane_f32(v52.columns[1].f32[0], *(float32x2_t *)v52.columns[1].f32, 1);
    v21 = vmuls_lane_f32(v52.columns[1].f32[0], (float32x4_t)v52.columns[1], 2);
    v22 = vmuls_lane_f32(v52.columns[1].f32[1], (float32x4_t)v52.columns[1], 2);
    *(float *)&v23 = v52.columns[1].f32[1] + v21;
    *(float *)&v24 = v52.columns[1].f32[2] + v52.columns[2].f32[0];
    v52.columns[0].f32[0] = v21 - v52.columns[1].f32[1];
    v52.columns[0].f32[1] = v52.columns[1].f32[0] + v22;
    v52.columns[0].i64[1] = v20.u32[2];
    *(float *)&v25 = v22 - v52.columns[1].f32[0];
    v52.columns[1].i32[0] = v20.i32[0];
    v52.columns[1].f32[1] = v52.columns[2].f32[0] - v52.columns[1].f32[2];
    v52.columns[1].i64[1] = v23;
    v52.columns[2].i64[0] = __PAIR64__(v20.u32[1], v24);
    v52.columns[2].i64[1] = v25;
    v44 = v10;
    v45 = v11;
    v46 = v12;
    v47 = v52.columns[3];
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v48 + v14) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v52.columns[1], COERCE_FLOAT(*(_OWORD *)((char *)&v44 + v14))), (float32x4_t)v52.columns[2], *(float32x2_t *)&v44.f32[v14 / 4], 1), (float32x4_t)v52.columns[0], *(float32x4_t *)((char *)&v44 + v14), 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)((char *)&v44 + v14), 3);
      v14 += 16;
    }
    while (v14 != 64);
LABEL_14:
    v10 = v48;
    v11 = v49;
    v12 = v50;
    v52.columns[3] = v51;
    goto LABEL_15;
  }
  if (v13 == -1.0)
  {
    v26 = 0;
    v52.columns[1] = (simd_float4)vrsqrteq_f32((float32x4_t)xmmword_1B2244F70);
    v52.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v52.columns[1], vrsqrtsq_f32((float32x4_t)xmmword_1B2244F70, vmulq_f32((float32x4_t)v52.columns[1], (float32x4_t)v52.columns[1])));
    v52.columns[0] = (simd_float4)vmulq_f32(vmulq_f32((float32x4_t)v52.columns[1], vrsqrtsq_f32((float32x4_t)xmmword_1B2244F70, vmulq_f32((float32x4_t)v52.columns[1], (float32x4_t)v52.columns[1]))), (float32x4_t)xmmword_1B2244DB0);
    v27 = vmulq_f32((float32x4_t)v52.columns[0], (float32x4_t)v52.columns[0]);
    __asm { FMOV            V1.4S, #1.0 }
    v28 = (int8x16_t)vmlaq_f32(v27, (float32x4_t)vdupq_n_s32(0xB33BBD2E), vsubq_f32((float32x4_t)v52.columns[1], v27));
    v52.columns[1].f32[0] = vmulq_lane_f32((float32x4_t)v52.columns[0], *(float32x2_t *)v52.columns[0].f32, 1).f32[0];
    v52.columns[2] = (simd_float4)vnegq_f32((float32x4_t)v52.columns[0]);
    *(float *)&v29 = v52.columns[1].f32[0] - v52.columns[2].f32[2];
    *(float *)&v30 = v52.columns[2].f32[2] + v52.columns[1].f32[0];
    *(float32x2_t *)v52.columns[1].f32 = vmul_laneq_f32(*(float32x2_t *)v52.columns[0].f32, (float32x4_t)v52.columns[0], 2);
    *(float *)&v31 = v52.columns[2].f32[1] + v52.columns[1].f32[0];
    v32 = (float32x2_t)vrev64_s32(*(int32x2_t *)v52.columns[2].f32);
    v52.columns[0].i32[0] = vsub_f32(*(float32x2_t *)v52.columns[1].f32, v32).u32[0];
    v52.columns[0].i32[1] = vadd_f32(*(float32x2_t *)(&v52 + 16), v32).i32[1];
    v52.columns[0].i64[1] = vextq_s8(v28, v28, 8uLL).u32[0];
    v32.f32[0] = v52.columns[1].f32[1] - v52.columns[2].f32[0];
    v52.columns[1].i64[0] = __PAIR64__(v29, v28.u32[0]);
    v52.columns[1].i64[1] = v31;
    v52.columns[2].i64[0] = __PAIR64__(v28.u32[1], v30);
    v52.columns[2].i64[1] = v32.u32[0];
    v44 = v10;
    v45 = v11;
    v46 = v12;
    v47 = v52.columns[3];
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v48 + v26) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v52.columns[1], COERCE_FLOAT(*(_OWORD *)((char *)&v44 + v26))), (float32x4_t)v52.columns[2], *(float32x2_t *)&v44.f32[v26 / 4], 1), (float32x4_t)v52.columns[0], *(float32x4_t *)((char *)&v44 + v26), 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)((char *)&v44 + v26), 3);
      v26 += 16;
    }
    while (v26 != 64);
    goto LABEL_14;
  }
  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 272))) == -1.0)
  {
    v33 = 0;
    v52.columns[1] = (simd_float4)vrsqrteq_f32((float32x4_t)xmmword_1B2244F70);
    v52.columns[1] = (simd_float4)vmulq_f32((float32x4_t)v52.columns[1], vrsqrtsq_f32((float32x4_t)xmmword_1B2244F70, vmulq_f32((float32x4_t)v52.columns[1], (float32x4_t)v52.columns[1])));
    v52.columns[0] = (simd_float4)vmulq_f32(vmulq_f32((float32x4_t)v52.columns[1], vrsqrtsq_f32((float32x4_t)xmmword_1B2244F70, vmulq_f32((float32x4_t)v52.columns[1], (float32x4_t)v52.columns[1]))), (float32x4_t)xmmword_1B2244DB0);
    v34 = vmulq_f32((float32x4_t)v52.columns[0], (float32x4_t)v52.columns[0]);
    __asm
    {
      FMOV            V1.4S, #1.0
      FMOV            V2.4S, #-1.0
    }
    v35 = (int8x16_t)vmlaq_f32(v34, (float32x4_t)v52.columns[2], vsubq_f32((float32x4_t)v52.columns[1], v34));
    v52.columns[1].f32[0] = vmulq_lane_f32((float32x4_t)v52.columns[0], *(float32x2_t *)v52.columns[0].f32, 1).f32[0];
    v52.columns[1].f32[0] = v52.columns[1].f32[0] + v52.columns[1].f32[0];
    v52.columns[2] = (simd_float4)vmulq_f32((float32x4_t)v52.columns[0], (float32x4_t)vdupq_n_s32(0x33BBBD2Eu));
    *(float *)&v36 = v52.columns[1].f32[0] - v52.columns[2].f32[2];
    *(float *)&v37 = v52.columns[2].f32[2] + v52.columns[1].f32[0];
    *(float32x2_t *)v52.columns[0].f32 = vmul_laneq_f32(*(float32x2_t *)v52.columns[0].f32, (float32x4_t)v52.columns[0], 2);
    *(float32x2_t *)v52.columns[1].f32 = vadd_f32(*(float32x2_t *)v52.columns[0].f32, *(float32x2_t *)v52.columns[0].f32);
    *(float *)&v38 = v52.columns[2].f32[1] + v52.columns[1].f32[0];
    v39 = (float32x2_t)vrev64_s32(*(int32x2_t *)v52.columns[2].f32);
    v52.columns[0].i32[0] = vsub_f32(*(float32x2_t *)v52.columns[1].f32, v39).u32[0];
    v52.columns[0].i32[1] = vadd_f32(*(float32x2_t *)(&v52 + 16), v39).i32[1];
    v52.columns[0].i64[1] = vextq_s8(v35, v35, 8uLL).u32[0];
    v39.f32[0] = v52.columns[1].f32[1] - v52.columns[2].f32[0];
    v52.columns[1].i64[0] = __PAIR64__(v36, v35.u32[0]);
    v52.columns[1].i64[1] = v38;
    v52.columns[2].i64[0] = __PAIR64__(v35.u32[1], v37);
    v52.columns[2].i64[1] = v39.u32[0];
    v44 = v10;
    v45 = v11;
    v46 = v12;
    v47 = v52.columns[3];
    v48 = 0u;
    v49 = 0u;
    v50 = 0u;
    v51 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v48 + v33) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v52.columns[1], COERCE_FLOAT(*(_OWORD *)((char *)&v44 + v33))), (float32x4_t)v52.columns[2], *(float32x2_t *)&v44.f32[v33 / 4], 1), (float32x4_t)v52.columns[0], *(float32x4_t *)((char *)&v44 + v33), 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)((char *)&v44 + v33), 3);
      v33 += 16;
    }
    while (v33 != 64);
    goto LABEL_14;
  }
LABEL_15:
  a2->columns[0] = v10;
  a2->columns[1] = v11;
  a2->columns[2] = v12;
  a2->columns[3] = v52.columns[3];
}

double sub_1B187BC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  v9 = COERCE_FLOAT(*(_QWORD *)(a1 + 280));
  if (v9 == 1.0)
  {
    v10 = 0;
    v14 = xmmword_1B2244DB0;
    v15 = xmmword_1B2244DD0;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v16 = xmmword_1B2244D90;
    v17 = xmmword_1B2244E20;
    do
    {
      *(__int128 *)((char *)&v18 + v10) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(__int128 *)((char *)&v14 + v10))), (float32x4_t)xmmword_1B2246F30, *(float32x2_t *)((char *)&v14 + v10), 1), (float32x4_t)xmmword_1B2246F40, *(float32x4_t *)((char *)&v14 + v10), 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)((char *)&v14 + v10), 3);
      v10 += 16;
    }
    while (v10 != 64);
    return *(double *)&v18;
  }
  if (v9 == -1.0)
  {
    v11 = 0;
    v14 = xmmword_1B2244DB0;
    v15 = xmmword_1B2244DD0;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v16 = xmmword_1B2244D90;
    v17 = xmmword_1B2244E20;
    do
    {
      *(__int128 *)((char *)&v18 + v11) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(__int128 *)((char *)&v14 + v11))), (float32x4_t)xmmword_1B2246F10, *(float32x2_t *)((char *)&v14 + v11), 1), (float32x4_t)xmmword_1B2246F20, *(float32x4_t *)((char *)&v14 + v11), 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)((char *)&v14 + v11), 3);
      v11 += 16;
    }
    while (v11 != 64);
    return *(double *)&v18;
  }
  if (COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 272))) == -1.0)
  {
    v12 = 0;
    v14 = xmmword_1B2244DB0;
    v15 = xmmword_1B2244DD0;
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v16 = xmmword_1B2244D90;
    v17 = xmmword_1B2244E20;
    do
    {
      *(__int128 *)((char *)&v18 + v12) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(__int128 *)((char *)&v14 + v12))), (float32x4_t)xmmword_1B2246EF0, *(float32x2_t *)((char *)&v14 + v12), 1), (float32x4_t)xmmword_1B2246F00, *(float32x4_t *)((char *)&v14 + v12), 2), (float32x4_t)xmmword_1B2244E20, *(float32x4_t *)((char *)&v14 + v12), 3);
      v12 += 16;
    }
    while (v12 != 64);
    return *(double *)&v18;
  }
  *(_QWORD *)&result = 1065353216;
  return result;
}

uint64_t sub_1B187BE28(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  BOOL v5;

  if (result)
  {
    v4 = result;
    result = *(_QWORD *)(result + 480);
    if (result)
      v5 = 1;
    else
      v5 = (_DWORD)a2 == 0;
    if (!v5)
    {
      result = sub_1B17DD5D4(v4, a2, a3, a4);
      *(_QWORD *)(v4 + 480) = result;
    }
  }
  return result;
}

void sub_1B187BE64(uint64_t a1, int a2, void *cf, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  const void *v12;
  _QWORD *v13;
  CFTypeRef v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)cf, a4, a5, a6, a7, a8, (uint64_t)"world");
  if (a2 >= 4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Only %d layers are available, but layer %d requested"), (uint64_t)cf, a4, a5, a6, a7, a8, (uint64_t)"layer < CFX_MAX_LAYERS");
  v11 = a1 + 8 * a2;
  v12 = *(const void **)(v11 + 448);
  if (v12 != cf)
  {
    v13 = (_QWORD *)(v11 + 448);
    if (v12)
    {
      CFRelease(v12);
      *v13 = 0;
    }
    if (cf)
      v14 = CFRetain(cf);
    else
      v14 = 0;
    *v13 = v14;
  }
  sub_1B186E00C((uint64_t)cf, a2, (uint64_t)cf, a4, a5, a6, a7, a8);
  if (cf)
    sub_1B17C5FC0((uint64_t *)cf, a1, v15, v16, v17, v18, v19, v20);
}

uint64_t sub_1B187BF48(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  if (a2 >= 4)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Only %d layers are available, but layer %d requested"), a3, a4, a5, a6, a7, a8, (uint64_t)"layer < CFX_MAX_LAYERS");
  return *(_QWORD *)(a1 + 8 * a2 + 448);
}

void sub_1B187BFC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  ++*(_DWORD *)(a1 + 384);
}

uint64_t sub_1B187C014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(unsigned int *)(a1 + 384);
}

BOOL sub_1B187C05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  v9 = *(_QWORD *)(a1 + 376);
  return v9 && sub_1B1842B54(v9) && sub_1B1841A40(v9, v10, v11, v12, v13, v14, v15, v16);
}

uint64_t sub_1B187C0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(unsigned __int8 *)(a1 + 388);
}

void sub_1B187C114(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  *(_BYTE *)(a1 + 388) = a2;
}

uint64_t sub_1B187C160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  return *(_QWORD *)(a1 + 488);
}

CFTypeRef sub_1B187C1A8(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"world");
  result = *(CFTypeRef *)(a1 + 184);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 184) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 184) = result;
  }
  return result;
}

id sub_1B187C224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  const void *v34;
  uint64_t j;
  const void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const void *v43;
  const void *v44;
  const void *v45;
  const void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;

  v9 = *(const void **)(a1 + 160);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 160) = 0;
  }
  v10 = *(const void **)(a1 + 168);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 168) = 0;
  }
  v11 = *(const void **)(a1 + 136);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v12 = *(const void **)(a1 + 144);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v13 = *(const void **)(a1 + 80);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 80) = 0;
  }
  for (i = 448; i != 480; i += 8)
  {
    v15 = *(_QWORD *)(a1 + i);
    if (v15)
    {
      if (sub_1B17C61FC(v15, a2, a3, a4, a5, a6, a7, a8) != *(_QWORD *)(a1 + 48))
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: RootNode is not retained by the world"), v16, v17, v18, v19, v20, v21, v55);
      sub_1B17C5DD0(*(void **)(a1 + i), a1, v16, v17, v18, v19, v20, v21);
    }
  }
  v22 = *(_QWORD *)(a1 + 96);
  if (v22)
    *(_QWORD *)(v22 + 24) = 0;
  v23 = *(const void **)(a1 + 64);
  if (v23)
  {
    CFRelease(v23);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v24 = *(const void **)(a1 + 88);
  if (v24)
  {
    CFRelease(v24);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v25 = *(const void **)(a1 + 104);
  if (v25)
  {
    CFRelease(v25);
    *(_QWORD *)(a1 + 104) = 0;
  }
  v26 = *(const void **)(a1 + 96);
  if (v26)
  {
    CFRelease(v26);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v27 = *(const void **)(a1 + 112);
  if (v27)
  {
    CFRelease(v27);
    *(_QWORD *)(a1 + 112) = 0;
  }
  v28 = *(const void **)(a1 + 120);
  if (v28)
  {
    CFRelease(v28);
    *(_QWORD *)(a1 + 120) = 0;
  }
  v29 = *(const void **)(a1 + 192);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(a1 + 192) = 0;
  }
  v30 = *(const void **)(a1 + 200);
  if (v30)
  {
    CFRelease(v30);
    *(_QWORD *)(a1 + 200) = 0;
  }
  v31 = *(const void **)(a1 + 368);
  if (v31)
  {
    CFRelease(v31);
    *(_QWORD *)(a1 + 368) = 0;
  }
  v32 = *(const void **)(a1 + 376);
  if (v32)
  {
    CFRelease(v32);
    *(_QWORD *)(a1 + 376) = 0;
  }
  v33 = *(const void **)(a1 + 152);
  if (v33)
  {
    CFRelease(v33);
    *(_QWORD *)(a1 + 152) = 0;
  }
  v34 = *(const void **)(a1 + 480);
  if (v34)
  {
    CFRelease(v34);
    *(_QWORD *)(a1 + 480) = 0;
  }
  for (j = 448; j != 480; j += 8)
  {
    v36 = *(const void **)(a1 + j);
    if (v36)
    {
      CFRelease(v36);
      *(_QWORD *)(a1 + j) = 0;
    }
  }
  v37 = *(_QWORD *)(a1 + 176);
  if (v37)
  {
    v38 = (const char *)vfx_counters_null();
    sub_1B18D2B74(v37, v38, v39, v40);
    sub_1B18D2BC0(*(_QWORD *)(a1 + 176), 0, v41, v42);
    v43 = *(const void **)(a1 + 176);
    if (v43)
    {
      CFRelease(v43);
      *(_QWORD *)(a1 + 176) = 0;
    }
  }
  v44 = *(const void **)(a1 + 184);
  if (v44)
  {
    CFRelease(v44);
    *(_QWORD *)(a1 + 184) = 0;
  }
  v45 = *(const void **)(a1 + 208);
  if (v45)
  {
    CFRelease(v45);
    *(_QWORD *)(a1 + 208) = 0;
  }
  v46 = *(const void **)(a1 + 128);
  if (v46)
  {
    CFRelease(v46);
    *(_QWORD *)(a1 + 128) = 0;
  }
  pthread_mutex_destroy((pthread_mutex_t *)(a1 + 296));
  vfx_counters_destroy(*(_QWORD **)(a1 + 488));
  return sub_1B193E38C(a1, v47, v48, v49, v50, v51, v52, v53);
}

CFStringRef sub_1B187C444(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXWorld>"));
}

CFStringRef sub_1B187C464(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXWorld>"));
}

uint64_t sub_1B187C484(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B17987F8(v10, a2))
    return a1;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v11, v12, v13, v14, v15, v16, (uint64_t)"world");
  return sub_1B17C62B4(*(const void **)(a1 + 64), (uint64_t)a2);
}

void sub_1B187C4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: You can't change the worldRef of a world"), a3, a4, a5, a6, a7, a8, a9);
}

__CFArray *sub_1B187C508(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  const CFDictionaryKeyCallBacks *v17;
  const CFDictionaryValueCallBacks *v18;
  __CFDictionary *v19;
  CFNumberRef v20;
  CFNumberRef v21;
  CFNumberRef v22;
  __CFDictionary *v23;
  uint64_t v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  __CFDictionary *v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  __CFDictionary *v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  __CFArray *v36;
  __CFDictionary *v37;
  uint64_t v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  __CFDictionary *v42;
  CFNumberRef v43;
  CFNumberRef v44;
  CFNumberRef v45;
  __CFDictionary *v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  const CFDictionaryKeyCallBacks *v50;
  const CFDictionaryValueCallBacks *v51;
  __CFDictionary *v52;
  CFNumberRef v53;
  CFNumberRef v54;
  CFNumberRef v55;
  __CFArray *v56;
  __CFDictionary *v57;
  CFNumberRef v58;
  CFNumberRef v59;
  CFNumberRef v60;
  __CFDictionary *v61;
  CFNumberRef v62;
  CFNumberRef v63;
  CFNumberRef v64;
  __CFDictionary *v65;
  CFNumberRef v66;
  CFNumberRef v67;
  CFNumberRef v68;
  uint64_t v70;
  int v71;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v71 = 2;
  valuePtr = 5;
  v70 = a1 + 64;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("root"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v71 = 0;
  valuePtr = 6;
  v70 = a1 + 232;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("startTime"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v71 = 0;
  valuePtr = 6;
  v70 = a1 + 240;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("endTime"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = v3;
  v18 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v19 = CFDictionaryCreateMutable(0, 4, v17, MEMORY[0x1E0C9B3A0]);
  v71 = 0;
  valuePtr = 1;
  v70 = a1 + 248;
  v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v22 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v19, CFSTR("name"), CFSTR("frameRate"));
  CFDictionarySetValue(v19, CFSTR("type"), v20);
  CFDictionarySetValue(v19, CFSTR("address"), v22);
  CFDictionarySetValue(v19, CFSTR("semantic"), v21);
  CFArrayAppendValue(Mutable, v19);
  CFRelease(v21);
  CFRelease(v19);
  CFRelease(v22);
  CFRelease(v20);
  v23 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v18);
  v71 = 0;
  valuePtr = 1;
  v24 = a1;
  v70 = a1 + 252;
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v27 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v23, CFSTR("name"), CFSTR("playbackSpeed"));
  CFDictionarySetValue(v23, CFSTR("type"), v25);
  CFDictionarySetValue(v23, CFSTR("address"), v27);
  CFDictionarySetValue(v23, CFSTR("semantic"), v26);
  CFArrayAppendValue(Mutable, v23);
  CFRelease(v26);
  CFRelease(v23);
  CFRelease(v27);
  CFRelease(v25);
  v28 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v18);
  v71 = 2;
  valuePtr = 5;
  v70 = a1 + 256;
  v29 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v31 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v28, CFSTR("name"), CFSTR("attributes"));
  CFDictionarySetValue(v28, CFSTR("type"), v29);
  CFDictionarySetValue(v28, CFSTR("address"), v31);
  CFDictionarySetValue(v28, CFSTR("semantic"), v30);
  CFArrayAppendValue(Mutable, v28);
  CFRelease(v30);
  CFRelease(v28);
  CFRelease(v31);
  CFRelease(v29);
  v32 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v18);
  v71 = 0;
  valuePtr = 8;
  v70 = a1 + 272;
  v33 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v35 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v32, CFSTR("name"), CFSTR("upAxis"));
  CFDictionarySetValue(v32, CFSTR("type"), v33);
  CFDictionarySetValue(v32, CFSTR("address"), v35);
  CFDictionarySetValue(v32, CFSTR("semantic"), v34);
  v36 = Mutable;
  CFArrayAppendValue(Mutable, v32);
  CFRelease(v34);
  CFRelease(v32);
  CFRelease(v35);
  CFRelease(v33);
  v37 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v18);
  v71 = 0;
  valuePtr = 1;
  v38 = v24;
  v70 = v24 + 288;
  v39 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v40 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v41 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v37, CFSTR("name"), CFSTR("unit"));
  CFDictionarySetValue(v37, CFSTR("type"), v39);
  CFDictionarySetValue(v37, CFSTR("address"), v41);
  CFDictionarySetValue(v37, CFSTR("semantic"), v40);
  CFArrayAppendValue(v36, v37);
  CFRelease(v40);
  CFRelease(v37);
  CFRelease(v41);
  CFRelease(v39);
  v42 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v18);
  v71 = 2;
  valuePtr = 5;
  v70 = v24 + 88;
  v43 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v44 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v45 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v42, CFSTR("name"), CFSTR("animationManager"));
  CFDictionarySetValue(v42, CFSTR("type"), v43);
  CFDictionarySetValue(v42, CFSTR("address"), v45);
  CFDictionarySetValue(v42, CFSTR("semantic"), v44);
  CFArrayAppendValue(v36, v42);
  CFRelease(v44);
  CFRelease(v42);
  CFRelease(v45);
  CFRelease(v43);
  v46 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v18);
  v71 = 2;
  valuePtr = 5;
  v70 = v24 + 368;
  v47 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v48 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v49 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v46, CFSTR("name"), CFSTR("background"));
  CFDictionarySetValue(v46, CFSTR("type"), v47);
  CFDictionarySetValue(v46, CFSTR("address"), v49);
  CFDictionarySetValue(v46, CFSTR("semantic"), v48);
  CFArrayAppendValue(v36, v46);
  CFRelease(v48);
  CFRelease(v46);
  CFRelease(v49);
  CFRelease(v47);
  v50 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v51 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v52 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v71 = 2;
  valuePtr = 5;
  v70 = v38 + 376;
  v53 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v54 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v55 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v52, CFSTR("name"), CFSTR("environment"));
  CFDictionarySetValue(v52, CFSTR("type"), v53);
  CFDictionarySetValue(v52, CFSTR("address"), v55);
  CFDictionarySetValue(v52, CFSTR("semantic"), v54);
  v56 = v36;
  CFArrayAppendValue(v36, v52);
  CFRelease(v54);
  CFRelease(v52);
  CFRelease(v55);
  CFRelease(v53);
  v57 = CFDictionaryCreateMutable(0, 4, v50, v51);
  v71 = 0;
  valuePtr = 2;
  v70 = v38 + 48;
  v58 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v59 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v60 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v57, CFSTR("name"), CFSTR("worldRef"));
  CFDictionarySetValue(v57, CFSTR("type"), v58);
  CFDictionarySetValue(v57, CFSTR("address"), v60);
  CFDictionarySetValue(v57, CFSTR("semantic"), v59);
  CFArrayAppendValue(v36, v57);
  CFRelease(v59);
  CFRelease(v57);
  CFRelease(v60);
  CFRelease(v58);
  v61 = CFDictionaryCreateMutable(0, 4, v50, MEMORY[0x1E0C9B3A0]);
  v71 = 2;
  valuePtr = 5;
  v70 = v38 + 136;
  v62 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v63 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v64 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v61, CFSTR("name"), CFSTR("lightingSystem"));
  CFDictionarySetValue(v61, CFSTR("type"), v62);
  CFDictionarySetValue(v61, CFSTR("address"), v64);
  CFDictionarySetValue(v61, CFSTR("semantic"), v63);
  CFArrayAppendValue(v36, v61);
  CFRelease(v63);
  CFRelease(v61);
  CFRelease(v64);
  CFRelease(v62);
  v65 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v71 = 2;
  valuePtr = 5;
  v70 = v38 + 144;
  v66 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v67 = CFNumberCreate(0, kCFNumberSInt32Type, &v71);
  v68 = CFNumberCreate(0, kCFNumberLongType, &v70);
  CFDictionarySetValue(v65, CFSTR("name"), CFSTR("raytracingSystem"));
  CFDictionarySetValue(v65, CFSTR("type"), v66);
  CFDictionarySetValue(v65, CFSTR("address"), v68);
  CFDictionarySetValue(v65, CFSTR("semantic"), v67);
  CFArrayAppendValue(v56, v65);
  CFRelease(v67);
  CFRelease(v65);
  CFRelease(v68);
  CFRelease(v66);
  return v56;
}

void sub_1B187D504(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

CFStringRef sub_1B187D640(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B193E5B0(v5, *(CFStringRef *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B187D98C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  if ((sub_1B18C2F24(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 20));
    objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 40) + 24), v10, *(_QWORD *)(a1 + 48), v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 20));
  }
}

void sub_1B187DB5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C30E4(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B187DC08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3148(*(void **)(a1 + 32), a2, a3, a4, *(float *)(a1 + 40));
}

void sub_1B187DCC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C2FF4(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4);
}

void sub_1B187DD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3064(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4, *(float *)(a1 + 48));
}

void sub_1B187E268(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFXBinding *v24;

  v5 = (_QWORD *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  v24 = objc_alloc_init(CFXBinding);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(_QWORD *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(_QWORD *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(_QWORD *)(a1 + 64), v17);
  sub_1B193F4C8(v5, v24, v18, v19, v20, v21, v22, v23);

}

void sub_1B187E394(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F704(v5, *(const __CFString **)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B187E440(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F68C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B187E710(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865880(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B187E828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186592C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B187E958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1866330(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187EA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1866390(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B187EBAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18642B4(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B187ECEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18663EC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187EE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18664AC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187EF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865EBC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187F1DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865F58(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187F1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865FF4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187F2B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865F58(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187F380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865FF4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(double *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

float sub_1B187F61C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1865C90(*(float **)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

float sub_1B187F75C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1866128(*(float **)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

float sub_1B187F89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B1865BAC(*(float **)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187F9CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865E20(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187FAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1865D7C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_DWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B187FC0C(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18657C4(*(__n128 **)(a1[6].n128_u64[0] + 8), a1[2], a1[3], a1[4], a1[5], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B187FE48(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864484(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B187FF58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864384(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1880068(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864584(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1880178(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864684(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1880288(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864784(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1880398(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864884(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18804A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864984(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18805B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864A84(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18806C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864C84(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18807D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864B84(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18808E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864D84(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18809F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864E84(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1880B08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(uint64_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B1864F84(v4, v5, v6, v7, v8, v9, v10, v11);
}

id sub_1B1880C74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = (id)objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E6478AF0, a4);
  qword_1EEF65EC0 = (uint64_t)result;
  return result;
}

uint64_t VFXSetResourceBundle(uint64_t result)
{
  qword_1EEF65ED0 = result;
  return result;
}

BOOL VFXHasSpecialResourceBundle()
{
  return qword_1EEF65ED0 != 0;
}

uint64_t VFXGetResourceBundle(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = qword_1EEF65ED0;
  if (!qword_1EEF65ED0)
    return objc_msgSend_mainBundle(MEMORY[0x1E0CB34D0], a2, a3, a4);
  return result;
}

uint64_t sub_1B1881E00()
{
  void *v0;
  uint64_t v1;
  const char *v2;
  uint64_t v3;

  v0 = (void *)MEMORY[0x1E0CB34D0];
  v1 = objc_opt_class();
  return objc_msgSend_bundleForClass_(v0, v2, v1, v3);
}

id VFXSetExternalTextureSource(id result)
{
  void *v1;

  if ((id)qword_1EEF65ED8 != result)
  {
    v1 = result;

    result = v1;
    qword_1EEF65ED8 = (uint64_t)result;
  }
  return result;
}

uint64_t VFXGetExternalTextureSource()
{
  return qword_1EEF65ED8;
}

id sub_1B1881E78(id result, const char *a2)
{
  void *v2;
  const char *v3;
  float v4[2];
  float v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v2 = result;
    objc_msgSend_getControlPointAtIndex_values_(result, a2, 1, (uint64_t)v4);
    objc_msgSend_getControlPointAtIndex_values_(v2, v3, 2, (uint64_t)v5);
    return (id)sub_1B18027C0(v4[0], v4[1], v5[0], v5[1]);
  }
  return result;
}

uint64_t sub_1B1881EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _DWORD *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  v8 = (_DWORD *)sub_1B180283C(a1, a2, a3, a4, a5, a6, a7, a8);
  LODWORD(v9) = *v8;
  LODWORD(v10) = v8[1];
  LODWORD(v11) = v8[2];
  LODWORD(v12) = v8[3];
  return objc_msgSend_functionWithControlPoints__::(MEMORY[0x1E0CD27D0], v13, v14, v15, v9, v10, v11, v12);
}

uint64_t sub_1B1881F24(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGColorSpace *v4;
  CGColor *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  v4 = (CGColorSpace *)sub_1B179D1E8();
  v5 = CGColorCreate(v4, components);
  v8 = objc_msgSend_colorWithCGColor_(MEMORY[0x1E0DC3658], v6, (uint64_t)v5, v7);
  CGColorRelease(v5);
  return v8;
}

uint64_t sub_1B1881FA8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  CGColorSpace *v4;
  CGColor *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  CGFloat components[5];

  components[4] = *(CGFloat *)MEMORY[0x1E0C80C00];
  components[0] = a1;
  components[1] = a2;
  components[2] = a3;
  components[3] = a4;
  v4 = (CGColorSpace *)sub_1B179D2EC();
  v5 = CGColorCreate(v4, components);
  v8 = objc_msgSend_colorWithCGColor_(MEMORY[0x1E0DC3658], v6, (uint64_t)v5, v7);
  CGColorRelease(v5);
  return v8;
}

double sub_1B1882030(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CGColor *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CGColor *)objc_msgSend_CGColor(a1, a2, a3, a4);
  return sub_1B179D32C(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B1882044(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  CGColor *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;

  if (!a3)
    return 0;
  v3 = sub_1B179D69C(*a3, a3[1]);
  v6 = objc_msgSend_colorWithCGColor_(MEMORY[0x1E0DC3658], v4, (uint64_t)v3, v5);
  CGColorRelease(v3);
  return v6;
}

uint64_t sub_1B1882094(void *a1, const char *a2, float32x2_t *a3, uint64_t a4)
{
  float64x2_t v4;
  CGColorSpace *v5;
  CGColor *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  float64x2_t v11;
  float64x2_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((a4 & 1) == 0)
    return objc_msgSend_vfx_colorWithCFXColor_(a1, a2, (uint64_t)a3, a4);
  if (!a3)
    return 0;
  v4 = vcvtq_f64_f32(a3[1]);
  v11 = vcvtq_f64_f32(*a3);
  v12 = v4;
  v5 = (CGColorSpace *)sub_1B179D044();
  v6 = CGColorCreate(v5, v11.f64);
  v9 = objc_msgSend_colorWithCGColor_(MEMORY[0x1E0DC3658], v7, (uint64_t)v6, v8, *(_OWORD *)&v11, *(_OWORD *)&v12);
  CGColorRelease(v6);
  return v9;
}

CGColor *sub_1B1882158(void *a1, const char *a2, uint64_t a3, BOOL *a4)
{
  int v5;
  CGColor *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  CGColor *v13;

  v5 = a3;
  result = (CGColor *)objc_msgSend_CGColor(a1, a2, a3, (uint64_t)a4);
  v13 = result;
  if (result)
  {
    result = (CGColor *)sub_1B179D3B0(result, v5, v7, v8, v9, v10, v11, v12);
    if (!a4)
      return result;
  }
  else if (!a4)
  {
    return result;
  }
  *a4 = v13 != 0;
  return result;
}

uint64_t sub_1B18821B4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  _QWORD v14[6];

  v6 = (void *)MEMORY[0x1E0C99DE8];
  v7 = objc_msgSend_count(a1, a2, a3, a4);
  v10 = objc_msgSend_arrayWithCapacity_(v6, v8, v7, v9);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1B1882240;
  v14[3] = &unk_1E63D7D08;
  v14[4] = v10;
  v14[5] = a3;
  objc_msgSend_enumerateObjectsUsingBlock_(a1, v11, (uint64_t)v14, v12);
  return v10;
}

uint64_t sub_1B1882240(uint64_t a1)
{
  uint64_t result;
  const char *v3;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (result)
    return objc_msgSend_addObject_(*(void **)(a1 + 32), v3, result, v4);
  return result;
}

double sub_1B1882280(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v24;
  unsigned int v25;

  v5 = (void *)objc_msgSend_valueForKey_(a1, a2, (uint64_t)CFSTR("x"), a4);
  objc_msgSend_floatValue(v5, v6, v7, v8);
  v25 = v9;
  v12 = (void *)objc_msgSend_valueForKey_(a1, v10, (uint64_t)CFSTR("y"), v11);
  objc_msgSend_floatValue(v12, v13, v14, v15);
  v24 = v16;
  v19 = (void *)objc_msgSend_valueForKey_(a1, v17, (uint64_t)CFSTR("z"), v18);
  objc_msgSend_floatValue(v19, v20, v21, v22);
  return COERCE_DOUBLE(__PAIR64__(v24, v25));
}

double sub_1B18822F4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v30;
  unsigned int v31;

  v5 = (void *)objc_msgSend_valueForKey_(a1, a2, (uint64_t)CFSTR("x"), a4);
  objc_msgSend_floatValue(v5, v6, v7, v8);
  v31 = v9;
  v12 = (void *)objc_msgSend_valueForKey_(a1, v10, (uint64_t)CFSTR("y"), v11);
  objc_msgSend_floatValue(v12, v13, v14, v15);
  v30 = v16;
  v19 = (void *)objc_msgSend_valueForKey_(a1, v17, (uint64_t)CFSTR("z"), v18);
  objc_msgSend_floatValue(v19, v20, v21, v22);
  v25 = (void *)objc_msgSend_valueForKey_(a1, v23, (uint64_t)CFSTR("w"), v24);
  objc_msgSend_floatValue(v25, v26, v27, v28);
  return COERCE_DOUBLE(__PAIR64__(v30, v31));
}

__n128 sub_1B1882388(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  void *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v105;
  unsigned int v106;
  unsigned int v107;
  __int128 v108;

  v5 = (void *)objc_msgSend_valueForKey_(a1, a2, (uint64_t)CFSTR("m11"), a4);
  objc_msgSend_floatValue(v5, v6, v7, v8);
  v107 = v9;
  v12 = (void *)objc_msgSend_valueForKey_(a1, v10, (uint64_t)CFSTR("m12"), v11);
  objc_msgSend_floatValue(v12, v13, v14, v15);
  v106 = v16;
  v19 = (void *)objc_msgSend_valueForKey_(a1, v17, (uint64_t)CFSTR("m13"), v18);
  objc_msgSend_floatValue(v19, v20, v21, v22);
  v105 = v23;
  v26 = (void *)objc_msgSend_valueForKey_(a1, v24, (uint64_t)CFSTR("m14"), v25);
  objc_msgSend_floatValue(v26, v27, v28, v29);
  *(_QWORD *)&v30 = __PAIR64__(v106, v107);
  *((_QWORD *)&v30 + 1) = __PAIR64__(v31, v105);
  v108 = v30;
  v34 = (void *)objc_msgSend_valueForKey_(a1, v32, (uint64_t)CFSTR("m21"), v33);
  objc_msgSend_floatValue(v34, v35, v36, v37);
  v40 = (void *)objc_msgSend_valueForKey_(a1, v38, (uint64_t)CFSTR("m22"), v39);
  objc_msgSend_floatValue(v40, v41, v42, v43);
  v46 = (void *)objc_msgSend_valueForKey_(a1, v44, (uint64_t)CFSTR("m23"), v45);
  objc_msgSend_floatValue(v46, v47, v48, v49);
  v52 = (void *)objc_msgSend_valueForKey_(a1, v50, (uint64_t)CFSTR("m24"), v51);
  objc_msgSend_floatValue(v52, v53, v54, v55);
  v58 = (void *)objc_msgSend_valueForKey_(a1, v56, (uint64_t)CFSTR("m31"), v57);
  objc_msgSend_floatValue(v58, v59, v60, v61);
  v64 = (void *)objc_msgSend_valueForKey_(a1, v62, (uint64_t)CFSTR("m32"), v63);
  objc_msgSend_floatValue(v64, v65, v66, v67);
  v70 = (void *)objc_msgSend_valueForKey_(a1, v68, (uint64_t)CFSTR("m33"), v69);
  objc_msgSend_floatValue(v70, v71, v72, v73);
  v76 = (void *)objc_msgSend_valueForKey_(a1, v74, (uint64_t)CFSTR("m34"), v75);
  objc_msgSend_floatValue(v76, v77, v78, v79);
  v82 = (void *)objc_msgSend_valueForKey_(a1, v80, (uint64_t)CFSTR("m41"), v81);
  objc_msgSend_floatValue(v82, v83, v84, v85);
  v88 = (void *)objc_msgSend_valueForKey_(a1, v86, (uint64_t)CFSTR("m42"), v87);
  objc_msgSend_floatValue(v88, v89, v90, v91);
  v94 = (void *)objc_msgSend_valueForKey_(a1, v92, (uint64_t)CFSTR("m43"), v93);
  objc_msgSend_floatValue(v94, v95, v96, v97);
  v100 = (void *)objc_msgSend_valueForKey_(a1, v98, (uint64_t)CFSTR("m44"), v99);
  objc_msgSend_floatValue(v100, v101, v102, v103);
  return (__n128)v108;
}

uint64_t sub_1B1882580(double a1, double a2, uint64_t a3, const char *a4)
{
  _QWORD v5[2];

  *(double *)v5 = a1;
  *(double *)&v5[1] = a2;
  return objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E0CB3B18], a4, (uint64_t)v5, (uint64_t)"{CGPoint=dd}");
}

double sub_1B18825B4(void *a1, const char *a2)
{
  _QWORD v3[2];

  v3[0] = 0;
  v3[1] = 0;
  objc_msgSend_getValue_size_(a1, a2, (uint64_t)v3, 16);
  return *(double *)v3;
}

uint64_t sub_1B18825E0(float32x2_t a1, uint64_t a2, const char *a3)
{
  float64x2_t v4;

  v4 = vcvtq_f64_f32(a1);
  return objc_msgSend_valueWithBytes_objCType_(MEMORY[0x1E0CB3B18], a3, (uint64_t)&v4, (uint64_t)"{CGPoint=dd}");
}

float32x2_t sub_1B1882618(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  const char *v11;
  float32x2_t result;
  float64x2_t v13;

  v5 = (const char *)objc_msgSend_objCType(a1, a2, a3, a4);
  if (!strcmp(v5, "{?=ff}"))
  {
    v13.f64[0] = 0.0;
    objc_msgSend_getValue_size_(a1, v6, (uint64_t)&v13, 8);
    return *(float32x2_t *)&v13.f64[0];
  }
  else
  {
    v9 = (const char *)objc_msgSend_objCType(a1, v6, v7, v8);
    v10 = strcmp(v9, "{CGPoint=dd}");
    result = 0;
    if (!v10)
    {
      v13 = 0uLL;
      objc_msgSend_getValue_size_(a1, v11, (uint64_t)&v13, 16, 0.0);
      return vcvt_f32_f64(v13);
    }
  }
  return result;
}

uint64_t sub_1B18826A4(__n128 a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_valueWithCGRect_(MEMORY[0x1E0CB3B18], a3, a4, a5, a1.n128_f32[0], a1.n128_f32[1], a1.n128_f32[2], 0.0);
}

double sub_1B18826CC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  const char *v11;
  __int128 v12;
  float64x2_t v14;

  v5 = (const char *)objc_msgSend_objCType(a1, a2, a3, a4);
  if (!strcmp(v5, "{?=fff}"))
  {
    LODWORD(v14.f64[1]) = 0;
    v14.f64[0] = 0.0;
    objc_msgSend_getValue_size_(a1, v6, (uint64_t)&v14, 12);
    *(float64_t *)&v12 = v14.f64[0];
  }
  else
  {
    v9 = (const char *)objc_msgSend_objCType(a1, v6, v7, v8);
    v10 = strcmp(v9, "{CGRect={CGPoint=dd}{CGSize=dd}}");
    v12 = 0uLL;
    if (!v10)
    {
      memset(&v14, 0, 32);
      objc_msgSend_getValue_size_(a1, v11, (uint64_t)&v14, 32);
      *(float32x2_t *)&v12 = vcvt_f32_f64(v14);
    }
  }
  return *(double *)&v12;
}

uint64_t sub_1B1882768(__n128 a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5)
{
  return objc_msgSend_valueWithCGRect_(MEMORY[0x1E0CB3B18], a3, a4, a5, a1.n128_f32[0], a1.n128_f32[1], a1.n128_f32[2], a1.n128_f32[3]);
}

float64_t sub_1B1882794(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  int v10;
  const char *v11;
  float64_t result;
  float64x2_t v13;
  float64x2_t v14;

  v5 = (const char *)objc_msgSend_objCType(a1, a2, a3, a4);
  if (!strcmp(v5, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    v13 = 0u;
    v14 = 0u;
    objc_msgSend_getValue_size_(a1, v6, (uint64_t)&v13, 32);
    *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v13), v14).u64[0];
  }
  else
  {
    v9 = (const char *)objc_msgSend_objCType(a1, v6, v7, v8);
    v10 = strcmp(v9, "{?=ffff}");
    result = 0.0;
    if (!v10)
    {
      v13 = 0uLL;
      objc_msgSend_getValue_size_(a1, v11, (uint64_t)&v13, 16, 0.0);
      return v13.f64[0];
    }
  }
  return result;
}

uint64_t sub_1B1882828(void *a1, const char *a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD v9[8];

  v9[0] = vcvtq_f64_f32(*(float32x2_t *)a3.f32);
  v9[1] = vcvt_hight_f64_f32(a3);
  v9[2] = vcvtq_f64_f32(*(float32x2_t *)a4.f32);
  v9[3] = vcvt_hight_f64_f32(a4);
  v9[4] = vcvtq_f64_f32(*(float32x2_t *)a5.f32);
  v9[5] = vcvt_hight_f64_f32(a5);
  v9[6] = vcvtq_f64_f32(*(float32x2_t *)a6.f32);
  v9[7] = vcvt_hight_f64_f32(a6);
  return objc_msgSend_valueWithCATransform3D_(a1, a2, (uint64_t)v9, a8);
}

double sub_1B1882878(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double result;

  v5 = (const char *)objc_msgSend_objCType(a1, a2, a3, a4);
  if (strcmp(v5, "{CATransform3D=dddddddddddddddd}"))
    return *(double *)&VFXMatrix4Identity;
  result = 0.0;
  if (a1)
  {
    objc_msgSend_CATransform3DValue(a1, v6, v7, v8);
    *(_QWORD *)&result = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64((float64x2_t)0), (float64x2_t)0).u64[0];
  }
  return result;
}

const __CFString *sub_1B1882928(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  float v5;
  const char *v6;
  uint64_t v7;
  const char *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  uint64_t v36;
  float v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  uint32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  int32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int8x16_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float v72;
  float32x4_t v73;
  float v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  int8x16_t v79;
  int8x16_t v80;
  float v81;
  float32x2_t v82;
  float32x2_t v83;
  float32x2_t v84;
  uint64_t v85;
  int32x2_t v86;
  float32x4_t v87;
  float32x2_t v88;
  float32x2_t v89;
  float32x4_t v90;
  __int128 v91;
  __int128 v92;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    objc_msgSend_floatValue(a1, v2, v3, v4);
    return (const __CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v6, (uint64_t)CFSTR("%.2f"), v7, v5);
  }
  v9 = (const char *)objc_msgSend_objCType(a1, v2, v3, v4);
  if (!strcmp(v9, "{?=ff}"))
  {
    *(_QWORD *)&v91 = 0;
    objc_msgSend_getValue_size_(a1, v10, (uint64_t)&v91, 8);
    return (const __CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v25, (uint64_t)CFSTR("%.2f %.2f"), v26, *(float *)&v91, *((float *)&v91 + 1));
  }
  v13 = (const char *)objc_msgSend_objCType(a1, v10, v11, v12);
  if (!strcmp(v13, "{?=fff}"))
  {
    DWORD2(v91) = 0;
    *(_QWORD *)&v91 = 0;
    objc_msgSend_getValue_size_(a1, v14, (uint64_t)&v91, 12);
    return (const __CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v27, (uint64_t)CFSTR("%.2f %.2f %.2f"), v28, *(float *)&v91, *((float *)&v91 + 1), *((float *)&v91 + 2));
  }
  v17 = (const char *)objc_msgSend_objCType(a1, v14, v15, v16);
  if (!strcmp(v17, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
  {
    v91 = 0u;
    v92 = 0u;
    objc_msgSend_getValue_size_(a1, v18, (uint64_t)&v91, 32);
    return (const __CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v29, (uint64_t)CFSTR("%.2f %.2f %.2f %.2f"), v30, v91, v92);
  }
  v21 = (const char *)objc_msgSend_objCType(a1, v18, v19, v20);
  if (strcmp(v21, "{CATransform3D=dddddddddddddddd}"))
    return (const __CFString *)objc_msgSend_description(a1, v22, v23, v24);
  objc_msgSend_VFXMatrix4Value(a1, v22, v23, v24);
  v38 = vmulq_f32(v33, v33);
  v39 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1)));
  v39.f32[0] = sqrtf(v39.f32[0]);
  v40 = vmulq_f32(v34, v34);
  v41 = vmulq_f32(v35, v35);
  v42 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
  v43 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
  v44 = v39;
  v44.f32[1] = v42;
  v45 = v44;
  v45.f32[2] = v43;
  v46 = (uint32x4_t)vceqzq_f32(v45);
  v46.i32[3] = v46.i32[2];
  if ((vmaxvq_u32(v46) & 0x80000000) != 0)
    return CFSTR("non-affine matrix");
  v47 = vdivq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 0));
  v48 = vdivq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1));
  v49 = vdivq_f32(v35, (float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2));
  v50 = (int32x4_t)vmulq_f32(v47, v47);
  v51 = (int32x4_t)vmulq_f32(v48, v48);
  v52 = (int32x4_t)vmulq_f32(v49, v49);
  v53 = vzip2q_s32(v50, v52);
  v54 = (float32x4_t)vzip1q_s32(vzip1q_s32(v50, v52), v51);
  v55 = (float32x4_t)vtrn2q_s32(v50, v51);
  v55.i32[2] = v52.i32[1];
  v56 = vaddq_f32((float32x4_t)vzip1q_s32(v53, vdupq_laneq_s32(v51, 2)), vaddq_f32(v54, v55));
  v55.i64[0] = 0x80000000800000;
  v55.i64[1] = 0x80000000800000;
  v57 = vcgeq_f32(v55, v56);
  v56.i32[3] = 0;
  v58 = vrsqrteq_f32(v56);
  v59 = vmulq_f32(v58, vrsqrtsq_f32(v56, vmulq_f32(v58, v58)));
  v60 = v57;
  v60.i32[3] = 0;
  v61 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v60), (int8x16_t)v56, (int8x16_t)vmulq_f32(v59, vrsqrtsq_f32(v56, vmulq_f32(v59, v59))));
  v62 = vmulq_n_f32(v47, v61.f32[0]);
  v63 = vmulq_lane_f32(v48, *(float32x2_t *)v61.f32, 1);
  v64 = vmulq_laneq_f32(v49, v61, 2);
  v65 = (int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64);
  v66 = (int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63);
  v67 = (int32x4_t)v62;
  if (v57.i32[0])
  {
    v68 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v65, (int8x16_t)v64, 0xCuLL), vnegq_f32(v63)), v64, (float32x4_t)vextq_s8(v66, (int8x16_t)v63, 0xCuLL));
    v67 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v68, v68), (int8x16_t)v68, 0xCuLL);
  }
  v69 = (int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62);
  v70 = v63;
  if (v57.i32[1])
  {
    v71 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v69, (int8x16_t)v62, 0xCuLL), vnegq_f32(v64)), v62, (float32x4_t)vextq_s8(v65, (int8x16_t)v64, 0xCuLL));
    v70 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v71, v71), (int8x16_t)v71, 0xCuLL);
  }
  if (v57.i32[2])
  {
    v57 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v66, (int8x16_t)v63, 0xCuLL), vnegq_f32(v62)), v63, (float32x4_t)vextq_s8(v69, (int8x16_t)v62, 0xCuLL));
    v64 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v57, v57), (int8x16_t)v57, 0xCuLL);
  }
  v72 = (float)(*(float *)v67.i32 + v70.f32[1]) + v64.f32[2];
  if (v72 > 0.0)
  {
    v73 = (float32x4_t)vzip2q_s32((int32x4_t)v70, vuzp1q_s32((int32x4_t)v70, (int32x4_t)v64));
    v73.i32[2] = v67.i32[1];
    v74 = sqrtf(v72 + 1.0);
    v75 = (float32x4_t)vtrn2q_s32((int32x4_t)v64, vzip2q_s32((int32x4_t)v64, v67));
    v75.i32[2] = v70.i32[0];
    v77 = vsubq_f32(v73, v75);
    v73.f32[3] = v74;
    v75.f32[3] = v74;
    v76 = vmulq_f32(v73, v75);
    v77.i32[3] = v76.i32[3];
LABEL_30:
    v76.f32[0] = 0.5 / v74;
    v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 0);
    goto LABEL_31;
  }
  if (*(float *)v67.i32 < v70.f32[1] || *(float *)v67.i32 < v64.f32[2])
  {
    if (v70.f32[1] <= v64.f32[2])
    {
      v74 = sqrtf((float)((float)(v64.f32[2] + 1.0) - *(float *)v67.i32) - v70.f32[1]);
      *(float32x2_t *)v77.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v67, (int32x4_t)v70), *(float32x2_t *)v64.f32);
      v88 = (float32x2_t)__PAIR64__(v67.u32[1], LODWORD(v74));
      v89 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.f32, 0);
      *(float32x2_t *)v76.f32 = vsub_f32(*(float32x2_t *)v67.i8, v89);
      v89.f32[0] = v74;
      v89.i32[0] = vmul_f32(v88, v89).u32[0];
      v89.i32[1] = v76.i32[1];
      *(float32x2_t *)&v77.u32[2] = v89;
      goto LABEL_30;
    }
    v81 = sqrtf((float)((float)(v70.f32[1] + 1.0) - *(float *)v67.i32) - v64.f32[2]);
    *(int32x2_t *)v57.i8 = vdup_laneq_s32((int32x4_t)v70, 2);
    v79 = (int8x16_t)v57;
    *(float *)v79.i32 = v81;
    v79.i32[0] = vmul_f32(*(float32x2_t *)v79.i8, (float32x2_t)__PAIR64__(v64.u32[1], LODWORD(v81))).u32[0];
    v79.i32[1] = vadd_f32(*(float32x2_t *)&v57, *(float32x2_t *)&v64).i32[1];
    v80 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 1), v70);
    v86 = (int32x2_t)vsubq_f32(v64, (float32x4_t)vdupq_laneq_s32(v67, 2)).u64[0];
    v87 = (float32x4_t)vextq_s8(vextq_s8(v80, v80, 4uLL), v79, 0xCuLL);
    v87.i32[3] = v86.i32[0];
  }
  else
  {
    v81 = sqrtf((float)((float)(*(float *)v67.i32 + 1.0) - v70.f32[1]) - v64.f32[2]);
    v82 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.f32, 0);
    v83 = vadd_f32(*(float32x2_t *)v67.i8, v82);
    v82.f32[0] = v81;
    v87.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v67.u32[1], LODWORD(v81)), v82).u32[0];
    v87.i32[1] = v83.i32[1];
    v84 = (float32x2_t)vzip2q_s32(v67, (int32x4_t)v70).u64[0];
    LODWORD(v85) = vadd_f32(v84, *(float32x2_t *)v64.f32).u32[0];
    v86 = (int32x2_t)vsub_f32(v84, *(float32x2_t *)v64.f32);
    HIDWORD(v85) = v86.i32[1];
    v87.i64[1] = v85;
  }
  *(float *)v86.i32 = 0.5 / v81;
  v77 = (float32x4_t)vdupq_lane_s32(v86, 0);
LABEL_31:
  v90 = vmulq_f32(v87, v77);
  return (const __CFString *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v31, (uint64_t)CFSTR("p[%.2f %.2f %.2f] q[%.2f %.2f %.2f %.2f] s[%.2f %.2f %.2f]"), v32, *(float *)&v36, *((float *)&v36 + 1), v37, v90.f32[0], v90.f32[1], v90.f32[2], v90.f32[3], v39.f32[0], v42, v43);
}

uint64_t sub_1B1882E04(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  v6 = (const char *)objc_msgSend_objCType(a1, v2, v3, v4);
  if (!strcmp(v6, "{CGPoint=dd}"))
    return 2;
  v10 = (const char *)objc_msgSend_objCType(a1, v7, v8, v9);
  if (!strcmp(v10, "{?=ff}"))
    return 2;
  v14 = (const char *)objc_msgSend_objCType(a1, v11, v12, v13);
  if (!strcmp(v14, "{?=fff}"))
    return 3;
  v18 = (const char *)objc_msgSend_objCType(a1, v15, v16, v17);
  if (!strcmp(v18, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
    return 4;
  v22 = (const char *)objc_msgSend_objCType(a1, v19, v20, v21);
  if (!strcmp(v22, "{?=ffff}"))
    return 4;
  v26 = (const char *)objc_msgSend_objCType(a1, v23, v24, v25);
  return 16 * (strcmp(v26, "{CATransform3D=dddddddddddddddd}") == 0);
}

id sub_1B1882EF4(void *a1, const char *a2, void *a3, uint64_t a4)
{
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  const char *v40;
  uint64_t v41;
  unsigned int v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  void *v50;
  char *v51;
  double *v52;
  objc_super v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;

  v6 = objc_msgSend_length(a3, a2, (uint64_t)a3, a4);
  if (v6 == 3)
  {
    v34 = (const char *)objc_msgSend_objCType(a1, v7, v8, v9);
    if (!strcmp(v34, "{CATransform3D=dddddddddddddddd}"))
    {
      v60 = 0u;
      v61 = 0u;
      v58 = 0u;
      v59 = 0u;
      v56 = 0u;
      v57 = 0u;
      v54 = 0u;
      v55 = 0u;
      if (a1)
        objc_msgSend_CATransform3DValue(a1, v35, v36, v37);
      v39 = objc_msgSend_characterAtIndex_(a3, v35, 1, v37);
      v42 = objc_msgSend_characterAtIndex_(a3, v40, 2, v41);
      if ((v39 - 49) <= 3 && v42 >= 0x31 && v42 <= 0x34)
        return (id)objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v43, v44, v45, *((double *)&v54 + 4 * v39 + v42 - 245));
    }
    goto LABEL_12;
  }
  if (v6 != 1 || (v10 = objc_msgSend_characterAtIndex_(a3, v7, 0, v9), (v10 & 0xFFFC) != 0x78))
  {
LABEL_12:
    v53.receiver = a1;
    v53.super_class = (Class)&off_1EF018F20;
    return objc_msgSendSuper2(&v53, sel_valueForUndefinedKey_, a3);
  }
  v11 = v10;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return a1;
  v15 = v11 - 120;
  v16 = (const char *)objc_msgSend_objCType(a1, v12, v13, v14);
  if (!strcmp(v16, "{?=ff}"))
  {
    *(_QWORD *)&v54 = 0;
    objc_msgSend_getValue_size_(a1, v17, (uint64_t)&v54, 8);
    v50 = (void *)MEMORY[0x1E0CB37E8];
    v51 = (char *)&v54 + 4;
    if (!v15)
      v51 = (char *)&v54;
    goto LABEL_24;
  }
  v20 = (const char *)objc_msgSend_objCType(a1, v17, v18, v19);
  if (!strcmp(v20, "{CGPoint=dd}"))
  {
    v54 = 0uLL;
    objc_msgSend_getValue_size_(a1, v21, (uint64_t)&v54, 16);
    v50 = (void *)MEMORY[0x1E0CB37E8];
    if (v15)
      v52 = (double *)&v54 + 1;
    else
      v52 = (double *)&v54;
    v49 = *v52;
    *(float *)&v49 = *v52;
    return (id)objc_msgSend_numberWithFloat_(v50, v46, v47, v48, v49);
  }
  v24 = (const char *)objc_msgSend_objCType(a1, v21, v22, v23);
  if (!strcmp(v24, "{?=fff}"))
  {
    DWORD2(v54) = 0;
    *(_QWORD *)&v54 = 0;
    objc_msgSend_getValue_size_(a1, v25, (uint64_t)&v54, 12);
    v50 = (void *)MEMORY[0x1E0CB37E8];
    if (!v15)
    {
      LODWORD(v49) = v54;
      return (id)objc_msgSend_numberWithFloat_(v50, v46, v47, v48, v49);
    }
    v51 = (char *)&v54 + 4;
    if (v15 != 2)
      v51 = (char *)&v54 + 8;
LABEL_24:
    LODWORD(v49) = *(_DWORD *)v51;
    return (id)objc_msgSend_numberWithFloat_(v50, v46, v47, v48, v49);
  }
  v28 = (const char *)objc_msgSend_objCType(a1, v25, v26, v27);
  if (strcmp(v28, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
    goto LABEL_12;
  v54 = 0u;
  v55 = 0u;
  objc_msgSend_getValue_size_(a1, v29, (uint64_t)&v54, 32);
  switch(v15)
  {
    case 0:
      return (id)objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v30, v31, v32, *(double *)&v54);
    case 1:
      return (id)objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v30, v31, v32, *((double *)&v54 + 1));
    case 2:
      return (id)objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v30, v31, v32, *(double *)&v55);
    case 3:
      return (id)objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], v30, v31, v32, *((double *)&v55 + 1));
    default:
      a1 = &unk_1E64783B8;
      break;
  }
  return a1;
}

CFTypeRef sub_1B18831BC(CFTypeRef cf)
{
  CFTypeID v2;
  const char *v3;
  uint64_t v4;

  if (cf && (v2 = CFGetTypeID(cf), v2 == CGColorGetTypeID()))
    return (CFTypeRef)objc_msgSend_colorWithCGColor_(MEMORY[0x1E0DC3658], v3, (uint64_t)cf, v4);
  else
    return cf;
}

double sub_1B1883210(void *a1)
{
  void *v1;
  CFTypeID v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double result;
  uint64_t v20;

  v1 = a1;
  v2 = CFGetTypeID(a1);
  if (v2 == CFURLGetTypeID())
    v1 = (void *)objc_msgSend_path(v1, v3, v4, v5);
  if (!v1)
    return 0.0;
  v20 = 0;
  v6 = objc_msgSend_stringByResolvingSymlinksInPath(v1, v3, v4, v5);
  v10 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v7, v8, v9);
  v12 = (void *)objc_msgSend_attributesOfItemAtPath_error_(v10, v11, v6, (uint64_t)&v20);
  v15 = (void *)objc_msgSend_objectForKey_(v12, v13, *MEMORY[0x1E0CB2A88], v14);
  if (!v15)
    return 0.0;
  objc_msgSend_timeIntervalSinceReferenceDate(v15, v16, v17, v18);
  return result;
}

uint64_t sub_1B18832A0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  v8 = a3;
  v11 = a3;
  v12 = sub_1B179E250(a2, a2, a3, a4, a5, a6, a7, a8) + a3;
  v13 = malloc_type_malloc(v12, 0xADBA6ABAuLL);
  v15 = (uint64_t)v13;
  if (v8)
    *v13 = a2;
  sub_1B19B9DE4(a1, (uint64_t)&v13[v11], a2, v14);
  return objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v16, v15, v12, 1);
}

uint64_t VFXDataFromValue(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 && (v6 = (const char *)objc_msgSend_objCType(a1, a2, a3, a4), v7 = sub_1B19B9BA8(v6), (_DWORD)v7))
    return sub_1B18832A0(a1, v7, (uint64_t)a2, v8, v9, v10, v11, v12);
  else
    return 0;
}

void *sub_1B1883370(void *result, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;

  if (result)
  {
    v6 = result;
    v7 = objc_msgSend_bytes(result, a2, a3, a4);
    v11 = objc_msgSend_length(v6, v8, v9, v10);
    if (sub_1B179E250((int)a2, v12, v13, v14, v15, v16, v17, v18) + a3 <= v11)
    {
      sub_1B179E250((int)a2, v19, v20, v21, v22, v23, v24, v25);
      __memcpy_chk();
      return (void *)sub_1B19BA16C((double *)(v7 + a3), a2, v28, v26, v27);
    }
    else
    {
      if ((byte_1EEF65EE0 & 1) == 0)
      {
        byte_1EEF65EE0 = 1;
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: _VFXValueFromDataAndType - out of bounds"), v20, v21, v22, v23, v24, v25, v29);
      }
      return 0;
    }
  }
  return result;
}

void *VFXValueFromDataAndType(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1883370(a1, a2, 0, a4);
}

void *VFXValueFromData(void *result, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;

  if (result)
  {
    v4 = result;
    v5 = (const char *)*(unsigned __int8 *)objc_msgSend_bytes(result, a2, a3, a4);
    return sub_1B1883370(v4, v5, 1, v6);
  }
  return result;
}

uint64_t VFXDataFromArrayOfValues(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _WORD *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[128];
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  result = objc_msgSend_count(a1, a2, a3, a4);
  if (result)
  {
    v8 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v6, 0, v7);
    v12 = sub_1B19BA12C(v8, v9, v10, v11);
    v20 = sub_1B191E464((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
    if ((_DWORD)v20)
    {
      v28 = v20;
      v29 = sub_1B191E340((uint64_t)v12, v21, v22, v23, v24, v25, v26, v27);
      v33 = objc_msgSend_count(a1, v30, v31, v32) * v29 + 6;
      v34 = malloc_type_malloc(v33, 0x3041AA15uLL);
      *(_DWORD *)v34 = objc_msgSend_count(a1, v35, v36, v37);
      v34[2] = v28;
      v47 = 0u;
      v48 = 0u;
      v49 = 0u;
      v50 = 0u;
      v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v38, (uint64_t)&v47, (uint64_t)v51, 16);
      if (v39)
      {
        v42 = v39;
        v43 = (uint64_t)(v34 + 3);
        v44 = *(_QWORD *)v48;
        do
        {
          v45 = 0;
          do
          {
            if (*(_QWORD *)v48 != v44)
              objc_enumerationMutation(a1);
            sub_1B19B9DE4(*(void **)(*((_QWORD *)&v47 + 1) + 8 * v45), v43, v28, v41);
            v43 += v29;
            ++v45;
          }
          while (v42 != v45);
          v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v46, (uint64_t)&v47, (uint64_t)v51, 16);
        }
        while (v42);
      }
      return objc_msgSend_dataWithBytesNoCopy_length_freeWhenDone_(MEMORY[0x1E0C99D50], v40, (uint64_t)v34, v33, 1);
    }
    else
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: VFXDataFromArrayOfValues - unknown type"), v22, v23, v24, v25, v26, v27, v47);
      return 0;
    }
  }
  return result;
}

void *VFXArrayOfValueFromData(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  unsigned int *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const __CFString *v30;
  _OWORD v32[4];

  v5 = (unsigned int *)objc_msgSend_bytes(a1, a2, a3, a4);
  v13 = *((_WORD *)v5 + 2);
  if (!v13)
  {
    v30 = CFSTR("Error: VFXArrayOfValueFromData - unknown type");
LABEL_9:
    sub_1B17C4408(16, (uint64_t)v30, v7, v8, v9, v10, v11, v12, *(uint64_t *)&v32[0]);
    return 0;
  }
  v14 = v5;
  v15 = *v5;
  v16 = (const char *)v13;
  v17 = sub_1B179E250(v13, v6, v7, v8, v9, v10, v11, v12);
  if (v17 * v15 + 6 != objc_msgSend_length(a1, v18, v19, v20))
  {
    v30 = CFSTR("Error: VFXArrayOfValueFromData - unexpected data length");
    goto LABEL_9;
  }
  v22 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v21, v15, v8);
  if ((_DWORD)v15)
  {
    v23 = (char *)v14 + 6;
    do
    {
      memset(v32, 0, sizeof(v32));
      __memcpy_chk();
      v27 = sub_1B19BA16C((double *)v32, v16, v26, v24, v25);
      v23 += v17;
      objc_msgSend_addObject_(v22, v28, v27, v29);
      LODWORD(v15) = v15 - 1;
    }
    while ((_DWORD)v15);
  }
  return v22;
}

void sub_1B18839AC(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

CFStringRef sub_1B1883AFC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B193E5B0(v5, *(CFStringRef *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void *sub_1B1883F58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;

  if (*(_BYTE *)a1 != 5)
    return 0;
  v5 = *(unsigned __int8 *)(a1 + 32);
  v9 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], a2, v5, a4);
  if (v5)
  {
    v10 = 0;
    v11 = 8 * v5;
    do
    {
      v12 = objc_msgSend_valueWithCGPoint_(MEMORY[0x1E0CB3B18], v6, v7, v8, vcvtq_f64_f32(*(float32x2_t *)(*(_QWORD *)(a1 + 40) + v10)));
      objc_msgSend_addObject_(v9, v13, v12, v14);
      v10 += 8;
    }
    while (v11 != v10);
  }
  return v9;
}

void sub_1B18842D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  if ((sub_1B18C2F24(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 20));
    objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 40) + 24), v10, *(_QWORD *)(a1 + 48), v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 20));
  }
}

void sub_1B18844A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C30E4(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B1884550(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3148(*(void **)(a1 + 32), a2, a3, a4, *(float *)(a1 + 40));
}

void sub_1B188460C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C2FF4(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4);
}

void sub_1B18846D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3064(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4, *(float *)(a1 + 48));
}

void sub_1B1884BB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFXBinding *v24;

  v5 = (_QWORD *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  v24 = objc_alloc_init(CFXBinding);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(_QWORD *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(_QWORD *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(_QWORD *)(a1 + 64), v17);
  sub_1B193F4C8(v5, v24, v18, v19, v20, v21, v22, v23);

}

void sub_1B1884CDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F704(v5, *(const __CFString **)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B1884D88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F68C(v4, v5, v6, v7, v8, v9, v10, v11);
}

id sub_1B1884F7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = (id)objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E6478B20, a4);
  qword_1EEF65EE8 = (uint64_t)result;
  return result;
}

void sub_1B1885718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1861334(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B18857F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1861554(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B188590C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B18612AC(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B1885A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B185FCD4(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B1885B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B185FD78(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B1885C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B185FE54(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B1885D7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[2];

  v2 = sub_1B18BCF20(*(const void **)(a1 + 32), 0);
  v10[1] = v3;
  sub_1B185EE88(*(float32x4_t **)(*(_QWORD *)(a1 + 40) + 8), (float *)v10, v4, v5, v6, v7, v8, v9, v2);
}

void sub_1B1885F44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11)
{
  a9.i32[0] = *(_DWORD *)(a1 + 40);
  sub_1B185FF08(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1B1886068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1860010(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B188618C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B18600B0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float *)(a1 + 40), a9);
}

void sub_1B18862A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B185EF58(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(*(_QWORD *)(a1 + 32) + 64), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1886430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1860150(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, vcvt_f32_f64(*(float64x2_t *)(*(_QWORD *)(a1 + 32) + 88)), a9);
}

void sub_1B1886554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1860200(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B1886668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B18602F8(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned int *)(a1 + 40), a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B188678C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B18603E4(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B18868B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B18604BC(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B18869D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1860534(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B1886AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float32x4_t a10, uint64_t a11)
{
  a9.i32[0] = *(_DWORD *)(a1 + 40);
  sub_1B18605F4(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
}

void sub_1B1886D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int32 v9;
  uint64_t v10;
  float32x4_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float32x4_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v9 = *(_DWORD *)(a1 + 40);
  sub_1B185EDE4(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), v9, a3, a4, a5, a6, a7, a8);
  v10 = *(_QWORD *)(a1 + 32);
  v11.i32[0] = *(_DWORD *)(v10 + 72);
  sub_1B185FF08(*(float32x4_t **)(v10 + 8), v12, v13, v14, v15, v16, v17, v18, v11, v19, v32);
  if (v9 == 5)
  {
    sub_1B1886D98(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(const char **)(*(_QWORD *)(a1 + 32) + 304), *(void **)(*(_QWORD *)(a1 + 32) + 336), v20, v21, v22, v23, v24);
    sub_1B1860E74(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v25, v26, v27, v28, v29, v30, v31, *(__n128 *)(*(_QWORD *)(a1 + 32) + 320));
  }
}

void sub_1B1886D98(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  uint64_t i;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  float64_t v29;
  float64x2_t v30;
  _OWORD v31[3];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  switch((unint64_t)a2)
  {
    case 0uLL:
      memset(v31, 0, sizeof(v31));
      goto LABEL_7;
    case 1uLL:
      memset((char *)v31 + 1, 0, 47);
      v9 = 1;
      goto LABEL_6;
    case 2uLL:
      memset((char *)v31 + 1, 0, 47);
      v9 = 2;
      goto LABEL_6;
    case 3uLL:
      memset((char *)v31 + 1, 0, 47);
      v9 = 3;
LABEL_6:
      LOBYTE(v31[0]) = v9;
LABEL_7:
      sub_1B185F1A4(a1, (unsigned __int8 *)v31, (uint64_t)a3, a4, a5, a6, a7, a8);
      break;
    case 4uLL:
      v11 = objc_msgSend_count(a3, a2, (uint64_t)a3, a4);
      if (v11 >= 0xFF)
        v13 = 255;
      else
        v13 = v11;
      v21 = MEMORY[0x1E0C80A78](v11, v12);
      v23 = (char *)v31 - v22;
      if (v13)
      {
        for (i = 0; i != v13; ++i)
        {
          v25 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v14, i, v16, v21);
          objc_msgSend_CGPointValue(v25, v26, v27, v28);
          v30.f64[1] = v29;
          v21 = COERCE_DOUBLE(vcvt_f32_f64(v30));
          *(double *)&v23[8 * i] = v21;
        }
      }
      LOBYTE(v31[0]) = 4;
      memset((char *)v31 + 1, 0, 24);
      *((_QWORD *)&v31[1] + 1) = 0;
      LOBYTE(v31[2]) = v13;
      *(_DWORD *)((char *)&v31[2] + 1) = 0;
      DWORD1(v31[2]) = 0;
      *((_QWORD *)&v31[2] + 1) = v23;
      sub_1B185F1A4(a1, (unsigned __int8 *)v31, v15, v16, v17, v18, v19, v20);
      break;
    default:
      return;
  }
}

void sub_1B1887040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B18606DC(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B188716C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B186077C(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40), a9);
}

void sub_1B1887288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18623C8(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B18873B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1862234(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B18874D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1862470(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1887600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186275C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B188771C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186280C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B1887840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18624CC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B188796C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1862568(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4, a5, a6, a7, a8, *(float32_t *)(a1 + 40));
}

void sub_1B1887A78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1861408(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B1887B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18614D0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B1887C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186164C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B1887DB4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1861708(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1887ED4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18617BC(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

double sub_1B1887FF4(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_QWORD *)&result = sub_1B1861874((float32x4_t *)*(_QWORD *)(a1[3].i64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8).u64[0];
  return result;
}

void sub_1B1888114(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186193C(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1888278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1B1886D98(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(const char **)(*(_QWORD *)(a1 + 32) + 304), *(void **)(*(_QWORD *)(a1 + 32) + 336), a4, a5, a6, a7, a8);
  sub_1B1860E74(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v9, v10, v11, v12, v13, v14, v15, *(__n128 *)(*(_QWORD *)(a1 + 32) + 320));
}

void sub_1B18883C4(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1860E74(*(_QWORD *)(a1[3].n128_u64[0] + 8), a2, a3, a4, a5, a6, a7, a8, a1[2]);
}

void sub_1B18884D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1860D48(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B18885EC(uint64_t a1, float32x4_t a2, float32x4_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_1B1860F0C(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a5, a6, a7, a8, a9, a10, a2, a3, a11);
}

void sub_1B1888728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1886D98(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(const char **)(*(_QWORD *)(a1 + 32) + 304), *(void **)(*(_QWORD *)(a1 + 32) + 336), a4, a5, a6, a7, a8);
}

void sub_1B1888844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1B185EDE4(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), 6, a3, a4, a5, a6, a7, a8);
  sub_1B185F71C(*(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8), *(void **)(a1 + 40), v9, v10, v11, v12, v13, v14);
}

void sub_1B188A084(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t sub_1B188A16C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addWorldReference_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

uint64_t sub_1B188A224(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_removeWorldReference_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

CFStringRef sub_1B188A2F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B193E5B0(v5, *(CFStringRef *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B188A578(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (a1 < 5)
    return qword_1B2246FD0[a1];
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown shading model (2)"), a3, a4, a5, a6, a7, a8, vars0);
  return 2;
}

void sub_1B188AFB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_commonProfile(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1841628(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188B0F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  v13 = sub_1B187813C(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1B184135C(v13, 17, v14, v15, v16, v17, v18, v19, *(float *)(a1 + 40));
}

void sub_1B188B240(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  v13 = sub_1B187813C(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1B184135C(v13, 18, v14, v15, v16, v17, v18, v19, *(float *)(a1 + 40));
}

void sub_1B188B390(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  v13 = sub_1B187813C(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1B184135C(v13, 19, v14, v15, v16, v17, v18, v19, *(float *)(a1 + 40));
}

void sub_1B188B4E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  v13 = sub_1B187813C(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1B1842630(v13, v14, v15, v16, v17, v18, v19, v20, *(float *)(a1 + 40));
}

void sub_1B188B618(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1877F64(v5, *(unsigned int *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188B7BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1878368(v5, v6, v7, v8, v9, v10, v11, v12, *(float *)(a1 + 40));
}

void sub_1B188B874(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  v19 = sub_1B187813C(v5, v6, v7, v8, v9, v10, v11, v12);
  v20 = *(_QWORD *)(a1 + 40);
  if (v20 >= 4)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown shading model"), v13, v14, v15, v16, v17, v18, v22);
    v21 = 3;
  }
  else
  {
    v21 = dword_1B2247000[v20];
  }
  sub_1B18412A8(v19, v21, v13, v14, v15, v16, v17, v18);
}

void sub_1B188B9DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  v13 = sub_1B187813C(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1B18424A8(v13, *(unsigned __int8 *)(a1 + 40), v14, v15, v16, v17, v18, v19);
}

void sub_1B188BB1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  v13 = sub_1B187813C(v5, v6, v7, v8, v9, v10, v11, v12);
  sub_1B18423E0(v13, *(unsigned __int8 *)(a1 + 40), v14, v15, v16, v17, v18, v19);
}

void sub_1B188BC58(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1878464(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188BD78(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1877FE8(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188BE9C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1878580(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188C060(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B187806C(v5, *(unsigned __int8 *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188C190(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B18781DC(v5, *(_DWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188C2B8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_materialRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1877ED4(v5, *(_DWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188C8E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  if ((sub_1B18C2F24(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 168));
    objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 40) + 176), v10, *(_QWORD *)(a1 + 48), v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 168));
  }
}

void sub_1B188CAB8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C30E4(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B188CB64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3148(*(void **)(a1 + 32), a2, a3, a4, *(float *)(a1 + 40));
}

void sub_1B188CC20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C2FF4(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4);
}

void sub_1B188CCE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3064(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4, *(float *)(a1 + 48));
}

void sub_1B188D1C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFXBinding *v24;

  v5 = (_QWORD *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  v24 = objc_alloc_init(CFXBinding);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(_QWORD *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(_QWORD *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(_QWORD *)(a1 + 64), v17);
  sub_1B193F4C8(v5, v24, v18, v19, v20, v21, v22, v23);

}

void sub_1B188D2F0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F704(v5, *(const __CFString **)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B188D39C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F68C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B188DCDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  sub_1B193FB20(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), *(__int16 **)(a1 + 48), a4, a5, a6, a7, a8);
  v9 = *(const void **)(a1 + 48);
  if (v9)
    CFRelease(v9);
}

void sub_1B188DD1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int16 *v9;
  uint64_t v10;
  void *v11;
  __int16 *v12;

  v9 = *(__int16 **)(a1 + 48);
  if (v9)
  {
    sub_1B193FB20(*(_QWORD *)(a1 + 56), *(void **)(a1 + 32), v9, a4, a5, a6, a7, a8);
    CFRelease(*(CFTypeRef *)(a1 + 48));
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(void **)(a1 + 32);
    v12 = *(__int16 **)(a1 + 40);
    if (v12)
      sub_1B193FB20(v10, v11, v12, a4, a5, a6, a7, a8);
    else
      sub_1B193FC30(v10, v11, 0, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B188DE14(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  const char *v5;
  uint64_t v6;

  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
    return objc_msgSend_addObject_(*(void **)(a1 + 32), v5, a2, v6);
  return result;
}

uint64_t sub_1B188DFE0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_compare_(a2, (const char *)a2, a3, a4);
}

uint64_t sub_1B188E088(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  result = sub_1B188E0C8(a3);
  if ((_DWORD)result)
    return objc_msgSend_addObject_(*(void **)(a1 + 32), v6, a2, v7);
  return result;
}

uint64_t sub_1B188E0C8(void *a1)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return 1;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 0;
  v6 = (void *)MEMORY[0x1E0CB3940];
  v7 = objc_msgSend_objCType(a1, v3, v4, v5);
  v10 = (void *)objc_msgSend_stringWithUTF8String_(v6, v8, v7, v9);
  return objc_msgSend_isEqualToString_(v10, v11, (uint64_t)CFSTR("{CGRect={CGPoint=dd}{CGSize=dd}}"), v12);
}

uint64_t sub_1B188E230(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;

  result = sub_1B188E0C8(a3);
  if ((_DWORD)result)
    return objc_msgSend_addObject_(*(void **)(a1 + 32), v6, (uint64_t)a3, v7);
  return result;
}

_QWORD *sub_1B188E4E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(const void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = objc_msgSend_coreEntityHandleRef(*(void **)(a1 + 40), a2, a3, a4);
  return sub_1B17C5C00(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B188F0DC()
{
  const char *v0;
  uint64_t v1;

  qword_1EEF65F00 = objc_alloc_init(_VFXNullMaterial);
  return objc_msgSend_setName_((void *)qword_1EEF65F00, v0, (uint64_t)CFSTR("_VFXNullMaterial"), v1);
}

void sub_1B188F314(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  id v9;

  v9 = (id)objc_msgSend_nodeWithNodeRef_(VFXNode, a2, (uint64_t)a2, a4);
  objc_msgSend__setParent_(v9, v5, *(_QWORD *)(a1 + 32), v6);
  objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 32), v7, (uint64_t)v9, v8);

}

void sub_1B188F3F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id inited;
  const char *v7;
  uint64_t v8;
  VFXNode *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  id v14;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 48) & 1) != 0)
  {
    v9 = [VFXNode alloc];
    inited = (id)objc_msgSend_initPresentationNodeWithNodeRef_(v9, v10, (uint64_t)a2, v11);
  }
  else
  {
    inited = (id)objc_msgSend_nodeWithNodeRef_(VFXNode, a2, (uint64_t)a2, a4);
  }
  v14 = inited;
  objc_msgSend__setParent_(inited, v7, *(_QWORD *)(a1 + 32), v8);
  objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 32), v12, (uint64_t)v14, v13);

}

void sub_1B188F684(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

CFStringRef sub_1B188F73C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B193E5B0(v5, *(CFStringRef *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B18908E8(uint64_t a1, const char *a2, uint64_t a3)
{
  return objc_msgSend_setValue_forKey_(*(void **)(a1 + 32), a2, a3, (uint64_t)a2);
}

uint64_t sub_1B1890B5C(void *a1, const __CFDictionary *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  const void *Value;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const void *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[128];
  _BYTE v64[128];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_skinner(a1, (const char *)a2, a3, a4))
  {
    v9 = (void *)objc_msgSend_skinner(a1, v6, v7, v8);
    v13 = (const void *)objc_msgSend_skeleton(v9, v10, v11, v12);
    Value = CFDictionaryGetValue(a2, v13);
    if (Value)
    {
      v22 = (uint64_t)Value;
      v23 = (void *)objc_msgSend_skinner(a1, v15, v16, v17);
      objc_msgSend_setSkeleton_(v23, v24, v22, v25);
    }
    else
    {
      if (v13)
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: failed to find cloned skeleton in cloned tree"), v16, v17, v18, v19, v20, v21, v55);
      v33 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v15, v16, v17);
      v59 = 0u;
      v60 = 0u;
      v61 = 0u;
      v62 = 0u;
      v37 = (void *)objc_msgSend_skinner(a1, v34, v35, v36);
      v41 = (void *)objc_msgSend_bones(v37, v38, v39, v40);
      v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v42, (uint64_t)&v59, (uint64_t)v64, 16);
      if (v43)
      {
        v47 = v43;
        v48 = *(_QWORD *)v60;
LABEL_16:
        v49 = 0;
        while (1)
        {
          if (*(_QWORD *)v60 != v48)
            objc_enumerationMutation(v41);
          v50 = *(void **)(*((_QWORD *)&v59 + 1) + 8 * v49);
          if (!objc_msgSend_name(v50, v44, v45, v46))
            break;
          v51 = CFDictionaryGetValue(a2, v50);
          if (!v51)
            break;
          objc_msgSend_addObject_(v33, v6, (uint64_t)v51, v8);
          if (v47 == ++v49)
          {
            v47 = objc_msgSend_countByEnumeratingWithState_objects_count_(v41, v44, (uint64_t)&v59, (uint64_t)v64, 16);
            if (v47)
              goto LABEL_16;
            goto LABEL_23;
          }
        }
      }
      else
      {
LABEL_23:
        v52 = (void *)objc_msgSend_skinner(a1, v44, v45, v46);
        objc_msgSend_setBones_(v52, v53, (uint64_t)v33, v54);
      }
    }
  }
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v26 = (void *)objc_msgSend_childNodes(a1, v6, v7, v8, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v27, (uint64_t)&v55, (uint64_t)v63, 16);
  if (result)
  {
    v29 = result;
    v30 = *(_QWORD *)v56;
    do
    {
      v31 = 0;
      do
      {
        if (*(_QWORD *)v56 != v30)
          objc_enumerationMutation(v26);
        sub_1B1890B5C(*(_QWORD *)(*((_QWORD *)&v55 + 1) + 8 * v31++), a2);
      }
      while (v29 != v31);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v26, v32, (uint64_t)&v55, (uint64_t)v63, 16);
      v29 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B1890D80(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v5 = (void *)objc_msgSend_constraints(a2, (const char *)a2, a3, a4, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v13, (uint64_t)v17, 16);
  if (result)
  {
    v10 = result;
    v11 = *(_QWORD *)v14;
    do
    {
      v12 = 0;
      do
      {
        if (*(_QWORD *)v14 != v11)
          objc_enumerationMutation(v5);
        objc_msgSend_retargetWithRemapTable_(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v12++), v8, *(_QWORD *)(a1 + 32), v9);
      }
      while (v10 != v12);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v13, (uint64_t)v17, 16);
      v10 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B1890E6C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t i;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;

  objc_msgSend__copyAnimationsFrom_(a2, (const char *)a2, (uint64_t)a1, a4);
  v14 = (void *)objc_msgSend_childNodes(a1, v11, v12, v13);
  v18 = objc_msgSend_count(v14, v15, v16, v17);
  v22 = (void *)objc_msgSend_childNodes(a2, v19, v20, v21);
  if (objc_msgSend_count(v22, v23, v24, v25) == v18)
  {
    if (v18)
    {
      for (i = 0; i != v18; ++i)
      {
        v34 = (void *)objc_msgSend_childNodes(a1, v26, v27, v28);
        v37 = objc_msgSend_objectAtIndex_(v34, v35, i, v36);
        v41 = (void *)objc_msgSend_childNodes(a2, v38, v39, v40);
        v44 = objc_msgSend_objectAtIndex_(v41, v42, i, v43);
        sub_1B1890E6C(v37, v44);
      }
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: error while transposing animations to cloned tree"), v27, v28, v29, v30, v31, v32, a9);
  }
}

void sub_1B18919C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B18919D8(uint64_t a1, char *a2, _BYTE *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  if (objc_msgSend_isEqualToString_(*(void **)(a1 + 32), a2, (uint64_t)CFSTR("model"), a4)
    && objc_msgSend_model(a2, v7, v8, v9)
    || objc_msgSend_isEqualToString_(*(void **)(a1 + 32), v7, (uint64_t)CFSTR("kCameraKey"), v9)
    && objc_msgSend_camera(a2, v10, v11, v12)
    || (result = objc_msgSend_isEqualToString_(*(void **)(a1 + 32), v10, (uint64_t)CFSTR("kLightKey"), v12),
        (_DWORD)result)
    && (result = objc_msgSend_light(a2, v14, v15, v16)) != 0)
  {
    result = 1;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
      *a3 = 1;
  }
  return result;
}

float32x4_t *sub_1B18927E4(float32x4_t *result, __n128 *a2, float32x4_t *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, __n128 a7)
{
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int8x16_t v38;
  float32x4_t v39;
  int32x4_t v40;
  float v41;
  float32x4_t v42;
  float v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int8x16_t v49;
  int8x16_t v50;
  float v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  uint64_t v55;
  int32x2_t v56;
  float32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;

  if (a3)
  {
    v7 = vmulq_f32(a4, a4);
    v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1)));
    v8.f32[0] = sqrtf(v8.f32[0]);
    v9 = vmulq_f32(a5, a5);
    v10 = vmulq_f32(a6, a6);
    v8.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0]);
    v8.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]);
    *a3 = v8;
  }
  if (a2)
    *a2 = a7;
  if (result)
  {
    if (a3)
    {
      v11 = *a3;
    }
    else
    {
      v12 = vmulq_f32(a4, a4);
      v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1)));
      v13 = vmulq_f32(a5, a5);
      v11.f32[0] = sqrtf(v11.f32[0]);
      v14 = vmulq_f32(a6, a6);
      v11.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0]);
      v11.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
    }
    v15 = (uint32x4_t)vceqzq_f32(v11);
    v15.i32[3] = v15.i32[2];
    if ((vmaxvq_u32(v15) & 0x80000000) != 0)
    {
      v47 = (float32x4_t)xmmword_1B2244E20;
LABEL_30:
      *result = v47;
      return result;
    }
    v16 = vdivq_f32(a4, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 0));
    v17 = vdivq_f32(a5, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1));
    v18 = vdivq_f32(a6, (float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2));
    v19 = (int32x4_t)vmulq_f32(v16, v16);
    v20 = (int32x4_t)vmulq_f32(v17, v17);
    v21 = (int32x4_t)vmulq_f32(v18, v18);
    v22 = vzip2q_s32(v19, v21);
    v23 = (float32x4_t)vzip1q_s32(vzip1q_s32(v19, v21), v20);
    v24 = (float32x4_t)vtrn2q_s32(v19, v20);
    v24.i32[2] = v21.i32[1];
    v25 = vaddq_f32((float32x4_t)vzip1q_s32(v22, vdupq_laneq_s32(v20, 2)), vaddq_f32(v23, v24));
    v24.i64[0] = 0x80000000800000;
    v24.i64[1] = 0x80000000800000;
    v26 = vcgeq_f32(v24, v25);
    v25.i32[3] = 0;
    v27 = vrsqrteq_f32(v25);
    v28 = vmulq_f32(v27, vrsqrtsq_f32(v25, vmulq_f32(v27, v27)));
    v29 = v26;
    v29.i32[3] = 0;
    v30 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v29), (int8x16_t)v25, (int8x16_t)vmulq_f32(v28, vrsqrtsq_f32(v25, vmulq_f32(v28, v28))));
    v31 = vmulq_n_f32(v16, v30.f32[0]);
    v32 = vmulq_lane_f32(v17, *(float32x2_t *)v30.f32, 1);
    v33 = vmulq_laneq_f32(v18, v30, 2);
    v34 = (int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33);
    v35 = (int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32);
    v36 = (int32x4_t)v31;
    if (v26.i32[0])
    {
      v37 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v34, (int8x16_t)v33, 0xCuLL), vnegq_f32(v32)), v33, (float32x4_t)vextq_s8(v35, (int8x16_t)v32, 0xCuLL));
      v36 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL);
    }
    v38 = (int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31);
    v39 = v32;
    if (v26.i32[1])
    {
      v40 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v38, (int8x16_t)v31, 0xCuLL), vnegq_f32(v33)), v31, (float32x4_t)vextq_s8(v34, (int8x16_t)v33, 0xCuLL));
      v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), (int8x16_t)v40, 0xCuLL);
    }
    if (v26.i32[2])
    {
      v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v35, (int8x16_t)v32, 0xCuLL), vnegq_f32(v31)), v32, (float32x4_t)vextq_s8(v38, (int8x16_t)v31, 0xCuLL));
      v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
    }
    v41 = (float)(*(float *)v36.i32 + v39.f32[1]) + v33.f32[2];
    if (v41 > 0.0)
    {
      v42 = (float32x4_t)vzip2q_s32((int32x4_t)v39, vuzp1q_s32((int32x4_t)v39, (int32x4_t)v33));
      v42.i32[2] = v36.i32[1];
      v43 = sqrtf(v41 + 1.0);
      v44 = (float32x4_t)vtrn2q_s32((int32x4_t)v33, vzip2q_s32((int32x4_t)v33, v36));
      v44.i32[2] = v39.i32[0];
      v46 = vsubq_f32(v42, v44);
      v42.f32[3] = v43;
      v44.f32[3] = v43;
      v45 = vmulq_f32(v42, v44);
      v46.i32[3] = v45.i32[3];
LABEL_28:
      v45.f32[0] = 0.5 / v43;
      v57 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 0);
      goto LABEL_29;
    }
    if (*(float *)v36.i32 < v39.f32[1] || *(float *)v36.i32 < v33.f32[2])
    {
      if (v39.f32[1] <= v33.f32[2])
      {
        v43 = sqrtf((float)((float)(v33.f32[2] + 1.0) - *(float *)v36.i32) - v39.f32[1]);
        *(float32x2_t *)v46.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v36, (int32x4_t)v39), *(float32x2_t *)v33.f32);
        v58 = (float32x2_t)__PAIR64__(v36.u32[1], LODWORD(v43));
        v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0);
        *(float32x2_t *)v45.f32 = vsub_f32(*(float32x2_t *)v36.i8, v59);
        v59.f32[0] = v43;
        v59.i32[0] = vmul_f32(v58, v59).u32[0];
        v59.i32[1] = v45.i32[1];
        *(float32x2_t *)&v46.u32[2] = v59;
        goto LABEL_28;
      }
      v51 = sqrtf((float)((float)(v39.f32[1] + 1.0) - *(float *)v36.i32) - v33.f32[2]);
      *(int32x2_t *)v26.i8 = vdup_laneq_s32((int32x4_t)v39, 2);
      v49 = (int8x16_t)v26;
      *(float *)v49.i32 = v51;
      v49.i32[0] = vmul_f32(*(float32x2_t *)v49.i8, (float32x2_t)__PAIR64__(v33.u32[1], LODWORD(v51))).u32[0];
      v49.i32[1] = vadd_f32(*(float32x2_t *)&v26, *(float32x2_t *)&v33).i32[1];
      v50 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.i8, 1), v39);
      v56 = (int32x2_t)vsubq_f32(v33, (float32x4_t)vdupq_laneq_s32(v36, 2)).u64[0];
      v57 = (float32x4_t)vextq_s8(vextq_s8(v50, v50, 4uLL), v49, 0xCuLL);
      v57.i32[3] = v56.i32[0];
    }
    else
    {
      v51 = sqrtf((float)((float)(*(float *)v36.i32 + 1.0) - v39.f32[1]) - v33.f32[2]);
      v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v39.f32, 0);
      v53 = vadd_f32(*(float32x2_t *)v36.i8, v52);
      v52.f32[0] = v51;
      v57.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v36.u32[1], LODWORD(v51)), v52).u32[0];
      v57.i32[1] = v53.i32[1];
      v54 = (float32x2_t)vzip2q_s32(v36, (int32x4_t)v39).u64[0];
      LODWORD(v55) = vadd_f32(v54, *(float32x2_t *)v33.f32).u32[0];
      v56 = (int32x2_t)vsub_f32(v54, *(float32x2_t *)v33.f32);
      HIDWORD(v55) = v56.i32[1];
      v57.i64[1] = v55;
    }
    *(float *)v56.i32 = 0.5 / v51;
    v46 = (float32x4_t)vdupq_lane_s32(v56, 0);
LABEL_29:
    v47 = vmulq_f32(v46, v57);
    goto LABEL_30;
  }
  return result;
}

void sub_1B1892DA0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186BBD8(*(float32x4_t **)(a1[3].n128_u64[0] + 8), a2, a3, a4, a5, a6, a7, a8, a1[2]);
}

void sub_1B189302C(float32x4_t *a1)
{
  sub_1B186B9C8(*(__n128 **)(a1[3].i64[0] + 8), a1[2]);
}

void sub_1B1893138(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186BB04(*(_QWORD *)(a1[3].i64[0] + 8), a2, a3, a4, a5, a6, a7, a8, a1[2]);
}

void sub_1B1893400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186CB40(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B1893530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186CBE0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B189363C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B186CCE0(*(uint64_t **)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B189376C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186A51C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B18938F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186A3A0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1893A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186CA30(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(const __CFDictionary **)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B1893C34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float32x4_t *v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (const __CFDictionary *)objc_msgSend_lightRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186CE28(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B1893D50(uint64_t a1)
{
  return sub_1B186CDAC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40));
}

void sub_1B1893E38(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float32x4_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (uint64_t *)objc_msgSend_skinnerRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186AE48(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1893F08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;

  v5 = (const void *)objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
    v12 = (uint64_t *)sub_1B19436AC(v5);
  else
    v12 = 0;
  sub_1B186AD08(*(float32x4_t **)(*(_QWORD *)(a1 + 40) + 8), v12, v6, v7, v8, v9, v10, v11);
  if (v12)
    CFRelease(v12);
}

void sub_1B189403C(uint64_t a1)
{
  sub_1B186D108(*(_QWORD **)(*(_QWORD *)(a1 + 32) + 8), *(const __CFArray **)(a1 + 40));
}

void sub_1B18940E8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (const __CFDictionary *)objc_msgSend_cameraRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186D024(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1894220(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  float32x4_t *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (void *)objc_msgSend_geometryRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186A58C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1894334(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B186DE1C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(CFArrayRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B1894494(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (const __CFDictionary *)objc_msgSend_coreEntityHandleRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186DE0C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18945E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (const __CFDictionary *)objc_msgSend_coreEntityHandleRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186DDCC(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18946F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (const __CFDictionary *)objc_msgSend_coreEntityHandleRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186DDEC(v4, v5, v6, v7, v8, v9, v10, v11);
}

id sub_1B1895790(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  id result;

  result = (id)objc_msgSend_setWithArray_(MEMORY[0x1E0C99E60], a2, (uint64_t)&unk_1E6478B38, a4);
  qword_1EEF65F10 = (uint64_t)result;
  return result;
}

void sub_1B1895A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B193FB20(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32), *(__int16 **)(a1 + 40), a4, a5, a6, a7, a8);
}

void sub_1B1895BF8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  if ((sub_1B18C2F24(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 208));
    objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 40) + 216), v10, *(_QWORD *)(a1 + 48), v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 208));
  }
}

void sub_1B1895DE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C30E4(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B1895E94(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3148(*(void **)(a1 + 32), a2, a3, a4, *(float *)(a1 + 40));
}

void sub_1B1895F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C2FF4(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4);
}

void sub_1B1896014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3064(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4, *(float *)(a1 + 48));
}

void sub_1B18964F4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFXBinding *v24;

  v5 = (_QWORD *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  v24 = objc_alloc_init(CFXBinding);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(_QWORD *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(_QWORD *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(_QWORD *)(a1 + 64), v17);
  sub_1B193F4C8(v5, v24, v18, v19, v20, v21, v22, v23);

}

void sub_1B1896620(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F704(v5, *(const __CFString **)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B18966CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F68C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B1896734(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B1896870(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  id v9;

  v9 = (id)objc_msgSend_nodeWithNodeRef_(VFXNode, a2, (uint64_t)a2, a4);
  objc_msgSend__setParent_(v9, v5, *(_QWORD *)(a1 + 32), v6);
  objc_msgSend_addObject_(*(void **)(*(_QWORD *)(a1 + 32) + 32), v7, (uint64_t)v9, v8);

}

void sub_1B189694C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B1896AF8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1896B10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;

  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  v13 = *(_QWORD *)(a1 + 56);
  if (v13)
  {
    v14 = v5;
    if (v5)
    {
      v18 = sub_1B186B574(v5, (uint64_t)v6, v7, v8, v9, v10, v11, v12);
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      if (v18 == v19)
      {
        v22 = (_QWORD *)objc_msgSend_nodeRef(*(void **)(a1 + 48), v15, v16, v17);
        v28 = v18;
        goto LABEL_9;
      }
      v13 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    }
    v14 = sub_1B186B18C(v19, (int)v13 - 1);
    v30 = *(void **)(a1 + 48);
    v31 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v22 = (_QWORD *)objc_msgSend_nodeRef(v30, v32, v33, v34);
    v28 = v31;
LABEL_9:
    v29 = v14;
    return sub_1B186B388(v28, v22, v29, v23, v24, v25, v26, v27);
  }
  v20 = *(void **)(a1 + 48);
  v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v22 = (_QWORD *)objc_msgSend_nodeRef(v20, v6, v7, v8);
  v28 = v21;
  v29 = 0;
  return sub_1B186B388(v28, v22, v29, v23, v24, v25, v26, v27);
}

void sub_1B1896CB0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B1896CC8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v9 = (_QWORD *)objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v9)
    sub_1B186B464(v9, v10, v11, v12, v13, v14, v15, v16);
  else
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: error in removeObjectFromChildNodesAtIndex -> try to remove inconsitent node"), v11, v12, v13, v14, v15, v16, a9);
}

void sub_1B1896E38(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B1896E50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v10 = (_QWORD *)objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  v14 = objc_msgSend_nodeRef(*(void **)(a1 + 40), v11, v12, v13);
  if (v14)
    v21 = v10 == 0;
  else
    v21 = 1;
  if (v21)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: error in replaceObjectInChildNodesAtIndex"), v15, v16, v17, v18, v19, v20, a9);
  }
  else
  {
    v22 = (_QWORD *)v14;
    v23 = sub_1B186B53C(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), (uint64_t)v10);
    CFRetain(v22);
    sub_1B186B464(v10, v24, v25, v26, v27, v28, v29, v30);
    sub_1B186B464(v22, v31, v32, v33, v34, v35, v36, v37);
    sub_1B186B2BC(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), v22, v23, v38, v39, v40, v41, v42);
    CFRelease(v22);
  }
}

void sub_1B1896FE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  objc_sync_exit(v2);
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B1897754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18693DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, 0, a4, a5, a6, a7, a8);
}

__n128 sub_1B1897768(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  __n128 result;
  _OWORD v12[2];

  v8 = a1[2];
  v9 = a1[3];
  v8.i32[3] = 1.0;
  v9.i32[3] = 1.0;
  v10.i64[0] = 0x3F0000003F000000;
  v10.i64[1] = 0x3F0000003F000000;
  v12[0] = vmulq_f32(vaddq_f32(v8, v9), v10);
  v12[1] = vmulq_f32(vsubq_f32(v9, v8), v10);
  sub_1B18693DC(*(_QWORD *)(a1[4].i64[0] + 8), v12, 1, a4, a5, a6, a7, a8);
  return result;
}

void sub_1B1897CA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  float32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;

  v9 = sub_1B17AE1F4(*(_QWORD *)(a1 + 32), 0, 0, 0, a5, a6, a7, a8);
  if (v9)
  {
    v13 = (void *)v9;
    v14 = (float32x4_t *)objc_msgSend_nodeRef(*(void **)(a1 + 40), v10, v11, v12);
    sub_1B186A58C(v14, v13, v15, v16, v17, v18, v19, v20);
    v24 = (void *)objc_msgSend_model(*(void **)(a1 + 40), v21, v22, v23);
    objc_msgSend_setGeometryRef_(v24, v25, (uint64_t)v13, v26);
    CFRelease(v13);
  }
}

uint64_t sub_1B1897F54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v5 = (void *)objc_msgSend_animationKeys(*(void **)(a1 + 32), a2, a3, a4, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v6, (uint64_t)&v12, (uint64_t)v16, 16);
  if (result)
  {
    v9 = result;
    v10 = *(_QWORD *)v13;
    do
    {
      v11 = 0;
      do
      {
        if (*(_QWORD *)v13 != v10)
          objc_enumerationMutation(v5);
        objc_msgSend__pauseAnimation_forKey_pausedByNode_(*(void **)(a1 + 32), v8, *(unsigned __int8 *)(a1 + 40), *(_QWORD *)(*((_QWORD *)&v12 + 1) + 8 * v11++), 1);
      }
      while (v9 != v11);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v5, v8, (uint64_t)&v12, (uint64_t)v16, 16);
      v9 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B1898880(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  void *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t i;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _BYTE v35[128];
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = *(void **)(a1 + 32);
  if (v9)
  {
    v10 = (void *)MEMORY[0x1E0C99DE8];
    v11 = objc_msgSend_count(v9, a2, a3, a4);
    v14 = (void *)objc_msgSend_arrayWithCapacity_(v10, v12, v11, v13);
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v15 = *(void **)(a1 + 32);
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v31, (uint64_t)v35, 16);
    if (v17)
    {
      v25 = v17;
      v26 = *(_QWORD *)v32;
      do
      {
        for (i = 0; i != v25; ++i)
        {
          if (*(_QWORD *)v32 != v26)
            objc_enumerationMutation(v15);
          v28 = objc_msgSend_constraintRef(*(void **)(*((_QWORD *)&v31 + 1) + 8 * i), v18, v19, v20);
          objc_msgSend_addObject_(v14, v29, v28, v30);
        }
        v25 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v18, (uint64_t)&v31, (uint64_t)v35, 16);
      }
      while (v25);
    }
    sub_1B186D958(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), (const __CFDictionary *)v14, v19, v20, v21, v22, v23, v24);
  }
  else
  {
    sub_1B186D958(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B1898B58(uint64_t a1)
{
  return sub_1B186BC48(*(_QWORD *)(*(_QWORD *)(a1 + 96) + 8), a1 + 32);
}

void sub_1B1898C44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  const __CFDictionary *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (const __CFDictionary *)objc_msgSend___CFObject(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B186DBFC(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B1898D7C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
    sub_1B186D644(v5, *(const void **)(a1 + 32), 1, v8, v9, v10, v11, v12);
  v13 = objc_msgSend_nodeRef(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setNodeRef_(*(void **)(a1 + 32), v14, v13, v15);
  return sub_1B186D304(v13, *(void **)(a1 + 32), v16, v17, v18, v19, v20, v21);
}

void sub_1B1898E44(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B186D4B0(v4, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B1898EDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B186D644(v5, *(const void **)(a1 + 40), 1, v6, v7, v8, v9, v10);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 40), sel_recycle, v11, v12);
}

uint64_t sub_1B1898FD0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B186D3AC(v5, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48), v6, v7, v8, v9, v10);
}

void sub_1B1899078(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B186D55C(v5, *(_QWORD *)(a1 + 40), 1, v6, v7, v8, v9, v10);
}

void sub_1B1899150(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B186D71C(v5, *(void **)(a1 + 40), *(_QWORD *)(a1 + 48), v6, v7, v8, v9, v10);
}

uint64_t sub_1B189A2FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B186E0D0(v5, *(unsigned __int8 *)(a1 + 40));
}

void sub_1B189A994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B189A9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B186A2DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), (__int128 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 32), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B189B004(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B186BB80(*(_QWORD *)(a1[3].n128_u64[0] + 8), a2, a3, a4, a5, a6, a7, a8, a1[2]);
}

uint64_t sub_1B189B368(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B186BBB0(*(_QWORD *)(a1[3].n128_u64[0] + 8), a2, a3, a4, a5, a6, a7, a8, a1[2]);
}

uint64_t sub_1B189CE68(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 5)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad type"), a3, a4, a5, a6, a7, a8, (uint64_t)"mode <= CFXWrapModeMirror");
  return qword_1B2247178[a1];
}

uint64_t sub_1B189CEBC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad type"), a3, a4, a5, a6, a7, a8, (uint64_t)"mode <= kCFXFilterModeLinear");
  return qword_1B22471A0[a1];
}

uint64_t sub_1B189CF10(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad type"), a3, a4, a5, a6, a7, a8, (uint64_t)"mode <= kCFXFilterModeLinear");
  return qword_1B22471B8[a1];
}

uint64_t sub_1B189CF64(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 8)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad image type"), a3, a4, a5, a6, a7, a8, (uint64_t)"type < kCFXImageCount");
  return qword_1B22471D0[a1];
}

uint64_t sub_1B189CFB8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad cull mode"), a3, a4, a5, a6, a7, a8, (uint64_t)"cull <= kCFXCullNone");
  return qword_1B2247210[a1];
}

uint64_t sub_1B189D00C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad fill mode"), a3, a4, a5, a6, a7, a8, (uint64_t)"fillMode == kCFXFillModeLines || fillMode == kCFXFillModeFill");
  return qword_1B2247228[a1];
}

uint64_t sub_1B189D060(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 0xF)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend mode"), a3, a4, a5, a6, a7, a8, (uint64_t)"blend < kCFXBlendFactorCount");
  return qword_1B2247238[a1];
}

uint64_t sub_1B189D0B4(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 5)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend operation"), a3, a4, a5, a6, a7, a8, (uint64_t)"blendOp < kCFXBlendOpCount");
  return qword_1B22472B0[a1];
}

uint64_t sub_1B189D108(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 8)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad comparison func"), a3, a4, a5, a6, a7, a8, (uint64_t)"func < kCFXComparisonFuncCount");
  return qword_1B22472D8[a1];
}

uint64_t sub_1B189D15C(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 8)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad comparison func"), a3, a4, a5, a6, a7, a8, (uint64_t)"func < kCFXComparisonFuncCount");
  return qword_1B2247318[a1];
}

uint64_t sub_1B189D1B0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 8)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad stencil op"), a3, a4, a5, a6, a7, a8, (uint64_t)"op < kCFXStencilOpCount");
  return qword_1B2247358[a1];
}

unint64_t sub_1B189D204(uint64_t a1)
{
  return ((unint64_t)(a1 - 160) > 0x3A) | (0x20E008302AB00uLL >> (a1 + 96)) & 1;
}

uint64_t sub_1B189D230(char a1)
{
  uint64_t v1;

  v1 = 81;
  if ((a1 & 8) == 0)
    v1 = 551;
  if ((a1 & 0x10) == 0)
    v1 = 555;
  if ((a1 & 1) != 0)
    return v1;
  else
    return 81;
}

uint64_t sub_1B189D25C(unsigned int a1)
{
  return (a1 < 6) & (0xFu >> a1);
}

uint64_t sub_1B189D274(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = 0;
  switch(a1)
  {
    case 0:
      result = 3;
      break;
    case 1:
      result = 4;
      break;
    case 2:
      result = 1;
      break;
    case 4:
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Polygon Array not supported in Metal"), a3, a4, a5, a6, a7, a8, (uint64_t)"0");
      goto LABEL_7;
    case 5:
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Triangle Fan not supported in Metal"), a3, a4, a5, a6, a7, a8, (uint64_t)"0");
LABEL_7:
      result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B189D308(uint64_t a1, uint64_t a2, CGContextRef context, char a4)
{
  __int16 BitmapInfo;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  CGColorSpaceRef ColorSpace;
  int v16;
  int v17;
  BOOL v18;
  uint64_t v20;
  char v22;

  BitmapInfo = CGBitmapContextGetBitmapInfo(context);
  ColorSpace = CGBitmapContextGetColorSpace(context);
  v16 = BitmapInfo & 0x7000;
  if ((BitmapInfo & 0x1B) == 2)
  {
    v17 = 0;
    v18 = v16 != 4096 && v16 != 0x2000;
LABEL_14:
    if ((BitmapInfo & 0x100) != 0)
      goto LABEL_30;
    goto LABEL_15;
  }
  if ((BitmapInfo & 0x1B) != 1)
  {
    v17 = 0;
    goto LABEL_29;
  }
  v17 = 1;
  if ((BitmapInfo & 0x7000) == 0 || v16 == 12288)
  {
LABEL_29:
    v18 = 1;
    if ((BitmapInfo & 0x100) != 0)
      goto LABEL_30;
    goto LABEL_15;
  }
  v18 = 1;
  if (v16 == 0x4000)
    goto LABEL_14;
  v17 = 0;
  if ((BitmapInfo & 0x100) != 0)
  {
LABEL_30:
    if (a2 == 32)
    {
      switch(a1)
      {
        case 1:
          return 55;
        case 4:
          return 125;
        case 2:
          return 105;
      }
    }
    else if (a2 == 16)
    {
      switch(a1)
      {
        case 1:
          return 25;
        case 4:
          return 115;
        case 2:
          return 65;
      }
    }
    goto LABEL_66;
  }
LABEL_15:
  if (ColorSpace == (CGColorSpaceRef)sub_1B179D228()
    || ColorSpace == (CGColorSpaceRef)sub_1B179D1E8()
    || (v20 = sub_1B179D958(), (a4 & 1) != 0)
    || ColorSpace == (CGColorSpaceRef)v20)
  {
    if (a2 == 16)
    {
      if (a1 == 1)
        return 20;
      if (a1 == 4 && (v17 & 1) != 0)
        return 110;
    }
    else if (a2 == 8)
    {
      if (a1 == 1)
        return 10;
      if (a1 == 2)
        return 30;
      if (a1 == 4 && v17 == 1)
        return 70;
      v22 = a1 != 4 || v18;
      if ((v22 & 1) == 0)
        return 80;
    }
LABEL_66:
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Failed to create Metal pixel format for %@ [%d components, %d bits per component, bitmap info: %u (%@|%@), float components: %@, color space: %@]"), v9, v10, v11, v12, v13, v14, (uint64_t)context);
    return 70;
  }
  if (a2 != 8)
    goto LABEL_66;
  if (a1 == 1)
    return 11;
  if (a1 == 2)
    return 31;
  if (a1 == 4 && v17 == 1)
    return 71;
  if (a1 != 4 || v18)
    goto LABEL_66;
  return 81;
}

uint64_t sub_1B189D5B4(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 0x36)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad type"), a3, a4, a5, a6, a7, a8, (uint64_t)"format < sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray) / sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray[0])");
  return word_1B2247398[a1];
}

uint64_t sub_1B189D608(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 45)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad type"), a3, a4, a5, a6, a7, a8, (uint64_t)"type < kCFXBaseTypeCount");
  return qword_1B2247408[a1];
}

uint64_t sub_1B189D65C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 >= 45)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad type"), a3, a4, a5, a6, a7, a8, (uint64_t)"type < kCFXBaseTypeCount");
  return qword_1B2247570[a1];
}

uint64_t sub_1B189D6B0(uint64_t a1)
{
  return dword_1B22476D8[a1];
}

uint64_t sub_1B189D6C0(uint64_t a1)
{
  return dword_1B22477B0[a1];
}

uint64_t sub_1B189D6D0()
{
  MTLPixelFormatGetInfo();
  return 0;
}

const __CFString *sub_1B189D744(uint64_t a1)
{
  const __CFString *result;
  void *v3;
  uint64_t Name;
  const char *v5;
  void *v6;
  const char *v7;

  if (a1 > 102)
  {
    if (a1 > 251)
    {
      switch(a1)
      {
        case 552:
          result = CFSTR("BGRA10_XR");
          break;
        case 553:
          result = CFSTR("BGRA10_XR_sRGB");
          break;
        case 554:
          result = CFSTR("BGR10_XR");
          break;
        case 555:
          result = CFSTR("BGR10_XR_sRGB");
          break;
        default:
          if (a1 == 252)
          {
            result = CFSTR("Depth32Float");
          }
          else if (a1 == 253)
          {
            result = CFSTR("Stencil8");
          }
          else
          {
LABEL_52:
            v3 = (void *)MEMORY[0x1E0CB3940];
            Name = MTLPixelFormatGetName();
            v6 = (void *)objc_msgSend_stringWithCString_encoding_(v3, v5, Name, 1);
            result = (const __CFString *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v6, v7, (uint64_t)CFSTR("MTLPixelFormat"), (uint64_t)&stru_1E63FD500);
          }
          break;
      }
    }
    else
    {
      switch(a1)
      {
        case 'g':
          result = CFSTR("RG32Uint");
          break;
        case 'h':
          result = CFSTR("RG32Sint");
          break;
        case 'i':
          result = CFSTR("RG32Float");
          break;
        case 'j':
        case 'k':
        case 'l':
        case 'm':
        case 'o':
        case 't':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
        case 'y':
        case 'z':
          goto LABEL_52;
        case 'n':
          result = CFSTR("RGBA16Unorm");
          break;
        case 'p':
          result = CFSTR("RGBA16Snorm");
          break;
        case 'q':
          result = CFSTR("RGBA16Uint");
          break;
        case 'r':
          result = CFSTR("RGBA16Sint");
          break;
        case 's':
          result = CFSTR("RGBA16Float");
          break;
        case '{':
          result = CFSTR("RGBA32Uint");
          break;
        case '|':
          result = CFSTR("RGBA32Sint");
          break;
        case '}':
          result = CFSTR("RGBA32Float");
          break;
        default:
          if (a1 != 250)
            goto LABEL_52;
          result = CFSTR("Depth16Unorm");
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case '5':
        result = CFSTR("R32Uint");
        break;
      case '6':
        result = CFSTR("R32Sint");
        break;
      case '7':
        result = CFSTR("R32Float");
        break;
      case '8':
      case '9':
      case ':':
      case ';':
      case '=':
      case 'B':
      case 'C':
      case 'D':
      case 'E':
      case 'K':
      case 'L':
      case 'M':
      case 'N':
      case 'O':
      case 'R':
      case 'S':
      case 'T':
      case 'U':
      case 'V':
      case 'W':
      case 'X':
      case 'Y':
      case '\\':
      case ']':
        goto LABEL_52;
      case '<':
        result = CFSTR("RG16Unorm");
        break;
      case '>':
        result = CFSTR("RG16Snorm");
        break;
      case '?':
        result = CFSTR("RG16Uint");
        break;
      case '@':
        result = CFSTR("RG16Sint");
        break;
      case 'A':
        result = CFSTR("RG16Float");
        break;
      case 'F':
        result = CFSTR("RGBA8Unorm");
        break;
      case 'G':
        result = CFSTR("RGBA8Unorm_sRGB");
        break;
      case 'H':
        result = CFSTR("RGBA8Snorm");
        break;
      case 'I':
        result = CFSTR("RGBA8Uint");
        break;
      case 'J':
        result = CFSTR("RGBA8Sint");
        break;
      case 'P':
        result = CFSTR("BGRA8Unorm");
        break;
      case 'Q':
        result = CFSTR("BGRA8Unorm_sRGB");
        break;
      case 'Z':
        result = CFSTR("RGB10A2Unorm");
        break;
      case '[':
        result = CFSTR("RGB10A2Uint");
        break;
      case '^':
        result = CFSTR("BGR10A2Unorm");
        break;
      default:
        result = CFSTR("Invalid");
        switch(a1)
        {
          case 0:
            return result;
          case 1:
            result = CFSTR("A8Unorm");
            break;
          case 10:
            result = CFSTR("R8Unorm");
            break;
          case 11:
            result = CFSTR("R8Unorm_sRGB");
            break;
          case 12:
            result = CFSTR("R8Snorm");
            break;
          case 13:
            result = CFSTR("R8Uint");
            break;
          case 14:
            result = CFSTR("R8Sint");
            break;
          case 20:
            result = CFSTR("R16Unorm");
            break;
          case 22:
            result = CFSTR("R16Snorm");
            break;
          case 23:
            result = CFSTR("R16Uint");
            break;
          case 24:
            result = CFSTR("R16Sint");
            break;
          case 25:
            result = CFSTR("R16Float");
            break;
          case 30:
            result = CFSTR("RG8Unorm");
            break;
          case 31:
            result = CFSTR("RG8Unorm_sRGB");
            break;
          case 32:
            result = CFSTR("RG8Snorm");
            break;
          case 33:
            result = CFSTR("RG8Uint");
            break;
          case 34:
            result = CFSTR("RG8Sint");
            break;
          default:
            goto LABEL_52;
        }
        break;
    }
  }
  return result;
}

uint64_t sub_1B189DABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFString *v9;
  uint64_t vars0;

  switch(a1)
  {
    case 1:
      return 0;
    case 3:
      v9 = CFSTR("Unreachable code: Kernel functions have no corresponding program stage");
      break;
    case 2:
      return 1;
    default:
      v9 = CFSTR("Error: VFXMTLFunctionTypeToProgramStage - type not supported");
      break;
  }
  sub_1B17C4408(16, (uint64_t)v9, a3, a4, a5, a6, a7, a8, vars0);
  return 2;
}

const __CFString *sub_1B189DB14(unint64_t a1)
{
  if (a1 > 9)
    return CFSTR("Unkown");
  else
    return off_1E63D7FA8[a1];
}

uint64_t sub_1B189DB38(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = objc_msgSend_textureType(a1, a2, a3, a4);
  if (v5 < 8 && ((0xA5u >> v5) & 1) != 0)
    return dword_1B2247894[v5];
  v9 = objc_msgSend_textureType(a1, v6, v7, v8);
  sub_1B17C4408(0, (uint64_t)CFSTR("Warning: unsupported texture type %d"), v10, v11, v12, v13, v14, v15, v9);
  return 0;
}

uint64_t sub_1B189DBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 *v19;
  float32x4_t v20;
  unsigned int v21;
  unsigned int v22;
  __int16 *v23;
  uint64_t result;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  float v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int16 v38;
  __int16 v39;
  float v40;
  uint64_t v41;
  float v42;
  float32x2_t v43;
  int32x4_t v44;
  __int16 v45;
  __int16 v46;
  __int16 v47;
  float v48;
  __int16 v49;
  float v50;
  float v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  __int16 v55;
  unsigned int v56;
  float v57;
  __int16 v58;
  float v59;
  float v60;
  unsigned int v61;
  unsigned int v62;
  __int16 v63;
  float v64;
  float v65;
  float v66;
  __int128 v67;
  float v68;
  float v69;
  int v70;
  float v71;

  v11 = sub_1B191E464(a1, a2, a3, a4, a5, a6, a7, a8);
  v19 = (__int16 *)sub_1B191E41C(a1, v12, v13, v14, v15, v16, v17, v18);
  v23 = v19;
  switch(a2)
  {
    case 3:
      result = 0;
      switch((__int16)v11)
      {
        case 1:
          v20.i32[0] = *(_DWORD *)v23;
          goto LABEL_135;
        case 2:
          v20.f32[0] = (float)*(int *)v23;
          goto LABEL_135;
        case 3:
          v20.i32[0] = 0;
          if (*(_BYTE *)v23)
            v20.f32[0] = 1.0;
          goto LABEL_135;
        case 6:
          v20.f32[0] = *(double *)v23;
          goto LABEL_135;
        case 13:
          v20.f32[0] = (float)*v23;
          goto LABEL_135;
        case 14:
          v20.f32[0] = sub_1B189E3A8((unsigned __int16)*v23);
          goto LABEL_135;
        case 16:
          v20.i16[0] = *v23;
          v20.f32[0] = (float)v20.u32[0];
LABEL_135:
          *(_DWORD *)a3 = v20.i32[0];
          return 1;
        default:
          return result;
      }
    case 4:
      result = 0;
      if ((unsigned __int16)v11 > 0x1Bu)
      {
        switch((unsigned __int16)v11)
        {
          case 0x1Cu:
            v20.i16[0] = *v23;
            v20.f32[0] = (float)v20.u32[0];
            LOWORD(v21) = v23[1];
            v51 = (float)v21;
            break;
          case 0x1Fu:
            v20.f32[0] = (float)*v23;
            v51 = (float)v23[1];
            break;
          case 0x2Au:
            v68 = sub_1B189E3A8((unsigned __int16)*v23);
            *(_QWORD *)a3 = __PAIR64__(COERCE_UNSIGNED_INT(sub_1B189E3A8((unsigned __int16)v23[1])), LODWORD(v68));
            return 1;
          default:
            return result;
        }
        v20.f32[1] = v51;
        goto LABEL_117;
      }
      if ((unsigned __int16)v11 == 7)
        goto LABEL_80;
      if ((unsigned __int16)v11 == 17)
      {
        v43 = vcvt_f32_s32(*(int32x2_t *)v23);
        goto LABEL_81;
      }
      return result;
    case 5:
      result = 0;
      if ((unsigned __int16)v11 <= 0x1Cu)
      {
        if ((unsigned __int16)v11 == 8 || (unsigned __int16)v11 == 9)
        {
LABEL_85:
          v20 = *(float32x4_t *)v23;
        }
        else
        {
          if ((unsigned __int16)v11 != 18)
            return result;
          *(float32x2_t *)v20.f32 = vcvt_f32_s32(*(int32x2_t *)v23);
          v20.f32[2] = (float)*((int *)v23 + 2);
        }
LABEL_86:
        *(float32x4_t *)a3 = v20;
        return 1;
      }
      switch((unsigned __int16)v11)
      {
        case 0x1Du:
          v20.i16[0] = *v23;
          v20.f32[0] = (float)v20.u32[0];
          LOWORD(v21) = v23[1];
          v59 = (float)v21;
          LOWORD(v22) = v23[2];
          v60 = (float)v22;
          break;
        case 0x20u:
          v20.f32[0] = (float)*v23;
          v59 = (float)v23[1];
          v60 = (float)v23[2];
          break;
        case 0x2Bu:
          *(float *)&v41 = sub_1B189E3A8((unsigned __int16)*v23);
          *(_QWORD *)&v67 = v41;
          v66 = sub_1B189E3A8((unsigned __int16)v23[1]);
          v42 = sub_1B189E3A8((unsigned __int16)v23[2]);
          v35 = v67;
          *((float *)&v35 + 1) = v66;
          *((float *)&v35 + 2) = v42;
LABEL_72:
          *(_OWORD *)a3 = v35;
          return 1;
        default:
          return result;
      }
      v20.f32[1] = v59;
      v20.f32[2] = v60;
      goto LABEL_86;
    case 6:
      result = 0;
      if ((unsigned __int16)v11 > 0x1Du)
      {
        if ((unsigned __int16)v11 == 30)
        {
          v20 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)v23));
          goto LABEL_86;
        }
        if ((unsigned __int16)v11 != 33)
        {
          if ((unsigned __int16)v11 != 44)
            return result;
          v69 = sub_1B189E3A8((unsigned __int16)*v23);
          v65 = sub_1B189E3A8((unsigned __int16)v23[1]);
          v64 = sub_1B189E3A8((unsigned __int16)v23[2]);
          v34 = sub_1B189E3A8((unsigned __int16)v23[3]);
          *(_QWORD *)&v35 = __PAIR64__(LODWORD(v65), LODWORD(v69));
          *((_QWORD *)&v35 + 1) = __PAIR64__(LODWORD(v34), LODWORD(v64));
          goto LABEL_72;
        }
        v44 = vmovl_s16(*(int16x4_t *)v23);
LABEL_101:
        v20 = vcvtq_f32_s32(v44);
        goto LABEL_86;
      }
      if ((unsigned __int16)v11 == 9)
        goto LABEL_85;
      if ((unsigned __int16)v11 == 19)
      {
        v44 = *(int32x4_t *)v23;
        goto LABEL_101;
      }
      return result;
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
      goto LABEL_23;
    case 15:
      if (v11 != 10)
        return 0;
      v20 = *(float32x4_t *)v19;
      v36 = *((_OWORD *)v19 + 1);
      v37 = *((_OWORD *)v19 + 3);
      *(_OWORD *)(a3 + 32) = *((_OWORD *)v19 + 2);
      *(_OWORD *)(a3 + 48) = v37;
      *(_OWORD *)(a3 + 16) = v36;
      goto LABEL_86;
    case 16:
      result = 0;
      switch((__int16)v11)
      {
        case 1:
          v20.i32[0] = *(_DWORD *)v23;
          goto LABEL_133;
        case 2:
          v20.f32[0] = (float)*(int *)v23;
          goto LABEL_133;
        case 3:
          v20.i32[0] = 0;
          if (*(_BYTE *)v23)
            v20.f32[0] = 1.0;
          goto LABEL_133;
        case 6:
          v20.f32[0] = *(double *)v23;
          goto LABEL_133;
        case 13:
          v20.f32[0] = (float)*v23;
          goto LABEL_133;
        case 14:
          *(_WORD *)a3 = *v23;
          return 1;
        case 16:
          v20.i16[0] = *v23;
          v20.f32[0] = (float)v20.u32[0];
LABEL_133:
          *(_WORD *)a3 = sub_1B189E3F8(v20.f32[0]);
          return 1;
        default:
          return result;
      }
    case 17:
      result = 0;
      if ((unsigned __int16)v11 > 0x1Bu)
      {
        switch((unsigned __int16)v11)
        {
          case 0x1Cu:
            v20.i16[0] = *v23;
            v55 = sub_1B189E3F8((float)v20.u32[0]);
            LOWORD(v56) = v23[1];
            v57 = (float)v56;
            break;
          case 0x1Fu:
            v55 = sub_1B189E3F8((float)*v23);
            v57 = (float)v23[1];
            break;
          case 0x2Au:
LABEL_55:
            v25 = *(_DWORD *)v23;
LABEL_64:
            *(_DWORD *)a3 = v25;
            return 1;
          default:
            return result;
        }
        *(_WORD *)(a3 + 2) = sub_1B189E3F8(v57);
        *(_WORD *)a3 = v55;
        return 1;
      }
      if ((unsigned __int16)v11 == 7)
      {
        LODWORD(v71) = HIDWORD(*(_QWORD *)v23);
        v49 = sub_1B189E3F8(COERCE_FLOAT(*(_QWORD *)v23));
        v50 = v71;
      }
      else
      {
        if ((unsigned __int16)v11 != 17)
          return result;
        v70 = HIDWORD(*(_QWORD *)v23);
        v49 = sub_1B189E3F8((float)(int)*(_QWORD *)v23);
        v50 = (float)v70;
      }
      *(_WORD *)(a3 + 2) = sub_1B189E3F8(v50);
      *(_WORD *)a3 = v49;
      return 1;
    case 18:
      result = 0;
      if ((unsigned __int16)v11 <= 0x1Cu)
      {
        if ((unsigned __int16)v11 == 8 || (unsigned __int16)v11 == 9)
        {
          v38 = sub_1B189E3F8(*(float *)v23);
          v39 = sub_1B189E3F8(*((float *)v23 + 1));
          v40 = *((float *)v23 + 2);
        }
        else
        {
          if ((unsigned __int16)v11 != 18)
            return result;
          v38 = sub_1B189E3F8((float)*(int *)v23);
          v39 = sub_1B189E3F8((float)*((int *)v23 + 1));
          v40 = (float)*((int *)v23 + 2);
        }
        goto LABEL_116;
      }
      switch((unsigned __int16)v11)
      {
        case 0x1Du:
          v20.i16[0] = *v23;
          v38 = sub_1B189E3F8((float)v20.u32[0]);
          LOWORD(v61) = v23[1];
          v39 = sub_1B189E3F8((float)v61);
          LOWORD(v62) = v23[2];
          v40 = (float)v62;
          break;
        case 0x20u:
          v38 = sub_1B189E3F8((float)*v23);
          v39 = sub_1B189E3F8((float)v23[1]);
          v40 = (float)v23[2];
          break;
        case 0x2Bu:
          goto LABEL_80;
        default:
          return result;
      }
LABEL_116:
      v63 = sub_1B189E3F8(v40);
      v20.i16[0] = v38;
      v20.i16[1] = v39;
      v20.i16[2] = v63;
      goto LABEL_117;
    case 19:
      result = 0;
      if ((unsigned __int16)v11 <= 0x1Du)
      {
        if ((unsigned __int16)v11 == 9)
        {
          v45 = sub_1B189E3F8(*(float *)v23);
          v46 = sub_1B189E3F8(*((float *)v23 + 1));
          v47 = sub_1B189E3F8(*((float *)v23 + 2));
          v48 = *((float *)v23 + 3);
        }
        else
        {
          if ((unsigned __int16)v11 != 19)
            return result;
          v45 = sub_1B189E3F8((float)*(int *)v23);
          v46 = sub_1B189E3F8((float)*((int *)v23 + 1));
          v47 = sub_1B189E3F8((float)*((int *)v23 + 2));
          v48 = (float)*((int *)v23 + 3);
        }
        goto LABEL_108;
      }
      switch((unsigned __int16)v11)
      {
        case 0x1Eu:
          v20.i16[0] = *v23;
          v45 = sub_1B189E3F8((float)v20.u32[0]);
          LOWORD(v52) = v23[1];
          v46 = sub_1B189E3F8((float)v52);
          LOWORD(v53) = v23[2];
          v47 = sub_1B189E3F8((float)v53);
          LOWORD(v54) = v23[3];
          v48 = (float)v54;
LABEL_108:
          v58 = sub_1B189E3F8(v48);
          v20.i16[0] = v45;
          v20.i16[1] = v46;
          v20.i16[2] = v47;
          v20.i16[3] = v58;
          goto LABEL_117;
        case 0x21u:
          v45 = sub_1B189E3F8((float)*v23);
          v46 = sub_1B189E3F8((float)v23[1]);
          v47 = sub_1B189E3F8((float)v23[2]);
          v48 = (float)v23[3];
          goto LABEL_108;
        case 0x2Cu:
          goto LABEL_80;
      }
      return result;
    case 29:
    case 33:
      result = 0;
      if ((unsigned __int16)v11 > 0xCu)
      {
        if ((unsigned __int16)v11 == 13 || (unsigned __int16)v11 == 16)
        {
          v25 = *v23;
          goto LABEL_64;
        }
      }
      else
      {
        if ((unsigned __int16)v11 == 2)
          goto LABEL_55;
        if ((unsigned __int16)v11 == 3)
        {
          v25 = *(unsigned __int8 *)v23;
          goto LABEL_64;
        }
      }
      return result;
    case 30:
    case 34:
      if (v11 == 31 || (unsigned __int16)v11 == 28)
      {
        v20.i32[0] = *v19;
        v20.i32[1] = v19[1];
LABEL_117:
        *(_QWORD *)a3 = v20.i64[0];
      }
      else
      {
        if ((unsigned __int16)v11 != 17)
          return 0;
LABEL_80:
        v43 = *(float32x2_t *)v23;
LABEL_81:
        *(float32x2_t *)a3 = v43;
      }
      return 1;
    case 31:
    case 35:
      if (v11 == 32 || (unsigned __int16)v11 == 29)
      {
        v20 = (float32x4_t)vmovl_s16(*(int16x4_t *)v19);
        v20.i32[2] = 0;
        goto LABEL_86;
      }
      if ((unsigned __int16)v11 != 18)
        return 0;
      goto LABEL_85;
    case 32:
    case 36:
      if (v11 == 33 || (unsigned __int16)v11 == 30)
      {
        v20 = (float32x4_t)vmovl_s16(*(int16x4_t *)v19);
        goto LABEL_86;
      }
      if ((unsigned __int16)v11 == 19)
        goto LABEL_85;
      return 0;
    default:
      if (a2 == 53)
      {
        if (v11 == 16 || (unsigned __int16)v11 == 13)
        {
          v26 = *v19 != 0;
          goto LABEL_94;
        }
        if ((unsigned __int16)v11 == 3)
        {
          v26 = *(_BYTE *)v19;
LABEL_94:
          *(_BYTE *)a3 = v26;
          return 1;
        }
      }
      else
      {
LABEL_23:
        v27 = MTLDataTypeString();
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: CFXValueWriteToMTLData - Unsupported data type %@"), v28, v29, v30, v31, v32, v33, v27);
      }
      return 0;
  }
}

float sub_1B189E3A8(unsigned int a1)
{
  int v1;
  float result;

  v1 = (a1 >> 10) & 0x1F;
  if (v1 && v1 != 31)
  {
    v1 = (v1 << 23) + 939524096;
  }
  else if (v1 == 31)
  {
    v1 = 2139095040;
  }
  LODWORD(result) = (a1 << 16) & 0x80000000 | (a1 >> 7) & 7 | (8 * (a1 & 0x3FF)) & 0x1FFF | ((a1 & 0x3FF) << 13) | v1;
  return result;
}

uint64_t sub_1B189E3F8(float a1)
{
  int v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  __int16 v5;
  __int16 v6;
  int v7;

  v1 = HIWORD(LODWORD(a1)) & 0x8000;
  v2 = (LODWORD(a1) >> 23);
  v3 = v2 - 112;
  v4 = v2 - 113;
  v5 = v1 | 0x7BFF;
  if (v2 == 255)
    v5 = v1 | ((LODWORD(a1) & 0x7FFFFF) != 0) | 0x7C00;
  if (v2 >= 0x71)
    v6 = v5;
  else
    v6 = HIWORD(a1) & 0x8000;
  v7 = HIWORD(LODWORD(a1)) & 0x8000 | (LODWORD(a1) >> 13) & 0x3FF | (v3 << 10);
  if (v4 > 0x1D)
    LOWORD(v7) = v6;
  return (unsigned __int16)v7;
}

void sub_1B189E450(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = a3 + objc_msgSend_offset(a2, (const char *)a2, a3, a4);
  v10 = objc_msgSend_dataType(a2, v7, v8, v9);
  if ((sub_1B189DBA4(a1, v10, v6, v11, v12, v13, v14, v15) & 1) == 0)
  {
    v23 = sub_1B191E464(a1, v16, v17, v18, v19, v20, v21, v22);
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: value unsupported %d of member %@"), v24, v25, v26, v27, v28, v29, v23);
  }
}

CGImageRef sub_1B189E4CC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint32_t v9;
  size_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  CGColorSpace *v26;
  CGContext *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  CGImageRef Image;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[6];

  v5 = objc_msgSend_pixelFormat(a1, a2, a3, a4);
  if (v5 <= 79)
  {
    if ((unint64_t)(v5 - 70) < 5)
    {
      v9 = 16385;
LABEL_9:
      v10 = 8;
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  if ((unint64_t)(v5 - 80) < 2)
  {
    v9 = 8194;
    goto LABEL_9;
  }
  if (v5 == 125)
  {
    v9 = 16641;
    v10 = 32;
    goto LABEL_10;
  }
  if (v5 != 115)
  {
LABEL_13:
    v37 = objc_msgSend_pixelFormat(a1, v6, v7, v8);
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unexpected pixel format %lu"), v38, v39, v40, v41, v42, v43, v37);
    return 0;
  }
  v9 = 12545;
  v10 = 16;
LABEL_10:
  v11 = (v10 * objc_msgSend_width(a1, v6, v7, v8)) >> 1;
  v15 = objc_msgSend_height(a1, v12, v13, v14);
  v16 = v11 & 0xFFFFFFFC;
  v17 = malloc_type_malloc(v16 * v15, 0xECB556AEuLL);
  v21 = objc_msgSend_width(a1, v18, v19, v20);
  v25 = objc_msgSend_height(a1, v22, v23, v24);
  v26 = (CGColorSpace *)sub_1B179D1A8();
  v27 = CGBitmapContextCreate(v17, v21, v25, v10, v16, v26, v9);
  memset(v44, 0, 24);
  v44[3] = objc_msgSend_width(a1, v28, v29, v30);
  v44[4] = objc_msgSend_height(a1, v31, v32, v33);
  v44[5] = 1;
  objc_msgSend_getBytes_bytesPerRow_fromRegion_mipmapLevel_(a1, v34, (uint64_t)v17, v16, v44, 0);
  Image = CGBitmapContextCreateImage(v27);
  CGContextRelease(v27);
  free(v17);
  return Image;
}

uint64_t sub_1B189E654(const void *a1)
{
  if (CFEqual(a1, CFSTR("shaderRead")))
    return 1;
  if (CFEqual(a1, CFSTR("shaderWrite")))
    return 2;
  if (CFEqual(a1, CFSTR("renderTarget")))
    return 4;
  return 16 * (CFEqual(a1, CFSTR("pixelFormatView")) != 0);
}

uint64_t sub_1B189E6DC(const __CFArray *a1)
{
  CFIndex Count;
  CFIndex v3;
  CFIndex v4;
  uint64_t v5;
  const void *ValueAtIndex;

  Count = CFArrayGetCount(a1);
  if (Count < 1)
    return 0;
  v3 = Count;
  v4 = 0;
  v5 = 0;
  do
  {
    ValueAtIndex = CFArrayGetValueAtIndex(a1, v4);
    v5 |= sub_1B189E654(ValueAtIndex);
    ++v4;
  }
  while (v3 != v4);
  return v5;
}

uint64_t sub_1B189E744(__int16 a1, const void *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (a2)
  {
    if (a3)
      goto LABEL_3;
LABEL_6:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mtlVertexFormat");
    goto LABEL_7;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"mtlBuffer");
  if (!a3)
    goto LABEL_6;
LABEL_3:
  if (a3 >= 0x36)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad type"), a3, a4, a5, a6, a7, a8, (uint64_t)"format < sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray) / sizeof(__VFXMTLVertexFormatToCFXBaseTypeArray[0])");
LABEL_7:
  v14 = word_1B2247398[a3];
  v15 = sub_1B179E600(v14, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v23 = sub_1B179E64C(v14, v16, v17, v18, v19, v20, v21, v22);
  v24 = (const void *)sub_1B18F38F8(v15, v23, a4, a5, a6);
  v31 = sub_1B17ED34C(v24, a1);
  if (!v31)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v25, v26, v27, v28, v29, v30, (uint64_t)"meshSource");
  sub_1B18F3B34((uint64_t)v24, v31);
  if (v24)
    CFRelease(v24);
  *(_QWORD *)(v31 + 72) = CFRetain(a2);
  *(_QWORD *)(v31 + 80) = a3;
  return v31;
}

__IOSurface *sub_1B189E888(__IOSurface *result, const char *a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  __IOSurface *v5;
  uint64_t v6;
  uint64_t v7;
  __IOSurface *v8;
  const char *v9;
  uint64_t v10;
  _QWORD v11[5];

  if ((_DWORD)a3)
  {
    v4 = (void **)a2;
    v5 = result;
    v6 = a3;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      result = (__IOSurface *)objc_msgSend_iosurface(*v4, a2, a3, a4);
      if (result)
      {
        v8 = result;
        IOSurfaceIncrementUseCount(result);
        v11[0] = v7;
        v11[1] = 3221225472;
        v11[2] = sub_1B189E934;
        v11[3] = &unk_1E63D72D0;
        v11[4] = v8;
        result = (__IOSurface *)objc_msgSend_addCompletedHandler_(v5, v9, (uint64_t)v11, v10);
      }
      ++v4;
      --v6;
    }
    while (v6);
  }
  return result;
}

void sub_1B189E934(uint64_t a1)
{
  IOSurfaceDecrementUseCount(*(IOSurfaceRef *)(a1 + 32));
}

uint64_t sub_1B189E944()
{
  return 0;
}

BOOL sub_1B189E950(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return (unint64_t)objc_msgSend_maxViewportCount(a1, a2, a3, a4) > 1;
}

uint64_t sub_1B189E974()
{
  MTLPixelFormatGetInfoForDevice();
  return 0;
}

uint64_t sub_1B189E9B0()
{
  MTLPixelFormatGetInfoForDevice();
  return 0;
}

uint64_t sub_1B189E9FC(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1 < 3)
    return qword_1B22478B8[a1];
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unexpected antialiasing mode (%d)"), a3, a4, a5, a6, a7, a8, a1);
  return 1;
}

uint64_t sub_1B189EA44(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  unsigned int v11;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((uint64_t)a2 < 2)
    return 1;
  v15 = v5;
  v16 = v4;
  v17 = v6;
  v18 = v7;
  v9 = (a2 - 1) | (((unint64_t)a2 - 1) >> 1);
  v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
  v11 = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
  if (v11 >= 2)
  {
    while ((objc_msgSend_supportsTextureSampleCount_(a1, a2, v11, a4, v15, v16, v17, v18) & 1) == 0)
    {
      v13 = v11 >> 1;
      v14 = v11 > 3;
      v11 >>= 1;
      if (!v14)
        return v13;
    }
  }
  return v11;
}

uint64_t sub_1B189EACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](a1, sel_supportsVertexAmplificationCount_, 2, a4);
}

uint64_t sub_1B189EAD8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_supportsUnalignedVertexFetch(a1, a2, a3, a4) ^ 1;
}

uint64_t sub_1B189EAF0()
{
  if (qword_1EEF65F30 != -1)
    dispatch_once(&qword_1EEF65F30, &unk_1E63D0E50);
  if (byte_1EEF65F28)
    return 131075;
  else
    return 0x20000;
}

void sub_1B189EB44()
{
  byte_1EEF65F28 = 1;
}

void sub_1B189F100(void *a1, char *a2, __CFDictionary *a3, void *a4)
{
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v8 = (void *)objc_msgSend_copy(a1, a2, (uint64_t)a3, (uint64_t)a4);
  v12 = (const void *)objc_msgSend_asset(a1, v9, v10, v11);
  v16 = (const void *)objc_msgSend_asset(v8, v13, v14, v15);
  CFDictionaryAddValue(a3, v12, v16);
  objc_msgSend_addChildNode_(a2, v17, (uint64_t)v8, v18);
  objc_msgSend_asset(a1, v19, v20, v21);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v25 = (void *)objc_msgSend_asset(a1, v22, v23, v24);
    v29 = (void *)objc_msgSend_entityObject(v25, v26, v27, v28);
    v33 = objc_msgSend_objectID(v29, v30, v31, v32);
    v37 = (void *)objc_msgSend_asset(v8, v34, v35, v36);
    v41 = (void *)objc_msgSend_entityObject(v37, v38, v39, v40);
    v45 = objc_msgSend_objectID(v41, v42, v43, v44);
    objc_msgSend_add::(a4, v46, v33, v45);
  }
  v47 = (void *)objc_msgSend_childNodes(a1, v22, v23, v24);
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v49 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v48, (uint64_t)&v54, (uint64_t)v58, 16);
  if (v49)
  {
    v50 = v49;
    v51 = *(_QWORD *)v55;
    do
    {
      v52 = 0;
      do
      {
        if (*(_QWORD *)v55 != v51)
          objc_enumerationMutation(v47);
        sub_1B189F100(*(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * v52++), v8, a3, a4);
      }
      while (v50 != v52);
      v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(v47, v53, (uint64_t)&v54, (uint64_t)v58, 16);
    }
    while (v50);
  }

}

const void *sub_1B189F2A0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t i;
  void *v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  void *v24;
  const __CFDictionary *v25;
  const void *v26;
  const void *Value;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const void *result;
  const void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  id obj;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[128];
  _BYTE v59[128];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v5 = (void *)objc_msgSend_model(a2, (const char *)a2, a3, a4);
  obj = (id)objc_msgSend_materials(v5, v6, v7, v8);
  v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v9, (uint64_t)&v54, (uint64_t)v59, 16);
  if (v10)
  {
    v14 = v10;
    v15 = *(_QWORD *)v55;
    do
    {
      for (i = 0; i != v14; ++i)
      {
        if (*(_QWORD *)v55 != v15)
          objc_enumerationMutation(obj);
        v17 = *(void **)(*((_QWORD *)&v54 + 1) + 8 * i);
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v53 = 0u;
        v18 = (void *)objc_msgSend_properties(v17, v11, v12, v13);
        v20 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v19, (uint64_t)&v50, (uint64_t)v58, 16);
        if (v20)
        {
          v21 = v20;
          v22 = *(_QWORD *)v51;
          do
          {
            for (j = 0; j != v21; ++j)
            {
              if (*(_QWORD *)v51 != v22)
                objc_enumerationMutation(v18);
              v24 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * j);
              v25 = *(const __CFDictionary **)(a1 + 32);
              v26 = (const void *)objc_msgSend_contents(v24, v11, v12, v13);
              Value = CFDictionaryGetValue(v25, v26);
              if (Value)
                objc_msgSend_setContents_(v24, v11, (uint64_t)Value, v13);
            }
            v21 = objc_msgSend_countByEnumeratingWithState_objects_count_(v18, v11, (uint64_t)&v50, (uint64_t)v58, 16);
          }
          while (v21);
        }
      }
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v11, (uint64_t)&v54, (uint64_t)v59, 16);
    }
    while (v14);
  }
  v28 = (void *)objc_msgSend_light(a2, v11, v12, v13);
  v32 = (void *)objc_msgSend_gobo(v28, v29, v30, v31);
  result = (const void *)objc_msgSend_contents(v32, v33, v34, v35);
  if (result)
  {
    v37 = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), result);
    v41 = (void *)objc_msgSend_light(a2, v38, v39, v40);
    v45 = (void *)objc_msgSend_gobo(v41, v42, v43, v44);
    return (const void *)objc_msgSend_setContents_(v45, v46, (uint64_t)v37, v47);
  }
  return result;
}

uint64_t sub_1B189F480(void *a1, void *a2, void *a3)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;

  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v10 = (void *)objc_msgSend_entityObject(a1, v7, v8, v9);
    v14 = objc_msgSend_objectID(v10, v11, v12, v13);
    v18 = (void *)objc_msgSend_entityObject(a2, v15, v16, v17);
    v22 = objc_msgSend_objectID(v18, v19, v20, v21);
    return objc_msgSend_add::(a3, v23, v14, v22);
  }
  return result;
}

_QWORD *sub_1B189F5B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(const void **)(*(_QWORD *)(a1 + 32) + 8);
  v5 = objc_msgSend_coreEntityHandleRef(*(void **)(a1 + 40), a2, a3, a4);
  return sub_1B17C5C00(v4, v5, v6, v7, v8, v9, v10, v11);
}

CFTypeRef sub_1B189F704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B187C1A8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), 0, a3, a4, a5, a6, a7, a8);
}

void sub_1B18A0198(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_1B18A0454(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = (uint64_t *)objc_msgSend_nodeRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B187A780(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B18A06A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_worldRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B17B1B18(v5, v6, v7, v8, v9, v10, v11, v12, *(float *)(a1 + 40));
}

void sub_1B18A0C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187C114(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

double sub_1B18A0DAC(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __n128 v10;

  v10.n128_u64[0] = sub_1B18BCF20(*(const void **)(a1 + 32), 0);
  v10.n128_u64[1] = v2;
  *(_QWORD *)&result = sub_1B187B4C4((__n128 *)*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), &v10, v3, v4, v5, v6, v7, v8).n128_u64[0];
  return result;
}

void sub_1B18A0F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187B3D4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B18A0FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187B338(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B18A1080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187B470(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B18A1130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187B644(*(_BYTE **)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B18A11DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187B70C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_WORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B18A1298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187B7A0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B18A1348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B187B83C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B18A1758(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  const char *v19;
  uint64_t error;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  void *PathComponent;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (!*(_QWORD *)(a1 + 32))
    return (*(uint64_t (**)(uint64_t, _QWORD, const char *))(a3 + 16))(a3, *(_QWORD *)(a1 + 40), a2);
  v7 = (void *)objc_msgSend_pathExtension(*(void **)(a1 + 40), a2, a3, a4);
  v11 = objc_msgSend_lowercaseString(v7, v8, v9, v10);
  if (objc_msgSend_isEqualToString_(*(void **)(a1 + 32), v12, v11, v13))
    return (*(uint64_t (**)(uint64_t, _QWORD, const char *))(a3 + 16))(a3, *(_QWORD *)(a1 + 40), a2);
  v18 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v14, v15, v16);
  error = objc_msgSend_URLForDirectory_inDomain_appropriateForURL_create_error_(v18, v19, 99, 1, *(_QWORD *)(a1 + 40), 1, a2);
  if (!error)
    return 0;
  v24 = (void *)error;
  PathComponent = (void *)objc_msgSend_lastPathComponent(*(void **)(a1 + 40), v21, v22, v23);
  v28 = *(_QWORD *)(a1 + 32)
      ? objc_msgSend_stringByAppendingPathExtension_(PathComponent, v26, *(_QWORD *)(a1 + 32), v27)
      : objc_msgSend_stringByAppendingPathExtension_(PathComponent, v26, (uint64_t)CFSTR("vfx"), v27);
  v31 = objc_msgSend_URLByAppendingPathComponent_(v24, v29, v28, v30);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, const char *))(a3 + 16))(a3, v31, a2))
    return 0;
  v35 = objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v32, v33, v34);
  return MEMORY[0x1E0DE7D20](v35, sel_moveItemAtURL_toURL_error_, v31, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1B18A1874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_writeToURLWithUSDKit_, a2, a4);
}

uint64_t sub_1B18A1880(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v6 = (void *)MEMORY[0x1E0CC7780];
  v7 = objc_msgSend_world(*(void **)(a1 + 32), a2, a3, a4);
  v10 = objc_msgSend_assetWithVFXWorld_(v6, v8, v7, v9);
  return MEMORY[0x1E0DE7D20](v10, sel_exportAssetToURL_error_, a2, a3);
}

uint64_t sub_1B18A2C6C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  v5 = (void *)objc_msgSend_UUID(MEMORY[0x1E0CB3A28], a2, a3, a4);
  v9 = objc_msgSend_UUIDString(v5, v6, v7, v8);
  return objc_msgSend_setIdentifier_(a2, v10, v9, v11);
}

uint64_t sub_1B18A2CA0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;

  objc_msgSend_asset(a2, (const char *)a2, a3, a4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v9 = (void *)objc_msgSend_asset(a2, v6, v7, v8);
    objc_msgSend_resolveTag_remap_(v9, v10, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  v11 = (void *)objc_msgSend_asset(a2, v6, v7, v8);
  result = objc_msgSend_conformsToProtocol_(v11, v12, (uint64_t)&unk_1EEFDCF78, v13);
  if ((_DWORD)result)
  {
    v18 = (void *)objc_msgSend_asset(a2, v15, v16, v17);
    v22 = (void *)objc_msgSend_behaviorGraph(v18, v19, v20, v21);
    v26 = (void *)objc_msgSend_coreEntityHandle(v22, v23, v24, v25);
    return objc_msgSend_resolveTag_remap_(v26, v27, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  return result;
}

uint64_t sub_1B18A2D3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int isHidden;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint64_t v40;
  uint64_t result;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_particleEmitter(a2, (const char *)a2, a3, a4))
  {
    v9 = (void *)objc_msgSend_particleEmitter(a2, v6, v7, v8);
    v13 = (void *)objc_msgSend_coreEntityHandle(v9, v10, v11, v12);
    objc_msgSend_resolveTag_remap_(v13, v14, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  if (objc_msgSend_particleCollider(a2, v6, v7, v8))
  {
    v18 = (void *)objc_msgSend_particleCollider(a2, v15, v16, v17);
    v22 = (void *)objc_msgSend_coreEntityHandle(v18, v19, v20, v21);
    objc_msgSend_resolveTag_remap_(v22, v23, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
  if (objc_msgSend_behaviorGraph(a2, v15, v16, v17))
  {
    v27 = (void *)objc_msgSend_behaviorGraph(a2, v24, v25, v26);
    objc_msgSend_resolveTag_remap_(v27, v28, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    isHidden = objc_msgSend_isHidden(a2, v29, v30, v31);
    objc_msgSend_setHidden_(a2, v33, isHidden ^ 1u, v34);
    v38 = objc_msgSend_isHidden(a2, v35, v36, v37);
    objc_msgSend_setHidden_(a2, v39, v38 ^ 1u, v40);
  }
  result = objc_msgSend_model(a2, v24, v25, v26);
  if (result)
  {
    v45 = (void *)objc_msgSend_model(a2, v42, v43, v44);
    v49 = (void *)objc_msgSend_behaviorGraph(v45, v46, v47, v48);
    v53 = (void *)objc_msgSend_coreEntityHandle(v49, v50, v51, v52);
    objc_msgSend_resolveTag_remap_(v53, v54, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v58 = (void *)objc_msgSend_model(a2, v55, v56, v57, 0);
    v62 = (void *)objc_msgSend_materials(v58, v59, v60, v61);
    result = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v63, (uint64_t)&v76, (uint64_t)v80, 16);
    if (result)
    {
      v67 = result;
      v68 = *(_QWORD *)v77;
      do
      {
        v69 = 0;
        do
        {
          if (*(_QWORD *)v77 != v68)
            objc_enumerationMutation(v62);
          v70 = (void *)objc_msgSend_behaviorGraph(*(void **)(*((_QWORD *)&v76 + 1) + 8 * v69), v64, v65, v66);
          v74 = (void *)objc_msgSend_coreEntityHandle(v70, v71, v72, v73);
          objc_msgSend_resolveTag_remap_(v74, v75, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
          ++v69;
        }
        while (v67 != v69);
        result = objc_msgSend_countByEnumeratingWithState_objects_count_(v62, v64, (uint64_t)&v76, (uint64_t)v80, 16);
        v67 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_1B18A31F0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t result;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  uint64_t v48;
  const char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_identifier(a2, (const char *)a2, a3, a4))
  {
    v9 = *(void **)(a1 + 32);
    v10 = objc_msgSend_identifier(a2, v6, v7, v8);
    objc_msgSend_setValue_forKey_(v9, v11, (uint64_t)a2, v10);
  }
  result = objc_msgSend_model(a2, v6, v7, v8);
  if (result)
  {
    v16 = (void *)objc_msgSend_model(a2, v13, v14, v15);
    if (objc_msgSend_identifier(v16, v17, v18, v19))
    {
      v23 = *(void **)(a1 + 32);
      v24 = objc_msgSend_model(a2, v20, v21, v22);
      v28 = (void *)objc_msgSend_model(a2, v25, v26, v27);
      v32 = objc_msgSend_identifier(v28, v29, v30, v31);
      objc_msgSend_setValue_forKey_(v23, v33, v24, v32);
    }
    v52 = 0u;
    v53 = 0u;
    v50 = 0u;
    v51 = 0u;
    v34 = (void *)objc_msgSend_model(a2, v20, v21, v22, 0);
    v38 = (void *)objc_msgSend_materials(v34, v35, v36, v37);
    result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v50, (uint64_t)v54, 16);
    if (result)
    {
      v43 = result;
      v44 = *(_QWORD *)v51;
      do
      {
        v45 = 0;
        do
        {
          if (*(_QWORD *)v51 != v44)
            objc_enumerationMutation(v38);
          v46 = *(void **)(*((_QWORD *)&v50 + 1) + 8 * v45);
          if (objc_msgSend_identifier(v46, v40, v41, v42))
          {
            v47 = *(void **)(a1 + 32);
            v48 = objc_msgSend_identifier(v46, v40, v41, v42);
            objc_msgSend_setValue_forKey_(v47, v49, (uint64_t)v46, v48);
          }
          ++v45;
        }
        while (v43 != v45);
        result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v40, (uint64_t)&v50, (uint64_t)v54, 16);
        v43 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_1B18A3748(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v14;

  v14 = INFINITY;
  v5 = objc_msgSend_metalTextureWithEngineContext_textureSampler_nextFrameTime_status_(a2, (const char *)a2, a1, a3, &v14, a4);
  sub_1B18142C8(a1, v14, v6, v7, v8, v9, v10, v11, v12);
  return v5;
}

void sub_1B18A37A0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;

  v11 = INFINITY;
  objc_msgSend_renderWithEngineContext_textureSampler_nextFrameTime_(a2, (const char *)a2, a1, a3, &v11);
  sub_1B18142C8(a1, v11, v4, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B18A383C(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;

  v5 = objc_msgSend_textureSource(a3, a2, (uint64_t)a3, a4);
  if (v5)
  {
    v13 = (const void *)v5;
    v28 = xmmword_1E63D80E8;
    v14 = sub_1B181F420();
    sub_1B181F5B0(v14, &v28, v15, v16, v17, v18, v19, v20);
    sub_1B181F530(v14, v13, v21, v22, v23, v24, v25, v26);
  }
  else
  {
    sub_1B1814328(a1, v6, v7, v8, v9, v10, v11, v12);
    return 0;
  }
  return v14;
}

VFXSourceRendererRegistry *sub_1B18A39C4()
{
  VFXSourceRendererRegistry *result;

  result = objc_alloc_init(VFXSourceRendererRegistry);
  qword_1ED4CF798 = (uint64_t)result;
  return result;
}

_VFXUIKitSourceRegistry *sub_1B18A3CFC()
{
  _VFXUIKitSourceRegistry *result;

  result = objc_alloc_init(_VFXUIKitSourceRegistry);
  qword_1EEF65F50 = (uint64_t)result;
  return result;
}

void sub_1B18A3DF4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B18A3E3C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B18A3F54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

_VFXUIApplicationObserver *sub_1B18A3FF8()
{
  _VFXUIApplicationObserver *result;

  result = objc_alloc_init(_VFXUIApplicationObserver);
  qword_1EEF65F58 = (uint64_t)result;
  return result;
}

BOOL sub_1B18A401C()
{
  return qword_1EEF65F50 != 0;
}

void sub_1B18A4488(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  _VFXSnapshotWindow *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *Object;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  id v72;

  v5 = (void *)objc_msgSend_uiView(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend_bounds(v5, v6, v7, v8);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v17 = [_VFXSnapshotWindow alloc];
  v72 = (id)objc_msgSend_initWithFrame_(v17, v18, v19, v20, v10, v12, v14, v16);
  objc_msgSend_setHidden_(v72, v21, 1, v22);
  LODWORD(v23) = 1.0;
  objc_msgSend_setCharge_(v72, v24, v25, v26, v23);
  objc_msgSend_setWindowLevel_(v72, v27, v28, v29, 10000.0);
  v33 = objc_msgSend_uiView(*(void **)(a1 + 32), v30, v31, v32);
  objc_msgSend_addSubview_(v72, v34, v33, v35);
  v39 = (void *)objc_msgSend_subviews(v72, v36, v37, v38);
  Object = (void *)objc_msgSend_firstObject(v39, v40, v41, v42);
  objc_msgSend_setNeedsDisplay(Object, v44, v45, v46);
  objc_msgSend_setNeedsDisplay(v72, v47, v48, v49);
  v53 = (void *)objc_msgSend_uiView(*(void **)(a1 + 32), v50, v51, v52);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 32) = objc_msgSend_isOpaque(v53, v54, v55, v56);
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = objc_msgSend_layer(v72, v57, v58, v59);
  v63 = (void *)objc_msgSend_superlayer(*(void **)(*(_QWORD *)(a1 + 32) + 24), v60, v61, v62);
  objc_msgSend_setValue_forKey_(v63, v64, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("VFXIsBackingViewAsMaterialPropertyTag"));
  objc_msgSend_setUiWindow_(*(void **)(a1 + 32), v65, (uint64_t)v72, v66);
  objc_msgSend_setPosition_(v72, v67, v68, v69, -10000.0, 0.0);
  objc_msgSend_setHidden_(v72, v70, 0, v71);

}

void sub_1B18A4738(uint64_t a1)
{

}

void sub_1B18A4884(uint64_t a1)
{

}

uint64_t sub_1B18A4A78(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1B21AB51C(a1, "PostRender");
  *(_QWORD *)result = off_1E63CE340;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_1B18A4AB4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v3, 27275, 51583, -277915706);
  return sub_1B17A371C(a1, v3, 1);
}

void sub_1B18A4B2C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

unint64_t sub_1B18A4B38(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *a3;
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a3 + 1);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v10 = v7;
      v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B18A4BBC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFX::RG::Resource *v18;
  _OWORD *v19;
  const char *v20;
  CFX::RG::RenderGraphBuilder *v21;
  CFX::RG::Pass *v22;
  CFX::RG::Pass *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFX::RG::Resource *v29;
  uint64_t *CopyPass;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  CFX::RG::Resource *v35;
  __int128 v36;
  CFX::RG::Resource *v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[160];
  float32x4_t v41[3];
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 32), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B18A5078(v41, v10, v11, v12);
  if (sub_1B1815DA8(*(_QWORD *)(a1 + 32)) && (sub_1B1815DD4(*(_QWORD *)(a1 + 32)) & 1) == 0)
  {
    v35 = sub_1B191DEE8(a3, v41, *(_QWORD *)(a1 + 32), v13, v14, v15, v16, v17);
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v36, 27275, 51583, -277915706);
    v31 = v36;
    v32 = (uint64_t)a3;
    v33 = (unint64_t)v35;
    v34 = 0;
  }
  else
  {
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v39, *(_WORD *)(a1 + 24), 9273, 1656467160);
    CFX::RG::ResourceReference::ResourceReference((uint64_t)v40, v39);
    v18 = sub_1B17C1128((uint64_t)a3, (uint64_t)"COLOR", (CFX::RG::ResourceReference *)v40);
    v19 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v18);
    CFX::RG::TextureDescriptorReference::withSampleCount(v19, 1, (uint64_t)&v36);
    v21 = CFX::RG::copyIfNeeded_r((CFX::RG *)a3, v18, 0, (CFX::RG::Pass *)&v36, (const CFX::RG::TextureDescriptorReference *)"Copy to final resolve", v20);
    v23 = v22;
    v29 = sub_1B191DEE8(a3, v41, *(_QWORD *)(a1 + 32), v24, v25, v26, v27, v28);
    *(_QWORD *)&v36 = v21;
    DWORD2(v36) = 0;
    v37 = v29;
    v38 = 0x100000000;
    CopyPass = (uint64_t *)CFX::RG::makeCopyPass(a3, (uint64_t)"CopyToFinal", &v36);
    CFX::RG::Pass::dependsOn(CopyPass, v23);
    CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v36, 27275, 51583, -277915706);
    v31 = v36;
    v32 = (uint64_t)a3;
    v33 = (unint64_t)v29;
    v34 = (uint64_t)CopyPass;
  }
  CFX::RG::RenderGraphBuilder::publishResourceReference(v32, v31, v33, v34);
}

uint64_t sub_1B18A4D74(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1B21AB51C(a1, "PostRender");
  *(_QWORD *)result = off_1E63CE428;
  *(_WORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_1B18A4DB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v3, 27275, 51583, -277915706);
  return sub_1B17A371C(a1, v3, 1);
}

void sub_1B18A4E28(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

unint64_t sub_1B18A4E34(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *a3;
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a3 + 1);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v10 = v7;
      v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B18A4EB8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  CFX::RG::Resource *v13;
  _OWORD *v14;
  CFX::RG::Resource *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFX::RG::Resource *v28;
  unint64_t v29;
  CFX::RG::Resource *v30;
  CFX::RG::ResourceIdentifier *CopyPass;
  unint64_t v32;
  __n128 v33;
  CFX::RG::Resource *v34;
  uint64_t v35;
  _OWORD v36[10];
  _OWORD v37[10];
  uint64_t v38;
  _BYTE v39[160];
  float32x4_t v40[3];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 32), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  sub_1B18A5078(v40, v10, v11, v12);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v38, *(_WORD *)(a1 + 24), 9273, 1656467160);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v39, v38);
  v13 = sub_1B17C1128((uint64_t)a3, (uint64_t)"COLOR", (CFX::RG::ResourceReference *)v39);
  v14 = (_OWORD *)CFX::RG::Resource::constTextureDesc(v13);
  CFX::RG::TextureDescriptorReference::withSampleCount(v14, 1, (uint64_t)v37);
  v15 = sub_1B17A34D0(a3, (uint64_t)"Resolve", v37);
  v33.n128_u64[0] = (unint64_t)v13;
  v33.n128_u32[2] = 0;
  v34 = v15;
  v35 = 0x200000000;
  CFX::RG::makeCopyPass(a3, (uint64_t)"Resolve", &v33);
  if (sub_1B1814D48(*(_QWORD *)(a1 + 32), v16, v17, v18, v19, v20, v21, v22))
  {
    CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v33);
    CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v33, MTLPixelFormatRGBA16Float, (uint64_t)v36);
    v28 = sub_1B17A34D0(a3, (uint64_t)"almost final target", v36);
    v29 = *(_QWORD *)(a1 + 32);
    v33.n128_u64[0] = (unint64_t)v15;
    v33.n128_u64[1] = (unint64_t)v28;
    sub_1B182CC48(a3, v29, (unint64_t)"debug copy stereo to drawable", &v33);
    v15 = v28;
  }
  v30 = sub_1B191DEE8(a3, v40, *(_QWORD *)(a1 + 32), v23, v24, v25, v26, v27);
  v33.n128_u64[0] = (unint64_t)v15;
  v33.n128_u32[2] = 0;
  v34 = v30;
  v35 = 0x100000000;
  CopyPass = (CFX::RG::ResourceIdentifier *)CFX::RG::makeCopyPass(a3, (uint64_t)"Copy to drawable", &v33);
  v32 = CFX::RG::ResourceIdentifier::finalColor(CopyPass);
  CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v32, (unint64_t)v30, (uint64_t)CopyPass);
}

float32x4_t *sub_1B18A5078(float32x4_t *a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  __n128 *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  float v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;

  objc_msgSend_attachmentProvider(a2, (const char *)a2, a3, a4);
  if ((objc_opt_respondsToSelector() & 1) != 0
    && (v9 = (void *)objc_msgSend_attachmentProvider(a2, v6, v7, v8),
        (v13 = (void *)objc_msgSend_drawableDescriptor(v9, v10, v11, v12)) != 0))
  {
    sub_1B18A516C((uint64_t)a1, v13, v7, v8);
  }
  else if (objc_msgSend_textureTarget(a2, v6, v7, v8))
  {
    v17 = (void *)objc_msgSend_textureTarget(a2, v14, v15, v16);
    sub_1B18A51E8((uint64_t)a1, v17, v18, v19);
  }
  else if (objc_msgSend_layerTarget(a2, v14, v15, v16))
  {
    v23 = (__n128 *)objc_msgSend_engineContext(a2, v20, v21, v22);
    *a1 = vrndmq_f32((float32x4_t)sub_1B1815A98(v23));
    v27 = (void *)objc_msgSend_layerTarget(a2, v24, v25, v26);
    objc_msgSend_drawableSize(v27, v28, v29, v30);
    *(float *)&v31 = v31;
    a1[1].f32[0] = floorf(*(float *)&v31);
    objc_msgSend_drawableSize(v27, v32, v33, v34);
    v36 = v35;
    a1[1].f32[1] = floorf(v36);
    a1[1].i64[1] = objc_msgSend_pixelFormat(v27, v37, v38, v39);
    v43 = objc_msgSend_framebufferOnly(v27, v40, v41, v42);
    v44 = 4;
    if (!v43)
      v44 = 0;
    a1[2].i64[0] = v44;
  }
  return a1;
}

uint64_t sub_1B18A516C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  *(float *)(a1 + 16) = (float)objc_msgSend_width(a2, (const char *)a2, a3, a4);
  *(float *)(a1 + 20) = (float)objc_msgSend_height(a2, v6, v7, v8);
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = v9;
  *(float *)(a1 + 8) = (float)objc_msgSend_width(a2, v10, v11, v12);
  *(float *)(a1 + 12) = (float)objc_msgSend_height(a2, v13, v14, v15);
  result = objc_msgSend_pixelFormat(a2, v16, v17, v18);
  *(_QWORD *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1B18A51E8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  *(float *)(a1 + 16) = (float)(unint64_t)objc_msgSend_width(a2, (const char *)a2, a3, a4);
  *(float *)(a1 + 20) = (float)(unint64_t)objc_msgSend_height(a2, v6, v7, v8);
  *(_QWORD *)&v9 = 0;
  *((_QWORD *)&v9 + 1) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = v9;
  *(float *)(a1 + 8) = (float)(unint64_t)objc_msgSend_width(a2, v10, v11, v12);
  *(float *)(a1 + 12) = (float)(unint64_t)objc_msgSend_height(a2, v13, v14, v15);
  *(_QWORD *)(a1 + 24) = objc_msgSend_pixelFormat(a2, v16, v17, v18);
  result = objc_msgSend_usage(a2, v19, v20, v21);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1B18A5270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E63CFB18;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 480) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = sub_1B1813884(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 24) = v9;
  v17 = sub_1B187B1D0(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 32) = v17;
  *(_DWORD *)(a1 + 48) = 0;
  *(_WORD *)(a1 + 52) = 15;
  sub_1B19D7DD8(v17, 0xFu);
  return a1;
}

void sub_1B18A5324(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B2227AE0(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B18A5340(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E63CFB18;
  sub_1B19D7E4C(*(int16x4_t **)(a1 + 32), *(unsigned __int16 *)(a1 + 52));
  for (i = 504; i != 488; i -= 8)
  {
    v3 = *(void **)(a1 + i);
    if (v3)

  }
  v4 = *(void **)(a1 + 480);
  if (v4)

  return a1;
}

void sub_1B18A53A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B2227B98(v1 + 512, v1 + 496, v1);
  _Unwind_Resume(a1);
}

void sub_1B18A53C0(uint64_t a1)
{
  sub_1B18A5340(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18A53E4(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  _BOOL8 v32;
  unsigned __int16 *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  id v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  uint64_t v67;
  _BOOL4 v68;
  unsigned int v69;

  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = (void *)objc_msgSend_resourceManager(v11, v12, v13, v14);
  v23 = sub_1B1814768(*(uint64_t **)(a1 + 16), v16, v17, v18, v19, v20, v21, v22);
  if (v23 && sub_1B186CFA8((uint64_t)v23, v24, v25, v26, v27, v28, v29, v30))
  {
    v31 = sub_1B19DA3D0(*(_QWORD *)(a1 + 32));
    v69 = v31;
    v32 = sub_1B19DA3E0(*(_QWORD *)(a1 + 32)) != 0;
    v68 = v32;
    v33 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, *(const CFX::RG::Resource **)(a3 + 192));
    v37 = *v33;
    v38 = v33[1];
    v39 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v31 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (v31 ^ 1)) >> 47) ^ 1);
    v40 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
    v41 = 0x9DDFEA08EB382D69
        * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v32)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v32)));
    v42 = 0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47));
    if (*(_QWORD *)(a1 + 472) != v42)
    {
      *(_QWORD *)(a1 + 472) = v42;
      sub_1B19D9F28(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16));
      v43 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      objc_msgSend_setConstantValue_type_withName_(v43, v44, (uint64_t)&v69, 33, CFSTR("LightCount"));
      objc_msgSend_setConstantValue_type_withName_(v43, v45, (uint64_t)&v68, 33, CFSTR("raytracing_use_function_constant"));
      v46 = sub_1B19DA304(*(_QWORD *)(a1 + 32));
      v48 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(v15, v47, (uint64_t)CFSTR("vfx_rt_direct_lighting_trace"), (uint64_t)v43, v46);

      v49 = *(void **)(a1 + 480);
      if (v49 != (void *)v48)
      {
        if (v49)

        *(_QWORD *)(a1 + 480) = v48;
      }
      *(_DWORD *)(a1 + 452) = 0;
      sub_1B19DA290(*(_QWORD *)(a1 + 32));
      v31 = v69;
      v50 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v69 ^ 1)) ^ ((0x9DDFEA08EB382D69 * (v69 ^ 1)) >> 47) ^ 1);
      v40 = 0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47));
    }
    v51 = 0x9DDFEA08EB382D69
        * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v37)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v37)));
    v52 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47))) ^ v38)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47))) ^ v38)));
    v53 = 0x9DDFEA08EB382D69 * (v52 ^ (v52 >> 47));
    if (*(_QWORD *)(a1 + 488) != v53)
    {
      *(_QWORD *)(a1 + 488) = v53;
      v54 = (void *)objc_msgSend_device(v11, v34, v35, v36);
      v55 = 96 * (v37 >> 1) * (unint64_t)(v38 >> 1);
      v57 = objc_msgSend_newBufferWithLength_options_(v54, v56, v55, 32);
      v61 = *(void **)(a1 + 496);
      if (v61 != (void *)v57)
      {
        v62 = v57;
        if (v61)

        *(_QWORD *)(a1 + 496) = v62;
      }
      v63 = (void *)objc_msgSend_device(v11, v58, v59, v60);
      v65 = objc_msgSend_newBufferWithLength_options_(v63, v64, v55, 32);
      v66 = *(void **)(a1 + 504);
      if (v66 != (void *)v65)
      {
        v67 = v65;
        if (v66)

        *(_QWORD *)(a1 + 504) = v67;
      }
      *(_DWORD *)(a1 + 452) = 0;
      v31 = v69;
    }
    *(_BYTE *)(a1 + 512) ^= 1u;
    if (v31 < *(_DWORD *)(a1 + 48))
      *(_DWORD *)(a1 + 452) = 0;
    *(_DWORD *)(a1 + 48) = v31;
  }
}

uint64_t sub_1B18A567C(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  CFX::CrossFrameResourceManager *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38[2];

  v8 = *a5;
  v38[0] = (uint64_t)"RTDirectLightingTracePass";
  v38[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF65F70);
  if ((v8 & 1) == 0)
  {
    v37 = a3;
    v35 = a2;
    v36 = __cxa_guard_acquire(&qword_1EEF65F70);
    a2 = v35;
    a3 = v37;
    if (v36)
    {
      byte_1EEF65F68 = 1;
      __cxa_guard_release(&qword_1EEF65F70);
      a2 = v35;
      a3 = v37;
    }
  }
  if (byte_1EEF65F68)
    v9 = 0x8FA5417697CB30C3;
  else
    v9 = 0;
  sub_1B18F7354(a1, a2, a3, v38, v9, 0);
  *(_QWORD *)a1 = &off_1E63CFB38;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 400) = v17;
  *(_QWORD *)(a1 + 408) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  v21 = a4[4];
  v22 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v23 = CFX::CrossFrameResourceManager::get(v21, v22);
  *(_QWORD *)(a1 + 384) = v23;
  if (!v23)
  {
    v29 = (uint64_t)a4[4];
    v30 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    v38[0] = *(_QWORD *)(a1 + 368);
    v23 = sub_1B18A5834(v29, v30, v38);
    *(_QWORD *)(a1 + 384) = v23;
  }
  sub_1B18A53E4(v23, (CFX::RG::RenderGraphContext *)a4, (uint64_t)a5, v24, v25, v26, v27, v28);
  v31 = sub_1B17928F4(*(void **)(a1 + 400), a4[4]);
  v32 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(v32 + 464) = v31;
  v33 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(v33 + 248) = v32 + 64;
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(v33 + 192));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 184));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 200));
  return a1;
}

void sub_1B18A581C(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B18A5834(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = operator new();
  sub_1B18A5270(v6, *a3, v7, v8, v9, v10, v11, v12);
  CFX::CrossFrameResourceManager::set(a1, a2, v6);
  return v6;
}

void sub_1B18A5898(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10A1C40EB1F0E58);
  _Unwind_Resume(a1);
}

void sub_1B18A58C0(uint64_t *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _OWORD *v68;
  float32x4_t *v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  const char *v80;
  id Texture;
  id v82;
  id v83;
  id v84;
  id v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  const char *v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  _QWORD v128[3];
  __n128 v129;
  unsigned __int8 v130[176];
  float32x4_t v131[4];
  float32x4_t v132[4];

  if (*(_QWORD *)(a1[48] + 480))
  {
    v10 = *a3;
    v11 = sub_1B1813884(a1[46], a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = sub_1B1814768((uint64_t *)a1[46], v12, v13, v14, v15, v16, v17, v18);
    if (v19)
    {
      if (sub_1B186CFA8((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26))
      {
        v34 = sub_1B1814768((uint64_t *)a1[46], v27, v28, v29, v30, v31, v32, v33);
        sub_1B17B33F4((uint64_t)v34, (uint64_t)v130, v35, v36, v37, v38, v39, v40);
        v41 = (__int128 *)sub_1B1815A5C(a1[46], 1);
        v126 = v41[1];
        v127 = *v41;
        v124 = v41[3];
        v125 = v41[2];
        v129 = sub_1B181537C(a1[46], 0, v42, v43, v44, v45, v46, v47);
        v55 = sub_1B187B1D0(v11, v48, v49, v50, v51, v52, v53, v54);
        sub_1B19D9F28(v55, a1[46]);
        v56 = (_OWORD *)a1[48];
        v56[4] = v127;
        v56[5] = v126;
        v56[6] = v125;
        v56[7] = v124;
        v63 = sub_1B18667B4(v130, (uint64_t)&v129, v57, v58, v59, v60, v61, v62);
        v64 = 0;
        v65 = *((_OWORD *)v63 + 1);
        v66 = *((_OWORD *)v63 + 2);
        v67 = *((_OWORD *)v63 + 3);
        v68 = (_OWORD *)a1[48];
        v68[8] = *(_OWORD *)v63;
        v68[9] = v65;
        v68[10] = v66;
        v68[11] = v67;
        v69 = (float32x4_t *)a1[48];
        v70 = v69[8];
        v71 = v69[9];
        v72 = v69[10];
        v73 = v69[11];
        v74 = v69[5];
        v75 = v69[6];
        v76 = v69[7];
        v131[0] = v69[4];
        v131[1] = v74;
        v131[2] = v75;
        v131[3] = v76;
        do
        {
          v132[v64] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v70, COERCE_FLOAT(*(_OWORD *)&v131[v64])), v71, *(float32x2_t *)v131[v64].f32, 1), v72, v131[v64], 2), v73, v131[v64], 3);
          ++v64;
        }
        while (v64 != 4);
        v77 = v132[1];
        v78 = v132[2];
        v79 = v132[3];
        v69[12] = v132[0];
        v69[13] = v77;
        v69[14] = v78;
        v69[15] = v79;
        *(simd_float4x4 *)(a1[48] + 384) = __invert_f4(*(simd_float4x4 *)(a1[48] + 64));
        *(simd_float4x4 *)(a1[48] + 320) = __invert_f4(*(simd_float4x4 *)(a1[48] + 192));
        objc_msgSend_setBytes_length_atIndex_(v10, v80, a1[48] + 64, 400, 8);
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1[47] + 176));
        v82 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1[47] + 192));
        v83 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1[47] + 184));
        v84 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1[47] + 200));
        v85 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1[47] + 216));
        objc_msgSend_setTexture_atIndex_(v10, v86, (uint64_t)Texture, 0);
        objc_msgSend_setTexture_atIndex_(v10, v87, (uint64_t)v82, 1);
        objc_msgSend_setTexture_atIndex_(v10, v88, (uint64_t)v83, 2);
        objc_msgSend_setTexture_atIndex_(v10, v89, (uint64_t)v84, 3);
        objc_msgSend_setTexture_atIndex_(v10, v90, (uint64_t)v85, 4);
        objc_msgSend_setTexture_atIndex_(v10, v91, *(_QWORD *)(a1[48] + 464), 9);
        if (sub_1B19DA3D0(v55))
        {
          v93 = sub_1B19DA2F4(v55);
          objc_msgSend_setBuffer_offset_atIndex_(v10, v94, v93, 0, 0);
        }
        objc_msgSend_setBuffer_offset_atIndex_(v10, v92, *(_QWORD *)(a1[48] + 8 * *(unsigned __int8 *)(a1[48] + 512) + 496), 0, 10);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v95, a1[49], 0, 11);
        v102 = a1[48];
        v103 = *(_QWORD *)(v102 + 480);
        if (!v103)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v96, v97, v98, v99, v100, v101, (uint64_t)"_ptr != NULL");
          v103 = *(_QWORD *)(v102 + 480);
        }
        v104 = sub_1B18FD774(v103);
        objc_msgSend_setComputePipelineState_(v10, v105, v104, v106);
        v110 = (unint64_t)objc_msgSend_width(v82, v107, v108, v109) >> 1;
        v120 = (unint64_t)objc_msgSend_height(v82, v111, v112, v113) >> 1;
        v121 = a1[48];
        v122 = *(_QWORD *)(v121 + 480);
        if (!v122)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v114, v115, v116, v117, v118, v119, (uint64_t)"_ptr != NULL");
          v122 = *(_QWORD *)(v121 + 480);
        }
        v123 = (void *)sub_1B18FD774(v122);
        v128[0] = v110;
        v128[1] = v120;
        v128[2] = 1;
        RGMTLComputeCommandEncoderDispatchOnGrid2D(v10, v123, (uint64_t)v128, 1);
        sub_1B19DA290(v55);
        ++*(_DWORD *)(a1[48] + 452);
      }
    }
  }
}

uint64_t sub_1B18A5C5C(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int16 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  const char *v51;
  const char *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  int v86;
  unsigned int v87;
  uint64_t v88[2];

  v10 = *(_QWORD *)a5;
  v88[0] = (uint64_t)"RTDirectLightingSpatialReSTIRPass";
  v88[1] = v10;
  LOBYTE(v10) = atomic_load((unsigned __int8 *)&qword_1EEF65F80);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65F80))
  {
    byte_1EEF65F78 = 1;
    __cxa_guard_release(&qword_1EEF65F80);
  }
  if (byte_1EEF65F78)
    v11 = 0x59850DCBC38AB58ALL;
  else
    v11 = 0;
  sub_1B18F7354(a1, a2, a3, v88, v11, 0);
  *(_QWORD *)a1 = &off_1E63D0348;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v19 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)(a1 + 400) = v19;
  *(_QWORD *)(a1 + 408) = objc_msgSend_resourceManager(v19, v20, v21, v22);
  v23 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, *(const CFX::RG::Resource **)(a5 + 192));
  v24 = *v23;
  v25 = v23[1];
  v33 = sub_1B1813884(*(_QWORD *)(a1 + 368), v26, v27, v28, v29, v30, v31, v32);
  v41 = sub_1B187B1D0(v33, v34, v35, v36, v37, v38, v39, v40);
  LODWORD(v88[0]) = 0;
  LODWORD(v88[0]) = sub_1B19DA3E0(v41) != 0;
  v87 = sub_1B19DA3D0(v41);
  v42 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v43 = 0x9DDFEA08EB382D69
      * (v42 ^ ((0x9DDFEA08EB382D69 * (v42 ^ LODWORD(v88[0]))) >> 47) ^ (0x9DDFEA08EB382D69 * (v42 ^ LODWORD(v88[0]))));
  v44 = 0x9DDFEA08EB382D69 * (v43 ^ (v43 >> 47));
  v45 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v44 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v87)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v87)))) ^ ((0x9DDFEA08EB382D69 * (v44 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v87)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v87)))) >> 47));
  v46 = CFX::CrossFrameResourceManager::get(a4[4], v45);
  *(_QWORD *)(a1 + 384) = v46;
  if (!v46)
  {
    v47 = (uint64_t)a4[4];
    v48 = (_QWORD *)operator new();
    *v48 = &off_1E63D0308;
    v48[1] = 0;
    v48[2] = 0;
    v48[3] = 0;
    CFX::CrossFrameResourceManager::set(v47, v45, (uint64_t)v48);
    *(_QWORD *)(a1 + 384) = v48;
    sub_1B19D9F28(v41, *(_QWORD *)(a1 + 368));
    v49 = sub_1B19DA304(v41);
    v50 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v50, v51, (uint64_t)&v87, 33, CFSTR("LightCount"));
    objc_msgSend_setConstantValue_type_withName_(v50, v52, (uint64_t)v88, 33, CFSTR("raytracing_use_function_constant"));
    v86 = 0;
    objc_msgSend_setConstantValue_type_withName_(v50, v53, (uint64_t)&v86, 29, CFSTR("spatial_pass_id"));
    v54 = *(_QWORD *)(a1 + 384);
    v57 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(*(void **)(a1 + 408), v55, (uint64_t)CFSTR("vfx_rt_direct_lighting_spatial_restir"), (uint64_t)v50, v49);
    v58 = *(void **)(v54 + 16);
    if (v58 != (void *)v57)
    {
      if (v58)

      *(_QWORD *)(v54 + 16) = v57;
    }
    v86 = 1;
    objc_msgSend_setConstantValue_type_withName_(v50, v56, (uint64_t)&v86, 29, CFSTR("spatial_pass_id"));
    v59 = *(_QWORD *)(a1 + 384);
    v61 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(*(void **)(a1 + 408), v60, (uint64_t)CFSTR("vfx_rt_direct_lighting_spatial_restir"), (uint64_t)v50, v49);
    v62 = *(void **)(v59 + 24);
    if (v62 != (void *)v61)
    {
      if (v62)

      *(_QWORD *)(v59 + 24) = v61;
    }

    sub_1B19DA290(v41);
  }
  v63 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v64 = 0x9DDFEA08EB382D69
      * (v63 ^ ((0x9DDFEA08EB382D69 * (v63 ^ v24)) >> 47) ^ (0x9DDFEA08EB382D69 * (v63 ^ v24)));
  v65 = 0x9DDFEA08EB382D69 * (v64 ^ (v64 >> 47));
  v66 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v65 ^ ((0x9DDFEA08EB382D69 * (v65 ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * (v65 ^ v25)))) ^ ((0x9DDFEA08EB382D69 * (v65 ^ ((0x9DDFEA08EB382D69 * (v65 ^ v25)) >> 47) ^ (0x9DDFEA08EB382D69 * (v65 ^ v25)))) >> 47));
  v67 = CFX::CrossFrameResourceManager::get(a4[4], v66);
  *(_QWORD *)(a1 + 392) = v67;
  if (!v67)
  {
    v68 = (uint64_t)a4[4];
    v69 = (_QWORD *)operator new();
    *v69 = &off_1E63D0328;
    v69[1] = 0;
    v69[2] = 0;
    v69[3] = 0;
    CFX::CrossFrameResourceManager::set(v68, v66, (uint64_t)v69);
    *(_QWORD *)(a1 + 392) = v69;
    v73 = (void *)objc_msgSend_device(*(void **)(a1 + 400), v70, v71, v72);
    v78 = objc_msgSend_newBufferWithLength_options_(v73, v74, 96 * (v24 >> 1) * (unint64_t)(v25 >> 1), 32);
    v79 = (void *)v69[2];
    if (v79 != (void *)v78)
    {
      if (v79)

      v69[2] = v78;
    }
    v80 = *(_QWORD *)(a1 + 392);
    v81 = (void *)objc_msgSend_device(*(void **)(a1 + 400), v75, v76, v77);
    v83 = objc_msgSend_newBufferWithLength_options_(v81, v82, 96 * (v24 >> 1) * (unint64_t)(v25 >> 1), 32);
    v84 = *(void **)(v80 + 24);
    if (v84 != (void *)v83)
    {
      if (v84)

      *(_QWORD *)(v80 + 24) = v83;
    }
  }
  return a1;
}

void sub_1B18A607C(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B18A60BC(uint64_t *a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  id Texture;
  id v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  const char *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  void *v92;
  const char *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  _QWORD v115[3];
  _QWORD v116[3];

  v8 = a1[48];
  if (*(_QWORD *)(v8 + 16) && *(_QWORD *)(v8 + 24))
  {
    v11 = *a3;
    v12 = sub_1B1813884(a1[46], a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v20 = sub_1B187B1D0(v12, v13, v14, v15, v16, v17, v18, v19);
    sub_1B19D9F28(v20, a1[46]);
    objc_msgSend_setBytes_length_atIndex_(v11, v21, *(_QWORD *)(a1[47] + 248), 400, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1[47] + 176));
    v23 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1[47] + 192));
    objc_msgSend_setTexture_atIndex_(v11, v24, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v11, v25, (uint64_t)v23, 1);
    v26 = sub_1B19DA2DC(v20);
    objc_msgSend_useHeap_(v11, v27, v26, v28);
    v29 = sub_1B19DA2E4(v20);
    objc_msgSend_setAccelerationStructure_atBufferIndex_(v11, v30, v29, 1);
    if (sub_1B19DA3D0(v20))
    {
      v31 = sub_1B19DA2F4(v20);
      objc_msgSend_setBuffer_offset_atIndex_(v11, v32, v31, 0, 2);
    }
    v33 = sub_1B19DA2FC(v20);
    v37 = sub_1B19DA3F0(v20, v34, v35, v36);
    objc_msgSend_useResources_count_usage_(v11, v38, v33, v37, 1);
    v42 = objc_msgSend_width(v23, v39, v40, v41);
    v46 = objc_msgSend_height(v23, v43, v44, v45);
    if (sub_1B19DA3E0(v20))
    {
      v54 = a1[48];
      v55 = *(_QWORD *)(v54 + 16);
      if (!v55)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v48, v49, v50, v51, v52, v53, (uint64_t)"_ptr != NULL");
        v55 = *(_QWORD *)(v54 + 16);
      }
      v56 = (void *)sub_1B18FD774(v55);
      v57 = sub_1B19DA30C(v20, v56);
      objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(v11, v58, (uint64_t)v57, 4);
    }
    else
    {
      v57 = 0;
    }
    objc_msgSend_setBuffer_offset_atIndex_(v11, v47, *(_QWORD *)(a1[47] + 232), 0, 10);
    objc_msgSend_setBuffer_offset_atIndex_(v11, v59, *(_QWORD *)(a1[49] + 16), 0, 11);
    v66 = a1[48];
    v67 = *(_QWORD *)(v66 + 16);
    if (!v67)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v60, v61, v62, v63, v64, v65, (uint64_t)"_ptr != NULL");
      v67 = *(_QWORD *)(v66 + 16);
    }
    v68 = v42 >> 1;
    v69 = v46 >> 1;
    v70 = sub_1B18FD774(v67);
    objc_msgSend_setComputePipelineState_(v11, v71, v70, v72);
    v79 = a1[48];
    v80 = *(_QWORD *)(v79 + 16);
    if (!v80)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v73, v74, v75, v76, v77, v78, (uint64_t)"_ptr != NULL");
      v80 = *(_QWORD *)(v79 + 16);
    }
    v81 = (void *)sub_1B18FD774(v80);
    v116[0] = v68;
    v116[1] = v69;
    v116[2] = 1;
    RGMTLComputeCommandEncoderDispatchOnGrid2D(v11, v81, (uint64_t)v116, 1);

    if (sub_1B19DA3E0(v20))
    {
      v89 = a1[48];
      v90 = *(_QWORD *)(v89 + 24);
      if (!v90)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v83, v84, v85, v86, v87, v88, (uint64_t)"_ptr != NULL");
        v90 = *(_QWORD *)(v89 + 24);
      }
      v91 = (void *)sub_1B18FD774(v90);
      v92 = sub_1B19DA30C(v20, v91);
      objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(v11, v93, (uint64_t)v92, 4);
    }
    else
    {
      v92 = 0;
    }
    objc_msgSend_setBuffer_offset_atIndex_(v11, v82, *(_QWORD *)(a1[49] + 16), 0, 10);
    objc_msgSend_setBuffer_offset_atIndex_(v11, v94, *(_QWORD *)(a1[49] + 24), 0, 11);
    v101 = a1[48];
    v102 = *(_QWORD *)(v101 + 24);
    if (!v102)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v95, v96, v97, v98, v99, v100, (uint64_t)"_ptr != NULL");
      v102 = *(_QWORD *)(v101 + 24);
    }
    v103 = sub_1B18FD774(v102);
    objc_msgSend_setComputePipelineState_(v11, v104, v103, v105);
    v112 = a1[48];
    v113 = *(_QWORD *)(v112 + 24);
    if (!v113)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v106, v107, v108, v109, v110, v111, (uint64_t)"_ptr != NULL");
      v113 = *(_QWORD *)(v112 + 24);
    }
    v114 = (void *)sub_1B18FD774(v113);
    v115[0] = v68;
    v115[1] = v69;
    v115[2] = 1;
    RGMTLComputeCommandEncoderDispatchOnGrid2D(v11, v114, (uint64_t)v115, 1);

    sub_1B19DA290(v20);
  }
}

uint64_t sub_1B18A6478(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  CFX::RG::Resource *v62;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _OWORD v67[10];
  uint64_t v68[2];

  v8 = *a5;
  v68[0] = (uint64_t)"RTDirectLightingResolvePass";
  v68[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF65F90);
  if ((v8 & 1) == 0)
  {
    v64 = a3;
    v65 = a2;
    v66 = __cxa_guard_acquire(&qword_1EEF65F90);
    a2 = v65;
    a3 = v64;
    if (v66)
    {
      qword_1EEF65F88 = (uint64_t)sub_1B18A72EC("RT_DIRECT_LIGHTING_RESOLVE", 0x1Au);
      __cxa_guard_release(&qword_1EEF65F90);
      a2 = v65;
      a3 = v64;
    }
  }
  sub_1B18F7354(a1, a2, a3, v68, qword_1EEF65F88, 0);
  *(_QWORD *)a1 = &off_1E63CFD68;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  v16 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 400) = v16;
  *(_QWORD *)(a1 + 408) = objc_msgSend_resourceManager(v16, v17, v18, v19);
  v27 = sub_1B1813884(*(_QWORD *)(a1 + 368), v20, v21, v22, v23, v24, v25, v26);
  v35 = sub_1B187B1D0(v27, v28, v29, v30, v31, v32, v33, v34);
  v36 = sub_1B19DA3D0(v35);
  LODWORD(v68[0]) = v36;
  v37 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v38 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v37 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v37 ^ v36)))) ^ ((0x9DDFEA08EB382D69 * (v37 ^ ((0x9DDFEA08EB382D69 * (v37 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v37 ^ v36)))) >> 47));
  v39 = CFX::CrossFrameResourceManager::get(a4[4], v38);
  v40 = a1 + 384;
  *(_QWORD *)(a1 + 384) = v39;
  if (!v39)
  {
    v41 = (uint64_t)a4[4];
    v42 = (_QWORD *)operator new();
    *v42 = &off_1E63CFD48;
    v42[1] = 0;
    v42[2] = 0;
    CFX::CrossFrameResourceManager::set(v41, v38, (uint64_t)v42);
    *(_QWORD *)(a1 + 384) = v42;
    v50 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v43, v44, v45, v46, v47, v48, v49);
    v54 = (void *)objc_msgSend_resourceManager(v50, v51, v52, v53);
    v55 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_withName_(v55, v56, (uint64_t)v68, 33, CFSTR("LightCount"));
    v58 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v54, v57, (uint64_t)CFSTR("vfx_rt_direct_lighting_resolve"), (uint64_t)v55);

    v59 = *(_QWORD *)v40;
    v60 = *(void **)(*(_QWORD *)v40 + 16);
    if (v60 != (void *)v58)
    {
      if (v60)

      *(_QWORD *)(v59 + 16) = v58;
    }
  }
  v61 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)(*(_QWORD *)(a1 + 376) + 8), MTLPixelFormatRGBA16Float, (uint64_t)v67);
  v62 = sub_1B17A34D0(v61, (uint64_t)"DirectLightingResolve", v67);
  *(_QWORD *)(a1 + 392) = v62;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v62);
  return a1;
}

void sub_1B18A66C4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B18A66FC(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  id Texture;
  id v22;
  id v23;
  id v24;
  const char *v25;
  const char *v26;
  const char *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  id v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 16))
  {
    v10 = *a3;
    v11 = sub_1B1813884(*(_QWORD *)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = sub_1B187B1D0(v11, v12, v13, v14, v15, v16, v17, v18);
    sub_1B19D9F28(v19, *(_QWORD *)(a1 + 368));
    objc_msgSend_setBytes_length_atIndex_(v10, v20, *(_QWORD *)(*(_QWORD *)(a1 + 376) + 248), 400, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 176));
    v22 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 192));
    v23 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 184));
    v24 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 200));
    objc_msgSend_setTexture_atIndex_(v10, v25, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v10, v26, (uint64_t)v22, 1);
    objc_msgSend_setTexture_atIndex_(v10, v27, (uint64_t)v23, 2);
    objc_msgSend_setTexture_atIndex_(v10, v28, (uint64_t)v24, 3);
    objc_msgSend_setBuffer_offset_atIndex_(v10, v29, *(_QWORD *)(*(_QWORD *)(a1 + 376) + 240), 0, 0);
    if (sub_1B19DA3D0(v19))
    {
      v30 = sub_1B19DA2F4(v19);
      objc_msgSend_setBuffer_offset_atIndex_(v10, v31, v30, 0, 3);
    }
    v32 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 392));
    objc_msgSend_setTexture_atIndex_(v10, v33, (uint64_t)v32, 10);
    v40 = *(_QWORD *)(a1 + 384);
    v41 = *(_QWORD *)(v40 + 16);
    if (!v41)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v34, v35, v36, v37, v38, v39, (uint64_t)"_ptr != NULL");
      v41 = *(_QWORD *)(v40 + 16);
    }
    v42 = sub_1B18FD774(v41);
    objc_msgSend_dispatch_onTexture2D_(v10, v43, v42, (uint64_t)v32);
    sub_1B19DA290(v19);
  }
}

uint64_t sub_1B18A68CC(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  CFX::RG::Resource *v53;
  CFX::RG::Resource *v54;
  _OWORD v56[5];
  _OWORD v57[5];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  char v63;
  const char *v64;

  v10 = *a5;
  *(_QWORD *)&v58 = "RTDirectLightingDenoisePass";
  *((_QWORD *)&v58 + 1) = v10;
  LOBYTE(v10) = atomic_load((unsigned __int8 *)&qword_1EEF65FA0);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF65FA0))
  {
    qword_1EEF65F98 = (uint64_t)sub_1B18A72EC("RT_DIRECT_LIGHTING_DENOISE", 0x1Au);
    __cxa_guard_release(&qword_1EEF65FA0);
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v58, qword_1EEF65F98, 0);
  *(_QWORD *)a1 = &off_1E63CFCF8;
  v11 = *(_OWORD *)a5;
  v12 = *((_OWORD *)a5 + 1);
  v13 = *((_OWORD *)a5 + 3);
  *(_OWORD *)(a1 + 408) = *((_OWORD *)a5 + 2);
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 376) = v11;
  *(_OWORD *)(a1 + 392) = v12;
  v14 = *((_OWORD *)a5 + 4);
  v15 = *((_OWORD *)a5 + 5);
  v16 = *((_OWORD *)a5 + 7);
  *(_OWORD *)(a1 + 472) = *((_OWORD *)a5 + 6);
  *(_OWORD *)(a1 + 488) = v16;
  *(_OWORD *)(a1 + 440) = v14;
  *(_OWORD *)(a1 + 456) = v15;
  v17 = *((_OWORD *)a5 + 8);
  v18 = *((_OWORD *)a5 + 9);
  v19 = *((_OWORD *)a5 + 11);
  *(_OWORD *)(a1 + 536) = *((_OWORD *)a5 + 10);
  *(_OWORD *)(a1 + 552) = v19;
  *(_OWORD *)(a1 + 504) = v17;
  *(_OWORD *)(a1 + 520) = v18;
  v20 = *((_OWORD *)a5 + 12);
  v21 = *((_OWORD *)a5 + 13);
  v22 = *((_OWORD *)a5 + 15);
  *(_OWORD *)(a1 + 600) = *((_OWORD *)a5 + 14);
  *(_OWORD *)(a1 + 616) = v22;
  *(_OWORD *)(a1 + 568) = v20;
  *(_OWORD *)(a1 + 584) = v21;
  *(_QWORD *)(a1 + 664) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  v30 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v23, v24, v25, v26, v27, v28, v29);
  *(_QWORD *)(a1 + 656) = v30;
  *(_QWORD *)(a1 + 664) = objc_msgSend_resourceManager(v30, v31, v32, v33);
  v34 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[24]);
  v35 = *v34;
  v36 = v34[1];
  v37 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v38 = CFX::CrossFrameResourceManager::get(a4[4], v37);
  *(_QWORD *)(a1 + 632) = v38;
  if (!v38)
  {
    v39 = (uint64_t)a4[4];
    v40 = (_OWORD *)operator new();
    v40[25] = 0u;
    v40[26] = 0u;
    v40[23] = 0u;
    v40[24] = 0u;
    v40[21] = 0u;
    v40[22] = 0u;
    v40[19] = 0u;
    v40[20] = 0u;
    v40[17] = 0u;
    v40[18] = 0u;
    v40[15] = 0u;
    v40[16] = 0u;
    v40[13] = 0u;
    v40[14] = 0u;
    v40[11] = 0u;
    v40[12] = 0u;
    v40[9] = 0u;
    v40[10] = 0u;
    v40[7] = 0u;
    v40[8] = 0u;
    v40[5] = 0u;
    v40[6] = 0u;
    v40[3] = 0u;
    v40[4] = 0u;
    v40[1] = 0u;
    v40[2] = 0u;
    *v40 = 0u;
    *(_QWORD *)v40 = &off_1E63CFCB8;
    v40[2] = 0u;
    v40[3] = 0u;
    v40[4] = 0u;
    v40[5] = 0u;
    v40[6] = 0u;
    v40[7] = 0u;
    v40[8] = 0u;
    v40[9] = 0u;
    v40[10] = 0u;
    v40[11] = 0u;
    v40[12] = 0u;
    v40[13] = 0u;
    v40[14] = 0u;
    v40[15] = 0u;
    v40[16] = 0u;
    v40[17] = 0u;
    v40[18] = 0u;
    v40[19] = 0u;
    v40[20] = 0u;
    v40[21] = 0u;
    v40[22] = 0u;
    v40[23] = 0u;
    v40[24] = 0u;
    v40[25] = 0u;
    CFX::CrossFrameResourceManager::set(v39, v37, (uint64_t)v40);
    *(_QWORD *)(a1 + 632) = v40;
    v43 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 664), v41, (uint64_t)CFSTR("vfx_rt_direct_lighting_denoise"), v42);
    v44 = (void *)*((_QWORD *)v40 + 2);
    if (v44 != (void *)v43)
    {
      if (v44)

      *((_QWORD *)v40 + 2) = v43;
    }
    v45 = *(_QWORD *)(a1 + 632);
    *(_DWORD *)(v45 + 420) = 0;
    *(_BYTE *)(v45 + 24) = 0;
  }
  v46 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v47 = 0x9DDFEA08EB382D69
      * (v46 ^ ((0x9DDFEA08EB382D69 * (v46 ^ v35)) >> 47) ^ (0x9DDFEA08EB382D69 * (v46 ^ v35)));
  v48 = 0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47));
  v49 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v36)))) ^ ((0x9DDFEA08EB382D69 * (v48 ^ ((0x9DDFEA08EB382D69 * (v48 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v48 ^ v36)))) >> 47));
  v50 = CFX::CrossFrameResourceManager::get(a4[4], v49);
  *(_QWORD *)(a1 + 640) = v50;
  if (!v50)
  {
    v51 = (uint64_t)a4[4];
    v52 = (_QWORD *)operator new();
    *v52 = &off_1E63CFCD8;
    v52[1] = 0;
    v52[2] = 0;
    v52[3] = 0;
    CFX::CrossFrameResourceManager::set(v51, v49, (uint64_t)v52);
    *(_QWORD *)(a1 + 640) = v52;
    v61 = 0u;
    v62 = 0u;
    v59 = 0u;
    v60 = 0u;
    v58 = 0u;
    RGTextureDescriptorMake2D(v35, v36, 115, (uint64_t)&v58);
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v57[2] = v60;
    v57[3] = v61;
    v57[4] = v62;
    v57[0] = v58;
    v57[1] = v59;
    v64 = "pingPongTex0";
    v63 = 2;
    sub_1B1825D28((uint64_t *)&v64, (uint64_t)v57, &v63);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 640) + 16), v53);
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v56[2] = v60;
    v56[3] = v61;
    v56[4] = v62;
    v56[0] = v58;
    v56[1] = v59;
    v64 = "pingPongTex1";
    v63 = 2;
    sub_1B1825D28((uint64_t *)&v64, (uint64_t)v56, &v63);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 640) + 24), v54);
  }
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 552));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 592));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 640) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 632) + 24) == 0) + 16));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 640) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 632) + 24) + 16));
  return a1;
}

void sub_1B18A6CF0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1B18A6D1C(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 result)
{
  void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _OWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _OWORD *v53;
  float32x4_t *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  const char *v65;
  id Texture;
  id v67;
  const CFX::RG::Resource *v68;
  id v69;
  id v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  id v75;
  id v76;
  const char *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __n128 v96;
  unsigned __int8 v97[176];
  _OWORD v98[4];
  _OWORD v99[4];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 632) + 16))
  {
    v11 = *a3;
    v12 = sub_1B1814768(*(uint64_t **)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (v12)
    {
      if (sub_1B186CFA8((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19))
      {
        v27 = sub_1B1814768(*(uint64_t **)(a1 + 368), v20, v21, v22, v23, v24, v25, v26);
        sub_1B17B33F4((uint64_t)v27, (uint64_t)v97, v28, v29, v30, v31, v32, v33);
        v34 = (__int128 *)sub_1B1815A5C(*(_QWORD *)(a1 + 368), 1);
        v94 = v34[1];
        v95 = *v34;
        v92 = v34[3];
        v93 = v34[2];
        v96 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v35, v36, v37, v38, v39, v40);
        v41 = *(_OWORD **)(a1 + 632);
        v41[2] = v95;
        v41[3] = v94;
        v41[4] = v93;
        v41[5] = v92;
        v48 = sub_1B18667B4(v97, (uint64_t)&v96, v42, v43, v44, v45, v46, v47);
        v49 = 0;
        v50 = *((_OWORD *)v48 + 1);
        v51 = *((_OWORD *)v48 + 2);
        v52 = *((_OWORD *)v48 + 3);
        v53 = *(_OWORD **)(a1 + 632);
        v53[6] = *(_OWORD *)v48;
        v53[7] = v50;
        v53[8] = v51;
        v53[9] = v52;
        v54 = *(float32x4_t **)(a1 + 632);
        v55 = v54[6];
        v56 = v54[7];
        v57 = v54[8];
        v58 = v54[9];
        v59 = v54[3];
        v60 = v54[4];
        v61 = v54[5];
        v98[0] = v54[2];
        v98[1] = v59;
        v98[2] = v60;
        v98[3] = v61;
        do
        {
          v99[v49] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(v98[v49])), v56, *(float32x2_t *)&v98[v49], 1), v57, (float32x4_t)v98[v49], 2), v58, (float32x4_t)v98[v49], 3);
          ++v49;
        }
        while (v49 != 4);
        v62 = (float32x4_t)v99[1];
        v63 = (float32x4_t)v99[2];
        v64 = (float32x4_t)v99[3];
        v54[10] = (float32x4_t)v99[0];
        v54[11] = v62;
        v54[12] = v63;
        v54[13] = v64;
        *(simd_float4x4 *)(*(_QWORD *)(a1 + 632) + 352) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 632) + 32));
        *(simd_float4x4 *)(*(_QWORD *)(a1 + 632) + 288) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 632) + 160));
        objc_msgSend_setBytes_length_atIndex_(v11, v65, *(_QWORD *)(a1 + 632) + 32, 400, 8);
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 648));
        v67 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 552));
        v68 = *(const CFX::RG::Resource **)(a1 + 584);
        if (v68)
          v69 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v68);
        else
          v69 = 0;
        v70 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 592));
        objc_msgSend_setTexture_atIndex_(v11, v71, (uint64_t)Texture, 0);
        objc_msgSend_setTexture_atIndex_(v11, v72, (uint64_t)v67, 1);
        objc_msgSend_setTexture_atIndex_(v11, v73, (uint64_t)v69, 2);
        objc_msgSend_setTexture_atIndex_(v11, v74, (uint64_t)v70, 3);
        v75 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 640)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 632) + 24)+ 16));
        v76 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 640)+ 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 632) + 24) == 0)+ 16));
        objc_msgSend_setTexture_atIndex_(v11, v77, (uint64_t)v75, 10);
        objc_msgSend_setTexture_atIndex_(v11, v78, (uint64_t)v76, 11);
        v85 = *(_QWORD *)(a1 + 632);
        v86 = *(_QWORD *)(v85 + 16);
        if (!v86)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v79, v80, v81, v82, v83, v84, (uint64_t)"_ptr != NULL");
          v86 = *(_QWORD *)(v85 + 16);
        }
        v87 = sub_1B18FD774(v86);
        objc_msgSend_dispatch_onTexture2D_(v11, v88, v87, (uint64_t)v75);
        v89 = *(_QWORD *)(a1 + 632);
        *(_BYTE *)(v89 + 24) ^= 1u;
        v90 = *(_OWORD *)(v89 + 304);
        *(_OWORD *)(v89 + 224) = *(_OWORD *)(v89 + 288);
        *(_OWORD *)(v89 + 240) = v90;
        result = *(__n128 *)(v89 + 320);
        v91 = *(_OWORD *)(v89 + 336);
        *(__n128 *)(v89 + 256) = result;
        *(_OWORD *)(v89 + 272) = v91;
        ++*(_DWORD *)(*(_QWORD *)(a1 + 632) + 420);
      }
    }
  }
  return result;
}

uint64_t *sub_1B18A7010(CFX::RG::RenderGraphContext *a1, uint64_t *a2)
{
  uint64_t *v4;
  CFX::RG::Pass *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  CFX::RG::Resource *v10;

  v4 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  v5 = (CFX::RG::Pass *)sub_1B18A70FC(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  a2[29] = *(_QWORD *)(*((_QWORD *)v5 + 48) + 8 * *(unsigned __int8 *)(*((_QWORD *)v5 + 48) + 512) + 496);
  v6 = (uint64_t *)sub_1B18A7150(v4, (CFX::CrossFrameResourceManager **)a1, (uint64_t)a2);
  CFX::RG::Pass::dependsOn(v6, v5);
  v7 = *(_QWORD *)(v6[49] + 24);
  a2[30] = v7;
  *((_QWORD *)v5 + 49) = v7;
  v8 = (uint64_t *)sub_1B18A71A4(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  CFX::RG::Pass::dependsOn(v8, (CFX::RG::Pass *)v6);
  v9 = (uint64_t *)sub_1B18A71F8(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  v10 = (CFX::RG::Resource *)v8[49];
  v9[81] = (uint64_t)v10;
  CFX::RG::Pass::readFrom(v9, v10);
  CFX::RG::Pass::dependsOn(v9, (CFX::RG::Pass *)v8);
  a2[28] = *(_QWORD *)(v9[80] + 8 * *(unsigned __int8 *)(v9[79] + 24) + 16);
  return v9;
}

uint64_t sub_1B18A70FC(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18A7694(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B18A7150(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18A76F0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B18A71A4(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18A774C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B18A71F8(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18A77A8(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B18A7250(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18A7278(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18A72A0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18A72C8(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B18A72EC(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B18A73B4(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63D0308;
  for (i = 3; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B18A73FC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63D0308;
  v2 = 3;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

_QWORD *sub_1B18A7454(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63D0328;
  for (i = 3; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B18A749C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63D0328;
  v2 = 3;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

_QWORD *sub_1B18A74F4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CFD48;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B18A752C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CFD48;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B18A7574(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CFCB8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B18A75AC(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CFCB8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B18A75F4(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63CFCD8;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  return a1;
}

void sub_1B18A763C(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63CFCD8;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B18A7694(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  return sub_1B18A567C(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B18A76F0(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  return sub_1B18A5C5C(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B18A774C(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  return sub_1B18A6478(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B18A77A8(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x2A0u, 8u);
  return sub_1B18A68CC(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B18A7804(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B18A7830(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int8x16_t v5;
  int v6;
  __int8 *v7;
  _QWORD *v8;
  int8x16_t v9;
  int8x16_t v10;

  if (qword_1EEF65FB0 != -1)
    dispatch_once_f(&qword_1EEF65FB0, &qword_1EEF65FA8, (dispatch_function_t)sub_1B18A7804);
  result = sub_1B179CB90(qword_1EEF65FA8, 0x30uLL);
  if (a2 > 3)
    return 0;
  *(_QWORD *)(result + 48) = a2;
  if (a2 < 1)
  {
    LOBYTE(v6) = 0;
  }
  else
  {
    v6 = 0;
    v7 = (__int8 *)(a1 + 2);
    v8 = (_QWORD *)(result + 16);
    do
    {
      *v8 = *(_QWORD *)(v7 - 2);
      if (*(v7 - 2))
      {
        v5.i8[0] = *v7;
        v5.i8[4] = v7[1];
        v9 = v5;
        v9.i8[1] = v5.i8[4];
        v9.i8[8] = *v7;
        v9.i8[9] = v5.i8[4];
        *(int8x8_t *)v5.i8 = vceq_s8(vqtbl1_s8(v9, (int8x8_t)0x101000000000101), (int8x8_t)0xB0D0A0C0B0D0A0CLL);
        v5.i8[0] = vmaxv_u8(*(uint8x8_t *)v5.i8);
        v6 |= v5.i32[0];
        if (*(v7 - 1))
        {
          v5.i8[0] = v7[3];
          v5.i8[4] = v7[4];
          v10 = v5;
          v10.i8[1] = v5.i8[4];
          v10.i8[8] = v5.i8[0];
          v10.i8[9] = v5.i8[4];
          *(int8x8_t *)v5.i8 = vceq_s8(vqtbl1_s8(v10, (int8x8_t)0x101000000000101), (int8x8_t)0xB0D0A0C0B0D0A0CLL);
          v5.i8[0] = vmaxv_u8(*(uint8x8_t *)v5.i8);
          v6 |= v5.i32[0];
        }
      }
      v7 += 8;
      ++v8;
      --a2;
    }
    while (a2);
  }
  *(_BYTE *)(result + 56) = v6 & 1;
  return result;
}

uint64_t sub_1B18A796C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"states");
  if (*(_QWORD *)(a1 + 48) <= a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong target index"), a3, a4, a5, a6, a7, a8, (uint64_t)"renderTargetIndex < states->_targetCount");
  return *(_QWORD *)(a1 + 8 * a2 + 16);
}

uint64_t sub_1B18A79E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"states");
  return *(unsigned __int8 *)(a1 + 56);
}

uint64_t sub_1B18A7A2C()
{
  if (qword_1EEF65FC0 != -1)
    dispatch_once(&qword_1EEF65FC0, &unk_1E63D0ED0);
  return qword_1EEF65FB8;
}

uint64_t sub_1B18A7A6C()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x1010001010001;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF65FB8 = result;
  return result;
}

uint64_t sub_1B18A7AA8()
{
  if (qword_1EEF65FD0 != -1)
    dispatch_once(&qword_1EEF65FD0, &unk_1E63D8208);
  return qword_1EEF65FC8;
}

uint64_t sub_1B18A7AE8()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x2000002000001;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF65FC8 = result;
  return result;
}

uint64_t sub_1B18A7B24()
{
  if (qword_1EEF65FE0 != -1)
    dispatch_once(&qword_1EEF65FE0, &unk_1E63D8248);
  return qword_1EEF65FD8;
}

uint64_t sub_1B18A7B64()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x10002000101;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF65FD8 = result;
  return result;
}

uint64_t sub_1B18A7BA0()
{
  if (qword_1EEF65FF0 != -1)
    dispatch_once(&qword_1EEF65FF0, &unk_1E63D16B0);
  return qword_1EEF65FE8;
}

uint64_t sub_1B18A7BE0()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x5010005010001;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF65FE8 = result;
  return result;
}

uint64_t sub_1B18A7C20()
{
  if (qword_1EEF66000 != -1)
    dispatch_once(&qword_1EEF66000, &unk_1E63D1810);
  return qword_1EEF65FF8;
}

uint64_t sub_1B18A7C60()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x10000010000;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF65FF8 = result;
  return result;
}

uint64_t sub_1B18A7C98()
{
  if (qword_1EEF66010 != -1)
    dispatch_once(&qword_1EEF66010, &unk_1E63D82C8);
  return qword_1EEF66008;
}

uint64_t sub_1B18A7CD8()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x1000201010101;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF66008 = result;
  return result;
}

uint64_t sub_1B18A7D14()
{
  if (qword_1EEF66020 != -1)
    dispatch_once(&qword_1EEF66020, &unk_1E63D19B0);
  return qword_1EEF66018;
}

uint64_t sub_1B18A7D54()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x401010401010001;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF66018 = result;
  return result;
}

uint64_t sub_1B18A7D94()
{
  if (qword_1EEF66030 != -1)
    dispatch_once(&qword_1EEF66030, &unk_1E63D8328);
  return qword_1EEF66028;
}

uint64_t sub_1B18A7DD4()
{
  uint64_t result;
  uint64_t v1;

  v1 = 0x5010003010101;
  result = sub_1B18A7830((uint64_t)&v1, 1);
  qword_1EEF66028 = result;
  return result;
}

__CFString *sub_1B18A7E20(uint64_t a1)
{
  __CFString *Mutable;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __CFString *v14;
  const char *v15;
  __CFString *v16;
  __CFString *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  __CFString *v22;
  __CFString *v23;
  __CFString *v24;
  __CFString *v25;
  __CFString *v26;
  const char *v28;
  __CFString *v29;
  __CFString *theString;
  uint64_t v31;
  const char *v32;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXBlendStates %p targetCount:%d needsBlendColor:%d\n"), a1, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    v9 = 0;
    v10 = (unsigned __int8 *)(a1 + 23);
    theString = Mutable;
    v31 = a1;
    do
    {
      v11 = *(v10 - 5);
      v12 = *(v10 - 4);
      v13 = *(v10 - 3);
      if ((*(v10 - 6) & 1) != 0)
      {
        v18 = *v10;
        v19 = *(v10 - 1);
        v20 = *(v10 - 2);
        v21 = "true";
        if ((*(v10 - 7) & 1) == 0)
          v21 = "false";
        v32 = v21;
        if (v11 >= 0xF)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend mode"), v3, v4, v5, v6, v7, v8, (uint64_t)"blend < kCFXBlendFactorCount");
        v22 = off_1E63D8128[v11];
        if (v13 >= 5)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend operation"), v3, v4, v5, v6, v7, v8, (uint64_t)"blendOp < kCFXBlendOpCount");
        v23 = off_1E63D81A0[v13];
        if (v12 >= 0xF)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend mode"), v3, v4, v5, v6, v7, v8, (uint64_t)"blend < kCFXBlendFactorCount");
        v24 = off_1E63D8128[v12];
        if (v20 >= 0xF)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend mode"), v3, v4, v5, v6, v7, v8, (uint64_t)"blend < kCFXBlendFactorCount");
        v25 = off_1E63D8128[v20];
        if (v18 >= 5)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend operation"), v3, v4, v5, v6, v7, v8, (uint64_t)"blendOp < kCFXBlendOpCount");
        v26 = off_1E63D81A0[v18];
        if (v19 >= 0xF)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend mode"), v3, v4, v5, v6, v7, v8, (uint64_t)"blend < kCFXBlendFactorCount");
        v29 = v25;
        Mutable = theString;
        CFStringAppendFormat(theString, 0, CFSTR("  blend:%s col[(src * %@) %@ (dst * %@)] alpha[(src * %@) %@ (dst * %@)]\n"), v32, v22, v23, v24, v29, v26, off_1E63D8128[v19]);
        a1 = v31;
      }
      else
      {
        v14 = Mutable;
        if ((*(v10 - 7) & 1) != 0)
          v15 = "true";
        else
          v15 = "false";
        if (v11 >= 0xF)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend mode"), v3, v4, v5, v6, v7, v8, (uint64_t)"blend < kCFXBlendFactorCount");
        v16 = off_1E63D8128[v11];
        if (v13 >= 5)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend operation"), v3, v4, v5, v6, v7, v8, (uint64_t)"blendOp < kCFXBlendOpCount");
        v17 = off_1E63D81A0[v13];
        if (v12 >= 0xF)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. bad blend mode"), v3, v4, v5, v6, v7, v8, (uint64_t)"blend < kCFXBlendFactorCount");
        v28 = v15;
        Mutable = v14;
        CFStringAppendFormat(v14, 0, CFSTR("  blend:%s col[(src * %@) %@ (dst * %@)]\n"), v28, v16, v17, off_1E63D8128[v12]);
      }
      ++v9;
      v10 += 8;
    }
    while (v9 < *(_QWORD *)(a1 + 48));
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

void sub_1B18A8394(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B18A83A8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFDictionary *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v8 = a3;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v18 = sub_1B1813884((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v8 || (v8 = (uint64_t)sub_1B1814768(a2, v11, v12, v13, v14, v15, v16, v17)) != 0)
  {
    v19 = sub_1B186CFA8(v8, v11, v12, v13, v14, v15, v16, v17);
    if (v19)
    {
      v27 = (uint64_t)v19;
      v28 = sub_1B1814C44((uint64_t)a2, v20, v21, v22, v23, v24, v25, v26);
      *(_BYTE *)a1 = sub_1B1865A88(v27, v29, v30, v31, v32, v33, v34, v35);
      v43 = sub_1B187B5FC(v18, v36, v37, v38, v39, v40, v41, v42);
      if (v28 == 3)
        v51 = 0;
      else
        v51 = v43;
      if (v28 == 1)
        v51 = 0;
      *(_BYTE *)(a1 + 2) = v51;
      *(_BYTE *)(a1 + 3) = sub_1B186503C(v27, v44, v45, v46, v47, v48, v49, v50);
      *(_BYTE *)(a1 + 4) = sub_1B18652E8(v27, v52, v53, v54, v55, v56, v57, v58);
      *(_BYTE *)(a1 + 5) = sub_1B18650B8(v27, v59, v60, v61, v62, v63, v64, v65);
      *(_BYTE *)(a1 + 1) = sub_1B18651D0(v27, v66, v67, v68, v69, v70, v71, v72);
      *(_BYTE *)(a1 + 6) = sub_1B1865584(v27, v73, v74, v75, v76, v77, v78, v79);
      *(_BYTE *)(a1 + 7) = sub_1B186569C(v27, v80, v81, v82, v83, v84, v85, v86);
      *(_QWORD *)(a1 + 16) = v8;
    }
  }
  return a1;
}

uint64_t sub_1B18A849C(uint64_t a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  BOOL v30;
  BOOL v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  BOOL v72;
  char v73;
  char v75;
  unsigned __int8 v76;
  char v77;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  v10 = (const void *)*((_QWORD *)a3 + 2);
  if (v10 || (v10 = sub_1B1814768(a2, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8)) != 0)
  {
    v11 = sub_1B186CFA8((uint64_t)v10, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (v11)
    {
      v19 = (uint64_t)v11;
      v20 = *a3;
      if (*a3)
        v21 = sub_1B1865144((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
      else
        v21 = 0;
      if (sub_1B186548C(v19, v12, v13, v14, v15, v16, v17, v18))
        v29 = sub_1B186473C(v19, v22, v23, v24, v25, v26, v27, v28) != 0;
      else
        v29 = 0;
      if (v20)
        v30 = v29;
      else
        v30 = 0;
      if (a3[1])
        v31 = a3[7] == 0;
      else
        v31 = 0;
      v32 = a3[3];
      v33 = sub_1B1865374(v19, v22, v23, v24, v25, v26, v27, v28);
      v41 = sub_1B186525C(v19, v34, v35, v36, v37, v38, v39, v40);
      v75 = sub_1B1865400(v19, v42, v43, v44, v45, v46, v47, v48);
      v76 = v32;
      v77 = v33;
      if (sub_1B18652E8(v19, v49, v50, v51, v52, v53, v54, v55))
        v63 = a3[7] == 0;
      else
        v63 = 0;
      v71 = v41;
      v72 = (sub_1B1865508(v19, v56, v57, v58, v59, v60, v61, v62) & 1) != 0
         || sub_1B1864B3C(v19, v64, v65, v66, v67, v68, v69, v70) != 0;
      v73 = sub_1B186569C(v19, v64, v65, v66, v67, v68, v69, v70);
      *(_BYTE *)a1 = v20;
      *(_BYTE *)(a1 + 1) = v21;
      *(_BYTE *)(a1 + 2) = v30;
      *(_BYTE *)(a1 + 3) = v31;
      *(_BYTE *)(a1 + 4) = a3[5];
      *(_BYTE *)(a1 + 5) = v76;
      *(_BYTE *)(a1 + 6) = v63;
      *(_BYTE *)(a1 + 7) = v77;
      *(_BYTE *)(a1 + 8) = v72;
      *(_BYTE *)(a1 + 9) = v71;
      *(_BYTE *)(a1 + 10) = v75;
      *(_BYTE *)(a1 + 11) = v73;
      *(_QWORD *)(a1 + 16) = v19;
    }
  }
  return a1;
}

BOOL sub_1B18A863C(_BYTE *a1)
{
  return *a1 || a1[1] || a1[2] || a1[3] || a1[5] || a1[7] || a1[8] || a1[9] || a1[10] || a1[6] || a1[11] != 0;
}

void sub_1B18A86A4(uint64_t *a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  const __CFDictionary *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  float v30;
  uint64_t v31;
  float v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  float v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  float v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __n128 *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int32x2_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  int32x2_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  float32x4_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int32x2_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char v185;
  float32x4_t v186;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  float v201;
  double v202;
  float v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  float v211;
  BOOL v212;
  int32x2_t v213;
  float v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float32x2_t v222;
  float32x2_t v223;
  __int128 v224;
  char v225;
  float v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  float v234;
  float v235;
  float v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  float v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float v249;
  int32x2_t v250;
  int32x2_t v251;
  _OWORD v252[6];
  int v253;

  v19 = (void *)sub_1B1813BC4((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v20 = *(const void **)(a2 + 16);
  if (v20 || (v20 = sub_1B1814768(a1, v12, v13, v14, v15, v16, v17, v18)) != 0)
  {
    v21 = sub_1B186CFA8((uint64_t)v20, v12, v13, v14, v15, v16, v17, v18);
    if (v21)
    {
      v29 = (uint64_t)v21;
      v251 = *(int32x2_t *)(a2 + 8);
      *(_OWORD *)(a4 + 224) = 0u;
      *(_OWORD *)(a4 + 240) = 0u;
      *(_OWORD *)(a4 + 192) = 0u;
      *(_OWORD *)(a4 + 208) = 0u;
      *(_OWORD *)(a4 + 160) = 0u;
      *(_OWORD *)(a4 + 176) = 0u;
      *(_OWORD *)(a4 + 128) = 0u;
      *(_OWORD *)(a4 + 144) = 0u;
      *(_OWORD *)(a4 + 96) = 0u;
      *(_OWORD *)(a4 + 112) = 0u;
      *(_OWORD *)(a4 + 64) = 0u;
      *(_OWORD *)(a4 + 80) = 0u;
      *(_OWORD *)(a4 + 32) = 0u;
      *(_OWORD *)(a4 + 48) = 0u;
      *(_OWORD *)a4 = 0u;
      *(_OWORD *)(a4 + 16) = 0u;
      v30 = 1.0;
      if (a3[1])
      {
        v31 = sub_1B186463C((uint64_t)v21, v22, v23, v24, v25, v26, v27, v28);
        if (v31)
        {
          v32 = sub_1B18E8CD4(v31, v22, v23, v24, v25, v26, v27, v28);
          v30 = exp2f(v32);
        }
      }
      *(float *)(a4 + 28) = v30;
      if ((sub_1B186548C(v29, v22, v23, v24, v25, v26, v27, v28) & 1) != 0
        && (v40 = sub_1B186473C(v29, v33, v34, v35, v36, v37, v38, v39)) != 0
        && a3[2])
      {
        sub_1B18EA0D4(v40, v41, v42, v43, v44, v45, v46, (uint64_t)v252);
      }
      else
      {
        sub_1B18EA0A0((uint64_t)v252);
      }
      v54 = v252[2];
      *(_OWORD *)(a4 + 196) = v252[3];
      v55 = v252[5];
      *(_OWORD *)(a4 + 212) = v252[4];
      *(_OWORD *)(a4 + 228) = v55;
      *(_DWORD *)(a4 + 244) = v253;
      v56 = v252[1];
      *(_OWORD *)(a4 + 148) = v252[0];
      *(_OWORD *)(a4 + 164) = v56;
      *(_OWORD *)(a4 + 180) = v54;
      v57 = sub_1B186483C(v29, v47, v48, v49, v50, v51, v52, v53);
      if (v57)
        v65 = sub_1B18E8CD4(v57, v58, v59, v60, v61, v62, v63, v64);
      else
        v65 = 0.0;
      *(float *)a4 = v65;
      if (a3[9] && (v66 = sub_1B186493C(v29, v58, v59, v60, v61, v62, v63, v64)) != 0)
      {
        v67 = v66;
        *(float *)(a4 + 4) = fminf(fmaxf(sub_1B18E8CD4(v66, v58, v59, v60, v61, v62, v63, v64), 0.0), 1.0);
        v68 = vdiv_f32((float32x2_t)vdup_lane_s32(v251, 1), (float32x2_t)v251).f32[0];
        *(float *)(a4 + 16) = v68
                            + (float)(fminf(fmaxf(sub_1B18E91D8(v67, v69, v70, v71, v72, v73, v74, v75), 0.0), 1.0)
                                    * (float)(1.0 - v68));
        *(float *)(a4 + 8) = fminf(fmaxf(1.0 - sub_1B18E9308(v67, v76, v77, v78, v79, v80, v81, v82), 0.0), 1.0);
        v90 = sub_1B18E95E4(v67, v83, v84, v85, v86, v87, v88, v89);
      }
      else
      {
        *(_DWORD *)(a4 + 16) = 1065353216;
        *(_DWORD *)(a4 + 4) = 0;
        *(_DWORD *)(a4 + 8) = 0;
        v90 = 0.0;
      }
      *(float *)(a4 + 12) = v90;
      if (a3[7] && (v91 = sub_1B1864C3C(v29, v58, v59, v60, v61, v62, v63, v64)) != 0)
      {
        v92 = v91;
        *(float *)(a4 + 20) = sub_1B18E91D8(v91, v58, v59, v60, v61, v62, v63, v64);
        v100 = sub_1B18E8CD4(v92, v93, v94, v95, v96, v97, v98, v99);
      }
      else
      {
        *(_DWORD *)(a4 + 20) = 0;
        v100 = 0.0;
      }
      *(float *)(a4 + 24) = v100;
      if (sub_1B1865508(v29, v58, v59, v60, v61, v62, v63, v64)
        && (v108 = sub_1B1864B3C(v29, (uint64_t)v101, v102, v103, v104, v105, v106, v107)) != 0)
      {
        v109 = (__n128 *)v108;
        *(float *)(a4 + 32) = fminf(fmaxf(sub_1B18E8CD4(v108, (uint64_t)v101, v102, v103, v104, v105, v106, v107), 0.00000011921), 2.0);
        *(float *)(a4 + 36) = fminf(fmaxf(sub_1B18E91D8((uint64_t)v109, v110, v111, v112, v113, v114, v115, v116), 0.00000011921), 2.0);
        *(float *)v124.i32 = sub_1B18EA708((uint64_t)v109, v117, v118, v119, v120, v121, v122, v123);
        v246 = vaddq_f32((float32x4_t)sub_1B18EA670(v109, v125, v126, v127, v128, v129, v130, v131), (float32x4_t)vdupq_lane_s32(v124, 0));
        v139 = vmulq_f32((float32x4_t)sub_1B18EA670(v109, v132, v133, v134, v135, v136, v137, v138), (float32x4_t)xmmword_1B2247910);
        *(float32x4_t *)(a4 + 64) = vsubq_f32(v246, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2), vaddq_f32(v139, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.f32, 1))), 0));
        *(float *)v147.i32 = sub_1B18EAC04((uint64_t)v109, v140, v141, v142, v143, v144, v145, v146) + 1.0;
        v247 = vaddq_f32((float32x4_t)sub_1B18EAB6C(v109, v148, v149, v150, v151, v152, v153, v154), (float32x4_t)vdupq_lane_s32(v147, 0));
        v162 = vmulq_f32((float32x4_t)sub_1B18EAB6C(v109, v155, v156, v157, v158, v159, v160, v161), (float32x4_t)xmmword_1B2247910);
        *(float32x4_t *)(a4 + 80) = vsubq_f32(v247, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v162, 2), vaddq_f32(v162, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v162.f32, 1))), 0));
        *(float *)v170.i32 = sub_1B18EAD38((uint64_t)v109, v163, v164, v165, v166, v167, v168, v169) + 1.0;
        v248 = vaddq_f32((float32x4_t)sub_1B18EACA0(v109, v171, v172, v173, v174, v175, v176, v177), (float32x4_t)vdupq_lane_s32(v170, 0));
        v185 = 0;
        v186 = vmulq_f32((float32x4_t)sub_1B18EACA0(v109, v178, v179, v180, v181, v182, v183, v184), (float32x4_t)xmmword_1B2247910);
        *(float32x4_t *)(a4 + 96) = vsubq_f32(v248, (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v186, 2), vaddq_f32(v186, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 1))), 0));
      }
      else
      {
        v109 = 0;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)(a4 + 32) = _D0;
        __asm { FMOV            V1.4S, #1.0 }
        *(_OWORD *)(a4 + 64) = 0u;
        *(_OWORD *)(a4 + 80) = _Q1;
        *(_OWORD *)(a4 + 96) = _Q1;
        v185 = 1;
      }
      if (a3[10])
        v193 = sub_1B186453C(v29, (uint64_t)v101, v102, v103, v104, v105, v106, v107);
      else
        v193 = 0;
      objc_msgSend_renderTime(v19, v101, v102, v103);
      v202 = 30.0;
      v203 = floor(v201 * 30.0);
      if (v193)
      {
        *(float *)v213.i32 = sub_1B18E91D8(v193, v194, v195, v196, v197, v198, v199, v200);
        v211 = 0.0039062 / *(float *)v213.i32;
        v212 = *(float *)v213.i32 <= 0.0039062;
        v213.i32[0] = 1.0;
        if (!v212)
          *(float *)v213.i32 = v211;
        v250 = v213;
        v214 = sub_1B18E8CD4(v193, v204, v205, v206, v207, v208, v209, v210);
      }
      else
      {
        v214 = 0.0;
        LODWORD(v202) = 998244352;
        v250 = *(int32x2_t *)&v202;
      }
      *(float *)(a4 + 112) = v214;
      v249 = sinf((float)(v203 * 0.1) + 0.05);
      v222.f32[0] = sinf(v203 * 0.01);
      v222.f32[1] = v249;
      v223 = vmul_f32(v222, (float32x2_t)vdup_n_s32(0x45849000u));
      *(int32x2_t *)&v224 = vdup_lane_s32(v250, 0);
      *((float32x2_t *)&v224 + 1) = vminnm_f32(vsub_f32(v223, vrndm_f32(v223)), (float32x2_t)vdup_n_s32(0x3F7FFFFFu));
      *(_OWORD *)(a4 + 128) = v224;
      if (v193)
        v225 = sub_1B18E9274(v193, v215, v216, v217, v218, v219, v220, v221);
      else
        v225 = 0;
      *(_BYTE *)(a4 + 116) = v225;
      if ((v185 & 1) == 0
        && (sub_1B18E9308((uint64_t)v109, v215, v216, v217, v218, v219, v220, v221) != 0.0
         || sub_1B18E95E4((uint64_t)v109, v215, v216, v217, v218, v219, v220, v221) != 0.0))
      {
        v226 = sub_1B18E9308((uint64_t)v109, v215, v216, v217, v218, v219, v220, v221) * -0.1 + 0.31271;
        v234 = v226 * -3.0 * v226
             + v226 * 2.87
             + -0.275
             + sub_1B18E95E4((uint64_t)v109, v227, v228, v229, v230, v231, v232, v233) * 0.1;
        v235 = v226 / v234;
        v236 = (1.0 - v226 - v234) / v234;
        *(float32x4_t *)(a4 + 48) = vdivq_f32((float32x4_t)xmmword_1B2247950, vmlaq_n_f32(vaddq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2247920, v235), (float32x4_t)xmmword_1B2247930), (float32x4_t)xmmword_1B2247940, v236));
        *(_BYTE *)(a4 + 40) = 1;
      }
      if (a3[6])
      {
        v244 = sub_1B1864A3C(v29, v215, v216, v217, v218, v219, v220, v221);
        if (!v244)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v238, v239, v240, v241, v242, v243, (uint64_t)"lensBlur");
        v245 = sub_1B18E8CD4(v244, v237, v238, v239, v240, v241, v242, v243) * 0.01 * *(float *)&v251.i32[1];
        *(float *)(a4 + 144) = v245;
      }
    }
  }
}

uint64_t sub_1B18A8CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  float v13;
  CFX::RG::Resource *v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[10];
  float v20[40];

  v8 = &qword_1EEF66000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF66040);
  if ((v9 & 1) == 0)
  {
    v17 = a2;
    v18 = a3;
    v16 = __cxa_guard_acquire(&qword_1EEF66040);
    v8 = &qword_1EEF66000;
    a2 = v17;
    a3 = v18;
    if (v16)
    {
      byte_1EEF66038 = 1;
      __cxa_guard_release(&qword_1EEF66040);
      v8 = &qword_1EEF66000;
      a2 = v17;
      a3 = v18;
    }
  }
  if (*((_BYTE *)v8 + 56))
    v10 = 0x8D0488668FE8A629;
  else
    v10 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v10, 0);
  *(_QWORD *)a1 = &off_1E63CE8A0;
  v11 = *(_OWORD *)(a5 + 40);
  v12 = *(_OWORD *)(a5 + 56);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(a1 + 400) = v11;
  *(_OWORD *)(a1 + 416) = v12;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  CFX::RG::TextureDescriptorReference::finalColor((uint64_t)v19);
  v13 = sub_1B1815CC0(*(_QWORD *)(a1 + 368));
  CFX::RG::TextureDescriptorReference::withSizeFactor(v19, v13, v20);
  v14 = sub_1B17A34D0(a4, (uint64_t)"COMPOSITING OUTPUT", v20);
  *(_QWORD *)(a1 + 472) = v14;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v14, 0x100000000, 0);
  return a1;
}

void sub_1B18A8DC8(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B18A8DE0(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  const char *v59;
  const char *v60;
  const char *v61;
  const char *v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  _OWORD v87[6];
  uint64_t v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  id v101;
  uint64_t v102;
  const __CFString *v103;
  __int128 v104;
  uint64_t v105;
  _BYTE v106[9];

  prof_beginFlame((uint64_t)"Composite", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/CompositePass.mm", 252);
  v83 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v3, v4, v5, v6, v7, v8, v9);
  v82 = (void *)objc_msgSend_resourceManager(v83, v10, v11, v12);
  v13 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v14 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 472));
  v85 = *(unsigned __int8 *)(v14 + 9);
  v84 = *(_QWORD *)(v14 + 16);
  v15 = *(unsigned __int8 *)(a1 + 413);
  v16 = *(unsigned __int8 *)(a1 + 411);
  v17 = *(unsigned __int8 *)(a1 + 414);
  v18 = *(unsigned __int8 *)(a1 + 415);
  v19 = *(unsigned __int8 *)(a1 + 417);
  v20 = *(unsigned __int8 *)(a1 + 418);
  v21 = *(unsigned __int8 *)(a1 + 416);
  v22 = *(_QWORD *)(a1 + 424);
  if ((sub_1B186548C(v22, v23, v24, v25, v26, v27, v28, v29) & 1) != 0
    && (v37 = sub_1B186473C(v22, v30, v31, v32, v33, v34, v35, v36)) != 0)
  {
    v45 = sub_1B18E9B68(v37, v38, v39, v40, v41, v42, v43, v44);
  }
  else
  {
    v45 = 2;
  }
  v46 = 0x9DDFEA08EB382D69
      * (v13 ^ ((0x9DDFEA08EB382D69 * (v84 ^ v13)) >> 47) ^ (0x9DDFEA08EB382D69 * (v84 ^ v13)));
  v47 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47))) ^ v85)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v46 ^ (v46 >> 47))) ^ v85)));
  v48 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47))) ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v47 ^ (v47 >> 47))) ^ v15)));
  v49 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v48 ^ (v48 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v48 ^ (v48 >> 47))) ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v48 ^ (v48 >> 47))) ^ v16)));
  v50 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v49 ^ (v49 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v49 ^ (v49 >> 47))) ^ v17)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v49 ^ (v49 >> 47))) ^ v17)));
  v51 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47))) ^ v18)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v50 ^ (v50 >> 47))) ^ v18)));
  v52 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47))) ^ v19)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v51 ^ (v51 >> 47))) ^ v19)));
  v53 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v52 ^ (v52 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v52 ^ (v52 >> 47))) ^ v20)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v52 ^ (v52 >> 47))) ^ v20)));
  v54 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v53 ^ (v53 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                        * ((0x9DDFEA08EB382D69 * (v53 ^ (v53 >> 47))) ^ v21)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v53 ^ (v53 >> 47))) ^ v21)));
  v55 = 0x9DDFEA08EB382D69 * (v54 ^ (v54 >> 47));
  v106[0] = v45;
  v56 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v55 ^ ((0x9DDFEA08EB382D69 * (v55 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v55 ^ v45)))) ^ ((0x9DDFEA08EB382D69 * (v55 ^ ((0x9DDFEA08EB382D69 * (v55 ^ v45)) >> 47) ^ (0x9DDFEA08EB382D69 * (v55 ^ v45)))) >> 47));
  v57 = CFX::CrossFrameResourceManager::get(a2[4], v56);
  *(_QWORD *)(a1 + 432) = v57;
  if (!v57)
  {
    *(_QWORD *)(a1 + 432) = sub_1B18A91B8(a2[4], v56);
    v58 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v59, a1 + 413, 53, 0);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v60, a1 + 411, 53, 1);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v61, a1 + 414, 53, 2);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v62, a1 + 415, 53, 3);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v63, a1 + 417, 53, 4);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v64, a1 + 418, 53, 5);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v65, a1 + 416, 53, 6);
    objc_msgSend_setConstantValue_type_atIndex_(v58, v66, (uint64_t)v106, 49, 7);
    v67 = *(_QWORD *)(a1 + 432);
    memset(v87, 0, sizeof(v87));
    v88 = 0;
    v90 = 0u;
    v91 = 0u;
    v92 = 0u;
    v93 = 0u;
    v94 = 0u;
    v95 = 0u;
    v96 = 0u;
    v97 = 0u;
    v98 = 0u;
    v99 = 0u;
    v100 = 0;
    v102 = 0;
    v104 = 0u;
    v105 = 0;
    v68 = (void *)sub_1B18FD768((uint64_t)v82);
    v89 = objc_msgSend_frameworkLibrary(v68, v69, v70, v71);
    *(_QWORD *)&v90 = v84;
    LOBYTE(v95) = v85;
    v101 = v58;
    v103 = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v104 = CFSTR("vfx_post_process");
    v74 = objc_msgSend_newRenderPipelineStateWithDesc_(v82, v72, (uint64_t)v87, v73);
    v75 = *(void **)(v67 + 16);
    if (v75 != (void *)v74)
    {
      if (v75)

      *(_QWORD *)(v67 + 16) = v74;
    }

  }
  v76 = sub_1B1792C8C(v83, a2[4]);
  v77 = *(_QWORD *)(a1 + 432);
  *(_QWORD *)(v77 + 24) = v76;
  sub_1B18A86A4(*(uint64_t **)(a1 + 368), a1 + 384, (_BYTE *)(a1 + 408), v77 + 32, v78, v79, v80, v81);
  prof_endFlame();
}

void sub_1B18A9190(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

_OWORD *sub_1B18A91B8(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _OWORD *v4;

  v4 = (_OWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_OWORD *)operator new();
    *v4 = 0u;
    v4[1] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[6] = 0u;
    v4[7] = 0u;
    v4[8] = 0u;
    v4[9] = 0u;
    v4[10] = 0u;
    v4[11] = 0u;
    v4[12] = 0u;
    v4[13] = 0u;
    v4[14] = 0u;
    v4[15] = 0u;
    v4[16] = 0u;
    v4[17] = 0u;
    *(_QWORD *)v4 = &off_1E63CE880;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B18A9250(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  id Texture;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  const void *v37;
  const char *v38;
  const char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;

  prof_beginFlame((uint64_t)"Composite", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/CompositePass.mm", 309);
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v4, v5, v6, v7, v8, v9, v10);
  v22 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v23 = *(_QWORD *)(a1 + 432);
  v24 = *(void **)(v23 + 16);
  if (!v24)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v16, v17, v18, v19, v20, v21, (uint64_t)"_ptr != NULL");
    v24 = *(void **)(v23 + 16);
  }
  v25 = objc_msgSend_state(v24, v15, v16, v17);
  objc_msgSend_setRenderPipelineState_(*(void **)(v22 + 16), v26, v25, v27);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 440));
  sub_1B179AEE4(v22, Texture, 0, v29);
  sub_1B179AEE4(v22, *(void **)(*(_QWORD *)(a1 + 432) + 24), 3, v30);
  if (*(_BYTE *)(a1 + 413))
  {
    v31 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 448));
    sub_1B179AEE4(v22, v31, 2, v32);
  }
  if (*(_BYTE *)(a1 + 411))
  {
    v33 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 456));
    sub_1B179AEE4(v22, v33, 1, v34);
  }
  if (*(_BYTE *)(a1 + 414))
  {
    v35 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 464));
    sub_1B179AEE4(v22, v35, 4, v36);
  }
  v37 = (const void *)(*(_QWORD *)(a1 + 432) + 32);
  v40 = 0;
  v41 = 0;
  v42 = 0;
  sub_1B1868D14(*(_QWORD *)(v22 + 24), v37, 0x100uLL, &v40);
  objc_msgSend_setFragmentBuffer_offset_atIndex_(*(void **)(v22 + 16), v38, v41, v42, 0);
  sub_1B179AF64(v22, v39);
  prof_endFlame();
}

void sub_1B18A93BC(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t *sub_1B18A93E0(uint64_t *this, CFX::RG::Resource *a2)
{
  this[55] = (uint64_t)a2;
  return CFX::RG::Pass::readFrom(this, a2);
}

uint64_t *sub_1B18A93E8(uint64_t *this, CFX::RG::Resource *a2)
{
  this[56] = (uint64_t)a2;
  return CFX::RG::Pass::readFrom(this, a2);
}

uint64_t *sub_1B18A93F0(uint64_t *this, CFX::RG::Resource *a2)
{
  this[57] = (uint64_t)a2;
  return CFX::RG::Pass::readFrom(this, a2);
}

uint64_t *sub_1B18A93F8(uint64_t *this, CFX::RG::Resource *a2)
{
  this[58] = (uint64_t)a2;
  return CFX::RG::Pass::readFrom(this, a2);
}

uint64_t sub_1B18A9400(uint64_t *a1, uint64_t *a2, __int128 *a3, __int128 *a4)
{
  uint64_t v4;
  _QWORD v6[2];
  __int16 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  v4 = *a2;
  v6[0] = "Composite";
  v6[1] = v4;
  v7 = 0;
  v8 = *a3;
  v9 = *((_QWORD *)a3 + 2);
  v10 = *a4;
  v11 = *((_QWORD *)a4 + 2);
  return sub_1B18A9458(a1, a1, (uint64_t)v6);
}

uint64_t sub_1B18A9458(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18A9554(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B18A94B0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B18A94D4(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CE880;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B18A950C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CE880;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B18A9554(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1E0u, 8u);
  return sub_1B18A8CA4(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B18A96F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  void *v21;
  void *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  id obj;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[128];
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v4 = (void *)objc_msgSend_model(a2, (const char *)a2, a3, a4);
  obj = (id)objc_msgSend_materials(v4, v5, v6, v7);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v8, (uint64_t)&v33, (uint64_t)v38, 16);
  v28 = result;
  if (result)
  {
    v27 = *(_QWORD *)v34;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v34 != v27)
          objc_enumerationMutation(obj);
        v14 = *(void **)(*((_QWORD *)&v33 + 1) + 8 * v13);
        v29 = 0u;
        v30 = 0u;
        v31 = 0u;
        v32 = 0u;
        v15 = (void *)objc_msgSend_properties(v14, v10, v11, v12);
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v16, (uint64_t)&v29, (uint64_t)v37, 16);
        if (v17)
        {
          v18 = v17;
          v19 = *(_QWORD *)v30;
          do
          {
            for (i = 0; i != v18; ++i)
            {
              if (*(_QWORD *)v30 != v19)
                objc_enumerationMutation(v15);
              v21 = *(void **)(*((_QWORD *)&v29 + 1) + 8 * i);
              v22 = (void *)objc_msgSend_contents(v21, v10, v11, v12);
              objc_opt_class();
              if ((objc_opt_isKindOfClass() & 1) != 0 && (objc_opt_respondsToSelector() & 1) != 0)
              {
                v23 = objc_msgSend_filename(v22, v10, v11, v12);
                objc_msgSend_setContents_(v21, v24, v23, v25);
              }
            }
            v18 = objc_msgSend_countByEnumeratingWithState_objects_count_(v15, v10, (uint64_t)&v29, (uint64_t)v37, 16);
          }
          while (v18);
        }
        ++v13;
      }
      while (v13 != v28);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v33, (uint64_t)v38, 16);
      v28 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B18A9B9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B18A9BB4(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1B18A9BC4(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1B18A9BD0(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend_camera(a2, (const char *)a2, (uint64_t)a3, a4);
  if (result == *(_QWORD *)(a1 + 32))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = a2;
    *a3 = 1;
  }
  return result;
}

unint64_t sub_1B18A9C88(void *a1)
{
  uint64_t v2;
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  uint64_t v11;

  v2 = sub_1B189D230(0);
  objc_msgSend_setPixelFormat_(a1, v3, v2, v4);
  objc_msgSend_setFramebufferOnly_(a1, v5, 1, v6);
  result = objc_msgSend_maximumDrawableCount(a1, v7, v8, v9);
  if (result >= 3)
    return MEMORY[0x1E0DE7D20](a1, sel_setFenceEnabled_, 1, v11);
  return result;
}

uint64_t sub_1B18A9DB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char v32;
  char v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;

  objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 448), a2, a3, a4);
  v5 = *(unsigned __int8 *)(a1 + 40);
  v9 = (void *)objc_msgSend__renderContextMetal(*(void **)(*(_QWORD *)(a1 + 32) + 448), v6, v7, v8);
  objc_msgSend_setIsOpaque_(v9, v10, v5, v11);
  v15 = *(_BYTE *)(a1 + 41) || objc_msgSend_wantsExtendedDynamicRange(*(void **)(a1 + 32), v12, v13, v14);
  v16 = objc_msgSend_antialiasingMode(*(void **)(*(_QWORD *)(a1 + 32) + 448), v12, v13, v14);
  v17 = *(unsigned __int8 *)(a1 + 40);
  v18 = *(unsigned __int8 *)(a1 + 41);
  v22 = (void *)objc_msgSend__renderContextMetal(*(void **)(*(_QWORD *)(a1 + 32) + 448), v19, v20, v21);
  objc_msgSend_setWantsWideGamut_(v22, v23, v18, v24);
  objc_msgSend_colorSpace(*(void **)(a1 + 32), v25, v26, v27);
  v30 = *(_QWORD *)(a1 + 32);
  v31 = *(void **)(v30 + 488);
  if ((*(_BYTE *)(v30 + 433) & 0x10) == 0)
  {
    v32 = v15 | 8;
    if (!v16)
      v32 = v15;
    if (v17)
      v33 = v32;
    else
      v33 = v32 | 0x10;
    v34 = sub_1B189D230(v33);
    objc_msgSend_setPixelFormat_(v31, v35, v34, v36);
    v30 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend_setWantsExtendedDynamicRangeContent_(v31, v28, (*(unsigned __int8 *)(v30 + 432) >> 2) & 1, v29);
  return objc_msgSend_unlock(*(void **)(*(_QWORD *)(a1 + 32) + 448), v37, v38, v39);
}

uint64_t sub_1B18A9FA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 448), a2, a3, a4);
  v8 = objc_msgSend_colorSpace(*(void **)(a1 + 32), v5, v6, v7);
  v9 = *(_QWORD *)(a1 + 40);
  v13 = (void *)objc_msgSend_layer(*(void **)(a1 + 32), v10, v11, v12);
  objc_msgSend_setPixelFormat_(v13, v14, v9, v15);
  v19 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v19 + 433) & 0x20) != 0)
  {
    v20 = (void *)objc_msgSend_layer((void *)v19, v16, v17, v18);
    objc_msgSend_setColorspace_(v20, v21, v8, v22);
    v19 = *(_QWORD *)(a1 + 32);
  }
  objc_msgSend_unlock(*(void **)(v19 + 448), v16, v17, v18);
  return objc_msgSend__setNeedsDisplay(*(void **)(a1 + 32), v23, v24, v25);
}

uint64_t sub_1B18AA0C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  objc_msgSend_lock(*(void **)(*(_QWORD *)(a1 + 32) + 448), a2, a3, a4);
  objc_msgSend_setColorspace_(*(void **)(*(_QWORD *)(a1 + 32) + 488), v5, *(_QWORD *)(a1 + 40), v6);
  objc_msgSend_unlock(*(void **)(*(_QWORD *)(a1 + 32) + 448), v7, v8, v9);
  return objc_msgSend__setNeedsDisplay(*(void **)(a1 + 32), v10, v11, v12);
}

uint64_t sub_1B18AAAF4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__setNeedsDisplay(*(void **)(a1 + 32), a2, a3, a4);
}

uint64_t sub_1B18AAFB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__drawAtTime_(*(void **)(a1 + 32), a2, a3, a4, *(double *)(a1 + 40));
}

uint64_t sub_1B18ABF3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[4];
  __int128 v11;

  v5 = *(void **)(a1 + 32);
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1B18ABFA4;
  v10[3] = &unk_1E63D8108;
  v11 = *(_OWORD *)(a1 + 40);
  objc_msgSend_performAsCurrentTraitCollection_(v5, a2, (uint64_t)v10, a4);
  return objc_msgSend__setNeedsDisplay(*(void **)(a1 + 40), v6, v7, v8);
}

uint64_t sub_1B18ABFA4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_setBackgroundColor_(*(void **)(*(_QWORD *)(a1 + 32) + 448), a2, *(_QWORD *)(a1 + 40), a4);
}

uint64_t sub_1B18AC080(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[5];

  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 3221225472;
  v10[2] = sub_1B18AC100;
  v10[3] = &unk_1E63D6D80;
  v5 = *(void **)(a1 + 32);
  v10[4] = *(_QWORD *)(a1 + 40);
  objc_msgSend_performAsCurrentTraitCollection_(v5, a2, (uint64_t)v10, a4);
  *(_BYTE *)(*(_QWORD *)(a1 + 40) + 432) |= 0x40u;
  return objc_msgSend__setNeedsDisplay(*(void **)(a1 + 40), v6, v7, v8);
}

uint64_t sub_1B18AC100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 32) + 448), sel_resolvedBackgroundColorDidChange, a3, a4);
}

MTLCommandQueue *__cdecl sub_1B18AC198(VFXView *self, SEL a2)
{
  uint64_t v2;
  uint64_t v3;

  return (MTLCommandQueue *)objc_msgSend_commandQueue(self->_renderer, a2, v2, v3);
}

void sub_1B18AC400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  id *v14;

  objc_destroyWeak(v14);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1B18AC424(uint64_t a1, uint64_t a2)
{
  _QWORD v3[5];
  id v4;

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1B18AC4A4;
  v3[3] = &unk_1E63D8408;
  objc_copyWeak(&v4, (id *)(a1 + 32));
  v3[4] = a2;
  dispatch_async(MEMORY[0x1E0C80D38], v3);
  objc_destroyWeak(&v4);
}

id sub_1B18AC4A4(uint64_t a1)
{
  id result;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  result = objc_loadWeak((id *)(a1 + 40));
  if (result)
  {
    v7 = result;
    *(float *)&v6 = (float)*((uint64_t *)result + 60);
    objc_msgSend_setPreferredFrameRate_(*(void **)(a1 + 32), v3, v4, v5, v6);
    objc_msgSend_setDisplayLink_(v7, v8, *(_QWORD *)(a1 + 32), v9);
    return (id)objc_msgSend__setNeedsDisplay(v7, v10, v11, v12);
  }
  return result;
}

uint64_t sub_1B18AC734(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__setNeedsDisplay(*(void **)(a1 + 32), a2, a3, a4);
}

BOOL sub_1B18ACA60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_camera(a2, (const char *)a2, a3, a4) != 0;
}

void sub_1B18ACC20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

float sub_1B18ACC38(uint64_t a1)
{
  double Current;
  double v3;
  double v4;
  int v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  float result;

  Current = CFAbsoluteTimeGetCurrent();
  v3 = Current - Current;
  v4 = 0.0;
  if (Current - Current < *(double *)(a1 + 48))
  {
    v5 = 0;
    do
    {
      v6 = (void *)MEMORY[0x1B5E23520]();
      objc_msgSend__drawAtTime_(*(void **)(a1 + 32), v7, v8, v9, 0.0);
      objc_autoreleasePoolPop(v6);
      ++v5;
      v3 = CFAbsoluteTimeGetCurrent() - Current;
    }
    while (v3 < *(double *)(a1 + 48));
    v4 = (double)v5;
  }
  result = v4 / v3;
  *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t sub_1B18ACE74(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 432) |= 8u;
  return objc_msgSend__drawAtTime_(*(void **)(a1 + 32), a2, a3, a4, 0.0);
}

uint64_t sub_1B18AD904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  CFX::RG::Pass *v10;
  CFX::RG::Resource *v11;
  CFX::RG::Resource *v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[5];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _OWORD v27[5];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  char v39;
  __int128 v40;
  char v41;
  char v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v33 = a2;
  *((_QWORD *)&v33 + 1) = a3;
  v8 = atomic_load((unsigned __int8 *)&qword_1EEF66058);
  if ((v8 & 1) == 0)
  {
    v19 = a2;
    v20 = a3;
    v18 = __cxa_guard_acquire(&qword_1EEF66058);
    a2 = v19;
    a3 = v20;
    if (v18)
    {
      qword_1EEF66050 = (uint64_t)sub_1B18AE490("IRRADIANCE_PROBE_RENDER_CUBEMAP_PASS", 0x24u);
      __cxa_guard_release(&qword_1EEF66058);
      a2 = v19;
      a3 = v20;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, qword_1EEF66050, 0);
  *(_QWORD *)a1 = &off_1E63D02B8;
  v9 = *(_QWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a5 + 24);
  *(_WORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 416) = v9;
  *(_BYTE *)(CFX::RG::Pass::commonRenderParameters(v10) + 277) = 6;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v28 = 0u;
  RGTextureDescriptorMakeCube(*(_DWORD *)(a1 + 400), *(_QWORD *)(a1 + 408), (uint64_t)&v28);
  *((_QWORD *)&v30 + 1) = 5;
  v27[0] = v28;
  v27[1] = v29;
  v27[3] = v31;
  v27[4] = v32;
  v27[2] = v30;
  v11 = sub_1B179BD38(a4, (uint64_t)"IRRADIANCE_PROBE_CUBEMAP_COLOR_TARGET", (uint64_t)v27);
  *(_QWORD *)(a1 + 424) = v11;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v11, 0x100000002, 0);
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v22 = 0u;
  RGTextureDescriptorMakeCube(*(_DWORD *)(a1 + 400), 252, (uint64_t)&v22);
  *((_QWORD *)&v30 + 1) = 4;
  v21[2] = v24;
  v21[3] = v25;
  v21[4] = v26;
  v21[0] = v22;
  v21[1] = v23;
  v12 = sub_1B179BD38(a4, (uint64_t)"IRRADIANCE_PROBE_CUBEMAP_DEPTH_TARGET", (uint64_t)v21);
  *(_QWORD *)(a1 + 432) = v12;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v12, 0x200000002, -1);
  *(_QWORD *)&v34 = *(_QWORD *)(a1 + 368);
  LOBYTE(v38) = 0;
  v39 = 0;
  v36 = 0;
  v35 = 0uLL;
  v40 = xmmword_1B2245710;
  v41 = *(_BYTE *)(a1 + 376);
  v42 = 2;
  v43 = 4;
  v44 = 1;
  v45 = 1;
  *(_QWORD *)(a1 + 384) = sub_1B17CA2A0(v33, *((uint64_t *)&v33 + 1), (uint64_t *)&v33, (uint64_t *)&v34, &v35);
  *(_QWORD *)&v35 = 0;
  WORD4(v35) = 0;
  BYTE10(v35) = *(_BYTE *)(a1 + 377);
  v36 = 3;
  v37 = 0;
  v13 = atomic_load((unsigned __int8 *)&qword_1EEF66058);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_1EEF66058))
  {
    qword_1EEF66050 = (uint64_t)sub_1B18AE490("IRRADIANCE_PROBE_RENDER_CUBEMAP_PASS", 0x24u);
    __cxa_guard_release(&qword_1EEF66058);
  }
  v38 = qword_1EEF66050;
  v14 = *(_QWORD *)(a1 + 368);
  v34 = v33;
  v15 = sub_1B179C1C0(&v34, 0x40u, 8u);
  sub_1B182CDF0(v15, v14, (uint64_t)&v35, *(_QWORD *)(a1 + 384));
  *(_QWORD *)(a1 + 392) = v16;
  return a1;
}

void sub_1B18ADBE0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B18ADC04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(a1 + 416);
  v7 = *(_DWORD *)(a1 + 400);
  if (!*(_BYTE *)(v6 + 80))
    *(_BYTE *)(v6 + 80) = 1;
  *(_QWORD *)&v8 = 0;
  *((float *)&v8 + 2) = (float)v7;
  *((float *)&v8 + 3) = (float)v7;
  *(_OWORD *)(v6 + 64) = v8;
  sub_1B19610E0(*(__n128 **)(a1 + 384), (const char *)a2, a3, a4);
  sub_1B196142C(*(_QWORD *)(a1 + 384), v9, v10, v11, v12, v13, v14, v15);
  sub_1B1961820(*(_QWORD *)(a1 + 384));
  sub_1B196184C(*(_QWORD *)(a1 + 384), v16, v17, v18, v19, v20, v21, v22);
  sub_1B1961A30(*(uint64_t **)(a1 + 384), *(const char **)a2, *(_QWORD *)(a2 + 8), v23);
}

void sub_1B18ADC80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B182CE18(*(_QWORD *)(a1 + 392), a2, a3, a4);
}

void sub_1B18ADC88(uint64_t a1, const char *a2, uint64_t a3)
{
  sub_1B182D4E8(*(_QWORD *)(a1 + 392), a2, a3, *(unsigned __int8 *)(a3 + 17) | ((unint64_t)*(unsigned __int8 *)(a3 + 17) << 8));
}

uint64_t *sub_1B18ADC98(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFX::RG::Resource *Buffer_0;
  int v16;
  uint64_t v17;
  uint64_t v18;

  v8 = &qword_1EEF66000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF66068);
  if ((v9 & 1) == 0)
  {
    v17 = a2;
    v18 = a3;
    v16 = __cxa_guard_acquire(&qword_1EEF66068);
    v8 = &qword_1EEF66000;
    a2 = v17;
    a3 = v18;
    if (v16)
    {
      byte_1EEF66060 = 1;
      __cxa_guard_release(&qword_1EEF66068);
      v8 = &qword_1EEF66000;
      a2 = v17;
      a3 = v18;
    }
  }
  if (*((_BYTE *)v8 + 96))
    v10 = 0x64936801F5A4BA5BLL;
  else
    v10 = 0;
  sub_1B18F7354((uint64_t)a1, a2, a3, a5, v10, 0);
  *a1 = (uint64_t)&off_1E63CFED8;
  v11 = a5[2];
  a1[49] = 0;
  a1[50] = 0;
  a1[48] = v11;
  RGBufferDescriptorMake();
  Buffer_0 = RGBuilderCreateBuffer_0(a4, (uint64_t)"IRRADIANCE_SH", v12, v13);
  a1[50] = (uint64_t)Buffer_0;
  CFX::RG::Pass::writeTo(a1, Buffer_0);
  return a1;
}

void sub_1B18ADDA0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

CFX::RG::Resource *RGBuilderCreateBuffer_0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  CFX::RG::Resource *v7;
  char v9;
  uint64_t v10;
  uint64_t v11[2];

  v11[0] = a3;
  v11[1] = a4;
  v10 = a2;
  v5 = *a1;
  v6 = a1[1];
  v9 = 1;
  v7 = (CFX::RG::Resource *)sub_1B18AE6A8(v5, v6, &v10, v11, &v9);
  CFX::RG::RenderGraphBuilder::appendResource(a1, v7);
  return v7;
}

void sub_1B18ADE14(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ *(unsigned __int8 *)(a1 + 388));
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
  *(_QWORD *)(a1 + 376) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 376) = sub_1B18ADF60(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
    v15 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v8, v9, v10, v11, v12, v13, v14);
    v21 = (void *)objc_msgSend_resourceManager(v15, v16, v17, v18);
    if (*(_BYTE *)(a1 + 388))
      v22 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("compute_sh%d_from_cubemap_threadgroup_mem"), v20, *(unsigned int *)(a1 + 384));
    else
      v22 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("compute_sh%d_from_cubemap"), v20, *(unsigned int *)(a1 + 384));
    v25 = *(_QWORD *)(a1 + 376);
    v26 = objc_msgSend_newComputePipelineStateWithFunctionName_(v21, v23, v22, v24);
    v29 = *(void **)(v25 + 16);
    if (v29 != (void *)v26)
    {
      v30 = v26;
      if (v29)

      *(_QWORD *)(v25 + 16) = v30;
    }
    if (*(_BYTE *)(a1 + 388))
    {
      v31 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v27, (uint64_t)CFSTR("sum_sh%d"), v28, *(unsigned int *)(a1 + 384));
      v32 = *(_QWORD *)(a1 + 376);
      v35 = objc_msgSend_newComputePipelineStateWithFunctionName_(v21, v33, v31, v34);
      v36 = *(void **)(v32 + 24);
      if (v36 != (void *)v35)
      {
        v37 = v35;
        if (v36)

        *(_QWORD *)(v32 + 24) = v37;
      }
    }
  }
}

_QWORD *sub_1B18ADF60(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = &off_1E63CFEB8;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B18ADFD4(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id Texture;
  void *v14;
  unsigned int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  const char *v64;
  const char *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  int64x2_t v83;
  uint64_t v84;
  int64x2_t v85;
  uint64_t v86;
  uint64_t v87;
  int64x2_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v5 = *a3;
  CFX::GPUResourceManager::getBuffer(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400), &v91);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 392));
  if (*(_BYTE *)(a1 + 388))
  {
    v14 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), (uint64_t)v6, v7, v8, v9, v10, v11, v12);
    v15 = *(_DWORD *)(a1 + 384) * *(_DWORD *)(a1 + 384);
    v19 = (void *)objc_msgSend_device(v14, v16, v17, v18);
    v21 = (void *)objc_msgSend_newBufferWithLength_options_(v19, v20, 72 * v15, 32);
    objc_msgSend_setBuffer_offset_atIndex_(v5, v22, (uint64_t)v21, 0, 1);
    v29 = (16 * *(_DWORD *)(a1 + 384) * *(_DWORD *)(a1 + 384));
    v30 = *(_QWORD *)(a1 + 376);
    v31 = *(_QWORD *)(v30 + 16);
    if (!v31)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v23, v24, v25, v26, v27, v28, (uint64_t)"_ptr != NULL");
      v31 = *(_QWORD *)(v30 + 16);
    }
    v32 = (void *)sub_1B18FD774(v31);
    v36 = objc_msgSend_threadExecutionWidth(v32, v33, v34, v35);
    v38 = 0x7FFF / v29;
    if (v36 < v38)
      v38 = v36;
    if (v38 >= 0x40)
      v39 = 64;
    else
      v39 = v38;
    objc_msgSend_setThreadgroupMemoryLength_atIndex_(v5, v37, v39 * v29, 0);
    v46 = *(_QWORD *)(a1 + 376);
    v47 = *(_QWORD *)(v46 + 16);
    if (!v47)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v40, v41, v42, v43, v44, v45, (uint64_t)"_ptr != NULL");
      v47 = *(_QWORD *)(v46 + 16);
    }
    v48 = sub_1B18FD774(v47);
    objc_msgSend_setComputePipelineState_(v5, v49, v48, v50);
    objc_msgSend_setTexture_atIndex_(v5, v51, (uint64_t)Texture, 0);
    v89 = xmmword_1B2247980;
    v90 = 1;
    v87 = v39;
    v88 = vdupq_n_s64(1uLL);
    objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v5, v52, (uint64_t)&v89, (uint64_t)&v87);
    v59 = *(_QWORD *)(a1 + 376);
    v60 = *(_QWORD *)(v59 + 24);
    if (!v60)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v53, v54, v55, v56, v57, v58, (uint64_t)"_ptr != NULL");
      v60 = *(_QWORD *)(v59 + 24);
    }
    v61 = sub_1B18FD774(v60);
    objc_msgSend_setComputePipelineState_(v5, v62, v61, v63);
    objc_msgSend_setBuffer_offset_atIndex_(v5, v64, v91, v92, 0);
    v85 = vdupq_n_s64(1uLL);
    v86 = 1;
    v83 = v85;
    v84 = 1;
    objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v5, v65, (uint64_t)&v85, (uint64_t)&v83);

  }
  else
  {
    objc_msgSend_setBuffer_offset_atIndex_(v5, v6, v91, v92, 0);
    objc_msgSend_setTexture_atIndex_(v5, v66, (uint64_t)Texture, 0);
    v73 = *(_QWORD *)(a1 + 376);
    v74 = *(_QWORD *)(v73 + 16);
    if (!v74)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v67, v68, v69, v70, v71, v72, (uint64_t)"_ptr != NULL");
      v74 = *(_QWORD *)(v73 + 16);
    }
    v75 = sub_1B18FD774(v74);
    objc_msgSend_setComputePipelineState_(v5, v76, v75, v77);
    v82 = 1;
    v81 = xmmword_1B2247998;
    v80 = 1;
    v79 = xmmword_1B2247998;
    objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v5, v78, (uint64_t)&v81, (uint64_t)&v79);
  }
}

uint64_t sub_1B18AE274@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  CFX::RG::Resource *v23;
  uint64_t *v24;
  uint64_t v25[2];
  uint64_t v26;
  _QWORD v27[2];
  __int16 v28;
  int v29;
  uint64_t v30;
  uint64_t v31;

  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a9 = v12;
  *(_QWORD *)(a9 + 8) = 0;
  *(_QWORD *)(a9 + 16) = a9 + 24;
  result = sub_1B190D680(a1, v12, *(_QWORD *)a3, a4, a5, a6, a7, a8);
  v14 = *(_QWORD *)(a3 + 8);
  if (*(_DWORD *)(v14 + 8))
  {
    v15 = result;
    v16 = 0;
    do
    {
      v17 = *(_QWORD *)(*(_QWORD *)(v14 + 16) + 8 * v16);
      v24 = 0;
      v18 = *(_QWORD *)a3;
      v27[0] = "Irradiance probe render cubemap pass";
      v27[1] = v18;
      v28 = 0;
      v29 = 1024;
      v30 = 115;
      v31 = v17;
      v19 = (uint64_t *)sub_1B18AE548(a1, a1, (uint64_t)v27);
      v20 = v19;
      if (v15)
        CFX::RG::Pass::readFrom(v19, *(CFX::RG::Resource **)(v15 + 424));
      v21 = *(_QWORD *)a3;
      v25[0] = (uint64_t)"Irradiance probe compute sh pass";
      v25[1] = v21;
      v26 = 0x100000000;
      LODWORD(v26) = *(_DWORD *)(a3 + 16);
      v22 = (uint64_t *)sub_1B18AE59C(a1, a1, v25);
      v23 = (CFX::RG::Resource *)v20[53];
      v22[49] = (uint64_t)v23;
      CFX::RG::Pass::readFrom(v22, v23);
      v24 = v22;
      result = (uint64_t)sub_1B18AE3A0((_DWORD *)a9, &v24);
      ++v16;
      v14 = *(_QWORD *)(a3 + 8);
    }
    while (v16 < *(unsigned int *)(v14 + 8));
  }
  return result;
}

_DWORD *sub_1B18AE3A0(_DWORD *result, _QWORD *a2)
{
  _DWORD *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  const void *v7;
  unsigned int v8;
  void *Aligned;

  v3 = result;
  v4 = result[2];
  v5 = result[3];
  v6 = v4 + 1;
  v7 = (const void *)*((_QWORD *)result + 2);
  if (v4 + 1 > v5)
  {
    v8 = ((double)(v5 + 1) * 1.5);
    Aligned = CStackAllocatorAllocateAligned(*(_QWORD *)result, 8 * v8, 8, 2);
    result = memcpy(Aligned, v7, 8 * v3[2]);
    *((_QWORD *)v3 + 2) = Aligned;
    v3[3] = v8;
    v4 = v3[2];
    v6 = v4 + 1;
    v7 = Aligned;
  }
  *((_QWORD *)v7 + v4) = *a2;
  v3[2] = v6;
  return result;
}

void sub_1B18AE444(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B18AE46C(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B18AE490(unsigned __int8 *result, unsigned int a2)
{
  uint64_t v2;
  unint64_t v3;

  if (result)
  {
    v2 = 0;
    v3 = 0xC6A4A7935BD1E995 * a2;
    do
    {
      v3 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * *(_QWORD *)&result[v2]) ^ ((0xC6A4A7935BD1E995 * *(_QWORD *)&result[v2]) >> 47))) ^ v3);
      v2 += 8;
    }
    while (v2 != 32);
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_11;
      case 2u:
        goto LABEL_10;
      case 3u:
        goto LABEL_9;
      case 4u:
        goto LABEL_8;
      case 5u:
        goto LABEL_7;
      case 6u:
        goto LABEL_6;
      case 7u:
        v3 ^= (unint64_t)result[38] << 48;
LABEL_6:
        v3 ^= (unint64_t)result[37] << 40;
LABEL_7:
        v3 ^= (unint64_t)result[36] << 32;
LABEL_8:
        v3 ^= (unint64_t)result[35] << 24;
LABEL_9:
        v3 ^= (unint64_t)result[34] << 16;
LABEL_10:
        v3 ^= (unint64_t)result[33] << 8;
LABEL_11:
        v3 = 0xC6A4A7935BD1E995 * (v3 ^ result[32]);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v3 ^ (v3 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v3 ^ (v3 >> 47))) >> 47));
  }
  return result;
}

uint64_t sub_1B18AE548(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B18AE5F0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B18AE59C(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = (uint64_t)sub_1B18AE64C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B18AE5F0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B8u, 8u);
  return sub_1B18AD904(v8, *a3, a3[1], a4, a5);
}

uint64_t *sub_1B18AE64C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t *v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = (uint64_t *)sub_1B179C1C0(v10, 0x198u, 8u);
  return sub_1B18ADC98(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B18AE6A8(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, char *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0xE0u, 8u);
  return CFX::RG::Resource::Resource(v8, *a3, *a4, a4[1], *a5);
}

_QWORD *sub_1B18AE704(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CFEB8;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  return a1;
}

void sub_1B18AE748(_QWORD *a1)
{
  void *v2;
  void *v3;

  *a1 = &off_1E63CFEB8;
  v2 = (void *)a1[3];
  if (v2)

  v3 = (void *)a1[2];
  if (v3)

  JUMPOUT(0x1B5E22E18);
}

void sub_1B18AE79C(CFStringRef theString, uint64_t a2, int a3)
{
  const __CFAllocator *v5;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex Count;
  CFMutableStringRef Mutable;
  CFIndex v9;
  int v10;
  const __CFString *ValueAtIndex;
  const __CFString *v12;
  uint64_t v13;
  char v14;

  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString, CFSTR("\n"));
  Count = CFArrayGetCount(ArrayBySeparatingStrings);
  Mutable = CFStringCreateMutable(v5, 0);
  *(_WORD *)(a2 + 72) = 0;
  if (Count < 1)
    goto LABEL_39;
  v9 = 0;
  v10 = 4;
  do
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v9);
    if (sub_1B179F2AC(ValueAtIndex, CFSTR("//")))
      goto LABEL_12;
    if (a3)
    {
      if (!sub_1B179F2AC(ValueAtIndex, CFSTR("uniform")))
        goto LABEL_12;
      v12 = ValueAtIndex;
      v13 = a2;
      v14 = 1;
      goto LABEL_11;
    }
    if (sub_1B179F2AC(ValueAtIndex, CFSTR("#pragma opaque")))
    {
      *(_WORD *)(a2 + 72) |= 1u;
      goto LABEL_12;
    }
    if (sub_1B179F2AC(ValueAtIndex, CFSTR("uniform")))
    {
      v12 = ValueAtIndex;
      v13 = a2;
      v14 = 0;
LABEL_11:
      sub_1B18AEAE8(v12, v13, v14);
      goto LABEL_12;
    }
    if (sub_1B179F2AC(ValueAtIndex, CFSTR("#pragma declaration")))
    {
LABEL_15:
      v10 = 0;
    }
    else if (sub_1B179F2AC(ValueAtIndex, CFSTR("#pragma arguments")))
    {
      if (v10 == 4 && CFStringGetLength(Mutable))
      {
        CFStringAppend(*(CFMutableStringRef *)a2, Mutable);
        CFStringReplaceAll(Mutable, &stru_1E63FD500);
      }
LABEL_20:
      v10 = 1;
    }
    else if (sub_1B179F2AC(ValueAtIndex, CFSTR("#pragma varyings")))
    {
      if (v10 == 4 && CFStringGetLength(Mutable))
      {
        CFStringAppend(*(CFMutableStringRef *)a2, Mutable);
        CFStringReplaceAll(Mutable, &stru_1E63FD500);
      }
LABEL_25:
      v10 = 2;
    }
    else if (sub_1B179F2AC(ValueAtIndex, CFSTR("#pragma body")))
    {
      if (v10 == 4 && CFStringGetLength(Mutable))
      {
        CFStringAppend(*(CFMutableStringRef *)a2, Mutable);
        CFStringReplaceAll(Mutable, &stru_1E63FD500);
      }
LABEL_35:
      v10 = 3;
    }
    else if (!sub_1B179F2AC(ValueAtIndex, CFSTR("#pragma ")))
    {
      switch(v10)
      {
        case 0:
          sub_1B18AEECC(ValueAtIndex, a2);
          CFStringAppend(*(CFMutableStringRef *)a2, ValueAtIndex);
          CFStringAppend(*(CFMutableStringRef *)a2, CFSTR("\n"));
          goto LABEL_15;
        case 1:
          sub_1B18AF0B4(ValueAtIndex, a2);
          goto LABEL_20;
        case 2:
          sub_1B18AF380(ValueAtIndex, a2);
          goto LABEL_25;
        case 3:
          sub_1B18AEECC(ValueAtIndex, a2);
          CFStringAppend(*(CFMutableStringRef *)(a2 + 8), ValueAtIndex);
          CFStringAppend(*(CFMutableStringRef *)(a2 + 8), CFSTR("\n"));
          goto LABEL_35;
        case 4:
          sub_1B18AEECC(ValueAtIndex, a2);
          CFStringAppend(Mutable, ValueAtIndex);
          CFStringAppend(Mutable, CFSTR("\n"));
          v10 = 4;
          break;
        default:
          break;
      }
    }
LABEL_12:
    ++v9;
  }
  while (Count != v9);
  if (v10 == 4)
  {
LABEL_39:
    if (CFStringGetLength(Mutable))
    {
      CFStringAppend(*(CFMutableStringRef *)(a2 + 8), Mutable);
      CFStringReplaceAll(Mutable, &stru_1E63FD500);
    }
  }
  CFRelease(Mutable);
  CFRelease(ArrayBySeparatingStrings);
}

void sub_1B18AEAE8(const __CFString *a1, uint64_t a2, char a3)
{
  CFIndex Length;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  CFIndex v14;
  const __CFString *v15;
  CFIndex v16;
  CFStringRef v17;
  BOOL v18;
  char v19;
  char v20;
  char v21;
  CFIndex v22;
  CFIndex v23;
  CFIndex v24;
  char v25;
  CFIndex v26;
  int v27;
  const __CFAllocator *alloc;
  _OWORD v30[16];
  CFRange v31;
  CFRange v32;
  CFRange v33;
  CFRange v34;
  CFRange v35;
  CFRange v36;
  CFRange v37;
  CFRange v38;
  CFRange v39;
  CFRange v40;
  CFRange v41;
  CFRange v42;

  memset(v30, 0, 240);
  Length = CFStringGetLength(a1);
  sub_1B179F0E8((uint64_t)v30, a1, 0, Length, 1);
  sub_1B179F174((uint64_t)v30);
  if (sub_1B179F7DC((uint64_t)v30))
    sub_1B179F174((uint64_t)v30);
  v31.location = sub_1B179F17C((uint64_t)v30);
  v31.length = v6;
  if (CFStringCompareWithOptions(a1, CFSTR("uniform"), v31, 0))
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: syntax error in the uniform declaration : %@"), v7, v8, v9, v10, v11, v12, (uint64_t)a1);
    return;
  }
  if ((a3 & 1) == 0)
    CFStringAppendFormat(*(CFMutableStringRef *)a2, 0, CFSTR("%@\n"), a1);
  if (sub_1B179F174((uint64_t)v30))
  {
    v27 = 0;
    alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      v13 = v27;
      if ((_WORD)v27)
        goto LABEL_47;
      if (sub_1B179F7DC((uint64_t)v30))
        sub_1B179F174((uint64_t)v30);
      v32.location = sub_1B179F17C((uint64_t)v30);
      v32.length = v14;
      v15 = CFStringCreateWithSubstring(alloc, a1, v32);
      v13 = sub_1B179E324(v15);
      CFRelease(v15);
      sub_1B179F174((uint64_t)v30);
      if (v13)
      {
LABEL_47:
        if (sub_1B179F7DC((uint64_t)v30))
          sub_1B179F174((uint64_t)v30);
        v33.location = sub_1B179F17C((uint64_t)v30);
        v33.length = v16;
        v17 = CFStringCreateWithSubstring(alloc, a1, v33);
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 24), v17, (const void *)(__int16)v13);
        CFRelease(v17);
      }
      if (sub_1B179F174((uint64_t)v30))
        break;
LABEL_42:
      if ((sub_1B179F174((uint64_t)v30) & 1) == 0)
        return;
    }
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    while (1)
    {
      v23 = sub_1B179F17C((uint64_t)v30);
      v24 = v22;
      if ((v20 & 1) != 0)
      {
        v34.location = v23;
        v34.length = v22;
        if (CFStringCompareWithOptions(a1, CFSTR("/"), v34, 0) == kCFCompareEqualTo)
        {
          v25 = 0;
          v19 = !v18;
          goto LABEL_35;
        }
        v35.location = v23;
        v35.length = v24;
        v25 = 0;
        v18 = CFStringCompareWithOptions(a1, CFSTR("*"), v35, 0) == kCFCompareEqualTo;
        v19 = 1;
      }
      else
      {
        v36.location = v23;
        v36.length = v22;
        if (CFStringCompareWithOptions(a1, CFSTR(";"), v36, 0) == kCFCompareEqualTo)
        {
          sub_1B179F174((uint64_t)v30);
          if (sub_1B179F7DC((uint64_t)v30))
            sub_1B179F174((uint64_t)v30);
          v42.location = sub_1B179F17C((uint64_t)v30);
          v42.length = v26;
          if (CFStringCompareWithOptions(a1, CFSTR("uniform"), v42, 0) == kCFCompareEqualTo)
          {
            v27 = 0;
            goto LABEL_42;
          }
          return;
        }
        v37.location = v23;
        v37.length = v24;
        if (CFStringCompareWithOptions(a1, CFSTR("/"), v37, 0) == kCFCompareEqualTo)
        {
          if ((v19 & 1) != 0)
            return;
          v19 = 0;
          v18 = 0;
          v25 = 1;
          goto LABEL_36;
        }
        v38.location = v23;
        v38.length = v24;
        if (CFStringCompareWithOptions(a1, CFSTR("*"), v38, 0))
        {
          v39.location = v23;
          v39.length = v24;
          if (CFStringCompareWithOptions(a1, CFSTR("("), v39, 0))
          {
            v40.location = v23;
            v40.length = v24;
            if (CFStringCompareWithOptions(a1, CFSTR(")"), v40, 0) == kCFCompareEqualTo)
            {
              v21 = 0;
LABEL_34:
              v19 = 0;
              v25 = 0;
LABEL_35:
              v18 = 0;
              goto LABEL_36;
            }
            v41.location = v23;
            v41.length = v24;
            if (CFStringCompareWithOptions(a1, CFSTR(","), v41, 0))
              goto LABEL_34;
            if ((v21 & 1) == 0)
            {
              v27 = v13;
              goto LABEL_42;
            }
          }
          v19 = 0;
          v25 = 0;
          v18 = 0;
          v21 = 1;
        }
        else
        {
          v25 = 0;
          v18 = 1;
        }
      }
LABEL_36:
      v20 = v19;
      v19 = v25;
      if ((sub_1B179F174((uint64_t)v30) & 1) == 0)
        goto LABEL_42;
    }
  }
}

uint64_t sub_1B18AEECC(const __CFString *a1, uint64_t a2)
{
  CFIndex Length;
  const __CFDictionary *v5;
  uint64_t result;
  BOOL v7;
  const __CFAllocator *v8;
  CFIndex v9;
  CFIndex v10;
  CFIndex v11;
  BOOL v12;
  CFIndex v13;
  CFIndex v14;
  uint64_t v15;
  CFStringRef v16;
  const void **Value;
  _OWORD v18[16];
  CFRange v19;
  CFRange v20;
  CFRange v21;
  CFRange v22;
  CFRange v23;

  memset(v18, 0, 240);
  Length = CFStringGetLength(a1);
  sub_1B179F0E8((uint64_t)v18, a1, 0, Length, 1);
  v5 = (const __CFDictionary *)sub_1B19E0958();
  result = sub_1B179F174((uint64_t)v18);
  if ((_DWORD)result)
  {
    v7 = 0;
    v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    while (1)
    {
      if (sub_1B179F7DC((uint64_t)v18))
        sub_1B179F174((uint64_t)v18);
      v9 = sub_1B179F17C((uint64_t)v18);
      v11 = v10;
      v19.location = v9;
      v19.length = v10;
      result = CFStringCompareWithOptions(a1, CFSTR("/"), v19, 0);
      v12 = result == 0;
      if (!result)
      {
        if (v7)
          return result;
        goto LABEL_14;
      }
      v20.location = v9;
      v20.length = v11;
      if (CFStringCompareWithOptions(a1, CFSTR("vfx_node"), v20, 0))
      {
        v21.location = v9;
        v21.length = v11;
        if (CFStringCompareWithOptions(a1, CFSTR("vfx_frame"), v21, 0))
          goto LABEL_10;
      }
      sub_1B179F174((uint64_t)v18);
      v22.location = sub_1B179F17C((uint64_t)v18);
      v14 = v13;
      v22.length = v13;
      if (CFStringCompareWithOptions(a1, CFSTR("."), v22, 0) == kCFCompareEqualTo)
        break;
LABEL_14:
      result = sub_1B179F174((uint64_t)v18);
      v7 = v12;
      if ((result & 1) == 0)
        return result;
    }
    sub_1B179F174((uint64_t)v18);
    sub_1B179F17C((uint64_t)v18);
    v11 += v14 + v15;
LABEL_10:
    v23.location = v9;
    v23.length = v11;
    v16 = CFStringCreateWithSubstring(v8, a1, v23);
    Value = (const void **)CFDictionaryGetValue(v5, v16);
    if (Value)
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a2 + 64), v16, *Value);
    CFRelease(v16);
    goto LABEL_14;
  }
  return result;
}

