void sub_1B19492EC(uint64_t a1)
{
  void **v1;
  const char *v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  id v10;

  v1 = *(void ***)(a1 + 32);
  *v1 = objc_alloc_init(MEMORY[0x1E0C89A88]);
  v10 = objc_alloc_init(MEMORY[0x1E0C89AD8]);
  objc_msgSend_attachNode_(*v1, v2, (uint64_t)v10, v3);
  v4 = *v1;
  v8 = objc_msgSend_mainMixerNode(v4, v5, v6, v7);
  objc_msgSend_connect_to_format_(v4, v9, (uint64_t)v10, v8, 0);

}

uint64_t sub_1B1949360(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t *v23;
  BOOL v24;
  unint64_t v25;
  unint64_t *v26;

  objc_msgSend_audioPlayer(a2, (const char *)a2, a3, a4);
  result = objc_msgSend_customAudioNode(a2, v6, v7, v8);
  if ((result & 1) == 0)
  {
    objc_opt_class();
    result = objc_opt_isKindOfClass();
    if ((result & 1) == 0)
    {
      objc_msgSend_lock(*(void **)(a1 + 8), v10, v11, v12);
      v25 = objc_msgSend_world(a2, v13, v14, v15);
      v26 = &v25;
      v16 = sub_1B1949AE4((uint64_t **)(a1 + 16), &v25, (uint64_t)&unk_1B22458B0, (uint64_t **)&v26);
      v20 = (uint64_t *)v16[5];
      v21 = v16 + 6;
      if (v20 != v16 + 6)
      {
        do
        {
          sub_1B1948BE4(v20[5], (char *)a2, v18, v19);
          v22 = (uint64_t *)v20[1];
          if (v22)
          {
            do
            {
              v23 = v22;
              v22 = (uint64_t *)*v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              v23 = (uint64_t *)v20[2];
              v24 = *v23 == (_QWORD)v20;
              v20 = v23;
            }
            while (!v24);
          }
          v20 = v23;
        }
        while (v23 != v21);
      }
      return objc_msgSend_unlock(*(void **)(a1 + 8), v17, v18, v19);
    }
  }
  return result;
}

uint64_t sub_1B194945C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  BOOL v21;
  unint64_t v22;
  unint64_t *v23;

  result = objc_msgSend_customAudioNode(a2, (const char *)a2, a3, a4);
  if ((result & 1) == 0)
  {
    objc_msgSend_lock(*(void **)(a1 + 8), v7, v8, v9);
    v22 = objc_msgSend_world(a2, v10, v11, v12);
    v23 = &v22;
    v13 = sub_1B1949AE4((uint64_t **)(a1 + 16), &v22, (uint64_t)&unk_1B22458B0, (uint64_t **)&v23);
    v17 = (uint64_t *)v13[5];
    v18 = v13 + 6;
    if (v17 != v13 + 6)
    {
      do
      {
        sub_1B1948CF8((id **)v17[5], a2, v15, v16);
        v19 = (uint64_t *)v17[1];
        if (v19)
        {
          do
          {
            v20 = v19;
            v19 = (uint64_t *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            v20 = (uint64_t *)v17[2];
            v21 = *v20 == (_QWORD)v17;
            v17 = v20;
          }
          while (!v21);
        }
        v17 = v20;
      }
      while (v20 != v18);
    }
    return objc_msgSend_unlock(*(void **)(a1 + 8), v14, v15, v16);
  }
  return result;
}

uint64_t sub_1B1949530(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  __int128 v13;

  v13 = *(_OWORD *)(a2 + 48);
  v4 = (void *)objc_msgSend_audioNode(a1, (const char *)a2, a3, a4);
  result = objc_msgSend_conformsToProtocol_(v4, v5, (uint64_t)&unk_1EF0244C8, v6);
  if ((_DWORD)result)
  {
    LODWORD(v12) = DWORD2(v13);
    LODWORD(v11) = DWORD1(v13);
    return objc_msgSend_setPosition_(v4, v8, v9, v10, *(double *)&v13, v11, v12);
  }
  return result;
}

uint64_t sub_1B1949590(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;

  objc_msgSend_audioPlayer(a1, a2, a3, a4);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v9 = (void *)objc_msgSend_audioPlayer(a1, v6, v7, v8);
    result = objc_msgSend_engine(v9, v10, v11, v12);
    if (result)
      return objc_msgSend_play(v9, v13, v14, v15);
  }
  return result;
}

uint64_t sub_1B1949608(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  return sub_1B1949360(qword_1ED4CEEF0, a1, a3, a4);
}

uint64_t sub_1B1949658(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  return sub_1B194945C(qword_1ED4CEEF0, a1, a3, a4);
}

_QWORD *sub_1B19496A8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  result = sub_1B1948F88(qword_1ED4CEEF0, a1, a3, a4, a5, a6, a7, a8);
  if (result)
    result[3] = a2;
  return result;
}

_QWORD *sub_1B1949708(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;

  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  result = sub_1B1948F88(qword_1ED4CEEF0, a1, a3, a4, a5, a6, a7, a8);
  if (result)
    return (_QWORD *)result[3];
  return result;
}

_QWORD *sub_1B1949764(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  result = sub_1B1948F88(qword_1ED4CEEF0, a1, a3, a4, a5, a6, a7, a8);
  if (result)
    return (_QWORD *)sub_1B1948D90((uint64_t)result, v10, v11, v12, v13, v14, v15, v16);
  return result;
}

id sub_1B19497C8(char a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 1) != 0)
  {
    if (qword_1ED4CF748 != -1)
      dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
    return sub_1B1948B10((id *)qword_1ED4CEEF0, a2, a3, a4);
  }
  else if (qword_1ED4CEEF0)
  {
    if (qword_1ED4CF748 != -1)
      dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
    return *(id *)qword_1ED4CEEF0;
  }
  else
  {
    return 0;
  }
}

id **sub_1B1949864(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id **result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id **v13;

  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  result = (id **)sub_1B1948F88(qword_1ED4CEEF0, a1, a3, a4, a5, a6, a7, a8);
  if (result)
  {
    v13 = result;
    sub_1B1948A18(result, v10, v11, v12);
    return (id **)v13[2];
  }
  return result;
}

_QWORD *sub_1B19498C8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  return sub_1B1948F88(qword_1ED4CEEF0, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B1949918(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (qword_1ED4CF748 != -1)
    dispatch_once(&qword_1ED4CF748, &unk_1E63D12D0);
  return sub_1B19490EC(qword_1ED4CEEF0, a1, a3, a4, a5, a6, a7, a8);
}

uint64_t *sub_1B1949968(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unint64_t v7;
  uint64_t **v8;
  unint64_t v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = v5[4];
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x28uLL);
    v10[4] = *a3;
    sub_1B181D728(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t sub_1B1949A20(uint64_t a1, unint64_t *a2)
{
  _QWORD *v2;
  unint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;

  v2 = *(_QWORD **)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = (uint64_t *)(a1 + 8);
  do
  {
    v5 = v2[4];
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = v2;
    else
      v7 = v2 + 1;
    if (v6)
      v4 = v2;
    v2 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4])
    return 0;
  sub_1B181D914((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

void sub_1B1949A98(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1B1949A98(a1, *a2);
    sub_1B1949A98(a1, a2[1]);
    sub_1B1805B90((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t *sub_1B1949AE4(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[7] = 0;
    v11[6] = 0;
    v11[4] = v12;
    v11[5] = (uint64_t)(v11 + 6);
    sub_1B181D728(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1B1949BAC(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = sub_1B181D914(a1, (uint64_t *)a2);
  sub_1B1805B90(a2 + 40, *(_QWORD **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

void sub_1B194A5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B194A614(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_1B194A624(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

uint64_t sub_1B194A630(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t result;

  v7 = (void *)objc_msgSend_asset(a2, (const char *)a2, (uint64_t)a3, a4);
  v11 = (void *)objc_msgSend_name(v7, v8, v9, v10);
  result = objc_msgSend_isEqualToString_(v11, v12, *(_QWORD *)(a1 + 32), v13);
  if ((_DWORD)result)
  {
    *a3 = 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = a2;
  }
  return result;
}

void sub_1B194A724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B194A73C(uint64_t a1, void *a2, _BYTE *a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t result;

  v7 = (void *)objc_msgSend_name(a2, (const char *)a2, (uint64_t)a3, a4);
  result = objc_msgSend_isEqualToString_(v7, v8, *(_QWORD *)(a1 + 32), v9);
  if ((_DWORD)result)
  {
    *a3 = 1;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) = a2;
  }
  return result;
}

uint64_t sub_1B194AD9C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_setRegistry_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

uint64_t sub_1B194B080(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addWorldReference_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

uint64_t sub_1B194B138(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_removeWorldReference_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

uint64_t sub_1B194BF48(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  objc_opt_self();
  v3 = sub_1B17A0A4C(a2);
  if (!sub_1B1942600(v3))
    return 1;
  if (sub_1B17C46BC(7))
    return 1;
  return 3;
}

_QWORD *sub_1B194BF9C(void *a1, const void *a2, char a3, char a4, uint64_t a5, uint64_t a6)
{
  const char *v11;
  uint64_t v12;
  _QWORD *v13;
  CFTypeRef v14;
  objc_super v16;

  if (!a1)
    return 0;
  v16.receiver = a1;
  v16.super_class = (Class)VFXMTLMorphDeformer;
  v13 = objc_msgSendSuper2(&v16, sel_init);
  if (v13)
  {
    if (a2)
      v14 = CFRetain(a2);
    else
      v14 = 0;
    v13[1] = v14;
    *((_BYTE *)v13 + 32) = (a3 & 2) != 0;
    *((_BYTE *)v13 + 16) = a4;
    v13[3] = a5;
    *((_DWORD *)v13 + 14) = -1;
    objc_msgSend_setupMorphTargetsWithComputeContext_(v13, v11, a6, v12);
  }
  return v13;
}

uint64_t sub_1B194C100(uint64_t result)
{
  if (result)
    *(_DWORD *)(result + 56) = -1;
  return result;
}

void sub_1B194CD0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  uint64_t v70;
  const void *v71;
  uint64_t v72;
  const void *v73;
  uint64_t v74;
  const void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float v86;
  uint64_t v87;
  uint64_t v88;
  unsigned __int8 v89;
  unsigned __int8 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  float32x4_t v97;
  float v98;
  float32x4_t v99;
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  int v105;
  float32x4_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  float v113;
  float v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t v124;
  unsigned int v125;
  float32x4_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  CFTypeRef cf;
  const void *v135;
  float32x4_t v136;

  v8 = a3;
  v18 = sub_1B1875540(a3, 0, 0, 0, a5, a6, a7, a8);
  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32))
  {
    v19 = sub_1B1875540(v8, 1, 0, 0, v14, v15, v16, v17);
    if (!v19)
    {
      v19 = (const void *)sub_1B17B18AC(v8, *(_QWORD *)(a1 + 40), 0, v13, v14, v15, v16, v17);
      if (!v19)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v20, v21, v22, v23, v24, v25, (uint64_t)"originalNormalSource");
      CFAutorelease(v19);
    }
  }
  else
  {
    v19 = 0;
  }
  v26 = *(unsigned __int8 *)(a1 + 84);
  if (*(_BYTE *)(a1 + 84))
    v27 = v18 == 0;
  else
    v27 = 0;
  if (v27)
  {
    if (!sub_1B1874BE0(v8, v11, v12, v13, v14, v15, v16, v17))
      return;
    v26 = *(unsigned __int8 *)(a1 + 84);
  }
  v28 = *(_QWORD *)(a1 + 32);
  if (v26)
  {
    if (*(_QWORD *)(v28 + 40) != 1)
    {
      v29 = sub_1B1874C3C(v8, 0, 0, v13, v14, v15, v16, v17);
      v37 = sub_1B17EDAE0(*(_QWORD *)(a1 + 48), v30, v31, v32, v33, v34, v35, v36);
      v43 = sub_1B1875D94(*(_QWORD *)(a1 + 40), 0, 0, v38, v39, v40, v41, v42);
      v18 = (const void *)sub_1B17EDF54((uint64_t)v18, (uint64_t)v29, v37, v43, v44, v45, v46, v47);
      CFAutorelease(v18);
      v28 = *(_QWORD *)(a1 + 32);
      if (*(_BYTE *)(v28 + 32))
      {
        v50 = sub_1B17EDAE0(*(_QWORD *)(a1 + 56), v48, v49, v13, v14, v15, v16, v17);
        v56 = sub_1B1875D94(*(_QWORD *)(a1 + 40), 1, 0, v51, v52, v53, v54, v55);
        v19 = (const void *)sub_1B17EDF54((uint64_t)v19, (uint64_t)v29, v50, v56, v57, v58, v59, v60);
        CFAutorelease(v19);
        v28 = *(_QWORD *)(a1 + 32);
      }
    }
  }
  if (*(_BYTE *)(v28 + 17) == 1 && (v61 = *(_QWORD *)(a1 + 64)) != 0)
  {
    v69 = (const void *)sub_1B194D154((uint64_t)v18, *(unsigned int *)(a1 + 80), v61, v13, v14, v15, v16, v17);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32))
    {
      v70 = sub_1B194D154((uint64_t)v19, *(unsigned int *)(a1 + 80), *(_QWORD *)(a1 + 64), v64, v65, v66, v67, v68);
LABEL_24:
      v71 = (const void *)v70;
      goto LABEL_26;
    }
  }
  else
  {
    v69 = CFRetain(v18);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32))
    {
      v70 = (uint64_t)CFRetain(v19);
      goto LABEL_24;
    }
  }
  v71 = 0;
LABEL_26:
  if (*(_BYTE *)(a1 + 85))
  {
    v72 = sub_1B17ED3B8(*(_QWORD *)(a1 + 48), (uint64_t)v69, v63, v64, v65, v66, v67, v68);
    if (!v72)
      return;
    v73 = (const void *)v72;
    CFRelease(v69);
    if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 32))
    {
      v74 = sub_1B17ED3B8(*(_QWORD *)(a1 + 56), (uint64_t)v71, v63, v64, v65, v66, v67, v68);
      if (!v74)
        return;
      v75 = (const void *)v74;
      CFRelease(v71);
      v71 = v75;
    }
  }
  else
  {
    v73 = v69;
  }
  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) != 1)
  {
    v122 = sub_1B17EDAE0((uint64_t)v73, v62, v63, v64, v65, v66, v67, v68);
    if (*(_DWORD *)(*(_QWORD *)(a1 + 32) + 64) != v122)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Internal consistency error - unexpected sparse moprh target"), v116, v117, v118, v119, v120, v121, (uint64_t)"vertexCount == _vertexCountForComputeKernel");
    v123 = v122;
    goto LABEL_49;
  }
  v83 = sub_1B17ED6C4((uint64_t)v73, v62, v63, v64, v65, v66, v67, v68);
  v87 = v76;
  if (v71)
  {
    v88 = sub_1B17ED6C4((uint64_t)v71, v76, v77, v78, v79, v80, v81, v82);
    v100 = v87;
    if (!(_DWORD)v87)
    {
      CFRelease(v73);
      goto LABEL_53;
    }
    v101 = v88;
    cf = v73;
    v135 = v71;
    v131 = a1;
    v132 = a2;
    v133 = v8;
    v102 = 0;
    v103 = 0;
    v104 = 0;
    LODWORD(v87) = v89;
    v105 = v90;
    do
    {
      *(double *)v106.i64 = sub_1B198D4F8(BYTE4(v87), (const float *)(v83 + v102), v91, v92, v93, v94, v95, v96, v97, v98, v99.f32[0]);
      v136 = v106;
      *(double *)v97.i64 = sub_1B198D4F8(v87, (const float *)(v101 + v103), v107, v108, v109, v110, v111, v112, v106, v113, v114);
      v99.i64[0] = 0x3400000034000000;
      v99.i64[1] = 0x3400000034000000;
      v98 = COERCE_FLOAT(vminvq_u32((uint32x4_t)vcgeq_f32(v99, (float32x4_t)(*(_OWORD *)&v136 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)))));
      if ((LODWORD(v98) & 0x80000000) != 0)
      {
        v97 = (float32x4_t)vcgeq_f32(v99, vabsq_f32(v97));
        v97.i32[0] = vminvq_u32((uint32x4_t)v97);
        v115 = v97.i32[0] >= 0;
      }
      else
      {
        v115 = 1;
      }
      v104 += v115;
      v103 += v105;
      v102 += BYTE5(v87);
      --v100;
    }
    while (v100);
  }
  else
  {
    v124 = v76;
    if (!(_DWORD)v76)
    {
      CFRelease(v73);
      return;
    }
    cf = v73;
    v135 = 0;
    v131 = a1;
    v132 = a2;
    v133 = v8;
    v125 = 0;
    v104 = 0;
    do
    {
      v126.i64[0] = COERCE_UNSIGNED_INT64(sub_1B198D4F8(BYTE4(v87), (const float *)(v83 + v125), v77, v78, v79, v80, v81, v82, v84, v85.f32[0], v86)) & 0x7FFFFFFF7FFFFFFFLL;
      v126.i64[1] &= 0x7FFFFFFF7FFFFFFFuLL;
      v85.i64[0] = 0x3400000034000000;
      v85.i64[1] = 0x3400000034000000;
      v84 = (float32x4_t)vcgeq_f32(v85, v126);
      v84.i32[0] = vminvq_u32((uint32x4_t)v84);
      v104 += v84.i32[0] >= 0;
      v125 += BYTE5(v87);
      --v124;
    }
    while (v124);
  }
  if (v104)
  {
    v123 = v104;
    a2 = v132;
    v8 = v133;
    a1 = v131;
    v73 = cf;
    v71 = v135;
LABEL_49:
    v127 = *(_QWORD *)(a1 + 72);
    v128 = *(_QWORD *)(a1 + 32);
    v129 = *(_DWORD *)(v128 + 68);
    *(_DWORD *)(v128 + 68) = v129 + 1;
    v130 = v127 + 40 * v129;
    *(_DWORD *)v130 = a2;
    *(_DWORD *)(v130 + 4) = 0;
    *(_QWORD *)(v130 + 8) = v8;
    *(_QWORD *)(v130 + 16) = v73;
    *(_QWORD *)(v130 + 24) = v71;
    *(_QWORD *)(v130 + 32) = v123;
    return;
  }
  CFRelease(cf);
  v71 = v135;
  if (v135)
LABEL_53:
    CFRelease(v71);
}

uint64_t sub_1B194D154(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned int v9;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  const UInt8 *v17;
  const UInt8 *v18;
  uint64_t v19;
  UInt8 *v20;
  unsigned int v21;
  CFDataRef v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v8 = (unsigned int *)a3;
  v9 = a2;
  v11 = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  v13 = v12;
  v14 = BYTE5(v12);
  v15 = v9;
  v16 = BYTE5(v12) * (unint64_t)v9;
  v17 = (const UInt8 *)malloc_type_malloc(v16, 0x735ECC95uLL);
  v18 = v17;
  if (v9)
  {
    v19 = v9;
    v20 = (UInt8 *)v17;
    do
    {
      v21 = *v8++;
      memcpy(v20, (const void *)(v11 + v14 * (unint64_t)v21), v14);
      v20 += v14;
      --v19;
    }
    while (v19);
  }
  v22 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v18, v16, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
  v30 = sub_1B17ED7B4(a1, v23, v24, v25, v26, v27, v28, v29);
  v32 = sub_1B17ED264(v30, v22, BYTE6(v13), HIBYTE(v13), v15, v14, 0, v31);
  CFRelease(v22);
  return v32;
}

void sub_1B194D24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B1875914(a3, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B194E41C()
{
  objc_opt_self();
  return 0;
}

uint64_t sub_1B194E7C4(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  if (!a3)
    return 0;
  v18 = xmmword_1E63D9AF8;
  v4 = sub_1B181F420();
  sub_1B181F5B0(v4, &v18, v5, v6, v7, v8, v9, v10);
  sub_1B181F530(v4, a3, v11, v12, v13, v14, v15, v16);
  return v4;
}

BOOL sub_1B194E824(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = (void *)objc_msgSend_player(a1, a2, a3, a4);
  v8 = (void *)objc_msgSend_currentItem(v4, v5, v6, v7);
  v12 = (void *)objc_msgSend_asset(v8, v9, v10, v11);
  v15 = (void *)objc_msgSend_tracksWithMediaCharacteristic_(v12, v13, *MEMORY[0x1E0C8A700], v14);
  return objc_msgSend_count(v15, v16, v17, v18) == 0;
}

uint64_t sub_1B194E85C()
{
  return 1;
}

uint64_t sub_1B194EC98()
{
  return 0;
}

uint64_t sub_1B194ECA0(uint64_t result, _BYTE *a2, _QWORD *a3, _QWORD *a4)
{
  *a2 = *(_BYTE *)(result + 64);
  *a3 = *(_QWORD *)(result + 72);
  *a4 = *(_QWORD *)(result + 80);
  return result;
}

void sub_1B194F078(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B194F16C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B194F30C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_containsAlpha(a1, a2, a3, a4) ^ 1;
}

uint64_t sub_1B194F324(uint64_t result, _BYTE *a2, _QWORD *a3, _QWORD *a4)
{
  *a2 = *(_BYTE *)(result + 49);
  *a3 = *(_QWORD *)(result + 56);
  *a4 = *(_QWORD *)(result + 64);
  return result;
}

void sub_1B194F5C8(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B194F6F4(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B194F7CC(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B194F7E4(const void *a1, void (__cdecl *a2)(CFNotificationCenterRef, void *, CFNotificationName, const void *, CFDictionaryRef), const __CFString *a3, const void *a4, CFNotificationSuspensionBehavior a5)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterAddObserver(LocalCenter, a1, a2, a3, a4, a5);
}

void sub_1B194F838(const void *a1, const __CFString *a2, const void *a3)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, a2, a3);
}

void sub_1B194F874(const __CFString *a1, const void *a2, const __CFDictionary *a3, Boolean a4)
{
  __CFNotificationCenter *LocalCenter;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, a1, a2, a3, a4);
}

uint64_t sub_1B194F8B8(uint64_t a1, uint64_t a2, const void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = sub_1B21AB51C(a1, "CustomAuthoring");
  *(_QWORD *)v8 = off_1E63CE3B0;
  *(_QWORD *)(v8 + 24) = a2;
  *(_DWORD *)(v8 + 32) = 0;
  v9 = v8 + 32;
  *(_DWORD *)(v8 + 36) = 0;
  *(_QWORD *)(v8 + 48) = a3;
  *(_QWORD *)(v8 + 40) = v8 + 48;
  *(_QWORD *)(v8 + 56) = a4;
  CFRetain(a3);
  CFRetain(*(CFTypeRef *)(a1 + 56));
  v10 = sub_1B1C61D80();
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v11, (uint64_t)&v21, (uint64_t)v25, 16);
  if (v15)
  {
    v16 = *(_QWORD *)v22;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v22 != v16)
          objc_enumerationMutation(v10);
        v18 = (const char *)objc_msgSend_UTF8String(*(void **)(*((_QWORD *)&v21 + 1) + 8 * v17), v12, v13, v14);
        CFX::RG::ResourceIdentifier::ResourceIdentifier((CFX::RG::ResourceIdentifier *)&v20, v18);
        sub_1B17A3844(v9, &v20);
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v10, v12, (uint64_t)&v21, (uint64_t)v25, 16);
    }
    while (v15);
  }
  return a1;
}

void sub_1B194FA18(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 36))
    free(*(void **)(v1 + 40));
  _Unwind_Resume(exception_object);
}

void sub_1B194FA4C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = a2 + 16;
  v3 = *(_DWORD *)(a1 + 32);
  if (v3)
  {
    sub_1B17A378C((unsigned int *)a2, v3, 1);
    v5 = *(unsigned int *)(a1 + 32);
    if ((_DWORD)v5)
    {
      v6 = *(_QWORD **)(a1 + 40);
      v7 = 8 * v5;
      do
      {
        sub_1B17A3844(a2, v6++);
        v7 -= 8;
      }
      while (v7);
    }
  }
}

void sub_1B194FAB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_DWORD *)(v1 + 4))
    free(*(void **)(v1 + 8));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B194FAD8@<X0>(CFX::RG::ResourceIdentifier *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = CFX::RG::ResourceIdentifier::finalColor(a1);
  return sub_1B17A371C(a2, v4, 1);
}

unint64_t sub_1B194FB40(uint64_t a1)
{
  unint64_t v1;

  v1 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * *(_QWORD *)(a1 + 48)) ^ ((0x9DDFEA08EB382D69 * *(_QWORD *)(a1 + 48)) >> 47));
  return 0x9DDFEA08EB382D69 * (v1 ^ (v1 >> 47));
}

uint64_t sub_1B194FB6C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v11 = (void *)sub_1B1814A78(a1[3], a2, a3, a4, a5, a6, a7, a8);
  v12 = a1[6];
  v13 = (void *)a1[7];
  v14 = a1[3];
  v18 = objc_msgSend_commandQueue(v11, v15, v16, v17);
  return sub_1B1C614C4(a2, a3, v12, v13, v14, v18);
}

uint64_t sub_1B194FBCC(uint64_t a1)
{
  return a1 + 32;
}

void sub_1B194FEF0(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

CFStringRef sub_1B194FFA8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B193E5B0(v5, *(CFStringRef *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19502FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  if ((sub_1B18C2F24(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 32));
    objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 40) + 40), v10, *(_QWORD *)(a1 + 48), v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 32));
  }
}

void sub_1B19504CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C30E4(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B1950578(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3148(*(void **)(a1 + 32), a2, a3, a4, *(float *)(a1 + 40));
}

void sub_1B1950634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C2FF4(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4);
}

void sub_1B19506F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3064(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4, *(float *)(a1 + 48));
}

void sub_1B1950BD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFXBinding *v24;

  v5 = (_QWORD *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  v24 = objc_alloc_init(CFXBinding);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(_QWORD *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(_QWORD *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(_QWORD *)(a1 + 64), v17);
  sub_1B193F4C8(v5, v24, v18, v19, v20, v21, v22, v23);

}

void sub_1B1950D04(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F704(v5, *(const __CFString **)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B1950DB0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F68C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void *sub_1B1951180(void *a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[128];
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v6 = objc_msgSend_count(a1, v3, v4, v5);
  v9 = (void *)objc_msgSend_initWithCapacity_(v2, v7, v6, v8);
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v10, (uint64_t)&v19, (uint64_t)v23, 16);
  if (v11)
  {
    v14 = v11;
    v15 = *(_QWORD *)v20;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v20 != v15)
          objc_enumerationMutation(a1);
        v17 = objc_msgSend_meshWithMeshRef_(VFXMesh, v12, *(_QWORD *)(*((_QWORD *)&v19 + 1) + 8 * v16), v13);
        if (v17)
          objc_msgSend_addObject_(v9, v12, v17, v13);
        ++v16;
      }
      while (v14 != v16);
      v14 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v12, (uint64_t)&v19, (uint64_t)v23, 16);
    }
    while (v14);
  }
  return v9;
}

void *sub_1B19512AC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a3;
  v5 = (unint64_t)a2;
  v7 = &a2[a3];
  if ((unint64_t)&a2[a3] > objc_msgSend_count(a1, a2, a3, a4))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Invalid range"), v8, v9, v10, v11, v12, v13, (uint64_t)"range.location + range.length <= targets.count");
  v14 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v19 = (void *)objc_msgSend_initWithCapacity_(v14, v15, v4, v16);
  if (v5 < (unint64_t)v7)
  {
    do
    {
      v20 = objc_msgSend_objectAtIndexedSubscript_(a1, v17, v5, v18);
      v23 = objc_msgSend_meshWithMeshRef_(VFXMesh, v21, v20, v22);
      if (v23)
        objc_msgSend_addObject_(v19, v17, v23, v18);
      ++v5;
      --v4;
    }
    while (v4);
  }
  return v19;
}

void sub_1B19514B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const __CFArray *v12;

  v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    v6 = v5;
    v12 = (const __CFArray *)sub_1B195151C(*(void **)(a1 + 40));
    sub_1B1941D64(v6, v12, *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 161), v7, v8, v9, v10, v11);

  }
}

void *sub_1B195151C(void *a1)
{
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = objc_alloc(MEMORY[0x1E0C99DE8]);
  v6 = objc_msgSend_count(a1, v3, v4, v5);
  v9 = (void *)objc_msgSend_initWithCapacity_(v2, v7, v6, v8);
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v10, (uint64_t)&v22, (uint64_t)v26, 16);
  if (v11)
  {
    v15 = v11;
    v16 = *(_QWORD *)v23;
    do
    {
      v17 = 0;
      do
      {
        if (*(_QWORD *)v23 != v16)
          objc_enumerationMutation(a1);
        v18 = objc_msgSend_meshRef(*(void **)(*((_QWORD *)&v22 + 1) + 8 * v17), v12, v13, v14);
        objc_msgSend_addObject_(v9, v19, v18, v20);
        ++v17;
      }
      while (v15 != v17);
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v12, (uint64_t)&v22, (uint64_t)v26, 16);
    }
    while (v15);
  }
  return v9;
}

void sub_1B1951940(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;

  v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
  {
    v9 = v5;
    v10 = objc_msgSend_count(*(void **)(a1 + 40), v6, v7, v8);
    if (v10 >= 1)
    {
      v13 = v10;
      for (i = 0; i != v13; ++i)
      {
        v15 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v11, i, v12);
        objc_msgSend_floatValue(v15, v16, v17, v18);
        sub_1B19422D0(v9, i, v19, v20, v21, v22, v23, v24, v25);
      }
    }
  }
}

uint64_t sub_1B1951C50()
{
  uint64_t i;
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t result;

  for (i = 0; i != 128; ++i)
  {
    v1 = objc_alloc(MEMORY[0x1E0CB3940]);
    result = objc_msgSend_initWithFormat_(v1, v2, (uint64_t)CFSTR("weights[%d]"), v3, i);
    qword_1EEF665A8[i] = result;
  }
  return result;
}

void sub_1B1951E2C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (v5)
    sub_1B19422D0(v5, *(_QWORD *)(a1 + 40), v6, v7, v8, v9, v10, v11, *(float *)(a1 + 48));
}

BOOL sub_1B1952AEC(_BOOL8 result, char *a2, void *a3, void *a4)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[128];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, a2, (uint64_t)&v36, (uint64_t)v40, 16);
    if (v6)
    {
      v10 = v6;
      v11 = 0;
      v12 = 0;
      v13 = *(_QWORD *)v37;
      while (2)
      {
        for (i = 0; i != v10; ++i)
        {
          if (*(_QWORD *)v37 != v13)
            objc_enumerationMutation(a3);
          v15 = objc_msgSend_unsignedIntegerValue(*(void **)(*((_QWORD *)&v36 + 1) + 8 * i), v7, v8, v9);
          v11 += v15;
          if (v11 - 1 >= (unint64_t)objc_msgSend_count(a2, v16, v17, v18))
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Invalid in-between count (out of bounds) passed to morpher initialization"), v20, v21, v22, v23, v24, v25, (uint64_t)"inBetweenIndex < targetsAndInBetweens.count");
          if (v11 - 1 >= (unint64_t)objc_msgSend_count(a2, v19, v20, v21))
            return 0;
          v12 = v12 + v15 - 1;
        }
        v10 = objc_msgSend_countByEnumeratingWithState_objects_count_(a3, v7, (uint64_t)&v36, (uint64_t)v40, 16);
        if (v10)
          continue;
        break;
      }
    }
    else
    {
      v12 = 0;
    }
    if (objc_msgSend_count(a4, v7, v8, v9) != v12)
    {
      objc_msgSend_count(a4, v26, v27, v28);
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Expected %u in-betweens but found %u"), v29, v30, v31, v32, v33, v34, (uint64_t)"inBetweenWeights.count == inBetweenCountValidation");
    }
    return objc_msgSend_count(a4, v26, v27, v28) == v12;
  }
  return result;
}

id sub_1B1952CA0(id result, const char *a2, void **a3, void **a4)
{
  void *v7;
  void *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  unint64_t v18;
  unint64_t v19;
  float v20;
  uint64_t v21;
  unint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  id v28;
  id v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  id v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t i;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  id v87;
  char *v88;
  void **v89;
  void **v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id obj;
  void *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _QWORD v101[6];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[128];
  _BYTE v111[128];
  _BYTE v112[128];
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  if (result)
  {
    v7 = *(void **)a2;
    v8 = *a3;
    v9 = *a4;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v109 = 0u;
    obj = v8;
    v96 = v7;
    result = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(v8, a2, (uint64_t)&v106, (uint64_t)v112, 16);
    if (result)
    {
      v13 = result;
      v88 = (char *)a2;
      v89 = a3;
      v90 = a4;
      v14 = 0;
      v15 = *(_QWORD *)v107;
      v16 = 1;
      do
      {
        v17 = 0;
        do
        {
          if (*(_QWORD *)v107 != v15)
            objc_enumerationMutation(obj);
          v18 = objc_msgSend_unsignedIntegerValue(*(void **)(*((_QWORD *)&v106 + 1) + 8 * (_QWORD)v17), v10, v11, v12);
          if (v18 >= 2)
          {
            v19 = v18 - 1;
            v20 = 0.0;
            v21 = v14;
            v22 = v18 - 1;
            while (1)
            {
              v23 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v10, v21, v12);
              objc_msgSend_floatValue(v23, v24, v25, v26);
              if (v20 > v27)
                break;
              ++v21;
              v20 = v27;
              if (!--v22)
                goto LABEL_13;
            }
            v16 = 0;
LABEL_13:
            v14 += v19;
          }
          v17 = (char *)v17 + 1;
        }
        while (v17 != v13);
        result = (id)objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v10, (uint64_t)&v106, (uint64_t)v112, 16);
        v13 = result;
      }
      while (result);
      if ((v16 & 1) == 0)
      {
        v28 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
        v29 = objc_alloc(MEMORY[0x1E0C99DE8]);
        v33 = objc_msgSend_count(v96, v30, v31, v32);
        v36 = (void *)objc_msgSend_initWithCapacity_(v29, v34, v33, v35);
        v37 = objc_alloc(MEMORY[0x1E0C99DE8]);
        v41 = objc_msgSend_count(v9, v38, v39, v40);
        v44 = (void *)objc_msgSend_initWithCapacity_(v37, v42, v41, v43);
        v102 = 0u;
        v103 = 0u;
        v104 = 0u;
        v105 = 0u;
        v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v45, (uint64_t)&v102, (uint64_t)v111, 16);
        if (v46)
        {
          v50 = v46;
          v51 = 0;
          v52 = 0;
          v94 = *(_QWORD *)v103;
          v53 = 0x1E0CB3000uLL;
          do
          {
            v54 = 0;
            v91 = v50;
            do
            {
              if (*(_QWORD *)v103 != v94)
                objc_enumerationMutation(obj);
              v57 = objc_msgSend_unsignedIntegerValue(*(void **)(*((_QWORD *)&v102 + 1) + 8 * v54), v47, v48, v49);
              v58 = v52;
              if (v57 >= 2)
              {
                v93 = v54;
                objc_msgSend_removeAllObjects(v28, v55, v52, v56);
                v61 = 0;
                v92 = v57;
                v62 = v57 - 1;
                do
                {
                  v63 = objc_msgSend_numberWithUnsignedInteger_(*(void **)(v53 + 2024), v59, v61, v60);
                  objc_msgSend_addObject_(v28, v64, v63, v65);
                  ++v61;
                }
                while (v62 != v61);
                v101[0] = MEMORY[0x1E0C809B0];
                v101[1] = 3221225472;
                v101[2] = sub_1B1953408;
                v101[3] = &unk_1E63D9B60;
                v101[4] = v9;
                v101[5] = v51;
                objc_msgSend_sortUsingComparator_(v28, v59, (uint64_t)v101, v60);
                v99 = 0u;
                v100 = 0u;
                v97 = 0u;
                v98 = 0u;
                v67 = objc_msgSend_countByEnumeratingWithState_objects_count_(v28, v66, (uint64_t)&v97, (uint64_t)v110, 16);
                if (v67)
                {
                  v69 = v67;
                  v70 = *(_QWORD *)v98;
                  do
                  {
                    v71 = v28;
                    for (i = 0; i != v69; ++i)
                    {
                      if (*(_QWORD *)v98 != v70)
                        objc_enumerationMutation(v71);
                      v73 = objc_msgSend_unsignedIntegerValue(*(void **)(*((_QWORD *)&v97 + 1) + 8 * i), v55, v68, v56);
                      v76 = objc_msgSend_objectAtIndexedSubscript_(v96, v74, v73 + v52, v75);
                      objc_msgSend_addObject_(v36, v77, v76, v78);
                      v81 = objc_msgSend_objectAtIndexedSubscript_(v9, v79, v73 + v51, v80);
                      objc_msgSend_addObject_(v44, v82, v81, v83);
                    }
                    v28 = v71;
                    v69 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v55, (uint64_t)&v97, (uint64_t)v110, 16);
                  }
                  while (v69);
                }
                v50 = v91;
                v57 = v92;
                v58 = v52 + v92 - 1;
                v53 = 0x1E0CB3000;
                v54 = v93;
              }
              v84 = objc_msgSend_objectAtIndexedSubscript_(v96, v55, v58, v56);
              objc_msgSend_addObject_(v36, v85, v84, v86);
              v52 += v57;
              v51 = v51 + v57 - 1;
              ++v54;
            }
            while (v54 != v50);
            v50 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v47, (uint64_t)&v102, (uint64_t)v111, 16);
          }
          while (v50);
        }

        v87 = v36;
        result = v44;
        *(_QWORD *)v88 = v87;
        *v89 = obj;
        *v90 = result;
      }
    }
  }
  return result;
}

void sub_1B19530AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t i;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t j;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  size_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD *v31;
  uint64_t k;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  _DWORD *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  _DWORD *v47;
  uint64_t m;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  _DWORD *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  unsigned int v61;
  unsigned int v62;
  uint64_t v63;
  const void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t n;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  _DWORD v82[2];
  _DWORD *v83;
  _DWORD *v84;
  unsigned int v85;
  int v86;
  _DWORD *v87;
  unsigned int v88;
  int v89;
  _DWORD *v90;
  unsigned int v91;
  int v92;
  _DWORD *v93;
  _DWORD *v94;

  if (*(_BYTE *)(a1 + 104))
  {
    v5 = objc_msgSend_count(*(void **)(a1 + 32), a2, a3, a4);
    v9 = malloc_type_malloc(4 * v5, 0x100004052888210uLL);
    if (v5)
    {
      for (i = 0; i != v5; v9[i++] = objc_msgSend_intValue(v11, v12, v13, v14))
        v11 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 32), v6, i, v8);
    }
    v15 = objc_msgSend_count(*(void **)(a1 + 40), v6, v7, v8);
    v19 = malloc_type_malloc(4 * v15, 0x100004052888210uLL);
    if (v15)
    {
      for (j = 0; j != v15; v19[j++] = v25)
      {
        v21 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v16, j, v18);
        objc_msgSend_floatValue(v21, v22, v23, v24);
      }
    }
  }
  else
  {
    v19 = 0;
    v9 = 0;
    v15 = 0;
    v5 = objc_msgSend_count(*(void **)(a1 + 48), a2, a3, a4);
  }
  v80 = v15;
  v81 = v5;
  if (*(_BYTE *)(a1 + 105))
  {
    v26 = objc_msgSend_count(*(void **)(a1 + 56), v16, v17, v18);
    v27 = 4 * v26;
    v31 = malloc_type_malloc(v27, 0x100004052888210uLL);
    if (v26)
    {
      for (k = 0; k != v26; v31[k++] = objc_msgSend_intValue(v33, v34, v35, v36))
        v33 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 56), v28, k, v30);
    }
    v78 = v26;
    v37 = objc_msgSend_count(*(void **)(a1 + 64), v28, v29, v30);
    v38 = malloc_type_malloc(4 * v37, 0x100004052888210uLL);
    v77 = v37;
    if (v37)
    {
      v39 = 0;
      do
      {
        v40 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 64), v16, v39, v18);
        v38[v39++] = objc_msgSend_intValue(v40, v41, v42, v43);
      }
      while (v77 != v39);
    }
    if (*(_BYTE *)(a1 + 106))
    {
      v47 = malloc_type_malloc(v27, 0x100004052888210uLL);
      if (v78)
      {
        for (m = 0; m != v78; v47[m++] = objc_msgSend_intValue(v49, v50, v51, v52))
          v49 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 72), v44, m, v46);
      }
      v53 = objc_msgSend_count(*(void **)(a1 + 80), v44, v45, v46);
      v54 = malloc_type_malloc(4 * v53, 0x100004052888210uLL);
      if (v53)
      {
        v55 = 0;
        v79 = v53;
        do
        {
          v56 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 80), v16, v55, v18);
          objc_msgSend_floatValue(v56, v57, v58, v59);
          v54[v55++] = v60;
        }
        while (v53 != v55);
      }
      else
      {
        v79 = 0;
      }
    }
    else
    {
      v79 = 0;
      v47 = 0;
      v54 = 0;
    }
    v62 = v77;
    v61 = v78;
  }
  else
  {
    v61 = 0;
    v31 = 0;
    v62 = 0;
    v38 = 0;
    v79 = 0;
    v47 = 0;
    v54 = 0;
  }
  v63 = objc_msgSend_morphRef(*(void **)(a1 + 88), v16, v17, v18);
  v64 = *(const void **)(a1 + 96);
  v65 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 88) + 161);
  v82[0] = v81;
  v82[1] = v80;
  v83 = v9;
  v84 = v19;
  v85 = v61;
  v86 = 0;
  v87 = v31;
  v88 = v62;
  v89 = 0;
  v90 = v38;
  v91 = v79;
  v92 = 0;
  v93 = v47;
  v94 = v54;
  sub_1B19418D8(v63, v64, v65, (uint64_t)v82, v66, v67, v68, v69);
  free(v9);
  free(v19);
  free(v31);
  free(v38);
  free(v47);
  free(v54);
  if (v81)
  {
    for (n = 0; n != v81; sub_1B19422D0(v63, n++, v70, v71, v72, v73, v74, v75, 0.0))
      ;
  }
}

uint64_t sub_1B1953408(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  float v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;

  v6 = *(void **)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = objc_msgSend_unsignedIntegerValue(a2, (const char *)a2, (uint64_t)a3, a4);
  v11 = (void *)objc_msgSend_objectAtIndexedSubscript_(v6, v9, v8 + v7, v10);
  objc_msgSend_floatValue(v11, v12, v13, v14);
  v16 = v15;
  v18 = *(void **)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  v22 = objc_msgSend_unsignedIntegerValue(a3, v19, v20, v21);
  v25 = (void *)objc_msgSend_objectAtIndexedSubscript_(v18, v23, v22 + v17, v24);
  objc_msgSend_floatValue(v25, v26, v27, v28);
  if (v16 < v29)
    return -1;
  else
    return v16 > v29;
}

uint64_t sub_1B1953510(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (result)
    return sub_1B1941860(result, *(_QWORD *)(a1 + 40) == 1);
  return result;
}

uint64_t sub_1B1953660(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  if (result)
    return sub_1B19425F8(result, *(_BYTE *)(a1 + 40) == 0);
  return result;
}

void sub_1B19537B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B1942FD0(v5, *(float *)(a1 + 40), v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1B1953858(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  v9 = objc_msgSend_meshRef(*(void **)(a1 + 40), v6, v7, v8);
  sub_1B1942AB4(v5, v9, 1, (uint64_t)&unk_1E63D1AB0, v10, v11, v12, v13, v18);
  return objc_msgSend__syncObjCModel(*(void **)(a1 + 32), v14, v15, v16);
}

id *sub_1B19538A4(uint64_t a1, uint64_t a2, id *a3, uint64_t a4)
{
  id *result;
  const char *v6;
  uint64_t v7;
  id *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1B193E758(a3);
  if (result)
  {
    v8 = result;
    v9 = objc_msgSend_geometrySourceWithMeshSourceRef_(VFXMeshSource, v6, a4, v7);
    v13 = objc_msgSend__encodeDataAsHalf(v8, v10, v11, v12);
    return (id *)MEMORY[0x1E0DE7D20](v9, sel_set_encodeDataAsHalf_, v13, v14);
  }
  return result;
}

uint64_t sub_1B1953988(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = objc_msgSend_morphRef(*(void **)(a1 + 32), a2, a3, a4);
  v9 = objc_msgSend_meshRef(*(void **)(a1 + 40), v6, v7, v8);
  sub_1B19426F0(v5, v9, 1, (uint64_t)&unk_1E63D1AB0, v10, v11, v12, v13);
  return objc_msgSend__syncObjCModel(*(void **)(a1 + 32), v14, v15, v16);
}

uint64_t sub_1B1954584(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_mesh(a2, (const char *)a2, a3, a4);
}

uint64_t sub_1B195458C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_mesh(a2, (const char *)a2, a3, a4);
}

unint64_t sub_1B1954D58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned __int8 v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t result;
  char v77;

  for (i = 0; i != 8; ++i)
  {
    v7 = (void *)objc_msgSend_colorAttachments(a2, (const char *)a2, a3, a4);
    v10 = (void *)objc_msgSend_objectAtIndexedSubscript_(v7, v8, i, v9);
    v14 = (void *)objc_msgSend_texture(v10, v11, v12, v13);
    *(_QWORD *)(a1 + 8 * i) = objc_msgSend_pixelFormat(v14, v15, v16, v17);
  }
  v18 = (void *)objc_msgSend_depthAttachment(a2, (const char *)a2, a3, a4);
  v22 = (void *)objc_msgSend_texture(v18, v19, v20, v21);
  *(_QWORD *)(a1 + 64) = objc_msgSend_pixelFormat(v22, v23, v24, v25);
  v29 = (void *)objc_msgSend_stencilAttachment(a2, v26, v27, v28);
  v33 = (void *)objc_msgSend_texture(v29, v30, v31, v32);
  *(_QWORD *)(a1 + 72) = objc_msgSend_pixelFormat(v33, v34, v35, v36);
  *(_BYTE *)(a1 + 80) = 1;
  v40 = (void *)objc_msgSend_colorAttachments(a2, v37, v38, v39);
  v43 = (void *)objc_msgSend_objectAtIndexedSubscript_(v40, v41, 0, v42);
  v47 = (void *)objc_msgSend_texture(v43, v44, v45, v46);
  v51 = objc_msgSend_sampleCount(v47, v48, v49, v50);
  if (v51 <= 1)
    v55 = 1;
  else
    v55 = v51;
  *(_BYTE *)(a1 + 80) = v55;
  v56 = (void *)objc_msgSend_depthAttachment(a2, v52, v53, v54);
  v60 = (void *)objc_msgSend_texture(v56, v57, v58, v59);
  v64 = objc_msgSend_sampleCount(v60, v61, v62, v63);
  if (v55 <= v64)
    v55 = v64;
  *(_BYTE *)(a1 + 80) = v55;
  v68 = (void *)objc_msgSend_stencilAttachment(a2, v65, v66, v67);
  v72 = (void *)objc_msgSend_texture(v68, v69, v70, v71);
  result = objc_msgSend_sampleCount(v72, v73, v74, v75);
  v77 = v55;
  if (v55 <= result)
    v77 = result;
  *(_BYTE *)(a1 + 80) = v77;
  return result;
}

id sub_1B1954E40(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  const void *v7;
  id v8;
  id v9;
  id v10;

  v2 = *(void **)(a1 + 8);
  v3 = *(id *)a1;
  v4 = v2;
  v5 = *(id *)(a1 + 104);
  v6 = *(id *)(a1 + 288);
  v7 = *(const void **)(a1 + 200);
  if (v7)
    CFRetain(v7);
  v8 = *(id *)(a1 + 280);
  v9 = *(id *)(a1 + 296);
  v10 = *(id *)(a1 + 304);
  return *(id *)(a1 + 312);
}

void sub_1B1954EA0(uint64_t a1)
{
  void *v2;
  const void *v3;

  v2 = *(void **)(a1 + 8);

  v3 = *(const void **)(a1 + 200);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 200) = 0;
  }

}

void sub_1B1955890(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 8);
}

void sub_1B19558A4(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 16);
}

uint64_t sub_1B19558B8(uint64_t result, void *a2)
{
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v3 = result;
    v4 = *(void **)(result + 16);
    if (v4 != a2)
    {

      *(_QWORD *)(v3 + 16) = objc_msgSend_copy(a2, v5, v6, v7);
      result = objc_msgSend_hash(a2, v8, v9, v10);
      *(_QWORD *)(v3 + 32) = result;
    }
  }
  return result;
}

uint64_t sub_1B1955904(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  if (result)
  {
    v8 = result;
    if (!*(_QWORD *)(result + 16))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_vertexDescriptor");
    return *(_QWORD *)(v8 + 32);
  }
  return result;
}

_QWORD *sub_1B19559E4(_QWORD *result, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  if (result)
  {
    v4 = result;
    objc_msgSend_buildTessellationVertexDescriptorIfNeeded(result, a2, a3, a4);
    return (_QWORD *)v4[3];
  }
  return result;
}

_QWORD *sub_1B1955A0C(_QWORD *result, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  if (result)
  {
    v4 = result;
    objc_msgSend_buildTessellationVertexDescriptorIfNeeded(result, a2, a3, a4);
    return (_QWORD *)v4[5];
  }
  return result;
}

uint64_t sub_1B1955C8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;

  if (a1
    && (v6 = (void *)objc_msgSend_attributes(*(void **)(a1 + 16), a2, a3, a4),
        v9 = (void *)objc_msgSend_objectAtIndexedSubscript_(v6, v7, (uint64_t)a2, v8),
        v13 = objc_msgSend_bufferIndex(v9, v10, v11, v12),
        v13 >= 18))
  {
    return objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 48), v14, v13 - 18, v15);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1955CE0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

void sub_1B1955CEC(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 48);
}

uint64_t sub_1B1955D00(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 56);
  return result;
}

void sub_1B1955D0C(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 56);
}

uint64_t sub_1B1955D20(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

void sub_1B1955D2C(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 72);
}

uint64_t sub_1B1955D40(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 80);
  return result;
}

uint64_t sub_1B1955D4C(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 80) = a2;
  return result;
}

uint64_t sub_1B1955D58(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 88);
  return result;
}

uint64_t sub_1B1955D64(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 88) = a2;
  return result;
}

uint64_t sub_1B1955D70(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

uint64_t sub_1B1955D7C(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 96) = a2;
  return result;
}

uint64_t sub_1B1955D88(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 104) = a2;
  return result;
}

uint64_t sub_1B1955D94(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 8) = a2;
  return result;
}

void sub_1B1955E70(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic(a1, newValue, newValue, 40);
}

uint64_t sub_1B1955EF4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 64);
  return result;
}

_QWORD *sub_1B1955F00(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;

  if (result)
  {
    v9 = result;
    v10 = sub_1B17A426C(a2, a2, a3, a4, a5, a6, a7, a8);
    v9[1] = sub_1B189D274(v10, v11, v12, v13, v14, v15, v16, v17);
    v9[2] = sub_1B17A4304(a2, v18, v19, v20, v21, v22, v23, v24);
    v41 = 0;
    if ((sub_1B17A4570(a2, &v41) || sub_1B17A4568(a2)) && v41 - 1 >= 2)
    {
      if (v41 == 4)
      {
        v32 = 1;
LABEL_9:
        v9[7] = v32;
        v9[3] = sub_1B17A5008(a2, v25, v26, v27, v28, v29, v30, v31);
        v39 = sub_1B17A4584(a2);
        return sub_1B1955FEC(v9, v39, v40);
      }
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Invalid index size (%d bytes per index)"), v26, v27, v28, v29, v30, v31, v41);
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid index size (%d bytes per index)"), v33, v34, v35, v36, v37, v38, v41);
    }
    v32 = 0;
    goto LABEL_9;
  }
  return result;
}

_QWORD *sub_1B1955FEC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    if (a2 == -1)
    {
      result[8] = 0;
      a3 = result[2];
LABEL_10:
      result[9] = a3;
    }
    else
    {
      switch(result[1])
      {
        case 0:
          result[8] = a2;
          goto LABEL_10;
        case 1:
          result[8] = 2 * a2;
          a3 *= 2;
          goto LABEL_10;
        case 2:
          result[8] = a2;
          ++a3;
          goto LABEL_10;
        case 3:
          result[8] = 3 * a2;
          a3 *= 3;
          goto LABEL_10;
        case 4:
          result[8] = a2;
          a3 += 2;
          goto LABEL_10;
        default:
          return result;
      }
    }
  }
  return result;
}

uint64_t sub_1B195606C(uint64_t result)
{
  if (result)
  {
    switch(*(_QWORD *)(result + 8))
    {
      case 0:
        result = *(_QWORD *)(result + 16);
        break;
      case 1:
        result = *(_QWORD *)(result + 16) / 2;
        break;
      case 2:
        result = *(_QWORD *)(result + 16) - 1;
        break;
      case 3:
        result = *(_QWORD *)(result + 16) / 3;
        break;
      case 4:
        result = *(_QWORD *)(result + 16) - 2;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_1B19560E8(uint64_t result)
{
  if (result)
  {
    switch(*(_QWORD *)(result + 8))
    {
      case 0:
        result = *(_QWORD *)(result + 72);
        break;
      case 1:
        result = *(_QWORD *)(result + 72) / 2;
        break;
      case 2:
        result = *(_QWORD *)(result + 72) - 1;
        break;
      case 3:
        result = *(_QWORD *)(result + 72) / 3;
        break;
      case 4:
        result = *(_QWORD *)(result + 72) - 2;
        break;
      default:
        result = 0;
        break;
    }
  }
  return result;
}

uint64_t sub_1B1956164(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_1B1956170(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_1B195617C(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 32) = a2;
  return result;
}

uint64_t sub_1B1956188(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_1B195685C(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B1956888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  int v9;
  int v10;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BOOL4 v27;
  uint64_t v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 v44;
  int v45;

  v8 = a6;
  v9 = a5;
  v10 = a4;
  v14 = sub_1B18425B0(a3, a4, a3, a4, a5, a6, a7, a8);
  v20 = sub_1B1840E70(a3, v10, 0, v15, v16, v17, v18, v19);
  v27 = 0;
  if (v10 != 3 && v20)
    v27 = sub_1B1842B54(v20);
  if (!a3 || v10 == 3)
  {
    v31 = v9 & 0xFFFFFFFE | v14;
    if (!v14)
      return v31;
  }
  else
  {
    v28 = sub_1B1841ED8(a3, v10, v21, v22, v23, v24, v25, v26);
    if (v28 == -1)
      v28 = sub_1B1840C88(v10);
    if (v28 == -1)
      v29 = 0;
    else
      v29 = v14;
    if (v29 == 1)
    {
      if (sub_1B1875540(a2, 3, v28, 0, v23, v24, v25, v26))
      {
        v30 = 1;
        goto LABEL_24;
      }
LABEL_21:
      if (v28 == -1 || (v8 & 1) == 0)
        return v9 & 0xFFE1FFFE | ((v28 & 0xF) << 17);
      v30 = 0;
LABEL_24:
      v31 = v9 & 0xFFE1FFFE | v30 & 0xFFE1FFFF | ((sub_1B1956A7C(a1, v28, v27, v10) & 0xF) << 17);
      if ((v30 & 1) == 0)
        return v31;
      goto LABEL_25;
    }
    if (v28 == -1)
      v32 = v14;
    else
      v32 = 0;
    if (v32 != 1)
      goto LABEL_21;
    LODWORD(v31) = v9 | 0x1E0001;
  }
LABEL_25:
  v45 = 0;
  v44 = 1;
  v33 = sub_1B1840E70(a3, v10, 0, v22, v23, v24, v25, v26);
  if (!v33 || (sub_1B1842FF4(v33, &v45, (char *)&v44, v35, v36, v37, v38, v39), (v40 = v45) == 0))
  {
    v40 = 2;
    v45 = 2;
  }
  if (v27)
    v41 = 2048;
  else
    v41 = 0;
  v42 = v31 & 0xFFFFF41F | (v44 << 9) | v41;
  if (v40 >= 7)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. __UpdateHashCodeWithTextureType:inconsistent textureType"), v34, v35, v36, v37, v38, v39, (uint64_t)"textureType < 7");
    v40 = v45;
  }
  return v42 | (32 * v40);
}

uint64_t sub_1B1956A7C(uint64_t a1, uint64_t a2, int a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  int v10;

  v4 = *(unsigned __int8 *)(a1 + 159);
  if ((a3 & 1) != 0)
  {
LABEL_7:
    LODWORD(v5) = *(unsigned __int8 *)(a1 + 159);
LABEL_8:
    v7 = a1 + 2 * v4;
    *(_BYTE *)(v7 + 160) = a2;
    if (!a3)
      a4 = -1;
    *(_BYTE *)(v7 + 161) = a4;
    *(_BYTE *)(a1 + 159) = v4 + 1;
    return v5;
  }
  if (*(_BYTE *)(a1 + 159))
  {
    v5 = 0;
    v6 = (unsigned __int8 *)(a1 + 161);
    while (*(v6 - 1) != a2 || *v6 != 255)
    {
      v6 += 2;
      if (v4 == ++v5)
        goto LABEL_7;
    }
    v10 = *(unsigned __int8 *)(a1 + 159);
  }
  else
  {
    v10 = 0;
    LODWORD(v5) = 0;
  }
  if ((_DWORD)v5 == v10)
    goto LABEL_8;
  return v5;
}

uint64_t sub_1B1956AFC(uint64_t a1, uint64_t a2, uint64_t a3, _WORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  const __CFDictionary *v12;
  uint64_t v13;
  unint64_t v14;
  const __CFArray *v15;
  uint64_t v16;
  CFIndex Count;
  uint64_t v18;
  CFArrayRef Copy;
  CFArrayRef v20;
  CFTypeRef v21;
  const void *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const __CFDictionary *v31;
  unint64_t v32;
  CFIndex v33;
  const void *ValueAtIndex;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t valuePtr;

  v9 = a3;
  v12 = sub_1B193F97C(a2, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = a1 + 16;
  v14 = *(_QWORD *)(a1 + 16 + 8 * v9);
  if (!((unint64_t)v12 | v14))
    goto LABEL_25;
  v15 = v12;
  if (v12)
  {
    if (v14 && CFEqual(v12, (CFTypeRef)v14))
      goto LABEL_25;
  }
  v16 = v9;
  Count = CFArrayGetCount(v15);
  if (v15)
  {
    v18 = Count;
    if (Count)
    {
      Copy = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v15);
      v20 = *(CFArrayRef *)(v13 + 8 * v16);
      if (v20 != Copy)
      {
        if (v20)
        {
          CFRelease(v20);
          *(_QWORD *)(v13 + 8 * v16) = 0;
        }
        if (Copy)
          v21 = CFRetain(Copy);
        else
          v21 = 0;
        *(_QWORD *)(v13 + 8 * v16) = v21;
      }
      CFRelease(Copy);
      v31 = sub_1B193FACC(a2, v24, v25, v26, v27, v28, v29, v30);
      if (v31)
      {
        valuePtr = 0;
        CFNumberGetValue(v31, kCFNumberNSIntegerType, &valuePtr);
        v32 = *(unsigned int *)(a1 + 32);
        if (valuePtr > v32)
          LODWORD(v32) = valuePtr;
        *(_DWORD *)(a1 + 32) = v32;
      }
      if (v18 >= 1)
      {
        v33 = 0;
        v23 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v15, v33);
          v23 |= sub_1B19B9728((uint64_t)ValueAtIndex, v35, v36, v37, v38, v39, v40, v41);
          *a4 |= sub_1B19B9770((uint64_t)ValueAtIndex, v42, v43, v44, v45, v46, v47, v48);
          ++v33;
        }
        while (v18 != v33);
        return (__int16)v23;
      }
LABEL_25:
      LOWORD(v23) = 0;
      return (__int16)v23;
    }
  }
  v22 = *(const void **)(v13 + 8 * v16);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(v13 + 8 * v16) = 0;
  }
  LOWORD(v23) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return (__int16)v23;
}

void sub_1B1956C7C(uint64_t a1, const void *a2, CFTypeRef cf)
{
  uint64_t v3;
  CFTypeID v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL4 v38;

  v3 = (uint64_t)cf;
  v6 = CFGetTypeID(cf);
  if (v6 == sub_1B191E200())
  {
    if (sub_1B191E4AC(v3, v7, v8, v9, v10, v11, v12, v13) != 1)
      return;
    v3 = *(_QWORD *)sub_1B191E41C(v3, v14, v15, v16, v17, v18, v19, v20);
  }
  else if (v6 != sub_1B1843480())
  {
    return;
  }
  if (v3)
  {
    v27 = *(_QWORD *)(a1 + 32);
    v28 = *(unsigned __int8 *)(v27 + 158);
    if (v28 == 8)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: Too many uniform custom samplers given (Max is %d)"), v21, v22, v23, v24, v25, v26, 8);
    }
    else
    {
      *(_QWORD *)(v27 + 8 * v28 + 208) = a2;
      CFRetain(a2);
      v36 = sub_1B1841F58(v3, v29, v30, v31, v32, v33, v34, v35);
      if (v36 == -1)
        v37 = 0;
      else
        v37 = v36;
      v38 = sub_1B1842B54(v3);
      *(_BYTE *)(*(_QWORD *)(a1 + 32) + v28 + 199) = sub_1B1956A7C(*(_QWORD *)(a1 + 32), v37, v38, v28 + 26);
      ++*(_BYTE *)(*(_QWORD *)(a1 + 32) + 158);
    }
  }
}

uint64_t sub_1B1956D7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 120);
}

uint64_t sub_1B1956D84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 156);
}

uint64_t sub_1B1956D8C(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 4 * a2 + 124);
}

uint64_t sub_1B1956D98(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 116);
}

uint64_t sub_1B1956DA0(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(a1 + 4 * a2 + 36);
}

uint64_t sub_1B1956DAC(uint64_t a1, unsigned int a2)
{
  return *(_DWORD *)(a1 + 4 * a2 + 36) & 1;
}

uint64_t sub_1B1956DBC(uint64_t a1, unsigned int a2)
{
  return (*(_DWORD *)(a1 + 4 * a2 + 36) >> 10) & 1;
}

uint64_t sub_1B1956DCC(uint64_t a1, unsigned int a2)
{
  return (*(_DWORD *)(a1 + 4 * a2 + 36) >> 5) & 0xF;
}

uint64_t sub_1B1956DDC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 272);
}

uint64_t sub_1B1956DE4(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 3) & 1;
}

uint64_t sub_1B1956DF0(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 6) & 1;
}

uint64_t sub_1B1956DFC(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 7) & 1;
}

uint64_t sub_1B1956E08(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 198) >> 3) & 1;
}

uint64_t sub_1B1956E14(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 198) >> 4) & 1;
}

uint64_t sub_1B1956E20(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 196) >> 13;
}

uint64_t sub_1B1956E2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 157);
}

uint64_t sub_1B1956E34(uint64_t a1)
{
  return *(_WORD *)(a1 + 196) & 1;
}

uint64_t sub_1B1956E40(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 1) & 1;
}

uint64_t sub_1B1956E4C(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 2) & 1;
}

uint64_t sub_1B1956E58(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 5) & 1;
}

uint64_t sub_1B1956E64(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 4) & 1;
}

uint64_t sub_1B1956E70(uint64_t a1)
{
  return HIBYTE(*(unsigned __int16 *)(a1 + 196)) & 1;
}

uint64_t sub_1B1956E7C(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 9) & 1;
}

uint64_t sub_1B1956E88(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 10) & 1;
}

uint64_t sub_1B1956E94(uint64_t a1)
{
  return (*(unsigned __int16 *)(a1 + 196) >> 11) & 1;
}

uint64_t sub_1B1956EA0(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 192);
}

uint64_t sub_1B1956EA8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 194);
}

uint64_t sub_1B1956EB0(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 195) >> 3) & 3;
}

uint64_t sub_1B1956EBC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 195) >> 5) & 3;
}

uint64_t sub_1B1956EC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 159);
}

uint64_t sub_1B1956ED0(uint64_t a1)
{
  return *(_BYTE *)(a1 + 198) & 7;
}

uint64_t sub_1B1956EDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a2 >= 16)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"index < CFX_MAX_TEXCOORD");
  return *(unsigned __int16 *)(a1 + 2 * a2 + 160);
}

const __CFString *sub_1B1956F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (*(unsigned __int8 *)(a1 + 158) > a2)
    return *(const __CFString **)(a1 + 8 * a2 + 208);
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: invalid custom texture materialProperty."), a3, a4, a5, a6, a7, a8, vars0);
  return CFSTR("unknown");
}

uint64_t sub_1B1956F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t vars0;

  if (*(unsigned __int8 *)(a1 + 158) > a2)
    return *(char *)(a1 + a2 + 199);
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: invalid custom texture materialProperty."), a3, a4, a5, a6, a7, a8, vars0);
  return -1;
}

uint64_t sub_1B1956FAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 158);
}

uint64_t sub_1B1956FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v11;

  result = sub_1B19B97B8(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result == *(_DWORD *)(a2 + 24) && *(_QWORD *)a2)
  {
    v11 = *(_QWORD *)(a2 + 16);
    if (v11 < *(_QWORD *)(a2 + 8))
    {
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v11) = a1;
      *(_QWORD *)(a2 + 16) = v11 + 1;
    }
  }
  return result;
}

uint64_t sub_1B1957004(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    return 0;
  v8 = a3;
  v10 = sub_1B186CC98(a2, a2, a3, a4, a5, a6, a7, a8);
  v11 = *a1;
  v12 = (v11 >> 6);
  if (!(v11 >> 6))
    return 0;
  v13 = 0;
  v14 = 0;
  do
  {
    v15 = *(_QWORD *)&a1[4 * v13 + 20];
    v16 = v14 | (1 << v13);
    if ((v15 & v10) == 0)
      v16 = v14;
    if (v8 != 3)
      v14 |= 1 << v13;
    if (v15 != 0xDEFA017DEFA017)
      v14 = v16;
    ++v13;
  }
  while (v12 != v13);
  return v14;
}

uint64_t sub_1B19570B0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  const __CFArray *v8;
  _QWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  CFRange v13;

  v4 = 0;
  v10[0] = a3;
  v10[1] = a4;
  v11 = 0;
  v5 = a1 + 16;
  v6 = 1;
  v12 = a2;
  do
  {
    v7 = v6;
    v8 = *(const __CFArray **)(v5 + 8 * v4);
    if (v8)
    {
      v13.length = CFArrayGetCount(*(CFArrayRef *)(v5 + 8 * v4));
      v13.location = 0;
      CFArrayApplyFunction(v8, v13, (CFArrayApplierFunction)sub_1B1956FB4, v10);
    }
    v6 = 0;
    v4 = 1;
  }
  while ((v7 & 1) != 0);
  return v11;
}

uint64_t sub_1B1957134(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

BOOL sub_1B195713C(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  uint64_t v15;
  int *v16;
  int *v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;

  if (!a3)
    return 1;
  v10 = *(_WORD *)(a2 + 116) & 0xF;
  if ((_DWORD)v10 == 3)
  {
    v11 = *a3;
    if ((*(_WORD *)(a2 + 196) & 0x1000) != 0)
    {
      v12 = (v11 >> 3) & 7;
      v13 = *(_WORD *)(a2 + 196) >> 13;
LABEL_9:
      if (v13 != v12)
        return 0;
    }
  }
  else
  {
    if ((*(_WORD *)(a2 + 116) & 0xD) != 0)
    {
      if ((*(_WORD *)(a2 + 196) & 0x40) == 0)
        return 0;
      v11 = *a3;
      v12 = v11 & 1;
      v13 = ((*(unsigned __int16 *)(a2 + 196) | (*(unsigned __int8 *)(a2 + 198) << 16)) >> 7) & 1;
      goto LABEL_9;
    }
    v11 = *a3;
  }
  if (*(unsigned __int8 *)(a2 + 156) == (v11 >> 6)
    && ((*(unsigned __int8 *)(a2 + 198) >> 4) & 1) == ((v11 >> 2) & 1))
  {
    v15 = (v11 >> 6);
    if ((_DWORD)v15)
    {
      v16 = (int *)(a2 + 124);
      v17 = (int *)(a3 + 2);
      while (1)
      {
        v19 = *v16++;
        v18 = v19;
        v20 = *v17++;
        if (v18 != v20)
          break;
        if (!--v15)
          goto LABEL_18;
      }
    }
    else
    {
LABEL_18:
      v21 = *(unsigned __int8 *)(a2 + 157);
      if (sub_1B1957004(a3, a1, v10, a4, a5, a6, a7, a8) == v21)
        return ((*(unsigned __int8 *)(a2 + 198) >> 3) & 1) == ((*a3 >> 1) & 1);
    }
  }
  return 0;
}

uint64_t sub_1B1957258(_QWORD *a1, __n128 *a2, uint64_t a3, uint64_t a4, unsigned __int16 *a5, uint64_t a6, unint64_t a7, uint64_t a8)
{
  unsigned int v9;
  int v10;
  uint64_t v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  _BOOL4 v53;
  _BOOL4 v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  _BOOL4 v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  unint64_t v76;
  unsigned int v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unsigned int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  float v88;
  unsigned int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  __int16 v125;
  int v126;
  _BOOL4 v127;
  __int16 v128;
  _BOOL4 v129;
  int v130;
  int v131;
  __int16 v132;
  int v133;
  _BOOL8 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int16 v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  _BOOL4 v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  __int16 v169;
  __int16 v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _BOOL4 v176;
  int v177;
  int v178;
  int v179;
  unsigned __int16 *v180;
  unsigned int v181;
  unsigned int v182;
  int v183;
  int v184;
  __int16 v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  __int16 v193;
  int v194;
  __int16 v195;
  int v196;
  uint64_t v197;
  char v198;
  int v199;
  char v200;
  const __CFArray *v201;
  uint64_t i;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  uint8x16_t v210;
  int8x16_t v211;
  int8x16_t v212;
  CFStringRef v213;
  uint64_t v214;
  char v215;
  char v216;
  const void *v217;
  unsigned int v218;
  unint64_t v219;
  const void *v220;
  int v223;
  int v225;
  int v226;
  int v227;
  unsigned int v229;
  _QWORD block[8];
  __n128 v234;
  unsigned __int16 v235;
  int data;
  _QWORD v237[5];
  int v238;
  CC_SHA256_CTX c;
  __int128 v240;
  _OWORD v241[4];
  __int128 v242;
  __int128 v243;
  _OWORD v244[5];
  __int128 v245;
  _OWORD v246[5];
  char cStr[8];
  char *v248;
  uint64_t v249;
  uint64_t v250;
  char v251;
  unsigned __int8 md[32];
  uint64_t v253;
  int8x16x2_t v254;

  v253 = *MEMORY[0x1E0C80C00];
  if (!a6)
    return 0;
  if (a5)
  {
    v9 = *a5;
    v10 = v9 & 1;
    v225 = (v9 >> 3) & 7;
  }
  else
  {
    v10 = 0;
    LOWORD(v225) = 0;
  }
  v12 = a5 != 0;
  v245 = 0u;
  memset(v246, 0, sizeof(v246));
  v243 = 0u;
  memset(v244, 0, sizeof(v244));
  v242 = 0u;
  v240 = 0u;
  memset(v241, 0, sizeof(v241));
  BYTE6(v245) = 0;
  WORD2(v245) = 11;
  LOWORD(v245) = a7;
  BYTE2(v245) = BYTE2(a7);
  BYTE3(v245) = BYTE3(a7) & 0x7F;
  v235 = 0;
  v13 = sub_1B1956AFC((uint64_t)&v240, a6, 0, &v235, (uint64_t)a5, a6, a7, a8);
  v18 = sub_1B1956AFC((uint64_t)&v240, (uint64_t)a2, 1, &v235, v14, v15, v16, v17);
  sub_1B186C4A8((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
  v27 = v26;
  v35 = (float *)sub_1B187813C(a6, v28, v29, v30, v31, v32, v33, v34);
  v43 = sub_1B1841314((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42);
  v51 = v43 != 2 && v12;
  if (v43 == 3)
    v51 = 1;
  v227 = v51;
  v229 = v43;
  if ((v43 | 2) == 2)
    v52 = 0;
  else
    v52 = v10;
  v223 = v52;
  if (a1)
    v53 = sub_1B186D1B0((uint64_t)a1, v44, v45, v46, v47, v48, v49, v50) != 0;
  else
    v53 = 0;
  if (a3)
  {
    v54 = sub_1B187608C(a3, 2);
    if (!a2)
      goto LABEL_23;
  }
  else
  {
    v54 = 0;
    if (!a2)
      goto LABEL_23;
  }
  if (sub_1B17A2818((uint64_t)a2, v44, v45, v46, v47, v48, v49, v50))
  {
    sub_1B17A28EC(a2, v45, v46, v47, v48, v49, v50, &v234);
    v55 = 4;
    v56 = v234.n128_u8[12];
    goto LABEL_24;
  }
LABEL_23:
  v55 = 0;
  v56 = 0;
LABEL_24:
  if (v54)
    v57 = 2;
  else
    v57 = 0;
  DWORD2(v244[0]) = v57 | v53 | v55 | (8 * v56);
  WORD2(v244[0]) = sub_1B1842184((uint64_t)v35, v44, v45, v46, v47, v48, v49, v50);
  if (!sub_1B184AB48((uint64_t)a2, v58, v59, v60, v61, v62, v63, v64))
  {
    v75 = ((WORD2(v245) | (BYTE6(v245) << 16)) & 0xFFF8FFFF) >> 16;
    goto LABEL_37;
  }
  memset(&c, 0, 24);
  sub_1B17A28EC(a2, v65, v66, v67, v68, v69, v70, (__n128 *)&c);
  v71 = BYTE1(c.hash[2]);
  if ((c.hash[2] & 0x100) != 0)
  {
    if (sub_1B1958B2C((uint64_t)a2))
    {
      v72 = sub_1B1958B4C((a7 >> 24) & 7);
      v71 = BYTE1(c.hash[2]);
      v73 = sub_1B1924B44((uint64_t)a2);
      if (v72)
        v74 = 96;
      else
        v74 = 32;
      goto LABEL_36;
    }
    v71 = BYTE1(c.hash[2]);
  }
  v73 = sub_1B1924B44((uint64_t)a2);
  v74 = 32;
LABEL_36:
  DWORD2(v244[0]) |= v74 & 0xF80000FF | ((v73 & 0x7FFFF) << 8) | (v71 << 6) & 0x80;
  v75 = ((WORD2(v245) | (BYTE6(v245) << 16)) & 0xFFF8FFFF | (a7 >> 8) & 0x70000) >> 16;
LABEL_37:
  BYTE6(v245) = v75;
  if (a5)
  {
    v76 = *a5;
    v77 = *a5;
    v78 = (v76 >> 6);
    if ((v76 >> 6))
    {
      __memcpy_chk();
      bzero((char *)v244 + 4 * v78 + 12, (32 - (4 * v78)) & 0x3FFFFFFFCLL);
    }
    else
    {
      memset((char *)v244 + 12, 0, 32);
    }
    v79 = v77 >> 6;
  }
  else
  {
    v79 = 0;
    memset((char *)v244 + 12, 0, 32);
  }
  v80 = 0;
  v226 = v18 | v13;
  BYTE12(v244[2]) = v79;
  v81 = v235;
  if (v227)
    v82 = v229;
  else
    v82 = 2;
  do
  {
    v85 = sub_1B1842240(v35, (char)v80, v65, v66, v67, v68, v69, v70);
    if ((v85 & 1) != 0 || ((v81 >> v80) & 1) != 0)
      LODWORD(v85) = sub_1B1956888((uint64_t)&v240, a3, (uint64_t)v35, (char)v80, v85, v81 != 0, v83, v84);
    if (sub_1B1840C94(v82, (char)v80))
    {
      v87 = 1;
      switch(v80)
      {
        case 1:
        case 9:
        case 10:
          goto LABEL_51;
        case 4:
          v90 = (v85 & 8) == 0;
          goto LABEL_76;
        case 5:
          v87 = (v85 & 4) == 0;
          if ((v85 & 1) != 0)
            v87 = 1;
          if ((v85 & 0x1000) == 0)
            goto LABEL_80;
          goto LABEL_52;
        case 12:
          v87 = (BYTE1(v242) >> 2) & 1;
          if ((v85 & 3) == 2)
            v87 = 0;
          if ((v85 & 0x1000) == 0)
            goto LABEL_80;
          goto LABEL_52;
        case 13:
          v87 = v85 & ((BYTE1(v242) & 4) >> 2);
          if ((v85 & 0x1000) == 0)
            goto LABEL_80;
          goto LABEL_52;
        case 16:
          v87 = v85 & 1;
          if ((v85 & 0x1000) == 0)
            goto LABEL_80;
          goto LABEL_52;
        case 17:
          v87 = (BYTE13(v241[1]) >> 2) & 1;
          if ((v85 & 0x1000) == 0)
            goto LABEL_80;
          goto LABEL_52;
        case 18:
          v90 = (v85 & 0x10) == 0;
LABEL_76:
          v87 = v90;
          if ((v85 & 0x1000) == 0)
            goto LABEL_80;
          goto LABEL_52;
        case 19:
          if ((v85 & 0x10) == 0)
            goto LABEL_51;
          HIDWORD(v243) = 0;
          goto LABEL_89;
        default:
          if ((v85 & 1) != 0)
          {
            v87 = 1;
LABEL_51:
            if ((v85 & 0x1000) == 0)
              goto LABEL_80;
          }
          else
          {
            if (v80 == 5)
            {
              if ((v85 & 4) != 0)
                goto LABEL_89;
            }
            else if ((v85 & 2) != 0)
            {
              goto LABEL_89;
            }
            v87 = !((v229 == 2) & sub_1B18425D4((uint64_t)v35, v86, v65, v66, v67, v68, v69, v70));
            if ((v85 & 0x1000) == 0)
              goto LABEL_80;
          }
LABEL_52:
          if (v80 != 1 && v87)
          {
            v88 = sub_1B1841B14((uint64_t)v35, (char)v80, v65, v66, v67, v68, v69, v70);
            if (v88 == 0.0)
              goto LABEL_89;
            v89 = v85 & 0xFFFFFBFF | ((v88 != 0.0) << 10);
            goto LABEL_85;
          }
LABEL_80:
          if (v87)
            v91 = 1024;
          else
            v91 = 0;
          if ((v87 & 1) == 0)
            goto LABEL_89;
          v89 = v91 | v85 & 0xFFFFFBFF;
LABEL_85:
          *((_DWORD *)&v241[1] + v80 + 1) = v89;
          if (v89 >= 0x200000)
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. effect materialProperty hash out of bounds"), v65, v66, v67, v68, v69, v70, (uint64_t)"programHashCode->_desc.materialPropertysHash[i] <= ((1 << (kCFXMaterialPropertyHashIndexMax + 1)) - 1)");
          break;
      }
    }
    else
    {
LABEL_89:
      *((_DWORD *)&v241[1] + v80 + 1) = 0;
    }
    ++v80;
  }
  while (v80 != 20);
  v92 = MEMORY[0x1E0C809B0];
  *(_QWORD *)c.count = MEMORY[0x1E0C809B0];
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = sub_1B1956C7C;
  *(_QWORD *)&c.hash[4] = &unk_1E63D9BE0;
  *(_QWORD *)&c.hash[6] = &v240;
  sub_1B193FDC4(a6, (uint64_t)&c, v65, v66, v67, v68, v69, v70);
  *(_QWORD *)c.count = v92;
  *(_QWORD *)c.hash = 3221225472;
  *(_QWORD *)&c.hash[2] = sub_1B1956C7C;
  *(_QWORD *)&c.hash[4] = &unk_1E63D9BE0;
  *(_QWORD *)&c.hash[6] = &v240;
  sub_1B193FDC4((uint64_t)a2, (uint64_t)&c, v93, v94, v95, v96, v97, v98);
  v104 = sub_1B1840E70((uint64_t)v35, 6, 0, v99, v100, v101, v102, v103);
  v110 = sub_1B1840E70((uint64_t)v35, 13, 0, v105, v106, v107, v108, v109);
  v116 = sub_1B1840E70((uint64_t)v35, 16, 0, v111, v112, v113, v114, v115);
  v124 = v116;
  if (v104)
  {
    if (sub_1B1841A40(v104, v117, v118, v119, v120, v121, v122, v123))
      v125 = 32;
    else
      v125 = 0;
    v126 = WORD2(v245) & 0xFFDF | (BYTE6(v245) << 16);
    WORD2(v245) = WORD2(v245) & 0xFFDF | v125;
    BYTE6(v245) = BYTE2(v126);
  }
  if (v124)
  {
    v127 = sub_1B1841A40(v124, v117, v118, v119, v120, v121, v122, v123);
    v128 = BYTE4(v245) & 0x20;
    if (v127)
      v128 = 32;
    WORD2(v245) = v128 | WORD2(v245) & 0xFFDF;
  }
  if (v110)
  {
    v129 = sub_1B1841A40(v110, v117, v118, v119, v120, v121, v122, v123);
    v130 = BYTE4(v245) & 0x20;
    if (v129)
      v130 = 32;
    v131 = v130 | WORD2(v245) & 0xFFDF | (BYTE6(v245) << 16);
  }
  else
  {
    v131 = WORD2(v245) | (BYTE6(v245) << 16);
  }
  BYTE6(v245) = BYTE2(v131);
  WORD2(v245) = v131 | (16 * v226) & 0x20;
  if (v131 & 0x20 | (16 * v226) & 0x20)
  {
    v132 = sub_1B1875F00(a3, 3) > 0;
    v133 = WORD2(v245) & 0xFFDF | (BYTE6(v245) << 16);
    WORD2(v245) = WORD2(v245) & 0xFFDF | (32 * v132);
    BYTE6(v245) = BYTE2(v133);
  }
  v134 = sub_1B17A289C((uint64_t)a2, v117, v118, v119, v120, v121, v122, v123);
  v146 = sub_1B1875540(a3, 1, 0, v134, v135, v136, v137, v138) != 0;
  v147 = WORD2(v245) & 0xFFEF | (BYTE6(v245) << 16);
  WORD2(v245) = WORD2(v245) & 0xFFEF | (16 * v146);
  BYTE6(v245) = BYTE2(v147);
  if (a1)
  {
    v148 = sub_1B17C6244(a1, v139, v140, v141, v142, v143, v144, v145);
    v149 = v148;
    if (v148)
    {
      if (sub_1B187B38C(v148, v139, v140, v141, v142, v143, v144, v145) > 0.0 && (a7 & 0x100) == 0)
        WORD2(v245) |= 0x100u;
      if (sub_1B187C05C(v149, v150, v151, v152, v153, v154, v155, v156))
        WORD2(v245) |= 0x200u;
    }
  }
  if (a3)
    v157 = sub_1B1876080(a3);
  else
    v157 = 0;
  v158 = v27 >= 1.0;
  if (v229 == 4)
    v159 = 1;
  else
    v159 = v157;
  v160 = sub_1B18782D8(a6, v139, v140, v141, v142, v143, v144, v145);
  v168 = v159 ^ 1;
  if (v160)
    v168 = 0;
  if ((v158 & v168) != 0)
    v169 = 8;
  else
    v169 = 0;
  if ((v229 == 3) | v159)
    v170 = 0;
  else
    v170 = 2;
  WORD2(v245) = WORD2(v245) & 0xFFF4 | v170 | v158 | v169;
  v176 = sub_1B1878320(a6, v161, v162, v163, v164, v165, v166, v167) >= 0.0;
  if (v227)
    v177 = 64;
  else
    v177 = 0;
  if (v223)
    v178 = 128;
  else
    v178 = 0;
  v179 = v178 | v177 | (4 * v176) | WORD2(v245) & 0xFF3B | (BYTE6(v245) << 16);
  if (a5)
  {
    v180 = a5;
    v181 = *(unsigned __int8 *)a5;
    v182 = v179 & 0xFFF7FFFF | (((v181 >> 1) & 1) << 19);
    v183 = (v181 >> 2) & 1;
  }
  else
  {
    v183 = 0;
    v182 = v179 & 0xFFF7FFFF;
    v180 = 0;
  }
  WORD2(v245) = v182;
  BYTE6(v245) = (v182 & 0xFFEFFFFF | (v183 << 20)) >> 16;
  BYTE13(v244[2]) = sub_1B1957004(v180, (uint64_t)a1, v229, v171, v172, v173, v174, v175);
  v184 = WORD2(v245) & 0xFFF | (BYTE6(v245) << 16);
  v185 = ((_WORD)v225 << 13) | 0x1000;
  if (v229 != 3)
    v185 = 0;
  WORD2(v245) = v185 | WORD2(v245) & 0xFFF;
  BYTE6(v245) = BYTE2(v184);
  if ((sub_1B17A276C((uint64_t)a2) & (v27 >= 1.0)) != 0)
    v193 = 1024;
  else
    v193 = 0;
  v194 = WORD2(v245) & 0xF3FF | (BYTE6(v245) << 16);
  WORD2(v245) = WORD2(v245) & 0xF3FF | v193;
  BYTE6(v245) = BYTE2(v194);
  if (a4)
  {
    v195 = sub_1B17A426C(a4, v186, v187, v188, v189, v190, v191, v192) == 3;
    v196 = WORD2(v245) & 0xF7FF | (BYTE6(v245) << 16);
    WORD2(v245) = WORD2(v245) & 0xF7FF | (v195 << 11);
    BYTE6(v245) = BYTE2(v196);
  }
  memset(&c, 0, sizeof(c));
  CC_SHA256_Init(&c);
  v197 = 0;
  v198 = 1;
  do
  {
    v199 = 0;
    v200 = v198;
    v201 = (const __CFArray *)*((_QWORD *)v241 + v197);
    do
    {
      v237[0] = v92;
      v237[1] = 3221225472;
      v237[2] = sub_1B1958AE4;
      v237[3] = &unk_1E63D9D10;
      v238 = v199;
      v237[4] = &c;
      sub_1B17A0470(v201, (uint64_t)v237);
      ++v199;
    }
    while (v199 != 4);
    v198 = 0;
    v197 = 1;
  }
  while ((v200 & 1) != 0);
  for (i = 208; i != 272; i += 8)
  {
    v203 = *(_QWORD *)((char *)&v241[-1] + i);
    if (v203)
      sub_1B19B9800(v203, (uint64_t)&c);
  }
  CC_SHA256_Update(&c, (char *)&v241[1] + 4, 0xACu);
  data = 2;
  CC_SHA256_Update(&c, &data, 4u);
  CC_SHA256_Final(md, &c);
  v204 = 0;
  v205 = cStr;
  v206.i64[0] = 0xA0A0A0A0A0A0A0A0;
  v206.i64[1] = 0xA0A0A0A0A0A0A0A0;
  v207.i64[0] = 0x3737373737373737;
  v207.i64[1] = 0x3737373737373737;
  v208.i64[0] = 0x3030303030303030;
  v208.i64[1] = 0x3030303030303030;
  v209.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v209.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v210.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v210.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  do
  {
    v211 = *(int8x16_t *)&md[v204];
    v254.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v206, (uint8x16_t)v211), v208, v207), (uint8x16_t)v211, 4uLL);
    v212 = vandq_s8(v211, v209);
    v254.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v210, (uint8x16_t)v212), v208, v207), v212);
    vst2q_s8(v205, v254);
    v205 += 32;
    v204 += 16;
  }
  while (v204 != 32);
  v251 = 0;
  v213 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x600u);
  if (qword_1EEF669C0 != -1)
    dispatch_once(&qword_1EEF669C0, &unk_1E63D9C00);
  *(_QWORD *)c.count = 0;
  *(_QWORD *)c.hash = &c;
  *(_QWORD *)&c.hash[2] = 0x2020000000;
  *(_QWORD *)&c.hash[4] = 0;
  *(_QWORD *)cStr = 0;
  v248 = cStr;
  v249 = 0x2020000000;
  v250 = 0;
  block[0] = v92;
  block[1] = 3221225472;
  block[2] = sub_1B1957F14;
  block[3] = &unk_1E63D9C28;
  block[4] = cStr;
  block[5] = &c;
  block[6] = v213;
  block[7] = &v240;
  dispatch_sync((dispatch_queue_t)qword_1EEF669D0, block);
  CFRelease(v213);
  v214 = 0;
  v215 = 1;
  do
  {
    v216 = v215;
    v217 = (const void *)*((_QWORD *)v241 + v214);
    if (v217)
    {
      CFRelease(v217);
      *((_QWORD *)v241 + v214) = 0;
    }
    v215 = 0;
    v214 = 1;
  }
  while ((v216 & 1) != 0);
  v218 = BYTE14(v244[2]);
  if (BYTE14(v244[2]))
  {
    v219 = 0;
    do
    {
      v220 = (const void *)*((_QWORD *)v246 + v219);
      if (v220)
      {
        CFRelease(v220);
        *((_QWORD *)v246 + v219) = 0;
        v218 = BYTE14(v244[2]);
      }
      ++v219;
    }
    while (v219 < v218);
  }
  v11 = *(_QWORD *)(*(_QWORD *)c.hash + 24);
  _Block_object_dispose(cStr, 8);
  _Block_object_dispose(&c, 8);
  return v11;
}

void sub_1B1957E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  _Block_object_dispose((const void *)(v39 - 224), 8);
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

dispatch_queue_t sub_1B1957ECC()
{
  dispatch_queue_t result;

  qword_1EEF669C8 = (uint64_t)CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
  result = dispatch_queue_create("com.apple.vfx.programHashCodeQueue", 0);
  qword_1EEF669D0 = (uint64_t)result;
  return result;
}

void sub_1B1957F14(uint64_t a1)
{
  const void *v2;
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD *v17;
  CFTypeRef v18;
  CFTypeRef *v19;
  CFTypeRef v20;

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFDictionaryGetValue((CFDictionaryRef)qword_1EEF669C8, *(const void **)(a1 + 48));
  v2 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2)
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CFRetain(v2);
  }
  else
  {
    if (qword_1EEF669B8 != -1)
      dispatch_once_f(&qword_1EEF669B8, &qword_1EEF669B0, (dispatch_function_t)sub_1B195685C);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_1B179CB90(qword_1EEF669B0, 0x110uLL);
    v3 = *(_OWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v4 = *(_OWORD **)(a1 + 56);
    v5 = v4[4];
    v7 = v4[1];
    v6 = v4[2];
    v3[3] = v4[3];
    v3[4] = v5;
    v3[1] = v7;
    v3[2] = v6;
    v8 = v4[8];
    v10 = v4[5];
    v9 = v4[6];
    v3[7] = v4[7];
    v3[8] = v8;
    v3[5] = v10;
    v3[6] = v9;
    v11 = v4[12];
    v13 = v4[9];
    v12 = v4[10];
    v3[11] = v4[11];
    v3[12] = v11;
    v3[9] = v13;
    v3[10] = v12;
    v14 = v4[13];
    v15 = v4[14];
    v16 = v4[16];
    v3[15] = v4[15];
    v3[16] = v16;
    v3[13] = v14;
    v3[14] = v15;
    v17 = *(_OWORD **)(a1 + 56);
    v17[15] = 0u;
    v17[16] = 0u;
    v17[13] = 0u;
    v17[14] = 0u;
    v17[11] = 0u;
    v17[12] = 0u;
    v17[9] = 0u;
    v17[10] = 0u;
    v17[7] = 0u;
    v17[8] = 0u;
    v17[5] = 0u;
    v17[6] = 0u;
    v17[3] = 0u;
    v17[4] = 0u;
    v17[1] = 0u;
    v17[2] = 0u;
    v18 = *(CFTypeRef *)(a1 + 48);
    v19 = *(CFTypeRef **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v20 = v19[34];
    if (v20 != v18)
    {
      if (v20)
      {
        CFRelease(v19[34]);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 272) = 0;
        v18 = *(CFTypeRef *)(a1 + 48);
      }
      if (v18)
        v18 = CFRetain(v18);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) + 272) = v18;
      v20 = *(CFTypeRef *)(a1 + 48);
      v19 = *(CFTypeRef **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1EEF669C8, v20, v19);
  }
}

void sub_1B195809C(uint64_t a1)
{
  _QWORD block[5];

  if (a1)
  {
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1B19580FC;
    block[3] = &unk_1E63D8F10;
    block[4] = a1;
    dispatch_sync((dispatch_queue_t)qword_1EEF669D0, block);
  }
}

void sub_1B19580FC(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

void sub_1B1958108(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  const void *v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  const void *v18;

  sub_1B194F874(CFSTR("kCFXNotificationProgramHashCodeWillDie"), (const void *)a1, 0, 0);
  if (!CFDictionaryContainsKey((CFDictionaryRef)qword_1EEF669C8, *(const void **)(a1 + 272)))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. ProgramHashCode should be in the dictionary"), v2, v3, v4, v5, v6, v7, (uint64_t)"CFDictionaryContainsKey(s_ProgramHashCodeDictionary, programHashCode->_hashCodeHash)");
  v8 = *(const void **)(a1 + 272);
  if (!v8)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"programHashCode->_hashCodeHash");
    v8 = *(const void **)(a1 + 272);
  }
  CFDictionaryRemoveValue((CFMutableDictionaryRef)qword_1EEF669C8, v8);
  v9 = *(const void **)(a1 + 272);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 272) = 0;
  }
  v10 = 0;
  v11 = a1 + 16;
  v12 = 1;
  do
  {
    v13 = v12;
    v14 = *(const void **)(v11 + 8 * v10);
    if (v14)
    {
      CFRelease(v14);
      *(_QWORD *)(v11 + 8 * v10) = 0;
    }
    v12 = 0;
    v10 = 1;
  }
  while ((v13 & 1) != 0);
  v15 = *(unsigned __int8 *)(a1 + 158);
  if (*(_BYTE *)(a1 + 158))
  {
    v16 = 0;
    v17 = a1 + 208;
    do
    {
      v18 = *(const void **)(v17 + 8 * v16);
      if (v18)
      {
        CFRelease(v18);
        *(_QWORD *)(v17 + 8 * v16) = 0;
        v15 = *(unsigned __int8 *)(a1 + 158);
      }
      ++v16;
    }
    while (v16 < v15);
  }
}

__CFString *sub_1B1958220(uint64_t a1)
{
  const __CFAllocator *v2;
  __CFString *Mutable;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  const __CFArray *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  CFStringRef v22;
  __int16 v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  const __CFString *v28;
  unsigned int v29;
  uint64_t j;
  unint64_t v31;
  uint64_t v32;
  unint64_t k;
  unsigned int v34;
  const __CFAllocator *alloc;
  int data;
  _QWORD v38[5];
  int v39;
  CC_SHA256_CTX c;
  char cStr[65];
  unsigned __int8 md[32];
  uint64_t v43;
  int8x16x2_t v44;

  v43 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXProgramHashCode %p : "), a1);
  v4 = (_QWORD *)(a1 + 16);
  if (*(_QWORD *)(a1 + 16))
    CFStringAppend(Mutable, CFSTR("SM_Mat,"));
  if (*(_QWORD *)(a1 + 24))
    CFStringAppend(Mutable, CFSTR("SM_Geo,"));
  if (*v4 || *(_QWORD *)(a1 + 24))
  {
    alloc = v2;
    memset(&c, 0, sizeof(c));
    CC_SHA256_Init(&c);
    v5 = 0;
    v6 = 1;
    v7 = MEMORY[0x1E0C809B0];
    do
    {
      v8 = 0;
      v9 = v6;
      v10 = (const __CFArray *)v4[v5];
      do
      {
        v38[0] = v7;
        v38[1] = 3221225472;
        v38[2] = sub_1B1958A9C;
        v38[3] = &unk_1E63D9D10;
        v39 = v8;
        v38[4] = &c;
        sub_1B17A0470(v10, (uint64_t)v38);
        ++v8;
      }
      while (v8 != 4);
      v6 = 0;
      v5 = 1;
    }
    while ((v9 & 1) != 0);
    for (i = 0; i != 64; i += 8)
    {
      v12 = *(_QWORD *)(a1 + 208 + i);
      if (v12)
        sub_1B19B9800(v12, (uint64_t)&c);
    }
    data = 2;
    CC_SHA256_Update(&c, &data, 4u);
    CC_SHA256_Final(md, &c);
    v13 = 0;
    v14 = cStr;
    v15.i64[0] = 0xA0A0A0A0A0A0A0A0;
    v15.i64[1] = 0xA0A0A0A0A0A0A0A0;
    v16.i64[0] = 0x3737373737373737;
    v16.i64[1] = 0x3737373737373737;
    v17.i64[0] = 0x3030303030303030;
    v17.i64[1] = 0x3030303030303030;
    v18.i64[0] = 0xF0F0F0F0F0F0F0FLL;
    v18.i64[1] = 0xF0F0F0F0F0F0F0FLL;
    v19.i64[0] = 0xA0A0A0A0A0A0A0ALL;
    v19.i64[1] = 0xA0A0A0A0A0A0A0ALL;
    do
    {
      v20 = *(int8x16_t *)&md[v13];
      v44.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v15, (uint8x16_t)v20), v17, v16), (uint8x16_t)v20, 4uLL);
      v21 = vandq_s8(v20, v18);
      v44.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v19, (uint8x16_t)v21), v17, v16), v21);
      vst2q_s8(v14, v44);
      v14 += 32;
      v13 += 16;
    }
    while (v13 != 32);
    cStr[64] = 0;
    v22 = CFStringCreateWithCString(alloc, cStr, 0x600u);
    CFStringAppendFormat(Mutable, 0, CFSTR("SM(%@),"), v22);
    CFRelease(v22);
  }
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 1) != 0)
  {
    CFStringAppend(Mutable, CFSTR("Aone,"));
    v23 = *(_WORD *)(a1 + 196);
    if ((v23 & 2) == 0)
    {
LABEL_20:
      if ((v23 & 8) == 0)
        goto LABEL_21;
      goto LABEL_46;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_20;
  }
  CFStringAppend(Mutable, CFSTR("Acst,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 8) == 0)
  {
LABEL_21:
    if ((v23 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_47;
  }
LABEL_46:
  CFStringAppend(Mutable, CFSTR("opq,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x20) == 0)
  {
LABEL_22:
    if ((v23 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_48;
  }
LABEL_47:
  CFStringAppend(Mutable, CFSTR("tgt,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x40) == 0)
  {
LABEL_23:
    if ((v23 & 0x80) == 0)
      goto LABEL_24;
    goto LABEL_49;
  }
LABEL_48:
  CFStringAppend(Mutable, CFSTR("lgh,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x80) == 0)
  {
LABEL_24:
    if ((v23 & 0x1000) == 0)
      goto LABEL_25;
    goto LABEL_50;
  }
LABEL_49:
  CFStringAppend(Mutable, CFSTR("amb,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x1000) == 0)
  {
LABEL_25:
    if ((v23 & 0x100) == 0)
      goto LABEL_26;
    goto LABEL_51;
  }
LABEL_50:
  CFStringAppend(Mutable, CFSTR("prob,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x100) == 0)
  {
LABEL_26:
    if ((v23 & 0x400) == 0)
      goto LABEL_27;
    goto LABEL_52;
  }
LABEL_51:
  CFStringAppend(Mutable, CFSTR("fog,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x400) == 0)
  {
LABEL_27:
    if ((v23 & 0x800) == 0)
      goto LABEL_28;
    goto LABEL_53;
  }
LABEL_52:
  CFStringAppend(Mutable, CFSTR("dynB,"));
  v23 = *(_WORD *)(a1 + 196);
  if ((v23 & 0x800) == 0)
  {
LABEL_28:
    if ((v23 & 0x200) == 0)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_53:
  CFStringAppend(Mutable, CFSTR("pntR,"));
  if ((*(_WORD *)(a1 + 196) & 0x200) != 0)
LABEL_29:
    CFStringAppend(Mutable, CFSTR("iblTr,"));
LABEL_30:
  CFStringAppendFormat(Mutable, 0, CFSTR("[%@:"), off_1E63D9C48[*(_WORD *)(a1 + 116) & 0xF]);
  v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x10) != 0)
  {
    CFStringAppend(Mutable, CFSTR("PerPix|"));
    v24 = *(unsigned __int16 *)(a1 + 116);
    if ((v24 & 0x20) == 0)
    {
LABEL_32:
      if ((v24 & 0x40) == 0)
        goto LABEL_33;
      goto LABEL_57;
    }
  }
  else if ((v24 & 0x20) == 0)
  {
    goto LABEL_32;
  }
  CFStringAppend(Mutable, CFSTR("Double|"));
  v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x40) == 0)
  {
LABEL_33:
    if ((v24 & 0x80) == 0)
      goto LABEL_34;
    goto LABEL_58;
  }
LABEL_57:
  CFStringAppend(Mutable, CFSTR("OverLght|"));
  v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x80) == 0)
  {
LABEL_34:
    if ((v24 & 0x100) == 0)
      goto LABEL_35;
    goto LABEL_59;
  }
LABEL_58:
  CFStringAppend(Mutable, CFSTR("WrNrm|"));
  v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x100) == 0)
  {
LABEL_35:
    if ((v24 & 0x200) == 0)
      goto LABEL_36;
    goto LABEL_60;
  }
LABEL_59:
  CFStringAppend(Mutable, CFSTR("Nrmliz|"));
  v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x200) == 0)
  {
LABEL_36:
    if ((v24 & 0x400) == 0)
      goto LABEL_38;
    goto LABEL_37;
  }
LABEL_60:
  CFStringAppend(Mutable, CFSTR("WriteDepth|"));
  v24 = *(unsigned __int16 *)(a1 + 116);
  if ((v24 & 0x400) != 0)
  {
LABEL_37:
    CFStringAppend(Mutable, CFSTR("LinDepth|"));
    v24 = *(unsigned __int16 *)(a1 + 116);
  }
LABEL_38:
  v25 = (v24 >> 11) & 0xF;
  if (v25 <= 2)
    CFStringAppend(Mutable, off_1E63D9D30[v25]);
  CFStringAppend(Mutable, CFSTR("]"));
  CFStringAppend(Mutable, CFSTR("[Node:"));
  v26 = *(_DWORD *)(a1 + 120);
  if ((v26 & 1) != 0)
  {
    CFStringAppend(Mutable, CFSTR("LightMap|"));
    v26 = *(_DWORD *)(a1 + 120);
    if ((v26 & 2) == 0)
    {
LABEL_42:
      if ((v26 & 4) == 0)
        goto LABEL_75;
LABEL_64:
      CFStringAppend(Mutable, CFSTR("Tess|"));
      v27 = *(_DWORD *)(a1 + 120);
      if ((v27 & 8) != 0)
      {
        v28 = CFSTR("PNTriangles|");
      }
      else
      {
        if ((v27 & 0x10) == 0)
          goto LABEL_69;
        v28 = CFSTR("Phong|");
      }
      CFStringAppend(Mutable, v28);
LABEL_69:
      if ((*(_BYTE *)(a1 + 120) & 0x20) != 0)
      {
        CFStringAppend(Mutable, CFSTR("OSD|"));
        v29 = *(_DWORD *)(a1 + 120);
        if ((v29 & 0x40) != 0)
        {
          CFStringAppend(Mutable, CFSTR("SingleCrease|"));
          v29 = *(_DWORD *)(a1 + 120);
        }
        if ((v29 & 0x80) != 0)
        {
          CFStringAppend(Mutable, CFSTR("ScreenSpace|"));
          v29 = *(_DWORD *)(a1 + 120);
        }
        CFStringAppendFormat(Mutable, 0, CFSTR("PrimvarData=%d|"), (v29 >> 8) & 0x7FFFF);
      }
      goto LABEL_75;
    }
  }
  else if ((v26 & 2) == 0)
  {
    goto LABEL_42;
  }
  CFStringAppend(Mutable, CFSTR("VrtCol|"));
  if ((*(_DWORD *)(a1 + 120) & 4) != 0)
    goto LABEL_64;
LABEL_75:
  CFStringAppend(Mutable, CFSTR("]"));
  for (j = 0; j != 20; ++j)
  {
    v31 = *(unsigned int *)(a1 + 36 + 4 * j);
    if ((v31 & 0x400) == 0)
      continue;
    CFStringAppendFormat(Mutable, 0, CFSTR("[%@:"), off_1E63D9C70[j]);
    if ((v31 & 1) != 0)
    {
      CFStringAppend(Mutable, CFSTR("Tex|"));
      if ((v31 & 2) == 0)
      {
LABEL_79:
        if ((v31 & 4) == 0)
          goto LABEL_80;
        goto LABEL_95;
      }
    }
    else if ((v31 & 2) == 0)
    {
      goto LABEL_79;
    }
    CFStringAppend(Mutable, CFSTR("rgb0|"));
    if ((v31 & 4) == 0)
    {
LABEL_80:
      if ((v31 & 8) == 0)
        goto LABEL_81;
      goto LABEL_96;
    }
LABEL_95:
    CFStringAppend(Mutable, CFSTR("rgb1|"));
    if ((v31 & 8) == 0)
    {
LABEL_81:
      if ((v31 & 0x10) != 0)
        goto LABEL_97;
      goto LABEL_82;
    }
LABEL_96:
    CFStringAppend(Mutable, CFSTR("a1|"));
    if ((v31 & 0x10) != 0)
    {
LABEL_97:
      CFStringAppend(Mutable, CFSTR("flt0|"));
      if ((v31 & 0x1000) == 0)
        goto LABEL_84;
LABEL_83:
      CFStringAppend(Mutable, CFSTR("int|"));
      goto LABEL_84;
    }
LABEL_82:
    if ((v31 & 0x1000) != 0)
      goto LABEL_83;
LABEL_84:
    if ((v31 & 0xE000) != 0)
      CFStringAppend(Mutable, CFSTR("comp|"));
    if ((v31 & 0x800) != 0)
      CFStringAppend(Mutable, CFSTR("mat|"));
    v32 = ((v31 >> 5) & 0xF) - 1;
    if (v32 <= 3)
      CFStringAppend(Mutable, off_1E63D9D48[v32]);
    CFStringAppend(Mutable, CFSTR("]"));
  }
  if (*(_BYTE *)(a1 + 156))
  {
    CFStringAppend(Mutable, CFSTR("[Lighting:"));
    if (*(_BYTE *)(a1 + 156))
    {
      for (k = 0; k < *(unsigned __int8 *)(a1 + 156); ++k)
      {
        if (k)
          CFStringAppend(Mutable, CFSTR(","));
        v34 = *(_DWORD *)(a1 + 124 + 4 * k);
        if ((v34 & 7) == 7)
        {
          if ((v34 & 8) == 0)
            goto LABEL_106;
        }
        else
        {
          CFStringAppend(Mutable, off_1E63D9D68[v34 & 7]);
          if ((v34 & 8) == 0)
          {
LABEL_106:
            if ((v34 & 0x10) == 0)
              goto LABEL_108;
LABEL_107:
            CFStringAppend(Mutable, CFSTR("s"));
            goto LABEL_108;
          }
        }
        CFStringAppend(Mutable, CFSTR("g"));
        if ((v34 & 0x10) != 0)
          goto LABEL_107;
LABEL_108:
        if (((v34 >> 10) & 0x1F) >= 2)
        {
          CFStringAppendFormat(Mutable, 0, CFSTR("Soft(%d)"), (v34 >> 10) & 0x1F);
          if ((v34 & 0x20) != 0)
          {
LABEL_118:
            CFStringAppend(Mutable, CFSTR("c"));
            if ((v34 & 0x40) == 0)
              continue;
LABEL_111:
            CFStringAppend(Mutable, CFSTR("m"));
            continue;
          }
        }
        else if ((v34 & 0x20) != 0)
        {
          goto LABEL_118;
        }
        if ((v34 & 0x40) != 0)
          goto LABEL_111;
      }
    }
    CFStringAppend(Mutable, CFSTR("]"));
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

uint64_t sub_1B1958A9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1B19B97B8(a3, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result == *(_DWORD *)(a1 + 40))
    return sub_1B19B9980(a3, *(CC_SHA256_CTX **)(a1 + 32));
  return result;
}

uint64_t sub_1B1958AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  result = sub_1B19B97B8(a3, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)result == *(_DWORD *)(a1 + 40))
    return sub_1B19B9980(a3, *(CC_SHA256_CTX **)(a1 + 32));
  return result;
}

BOOL sub_1B1958B2C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 136) && *(_QWORD *)(a1 + 144) != 0;
}

BOOL sub_1B1958B4C(int a1)
{
  return (a1 - 1) < 3;
}

uint64_t sub_1B1958B5C(uint64_t a1)
{
  return 2 * *(unsigned __int8 *)(a1 + 4);
}

uint64_t sub_1B1958B68()
{
  return 0;
}

uint64_t sub_1B1958B70(uint64_t a1, int a2)
{
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 24);
  if (result)
    return sub_1B1958B84(result, a2);
  return result;
}

BOOL sub_1B1958B84(uint64_t a1, int a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 result;
  BOOL v9;

  if ((a2 - 2) > 4)
    v2 = 3;
  else
    v2 = dword_1B2268490[(char)(a2 - 2)];
  v3 = *(uint64_t **)(a1 + 32);
  v5 = *v3;
  v4 = v3[1];
  if (v5 == v4)
    return 0;
  v6 = v5 + 16;
  do
  {
    v7 = *(_DWORD *)(v6 - 16);
    result = v7 == v2;
    v9 = v7 == v2 || v6 == v4;
    v6 += 16;
  }
  while (!v9);
  return result;
}

uint64_t sub_1B1958BE0(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

double sub_1B1958C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;

  v10 = *(_QWORD *)(a1 + 80);
  if (!v10)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"refiner->computeEvaluator");
    v10 = *(_QWORD *)(a1 + 80);
  }
  v19 = 0;
  v20 = 0;
  v11 = sub_1B18FD774(v10);
  if (!sub_1B221460C(v11, *(void **)(a1 + 40), (_DWORD *)(a1 + 56), *(void **)(a1 + 48), (int *)(a1 + 68), 0, (uint64_t)&v19, 0, (uint64_t)&v19, *(void **)a1, *(void **)(a1 + 8), *(void **)(a1 + 16), *(void **)(a1 + 24), 0, 0, 0, *(_DWORD *)(a1 + 32), a2))sub_1B17C4408(
      17,
      (uint64_t)CFSTR("Assertion '%s' failed. Internal consistency error."),
      v12,
      v13,
      v14,
      v15,
      v16,
      v17,
      (uint64_t)"evaluatorDidSucceed");
  return nullsub_16(a2);
}

void sub_1B1958CD4(uint64_t a1, uint64_t a2, void *a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *__p;
  void *v40;
  uint64_t v41;

  if (sub_1B17A289C(a2, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8))
  {
    *(_QWORD *)(a1 + 352) = (id)objc_msgSend_computePipelineStateForKernel_(a3, v12, (uint64_t)CFSTR("vfx_osd_synchronize_coarse_positions_no_argument_buffer"), v13);
    v21 = sub_1B17A0848(a2, v14, v15, v16, v17, v18, v19, v20);
    v29 = sub_1B1816084(v21);
    v30 = *(_QWORD *)(a2 + 168);
    if (!v30)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"topologyInfo");
    v32 = *(_QWORD *)(v30 + 32);
    v31 = *(_QWORD *)(v30 + 40);
    __p = 0;
    v40 = 0;
    v41 = 0;
    v33 = (v31 - v32) >> 2;
    if (v31 != v32)
    {
      sub_1B183C0A8(&__p, (v31 - v32) >> 2);
      v34 = (char *)v40;
      bzero(v40, v31 - v32);
      v40 = &v34[v31 - v32];
    }
    if (v33 != *(_DWORD *)(a1 + 28))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Internal consistency error."), v23, v24, v25, v26, v27, v28, (uint64_t)"osdRuntimeData->coarseVertexCount == remappingTableSize");
    v35 = __p;
    if (v31 != v32)
    {
      v36 = 0;
      v37 = *(_QWORD *)(v30 + 32);
      do
      {
        v38 = *(unsigned int *)(v37 + 4 * v36);
        if (v29)
          LODWORD(v38) = *(_DWORD *)(v29 + 4 * v38);
        v35[v36++] = v38;
      }
      while (v33 > v36);
    }
    *(_QWORD *)(a1 + 344) = objc_msgSend_newBufferWithBytes_length_options_(*a4, v22, (uint64_t)v35, (_BYTE *)v40 - (_BYTE *)v35, 0);
    if (__p)
    {
      v40 = __p;
      operator delete(__p);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 344) = 0;
    *(_QWORD *)(a1 + 352) = (id)objc_msgSend_computePipelineStateForKernel_(a3, v12, (uint64_t)CFSTR("vfx_osd_synchronize_indexed_coarse_positions_no_argument_buffer"), v13);
  }
}

void sub_1B1958E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B1958E78(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4, void *a5, uint64_t a6)
{
  id v10;
  const char *v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  unsigned int v40;
  const char *v41;
  uint64_t v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  void *v47;
  uint64_t v48;
  _OWORD *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  int v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  unsigned int v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  unsigned int v77;
  _QWORD *v78;
  unsigned int v79;
  unint64_t v80;
  const char *v81;
  uint64_t v82;
  unsigned __int8 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  void **v88;
  uint64_t v89;
  const char *v90;
  const void *v91;
  char *v92;
  size_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void **v97;
  char *v98;
  _QWORD *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char *v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  unsigned int v125;
  unsigned int v126;
  id **v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t i;
  void *v132;
  unint64_t v133;
  id *v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t v144;
  id *v145;
  uint64_t v146;
  id *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  const char *v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v191;
  _BYTE *v192;
  unsigned int v193;
  unint64_t v195;
  _QWORD *v196;
  void *v197;
  unint64_t v198;
  uint64_t v199;
  id **v200;
  void *v201[2];
  void *v202;
  void *v203;
  size_t *v204;
  size_t size[2];
  __int128 v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  void *v210;

  v10 = objc_alloc(MEMORY[0x1E0CB3710]);
  v12 = (void *)objc_msgSend_initForReadingFromData_error_(v10, v11, a1, 0);
  v22 = 0;
  if (objc_msgSend_decodeInt32ForKey_(v12, v13, (uint64_t)CFSTR("version"), v14) >= 2)
  {
    v191 = a6;
    if (!a5)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v16, v17, v18, v19, v20, v21, (uint64_t)"commandQueue");
    v23 = (void *)objc_msgSend_commandBuffer(a5, v15, v16, v17);
    v27 = (void *)objc_msgSend_computeCommandEncoder(v23, v24, v25, v26);
    v201[0] = (void *)objc_msgSend_device(a5, v28, v29, v30);
    v201[1] = a5;
    v202 = v23;
    v203 = v27;
    if (qword_1EEF669E0 != -1)
      dispatch_once_f(&qword_1EEF669E0, &qword_1EEF669D8, (dispatch_function_t)sub_1B1958BE0);
    v22 = sub_1B179CB90(qword_1EEF669D8, 0x158uLL);
    v200 = 0;
    *(_DWORD *)(v22 + 28) = objc_msgSend_decodeInt32ForKey_(v12, v31, (uint64_t)CFSTR("coarseVertexCount"), v32);
    sub_1B19597E0(v12, CFSTR("vertexPatchTable"), v201, v33, (uint64_t *)size);
    v34 = v206;
    *(_OWORD *)(v22 + 32) = *(_OWORD *)size;
    *(_OWORD *)(v22 + 48) = v34;
    *(_OWORD *)(v22 + 64) = v207;
    v37 = objc_msgSend_stringByAppendingString_(CFSTR("fvarPatchTables"), v35, (uint64_t)CFSTR(".count"), v36);
    v40 = objc_msgSend_decodeInt32ForKey_(v12, v38, v37, v39);
    if (v40)
    {
      v43 = v40;
      v44 = (_QWORD *)operator new();
      sub_1B195E82C(v44, v43);
      v45 = 0;
      v46 = 0;
      while (1)
      {
        v47 = (void *)objc_msgSend_stringByAppendingFormat_(CFSTR("fvarPatchTables"), v41, (uint64_t)CFSTR(".[%d]"), v42, v46);
        sub_1B19597E0(v12, v47, v201, v48, (uint64_t *)size);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v44[1] - *v44) >> 4) <= v46)
          break;
        v49 = (_OWORD *)(*v44 + v45);
        *v49 = *(_OWORD *)size;
        v49[1] = v206;
        v49[2] = v207;
        ++v46;
        v45 += 48;
        if (v43 == v46)
          goto LABEL_12;
      }
LABEL_61:
      abort();
    }
    v44 = 0;
LABEL_12:
    *(_QWORD *)(v22 + 80) = v44;
    v192 = a3;
    if (a3[6] == 2)
    {
      v50 = (const char *)objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v41, (uint64_t)CFSTR(".vertexValenceBuffer"), v42);
      v51 = sub_1B195A170(v12, v50, v201, 0);
      v54 = (const char *)objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v52, (uint64_t)CFSTR(".quadOffsetsBuffer"), v53);
      v55 = sub_1B195A170(v12, v54, v201, 0);
      v58 = objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v56, (uint64_t)CFSTR(".quadOffsetsBaseGregory"), v57);
      v61 = objc_msgSend_decodeInt32ForKey_(v12, v59, v58, v60);
      v64 = objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v62, (uint64_t)CFSTR(".quadOffsetsBaseGregoryBoundary"), v63);
      v67 = objc_msgSend_decodeInt32ForKey_(v12, v65, v64, v66);
    }
    else
    {
      v51 = 0;
      v55 = 0;
      v61 = -1;
      v67 = -1;
    }
    *(_QWORD *)(v22 + 88) = v51;
    *(_QWORD *)(v22 + 96) = v55;
    *(_DWORD *)(v22 + 104) = v61;
    *(_DWORD *)(v22 + 108) = v67;
    v68 = objc_msgSend_stringByAppendingString_(CFSTR("patchRangesTable"), v41, (uint64_t)CFSTR(".elementCount"), v42);
    v71 = objc_msgSend_decodeInt32ForKey_(v12, v69, v68, v70);
    v74 = objc_msgSend_stringByAppendingString_(CFSTR("patchRangesTable"), v72, (uint64_t)CFSTR(".patchArrayCount"), v73);
    v77 = objc_msgSend_decodeInt32ForKey_(v12, v75, v74, v76);
    v78 = 0;
    v193 = v71;
    v197 = v12;
    if (v71)
    {
      v79 = v77;
      if (v77)
      {
        v78 = (_QWORD *)operator new();
        v80 = v79;
        v196 = v78;
        sub_1B1936854(size, v79);
        sub_1B193691C(v78, v71, (uint64_t *)size);
        v204 = size;
        sub_1B17F7664((void ***)&v204);
        v199 = 0;
        v83 = 0;
        v195 = v79;
        do
        {
          v84 = 0;
          v85 = v83;
          v198 = v83;
          do
          {
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v78[1] - *v78) >> 3) <= v85)
              goto LABEL_61;
            v86 = (uint64_t *)(*v78 + 24 * v85);
            v87 = *v86;
            if (0xAAAAAAAAAAAAAAABLL * ((v86[1] - *v86) >> 3) <= v84)
              goto LABEL_61;
            v88 = (void **)(v87 + 24 * v84);
            size[0] = 0;
            v89 = objc_msgSend_stringByAppendingFormat_(CFSTR("patchRangesTable"), v81, (uint64_t)CFSTR(".[%d][%d]"), v82, v199, v84);
            v91 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(v12, v90, v89, (uint64_t)size);
            v92 = (char *)malloc_type_malloc(size[0], 0xD8DCEB1uLL);
            memcpy(v92, v91, size[0]);
            v93 = size[0];
            sub_1B195E990(v88, v80);
            if ((v93 & 0xFFFFFFFF0) != 0)
            {
              v94 = 0;
              v95 = v87 + 24 * v84;
              v98 = *(char **)(v95 + 8);
              v97 = (void **)(v95 + 8);
              v96 = v98;
              v99 = v97 + 1;
              v100 = (v93 >> 4);
              do
              {
                v101 = &v92[16 * v94];
                if ((unint64_t)v96 >= *v99)
                {
                  v102 = (v96 - (_BYTE *)*v88) >> 4;
                  if ((unint64_t)(v102 + 1) >> 60)
                    goto LABEL_61;
                  v103 = *v99 - (_QWORD)*v88;
                  v104 = v103 >> 3;
                  if (v103 >> 3 <= (unint64_t)(v102 + 1))
                    v104 = v102 + 1;
                  if ((unint64_t)v103 >= 0x7FFFFFFFFFFFFFF0)
                    v105 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v105 = v104;
                  if (v105)
                    v106 = (char *)sub_1B17F7824((uint64_t)(v97 + 1), v105);
                  else
                    v106 = 0;
                  v107 = &v106[16 * v102];
                  *(_OWORD *)v107 = *(_OWORD *)v101;
                  v108 = (char *)*v97;
                  v109 = (char *)*v88;
                  v110 = v107;
                  if (*v97 != *v88)
                  {
                    do
                    {
                      *((_OWORD *)v110 - 1) = *((_OWORD *)v108 - 1);
                      v110 -= 16;
                      v108 -= 16;
                    }
                    while (v108 != v109);
                    v108 = (char *)*v88;
                  }
                  *v88 = v110;
                  v96 = v107 + 16;
                  *v97 = v107 + 16;
                  *v99 = &v106[16 * v105];
                  if (v108)
                    operator delete(v108);
                }
                else
                {
                  *(_OWORD *)v96 = *(_OWORD *)v101;
                  v96 += 16;
                }
                *v97 = v96;
                ++v94;
              }
              while (v94 != v100);
            }
            free(v92);
            ++v84;
            v80 = v195;
            v78 = v196;
            v12 = v197;
            v85 = v198;
          }
          while (v84 != v195);
          v83 = v198 + 1;
          v199 = (v198 + 1);
        }
        while (v193 > (v198 + 1));
      }
    }
    *(_QWORD *)(v22 + 112) = v78;
    sub_1B1959AB0(v12, CFSTR("vertexRefiner"), a4, v201, (uint64_t)size);
    v111 = v208;
    *(_OWORD *)(v22 + 168) = v207;
    *(_OWORD *)(v22 + 184) = v111;
    *(_OWORD *)(v22 + 200) = v209;
    *(_QWORD *)(v22 + 216) = v210;
    v112 = v206;
    *(_OWORD *)(v22 + 136) = *(_OWORD *)size;
    *(_OWORD *)(v22 + 152) = v112;
    *(_QWORD *)(v22 + 176) = *(id *)(v22 + 56);
    *(_QWORD *)(v22 + 184) = *(id *)(v22 + 56);
    v119 = sub_1B1958C0C(v22 + 136, (uint64_t)v201, v113, v114, v115, v116, v117, v118);
    *(_DWORD *)(v22 + 16) = 0;
    v122 = objc_msgSend_stringByAppendingString_(CFSTR("fvarRefiners"), v120, (uint64_t)CFSTR(".count"), v121, v119);
    v125 = objc_msgSend_decodeInt32ForKey_(v12, v123, v122, v124);
    if (v125)
    {
      v126 = v125;
      v127 = (id **)operator new();
      sub_1B195EA2C(v127, v126);
      v130 = 0;
      for (i = 0; i != v126; ++i)
      {
        v132 = (void *)objc_msgSend_stringByAppendingFormat_(CFSTR("fvarRefiners"), v128, (uint64_t)CFSTR(".[%d]"), v129, i);
        sub_1B1959AB0(v12, v132, a4, v201, (uint64_t)size);
        v133 = 0x2E8BA2E8BA2E8BA3 * (v127[1] - *v127);
        if (v133 <= i)
          goto LABEL_61;
        v134 = &(*v127)[v130];
        v135 = v206;
        *(_OWORD *)v134 = *(_OWORD *)size;
        *((_OWORD *)v134 + 1) = v135;
        v136 = v207;
        v137 = v208;
        v138 = v209;
        v134[10] = v210;
        *((_OWORD *)v134 + 3) = v137;
        *((_OWORD *)v134 + 4) = v138;
        *((_OWORD *)v134 + 2) = v136;
        v130 += 11;
      }
      v200 = v127;
      v139 = v133;
      if ((_DWORD)v133)
      {
        v140 = 0;
        v141 = 6;
        v142 = 24;
        do
        {
          v143 = *(uint64_t **)(v22 + 80);
          v144 = *v143;
          if (0xAAAAAAAAAAAAAAABLL * ((v143[1] - *v143) >> 4) <= v140)
            goto LABEL_61;
          v145 = *v127;
          if (0x2E8BA2E8BA2E8BA3 * (v127[1] - *v127) <= v140)
            goto LABEL_61;
          v146 = v22;
          v147 = &v145[v141];
          v148 = (uint64_t)&v145[v141 - 6];
          *(v147 - 1) = *(id *)(v144 + v142);
          *v147 = *(id *)(v144 + v142);
          sub_1B1958C0C(v148, (uint64_t)v201, v149, v150, v151, v152, v153, v154);
          ++v140;
          v141 += 11;
          v142 += 48;
          v22 = v146;
        }
        while (v139 != v140);
      }
    }
    else
    {
      v200 = 0;
    }
    sub_1B1959CC4(v22, v192, a4, v201);
    v12 = v197;
    *(_QWORD *)(v22 + 344) = sub_1B195A170(v197, CFSTR("skinMorphSubdivIndexToMetalIndexBuffer"), v201, 0);
    if (objc_msgSend_containsValueForKey_(v197, v155, (uint64_t)CFSTR("synchronizeCoarsePositionsPipeline.functionName"), v156))
    {
      v157 = objc_opt_class();
      v159 = objc_msgSend_decodeObjectOfClass_forKey_(v197, v158, v157, (uint64_t)CFSTR("synchronizeCoarsePositionsPipeline.functionName"));
      *(_QWORD *)(v22 + 352) = (id)objc_msgSend_computePipelineStateForKernel_(a4, v160, v159, v161);
    }
    *(_QWORD *)(v22 + 120) = sub_1B195A170(v197, CFSTR("fvarChannelDescriptorsBuffer"), v201, 0);
    *(_QWORD *)(v22 + 128) = sub_1B195A170(v197, CFSTR("fvarChannelsPackedDataBuffer"), v201, 0);
    objc_msgSend_endEncoding(v203, v162, v163, v164);
    objc_msgSend_commit(v202, v165, v166, v167);
    objc_msgSend_waitUntilCompleted(v202, v168, v169, v170);
    if (objc_msgSend_status(v202, v171, v172, v173) != 4)
    {
      v177 = objc_msgSend_status(v202, v174, v175, v176);
      objc_msgSend_error(v202, v178, v179, v180);
      objc_msgSend_logs(v202, v181, v182, v183);
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: OpenSubdiv unarchiver command buffer execution failed with status %d, error: %@\n%@"), v184, v185, v186, v187, v188, v189, v177);
      if (v191)
        (*(void (**)(void))(v191 + 16))();
      CFRelease((CFTypeRef)v22);
      v22 = 0;
    }
    sub_1B195A24C(&v200);
  }
  objc_msgSend_finishDecoding(v12, v15, v16, v17);

  return v22;
}

void sub_1B1959798(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28)
{
  sub_1B17F7664(&a28);
  MEMORY[0x1B5E22E18](a19, 0x20C40960023A9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19597E0@<X0>(void *a1@<X0>, void *a2@<X1>, void **a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  const char *v9;
  const void *v10;
  char *v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  int v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  size_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  uint64_t v58;
  const char *v59;
  uint64_t result;
  void *v61;
  size_t size;

  size = 0;
  v8 = objc_msgSend_stringByAppendingString_(a2, (const char *)a2, (uint64_t)CFSTR(".patchArrays"), a4);
  v61 = a1;
  v10 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v9, v8, (uint64_t)&size);
  v11 = (char *)malloc_type_malloc(size, 0x62B7FEE6uLL);
  memcpy(v11, v10, size);
  v12 = size;
  v13 = operator new();
  *(_QWORD *)(v13 + 8) = 0;
  *(_QWORD *)(v13 + 16) = 0;
  *(_QWORD *)v13 = 0;
  *a5 = v13;
  v14 = (v12 >> 4);
  sub_1B195E8F4((char **)v13, v14);
  if ((v12 & 0xFFFFFFFF0) != 0)
  {
    v15 = 0;
    do
    {
      v16 = (uint64_t *)*a5;
      v17 = &v11[16 * v15];
      v18 = *(_QWORD *)(*a5 + 8);
      v19 = *(_QWORD *)(*a5 + 16);
      if (v18 >= v19)
      {
        v22 = (uint64_t)(v18 - *v16) >> 4;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 60)
          abort();
        v24 = v19 - *v16;
        if (v24 >> 3 > v23)
          v23 = v24 >> 3;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
          v25 = 0xFFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
          v26 = (char *)sub_1B17F7824(*a5 + 16, v25);
        else
          v26 = 0;
        v27 = &v26[16 * v22];
        *(_DWORD *)v27 = *(_DWORD *)v17;
        v28 = &v11[16 * v15];
        v29 = *(_QWORD *)(v28 + 4);
        *((_DWORD *)v27 + 3) = *((_DWORD *)v28 + 3);
        *(_QWORD *)(v27 + 4) = v29;
        v31 = *v16;
        v30 = v16[1];
        v32 = v27;
        if (v30 != *v16)
        {
          do
          {
            v33 = *(_DWORD *)(v30 - 16);
            v30 -= 16;
            *((_DWORD *)v32 - 4) = v33;
            v32 -= 16;
            v34 = *(_QWORD *)(v30 + 4);
            *((_DWORD *)v32 + 3) = *(_DWORD *)(v30 + 12);
            *(_QWORD *)(v32 + 4) = v34;
          }
          while (v30 != v31);
          v30 = *v16;
        }
        v21 = v27 + 16;
        *v16 = (uint64_t)v32;
        v16[1] = (uint64_t)(v27 + 16);
        v16[2] = (uint64_t)&v26[16 * v25];
        if (v30)
          operator delete((void *)v30);
      }
      else
      {
        *(_DWORD *)v18 = *(_DWORD *)v17;
        v20 = *(_QWORD *)(v17 + 4);
        *(_DWORD *)(v18 + 12) = *((_DWORD *)v17 + 3);
        *(_QWORD *)(v18 + 4) = v20;
        v21 = (char *)(v18 + 16);
      }
      v16[1] = (uint64_t)v21;
      ++v15;
    }
    while (v15 != v14);
  }
  free(v11);
  v37 = objc_msgSend_stringByAppendingString_(a2, v35, (uint64_t)CFSTR(".dataBufferOffset"), v36);
  a5[4] = (int)objc_msgSend_decodeInt32ForKey_(v61, v38, v37, v39);
  v42 = objc_msgSend_stringByAppendingString_(a2, v40, (uint64_t)CFSTR(".dataBufferCoarseDataSize"), v41);
  a5[5] = (int)objc_msgSend_decodeInt32ForKey_(v61, v43, v42, v44);
  v47 = objc_msgSend_stringByAppendingString_(a2, v45, (uint64_t)CFSTR(".dataBufferFullDataSize"), v46);
  v50 = (int)objc_msgSend_decodeInt32ForKey_(v61, v48, v47, v49);
  v53 = (const char *)objc_msgSend_stringByAppendingString_(a2, v51, (uint64_t)CFSTR(".patchIndexBuffer"), v52);
  a5[1] = sub_1B195A170(v61, v53, a3, 0);
  v56 = (const char *)objc_msgSend_stringByAppendingString_(a2, v54, (uint64_t)CFSTR(".patchParamBuffer"), v55);
  a5[2] = sub_1B195A170(v61, v56, a3, 0);
  v59 = (const char *)objc_msgSend_stringByAppendingString_(a2, v57, (uint64_t)CFSTR(".dataBuffer"), v58);
  result = sub_1B195A170(v61, v59, a3, v50);
  a5[3] = result;
  return result;
}

id sub_1B1959AB0@<X0>(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void **a4@<X3>, uint64_t a5@<X8>)
{
  _OWORD *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  const void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const void *v45;
  size_t v46;
  size_t v47;
  const char *v48;
  id result;
  __int128 __dst;
  uint64_t v52;
  size_t __n;
  unint64_t v54;

  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)(a5 + 72) = 0;
  *(_QWORD *)(a5 + 56) = 0;
  v9 = (_OWORD *)(a5 + 56);
  v10 = (void *)objc_msgSend_stringByAppendingString_(a2, (const char *)a2, (uint64_t)CFSTR(".stencilTable"), (uint64_t)a4);
  v13 = (const char *)objc_msgSend_stringByAppendingString_(v10, v11, (uint64_t)CFSTR(".sizesBuffer"), v12);
  v14 = sub_1B195A170(a1, v13, a4, 0);
  v17 = (const char *)objc_msgSend_stringByAppendingString_(v10, v15, (uint64_t)CFSTR(".offsetsBuffer"), v16);
  v18 = sub_1B195A170(a1, v17, a4, 0);
  v21 = (const char *)objc_msgSend_stringByAppendingString_(v10, v19, (uint64_t)CFSTR(".indicesBuffer"), v20);
  v22 = sub_1B195A170(a1, v21, a4, 0);
  v25 = (const char *)objc_msgSend_stringByAppendingString_(v10, v23, (uint64_t)CFSTR(".weightsBuffer"), v24);
  v26 = sub_1B195A170(a1, v25, a4, 0);
  v29 = objc_msgSend_stringByAppendingString_(v10, v27, (uint64_t)CFSTR(".numStencils"), v28);
  v32 = objc_msgSend_decodeInt32ForKey_(a1, v30, v29, v31);
  *(_QWORD *)a5 = v14;
  *(_QWORD *)(a5 + 8) = v18;
  *(_QWORD *)(a5 + 16) = v22;
  *(_QWORD *)(a5 + 24) = v26;
  *(_DWORD *)(a5 + 32) = v32;
  v35 = (void *)objc_msgSend_stringByAppendingString_(a2, v33, (uint64_t)CFSTR(".evaluatorInput"), v34);
  __n = 0;
  v54 = 0;
  v38 = objc_msgSend_stringByAppendingString_(v35, v36, (uint64_t)CFSTR(".srcDesc"), v37);
  v40 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v39, v38, (uint64_t)&v54);
  v43 = objc_msgSend_stringByAppendingString_(v35, v41, (uint64_t)CFSTR(".dstDesc"), v42);
  v45 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v44, v43, (uint64_t)&__n);
  v46 = v54;
  if (v54 <= 0x17)
    v47 = 24 - v54;
  else
    v47 = 0;
  bzero((char *)&__dst + v54, v47);
  memcpy(&__dst, v40, v46);
  memcpy((char *)&__dst + 12, v45, __n);
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *v9 = __dst;
  *(_QWORD *)(a5 + 72) = v52;
  *(_QWORD *)&__dst = 0;
  DWORD2(__dst) = 0;
  result = (id)objc_msgSend_computeEvaluatorWithContext_srcDesc_dstDesc_duDesc_dvDesc_(a3, v48, (uint64_t)a4, (uint64_t)v9, a5 + 68, &__dst, &__dst);
  *(_QWORD *)(a5 + 80) = result;
  return result;
}

void sub_1B1959CC4(uint64_t a1, _BYTE *a2, void *a3, void **a4)
{
  _BYTE *v5;
  int v7;
  _BOOL4 v8;
  int v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int **v18;
  int *v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  int v28;
  float v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int **v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  char v39;
  _BYTE *v40;
  _BOOL4 v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  id v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v68;

  v5 = a2;
  v7 = a2[4];
  v8 = sub_1B19256F8(*(_DWORD *)(a1 + 24));
  v9 = sub_1B1925708(*(_DWORD *)(a1 + 24));
  if (v8)
    v17 = 16;
  else
    v17 = 0;
  v68 = a1;
  v18 = *(int ***)(a1 + 32);
  v19 = *v18;
  v20 = (unint64_t)v18[1];
  if (*v18 == (int *)v20)
  {
    v21 = 0;
    v33 = 0;
  }
  else
  {
    v21 = 0;
    v22 = 0;
    v23 = v17 + 8 * v9;
    while (2)
    {
      v24 = *v19;
      switch(*v19)
      {
        case 4:
          v25 = v19[1];
          goto LABEL_23;
        case 6:
          v25 = v19[1];
          v28 = v5[3];
          *(_WORD *)(a1 + 232) = 12 * v21;
          v29 = 36.0;
          if (!v28)
            v29 = 12.0;
          *(_WORD *)(a1 + 248) = v22;
          v22 = (float)((float)v22 + (float)((float)(v29 * (float)v25) * 16.0)) + 16 * v25 * v23;
          goto LABEL_23;
        case 7:
        case 8:
          v25 = v19[1];
          v26 = 4;
          goto LABEL_8;
        case 9:
          v25 = v19[1];
          v27 = 20;
          v26 = 20;
LABEL_17:
          *(_WORD *)(a1 + 238) = 12 * v21;
          *(_WORD *)(a1 + 254) = v22;
          v30 = v25 * v27;
          v31 = v22 + v25 * v23 * v26;
          v32 = 12;
LABEL_22:
          v22 = v31 + v30 * v32;
          goto LABEL_23;
        default:
          v25 = v19[1];
          if ((v24 - 1) >= 2)
          {
            if (v24 != 3)
            {
              v26 = -1;
LABEL_8:
              v27 = v26;
              switch(v24)
              {
                case 0:
                case 1:
                case 2:
                case 5:
                  goto LABEL_12;
                case 7:
                  *(_WORD *)(a1 + 234) = 12 * v21;
                  *(_WORD *)(a1 + 250) = v22;
                  goto LABEL_21;
                case 8:
                  *(_WORD *)(a1 + 236) = 12 * v21;
                  *(_WORD *)(a1 + 252) = v22;
LABEL_21:
                  v30 = v25 * v26;
                  v31 = v22 + v25 * v23 * v26;
                  v32 = 60;
                  goto LABEL_22;
                case 9:
                  goto LABEL_17;
                default:
                  break;
              }
            }
          }
          else
          {
LABEL_12:
            sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported patch type"), v11, v12, v13, v14, v15, v16, v64);
          }
LABEL_23:
          v21 += v25;
          v19 += 4;
          if (v19 != (int *)v20)
            continue;
          if (v22)
            v33 = objc_msgSend_newBufferWithLength_options_(*a4, v10, v22, 32);
          else
            v33 = 0;
          break;
      }
      break;
    }
  }
  *(_QWORD *)(a1 + 240) = v33;
  if (v7)
    v34 = objc_msgSend_newBufferWithLength_options_(*a4, v10, 80 * v21, 32);
  else
    v34 = 0;
  *(_QWORD *)(a1 + 256) = v34;
  *(_QWORD *)(a1 + 224) = objc_msgSend_newBufferWithLength_options_(*a4, v10, 12 * v21, 32);
  v35 = *(unsigned int ***)(a1 + 32);
  v36 = *v35;
  v37 = v35[1];
  if (*v35 != v37)
  {
    v65 = *(unsigned int *)(a1 + 24);
    v66 = (unint64_t)v5[4] << 16;
    do
    {
      if (v5[2])
      {
        v38 = *v36;
        if ((v38 - 4) > 5)
          v39 = 1;
        else
          v39 = 0x60504030102uLL >> (8 * (v38 - 4));
        v40 = v5;
        v41 = v5[3] != 0;
        v42 = objc_alloc_init(MEMORY[0x1E0C99E08]);
        v43 = 256;
        if (((((v38 - 4) > 5) | (7u >> (v38 - 4))) & v41) == 0)
          v43 = 0;
        v20 = v20 & 0xFFFFFFFF00000000 | v65;
        v44 = sub_1B195A52C(v43 | v66 | v39 & 7 | 0x2000000000, (const char *)v20, v42);
        v45 = objc_alloc_init(MEMORY[0x1E0CC6A68]);
        v46 = sub_1B189EAF0();
        objc_msgSend_setLanguageVersion_(v45, v47, v46, v48);
        objc_msgSend_setFastMathEnabled_(v45, v49, 1, v50);
        objc_msgSend_setPreprocessorMacros_(v45, v51, (uint64_t)v42, v52);
        objc_msgSend_setAdditionalCompilerArguments_(v45, v53, (uint64_t)CFSTR(" -w "), v54);

        v55 = objc_alloc(MEMORY[0x1E0CB3940]);
        v58 = sub_1B195A3A4(v39 & 7);
        if (qword_1EEF66A00 != -1)
          dispatch_once(&qword_1EEF66A00, &unk_1E63D9DF0);
        v59 = (void *)objc_msgSend_initWithFormat_(v55, v56, (uint64_t)CFSTR("%@%@%@"), v57, v44, v58, qword_1EEF669F8);
        v60 = (void *)sub_1B18FD768((uint64_t)a3);
        v62 = objc_msgSend_libraryForSourceCode_options_(v60, v61, (uint64_t)v59, (uint64_t)v45);
        *(_QWORD *)(v68 + 8 * v38 + 264) = objc_msgSend_newComputePipelineStateWithFunctionName_library_(a3, v63, (uint64_t)CFSTR("compute_opensubdiv"), v62);

        v5 = v40;
      }
      v36 += 4;
    }
    while (v36 != v37);
  }
}

uint64_t sub_1B195A170(void *a1, const char *a2, void **a3, size_t a4)
{
  const char *v8;
  const char *v9;
  const void *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  size_t __n;

  if (!objc_msgSend_containsValueForKey_(a1, a2, (uint64_t)a2, a4))
    return 0;
  __n = 0;
  v10 = (const void *)objc_msgSend_decodeBytesForKey_returnedLength_(a1, v8, (uint64_t)a2, (uint64_t)&__n);
  if (__n >= a4)
    return objc_msgSend_newBufferWithBytes_length_options_(*a3, v9, (uint64_t)v10, __n, 0);
  v11 = malloc_type_malloc(a4, 0x21BE106CuLL);
  memcpy(v11, v10, __n);
  v13 = objc_msgSend_newBufferWithBytes_length_options_(*a3, v12, (uint64_t)v11, a4, 0);
  free(v11);
  return v13;
}

void sub_1B195A24C(id ***a1)
{
  id **v1;
  id *v2;
  id *v3;

  v1 = *a1;
  if (*a1)
  {
    v2 = *v1;
    v3 = v1[1];
    if (*v1 == v3)
      goto LABEL_6;
    do
    {
      sub_1B195E504(v2);
      v2 += 11;
    }
    while (v2 != v3);
    v1 = *a1;
    if (*a1)
    {
      v2 = *v1;
LABEL_6:
      if (v2)
      {
        v1[1] = v2;
        operator delete(v2);
      }
      JUMPOUT(0x1B5E22E18);
    }
  }
}

uint64_t sub_1B195A2D8()
{
  if (qword_1EEF669F0 != -1)
    dispatch_once(&qword_1EEF669F0, &unk_1E63D1330);
  return qword_1EEF669E8;
}

void sub_1B195A318()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *__p;
  char v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  sub_1B221E018();
  if (v4 >= 0)
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  else
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  qword_1EEF669E8 = v2;
  if (v4 < 0)
    operator delete(__p);
}

void sub_1B195A388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B195A3A4(uint64_t result)
{
  uint64_t *v1;

  switch((int)result)
  {
    case 1:
      if (qword_1EEF66A10 != -1)
        dispatch_once(&qword_1EEF66A10, &unk_1E63D9E10);
      v1 = &qword_1EEF66A08;
      goto LABEL_20;
    case 2:
      if (qword_1EEF66A20 != -1)
        dispatch_once(&qword_1EEF66A20, &unk_1E63D9E30);
      v1 = &qword_1EEF66A18;
      goto LABEL_20;
    case 3:
      if (qword_1EEF66A30 != -1)
        dispatch_once(&qword_1EEF66A30, &unk_1E63D9E50);
      v1 = &qword_1EEF66A28;
      goto LABEL_20;
    case 4:
      if (qword_1EEF66A40 != -1)
        dispatch_once(&qword_1EEF66A40, &unk_1E63D9E70);
      v1 = &qword_1EEF66A38;
      goto LABEL_20;
    case 5:
      if (qword_1EEF66A50 != -1)
        dispatch_once(&qword_1EEF66A50, &unk_1E63D9E90);
      v1 = &qword_1EEF66A48;
      goto LABEL_20;
    case 6:
      if (qword_1EEF66A60 != -1)
        dispatch_once(&qword_1EEF66A60, &unk_1E63D9EB0);
      v1 = &qword_1EEF66A58;
LABEL_20:
      result = *v1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B195A52C(unint64_t a1, const char *a2, void *a3)
{
  unsigned int v4;
  int v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  _BOOL4 v21;
  char v22;
  char v23;
  _BOOL4 v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int i;
  _QWORD *v34;
  std::string *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int j;
  _QWORD *v45;
  std::string *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int k;
  _QWORD *v56;
  std::string *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int m;
  _QWORD *v67;
  std::string *v68;
  std::string::size_type size;
  _QWORD *v70;
  _QWORD *v71;
  std::string *v72;
  std::string::size_type v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int n;
  _QWORD *v82;
  std::string *v83;
  std::string::size_type v84;
  _QWORD *v85;
  _QWORD *v86;
  std::string *v87;
  std::string::size_type v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int ii;
  _QWORD *v97;
  std::string *v98;
  std::string::size_type v99;
  _QWORD *v100;
  _QWORD *v101;
  std::string *v102;
  std::string::size_type v103;
  _QWORD *v104;
  _QWORD *v105;
  std::string *v106;
  std::string::size_type v107;
  _QWORD *v108;
  _QWORD *v109;
  std::string *v110;
  std::string::size_type v111;
  _QWORD *v112;
  _QWORD *v113;
  std::string *v114;
  std::string::size_type v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  int v123;
  unsigned __int8 v124;
  _QWORD *v125;
  std::string *v126;
  std::string::size_type v127;
  _QWORD *v128;
  _QWORD *v129;
  std::string *v130;
  std::string::size_type v131;
  _QWORD *v132;
  _QWORD *v133;
  std::string *v134;
  uint64_t v135;
  _QWORD *v136;
  const char *v137;
  const char *v138;
  const char *v139;
  const char *v140;
  const char *v141;
  const char *v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  const char *v147;
  const char *v148;
  const char *v149;
  const char *v150;
  const char *v151;
  const char *v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  const char *v164;
  const char *v165;
  const char *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  const char *v170;
  const char *v171;
  const char *v172;
  uint64_t v173;
  uint64_t v174;
  const char *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  const char *v183;
  const char *v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  const char *v189;
  const char *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  const char *v195;
  const char *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  const char *v204;
  const char *v205;
  const char *v206;
  const char *v207;
  const char *v208;
  const char *v209;
  const char *v210;
  const char *v211;
  const char *v212;
  void *v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  const char *v218;
  void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  void *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  const char *v254;
  void *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  const char *v266;
  void *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  const char *v278;
  void *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  const char *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  const char *v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  const char *v314;
  const char *v315;
  void *v316;
  const char *v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v322;
  unsigned int v323;
  unsigned int v324;
  char v325;
  char v326;
  char v327;
  unint64_t v328;
  void *v329;
  std::string v330;
  std::string v331;
  std::string v332;
  std::string v333;
  std::string v334;
  _QWORD v335[2];
  uint64_t v336;
  _QWORD v337[10];
  char v338;
  uint64_t v339;

  v4 = a2;
  v6 = 6;
  v7 = 16;
  switch((char)a1)
  {
    case 2:
      v6 = 4;
      v7 = 3;
      goto LABEL_8;
    case 3:
      goto LABEL_8;
    case 4:
      v6 = 7;
      goto LABEL_6;
    case 5:
      v6 = 8;
      goto LABEL_6;
    case 6:
      v6 = 9;
      v7 = 20;
      goto LABEL_8;
    default:
      v6 = 3;
LABEL_6:
      v7 = 4;
LABEL_8:
      objc_msgSend_setObject_forKeyedSubscript_(a3, a2, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("USE_OPENSUBDIV"));
      v10 = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v8, (v6 - 5) < 5, v9);
      objc_msgSend_setObject_forKeyedSubscript_(a3, v11, v10, (uint64_t)CFSTR("OSD_IS_ADAPTIVE"));
      v329 = a3;
      v323 = v6 - 5;
      switch(v6)
      {
        case 3:
          v328 = v7;
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("OSD_PATCH_QUADS"));
          break;
        case 4:
          v328 = v7;
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("OSD_PATCH_TRIANGLES"));
          break;
        case 5:
          v328 = v7;
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported patch type"), v13, v14, v15, v16, v17, v18, v322);
          break;
        case 6:
          v328 = v7;
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("OSD_PATCH_REGULAR"));
          objc_msgSend_setObject_forKeyedSubscript_(a3, v19, (uint64_t)&unk_1E64783E8, (uint64_t)CFSTR("CONTROL_POINTS_PER_PATCH"));
          break;
        case 7:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("OSD_PATCH_GREGORY"));
          goto LABEL_18;
        case 8:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("OSD_PATCH_GREGORY_BOUNDARY"));
          goto LABEL_18;
        case 9:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v12, MEMORY[0x1E0C9AAB0], (uint64_t)CFSTR("OSD_PATCH_GREGORY_BASIS"));
LABEL_18:
          objc_msgSend_setObject_forKeyedSubscript_(a3, v20, (uint64_t)&unk_1E6478400, (uint64_t)CFSTR("CONTROL_POINTS_PER_PATCH"));
          v328 = 4;
          break;
        default:
          v328 = v7;
          break;
      }
      v21 = sub_1B19256F8(v4);
      v22 = sub_1B1925708(v4);
      if (v21)
        v23 = 4;
      else
        v23 = 0;
      v24 = sub_1B192578C(v4);
      v25 = sub_1B192579C(v4);
      if (v24)
        v26 = 4;
      else
        v26 = 0;
      v325 = v26;
      v326 = v25;
      v324 = sub_1B1925818(v4);
      sub_1B195B954((uint64_t)v335);
      sub_1B1960B04(&v336, (uint64_t)"#define OSD_UV_CORRECTION if (t > 0.5) { ti += 0.01f; } else { ti += 0.01f; }\n",
        78);
      v327 = v23 + 2 * v22;
      if (v327)
      {
        sub_1B1960B04(&v336, (uint64_t)"struct OsdInputVertexType { \n", 29);
        sub_1B1960B04(&v336, (uint64_t)"    metal::packed_float3 position; \n", 36);
        for (i = 0; i != 8; ++i)
        {
          if (sub_1B1925664(v4, i, v27, v28, v29, v30, v31, v32) == 2)
          {
            v34 = sub_1B1960B04(&v336, (uint64_t)"    metal::packed_float2 texcoord", 33);
            std::to_string(&v334, i);
            v35 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v334
                : (std::string *)v334.__r_.__value_.__r.__words[0];
            v36 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v334.__r_.__value_.__r.__words[2])
                : v334.__r_.__value_.__l.__size_;
            v37 = sub_1B1960B04(v34, (uint64_t)v35, v36);
            sub_1B1960B04(v37, (uint64_t)"; \n", 3);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
          }
        }
        if (sub_1B192565C(v4) == 2)
          sub_1B1960B04(&v336, (uint64_t)"    metal::packed_float4 color; \n", 33);
        sub_1B1960B04(&v336, (uint64_t)"}; \n", 4);
        sub_1B1960B04(&v336, (uint64_t)"#define OSD_USER_VARYING_DECLARE                             ", 61);
        for (j = 0; j != 8; ++j)
        {
          if (sub_1B1925664(v4, j, v38, v39, v40, v41, v42, v43) == 2)
          {
            v45 = sub_1B1960B04(&v336, (uint64_t)"float2 texcoord", 15);
            std::to_string(&v334, j);
            v46 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v334
                : (std::string *)v334.__r_.__value_.__r.__words[0];
            v47 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v334.__r_.__value_.__r.__words[2])
                : v334.__r_.__value_.__l.__size_;
            v48 = sub_1B1960B04(v45, (uint64_t)v46, v47);
            sub_1B1960B04(v48, (uint64_t)"; ", 2);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
          }
        }
        if (sub_1B192565C(v4) == 2)
          sub_1B1960B04(&v336, (uint64_t)"float4 color; ", 14);
        sub_1B1960B04(&v336, (uint64_t)"\n", 1);
        sub_1B1960B04(&v336, (uint64_t)"#define OSD_USER_VARYING_DECLARE_PACKED                             ", 68);
        for (k = 0; k != 8; ++k)
        {
          if (sub_1B1925664(v4, k, v49, v50, v51, v52, v53, v54) == 2)
          {
            v56 = sub_1B1960B04(&v336, (uint64_t)"metal::packed_float2 texcoord", 29);
            std::to_string(&v334, k);
            v57 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &v334
                : (std::string *)v334.__r_.__value_.__r.__words[0];
            v58 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? HIBYTE(v334.__r_.__value_.__r.__words[2])
                : v334.__r_.__value_.__l.__size_;
            v59 = sub_1B1960B04(v56, (uint64_t)v57, v58);
            sub_1B1960B04(v59, (uint64_t)"; ", 2);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
          }
        }
        if (sub_1B192565C(v4) == 2)
          sub_1B1960B04(&v336, (uint64_t)"metal::packed_float4 color; ", 28);
        sub_1B1960B04(&v336, (uint64_t)"\n", 1);
        sub_1B1960B04(&v336, (uint64_t)"#define OSD_USER_VARYING_PER_VERTEX(in, out)                 ", 61);
        for (m = 0; m != 8; ++m)
        {
          if (sub_1B1925664(v4, m, v60, v61, v62, v63, v64, v65) == 2)
          {
            v67 = sub_1B1960B04(&v336, (uint64_t)"out.texcoord", 12);
            std::to_string(&v334, m);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v68 = &v334;
            else
              v68 = (std::string *)v334.__r_.__value_.__r.__words[0];
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            else
              size = v334.__r_.__value_.__l.__size_;
            v70 = sub_1B1960B04(v67, (uint64_t)v68, size);
            v71 = sub_1B1960B04(v70, (uint64_t)" = in.texcoord", 14);
            std::to_string(&v333, m);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v72 = &v333;
            else
              v72 = (std::string *)v333.__r_.__value_.__r.__words[0];
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v73 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            else
              v73 = v333.__r_.__value_.__l.__size_;
            v74 = sub_1B1960B04(v71, (uint64_t)v72, v73);
            sub_1B1960B04(v74, (uint64_t)"; ", 2);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v333.__r_.__value_.__l.__data_);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
          }
        }
        if (sub_1B192565C(v4) == 2)
          sub_1B1960B04(&v336, (uint64_t)"out.color = in.color; ", 22);
        sub_1B1960B04(&v336, (uint64_t)"\n", 1);
        sub_1B1960B04(&v336, (uint64_t)"#define OSD_USER_VARYING_PER_CONTROL_POINT(in, out)          ", 61);
        for (n = 0; n != 8; ++n)
        {
          if (sub_1B1925664(v4, n, v75, v76, v77, v78, v79, v80) == 2)
          {
            v82 = sub_1B1960B04(&v336, (uint64_t)"out.texcoord", 12);
            std::to_string(&v334, n);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v83 = &v334;
            else
              v83 = (std::string *)v334.__r_.__value_.__r.__words[0];
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v84 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            else
              v84 = v334.__r_.__value_.__l.__size_;
            v85 = sub_1B1960B04(v82, (uint64_t)v83, v84);
            v86 = sub_1B1960B04(v85, (uint64_t)" = in.texcoord", 14);
            std::to_string(&v333, n);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v87 = &v333;
            else
              v87 = (std::string *)v333.__r_.__value_.__r.__words[0];
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v88 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            else
              v88 = v333.__r_.__value_.__l.__size_;
            v89 = sub_1B1960B04(v86, (uint64_t)v87, v88);
            sub_1B1960B04(v89, (uint64_t)"; ", 2);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v333.__r_.__value_.__l.__data_);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
          }
        }
        if (sub_1B192565C(v4) == 2)
          sub_1B1960B04(&v336, (uint64_t)"out.color = in.color; ", 22);
        sub_1B1960B04(&v336, (uint64_t)"\n", 1);
        sub_1B1960B04(&v336, (uint64_t)"#define OSD_USER_VARYING_PER_EVAL_POINT(UV, a, b, c, d, out) ", 61);
        for (ii = 0; ii != 8; ++ii)
        {
          if (sub_1B1925664(v4, ii, v90, v91, v92, v93, v94, v95) == 2)
          {
            v97 = sub_1B1960B04(&v336, (uint64_t)"out.texcoord", 12);
            std::to_string(&v334, ii);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v98 = &v334;
            else
              v98 = (std::string *)v334.__r_.__value_.__r.__words[0];
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v99 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            else
              v99 = v334.__r_.__value_.__l.__size_;
            v100 = sub_1B1960B04(v97, (uint64_t)v98, v99);
            v101 = sub_1B1960B04(v100, (uint64_t)" = mix(mix(a.texcoord", 21);
            std::to_string(&v333, ii);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v102 = &v333;
            else
              v102 = (std::string *)v333.__r_.__value_.__r.__words[0];
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v103 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            else
              v103 = v333.__r_.__value_.__l.__size_;
            v104 = sub_1B1960B04(v101, (uint64_t)v102, v103);
            v105 = sub_1B1960B04(v104, (uint64_t)", b.texcoord", 12);
            std::to_string(&v332, ii);
            if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v106 = &v332;
            else
              v106 = (std::string *)v332.__r_.__value_.__r.__words[0];
            if ((v332.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v107 = HIBYTE(v332.__r_.__value_.__r.__words[2]);
            else
              v107 = v332.__r_.__value_.__l.__size_;
            v108 = sub_1B1960B04(v105, (uint64_t)v106, v107);
            v109 = sub_1B1960B04(v108, (uint64_t)", UV.x), mix(c.texcoord", 23);
            std::to_string(&v331, ii);
            if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v110 = &v331;
            else
              v110 = (std::string *)v331.__r_.__value_.__r.__words[0];
            if ((v331.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v111 = HIBYTE(v331.__r_.__value_.__r.__words[2]);
            else
              v111 = v331.__r_.__value_.__l.__size_;
            v112 = sub_1B1960B04(v109, (uint64_t)v110, v111);
            v113 = sub_1B1960B04(v112, (uint64_t)", d.texcoord", 12);
            std::to_string(&v330, ii);
            if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v114 = &v330;
            else
              v114 = (std::string *)v330.__r_.__value_.__r.__words[0];
            if ((v330.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v115 = HIBYTE(v330.__r_.__value_.__r.__words[2]);
            else
              v115 = v330.__r_.__value_.__l.__size_;
            v116 = sub_1B1960B04(v113, (uint64_t)v114, v115);
            sub_1B1960B04(v116, (uint64_t)", UV.x), UV.y); ", 16);
            if (SHIBYTE(v330.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v330.__r_.__value_.__l.__data_);
            if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v331.__r_.__value_.__l.__data_);
            if (SHIBYTE(v332.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v332.__r_.__value_.__l.__data_);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v333.__r_.__value_.__l.__data_);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
          }
        }
        if (sub_1B192565C(v4) == 2)
          sub_1B1960B04(&v336, (uint64_t)"out.color = mix(mix(a.color, b.color, UV.x), mix(c.color, d.color, UV.x), UV.y); ",
            81);
        sub_1B1960B04(&v336, (uint64_t)"\n", 1);
        sub_1B1960B04(&v336, (uint64_t)"#define OSD_USER_VARYING_DECLARE_ATTRIBUTE                   ", 61);
        v123 = 0;
        v124 = 11;
        do
        {
          if (sub_1B1925664(v4, v123, v117, v118, v119, v120, v121, v122) == 2)
          {
            v125 = sub_1B1960B04(&v336, (uint64_t)"float2 texcoord", 15);
            std::to_string(&v334, v123);
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v126 = &v334;
            else
              v126 = (std::string *)v334.__r_.__value_.__r.__words[0];
            if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v127 = HIBYTE(v334.__r_.__value_.__r.__words[2]);
            else
              v127 = v334.__r_.__value_.__l.__size_;
            v128 = sub_1B1960B04(v125, (uint64_t)v126, v127);
            v129 = sub_1B1960B04(v128, (uint64_t)" [[attribute(", 13);
            std::to_string(&v333, v124);
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v130 = &v333;
            else
              v130 = (std::string *)v333.__r_.__value_.__r.__words[0];
            if ((v333.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v131 = HIBYTE(v333.__r_.__value_.__r.__words[2]);
            else
              v131 = v333.__r_.__value_.__l.__size_;
            v132 = sub_1B1960B04(v129, (uint64_t)v130, v131);
            sub_1B1960B04(v132, (uint64_t)")]]; ", 5);
            if (SHIBYTE(v333.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v333.__r_.__value_.__l.__data_);
            if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v334.__r_.__value_.__l.__data_);
            ++v124;
          }
          ++v123;
        }
        while (v123 != 8);
        if (sub_1B192565C(v4) == 2)
        {
          v133 = sub_1B1960B04(&v336, (uint64_t)"float4 color [[attribute(", 25);
          std::to_string(&v334, v124);
          v134 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? &v334
               : (std::string *)v334.__r_.__value_.__r.__words[0];
          v135 = (v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
               ? HIBYTE(v334.__r_.__value_.__r.__words[2])
               : v334.__r_.__value_.__l.__size_;
          v136 = sub_1B1960B04(v133, (uint64_t)v134, v135);
          sub_1B1960B04(v136, (uint64_t)")]]; ", 5);
          if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v334.__r_.__value_.__l.__data_);
        }
        sub_1B1960B04(&v336, (uint64_t)"\n", 1);
      }
      else
      {
        sub_1B1960B04(&v336, (uint64_t)"struct OsdInputVertexType { \n", 29);
        sub_1B1960B04(&v336, (uint64_t)"    metal::packed_float3 position; \n", 36);
        sub_1B1960B04(&v336, (uint64_t)"}; \n", 4);
      }
      objc_msgSend_setObject_forKeyedSubscript_(v329, v137, (uint64_t)&unk_1E6478418, (uint64_t)CFSTR("VERTEX_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v138, (uint64_t)&unk_1E6478430, (uint64_t)CFSTR("PATCH_INDICES_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v139, (uint64_t)&unk_1E6478448, (uint64_t)CFSTR("CONTROL_INDICES_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v140, (uint64_t)&unk_1E6478460, (uint64_t)CFSTR("OSD_PATCHPARAM_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v141, (uint64_t)&unk_1E6478478, (uint64_t)CFSTR("OSD_PERPATCHVERTEXBEZIER_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v142, (uint64_t)&unk_1E6478490, (uint64_t)CFSTR("OSD_PERPATCHTESSFACTORS_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v143, (uint64_t)&unk_1E64784A8, (uint64_t)CFSTR("OSD_VALENCE_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v144, (uint64_t)&unk_1E64784C0, (uint64_t)CFSTR("OSD_QUADOFFSET_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v145, (uint64_t)&unk_1E64784D8, (uint64_t)CFSTR("TRANSFORMS_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v146, (uint64_t)&unk_1E64784F0, (uint64_t)CFSTR("TESSELLATION_LEVEL_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v147, (uint64_t)&unk_1E6478448, (uint64_t)CFSTR("INDICES_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v148, (uint64_t)&unk_1E6478508, (uint64_t)CFSTR("QUAD_TESSFACTORS_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v149, (uint64_t)&unk_1E6478478, (uint64_t)CFSTR("OSD_PERPATCHVERTEXGREGORY_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v150, (uint64_t)&unk_1E6478520, (uint64_t)CFSTR("OSD_PATCH_INDEX_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v151, (uint64_t)&unk_1E6478538, (uint64_t)CFSTR("OSD_DRAWINDIRECT_BUFFER_INDEX"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v152, (uint64_t)&unk_1E6478550, (uint64_t)CFSTR("OSD_KERNELLIMIT_BUFFER_INDEX"));
      v155 = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v153, (a1 >> 8) & 1, v154);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v156, v155, (uint64_t)CFSTR("OSD_PATCH_ENABLE_SINGLE_CREASE"));
      v159 = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v157, 0, v158);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v160, v159, (uint64_t)CFSTR("OSD_FRACTIONAL_EVEN_SPACING"));
      v163 = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v161, (a1 >> 16) & 1, v162);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v164, v163, (uint64_t)CFSTR("OSD_FRACTIONAL_ODD_SPACING"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v165, (uint64_t)&unk_1E64783E8, (uint64_t)CFSTR("OSD_MAX_TESS_LEVEL"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v166, (uint64_t)&unk_1E6478568, (uint64_t)CFSTR("USE_STAGE_IN"));
      v169 = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v167, (a1 & 0x10000) == 0, v168);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v170, v169, (uint64_t)CFSTR("USE_PTVS_FACTORS"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v171, (uint64_t)&unk_1E6478580, (uint64_t)CFSTR("USE_PTVS_SHARPNESS"));
      v174 = objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], v172, WORD2(a1), v173);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v175, v174, (uint64_t)CFSTR("THREADS_PER_THREADGROUP"));
      if (v328 / WORD2(a1) <= 1)
        v178 = objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v176, 1, v177);
      else
        v178 = objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v176, v328 / WORD2(a1), v177);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v179, v178, (uint64_t)CFSTR("CONTROL_POINTS_PER_THREAD"));
      v182 = objc_msgSend_numberWithUnsignedInteger_(MEMORY[0x1E0CB37E8], v180, v328, v181);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v183, v182, (uint64_t)CFSTR("VERTEX_CONTROL_POINTS_PER_PATCH"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v184, (uint64_t)&unk_1E6478550, (uint64_t)CFSTR("OSD_MAX_VALENCE"));
      v187 = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v185, (v327 + 3), v186);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v188, v187, (uint64_t)CFSTR("OSD_NUM_ELEMENTS"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v189, (uint64_t)&unk_1E6478568, (uint64_t)CFSTR("OSD_ENABLE_BACKPATCH_CULL"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v190, (uint64_t)&unk_1E6478568, (uint64_t)CFSTR("OSD_USE_PATCH_INDEX_BUFFER"));
      v193 = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], v191, (a1 >> 16) & 1, v192);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v194, v193, (uint64_t)CFSTR("OSD_ENABLE_SCREENSPACE_TESSELLATION"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v195, (uint64_t)&unk_1E6478568, (uint64_t)CFSTR("OSD_ENABLE_PATCH_CULL"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v196, (uint64_t)&unk_1E6478580, (uint64_t)CFSTR("NEEDS_BARRIER"));
      if (v325 + 2 * v326)
      {
        v199 = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v197, (v325 + 2 * v326), v198);
        objc_msgSend_setObject_forKeyedSubscript_(v329, v200, v199, (uint64_t)CFSTR("OSD_FVAR_WIDTH"));
        v203 = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], v201, v324, v202);
        objc_msgSend_setObject_forKeyedSubscript_(v329, v204, v203, (uint64_t)CFSTR("OSD_FVAR_USES_MULTIPLE_CHANNELS"));
        objc_msgSend_setObject_forKeyedSubscript_(v329, v205, (uint64_t)&unk_1E6478598, (uint64_t)CFSTR("OSD_FVAR_DATA_BUFFER_INDEX"));
        objc_msgSend_setObject_forKeyedSubscript_(v329, v206, (uint64_t)&unk_1E64785B0, (uint64_t)CFSTR("OSD_FVAR_INDICES_BUFFER_INDEX"));
        if (v323 <= 4)
        {
          objc_msgSend_setObject_forKeyedSubscript_(v329, v207, (uint64_t)&unk_1E64783E8, (uint64_t)CFSTR("OSD_FVAR_PATCHPARAM_BUFFER_INDEX"));
          objc_msgSend_setObject_forKeyedSubscript_(v329, v208, (uint64_t)&unk_1E64785C8, (uint64_t)CFSTR("OSD_FVAR_PATCH_ARRAY_BUFFER_INDEX"));
        }
        objc_msgSend_setObject_forKeyedSubscript_(v329, v207, (uint64_t)&unk_1E6478598, (uint64_t)CFSTR("OSD_FVAR_CHANNELS_CHANNEL_COUNT_INDEX"));
        objc_msgSend_setObject_forKeyedSubscript_(v329, v209, (uint64_t)&unk_1E64785B0, (uint64_t)CFSTR("OSD_FVAR_CHANNELS_CHANNEL_DESCRIPTORS_INDEX"));
        objc_msgSend_setObject_forKeyedSubscript_(v329, v210, (uint64_t)&unk_1E64783E8, (uint64_t)CFSTR("OSD_FVAR_CHANNELS_PACKED_DATA_BUFFER_INDEX"));
        objc_msgSend_setObject_forKeyedSubscript_(v329, v211, (uint64_t)&unk_1E64785C8, (uint64_t)CFSTR("OSD_FVAR_CHANNELS_PATCH_ARRAY_INDEX_BUFFER_INDEX"));
      }
      objc_msgSend_setObject_forKeyedSubscript_(v329, v197, (uint64_t)&unk_1E64785E0, (uint64_t)CFSTR("OSD_PRIMVAR_INTERPOLATION_MODE_USER_VARYING"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v212, (uint64_t)&unk_1E64785F8, (uint64_t)CFSTR("OSD_PRIMVAR_INTERPOLATION_MODE_FACE_VARYING"));
      v213 = (void *)MEMORY[0x1E0CB37E8];
      v214 = sub_1B192565C(v4);
      v217 = objc_msgSend_numberWithUnsignedInt_(v213, v215, v214, v216);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v218, v217, (uint64_t)CFSTR("OSD_COLOR_INTERPOLATION_MODE"));
      v219 = (void *)MEMORY[0x1E0CB37E8];
      v226 = sub_1B1925664(v4, 0, v220, v221, v222, v223, v224, v225);
      v229 = objc_msgSend_numberWithUnsignedInt_(v219, v227, v226, v228);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v230, v229, (uint64_t)CFSTR("OSD_TEXCOORD0_INTERPOLATION_MODE"));
      v231 = (void *)MEMORY[0x1E0CB37E8];
      v238 = sub_1B1925664(v4, 1u, v232, v233, v234, v235, v236, v237);
      v241 = objc_msgSend_numberWithUnsignedInt_(v231, v239, v238, v240);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v242, v241, (uint64_t)CFSTR("OSD_TEXCOORD1_INTERPOLATION_MODE"));
      v243 = (void *)MEMORY[0x1E0CB37E8];
      v250 = sub_1B1925664(v4, 2u, v244, v245, v246, v247, v248, v249);
      v253 = objc_msgSend_numberWithUnsignedInt_(v243, v251, v250, v252);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v254, v253, (uint64_t)CFSTR("OSD_TEXCOORD2_INTERPOLATION_MODE"));
      v255 = (void *)MEMORY[0x1E0CB37E8];
      v262 = sub_1B1925664(v4, 3u, v256, v257, v258, v259, v260, v261);
      v265 = objc_msgSend_numberWithUnsignedInt_(v255, v263, v262, v264);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v266, v265, (uint64_t)CFSTR("OSD_TEXCOORD3_INTERPOLATION_MODE"));
      v267 = (void *)MEMORY[0x1E0CB37E8];
      v274 = sub_1B1925664(v4, 4u, v268, v269, v270, v271, v272, v273);
      v277 = objc_msgSend_numberWithUnsignedInt_(v267, v275, v274, v276);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v278, v277, (uint64_t)CFSTR("OSD_TEXCOORD4_INTERPOLATION_MODE"));
      v279 = (void *)MEMORY[0x1E0CB37E8];
      v286 = sub_1B1925664(v4, 5u, v280, v281, v282, v283, v284, v285);
      v289 = objc_msgSend_numberWithUnsignedInt_(v279, v287, v286, v288);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v290, v289, (uint64_t)CFSTR("OSD_TEXCOORD5_INTERPOLATION_MODE"));
      v291 = (void *)MEMORY[0x1E0CB37E8];
      v298 = sub_1B1925664(v4, 6u, v292, v293, v294, v295, v296, v297);
      v301 = objc_msgSend_numberWithUnsignedInt_(v291, v299, v298, v300);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v302, v301, (uint64_t)CFSTR("OSD_TEXCOORD6_INTERPOLATION_MODE"));
      v303 = (void *)MEMORY[0x1E0CB37E8];
      v310 = sub_1B1925664(v4, 7u, v304, v305, v306, v307, v308, v309);
      v313 = objc_msgSend_numberWithUnsignedInt_(v303, v311, v310, v312);
      objc_msgSend_setObject_forKeyedSubscript_(v329, v314, v313, (uint64_t)CFSTR("OSD_TEXCOORD7_INTERPOLATION_MODE"));
      objc_msgSend_setObject_forKeyedSubscript_(v329, v315, (uint64_t)&unk_1E6478568, (uint64_t)CFSTR("CFX_OPTIMIZE_OPENSUBDIV_STORAGE"));
      v316 = (void *)MEMORY[0x1E0CB3940];
      sub_1B1960E14((uint64_t)v337, &v334);
      if ((v334.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v318 = objc_msgSend_stringWithCString_encoding_(v316, v317, (uint64_t)&v334, 4);
      else
        v318 = objc_msgSend_stringWithCString_encoding_(v316, v317, (uint64_t)v334.__r_.__value_.__l.__data_, 4);
      v319 = v318;
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v334.__r_.__value_.__l.__data_);
      v335[0] = *MEMORY[0x1E0DE4F50];
      v320 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
      *(_QWORD *)((char *)v335 + *(_QWORD *)(v335[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
      v336 = v320;
      v337[0] = MEMORY[0x1E0DE4FB8] + 16;
      if (v338 < 0)
        operator delete((void *)v337[8]);
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x1B5E22DDC](&v339);
      return v319;
  }
}

void sub_1B195B838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46)
{
  sub_1B195BA80((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_1B195B954(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B195BA58(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1B5E22DDC](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B195BA80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E22DDC](a1 + 128);
  return a1;
}

uint64_t sub_1B195BB08(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addObject_(a1, a2, (uint64_t)CFSTR("USE_OPENSUBDIV"), a4);
}

uint64_t sub_1B195BB14(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  unint64_t v10;
  __n128 v12;
  uint64_t v13;

  v8 = (unsigned __int8 *)a1[10].n128_u64[0];
  if (!v8)
    return 0;
  v12 = 0uLL;
  v13 = 0;
  sub_1B17A28EC(a1, a3, a4, a5, a6, a7, a8, &v12);
  if ((v13 & 0x100) != 0)
  {
    v10 = a1[8].n128_u64[1];
    if (v10)
      LODWORD(v10) = a1[9].n128_u64[0] != 0;
  }
  else
  {
    LODWORD(v10) = 0;
  }
  if (*((_QWORD *)v8 + 3)
    && v8[4] == ((BYTE1(v13) >> 1) & 1)
    && v8[2] == a1[8].n128_u8[1]
    && (_DWORD)v10 == v8[3]
    && *v8 == a1[8].n128_u8[0]
    && v8[7] == a1[8].n128_u8[3]
    && v8[8] == a1[8].n128_u8[4]
    && *((_QWORD *)v8 + 2) == (a1[9].n128_u64[0] ^ a1[8].n128_u64[1]))
  {
    return 0;
  }
  sub_1B195BC00((uint64_t)a1);
  return 1;
}

void sub_1B195BC00(uint64_t a1)
{
  _QWORD *v1;
  const void *v3;

  v1 = *(_QWORD **)(a1 + 160);
  if (v1)
  {
    v3 = (const void *)v1[3];
    if (v3)
      CFRelease(v3);
    free(v1);
    *(_QWORD *)(a1 + 160) = 0;
  }
}

char *sub_1B195BC3C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  BOOL v14;
  _BOOL4 v15;
  BOOL v16;
  char v17;
  char v18;
  int v19;
  BOOL v20;
  __int16 v21;
  uint64_t v22;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD v37[7];
  __n128 v38;
  uint64_t v39;

  sub_1B1924A68();
  v13 = *(char **)(a1 + 160);
  if (v13)
    v14 = 1;
  else
    v14 = a2 == 0;
  if (v14)
  {
    if (!v13)
      return v13;
    v36 = a3;
    v15 = *((_QWORD *)v13 + 3) == 0;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 128))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. GPU support for OpenSubdiv must not be enabled when there is a tessellator but the subdivision level is still 0."), v7, v8, v9, v10, v11, v12, (uint64_t)"geometry->_subdivInfo.subdivisionLevel > 0");
    v38 = 0uLL;
    v39 = 0;
    sub_1B17A28EC((__n128 *)a1, v7, v8, v9, v10, v11, v12, &v38);
    v16 = (v39 & 0x100) != 0 && *(_QWORD *)(a1 + 136) && *(_QWORD *)(a1 + 144) != 0;
    v17 = *(_BYTE *)(a1 + 128);
    v18 = *(_BYTE *)(a1 + 129);
    v19 = (BYTE1(v39) >> 1) & 1;
    v36 = a3;
    v20 = sub_1B1815AD8(a3, 64);
    v21 = *(_WORD *)(a1 + 131);
    v22 = *(_QWORD *)(a1 + 144) ^ *(_QWORD *)(a1 + 136);
    v13 = (char *)malloc_type_malloc(0x20uLL, 0x10200404C916D5DuLL);
    *(_QWORD *)(a1 + 160) = v13;
    *v13 = v17;
    v13[1] = 0;
    v13[2] = v18;
    v13[3] = v16;
    v13[4] = v19;
    v13[5] = v20;
    v13[6] = 0;
    *(_WORD *)(v13 + 7) = v21;
    *((_DWORD *)v13 + 3) = 0;
    *(_DWORD *)(v13 + 9) = 0;
    v15 = 1;
    *((_QWORD *)v13 + 2) = v22;
    *((_QWORD *)v13 + 3) = 0;
  }
  if (v15 && a2 != 0)
  {
    if (!v36)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v7, v8, v9, v10, v11, v12, (uint64_t)"engineContext");
    v24 = (void *)sub_1B1813BC4(v36, v6, v7, v8, v9, v10, v11, v12);
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = sub_1B195BE30;
    v37[3] = &unk_1E63D9DA8;
    v37[4] = v24;
    v37[5] = a1;
    v37[6] = v13;
    v28 = (void *)objc_msgSend_resourceManager(v24, v25, v26, v27);
    v32 = (void *)objc_msgSend_commandQueue(v24, v29, v30, v31);
    *((_QWORD *)v13 + 3) = sub_1B195BEA0(a1, v36, v13, v28, v32, (uint64_t)v37, v33, v34);
  }
  return v13;
}

void sub_1B195BE30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;

  v6 = (void *)objc_msgSend_commandBufferStatusMonitor(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend_renderContext_commandBufferDidCompleteWithError_(v6, v7, *(_QWORD *)(a1 + 32), (uint64_t)a2);
  v15 = sub_1B193E568(*(_QWORD *)(a1 + 40), v8, v9, v10, v11, v12, v13, v14);
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: Invalidating OpenSubdiv runtime data of geometry %@"), v16, v17, v18, v19, v20, v21, v15);
  v22 = *(const void **)(*(_QWORD *)(a1 + 48) + 24);
  if (v22)
  {
    CFRelease(v22);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) = 0;
  }
}

uint64_t sub_1B195BEA0(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  void **v78;
  uint64_t v79;
  uint64_t v80;
  BOOL v81;
  char v82;
  uint64_t v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  int64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  int v96;
  uint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  int64_t v106;
  unint64_t v107;
  char *v108;
  char *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _QWORD *v121;
  id **v122;
  int v123;
  unsigned __int8 v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  id *v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  _QWORD **v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  _DWORD *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  __n128 v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  int v161;
  id v162;
  int v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  size_t v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  unsigned __int8 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  void **v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  _DWORD *v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  int v227;
  _DWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  const void *v233;
  int v234;
  _BYTE *v235;
  uint64_t v236;
  uint64_t v237;
  const char *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  unsigned __int8 v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t **v248;
  uint64_t v249;
  uint64_t *v250;
  uint64_t v251;
  uint64_t v252;
  unsigned int *v253;
  uint64_t v254;
  uint64_t v255;
  const char *v256;
  void *v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  const char *v264;
  void *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  const char *v269;
  const char *v270;
  void *v271;
  void *v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  void *v290;
  uint64_t v291;
  uint64_t v292;
  _BYTE *v293;
  unsigned int v294;
  void **v295;
  id **v296;
  uint64_t v297;
  void *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t **v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  void *v305;
  uint64_t v306;
  _QWORD v307[7];
  __int128 v308;
  __int128 v309;
  uint64_t v310;
  int v311;
  char *v312;
  char *v313;
  char *v314;
  id v315;
  int v316;
  id **v317;
  void **v318[2];
  void **v319;
  int v320;
  int *v321;
  uint64_t v322;
  unsigned int v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  unsigned int v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  uint64_t v332;
  __int128 v333;
  __int128 v334;
  _QWORD v335[7];

  v298 = a4;
  v293 = a3;
  v335[5] = *MEMORY[0x1E0C80C00];
  sub_1B193E568(a1, a2, (uint64_t)a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8);
  if (!a2
    || (v19 = sub_1B18149E4(a2, v12, v13, v14, v15, v16, v17, v18), !*(_QWORD *)(v19 + 16))
    || (v20 = v19,
        v21 = sub_1B195EF04(a1),
        (v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 16))(a2, v21)) == 0)
    || (v24 = sub_1B1958E78(v22, v23, v293, v298, a5, a6)) == 0)
  {
    if (!a5)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v13, v14, v15, v16, v17, v18, (uint64_t)"commandQueue");
    os_variant_has_internal_diagnostics();
    v28 = (void *)objc_msgSend_commandBuffer(a5, v25, v26, v27);
    v335[0] = MEMORY[0x1E0C809B0];
    v335[1] = 3221225472;
    v335[2] = sub_1B195F118;
    v335[3] = &unk_1E63D8A90;
    v335[4] = a6;
    objc_msgSend_addCompletedHandler_(v28, v29, (uint64_t)v335, v30);
    v34 = objc_msgSend_computeCommandEncoder(v28, v31, v32, v33);
    *(_QWORD *)&v333 = objc_msgSend_device(a5, v35, v36, v37);
    *((_QWORD *)&v333 + 1) = a5;
    *(_QWORD *)&v334 = v28;
    *((_QWORD *)&v334 + 1) = v34;
    sub_1B1924D88(a1);
    v45 = (void *)sub_1B17A0848(a1, v38, v39, v40, v41, v42, v43, v44);
    v46 = a1 + 128;
    sub_1B1925B14((_QWORD *)(a1 + 128), (uint64_t)v45, v47, v48, v49, v50, v51, v52);
    v326 = 0u;
    v325 = 0u;
    v324 = 0u;
    v328 = 0u;
    v329 = 0u;
    v330 = 0u;
    v331 = 0u;
    v332 = 0;
    v305 = v45;
    sub_1B1926C88((uint64_t)&v323, a1 + 128, (uint64_t)v45, v53, v54, v55, v56, v57);
    v65 = 16 * v293[3];
    v66 = v293[6];
    v300 = a2;
    v290 = a5;
    v291 = a1;
    switch(v66)
    {
      case 2:
        v65 |= 0x100uLL;
        break;
      case 1:
        v65 |= 0x80uLL;
        break;
      case 0:
        v65 |= 0x40uLL;
        break;
    }
    v67 = DWORD2(v331);
    v68 = v331;
    v69 = v323;
    v70 = v327;
    v71 = *v293;
    v72 = v293[2];
    v306 = *((_QWORD *)&v328 + 1);
    v73 = v328;
    v74 = sub_1B1926028(v46, v58, v59, v60, v61, v62, v63, v64);
    v75 = 9;
    if (!(_DWORD)v72)
      v75 = 0;
    LODWORD(v302) = ((v67 - v68) >> 6);
    v297 = v74;
    sub_1B195FA1C((uint64_t)v318, v74, (v70 + v69), 0, v71, v75 | (4 * ((_DWORD)v302 != 0)) | v65, 0, (uint64_t)&v333);
    v76 = v72;
    v77 = v71;
    v78 = v319;
    if (v293[6] == 2)
      v79 = sub_1B2209250(v319, (void **)&v333);
    else
      v79 = 0;
    v292 = v79;
    v80 = *(unsigned int *)(**(_QWORD **)(v297 + 88) + 8);
    v81 = v306 == v73;
    v303 = v76;
    v295 = v78;
    v82 = v71;
    if (v81)
    {
      sub_1B2224688((uint64_t)v321, *((const char **)&v325 + 1), 0, v80);
      v111 = v300;
    }
    else
    {
      v312 = 0;
      v313 = 0;
      v314 = 0;
      sub_1B1927690((void **)&v312, (v80 * (v70 + v69)));
      if ((int)v80 >= 1)
      {
        LODWORD(v306) = 0;
        LODWORD(v304) = v80;
        do
        {
          if ((_DWORD)v69)
          {
            v83 = 0;
            v84 = v306 * v69;
            v85 = v313;
            do
            {
              v86 = (v84 + v83);
              v87 = *((_QWORD *)&v325 + 1);
              if (v85 >= v314)
              {
                v89 = v312;
                v90 = (v85 - v312) >> 2;
                v91 = v90 + 1;
                if ((unint64_t)(v90 + 1) >> 62)
                  abort();
                v92 = v314 - v312;
                if ((v314 - v312) >> 1 > v91)
                  v91 = v92 >> 1;
                if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL)
                  v93 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v93 = v91;
                if (v93)
                {
                  v94 = (char *)sub_1B17F7E58((uint64_t)&v314, v93);
                  v89 = v312;
                  v85 = v313;
                }
                else
                {
                  v94 = 0;
                }
                v95 = &v94[4 * v90];
                *(_DWORD *)v95 = *(_DWORD *)(v87 + 4 * v86);
                v88 = v95 + 4;
                v77 = v71;
                while (v85 != v89)
                {
                  v96 = *((_DWORD *)v85 - 1);
                  v85 -= 4;
                  *((_DWORD *)v95 - 1) = v96;
                  v95 -= 4;
                }
                v312 = v95;
                v313 = v88;
                v314 = &v94[4 * v93];
                if (v89)
                  operator delete(v89);
              }
              else
              {
                *(_DWORD *)v85 = *(_DWORD *)(*((_QWORD *)&v325 + 1) + 4 * v86);
                v88 = v85 + 4;
                v77 = v71;
              }
              v313 = v88;
              ++v83;
              v85 = v88;
            }
            while (v83 != v69);
          }
          if ((_DWORD)v70)
          {
            v97 = 0;
            v98 = v306 * v70;
            v99 = v313;
            do
            {
              v100 = (v98 + v97);
              v101 = *((_QWORD *)&v329 + 1);
              if (v99 >= v314)
              {
                v103 = v312;
                v104 = (v99 - v312) >> 2;
                v105 = v104 + 1;
                if ((unint64_t)(v104 + 1) >> 62)
                  abort();
                v106 = v314 - v312;
                if ((v314 - v312) >> 1 > v105)
                  v105 = v106 >> 1;
                if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL)
                  v107 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v107 = v105;
                if (v107)
                {
                  v108 = (char *)sub_1B17F7E58((uint64_t)&v314, v107);
                  v103 = v312;
                  v99 = v313;
                }
                else
                {
                  v108 = 0;
                }
                v109 = &v108[4 * v104];
                *(_DWORD *)v109 = *(_DWORD *)(v101 + 4 * v100);
                v102 = v109 + 4;
                v77 = v71;
                while (v99 != v103)
                {
                  v110 = *((_DWORD *)v99 - 1);
                  v99 -= 4;
                  *((_DWORD *)v109 - 1) = v110;
                  v109 -= 4;
                }
                v312 = v109;
                v313 = v102;
                v314 = &v108[4 * v107];
                if (v103)
                  operator delete(v103);
              }
              else
              {
                *(_DWORD *)v99 = *(_DWORD *)(*((_QWORD *)&v329 + 1) + 4 * v100);
                v102 = v99 + 4;
                v77 = v71;
              }
              v313 = v102;
              ++v97;
              v99 = v102;
            }
            while (v97 != v70);
          }
          v80 = v304;
          LODWORD(v306) = v306 + 1;
        }
        while ((_DWORD)v306 != (_DWORD)v304);
      }
      sub_1B2224688((uint64_t)v321, v312, 0, v80);
      v111 = v300;
      LODWORD(v76) = v303;
      if (v312)
      {
        v313 = v312;
        operator delete(v312);
      }
    }
    if (qword_1EEF669E0 != -1)
      dispatch_once_f(&qword_1EEF669E0, &qword_1EEF669D8, (dispatch_function_t)sub_1B1958BE0);
    v24 = sub_1B179CB90(qword_1EEF669D8, 0x158uLL);
    *(_DWORD *)(v24 + 28) = *(_DWORD *)(**((_QWORD **)v318[1] + 11) + 8);
    *(_QWORD *)(v24 + 56) = sub_1B22246E0((uint64_t)v321);
    *(_QWORD *)(v24 + 64) = 0;
    *(_QWORD *)(v24 + 72) = 4 * (*v321 * *(_DWORD *)(v24 + 28));
    v112 = operator new();
    v113 = (uint64_t *)v322;
    *(_QWORD *)(v112 + 8) = 0;
    *(_QWORD *)(v112 + 16) = 0;
    *(_QWORD *)v112 = 0;
    sub_1B195E7C0((char *)v112, *v113, v113[1], (v113[1] - *v113) >> 4);
    *(_QWORD *)(v24 + 32) = v112;
    *(_QWORD *)(v24 + 40) = *(id *)(v322 + 24);
    *(_QWORD *)(v24 + 48) = *(id *)(v322 + 32);
    v120 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v322 + 80) - *(_QWORD *)(v322 + 72)) >> 3);
    if ((_DWORD)v302 != (_DWORD)v120)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Internal consistency error."), v114, v115, v116, v117, v118, v119, (uint64_t)"fvarChannelCount == fvarPrimvarCount");
    v304 = v24;
    v302 = v120;
    if ((_DWORD)v120)
    {
      v121 = (_QWORD *)operator new();
      sub_1B195E82C(v121, (int)v120);
      *(_QWORD *)(v24 + 80) = v121;
      v301 = (uint64_t **)(v24 + 80);
      v296 = (id **)operator new();
      v122 = v296;
      sub_1B195EA2C(v296, (int)v120);
      v317 = v296;
      if ((int)v120 >= 1)
      {
        v123 = 0;
        v124 = 0;
        v294 = (16 * (v76 & 0xF)) | ((v77 & 0xF) << 6);
        v299 = v294;
        do
        {
          v125 = v124;
          v126 = v331;
          v127 = v331 + ((unint64_t)v124 << 6);
          if (*(_QWORD *)(v127 + 24) == *(_QWORD *)(v127 + 16))
          {
            v24 = v304;
          }
          else
          {
            v128 = **v301;
            if (0xAAAAAAAAAAAAAAABLL * (((*v301)[1] - v128) >> 4) <= v125)
              abort();
            v129 = v122[1];
            v306 = (uint64_t)*v122;
            v130 = v297;
            if (0x2E8BA2E8BA2E8BA3 * (((uint64_t)v129 - v306) >> 3) <= v125)
              abort();
            v131 = *(_DWORD *)(v127 + 8);
            v132 = operator new();
            v133 = (uint64_t *)(*(_QWORD *)(v322 + 72) + 24 * v125);
            *(_QWORD *)(v132 + 8) = 0;
            *(_QWORD *)(v132 + 16) = 0;
            *(_QWORD *)v132 = 0;
            sub_1B195E7C0((char *)v132, *v133, v133[1], (v133[1] - *v133) >> 4);
            *(_QWORD *)(v128 + 48 * v125) = v132;
            *(_QWORD *)(v128 + 48 * v125 + 8) = *(id *)(*(_QWORD *)(v322 + 96) + 8 * v125);
            *(_QWORD *)(v128 + 48 * v125 + 16) = *(id *)(*(_QWORD *)(v322 + 120) + 8 * v125);
            v299 = v299 & 0xFFFFFC00 | v294 | 0x26;
            v134 = sub_1B22149C8(v130, (unsigned __int16)v299 | (v125 << 32));
            v135 = (_QWORD **)v295[25];
            if ((int)((unint64_t)((_BYTE *)v295[26] - (_BYTE *)v135) >> 3) >= 1
              && *v135
              && (v136 = (_QWORD *)sub_1B2215598(v130, v134, *v135, v123, 1)) != 0)
            {
              if (v134)
                (*(void (**)(uint64_t))(*(_QWORD *)v134 + 8))(v134);
            }
            else
            {
              v136 = (_QWORD *)v134;
            }
            v137 = v126 + (v125 << 6);
            v138 = ((*(_QWORD *)(v137 + 48) - *(_QWORD *)(v137 + 40)) >> 2) / v131;
            v139 = sub_1B22245FC(v131, v138 + ((v136[3] - v136[2]) >> 2), (void **)&v333);
            sub_1B2224688(v139, *(const char **)(v137 + 40), 0, v138);
            v140 = sub_1B22246E0(v139);
            v141 = v128 + 48 * v125;
            v142 = v138 * v131;
            if ((_DWORD)v303)
              v143 = 0;
            else
              v143 = 4 * v138 * v131;
            *(_QWORD *)(v141 + 24) = v140;
            *(_QWORD *)(v141 + 32) = v143;
            v76 = v141 + 24;
            *(_QWORD *)(v76 + 16) = 4 * v138 * v131;
            sub_1B2213DA4(&v312, v136, &v333);
            v144 = v306 + 88 * v125;
            *(_QWORD *)v144 = v312;
            *(_QWORD *)(v144 + 8) = v313;
            *(_QWORD *)(v144 + 16) = v314;
            *(_QWORD *)(v144 + 24) = v315;
            v145 = v316;
            v146 = (_DWORD *)(v306 + 88 * v125);
            v146[17] = v142;
            v146 += 17;
            *(v146 - 3) = 0;
            *(_DWORD *)(v144 + 32) = v145;
            *(v146 - 2) = v131;
            *(v146 - 1) = v131;
            v146[1] = v131;
            v146[2] = v131;
            *(_QWORD *)(v306 + 88 * v125 + 40) = *(id *)v76;
            *(_QWORD *)(v306 + 88 * v125 + 48) = *(id *)v76;
            v310 = 0;
            v311 = 0;
            *(_QWORD *)(v306 + 88 * v125 + 80) = (id)objc_msgSend_computeEvaluatorWithContext_srcDesc_dstDesc_duDesc_dvDesc_(v298, v147, (uint64_t)&v333, (uint64_t)(v146 - 3), v146, &v310, &v310);
            v154.n128_f64[0] = sub_1B1958C0C(v144, (uint64_t)&v333, v148, v149, v150, v151, v152, v153);
            v111 = v300;
            LODWORD(v76) = v303;
            v24 = v304;
            if (v139)
            {
              v155 = sub_1B222456C(v139);
              MEMORY[0x1B5E22E18](v155, 0x1080C40E0210B95);
            }
            (*(void (**)(_QWORD *, __n128))(*v136 + 8))(v136, v154);
            sub_1B2213DF8(&v312);
            v122 = v296;
          }
          v124 = v125 + 1;
          v123 = (v125 + 1);
          LODWORD(v120) = v302;
        }
        while ((int)v302 > v123);
        v77 = v82;
      }
    }
    else
    {
      v122 = 0;
      *(_QWORD *)(v24 + 80) = 0;
      v301 = (uint64_t **)(v24 + 80);
      v317 = 0;
    }
    v296 = v122;
    if (v292)
    {
      *(_QWORD *)(v24 + 88) = *(id *)(v292 + 8);
      *(_QWORD *)(v24 + 96) = *(id *)(v292 + 16);
      v156 = v292;
      *(_DWORD *)(v24 + 104) = *(_DWORD *)(v292 + 24);
      v157 = *(_DWORD *)(v156 + 28);
    }
    else
    {
      *(_QWORD *)(v24 + 88) = 0;
      *(_QWORD *)(v24 + 96) = 0;
      v157 = -1;
      *(_DWORD *)(v24 + 104) = -1;
    }
    *(_DWORD *)(v24 + 108) = v157;
    v158 = sub_1B22149C8(v297, ((v77 & 0xF) << 6) | (16 * v76) | 0xFFFFFFFF00000024);
    v159 = v319[16];
    if (v159 && (v160 = sub_1B22151AC(v297, v158, v159, 1)) != 0)
    {
      if (v158)
        (*(void (**)(uint64_t))(*(_QWORD *)v158 + 8))(v158);
    }
    else
    {
      v160 = v158;
    }
    v161 = *v321;
    sub_1B2213DA4(&v312, v160, &v333);
    *(_QWORD *)(v24 + 136) = v312;
    *(_QWORD *)(v24 + 144) = v313;
    *(_QWORD *)(v24 + 152) = v314;
    v162 = v315;
    *(_DWORD *)(v24 + 204) = *(_DWORD *)(v24 + 28) * v161;
    *(_QWORD *)(v24 + 160) = v162;
    v163 = v316;
    *(_DWORD *)(v24 + 192) = 0;
    *(_DWORD *)(v24 + 168) = v163;
    *(_DWORD *)(v24 + 196) = v161;
    *(_DWORD *)(v24 + 200) = v161;
    *(_DWORD *)(v24 + 208) = v161;
    *(_DWORD *)(v24 + 212) = v161;
    *(_QWORD *)(v24 + 176) = *(id *)(v24 + 56);
    *(_QWORD *)(v24 + 184) = *(id *)(v24 + 56);
    v310 = 0;
    v311 = 0;
    v165 = (uint64_t)v305;
    *(_QWORD *)(v24 + 216) = (id)objc_msgSend_computeEvaluatorWithContext_srcDesc_dstDesc_duDesc_dvDesc_(v298, v164, (uint64_t)&v333, v24 + 192, v24 + 204, &v310, &v310);
    if (v160)
      (*(void (**)(uint64_t))(*(_QWORD *)v160 + 8))(v160);
    if (v292)
    {
      v172 = sub_1B220924C();
      MEMORY[0x1B5E22E18](v172, 0x1080C409B94441ALL);
    }
    sub_1B1958C0C(v24 + 136, (uint64_t)&v333, v166, v167, v168, v169, v170, v171);
    *(_DWORD *)(v24 + 16) = 0;
    *(_QWORD *)(v24 + 112) = sub_1B1927DE4(v297, (uint64_t)v295, v165, v173, v174, v175, v176, v177);
    if (v320 >= 13)
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: OSD_MAX_VALENCE is set to %d and current mesh has a max valence of %d"), v178, v179, v180, v181, v182, v183, 12);
    sub_1B1959CC4(v24, v293, v298, (void **)&v333);
    sub_1B1958CD4(v24, v291, v298, (void **)&v333, v184, v185, v186, v187);
    v191 = objc_msgSend_endEncoding(*((void **)&v334 + 1), v188, v189, v190);
    *((_QWORD *)&v334 + 1) = 0;
    if ((int)v120 >= 2)
    {
      v295 = &v290;
      MEMORY[0x1E0C80A78](v191, 40 * v120);
      v306 = (uint64_t)&v290 - v195;
      v299 = v196;
      bzero((char *)&v290 - v195, v196);
      v200 = 0;
      v201 = 0;
      while (1)
      {
        v202 = **v301;
        if (0xAAAAAAAAAAAAAAABLL * (((*v301)[1] - v202) >> 4) <= v200)
          abort();
        v203 = v200;
        v204 = (void **)(v202 + 48 * v200);
        v205 = objc_msgSend_length(v204[3], v197, v198, v199);
        v206 = v202 + 48 * v203;
        v207 = *(_QWORD *)(v206 + 32);
        v211 = objc_msgSend_length(*(void **)(v206 + 8), v208, v209, v210);
        v215 = objc_msgSend_length(*(void **)(v202 + 48 * v203 + 16), v212, v213, v214);
        v221 = *(_QWORD *)*v204;
        v220 = *((_QWORD *)*v204 + 1);
        v222 = (_DWORD *)(v306 + 40 * v203);
        v223 = v205 - v207 + v201;
        *v222 = v223;
        v222[1] = v201;
        v201 = v223 + v211;
        if ((_DWORD)v303)
        {
          v224 = (v220 - v221) >> 4;
          v225 = v215 + v201;
          v226 = v201;
          v201 += v215 + 24 * v224;
        }
        else
        {
          v226 = 0;
          v225 = 0;
        }
        v227 = v302;
        v228 = (_DWORD *)(v306 + 40 * v203);
        v228[3] = v226;
        v228[4] = v225;
        v229 = v331 + (v203 << 6);
        v228[2] = *(_DWORD *)(v229 + 8);
        v230 = *(_QWORD *)(v229 + 16);
        v231 = *(_QWORD *)(v229 + 24);
        if (v230 != v231)
          break;
LABEL_116:
        v200 = v203 + 1;
        if (v227 <= (v203 + 1))
        {
          v297 = 0;
          v237 = objc_msgSend_newBufferWithBytes_length_options_((void *)v333, v197, v306, v299);
          v24 = v304;
          *(_QWORD *)(v304 + 120) = v237;
          *(_QWORD *)(v24 + 128) = objc_msgSend_newBufferWithLength_options_((void *)v333, v238, v201, 32);
          v305 = (void *)objc_msgSend_blitCommandEncoder((void *)v334, v239, v240, v241);
          v245 = 0;
          do
          {
            v246 = **v301;
            if (0xAAAAAAAAAAAAAAABLL * (((*v301)[1] - v246) >> 4) <= v245)
              abort();
            v247 = v245;
            v248 = (uint64_t **)(v246 + 48 * v245);
            v249 = (*v248)[1];
            v298 = (void *)**v248;
            v299 = v249;
            v250 = v248[3];
            v251 = (uint64_t)v248[4];
            v252 = *(_QWORD *)(v24 + 128);
            v253 = (unsigned int *)(v306 + 40 * v245);
            v254 = v253[1];
            v255 = objc_msgSend_length(v250, v242, v243, v244);
            objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_(v305, v256, (uint64_t)v250, v251, v252, v254, v255 - (_QWORD)v248[4]);
            v257 = *(void **)(v246 + 48 * v247 + 8);
            v258 = *(_QWORD *)(v304 + 128);
            v259 = *v253;
            v263 = objc_msgSend_length(v257, v260, v261, v262);
            objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_(v305, v264, (uint64_t)v257, 0, v258, v259, v263);
            v111 = v300;
            v24 = v304;
            if ((_DWORD)v303)
            {
              v265 = *(void **)(v246 + 48 * v247 + 16);
              v266 = *(_QWORD *)(v304 + 128);
              v267 = *(unsigned int *)(v306 + 40 * v247 + 12);
              v268 = objc_msgSend_length(v265, v242, v243, v244);
              objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_(v305, v269, (uint64_t)v265, 0, v266, v267, v268);
              v271 = (void *)objc_msgSend_newBufferWithBytes_length_options_((void *)v333, v270, **v248, 8 * (((v299 - (uint64_t)v298) >> 3) + ((v299 - (uint64_t)v298) >> 4)), v297);
              v111 = v300;
              v24 = v304;
              v272 = v271;
              v273 = *(_QWORD *)(v304 + 128);
              v274 = *(unsigned int *)(v306 + 40 * v247 + 16);
              v278 = objc_msgSend_length(v271, v275, v276, v277);
              objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_(v305, v279, (uint64_t)v272, 0, v273, v274, v278);

            }
            v245 = v247 + 1;
          }
          while ((int)v302 > (v247 + 1));
          objc_msgSend_endEncoding(v305, v242, v243, v244);
          goto LABEL_123;
        }
      }
      v232 = v306 + 40 * v203 + 20;
      while (1)
      {
        v233 = *(const void **)(v230 + 8);
        v234 = sub_1B17ED7B4((uint64_t)v233, (uint64_t)v197, v198, v199, v216, v217, v218, v219);
        v235 = (_BYTE *)v232;
        if (v234 == 2)
          goto LABEL_114;
        if (v234 == 3)
          break;
LABEL_115:
        v230 += 16;
        if (v230 == v231)
          goto LABEL_116;
      }
      v236 = sub_1B1875428((uint64_t)v305, v233, 0, v199, v216, v217, v218, v219);
      v235 = (_BYTE *)(v306 + 40 * v203 + 2 * v236 + 22);
LABEL_114:
      *v235 = 1;
      v235[1] = *(_DWORD *)v230;
      goto LABEL_115;
    }
LABEL_123:
    objc_msgSend_commit((void *)v334, v192, v193, v194, v290);
    if (v111)
    {
      v287 = sub_1B18149E4(v111, v280, v281, v282, v283, v284, v285, v286);
      if (*(_QWORD *)(v287 + 24))
      {
        v288 = sub_1B195EF04(v291);
        v307[0] = MEMORY[0x1E0C809B0];
        v307[1] = 3221225472;
        v307[2] = sub_1B195F200;
        v307[3] = &unk_1E63D9ED8;
        v307[5] = v24;
        v307[6] = v296;
        v307[4] = v290;
        v308 = v333;
        v309 = v334;
        (*(void (**)(uint64_t, uint64_t, _QWORD *))(v287 + 24))(v111, v288, v307);
      }
    }
    sub_1B195A24C(&v317);
    nullsub_16(&v323);
    sub_1B2213DF8(&v312);
    sub_1B1960988(v318);
    v318[0] = (void **)&v331;
    sub_1B1960A94(v318);
    if (*((_QWORD *)&v329 + 1))
    {
      *(_QWORD *)&v330 = *((_QWORD *)&v329 + 1);
      operator delete(*((void **)&v329 + 1));
    }
    if ((_QWORD)v328)
    {
      *((_QWORD *)&v328 + 1) = v328;
      operator delete((void *)v328);
    }
    if (*((_QWORD *)&v325 + 1))
    {
      *(_QWORD *)&v326 = *((_QWORD *)&v325 + 1);
      operator delete(*((void **)&v325 + 1));
    }
    if ((_QWORD)v324)
    {
      *((_QWORD *)&v324 + 1) = v324;
      operator delete((void *)v324);
    }
  }
  return v24;
}

void sub_1B195CFE8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B1960988((_QWORD *)(v1 + 304));
  sub_1B195F900(v1 + 416);
  _Unwind_Resume(a1);
}

double sub_1B195D10C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *EncoderAndResetCache;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  _BOOL4 v35;
  char v36;
  const char *v37;
  char v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double result;
  _QWORD v54[4];
  unint64_t v55;
  int64x2_t v56;
  unint64_t v57;
  int64x2_t v58;
  unint64_t v59;
  int64x2_t v60;
  uint64_t v61;
  int64x2_t v62;
  int v63;
  unsigned int v64;

  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = *(_DWORD *)(v8 + 16);
    if (!v9 || v9 != (_DWORD)a4)
    {
      *(_DWORD *)(v8 + 16) = a4;
      v64 = *(_DWORD *)(v8 + 28);
      v14 = *(_QWORD *)(v8 + 352);
      if (!v14)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"osdRuntimeData->skinMorphContext.synchronizeCoarsePositionsPipeline");
        v14 = *(_QWORD *)(v8 + 352);
      }
      v15 = (void *)sub_1B18FD774(v14);
      v19 = objc_msgSend_threadExecutionWidth(v15, v16, v17, v18);
      v23 = (void *)objc_msgSend_commandQueue(a3, v20, v21, v22);
      v27 = (void **)objc_msgSend_resourceComputeEncoder(a3, v24, v25, v26);
      EncoderAndResetCache = (void *)objc_msgSend_getEncoderAndResetCache(*v27, v28, v29, v30);
      v32 = sub_1B18FD774(*(_QWORD *)(v8 + 352));
      objc_msgSend_setComputePipelineState_(EncoderAndResetCache, v33, v32, v34);
      v35 = sub_1B19256F8(*(_DWORD *)(v8 + 24));
      v36 = sub_1B1925708(*(_DWORD *)(v8 + 24));
      if (v35)
        v38 = 4;
      else
        v38 = 0;
      v63 = ((v38 + 2 * v36) & 0xFE) + 3;
      objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v37, a2, 0, 0);
      objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v39, *(_QWORD *)(v8 + 56), 0, 1);
      objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v40, *(_QWORD *)(v8 + 344), 0, 2);
      objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v41, (uint64_t)&v63, 4, 3);
      objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v42, (uint64_t)&v64, 4, 4);
      if (*(_BYTE *)(a1 + 5))
      {
        v61 = v64;
        v62 = vdupq_n_s64(1uLL);
        v59 = v19;
        v60 = v62;
        objc_msgSend_dispatchThreads_threadsPerThreadgroup_(EncoderAndResetCache, v43, (uint64_t)&v61, (uint64_t)&v59);
      }
      else
      {
        v57 = (v19 + v64 - 1) / v19;
        v58 = vdupq_n_s64(1uLL);
        v55 = v19;
        v56 = v58;
        objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(EncoderAndResetCache, v43, (uint64_t)&v57, (uint64_t)&v55);
      }
      v54[0] = objc_msgSend_device(v23, v44, v45, v46);
      v54[1] = v23;
      v54[2] = 0;
      v54[3] = EncoderAndResetCache;
      return sub_1B1958C0C(v8 + 136, (uint64_t)v54, v47, v48, v49, v50, v51, v52);
    }
  }
  return result;
}

BOOL sub_1B195D2F8(uint64_t a1)
{
  uint64_t v1;
  _BOOL8 result;

  result = 0;
  if (*(_BYTE *)(a1 + 2))
  {
    v1 = *(_QWORD *)(a1 + 24);
    if (v1)
    {
      if (!*(_DWORD *)(v1 + 20))
        return 1;
    }
  }
  return result;
}

uint64_t sub_1B195D320(uint64_t result, void *a2, uint64_t a3, uint64_t a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v10;
  void **v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *EncoderAndResetCache;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  const char *v22;
  const char *v23;
  const char *v24;
  int *v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  unsigned int v30;
  unsigned int v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  const char *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  int64x2_t v50;
  int *v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  int64x2_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  int64x2_t v59;
  int v60;
  float v61[3];

  if (*(_BYTE *)(result + 2))
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 24);
    if (v6)
    {
      v7 = *(_DWORD *)(v6 + 20);
      if (!v7 || v7 != (_DWORD)a4)
      {
        *(_DWORD *)(v6 + 20) = a4;
        v10 = *(_QWORD **)(v6 + 32);
        LOBYTE(a5) = *(_BYTE *)(result + 1);
        v61[0] = (float)LODWORD(a5);
        v11 = (void **)objc_msgSend_resourceComputeEncoder(a2, (const char *)a2, a3, a4);
        EncoderAndResetCache = (void *)objc_msgSend_getEncoderAndResetCache(*v11, v12, v13, v14);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v16, *(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64), 5);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v17, *(_QWORD *)(v6 + 40), 0, 6);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v18, *(_QWORD *)(v6 + 48), 0, 8);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v19, *(_QWORD *)(v6 + 256), 0, 11);
        objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v20, *(_QWORD *)(v6 + 224), 0, 19);
        objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v21, (uint64_t)v61, 4, 13);
        result = objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v22, a3, 192, 22);
        if (*(_BYTE *)(v5 + 6) == 2)
        {
          objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v23, *(_QWORD *)(v6 + 96), 0, 10);
          result = objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v24, *(_QWORD *)(v6 + 88), 0, 9);
        }
        v51 = (int *)v10[1];
        if ((int *)*v10 != v51)
        {
          v25 = (int *)(*v10 + 4);
          v50 = vdupq_n_s64(1uLL);
          while (1)
          {
            v26 = v25 - 1;
            v27 = *(v25 - 1);
            if ((v27 - 7) < 2)
              break;
            if ((_DWORD)v27 != 6)
              goto LABEL_15;
            objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v23, *(_QWORD *)(v6 + 240), 0, 7);
            v28 = *v25;
            v29 = 16;
LABEL_21:
            if ((_DWORD)v27 == 9)
              v30 = 4;
            else
              v30 = v29;
            if (v30 >> 5 <= 1)
              v31 = 1;
            else
              v31 = v30 >> 5;
            objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v23, 12 * v25[2], 8, v50.i64[0]);
            objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v32, 4 * v25[1], 6);
            v33 = sub_1B18FD774(*(_QWORD *)(v6 + 8 * v27 + 264));
            objc_msgSend_setComputePipelineState_(EncoderAndResetCache, v34, v33, v35);
            switch((int)v27)
            {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
                sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported patch type"), v37, v38, v39, v40, v41, v42, v50.i64[0]);
                goto LABEL_29;
              case 6:
                v43 = v28 * v29;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 232), 19);
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v44, *(unsigned __int16 *)(v6 + 248), 7);
                break;
              case 7:
                v43 = 4 * v28;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 234), 19);
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v45, *(unsigned __int16 *)(v6 + 250), 7);
                v47 = *(int *)(v6 + 104);
                goto LABEL_33;
              case 8:
                v43 = 4 * v28;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 236), 19);
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v48, *(unsigned __int16 *)(v6 + 252), 7);
                v47 = *(int *)(v6 + 108);
LABEL_33:
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v46, 4 * v47, 10);
                break;
              case 9:
                v43 = 4 * v28;
                objc_msgSend_setBufferOffset_atIndex_(EncoderAndResetCache, v36, *(unsigned __int16 *)(v6 + 238), 19);
                break;
              default:
LABEL_29:
                v43 = 0;
                break;
            }
            v60 = v43;
            objc_msgSend_setBytes_length_atIndex_(EncoderAndResetCache, v36, (uint64_t)&v60, 4, 12);
            if (*(_BYTE *)(v5 + 5))
            {
              v58 = v28 * v30;
              v59 = vdupq_n_s64(1uLL);
              v56 = xmmword_1B22684B0;
              v57 = 1;
              result = objc_msgSend_dispatchThreads_threadsPerThreadgroup_(EncoderAndResetCache, v49, (uint64_t)&v58, (uint64_t)&v56);
            }
            else
            {
              v55 = v50;
              v52 = xmmword_1B22684B0;
              v53 = 1;
              v54 = ((unint64_t)(v28 * v30 / v31) + 31) >> 5;
              result = objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(EncoderAndResetCache, v49, (uint64_t)&v54, (uint64_t)&v52);
            }
            v25 += 4;
            if (v26 + 4 == v51)
              return result;
          }
          objc_msgSend_setBuffer_offset_atIndex_(EncoderAndResetCache, v23, *(_QWORD *)(v6 + 240), 0, 7);
LABEL_15:
          v28 = *v25;
          v29 = 4;
          switch((int)v27)
          {
            case 1:
              v29 = 1;
              break;
            case 2:
              v29 = 2;
              break;
            case 3:
            case 7:
            case 8:
              goto LABEL_21;
            case 4:
              v29 = 3;
              break;
            case 9:
              v29 = 20;
              break;
            default:
              v29 = 0xFFFF;
              break;
          }
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_1B195D704(uint64_t a1, void *a2, int a3, unsigned int a4, unsigned int a5)
{
  _QWORD *v5;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  _QWORD *v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int *v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  uint64_t *v44;
  uint64_t **v45;
  uint64_t *v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int *v66;
  size_t v67;
  uint64_t **v68;
  uint64_t v69;
  unsigned int *v70;
  const char *v71;
  const char *v72;
  int v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  const char *v97;
  unsigned __int16 *v98;
  unsigned int v99;
  unsigned __int16 *v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int v104;
  float v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t *v108;
  _QWORD *v109;

  v5 = *(_QWORD **)(a1 + 24);
  if (!v5)
    return;
  if (!sub_1B1958B84(*(_QWORD *)(a1 + 24), a3))
  {
    v97 = "CFXSubdivisionOsdGPUDraw";
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. %s called but there's no patch to draw."), v12, v13, v14, v15, v16, v17, (uint64_t)"__CFXSubdivisionOsdGPUHasPatchOfType(osdRuntimeData, cfxPatchType)");
  }
  if ((a3 - 2) > 4)
    v18 = 3;
  else
    v18 = dword_1B2268490[(char)(a3 - 2)];
  v19 = (_QWORD *)v5[10];
  v102 = a5;
  if (v19)
    v20 = -1431655765 * ((v19[1] - *v19) >> 4);
  else
    v20 = 0;
  v21 = (uint64_t *)v5[4];
  v106 = v20;
  v22 = (unsigned int *)objc_msgSend_renderEncoder(a2, v11, v12, v13);
  LODWORD(v23) = 1.0;
  objc_msgSend_setTessellationFactorScale_(*((void **)v22 + 2), v24, v25, v26, v23);
  v35 = v5[7];
  v36 = v5[5];
  if (!v35)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v28, v29, v30, v31, v32, v33, (uint64_t)"vertexDataBuffer");
  v99 = v18 - 5;
  LOBYTE(v34) = *(_BYTE *)(a1 + 1);
  v105 = (float)v34;
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v27, v35, 0, 5);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v37, v36, 0, 6);
  v107 = 0;
  v108 = 0;
  v109 = 0;
  sub_1B1868D14(*((_QWORD *)v22 + 3), &v105, 4uLL, (void **)&v107);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v38, (uint64_t)v108, (uint64_t)v109, 13);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v39, v5[32], 0, 11);
  objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v40, v5[6], 0, 8);
  if (v19)
  {
    if (v20 >= 2)
    {
      v107 = 0;
      v108 = 0;
      v109 = 0;
      sub_1B1868D14(*((_QWORD *)v22 + 3), &v106, 4uLL, (void **)&v107);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v42, (uint64_t)v108, (uint64_t)v109, 14);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v43, v5[15], 0, 15);
      v44 = v5 + 16;
LABEL_18:
      objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, *v44, 0, 16);
      goto LABEL_19;
    }
    v45 = (uint64_t **)v5[10];
    v46 = *v45;
    if (v45[1] == *v45)
LABEL_73:
      abort();
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, v46[3], v46[4], 14);
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v47, v46[1], 0, 15);
    if (v99 <= 4)
    {
      v44 = v46 + 2;
      goto LABEL_18;
    }
  }
LABEL_19:
  v101 = v20;
  if (*(_BYTE *)(a1 + 6) == 2)
  {
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, v5[12], 0, 10);
    objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v48, v5[11], 0, 9);
  }
  v104 = 0;
  v50 = *v21;
  v49 = v21[1];
  if (v49 != *v21)
  {
    LODWORD(v51) = 0;
    v52 = 0;
    v53 = a4;
    v54 = v102;
    v103 = (int)v18 - 6;
    v55 = (char *)v5 + 2 * v103;
    v98 = (unsigned __int16 *)(v55 + 248);
    v100 = (unsigned __int16 *)(v55 + 232);
    do
    {
      if (*(_DWORD *)(v50 + 16 * v52) != v18)
        goto LABEL_71;
      if (v103 <= 2)
        objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v41, v5[30], 0, 7);
      v56 = v50 + 16 * v52;
      objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v41, 12 * *(int *)(v56 + 12), 8);
      objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v57, 4 * *(int *)(v56 + 8), 6);
      if (v19)
      {
        if (v101 >= 2)
        {
          v107 = 0;
          v108 = 0;
          v109 = 0;
          v65 = *((_QWORD *)v22 + 3);
          v66 = &v104;
          v67 = 4;
LABEL_33:
          sub_1B1868D14(v65, v66, v67, (void **)&v107);
          objc_msgSend_setVertexBuffer_offset_atIndex_(*((void **)v22 + 2), v71, (uint64_t)v108, (uint64_t)v109, 17);
          goto LABEL_34;
        }
        v68 = *(uint64_t ***)v5[10];
        if (*(uint64_t ***)(v5[10] + 8) == v68)
          goto LABEL_73;
        v69 = **v68;
        if (v104 >= (unint64_t)(((*v68)[1] - v69) >> 4))
          goto LABEL_73;
        v70 = (unsigned int *)(v69 + 16 * v104);
        objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v58, 4 * (int)v70[2], 15);
        if (v99 <= 4)
        {
          objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v58, 12 * (int)v70[3], 16);
          v107 = 0;
          v108 = 0;
          v109 = 0;
          v65 = *((_QWORD *)v22 + 3);
          v66 = v70;
          v67 = 16;
          goto LABEL_33;
        }
      }
LABEL_34:
      if (v18 > 9)
        goto LABEL_39;
      if (((1 << v18) & 0x27) != 0)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported patch type"), v59, v60, v61, v62, v63, v64, v96);
LABEL_39:
        v73 = *(_DWORD *)(v50 + 16 * v52 + 4);
        v74 = 4;
        switch(v18)
        {
          case 3u:
          case 7u:
          case 8u:
            goto LABEL_46;
          case 4u:
            v74 = 3;
            break;
          case 6u:
            v74 = 16;
            break;
          case 9u:
            goto LABEL_43;
          default:
            v74 = -1;
            break;
        }
        goto LABEL_46;
      }
      if (((1 << v18) & 0x1C0) != 0)
      {
        objc_msgSend_setVertexBufferOffset_atIndex_(*((void **)v22 + 2), v58, *v98, 7);
        objc_msgSend_setTessellationFactorBuffer_offset_instanceStride_(*((void **)v22 + 2), v72, v5[28], *v100, 0);
        goto LABEL_39;
      }
      if (v18 != 9)
        goto LABEL_39;
      objc_msgSend_setTessellationFactorBuffer_offset_instanceStride_(*((void **)v22 + 2), v58, v5[28], *v100, 0);
      v73 = *(_DWORD *)(v50 + 16 * v52 + 4);
LABEL_43:
      v74 = 20;
LABEL_46:
      v75 = (uint64_t *)v5[14];
      if (v75)
      {
        v76 = *v75;
        if (0xAAAAAAAAAAAAAAABLL * ((v75[1] - *v75) >> 3) <= v53)
          goto LABEL_73;
        v77 = *(_QWORD *)(v76 + 24 * v53);
        if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v76 + 24 * v53 + 8) - v77) >> 3) <= v104)
          goto LABEL_73;
        sub_1B193C35C(&v107, v77 + 24 * v104);
      }
      else
      {
        v84 = v73;
        v85 = (uint64_t *)operator new(0x10uLL);
        v108 = v85 + 2;
        v109 = v85 + 2;
        *v85 = 0;
        v85[1] = v84;
        v107 = v85;
      }
      switch(v18)
      {
        case 0u:
        case 1u:
        case 2u:
        case 5u:
          sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported patch type"), v78, v79, v80, v81, v82, v83, v96);
          break;
        case 3u:
          v86 = v107;
          v88 = v108;
          if (v107 == v108)
            goto LABEL_68;
          do
          {
            v89 = 6 * *v86;
            v90 = 6 * v86[1];
            v91 = (void *)*((_QWORD *)v22 + 2);
            if (*v22 * (unint64_t)v54 < 2)
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v91, v41, 3, v89, v90);
            else
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(v91, v41, 3, v89, v90);
            v86 += 2;
          }
          while (v86 != v88);
          break;
        case 4u:
          v86 = v107;
          v92 = v108;
          if (v107 == v108)
            goto LABEL_68;
          do
          {
            v93 = 3 * *v86;
            v94 = 3 * v86[1];
            v95 = (void *)*((_QWORD *)v22 + 2);
            if (*v22 * (unint64_t)v54 < 2)
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_(v95, v41, 3, v93, v94);
            else
              objc_msgSend_drawPrimitives_vertexStart_vertexCount_instanceCount_(v95, v41, 3, v93, v94);
            v86 += 2;
          }
          while (v86 != v92);
          break;
        case 6u:
        case 7u:
        case 8u:
        case 9u:
          v86 = v107;
          v87 = v108;
          if (v107 == v108)
            goto LABEL_68;
          do
          {
            objc_msgSend_drawPatches_patchStart_patchCount_patchIndexBuffer_patchIndexBufferOffset_instanceCount_baseInstance_(*((void **)v22 + 2), v41, v74, *v86, v86[1], 0, 0, *v22 * (unint64_t)v54, 0, v97);
            v86 += 2;
          }
          while (v86 != v87);
          break;
        default:
          break;
      }
      v86 = v107;
LABEL_68:
      if (v86)
      {
        v108 = v86;
        operator delete(v86);
      }
      LODWORD(v51) = v104;
      v50 = *v21;
      v49 = v21[1];
LABEL_71:
      v51 = (v51 + 1);
      v104 = v51;
      v52 = v51;
    }
    while (v51 < (v49 - v50) >> 4);
  }
}

void sub_1B195DDAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B195DDD4()
{
  return 65537;
}

_QWORD *sub_1B195DDDC(_QWORD *result)
{
  result[10] = 0;
  result[11] = 0;
  result[12] = 0;
  return result;
}

void sub_1B195DDE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t i;
  void **v7;

  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
  {
    v7 = *(void ***)(a1 + 112);
    sub_1B195E554(&v7);
    MEMORY[0x1B5E22E18](v2, 0x20C40960023A9);
  }
  sub_1B195E498((uint64_t *)(a1 + 32));
  v3 = *(uint64_t ***)(a1 + 80);
  if (v3)
  {
    v4 = *v3;
    v5 = v3[1];
    if (*v3 != v5)
    {
      do
      {
        sub_1B195E498(v4);
        v4 += 6;
      }
      while (v4 != v5);
      v3 = *(uint64_t ***)(a1 + 80);
      if (!v3)
        goto LABEL_11;
      v4 = *v3;
    }
    if (v4)
    {
      v3[1] = v4;
      operator delete(v4);
    }
    MEMORY[0x1B5E22E18](v3, 0x20C40960023A9);
  }
LABEL_11:

  sub_1B195E504((id *)(a1 + 136));
  for (i = 0; i != 80; i += 8)

}

__CFString *sub_1B195DF14(uint64_t a1)
{
  __CFString *Mutable;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  unsigned int v23;
  const __CFString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t **v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  _DWORD *v54;
  _DWORD *i;
  unsigned int v56;
  const __CFString *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v86;
  uint64_t v87;
  __CFString *v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD v92[6];
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXSubdivisionOsdGPURuntimeDataRef %p>"), a1);
  v93 = 0;
  v94 = &v93;
  v95 = 0x2020000000;
  v96 = 0;
  v6 = objc_msgSend_length(*(void **)(a1 + 56), v3, v4, v5);
  v7 = *(uint64_t **)(a1 + 32);
  v9 = *v7;
  v8 = v7[1];
  v13 = objc_msgSend_length(*(void **)(a1 + 40), v10, v11, v12);
  v17 = objc_msgSend_length(*(void **)(a1 + 48), v14, v15, v16);
  v18 = 8 * (((v8 - v9) >> 3) + ((v8 - v9) >> 4));
  v94[3] += v13 + v6 + v17 + v18;
  CFStringAppend(Mutable, CFSTR("\nVertex patch table:"));
  v19 = sub_1B179F098(v18);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch arrays (%@):"), v19);
  v20 = *(_QWORD *)(a1 + 32);
  v21 = *(_DWORD **)v20;
  v22 = *(_DWORD **)(v20 + 8);
  if (*(_DWORD **)v20 != v22)
  {
    do
    {
      v23 = *v21 - 4;
      v24 = CFSTR("QUADS");
      if (v23 <= 5)
        v24 = off_1E63D9F68[v23];
      CFStringAppendFormat(Mutable, 0, CFSTR("\n    - %d x %@"), v21[1], v24);
      v21 += 4;
    }
    while (v21 != v22);
  }
  v25 = *(_QWORD *)(a1 + 56);
  v26 = sub_1B179F098(v6);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Data buffer: %p (%@)"), v25, v26);
  v27 = *(_QWORD *)(a1 + 40);
  v28 = sub_1B179F098(v13);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch index buffer: %p (%@)"), v27, v28);
  v29 = *(_QWORD *)(a1 + 48);
  v30 = sub_1B179F098(v17);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Patch param buffer: %p (%@)"), v29, v30);
  v31 = *(_QWORD **)(a1 + 80);
  if (v31)
  {
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) - *v31;
    if (v32)
    {
      v33 = 0;
      v86 = 0xAAAAAAAAAAAAAAABLL * (v32 >> 4);
      v87 = a1;
      v88 = Mutable;
      do
      {
        CFStringAppendFormat(Mutable, 0, CFSTR("\nFVar patch table (channel %zu):"), v33);
        v37 = *(_QWORD **)(a1 + 80);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v37[1] - *v37) >> 4) <= v33)
          abort();
        v38 = (uint64_t **)(*v37 + 48 * v33);
        v39 = (uint64_t *)(v38 + 3);
        v91 = objc_msgSend_length(v38[3], v34, v35, v36);
        v40 = **v38;
        v41 = (*v38)[1];
        v42 = (uint64_t *)(v38 + 1);
        v90 = objc_msgSend_length(v38[1], v43, v44, v45);
        v89 = v33;
        v46 = (uint64_t *)(v38 + 2);
        Mutable = v88;
        v50 = objc_msgSend_length(v38[2], v47, v48, v49);
        v51 = 8 * (((v41 - v40) >> 3) + ((v41 - v40) >> 4));
        v94[3] += v90 + v91 + v50 + v51;
        v52 = sub_1B179F098(v51);
        CFStringAppendFormat(v88, 0, CFSTR("\n  - Patch arrays (%@):"), v52);
        v53 = *v38;
        v54 = (_DWORD *)**v38;
        for (i = (_DWORD *)v53[1]; v54 != i; v54 += 4)
        {
          v56 = *v54 - 4;
          v57 = CFSTR("QUADS");
          if (v56 <= 5)
            v57 = off_1E63D9F68[v56];
          CFStringAppendFormat(v88, 0, CFSTR("\n    - %d x %@"), v54[1], v57);
        }
        v58 = *v39;
        v59 = sub_1B179F098(v91);
        CFStringAppendFormat(v88, 0, CFSTR("\n  - Data buffer: %p (%@)"), v58, v59);
        v60 = *v42;
        v61 = sub_1B179F098(v90);
        CFStringAppendFormat(v88, 0, CFSTR("\n  - Patch index buffer: %p (%@)"), v60, v61);
        v62 = *v46;
        v63 = sub_1B179F098(v50);
        CFStringAppendFormat(v88, 0, CFSTR("\n  - Patch param buffer: %p (%@)"), v62, v63);
        v33 = v89 + 1;
        a1 = v87;
      }
      while (v89 + 1 != v86);
    }
  }
  if (*(_QWORD *)(a1 + 88) && *(_QWORD *)(a1 + 96))
  {
    CFStringAppend(Mutable, CFSTR("\nLegacy Gregory patch table:"));
    v67 = objc_msgSend_length(*(void **)(a1 + 88), v64, v65, v66);
    v71 = objc_msgSend_length(*(void **)(a1 + 96), v68, v69, v70);
    v94[3] += v71 + v67;
    v72 = *(_QWORD *)(a1 + 88);
    v73 = sub_1B179F098(v67);
    CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Vertex valence buffer: %p (%@)"), v72, v73);
    v74 = *(_QWORD *)(a1 + 96);
    v75 = sub_1B179F098(v71);
    CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Quad offsets buffer: %p (%@)"), v74, v75);
  }
  v92[0] = MEMORY[0x1E0C809B0];
  v92[1] = 3221225472;
  v92[2] = sub_1B195E5C4;
  v92[3] = &unk_1E63D9DD0;
  v92[4] = &v93;
  v92[5] = Mutable;
  CFStringAppend(Mutable, CFSTR("\nVertex Refiner:"));
  sub_1B195E5C4((uint64_t)v92, a1 + 136, v76, v77);
  v81 = objc_msgSend_length(*(void **)(a1 + 344), v78, v79, v80);
  v94[3] += v81;
  v82 = *(_QWORD *)(a1 + 344);
  v83 = sub_1B179F098(v81);
  CFStringAppendFormat(Mutable, 0, CFSTR("\n  - Skin/morph indexing table: %p (%@)"), v82, v83);
  v84 = sub_1B179F098(v94[3]);
  CFStringAppendFormat(Mutable, 0, CFSTR("\nTotal memory usage: %@"), v84);
  _Block_object_dispose(&v93, 8);
  return Mutable;
}

void sub_1B195E444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B195E498(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  if (v2)
  {
    v3 = *(void **)v2;
    if (*(_QWORD *)v2)
    {
      *(_QWORD *)(v2 + 8) = v3;
      operator delete(v3);
    }
    JUMPOUT(0x1B5E22E18);
  }
}

void sub_1B195E504(id *a1)
{

}

void sub_1B195E554(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1B17F7664(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B195E5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __CFString *v19;
  __CFString *v20;
  void *v21;
  uint64_t v22;
  __CFString *v23;
  uint64_t v24;
  uint64_t v25;
  __CFString *v26;
  uint64_t v27;
  uint64_t v28;
  __CFString *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CFString *v40;
  __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __CFString *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = objc_msgSend_length(*(void **)a2, (const char *)a2, a3, a4);
  v10 = objc_msgSend_length(*(void **)(a2 + 8), v7, v8, v9);
  v14 = objc_msgSend_length(*(void **)(a2 + 16), v11, v12, v13);
  v18 = objc_msgSend_length(*(void **)(a2 + 24), v15, v16, v17);
  v19 = *(__CFString **)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v10 + v6 + v14 + v18;
  CFStringAppendFormat(v19, 0, CFSTR("\n  - Vertex stencil table (%d stencils)"), *(unsigned int *)(a2 + 32));
  v20 = *(__CFString **)(a1 + 40);
  v21 = *(void **)a2;
  v22 = sub_1B179F098(v6);
  CFStringAppendFormat(v20, 0, CFSTR("\n    - Sizes buffer: %p (%@)"), v21, v22);
  v23 = *(__CFString **)(a1 + 40);
  v24 = *(_QWORD *)(a2 + 8);
  v25 = sub_1B179F098(v10);
  CFStringAppendFormat(v23, 0, CFSTR("\n    - Offsets buffer: %p (%@)"), v24, v25);
  v26 = *(__CFString **)(a1 + 40);
  v27 = *(_QWORD *)(a2 + 16);
  v28 = sub_1B179F098(v14);
  CFStringAppendFormat(v26, 0, CFSTR("\n    - Indices buffer: %p (%@)"), v27, v28);
  v29 = *(__CFString **)(a1 + 40);
  v30 = *(_QWORD *)(a2 + 24);
  v31 = sub_1B179F098(v18);
  CFStringAppendFormat(v29, 0, CFSTR("\n    - Weights buffer: %p (%@)"), v30, v31);
  v35 = objc_msgSend_length(*(void **)(a2 + 40), v32, v33, v34);
  v39 = objc_msgSend_length(*(void **)(a2 + 40), v36, v37, v38);
  v40 = *(__CFString **)(a1 + 40);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) += v39 + v35;
  CFStringAppend(v40, CFSTR("\n  - Vertex evalutor input"));
  v41 = *(__CFString **)(a1 + 40);
  v42 = *(_QWORD *)(a2 + 40);
  v43 = *(unsigned int *)(a2 + 56);
  v44 = *(unsigned int *)(a2 + 60);
  v45 = *(unsigned int *)(a2 + 64);
  v46 = sub_1B179F098(v35);
  CFStringAppendFormat(v41, 0, CFSTR("\n    - Src buffer: [offset:%d length:%d stride:%d] %p (%@)"), v43, v44, v45, v42, v46);
  v47 = *(__CFString **)(a1 + 40);
  v48 = *(_QWORD *)(a2 + 48);
  v49 = *(unsigned int *)(a2 + 68);
  v50 = *(unsigned int *)(a2 + 72);
  v51 = *(unsigned int *)(a2 + 76);
  v52 = sub_1B179F098(v39);
  CFStringAppendFormat(v47, 0, CFSTR("\n    - Dst buffer: [offset:%d length:%d stride:%d] %p (%@)"), v49, v50, v51, v48, v52);
}

char *sub_1B195E7C0(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1B193A518(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *(_DWORD *)v7 = *(_DWORD *)a2;
      v8 = *(_QWORD *)(a2 + 4);
      *(_DWORD *)(v7 + 12) = *(_DWORD *)(a2 + 12);
      *(_QWORD *)(v7 + 4) = v8;
      v7 += 16;
      a2 += 16;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

_QWORD *sub_1B195E82C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B195E8A8(a1, a2);
    v4 = (char *)a1[1];
    v5 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *sub_1B195E8A8(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x555555555555556)
    abort();
  result = (char *)sub_1B1830490((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void sub_1B195E8F4(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = a1[1] - *a1;
    v6 = (char *)sub_1B17F7824(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_DWORD *)v10 - 4);
        v10 -= 16;
        *((_DWORD *)v12 - 4) = v13;
        v12 -= 16;
        v14 = *(_QWORD *)(v10 + 4);
        *((_DWORD *)v12 + 3) = *((_DWORD *)v10 + 3);
        *(_QWORD *)(v12 + 4) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1B195E990(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B17F7824(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_1B195EA2C(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B195EAB0(a1, a2);
    v4 = (char *)a1[1];
    v5 = 88 * ((88 * a2 - 88) / 0x58) + 88;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

char *sub_1B195EAB0(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    abort();
  result = (char *)sub_1B195EB00((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

void *sub_1B195EB00(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL)
    sub_1B179C4A8();
  return operator new(88 * a2);
}

id sub_1B195EB48()
{
  void *v0;
  const void *v1;
  const char *v2;

  v0 = (void *)sub_1B19B83D4(CFSTR("CFX-OpenSubdiv_compute.metal"));
  qword_1EEF669F8 = (uint64_t)v0;
  v1 = sub_1B19B83D4(CFSTR("vfx_metal"));
  qword_1EEF669F8 = objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v0, v2, (uint64_t)CFSTR("#import \"vfx_metal\""), (uint64_t)v1);
  return (id)qword_1EEF669F8;
}

void sub_1B195EBA4()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *__p;
  char v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  sub_1B221E17C(3);
  if (v4 >= 0)
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  else
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  qword_1EEF66A08 = v2;
  if (v4 < 0)
    operator delete(__p);
}

void sub_1B195EC18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B195EC34()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *__p;
  char v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  sub_1B221E17C(4);
  if (v4 >= 0)
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  else
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  qword_1EEF66A18 = v2;
  if (v4 < 0)
    operator delete(__p);
}

void sub_1B195ECA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B195ECC4()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *__p;
  char v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  sub_1B221E17C(6);
  if (v4 >= 0)
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  else
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  qword_1EEF66A28 = v2;
  if (v4 < 0)
    operator delete(__p);
}

void sub_1B195ED38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B195ED54()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *__p;
  char v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  sub_1B221E17C(7);
  if (v4 >= 0)
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  else
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  qword_1EEF66A38 = v2;
  if (v4 < 0)
    operator delete(__p);
}

void sub_1B195EDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B195EDE4()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *__p;
  char v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  sub_1B221E17C(8);
  if (v4 >= 0)
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  else
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  qword_1EEF66A48 = v2;
  if (v4 < 0)
    operator delete(__p);
}

void sub_1B195EE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B195EE74()
{
  id v0;
  const char *v1;
  uint64_t v2;
  void *__p;
  char v4;

  v0 = objc_alloc(MEMORY[0x1E0CB3940]);
  sub_1B221E17C(9);
  if (v4 >= 0)
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)&__p, 4);
  else
    v2 = objc_msgSend_initWithCString_encoding_(v0, v1, (uint64_t)__p, 4);
  qword_1EEF66A58 = v2;
  if (v4 < 0)
    operator delete(__p);
}

void sub_1B195EEE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B195EF04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  const __CFArray *v20;
  CFIndex i;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  const __CFData *v31;
  const __CFData *v32;
  const UInt8 *BytePtr;
  CC_LONG Length;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  uint8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  void *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  _QWORD v56[5];
  _QWORD v57[5];
  CC_SHA256_CTX c;
  _DWORD v59[16];
  char v60;
  unsigned __int8 md[33];
  uint64_t v62;
  int8x16x2_t v63;

  v62 = *MEMORY[0x1E0C80C00];
  CC_SHA256_Init(&c);
  v9 = sub_1B17A0848(a1, v2, v3, v4, v5, v6, v7, v8);
  v17 = v9;
  v18 = MEMORY[0x1E0C809B0];
  if (v9)
  {
    v19 = sub_1B1874BE0(v9, v10, v11, v12, v13, v14, v15, v16);
    if ((uint64_t)v19 >= 1)
    {
      v20 = v19;
      for (i = 0; (const __CFArray *)i != v20; ++i)
      {
        v22 = sub_1B1874C3C(v17, i, 0, v12, v13, v14, v15, v16);
        v30 = sub_1B17A426C((uint64_t)v22, v23, v24, v25, v26, v27, v28, v29);
        if (sub_1B17A44A0(v30))
        {
          v59[0] = 0;
          v31 = (const __CFData *)sub_1B17A4570((uint64_t)v22, v59);
          if (v31)
          {
            v32 = v31;
            BytePtr = CFDataGetBytePtr(v31);
            Length = CFDataGetLength(v32);
            CC_SHA256_Update(&c, BytePtr, Length);
          }
          v57[0] = v18;
          v57[1] = 3221225472;
          v57[2] = sub_1B195F978;
          v57[3] = &unk_1E63D9EF8;
          v57[4] = &c;
          sub_1B17A4658((uint64_t)v22, (uint64_t)v57);
        }
      }
    }
  }
  v56[0] = v18;
  v56[1] = 3221225472;
  v56[2] = sub_1B195F9A4;
  v56[3] = &unk_1E63D52C0;
  v56[4] = &c;
  sub_1B1873EE0(v17, 0, (uint64_t)v56, v12, v13, v14, v15, v16);
  CC_SHA256_Final(md, &c);
  v42 = 0;
  v43 = (char *)v59;
  v44.i64[0] = 0xA0A0A0A0A0A0A0A0;
  v44.i64[1] = 0xA0A0A0A0A0A0A0A0;
  v45.i64[0] = 0x3737373737373737;
  v45.i64[1] = 0x3737373737373737;
  v46.i64[0] = 0x3030303030303030;
  v46.i64[1] = 0x3030303030303030;
  v47.i64[0] = 0xF0F0F0F0F0F0F0FLL;
  v47.i64[1] = 0xF0F0F0F0F0F0F0FLL;
  v48.i64[0] = 0xA0A0A0A0A0A0A0ALL;
  v48.i64[1] = 0xA0A0A0A0A0A0A0ALL;
  do
  {
    v49 = *(int8x16_t *)&md[v42];
    v63.val[0] = (int8x16_t)vsraq_n_u8((uint8x16_t)vbslq_s8((int8x16_t)vcgtq_u8(v44, (uint8x16_t)v49), v46, v45), (uint8x16_t)v49, 4uLL);
    v50 = vandq_s8(v49, v47);
    v63.val[1] = vaddq_s8(vbslq_s8((int8x16_t)vcgtq_u8(v48, (uint8x16_t)v50), v46, v45), v50);
    vst2q_s8(v43, v63);
    v43 += 32;
    v42 += 16;
  }
  while (v42 != 32);
  v60 = 0;
  v51 = (void *)MEMORY[0x1E0CB3940];
  v52 = sub_1B17A0800(a1, v35, v36, v37, v38, v39, v40, v41);
  return objc_msgSend_stringWithFormat_(v51, v53, (uint64_t)CFSTR("%@-%s"), v54, v52, v59);
}

uint64_t sub_1B195F118(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  result = objc_msgSend_status(a2, (const char *)a2, a3, a4);
  if (result != 4)
  {
    v10 = objc_msgSend_status(a2, v7, v8, v9);
    objc_msgSend_error(a2, v11, v12, v13);
    objc_msgSend_logs(a2, v14, v15, v16);
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: OpenSubdiv command buffer execution failed with status %d, error: %@\n%@"), v17, v18, v19, v20, v21, v22, v10);
    result = *(_QWORD *)(a1 + 32);
    if (result)
      return (*(uint64_t (**)(uint64_t, void *, _QWORD))(result + 16))(result, a2, 0);
  }
  return result;
}

uint64_t sub_1B195F1B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *sub_1B195F1C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B2224688(*(_QWORD *)(a1 + 32), a2, a3, a4);
}

uint64_t sub_1B195F1D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

id sub_1B195F1D8(uint64_t a1)
{
  return sub_1B22246E0(*(_QWORD *)(a1 + 32));
}

uint64_t sub_1B195F1E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B195F1F0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 96);
}

uint64_t sub_1B195F1F8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

CFTypeRef sub_1B195F200(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *inited;
  const char *v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t **v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  id v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const __CFString *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v126;
  uint64_t v128;
  uint64_t v129;
  unsigned int v130;
  unsigned __int8 v131;
  void *v132;
  _QWORD v133[6];
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  __n128 (*v137)(uint64_t, uint64_t);
  uint64_t (*v138)();
  const char *v139;
  __int128 v140;
  __int128 v141;

  v1 = a1[4];
  v2 = a1[5];
  v126 = (void *)a1[9];
  v3 = objc_alloc(MEMORY[0x1E0CB36F8]);
  inited = (void *)objc_msgSend_initRequiringSecureCoding_(v3, v4, 0, v5);
  if (!v1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v7, v8, v9, v10, v11, v12, (uint64_t)"commandQueue");
  v134 = 0;
  v135 = &v134;
  v136 = 0x5012000000;
  v137 = sub_1B19604C8;
  v138 = nullsub_138;
  v139 = "c";
  v140 = 0u;
  v141 = 0u;
  v133[0] = MEMORY[0x1E0C809B0];
  v133[1] = 3221225472;
  v133[2] = sub_1B19604D8;
  v133[3] = &unk_1E63D9F20;
  v133[4] = v1;
  v133[5] = &v134;
  objc_msgSend_encodeInt32_forKey_(inited, v6, 2, (uint64_t)CFSTR("version"));
  objc_msgSend_encodeInt32_forKey_(inited, v14, *(unsigned int *)(v2 + 28), (uint64_t)CFSTR("coarseVertexCount"));
  sub_1B1960570((uint64_t)inited, CFSTR("vertexPatchTable"), v2 + 32, (uint64_t)v133);
  v128 = v2;
  v17 = *(uint64_t **)(v2 + 80);
  v132 = inited;
  if (v17)
  {
    v18 = (v17[1] - *v17) >> 4;
    v19 = 0xAAAAAAAAAAAAAAABLL * v18;
    if (-1431655765 * (_DWORD)v18)
    {
      v20 = objc_msgSend_stringByAppendingString_(CFSTR("fvarPatchTables"), v15, (uint64_t)CFSTR(".count"), v16);
      objc_msgSend_encodeInt32_forKey_(inited, v21, v19, v20);
      v22 = 0;
      v23 = 0;
      while (1)
      {
        v24 = *v17;
        if (0xAAAAAAAAAAAAAAABLL * ((v17[1] - *v17) >> 4) <= v23)
          break;
        v25 = (void *)objc_msgSend_stringByAppendingFormat_(CFSTR("fvarPatchTables"), v15, (uint64_t)CFSTR(".[%d]"), v16, v23);
        sub_1B1960570((uint64_t)inited, v25, v24 + v22, (uint64_t)v133);
        ++v23;
        v22 += 48;
        if (v19 == v23)
          goto LABEL_8;
      }
LABEL_41:
      abort();
    }
  }
LABEL_8:
  if (*(_QWORD *)(v128 + 88) && *(_QWORD *)(v128 + 96))
  {
    v26 = (const char *)objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v15, (uint64_t)CFSTR(".vertexValenceBuffer"), v16);
    sub_1B1960838(inited, v26, *(void **)(v128 + 88), (uint64_t)v133, 0);
    v29 = (const char *)objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v27, (uint64_t)CFSTR(".quadOffsetsBuffer"), v28);
    sub_1B1960838(inited, v29, *(void **)(v128 + 96), (uint64_t)v133, 0);
    v30 = *(unsigned int *)(v128 + 104);
    v33 = objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v31, (uint64_t)CFSTR(".quadOffsetsBaseGregory"), v32);
    objc_msgSend_encodeInt32_forKey_(inited, v34, v30, v33);
    v35 = *(unsigned int *)(v128 + 108);
    v38 = objc_msgSend_stringByAppendingString_(CFSTR("legacyGregoryPatchTable"), v36, (uint64_t)CFSTR(".quadOffsetsBaseGregoryBoundary"), v37);
    objc_msgSend_encodeInt32_forKey_(inited, v39, v35, v38);
  }
  v40 = *(uint64_t ***)(v128 + 112);
  if (v40)
  {
    v42 = *v40;
    v41 = v40[1];
    v44 = **v40;
    v43 = (*v40)[1];
    v45 = objc_msgSend_stringByAppendingString_(CFSTR("patchRangesTable"), v15, (uint64_t)CFSTR(".elementCount"), v16);
    v130 = -1431655765 * ((unint64_t)((char *)v41 - (char *)v42) >> 3);
    objc_msgSend_encodeInt32_forKey_(inited, v46, v130, v45);
    v49 = objc_msgSend_stringByAppendingString_(CFSTR("patchRangesTable"), v47, (uint64_t)CFSTR(".patchArrayCount"), v48);
    v129 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v44) >> 3);
    objc_msgSend_encodeInt32_forKey_(inited, v50, v129, v49);
    if (v130)
    {
      v53 = 0;
      v131 = 0;
      while (!(_DWORD)v129)
      {
LABEL_19:
        v53 = ++v131;
        if (v131 >= v130)
          goto LABEL_20;
      }
      v54 = 0;
      v55 = 0;
      while (0xAAAAAAAAAAAAAAABLL * (v40[1] - *v40) > v131)
      {
        v57 = &(*v40)[3 * v131];
        v56 = *v57;
        if (0xAAAAAAAAAAAAAAABLL * ((v57[1] - *v57) >> 3) <= v55)
          break;
        v58 = (uint64_t *)(v56 + v54);
        v60 = *v58;
        v59 = v58[1];
        v61 = objc_msgSend_stringByAppendingFormat_(CFSTR("patchRangesTable"), v51, (uint64_t)CFSTR(".[%d][%d]"), v52, v53, v55);
        objc_msgSend_encodeBytes_length_forKey_(v132, v62, v60, v59 - v60, v61);
        ++v55;
        v54 += 24;
        if (v129 == v55)
          goto LABEL_19;
      }
      goto LABEL_41;
    }
  }
LABEL_20:
  v63 = v132;
  sub_1B19606C8((uint64_t)v132, CFSTR("vertexRefiner"), v128 + 136, (uint64_t)v133);
  v66 = (uint64_t *)a1[6];
  if (v66)
  {
    v67 = (v66[1] - *v66) >> 3;
    v68 = 0x2E8BA2E8BA2E8BA3 * v67;
    if (-1171354717 * (_DWORD)v67)
    {
      v69 = objc_msgSend_stringByAppendingString_(CFSTR("fvarRefiners"), v64, (uint64_t)CFSTR(".count"), v65);
      objc_msgSend_encodeInt32_forKey_(v132, v70, v68, v69);
      v73 = 0;
      v74 = 0;
      v63 = v132;
      do
      {
        v75 = *v66;
        if (0x2E8BA2E8BA2E8BA3 * ((v66[1] - *v66) >> 3) <= v74)
          goto LABEL_41;
        v76 = (void *)objc_msgSend_stringByAppendingFormat_(CFSTR("fvarRefiners"), v71, (uint64_t)CFSTR(".[%d]"), v72, v74);
        sub_1B19606C8((uint64_t)v132, v76, v75 + v73, (uint64_t)v133);
        ++v74;
        v73 += 88;
      }
      while (v68 != v74);
    }
  }
  sub_1B1960838(v63, CFSTR("skinMorphSubdivIndexToMetalIndexBuffer"), *(void **)(v128 + 344), (uint64_t)v133, 0);
  v77 = *(_QWORD *)(v128 + 352);
  if (v77)
  {
    v78 = (void *)sub_1B18FD780(v77);
    v82 = objc_msgSend_name(v78, v79, v80, v81);
    objc_msgSend_encodeObject_forKey_(v63, v83, v82, (uint64_t)CFSTR("synchronizeCoarsePositionsPipeline.functionName"));
  }
  sub_1B1960838(v63, CFSTR("fvarChannelDescriptorsBuffer"), *(void **)(v128 + 120), (uint64_t)v133, 0);
  sub_1B1960838(v63, CFSTR("fvarChannelsPackedDataBuffer"), *(void **)(v128 + 128), (uint64_t)v133, 0);
  v91 = v135;
  if (!v135[6])
    goto LABEL_34;
  if (!v135[9])
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v85, v86, v87, v88, v89, v90, (uint64_t)"mtlBlitContext.computeCommandEncoder");
    v91 = v135;
  }
  if (!v91[8])
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v85, v86, v87, v88, v89, v90, (uint64_t)"mtlBlitContext.commandBuffer");
    v91 = v135;
  }
  objc_msgSend_endEncoding((void *)v91[9], v84, v85, v86);
  objc_msgSend_commit((void *)v135[8], v92, v93, v94);
  objc_msgSend_waitUntilCompleted((void *)v135[8], v95, v96, v97);
  if (objc_msgSend_status(v126, v98, v99, v100) == 4)
  {
    if (objc_msgSend_status((void *)v135[8], v101, v102, v103) == 4)
    {
LABEL_34:
      v104 = (id)objc_msgSend_encodedData(v63, v84, v85, v86);
      goto LABEL_38;
    }
    v105 = objc_msgSend_status((void *)v135[8], v84, v85, v86);
    objc_msgSend_error((void *)v135[8], v119, v120, v121);
    objc_msgSend_logs((void *)v135[8], v122, v123, v124);
    v118 = CFSTR("Error: OpenSubdiv archiver command buffer execution failed with status %d, error: %@\n%@");
  }
  else
  {
    v105 = objc_msgSend_status(v126, v101, v102, v103);
    objc_msgSend_error(v126, v106, v107, v108);
    objc_msgSend_logs(v126, v109, v110, v111);
    v118 = CFSTR("Error: OpenSubdiv archiver dependency command buffer execution failed with status %d, error: %@\n%@");
  }
  sub_1B17C4408(16, (uint64_t)v118, v112, v113, v114, v115, v116, v117, v105);
  v104 = 0;
LABEL_38:

  _Block_object_dispose(&v134, 8);
  if (v104)
    return CFAutorelease(v104);
  else
    return 0;
}

void sub_1B195F8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B195F900(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void **v7;

  v7 = (void **)(a1 + 112);
  sub_1B1960A94(&v7);
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 8);
  if (v5)
  {
    *(_QWORD *)(a1 + 16) = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1B195F978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return CC_SHA256_Update(*(CC_SHA256_CTX **)(a1 + 32), v4, 0x10u);
}

const __CFData *sub_1B195F9A4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  const __CFData *result;
  const __CFData *v7;
  const UInt8 *BytePtr;
  CC_LONG Length;

  result = (const __CFData *)sub_1B1924B0C(a3, a4, 0);
  if ((_DWORD)result)
  {
    result = (const __CFData *)sub_1B17EDADC(a2);
    if (result)
    {
      v7 = result;
      BytePtr = CFDataGetBytePtr(result);
      Length = CFDataGetLength(v7);
      return (const __CFData *)CC_SHA256_Update(*(CC_SHA256_CTX **)(a1 + 32), BytePtr, Length);
    }
  }
  return result;
}

uint64_t sub_1B195FA1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  char v9;
  int v10;
  int v11;
  BOOL v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char v20;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  *(_QWORD *)a1 = &off_1E63CDEF8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = a7;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a8;
  if ((a6 & 1) != 0)
    sub_1B22230A0(a2, (16 * (_DWORD)a6) & 0x300 | a5 & 0xF | (((a6 >> 3) & 1) << 10) | 0xF0, a3, a4, a5, a6, a7, a8, v20);
  else
    sub_1B2222E28(a2, a5 & 0xF | (32* ((int)((*(_QWORD *)(**(_QWORD **)(a2 + 40) + 464)- *(_QWORD *)(**(_QWORD **)(a2 + 40) + 456)) >> 3) > 0)), a3, a4, a5, a6, a7, a8, v20);
  sub_1B195FB20(a1, v11, v10, v9, a6);
  v13 = (a6 & 2) == 0;
  if ((a6 & 2) != 0)
    v14 = v10;
  else
    v14 = 0;
  v15 = v14 + v11;
  if (v13)
    v16 = v10;
  else
    v16 = 0;
  if (v13)
    v17 = 0;
  else
    v17 = v11;
  if (v13)
    v18 = v10;
  else
    v18 = v14 + v11;
  sub_1B195FCFC(a1, *(_DWORD *)(a1 + 24), v14 + v11, v16);
  *(_DWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 52) = v11;
  *(_DWORD *)(a1 + 56) = v15;
  *(_DWORD *)(a1 + 60) = v17;
  *(_DWORD *)(a1 + 64) = v10;
  *(_DWORD *)(a1 + 68) = v18;
  return a1;
}

uint64_t sub_1B195FB20(uint64_t a1, int a2, int a3, char a4, unint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;

  v9 = *(_QWORD *)(a1 + 8);
  v10 = ~(16 * *(unsigned __int8 *)(v9 + 8)) & 0x10;
  if (a2 < 1)
    v11 = 0;
  else
    v11 = sub_1B22149C8(v9, v10 | 0x2A4);
  if (a3 < 1)
    v12 = 0;
  else
    v12 = sub_1B22149C8(*(_QWORD *)(a1 + 8), v10 | 0x2A5);
  v13 = -4294956288;
  v14 = -4294956032;
  if ((a5 & 0x100) == 0)
    v14 = -4294956288;
  if ((a5 & 0x80) == 0)
    v13 = v14;
  if ((a5 & 0x40) != 0)
    v13 = -4294956544;
  v15 = sub_1B220B34C(*(_QWORD *)(a1 + 8), (((_DWORD)a5 << 10) & 0x3000 | (16 * (a4 & 0xF)) | (a5 >> 2) & 0xC) ^ v13, 0);
  *(_QWORD *)(a1 + 16) = v15;
  v16 = *(_QWORD **)(v15 + 128);
  if (!v16)
  {
    v18 = v11;
    goto LABEL_23;
  }
  v17 = sub_1B22151AC(*(_QWORD *)(a1 + 8), v11, v16, 1);
  if (!v17)
  {
    v18 = v11;
    if (!v12)
      goto LABEL_23;
    goto LABEL_21;
  }
  v18 = v17;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v12)
  {
LABEL_21:
    v19 = sub_1B22151AC(*(_QWORD *)(a1 + 8), v12, *(_QWORD **)(*(_QWORD *)(a1 + 16) + 136), 1);
    if (v19)
    {
      v20 = v19;
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      v12 = v20;
    }
  }
LABEL_23:
  v21 = *(_DWORD **)(a1 + 16);
  *(_DWORD *)(a1 + 28) = *v21;
  *(_QWORD *)(a1 + 96) = sub_1B220FD5C((uint64_t)v21, *(void ***)(a1 + 104));
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(v18 + 8) + ((*(_QWORD *)(v18 + 24) - *(_QWORD *)(v18 + 16)) >> 2);
  *(_QWORD *)(a1 + 72) = sub_1B195FEB8(v18, *(_QWORD *)(a1 + 104));
  if (v12)
  {
    *(_QWORD *)(a1 + 80) = sub_1B195FEB8(v12, *(_QWORD *)(a1 + 104));
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
    v12 = v18;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
}

uint64_t sub_1B195FCFC(uint64_t result, int a2, int a3, int a4)
{
  uint64_t v6;

  v6 = result;
  if (a3)
  {
    result = sub_1B22245FC(a3, a2, *(void ***)(result + 104));
    *(_QWORD *)(v6 + 32) = result;
  }
  if (a4)
  {
    result = sub_1B22245FC(a4, a2, *(void ***)(v6 + 104));
    *(_QWORD *)(v6 + 40) = result;
  }
  return result;
}

void sub_1B195FD5C(_QWORD *a1)
{
  sub_1B1960988(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B195FD80(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

void *sub_1B195FD88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B2224688(*(_QWORD *)(a1 + 40), a2, a3, a4);
}

BOOL sub_1B195FD98(uint64_t a1)
{
  int v2;
  void **v3;
  _BOOL8 result;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;

  v2 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 88) + 8);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_DWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 48);
  v12 = *(_DWORD *)(a1 + 56);
  LODWORD(v11) = v11 + v12 * v2;
  v3 = sub_1B195FF30(*(void ***)(a1 + 88), (uint64_t)&v13, (uint64_t)&v11, *(void ***)(a1 + 104));
  result = sub_1B195FF70(*(_QWORD *)(a1 + 32), &v13, *(_QWORD *)(a1 + 32), (int *)&v11, *(_QWORD *)(a1 + 72), (uint64_t)v3, *(void ***)(a1 + 104));
  if (*(int *)(a1 + 64) >= 1)
  {
    v9 = *(_QWORD *)(a1 + 60);
    v10 = *(_DWORD *)(a1 + 68);
    v7 = *(_QWORD *)(a1 + 60);
    v8 = *(_DWORD *)(a1 + 68);
    LODWORD(v7) = v7 + v8 * v2;
    v5 = sub_1B195FF30(*(void ***)(a1 + 88), (uint64_t)&v9, (uint64_t)&v7, *(void ***)(a1 + 104));
    v6 = *(_QWORD *)(a1 + 40);
    if (!v6)
      v6 = *(_QWORD *)(a1 + 32);
    return sub_1B195FF70(v6, &v9, v6, (int *)&v7, *(_QWORD *)(a1 + 80), (uint64_t)v5, *(void ***)(a1 + 104));
  }
  return result;
}

uint64_t sub_1B195FE98(uint64_t a1)
{
  return nullsub_16(*(_QWORD *)(a1 + 104));
}

id sub_1B195FEA0(uint64_t a1)
{
  return sub_1B22246E0(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1B195FEB0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1B195FEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_1B2213DA4(v4, a1, a2);
  return v4;
}

void sub_1B195FF0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x1080C40ADB4D971);
  _Unwind_Resume(a1);
}

void **sub_1B195FF30(void **result, uint64_t a2, uint64_t a3, void **a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;

  if (result)
  {
    v6 = 0;
    v7 = 0;
    v4 = 0;
    v5 = 0;
    return (void **)sub_1B1960078(result, a2, a3, (uint64_t)&v6, (uint64_t)&v4, a4);
  }
  return result;
}

BOOL sub_1B195FF70(uint64_t a1, _DWORD *a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6, void **a7)
{
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  int v21;

  if (a6)
    return sub_1B19603FC(a6, a1, a2, a3, a4, a5, (uint64_t)a7);
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  v14 = sub_1B2213DFC((uint64_t)a2, (uint64_t)a4, (uint64_t)&v20, (uint64_t)&v18, a7);
  if (!v14)
    return 0;
  v15 = v14;
  v16 = sub_1B19603FC(v14, a1, a2, a3, a4, a5, (uint64_t)a7);
  v17 = sub_1B220924C(v15);
  MEMORY[0x1B5E22E18](v17, 0x1080C40AA79BA9DLL);
  return v16;
}

uint64_t sub_1B1960078(void **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  char *v11;
  char *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _BYTE v55[32];
  __int128 v56;

  v11 = (char *)*a1;
  v12 = (char *)a1[1];
  if (*a1 == v12)
  {
LABEL_43:
    v38 = sub_1B2213DFC(a2, a3, a4, a5, a6);
    *(_QWORD *)v55 = *(_QWORD *)a2;
    *(_DWORD *)&v55[8] = *(_DWORD *)(a2 + 8);
    *(_QWORD *)&v55[12] = *(_QWORD *)a3;
    *(_DWORD *)&v55[20] = *(_DWORD *)(a3 + 8);
    *(_QWORD *)&v55[24] = *(_QWORD *)a4;
    LODWORD(v56) = *(_DWORD *)(a4 + 8);
    HIDWORD(v56) = *(_DWORD *)(a5 + 8);
    *(_QWORD *)((char *)&v56 + 4) = *(_QWORD *)a5;
    v39 = (char *)a1[2];
    v40 = (char *)a1[1];
    if (v40 >= v39)
    {
      v42 = 0x6DB6DB6DB6DB6DB7 * ((v40 - (_BYTE *)*a1) >> 3);
      v43 = v42 + 1;
      if ((unint64_t)(v42 + 1) > 0x492492492492492)
        abort();
      v44 = 0x6DB6DB6DB6DB6DB7 * ((v39 - (_BYTE *)*a1) >> 3);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x249249249249249)
        v45 = 0x492492492492492;
      else
        v45 = v43;
      if (v45)
        v46 = (char *)sub_1B19603B4((uint64_t)(a1 + 2), v45);
      else
        v46 = 0;
      v47 = &v46[56 * v42];
      v48 = &v46[56 * v45];
      *(_OWORD *)v47 = *(_OWORD *)v55;
      *((_OWORD *)v47 + 1) = *(_OWORD *)&v55[16];
      *((_OWORD *)v47 + 2) = v56;
      *((_QWORD *)v47 + 6) = v38;
      v41 = v47 + 56;
      v50 = (char *)*a1;
      v49 = (char *)a1[1];
      if (v49 != *a1)
      {
        do
        {
          v51 = *(_OWORD *)(v49 - 56);
          v52 = *(_OWORD *)(v49 - 40);
          v53 = *(_OWORD *)(v49 - 24);
          *((_QWORD *)v47 - 1) = *((_QWORD *)v49 - 1);
          *(_OWORD *)(v47 - 24) = v53;
          *(_OWORD *)(v47 - 40) = v52;
          *(_OWORD *)(v47 - 56) = v51;
          v47 -= 56;
          v49 -= 56;
        }
        while (v49 != v50);
        v49 = (char *)*a1;
      }
      *a1 = v47;
      a1[1] = v41;
      a1[2] = v48;
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_OWORD *)v40 = *(_OWORD *)v55;
      *((_OWORD *)v40 + 1) = *(_OWORD *)&v55[16];
      *((_OWORD *)v40 + 2) = v56;
      *((_QWORD *)v40 + 6) = v38;
      v41 = v40 + 56;
    }
    a1[1] = v41;
  }
  else
  {
    v14 = *(_DWORD *)(a2 + 4);
    v13 = *(_DWORD *)(a2 + 8);
    v15 = *(_DWORD *)a2;
    v17 = *(_DWORD *)(a3 + 4);
    v16 = *(_DWORD *)(a3 + 8);
    v18 = *(_DWORD *)a3;
    v19 = *(_DWORD *)(a4 + 4);
    v20 = *(_DWORD *)(a4 + 8);
    v21 = *(_DWORD *)a4;
    v23 = *(_DWORD *)(a5 + 4);
    v22 = *(_DWORD *)(a5 + 8);
    v24 = *(_DWORD *)a5;
    while (1)
    {
      v25 = v13 ? v15 % v13 : 0;
      v26 = *((_DWORD *)v11 + 2);
      v27 = v26 ? *(_DWORD *)v11 % v26 : 0;
      if (v25 == v27 && v13 == v26 && v14 == *((_DWORD *)v11 + 1))
      {
        v29 = v16 ? v18 % v16 : 0;
        v30 = *((_DWORD *)v11 + 5);
        v31 = v30 ? *((_DWORD *)v11 + 3) % v30 : 0;
        if (v29 == v31 && v16 == v30 && v17 == *((_DWORD *)v11 + 4))
        {
          v32 = v20 ? v21 % v20 : 0;
          v33 = *((_DWORD *)v11 + 8);
          v34 = v33 ? *((_DWORD *)v11 + 6) % v33 : 0;
          if (v32 == v34 && v20 == v33 && v19 == *((_DWORD *)v11 + 7))
          {
            v35 = v22 ? v24 % v22 : 0;
            v36 = *((_DWORD *)v11 + 11);
            v37 = v36 ? *((_DWORD *)v11 + 9) % v36 : 0;
            if (v35 == v37 && v22 == v36 && v23 == *((_DWORD *)v11 + 10))
              return *((_QWORD *)v11 + 6);
          }
        }
      }
      v11 += 56;
      if (v11 == v12)
        goto LABEL_43;
    }
  }
  return v38;
}

void *sub_1B19603B4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    sub_1B179C4A8();
  return operator new(56 * a2);
}

BOOL sub_1B19603FC(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7)
{
  id v13;
  id v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;

  v13 = sub_1B22246E0(a2);
  v14 = sub_1B22246E0(a4);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  return sub_1B221460C(a1, v13, a3, v14, a5, 0, (uint64_t)&v18, 0, (uint64_t)&v16, *(void **)a6, *(void **)(a6 + 8), *(void **)(a6 + 16), *(void **)(a6 + 24), 0, 0, 0, *(_DWORD *)(a6 + 48), a7);
}

__n128 sub_1B19604C8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

__n128 sub_1B19604D8@<Q0>(uint64_t a1@<X0>, const char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 result;
  __int128 v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (!*(_QWORD *)(v6 + 48))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48) = objc_msgSend_device(*(void **)(a1 + 32), a2, a3, a4);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 56) = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 64) = objc_msgSend_commandBuffer(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 56), v8, v9, v10);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 72) = objc_msgSend_blitCommandEncoder(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)+ 64), v11, v12, v13);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  }
  result = *(__n128 *)(v6 + 48);
  v15 = *(_OWORD *)(v6 + 64);
  *(__n128 *)a5 = result;
  *(_OWORD *)(a5 + 16) = v15;
  return result;
}

uint64_t sub_1B1960570(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;

  if (a3)
  {
    v7 = (void *)result;
    v8 = **(_QWORD **)a3;
    v9 = *(_QWORD *)(*(_QWORD *)a3 + 8) - v8;
    v10 = objc_msgSend_stringByAppendingString_(a2, (const char *)a2, (uint64_t)CFSTR(".patchArrays"), a4);
    objc_msgSend_encodeBytes_length_forKey_(v7, v11, v8, v9, v10);
    v14 = (const char *)objc_msgSend_stringByAppendingString_(a2, v12, (uint64_t)CFSTR(".patchIndexBuffer"), v13);
    sub_1B1960838(v7, v14, *(void **)(a3 + 8), a4, 0);
    v17 = (const char *)objc_msgSend_stringByAppendingString_(a2, v15, (uint64_t)CFSTR(".patchParamBuffer"), v16);
    sub_1B1960838(v7, v17, *(void **)(a3 + 16), a4, 0);
    v20 = (const char *)objc_msgSend_stringByAppendingString_(a2, v18, (uint64_t)CFSTR(".dataBuffer"), v19);
    sub_1B1960838(v7, v20, *(void **)(a3 + 24), a4, *(_QWORD *)(a3 + 40));
    v21 = *(unsigned int *)(a3 + 32);
    v24 = objc_msgSend_stringByAppendingString_(a2, v22, (uint64_t)CFSTR(".dataBufferOffset"), v23);
    objc_msgSend_encodeInt32_forKey_(v7, v25, v21, v24);
    v26 = *(unsigned int *)(a3 + 40);
    v29 = objc_msgSend_stringByAppendingString_(a2, v27, (uint64_t)CFSTR(".dataBufferCoarseDataSize"), v28);
    objc_msgSend_encodeInt32_forKey_(v7, v30, v26, v29);
    v34 = objc_msgSend_length(*(void **)(a3 + 24), v31, v32, v33);
    v37 = objc_msgSend_stringByAppendingString_(a2, v35, (uint64_t)CFSTR(".dataBufferFullDataSize"), v36);
    return objc_msgSend_encodeInt32_forKey_(v7, v38, v34, v37);
  }
  return result;
}

uint64_t sub_1B19606C8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;

  if (a3)
  {
    v7 = (void *)result;
    v8 = (void *)objc_msgSend_stringByAppendingString_(a2, (const char *)a2, (uint64_t)CFSTR(".stencilTable"), a4);
    v11 = (const char *)objc_msgSend_stringByAppendingString_(v8, v9, (uint64_t)CFSTR(".sizesBuffer"), v10);
    sub_1B1960838(v7, v11, *(void **)a3, a4, 0);
    v14 = (const char *)objc_msgSend_stringByAppendingString_(v8, v12, (uint64_t)CFSTR(".offsetsBuffer"), v13);
    sub_1B1960838(v7, v14, *(void **)(a3 + 8), a4, 0);
    v17 = (const char *)objc_msgSend_stringByAppendingString_(v8, v15, (uint64_t)CFSTR(".indicesBuffer"), v16);
    sub_1B1960838(v7, v17, *(void **)(a3 + 16), a4, 0);
    v20 = (const char *)objc_msgSend_stringByAppendingString_(v8, v18, (uint64_t)CFSTR(".weightsBuffer"), v19);
    sub_1B1960838(v7, v20, *(void **)(a3 + 24), a4, 0);
    v21 = *(unsigned int *)(a3 + 32);
    v24 = objc_msgSend_stringByAppendingString_(v8, v22, (uint64_t)CFSTR(".numStencils"), v23);
    objc_msgSend_encodeInt32_forKey_(v7, v25, v21, v24);
    v28 = (void *)objc_msgSend_stringByAppendingString_(a2, v26, (uint64_t)CFSTR(".evaluatorInput"), v27);
    v31 = objc_msgSend_stringByAppendingString_(v28, v29, (uint64_t)CFSTR(".srcDesc"), v30);
    objc_msgSend_encodeBytes_length_forKey_(v7, v32, a3 + 56, 12, v31);
    v35 = objc_msgSend_stringByAppendingString_(v28, v33, (uint64_t)CFSTR(".dstDesc"), v34);
    return objc_msgSend_encodeBytes_length_forKey_(v7, v36, a3 + 68, 12, v35);
  }
  return result;
}

void sub_1B1960838(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  void *v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  _QWORD v21[8];
  _QWORD v22[4];

  if (a3)
  {
    v5 = a5;
    if (!a5)
      v5 = objc_msgSend_length(a3, a2, (uint64_t)a3, a4);
    if (objc_msgSend_storageMode(a3, a2, (uint64_t)a3, a4) == 2)
    {
      v13 = (void *)objc_msgSend_device(a3, v10, v11, v12);
      v15 = (void *)objc_msgSend_newBufferWithLength_options_(v13, v14, v5, 0);
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(a4 + 16))(v22, a4);
      objc_msgSend_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_((void *)v22[3], v16, (uint64_t)a3, 0, v15, 0, v5);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = sub_1B1960958;
      v21[3] = &unk_1E63D9F48;
      v21[4] = a1;
      v21[5] = v15;
      v21[6] = a2;
      v21[7] = v5;
      objc_msgSend_addCompletedHandler_((void *)v22[2], v17, (uint64_t)v21, v18);

    }
    else
    {
      v19 = objc_msgSend_contents(a3, v10, v11, v12);
      objc_msgSend_encodeBytes_length_forKey_(a1, v20, v19, v5, a2);
    }
  }
}

uint64_t sub_1B1960958(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;

  v5 = *(void **)(a1 + 32);
  v6 = objc_msgSend_contents(*(void **)(a1 + 40), a2, a3, a4);
  return objc_msgSend_encodeBytes_length_forKey_(v5, v7, v6, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48));
}

_QWORD *sub_1B1960988(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = &off_1E63CDEF8;
  v2 = a1[1];
  if (v2)
  {
    v3 = sub_1B2222B2C(v2);
    MEMORY[0x1B5E22E18](v3, 0x10A0C40D2671FEALL);
  }
  if (a1[2])
  {
    v4 = sub_1B220E740();
    MEMORY[0x1B5E22E18](v4, 0x10F0C403D579C5ELL);
  }
  v5 = a1[4];
  if (v5)
  {
    v6 = sub_1B222456C(v5);
    MEMORY[0x1B5E22E18](v6, 0x1080C40E0210B95);
  }
  v7 = a1[5];
  if (v7)
  {
    v8 = sub_1B222456C(v7);
    MEMORY[0x1B5E22E18](v8, 0x1080C40E0210B95);
  }
  if (a1[9])
  {
    v9 = sub_1B2213DF8();
    MEMORY[0x1B5E22E18](v9, 0x1080C40ADB4D971);
  }
  if (a1[10])
  {
    v10 = sub_1B2213DF8();
    MEMORY[0x1B5E22E18](v10, 0x1080C40ADB4D971);
  }
  v11 = a1[12];
  if (v11)
  {
    v12 = sub_1B220FD58(v11);
    MEMORY[0x1B5E22E18](v12, 0xA0C4074858A82);
  }
  return a1;
}

void sub_1B1960A94(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 8;
        sub_1B1936810(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *sub_1B1960B04(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1B5E22D1C](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1B1960C34(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1B5E22D28](v13);
  return a1;
}

void sub_1B1960C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  MEMORY[0x1B5E22D28](&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1960C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_1B1960D70(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1B1960D54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B1960D70(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

uint64_t sub_1B1960E14@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  unint64_t v4;
  const void *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  result = sub_1B1960EAC(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = (const void *)result;
  v6 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v9 = operator new(v7 + 1);
    a2[1] = v6;
    a2[2] = v8 | 0x8000000000000000;
    *a2 = v9;
    a2 = v9;
  }
  else
  {
    *((_BYTE *)a2 + 23) = v4;
    if (!v4)
      goto LABEL_9;
  }
  result = (uint64_t)memmove(a2, v5, v6);
LABEL_9:
  *((_BYTE *)a2 + v6) = 0;
  return result;
}

uint64_t sub_1B1960EAC(uint64_t a1)
{
  int v1;
  unint64_t v3;

  v1 = *(_DWORD *)(a1 + 96);
  if ((v1 & 0x10) != 0)
  {
    v3 = *(_QWORD *)(a1 + 48);
    if (*(_QWORD *)(a1 + 88) < v3)
      *(_QWORD *)(a1 + 88) = v3;
    return *(_QWORD *)(a1 + 40);
  }
  else if ((v1 & 8) != 0)
  {
    return *(_QWORD *)(a1 + 16);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1B1960EF8()
{
  unsigned __int8 v0;
  uint64_t *v1;
  int v3;

  v0 = atomic_load((unsigned __int8 *)&qword_1EEF66A70);
  v1 = &qword_1EEF66000;
  if ((v0 & 1) == 0)
  {
    v3 = __cxa_guard_acquire(&qword_1EEF66A70);
    v1 = &qword_1EEF66000;
    if (v3)
    {
      qword_1EEF66A68 = sub_1B1960F58(0x14u);
      __cxa_guard_release(&qword_1EEF66A70);
      v1 = &qword_1EEF66000;
    }
  }
  return v1[333];
}

unint64_t sub_1B1960F58(unsigned int a1)
{
  unsigned __int8 *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;

  v1 = "Main culling context";
  v2 = 0xC6A4A7935BD1E995 * a1;
  if (a1 >= 8)
  {
    v3 = a1 >> 3;
    v1 = (unsigned __int8 *)&aMainCullingCon[8 * v3];
    v4 = 8 * v3;
    v5 = "Main culling context";
    do
    {
      v6 = *(_QWORD *)v5;
      v5 += 8;
      v2 = 0xC6A4A7935BD1E995
         * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
      v4 -= 8;
    }
    while (v4);
  }
  switch(a1 & 7)
  {
    case 1u:
      goto LABEL_11;
    case 2u:
      goto LABEL_10;
    case 3u:
      goto LABEL_9;
    case 4u:
      goto LABEL_8;
    case 5u:
      goto LABEL_7;
    case 6u:
      goto LABEL_6;
    case 7u:
      v2 ^= (unint64_t)v1[6] << 48;
LABEL_6:
      v2 ^= (unint64_t)v1[5] << 40;
LABEL_7:
      v2 ^= (unint64_t)v1[4] << 32;
LABEL_8:
      v2 ^= (unint64_t)v1[3] << 24;
LABEL_9:
      v2 ^= (unint64_t)v1[2] << 16;
LABEL_10:
      v2 ^= (unint64_t)v1[1] << 8;
LABEL_11:
      v2 = 0xC6A4A7935BD1E995 * (v2 ^ *v1);
      break;
    default:
      return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
  }
  return (0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47);
}

uint64_t sub_1B1961028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  _QWORD v13[2];

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v6 = *a5;
  v7 = a5[2];
  *(_OWORD *)(a1 + 48) = a5[1];
  *(_OWORD *)(a1 + 64) = v7;
  *(_OWORD *)(a1 + 32) = v6;
  v8 = a5[3];
  v9 = a5[4];
  v10 = a5[6];
  *(_OWORD *)(a1 + 112) = a5[5];
  *(_OWORD *)(a1 + 128) = v10;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = v9;
  v13[0] = a2;
  v13[1] = a3;
  v11 = (void *)sub_1B179C1C0(v13, 0x3320u, 0x10u);
  bzero(v11, 0x3320uLL);
  *(_QWORD *)(a1 + 144) = v11;
  return a1;
}

uint64_t sub_1B19610A0(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v4;

  v2 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 144);
  if (v2)
    sub_1B179C834(v2, &v4);
  return a1;
}

void sub_1B19610E0(__n128 *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  uint64_t v36;
  __n128 v37;
  unint64_t v38;
  __n128 v39;
  unint64_t v40;
  __int128 v41;
  __n128 v42;
  unint64_t v43;
  __int128 v44;
  const void *v45;
  uint64_t v46;
  const void *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t i;
  unsigned int v68;
  _DWORD *v69;
  unint64_t v70;
  uint64_t v71;
  __int128 *v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v5 = sub_1B1815BE8(a1[1].n128_i64[0], a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"init", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/Culling.mm", 66, v5 | 0x300000000);
  v13 = sub_1B1813884(a1[1].n128_i64[0], v6, v7, v8, v9, v10, v11, v12);
  v21 = sub_1B187B140(v13, v14, v15, v16, v17, v18, v19, v20);
  v22 = a1[9].n128_u64[0];
  *(_BYTE *)(v22 + 12612) = 0;
  v23 = a1[1].n128_i64[0];
  *(_QWORD *)(v22 + 12648) = v23;
  if ((sub_1B1815A4C(v23) & 1) != 0 || a1[3].n128_u64[0])
    LOBYTE(v31) = 1;
  else
    v31 = (a1[7].n128_u8[8] >> 3) & 1;
  v32 = a1[9].n128_u64[0];
  *(_BYTE *)(v32 + 12610) = v31;
  *(_QWORD *)v32 = v21;
  *(_QWORD *)(v32 + 12640) = v13;
  *(_BYTE *)(v32 + 12563) = a1[7].n128_u8[0];
  v33 = a1[7].n128_u64[1];
  *(_BYTE *)(v32 + 12564) = (v33 & 4) != 0;
  if ((v33 & 4) != 0)
    v34 = 6;
  else
    v34 = a1[8].n128_i8[4];
  *(_BYTE *)(v32 + 12560) = v34;
  *(_OWORD *)(v32 + 12568) = 0u;
  *(_QWORD *)(v32 + 13080) = sub_1B19613F4;
  *(_BYTE *)(v32 + 13072) = 0;
  *(_BYTE *)(v32 + 12562) = a1[8].n128_u32[0];
  *(_BYTE *)(v32 + 12613) = BYTE1(v33) & 1;
  *(_BYTE *)(v32 + 12614) = (v33 & 0x40) != 0;
  *(_BYTE *)(v32 + 12615) = a1[7].n128_u8[1];
  v35 = a1[2].n128_u64[1];
  *(_QWORD *)(v32 + 12584) = v35;
  if (!v35)
  {
    if (!v13)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v25, v26, v27, v28, v29, v30, (uint64_t)"world");
    v36 = sub_1B187A934(v13, v24, v25, v26, v27, v28, v29, v30);
    v32 = a1[9].n128_u64[0];
    *(_QWORD *)(v32 + 12584) = v36;
    v33 = a1[7].n128_u64[1];
  }
  *(_QWORD *)(v32 + 12600) = a1[9].n128_u64[1];
  *(_BYTE *)(v32 + 12608) = (v33 & 2) != 0;
  *(_BYTE *)(v32 + 12611) = (v33 & 0x80) != 0;
  if (a1[5].n128_u8[0])
  {
    v37 = a1[4];
  }
  else
  {
    v37 = sub_1B181537C(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
    v32 = a1[9].n128_u64[0];
  }
  *(__n128 *)(v32 + 11280) = v37;
  v38 = a1[9].n128_u64[0];
  if (*(float *)(v38 + 11292) == 0.0)
  {
    v39 = sub_1B181537C(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
    v40 = a1[9].n128_u64[0];
    v41 = *(_OWORD *)(v40 + 11280);
    HIDWORD(v41) = v39.n128_u32[3];
    *(_OWORD *)(v40 + 11280) = v41;
    v38 = a1[9].n128_u64[0];
  }
  if (*(float *)(v38 + 11288) == 0.0)
  {
    v42 = sub_1B181537C(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
    v43 = a1[9].n128_u64[0];
    v44 = *(_OWORD *)(v43 + 11280);
    DWORD2(v44) = v42.n128_u32[2];
    *(_OWORD *)(v43 + 11280) = v44;
  }
  v45 = (const void *)a1[2].n128_u64[0];
  if (v45)
  {
    a1[10].n128_u64[0] = (unint64_t)v45;
  }
  else
  {
    v47 = sub_1B1814984((uint64_t *)a1[1].n128_u64[0], v24, v25, v26, v27, v28, v29, v30);
    v45 = (const void *)a1[2].n128_u64[0];
    a1[10].n128_u64[0] = (unint64_t)v47;
    if (!v45)
      v45 = sub_1B1814768((uint64_t *)a1[1].n128_u64[0], v46, v25, v26, v27, v28, v29, v30);
  }
  a1[9].n128_u64[1] = (unint64_t)v45;
  *(_BYTE *)(a1[9].n128_u64[0] + 12609) = a1[7].n128_u8[8] & 1;
  v48 = sub_1B1814484(a1[1].n128_i64[0], 0, v25, v26, v27, v28, v29, v30);
  v49 = a1[9].n128_u64[0];
  *(_QWORD *)(v49 + 12632) = v48;
  *(_QWORD *)(v49 + 12616) = a1[6].n128_u64[0];
  v64 = sub_1B19D2810(a1[10].n128_i64[0], v50, v51, v52, v53, v54, v55, v56);
  v65 = 0;
  v66 = a1[9].n128_u64[0];
  *(_QWORD *)(v66 + 12616) &= v64;
  *(_QWORD *)(v66 + 12624) = a1[6].n128_u64[1];
  for (i = 12824; ; i += 16)
  {
    v68 = sub_1B19D30F4((_BYTE *)v66, v57, v58, v59, v60, v61, v62, v63);
    v66 = a1[9].n128_u64[0];
    if (v65 >= v68)
      break;
    v69 = (_DWORD *)(v66 + i);
    *((_QWORD *)v69 - 1) = 0;
    *v69 = 0;
    ++v65;
  }
  if (*(_BYTE *)(v66 + 12560))
  {
    v70 = 0;
    v71 = 11536;
    v72 = (__int128 *)MEMORY[0x1E0C83FF0];
    do
    {
      v73 = (_OWORD *)(v66 + v71);
      v74 = *v72;
      v75 = v72[1];
      v76 = v72[3];
      v73[2] = v72[2];
      v73[3] = v76;
      *v73 = v74;
      v73[1] = v75;
      ++v70;
      v66 = a1[9].n128_u64[0];
      v71 += 64;
    }
    while (v70 < *(unsigned __int8 *)(v66 + 12560));
  }
  prof_endFlame();
}

void sub_1B19613DC(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

BOOL sub_1B19613F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (!*(_BYTE *)(a1 + 12608) || (*(_BYTE *)(a3 + 221) & 0x10) == 0)
      && (!*(_BYTE *)(a1 + 12611) || (*(_BYTE *)(a3 + 223) & 1) == 0);
}

void sub_1B196142C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  float v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  float v30;
  double v31;
  double v32;
  unsigned int v33;
  __int128 v34;
  float v35;
  unint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float32x4_t *v41;
  uint64_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD *v56;
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD *v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _OWORD *v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  _OWORD *v75;
  _BYTE v76[4];
  float v77;
  float v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  v9 = *(_QWORD *)(a1 + 152);
  if (v9)
  {
    if ((*(_BYTE *)(a1 + 120) & 4) != 0)
    {
      if ((sub_1B17B33F4(*(_QWORD *)(a1 + 152), (uint64_t)v76, v9, a4, a5, a6, a7, a8) & 1) == 0)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Can't get a valid projection info"), v10, v11, v12, v13, v14, v15, (uint64_t)"NULL");
      v16 = v77;
      v17 = v78;
      v18 = v77;
      v19 = *(_QWORD *)(a1 + 144);
      *(double *)(v19 + 12656) = v77;
      *(double *)(v19 + 12664) = v17;
      v27 = __tanpi(0.25);
      v28 = 0;
      if (v27 == 0.0)
        v29 = 1.0;
      else
        v29 = 1.0 / v27;
      v30 = v29;
      v31 = v18 + 1.0;
      if (v17 > v16)
        v31 = v17;
      v32 = v31 / (v18 - v31);
      *(float *)&v33 = v32;
      *(float *)&v32 = v32 * v18;
      *(_QWORD *)&v34 = 0;
      v35 = v30;
      LODWORD(v36) = 0;
      *((float *)&v36 + 1) = v30;
      *(_QWORD *)&v37 = 0;
      *((_QWORD *)&v37 + 1) = __PAIR64__(-1.0, v33);
      *((_QWORD *)&v34 + 1) = LODWORD(v32);
      v79 = LODWORD(v35);
      v80 = v36;
      v81 = v37;
      v82 = v34;
      do
      {
        *(__int128 *)((char *)&v83 + v28) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, COERCE_FLOAT(*(__int128 *)((char *)&v79 + v28))), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)((char *)&v79 + v28), 1), (float32x4_t)xmmword_1B2244DF0, *(float32x4_t *)((char *)&v79 + v28), 2), (float32x4_t)xmmword_1B2244E10, *(float32x4_t *)((char *)&v79 + v28), 3);
        v28 += 16;
      }
      while (v28 != 64);
      v38 = v84;
      v39 = v85;
      v40 = v86;
      *(_OWORD *)(v19 + 9232) = v83;
      *(_OWORD *)(v19 + 9248) = v38;
      *(_OWORD *)(v19 + 9264) = v39;
      *(_OWORD *)(v19 + 9280) = v40;
      v41 = (float32x4_t *)sub_1B1869AC8(*(_QWORD *)(a1 + 152), v20, v21, v22, v23, v24, v25, v26);
      v42 = 0;
      v43 = *v41;
      v44 = v41[1];
      v45 = v41[2];
      v46 = v41[3];
      v79 = xmmword_1B2244D90;
      v80 = xmmword_1B2244DD0;
      v81 = xmmword_1B22684D0;
      v82 = xmmword_1B2244E20;
      do
      {
        *(__int128 *)((char *)&v83 + v42) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(__int128 *)((char *)&v79 + v42))), v44, *(float32x2_t *)((char *)&v79 + v42), 1), v45, *(float32x4_t *)((char *)&v79 + v42), 2), v46, *(float32x4_t *)((char *)&v79 + v42), 3);
        v42 += 16;
      }
      while (v42 != 64);
      v47 = 0;
      v48 = v84;
      v49 = v85;
      v50 = v86;
      v51 = *(_OWORD **)(a1 + 144);
      v51[449] = v83;
      v51[450] = v48;
      v51[451] = v49;
      v51[452] = v50;
      v79 = xmmword_1B22684E0;
      v80 = xmmword_1B2244DD0;
      v81 = xmmword_1B2244DB0;
      v82 = xmmword_1B2244E20;
      do
      {
        *(__int128 *)((char *)&v83 + v47) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(__int128 *)((char *)&v79 + v47))), v44, *(float32x2_t *)((char *)&v79 + v47), 1), v45, *(float32x4_t *)((char *)&v79 + v47), 2), v46, *(float32x4_t *)((char *)&v79 + v47), 3);
        v47 += 16;
      }
      while (v47 != 64);
      v52 = 0;
      v53 = v84;
      v54 = v85;
      v55 = v86;
      v56 = *(_OWORD **)(a1 + 144);
      v56[453] = v83;
      v56[454] = v53;
      v56[455] = v54;
      v56[456] = v55;
      v79 = xmmword_1B2244DB0;
      v80 = xmmword_1B2244D90;
      v81 = xmmword_1B22684F0;
      v82 = xmmword_1B2244E20;
      do
      {
        *(__int128 *)((char *)&v83 + v52) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(__int128 *)((char *)&v79 + v52))), v44, *(float32x2_t *)((char *)&v79 + v52), 1), v45, *(float32x4_t *)((char *)&v79 + v52), 2), v46, *(float32x4_t *)((char *)&v79 + v52), 3);
        v52 += 16;
      }
      while (v52 != 64);
      v57 = 0;
      v58 = v84;
      v59 = v85;
      v60 = v86;
      v61 = *(_OWORD **)(a1 + 144);
      v61[457] = v83;
      v61[458] = v58;
      v61[459] = v59;
      v61[460] = v60;
      v79 = xmmword_1B2244DB0;
      v80 = xmmword_1B22684E0;
      v81 = xmmword_1B2244DD0;
      v82 = xmmword_1B2244E20;
      do
      {
        *(__int128 *)((char *)&v83 + v57) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(__int128 *)((char *)&v79 + v57))), v44, *(float32x2_t *)((char *)&v79 + v57), 1), v45, *(float32x4_t *)((char *)&v79 + v57), 2), v46, *(float32x4_t *)((char *)&v79 + v57), 3);
        v57 += 16;
      }
      while (v57 != 64);
      v62 = 0;
      v63 = v84;
      v64 = v85;
      v65 = v86;
      v66 = *(_OWORD **)(a1 + 144);
      v66[461] = v83;
      v66[462] = v63;
      v66[463] = v64;
      v66[464] = v65;
      v79 = xmmword_1B2244DB0;
      v80 = xmmword_1B2244DD0;
      v81 = xmmword_1B2244D90;
      v82 = xmmword_1B2244E20;
      do
      {
        *(__int128 *)((char *)&v83 + v62) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(__int128 *)((char *)&v79 + v62))), v44, *(float32x2_t *)((char *)&v79 + v62), 1), v45, *(float32x4_t *)((char *)&v79 + v62), 2), v46, *(float32x4_t *)((char *)&v79 + v62), 3);
        v62 += 16;
      }
      while (v62 != 64);
      v67 = 0;
      v68 = v84;
      v69 = v85;
      v70 = v86;
      v71 = *(_OWORD **)(a1 + 144);
      v71[465] = v83;
      v71[466] = v68;
      v71[467] = v69;
      v71[468] = v70;
      v79 = xmmword_1B22684D0;
      v80 = xmmword_1B2244DD0;
      v81 = xmmword_1B22684E0;
      v82 = xmmword_1B2244E20;
      do
      {
        *(__int128 *)((char *)&v83 + v67) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v43, COERCE_FLOAT(*(__int128 *)((char *)&v79 + v67))), v44, *(float32x2_t *)((char *)&v79 + v67), 1), v45, *(float32x4_t *)((char *)&v79 + v67), 2), v46, *(float32x4_t *)((char *)&v79 + v67), 3);
        v67 += 16;
      }
      while (v67 != 64);
      v72 = v84;
      v73 = v85;
      v74 = v86;
      v75 = *(_OWORD **)(a1 + 144);
      v75[469] = v83;
      v75[470] = v72;
      v75[471] = v73;
      v75[472] = v74;
      sub_1B19D29E4(*(_QWORD *)(a1 + 144));
    }
    else
    {
      sub_1B19D2BA0(*(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 16), v9, *(_QWORD *)(a1 + 160), a5, a6, a7, a8);
    }
  }
  else
  {
    sub_1B19D2AE8(*(_QWORD *)(a1 + 144));
  }
}

void sub_1B1961820(uint64_t a1)
{
  sub_1B19D3188(*(_QWORD *)(a1 + 144), *(float32x2_t **)(a1 + 16), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), (*(_QWORD *)(a1 + 120) >> 5) & 1);
}

void sub_1B196183C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19D4018(*(_QWORD *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B1961844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19D418C(*(_QWORD *)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
}

double sub_1B196184C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B19D2834(*(_QWORD *)(a1 + 144), *(__n128 **)(a1 + 16), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B196185C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;

  v9 = sub_1B1813884(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
  v17 = sub_1B187B188(v9, v10, v11, v12, v13, v14, v15, v16);
  v18 = *(_QWORD *)(a1 + 144);
  v19 = *(double *)(v18 + 12656);
  v20 = *(double *)(v18 + 12664);
  return sub_1B1796A0C(v17, (_OWORD *)(v18 + 16), v19, v20, *(unsigned __int8 *)(v18 + 12560), (__int128 *)(v18 + 1552), (__int128 *)(v18 + 7184));
}

uint64_t sub_1B19618B0(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  __int128 *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;

  v3 = *(_QWORD *)(result + 144);
  v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3)
    v4 = a3;
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = (__int128 *)(a2 + (v5 << 6));
      v7 = (_OWORD *)(v3 + (v5 << 6));
      v8 = *v6;
      v9 = v6[1];
      v10 = v6[2];
      v7[724] = v6[3];
      v7[723] = v10;
      v7[722] = v9;
      v7[721] = v8;
      ++v5;
      v3 = *(_QWORD *)(result + 144);
      v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3)
        v11 = a3;
    }
    while (v11 > v5);
  }
  return result;
}

uint64_t sub_1B1961910(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;

  v3 = *(_QWORD *)(result + 144);
  v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3)
    v4 = a3;
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = (_OWORD *)(v3 + (v5 << 6));
      v7 = (_OWORD *)(a2 + (v5 << 6));
      v8 = v6[641];
      v9 = v6[642];
      v10 = v6[644];
      v7[2] = v6[643];
      v7[3] = v10;
      *v7 = v8;
      v7[1] = v9;
      ++v5;
      v3 = *(_QWORD *)(result + 144);
      v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3)
        v11 = a3;
    }
    while (v11 > v5);
  }
  return result;
}

uint64_t sub_1B1961970(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;

  v3 = *(_QWORD *)(result + 144);
  v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3)
    v4 = a3;
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = (_OWORD *)(v3 + (v5 << 6));
      v7 = (_OWORD *)(a2 + (v5 << 6));
      v8 = v6[513];
      v9 = v6[514];
      v10 = v6[516];
      v7[2] = v6[515];
      v7[3] = v10;
      *v7 = v8;
      v7[1] = v9;
      ++v5;
      v3 = *(_QWORD *)(result + 144);
      v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3)
        v11 = a3;
    }
    while (v11 > v5);
  }
  return result;
}

uint64_t sub_1B19619D0(uint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  unsigned int v11;

  v3 = *(_QWORD *)(result + 144);
  v4 = *(unsigned __int8 *)(v3 + 12560);
  if (v4 >= a3)
    v4 = a3;
  if (v4)
  {
    v5 = 0;
    do
    {
      v6 = (_OWORD *)(v3 + (v5 << 6));
      v7 = (_OWORD *)(a2 + (v5 << 6));
      v8 = v6[577];
      v9 = v6[578];
      v10 = v6[580];
      v7[2] = v6[579];
      v7[3] = v10;
      *v7 = v8;
      v7[1] = v9;
      ++v5;
      v3 = *(_QWORD *)(result + 144);
      v11 = *(unsigned __int8 *)(v3 + 12560);
      if (v11 >= a3)
        v11 = a3;
    }
    while (v11 > v5);
  }
  return result;
}

void sub_1B1961A30(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  float32x4_t *v26;

  v7 = sub_1B1815BE8(a1[2], a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"cull", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/Culling.mm", 227, v7 | 0x300000000);
  sub_1B1961B38((uint64_t)a1, (uint64_t)a2, a3, v8, v9, v10, v11, v12);
  v20 = a1[6];
  if (v20)
  {
    v21 = *(unsigned int *)(v20 + 16);
    if ((_DWORD)v21)
    {
      v22 = *(uint64_t **)(v20 + 24);
      v23 = &v22[v21];
      do
      {
        v24 = 0;
        v25 = *v22;
        while (v24 < sub_1B19D30F4((_BYTE *)a1[18], v13, v14, v15, v16, v17, v18, v19))
        {
          v26 = (float32x4_t *)a1[18];
          if ((!v26[788].i8[0] || (*(_BYTE *)(v25 + 221) & 0x10) == 0)
            && (!v26[788].i8[3] || (*(_BYTE *)(v25 + 223) & 1) == 0))
          {
            sub_1B19D2050(v26, v24, v25, v15, v16, v17, v18, v19);
          }
          ++v24;
        }
        ++v22;
      }
      while (v22 != v23);
    }
  }
  else
  {
    sub_1B19D41FC(a1[18]);
  }
  prof_endFlame();
}

void sub_1B1961B24(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B1961B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[2];

  v11 = sub_1B1820C0C(**(_QWORD **)(a1 + 144), a2, a3, a4, a5, a6, a7, a8);
  v19 = sub_1B19CFA6C(v11, v12, v13, v14, v15, v16, v17, v18);
  result = sub_1B19D30F4(*(_BYTE **)(a1 + 144), v20, v21, v22, v23, v24, v25, v26);
  if ((_DWORD)result)
  {
    v28 = 0;
    v29 = 12828;
    do
    {
      v40[0] = a2;
      v40[1] = a3;
      v30 = sub_1B179C1C0(v40, 4 * v19, 2u);
      v31 = *(_BYTE **)(a1 + 144);
      v32 = &v31[v29];
      *(_QWORD *)(v32 - 3) = v30;
      *(v32 - 1) = 0;
      *v32 = v19;
      ++v28;
      result = sub_1B19D30F4(v31, v33, v34, v35, v36, v37, v38, v39);
      v29 += 16;
    }
    while (v28 < result);
  }
  return result;
}

uint64_t sub_1B1961BE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  __CFString *v17;
  __CFString *v18;

  if (sub_1B180A64C(a1, a2, a3, a4, a5, a6, a7, a8))
    return 1;
  v17 = sub_1B18090EC(a1, v9, v10, v11, v12, v13, v14, v15);
  if (!v17)
    return 0;
  v18 = v17;
  v16 = CFEqual(v17, CFSTR("ast")) || CFEqual(v18, CFSTR("astc"));
  CFRelease(v18);
  return v16;
}

uint64_t sub_1B1961C68(int a1, int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;

  result = 0;
  switch(a1)
  {
    case 4:
      v5 = 204;
      if (a3)
        v5 = 186;
      if (a2 == 4)
        return v5;
      else
        return 0;
    case 5:
      v6 = 205;
      if (a3)
        v6 = 187;
      v7 = 206;
      if (a3)
        v7 = 188;
      if (a2 != 5)
        v7 = 0;
      v8 = a2 == 4;
      goto LABEL_41;
    case 6:
      v6 = 207;
      if (a3)
        v6 = 189;
      v7 = 208;
      if (a3)
        v7 = 190;
      if (a2 != 6)
        v7 = 0;
      goto LABEL_31;
    case 8:
      v6 = 210;
      if (a3)
        v6 = 192;
      v7 = 211;
      if (a3)
        v7 = 193;
      v9 = 212;
      if (a3)
        v9 = 194;
      if (a2 != 8)
        v9 = 0;
      if (a2 != 6)
        v7 = v9;
LABEL_31:
      v8 = a2 == 5;
      goto LABEL_41;
    case 10:
      result = 0;
      switch(a2)
      {
        case 5:
          v10 = a3 == 0;
          v11 = 213;
          v12 = 195;
          goto LABEL_47;
        case 6:
          v10 = a3 == 0;
          v11 = 214;
          v12 = 196;
          goto LABEL_47;
        case 8:
          v10 = a3 == 0;
          v11 = 215;
          v12 = 197;
          goto LABEL_47;
        case 10:
          v10 = a3 == 0;
          v11 = 216;
          v12 = 198;
LABEL_47:
          if (v10)
            result = v11;
          else
            result = v12;
          break;
        default:
          return result;
      }
      return result;
    case 12:
      v6 = 217;
      if (a3)
        v6 = 199;
      v7 = 218;
      if (a3)
        v7 = 200;
      if (a2 != 12)
        v7 = 0;
      v8 = a2 == 10;
LABEL_41:
      if (v8)
        result = v6;
      else
        result = v7;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B1961DF4(uint64_t a1)
{
  NSObject *v2;
  os_signpost_id_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  const __CFData *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFData *v21;
  const UInt8 *BytePtr;
  const UInt8 *v23;
  unsigned int v24;
  unsigned int v25;
  double v26;
  uint64_t v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  CFDataRef v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  NSObject *v35;
  int v37;
  uint8_t v38[16];
  uint8_t buf[16];

  v2 = sub_1B17C439C();
  v3 = os_signpost_id_generate(v2);
  v4 = sub_1B17C439C();
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v12 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v12, OS_SIGNPOST_INTERVAL_BEGIN, v3, "LoadImage (ASTC)", "", buf, 2u);
    }
  }
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v6, v7, v8, v9, v10, v11, (uint64_t)"image");
  v13 = (const __CFData *)sub_1B180A64C(a1, v5, v6, v7, v8, v9, v10, v11);
  if (v13)
  {
    v21 = v13;
    CFRetain(v13);
  }
  else
  {
    v33 = sub_1B1809180(a1, v14, v15, v16, v17, v18, v19, v20);
    if (!v33 || (v21 = (const __CFData *)sub_1B19AA5B0(v33)) == 0)
    {
      v32 = 0;
      goto LABEL_16;
    }
  }
  if (CFDataGetLength(v21) >= 16 && (BytePtr = CFDataGetBytePtr(v21), *(_DWORD *)BytePtr == 1554098963))
  {
    v23 = BytePtr;
    sub_1B180AEF8(a1);
    v24 = (v23[9] << 16) | (v23[8] << 8) | v23[7];
    v25 = (v23[12] << 16) | (v23[11] << 8) | v23[10];
    v37 = (v23[15] << 16) | (v23[14] << 8) | v23[13];
    *(float *)&v26 = (float)v24;
    *((float *)&v26 + 1) = (float)v25;
    sub_1B1809348(a1, 2, 0, v26);
    v27 = sub_1B1809424(a1);
    v28 = v23[4];
    *(_BYTE *)(v27 + 7) = v28;
    v29 = v23[5];
    *(_BYTE *)(v27 + 8) = v29;
    v30 = v23[6];
    *(_BYTE *)(v27 + 9) = v30;
    *(_BYTE *)(v27 + 4) = 0x80;
    *(_DWORD *)(v27 + 24) = sub_1B1961C68(v28, v29, 0);
    v31 = CFDataCreate(0, v23 + 16, 16 * (v24 + v28 - 1) / v28 * ((v25 + v29 - 1) / v29) * ((v37 + v30 - 1) / v30));
    CFArrayAppendValue(*(CFMutableArrayRef *)(v27 + 32), v31);
    CFRelease(v31);
    v32 = 1;
  }
  else
  {
    v32 = 0;
  }
  CFRelease(v21);
LABEL_16:
  v34 = sub_1B17C439C();
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v35 = v34;
    if (os_signpost_enabled(v34))
    {
      *(_WORD *)v38 = 0;
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v35, OS_SIGNPOST_INTERVAL_END, v3, "LoadImage (ASTC)", "", v38, 2u);
    }
  }
  return v32;
}

void *sub_1B1962088()
{
  return &unk_1EF024528;
}

uint64_t sub_1B19620B8(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v28;
  unsigned int v29;

  v5 = (void *)MEMORY[0x1E0CB3B18];
  v6 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, a2, 0, a4);
  objc_msgSend_floatValue(v6, v7, v8, v9);
  v29 = v10;
  v13 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v11, 1, v12);
  objc_msgSend_floatValue(v13, v14, v15, v16);
  v28 = v17;
  v20 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v18, 2, v19);
  objc_msgSend_floatValue(v20, v21, v22, v23);
  return objc_msgSend_valueWithVFXFloat3_(v5, v24, v25, v26, COERCE_DOUBLE(__PAIR64__(v28, v29)));
}

uint64_t sub_1B1962130(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v34;
  unsigned int v35;

  v5 = (void *)MEMORY[0x1E0CB3B18];
  v6 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, a2, 0, a4);
  objc_msgSend_floatValue(v6, v7, v8, v9);
  v35 = v10;
  v13 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v11, 1, v12);
  objc_msgSend_floatValue(v13, v14, v15, v16);
  v34 = v17;
  v20 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v18, 2, v19);
  objc_msgSend_floatValue(v20, v21, v22, v23);
  v26 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v24, 3, v25);
  objc_msgSend_floatValue(v26, v27, v28, v29);
  return objc_msgSend_valueWithVFXFloat4_(v5, v30, v31, v32, COERCE_DOUBLE(__PAIR64__(v34, v35)));
}

uint64_t sub_1B19621C4(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  void *v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  const char *v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v88;
  const char *v89;
  uint64_t v90;
  void *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  const char *v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v112;
  unsigned int v113;
  unsigned int v114;
  unsigned int v115;
  unsigned int v116;
  double v117;
  unsigned int v118;
  unsigned int v119;
  double v120;
  unsigned int v121;
  double v122;

  v5 = (void *)MEMORY[0x1E0CB3B18];
  v6 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, a2, 0, a4);
  objc_msgSend_floatValue(v6, v7, v8, v9);
  v121 = v10;
  v13 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v11, 1, v12);
  objc_msgSend_floatValue(v13, v14, v15, v16);
  v118 = v17;
  v20 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v18, 2, v19);
  objc_msgSend_floatValue(v20, v21, v22, v23);
  v26 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v24, 3, v25);
  objc_msgSend_floatValue(v26, v27, v28, v29);
  v122 = COERCE_DOUBLE(__PAIR64__(v118, v121));
  v32 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v30, 4, v31);
  objc_msgSend_floatValue(v32, v33, v34, v35);
  v119 = v36;
  v39 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v37, 5, v38);
  objc_msgSend_floatValue(v39, v40, v41, v42);
  v115 = v43;
  v46 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v44, 6, v45);
  objc_msgSend_floatValue(v46, v47, v48, v49);
  v52 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v50, 7, v51);
  objc_msgSend_floatValue(v52, v53, v54, v55);
  v120 = COERCE_DOUBLE(__PAIR64__(v115, v119));
  v58 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v56, 8, v57);
  objc_msgSend_floatValue(v58, v59, v60, v61);
  v116 = v62;
  v65 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v63, 9, v64);
  objc_msgSend_floatValue(v65, v66, v67, v68);
  v113 = v69;
  v72 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v70, 10, v71);
  objc_msgSend_floatValue(v72, v73, v74, v75);
  v78 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v76, 11, v77);
  objc_msgSend_floatValue(v78, v79, v80, v81);
  v117 = COERCE_DOUBLE(__PAIR64__(v113, v116));
  v84 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v82, 12, v83);
  objc_msgSend_floatValue(v84, v85, v86, v87);
  v114 = v88;
  v91 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v89, 13, v90);
  objc_msgSend_floatValue(v91, v92, v93, v94);
  v112 = v95;
  v98 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v96, 14, v97);
  objc_msgSend_floatValue(v98, v99, v100, v101);
  v104 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v102, 15, v103);
  objc_msgSend_floatValue(v104, v105, v106, v107);
  return objc_msgSend_valueWithVFXMatrix4_(v5, v108, v109, v110, v122, v120, v117, COERCE_DOUBLE(__PAIR64__(v112, v114)));
}

uint64_t sub_1B196238C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int128 v17;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  objc_msgSend_VFXFloat3Value(a1, a2, a3, a4);
  v17 = v4;
  v18[0] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v5, v6, v7);
  HIDWORD(v8) = DWORD1(v17);
  LODWORD(v8) = DWORD1(v17);
  v18[1] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v9, v10, v11, v8);
  v18[2] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v12, v13, v14, COERCE_DOUBLE(__PAIR64__(DWORD1(v17), DWORD2(v17))));
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v15, (uint64_t)v18, 3);
}

uint64_t sub_1B196242C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  __int128 v20;
  _QWORD v21[5];

  v21[4] = *MEMORY[0x1E0C80C00];
  objc_msgSend_VFXFloat4Value(a1, a2, a3, a4);
  v20 = v4;
  v21[0] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v5, v6, v7);
  HIDWORD(v8) = DWORD1(v20);
  LODWORD(v8) = DWORD1(v20);
  v21[1] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v9, v10, v11, v8);
  v21[2] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v12, v13, v14, COERCE_DOUBLE(__PAIR64__(DWORD1(v20), DWORD2(v20))));
  v21[3] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v15, v16, v17, COERCE_DOUBLE(__PAIR64__(DWORD1(v20), HIDWORD(v20))));
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v18, (uint64_t)v21, 4);
}

uint64_t sub_1B19624E0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _QWORD v66[17];

  v66[16] = *MEMORY[0x1E0C80C00];
  objc_msgSend_VFXMatrix4Value(a1, a2, a3, a4);
  v62 = v4;
  v63 = v5;
  v64 = v6;
  v65 = v7;
  v66[0] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v8, v9, v10);
  HIDWORD(v11) = DWORD1(v62);
  LODWORD(v11) = DWORD1(v62);
  v66[1] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v12, v13, v14, v11);
  v66[2] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v15, v16, v17, COERCE_DOUBLE(__PAIR64__(DWORD1(v62), DWORD2(v62))));
  v66[3] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v18, v19, v20, COERCE_DOUBLE(__PAIR64__(DWORD1(v62), HIDWORD(v62))));
  v66[4] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v21, v22, v23, *(double *)&v63);
  HIDWORD(v24) = DWORD1(v63);
  LODWORD(v24) = DWORD1(v63);
  v66[5] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v25, v26, v27, v24);
  v66[6] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v28, v29, v30, COERCE_DOUBLE(__PAIR64__(DWORD1(v63), DWORD2(v63))));
  v66[7] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v31, v32, v33, COERCE_DOUBLE(__PAIR64__(DWORD1(v63), HIDWORD(v63))));
  v66[8] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v34, v35, v36, *(double *)&v64);
  HIDWORD(v37) = DWORD1(v64);
  LODWORD(v37) = DWORD1(v64);
  v66[9] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v38, v39, v40, v37);
  v66[10] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v41, v42, v43, COERCE_DOUBLE(__PAIR64__(DWORD1(v64), DWORD2(v64))));
  v66[11] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v44, v45, v46, COERCE_DOUBLE(__PAIR64__(DWORD1(v64), HIDWORD(v64))));
  v66[12] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v47, v48, v49, *(double *)&v65);
  HIDWORD(v50) = DWORD1(v65);
  LODWORD(v50) = DWORD1(v65);
  v66[13] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v51, v52, v53, v50);
  v66[14] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v54, v55, v56, COERCE_DOUBLE(__PAIR64__(DWORD1(v65), DWORD2(v65))));
  v66[15] = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v57, v58, v59, COERCE_DOUBLE(__PAIR64__(DWORD1(v65), HIDWORD(v65))));
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v60, (uint64_t)v66, 16);
}

void *sub_1B196267C()
{
  return &unk_1EF0245E8;
}

uint64_t sub_1B1962688(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_colorWithRed_green_blue_alpha_(MEMORY[0x1E0DC3658], a2, a3, a4);
}

double sub_1B1962694(void *a1, const char *a2)
{
  return COERCE_FLOAT(objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0));
}

double sub_1B19626B8(void *a1, const char *a2)
{
  return COERCE_FLOAT((unint64_t)objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0) >> 32);
}

double sub_1B19626E0(void *a1, const char *a2)
{
  float v2;

  objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0);
  return v2;
}

double sub_1B1962704(void *a1, const char *a2)
{
  float v2;

  objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, a2, 0, 0);
  return v2;
}

uint64_t VFXExportJavaScriptModule(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  objc_class *v10;
  objc_class *v11;
  objc_class *v12;
  objc_class *v13;
  objc_class *v14;
  objc_class *v15;
  objc_class *v16;
  objc_class *v17;
  objc_class *v18;
  objc_class *v19;
  objc_class *v20;
  objc_class *v21;
  objc_class *v22;
  objc_class *v23;
  objc_class *v24;
  objc_class *v25;
  objc_class *v26;
  objc_class *v27;
  objc_class *v28;
  objc_class *v29;
  objc_class *v30;
  objc_class *v31;
  objc_class *v32;
  objc_class *v33;
  objc_class *v34;
  objc_class *v35;
  objc_class *v36;
  objc_class *v37;
  objc_class *v38;
  objc_class *v39;
  objc_class *v40;
  objc_class *v41;
  objc_class *v42;
  objc_class *v43;
  objc_class *v44;
  objc_class *v45;
  objc_class *v46;
  objc_class *v47;
  objc_class *v48;
  objc_class *v49;
  objc_class *v50;
  objc_class *v51;
  objc_class *v52;
  objc_class *v53;
  objc_class *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  const char *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  const char *v158;
  const char *v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  const char *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  const char *v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  const char *v179;
  uint64_t v180;
  uint64_t v181;
  const char *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  const char *v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  const char *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  void *v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  const char *v223;
  uint64_t v224;
  uint64_t v225;
  void *v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  const char *v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  void *v234;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  const char *v238;
  const char *v239;
  uint64_t v240;
  uint64_t v241;
  void *v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  const char *v246;
  const char *v247;
  uint64_t v248;
  uint64_t v249;
  void *v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  const char *v254;
  const char *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  const char *v259;
  uint64_t v260;
  uint64_t v261;
  const char *v262;
  const char *v263;
  uint64_t v264;
  uint64_t v265;
  void *v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  const char *v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  const char *v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  void *v282;
  const char *v283;
  uint64_t v284;
  uint64_t v285;
  const char *v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  void *v290;
  const char *v291;
  uint64_t v292;
  uint64_t v293;
  const char *v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  void *v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  const char *v302;
  const char *v303;
  uint64_t v304;
  uint64_t v305;
  void *v306;
  const char *v307;
  uint64_t v308;
  uint64_t v309;
  const char *v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  const char *v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  const char *v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  uint64_t v333;
  const char *v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  const char *v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  void *v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  const char *v350;
  const char *v351;
  uint64_t v352;
  uint64_t v353;
  void *v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  const char *v358;
  const char *v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  const char *v363;
  uint64_t v364;
  uint64_t v365;
  const char *v366;
  const char *v367;
  uint64_t v368;
  uint64_t v369;
  void *v370;
  const char *v371;
  uint64_t v372;
  uint64_t v373;
  const char *v374;
  const char *v375;
  uint64_t v376;
  uint64_t v377;
  void *v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  const char *v382;
  const char *v383;
  uint64_t v384;
  uint64_t v385;
  void *v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  const char *v390;
  const char *v391;
  uint64_t v392;
  uint64_t v393;
  void *v394;
  const char *v395;
  uint64_t v396;
  uint64_t v397;
  const char *v398;
  const char *v399;
  uint64_t v400;
  uint64_t v401;
  void *v402;
  const char *v403;
  uint64_t v404;
  uint64_t v405;
  const char *v406;
  const char *v407;
  uint64_t v408;
  uint64_t v409;
  void *v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  const char *v414;
  const char *v415;
  uint64_t v416;
  uint64_t v417;
  void *v418;
  const char *v419;
  uint64_t v420;
  uint64_t v421;
  const char *v422;
  const char *v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  const char *v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  const char *v435;
  uint64_t v436;
  uint64_t v437;
  const char *v438;
  const char *v439;
  uint64_t v440;
  uint64_t v441;
  void *v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  const char *v446;
  const char *v447;
  uint64_t v448;
  uint64_t v449;
  void *v450;
  const char *v451;
  uint64_t v452;
  uint64_t v453;
  const char *v454;
  const char *v455;
  uint64_t v456;
  uint64_t v457;
  void *v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  const char *v462;
  const char *v463;
  uint64_t v464;
  uint64_t v465;
  void *v466;
  const char *v467;
  uint64_t v468;
  uint64_t v469;
  const char *v470;
  const char *v471;
  uint64_t v472;
  uint64_t v473;
  void *v474;
  const char *v475;
  uint64_t v476;
  uint64_t v477;
  const char *v478;
  const char *v479;
  uint64_t v480;
  uint64_t v481;
  void *v482;
  const char *v483;
  uint64_t v484;
  uint64_t v485;
  const char *v486;
  const char *v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  const char *v491;
  uint64_t v492;
  uint64_t v493;
  const char *v494;
  const char *v495;
  uint64_t v496;
  uint64_t v497;
  void *v498;
  const char *v499;
  uint64_t v500;
  uint64_t v501;
  const char *v502;
  const char *v503;
  uint64_t v504;
  uint64_t v505;
  void *v506;
  const char *v507;
  uint64_t v508;
  uint64_t v509;
  const char *v510;
  const char *v511;
  uint64_t v512;
  uint64_t v513;
  void *v514;
  const char *v515;
  uint64_t v516;
  uint64_t v517;
  const char *v518;
  const char *v519;
  uint64_t v520;
  uint64_t v521;
  void *v522;
  const char *v523;
  uint64_t v524;
  uint64_t v525;
  const char *v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  void *v530;
  const char *v531;
  uint64_t v532;
  uint64_t v533;
  const char *v534;
  const char *v535;
  uint64_t v536;
  uint64_t v537;
  void *v538;
  const char *v539;
  uint64_t v540;
  uint64_t v541;
  const char *v542;
  const char *v543;
  uint64_t v544;
  uint64_t v545;
  void *v546;
  const char *v547;
  uint64_t v548;
  uint64_t v549;
  const char *v550;
  const char *v551;
  uint64_t v552;
  uint64_t v553;
  void *v554;
  const char *v555;
  uint64_t v556;
  uint64_t v557;
  const char *v558;
  const char *v559;
  uint64_t v560;
  uint64_t v561;
  void *v562;
  const char *v563;
  uint64_t v564;
  uint64_t v565;
  const char *v566;
  const char *v567;
  uint64_t v568;
  uint64_t v569;
  void *v570;
  const char *v571;
  uint64_t v572;
  uint64_t v573;
  const char *v574;
  const char *v575;
  uint64_t v576;
  uint64_t v577;
  void *v578;
  const char *v579;
  uint64_t v580;
  uint64_t v581;
  const char *v582;
  const char *v583;
  uint64_t v584;
  uint64_t v585;
  void *v586;
  const char *v587;
  uint64_t v588;
  uint64_t v589;
  const char *v590;
  const char *v591;
  uint64_t v592;
  uint64_t v593;
  void *v594;
  const char *v595;
  uint64_t v596;
  uint64_t v597;
  const char *v598;
  const char *v599;
  uint64_t v600;
  uint64_t v601;
  void *v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  const char *v606;
  const char *v607;
  uint64_t v608;
  uint64_t v609;
  void *v610;
  const char *v611;
  uint64_t v612;
  uint64_t v613;
  const char *v614;
  const char *v615;
  uint64_t v616;
  uint64_t v617;
  void *v618;
  const char *v619;
  uint64_t v620;
  uint64_t v621;
  const char *v622;
  const char *v623;
  uint64_t v624;
  uint64_t v625;
  void *v626;
  const char *v627;
  uint64_t v628;
  uint64_t v629;
  const char *v630;
  const char *v631;
  uint64_t v632;
  uint64_t v633;
  void *v634;
  const char *v635;
  uint64_t v636;
  uint64_t v637;
  const char *v638;
  const char *v639;
  uint64_t v640;
  uint64_t v641;
  void *v642;
  const char *v643;
  uint64_t v644;
  uint64_t v645;
  const char *v646;
  const char *v647;
  uint64_t v648;
  uint64_t v649;
  void *v650;
  const char *v651;
  uint64_t v652;
  uint64_t v653;
  const char *v654;
  const char *v655;
  uint64_t v656;
  uint64_t v657;
  void *v658;
  const char *v659;
  uint64_t v660;
  uint64_t v661;
  const char *v662;
  const char *v663;
  uint64_t v664;
  uint64_t v665;
  void *v666;
  const char *v667;
  uint64_t v668;
  uint64_t v669;
  const char *v670;
  const char *v671;
  uint64_t v672;
  uint64_t v673;
  void *v674;
  const char *v675;
  uint64_t v676;
  uint64_t v677;
  const char *v678;
  const char *v679;
  uint64_t v680;
  uint64_t v681;
  void *v682;
  const char *v683;
  uint64_t v684;
  uint64_t v685;
  const char *v686;
  const char *v687;
  uint64_t v688;
  uint64_t v689;
  void *v690;
  const char *v691;
  uint64_t v692;
  uint64_t v693;
  const char *v694;
  const char *v695;
  uint64_t v696;
  uint64_t v697;
  void *v698;
  const char *v699;
  uint64_t v700;
  uint64_t v701;
  const char *v702;
  const char *v703;
  uint64_t v704;
  uint64_t v705;
  void *v706;
  const char *v707;
  uint64_t v708;
  uint64_t v709;
  const char *v710;
  const char *v711;
  uint64_t v712;
  uint64_t v713;
  void *v714;
  const char *v715;
  uint64_t v716;
  uint64_t v717;
  const char *v718;
  const char *v719;
  uint64_t v720;
  uint64_t v721;
  void *v722;
  const char *v723;
  uint64_t v724;
  uint64_t v725;
  const char *v726;
  const char *v727;
  uint64_t v728;
  uint64_t v729;
  void *v730;
  const char *v731;
  uint64_t v732;
  uint64_t v733;
  const char *v734;
  const char *v735;
  uint64_t v736;
  uint64_t v737;
  void *v738;
  const char *v739;
  uint64_t v740;
  uint64_t v741;
  const char *v742;
  const char *v743;
  uint64_t v744;
  uint64_t v745;
  void *v746;
  const char *v747;
  uint64_t v748;
  uint64_t v749;
  const char *v750;
  const char *v751;
  uint64_t v752;
  uint64_t v753;
  void *v754;
  const char *v755;
  uint64_t v756;
  uint64_t v757;
  const char *v758;
  const char *v759;
  uint64_t v760;
  uint64_t v761;
  void *v762;
  const char *v763;
  uint64_t v764;
  uint64_t v765;
  const char *v766;
  const char *v767;
  uint64_t v768;
  uint64_t v769;
  void *v770;
  const char *v771;
  uint64_t v772;
  uint64_t v773;
  const char *v774;
  const char *v775;
  uint64_t v776;
  uint64_t v777;
  void *v778;
  const char *v779;
  uint64_t v780;
  uint64_t v781;
  const char *v782;
  const char *v783;
  uint64_t v784;
  uint64_t v785;
  void *v786;
  const char *v787;
  uint64_t v788;
  uint64_t v789;
  const char *v790;
  const char *v791;
  uint64_t v792;
  uint64_t v793;
  void *v794;
  const char *v795;
  uint64_t v796;
  uint64_t v797;
  const char *v798;
  const char *v799;
  uint64_t v800;
  uint64_t v801;
  void *v802;
  const char *v803;
  uint64_t v804;
  uint64_t v805;
  const char *v806;
  const char *v807;
  uint64_t v808;
  uint64_t v809;
  void *v810;
  const char *v811;
  uint64_t v812;
  uint64_t v813;
  const char *v814;
  const char *v815;
  uint64_t v816;
  uint64_t v817;
  void *v818;
  const char *v819;
  uint64_t v820;
  uint64_t v821;
  const char *v822;
  const char *v823;
  uint64_t v824;
  uint64_t v825;
  void *v826;
  const char *v827;
  uint64_t v828;
  uint64_t v829;
  const char *v830;
  const char *v831;
  uint64_t v832;
  uint64_t v833;
  void *v834;
  const char *v835;
  uint64_t v836;
  uint64_t v837;
  const char *v838;

  v5 = (void *)objc_msgSend_objectForKeyedSubscript_(a1, a2, (uint64_t)CFSTR("_VFXIsLoaded"), a4);
  if (!v5 || (result = objc_msgSend_toBool(v5, v6, v7, v8), (result & 1) == 0))
  {
    v10 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXWorld"), v10);
    v11 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXColor"), v11);
    v12 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("CAMediaTimingFunction"), v12);
    v13 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("CABasicAnimation"), v13);
    v14 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("CAAnimationGroup"), v14);
    v15 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("CAKeyframeAnimation"), v15);
    v16 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("CALayer"), v16);
    v17 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("NSValue"), v17);
    v18 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXImage"), v18);
    v19 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXView"), v19);
    v20 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXModel"), v20);
    v21 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXMaterialProperty"), v21);
    v22 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXLight"), v22);
    v23 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXParametricModel"), v23);
    v24 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXMeshElement"), v24);
    v25 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXRenderer"), v25);
    v26 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXMorpher"), v26);
    v27 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXCamera"), v27);
    v28 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXLOD"), v28);
    v29 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXMaterial"), v29);
    v30 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXProgram"), v30);
    v31 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXConstraint"), v31);
    v32 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsJoint"), v32);
    v33 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXMeshSource"), v33);
    v34 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXFloor"), v34);
    v35 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXShape"), v35);
    v36 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXText"), v36);
    v37 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXWorldLoader"), v37);
    v38 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXAnimationEvent"), v38);
    v39 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXModelTessellator"), v39);
    v40 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXForceField"), v40);
    v41 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsBallSocketJoint"), v41);
    v42 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsSliderJoint"), v42);
    v43 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsContact"), v43);
    v44 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXHitTestResult"), v44);
    v45 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsShape"), v45);
    v46 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsHingeJoint"), v46);
    v47 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXIKConstraint"), v47);
    v48 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXLookAtConstraint"), v48);
    v49 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsBody"), v49);
    v50 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXPhysicsWorld"), v50);
    v51 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXNode"), v51);
    v52 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXBoundingBox"), v52);
    v53 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXBoundingSphere"), v53);
    v54 = (objc_class *)objc_opt_class();
    sub_1B1963DFC(a1, CFSTR("VFXTransaction"), v54);
    v58 = (void *)objc_msgSend_globalObject(a1, v55, v56, v57);
    v61 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v59, 0, v60);
    objc_msgSend_setValue_forProperty_(v58, v62, v61, (uint64_t)CFSTR("VFXEditingLocalSpace"));
    v66 = (void *)objc_msgSend_globalObject(a1, v63, v64, v65);
    v69 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v67, 1, v68);
    objc_msgSend_setValue_forProperty_(v66, v70, v69, (uint64_t)CFSTR("VFXEditingParentSpace"));
    v74 = (void *)objc_msgSend_globalObject(a1, v71, v72, v73);
    v77 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v75, 2, v76);
    objc_msgSend_setValue_forProperty_(v74, v78, v77, (uint64_t)CFSTR("VFXEditingWorldSpace"));
    v82 = (void *)objc_msgSend_globalObject(a1, v79, v80, v81);
    v85 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v83, 3, v84);
    objc_msgSend_setValue_forProperty_(v82, v86, v85, (uint64_t)CFSTR("VFXEditingScreenSpace"));
    v90 = (void *)objc_msgSend_globalObject(a1, v87, v88, v89);
    v93 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v91, 0, v92);
    objc_msgSend_setValue_forProperty_(v90, v94, v93, (uint64_t)CFSTR("VFXManipulatorPositionCenter"));
    v98 = (void *)objc_msgSend_globalObject(a1, v95, v96, v97);
    v101 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v99, 1, v100);
    objc_msgSend_setValue_forProperty_(v98, v102, v101, (uint64_t)CFSTR("VFXManipulatorPositionMin"));
    v106 = (void *)objc_msgSend_globalObject(a1, v103, v104, v105);
    v109 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v107, 2, v108);
    objc_msgSend_setValue_forProperty_(v106, v110, v109, (uint64_t)CFSTR("VFXManipulatorPositionMax"));
    v114 = (void *)objc_msgSend_globalObject(a1, v111, v112, v113);
    v117 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v115, 0, v116);
    objc_msgSend_setValue_forProperty_(v114, v118, v117, (uint64_t)CFSTR("VFXCameraProjectionDirectionVertical"));
    v122 = (void *)objc_msgSend_globalObject(a1, v119, v120, v121);
    v125 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v123, 1, v124);
    objc_msgSend_setValue_forProperty_(v122, v126, v125, (uint64_t)CFSTR("VFXCameraProjectionDirectionHorizontal"));
    v130 = (void *)objc_msgSend_globalObject(a1, v127, v128, v129);
    v133 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v131, 0, v132);
    objc_msgSend_setValue_forProperty_(v130, v134, v133, (uint64_t)CFSTR("VFXInteractionModeFly"));
    v138 = (void *)objc_msgSend_globalObject(a1, v135, v136, v137);
    v141 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v139, 1, v140);
    objc_msgSend_setValue_forProperty_(v138, v142, v141, (uint64_t)CFSTR("VFXInteractionModeOrbitTurntable"));
    v146 = (void *)objc_msgSend_globalObject(a1, v143, v144, v145);
    v149 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v147, 2, v148);
    objc_msgSend_setValue_forProperty_(v146, v150, v149, (uint64_t)CFSTR("VFXInteractionModeOrbitAngleMapping"));
    v154 = (void *)objc_msgSend_globalObject(a1, v151, v152, v153);
    v157 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v155, 3, v156);
    objc_msgSend_setValue_forProperty_(v154, v158, v157, (uint64_t)CFSTR("VFXInteractionModeOrbitCenteredArcball"));
    v162 = (void *)objc_msgSend_globalObject(a1, v159, v160, v161);
    v165 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v163, 4, v164);
    objc_msgSend_setValue_forProperty_(v162, v166, v165, (uint64_t)CFSTR("VFXInteractionModeOrbitArcball"));
    v170 = (void *)objc_msgSend_globalObject(a1, v167, v168, v169);
    v173 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v171, 5, v172);
    objc_msgSend_setValue_forProperty_(v170, v174, v173, (uint64_t)CFSTR("VFXInteractionModePan"));
    v178 = (void *)objc_msgSend_globalObject(a1, v175, v176, v177);
    v181 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v179, 6, v180);
    objc_msgSend_setValue_forProperty_(v178, v182, v181, (uint64_t)CFSTR("VFXInteractionModeTruck"));
    v186 = (void *)objc_msgSend_globalObject(a1, v183, v184, v185);
    v189 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v187, 0, v188);
    objc_msgSend_setValue_forProperty_(v186, v190, v189, (uint64_t)CFSTR("VFXCameraFillModeFit"));
    v194 = (void *)objc_msgSend_globalObject(a1, v191, v192, v193);
    v197 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v195, 1, v196);
    objc_msgSend_setValue_forProperty_(v194, v198, v197, (uint64_t)CFSTR("VFXCameraFillModeFill"));
    v202 = (void *)objc_msgSend_globalObject(a1, v199, v200, v201);
    v205 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v203, 2, v204);
    objc_msgSend_setValue_forProperty_(v202, v206, v205, (uint64_t)CFSTR("VFXCameraFillModeFitVertically"));
    v210 = (void *)objc_msgSend_globalObject(a1, v207, v208, v209);
    v213 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v211, 3, v212);
    objc_msgSend_setValue_forProperty_(v210, v214, v213, (uint64_t)CFSTR("VFXCameraFillModeFitHorizontally"));
    v218 = (void *)objc_msgSend_globalObject(a1, v215, v216, v217);
    v221 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v219, 4, v220);
    objc_msgSend_setValue_forProperty_(v218, v222, v221, (uint64_t)CFSTR("VFXCameraFillModeStretch"));
    v226 = (void *)objc_msgSend_globalObject(a1, v223, v224, v225);
    v229 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v227, 0, v228);
    objc_msgSend_setValue_forProperty_(v226, v230, v229, (uint64_t)CFSTR("VFXMeshPrimitiveTypeTriangles"));
    v234 = (void *)objc_msgSend_globalObject(a1, v231, v232, v233);
    v237 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v235, 1, v236);
    objc_msgSend_setValue_forProperty_(v234, v238, v237, (uint64_t)CFSTR("VFXMeshPrimitiveTypeTriangleStrip"));
    v242 = (void *)objc_msgSend_globalObject(a1, v239, v240, v241);
    v245 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v243, 2, v244);
    objc_msgSend_setValue_forProperty_(v242, v246, v245, (uint64_t)CFSTR("VFXMeshPrimitiveTypeLine"));
    v250 = (void *)objc_msgSend_globalObject(a1, v247, v248, v249);
    v253 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v251, 3, v252);
    objc_msgSend_setValue_forProperty_(v250, v254, v253, (uint64_t)CFSTR("VFXMeshPrimitiveTypePoint"));
    v258 = (void *)objc_msgSend_globalObject(a1, v255, v256, v257);
    v261 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v259, 4, v260);
    objc_msgSend_setValue_forProperty_(v258, v262, v261, (uint64_t)CFSTR("VFXMeshPrimitiveTypePolygon"));
    v266 = (void *)objc_msgSend_globalObject(a1, v263, v264, v265);
    v269 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v267, 0, v268);
    objc_msgSend_setValue_forProperty_(v266, v270, v269, (uint64_t)CFSTR("VFXTessellationSmoothingModeNone"));
    v274 = (void *)objc_msgSend_globalObject(a1, v271, v272, v273);
    v277 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v275, 1, v276);
    objc_msgSend_setValue_forProperty_(v274, v278, v277, (uint64_t)CFSTR("VFXTessellationSmoothingModePNTriangles"));
    v282 = (void *)objc_msgSend_globalObject(a1, v279, v280, v281);
    v285 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v283, 2, v284);
    objc_msgSend_setValue_forProperty_(v282, v286, v285, (uint64_t)CFSTR("VFXTessellationSmoothingModePhong"));
    v290 = (void *)objc_msgSend_globalObject(a1, v287, v288, v289);
    v293 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v291, 0, v292);
    objc_msgSend_setValue_forProperty_(v290, v294, v293, (uint64_t)CFSTR("VFXSubdivisionBoundaryInterpolationRuleNone"));
    v298 = (void *)objc_msgSend_globalObject(a1, v295, v296, v297);
    v301 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v299, 1, v300);
    objc_msgSend_setValue_forProperty_(v298, v302, v301, (uint64_t)CFSTR("VFXSubdivisionBoundaryInterpolationRuleEdgeOnly"));
    v306 = (void *)objc_msgSend_globalObject(a1, v303, v304, v305);
    v309 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v307, 2, v308);
    objc_msgSend_setValue_forProperty_(v306, v310, v309, (uint64_t)CFSTR("VFXSubdivisionBoundaryInterpolationRuleEdgeAndCorner"));
    v314 = (void *)objc_msgSend_globalObject(a1, v311, v312, v313);
    v317 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v315, 0, v316);
    objc_msgSend_setValue_forProperty_(v314, v318, v317, (uint64_t)CFSTR("VFXSubdivisionFaceVaryingInterpolationRuleLinearNone"));
    v322 = (void *)objc_msgSend_globalObject(a1, v319, v320, v321);
    v325 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v323, 1, v324);
    objc_msgSend_setValue_forProperty_(v322, v326, v325, (uint64_t)CFSTR("VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersOnly"));
    v330 = (void *)objc_msgSend_globalObject(a1, v327, v328, v329);
    v333 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v331, 2, v332);
    objc_msgSend_setValue_forProperty_(v330, v334, v333, (uint64_t)CFSTR("VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus1"));
    v338 = (void *)objc_msgSend_globalObject(a1, v335, v336, v337);
    v341 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v339, 3, v340);
    objc_msgSend_setValue_forProperty_(v338, v342, v341, (uint64_t)CFSTR("VFXSubdivisionFaceVaryingInterpolationRuleLinearCornersPlus2"));
    v346 = (void *)objc_msgSend_globalObject(a1, v343, v344, v345);
    v349 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v347, 4, v348);
    objc_msgSend_setValue_forProperty_(v346, v350, v349, (uint64_t)CFSTR("VFXSubdivisionFaceVaryingInterpolationRuleLinearBoundaries"));
    v354 = (void *)objc_msgSend_globalObject(a1, v351, v352, v353);
    v357 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v355, 5, v356);
    objc_msgSend_setValue_forProperty_(v354, v358, v357, (uint64_t)CFSTR("VFXSubdivisionFaceVaryingInterpolationRuleLinearAll"));
    v362 = (void *)objc_msgSend_globalObject(a1, v359, v360, v361);
    v365 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v363, 0, v364);
    objc_msgSend_setValue_forProperty_(v362, v366, v365, (uint64_t)CFSTR("VFXSubdivisionNormalSmoothingModeCrossTriangle"));
    v370 = (void *)objc_msgSend_globalObject(a1, v367, v368, v369);
    v373 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v371, 1, v372);
    objc_msgSend_setValue_forProperty_(v370, v374, v373, (uint64_t)CFSTR("VFXSubdivisionNormalSmoothingModeCrossQuad"));
    v378 = (void *)objc_msgSend_globalObject(a1, v375, v376, v377);
    v381 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v379, 2, v380);
    objc_msgSend_setValue_forProperty_(v378, v382, v381, (uint64_t)CFSTR("VFXSubdivisionNormalSmoothingModeLimit"));
    v386 = (void *)objc_msgSend_globalObject(a1, v383, v384, v385);
    v389 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v387, 0, v388);
    objc_msgSend_setValue_forProperty_(v386, v390, v389, (uint64_t)CFSTR("VFXHitTestSearchModeClosest"));
    v394 = (void *)objc_msgSend_globalObject(a1, v391, v392, v393);
    v397 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v395, 1, v396);
    objc_msgSend_setValue_forProperty_(v394, v398, v397, (uint64_t)CFSTR("VFXHitTestSearchModeAll"));
    v402 = (void *)objc_msgSend_globalObject(a1, v399, v400, v401);
    v405 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v403, 2, v404);
    objc_msgSend_setValue_forProperty_(v402, v406, v405, (uint64_t)CFSTR("VFXHitTestSearchModeAny"));
    v410 = (void *)objc_msgSend_globalObject(a1, v407, v408, v409);
    v413 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v411, 0, v412);
    objc_msgSend_setValue_forProperty_(v410, v414, v413, (uint64_t)CFSTR("VFXLODThresholdModeWorldSpaceDistance"));
    v418 = (void *)objc_msgSend_globalObject(a1, v415, v416, v417);
    v421 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v419, 1, v420);
    objc_msgSend_setValue_forProperty_(v418, v422, v421, (uint64_t)CFSTR("VFXLODThresholdModeScreenSpaceRadius"));
    v426 = (void *)objc_msgSend_globalObject(a1, v423, v424, v425);
    v429 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v427, 0, v428);
    objc_msgSend_setValue_forProperty_(v426, v430, v429, (uint64_t)CFSTR("VFXMorpherCalculationModeNormalized"));
    v434 = (void *)objc_msgSend_globalObject(a1, v431, v432, v433);
    v437 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v435, 1, v436);
    objc_msgSend_setValue_forProperty_(v434, v438, v437, (uint64_t)CFSTR("VFXMorpherCalculationModeAdditive"));
    v442 = (void *)objc_msgSend_globalObject(a1, v439, v440, v441);
    v445 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v443, 0, v444);
    objc_msgSend_setValue_forProperty_(v442, v446, v445, (uint64_t)CFSTR("VFXChamferModeBoth"));
    v450 = (void *)objc_msgSend_globalObject(a1, v447, v448, v449);
    v453 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v451, 1, v452);
    objc_msgSend_setValue_forProperty_(v450, v454, v453, (uint64_t)CFSTR("VFXChamferModeFront"));
    v458 = (void *)objc_msgSend_globalObject(a1, v455, v456, v457);
    v461 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v459, 2, v460);
    objc_msgSend_setValue_forProperty_(v458, v462, v461, (uint64_t)CFSTR("VFXChamferModeBack"));
    v466 = (void *)objc_msgSend_globalObject(a1, v463, v464, v465);
    v469 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v467, 0, v468);
    objc_msgSend_setValue_forProperty_(v466, v470, v469, (uint64_t)CFSTR("VFXReferenceLoadingPolicyImmediate"));
    v474 = (void *)objc_msgSend_globalObject(a1, v471, v472, v473);
    v477 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v475, 1, v476);
    objc_msgSend_setValue_forProperty_(v474, v478, v477, (uint64_t)CFSTR("VFXReferenceLoadingPolicyOnDemand"));
    v482 = (void *)objc_msgSend_globalObject(a1, v479, v480, v481);
    v485 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v483, 0, v484);
    objc_msgSend_setValue_forProperty_(v482, v486, v485, (uint64_t)CFSTR("VFXAntialiasingModeNone"));
    v490 = (void *)objc_msgSend_globalObject(a1, v487, v488, v489);
    v493 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v491, 1, v492);
    objc_msgSend_setValue_forProperty_(v490, v494, v493, (uint64_t)CFSTR("VFXAntialiasingModeMultisampling2X"));
    v498 = (void *)objc_msgSend_globalObject(a1, v495, v496, v497);
    v501 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v499, 2, v500);
    objc_msgSend_setValue_forProperty_(v498, v502, v501, (uint64_t)CFSTR("VFXAntialiasingModeMultisampling4X"));
    v506 = (void *)objc_msgSend_globalObject(a1, v503, v504, v505);
    v509 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v507, 4, v508);
    objc_msgSend_setValue_forProperty_(v506, v510, v509, (uint64_t)CFSTR("VFXWorldLoaderStatusParsing"));
    v514 = (void *)objc_msgSend_globalObject(a1, v511, v512, v513);
    v517 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v515, 8, v516);
    objc_msgSend_setValue_forProperty_(v514, v518, v517, (uint64_t)CFSTR("VFXWorldLoaderStatusValidating"));
    v522 = (void *)objc_msgSend_globalObject(a1, v519, v520, v521);
    v525 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v523, 12, v524);
    objc_msgSend_setValue_forProperty_(v522, v526, v525, (uint64_t)CFSTR("VFXWorldLoaderStatusProcessing"));
    v530 = (void *)objc_msgSend_globalObject(a1, v527, v528, v529);
    v533 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v531, 16, v532);
    objc_msgSend_setValue_forProperty_(v530, v534, v533, (uint64_t)CFSTR("VFXWorldLoaderStatusComplete"));
    v538 = (void *)objc_msgSend_globalObject(a1, v535, v536, v537);
    v541 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v539, 0xFFFFFFFFLL, v540);
    objc_msgSend_setValue_forProperty_(v538, v542, v541, (uint64_t)CFSTR("VFXWorldLoaderStatusError"));
    v546 = (void *)objc_msgSend_globalObject(a1, v543, v544, v545);
    v549 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v547, 0, v548);
    objc_msgSend_setValue_forProperty_(v546, v550, v549, (uint64_t)CFSTR("VFXCullModeBack"));
    v554 = (void *)objc_msgSend_globalObject(a1, v551, v552, v553);
    v557 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v555, 1, v556);
    objc_msgSend_setValue_forProperty_(v554, v558, v557, (uint64_t)CFSTR("VFXCullModeFront"));
    v562 = (void *)objc_msgSend_globalObject(a1, v559, v560, v561);
    v565 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v563, 0, v564);
    objc_msgSend_setValue_forProperty_(v562, v566, v565, (uint64_t)CFSTR("VFXBufferFrequencyPerFrame"));
    v570 = (void *)objc_msgSend_globalObject(a1, v567, v568, v569);
    v573 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v571, 1, v572);
    objc_msgSend_setValue_forProperty_(v570, v574, v573, (uint64_t)CFSTR("VFXBufferFrequencyPerNode"));
    v578 = (void *)objc_msgSend_globalObject(a1, v575, v576, v577);
    v581 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v579, 2, v580);
    objc_msgSend_setValue_forProperty_(v578, v582, v581, (uint64_t)CFSTR("VFXBufferFrequencyPerShadable"));
    v586 = (void *)objc_msgSend_globalObject(a1, v583, v584, v585);
    v589 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v587, 0, v588);
    objc_msgSend_setValue_forProperty_(v586, v590, v589, (uint64_t)CFSTR("VFXFillModeFill"));
    v594 = (void *)objc_msgSend_globalObject(a1, v591, v592, v593);
    v597 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v595, 1, v596);
    objc_msgSend_setValue_forProperty_(v594, v598, v597, (uint64_t)CFSTR("VFXFillModeLines"));
    v602 = (void *)objc_msgSend_globalObject(a1, v599, v600, v601);
    v605 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v603, 0, v604);
    objc_msgSend_setValue_forProperty_(v602, v606, v605, (uint64_t)CFSTR("VFXCullModeBack"));
    v610 = (void *)objc_msgSend_globalObject(a1, v607, v608, v609);
    v613 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v611, 1, v612);
    objc_msgSend_setValue_forProperty_(v610, v614, v613, (uint64_t)CFSTR("VFXCullModeFront"));
    v618 = (void *)objc_msgSend_globalObject(a1, v615, v616, v617);
    v621 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v619, 0, v620);
    objc_msgSend_setValue_forProperty_(v618, v622, v621, (uint64_t)CFSTR("VFXTransparencyModeDefault"));
    v626 = (void *)objc_msgSend_globalObject(a1, v623, v624, v625);
    v629 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v627, 1, v628);
    objc_msgSend_setValue_forProperty_(v626, v630, v629, (uint64_t)CFSTR("VFXTransparencyModeSingleLayer"));
    v634 = (void *)objc_msgSend_globalObject(a1, v631, v632, v633);
    v637 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v635, 2, v636);
    objc_msgSend_setValue_forProperty_(v634, v638, v637, (uint64_t)CFSTR("VFXTransparencyModeDualLayer"));
    v642 = (void *)objc_msgSend_globalObject(a1, v639, v640, v641);
    v645 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v643, 1, v644);
    objc_msgSend_setValue_forProperty_(v642, v646, v645, (uint64_t)CFSTR("VFXBlendModeAlpha"));
    v650 = (void *)objc_msgSend_globalObject(a1, v647, v648, v649);
    v653 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v651, 2, v652);
    objc_msgSend_setValue_forProperty_(v650, v654, v653, (uint64_t)CFSTR("VFXBlendModeAdd"));
    v658 = (void *)objc_msgSend_globalObject(a1, v655, v656, v657);
    v661 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v659, 3, v660);
    objc_msgSend_setValue_forProperty_(v658, v662, v661, (uint64_t)CFSTR("VFXBlendModeSubtract"));
    v666 = (void *)objc_msgSend_globalObject(a1, v663, v664, v665);
    v669 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v667, 4, v668);
    objc_msgSend_setValue_forProperty_(v666, v670, v669, (uint64_t)CFSTR("VFXBlendModeMultiply"));
    v674 = (void *)objc_msgSend_globalObject(a1, v671, v672, v673);
    v677 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v675, 5, v676);
    objc_msgSend_setValue_forProperty_(v674, v678, v677, (uint64_t)CFSTR("VFXBlendModeScreen"));
    v682 = (void *)objc_msgSend_globalObject(a1, v679, v680, v681);
    v685 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v683, 0, v684);
    objc_msgSend_setValue_forProperty_(v682, v686, v685, (uint64_t)CFSTR("VFXBlendModeOpaque"));
    v690 = (void *)objc_msgSend_globalObject(a1, v687, v688, v689);
    v693 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v691, 6, v692);
    objc_msgSend_setValue_forProperty_(v690, v694, v693, (uint64_t)CFSTR("VFXBlendModeMax"));
    v698 = (void *)objc_msgSend_globalObject(a1, v695, v696, v697);
    v701 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v699, 0, v700);
    objc_msgSend_setValue_forProperty_(v698, v702, v701, (uint64_t)CFSTR("VFXFilterModeNone"));
    v706 = (void *)objc_msgSend_globalObject(a1, v703, v704, v705);
    v709 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v707, 1, v708);
    objc_msgSend_setValue_forProperty_(v706, v710, v709, (uint64_t)CFSTR("VFXFilterModeNearest"));
    v714 = (void *)objc_msgSend_globalObject(a1, v711, v712, v713);
    v717 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v715, 2, v716);
    objc_msgSend_setValue_forProperty_(v714, v718, v717, (uint64_t)CFSTR("VFXFilterModeLinear"));
    v722 = (void *)objc_msgSend_globalObject(a1, v719, v720, v721);
    v725 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v723, 1, v724);
    objc_msgSend_setValue_forProperty_(v722, v726, v725, (uint64_t)CFSTR("VFXWrapModeClamp"));
    v730 = (void *)objc_msgSend_globalObject(a1, v727, v728, v729);
    v733 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v731, 2, v732);
    objc_msgSend_setValue_forProperty_(v730, v734, v733, (uint64_t)CFSTR("VFXWrapModeRepeat"));
    v738 = (void *)objc_msgSend_globalObject(a1, v735, v736, v737);
    v741 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v739, 3, v740);
    objc_msgSend_setValue_forProperty_(v738, v742, v741, (uint64_t)CFSTR("VFXWrapModeClampToBorder"));
    v746 = (void *)objc_msgSend_globalObject(a1, v743, v744, v745);
    v749 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v747, 4, v748);
    objc_msgSend_setValue_forProperty_(v746, v750, v749, (uint64_t)CFSTR("VFXWrapModeMirror"));
    v754 = (void *)objc_msgSend_globalObject(a1, v751, v752, v753);
    v757 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v755, 0, v756);
    objc_msgSend_setValue_forProperty_(v754, v758, v757, (uint64_t)CFSTR("VFXPhysicsBodyTypeStatic"));
    v762 = (void *)objc_msgSend_globalObject(a1, v759, v760, v761);
    v765 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v763, 1, v764);
    objc_msgSend_setValue_forProperty_(v762, v766, v765, (uint64_t)CFSTR("VFXPhysicsBodyTypeDynamic"));
    v770 = (void *)objc_msgSend_globalObject(a1, v767, v768, v769);
    v773 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v771, 2, v772);
    objc_msgSend_setValue_forProperty_(v770, v774, v773, (uint64_t)CFSTR("VFXPhysicsBodyTypeKinematic"));
    v778 = (void *)objc_msgSend_globalObject(a1, v775, v776, v777);
    v781 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v779, 0, v780);
    objc_msgSend_setValue_forProperty_(v778, v782, v781, (uint64_t)CFSTR("VFXForceFieldScopeInsideExtent"));
    v786 = (void *)objc_msgSend_globalObject(a1, v783, v784, v785);
    v789 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v787, 1, v788);
    objc_msgSend_setValue_forProperty_(v786, v790, v789, (uint64_t)CFSTR("VFXForceFieldScopeOutsideExtent"));
    v794 = (void *)objc_msgSend_globalObject(a1, v791, v792, v793);
    v797 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v795, 0, v796);
    objc_msgSend_setValue_forProperty_(v794, v798, v797, (uint64_t)CFSTR("VFXForceFieldShapeNone"));
    v802 = (void *)objc_msgSend_globalObject(a1, v799, v800, v801);
    v805 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v803, 1, v804);
    objc_msgSend_setValue_forProperty_(v802, v806, v805, (uint64_t)CFSTR("VFXForceFieldShapeBox"));
    v810 = (void *)objc_msgSend_globalObject(a1, v807, v808, v809);
    v813 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v811, 2, v812);
    objc_msgSend_setValue_forProperty_(v810, v814, v813, (uint64_t)CFSTR("VFXForceFieldShapeSphere"));
    v818 = (void *)objc_msgSend_globalObject(a1, v815, v816, v817);
    v821 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v819, 3, v820);
    objc_msgSend_setValue_forProperty_(v818, v822, v821, (uint64_t)CFSTR("VFXForceFieldShapeCone"));
    v826 = (void *)objc_msgSend_globalObject(a1, v823, v824, v825);
    v829 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v827, 4, v828);
    objc_msgSend_setValue_forProperty_(v826, v830, v829, (uint64_t)CFSTR("VFXForceFieldShapeTube"));
    v834 = (void *)objc_msgSend_globalObject(a1, v831, v832, v833);
    v837 = objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v835, 1, v836);
    return objc_msgSend_setValue_forProperty_(v834, v838, v837, (uint64_t)CFSTR("_VFXIsLoaded"));
  }
  return result;
}

uint64_t sub_1B1963DFC(void *a1, void *a2, objc_class *a3)
{
  uint64_t result;
  objc_class *Superclass;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  objc_class *v11;
  NSString *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  int hasPrefix;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  Protocol *Protocol;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  result = objc_opt_class();
  if ((objc_class *)result != a3)
  {
    Superclass = class_getSuperclass(a3);
    if (Superclass)
    {
      v11 = Superclass;
      v12 = NSStringFromClass(Superclass);
      sub_1B1963DFC(a1, v12, v11);
    }
    v13 = (void *)objc_msgSend_globalObject(a1, v8, v9, v10);
    v16 = (void *)objc_msgSend_valueForProperty_(v13, v14, (uint64_t)a2, v15);
    result = objc_msgSend_isUndefined(v16, v17, v18, v19);
    if ((_DWORD)result)
    {
      if (objc_msgSend_hasPrefix_(a2, v20, (uint64_t)CFSTR("CA"), v21))
      {
        v24 = (void *)MEMORY[0x1E0CB3940];
        v47 = objc_msgSend_substringFromIndex_(a2, v22, 2, v23);
        v27 = (void *)objc_msgSend_stringWithFormat_(v24, v25, (uint64_t)CFSTR("VFXJS%@JSExport"), v26, v47);
      }
      else
      {
        hasPrefix = objc_msgSend_hasPrefix_(a2, v22, (uint64_t)CFSTR("NS"), v23);
        v34 = (void *)MEMORY[0x1E0CB3940];
        if (hasPrefix)
        {
          v48 = objc_msgSend_substringFromIndex_(a2, v32, 2, v33);
          v27 = (void *)objc_msgSend_stringWithFormat_(v34, v35, (uint64_t)CFSTR("VFX%@JSExport"), v36, v48);
        }
        else
        {
          v27 = (void *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v32, (uint64_t)CFSTR("%@JSExport"), v33, a2);
        }
      }
      v37 = (const char *)objc_msgSend_UTF8String(v27, v28, v29, v30);
      Protocol = objc_getProtocol(v37);
      if (Protocol
        || (result = objc_opt_respondsToSelector(), (result & 1) != 0)
        && (result = objc_msgSend_VFXJSExportProtocol(a3, v44, v45, v46), (Protocol = (Protocol *)result) != 0))
      {
        class_addProtocol(a3, Protocol);
        v42 = (void *)objc_msgSend_globalObject(a1, v39, v40, v41);
        return objc_msgSend_setValue_forProperty_(v42, v43, (uint64_t)a3, (uint64_t)a2);
      }
    }
  }
  return result;
}

void sub_1B196C708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_1B197A264((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B196C748(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t i;
  const char *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t j;
  void *v101;
  char *v102;
  const char *v103;
  const char *v104;
  char *v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  double v122;
  double v123;
  void *v124;
  uint64_t v125;
  const char *v126;
  void *v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  void *v134;
  uint64_t v135;
  const char *v136;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  _BYTE v146[128];
  _BYTE v147[128];
  uint64_t v148;

  v148 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 56) = objc_msgSend_newSceneWithURL_((void *)qword_1EEF66AA0, a2, (uint64_t)a2, a4);
  v7 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v5, (uint64_t)CFSTR("VFX export preview %.02f"), v6, 0x3FE51EB860000000);
  v8 = *(void **)(a1 + 56);
  v11 = objc_msgSend_dataWithString_(VFXUSKData_helper, v9, v7, v10);
  objc_msgSend_setDictionaryMetadataWithKey_dictionaryKey_value_(v8, v12, (uint64_t)CFSTR("customLayerData"), (uint64_t)CFSTR("creator"), v11);
  v15 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v13, *(_QWORD *)(a1 + 24), v14);
  v17 = (void *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v16, *(_QWORD *)(a1 + 56), v15, qword_1EEF66BA0);
  v20 = objc_msgSend_dataWithString_(VFXUSKData_helper, v18, *(_QWORD *)(a1 + 8), v19);
  objc_msgSend_setDictionaryMetadataWithKey_dictionaryKey_value_(v17, v21, (uint64_t)CFSTR("assetInfo"), (uint64_t)CFSTR("name"), v20);
  v24 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v22, (uint64_t)CFSTR("component"), v23);
  v27 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v25, v24, v26);
  objc_msgSend_setMetadataWithKey_value_(v17, v28, (uint64_t)CFSTR("kind"), v27);
  v29 = *(void **)(a1 + 56);
  v32 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v30, *(_QWORD *)(a1 + 8), v31);
  v35 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v33, v32, v34);
  objc_msgSend_setMetadataWithKey_value_(v29, v36, (uint64_t)CFSTR("defaultPrim"), v35);
  v37 = *(void **)(a1 + 56);
  v40 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v38, (uint64_t)CFSTR("Y"), v39);
  v43 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v41, v40, v42);
  objc_msgSend_setMetadataWithKey_value_(v37, v44, (uint64_t)CFSTR("upAxis"), v43);
  v48 = objc_msgSend_worldRef(*(void **)a1, v45, v46, v47);
  v56 = sub_1B187AD20(v48, v49, v50, v51, v52, v53, v54, v55);
  v57 = *(void **)(a1 + 56);
  v61 = objc_msgSend_dataWithDouble_(VFXUSKData_helper, v58, v59, v60, v56);
  objc_msgSend_setMetadataWithKey_value_(v57, v62, (uint64_t)CFSTR("metersPerUnit"), v61);
  sub_1B196D978(a1, v63, v64, v65);
  sub_1B196DC30((void **)a1, v66, v67, v68);
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v72 = (void *)objc_msgSend_rootNode(*(void **)a1, v69, v70, v71);
  v76 = (void *)objc_msgSend_childNodes(v72, v73, v74, v75);
  v78 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v77, (uint64_t)&v142, (uint64_t)v147, 16);
  if (v78)
  {
    v81 = v78;
    v82 = *(_QWORD *)v143;
    do
    {
      for (i = 0; i != v81; ++i)
      {
        if (*(_QWORD *)v143 != v82)
          objc_enumerationMutation(v76);
        sub_1B196DD20((double *)a1, *(void **)(*((_QWORD *)&v142 + 1) + 8 * i), v79, v80);
      }
      v81 = objc_msgSend_countByEnumeratingWithState_objects_count_(v76, v84, (uint64_t)&v142, (uint64_t)v147, 16);
    }
    while (v81);
  }
  sub_1B196DE88(a1);
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v88 = (void *)objc_msgSend_rootNode(*(void **)a1, v85, v86, v87);
  v92 = (void *)objc_msgSend_childNodes(v88, v89, v90, v91);
  v94 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v93, (uint64_t)&v138, (uint64_t)v146, 16);
  if (v94)
  {
    v98 = v94;
    v99 = *(_QWORD *)v139;
    do
    {
      for (j = 0; j != v98; ++j)
      {
        if (*(_QWORD *)v139 != v99)
          objc_enumerationMutation(v92);
        v101 = *(void **)(*((_QWORD *)&v138 + 1) + 8 * j);
        v102 = (char *)sub_1B196E4A4(a1, v95, v96, v97);
        sub_1B196DF9C(a1, v101, v102, 0, 0);
      }
      v98 = objc_msgSend_countByEnumeratingWithState_objects_count_(v92, v95, (uint64_t)&v138, (uint64_t)v146, 16);
    }
    while (v98);
  }
  sub_1B196E50C((void **)a1, v95, v96, v97);
  sub_1B196E5FC((uint64_t **)(a1 + 440), v103);
  sub_1B196E680(a1, v104, v105, v106);
  if (*(double *)(a1 + 472) > 0.0)
  {
    objc_msgSend_startTime(*(void **)a1, v107, v108, v109);
    v114 = v113 / *(double *)(a1 + 504) + 0.0;
    v115 = (double)(int)v114;
    if (vabdd_f64(v114, v115) >= 0.001)
    {
      if (1.0 - (v114 - v115) < 0.001)
        v114 = v115 + 1.0;
    }
    else
    {
      v114 = (double)(int)v114;
    }
    objc_msgSend_endTime(*(void **)a1, v110, v111, v112);
    v120 = v119 / *(double *)(a1 + 504) + 0.0;
    v121 = (double)(int)v120;
    if (vabdd_f64(v120, v121) >= 0.001)
    {
      if (1.0 - (v120 - v121) < 0.001)
        v120 = v121 + 1.0;
    }
    else
    {
      v120 = (double)(int)v120;
    }
    v122 = *(double *)(a1 + 464);
    if (v122 == -1.0 || v122 > v114)
    {
      *(double *)(a1 + 464) = v114;
      v122 = v114;
    }
    v123 = *(double *)(a1 + 472);
    if (v123 == -1.0 || v123 < v120)
      *(double *)(a1 + 472) = v120;
    v124 = *(void **)(a1 + 56);
    v125 = objc_msgSend_dataWithDouble_(VFXUSKData_helper, v116, v117, v118, v122);
    objc_msgSend_setMetadataWithKey_value_(v124, v126, (uint64_t)CFSTR("startTimeCode"), v125);
    v127 = *(void **)(a1 + 56);
    v131 = objc_msgSend_dataWithDouble_(VFXUSKData_helper, v128, v129, v130, *(double *)(a1 + 472));
    objc_msgSend_setMetadataWithKey_value_(v127, v132, (uint64_t)CFSTR("endTimeCode"), v131);
  }
  v133 = *(unsigned int *)(a1 + 480);
  if ((int)v133 >= 1)
  {
    v134 = *(void **)(a1 + 56);
    v135 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v107, v133, v109);
    objc_msgSend_setMetadataWithKey_value_(v134, v136, (uint64_t)CFSTR("timeCodesPerSecond"), v135);
  }
  return *(_QWORD *)(a1 + 56);
}

void sub_1B196CC14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;

  v9 = dlopen("/System/Library/PrivateFrameworks/USDKit.framework/USDKit", 2);
  if (v9 || (v9 = dlopen("../SharedFrameworks/USDKit.framework/USDKit", 2)) != 0)
  {
    qword_1EEF66A80 = (uint64_t)NSClassFromString(CFSTR("USKObjectPath"));
    qword_1EEF66A78 = (uint64_t)NSClassFromString(CFSTR("USKToken"));
    qword_1EEF66A88 = (uint64_t)NSClassFromString(CFSTR("USKData"));
    qword_1EEF66AA0 = (uint64_t)NSClassFromString(CFSTR("USKScene"));
    v16 = (uint64_t *)dlsym(v9, "USKDataTypeResourcePath");
    if (v16)
      v17 = *v16;
    else
      v17 = 0;
    qword_1EEF66AA8 = v17;
    v18 = (uint64_t *)dlsym(v9, "USKDataTypeInt");
    if (v18)
      v19 = *v18;
    else
      v19 = 0;
    qword_1EEF66AB0 = v19;
    v20 = (uint64_t *)dlsym(v9, "USKDataTypeBool");
    if (v20)
      v21 = *v20;
    else
      v21 = 0;
    qword_1EEF66AB8 = v21;
    v22 = (uint64_t *)dlsym(v9, "USKDataTypeDouble3");
    if (v22)
      v23 = *v22;
    else
      v23 = 0;
    qword_1EEF66AC0 = v23;
    v24 = (uint64_t *)dlsym(v9, "USKDataTypeDouble4x4");
    if (v24)
      v25 = *v24;
    else
      v25 = 0;
    qword_1EEF66AC8 = v25;
    v26 = (uint64_t *)dlsym(v9, "USKDataTypeDouble4x4Array");
    if (v26)
      v27 = *v26;
    else
      v27 = 0;
    qword_1EEF66AD0 = v27;
    v28 = (uint64_t *)dlsym(v9, "USKDataTypeFloat");
    if (v28)
      v29 = *v28;
    else
      v29 = 0;
    qword_1EEF66AD8 = v29;
    v30 = (uint64_t *)dlsym(v9, "USKDataTypeFloat2");
    if (v30)
      v31 = *v30;
    else
      v31 = 0;
    qword_1EEF66AE0 = v31;
    v32 = (uint64_t *)dlsym(v9, "USKDataTypeFloat3");
    if (v32)
      v33 = *v32;
    else
      v33 = 0;
    qword_1EEF66AE8 = v33;
    v34 = (uint64_t *)dlsym(v9, "USKDataTypeFloat4");
    if (v34)
      v35 = *v34;
    else
      v35 = 0;
    qword_1EEF66AF0 = v35;
    v36 = (uint64_t *)dlsym(v9, "USKDataTypeFloat2Array");
    if (v36)
      v37 = *v36;
    else
      v37 = 0;
    qword_1EEF66AF8 = v37;
    v38 = (uint64_t *)dlsym(v9, "USKDataTypeFloat3Array");
    if (v38)
      v39 = *v38;
    else
      v39 = 0;
    qword_1EEF66B00 = v39;
    v40 = (uint64_t *)dlsym(v9, "USKDataTypeFloatArray");
    if (v40)
      v41 = *v40;
    else
      v41 = 0;
    qword_1EEF66B08 = v41;
    v42 = (uint64_t *)dlsym(v9, "USKDataTypeIntArray");
    if (v42)
      v43 = *v42;
    else
      v43 = 0;
    qword_1EEF66B10 = v43;
    v44 = (uint64_t *)dlsym(v9, "USKDataTypeObjectPath");
    if (v44)
      v45 = *v44;
    else
      v45 = 0;
    qword_1EEF66B18 = v45;
    v46 = (uint64_t *)dlsym(v9, "USKDataTypeObjectPathArray");
    if (v46)
      v47 = *v46;
    else
      v47 = 0;
    qword_1EEF66B20 = v47;
    v48 = (uint64_t *)dlsym(v9, "USKDataTypeQuatf");
    if (v48)
      v49 = *v48;
    else
      v49 = 0;
    qword_1EEF66B28 = v49;
    v50 = (uint64_t *)dlsym(v9, "USKDataTypeQuatfArray");
    if (v50)
      v51 = *v50;
    else
      v51 = 0;
    qword_1EEF66B30 = v51;
    v52 = (uint64_t *)dlsym(v9, "USKDataTypeStringArray");
    if (v52)
      v53 = *v52;
    else
      v53 = 0;
    qword_1EEF66B38 = v53;
    v54 = (uint64_t *)dlsym(v9, "USKDataTypeToken");
    if (v54)
      v55 = *v54;
    else
      v55 = 0;
    qword_1EEF66B40 = v55;
    v56 = (uint64_t *)dlsym(v9, "USKDataTypeTokenArray");
    if (v56)
      v57 = *v56;
    else
      v57 = 0;
    qword_1EEF66B48 = v57;
    v58 = (uint64_t *)dlsym(v9, "USKNodeTypeCamera");
    if (v58)
      v59 = *v58;
    else
      v59 = 0;
    qword_1EEF66B50 = v59;
    v60 = (uint64_t *)dlsym(v9, "USKNodeTypeMaterial");
    if (v60)
      v61 = *v60;
    else
      v61 = 0;
    qword_1EEF66B58 = v61;
    v62 = (uint64_t *)dlsym(v9, "USKNodeTypeMesh");
    if (v62)
      v63 = *v62;
    else
      v63 = 0;
    qword_1EEF66B60 = v63;
    v64 = (uint64_t *)dlsym(v9, "USKNodeTypeMeshGroup");
    if (v64)
      v65 = *v64;
    else
      v65 = 0;
    qword_1EEF66B68 = v65;
    v66 = (uint64_t *)dlsym(v9, "USKNodeTypeScope");
    if (v66)
      v67 = *v66;
    else
      v67 = 0;
    qword_1EEF66B70 = v67;
    v68 = (uint64_t *)dlsym(v9, "USKNodeTypeShader");
    if (v68)
      v69 = *v68;
    else
      v69 = 0;
    qword_1EEF66B78 = v69;
    v70 = (uint64_t *)dlsym(v9, "USKNodeTypeSkeletalAnimation");
    if (v70)
      v71 = *v70;
    else
      v71 = 0;
    qword_1EEF66B80 = v71;
    v72 = (uint64_t *)dlsym(v9, "USKNodeTypeSkeleton");
    if (v72)
      v73 = *v72;
    else
      v73 = 0;
    qword_1EEF66B88 = v73;
    v74 = (uint64_t *)dlsym(v9, "USKNodeTypeSkeletonRoot");
    if (v74)
      v75 = *v74;
    else
      v75 = 0;
    qword_1EEF66B90 = v75;
    v76 = (uint64_t *)dlsym(v9, "USKNodeTypeBlendShape");
    if (v76)
      v77 = *v76;
    else
      v77 = 0;
    qword_1EEF66B98 = v77;
    v78 = (uint64_t *)dlsym(v9, "USKNodeTypeTransform");
    if (v78)
      v79 = *v78;
    else
      v79 = 0;
    qword_1EEF66BA0 = v79;
    v80 = (uint64_t *)dlsym(v9, "USKRoleTypeColor");
    if (v80)
      v81 = *v80;
    else
      v81 = 0;
    qword_1EEF66BA8 = v81;
    v82 = (uint64_t *)dlsym(v9, "USKRoleTypeNone");
    if (v82)
      v83 = *v82;
    else
      v83 = 0;
    qword_1EEF66BB0 = v83;
    v84 = (uint64_t *)dlsym(v9, "USKRoleTypeNormal");
    if (v84)
      v85 = *v84;
    else
      v85 = 0;
    qword_1EEF66BB8 = v85;
    v86 = (uint64_t *)dlsym(v9, "USKRoleTypePoint");
    if (v86)
      v87 = *v86;
    else
      v87 = 0;
    qword_1EEF66BC0 = v87;
    v88 = (uint64_t *)dlsym(v9, "USKRoleTypeVector");
    if (v88)
      v89 = *v88;
    else
      v89 = 0;
    qword_1EEF66BC8 = v89;
    v90 = (uint64_t *)dlsym(v9, "USKRoleTypeTextureCoordinate");
    if (v90)
      v91 = *v90;
    else
      v91 = 0;
    qword_1EEF66BD0 = v91;
    v92 = (uint64_t *)dlsym(v9, "USKSchemaTypeBindingAPI");
    if (v92)
      v93 = *v92;
    else
      v93 = 0;
    qword_1EEF66BD8 = v93;
    byte_1EEF66A98 = 1;
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Could not load UsdKit"), v10, v11, v12, v13, v14, v15, a9);
  }
}

uint64_t sub_1B196D2E8(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 16) = a5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 72;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v6 = objc_msgSend_setWithCapacity_(MEMORY[0x1E0C99E20], a2, 8, a4);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_QWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 120) = a1 + 128;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 192) = a1 + 200;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 256;
  *(_QWORD *)(a1 + 216) = a1 + 224;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = a1 + 280;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = a1 + 328;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 416) = a1 + 424;
  *(_QWORD *)(a1 + 392) = a1 + 400;
  *(_QWORD *)(a1 + 432) = 0;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 468) = 0u;
  *(_QWORD *)(a1 + 488) = 0x7FEFFFFFFFFFFFFFLL;
  *(_OWORD *)(a1 + 496) = xmmword_1B2268510;
  v8 = sub_1B196D580(a3, v7);
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 24) = objc_msgSend_stringByAppendingString_(CFSTR("/"), v9, v8, v10);
  return a1;
}

void sub_1B196D4C0(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 88) = a1;
  sub_1B196D928(*(_QWORD *)(v1 - 104), **(char ***)(v1 - 96));
  _Unwind_Resume(*(_Unwind_Exception **)(v1 - 88));
}

uint64_t sub_1B196D580(void *a1, const char *a2)
{
  void *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v22;

  v22 = 0;
  v3 = (void *)objc_msgSend_regularExpressionWithPattern_options_error_(MEMORY[0x1E0CB38E8], a2, (uint64_t)CFSTR("[^A-Za-z0-9]"), 1, &v22);
  v7 = objc_msgSend_length(a1, v4, v5, v6);
  v9 = (void *)objc_msgSend_stringByReplacingMatchesInString_options_range_withTemplate_(v3, v8, (uint64_t)a1, 0, 0, v7, CFSTR("_"));
  v13 = (void *)objc_msgSend_decimalDigitCharacterSet(MEMORY[0x1E0CB3500], v10, v11, v12);
  v16 = objc_msgSend_characterAtIndex_(v9, v14, 0, v15);
  if (objc_msgSend_characterIsMember_(v13, v17, v16, v18))
    return objc_msgSend_stringByAppendingString_(CFSTR("_"), v19, (uint64_t)v9, v20);
  return (uint64_t)v9;
}

uint64_t sub_1B196D638(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  if (*(_QWORD **)a1 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1B5E22E18](*v2, 0x1080C406BDE4C18);
      ++v2;
    }
    while (v2 != v3);
    v2 = *(_QWORD **)a1;
  }
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t **sub_1B196D6A8(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t *v11;

  v2 = *a1;
  v3 = a1[1];
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      sub_1B1805B90(v4 + 64, *(_QWORD **)(v4 + 72));
      sub_1B1805B90(v4 + 32, *(_QWORD **)(v4 + 40));
      v5 = *(void **)(v4 + 8);
      if (v5)
      {
        *(_QWORD *)(v4 + 16) = v5;
        operator delete(v5);
      }
      MEMORY[0x1B5E22E18](v4, 0x10A0C402AA64608);
    }
    ++v2;
  }
  v6 = a1[3];
  v7 = a1[4];
  while (v6 != v7)
  {
    v8 = *v6;
    if (*v6)
    {
      sub_1B1805B90(v8 + 72, *(_QWORD **)(v8 + 80));
      sub_1B1805B90(v8 + 48, *(_QWORD **)(v8 + 56));
      sub_1B1805B90(v8 + 24, *(_QWORD **)(v8 + 32));
      v9 = *(void **)v8;
      if (*(_QWORD *)v8)
      {
        *(_QWORD *)(v8 + 8) = v9;
        operator delete(v9);
      }
      MEMORY[0x1B5E22E18](v8, 0x10A0C400C584343);
    }
    ++v6;
  }
  sub_1B1805B90((uint64_t)(a1 + 6), a1[7]);
  v10 = a1[3];
  if (v10)
  {
    a1[4] = v10;
    operator delete(v10);
  }
  v11 = *a1;
  if (*a1)
  {
    a1[1] = v11;
    operator delete(v11);
  }
  return a1;
}

void sub_1B196D7C0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1B196D7C0(a1, *a2);
    sub_1B196D7C0(a1, a2[1]);
    sub_1B196D808((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1B196D808(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  sub_1B196D84C(&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1B196D84C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1B196D88C((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1B196D88C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

void sub_1B196D8D8(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B196D8D8(a1, *(_QWORD *)a2);
    sub_1B196D8D8(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void sub_1B196D928(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B196D928(a1, *(_QWORD *)a2);
    sub_1B196D928(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

void sub_1B196D978(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  const char *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void ****v22;
  void ****v23;
  void ***v24;
  void **v25;
  void **v26;
  uint64_t *v27;
  void **v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  BOOL v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[128];
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  v48 = 0u;
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v5 = (void *)objc_msgSend_rootNode(*(void **)a1, a2, a3, a4);
  v9 = (void *)objc_msgSend_childNodes(v5, v6, v7, v8);
  v11 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v48, (uint64_t)v52, 16);
  if (v11)
  {
    v15 = v11;
    v16 = *(_QWORD *)v49;
    do
    {
      for (i = 0; i != v15; ++i)
      {
        if (*(_QWORD *)v49 != v16)
          objc_enumerationMutation(v9);
        sub_1B196E888(a1, *(void **)(*((_QWORD *)&v48 + 1) + 8 * i), v13, v14);
      }
      v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v18, (uint64_t)&v48, (uint64_t)v52, 16);
    }
    while (v15);
  }
  sub_1B196EADC(a1 + 344, v12, v13, v14);
  v22 = *(void *****)(a1 + 368);
  v23 = *(void *****)(a1 + 376);
  if (v22 != v23)
  {
    do
    {
      v24 = *v22;
      v25 = **v22;
      v26 = (*v22)[1];
      if (v25 != v26)
      {
        while (sub_1B196EE1C(*v25, v19, v20, v21))
        {
          if (++v25 == v26)
          {
            v27 = (uint64_t *)*v24;
            v28 = v24[1];
            if (v27 != (uint64_t *)v28)
            {
              v29 = *v27;
              do
              {
                v47 = 0;
                v47 = *v27;
                if (v29 != v47)
                  sub_1B1949968((uint64_t **)(a1 + 248), (unint64_t *)&v47, &v47);
                ++v27;
              }
              while (v27 != (uint64_t *)v28);
            }
            break;
          }
        }
      }
      ++v22;
    }
    while (v22 != v23);
    v30 = *(uint64_t **)(a1 + 368);
    v31 = *(uint64_t **)(a1 + 376);
    if (v30 != v31)
    {
      v32 = (_QWORD *)(a1 + 280);
      do
      {
        v33 = *(_QWORD **)(a1 + 272);
        if (v33 != v32)
        {
          v34 = *v30;
          do
          {
            if (*(_QWORD *)(v33[5] + 56) == v34)
            {
              v38 = **(void ***)v34;
              if (v38)
              {
                v39 = (void *)v33[4];
                v40 = objc_msgSend_parentNode(v38, v19, v20, v21);
                if (v40)
                {
                  v41 = (void *)v40;
                  do
                  {
                    if (v39)
                    {
                      v42 = v39;
                      while (1)
                      {
                        v42 = (void *)objc_msgSend_parentNode(v42, v19, v20, v21);
                        if (!v42)
                          break;
                        if (v41 == v42)
                        {
                          if ((void *)objc_msgSend_rootNode(*(void **)a1, v19, v20, v21) != v41
                            && sub_1B196EE1C(v41, v19, v20, v21))
                          {
                            *(_QWORD *)(v34 + 96) = v41;
                          }
                          goto LABEL_23;
                        }
                      }
                    }
                    v41 = (void *)objc_msgSend_parentNode(v41, v19, v20, v21);
                  }
                  while (v41);
                }
              }
            }
LABEL_23:
            v35 = (_QWORD *)v33[1];
            if (v35)
            {
              do
              {
                v36 = v35;
                v35 = (_QWORD *)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                v36 = (_QWORD *)v33[2];
                v37 = *v36 == (_QWORD)v33;
                v33 = v36;
              }
              while (!v37);
            }
            v33 = v36;
          }
          while (v36 != v32);
        }
        ++v30;
      }
      while (v30 != v31);
      v43 = *(uint64_t ***)(a1 + 368);
      v44 = *(uint64_t ***)(a1 + 376);
      if (v43 != v44)
      {
        v45 = (uint64_t **)(a1 + 96);
        do
        {
          v46 = *v43;
          v47 = 0;
          v47 = sub_1B196EE70(v46, v19, v20, v21);
          if (v47)
            sub_1B1949968(v45, (unint64_t *)&v47, &v47);
          ++v43;
        }
        while (v43 != v44);
      }
    }
  }
}

uint64_t sub_1B196DC30(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = (void *)objc_msgSend_rootNode(*a1, a2, a3, a4, 0);
  v9 = (void *)objc_msgSend_childNodes(v5, v6, v7, v8);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v18, (uint64_t)v22, 16);
  if (result)
  {
    v14 = result;
    v15 = *(_QWORD *)v19;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v19 != v15)
          objc_enumerationMutation(v9);
        sub_1B196F834((uint64_t)a1, *(void **)(*((_QWORD *)&v18 + 1) + 8 * v16++), v12, v13);
      }
      while (v14 != v16);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v17, (uint64_t)&v18, (uint64_t)v22, 16);
      v14 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B196DD20(double *a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void *v32;
  const char *v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[128];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (objc_msgSend_animationKeys(a2, (const char *)a2, a3, a4))
  {
    v9 = (void *)objc_msgSend_animationKeys(a2, v6, v7, v8);
    if (objc_msgSend_count(v9, v10, v11, v12))
    {
      v13 = (void *)objc_msgSend_animationKeys(a2, v6, v7, v8);
      v17 = objc_msgSend_count(v13, v14, v15, v16);
      if (v17)
      {
        v18 = v17;
        v19 = 0;
        while (1)
        {
          v20 = (void *)objc_msgSend_animationKeys(a2, v6, v7, v8);
          v23 = objc_msgSend_objectAtIndexedSubscript_(v20, v21, v19, v22);
          v26 = (void *)objc_msgSend_animationPlayerForKey_(a2, v24, v23, v25);
          if (v26)
            break;
          if (v18 == ++v19)
            goto LABEL_9;
        }
        v27 = (void *)objc_msgSend_animation(v26, v6, v7, v8);
        v31 = (void *)objc_msgSend_caAnimation(v27, v28, v29, v30);
        sub_1B196FA90(a1, v31);
      }
    }
  }
LABEL_9:
  v41 = 0u;
  v42 = 0u;
  v39 = 0u;
  v40 = 0u;
  v32 = (void *)objc_msgSend_childNodes(a2, v6, v7, v8, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v33, (uint64_t)&v39, (uint64_t)v43, 16);
  if (result)
  {
    v35 = result;
    v36 = *(_QWORD *)v40;
    do
    {
      v37 = 0;
      do
      {
        if (*(_QWORD *)v40 != v36)
          objc_enumerationMutation(v32);
        sub_1B196DD20(a1, *(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * v37++));
      }
      while (v35 != v37);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v32, v38, (uint64_t)&v39, (uint64_t)v43, 16);
      v35 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B196DE88(uint64_t result)
{
  double v1;
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;

  v1 = *(double *)(result + 504);
  if (v1 == 0.0)
  {
    *(_QWORD *)(result + 504) = 0x3FA5555555555555;
    v1 = 0.0416666667;
  }
  v2 = *(double *)(result + 496);
  if (v2 >= 0.0)
  {
    v3 = 1.0 / v1 + 0.0;
    v4 = (double)(int)v3;
    if (vabdd_f64(v3, v4) >= 0.001)
    {
      if (1.0 - (v3 - v4) < 0.001)
        v3 = v4 + 1.0;
    }
    else
    {
      v3 = (double)(int)v3;
    }
    *(_DWORD *)(result + 480) = (int)(v3 + 0.5);
    v5 = *(double *)(result + 488) / v1 + 0.0;
    v6 = (double)(int)v5;
    if (vabdd_f64(v5, v6) >= 0.001)
    {
      if (1.0 - (v5 - v6) < 0.001)
        v5 = v6 + 1.0;
    }
    else
    {
      v5 = (double)(int)v5;
    }
    *(double *)(result + 464) = v5;
    v7 = v2 / v1 + 0.0;
    v8 = (double)(int)v7;
    if (vabdd_f64(v7, v8) >= 0.001)
    {
      if (1.0 - (v7 - v8) < 0.001)
        v7 = v8 + 1.0;
    }
    else
    {
      v7 = (double)(int)v7;
    }
    *(double *)(result + 472) = v7;
  }
  return result;
}

uint64_t sub_1B196DF9C(uint64_t result, void *a2, char *a3, void ***a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void ****i;
  void ***v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL4 v29;
  uint64_t j;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  void *v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  _QWORD *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  void *v96;
  void **v97;
  _BYTE v98[128];
  uint64_t v99;

  v8 = a2;
  v9 = result;
  v99 = *MEMORY[0x1E0C80C00];
  v96 = a2;
  v10 = *(_QWORD **)(result + 256);
  if (!v10)
    goto LABEL_12;
  v11 = result + 256;
  do
  {
    v12 = v10[4];
    v13 = v12 >= (unint64_t)a2;
    if (v12 >= (unint64_t)a2)
      v14 = v10;
    else
      v14 = v10 + 1;
    if (v13)
      v11 = (uint64_t)v10;
    v10 = (_QWORD *)*v14;
  }
  while (*v14);
  if (v11 == result + 256 || *(_QWORD *)(v11 + 32) > (unint64_t)a2)
  {
LABEL_12:
    v15 = sub_1B196F234(result + 344, (uint64_t)a2);
    if (v15 && v15[16])
      a3 = (char *)v15[16];
    v17 = sub_1B196FCFC(v9, a3, v8, v16);
    v23 = objc_msgSend_stringByAppendingPathComponent_(a3, v18, (uint64_t)v17, v19);
    for (i = *(void *****)(v9 + 368); i != *(void *****)(v9 + 376); ++i)
    {
      v25 = *i;
      if (***i == v8)
        goto LABEL_20;
    }
    v25 = 0;
LABEL_20:
    v29 = ((unint64_t)a4 | objc_msgSend_skinner(v8, v20, v21, v22)) == 0;
    for (j = *(_QWORD *)(v9 + 368); j != *(_QWORD *)(v9 + 376); j += 8)
    {
      if (*(void **)(*(_QWORD *)j + 96) == v8)
      {
        v36 = qword_1EEF66B90;
        v37 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v26, v23, v28);
        v34 = (const char *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v38, *(_QWORD *)(v9 + 56), v37, v36);
        v35 = 0;
        a5 = 1;
        if (!v34)
          goto LABEL_65;
        goto LABEL_47;
      }
    }
    if (v25)
    {
      v34 = (const char *)sub_1B196FE88((uint64_t)v25, *(const char **)(v9 + 56), v23, v28);
      v35 = 1;
      a4 = v25;
      if (!v34)
        goto LABEL_65;
      goto LABEL_47;
    }
    if (!objc_msgSend_model(v8, v26, v27, v28))
    {
      if (objc_msgSend_camera(v8, (const char *)v31, v32, v33))
      {
        v42 = (void *)objc_msgSend_camera(v8, v39, v40, v41);
        v43 = sub_1B1970670(v9, (const char *)v8, v23, v42);
      }
      else
      {
        v52 = qword_1EEF66BA0;
        v53 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v39, v23, v41);
        v43 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v54, *(_QWORD *)(v9 + 56), v53, v52);
      }
      v34 = (const char *)v43;
LABEL_46:
      v35 = 0;
      if (!v34)
        goto LABEL_65;
      goto LABEL_47;
    }
    if (v29)
    {
      v34 = sub_1B1970528(v9, v8, v23, (uint64_t)v17);
      a4 = 0;
      goto LABEL_46;
    }
    v45 = *(_QWORD **)(v9 + 304);
    v44 = *(_QWORD *)(v9 + 312);
    if ((unint64_t)v45 >= v44)
    {
      v47 = *(_QWORD *)(v9 + 296);
      v48 = ((uint64_t)v45 - v47) >> 4;
      v49 = v48 + 1;
      if ((unint64_t)(v48 + 1) >> 60)
        abort();
      v50 = v44 - v47;
      if (v50 >> 3 > v49)
        v49 = v50 >> 3;
      if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v49;
      if (v31)
        v51 = (char *)sub_1B17F7824(v9 + 312, v31);
      else
        v51 = 0;
      v88 = &v51[16 * v48];
      v89 = &v51[16 * v31];
      *(_QWORD *)v88 = v8;
      *((_QWORD *)v88 + 1) = a4;
      v46 = v88 + 16;
      v91 = *(char **)(v9 + 296);
      v90 = *(char **)(v9 + 304);
      if (v90 != v91)
      {
        do
        {
          *((_OWORD *)v88 - 1) = *((_OWORD *)v90 - 1);
          v88 -= 16;
          v90 -= 16;
        }
        while (v90 != v91);
        v90 = *(char **)(v9 + 296);
      }
      *(_QWORD *)(v9 + 296) = v88;
      *(_QWORD *)(v9 + 304) = v46;
      *(_QWORD *)(v9 + 312) = v89;
      if (v90)
        operator delete(v90);
    }
    else
    {
      *v45 = v8;
      v45[1] = a4;
      v46 = v45 + 2;
    }
    *(_QWORD *)(v9 + 304) = v46;
    if ((_DWORD)a5)
    {
      v34 = sub_1B1970528(v9, v8, v23, (uint64_t)v17);
      v97 = &v96;
      v35 = 0;
      sub_1B181D66C((uint64_t **)(v9 + 320), (unint64_t *)&v96, (uint64_t)&unk_1B22458B0, (uint64_t **)&v97)[5] = (uint64_t)v34;
      a5 = 1;
      v8 = v96;
      if (v34)
      {
LABEL_47:
        if ((objc_msgSend_isHidden(v8, (const char *)v31, v32, v33) & 1) != 0
          || (objc_msgSend_opacity(v96, v55, v56, v57), v60 == 0.0))
        {
          v61 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v55, (uint64_t)v34, (uint64_t)CFSTR("visibility"), qword_1EEF66B40, qword_1EEF66BB0);
          v64 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v62, (uint64_t)CFSTR("invisible"), v63);
          objc_msgSend_setTokenValue_(v61, v65, v64, v66);
        }
        v67 = objc_msgSend_animationKeys(v96, v55, v58, v59);
        v70 = v96;
        if (v67)
        {
          v71 = (void *)objc_msgSend_animationKeys(v96, v68, (uint64_t)v96, v69);
          v75 = objc_msgSend_count(v71, v72, v73, v74);
          v70 = v96;
          if (v75)
          {
            v77 = *(_QWORD **)(v9 + 104);
            if (!v77)
              goto LABEL_63;
            v78 = v9 + 104;
            do
            {
              v79 = v77[4];
              v80 = v79 >= (unint64_t)v96;
              if (v79 >= (unint64_t)v96)
                v81 = v77;
              else
                v81 = v77 + 1;
              if (v80)
                v78 = (uint64_t)v77;
              v77 = (_QWORD *)*v81;
            }
            while (*v81);
            if (v78 == v9 + 104 || (unint64_t)v96 < *(_QWORD *)(v78 + 32))
            {
LABEL_63:
              sub_1B19708D8(v9, v34, v96, v76);
              v70 = v96;
            }
          }
        }
        sub_1B1970978(v9, v34, v70, v35);
        v8 = v96;
      }
    }
LABEL_65:
    v94 = 0u;
    v95 = 0u;
    v92 = 0u;
    v93 = 0u;
    v82 = (void *)objc_msgSend_childNodes(v8, (const char *)v31, v32, v33, 0);
    result = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v83, (uint64_t)&v92, (uint64_t)v98, 16);
    v84 = result;
    if (result)
    {
      v85 = *(_QWORD *)v93;
      do
      {
        v86 = 0;
        do
        {
          if (*(_QWORD *)v93 != v85)
            objc_enumerationMutation(v82);
          sub_1B196DF9C(v9, *(_QWORD *)(*((_QWORD *)&v92 + 1) + 8 * v86++), v23, a4, a5);
        }
        while (v84 != v86);
        result = objc_msgSend_countByEnumeratingWithState_objects_count_(v82, v87, (uint64_t)&v92, (uint64_t)v98, 16);
        v84 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_1B196E4A4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  result = *(_QWORD *)(a1 + 32);
  if (!result)
  {
    v6 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 24), a2, (uint64_t)CFSTR("Geom"), a4);
    *(_QWORD *)(a1 + 32) = v6;
    v9 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v7, v6, v8);
    objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v10, *(_QWORD *)(a1 + 56), v9, qword_1EEF66B70);
    return *(_QWORD *)(a1 + 32);
  }
  return result;
}

uint64_t sub_1B196E50C(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v5 = (void *)objc_msgSend_rootNode(*a1, a2, a3, a4, 0);
  v9 = (void *)objc_msgSend_childNodes(v5, v6, v7, v8);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v10, (uint64_t)&v18, (uint64_t)v22, 16);
  if (result)
  {
    v14 = result;
    v15 = *(_QWORD *)v19;
    do
    {
      v16 = 0;
      do
      {
        if (*(_QWORD *)v19 != v15)
          objc_enumerationMutation(v9);
        sub_1B1977BDC((uint64_t)a1, *(void **)(*((_QWORD *)&v18 + 1) + 8 * v16++), v12, v13);
      }
      while (v14 != v16);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v9, v17, (uint64_t)&v18, (uint64_t)v22, 16);
      v14 = result;
    }
    while (result);
  }
  return result;
}

uint64_t **sub_1B196E5FC(uint64_t **result, const char *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;

  v2 = *result;
  v3 = result[1];
  if (*result != v3)
  {
    do
    {
      v4 = *v2;
      v5 = *(_QWORD *)(*v2 + 16);
      if (v5)
      {
        v6 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, v5, (uint64_t)CFSTR("blendShapes"), qword_1EEF66B48, qword_1EEF66BB0);
        result = (uint64_t **)objc_msgSend_setTokenArray_(v6, v7, *(_QWORD *)(v4 + 24), v8);
      }
      ++v2;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1B196E680(uint64_t a1, const char *a2, char *a3, uint64_t a4)
{
  void **v5;
  void **v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  BOOL v25;
  _QWORD *v26;
  uint64_t **v27;
  uint64_t **v28;
  uint64_t *v29;
  char *v30;
  uint64_t **v31;
  void *v32;
  void **v33;

  v5 = *(void ***)(a1 + 296);
  v6 = *(void ***)(a1 + 304);
  if (v5 != v6)
  {
    v31 = (uint64_t **)(a1 + 272);
    v7 = (_QWORD *)(a1 + 280);
    v8 = a1 + 328;
    do
    {
      v9 = *v5;
      v10 = (uint64_t)v5[1];
      v32 = *v5;
      if (v10)
      {
        v11 = 0;
      }
      else
      {
        v22 = (_QWORD *)*v7;
        if (!*v7)
          goto LABEL_35;
        v23 = (_QWORD *)(a1 + 280);
        do
        {
          v24 = v22[4];
          v25 = v24 >= (unint64_t)v9;
          if (v24 >= (unint64_t)v9)
            v26 = v22;
          else
            v26 = v22 + 1;
          if (v25)
            v23 = v22;
          v22 = (_QWORD *)*v26;
        }
        while (*v26);
        if (v23 == v7)
          goto LABEL_35;
        if ((unint64_t)v9 < v23[4])
          goto LABEL_35;
        v33 = &v32;
        v11 = sub_1B181D66C(v31, (unint64_t *)&v32, (uint64_t)&unk_1B22458B0, (uint64_t **)&v33)[5];
        v10 = *(_QWORD *)(v11 + 56);
        if (!v10)
          goto LABEL_35;
      }
      v12 = *(char **)(v10 + 128);
      if (!v12)
        v12 = (char *)sub_1B196E4A4(a1, a2, (uint64_t)a3, a4);
      v13 = sub_1B196FCFC(a1, v12, v32, a4);
      v16 = objc_msgSend_stringByAppendingPathComponent_(v12, v14, (uint64_t)v13, v15);
      v17 = *(_QWORD **)(a1 + 328);
      if (!v17)
        goto LABEL_18;
      v18 = a1 + 328;
      do
      {
        v19 = v17[4];
        v20 = v19 >= (unint64_t)v32;
        if (v19 >= (unint64_t)v32)
          v21 = v17;
        else
          v21 = v17 + 1;
        if (v20)
          v18 = (uint64_t)v17;
        v17 = (_QWORD *)*v21;
      }
      while (*v21);
      if (v18 != v8 && (unint64_t)v32 >= *(_QWORD *)(v18 + 32))
      {
        v33 = &v32;
        a3 = (char *)sub_1B181D66C((uint64_t **)(a1 + 320), (unint64_t *)&v32, (uint64_t)&unk_1B22458B0, (uint64_t **)&v33)[5];
        if (a3)
        {
LABEL_19:
          if (*(_QWORD *)(v10 + 128))
            sub_1B197869C(a1, v32, a3, v10, v11);
        }
      }
      else
      {
LABEL_18:
        a3 = sub_1B1970528(a1, v32, v16, (uint64_t)v13);
        if (a3)
          goto LABEL_19;
      }
LABEL_35:
      v5 += 2;
    }
    while (v5 != v6);
  }
  v27 = *(uint64_t ***)(a1 + 368);
  v28 = *(uint64_t ***)(a1 + 376);
  while (v27 != v28)
  {
    v29 = *v27;
    if (sub_1B196EE70(*v27, a2, (uint64_t)a3, a4))
    {
      v30 = sub_1B19788D0(a1, v29, (uint64_t)a3, a4);
      if (v30)
        sub_1B19793F0((uint64_t)v29, v30);
    }
    ++v27;
  }
}

uint64_t sub_1B196E888(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  double v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  void *v63;
  float64x2_t v64;
  float64x2_t v65;
  float64x2_t v66;
  float64x2_t v67;
  float64x2_t v68;
  float64x2_t v69;
  float64x2_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  _BYTE v80[128];
  uint64_t v81;

  v4 = a2;
  v81 = *MEMORY[0x1E0C80C00];
  v63 = a2;
  if (objc_msgSend_skinner(a2, (const char *)a2, a3, a4))
  {
    v9 = (void *)objc_msgSend_skinner(v4, v6, v7, v8);
    v13 = objc_msgSend_skeleton(v9, v10, v11, v12);
    v14 = (_QWORD *)operator new();
    *v14 = v13;
    v14[1] = 0;
    v14[2] = 0;
    v14[3] = 0;
    v14[6] = 0;
    v14[7] = 0;
    v14[5] = 0;
    v14[4] = v14 + 5;
    v14[10] = 0;
    v14[9] = 0;
    v14[8] = v14 + 9;
    v18 = (void *)objc_msgSend_bones(v9, v15, v16, v17);
    if (objc_msgSend_count(v18, v19, v20, v21))
    {
      v25 = 0;
      do
      {
        v26 = (void *)objc_msgSend_bones(v9, v22, v23, v24);
        v29 = objc_msgSend_objectAtIndexedSubscript_(v26, v27, v25, v28);
        v33 = (void *)objc_msgSend_boneInverseBindTransforms(v9, v30, v31, v32);
        v36 = (void *)objc_msgSend_objectAtIndexedSubscript_(v33, v34, v25, v35);
        objc_msgSend_VFXMatrix4Value(v36, v37, v38, v39);
        v72 = vcvtq_f64_f32(*(float32x2_t *)v40.f32);
        v73 = vcvt_hight_f64_f32(v40);
        v74 = vcvtq_f64_f32(*(float32x2_t *)v41.f32);
        v75 = vcvt_hight_f64_f32(v41);
        v76 = vcvtq_f64_f32(*(float32x2_t *)v42.f32);
        v77 = vcvt_hight_f64_f32(v42);
        v78 = vcvtq_f64_f32(*(float32x2_t *)v43.f32);
        v79 = vcvt_hight_f64_f32(v43);
        __invert_d4();
        v76 = v68;
        v77 = v69;
        v78 = v70;
        v79 = v71;
        v72 = v64;
        v73 = v65;
        v74 = v66;
        v75 = v67;
        *(_QWORD *)&v44 = sub_1B196EECC((uint64_t)v14, v29, (__int128 *)&v72).n128_u64[0];
        v48 = (void *)objc_msgSend_bones(v9, v45, v46, v47, v44);
        ++v25;
      }
      while (v25 < objc_msgSend_count(v48, v49, v50, v51));
    }
    sub_1B196EFF0((void **)(a1 + 344), (uint64_t)v14);
    *(_QWORD *)&v72.f64[0] = &v63;
    sub_1B181D66C((uint64_t **)(a1 + 272), (unint64_t *)&v63, (uint64_t)&unk_1B22458B0, (uint64_t **)&v72)[5] = (uint64_t)v14;
    v4 = v63;
  }
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v52 = (void *)objc_msgSend_childNodes(v4, v6, v7, v8, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v53, (uint64_t)&v59, (uint64_t)v80, 16);
  v55 = result;
  if (result)
  {
    v56 = *(_QWORD *)v60;
    do
    {
      v57 = 0;
      do
      {
        if (*(_QWORD *)v60 != v56)
          objc_enumerationMutation(v52);
        sub_1B196E888(a1, *(_QWORD *)(*((_QWORD *)&v59 + 1) + 8 * v57++));
      }
      while (v55 != v57);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v52, v58, (uint64_t)&v59, (uint64_t)v80, 16);
      v55 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B196EADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v7;
  unint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD ***v14;
  _QWORD ***v15;
  char *v16;
  _QWORD **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t *v40;
  uint64_t **v41;
  char *v42;
  char *v43;
  char *v44;

  v4 = *(uint64_t ***)a1;
  v5 = *(uint64_t ***)(a1 + 8);
  if (*(uint64_t ***)a1 != v5)
  {
    v7 = (uint64_t **)(a1 + 48);
    v41 = *(uint64_t ***)(a1 + 8);
    do
    {
      v8 = (unint64_t *)*v4;
      v9 = (uint64_t *)(*v4)[1];
      if ((uint64_t *)(*v4)[2] != v9)
      {
        if (!*v8)
        {
          *v8 = (unint64_t)sub_1B196F190(a1, (const char *)*v4 + 8, a3, a4);
          v9 = (uint64_t *)v8[1];
        }
        v10 = sub_1B196F234(a1, *v9);
        if (!v10)
          v10 = (_QWORD *)sub_1B196F294((_QWORD *)a1, *v8);
        v11 = (uint64_t *)v8[1];
        v12 = (uint64_t *)v8[2];
        while (v11 != v12)
        {
          v42 = 0;
          v13 = *v11++;
          v42 = (char *)v13;
          sub_1B1949968(v7, (unint64_t *)&v42, (uint64_t *)&v42);
        }
        sub_1B196F3CC(v8, (uint64_t)v10);
        v42 = 0;
        v43 = 0;
        v44 = 0;
        v14 = *(_QWORD ****)(a1 + 24);
        v15 = *(_QWORD ****)(a1 + 32);
        if (v14 != v15)
        {
          v16 = 0;
          do
          {
            v17 = *v14;
            if (*v14 != v10)
            {
              v18 = v10[1];
              v19 = v18 - *v10;
              if (v18 != *v10)
              {
                v20 = 0;
                v21 = v19 >> 3;
                if (v21 <= 1)
                  v21 = 1;
                while (*(_QWORD *)(*v10 + 8 * v20) != **v17)
                {
                  if (v21 == ++v20)
                    goto LABEL_43;
                }
                if (v20 != -1)
                {
                  v22 = *(uint64_t ***)a1;
                  v23 = *(uint64_t ***)(a1 + 8);
                  if (*(uint64_t ***)a1 != v23)
                  {
                    do
                    {
                      if ((_QWORD **)(*v22)[7] == v17)
                        sub_1B196F3CC(*v22, (uint64_t)v10);
                      ++v22;
                    }
                    while (v22 != v23);
                    v16 = v43;
                  }
                  if (v16 >= v44)
                  {
                    v24 = (v16 - v42) >> 3;
                    if ((unint64_t)(v24 + 1) >> 61)
                      abort();
                    v25 = (v44 - v42) >> 2;
                    if (v25 <= v24 + 1)
                      v25 = v24 + 1;
                    if ((unint64_t)(v44 - v42) >= 0x7FFFFFFFFFFFFFF8)
                      v26 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v26 = v25;
                    if (v26)
                      v27 = (char *)sub_1B17F812C((uint64_t)&v44, v26);
                    else
                      v27 = 0;
                    v28 = &v27[8 * v24];
                    *(_QWORD *)v28 = v17;
                    v16 = v28 + 8;
                    v30 = (uint64_t)v42;
                    v29 = v43;
                    if (v43 != v42)
                    {
                      do
                      {
                        v31 = *((_QWORD *)v29 - 1);
                        v29 -= 8;
                        *((_QWORD *)v28 - 1) = v31;
                        v28 -= 8;
                      }
                      while (v29 != (char *)v30);
                      v29 = v42;
                    }
                    v42 = v28;
                    v43 = v16;
                    v44 = &v27[8 * v26];
                    if (v29)
                      operator delete(v29);
                  }
                  else
                  {
                    *(_QWORD *)v16 = v17;
                    v16 += 8;
                  }
                  v43 = v16;
                }
              }
            }
LABEL_43:
            ++v14;
          }
          while (v14 != v15);
          v32 = v42;
          if (v42 != v16)
          {
            do
            {
              v33 = *(_QWORD *)v32;
              v35 = *(_QWORD *)(a1 + 24);
              v34 = *(_QWORD *)(a1 + 32);
              if (v35 != v34)
              {
                v36 = v34 - (v35 + 8);
                if (v34 != v35 + 8)
                  memmove(*(void **)(a1 + 24), (const void *)(v35 + 8), v34 - (v35 + 8));
                *(_QWORD *)(a1 + 32) = v35 + v36;
              }
              if (v33)
              {
                sub_1B1805B90(v33 + 72, *(_QWORD **)(v33 + 80));
                sub_1B1805B90(v33 + 48, *(_QWORD **)(v33 + 56));
                sub_1B1805B90(v33 + 24, *(_QWORD **)(v33 + 32));
                v37 = *(void **)v33;
                if (*(_QWORD *)v33)
                {
                  *(_QWORD *)(v33 + 8) = v37;
                  operator delete(v37);
                }
                MEMORY[0x1B5E22E18](v33, 0x10A0C400C584343);
              }
              v32 += 8;
            }
            while (v32 != v16);
            v16 = v42;
          }
          v5 = v41;
          if (v16)
          {
            v43 = v16;
            operator delete(v16);
          }
        }
      }
      ++v4;
    }
    while (v4 != v5);
    v39 = *(uint64_t ***)a1;
    v38 = *(uint64_t ***)(a1 + 8);
    while (v39 != v38)
    {
      v40 = *v39++;
      sub_1B196F498(v40);
    }
  }
}

void sub_1B196EDF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1B196EE1C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;

  return !objc_msgSend_model(a1, a2, a3, a4)
      && !objc_msgSend_skinner(a1, v5, v6, v7)
      && !objc_msgSend_camera(a1, v8, v9, v10)
      && objc_msgSend_light(a1, v11, v12, v13) == 0;
}

uint64_t sub_1B196EE70(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(void **)*a1;
  if (v4)
  {
    while (1)
    {
      v6 = (void *)objc_msgSend_animationKeys(v4, a2, a3, a4);
      if (objc_msgSend_count(v6, v7, v8, v9))
        break;
      v4 = (void *)objc_msgSend_parentNode(v4, v10, v11, v12);
      if (!v4)
        return sub_1B196F7D4(a1, a2, a3, a4);
    }
  }
  return (uint64_t)v4;
}

__n128 sub_1B196EECC(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  unint64_t v21;
  uint64_t **v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __n128 result;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  unint64_t *v30;

  v29 = a2;
  v8 = *(_QWORD *)(a1 + 24);
  v6 = a1 + 24;
  v7 = v8;
  v9 = *(unint64_t **)(v6 - 8);
  if ((unint64_t)v9 >= v8)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = ((uint64_t)v9 - v11) >> 3;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v13 = v7 - v11;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
      v16 = (char *)sub_1B17F812C(v6, v15);
    else
      v16 = 0;
    v17 = (unint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    *v17 = a2;
    v10 = v17 + 1;
    v20 = *(char **)(a1 + 8);
    v19 = *(char **)(a1 + 16);
    if (v19 != v20)
    {
      do
      {
        v21 = *((_QWORD *)v19 - 1);
        v19 -= 8;
        *--v17 = v21;
      }
      while (v19 != v20);
      v19 = *(char **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v18;
    if (v19)
      operator delete(v19);
  }
  else
  {
    *v9 = a2;
    v10 = v9 + 1;
  }
  *(_QWORD *)(a1 + 16) = v10;
  v30 = &v29;
  v22 = sub_1B196F0C0((uint64_t **)(a1 + 32), &v29, (uint64_t)&unk_1B22458B0, &v30);
  v23 = *a3;
  v24 = a3[1];
  v25 = a3[3];
  *((_OWORD *)v22 + 5) = a3[2];
  *((_OWORD *)v22 + 6) = v25;
  *((_OWORD *)v22 + 3) = v23;
  *((_OWORD *)v22 + 4) = v24;
  result = (__n128)a3[4];
  v27 = a3[5];
  v28 = a3[7];
  *((_OWORD *)v22 + 9) = a3[6];
  *((_OWORD *)v22 + 10) = v28;
  *((__n128 *)v22 + 7) = result;
  *((_OWORD *)v22 + 8) = v27;
  return result;
}

void sub_1B196EFF0(void **a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1B17F812C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t **sub_1B196F0C0(uint64_t **a1, unint64_t *a2, uint64_t a3, _QWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0xB0uLL);
    v11[4] = **a4;
    *((_OWORD *)v11 + 9) = 0u;
    *((_OWORD *)v11 + 10) = 0u;
    *((_OWORD *)v11 + 7) = 0u;
    *((_OWORD *)v11 + 8) = 0u;
    *((_OWORD *)v11 + 5) = 0u;
    *((_OWORD *)v11 + 6) = 0u;
    *((_OWORD *)v11 + 3) = 0u;
    *((_OWORD *)v11 + 4) = 0u;
    sub_1B181D728(a1, (uint64_t)v9, v7, v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1B196F190(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v8;
  void *v9;
  void *v10;

  v4 = *(_QWORD *)a2;
  v5 = *((_QWORD *)a2 + 1) - *(_QWORD *)a2;
  if (!(v5 >> 3))
    return 0;
  if (v5 >> 3 == 1)
    return *(void **)v4;
  v6 = *(void **)v4;
  if ((unint64_t)v5 >= 9)
  {
    v8 = 1;
    do
    {
      if (v6)
      {
        v9 = *(void **)(v4 + 8 * v8);
        while (!v9)
        {
LABEL_13:
          v6 = (void *)objc_msgSend_parentNode(v6, a2, a3, a4);
          if (!v6)
            goto LABEL_14;
        }
        v10 = v9;
        while (v6 != v10)
        {
          v10 = (void *)objc_msgSend_parentNode(v10, a2, a3, a4);
          if (!v10)
            goto LABEL_13;
        }
      }
LABEL_14:
      ++v8;
      v4 = *(_QWORD *)a2;
    }
    while (v8 < (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 3);
  }
  return v6;
}

uint64_t *sub_1B196F234(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2 = *(uint64_t ***)(a1 + 24);
  v3 = *(uint64_t ***)(a1 + 32);
  while (v2 != v3)
  {
    result = *v2;
    v5 = **v2;
    v6 = (*v2)[1];
    v7 = v6 - v5;
    if (v6 != v5)
    {
      v8 = 0;
      v9 = v7 >> 3;
      if (v9 <= 1)
        v9 = 1;
      while (*(_QWORD *)(v5 + 8 * v8) != a2)
      {
        if (v9 == ++v8)
          goto LABEL_10;
      }
      if (v8 != -1)
        return result;
    }
LABEL_10:
    ++v2;
  }
  return 0;
}

uint64_t sub_1B196F294(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v4 = operator new();
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = v4 + 32;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = v4 + 56;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = v4 + 80;
  *(_QWORD *)(v4 + 96) = 0;
  *(_QWORD *)(v4 + 104) = 0;
  *(_QWORD *)(v4 + 88) = 0;
  *(_QWORD *)(v4 + 120) = 0;
  *(_QWORD *)(v4 + 128) = 0;
  sub_1B196F56C((unint64_t **)v4, a2, &stru_1E63FD500, v5);
  v6 = a1[5];
  v7 = (uint64_t *)a1[4];
  if ((unint64_t)v7 >= v6)
  {
    v9 = a1[3];
    v10 = ((uint64_t)v7 - v9) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v11 = v6 - v9;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
      v14 = (char *)sub_1B17F812C((uint64_t)(a1 + 5), v13);
    else
      v14 = 0;
    v15 = (uint64_t *)&v14[8 * v10];
    v16 = &v14[8 * v13];
    *v15 = v4;
    v8 = v15 + 1;
    v18 = (char *)a1[3];
    v17 = (char *)a1[4];
    if (v17 != v18)
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *--v15 = v19;
      }
      while (v17 != v18);
      v17 = (char *)a1[3];
    }
    a1[3] = v15;
    a1[4] = v8;
    a1[5] = v16;
    if (v17)
      operator delete(v17);
  }
  else
  {
    *v7 = v4;
    v8 = v7 + 1;
  }
  a1[4] = v8;
  return v4;
}

__n128 sub_1B196F3CC(_QWORD *a1, uint64_t a2)
{
  unint64_t *v2;
  unint64_t *v3;
  uint64_t **v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t **v8;
  uint64_t **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  unint64_t v16;
  unint64_t *v17;

  a1[7] = a2;
  v2 = (unint64_t *)a1[1];
  v3 = (unint64_t *)a1[2];
  if (v2 != v3)
  {
    v5 = (uint64_t **)(a1 + 4);
    do
    {
      v6 = *v2++;
      v16 = v6;
      v17 = &v16;
      v7 = sub_1B196F0C0(v5, &v16, (uint64_t)&unk_1B22458B0, &v17);
      v8 = (uint64_t **)(a1[7] + 72);
      v17 = &v16;
      v9 = sub_1B196F0C0(v8, &v16, (uint64_t)&unk_1B22458B0, &v17);
      v10 = *((_OWORD *)v7 + 3);
      v11 = *((_OWORD *)v7 + 4);
      v12 = *((_OWORD *)v7 + 6);
      *((_OWORD *)v9 + 5) = *((_OWORD *)v7 + 5);
      *((_OWORD *)v9 + 6) = v12;
      *((_OWORD *)v9 + 3) = v10;
      *((_OWORD *)v9 + 4) = v11;
      result = *((__n128 *)v7 + 7);
      v14 = *((_OWORD *)v7 + 8);
      v15 = *((_OWORD *)v7 + 10);
      *((_OWORD *)v9 + 9) = *((_OWORD *)v7 + 9);
      *((_OWORD *)v9 + 10) = v15;
      *((__n128 *)v9 + 7) = result;
      *((_OWORD *)v9 + 8) = v14;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t *sub_1B196F498(uint64_t *result)
{
  uint64_t v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t **v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;

  v10 = 0;
  v1 = result[1];
  if (result[2] != v1)
  {
    v2 = result;
    v3 = 0;
    v4 = (uint64_t **)(result + 8);
    do
    {
      v5 = *(_QWORD *)v2[7];
      v6 = *(_QWORD *)(v2[7] + 8) - v5;
      if (v6)
      {
        v7 = 0;
        v8 = *(_QWORD *)(v1 + 8 * v3);
        v9 = v6 >> 3;
        if ((unint64_t)(v6 >> 3) <= 1)
          v9 = 1;
        while (*(_QWORD *)(v5 + 8 * v7) != v8)
        {
          if (v9 == ++v7)
            goto LABEL_8;
        }
      }
      else
      {
LABEL_8:
        v7 = -1;
      }
      v11 = &v10;
      result = sub_1B181D66C(v4, &v10, (uint64_t)&unk_1B22458B0, (uint64_t **)&v11);
      result[5] = v7;
      v3 = v10 + 1;
      v10 = v3;
      v1 = v2[1];
    }
    while (v3 < (v2[2] - v1) >> 3);
  }
  return result;
}

uint64_t sub_1B196F56C(unint64_t **a1, unint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  unint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float64x2_t *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  void **v54;
  _BYTE v55[128];
  uint64_t v56;

  v5 = a2;
  v56 = *MEMORY[0x1E0C80C00];
  v53 = (void *)a2;
  v9 = (unint64_t)a1[2];
  v7 = (uint64_t)(a1 + 2);
  v8 = v9;
  v10 = *(unint64_t **)(v7 - 8);
  if ((unint64_t)v10 >= v9)
  {
    v12 = v10 - *a1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v13 = v8 - (_QWORD)*a1;
    v14 = v13 >> 2;
    if (v13 >> 2 <= (unint64_t)(v12 + 1))
      v14 = v12 + 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      a2 = 0x1FFFFFFFFFFFFFFFLL;
    else
      a2 = v14;
    if (a2)
      v15 = (char *)sub_1B17F812C(v7, a2);
    else
      v15 = 0;
    v16 = (unint64_t *)&v15[8 * v12];
    v17 = &v15[8 * a2];
    *v16 = v5;
    v11 = (char *)(v16 + 1);
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != (char *)*a1)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v16 = v20;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = (unint64_t *)v11;
    a1[2] = (unint64_t *)v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v10 = a2;
    v11 = (char *)(v10 + 1);
  }
  a1[1] = (unint64_t *)v11;
  v21 = (void *)objc_msgSend_name(v53, (const char *)a2, (uint64_t)a3, a4);
  v23 = sub_1B196D580(v21, v22);
  v26 = objc_msgSend_stringByAppendingPathComponent_(a3, v24, v23, v25);
  v54 = &v53;
  sub_1B181D66C((uint64_t **)a1 + 3, (unint64_t *)&v53, (uint64_t)&unk_1B22458B0, (uint64_t **)&v54)[5] = v26;
  objc_msgSend_transform(v53, v27, v28, v29);
  v45 = v30;
  v46 = v31;
  v47 = v32;
  v48 = v33;
  v54 = &v53;
  v34 = (float64x2_t *)sub_1B196F0C0((uint64_t **)a1 + 6, (unint64_t *)&v53, (uint64_t)&unk_1B22458B0, &v54);
  v34[3] = vcvtq_f64_f32(*(float32x2_t *)v45.f32);
  v34[4] = vcvt_hight_f64_f32(v45);
  v34[5] = vcvtq_f64_f32(*(float32x2_t *)v47.f32);
  v34[6] = vcvt_hight_f64_f32(v47);
  v34[7] = vcvtq_f64_f32(*(float32x2_t *)v46.f32);
  v34[8] = vcvt_hight_f64_f32(v46);
  v34[9] = vcvtq_f64_f32(*(float32x2_t *)v48.f32);
  v34[10] = vcvt_hight_f64_f32(v48);
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v38 = (void *)objc_msgSend_childNodes(v53, v35, v36, v37);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v39, (uint64_t)&v49, (uint64_t)v55, 16);
  v41 = result;
  if (result)
  {
    v42 = *(_QWORD *)v50;
    do
    {
      v43 = 0;
      do
      {
        if (*(_QWORD *)v50 != v42)
          objc_enumerationMutation(v38);
        sub_1B196F56C(a1, *(_QWORD *)(*((_QWORD *)&v49 + 1) + 8 * v43++), v26);
      }
      while (v41 != v43);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v38, v44, (uint64_t)&v49, (uint64_t)v55, 16);
      v41 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B196F7D4(uint64_t *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  if (a1[1] == *a1)
    return 0;
  v6 = 0;
  while (1)
  {
    v7 = (void *)objc_msgSend_animationKeys(*(void **)(v4 + 8 * v6), a2, a3, a4);
    if (objc_msgSend_count(v7, v8, v9, v10))
      break;
    ++v6;
    v4 = *a1;
    if (v6 >= (a1[1] - *a1) >> 3)
      return 0;
  }
  return *(_QWORD *)(*a1 + 8 * v6);
}

uint64_t sub_1B196F834(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  void *v30;
  unint64_t *v31;
  _BYTE v32[128];
  uint64_t v33;

  v4 = a2;
  v33 = *MEMORY[0x1E0C80C00];
  v30 = a2;
  if (objc_msgSend_model(a2, (const char *)a2, a3, a4) && objc_msgSend_morpher(v4, v6, v7, v8))
  {
    v9 = (void *)objc_msgSend_morpher(v4, v6, v7, v8);
    v13 = (void *)objc_msgSend_weights(v9, v10, v11, v12);
    v17 = objc_msgSend_count(v13, v14, v15, v16);
    v18 = sub_1B196F990((void **)(a1 + 440), v17);
    v31 = (unint64_t *)&v30;
    sub_1B181D66C((uint64_t **)(a1 + 416), (unint64_t *)&v30, (uint64_t)&unk_1B22458B0, (uint64_t **)&v31)[5] = v18;
    v4 = v30;
  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v19 = (void *)objc_msgSend_childNodes(v4, v6, v7, v8, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v20, (uint64_t)&v26, (uint64_t)v32, 16);
  if (result)
  {
    v22 = result;
    v23 = *(_QWORD *)v27;
    do
    {
      v24 = 0;
      do
      {
        if (*(_QWORD *)v27 != v23)
          objc_enumerationMutation(v19);
        sub_1B196F834(a1, *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * v24++));
      }
      while (v22 != v24);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v19, v25, (uint64_t)&v26, (uint64_t)v32, 16);
      v22 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B196F990(void **a1, int a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v4 = operator new();
  *(_DWORD *)v4 = a2;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  v5 = (unint64_t)a1[2];
  v6 = (uint64_t *)a1[1];
  if ((unint64_t)v6 >= v5)
  {
    v8 = ((char *)v6 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v5 - (_QWORD)*a1;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)sub_1B17F812C((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = (uint64_t *)&v12[8 * v8];
    v14 = &v12[8 * v11];
    *v13 = v4;
    v7 = v13 + 1;
    v16 = (char *)*a1;
    v15 = (char *)a1[1];
    if (v15 != *a1)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *--v13 = v17;
      }
      while (v15 != v16);
      v15 = (char *)*a1;
    }
    *a1 = v13;
    a1[1] = v7;
    a1[2] = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[1] = v7;
  return v4;
}

unint64_t sub_1B196FA90(double *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  double v37;
  double v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  double v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  double v73;
  double v74;
  double v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  double v82;
  double v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  double v90;
  double v91;
  double v92;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return sub_1B196FC8C((uint64_t)a1, a2, v4, v5);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v10 = (void *)objc_msgSend_keyTimes(a2, v7, v8, v9);
    result = objc_msgSend_count(v10, v11, v12, v13);
    if (result >= 2)
    {
      v17 = objc_msgSend_count(v10, v14, v15, v16);
      v20 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v18, v17 - 1, v19);
      objc_msgSend_doubleValue(v20, v21, v22, v23);
      v25 = v24;
      v28 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v26, 0, v27);
      result = objc_msgSend_doubleValue(v28, v29, v30, v31);
      v36 = v25 - v35;
      if (v36 >= 0.0001)
      {
        objc_msgSend_duration(a2, v32, v33, v34);
        v38 = v37 / v36;
        v41 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v39, 0, v40);
        objc_msgSend_doubleValue(v41, v42, v43, v44);
        v46 = v45;
        objc_msgSend_beginTime(a2, v47, v48, v49);
        v54 = v53 + v46 * v38;
        v55 = a1[62];
        if (v55 >= 0.0)
        {
          v56 = a1[61];
          if (v56 > v54)
            v56 = v54;
          a1[61] = v56;
          if (v55 >= v54)
            v54 = v55;
        }
        else
        {
          a1[61] = v54;
        }
        a1[62] = v54;
        v57 = objc_msgSend_count(v10, v50, v51, v52);
        v60 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v58, v57 - 1, v59);
        objc_msgSend_doubleValue(v60, v61, v62, v63);
        v65 = v64;
        objc_msgSend_beginTime(a2, v66, v67, v68);
        v73 = v72 + v65 * v38;
        v74 = a1[62];
        if (v74 >= 0.0)
        {
          v75 = a1[61];
          if (v75 > v73)
            v75 = v73;
          a1[61] = v75;
          if (v74 >= v73)
            v73 = v74;
        }
        else
        {
          a1[61] = v73;
        }
        a1[62] = v73;
        result = objc_msgSend_count(v10, v69, v70, v71);
        if (result >= 2)
        {
          v78 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v76, 1, v77);
          objc_msgSend_doubleValue(v78, v79, v80, v81);
          v83 = v82;
          v86 = (void *)objc_msgSend_objectAtIndexedSubscript_(v10, v84, 0, v85);
          result = objc_msgSend_doubleValue(v86, v87, v88, v89);
          v91 = v38 * (v83 - v90);
          if (v91 > 0.001)
          {
            v92 = a1[63];
            if (v92 == 0.0 || v92 > v91)
              a1[63] = v91;
          }
        }
      }
    }
  }
  return result;
}

unint64_t sub_1B196FC8C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = (void *)objc_msgSend_animations(a2, (const char *)a2, a3, a4);
  result = objc_msgSend_count(v6, v7, v8, v9);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v15 = (void *)objc_msgSend_animations(a2, v11, v12, v13);
      v18 = objc_msgSend_objectAtIndex_(v15, v16, i, v17);
      sub_1B196FA90(a1, v18);
      v22 = (void *)objc_msgSend_animations(a2, v19, v20, v21);
      result = objc_msgSend_count(v22, v23, v24, v25);
    }
  }
  return result;
}

void *sub_1B196FCFC(uint64_t a1, char *a2, void *a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  std::string __p;

  v10 = (void *)objc_msgSend_name(a3, a2, (uint64_t)a3, a4);
  if (!v10
    && (!objc_msgSend_model(a3, v7, v8, v9)
     || (v12 = (void *)objc_msgSend_model(a3, v7, v11, v9), (v10 = (void *)objc_msgSend_name(v12, v13, v14, v15)) == 0))
    || !objc_msgSend_length(v10, v7, v8, v9))
  {
    v16 = (void *)MEMORY[0x1E0CB37E8];
    v17 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v17 + 1;
    v18 = (void *)objc_msgSend_numberWithUnsignedLong_(v16, v7, v17, v9);
    v22 = objc_msgSend_stringValue(v18, v19, v20, v21);
    v10 = (void *)objc_msgSend_stringByAppendingString_(CFSTR("Node_"), v23, v22, v24);
  }
  v25 = (void *)sub_1B196D580(v10, v7);
  v28 = (void *)objc_msgSend_stringByAppendingPathComponent_(a2, v26, (uint64_t)v25, v27);
  v32 = (char *)objc_msgSend_UTF8String(v28, v29, v30, v31);
  sub_1B1970F28(&__p, v32);
  if ((void **)(a1 + 72) != sub_1B1970FD4(a1 + 64, (void **)&__p.__r_.__value_.__l.__data_))
  {
    v35 = (void *)objc_msgSend_stringByAppendingString_(v25, v33, (uint64_t)CFSTR("_"), v34);
    v36 = (void *)MEMORY[0x1E0CB37E8];
    v37 = *(_QWORD *)(a1 + 240);
    *(_QWORD *)(a1 + 240) = v37 + 1;
    v40 = (void *)objc_msgSend_numberWithUnsignedLong_(v36, v38, v37, v39);
    v44 = objc_msgSend_stringValue(v40, v41, v42, v43);
    v25 = (void *)objc_msgSend_stringByAppendingString_(v35, v45, v44, v46);
    v49 = (void *)objc_msgSend_stringByAppendingPathComponent_(a2, v47, (uint64_t)v25, v48);
    v53 = (char *)objc_msgSend_UTF8String(v49, v50, v51, v52);
    sub_1B19711A0(&__p, v53);
  }
  sub_1B19711D4((uint64_t **)(a1 + 64), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v25;
}

void sub_1B196FE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B196FE88(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v7;
  uint64_t v8;
  void **v9;
  void **v10;
  _QWORD *v11;
  uint64_t *v12;
  const char *v13;
  uint64_t v14;
  uint64_t **v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  _QWORD *v48;
  _QWORD *v49;
  unint64_t v50;
  BOOL v51;
  _QWORD *v52;
  float32x4_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float32x4_t v56;
  float64x2_t v57;
  float64x2_t v58;
  float32x4_t v59;
  float64x2_t v60;
  float64x2_t v61;
  float32x4_t v62;
  float64x2_t v63;
  float64x2_t v64;
  float64x2_t *v65;
  float64x2_t *v66;
  float64x2_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t **v72;
  float64x2_t *v73;
  float64x2_t *v74;
  float64x2_t v75;
  float64x2_t v76;
  float64x2_t v77;
  float64x2_t v78;
  float64x2_t v79;
  float64x2_t v80;
  char *v81;
  char *v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  float64x2_t v87;
  float64x2_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  float64x2_t v93;
  float64x2_t v94;
  float64x2_t v95;
  float64x2_t v96;
  float64x2_t v97;
  float64x2_t v98;
  char *v99;
  float64x2_t v100;
  float64x2_t v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  const char *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  void *v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  void *v123;
  const char *v124;
  const char *v125;
  void *v126;
  const char *v127;
  uint64_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;
  void *v138;
  void *v139;
  char *v140;
  float64x2_t *v141;
  float64x2_t *v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t *v146[2];

  v4 = *(_QWORD *)(a1 + 104);
  if (!v4)
  {
    *(_QWORD *)(a1 + 128) = a3;
    v138 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], a2, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3, a4);
    v143 = 0;
    v144 = 0;
    v145 = 0;
    sub_1B1971450((void **)&v143, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    v129 = (uint64_t)a2;
    v140 = 0;
    v141 = 0;
    v142 = 0;
    sub_1B1971450((void **)&v140, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
    v10 = *(void ***)a1;
    v9 = *(void ***)(a1 + 8);
    if (*(void ***)a1 != v9)
    {
      v11 = (_QWORD *)(a1 + 80);
      while (1)
      {
        v139 = 0;
        v139 = *v10;
        if (v139)
          break;
LABEL_68:
        if (++v10 == v9)
          goto LABEL_69;
      }
      v146[0] = (uint64_t *)&v139;
      v12 = sub_1B181D66C((uint64_t **)(a1 + 24), (unint64_t *)&v139, (uint64_t)&unk_1B22458B0, v146);
      objc_msgSend_addObject_(v138, v13, v12[5], v14);
      v146[0] = (uint64_t *)&v139;
      v15 = sub_1B196F0C0((uint64_t **)(a1 + 48), (unint64_t *)&v139, (uint64_t)&unk_1B22458B0, v146);
      v19 = (__int128 *)(v15 + 6);
      v20 = v144;
      if (v144 >= v145)
      {
        v28 = v143;
        v29 = (v144 - v143) >> 7;
        v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 57)
          goto LABEL_79;
        v31 = v145 - v143;
        if ((v145 - v143) >> 6 > v30)
          v30 = v31 >> 6;
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFF80)
          v16 = 0x1FFFFFFFFFFFFFFLL;
        else
          v16 = v30;
        if (v16)
        {
          v32 = (char *)sub_1B1971504((uint64_t)&v145, v16);
          v28 = v143;
          v20 = v144;
        }
        else
        {
          v32 = 0;
        }
        v33 = &v32[128 * v29];
        v34 = *v19;
        v35 = v19[1];
        v36 = v19[3];
        *((_OWORD *)v33 + 2) = v19[2];
        *((_OWORD *)v33 + 3) = v36;
        *(_OWORD *)v33 = v34;
        *((_OWORD *)v33 + 1) = v35;
        v37 = v19[4];
        v38 = v19[5];
        v39 = v19[7];
        *((_OWORD *)v33 + 6) = v19[6];
        *((_OWORD *)v33 + 7) = v39;
        *((_OWORD *)v33 + 4) = v37;
        *((_OWORD *)v33 + 5) = v38;
        if (v20 == v28)
        {
          v47 = &v32[128 * v29];
        }
        else
        {
          v40 = &v32[128 * v29];
          do
          {
            v41 = *((_OWORD *)v20 - 8);
            v42 = *((_OWORD *)v20 - 7);
            v43 = *((_OWORD *)v20 - 5);
            *((_OWORD *)v40 - 6) = *((_OWORD *)v20 - 6);
            *((_OWORD *)v40 - 5) = v43;
            *((_OWORD *)v40 - 8) = v41;
            *((_OWORD *)v40 - 7) = v42;
            v44 = *((_OWORD *)v20 - 4);
            v45 = *((_OWORD *)v20 - 3);
            v46 = *((_OWORD *)v20 - 1);
            v47 = v40 - 128;
            *((_OWORD *)v40 - 2) = *((_OWORD *)v20 - 2);
            *((_OWORD *)v40 - 1) = v46;
            *((_OWORD *)v40 - 4) = v44;
            *((_OWORD *)v40 - 3) = v45;
            v20 -= 128;
            v40 -= 128;
          }
          while (v20 != v28);
        }
        v27 = v33 + 128;
        v143 = v47;
        v144 = v33 + 128;
        v145 = &v32[128 * v16];
        if (v28)
          operator delete(v28);
      }
      else
      {
        v21 = *v19;
        v22 = *((_OWORD *)v15 + 4);
        v23 = *((_OWORD *)v15 + 6);
        *((_OWORD *)v144 + 2) = *((_OWORD *)v15 + 5);
        *((_OWORD *)v20 + 3) = v23;
        *(_OWORD *)v20 = v21;
        *((_OWORD *)v20 + 1) = v22;
        v24 = *((_OWORD *)v15 + 7);
        v25 = *((_OWORD *)v15 + 8);
        v26 = *((_OWORD *)v15 + 10);
        *((_OWORD *)v20 + 6) = *((_OWORD *)v15 + 9);
        *((_OWORD *)v20 + 7) = v26;
        *((_OWORD *)v20 + 4) = v24;
        *((_OWORD *)v20 + 5) = v25;
        v27 = v20 + 128;
      }
      v144 = v27;
      v48 = (_QWORD *)*v11;
      if (!*v11)
        goto LABEL_34;
      v49 = (_QWORD *)(a1 + 80);
      do
      {
        v50 = v48[4];
        v51 = v50 >= (unint64_t)v139;
        if (v50 >= (unint64_t)v139)
          v52 = v48;
        else
          v52 = v48 + 1;
        if (v51)
          v49 = v48;
        v48 = (_QWORD *)*v52;
      }
      while (*v52);
      if (v49 != v11 && (unint64_t)v139 >= v49[4])
      {
        v146[0] = (uint64_t *)&v139;
        v72 = sub_1B196F0C0((uint64_t **)(a1 + 72), (unint64_t *)&v139, (uint64_t)&unk_1B22458B0, v146);
        v73 = (float64x2_t *)(v72 + 6);
        v74 = v141;
        if (v141 < v142)
        {
          v75 = *v73;
          v76 = *((float64x2_t *)v72 + 4);
          v77 = *((float64x2_t *)v72 + 6);
          v141[2] = *((float64x2_t *)v72 + 5);
          v74[3] = v77;
          *v74 = v75;
          v74[1] = v76;
          v78 = *((float64x2_t *)v72 + 7);
          v79 = *((float64x2_t *)v72 + 8);
          v80 = *((float64x2_t *)v72 + 10);
          v74[6] = *((float64x2_t *)v72 + 9);
          v74[7] = v80;
          v74[4] = v78;
          v74[5] = v79;
          v66 = v74 + 8;
          goto LABEL_67;
        }
        v67 = (float64x2_t *)v140;
        v90 = ((char *)v141 - v140) >> 7;
        v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 57)
LABEL_79:
          abort();
        v92 = (char *)v142 - v140;
        if (((char *)v142 - v140) >> 6 > v91)
          v91 = v92 >> 6;
        if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFF80)
          v7 = 0x1FFFFFFFFFFFFFFLL;
        else
          v7 = v91;
        if (v7)
        {
          v71 = (char *)sub_1B1971504((uint64_t)&v142, v7);
          v67 = (float64x2_t *)v140;
          v74 = v141;
        }
        else
        {
          v71 = 0;
        }
        v81 = &v71[128 * v90];
        v93 = *v73;
        v94 = v73[1];
        v95 = v73[3];
        *((float64x2_t *)v81 + 2) = v73[2];
        *((float64x2_t *)v81 + 3) = v95;
        *(float64x2_t *)v81 = v93;
        *((float64x2_t *)v81 + 1) = v94;
        v96 = v73[4];
        v97 = v73[5];
        v98 = v73[7];
        *((float64x2_t *)v81 + 6) = v73[6];
        *((float64x2_t *)v81 + 7) = v98;
        *((float64x2_t *)v81 + 4) = v96;
        *((float64x2_t *)v81 + 5) = v97;
        if (v74 != v67)
        {
          v99 = &v71[128 * v90];
          do
          {
            v100 = v74[-8];
            v101 = v74[-7];
            v102 = v74[-5];
            *((float64x2_t *)v99 - 6) = v74[-6];
            *((float64x2_t *)v99 - 5) = v102;
            *((float64x2_t *)v99 - 8) = v100;
            *((float64x2_t *)v99 - 7) = v101;
            v103 = v74[-4];
            v104 = v74[-3];
            v105 = v74[-1];
            v89 = v99 - 128;
            *((float64x2_t *)v99 - 2) = v74[-2];
            *((float64x2_t *)v99 - 1) = v105;
            *((float64x2_t *)v99 - 4) = v103;
            *((float64x2_t *)v99 - 3) = v104;
            v74 -= 8;
            v99 -= 128;
          }
          while (v74 != v67);
LABEL_65:
          v66 = (float64x2_t *)(v81 + 128);
          v140 = v89;
          v141 = (float64x2_t *)(v81 + 128);
          v142 = (float64x2_t *)&v71[128 * v7];
          if (v67)
            operator delete(v67);
          goto LABEL_67;
        }
      }
      else
      {
LABEL_34:
        objc_msgSend_worldTransform(v139, (const char *)v16, v17, v18, v129);
        v54 = vcvt_hight_f64_f32(v53);
        v55 = vcvtq_f64_f32(*(float32x2_t *)v53.f32);
        v57 = vcvt_hight_f64_f32(v56);
        v58 = vcvtq_f64_f32(*(float32x2_t *)v56.f32);
        v60 = vcvt_hight_f64_f32(v59);
        v61 = vcvtq_f64_f32(*(float32x2_t *)v59.f32);
        v63 = vcvt_hight_f64_f32(v62);
        v64 = vcvtq_f64_f32(*(float32x2_t *)v62.f32);
        v65 = v141;
        if (v141 < v142)
        {
          *v141 = v55;
          v65[1] = v54;
          v65[2] = v58;
          v65[3] = v57;
          v65[4] = v61;
          v65[5] = v60;
          v66 = v65 + 8;
          v65[6] = v64;
          v65[7] = v63;
LABEL_67:
          v141 = v66;
          goto LABEL_68;
        }
        v130 = v55;
        v131 = v58;
        v132 = v61;
        v133 = v54;
        v134 = v57;
        v135 = v60;
        v136 = v64;
        v137 = v63;
        v67 = (float64x2_t *)v140;
        v68 = ((char *)v141 - v140) >> 7;
        v69 = v68 + 1;
        if ((unint64_t)(v68 + 1) >> 57)
          abort();
        v70 = (char *)v142 - v140;
        if (((char *)v142 - v140) >> 6 > v69)
          v69 = v70 >> 6;
        if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFF80)
          v7 = 0x1FFFFFFFFFFFFFFLL;
        else
          v7 = v69;
        if (v7)
        {
          v71 = (char *)sub_1B1971504((uint64_t)&v142, v7);
          v67 = (float64x2_t *)v140;
          v65 = v141;
        }
        else
        {
          v71 = 0;
        }
        v81 = &v71[128 * v68];
        *(float64x2_t *)v81 = v130;
        *((float64x2_t *)v81 + 1) = v133;
        *((float64x2_t *)v81 + 2) = v131;
        *((float64x2_t *)v81 + 3) = v134;
        *((float64x2_t *)v81 + 4) = v132;
        *((float64x2_t *)v81 + 5) = v135;
        *((float64x2_t *)v81 + 6) = v136;
        *((float64x2_t *)v81 + 7) = v137;
        if (v65 != v67)
        {
          v82 = &v71[128 * v68];
          do
          {
            v83 = v65[-8];
            v84 = v65[-7];
            v85 = v65[-5];
            *((float64x2_t *)v82 - 6) = v65[-6];
            *((float64x2_t *)v82 - 5) = v85;
            *((float64x2_t *)v82 - 8) = v83;
            *((float64x2_t *)v82 - 7) = v84;
            v86 = v65[-4];
            v87 = v65[-3];
            v88 = v65[-1];
            v89 = v82 - 128;
            *((float64x2_t *)v82 - 2) = v65[-2];
            *((float64x2_t *)v82 - 1) = v88;
            *((float64x2_t *)v82 - 4) = v86;
            *((float64x2_t *)v82 - 3) = v87;
            v65 -= 8;
            v82 -= 128;
          }
          while (v65 != v67);
          goto LABEL_65;
        }
      }
      v89 = v81;
      goto LABEL_65;
    }
LABEL_69:
    v106 = *(_QWORD *)(a1 + 128);
    if (*(_QWORD *)(a1 + 96))
    {
      v107 = v129;
      v109 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, (const char *)v7, v106, v8);
      v4 = 0;
    }
    else
    {
      v110 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, (const char *)v7, v106, v8);
      v107 = v129;
      v4 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v111, v129, v110, qword_1EEF66B90);
      v114 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 128), v112, (uint64_t)CFSTR("Skeleton"), v113);
      v109 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v115, v114, v116);
    }
    *(_QWORD *)(a1 + 112) = v109;
    v117 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v108, v107, v109, qword_1EEF66B88, v129);
    *(_QWORD *)(a1 + 104) = v117;
    v119 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v118, v117, (uint64_t)CFSTR("joints"), qword_1EEF66B38, qword_1EEF66BB0);
    objc_msgSend_setStringArray_(v119, v120, (uint64_t)v138, v121);
    v123 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v122, *(_QWORD *)(a1 + 104), (uint64_t)CFSTR("restTransforms"), qword_1EEF66AD0, qword_1EEF66BB0);
    objc_msgSend_setDouble4x4Array_count_(v123, v124, (uint64_t)v143, (v144 - v143) >> 7);
    v126 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v125, *(_QWORD *)(a1 + 104), (uint64_t)CFSTR("bindTransforms"), qword_1EEF66AD0, qword_1EEF66BB0);
    objc_msgSend_setDouble4x4Array_count_(v126, v127, (uint64_t)v140, ((char *)v141 - v140) >> 7);
    if (!v4)
      v4 = *(_QWORD *)(a1 + 104);
    if (v140)
    {
      v141 = (float64x2_t *)v140;
      operator delete(v140);
    }
    if (v143)
    {
      v144 = v143;
      operator delete(v143);
    }
  }
  return v4;
}

void sub_1B19704DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 - 152);
  if (v3)
  {
    *(_QWORD *)(v1 - 144) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 128);
  if (v4)
  {
    *(_QWORD *)(v1 - 120) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B1970528(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD *v6;
  uint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  _QWORD *v12;
  uint64_t *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v31;
  void **v32;

  v4 = (void *)a3;
  v31 = a2;
  v6 = *(_QWORD **)(a1 + 424);
  if (v6)
  {
    v8 = (uint64_t **)(a1 + 416);
    v9 = a1 + 424;
    do
    {
      v10 = v6[4];
      v11 = v10 >= (unint64_t)a2;
      if (v10 >= (unint64_t)a2)
        v12 = v6;
      else
        v12 = v6 + 1;
      if (v11)
        v9 = (uint64_t)v6;
      v6 = (_QWORD *)*v12;
    }
    while (*v12);
    if (v9 != a1 + 424 && *(_QWORD *)(v9 + 32) <= (unint64_t)a2)
    {
      v32 = &v31;
      v13 = sub_1B181D66C(v8, (unint64_t *)&v31, (uint64_t)&unk_1B22458B0, (uint64_t **)&v32);
      sub_1B1971538(v13[5], *(const char **)(a1 + 56), v4, v14);
      v4 = (void *)objc_msgSend_stringByAppendingPathComponent_(v4, v15, a4, v16);
      a2 = v31;
    }
  }
  if (!sub_1B1971604(a1, a2, a3, a4))
    return 0;
  v19 = qword_1EEF66B60;
  v20 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v17, (uint64_t)v4, v18);
  v22 = (char *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v21, *(_QWORD *)(a1 + 56), v20, v19);
  v26 = (void *)objc_msgSend_model(v31, v23, v24, v25);
  sub_1B197169C(a1, v22, v4, v26);
  if (objc_msgSend_morpher(v31, v27, v28, v29))
    sub_1B1972D98(a1, v22, v4, v31);
  return v22;
}

uint64_t sub_1B1970670(uint64_t a1, const char *a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  const __CFString *v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  long double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  float v32;
  const char *v33;
  void *v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  void *v40;
  double v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  unsigned int v89;

  v6 = qword_1EEF66B50;
  v7 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, a2, a3, (uint64_t)a4);
  v9 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v8, *(_QWORD *)(a1 + 56), v7, v6);
  if (objc_msgSend_usesOrthographicProjection(a4, v10, v11, v12))
    v14 = CFSTR("orthographic");
  else
    v14 = CFSTR("perspective");
  v15 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v13, v9, (uint64_t)CFSTR("projection"), qword_1EEF66B40, qword_1EEF66BB0);
  v18 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v16, (uint64_t)v14, v17);
  objc_msgSend_setTokenValue_(v15, v19, v18, v20);
  if ((objc_msgSend_usesOrthographicProjection(a4, v21, v22, v23) & 1) == 0)
  {
    objc_msgSend_fieldOfView(a4, v24, v25, v26);
    v28 = tan(v27 / 180.0 * 3.14159265 * 0.5);
    objc_msgSend_focalLength(a4, v29, v30, v31);
    *(float *)&v28 = v28 * v32 + v28 * v32;
    v34 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v33, v9, (uint64_t)CFSTR("horizontalAperture"), qword_1EEF66AD8, qword_1EEF66BB0);
    LODWORD(v35) = LODWORD(v28);
    objc_msgSend_setFloatValue_(v34, v36, v37, v38, v35);
    v40 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v39, v9, (uint64_t)CFSTR("verticalAperture"), qword_1EEF66AD8, qword_1EEF66BB0);
    LODWORD(v41) = LODWORD(v28);
    objc_msgSend_setFloatValue_(v40, v42, v43, v44, v41);
  }
  v45 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v24, v9, (uint64_t)CFSTR("focalLength"), qword_1EEF66AD8, qword_1EEF66BB0);
  objc_msgSend_focalLength(a4, v46, v47, v48);
  objc_msgSend_setFloatValue_(v45, v49, v50, v51);
  v53 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v52, v9, (uint64_t)CFSTR("clippingRange"), qword_1EEF66AE0, qword_1EEF66BB0);
  objc_msgSend_zNear(a4, v54, v55, v56);
  v89 = v57;
  objc_msgSend_zFar(a4, v58, v59, v60);
  objc_msgSend_setFloat2Value_(v53, v61, v62, v63, COERCE_DOUBLE(__PAIR64__(v64, v89)));
  if (objc_msgSend_depthOfField(a4, v65, v66, v67))
  {
    v69 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v68, v9, (uint64_t)CFSTR("fStop"), qword_1EEF66AD8, qword_1EEF66BB0);
    v73 = (void *)objc_msgSend_depthOfField(a4, v70, v71, v72);
    objc_msgSend_fStop(v73, v74, v75, v76);
    objc_msgSend_setFloatValue_(v69, v77, v78, v79);
    v81 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v80, v9, (uint64_t)CFSTR("focusDistance"), qword_1EEF66AD8, qword_1EEF66BB0);
    objc_msgSend_focusDistance(a4, v82, v83, v84);
    objc_msgSend_setFloatValue_(v81, v85, v86, v87);
  }
  return v9;
}

void *sub_1B19708D8(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v7 = (void *)objc_msgSend_animationKeys(a3, a2, (uint64_t)a3, a4);
  result = (void *)objc_msgSend_count(v7, v8, v9, v10);
  if (result)
  {
    v15 = result;
    v16 = 0;
    while (1)
    {
      v17 = (void *)objc_msgSend_animationKeys(a3, v12, v13, v14);
      v20 = objc_msgSend_objectAtIndexedSubscript_(v17, v18, v16, v19);
      result = (void *)objc_msgSend_animationPlayerForKey_(a3, v21, v20, v22);
      if (result)
        break;
      if (v15 == (void *)++v16)
        return result;
    }
    v23 = (void *)objc_msgSend_animation(result, v12, v13, v14);
    v27 = (void *)objc_msgSend_caAnimation(v23, v24, v25, v26);
    return (void *)sub_1B1976FF4(a1, a2, v27);
  }
  return result;
}

uint64_t sub_1B1970978(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  char v4;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  uint64_t v15;
  float32x4_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  uint32x4_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  float v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  float v53;
  double v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  float v68;
  double v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  double v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  double v98;
  const char *v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  float32x4_t v111;
  uint32x4_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  unsigned int v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  __int128 v125;
  const char *v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  const char *v130;
  uint64_t v131;
  void *v132;
  uint64_t i;
  __CFString *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  const char *v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  const char *v143;
  uint64_t v144;
  unsigned int v146;
  float64x2_t v147;
  double v148;
  unsigned int v149;
  float64x2_t v150;
  _OWORD v151[2];
  _OWORD v152[2];
  _OWORD v153[8];

  v4 = a4;
  objc_msgSend_transform(a3, a2, (uint64_t)a3, a4);
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v11, *MEMORY[0x1E0C83FF0]), (int8x16_t)vceqq_f32(v12, *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16))), vandq_s8((int8x16_t)vceqq_f32(v13, *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32)), (int8x16_t)vceqq_f32(v14, *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 48))))) & 0x80000000) == 0)
  {
    if (objc_msgSend_count(*(void **)(a1 + 88), v8, v9, v10))
    {
      if ((objc_msgSend_containsObject_(*(void **)(a1 + 88), v8, (uint64_t)CFSTR("xformOp:transform"), v10) & 1) == 0)
      {
        objc_msgSend_position(a3, v8, v15, v10);
        if ((VFXVector3EqualToVector3(v16, (float32x4_t)0) & 1) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v17, (uint64_t)CFSTR("xformOp:translate"), v19) & 1) == 0)
        {
          v20 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v17, (uint64_t)a2, (uint64_t)CFSTR("xformOp:translate"), qword_1EEF66AC0, qword_1EEF66BB0);
          objc_msgSend_position(a3, v21, v22, v23);
          v146 = v24;
          objc_msgSend_position(a3, v25, v26, v27);
          v147 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v28, v146));
          objc_msgSend_position(a3, v29, v30, v31);
          *(double *)&v32 = *((float *)&v32 + 2);
          v152[0] = v147;
          v152[1] = v32;
          objc_msgSend_setDouble3Value_(v20, v33, (uint64_t)v152, v34);
          objc_msgSend_addObject_(*(void **)(a1 + 88), v35, (uint64_t)CFSTR("xformOp:translate"), v36);
        }
        objc_msgSend_orientation(a3, v17, v18, v19);
        v41 = (uint32x4_t)vceqq_f32(v40, (float32x4_t)xmmword_1B2244E20);
        v41.i32[0] = vminvq_u32(v41);
        if ((v41.i32[0] & 0x80000000) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, (uint64_t)CFSTR("xformOp:orient"), v39) & 1) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, (uint64_t)CFSTR("xformOp:rotateXYZ"), v39) & 1) == 0)
        {
          if ((objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, (uint64_t)CFSTR("xformOp:rotateX"), v39) & 1) != 0
            || (objc_msgSend_containsObject_(*(void **)(a1 + 88), v42, (uint64_t)CFSTR("xformOp:rotateY"), v44) & 1) != 0
            || (objc_msgSend_containsObject_(*(void **)(a1 + 88), v42, (uint64_t)CFSTR("xformOp:rotateZ"), v44) & 1) != 0)
          {
            objc_msgSend_eulerAngles(a3, v42, v43, v44);
            if (v48 != 0.0
              && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v45, (uint64_t)CFSTR("xformOp:rotateX"), v47) & 1) == 0)
            {
              v49 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v45, (uint64_t)a2, (uint64_t)CFSTR("xformOp:rotateX"), qword_1EEF66AD8, qword_1EEF66BB0);
              objc_msgSend_eulerAngles(a3, v50, v51, v52);
              v54 = v53 / 3.14159265 * 180.0;
              *(float *)&v54 = v54;
              objc_msgSend_setFloatValue_(v49, v55, v56, v57, v54);
              objc_msgSend_addObject_(*(void **)(a1 + 88), v58, (uint64_t)CFSTR("xformOp:rotateX"), v59);
            }
            objc_msgSend_eulerAngles(a3, v45, v46, v47);
            LODWORD(v63) = HIDWORD(v63);
            if (*((float *)&v63 + 1) != 0.0
              && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v60, (uint64_t)CFSTR("xformOp:rotateY"), v62, v63) & 1) == 0)
            {
              v64 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v60, (uint64_t)a2, (uint64_t)CFSTR("xformOp:rotateY"), qword_1EEF66AD8, qword_1EEF66BB0);
              objc_msgSend_eulerAngles(a3, v65, v66, v67);
              v69 = v68 / 3.14159265 * 180.0;
              *(float *)&v69 = v69;
              objc_msgSend_setFloatValue_(v64, v70, v71, v72, v69);
              objc_msgSend_addObject_(*(void **)(a1 + 88), v73, (uint64_t)CFSTR("xformOp:rotateY"), v74);
            }
            objc_msgSend_eulerAngles(a3, v60, v61, v62, v63);
            v41.i32[0] = v41.i32[2];
            if (*(float *)&v41.i32[2] != 0.0
              && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v37, (uint64_t)CFSTR("xformOp:rotateZ"), v39, *(double *)v41.i64) & 1) == 0)
            {
              v75 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v37, (uint64_t)a2, (uint64_t)CFSTR("xformOp:rotateZ"), qword_1EEF66AD8, qword_1EEF66BB0);
              objc_msgSend_eulerAngles(a3, v76, v77, v78);
              v80 = v79 / 3.14159265 * 180.0;
              *(float *)&v80 = v80;
              objc_msgSend_setFloatValue_(v75, v81, v82, v83, v80);
              objc_msgSend_addObject_(*(void **)(a1 + 88), v84, (uint64_t)CFSTR("xformOp:rotateZ"), v85);
            }
          }
          else
          {
            objc_msgSend_orientation(a3, v42, v43, v44);
            v148 = v98;
            v100 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v99, (uint64_t)a2, (uint64_t)CFSTR("xformOp:orient"), qword_1EEF66B28, qword_1EEF66BB0);
            objc_msgSend_setQuatfValue_(v100, v101, v102, v103, v148);
            objc_msgSend_addObject_(*(void **)(a1 + 88), v104, (uint64_t)CFSTR("xformOp:orient"), v105);
          }
        }
        objc_msgSend_scale(a3, v37, v38, v39, *(double *)v41.i64);
        __asm { FMOV            V1.4S, #1.0 }
        v112 = (uint32x4_t)vceqq_f32(v111, _Q1);
        v112.i32[3] = v112.i32[2];
        if ((vminvq_u32(v112) & 0x80000000) == 0
          && (objc_msgSend_containsObject_(*(void **)(a1 + 88), v8, (uint64_t)CFSTR("xformOp:scale"), v10) & 1) == 0)
        {
          v113 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v8, (uint64_t)a2, (uint64_t)CFSTR("xformOp:scale"), qword_1EEF66AC0, qword_1EEF66BB0);
          objc_msgSend_scale(a3, v114, v115, v116);
          v149 = v117;
          objc_msgSend_scale(a3, v118, v119, v120);
          v150 = vcvtq_f64_f32((float32x2_t)__PAIR64__(v121, v149));
          objc_msgSend_scale(a3, v122, v123, v124);
          *(double *)&v125 = *((float *)&v125 + 2);
          v151[0] = v150;
          v151[1] = v125;
          objc_msgSend_setDouble3Value_(v113, v126, (uint64_t)v151, v127);
          objc_msgSend_addObject_(*(void **)(a1 + 88), v128, (uint64_t)CFSTR("xformOp:scale"), v129);
        }
      }
    }
    else if ((v4 & 1) == 0)
    {
      v86 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v8, (uint64_t)a2, (uint64_t)CFSTR("xformOp:transform"), qword_1EEF66AC8, qword_1EEF66BB0);
      objc_msgSend_transform(a3, v87, v88, v89);
      v153[0] = vcvtq_f64_f32(*(float32x2_t *)v90.f32);
      v153[1] = vcvt_hight_f64_f32(v90);
      v153[2] = vcvtq_f64_f32(*(float32x2_t *)v91.f32);
      v153[3] = vcvt_hight_f64_f32(v91);
      v153[4] = vcvtq_f64_f32(*(float32x2_t *)v92.f32);
      v153[5] = vcvt_hight_f64_f32(v92);
      v153[6] = vcvtq_f64_f32(*(float32x2_t *)v93.f32);
      v153[7] = vcvt_hight_f64_f32(v93);
      objc_msgSend_setDouble4x4Value_(v86, v94, (uint64_t)v153, v95);
      objc_msgSend_addObject_(*(void **)(a1 + 88), v96, (uint64_t)CFSTR("xformOp:transform"), v97);
    }
  }
  v132 = (void *)objc_msgSend_arrayWithCapacity_(MEMORY[0x1E0C99DE8], v8, 8, v10);
  for (i = 0; i != 8; ++i)
  {
    v134 = off_1E63D9FE0[i];
    if (objc_msgSend_containsObject_(*(void **)(a1 + 88), v130, (uint64_t)v134, v131))
    {
      v136 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v130, (uint64_t)v134, v131);
      objc_msgSend_addObject_(v132, v137, v136, v138);
    }
  }
  if (objc_msgSend_count(v132, v130, v135, v131))
  {
    v142 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v139, (uint64_t)a2, (uint64_t)CFSTR("xformOpOrder"), qword_1EEF66B48, qword_1EEF66BB0);
    objc_msgSend_setTokenArray_(v142, v143, (uint64_t)v132, v144);
  }
  return objc_msgSend_removeAllObjects(*(void **)(a1 + 88), v139, v140, v141);
}

_QWORD *sub_1B1970F28(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void **sub_1B1970FD4(uint64_t a1, void **a2)
{
  void **v2;
  _QWORD *v3;
  void **v5;
  char v6;
  _QWORD *v7;

  v2 = (void **)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = (void **)(a1 + 8);
  do
  {
    v6 = sub_1B1971050(v3 + 4, a2);
    if (v6 >= 0)
      v7 = v3;
    else
      v7 = v3 + 1;
    if (v6 >= 0)
      v5 = (void **)v3;
    v3 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v5 == v2 || (sub_1B1971050(a2, v5 + 4) & 0x80) != 0)
    return v2;
  return v5;
}

uint64_t sub_1B1971050(_QWORD *a1, void **a2)
{
  size_t v2;
  size_t v3;
  int v4;
  void *v5;
  size_t v6;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (_QWORD *)*a1;
    v2 = v3;
  }
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  return sub_1B1971088(a1, v2, v5, v6);
}

uint64_t sub_1B1971088(const void *a1, size_t a2, void *__s2, size_t a4)
{
  size_t v7;
  int v8;

  if (a4 >= a2)
    v7 = a2;
  else
    v7 = a4;
  v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0)
      return 1;
  }
  else
  {
    if (a2 == a4)
      return 0;
    if (a2 >= a4)
      return 1;
  }
  return 255;
}

std::string *sub_1B19710E4(std::string *__dst, const std::string::value_type *__src, size_t __len)
{
  unint64_t v6;
  std::string *v7;
  std::string::size_type size;
  std::string::size_type v9;
  unint64_t v10;

  LODWORD(v6) = SHIBYTE(__dst->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    v10 = __dst->__r_.__value_.__r.__words[2];
    v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __len)
    {
      size = __dst->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    v6 = HIBYTE(v10);
    v7 = (std::string *)__dst->__r_.__value_.__r.__words[0];
  }
  else
  {
    v7 = __dst;
    if (__len > 0x16)
    {
      size = HIBYTE(__dst->__r_.__value_.__r.__words[2]);
      v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(__dst, v9, __len - v9, size, 0, size, __len, __src);
      return __dst;
    }
  }
  if (__len)
  {
    memmove(v7, __src, __len);
    LOBYTE(v6) = *((_BYTE *)&__dst->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0)
    __dst->__r_.__value_.__l.__size_ = __len;
  else
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = __len & 0x7F;
  v7->__r_.__value_.__s.__data_[__len] = 0;
  return __dst;
}

std::string *sub_1B19711A0(std::string *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_1B19710E4(a1, __s, v4);
}

uint64_t *sub_1B19711D4(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t **v5;
  uint64_t *result;
  uint64_t *v7;
  uint64_t v8;

  v5 = (uint64_t **)sub_1B1971250((uint64_t)a1, &v8, a2);
  result = *v5;
  if (!*v5)
  {
    sub_1B19712E0((uint64_t)a1, a3, (uint64_t)&v7);
    sub_1B181D728(a1, v8, v5, v7);
    return v7;
  }
  return result;
}

_QWORD *sub_1B1971250(uint64_t a1, _QWORD *a2, void **a3)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  _QWORD *v8;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        v7 = v4;
        v8 = v4 + 4;
        if ((sub_1B1971050(a3, (void **)v4 + 4) & 0x80) == 0)
          break;
        v4 = (_QWORD *)*v7;
        v5 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if ((sub_1B1971050(v8, a3) & 0x80) == 0)
        break;
      v5 = v7 + 1;
      v4 = (_QWORD *)v7[1];
    }
    while (v4);
  }
  else
  {
    v7 = (_QWORD *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

_QWORD *sub_1B19712E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _QWORD *result;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x38uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    result = sub_1B197137C(result, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)result = *(_OWORD *)a2;
    result[2] = *(_QWORD *)(a2 + 16);
  }
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B1971360(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_1B1971404(v3, v2);
  _Unwind_Resume(a1);
}

void *sub_1B197137C(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

void sub_1B1971404(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 55) < 0)
      operator delete(__p[4]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1B1971450(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 7)
  {
    if (a2 >> 57)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B1971504(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFF80];
    v9 = &v6[128 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 8);
        v14 = *((_OWORD *)v10 - 7);
        v15 = *((_OWORD *)v10 - 5);
        *((_OWORD *)v12 - 6) = *((_OWORD *)v10 - 6);
        *((_OWORD *)v12 - 5) = v15;
        *((_OWORD *)v12 - 8) = v13;
        *((_OWORD *)v12 - 7) = v14;
        v16 = *((_OWORD *)v10 - 4);
        v17 = *((_OWORD *)v10 - 3);
        v18 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v18;
        *((_OWORD *)v12 - 4) = v16;
        *((_OWORD *)v12 - 3) = v17;
        v12 -= 128;
        v10 -= 128;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void *sub_1B1971504(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57)
    sub_1B179C4A8();
  return operator new(a2 << 7);
}

uint64_t sub_1B1971538(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  void *v18;
  const char *v19;
  uint64_t v20;

  v7 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, a2, (uint64_t)a3, a4);
  v9 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v8, (uint64_t)a2, v7, qword_1EEF66B90);
  v12 = objc_msgSend_stringByAppendingPathComponent_(a3, v10, (uint64_t)CFSTR("Skeleton"), v11);
  v15 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v13, v12, v14);
  *(_QWORD *)(a1 + 8) = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v16, (uint64_t)a2, v15, qword_1EEF66B88);
  v18 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v17, v9, (uint64_t)CFSTR("skel:skeleton"), qword_1EEF66B18, qword_1EEF66BB0);
  objc_msgSend_setObjectPath_(v18, v19, v15, v20);
  return v9;
}

uint64_t sub_1B1971604(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  const char *v26;
  uint64_t v27;
  uint64_t v28;

  v4 = (void *)objc_msgSend_model(a2, (const char *)a2, a3, a4);
  v8 = (void *)objc_msgSend_mesh(v4, v5, v6, v7);
  if (objc_msgSend_meshElementCount(v8, v9, v10, v11) < 1)
    return 0;
  v14 = 0;
  while (1)
  {
    v15 = (void *)objc_msgSend_meshElementAtIndex_(v8, v12, v14, v13);
    if (!objc_msgSend_primitiveType(v15, v16, v17, v18) || objc_msgSend_primitiveType(v15, v19, v20, v21) == 4)
      break;
    result = objc_msgSend_primitiveType(v15, v22, v23, v24);
    if (result == 1)
      return result;
    if (++v14 >= objc_msgSend_meshElementCount(v8, v26, v27, v28))
      return 0;
  }
  return 1;
}

void sub_1B197169C(uint64_t a1, const char *a2, void *a3, void *a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  void *v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void **v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t k;
  void *v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char hasInterleavedIndicesChannels;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void **v97;
  char **v98;
  char **v99;
  unint64_t j;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  int v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  char *v128;
  char *v129;
  int v130;
  char *v131;
  char *v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  int v138;
  int v139;
  int v140;
  char *v141;
  char *v142;
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  int v148;
  int v149;
  char *v150;
  char *v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t v154;
  char *v155;
  char *v156;
  int v157;
  unint64_t m;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  unint64_t v164;
  int v165;
  char *v166;
  char *v167;
  char *v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  char *v172;
  char *v173;
  int v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  int v181;
  int v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  const char *v192;
  uint64_t v193;
  void *v194;
  const char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  void *v214;
  const char *v215;
  uint64_t v216;
  const char *v217;
  uint64_t v218;
  uint64_t v219;
  int isEqualToString;
  void *v221;
  const char *v222;
  uint64_t v223;
  void *v224;
  const char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  void *v229;
  const char *v230;
  uint64_t v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  void *v235;
  const char *v236;
  uint64_t v237;
  const char *v238;
  uint64_t v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  float32x4_t v244;
  uint64_t n;
  uint64_t v246;
  _OWORD *f32;
  uint64_t v248;
  unint64_t v249;
  char *v250;
  float32x4_t *v251;
  float32x4_t *v252;
  char *v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  uint64_t v258;
  uint64_t v259;
  const __CFString *v260;
  uint64_t v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  void *v265;
  void *v266;
  const char *v267;
  uint64_t v268;
  char v269;
  const char *v270;
  uint64_t v271;
  uint64_t *v272;
  char v273;
  uint64_t v274;
  char v275;
  uint64_t v276;
  int v277;
  void *v278;
  const char *v279;
  const char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  const char *v288;
  uint64_t v289;
  uint64_t v290;
  const __CFString *v291;
  const char *v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  void *v296;
  void *v297;
  const char *v298;
  uint64_t v299;
  void *v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  void *v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  const char *v312;
  void *v313;
  const char *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  uint64_t v318;
  float32x4_t v319;
  uint64_t ii;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  unint64_t v324;
  char *v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  const char *v332;
  uint64_t v333;
  void *v334;
  int v335;
  void *v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  const char *v341;
  uint64_t v342;
  void *v343;
  const char *v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  const char *v351;
  const char *v352;
  uint64_t v353;
  uint64_t v354;
  const char *v355;
  uint64_t v356;
  uint64_t v357;
  const __CFString *v358;
  const char *v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  void *v364;
  const char *v365;
  uint64_t v366;
  void *v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  int v371;
  uint64_t v372;
  const char *v373;
  uint64_t v374;
  uint64_t v375;
  const char *v376;
  void *v377;
  const char *v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  void *v384;
  uint64_t v385;
  const char *v386;
  void *v387;
  const char *v388;
  uint64_t v389;
  const char *v390;
  uint64_t v391;
  uint64_t v392;
  const char *v393;
  void *v394;
  const char *v395;
  uint64_t v396;
  void *v397;
  uint64_t v398;
  const char *v399;
  uint64_t v400;
  const char *v401;
  uint64_t v402;
  uint64_t v403;
  int v404;
  unint64_t jj;
  const char *v406;
  uint64_t v407;
  void *v408;
  const char *v409;
  uint64_t v410;
  uint64_t v411;
  void *v412;
  const char *v413;
  uint64_t v414;
  uint64_t v415;
  const char *v416;
  uint64_t v417;
  uint64_t v418;
  void *v419;
  const char *v420;
  uint64_t v421;
  void *Material;
  const char *v423;
  uint64_t v424;
  uint64_t v425;
  void *v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  void *v430;
  const char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t PathComponent;
  const char *v435;
  uint64_t v436;
  void *v437;
  const char *v438;
  uint64_t v439;
  void *v440;
  const char *v441;
  uint64_t v442;
  const char *v443;
  uint64_t v444;
  void *v445;
  const char *v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  const char *v450;
  uint64_t v451;
  const char *v452;
  uint64_t v453;
  uint64_t v454;
  const char *v455;
  uint64_t v456;
  const char *v457;
  void *v458;
  const char *v459;
  uint64_t v460;
  uint64_t v461;
  const char *v462;
  uint64_t v463;
  const char *v464;
  void *v465;
  const char *v466;
  uint64_t v467;
  uint64_t v468;
  const char *v469;
  uint64_t v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t kk;
  int v475;
  char *v476;
  _DWORD *v477;
  char *v478;
  uint64_t v479;
  unint64_t v480;
  uint64_t v481;
  char *v482;
  char *v483;
  int v484;
  void *v485;
  uint64_t v486;
  const char *v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  const char *v491;
  const char *v492;
  void *v493;
  const char *v494;
  uint64_t v495;
  void *v496;
  const char *v497;
  uint64_t v498;
  uint64_t v499;
  void *v500;
  _QWORD v501[2];
  void *v502;
  const __CFString *v503;
  int v504;
  uint64_t v505;
  unint64_t v506;
  void *v507;
  const char *v508;
  void *v509;
  __CFString *v510;
  const __CFString *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  uint64_t i;
  unint64_t v516;
  float32x4_t *v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  void **v521;
  uint64_t v522;
  __int128 v523;
  __int128 v524;
  __int128 v525;
  __int128 v526;
  char *v527;
  char *v528;
  uint64_t v529;
  float32x4_t v530;
  float32x4_t v531;
  _BYTE v532[128];
  uint64_t v533;

  v502 = a3;
  v505 = a1;
  v533 = *MEMORY[0x1E0C80C00];
  v508 = a2;
  v5 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a2, (uint64_t)CFSTR("subdivisionScheme"), qword_1EEF66B40, qword_1EEF66BB0);
  v8 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v6, (uint64_t)CFSTR("none"), v7);
  objc_msgSend_setTokenValue_(v5, v9, v8, v10);
  v507 = a4;
  if (objc_msgSend_modelSourceChannels(a4, v11, v12, v13)
    && (v17 = (void *)objc_msgSend_modelSourceChannels(a4, v14, v15, v16),
        (unint64_t)objc_msgSend_count(v17, v18, v19, v20) >= 2))
  {
    v21 = (void *)objc_msgSend_modelSourceChannels(a4, v14, v15, v16);
    v506 = objc_msgSend_count(v21, v22, v23, v24);
    v504 = 1;
  }
  else
  {
    v504 = 0;
    v506 = 1;
  }
  v509 = (void *)objc_msgSend_mesh(v507, v14, v15, v16);
  v28 = objc_msgSend_meshElementCount(v509, v25, v26, v27);
  if (v28 < 1)
  {
    v32 = 0;
    v527 = 0;
    v528 = 0;
    v529 = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v34 = v509;
    do
    {
      v35 = (void *)objc_msgSend_meshElementAtIndex_(v34, v29, v33, v30);
      v39 = objc_msgSend_primitiveCount(v35, v36, v37, v38);
      if (objc_msgSend_primitiveType(v35, v40, v41, v42) == 1
        && (unint64_t)objc_msgSend_indexCount(v35, v43, v44, v45) >= 3)
      {
        v32 = v32 + 3 * objc_msgSend_indexCount(v35, v43, v44, v45) - 6;
      }
      else
      {
        v32 += objc_msgSend_indexCount(v35, v43, v44, v45);
      }
      v31 += v39;
      ++v33;
      v34 = v509;
      v28 = objc_msgSend_meshElementCount(v509, v46, v47, v48);
    }
    while (v33 < v28);
    v527 = 0;
    v528 = 0;
    v529 = 0;
    if (v31)
    {
      sub_1B183C0A8(&v527, v31);
      v49 = v528;
      memset_pattern16(v528, &unk_1B2268530, 4 * v31);
      v528 = &v49[4 * v31];
    }
  }
  v501[1] = v501;
  MEMORY[0x1E0C80A78](v28, v29);
  v521 = (void **)((char *)v501 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (v54)
  {
    v55 = v506;
    v56 = v521;
    bzero(v521, 24 * ((24 * v506 - 24) / 0x18) + 24);
    do
    {
      sub_1B17F7530(v56, v32);
      v56 += 3;
      --v55;
    }
    while (v55);
  }
  v525 = 0u;
  v526 = 0u;
  v523 = 0u;
  v524 = 0u;
  v510 = (__CFString *)objc_msgSend_meshElements(v509, v50, v51, v52);
  k = objc_msgSend_countByEnumeratingWithState_objects_count_(v510, v57, (uint64_t)&v523, (uint64_t)v532, 16);
  if (k)
  {
    v511 = *(const __CFString **)v524;
    v512 = 0;
    do
    {
      v513 = 0;
      v516 = k;
      do
      {
        if (*(const __CFString **)v524 != v511)
          objc_enumerationMutation(v510);
        v62 = *(void **)(*((_QWORD *)&v523 + 1) + 8 * v513);
        if (objc_msgSend_data(v62, v58, v59, v60))
        {
          v63 = (void *)objc_msgSend_data(v62, v58, v59, v60);
          v520.i64[0] = objc_msgSend_bytes(v63, v64, v65, v66);
          if (objc_msgSend_primitiveType(v62, v67, v68, v69) == 4)
          {
            v73 = 0;
            v74 = 4 * v512;
            while (objc_msgSend_primitiveCount(v62, v70, v71, v72) > v73)
            {
              v75 = objc_msgSend_bytesPerIndex(v62, v70, v71, v72);
              switch(v75)
              {
                case 1:
                  v79 = *(unsigned __int8 *)v520.i64[0];
                  break;
                case 4:
                  v79 = *(_DWORD *)v520.i64[0];
                  break;
                case 2:
                  v79 = *(unsigned __int16 *)v520.i64[0];
                  break;
                default:
                  v79 = *(char *)v520.i64[0];
                  break;
              }
              *(_DWORD *)&v527[4 * v73 + v74] = v79;
              v80 = objc_msgSend_bytesPerIndex(v62, v76, v77, v78);
              ++v73;
              v520.i64[0] += v80;
            }
          }
          v514 = objc_msgSend_indicesChannelCount(v62, v70, v71, v72);
          if (objc_msgSend_hasInterleavedIndicesChannels(v62, v81, v82, v83))
            v87 = v514;
          else
            v87 = 1;
          v518.i64[0] = v87;
          if (v514)
          {
            for (i = 0; i != v514; ++i)
            {
              hasInterleavedIndicesChannels = objc_msgSend_hasInterleavedIndicesChannels(v62, v84, v85, v86);
              v519.i64[0] = i;
              if ((hasInterleavedIndicesChannels & 1) == 0)
              {
                v92 = objc_msgSend_indexCount(v62, v89, v90, v91);
                v519.i64[0] = v92 * i;
              }
              v93 = objc_msgSend_primitiveType(v62, v89, v90, v91);
              v97 = &v521[3 * i];
              v98 = (char **)(v97 + 1);
              v99 = (char **)(v97 + 2);
              if (v93 == 1)
              {
                for (j = 2; j < objc_msgSend_indexCount(v62, (const char *)v94, v95, v96); ++j)
                {
                  v101 = objc_msgSend_bytesPerIndex(v62, v84, v85, v86);
                  v105 = objc_msgSend_bytesPerIndex(v62, v102, v103, v104);
                  v109 = v101 * (v519.i64[0] + j * v518.i64[0]);
                  switch(v105)
                  {
                    case 1:
                      v110 = *(unsigned __int8 *)(v520.i64[0] + v109);
                      break;
                    case 4:
                      v110 = *(_DWORD *)(v520.i64[0] + v109);
                      break;
                    case 2:
                      v110 = *(unsigned __int16 *)(v520.i64[0] + v109);
                      break;
                    default:
                      v110 = *(char *)(v520.i64[0] + v109);
                      break;
                  }
                  LODWORD(v517) = v110;
                  v111 = objc_msgSend_bytesPerIndex(v62, v106, v107, v108);
                  v115 = objc_msgSend_bytesPerIndex(v62, v112, v113, v114);
                  v119 = v111 * (v519.i64[0] + (j - 1) * v518.i64[0]);
                  switch(v115)
                  {
                    case 1:
                      v120 = *(unsigned __int8 *)(v520.i64[0] + v119);
                      break;
                    case 4:
                      v120 = *(_DWORD *)(v520.i64[0] + v119);
                      break;
                    case 2:
                      v120 = *(unsigned __int16 *)(v520.i64[0] + v119);
                      break;
                    default:
                      v120 = *(char *)(v520.i64[0] + v119);
                      break;
                  }
                  v121 = objc_msgSend_bytesPerIndex(v62, v116, v117, v118);
                  v125 = objc_msgSend_bytesPerIndex(v62, v122, v123, v124);
                  v126 = v121 * (v519.i64[0] + (j - 2) * v518.i64[0]);
                  switch(v125)
                  {
                    case 1:
                      v127 = *(unsigned __int8 *)(v520.i64[0] + v126);
                      break;
                    case 4:
                      v127 = *(_DWORD *)(v520.i64[0] + v126);
                      break;
                    case 2:
                      v127 = *(unsigned __int16 *)(v520.i64[0] + v126);
                      break;
                    default:
                      v127 = *(char *)(v520.i64[0] + v126);
                      break;
                  }
                  v128 = *v98;
                  v129 = *v99;
                  if (*v98 >= *v99)
                  {
                    v132 = (char *)*v97;
                    v133 = (v128 - (_BYTE *)*v97) >> 2;
                    v134 = v133 + 1;
                    if ((unint64_t)(v133 + 1) >> 62)
                      goto LABEL_288;
                    v135 = v129 - v132;
                    if (v135 >> 1 > v134)
                      v134 = v135 >> 1;
                    if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFFCLL)
                      v94 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v94 = v134;
                    if (v94)
                    {
                      v136 = (char *)sub_1B17F7E58((uint64_t)(v97 + 2), v94);
                      v128 = *v98;
                      v132 = (char *)*v97;
                    }
                    else
                    {
                      v136 = 0;
                    }
                    v137 = &v136[4 * v133];
                    if ((j & 1) != 0)
                      v138 = v120;
                    else
                      v138 = v127;
                    *(_DWORD *)v137 = v138;
                    v131 = v137 + 4;
                    while (v128 != v132)
                    {
                      v139 = *((_DWORD *)v128 - 1);
                      v128 -= 4;
                      *((_DWORD *)v137 - 1) = v139;
                      v137 -= 4;
                    }
                    *v97 = v137;
                    v129 = &v136[4 * v94];
                    *v98 = v131;
                    *v99 = v129;
                    if (v132)
                    {
                      operator delete(v132);
                      v129 = *v99;
                    }
                  }
                  else
                  {
                    if ((j & 1) != 0)
                      v130 = v120;
                    else
                      v130 = v127;
                    *(_DWORD *)v128 = v130;
                    v131 = v128 + 4;
                  }
                  *v98 = v131;
                  if (v131 >= v129)
                  {
                    v142 = (char *)*v97;
                    v143 = (v131 - (_BYTE *)*v97) >> 2;
                    v144 = v143 + 1;
                    if ((unint64_t)(v143 + 1) >> 62)
                      goto LABEL_288;
                    v145 = v129 - v142;
                    if (v145 >> 1 > v144)
                      v144 = v145 >> 1;
                    if ((unint64_t)v145 >= 0x7FFFFFFFFFFFFFFCLL)
                      v94 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v94 = v144;
                    if (v94)
                    {
                      v146 = (char *)sub_1B17F7E58((uint64_t)(v97 + 2), v94);
                      v131 = *v98;
                      v142 = (char *)*v97;
                    }
                    else
                    {
                      v146 = 0;
                    }
                    v147 = &v146[4 * v143];
                    if ((j & 1) != 0)
                      v148 = v127;
                    else
                      v148 = v120;
                    *(_DWORD *)v147 = v148;
                    v141 = v147 + 4;
                    if (v131 == v142)
                    {
                      k = v516;
                    }
                    else
                    {
                      k = v516;
                      do
                      {
                        v149 = *((_DWORD *)v131 - 1);
                        v131 -= 4;
                        *((_DWORD *)v147 - 1) = v149;
                        v147 -= 4;
                      }
                      while (v131 != v142);
                    }
                    *v97 = v147;
                    v129 = &v146[4 * v94];
                    *v98 = v141;
                    *v99 = v129;
                    if (v142)
                    {
                      operator delete(v142);
                      v129 = *v99;
                    }
                  }
                  else
                  {
                    if ((j & 1) != 0)
                      v140 = v127;
                    else
                      v140 = v120;
                    *(_DWORD *)v131 = v140;
                    v141 = v131 + 4;
                    k = v516;
                  }
                  *v98 = v141;
                  if (v141 >= v129)
                  {
                    v151 = (char *)*v97;
                    v152 = (v141 - (_BYTE *)*v97) >> 2;
                    v153 = v152 + 1;
                    if ((unint64_t)(v152 + 1) >> 62)
LABEL_288:
                      abort();
                    v154 = v129 - v151;
                    if (v154 >> 1 > v153)
                      v153 = v154 >> 1;
                    if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL)
                      v94 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v94 = v153;
                    if (v94)
                    {
                      v155 = (char *)sub_1B17F7E58((uint64_t)(v97 + 2), v94);
                      v141 = *v98;
                      v151 = (char *)*v97;
                    }
                    else
                    {
                      v155 = 0;
                    }
                    v156 = &v155[4 * v152];
                    *(_DWORD *)v156 = (_DWORD)v517;
                    v150 = v156 + 4;
                    for (k = v516; v141 != v151; v156 -= 4)
                    {
                      v157 = *((_DWORD *)v141 - 1);
                      v141 -= 4;
                      *((_DWORD *)v156 - 1) = v157;
                    }
                    *v97 = v156;
                    *v98 = v150;
                    *v99 = &v155[4 * v94];
                    if (v151)
                      operator delete(v151);
                  }
                  else
                  {
                    *(_DWORD *)v141 = (_DWORD)v517;
                    v150 = v141 + 4;
                  }
                  *v98 = v150;
                }
              }
              else
              {
                for (m = 0; m < objc_msgSend_indexCount(v62, (const char *)v94, v95, v96); ++m)
                {
                  v159 = objc_msgSend_bytesPerIndex(v62, v84, v85, v86);
                  v163 = objc_msgSend_bytesPerIndex(v62, v160, v161, v162);
                  v164 = v159 * (v519.i64[0] + m * v518.i64[0]);
                  switch(v163)
                  {
                    case 1:
                      v165 = *(unsigned __int8 *)(v520.i64[0] + v164);
                      break;
                    case 4:
                      v165 = *(_DWORD *)(v520.i64[0] + v164);
                      break;
                    case 2:
                      v165 = *(unsigned __int16 *)(v520.i64[0] + v164);
                      break;
                    default:
                      v165 = *(char *)(v520.i64[0] + v164);
                      break;
                  }
                  v166 = *v98;
                  if (*v98 >= *v99)
                  {
                    v168 = (char *)*v97;
                    v169 = (v166 - (_BYTE *)*v97) >> 2;
                    v170 = v169 + 1;
                    if ((unint64_t)(v169 + 1) >> 62)
                      abort();
                    v171 = *v99 - v168;
                    if (v171 >> 1 > v170)
                      v170 = v171 >> 1;
                    if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL)
                      v94 = 0x3FFFFFFFFFFFFFFFLL;
                    else
                      v94 = v170;
                    if (v94)
                    {
                      v172 = (char *)sub_1B17F7E58((uint64_t)(v97 + 2), v94);
                      v166 = *v98;
                      v168 = (char *)*v97;
                    }
                    else
                    {
                      v172 = 0;
                    }
                    v173 = &v172[4 * v169];
                    *(_DWORD *)v173 = v165;
                    v167 = v173 + 4;
                    while (v166 != v168)
                    {
                      v174 = *((_DWORD *)v166 - 1);
                      v166 -= 4;
                      *((_DWORD *)v173 - 1) = v174;
                      v173 -= 4;
                    }
                    *v97 = v173;
                    *v98 = v167;
                    *v99 = &v172[4 * v94];
                    if (v168)
                      operator delete(v168);
                  }
                  else
                  {
                    *(_DWORD *)v166 = v165;
                    v167 = v166 + 4;
                  }
                  *v98 = v167;
                }
              }
            }
          }
          v175 = objc_msgSend_primitiveCount(v62, v84, v85, v86);
          v512 += v175;
        }
        ++v513;
      }
      while (v513 != k);
      k = objc_msgSend_countByEnumeratingWithState_objects_count_(v510, v58, (uint64_t)&v523, (uint64_t)v532, 16);
    }
    while (k);
  }
  else
  {
    v512 = 0;
  }
  v176 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v58, (uint64_t)v508, (uint64_t)CFSTR("faceVertexCounts"), qword_1EEF66B10, qword_1EEF66BB0);
  objc_msgSend_setIntArray_count_(v176, v177, (uint64_t)v527, v512);
  v181 = 0;
  v182 = 0;
  v516 = 0;
  LODWORD(v512) = v504 ^ 1;
  v517 = &v531;
  v513 = (uint64_t)CFSTR("kGeometrySourceSemanticPosition");
  v511 = CFSTR("kGeometrySourceSemanticNormal");
  v510 = CFSTR("kGeometrySourceSemanticColor");
  v503 = CFSTR("kGeometrySourceSemanticTexcoord");
  while (1)
  {
    v183 = (void *)objc_msgSend_meshSources(v509, v178, v179, v180);
    v187 = objc_msgSend_count(v183, v184, v185, v186);
    if (v516 >= v187)
      break;
    v191 = (void *)objc_msgSend_meshSources(v509, v188, v189, v190);
    v194 = (void *)objc_msgSend_objectAtIndexedSubscript_(v191, v192, v516, v193);
    v198 = objc_msgSend_vectorCount(v194, v195, v196, v197);
    v202 = (void *)objc_msgSend_data(v194, v199, v200, v201);
    v206 = objc_msgSend_bytes(v202, v203, v204, v205);
    v210 = objc_msgSend_dataOffset(v194, v207, v208, v209);
    v214 = (void *)objc_msgSend_semantic(v194, v211, v212, v213);
    isEqualToString = objc_msgSend_isEqualToString_(v214, v215, v513, v216);
    LODWORD(i) = isEqualToString;
    if (((isEqualToString | v512) & 1) == 0)
    {
      if (v516 >= v506)
      {
        LODWORD(i) = 0;
      }
      else
      {
        v221 = (void *)objc_msgSend_meshSourceChannels(v509, v217, v218, v219);
        v224 = (void *)objc_msgSend_objectAtIndexedSubscript_(v221, v222, v516, v223);
        LODWORD(i) = objc_msgSend_intValue(v224, v225, v226, v227) != 0;
      }
    }
    LODWORD(v514) = v182;
    v228 = v206 + v210;
    if ((isEqualToString & 1) != 0
      || (v229 = (void *)objc_msgSend_semantic(v194, v217, v218, v219),
          (objc_msgSend_isEqualToString_(v229, v230, (uint64_t)v511, v231) & 1) != 0)
      || (v235 = (void *)objc_msgSend_semantic(v194, v232, v233, v234),
          objc_msgSend_isEqualToString_(v235, v236, (uint64_t)v510, v237)))
    {
      v530 = 0uLL;
      v531.i64[0] = 0;
      sub_1B19737F0((void **)&v530, v198);
      if (v198 >= 1)
      {
        for (n = 0; n != v198; ++n)
        {
          v244.i64[0] = *(_QWORD *)v228;
          v244.i32[2] = *(_DWORD *)(v228 + 8);
          v246 = v530.i64[1];
          if (v530.i64[1] >= (unint64_t)v531.i64[0])
          {
            v520 = v244;
            v248 = (v530.i64[1] - v530.i64[0]) >> 4;
            if ((unint64_t)(v248 + 1) >> 60)
              abort();
            v249 = (v531.i64[0] - v530.i64[0]) >> 3;
            if (v249 <= v248 + 1)
              v249 = v248 + 1;
            if (v531.i64[0] - v530.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL)
              v241 = 0xFFFFFFFFFFFFFFFLL;
            else
              v241 = v249;
            if (v241)
              v250 = (char *)sub_1B17F7824((uint64_t)v517, v241);
            else
              v250 = 0;
            v251 = (float32x4_t *)&v250[16 * v248];
            v244.i32[3] = v520.i32[3];
            *v251 = v520;
            f32 = (_OWORD *)v251[1].f32;
            v252 = (float32x4_t *)v530.i64[1];
            v253 = (char *)v530.i64[0];
            if (v530.i64[1] != v530.i64[0])
            {
              do
              {
                v254 = v252[-1];
                --v252;
                v244.i32[3] = v254.i32[3];
                v251[-1] = v254;
                --v251;
              }
              while (v252 != (float32x4_t *)v253);
              v252 = (float32x4_t *)v530.i64[0];
            }
            v530.i64[0] = (uint64_t)v251;
            v530.i64[1] = (uint64_t)f32;
            v531.i64[0] = (uint64_t)&v250[16 * v241];
            if (v252)
              operator delete(v252);
          }
          else
          {
            *(float32x4_t *)v530.i64[1] = v244;
            f32 = (_OWORD *)(v246 + 16);
          }
          v530.i64[1] = (uint64_t)f32;
          if (isEqualToString)
          {
            v244.i64[0] = *(_QWORD *)v228;
            v244.i32[2] = *(_DWORD *)(v228 + 8);
            if (v181)
            {
              v255 = v518;
              v255.i32[3] = 0;
              v244.i32[3] = 0;
              v256 = vminnmq_f32(v255, v244);
              v257 = v519;
              v257.i32[3] = 0;
              v518 = v256;
              v519 = vmaxnmq_f32(v257, v244);
            }
            else
            {
              v181 = 1;
              v518 = v244;
              v519 = v244;
            }
          }
          v228 += objc_msgSend_dataStride(v194, (const char *)v241, v242, v243);
        }
      }
      v522 = objc_msgSend_semantic(v194, (const char *)v241, v242, v243);
      v260 = sub_1B197387C((void **)&v522, (const char *)i, v258, v259);
      v261 = qword_1EEF66B00;
      v265 = (void *)objc_msgSend_semantic(v194, v262, v263, v264);
      v182 = v514;
      v266 = v265;
      v269 = objc_msgSend_isEqualToString_(v265, v267, v513, v268);
      v272 = &qword_1EEF66BC0;
      if ((v269 & 1) == 0)
      {
        v273 = objc_msgSend_isEqualToString_(v266, v270, (uint64_t)v511, v271);
        v272 = &qword_1EEF66BB8;
        if ((v273 & 1) == 0)
        {
          v275 = objc_msgSend_isEqualToString_(v266, v270, (uint64_t)v503, v274);
          v272 = &qword_1EEF66BD0;
          if ((v275 & 1) == 0)
          {
            v277 = objc_msgSend_isEqualToString_(v266, v270, (uint64_t)v510, v276);
            v272 = &qword_1EEF66BB0;
            if (v277)
              v272 = &qword_1EEF66BA8;
          }
        }
      }
      v278 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v270, (uint64_t)v508, (uint64_t)v260, v261, *v272);
      objc_msgSend_setFloat3Array_count_(v278, v279, v530.i64[0], v198);
      if ((_DWORD)i)
      {
        if ((isEqualToString & 1) == 0)
        {
          v283 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v280, (uint64_t)CFSTR("faceVarying"), v282);
          v286 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v284, v283, v285);
          objc_msgSend_setMetadataWithKey_value_(v278, v287, (uint64_t)CFSTR("interpolation"), v286);
        }
        v522 = objc_msgSend_semantic(v194, v280, v281, v282);
        v291 = sub_1B1973940((void **)&v522, v288, v289, v290);
        v296 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v292, (uint64_t)v508, (uint64_t)v291, qword_1EEF66B10, qword_1EEF66BB0);
        if (v504)
        {
          v297 = (void *)objc_msgSend_meshSourceChannels(v509, v293, v294, v295);
          v300 = (void *)objc_msgSend_objectAtIndexedSubscript_(v297, v298, v516, v299);
          v304 = objc_msgSend_intValue(v300, v301, v302, v303);
        }
        else
        {
          v304 = 0;
        }
        objc_msgSend_setIntArray_count_(v296, v293, (uint64_t)v521[3 * v304], ((_BYTE *)v521[3 * v304 + 1] - (_BYTE *)v521[3 * v304]) >> 2);
      }
      else
      {
        v305 = (void *)objc_msgSend_semantic(v194, v280, v281, v282);
        if (objc_msgSend_isEqualToString_(v305, v306, (uint64_t)v510, v307))
        {
          v308 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v178, (uint64_t)CFSTR("vertex"), v180);
          v311 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v309, v308, v310);
          objc_msgSend_setMetadataWithKey_value_(v278, v312, (uint64_t)CFSTR("interpolation"), v311);
        }
      }
      if (v530.i64[0])
      {
        v530.i64[1] = v530.i64[0];
        operator delete((void *)v530.i64[0]);
      }
    }
    else
    {
      v313 = (void *)objc_msgSend_semantic(v194, v238, v239, v240);
      if (objc_msgSend_isEqualToString_(v313, v314, (uint64_t)v503, v315))
      {
        v530 = 0uLL;
        v531.i64[0] = 0;
        sub_1B19739F4((void **)&v530, v198);
        if (v198 >= 1)
        {
          for (ii = 0; ii != v198; ++ii)
          {
            v319.i32[0] = *(_DWORD *)v228;
            v319.f32[1] = 1.0 - *(float *)(v228 + 4);
            v321 = v530.i64[1];
            if (v530.i64[1] >= (unint64_t)v531.i64[0])
            {
              v520 = v319;
              v323 = (v530.i64[1] - v530.i64[0]) >> 3;
              if ((unint64_t)(v323 + 1) >> 61)
                abort();
              v324 = (v531.i64[0] - v530.i64[0]) >> 2;
              if (v324 <= v323 + 1)
                v324 = v323 + 1;
              if (v531.i64[0] - v530.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL)
                v316 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v316 = v324;
              if (v316)
                v325 = (char *)sub_1B17F812C((uint64_t)v517, v316);
              else
                v325 = 0;
              v326 = &v325[8 * v323];
              *(_QWORD *)v326 = v520.i64[0];
              v322 = v326 + 8;
              v327 = (char *)v530.i64[1];
              v328 = (char *)v530.i64[0];
              if (v530.i64[1] != v530.i64[0])
              {
                do
                {
                  v329 = *((_QWORD *)v327 - 1);
                  v327 -= 8;
                  *((_QWORD *)v326 - 1) = v329;
                  v326 -= 8;
                }
                while (v327 != v328);
                v327 = (char *)v530.i64[0];
              }
              v530.i64[0] = (uint64_t)v326;
              v530.i64[1] = (uint64_t)v322;
              v531.i64[0] = (uint64_t)&v325[8 * v316];
              if (v327)
                operator delete(v327);
            }
            else
            {
              *(_QWORD *)v530.i64[1] = v319.i64[0];
              v322 = (_QWORD *)(v321 + 8);
            }
            v530.i64[1] = (uint64_t)v322;
            v228 += objc_msgSend_dataStride(v194, (const char *)v316, v317, v318);
          }
        }
        v522 = objc_msgSend_semantic(v194, (const char *)v316, v317, v318);
        v334 = (void *)sub_1B197387C((void **)&v522, 0, v330, v331);
        v335 = v514;
        if ((int)v514 >= 1)
        {
          v336 = (void *)objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v332, v514, v333);
          v340 = objc_msgSend_stringValue(v336, v337, v338, v339);
          v334 = (void *)objc_msgSend_stringByAppendingString_(v334, v341, v340, v342);
        }
        v343 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v332, (uint64_t)v508, (uint64_t)v334, qword_1EEF66AF8, qword_1EEF66BD0);
        objc_msgSend_setFloat2Array_count_(v343, v344, v530.i64[0], v198);
        if ((_DWORD)i)
        {
          v347 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v345, (uint64_t)CFSTR("faceVarying"), v346);
          v350 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v348, v347, v349);
          objc_msgSend_setMetadataWithKey_value_(v343, v351, (uint64_t)CFSTR("interpolation"), v350);
          v522 = objc_msgSend_semantic(v194, v352, v353, v354);
          v358 = sub_1B1973940((void **)&v522, v355, v356, v357);
          v363 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v359, (uint64_t)v508, (uint64_t)v358, qword_1EEF66B10, qword_1EEF66BB0);
          if (v504)
          {
            v364 = (void *)objc_msgSend_meshSourceChannels(v509, v360, v361, v362);
            v367 = (void *)objc_msgSend_objectAtIndexedSubscript_(v364, v365, v516, v366);
            v371 = objc_msgSend_intValue(v367, v368, v369, v370);
          }
          else
          {
            v371 = 0;
          }
          objc_msgSend_setIntArray_count_(v363, v360, (uint64_t)v521[3 * v371], ((_BYTE *)v521[3 * v371 + 1] - (_BYTE *)v521[3 * v371]) >> 2);
        }
        else
        {
          v372 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v345, (uint64_t)CFSTR("vertex"), v346);
          v375 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v373, v372, v374);
          objc_msgSend_setMetadataWithKey_value_(v343, v376, (uint64_t)CFSTR("interpolation"), v375);
        }
        if (v530.i64[0])
        {
          v530.i64[1] = v530.i64[0];
          operator delete((void *)v530.i64[0]);
        }
        v182 = v335 + 1;
      }
      else
      {
        v182 = v514;
      }
    }
    ++v516;
  }
  if (v181)
  {
    v377 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v188, (uint64_t)v508, (uint64_t)CFSTR("extent"), qword_1EEF66B00, qword_1EEF66BB0);
    v530 = v518;
    v531 = v519;
    objc_msgSend_setFloat3Array_count_(v377, v378, (uint64_t)&v530, 2);
  }
  if (objc_msgSend_meshElementCount(v509, v188, v189, v190) > 1)
  {
    v530 = 0uLL;
    v531.i64[0] = 0;
    v397 = (void *)MEMORY[0x1E0C99E20];
    v398 = objc_msgSend_meshElementCount(v509, v379, v380, v381);
    v520.i64[0] = objc_msgSend_setWithCapacity_(v397, v399, v398, v400);
    v404 = 0;
    for (jj = 0; (uint64_t)jj < objc_msgSend_meshElementCount(v509, v401, v402, v403); ++jj)
    {
      v408 = (void *)objc_msgSend_meshElementAtIndex_(v509, v406, jj, v407);
      v412 = (void *)objc_msgSend_materials(v507, v409, v410, v411);
      if (jj >= objc_msgSend_count(v412, v413, v414, v415))
      {
        Material = (void *)objc_msgSend_firstMaterial(v507, v416, v417, v418);
      }
      else
      {
        v419 = (void *)objc_msgSend_materials(v507, v416, v417, v418);
        Material = (void *)objc_msgSend_objectAtIndex_(v419, v420, jj, v421);
      }
      v426 = Material;
      if (Material)
      {
        v519.i64[0] = sub_1B1973A84(v505, Material, v424, v425);
        v430 = (void *)objc_msgSend_stringValue((void *)v519.i64[0], v427, v428, v429);
        PathComponent = objc_msgSend_lastPathComponent(v430, v431, v432, v433);
        v437 = (void *)objc_msgSend_stringByAppendingPathComponent_(v502, v435, PathComponent, v436);
        v440 = (void *)objc_msgSend_stringByAppendingString_(v437, v438, (uint64_t)CFSTR("_meshGroup"), v439);
        if (objc_msgSend_containsObject_((void *)v520.i64[0], v441, (uint64_t)v440, v442))
        {
          v445 = (void *)objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], v443, jj, v444);
          v449 = objc_msgSend_stringValue(v445, v446, v447, v448);
          v440 = (void *)objc_msgSend_stringByAppendingString_(v440, v450, v449, v451);
        }
        objc_msgSend_addObject_((void *)v520.i64[0], v443, (uint64_t)v440, v444);
        v454 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v452, (uint64_t)v440, v453);
        v456 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v455, *(_QWORD *)(v505 + 56), v454, qword_1EEF66B68);
        v458 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v457, v456, (uint64_t)CFSTR("elementType"), qword_1EEF66B40, qword_1EEF66BB0);
        v461 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v459, (uint64_t)CFSTR("face"), v460);
        objc_msgSend_setTokenValue_(v458, v462, v461, v463);
        v465 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v464, v456, (uint64_t)CFSTR("familyName"), qword_1EEF66B40, qword_1EEF66BB0);
        v468 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v466, (uint64_t)CFSTR("materialBind"), v467);
        objc_msgSend_setTokenValue_(v465, v469, v468, v470);
        sub_1B17F8190((uint64_t)&v530, 0);
        for (kk = 0; objc_msgSend_primitiveCount(v408, (const char *)v471, v472, v473) > kk; ++kk)
        {
          v475 = v404 + kk;
          v476 = (char *)v530.i64[1];
          if (v530.i64[1] >= (unint64_t)v531.i64[0])
          {
            v478 = (char *)v530.i64[0];
            v479 = (v530.i64[1] - v530.i64[0]) >> 2;
            v480 = v479 + 1;
            if ((unint64_t)(v479 + 1) >> 62)
              abort();
            v481 = v531.i64[0] - v530.i64[0];
            if ((v531.i64[0] - v530.i64[0]) >> 1 > v480)
              v480 = v481 >> 1;
            if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFFCLL)
              v471 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v471 = v480;
            if (v471)
            {
              v482 = (char *)sub_1B17F7E58((uint64_t)&v531, v471);
              v476 = (char *)v530.i64[1];
              v478 = (char *)v530.i64[0];
            }
            else
            {
              v482 = 0;
            }
            v483 = &v482[4 * v479];
            *(_DWORD *)v483 = v475;
            v477 = v483 + 4;
            while (v476 != v478)
            {
              v484 = *((_DWORD *)v476 - 1);
              v476 -= 4;
              *((_DWORD *)v483 - 1) = v484;
              v483 -= 4;
            }
            v530.i64[0] = (uint64_t)v483;
            v530.i64[1] = (uint64_t)v477;
            v531.i64[0] = (uint64_t)&v482[4 * v471];
            if (v478)
              operator delete(v478);
          }
          else
          {
            *(_DWORD *)v530.i64[1] = v475;
            v477 = v476 + 4;
          }
          v530.i64[1] = (uint64_t)v477;
        }
        v485 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v471, v456, (uint64_t)CFSTR("indices"), qword_1EEF66B10, qword_1EEF66BB0);
        v486 = v530.i64[0];
        v490 = objc_msgSend_primitiveCount(v408, v487, v488, v489);
        objc_msgSend_setIntArray_count_(v485, v491, v486, v490);
        v493 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v492, v456, (uint64_t)CFSTR("material:binding"), qword_1EEF66B18, qword_1EEF66BB0);
        objc_msgSend_setObjectPath_(v493, v494, v519.i64[0], v495);
        if (!jj && objc_msgSend_isDoubleSided(v426, v423, v424, v425))
        {
          v496 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v423, (uint64_t)v508, (uint64_t)CFSTR("doubleSided"), qword_1EEF66AB8, qword_1EEF66BB0);
          objc_msgSend_setBoolValue_(v496, v497, 1, v498);
        }
      }
      v404 += objc_msgSend_primitiveCount(v408, v423, v424, v425);
    }
    if (v530.i64[0])
    {
      v530.i64[1] = v530.i64[0];
      operator delete((void *)v530.i64[0]);
    }
  }
  else
  {
    v384 = (void *)objc_msgSend_firstMaterial(v507, v379, v380, v381);
    if (v384)
    {
      v385 = sub_1B1973A84(v505, v384, v382, v383);
      v387 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v386, (uint64_t)v508, (uint64_t)CFSTR("material:binding"), qword_1EEF66B18, qword_1EEF66BB0);
      objc_msgSend_setObjectPath_(v387, v388, v385, v389);
      if (objc_msgSend_isDoubleSided(v384, v390, v391, v392))
      {
        v394 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v393, (uint64_t)v508, (uint64_t)CFSTR("doubleSided"), qword_1EEF66AB8, qword_1EEF66BB0);
        objc_msgSend_setBoolValue_(v394, v395, 1, v396);
      }
    }
  }
  if (v506)
  {
    v499 = 3 * v506;
    do
    {
      v500 = v521[v499 - 3];
      if (v500)
      {
        v521[v499 - 2] = v500;
        operator delete(v500);
      }
      v499 -= 3;
    }
    while (v499 * 8);
  }
  if (v527)
  {
    v528 = v527;
    operator delete(v527);
  }
}

void sub_1B1972C48(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v3 = v1[6];
  if (v3)
  {
    v4 = 24 * v3;
    do
    {
      v5 = v1[24] + v4;
      v6 = *(void **)(v5 - 24);
      if (v6)
      {
        *(_QWORD *)(v5 - 16) = v6;
        operator delete(v6);
      }
      v4 -= 24;
    }
    while (v4);
  }
  v7 = (void *)v1[35];
  if (v7)
  {
    v1[36] = v7;
    operator delete(v7);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B1972D98(uint64_t a1, char *a2, void *a3, void *a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t result;
  unint64_t i;
  void *v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  int isEqualToString;
  void *v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  const char *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  const char *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  int64_t v111;
  int64_t v112;
  void *v113;
  void *v114;
  unint64_t v115;
  void *v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  void *v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  const char *v137;
  uint64_t v138;
  int64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  int32x4_t v143;
  _BOOL4 v144;
  _BOOL4 v145;
  uint64_t j;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int32x4_t v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  void *v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int32x4_t v177;
  const char *v178;
  uint64_t v179;
  uint64_t v180;
  void *v181;
  const char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  float32x2_t *v193;
  int32x4_t v194;
  int32x4_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  float32x2_t *v208;
  int32x4_t v209;
  float32x4_t v210;
  int32x4_t *v211;
  int32x4_t *v212;
  uint64_t v213;
  unint64_t v214;
  char *v215;
  int32x4_t *v216;
  int32x4_t *v217;
  int32x4_t *v218;
  int32x4_t v219;
  int32x4_t *v220;
  int32x4_t *v221;
  uint64_t v222;
  unint64_t v223;
  char *v224;
  int32x4_t *v225;
  int32x4_t *v226;
  int32x4_t *v227;
  int32x4_t v228;
  char *v229;
  char *v230;
  char *v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  int v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  char v241;
  const char *v242;
  const __CFString *v243;
  void *v244;
  const char *v245;
  void *v246;
  const char *v247;
  uint64_t v248;
  char v249;
  const char *v250;
  const __CFString *v251;
  void *v252;
  const char *v253;
  void *v254;
  const char *v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  void *v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  void *v263;
  const char *v264;
  uint64_t v265;
  const char *v266;
  void *v267;
  const char *v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  unint64_t v274;
  BOOL v275;
  _QWORD *v276;
  unint64_t v278;
  void *v280;
  void *v281;
  uint64_t v283;
  uint64_t v284;
  __int128 v285;
  int32x4_t v286;
  float v287;
  int32x4_t v288;
  int32x4_t v289;
  int32x4_t v290;
  int32x4_t v291;
  char *v292;
  char *v293;
  char *v294;
  int32x4_t *v295;
  int32x4_t *v296;
  int32x4_t *v297;
  int32x4_t *v298;
  int32x4_t *v299;
  int32x4_t *v300;

  v5 = (void *)objc_msgSend_model(a4, a2, (uint64_t)a3, (uint64_t)a4);
  v9 = (void *)objc_msgSend_mesh(v5, v6, v7, v8);
  v278 = (unint64_t)a4;
  v13 = (void *)objc_msgSend_morpher(a4, v10, v11, v12);
  if (objc_msgSend_calculationMode(v13, v14, v15, v16))
  {
    v285 = 0uLL;
  }
  else
  {
    v20 = (void *)objc_msgSend_meshSources(v9, v17, v18, v19);
    result = objc_msgSend_count(v20, v21, v22, v23);
    if (result)
    {
      v285 = 0uLL;
      for (i = 0; i < result; ++i)
      {
        v26 = (void *)objc_msgSend_meshSources(v9, v17, v18, v19);
        v29 = (void *)objc_msgSend_objectAtIndexedSubscript_(v26, v27, i, v28);
        v33 = (void *)objc_msgSend_semantic(v29, v30, v31, v32);
        if ((objc_msgSend_isEqualToString_(v33, v34, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), v35) & 1) != 0)
        {
          *(_QWORD *)&v285 = v29;
        }
        else
        {
          v39 = (void *)objc_msgSend_semantic(v29, v36, v37, v38);
          isEqualToString = objc_msgSend_isEqualToString_(v39, v40, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), v41);
          v43 = (void *)*((_QWORD *)&v285 + 1);
          if (isEqualToString)
            v43 = v29;
          *((_QWORD *)&v285 + 1) = v43;
        }
        v44 = (void *)objc_msgSend_meshSources(v9, v36, v37, v38);
        result = objc_msgSend_count(v44, v45, v46, v47);
      }
    }
    else
    {
      v285 = 0uLL;
    }
    if (v285 == 0)
      return result;
  }
  v48 = (void *)MEMORY[0x1E0C99DE8];
  v49 = (void *)objc_msgSend_targets(v13, v17, v18, v19);
  v53 = objc_msgSend_count(v49, v50, v51, v52);
  v281 = (void *)objc_msgSend_arrayWithCapacity_(v48, v54, v53, v55);
  v56 = (void *)MEMORY[0x1E0C99DE8];
  v60 = (void *)objc_msgSend_targets(v13, v57, v58, v59);
  v64 = objc_msgSend_count(v60, v61, v62, v63);
  v280 = (void *)objc_msgSend_arrayWithCapacity_(v56, v65, v64, v66);
  v70 = (void *)objc_msgSend_targets(v13, v67, v68, v69);
  if (objc_msgSend_count(v70, v71, v72, v73))
  {
    v77 = 0;
    while (1)
    {
      v78 = (void *)objc_msgSend_targets(v13, v74, v75, v76);
      v81 = (void *)objc_msgSend_objectAtIndexedSubscript_(v78, v79, v77, v80);
      v84 = (void *)objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v82, v77, v83);
      v88 = objc_msgSend_stringValue(v84, v85, v86, v87);
      v91 = (const char *)objc_msgSend_stringByAppendingString_(CFSTR("blendShape"), v89, v88, v90);
      v94 = objc_msgSend_stringByAppendingPathComponent_(a3, v92, (uint64_t)v91, v93);
      v97 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v95, v94, v96);
      v99 = sub_1B1976F08(a1, v91, a3, v98);
      v102 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v100, v99, v101);
      objc_msgSend_addObject_(v281, v103, v102, v104);
      objc_msgSend_addObject_(v280, v105, v97, v106);
      v284 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v107, *(_QWORD *)(a1 + 56), v97, qword_1EEF66B98);
      v111 = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v298 = 0;
      v299 = 0;
      v300 = 0;
      v295 = 0;
      v296 = 0;
      v297 = 0;
      while (1)
      {
        v116 = (void *)objc_msgSend_meshSources(v81, v108, v109, v110);
        if (v115 >= objc_msgSend_count(v116, v117, v118, v119))
          break;
        v123 = (void *)objc_msgSend_meshSources(v81, v120, v121, v122);
        v126 = (void *)objc_msgSend_objectAtIndexedSubscript_(v123, v124, v115, v125);
        v130 = (void *)objc_msgSend_semantic(v126, v127, v128, v129);
        if (objc_msgSend_isEqualToString_(v130, v131, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), v132))
        {
          v112 = objc_msgSend_vectorCount(v126, v133, v134, v135);
          sub_1B19737F0((void **)&v298, v112);
          v113 = v126;
        }
        else
        {
          v136 = (void *)objc_msgSend_semantic(v126, v133, v134, v135);
          if (objc_msgSend_isEqualToString_(v136, v137, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), v138))
          {
            v111 = objc_msgSend_vectorCount(v126, v108, v109, v110);
            sub_1B19737F0((void **)&v295, v111);
            v114 = v126;
          }
        }
        ++v115;
      }
      if (v112 <= v111)
        v139 = v111;
      else
        v139 = v112;
      v292 = 0;
      v293 = 0;
      v294 = 0;
      sub_1B17F7530((void **)&v292, v139);
      if (v113)
        v144 = (objc_msgSend_calculationMode(v13, (const char *)v140, v141, v142) | (unint64_t)v285) != 0;
      else
        v144 = 0;
      v283 = v77;
      if (v114)
        v145 = (objc_msgSend_calculationMode(v13, (const char *)v140, v141, v142) | *((_QWORD *)&v285 + 1)) != 0;
      else
        v145 = 0;
      if (v139 >= 1)
      {
        for (j = 0; j != v139; ++j)
        {
          v143.i64[0] = 0;
          v290 = v143;
          v286 = v143;
          v287 = 0.0;
          v143.i64[0] = 0;
          v288 = v143;
          if (v144
            && (v147 = (void *)objc_msgSend_data(v113, (const char *)v140, v141, v142),
                v151 = objc_msgSend_bytes(v147, v148, v149, v150),
                v155 = objc_msgSend_dataOffset(v113, v152, v153, v154),
                v159 = v151 + v155 + objc_msgSend_dataStride(v113, v156, v157, v158) * j,
                v160.i64[0] = *(_QWORD *)v159,
                v288 = v160,
                v287 = *(float *)(v159 + 8),
                !objc_msgSend_calculationMode(v13, v161, v162, v163)))
          {
            v196 = (void *)objc_msgSend_data((void *)v285, (const char *)v140, v141, v142);
            v200 = objc_msgSend_bytes(v196, v197, v198, v199);
            v204 = objc_msgSend_dataOffset((void *)v285, v201, v202, v203);
            v208 = (float32x2_t *)(v200 + v204 + objc_msgSend_dataStride((void *)v285, v205, v206, v207) * j);
            v209.i64[1] = v288.i64[1];
            *(float32x2_t *)v209.i8 = vsub_f32(*(float32x2_t *)v288.i8, *v208);
            v288 = v209;
            v287 = v287 - v208[1].f32[0];
            if (v145)
            {
LABEL_37:
              v164 = (void *)objc_msgSend_data(v114, (const char *)v140, v141, v142);
              v168 = objc_msgSend_bytes(v164, v165, v166, v167);
              v172 = objc_msgSend_dataOffset(v114, v169, v170, v171);
              v176 = v168 + v172 + objc_msgSend_dataStride(v114, v173, v174, v175) * j;
              v177.i64[0] = *(_QWORD *)v176;
              v290 = v177;
              v177.i32[0] = *(_DWORD *)(v176 + 8);
              v286 = v177;
              if (!objc_msgSend_calculationMode(v13, v178, v179, v180))
              {
                v181 = (void *)objc_msgSend_data(*((void **)&v285 + 1), (const char *)v140, v141, v142);
                v185 = objc_msgSend_bytes(v181, v182, v183, v184);
                v189 = objc_msgSend_dataOffset(*((void **)&v285 + 1), v186, v187, v188);
                v193 = (float32x2_t *)(v185 + v189 + objc_msgSend_dataStride(*((void **)&v285 + 1), v190, v191, v192)
                                                   * j);
                v194.i64[1] = v290.i64[1];
                *(float32x2_t *)v194.i8 = vsub_f32(*(float32x2_t *)v290.i8, *v193);
                v290 = v194;
                v195 = v286;
                *(float *)v195.i32 = *(float *)v286.i32 - v193[1].f32[0];
                v286 = v195;
              }
            }
          }
          else if (v145)
          {
            goto LABEL_37;
          }
          *(int32x2_t *)v210.f32 = vrev64_s32(*(int32x2_t *)v288.i8);
          v210.i32[3] = vdup_lane_s32(*(int32x2_t *)&v290, 0).i32[1];
          v210.f32[2] = v287;
          v143 = (int32x4_t)vmvnq_s8((int8x16_t)vceqzq_f32(v210));
          if ((vmaxv_u16((uint16x4_t)vmovn_s32(v143)) & 1) == 0)
          {
            v143.i64[1] = v290.i64[1];
            if (*(float *)&v290.i32[1] == 0.0)
            {
              v143.i64[1] = v286.i64[1];
              if (*(float *)v286.i32 == 0.0)
                continue;
            }
          }
          if (v144)
          {
            v143 = v288;
            *(float *)&v143.i32[2] = v287;
            v211 = v299;
            if (v299 >= v300)
            {
              v289 = v143;
              v213 = v299 - v298;
              if ((unint64_t)(v213 + 1) >> 60)
                abort();
              v214 = ((char *)v300 - (char *)v298) >> 3;
              if (v214 <= v213 + 1)
                v214 = v213 + 1;
              if ((unint64_t)((char *)v300 - (char *)v298) >= 0x7FFFFFFFFFFFFFF0)
                v140 = 0xFFFFFFFFFFFFFFFLL;
              else
                v140 = v214;
              if (v140)
                v215 = (char *)sub_1B17F7824((uint64_t)&v300, v140);
              else
                v215 = 0;
              v216 = (int32x4_t *)&v215[16 * v213];
              v143.i64[1] = v289.i64[1];
              *v216 = v289;
              v212 = v216 + 1;
              v218 = v298;
              v217 = v299;
              if (v299 != v298)
              {
                do
                {
                  v219 = v217[-1];
                  --v217;
                  v143.i64[1] = v219.i64[1];
                  v216[-1] = v219;
                  --v216;
                }
                while (v217 != v218);
                v217 = v298;
              }
              v298 = v216;
              v299 = v212;
              v300 = (int32x4_t *)&v215[16 * v140];
              if (v217)
                operator delete(v217);
            }
            else
            {
              *v299 = v143;
              v212 = v211 + 1;
            }
            v299 = v212;
          }
          if (v145)
          {
            v143 = v290;
            v143.i32[2] = v286.i32[0];
            v220 = v296;
            if (v296 >= v297)
            {
              v291 = v143;
              v222 = v296 - v295;
              if ((unint64_t)(v222 + 1) >> 60)
                abort();
              v223 = ((char *)v297 - (char *)v295) >> 3;
              if (v223 <= v222 + 1)
                v223 = v222 + 1;
              if ((unint64_t)((char *)v297 - (char *)v295) >= 0x7FFFFFFFFFFFFFF0)
                v140 = 0xFFFFFFFFFFFFFFFLL;
              else
                v140 = v223;
              if (v140)
                v224 = (char *)sub_1B17F7824((uint64_t)&v297, v140);
              else
                v224 = 0;
              v225 = (int32x4_t *)&v224[16 * v222];
              v143.i64[1] = v291.i64[1];
              *v225 = v291;
              v221 = v225 + 1;
              v227 = v295;
              v226 = v296;
              if (v296 != v295)
              {
                do
                {
                  v228 = v226[-1];
                  --v226;
                  v143.i64[1] = v228.i64[1];
                  v225[-1] = v228;
                  --v225;
                }
                while (v226 != v227);
                v226 = v295;
              }
              v295 = v225;
              v296 = v221;
              v297 = (int32x4_t *)&v224[16 * v140];
              if (v226)
                operator delete(v226);
            }
            else
            {
              *v296 = v143;
              v221 = v220 + 1;
            }
            v296 = v221;
          }
          v229 = v293;
          if (v293 >= v294)
          {
            v231 = v292;
            v232 = (v293 - v292) >> 2;
            v233 = v232 + 1;
            if ((unint64_t)(v232 + 1) >> 62)
              abort();
            v234 = v294 - v292;
            if ((v294 - v292) >> 1 > v233)
              v233 = v234 >> 1;
            if ((unint64_t)v234 >= 0x7FFFFFFFFFFFFFFCLL)
              v140 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v140 = v233;
            if (v140)
            {
              v235 = (char *)sub_1B17F7E58((uint64_t)&v294, v140);
              v231 = v292;
              v229 = v293;
            }
            else
            {
              v235 = 0;
            }
            v236 = &v235[4 * v232];
            *(_DWORD *)v236 = j;
            v230 = v236 + 4;
            while (v229 != v231)
            {
              v237 = *((_DWORD *)v229 - 1);
              v229 -= 4;
              *((_DWORD *)v236 - 1) = v237;
              v236 -= 4;
            }
            v292 = v236;
            v293 = v230;
            v294 = &v235[4 * v140];
            if (v231)
              operator delete(v231);
          }
          else
          {
            *(_DWORD *)v293 = j;
            v230 = v229 + 4;
          }
          v293 = v230;
        }
      }
      if (v299 != v298)
        break;
LABEL_104:
      if (v296 != v295)
      {
        v246 = (void *)objc_msgSend_semantic(v114, (const char *)v140, v141, v142);
        v249 = objc_msgSend_isEqualToString_(v246, v247, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), v248);
        v251 = CFSTR("offsets");
        if ((v249 & 1) == 0)
        {
          if (objc_msgSend_isEqualToString_(v246, v250, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), (uint64_t)CFSTR("offsets")))
          {
            v252 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v250, v284, (uint64_t)CFSTR("normalOffsets"), qword_1EEF66B00, qword_1EEF66BC8);
LABEL_110:
            objc_msgSend_setFloat3Array_count_(v252, v253, (uint64_t)v295, v296 - v295);
            goto LABEL_111;
          }
          v251 = &stru_1E63FD500;
        }
        v252 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v250, v284, (uint64_t)v251, qword_1EEF66B00, qword_1EEF66BC8);
        goto LABEL_110;
      }
LABEL_111:
      v254 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v140, v284, (uint64_t)CFSTR("pointIndices"), qword_1EEF66B10, qword_1EEF66BB0);
      objc_msgSend_setIntArray_count_(v254, v255, (uint64_t)v292, (v293 - v292) >> 2);
      if (v292)
      {
        v293 = v292;
        operator delete(v292);
      }
      if (v295)
      {
        v296 = v295;
        operator delete(v295);
      }
      if (v298)
      {
        v299 = v298;
        operator delete(v298);
      }
      v77 = v283 + 1;
      v259 = (void *)objc_msgSend_targets(v13, v256, v257, v258);
      if (v283 + 1 >= (unint64_t)objc_msgSend_count(v259, v260, v261, v262))
        goto LABEL_118;
    }
    v238 = (void *)objc_msgSend_semantic(v113, (const char *)v140, v141, v142);
    v241 = objc_msgSend_isEqualToString_(v238, v239, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), v240);
    v243 = CFSTR("offsets");
    if ((v241 & 1) == 0)
    {
      if (objc_msgSend_isEqualToString_(v238, v242, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), (uint64_t)CFSTR("offsets")))
      {
        v244 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v242, v284, (uint64_t)CFSTR("normalOffsets"), qword_1EEF66B00, qword_1EEF66BC8);
LABEL_103:
        objc_msgSend_setFloat3Array_count_(v244, v245, (uint64_t)v298, v299 - v298);
        goto LABEL_104;
      }
      v243 = &stru_1E63FD500;
    }
    v244 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v242, v284, (uint64_t)v243, qword_1EEF66B00, qword_1EEF66BC8);
    goto LABEL_103;
  }
LABEL_118:
  v263 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v74, (uint64_t)a2, (uint64_t)CFSTR("skel:blendShapes"), qword_1EEF66B48, qword_1EEF66BB0);
  objc_msgSend_setTokenArray_(v263, v264, (uint64_t)v281, v265);
  v267 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v266, (uint64_t)a2, (uint64_t)CFSTR("skel:blendShapeTargets"), qword_1EEF66B20, qword_1EEF66BB0);
  objc_msgSend_setObjectPathArray_(v267, v268, (uint64_t)v280, v269);
  result = objc_msgSend_applyType_(a2, v270, qword_1EEF66BD8, v271);
  v272 = *(_QWORD **)(a1 + 424);
  if (v272)
  {
    v273 = a1 + 424;
    do
    {
      v274 = v272[4];
      v275 = v274 >= v278;
      if (v274 >= v278)
        v276 = v272;
      else
        v276 = v272 + 1;
      if (v275)
        v273 = (uint64_t)v272;
      v272 = (_QWORD *)*v276;
    }
    while (*v276);
    if (v273 != a1 + 424 && *(_QWORD *)(v273 + 32) <= v278)
      *(_QWORD *)(*(_QWORD *)(v273 + 40) + 24) = v281;
  }
  return result;
}

void sub_1B1973768(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;
  void *v5;

  v3 = *(void **)(v1 - 160);
  if (v3)
  {
    *(_QWORD *)(v1 - 152) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(v1 - 136);
  if (v4)
  {
    *(_QWORD *)(v1 - 128) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(v1 - 112);
  if (v5)
  {
    *(_QWORD *)(v1 - 104) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B19737F0(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B17F7824(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

const __CFString *sub_1B197387C(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4;
  const char *v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  const __CFString *v11;
  const __CFString *v12;
  BOOL v13;
  const char *v14;
  uint64_t v15;
  int isEqualToString;

  v4 = (int)a2;
  if ((objc_msgSend_isEqualToString_(*a1, a2, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), a4) & 1) != 0)
    return CFSTR("points");
  if (objc_msgSend_isEqualToString_(*a1, v6, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), v7))
  {
    v11 = CFSTR("normals");
    v12 = CFSTR("primvars:normals");
    v13 = v4 == 0;
  }
  else
  {
    if ((objc_msgSend_isEqualToString_(*a1, v9, (uint64_t)CFSTR("kGeometrySourceSemanticTexcoord"), v10) & 1) != 0)
      return CFSTR("primvars:st");
    isEqualToString = objc_msgSend_isEqualToString_(*a1, v14, (uint64_t)CFSTR("kGeometrySourceSemanticColor"), v15);
    v11 = &stru_1E63FD500;
    v12 = CFSTR("primvars:displayColor");
    v13 = isEqualToString == 0;
  }
  if (v13)
    return v11;
  else
    return v12;
}

const __CFString *sub_1B1973940(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  if ((objc_msgSend_isEqualToString_(*a1, a2, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), a4) & 1) != 0)
    return CFSTR("faceVertexIndices");
  if ((objc_msgSend_isEqualToString_(*a1, v5, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), v6) & 1) != 0)
    return CFSTR("primvars:normals:indices");
  if ((objc_msgSend_isEqualToString_(*a1, v8, (uint64_t)CFSTR("kGeometrySourceSemanticTexcoord"), v9) & 1) != 0)
    return CFSTR("primvars:st:indices");
  if (objc_msgSend_isEqualToString_(*a1, v10, (uint64_t)CFSTR("kGeometrySourceSemanticColor"), v11))
    return CFSTR("primvars:displayColor:indices");
  return &stru_1E63FD500;
}

void sub_1B19739F4(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B17F812C(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t sub_1B1973A84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t **v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t **v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  size_t size;
  std::string *p_str;
  std::string *p_p;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  __int128 v39;
  const char *v40;
  uint64_t v41;
  int v42;
  size_t v43;
  std::string *v44;
  std::string *v45;
  std::string *v46;
  std::string::size_type v47;
  std::string *v48;
  std::string::size_type v49;
  char v50;
  uint64_t v51;
  char *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  uint64_t i;
  const char *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  const char *v71;
  void *v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  const char *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  double v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  std::string::size_type v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  unint64_t v149;
  void **v150;
  BOOL v151;
  void *v152;
  _QWORD *v153;
  uint64_t v154;
  std::string::size_type v155;
  char *v156;
  std::string::size_type v157;
  std::string::size_type v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t *v161;
  void *v162;
  const char *v163;
  uint64_t v164;
  std::string::size_type v165;
  std::string::size_type v166;
  uint64_t v167;
  unint64_t v168;
  char *v169;
  uint64_t **v170;
  char *v171;
  std::string::size_type v172;
  uint64_t *v173;
  void *v174;
  uint64_t *v175;
  uint64_t v176;
  void *v177;
  const char *v178;
  uint64_t v179;
  const char *v180;
  uint64_t v181;
  const char *v182;
  uint64_t v183;
  void *v185;
  void *v186;
  void *v187;
  uint64_t **v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  std::string __p;
  void *v193;
  char v194;
  void *v195;
  std::string v196;
  std::string __str;
  _OWORD v198[2];
  uint64_t v199;
  _QWORD v200[5];

  v200[2] = *MEMORY[0x1E0C80C00];
  v195 = a2;
  v5 = *(_QWORD **)(a1 + 128);
  v6 = (uint64_t **)(a1 + 120);
  if (!v5)
    goto LABEL_12;
  v7 = a1 + 128;
  do
  {
    v8 = v5[4];
    v9 = v8 >= (unint64_t)a2;
    if (v8 >= (unint64_t)a2)
      v10 = v5;
    else
      v10 = v5 + 1;
    if (v9)
      v7 = (uint64_t)v5;
    v5 = (_QWORD *)*v10;
  }
  while (*v10);
  if (v7 != a1 + 128 && *(_QWORD *)(v7 + 32) <= (unint64_t)a2)
  {
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    return sub_1B181D66C((uint64_t **)(a1 + 120), (unint64_t *)&v195, (uint64_t)&unk_1B22458B0, (uint64_t **)&__p)[5];
  }
  else
  {
LABEL_12:
    v11 = (void *)objc_msgSend_name(a2, (const char *)a2, a3, a4);
    if (!v11 || (v15 = v11, !objc_msgSend_length(v11, v12, v13, v14)))
    {
      v16 = (void *)objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v12, *(_QWORD *)(a1 + 136), v14);
      v20 = objc_msgSend_stringValue(v16, v17, v18, v19);
      v15 = (void *)objc_msgSend_stringByAppendingString_(CFSTR("Material_"), v21, v20, v22);
    }
    v23 = (void *)sub_1B196D580(v15, v12);
    v27 = (char *)objc_msgSend_UTF8String(v23, v24, v25, v26);
    sub_1B1970F28(&__p, v27);
    v28 = (uint64_t **)(a1 + 144);
    v32 = (void **)(a1 + 152);
    v188 = v6;
    if ((void **)(a1 + 152) != sub_1B1970FD4(a1 + 144, (void **)&__p.__r_.__value_.__l.__data_))
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      p_str = &__str;
      sub_1B1975F50((uint64_t)&__str, size + 1);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
      if (size)
      {
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_p = &__p;
        else
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        memmove(p_str, p_p, size);
      }
      *(_WORD *)((char *)&p_str->__r_.__value_.__l.__data_ + size) = 95;
      std::to_string(&v196, *(_QWORD *)(a1 + 160));
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v36 = &v196;
      else
        v36 = (std::string *)v196.__r_.__value_.__r.__words[0];
      if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v37 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
      else
        v37 = v196.__r_.__value_.__l.__size_;
      v38 = std::string::append(&__str, (const std::string::value_type *)v36, v37);
      v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
      *(_QWORD *)&v198[1] = *((_QWORD *)&v38->__r_.__value_.__l + 2);
      v198[0] = v39;
      v38->__r_.__value_.__l.__size_ = 0;
      v38->__r_.__value_.__r.__words[2] = 0;
      v38->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v196.__r_.__value_.__l.__data_);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      if (v32 != sub_1B1970FD4(a1 + 144, (void **)v198))
      {
        v42 = 1;
        do
        {
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v43 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
          else
            v43 = __p.__r_.__value_.__l.__size_;
          sub_1B1975F50((uint64_t)&__str, v43 + 4);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v44 = &__str;
          else
            v44 = (std::string *)__str.__r_.__value_.__r.__words[0];
          if (v43)
          {
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &__p;
            else
              v45 = (std::string *)__p.__r_.__value_.__r.__words[0];
            memmove(v44, v45, v43);
          }
          strcpy((char *)v44 + v43, "_un_");
          std::to_string(&v196, v42);
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v46 = &v196;
          else
            v46 = (std::string *)v196.__r_.__value_.__r.__words[0];
          if ((v196.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v47 = HIBYTE(v196.__r_.__value_.__r.__words[2]);
          else
            v47 = v196.__r_.__value_.__l.__size_;
          v48 = std::string::append(&__str, (const std::string::value_type *)v46, v47);
          v49 = v48->__r_.__value_.__r.__words[0];
          v200[0] = v48->__r_.__value_.__l.__size_;
          *(_QWORD *)((char *)v200 + 7) = *(std::string::size_type *)((char *)&v48->__r_.__value_.__r.__words[1] + 7);
          v50 = HIBYTE(v48->__r_.__value_.__r.__words[2]);
          v48->__r_.__value_.__l.__size_ = 0;
          v48->__r_.__value_.__r.__words[2] = 0;
          v48->__r_.__value_.__r.__words[0] = 0;
          if (SBYTE7(v198[1]) < 0)
            operator delete(*(void **)&v198[0]);
          *(_QWORD *)&v198[0] = v49;
          *((_QWORD *)&v198[0] + 1) = v200[0];
          *(_QWORD *)((char *)v198 + 15) = *(_QWORD *)((char *)v200 + 7);
          BYTE7(v198[1]) = v50;
          if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v196.__r_.__value_.__l.__data_);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          ++v42;
        }
        while (v32 != sub_1B1970FD4((uint64_t)v28, (void **)v198));
      }
      if ((SBYTE7(v198[1]) & 0x80u) == 0)
        v51 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v40, (uint64_t)v198, v41);
      else
        v51 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v40, *(uint64_t *)&v198[0], v41);
      v23 = (void *)v51;
      v6 = v188;
      if (SBYTE7(v198[1]) < 0)
        operator delete(*(void **)&v198[0]);
    }
    v52 = (char *)objc_msgSend_UTF8String(v23, v29, v30, v31);
    sub_1B1970F28(v198, v52);
    sub_1B1975FD0(v28, (void **)v198, (uint64_t)v198);
    if (SBYTE7(v198[1]) < 0)
      operator delete(*(void **)&v198[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v56 = (void *)sub_1B19747E4(a1, v53, v54, v55);
    v59 = (void *)objc_msgSend_stringByAppendingPathComponent_(v56, v57, (uint64_t)v23, v58);
    i = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v60, (uint64_t)v59, v61);
    v190 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v63, *(_QWORD *)(a1 + 56), i, qword_1EEF66B58);
    v66 = objc_msgSend_stringByAppendingPathComponent_(v59, v64, (uint64_t)CFSTR("surfaceShader"), v65);
    v69 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v67, v66, v68);
    v191 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v70, *(_QWORD *)(a1 + 56), v69, qword_1EEF66B78);
    v72 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v71, v191, (uint64_t)CFSTR("info:id"), qword_1EEF66B40, qword_1EEF66BB0);
    v75 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v73, (uint64_t)CFSTR("UsdPreviewSurface"), v74);
    objc_msgSend_setTokenValue_(v72, v76, v75, v77);
    objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v78, v191, (uint64_t)CFSTR("outputs:surface"), qword_1EEF66B40, qword_1EEF66BB0);
    v82 = (void *)objc_msgSend_emission(v195, v79, v80, v81);
    if (objc_msgSend_selfIllumination(v195, v83, v84, v85))
    {
      v89 = (void *)objc_msgSend_selfIllumination(v195, v86, v87, v88);
      objc_msgSend_contents(v89, v90, v91, v92);
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (!objc_msgSend_emission(v195, v93, v94, v95)
          || (v99 = (void *)objc_msgSend_emission(v195, v96, v97, v98),
              objc_msgSend_contents(v99, v100, v101, v102),
              objc_opt_class(),
              (objc_opt_isKindOfClass() & 1) == 0)
          && (v106 = (void *)objc_msgSend_emission(v195, v103, v104, v105),
              objc_msgSend_contents(v106, v107, v108, v109),
              objc_opt_class(),
              (objc_opt_isKindOfClass() & 1) == 0))
        {
          v82 = (void *)objc_msgSend_selfIllumination(v195, v96, v97, v98);
        }
      }
    }
    memset(v198, 0, 24);
    sub_1B197484C((char **)v198, 8uLL);
    v113 = (void *)objc_msgSend_normal(v195, v110, v111, v112);
    sub_1B1970F28(&__str, "rgb");
    sub_1B197612C(&__p, (std::string::size_type)CFSTR("normal"), v113, (std::string::size_type *)&qword_1EEF66BB8, &__str, 0);
    sub_1B197494C((char **)v198, (__int128 *)&__p);
    if (v194 < 0)
      operator delete(v193);
    v187 = (void *)v69;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v117 = *((_QWORD *)&v198[0] + 1);
    if (!objc_msgSend_shadingModel(v195, v114, v115, v116))
    {
      v121 = (void *)objc_msgSend_metalness(v195, v118, v119, v120);
      sub_1B1970F28(&__str, "r");
      sub_1B197612C(&__p, (std::string::size_type)CFSTR("metallic"), v121, (std::string::size_type *)&qword_1EEF66BB0, &__str, 0);
      sub_1B197494C((char **)v198, (__int128 *)&__p);
      if (v194 < 0)
        operator delete(v193);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      v125 = (void *)objc_msgSend_roughness(v195, v122, v123, v124);
      sub_1B1970F28(&__str, "r");
      sub_1B197612C(&__p, (std::string::size_type)CFSTR("roughness"), v125, (std::string::size_type *)&qword_1EEF66BB0, &__str, 0);
      sub_1B197494C((char **)v198, (__int128 *)&__p);
      if (v194 < 0)
        operator delete(v193);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    v126 = (void *)objc_msgSend_diffuse(v195, v118, v119, v120);
    sub_1B1970F28(&__str, "rgb");
    sub_1B197612C(&__p, (std::string::size_type)CFSTR("diffuseColor"), v126, (std::string::size_type *)&qword_1EEF66BA8, &__str, 0);
    sub_1B197494C((char **)v198, (__int128 *)&__p);
    if (v194 < 0)
      operator delete(v193);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    sub_1B1970F28(&__str, "rgb");
    sub_1B197612C(&__p, (std::string::size_type)CFSTR("emissiveColor"), v82, (std::string::size_type *)&qword_1EEF66BA8, &__str, 0);
    sub_1B197494C((char **)v198, (__int128 *)&__p);
    if (v194 < 0)
      operator delete(v193);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v130 = (void *)objc_msgSend_transparent(v195, v127, v128, v129);
    sub_1B1970F28(&__str, "a");
    LODWORD(v131) = 1.0;
    v135 = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v132, v133, v134, v131);
    sub_1B197612C(&__p, (std::string::size_type)CFSTR("opacity"), v130, (std::string::size_type *)&qword_1EEF66BB0, &__str, v135);
    sub_1B197494C((char **)v198, (__int128 *)&__p);
    if (v194 < 0)
      operator delete(v193);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v139 = (void *)objc_msgSend_ambientOcclusion(v195, v136, v137, v138);
    sub_1B1970F28(&__str, "r");
    sub_1B197612C(&__p, (std::string::size_type)CFSTR("occlusion"), v139, (std::string::size_type *)&qword_1EEF66BB0, &__str, 0);
    sub_1B197494C((char **)v198, (__int128 *)&__p);
    if (v194 < 0)
      operator delete(v193);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    v144 = *((_QWORD *)&v198[0] + 1);
    v143 = *(_QWORD *)&v198[0];
    if (*(_QWORD *)&v198[0] != *((_QWORD *)&v198[0] + 1))
    {
      v189 = v117 - 80;
      do
      {
        v145 = *(void **)(v143 + 8);
        if (v145 && objc_msgSend_contents(v145, (const char *)v140, v141, v142))
          *(_QWORD *)(v143 + 56) = sub_1B1974AFC(a1, *(void **)(v143 + 8), v141, v142);
        v143 += 80;
      }
      while (v143 != v144);
      v146 = *((_QWORD *)&v198[0] + 1);
      v147 = *(_QWORD *)&v198[0];
      if (*((_QWORD *)&v198[0] + 1) != *(_QWORD *)&v198[0])
      {
        v185 = v59;
        v186 = (void *)i;
        v148 = 0;
        do
        {
          v149 = v147 + 80 * v148;
          v150 = (void **)(v149 + 56);
          if (*(_QWORD *)(v149 + 56))
            v151 = *(_QWORD *)(v149 + 64) == 0;
          else
            v151 = 0;
          if (v151)
          {
            v152 = *(void **)v149;
            memset(&__p, 0, sizeof(__p));
            v153 = sub_1B17F812C((uint64_t)&__p.__r_.__value_.__r.__words[2], 1uLL);
            *v153 = v149;
            v155 = (std::string::size_type)(v153 + 1);
            v156 = (char *)__p.__r_.__value_.__l.__size_;
            v157 = __p.__r_.__value_.__r.__words[0];
            v158 = (std::string::size_type)v153;
            if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
            {
              do
              {
                v159 = *((_QWORD *)v156 - 1);
                v156 -= 8;
                *(_QWORD *)(v158 - 8) = v159;
                v158 -= 8;
              }
              while (v156 != (char *)v157);
              v156 = (char *)__p.__r_.__value_.__r.__words[0];
            }
            __p.__r_.__value_.__r.__words[0] = v158;
            __p.__r_.__value_.__l.__size_ = (std::string::size_type)(v153 + 1);
            __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v153[v140];
            if (v156)
              operator delete(v156);
            __p.__r_.__value_.__l.__size_ = v155;
            ++v148;
            v146 = *((_QWORD *)&v198[0] + 1);
            v147 = *(_QWORD *)&v198[0];
            v160 = v148;
            if (v148 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v198[0] + 1) - *(_QWORD *)&v198[0]) >> 4))
            {
              do
              {
                v161 = (uint64_t *)(v147 + 80 * v160);
                if (objc_msgSend_isEqualToString_(*v150, (const char *)v140, v161[7], v154, v185, v186))
                {
                  v162 = (void *)objc_msgSend_stringByAppendingString_(v152, (const char *)v140, (uint64_t)CFSTR("_"), v154);
                  v152 = (void *)objc_msgSend_stringByAppendingString_(v162, v163, *v161, v164);
                  v165 = __p.__r_.__value_.__l.__size_;
                  if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
                  {
                    v167 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 3;
                    if ((unint64_t)(v167 + 1) >> 61)
                      abort();
                    v168 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 2;
                    if (v168 <= v167 + 1)
                      v168 = v167 + 1;
                    if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF8)
                      v140 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v140 = v168;
                    if (v140)
                      v169 = (char *)sub_1B17F812C((uint64_t)&__p.__r_.__value_.__r.__words[2], v140);
                    else
                      v169 = 0;
                    v170 = (uint64_t **)&v169[8 * v167];
                    *v170 = v161;
                    v166 = (std::string::size_type)(v170 + 1);
                    v171 = (char *)__p.__r_.__value_.__l.__size_;
                    v172 = __p.__r_.__value_.__r.__words[0];
                    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
                    {
                      do
                      {
                        v173 = (uint64_t *)*((_QWORD *)v171 - 1);
                        v171 -= 8;
                        *--v170 = v173;
                      }
                      while (v171 != (char *)v172);
                      v171 = (char *)__p.__r_.__value_.__r.__words[0];
                    }
                    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v170;
                    __p.__r_.__value_.__l.__size_ = v166;
                    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v169[8 * v140];
                    if (v171)
                      operator delete(v171);
                  }
                  else
                  {
                    *(_QWORD *)__p.__r_.__value_.__l.__size_ = v161;
                    v166 = v165 + 8;
                  }
                  __p.__r_.__value_.__l.__size_ = v166;
                }
                ++v160;
                v146 = *((_QWORD *)&v198[0] + 1);
                v147 = *(_QWORD *)&v198[0];
              }
              while (v160 < 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v198[0] + 1) - *(_QWORD *)&v198[0]) >> 4));
              v155 = __p.__r_.__value_.__l.__size_;
            }
            v174 = (void *)__p.__r_.__value_.__r.__words[0];
            v175 = (uint64_t *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__r.__words[0] != v155)
            {
              do
              {
                v176 = *v175++;
                *(_QWORD *)(v176 + 64) = v152;
              }
              while (v175 != (uint64_t *)v155);
            }
            if (v174)
            {
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v174;
              operator delete(v174);
              v146 = *((_QWORD *)&v198[0] + 1);
              v147 = *(_QWORD *)&v198[0];
            }
          }
          else
          {
            ++v148;
          }
        }
        while (v148 < 0xCCCCCCCCCCCCCCCDLL * ((v146 - v147) >> 4));
        v6 = v188;
        for (i = (uint64_t)v186; v147 != v146; v147 += 80)
          sub_1B1974FF4(a1, v147, v189, v185, v191, v190, v186);
      }
    }
    v177 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v140, v190, (uint64_t)CFSTR("outputs:surface"), qword_1EEF66B40, qword_1EEF66BB0, v185, v186);
    v199 = objc_msgSend_pathByAppendingPropertyComponent_(v187, v178, (uint64_t)CFSTR("outputs:surface"), v179);
    v181 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v180, (uint64_t)&v199, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v177, v182, v181, v183);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v195;
    sub_1B181D66C(v6, (unint64_t *)&v195, (uint64_t)&unk_1B22458B0, (uint64_t **)&__str)[5] = i;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v198;
    sub_1B1976E7C((void ***)&__p);
  }
  return i;
}

void sub_1B1974658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a29 < 0)
    operator delete(__p);
  if (a46 < 0)
    operator delete(a41);
  a18 = (void *)(v46 - 160);
  sub_1B1976E7C((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19747E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  result = *(_QWORD *)(a1 + 40);
  if (!result)
  {
    v6 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 24), a2, (uint64_t)CFSTR("Materials"), a4);
    *(_QWORD *)(a1 + 40) = v6;
    v9 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v7, v6, v8);
    objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v10, *(_QWORD *)(a1 + 56), v9, qword_1EEF66B70);
    return *(_QWORD *)(a1 + 40);
  }
  return result;
}

uint64_t sub_1B197484C(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int64x2_t v14;
  char *v15;
  uint64_t v16;
  int64x2_t v17;
  char *v18;
  uint64_t v19;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 4) < a2)
  {
    if (a2 >= 0x333333333333334)
      abort();
    v5 = a1[1] - *a1;
    v19 = result;
    v6 = (char *)sub_1B1976060(result, a2);
    v9 = *a1;
    v8 = (unint64_t)a1[1];
    if ((char *)v8 == *a1)
    {
      v14 = vdupq_n_s64(v8);
      v10 = &v6[v5];
    }
    else
    {
      v10 = &v6[v5];
      do
      {
        v11 = *(_OWORD *)(v8 - 80);
        *((_QWORD *)v10 - 8) = *(_QWORD *)(v8 - 64);
        *((_OWORD *)v10 - 5) = v11;
        v12 = *(_OWORD *)(v8 - 56);
        *((_QWORD *)v10 - 5) = *(_QWORD *)(v8 - 40);
        *(_OWORD *)(v10 - 56) = v12;
        *(_QWORD *)(v8 - 48) = 0;
        *(_QWORD *)(v8 - 40) = 0;
        *(_QWORD *)(v8 - 56) = 0;
        v13 = *(_OWORD *)(v8 - 16);
        *((_OWORD *)v10 - 2) = *(_OWORD *)(v8 - 32);
        *((_OWORD *)v10 - 1) = v13;
        v10 -= 80;
        v8 -= 80;
      }
      while ((char *)v8 != v9);
      v14 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    v17 = v14;
    v15 = a1[2];
    a1[2] = &v6[80 * v7];
    v18 = v15;
    v16 = v14.i64[0];
    return sub_1B19760A4((uint64_t)&v16);
  }
  return result;
}

uint64_t sub_1B197494C(char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  int64x2_t v27;
  char *v28;
  uint64_t v29;
  int64x2_t v30;
  char *v31;
  uint64_t v32;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (v7 >= v6)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v13 = v12 + 1;
    if (v12 + 1 > 0x333333333333333)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (_QWORD)*a1) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x199999999999999)
      v15 = 0x333333333333333;
    else
      v15 = v13;
    v32 = result;
    if (v15)
      v16 = (char *)sub_1B1976060(result, v15);
    else
      v16 = 0;
    v17 = &v16[80 * v12];
    v18 = *a2;
    *((_QWORD *)v17 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v17 = v18;
    v19 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v17 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v20 = a2[4];
    *((_OWORD *)v17 + 3) = a2[3];
    *((_OWORD *)v17 + 4) = v20;
    v22 = *a1;
    v21 = (unint64_t)a1[1];
    if ((char *)v21 == *a1)
    {
      v27 = vdupq_n_s64(v21);
      v23 = &v16[80 * v12];
    }
    else
    {
      v23 = &v16[80 * v12];
      do
      {
        v24 = *(_OWORD *)(v21 - 80);
        *((_QWORD *)v23 - 8) = *(_QWORD *)(v21 - 64);
        *((_OWORD *)v23 - 5) = v24;
        v25 = *(_OWORD *)(v21 - 56);
        *((_QWORD *)v23 - 5) = *(_QWORD *)(v21 - 40);
        *(_OWORD *)(v23 - 56) = v25;
        *(_QWORD *)(v21 - 48) = 0;
        *(_QWORD *)(v21 - 40) = 0;
        *(_QWORD *)(v21 - 56) = 0;
        v26 = *(_OWORD *)(v21 - 16);
        *((_OWORD *)v23 - 2) = *(_OWORD *)(v21 - 32);
        *((_OWORD *)v23 - 1) = v26;
        v23 -= 80;
        v21 -= 80;
      }
      while ((char *)v21 != v22);
      v27 = *(int64x2_t *)a1;
    }
    v11 = v17 + 80;
    *a1 = v23;
    a1[1] = v17 + 80;
    v30 = v27;
    v28 = a1[2];
    a1[2] = &v16[80 * v15];
    v31 = v28;
    v29 = v27.i64[0];
    result = sub_1B19760A4((uint64_t)&v29);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = a2[4];
    *(_OWORD *)(v7 + 48) = a2[3];
    *(_OWORD *)(v7 + 64) = v10;
    v11 = (char *)(v7 + 80);
  }
  a1[1] = v11;
  return result;
}

uint64_t sub_1B1974AFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  _QWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *PathComponent;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  __CFString *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  uint64_t CFXImageRef;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  uint64_t **v104;
  uint64_t v105;
  unint64_t v106;
  BOOL v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const __CFData *v117;
  CGImageSource *v118;
  CFStringRef Type;
  const char *v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const void *v135;
  CGImageRef v136;
  void *v138;
  uint64_t *v139;
  const char *v140;
  uint64_t v141;
  _QWORD *v142;
  _QWORD v144[5];
  _QWORD v145[5];
  _QWORD v146[2];
  void *(*v147)(uint64_t, const char *, uint64_t, uint64_t);
  void *v148;
  void *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  unint64_t v153;
  uint64_t *v154;

  v6 = objc_msgSend_contents(a2, (const char *)a2, a3, a4);
  v10 = *(_QWORD **)(a1 + 176);
  if (v10)
  {
    v11 = a1 + 176;
    do
    {
      v12 = v10[4];
      v13 = v12 >= v6;
      if (v12 >= v6)
        v14 = v10;
      else
        v14 = v10 + 1;
      if (v13)
        v11 = (uint64_t)v10;
      v10 = (_QWORD *)*v14;
    }
    while (*v14);
    if (v11 != a1 + 176 && v6 >= *(_QWORD *)(v11 + 32))
    {
      v153 = objc_msgSend_contents(a2, v7, v8, v9);
      v154 = (uint64_t *)&v153;
      return sub_1B181D66C((uint64_t **)(a1 + 168), &v153, (uint64_t)&unk_1B22458B0, &v154)[5];
    }
  }
  v153 = 0;
  objc_msgSend_contents(a2, v7, v8, v9);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    || (objc_msgSend_contents(a2, v15, v16, v17), objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)
    || objc_msgSend_contentsAbsoluteURL(a2, v15, v16, v17))
  {
    v18 = (void *)objc_msgSend_contentsAbsoluteURL(a2, v15, v16, v17);
    v22 = sub_1B19766CC(v18);
    if (v22 || (v23 = (void *)objc_msgSend_contents(a2, v19, v20, v21), (v22 = sub_1B19766CC(v23)) != 0))
    {
      v24 = (void *)objc_msgSend_pathExtension(v22, v19, v20, v21);
      v28 = objc_msgSend_lowercaseString(v24, v25, v26, v27);
      PathComponent = (void *)objc_msgSend_lastPathComponent(v22, v29, v30, v31);
      v36 = (void *)objc_msgSend_stringByDeletingPathExtension(PathComponent, v33, v34, v35);
      v38 = (void *)sub_1B196D580(v36, v37);
      v41 = (void *)objc_msgSend_stringByAppendingPathExtension_(v38, v39, v28, v40);
      LOBYTE(v154) = 0;
      v42 = sub_1B19761FC(a1, v41, v22, &v154);
      if ((int)v42 < 1)
      {
        v52 = CFSTR("textures");
        v55 = objc_msgSend_stringByAppendingPathComponent_(CFSTR("textures"), v43, (uint64_t)v41, v44);
      }
      else
      {
        v45 = (void *)objc_msgSend_numberWithInt_(MEMORY[0x1E0CB37E8], v43, v42, v44);
        v49 = objc_msgSend_stringValue(v45, v46, v47, v48);
        v52 = (__CFString *)objc_msgSend_stringByAppendingPathComponent_(CFSTR("textures"), v50, v49, v51);
        v55 = objc_msgSend_stringByAppendingPathComponent_(v52, v53, (uint64_t)v41, v54);
      }
      v58 = v55;
      if ((_BYTE)v154)
      {
        v59 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v56, v55, v57);
        v63 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v60, v61, v62);
        v66 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v64, (uint64_t)v52, v65);
        objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v63, v67, v66, 1, 0, &v153);
        objc_msgSend_copyItemAtPath_toPath_error_(v63, v68, (uint64_t)v22, v59, &v153);
      }
      return v58;
    }
  }
  else
  {
    objc_msgSend_contents(a2, v15, v16, v17);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v69 = objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v19, (uint64_t)CFSTR("texgen_%lu.png"), v21, *(_QWORD *)(a1 + 184));
      v58 = objc_msgSend_stringByAppendingPathComponent_(CFSTR("textures"), v70, v69, v71);
      v74 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v72, v58, v73);
      v152 = objc_msgSend_contents(a2, v75, v76, v77);
      v154 = &v152;
      sub_1B181D66C((uint64_t **)(a1 + 168), (unint64_t *)&v152, (uint64_t)&unk_1B22458B0, &v154)[5] = v58;
      v81 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v78, v79, v80);
      v84 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 16), v82, (uint64_t)CFSTR("textures"), v83);
      objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v81, v85, v84, 1, 0, &v153);
      v89 = (void *)objc_msgSend_contents(a2, v86, v87, v88);
      v92 = objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v90, v74, v91);
      objc_msgSend_writeToURL_(v89, v93, v92, v94);
      return v58;
    }
  }
  CFXImageRef = objc_msgSend_getCFXImageRef(a2, v19, v20, v21);
  v152 = CFXImageRef;
  if (!CFXImageRef)
    return 0;
  v102 = CFXImageRef;
  v103 = *(_QWORD **)(a1 + 200);
  if (v103)
  {
    v104 = (uint64_t **)(a1 + 192);
    v105 = a1 + 200;
    do
    {
      v106 = v103[4];
      v107 = v106 >= v102;
      if (v106 >= v102)
        v108 = v103;
      else
        v108 = v103 + 1;
      if (v107)
        v105 = (uint64_t)v103;
      v103 = (_QWORD *)*v108;
    }
    while (*v108);
    if (v105 != a1 + 200 && v102 >= *(_QWORD *)(v105 + 32))
    {
      v138 = (void *)MEMORY[0x1E0CB3940];
      v154 = &v152;
      v139 = sub_1B1976D68(v104, (unint64_t *)&v152, (uint64_t)&unk_1B22458B0, &v154);
      v142 = v139 + 5;
      if (*((char *)v139 + 63) < 0)
        v142 = (_QWORD *)*v142;
      return objc_msgSend_stringWithUTF8String_(v138, v140, (uint64_t)v142, v141);
    }
  }
  v109 = MEMORY[0x1E0C809B0];
  v146[0] = MEMORY[0x1E0C809B0];
  v146[1] = 3221225472;
  v147 = sub_1B19764C8;
  v148 = &unk_1E63D9FA0;
  v149 = a2;
  v150 = a1;
  v151 = v102;
  v117 = (const __CFData *)sub_1B180A3F0(v102, 0, v96, v97, v98, v99, v100, v101);
  if (!v117)
  {
    v135 = (const void *)sub_1B180A64C(v102, v110, v111, v112, v113, v114, v115, v116);
    if (!v135)
      goto LABEL_42;
    v117 = (const __CFData *)CFRetain(v135);
    if (!v117)
      goto LABEL_42;
  }
  v118 = CGImageSourceCreateWithData(v117, 0);
  Type = CGImageSourceGetType(v118);
  v122 = (void *)objc_msgSend_typeWithIdentifier_(MEMORY[0x1E0CEC3F8], v120, (uint64_t)Type, v121);
  v126 = (const char *)objc_msgSend_preferredFilenameExtension(v122, v123, v124, v125);
  v145[0] = v109;
  v145[1] = 3221225472;
  v145[2] = sub_1B1976618;
  v145[3] = &unk_1E63D9FC0;
  v145[4] = v117;
  v58 = (uint64_t)sub_1B19764C8((uint64_t)v146, v126, (uint64_t)v145, v127);
  CFRelease(v117);
  CFRelease(v118);
  if (!v58)
  {
LABEL_42:
    v136 = sub_1B1809CAC(v102, v128, v129, v130, v131, v132, v133, v134);
    if (v136)
    {
      v144[0] = v109;
      v144[1] = 3221225472;
      v144[2] = sub_1B1976628;
      v144[3] = &unk_1E63D9FC0;
      v144[4] = v136;
      return ((uint64_t (*)(_QWORD *, const __CFString *, _QWORD *))v147)(v146, CFSTR("png"), v144);
    }
    return 0;
  }
  return v58;
}

void *sub_1B1974FF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *a7)
{
  void *v8;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  char isKindOfClass;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  const char *v62;
  double v63;
  double v64;
  uint64_t v65;
  int v66;
  unsigned __int8 *v67;
  int v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  float v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  __n128 v78;
  __n128 v79;
  __n128 v80;
  __n128 v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  __objc2_class *v85;
  unint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  const char *v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  const char *v103;
  void *v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  void *v111;
  const char *v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  unint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  float32x4_t v122;
  int32x2_t v123;
  int8x16_t v124;
  int32x2_t v125;
  float32x4_t v130;
  float32x4_t v131;
  int32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int32x4_t v136;
  unint64_t v137;
  float32x4_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  unint64_t v143;
  float32x4_t v144;
  int32x4_t v145;
  int32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  unint64_t v150;
  __n128 v151;
  float32x4_t v152;
  float32x4_t v153;
  const char *v154;
  double v155;
  float v156;
  int8x16_t v158;
  float32x2_t v159;
  float v160;
  float v163;
  double v164;
  int *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  int32x2_t v174;
  uint64_t v175;
  int v176;
  unsigned __int16 *v177;
  int v178;
  int v179;
  void *v181;
  double v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  float v192;
  uint64_t v193;
  float v194;
  void *v195;
  double v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  double v200;
  void *v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  double v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const char *v211;
  uint64_t v212;
  uint64_t v213;
  const char *v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  const char *v218;
  void *v219;
  const char *v220;
  uint64_t v221;
  uint64_t v222;
  const char *v223;
  uint64_t v224;
  const char *v225;
  uint64_t v226;
  const char *v227;
  void *v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  const char *v232;
  void *v233;
  const char *v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  const char *v241;
  void *v242;
  const char *v243;
  uint64_t v244;
  const char *v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  void *v249;
  const char *v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  const char *v259;
  void *v260;
  const char *v261;
  uint64_t v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  const char *v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  uint64_t v272;
  const char *v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  const char *v281;
  uint64_t v282;
  const __CFString *v283;
  uint64_t v284;
  const char *v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  void *v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  const char *v294;
  uint64_t v295;
  const __CFString *v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  const __CFString *v304;
  uint64_t v305;
  uint64_t *v306;
  uint64_t v307;
  const char *v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  const char *v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  const char *v322;
  uint64_t v323;
  const __CFString *v324;
  uint64_t v325;
  const char *v326;
  uint64_t v327;
  uint64_t v328;
  const char *v329;
  void *v330;
  const char *v331;
  uint64_t v332;
  const char *v333;
  uint64_t v334;
  const char *v335;
  uint64_t v336;
  void *v338;
  const char *v339;
  uint64_t v340;
  uint64_t v341;
  float v342;
  void *v343;
  double v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  __n128 v348;
  float32x4_t v349;
  float v350;
  float32x4_t v351;
  float v352;
  float32x4_t v353;
  float v354;
  void *v355;
  float v356;
  uint64_t v357;
  float v358;
  float v359;
  float v360;
  uint64_t v361;
  float v362;
  int32x2_t v363;
  float v364;
  float32x4_t v365;
  double v366;
  __n128 v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  __n128 v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  _QWORD v378[3];

  v378[1] = *MEMORY[0x1E0C80C00];
  v8 = *(void **)(a2 + 8);
  if (!v8 || !objc_msgSend_contents(v8, (const char *)a2, a3, (uint64_t)a4))
    return 0;
  if (!*(_QWORD *)(a2 + 56))
  {
    v52 = objc_msgSend_stringByAppendingString_(CFSTR("inputs:"), v15, *(_QWORD *)a2, v16);
    objc_msgSend_contents(*(void **)(a2 + 8), v53, v54, v55);
    objc_opt_class();
    isKindOfClass = objc_opt_isKindOfClass();
    v60 = (void *)objc_msgSend_contents(*(void **)(a2 + 8), v57, v58, v59);
    if ((isKindOfClass & 1) == 0)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v169 = (void *)objc_msgSend_contents(*(void **)(a2 + 8), v166, v167, v168);
        objc_msgSend_floatValue(v169, v170, v171, v172);
        v363 = v174;
        v175 = *(unsigned __int8 *)(a2 + 47);
        v176 = (char)v175;
        if ((v175 & 0x80u) != 0)
          v175 = *(_QWORD *)(a2 + 32);
        if (v175 == 3
          && (v176 >= 0 ? (v177 = (unsigned __int16 *)(a2 + 24)) : (v177 = *(unsigned __int16 **)(a2 + 24)),
              (v178 = *v177, v179 = *((unsigned __int8 *)v177 + 2), v178 == 26482) ? (_ZF = v179 == 98) : (_ZF = 0),
              _ZF))
        {
          v338 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v173, a5, v52, qword_1EEF66AE8, *(_QWORD *)(a2 + 16));
          objc_msgSend_setFloat3Value_(v338, v339, v340, v341, *(double *)vdupq_lane_s32(v363, 0).i64);
        }
        else
        {
          v181 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v173, a5, v52, qword_1EEF66AD8, *(_QWORD *)(a2 + 16));
          *(float *)&v182 = *(float *)v363.i32 * sub_1B1976E28(a2);
          objc_msgSend_setFloatValue_(v181, v183, v184, v185, v182);
        }
      }
      return 0;
    }
    v371.n128_u64[0] = 0;
    v366 = 0.0;
    v367.n128_u64[0] = 0;
    v365.i64[0] = 0;
    objc_msgSend_getRed_green_blue_alpha_(v60, v61, (uint64_t)&v371, (uint64_t)&v367, &v365, &v366);
    HIDWORD(v64) = v365.i32[1];
    *(float *)&v64 = *(double *)v365.i64;
    v65 = *(unsigned __int8 *)(a2 + 47);
    v66 = (char)v65;
    if ((v65 & 0x80u) != 0)
      v65 = *(_QWORD *)(a2 + 32);
    if (v65 == 1)
    {
      if (v66 >= 0)
        v67 = (unsigned __int8 *)(a2 + 24);
      else
        v67 = *(unsigned __int8 **)(a2 + 24);
      v68 = *v67;
      if (v68 == 103)
      {
        v360 = v367.n128_f64[0];
        *(float *)&v63 = v371.n128_f64[0];
        v69 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1EEF66AD8, *(_QWORD *)(a2 + 16), v64, v63);
        *(float *)&v73 = sub_1B1976E28(a2);
        v74 = v360;
        goto LABEL_52;
      }
      if (v68 == 114)
      {
        v362 = v371.n128_f64[0];
        v69 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1EEF66AD8, *(_QWORD *)(a2 + 16), v64);
        *(float *)&v73 = sub_1B1976E28(a2);
        v74 = v362;
LABEL_52:
        *(float *)&v73 = *(float *)&v73 * v74;
        objc_msgSend_setFloatValue_(v69, v70, v71, v72, v73);
        return 0;
      }
      v186 = *(_QWORD *)(a2 + 16);
      if (v68 == 98)
      {
        v358 = *(double *)v365.i64;
        v69 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1EEF66AD8, v186);
        *(float *)&v73 = sub_1B1976E28(a2);
        v74 = v358;
        goto LABEL_52;
      }
      if (v68 == 97)
      {
        v342 = v366;
        v343 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1EEF66AD8, v186);
        *(float *)&v344 = sub_1B1976E28(a2) * v342;
        objc_msgSend_setFloatValue_(v343, v345, v346, v347, v344);
        return 0;
      }
      v359 = v367.n128_f64[0];
      v364 = v371.n128_f64[0];
    }
    else
    {
      v359 = v367.n128_f64[0];
      v364 = v371.n128_f64[0];
      v186 = *(_QWORD *)(a2 + 16);
    }
    v187 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v62, a5, v52, qword_1EEF66AE8, v186);
    objc_msgSend_setFloat3Value_(v187, v188, v189, v190, COERCE_DOUBLE(__PAIR64__(LODWORD(v359), LODWORD(v364))));
    return 0;
  }
  v357 = a5;
  v17 = objc_msgSend_stringByAppendingString_(*(void **)(a2 + 48), v15, (uint64_t)CFSTR("_texCoordReader"), v16);
  v20 = objc_msgSend_stringByAppendingPathComponent_(a4, v18, v17, v19);
  v361 = a1;
  v355 = (void *)objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v21, v20, v22);
  v24 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v23, *(_QWORD *)(a1 + 56), (uint64_t)v355, qword_1EEF66B78);
  v26 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v25, v24, (uint64_t)CFSTR("info:id"), qword_1EEF66B40, qword_1EEF66BB0);
  v29 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v27, (uint64_t)CFSTR("UsdPrimvarReader_float2"), v28);
  objc_msgSend_setTokenValue_(v26, v30, v29, v31);
  objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v32, v24, (uint64_t)CFSTR("outputs:result"), qword_1EEF66AE0, qword_1EEF66BB0);
  v34 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v33, v24, (uint64_t)CFSTR("inputs:varname"), qword_1EEF66B40, qword_1EEF66BB0);
  if (objc_msgSend_isEqualToString_(*(void **)a2, v35, *(_QWORD *)a3, v36))
  {
    v39 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v37, a6, (uint64_t)CFSTR("inputs:frame:stPrimvarName"), qword_1EEF66B40, qword_1EEF66BB0);
    v42 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v40, *(_QWORD *)(a2 + 48), v41);
    objc_msgSend_setTokenValue_(v39, v43, v42, v44);
    v378[0] = objc_msgSend_pathByAppendingPropertyComponent_(a7, v45, (uint64_t)CFSTR("inputs:frame:stPrimvarName"), v46);
    v48 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v47, (uint64_t)v378, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v34, v49, v48, v50);
  }
  else if (!*(_QWORD *)(a3 + 56)
         || (objc_msgSend_isEqualToString_(*(void **)(a3 + 48), v37, *(_QWORD *)(a2 + 48), v38) & 1) == 0)
  {
    v75 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v37, *(_QWORD *)(a2 + 48), v38);
    objc_msgSend_setTokenValue_(v34, v76, v75, v77);
  }
  objc_msgSend_contentsTransform(*(void **)(a2 + 8), v37, v51, v38);
  v351 = (float32x4_t)v79;
  v353 = (float32x4_t)v78;
  v348 = v81;
  v349 = (float32x4_t)v80;
  if (!VFXMatrix4IsIdentity(v78, v79, v80, v81))
  {
    v88 = objc_msgSend_stringByAppendingString_(*(void **)(a2 + 64), v82, (uint64_t)CFSTR("_transform2D"), v83);
    v91 = objc_msgSend_stringByAppendingPathComponent_(a4, v89, v88, v90);
    v84 = (void *)objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v92, v91, v93);
    v85 = VFXReplicatorConstraint;
    v95 = (void *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v94, *(_QWORD *)(a1 + 56), (uint64_t)v84, qword_1EEF66B78);
    v98 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v96, (uint64_t)CFSTR("math"), v97);
    v101 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v99, v98, v100);
    objc_msgSend_setDictionaryMetadataWithKey_dictionaryKey_value_(v95, v102, (uint64_t)CFSTR("sdrMetadata"), (uint64_t)CFSTR("role"), v101);
    v104 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v103, (uint64_t)v95, (uint64_t)CFSTR("info:id"), qword_1EEF66B40, qword_1EEF66BB0);
    v107 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v105, (uint64_t)CFSTR("UsdTransform2d"), v106);
    objc_msgSend_setTokenValue_(v104, v108, v107, v109);
    v111 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v110, (uint64_t)v95, (uint64_t)CFSTR("inputs:in"), qword_1EEF66AE0, qword_1EEF66BB0);
    v377 = objc_msgSend_pathByAppendingPropertyComponent_(v355, v112, (uint64_t)CFSTR("outputs:result"), v113);
    v86 = 0x1E0C99000uLL;
    v115 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v114, (uint64_t)&v377, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v111, v116, v115, v117);
    v118 = 0;
    v119 = *(float32x4_t *)MEMORY[0x1E0C83FF0];
    v120 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 16);
    v121 = (int8x16_t)vmulq_f32(v353, v353);
    *(float32x2_t *)v121.i8 = vadd_f32(*(float32x2_t *)v121.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v121, v121, 8uLL));
    v122 = vmulq_f32(v351, v351);
    *(float32x2_t *)v122.f32 = vadd_f32(*(float32x2_t *)v122.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v122, (int8x16_t)v122, 8uLL));
    v123 = (int32x2_t)vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v121.i8, *(int32x2_t *)v122.f32), (float32x2_t)vzip2_s32(*(int32x2_t *)v121.i8, *(int32x2_t *)v122.f32)));
    v124 = (int8x16_t)vmulq_f32(v349, v349);
    v125 = (int32x2_t)vadd_f32(*(float32x2_t *)v124.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v124, v124, 8uLL));
    *(float *)v125.i32 = sqrtf(vaddv_f32((float32x2_t)v125));
    *(int32x2_t *)v122.f32 = v123;
    v122.i64[1] = __PAIR64__(1.0, v125.u32[0]);
    __asm { FMOV            V5.4S, #1.0 }
    v130 = vdivq_f32(_Q5, v122);
    v131 = *(float32x4_t *)(MEMORY[0x1E0C83FF0] + 32);
    v132 = *(int32x4_t *)(MEMORY[0x1E0C83FF0] + 48);
    v133 = (float32x4_t)vdupq_lane_s32(v123, 0);
    v134 = vdivq_f32(v351, (float32x4_t)vdupq_lane_s32(v123, 1));
    v135 = vdivq_f32(v349, (float32x4_t)vdupq_lane_s32(v125, 0));
    v136 = vzip1q_s32((int32x4_t)v134, v132);
    v367 = (__n128)v353;
    v368 = v351;
    v369 = v349;
    v370 = (float32x4_t)v348;
    do
    {
      *(float32x4_t *)((char *)&v371 + v118) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v119, COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v118))), v120, (float32x2_t)v367.n128_u64[v118 / 8], 1), v131, *(float32x4_t *)((char *)&v367 + v118), 2), (float32x4_t)xmmword_1B2246A10, *(float32x4_t *)((char *)&v367 + v118), 3);
      v118 += 16;
    }
    while (v118 != 64);
    v137 = 0;
    v142.i64[0] = 0;
    v142.i32[2] = 0;
    v138 = vdivq_f32(v353, v133);
    v139 = vzip1q_s32((int32x4_t)v138, (int32x4_t)v135);
    v140.i64[0] = 0;
    v140.i64[1] = v130.u32[2];
    v141.i32[0] = 0;
    v141.i64[1] = 0;
    v141.i32[1] = v130.i32[1];
    v142.i32[3] = v130.i32[3];
    v367 = v371;
    v368 = v372;
    v369 = v373;
    v370 = v374;
    do
    {
      *(float32x4_t *)((char *)&v371 + v137) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v130.u32[0], COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v137))), v141, (float32x2_t)v367.n128_u64[v137 / 8], 1), v140, *(float32x4_t *)((char *)&v367 + v137), 2), v142, *(float32x4_t *)((char *)&v367 + v137), 3);
      v137 += 16;
    }
    while (v137 != 64);
    v143 = 0;
    v144 = (float32x4_t)vzip1q_s32(v139, v136);
    v145 = vzip2q_s32((int32x4_t)v134, v132);
    v146 = vzip2q_s32((int32x4_t)v138, (int32x4_t)v135);
    v147 = (float32x4_t)vzip1q_s32(v146, v145);
    v148 = (float32x4_t)vzip2q_s32(v139, v136);
    v149 = (float32x4_t)vzip2q_s32(v146, v145);
    v367 = v371;
    v368 = v372;
    v369 = v373;
    v370 = v374;
    v87 = &qword_1EEF66000;
    do
    {
      *(float32x4_t *)((char *)&v371 + v143) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v144, COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v143))), v148, (float32x2_t)v367.n128_u64[v143 / 8], 1), v147, *(float32x4_t *)((char *)&v367 + v143), 2), v149, *(float32x4_t *)((char *)&v367 + v143), 3);
      v143 += 16;
    }
    while (v143 != 64);
    v150 = 0;
    v367 = v371;
    v368 = v372;
    v369 = v373;
    v370 = v374;
    do
    {
      *(float32x4_t *)((char *)&v371 + v150) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v119, COERCE_FLOAT(*(_OWORD *)((char *)&v367 + v150))), v120, (float32x2_t)v367.n128_u64[v150 / 8], 1), v131, *(float32x4_t *)((char *)&v367 + v150), 2), (float32x4_t)xmmword_1B2244E50, *(float32x4_t *)((char *)&v367 + v150), 3);
      v150 += 16;
    }
    while (v150 != 64);
    v151 = (__n128)v374;
    v152 = vmulq_n_f32(v138, *(float *)v123.i32);
    v153 = vmulq_lane_f32(v134, (float32x2_t)v123, 1);
    v152.i32[1] = vnegq_f32(v152).i32[1];
    v153.f32[0] = -v153.f32[0];
    v151.n128_u32[1] = vnegq_f32(v374).u32[1];
    v367.n128_u32[2] = 0;
    v367.n128_u64[0] = 0;
    v365.i32[2] = 0;
    v365.i64[0] = 0;
    sub_1B18927E4((float32x4_t *)&v371, &v367, &v365, v152, v153, vmulq_n_f32(v135, *(float *)v125.i32), v151);
    v155 = 0.0;
    v156 = 0.0;
    _Q2 = (float32x4_t)v371;
    v158 = (int8x16_t)vmulq_f32(_Q2, _Q2);
    v159 = vadd_f32(*(float32x2_t *)v158.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v158, v158, 8uLL));
    v159.f32[0] = vaddv_f32(v159);
    if (v159.f32[0] == 0.0)
      goto LABEL_55;
    v160 = v371.n128_f32[3];
    _KR00_8 = *(uint64_t *)((char *)v371.n128_i64 + 4);
    __asm { FMLA            S1, S9, V2.S[3] }
    v163 = _S1 / v159.f32[0];
    v164 = (float)(_S1 / v159.f32[0]);
    if (v164 <= 0.4999)
    {
      if (v164 >= -0.4999)
      {
        v192 = *(float *)&v158.i32[1];
        v193 = v158.i64[1];
        v350 = v371.n128_f32[0];
        v352 = *(float *)v158.i32;
        v356 = atan2f((float)((float)(v371.n128_f32[0] * v371.n128_f32[3]) + (float)(v371.n128_f32[1] * v371.n128_f32[2]))+ (float)((float)(v371.n128_f32[0] * v371.n128_f32[3]) + (float)(v371.n128_f32[1] * v371.n128_f32[2])), *(float *)&v158.i32[3]+ (float)(*(float *)&v158.i32[2] + (float)((float)-*(float *)v158.i32 - *(float *)&v158.i32[1])));
        v354 = asinf(v163 + v163);
        v159.f32[0] = atan2f((float)((float)(*((float *)&_KR00_8 + 1) * v160) + (float)(v350 * *(float *)&_KR00_8))+ (float)((float)(*((float *)&_KR00_8 + 1) * v160) + (float)(v350 * *(float *)&_KR00_8)), *((float *)&v193 + 1) + (float)((float)(v352 - v192) - *(float *)&v193));
        v155 = COERCE_DOUBLE(__PAIR64__(LODWORD(v354), LODWORD(v356)));
        v156 = v159.f32[0];
        goto LABEL_55;
      }
      v159.f32[0] = atan2f(v371.n128_f32[0], v371.n128_f32[3]);
      *(float *)&v155 = v159.f32[0] + v159.f32[0];
      v165 = &dword_1B2245B80;
    }
    else
    {
      v159.f32[0] = atan2f(v371.n128_f32[0], v371.n128_f32[3]);
      *(float *)&v155 = v159.f32[0] + v159.f32[0];
      v165 = &dword_1B2245B84;
    }
    HIDWORD(v155) = *v165;
    v156 = 0.0;
LABEL_55:
    v194 = v156;
    if (v156 != 0.0)
    {
      v195 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, (uint64_t)CFSTR("inputs:rotation"), qword_1EEF66AD8, qword_1EEF66BB0, *(double *)&v159, v155);
      v196 = v194 / 3.14159265 * 180.0;
      *(float *)&v196 = v196;
      objc_msgSend_setFloatValue_(v195, v197, v198, v199, v196);
    }
    v200 = *(double *)v365.i64;
    if (v365.f32[0] != 0.0 || (LODWORD(v200) = v365.i32[1], v365.f32[1] != 0.0))
    {
      v201 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, (uint64_t)CFSTR("inputs:scale"), qword_1EEF66AE0, qword_1EEF66BB0, v200, *(_OWORD *)&v348);
      objc_msgSend_setFloat2Value_(v201, v202, v203, v204, *(double *)v365.i64);
    }
    v205 = v367.n128_f64[0];
    if (v367.n128_f32[0] != 0.0 || (LODWORD(v205) = v367.n128_u32[1], v367.n128_f32[1] != 0.0))
    {
      v206 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, (uint64_t)CFSTR("inputs:translation"), qword_1EEF66AE0, qword_1EEF66BB0, v205, *(_OWORD *)&v348);
      objc_msgSend_setFloat2Value_(v206, v207, v208, v209, v367.n128_f64[0]);
    }
    objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v154, (uint64_t)v95, (uint64_t)CFSTR("outputs:result"), qword_1EEF66AE0, qword_1EEF66BB0, v205, *(_OWORD *)&v348);
    goto LABEL_64;
  }
  v84 = v355;
  v85 = VFXReplicatorConstraint;
  v86 = 0x1E0C99000;
  v87 = &qword_1EEF66000;
LABEL_64:
  v210 = objc_msgSend_stringByAppendingString_(*(void **)(a2 + 64), v82, (uint64_t)CFSTR("_texture"), v83, *(_OWORD *)&v348);
  v213 = objc_msgSend_stringByAppendingPathComponent_(a4, v211, v210, v212);
  v191 = (void *)objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v214, v213, v215);
  v217 = objc_msgSend_world_nodeAtPath_type_(&v85[24], v216, *(_QWORD *)(v361 + 56), (uint64_t)v191, qword_1EEF66B78);
  v219 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v218, v217, (uint64_t)CFSTR("info:id"), v87[360], qword_1EEF66BB0);
  v222 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v220, (uint64_t)CFSTR("UsdUVTexture"), v221);
  objc_msgSend_setTokenValue_(v219, v223, v222, v224);
  if (objc_msgSend_isEqualToString_(*(void **)a2, v225, *(_QWORD *)a3, v226))
  {
    v228 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v227, v217, (uint64_t)CFSTR("inputs:scale"), qword_1EEF66AF0, qword_1EEF66BB0);
    objc_msgSend_setFloat4Value_(v228, v229, v230, v231, 2.00000048);
    v233 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v232, v217, (uint64_t)CFSTR("inputs:bias"), qword_1EEF66AF0, qword_1EEF66BB0);
    __asm { FMOV            V0.4S, #-1.0 }
    objc_msgSend_setFloat4Value_(v233, v235, v236, v237, *(double *)&_Q0);
  }
  v238 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v227, v217, (uint64_t)CFSTR("inputs:file"), qword_1EEF66AA8, qword_1EEF66BB0);
  objc_msgSend_setResourcePath_(v238, v239, *(_QWORD *)(a2 + 56), v240);
  if (v84)
  {
    v242 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v241, v217, (uint64_t)CFSTR("inputs:st"), qword_1EEF66AE0, qword_1EEF66BB0);
    v376 = objc_msgSend_pathByAppendingPropertyComponent_(v84, v243, (uint64_t)CFSTR("outputs:result"), v244);
    v246 = objc_msgSend_arrayWithObjects_count_(*(void **)(v86 + 3360), v245, (uint64_t)&v376, 1);
    objc_msgSend_setConnectionWithTargetPaths_(v242, v247, v246, v248);
  }
  v249 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v241, v217, (uint64_t)CFSTR("inputs:wrapS"), v87[360], qword_1EEF66BB0);
  v255 = objc_msgSend_wrapS(*(void **)(a2 + 8), v250, v251, v252) - 1;
  if (v255 > 3)
    v256 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v253, (uint64_t)CFSTR("repeat"), v254);
  else
    v256 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v253, (uint64_t)off_1E63DA020[v255], v254);
  objc_msgSend_setTokenValue_(v249, v257, v256, v258);
  v260 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v259, v217, (uint64_t)CFSTR("inputs:wrapT"), v87[360], qword_1EEF66BB0);
  v266 = objc_msgSend_wrapT(*(void **)(a2 + 8), v261, v262, v263) - 1;
  if (v266 > 3)
    v267 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v264, (uint64_t)CFSTR("repeat"), v265);
  else
    v267 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v264, (uint64_t)off_1E63DA020[v266], v265);
  objc_msgSend_setTokenValue_(v260, v268, v267, v269);
  if (objc_msgSend_minificationFilter(*(void **)(a2 + 8), v270, v271, v272))
  {
    v276 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v273, v217, (uint64_t)CFSTR("inputs:minFilter"), qword_1EEF66B40, qword_1EEF66BB0);
    v280 = objc_msgSend_minificationFilter(*(void **)(a2 + 8), v277, v278, v279);
    if (v280 == 1)
      v283 = CFSTR("nearest");
    else
      v283 = &stru_1E63FD500;
    if (v280 == 2)
      v284 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v281, (uint64_t)CFSTR("linear"), v282);
    else
      v284 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v281, (uint64_t)v283, v282);
    objc_msgSend_setTokenValue_(v276, v285, v284, v286);
  }
  if (objc_msgSend_magnificationFilter(*(void **)(a2 + 8), v273, v274, v275))
  {
    v289 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v287, v217, (uint64_t)CFSTR("inputs:magFilter"), qword_1EEF66B40, qword_1EEF66BB0);
    v293 = objc_msgSend_magnificationFilter(*(void **)(a2 + 8), v290, v291, v292);
    if (v293 == 1)
      v296 = CFSTR("nearest");
    else
      v296 = &stru_1E63FD500;
    if (v293 == 2)
      v297 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v294, (uint64_t)CFSTR("linear"), v295);
    else
      v297 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v294, (uint64_t)v296, v295);
    objc_msgSend_setTokenValue_(v289, v298, v297, v299);
  }
  if (*(char *)(a2 + 47) >= 0)
    v300 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v287, a2 + 24, v288);
  else
    v300 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v287, *(_QWORD *)(a2 + 24), v288);
  v304 = (const __CFString *)v300;
  v305 = *(unsigned __int8 *)(a2 + 47);
  if ((v305 & 0x80u) != 0)
    v305 = *(_QWORD *)(a2 + 32);
  if (v305 == 1)
    v306 = &qword_1EEF66AD8;
  else
    v306 = &qword_1EEF66AE8;
  v307 = *v306;
  if (objc_msgSend_textureComponents(*(void **)(a2 + 8), v301, v302, v303) == 8)
  {
    v311 = qword_1EEF66AD8;
    v312 = 0x1E0C99000;
    v313 = objc_msgSend_stringByAppendingString_(CFSTR("outputs:"), v308, (uint64_t)CFSTR("r"), v310);
  }
  else
  {
    v312 = 0x1E0C99000uLL;
    if (objc_msgSend_textureComponents(*(void **)(a2 + 8), v308, v309, v310) == 4)
    {
      v311 = qword_1EEF66AD8;
      v313 = objc_msgSend_stringByAppendingString_(CFSTR("outputs:"), v315, (uint64_t)CFSTR("g"), v317);
    }
    else if (objc_msgSend_textureComponents(*(void **)(a2 + 8), v315, v316, v317) == 2)
    {
      v311 = qword_1EEF66AD8;
      v313 = objc_msgSend_stringByAppendingString_(CFSTR("outputs:"), v318, (uint64_t)CFSTR("b"), v320);
    }
    else
    {
      v321 = objc_msgSend_textureComponents(*(void **)(a2 + 8), v318, v319, v320);
      if (v321 == 1)
        v324 = CFSTR("a");
      else
        v324 = v304;
      if (v321 == 1)
        v311 = qword_1EEF66AD8;
      else
        v311 = v307;
      v313 = objc_msgSend_stringByAppendingString_(CFSTR("outputs:"), v322, (uint64_t)v324, v323);
    }
  }
  v325 = v313;
  objc_msgSend_node_propertyWithName_type_role_(&v85[24], v314, v217, v313, v311, qword_1EEF66BB0);
  v328 = objc_msgSend_stringByAppendingString_(CFSTR("inputs:"), v326, *(_QWORD *)a2, v327);
  v330 = (void *)objc_msgSend_node_propertyWithName_type_role_(&v85[24], v329, v357, v328, v311, *(_QWORD *)(a2 + 16));
  v375 = objc_msgSend_pathByAppendingPropertyComponent_(v191, v331, v325, v332);
  v334 = objc_msgSend_arrayWithObjects_count_(*(void **)(v312 + 3360), v333, (uint64_t)&v375, 1);
  objc_msgSend_setConnectionWithTargetPaths_(v330, v335, v334, v336);
  return v191;
}

uint64_t sub_1B1975F50(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

_OWORD *sub_1B1975FD0(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1B1971250((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    sub_1B181D728(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_1B1976060(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    sub_1B179C4A8();
  return operator new(80 * a2);
}

uint64_t sub_1B19760A4(uint64_t a1)
{
  sub_1B19760D8(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B19760D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 80;
      *(_QWORD *)(a1 + 16) = v2 - 80;
      if (*(char *)(v2 - 33) < 0)
      {
        operator delete(*(void **)(v2 - 56));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

std::string *sub_1B197612C(std::string *a1, std::string::size_type a2, void *a3, std::string::size_type *a4, std::string *__str, std::string::size_type a6)
{
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;

  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__l.__size_ = 0;
  a1[2].__r_.__value_.__r.__words[2] = 0;
  a1[2].__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("st");
  a1->__r_.__value_.__r.__words[0] = a2;
  a1->__r_.__value_.__l.__size_ = (std::string::size_type)a3;
  a1->__r_.__value_.__r.__words[2] = *a4;
  std::string::operator=(a1 + 1, __str);
  if (objc_msgSend_mappingChannel(a3, v9, v10, v11) >= 1)
  {
    v15 = (void *)MEMORY[0x1E0CB37E8];
    v16 = objc_msgSend_mappingChannel(a3, v12, v13, v14);
    v19 = (void *)objc_msgSend_numberWithInteger_(v15, v17, v16, v18);
    v23 = objc_msgSend_stringValue(v19, v20, v21, v22);
    a1[2].__r_.__value_.__r.__words[0] = objc_msgSend_stringByAppendingString_(CFSTR("st"), v24, v23, v25);
  }
  a1[3].__r_.__value_.__r.__words[0] = a6;
  return a1;
}

void sub_1B19761E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B19761FC(uint64_t a1, void *a2, void *a3, _BYTE *a4)
{
  char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void **v12;
  void **v13;
  char *v14;
  _BYTE *v15;
  uint64_t v16;
  void *v17;
  void **v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void *v22;
  void **v23;
  __int128 v24;
  char **v25;
  char *v26;
  std::string *v28;
  __int128 *v29;
  uint64_t v30;
  void *__p[2];
  uint64_t v32;
  void *v33[2];
  char v34;
  void **v35;
  std::string **v36;

  *a4 = 1;
  v7 = (char *)objc_msgSend_UTF8String(a2, (const char *)a2, (uint64_t)a3, (uint64_t)a4);
  sub_1B1970F28(v33, v7);
  v11 = (char *)objc_msgSend_UTF8String(a3, v8, v9, v10);
  sub_1B1970F28(__p, v11);
  v12 = sub_1B1970FD4(a1 + 216, v33);
  v13 = v12;
  if ((void **)(a1 + 224) == v12)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v29 = (__int128 *)sub_1B1976784((char **)&v28, (__int128 *)__p);
    v35 = v33;
    v25 = (char **)(sub_1B1976974((uint64_t **)(a1 + 216), v33, (uint64_t)&unk_1B22458B0, (__int128 **)&v35) + 7);
    if (v25 != (char **)&v28)
      sub_1B1976AF4((uint64_t)v25, v28, v29, 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
    v36 = &v28;
    sub_1B196D84C((void ***)&v36);
    v16 = 0;
  }
  else
  {
    v15 = v12[7];
    v14 = (char *)v12[8];
    if (v14 != v15)
    {
      v16 = 0;
      if (v32 >= 0)
        v17 = (void *)HIBYTE(v32);
      else
        v17 = __p[1];
      if (v32 >= 0)
        v18 = __p;
      else
        v18 = (void **)__p[0];
      if ((unint64_t)((v14 - v15) / 24) <= 1)
        v19 = 1;
      else
        v19 = (v14 - v15) / 24;
      do
      {
        v20 = &v15[24 * v16];
        v21 = v20[23];
        if ((v21 & 0x80u) == 0)
          v22 = (void *)v20[23];
        else
          v22 = (void *)*((_QWORD *)v20 + 1);
        if (v22 == v17)
        {
          if ((v21 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v20, v18, *((_QWORD *)v20 + 1)))
            {
LABEL_29:
              *a4 = 0;
              goto LABEL_34;
            }
          }
          else
          {
            v23 = v18;
            if (!v20[23])
              goto LABEL_29;
            while (*v20 == *(unsigned __int8 *)v23)
            {
              ++v20;
              v23 = (void **)((char *)v23 + 1);
              if (!--v21)
                goto LABEL_29;
            }
          }
        }
        ++v16;
      }
      while (v16 != v19);
    }
    if (v14 >= v13[9])
    {
      v26 = sub_1B1976784((char **)v13 + 7, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v32) < 0)
      {
        sub_1B197137C(v14, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v24 = *(_OWORD *)__p;
        *((_QWORD *)v14 + 2) = v32;
        *(_OWORD *)v14 = v24;
      }
      v26 = v14 + 24;
      v13[8] = v14 + 24;
    }
    v13[8] = v26;
    v16 = -1431655765 * ((unint64_t)(v26 - (_BYTE *)v13[7]) >> 3) - 1;
  }
LABEL_34:
  if (SHIBYTE(v32) < 0)
    operator delete(__p[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  return v16;
}

void sub_1B1976470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)(v26 + 64) = v27;
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

void *sub_1B19764C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  unint64_t v34;
  unint64_t *v35;

  v7 = *(_QWORD *)(a1 + 40);
  v8 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], a2, a3, a4);
  v11 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(v7 + 16), v9, (uint64_t)CFSTR("textures"), v10);
  objc_msgSend_createDirectoryAtPath_withIntermediateDirectories_attributes_error_(v8, v12, v11, 1, 0, 0);
  v15 = (void *)objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], v13, (uint64_t)CFSTR("texgen_%lu"), v14, *(_QWORD *)(v7 + 184));
  v18 = objc_msgSend_stringByAppendingPathExtension_(v15, v16, (uint64_t)a2, v17);
  v21 = (void *)objc_msgSend_stringByAppendingPathComponent_(CFSTR("textures"), v19, v18, v20);
  v24 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(v7 + 16), v22, (uint64_t)v21, v23);
  v34 = objc_msgSend_contents(*(void **)(a1 + 32), v25, v26, v27);
  v35 = &v34;
  sub_1B181D66C((uint64_t **)(v7 + 168), &v34, (uint64_t)&unk_1B22458B0, (uint64_t **)&v35)[5] = (uint64_t)v21;
  v31 = (char *)objc_msgSend_UTF8String(v21, v28, v29, v30);
  v35 = (unint64_t *)(a1 + 48);
  v32 = sub_1B1976D68((uint64_t **)(v7 + 192), (unint64_t *)(a1 + 48), (uint64_t)&unk_1B22458B0, (uint64_t **)&v35);
  sub_1B19711A0((std::string *)(v32 + 5), v31);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(a3 + 16))(a3, v24))
    return v21;
  else
    return 0;
}

uint64_t sub_1B1976618(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 32), sel_writeToFile_atomically_, a2, 1);
}

BOOL sub_1B1976628(uint64_t a1, const __CFString *a2)
{
  const __CFURL *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  CGImageDestination *v8;
  CGImageDestination *v9;

  v3 = CFURLCreateWithFileSystemPath(0, a2, kCFURLPOSIXPathStyle, 0);
  v7 = (const __CFString *)objc_msgSend_identifier((void *)*MEMORY[0x1E0CEC580], v4, v5, v6);
  v8 = CGImageDestinationCreateWithURL(v3, v7, 1uLL, 0);
  CFRelease(v3);
  if (v8)
  {
    CGImageDestinationAddImage(v8, *(CGImageRef *)(a1 + 32), 0);
    CGImageDestinationFinalize(v8);
    CFRelease(*(CFTypeRef *)(a1 + 32));
    v9 = v8;
  }
  else
  {
    v9 = *(CGImageDestination **)(a1 + 32);
  }
  CFRelease(v9);
  return v8 != 0;
}

void *sub_1B19766CC(void *a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = a1;
  if (a1)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v5 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v2, v3, v4);
      goto LABEL_4;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v11 = (void *)objc_msgSend_query(v1, v8, v9, v10);
      if (!objc_msgSend_length(v11, v12, v13, v14))
      {
        v1 = (void *)objc_msgSend_path(v1, v15, v16, v17);
        v5 = (void *)objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v18, v19, v20);
        if (v1)
        {
LABEL_4:
          if ((objc_msgSend_fileExistsAtPath_(v5, v6, (uint64_t)v1, v7) & 1) != 0)
            return v1;
        }
      }
    }
    else
    {
      objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v8, v9, v10);
    }
    return 0;
  }
  return v1;
}

char *sub_1B1976784(char **a1, __int128 *a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  __int128 v13;
  char *v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  int64x2_t v18;
  char *v19;
  char *v20;
  char *v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v2 = *a1;
  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4)
    v4 = 2 * v9;
  if (v9 >= 0x555555555555555)
    v10 = 0xAAAAAAAAAAAAAAALL;
  else
    v10 = v4;
  v25 = v7;
  if (v10)
    v11 = (char *)sub_1B17F7D88(v7, v10);
  else
    v11 = 0;
  v12 = &v11[24 * v3];
  v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B197137C(v12, *(void **)a2, *((_QWORD *)a2 + 1));
    v14 = (char *)v23.i64[1];
    v12 = (char *)v23.i64[0];
  }
  else
  {
    v13 = *a2;
    *((_QWORD *)v12 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v12 = v13;
    v14 = &v11[24 * v3];
  }
  v16 = *a1;
  v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v15 - 24);
      *((_QWORD *)v12 - 1) = *(_QWORD *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(_QWORD *)(v15 - 16) = 0;
      *(_QWORD *)(v15 - 8) = 0;
      *(_QWORD *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((char *)v15 != v16);
    v18 = *(int64x2_t *)a1;
  }
  v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  v23 = v18;
  v20 = a1[2];
  a1[2] = v24;
  v24 = v20;
  v22 = (char *)v18.i64[0];
  sub_1B19768EC((uint64_t)&v22);
  return v19;
}

void sub_1B19768D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B19768EC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19768EC(uint64_t a1)
{
  sub_1B1976920(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B1976920(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t *sub_1B1976974(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1B1971250((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1B1976A1C((uint64_t)a1, a4, (uint64_t)v10);
    sub_1B181D728(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1B1976AB0((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1B1976A1C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1B197137C(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B1976A98(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B1976AB0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1B1976AB0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1B196D808((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1B1976AF4(uint64_t a1, std::string *__str, __int128 *a3, unint64_t a4)
{
  int v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  std::string *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a1 + 16;
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_1B1976C64((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    sub_1B19368D0((_QWORD *)a1, v11);
    v12 = sub_1B1976C9C(v8, (__int128 *)__str, a3, *(char **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3));
    sub_1B1976D0C(__str, v13, v9);
    v12 = sub_1B1976C9C(v8, (__int128 *)v13, a3, *(char **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  sub_1B1976D0C(__str, (std::string *)a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    do
    {
      if (*(char *)(v16 - 1) < 0)
        operator delete(*(void **)(v16 - 24));
      v16 -= 24;
    }
    while (v16 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_1B1976C54(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1976C5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_1B1976C64(uint64_t *a1)
{
  if (*a1)
  {
    sub_1B196D88C(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

char *sub_1B1976C9C(int a1, __int128 *a2, __int128 *a3, char *__dst)
{
  __int128 *v6;
  __int128 v7;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1B197137C(__dst, *(void **)v6, *((_QWORD *)v6 + 1));
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)__dst + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)__dst = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      __dst += 24;
    }
    while (v6 != a3);
  }
  return __dst;
}

std::string *sub_1B1976D0C(std::string *__str, std::string *a2, std::string *this)
{
  const std::string *v4;

  v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t *sub_1B1976D68(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = **a4;
    v11[6] = 0;
    v11[7] = 0;
    v11[4] = v12;
    v11[5] = 0;
    sub_1B181D728(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

float sub_1B1976E28(uint64_t a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  float result;

  if (!*(_QWORD *)(a1 + 72))
    return 1.0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    return 1.0;
  objc_msgSend_floatValue(*(void **)(a1 + 72), v2, v3, v4);
  return result;
}

void sub_1B1976E7C(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1B1976EBC((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1B1976EBC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 80)
  {
    if (*(char *)(i - 33) < 0)
      operator delete(*(void **)(i - 56));
  }
  a1[1] = v2;
}

uint64_t sub_1B1976F08(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  void *v4;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;

  v4 = a3;
  v7 = objc_msgSend_length(a3, a2, (uint64_t)a3, a4);
  v11 = (void *)sub_1B196E4A4(a1, v8, v9, v10);
  if (v7 > objc_msgSend_length(v11, v12, v13, v14))
  {
    v18 = (void *)sub_1B196E4A4(a1, v15, v16, v17);
    v22 = (void *)sub_1B196E4A4(a1, v19, v20, v21);
    v26 = objc_msgSend_length(v22, v23, v24, v25);
    v29 = objc_msgSend_substringToIndex_(v4, v27, v26, v28);
    if (objc_msgSend_isEqualToString_(v18, v30, v29, v31))
    {
      v33 = (void *)sub_1B196E4A4(a1, v15, v32, v17);
      v37 = objc_msgSend_length(v33, v34, v35, v36);
      v4 = (void *)objc_msgSend_substringFromIndex_(v4, v38, v37, v39);
    }
  }
  v40 = (void *)objc_msgSend_stringByAppendingString_(v4, v15, (uint64_t)CFSTR(":"), v17);
  v43 = (void *)objc_msgSend_stringByAppendingString_(v40, v41, (uint64_t)a2, v42);
  if (objc_msgSend_characterAtIndex_(v43, v44, 0, v45) == 47)
    v43 = (void *)objc_msgSend_substringFromIndex_(v43, v46, 1, v47);
  return objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v43, v46, (uint64_t)CFSTR("/"), (uint64_t)CFSTR(":"));
}

unint64_t sub_1B1976FF4(uint64_t a1, const char *a2, void *a3)
{
  uint64_t v6;
  unint64_t result;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  double v38;
  double v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const __CFString *v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  void *v66;
  const char *v67;
  uint64_t v68;
  double v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  unint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  double v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  const char *v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  double v105;
  double v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  uint64_t v116;
  const char *v117;
  uint64_t v118;
  unint64_t v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  uint64_t v123;
  double v124;
  double v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  double v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  void *v134;
  const char *v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  int v142;
  const char *v143;
  void *v144;
  const char *v145;
  uint64_t v146;
  uint64_t v147;
  double v148;
  double v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  const __CFString *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void *v159;
  const char *v160;
  uint64_t v161;
  uint64_t v162;
  double v163;
  double v164;
  const char *v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  double v169;
  const char *v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  const char *v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  double v180;
  const char *v181;
  void *v182;
  const char *v183;
  uint64_t v184;
  uint64_t v185;
  double v186;
  double v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  double v196;
  double v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  double v201;
  double v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  void *v206;
  const char *v207;
  uint64_t v208;
  void *v209;
  const char *v210;
  uint64_t v211;
  uint64_t v212;
  double v213;
  const char *v214;
  void *v215;
  const char *v216;
  uint64_t v217;
  uint64_t v218;
  double v219;
  double v220;
  const char *v221;
  uint64_t v222;
  uint64_t v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  const char *v227;
  uint64_t v228;
  uint64_t v229;
  unint64_t v230;
  void *v231;
  const char *v232;
  uint64_t v233;
  uint64_t v234;
  double v235;
  double v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  double v240;
  double v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  void *v245;
  const char *v246;
  uint64_t v247;
  void *v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  float v252;
  float v253;
  const char *v254;
  void *v255;
  const char *v256;
  uint64_t v257;
  uint64_t v258;
  double v259;
  double v260;
  double v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t v265;
  void *v266;
  const char *v267;
  uint64_t v268;
  uint64_t v269;
  double v270;
  double v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  double v275;
  double v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  const char *v281;
  uint64_t v282;
  void *v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  float32x2_t v287;
  const char *v288;
  void *v289;
  const char *v290;
  uint64_t v291;
  uint64_t v292;
  double v293;
  double v294;
  const char *v295;
  uint64_t v296;
  uint64_t v297;
  const char *v298;
  uint64_t v299;
  uint64_t v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  void *v305;
  const char *v306;
  uint64_t v307;
  uint64_t v308;
  double v309;
  double v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  double v314;
  double v315;
  const char *v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  const char *v320;
  uint64_t v321;
  void *v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  int v327;
  const char *v328;
  void *v329;
  const char *v330;
  uint64_t v331;
  uint64_t v332;
  double v333;
  double v334;
  const char *v335;
  uint64_t v336;
  uint64_t v337;
  unint64_t v338;
  void *v339;
  const char *v340;
  uint64_t v341;
  uint64_t v342;
  double v343;
  double v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  double v348;
  double v349;
  const char *v350;
  uint64_t v351;
  uint64_t v352;
  void *v353;
  const char *v354;
  uint64_t v355;
  void *v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  double v360;
  const char *v361;
  void *v362;
  const char *v363;
  uint64_t v364;
  uint64_t v365;
  double v366;
  double v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  float64x2_t v371;
  float64x2_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  float64x2_t v377;
  float64x2_t v378;
  float64x2_t v379;
  float64x2_t v380;
  double v381;
  double v382;
  float32x2_t v383;
  double v384;
  _OWORD v385[8];

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return sub_1B1977B64(a1, a2, a3, v6);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v11 = (void *)objc_msgSend_keyTimes(a3, v8, v9, v10);
    result = objc_msgSend_count(v11, v12, v13, v14);
    if (result)
    {
      v18 = objc_msgSend_count(v11, v15, v16, v17);
      v21 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v19, v18 - 1, v20);
      objc_msgSend_doubleValue(v21, v22, v23, v24);
      v26 = v25;
      v29 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v27, 0, v28);
      result = objc_msgSend_doubleValue(v29, v30, v31, v32);
      v37 = v26 - v36;
      if (v26 - v36 >= 0.0001)
      {
        objc_msgSend_duration(a3, v33, v34, v35);
        v39 = v38;
        v43 = (void *)objc_msgSend_keyPath(a3, v40, v41, v42);
        v46 = (void *)objc_msgSend_componentsSeparatedByString_(v43, v44, (uint64_t)CFSTR("."), v45);
        v50 = objc_msgSend_count(v46, v47, v48, v49) - 1;
        v53 = (void *)objc_msgSend_objectAtIndex_(v46, v51, v50, v52);
        if ((unint64_t)objc_msgSend_count(v46, v54, v55, v56) < 2)
        {
          v60 = 0;
          goto LABEL_19;
        }
        if ((objc_msgSend_isEqualToString_(v53, v57, (uint64_t)CFSTR("x"), v58) & 1) != 0)
        {
          v60 = CFSTR("X");
        }
        else if ((objc_msgSend_isEqualToString_(v53, v57, (uint64_t)CFSTR("y"), v58) & 1) != 0)
        {
          v60 = CFSTR("Y");
        }
        else if ((objc_msgSend_isEqualToString_(v53, v57, (uint64_t)CFSTR("z"), v58) & 1) != 0)
        {
          v60 = CFSTR("Z");
        }
        else
        {
          if (!objc_msgSend_isEqualToString_(v53, v57, (uint64_t)CFSTR("w"), v58))
          {
            v60 = 0;
            if (!v50)
              goto LABEL_19;
            goto LABEL_17;
          }
          v60 = CFSTR("W");
        }
        v50 = objc_msgSend_count(v46, v57, v59, v58) - 2;
        v53 = (void *)objc_msgSend_objectAtIndex_(v46, v61, v50, v62);
        if (!v50)
          goto LABEL_19;
LABEL_17:
        if (objc_msgSend_isEqualToString_(v53, v57, (uint64_t)CFSTR("euler"), v58))
        {
          v63 = (void *)objc_msgSend_objectAtIndex_(v46, v57, v50 - 1, v58);
          v66 = (void *)objc_msgSend_stringByAppendingString_(v63, v64, (uint64_t)CFSTR("."), v65);
          v53 = (void *)objc_msgSend_stringByAppendingString_(v66, v67, (uint64_t)v53, v68);
        }
LABEL_19:
        v69 = v39 / v37;
        if (objc_msgSend_isEqualToString_(v53, v57, (uint64_t)CFSTR("transform"), v58))
        {
          if (objc_msgSend_count(v11, v70, v71, v72))
          {
            v75 = 0;
            do
            {
              v76 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v73, v75, v74);
              objc_msgSend_doubleValue(v76, v77, v78, v79);
              v81 = v80;
              objc_msgSend_beginTime(a3, v82, v83, v84);
              v86 = v85 + v81 * v69;
              v90 = (void *)objc_msgSend_values(a3, v87, v88, v89);
              v93 = (void *)objc_msgSend_objectAtIndexedSubscript_(v90, v91, v75, v92);
              objc_msgSend_VFXMatrix4Value(v93, v94, v95, v96);
              v378 = vcvtq_f64_f32(*(float32x2_t *)v98.f32);
              v380 = vcvtq_f64_f32(*(float32x2_t *)v97.f32);
              v375 = vcvtq_f64_f32(*(float32x2_t *)v99.f32);
              v376 = vcvt_hight_f64_f32(v97);
              v373 = vcvt_hight_f64_f32(v99);
              v374 = vcvt_hight_f64_f32(v98);
              v371 = vcvt_hight_f64_f32(v100);
              v372 = vcvtq_f64_f32(*(float32x2_t *)v100.f32);
              v102 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v101, (uint64_t)a2, (uint64_t)CFSTR("xformOp:transform"), qword_1EEF66AC8, qword_1EEF66BB0);
              v385[0] = v380;
              v385[1] = v376;
              v385[2] = v378;
              v385[3] = v374;
              v385[4] = v375;
              v385[5] = v373;
              v385[6] = v372;
              v385[7] = v371;
              v105 = v86 / *(double *)(a1 + 504) + 0.0;
              v106 = (double)(int)v105;
              if (vabdd_f64(v105, v106) >= 0.001)
              {
                if (1.0 - (v105 - v106) < 0.001)
                  v105 = v106 + 1.0;
                objc_msgSend_setDouble4x4Value_atTime_(v102, v103, (uint64_t)v385, v104, v105);
              }
              else
              {
                objc_msgSend_setDouble4x4Value_atTime_(v102, v103, (uint64_t)v385, v104, (double)(int)v105);
              }
              ++v75;
            }
            while (v75 < objc_msgSend_count(v11, v107, v108, v109));
          }
          return objc_msgSend_addObject_(*(void **)(a1 + 88), v73, (uint64_t)CFSTR("xformOp:transform"), v74);
        }
        if (objc_msgSend_isEqualToString_(v53, v70, (uint64_t)CFSTR("position"), v72))
        {
          if (!v60)
          {
            if (objc_msgSend_count(v11, v110, v111, v112))
            {
              v191 = 0;
              do
              {
                v192 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v117, v191, v118);
                objc_msgSend_doubleValue(v192, v193, v194, v195);
                v197 = v196;
                objc_msgSend_beginTime(a3, v198, v199, v200);
                v202 = v201 + v197 * v69;
                v206 = (void *)objc_msgSend_values(a3, v203, v204, v205);
                v209 = (void *)objc_msgSend_objectAtIndexedSubscript_(v206, v207, v191, v208);
                objc_msgSend_VFXFloat3Value(v209, v210, v211, v212);
                v382 = v213;
                v215 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v214, (uint64_t)a2, (uint64_t)CFSTR("xformOp:translate"), qword_1EEF66AE8, qword_1EEF66BB0);
                v219 = v202 / *(double *)(a1 + 504) + 0.0;
                v220 = (double)(int)v219;
                if (vabdd_f64(v219, v220) >= 0.001)
                {
                  if (1.0 - (v219 - v220) < 0.001)
                    v219 = v220 + 1.0;
                  objc_msgSend_setFloat3Value_atTime_(v215, v216, v217, v218, v382, v219);
                }
                else
                {
                  objc_msgSend_setFloat3Value_atTime_(v215, v216, v217, v218, v382, (double)(int)v219);
                }
                ++v191;
              }
              while (v191 < objc_msgSend_count(v11, v221, v222, v223));
            }
            v153 = *(void **)(a1 + 88);
            v154 = CFSTR("xformOp:translate");
            return objc_msgSend_addObject_(v153, v117, (uint64_t)v154, v118);
          }
          v113 = objc_msgSend_stringByAppendingString_(CFSTR("xformOp:translate"), v110, (uint64_t)v60, v112);
          if (objc_msgSend_count(v11, v114, v115, v116))
          {
            v119 = 0;
            do
            {
              v120 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v117, v119, v118);
              objc_msgSend_doubleValue(v120, v121, v122, v123);
              v125 = v124;
              objc_msgSend_beginTime(a3, v126, v127, v128);
              v130 = v129 + v125 * v69;
              v134 = (void *)objc_msgSend_values(a3, v131, v132, v133);
              v137 = (void *)objc_msgSend_objectAtIndexedSubscript_(v134, v135, v119, v136);
              objc_msgSend_floatValue(v137, v138, v139, v140);
              v142 = v141;
              v144 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v143, (uint64_t)a2, v113, qword_1EEF66AD8, qword_1EEF66BB0);
              v148 = v130 / *(double *)(a1 + 504) + 0.0;
              v149 = (double)(int)v148;
              if (vabdd_f64(v148, v149) >= 0.001)
              {
                if (1.0 - (v148 - v149) < 0.001)
                  v148 = v149 + 1.0;
              }
              else
              {
                v148 = (double)(int)v148;
              }
              LODWORD(v149) = v142;
              objc_msgSend_setFloatValue_atTime_(v144, v145, v146, v147, v149, v148);
              ++v119;
            }
            while (v119 < objc_msgSend_count(v11, v150, v151, v152));
          }
        }
        else
        {
          if ((objc_msgSend_isEqualToString_(v53, v110, (uint64_t)CFSTR("orientation"), v112) & 1) != 0
            || objc_msgSend_isEqualToString_(v53, v155, (uint64_t)CFSTR("quaternion"), v157))
          {
            if (objc_msgSend_count(v11, v155, v156, v157))
            {
              v158 = 0;
              do
              {
                v159 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v117, v158, v118);
                objc_msgSend_doubleValue(v159, v160, v161, v162);
                v164 = v163;
                objc_msgSend_beginTime(a3, v165, v166, v167);
                v169 = v168 + v164 * v69;
                v173 = (void *)objc_msgSend_values(a3, v170, v171, v172);
                v176 = (void *)objc_msgSend_objectAtIndexedSubscript_(v173, v174, v158, v175);
                objc_msgSend_VFXFloat4Value(v176, v177, v178, v179);
                v381 = v180;
                v182 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v181, (uint64_t)a2, (uint64_t)CFSTR("xformOp:orient"), qword_1EEF66B28, qword_1EEF66BB0);
                v186 = v169 / *(double *)(a1 + 504) + 0.0;
                v187 = (double)(int)v186;
                if (vabdd_f64(v186, v187) >= 0.001)
                {
                  if (1.0 - (v186 - v187) < 0.001)
                    v186 = v187 + 1.0;
                  objc_msgSend_setQuatfValue_atTime_(v182, v183, v184, v185, v381, v186);
                }
                else
                {
                  objc_msgSend_setQuatfValue_atTime_(v182, v183, v184, v185, v381, (double)(int)v186);
                }
                ++v158;
              }
              while (v158 < objc_msgSend_count(v11, v188, v189, v190));
            }
            v153 = *(void **)(a1 + 88);
            v154 = CFSTR("xformOp:orient");
            return objc_msgSend_addObject_(v153, v117, (uint64_t)v154, v118);
          }
          if ((objc_msgSend_isEqualToString_(v53, v155, (uint64_t)CFSTR("eulerAngles"), v157) & 1) != 0
            || objc_msgSend_isEqualToString_(v53, v224, (uint64_t)CFSTR("rotation.euler"), v226))
          {
            if (!v60)
            {
              if (objc_msgSend_count(v11, v224, v225, v226))
              {
                v265 = 0;
                v377 = (float64x2_t)vdupq_n_s64(0x4066800000000000uLL);
                v379 = (float64x2_t)vdupq_n_s64(0x400921FB54442D18uLL);
                do
                {
                  v266 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v117, v265, v118);
                  objc_msgSend_doubleValue(v266, v267, v268, v269);
                  v271 = v270;
                  objc_msgSend_beginTime(a3, v272, v273, v274);
                  v276 = v275 + v271 * v69;
                  v280 = (void *)objc_msgSend_values(a3, v277, v278, v279);
                  v283 = (void *)objc_msgSend_objectAtIndexedSubscript_(v280, v281, v265, v282);
                  objc_msgSend_VFXFloat3Value(v283, v284, v285, v286);
                  v383 = v287;
                  v289 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v288, (uint64_t)a2, (uint64_t)CFSTR("xformOp:rotateXYZ"), qword_1EEF66AE8, qword_1EEF66BB0);
                  v293 = v276 / *(double *)(a1 + 504) + 0.0;
                  v294 = (double)(int)v293;
                  if (vabdd_f64(v293, v294) >= 0.001)
                  {
                    if (1.0 - (v293 - v294) < 0.001)
                      v293 = v294 + 1.0;
                  }
                  else
                  {
                    v293 = (double)(int)v293;
                  }
                  objc_msgSend_setFloat3Value_atTime_(v289, v290, v291, v292, COERCE_DOUBLE(vcvt_f32_f64(vmulq_f64(vdivq_f64(vcvtq_f64_f32(v383), v379), v377))), v293);
                  ++v265;
                }
                while (v265 < objc_msgSend_count(v11, v295, v296, v297));
              }
              v153 = *(void **)(a1 + 88);
              v154 = CFSTR("xformOp:rotateXYZ");
              return objc_msgSend_addObject_(v153, v117, (uint64_t)v154, v118);
            }
            v113 = objc_msgSend_stringByAppendingString_(CFSTR("xformOp:rotate"), v224, (uint64_t)v60, v226);
            if (objc_msgSend_count(v11, v227, v228, v229))
            {
              v230 = 0;
              do
              {
                v231 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v117, v230, v118);
                objc_msgSend_doubleValue(v231, v232, v233, v234);
                v236 = v235;
                objc_msgSend_beginTime(a3, v237, v238, v239);
                v241 = v240 + v236 * v69;
                v245 = (void *)objc_msgSend_values(a3, v242, v243, v244);
                v248 = (void *)objc_msgSend_objectAtIndexedSubscript_(v245, v246, v230, v247);
                objc_msgSend_floatValue(v248, v249, v250, v251);
                v253 = v252;
                v255 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v254, (uint64_t)a2, v113, qword_1EEF66AD8, qword_1EEF66BB0);
                v259 = v241 / *(double *)(a1 + 504) + 0.0;
                v260 = (double)(int)v259;
                if (vabdd_f64(v259, v260) >= 0.001)
                {
                  if (1.0 - (v259 - v260) < 0.001)
                    v259 = v260 + 1.0;
                }
                else
                {
                  v259 = (double)(int)v259;
                }
                v261 = v253 / 3.14159265 * 180.0;
                *(float *)&v261 = v261;
                objc_msgSend_setFloatValue_atTime_(v255, v256, v257, v258, v261, v259);
                ++v230;
              }
              while (v230 < objc_msgSend_count(v11, v262, v263, v264));
            }
          }
          else
          {
            result = objc_msgSend_isEqualToString_(v53, v224, (uint64_t)CFSTR("scale"), v226);
            if (!(_DWORD)result)
              return result;
            if (!v60)
            {
              if (objc_msgSend_count(v11, v298, v299, v300))
              {
                v338 = 0;
                do
                {
                  v339 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v117, v338, v118);
                  objc_msgSend_doubleValue(v339, v340, v341, v342);
                  v344 = v343;
                  objc_msgSend_beginTime(a3, v345, v346, v347);
                  v349 = v348 + v344 * v69;
                  v353 = (void *)objc_msgSend_values(a3, v350, v351, v352);
                  v356 = (void *)objc_msgSend_objectAtIndexedSubscript_(v353, v354, v338, v355);
                  objc_msgSend_VFXFloat3Value(v356, v357, v358, v359);
                  v384 = v360;
                  v362 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v361, (uint64_t)a2, (uint64_t)CFSTR("xformOp:scale"), qword_1EEF66AE8, qword_1EEF66BB0);
                  v366 = v349 / *(double *)(a1 + 504) + 0.0;
                  v367 = (double)(int)v366;
                  if (vabdd_f64(v366, v367) >= 0.001)
                  {
                    if (1.0 - (v366 - v367) < 0.001)
                      v366 = v367 + 1.0;
                    objc_msgSend_setFloat3Value_atTime_(v362, v363, v364, v365, v384, v366);
                  }
                  else
                  {
                    objc_msgSend_setFloat3Value_atTime_(v362, v363, v364, v365, v384, (double)(int)v366);
                  }
                  ++v338;
                }
                while (v338 < objc_msgSend_count(v11, v368, v369, v370));
              }
              v153 = *(void **)(a1 + 88);
              v154 = CFSTR("xformOp:scale");
              return objc_msgSend_addObject_(v153, v117, (uint64_t)v154, v118);
            }
            v113 = objc_msgSend_stringByAppendingString_(CFSTR("xformOp:scale"), v298, (uint64_t)v60, v300);
            if (objc_msgSend_count(v11, v301, v302, v303))
            {
              v304 = 0;
              do
              {
                v305 = (void *)objc_msgSend_objectAtIndexedSubscript_(v11, v117, v304, v118);
                objc_msgSend_doubleValue(v305, v306, v307, v308);
                v310 = v309;
                objc_msgSend_beginTime(a3, v311, v312, v313);
                v315 = v314 + v310 * v69;
                v319 = (void *)objc_msgSend_values(a3, v316, v317, v318);
                v322 = (void *)objc_msgSend_objectAtIndexedSubscript_(v319, v320, v304, v321);
                objc_msgSend_floatValue(v322, v323, v324, v325);
                v327 = v326;
                v329 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v328, (uint64_t)a2, v113, qword_1EEF66AD8, qword_1EEF66BB0);
                v333 = v315 / *(double *)(a1 + 504) + 0.0;
                v334 = (double)(int)v333;
                if (vabdd_f64(v333, v334) >= 0.001)
                {
                  if (1.0 - (v333 - v334) < 0.001)
                    v333 = v334 + 1.0;
                }
                else
                {
                  v333 = (double)(int)v333;
                }
                LODWORD(v334) = v327;
                objc_msgSend_setFloatValue_atTime_(v329, v330, v331, v332, v334, v333);
                ++v304;
              }
              while (v304 < objc_msgSend_count(v11, v335, v336, v337));
            }
          }
        }
        v153 = *(void **)(a1 + 88);
        v154 = (const __CFString *)v113;
        return objc_msgSend_addObject_(v153, v117, (uint64_t)v154, v118);
      }
    }
  }
  return result;
}

unint64_t sub_1B1977B64(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t result;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t i;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  v7 = (void *)objc_msgSend_animations(a3, a2, (uint64_t)a3, a4);
  result = objc_msgSend_count(v7, v8, v9, v10);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v16 = (void *)objc_msgSend_animations(a3, v12, v13, v14);
      v19 = objc_msgSend_objectAtIndex_(v16, v17, i, v18);
      sub_1B1976FF4(a1, a2, v19);
      v23 = (void *)objc_msgSend_animations(a3, v20, v21, v22);
      result = objc_msgSend_count(v23, v24, v25, v26);
    }
  }
  return result;
}

uint64_t sub_1B1977BDC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  _QWORD *v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  const char *v32;
  uint64_t *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  void *v58;
  const char *v59;
  double *v60;
  unint64_t v61;
  double v62;
  _BYTE *v63;
  uint64_t *v64;
  _DWORD *v65;
  unint64_t v66;
  uint64_t v67;
  double v68;
  double v69;
  void *v70;
  const char *v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  void *__p;
  _BYTE *v82;
  uint64_t v83;
  _QWORD v84[3];
  void *v85;
  _BYTE *v86;
  uint64_t v87;
  void *v88;
  _BYTE v89[128];
  uint64_t v90;

  v4 = a2;
  v90 = *MEMORY[0x1E0C80C00];
  v88 = a2;
  v6 = *(_QWORD **)(a1 + 424);
  if (v6)
  {
    v7 = a1 + 424;
    do
    {
      v8 = v6[4];
      v9 = v8 >= (unint64_t)a2;
      if (v8 >= (unint64_t)a2)
        v10 = v6;
      else
        v10 = v6 + 1;
      if (v9)
        v7 = (uint64_t)v6;
      v6 = (_QWORD *)*v10;
    }
    while (*v10);
    if (v7 != a1 + 424 && *(_QWORD *)(v7 + 32) <= (unint64_t)a2)
    {
      if (objc_msgSend_animationKeys(a2, (const char *)a2, a3, a4))
      {
        v11 = (void *)objc_msgSend_animationKeys(v4, (const char *)a2, a3, a4);
        if (objc_msgSend_count(v11, v12, v13, v14))
        {
          v15 = (void *)objc_msgSend_animationKeys(v4, (const char *)a2, a3, a4);
          v18 = (void *)objc_msgSend_objectAtIndexedSubscript_(v15, v16, 0, v17);
          v22 = (void *)sub_1B1977FDC(a1, v19, v20, v21);
          v24 = sub_1B196D580(v18, v23);
          v27 = objc_msgSend_stringByAppendingPathComponent_(v22, v25, v24, v26);
          v30 = (const char *)objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v28, v27, v29);
          v32 = (const char *)objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v31, *(_QWORD *)(a1 + 56), (uint64_t)v30, qword_1EEF66B80);
          v85 = &v88;
          v33 = sub_1B181D66C((uint64_t **)(a1 + 416), (unint64_t *)&v88, (uint64_t)&unk_1B22458B0, (uint64_t **)&v85);
          sub_1B1978044(v33[5], v30, (uint64_t)v32);
          v37 = (void *)objc_msgSend_animationKeys(v88, v34, v35, v36);
          v41 = objc_msgSend_count(v37, v38, v39, v40);
          v85 = 0;
          v86 = 0;
          v87 = 0;
          memset(v84, 0, sizeof(v84));
          sub_1B19780B0(v84, v41);
          if (v41)
          {
            for (i = 0; i != v41; ++i)
            {
              v46 = (void *)objc_msgSend_animationKeys(v88, v42, v43, v44);
              v49 = objc_msgSend_objectAtIndexedSubscript_(v46, v47, i, v48);
              v52 = (void *)objc_msgSend_animationPlayerForKey_(v88, v50, v49, v51);
              if (v52)
              {
                v53 = (void *)objc_msgSend_animation(v52, v42, v43, v44);
                v57 = (void *)objc_msgSend_caAnimation(v53, v54, v55, v56);
                sub_1B1978144(a1, v32, v57, &v85, v84);
              }
            }
          }
          v58 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v42, (uint64_t)v32, (uint64_t)CFSTR("blendShapeWeights"), qword_1EEF66B08, qword_1EEF66BB0);
          __p = 0;
          v82 = 0;
          v83 = 0;
          sub_1B17F8160((uint64_t)&__p, v41);
          v60 = (double *)v85;
          if (v86 != v85)
          {
            v61 = 0;
            do
            {
              v62 = v60[v61];
              v63 = __p;
              if (v41)
              {
                v64 = (uint64_t *)v84[0];
                v65 = __p;
                v66 = v41;
                do
                {
                  v67 = *v64;
                  v64 += 3;
                  *v65++ = *(_DWORD *)(v67 + 4 * v61);
                  --v66;
                }
                while (v66);
              }
              v68 = v62 / *(double *)(a1 + 504) + 0.0;
              v69 = (double)(int)v68;
              if (vabdd_f64(v68, v69) >= 0.001)
              {
                if (1.0 - (v68 - v69) < 0.001)
                  v68 = v69 + 1.0;
                objc_msgSend_setFloatArray_count_atTime_(v58, v59, (uint64_t)v63, (v82 - v63) >> 2, v68);
              }
              else
              {
                objc_msgSend_setFloatArray_count_atTime_(v58, v59, (uint64_t)v63, (v82 - v63) >> 2, (double)(int)v68);
              }
              ++v61;
              v60 = (double *)v85;
            }
            while (v61 < (v86 - (_BYTE *)v85) >> 3);
          }
          if (__p)
          {
            v82 = __p;
            operator delete(__p);
          }
          __p = v84;
          sub_1B17F7664((void ***)&__p);
          if (v85)
          {
            v86 = v85;
            operator delete(v85);
          }
          v4 = v88;
        }
      }
    }
  }
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v70 = (void *)objc_msgSend_childNodes(v4, (const char *)a2, a3, a4, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v70, v71, (uint64_t)&v77, (uint64_t)v89, 16);
  v73 = result;
  if (result)
  {
    v74 = *(_QWORD *)v78;
    do
    {
      v75 = 0;
      do
      {
        if (*(_QWORD *)v78 != v74)
          objc_enumerationMutation(v70);
        sub_1B1977BDC(a1, *(_QWORD *)(*((_QWORD *)&v77 + 1) + 8 * v75++));
      }
      while (v73 != v75);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v70, v76, (uint64_t)&v77, (uint64_t)v89, 16);
      v73 = result;
    }
    while (result);
  }
  return result;
}

void sub_1B1977F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char *__p, char *a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  if (__p)
  {
    a19 = __p;
    operator delete(__p);
  }
  __p = &a21;
  sub_1B17F7664((void ***)&__p);
  if (a24)
  {
    a25 = (uint64_t)a24;
    operator delete(a24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B1977FDC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    v6 = objc_msgSend_stringByAppendingPathComponent_(*(void **)(a1 + 24), a2, (uint64_t)CFSTR("Animations"), a4);
    *(_QWORD *)(a1 + 48) = v6;
    v9 = objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v7, v6, v8);
    objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v10, *(_QWORD *)(a1 + 56), v9, qword_1EEF66B70);
    return *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1B1978044(uint64_t result, const char *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  const char *v8;
  uint64_t v9;

  if (!*(_QWORD *)(result + 16))
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 8);
    if (v5)
    {
      v7 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, v5, (uint64_t)CFSTR("skel:animationSource"), qword_1EEF66B18, qword_1EEF66BB0);
      result = objc_msgSend_setObjectPath_(v7, v8, (uint64_t)a2, v9);
      *(_QWORD *)(v4 + 16) = a3;
    }
  }
  return result;
}

void sub_1B19780B0(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1B1978378(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

unint64_t sub_1B1978144(uint64_t a1, const char *a2, void *a3, _QWORD *a4, _QWORD *a5)
{
  unint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  double v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  double v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  const char *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return sub_1B19784D8(a1, a2, a3, (uint64_t)a4, (uint64_t)a5);
  objc_opt_class();
  result = objc_opt_isKindOfClass();
  if ((result & 1) != 0)
  {
    v14 = (void *)objc_msgSend_keyTimes(a3, v11, v12, v13);
    result = objc_msgSend_count(v14, v15, v16, v17);
    if (result)
    {
      v21 = objc_msgSend_count(v14, v18, v19, v20);
      v24 = (void *)objc_msgSend_objectAtIndexedSubscript_(v14, v22, v21 - 1, v23);
      objc_msgSend_doubleValue(v24, v25, v26, v27);
      v29 = v28;
      v32 = (void *)objc_msgSend_objectAtIndexedSubscript_(v14, v30, 0, v31);
      result = objc_msgSend_doubleValue(v32, v33, v34, v35);
      v40 = v29 - v39;
      if (v29 - v39 >= 0.0001)
      {
        objc_msgSend_duration(a3, v36, v37, v38);
        v42 = v41;
        v46 = (void *)objc_msgSend_keyPath(a3, v43, v44, v45);
        v49 = (void *)objc_msgSend_componentsSeparatedByString_(v46, v47, (uint64_t)CFSTR("."), v48);
        v53 = objc_msgSend_count(v49, v50, v51, v52);
        v56 = (void *)objc_msgSend_objectAtIndex_(v49, v54, v53 - 1, v55);
        result = objc_msgSend_length(v56, v57, v58, v59);
        if (result >= 9)
        {
          v62 = (void *)objc_msgSend_substringToIndex_(v56, v60, 7, v61);
          result = objc_msgSend_isEqualToString_(v62, v63, (uint64_t)CFSTR("weights"), v64);
          if ((_DWORD)result)
          {
            v67 = (void *)objc_msgSend_substringFromIndex_(v56, v65, 8, v66);
            v71 = objc_msgSend_intValue(v67, v68, v69, v70);
            v75 = objc_msgSend_count(v14, v72, v73, v74);
            sub_1B1978568((uint64_t)a4, v75);
            v76 = *a5 + 24 * v71;
            v80 = objc_msgSend_count(v14, v77, v78, v79);
            sub_1B17F8160(v76, v80);
            v84 = (void *)objc_msgSend_values(a3, v81, v82, v83);
            result = objc_msgSend_count(v14, v85, v86, v87);
            if (result)
            {
              v90 = 0;
              v91 = 24 * v71;
              v92 = v42 / v40;
              do
              {
                v93 = (void *)objc_msgSend_objectAtIndexedSubscript_(v14, v88, v90, v89);
                objc_msgSend_doubleValue(v93, v94, v95, v96);
                v98 = v97;
                objc_msgSend_beginTime(a3, v99, v100, v101);
                *(double *)(*a4 + 8 * v90) = v102 + v98 * v92;
                v105 = (void *)objc_msgSend_objectAtIndexedSubscript_(v84, v103, v90, v104);
                objc_msgSend_floatValue(v105, v106, v107, v108);
                *(_DWORD *)(*(_QWORD *)(*a5 + v91) + 4 * v90++) = v109;
                result = objc_msgSend_count(v14, v110, v111, v112);
              }
              while (v90 < result);
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B1978378(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1B17F7D88(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1B17F7D18(a1, &v15);
    sub_1B17F7DCC((uint64_t)&v15);
  }
}

void sub_1B19784C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B17F7DCC((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B19784D8(uint64_t a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t i;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;

  v10 = (void *)objc_msgSend_animations(a3, a2, (uint64_t)a3, a4);
  result = objc_msgSend_count(v10, v11, v12, v13);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v19 = (void *)objc_msgSend_animations(a3, v15, v16, v17);
      v22 = objc_msgSend_objectAtIndex_(v19, v20, i, v21);
      sub_1B1978144(a1, a2, v22, a4, a5);
      v26 = (void *)objc_msgSend_animations(a3, v23, v24, v25);
      result = objc_msgSend_count(v26, v27, v28, v29);
    }
  }
  return result;
}

void sub_1B1978568(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1B1978598((char **)a1, a2 - v2);
  }
}

void sub_1B1978598(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      abort();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1B17F812C(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void sub_1B197869C(uint64_t a1, void *a2, const char *a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  unsigned int v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  _QWORD *v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float64x2_t v130;
  float64x2_t v131;
  float64x2_t v132;
  float64x2_t v133;
  float64x2_t v134;
  float64x2_t v135;
  float64x2_t v136;
  float64x2_t v137;

  if (a5)
  {
    v9 = (void *)objc_msgSend_skinner(a2, (const char *)a2, (uint64_t)a3, a4);
    v13 = (void *)objc_msgSend_boneWeights(v9, v10, v11, v12);
    v17 = (void *)objc_msgSend_data(v13, v14, v15, v16);
    v21 = objc_msgSend_bytes(v17, v18, v19, v20);
    v25 = (void *)objc_msgSend_boneWeights(v9, v22, v23, v24);
    v29 = objc_msgSend_dataOffset(v25, v26, v27, v28);
    v33 = (void *)objc_msgSend_boneIndices(v9, v30, v31, v32);
    v37 = (void *)objc_msgSend_data(v33, v34, v35, v36);
    v41 = objc_msgSend_bytes(v37, v38, v39, v40);
    v45 = (void *)objc_msgSend_boneIndices(v9, v42, v43, v44);
    v49 = objc_msgSend_dataOffset(v45, v46, v47, v48);
    if (v21 && v41)
    {
      v53 = v41 + v49;
      v54 = v21 + v29;
      v55 = (void *)objc_msgSend_boneWeights(v9, v50, v51, v52);
      v59 = objc_msgSend_vectorCount(v55, v56, v57, v58);
      v63 = (void *)objc_msgSend_boneWeights(v9, v60, v61, v62);
      v67 = objc_msgSend_componentsPerVector(v63, v64, v65, v66) * v59;
      v71 = (void *)objc_msgSend_boneWeights(v9, v68, v69, v70);
      v75 = objc_msgSend_componentsPerVector(v71, v72, v73, v74);
      v79 = (void *)objc_msgSend_boneIndices(v9, v76, v77, v78);
      v83 = objc_msgSend_vectorCount(v79, v80, v81, v82);
      v87 = (void *)objc_msgSend_boneIndices(v9, v84, v85, v86);
      v91 = objc_msgSend_componentsPerVector(v87, v88, v89, v90) * v83;
      v95 = (void *)objc_msgSend_boneIndices(v9, v92, v93, v94);
      v99 = objc_msgSend_componentsPerVector(v95, v96, v97, v98);
      v103 = (void *)objc_msgSend_boneIndices(v9, v100, v101, v102);
      v107 = objc_msgSend_bytesPerComponent(v103, v104, v105, v106);
      objc_msgSend_baseMeshBindTransform(v9, v108, v109, v110);
      v130 = vcvtq_f64_f32(*(float32x2_t *)v111.f32);
      v131 = vcvt_hight_f64_f32(v111);
      v132 = vcvtq_f64_f32(*(float32x2_t *)v112.f32);
      v133 = vcvt_hight_f64_f32(v112);
      v134 = vcvtq_f64_f32(*(float32x2_t *)v113.f32);
      v135 = vcvt_hight_f64_f32(v113);
      v136 = vcvtq_f64_f32(*(float32x2_t *)v114.f32);
      v137 = vcvt_hight_f64_f32(v114);
      sub_1B1979618(a5, a3, v54, v67, v75, v53, v91, v99, v107, &v130);
      return;
    }
    v121 = objc_msgSend_skeleton(v9, v50, v51, v52);
    if (v121)
      v125 = (const char *)v121;
    else
      v125 = (const char *)a2;
    objc_msgSend_baseMeshBindTransform(v9, v122, v123, v124);
    v130 = vcvtq_f64_f32(*(float32x2_t *)v126.f32);
    v131 = vcvt_hight_f64_f32(v126);
    v132 = vcvtq_f64_f32(*(float32x2_t *)v127.f32);
    v133 = vcvt_hight_f64_f32(v127);
    v134 = vcvtq_f64_f32(*(float32x2_t *)v128.f32);
    v135 = vcvt_hight_f64_f32(v128);
    v136 = vcvtq_f64_f32(*(float32x2_t *)v129.f32);
    v137 = vcvt_hight_f64_f32(v129);
    v119 = (_QWORD *)a4;
    v120 = v125;
  }
  else
  {
    if (!a4)
      return;
    objc_msgSend_worldTransform(a2, (const char *)a2, (uint64_t)a3, a4);
    v130 = vcvtq_f64_f32(*(float32x2_t *)v115.f32);
    v131 = vcvt_hight_f64_f32(v115);
    v132 = vcvtq_f64_f32(*(float32x2_t *)v116.f32);
    v133 = vcvt_hight_f64_f32(v116);
    v134 = vcvtq_f64_f32(*(float32x2_t *)v117.f32);
    v135 = vcvt_hight_f64_f32(v117);
    v136 = vcvtq_f64_f32(*(float32x2_t *)v118.f32);
    v137 = vcvt_hight_f64_f32(v118);
    v119 = (_QWORD *)a4;
    v120 = (const char *)a2;
  }
  sub_1B1979450(v119, v120, a3, &v130);
}

char *sub_1B19788D0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  char *result;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void **v39;
  void **v40;
  void *v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  void **v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  void *v53;
  const __CFString *v54;
  void *v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  _OWORD *v61;
  __int128 v62;
  char *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  double v81;
  int v82;
  unint64_t v83;
  double v84;
  double v85;
  unint64_t v86;
  __int128 *v87;
  __int128 *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  void **v93;
  void *v94;
  void *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  const char *v120;
  uint64_t v121;
  void *v122;
  const char *v123;
  uint64_t v124;
  uint64_t v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  double v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  const char *v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  const char *v142;
  uint64_t v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  void *v154;
  const char *v155;
  uint64_t v156;
  uint64_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  __n128 v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  const char *v170;
  uint64_t v171;
  void *v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  __n128 v176;
  const char *v177;
  uint64_t v178;
  uint64_t v179;
  void *v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  void *v184;
  const char *v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  float32x4_t v191;
  void *v192;
  const char *v193;
  uint64_t v194;
  uint64_t v195;
  void *v196;
  const char *v197;
  uint64_t v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  void *v202;
  const char *v203;
  uint64_t v204;
  uint64_t v205;
  float32x4_t v206;
  std::string::size_type size;
  std::string::size_type n128_u64;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  __n128 *v212;
  __n128 *v213;
  std::string::size_type v214;
  __n128 v215;
  float32x4_t *v216;
  float32x4_t *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  char *v221;
  float32x4_t *v222;
  float32x4_t *v223;
  float32x4_t *v224;
  float32x4_t *v225;
  float32x4_t *v226;
  float32x4_t *v227;
  uint64_t v228;
  unint64_t v229;
  char *v230;
  float32x4_t *v231;
  float32x4_t *v232;
  float32x4_t *v233;
  float32x4_t v234;
  double v235;
  double v236;
  uint64_t v237;
  void *v238;
  const char *v239;
  const char *v240;
  void *v241;
  const char *v242;
  const char *v243;
  void *v244;
  const char *v245;
  const char *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  const char *v250;
  uint64_t *v251;
  void *v252;
  __int128 v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  __int128 *v260;
  float32x4_t v261;
  float32x4_t v262;
  __int128 v263;
  __n128 v264;
  void *v265;
  float32x4_t *v266;
  float32x4_t *v267;
  void *v268;
  float32x4_t *v269;
  float32x4_t *v270;
  std::string __p;
  char *v272;
  char *v273;
  unint64_t v274;
  __int128 v275;
  __int128 v276;
  uint64_t *v277;
  _QWORD *v278[2];
  __int128 *v279;

  v4 = a2;
  result = (char *)sub_1B196EE70(a2, (const char *)a2, a3, a4);
  if (!result)
    return result;
  v9 = result;
  v10 = (void *)objc_msgSend_animationKeys(result, v6, v7, v8);
  result = (char *)objc_msgSend_count(v10, v11, v12, v13);
  if (!result)
    return result;
  v254 = v9;
  v16 = 0;
  __asm { FMOV            V0.2D, #1.0 }
  v253 = _Q0;
  __asm { FMOV            V0.4S, #1.0 }
  v261 = _Q0;
  v251 = v4;
  v252 = v10;
  while (2)
  {
    v255 = v16;
    v23 = (void *)objc_msgSend_objectAtIndex_(v10, v14, v16, v15);
    v26 = (void *)objc_msgSend_animationPlayerForKey_(v254, v24, (uint64_t)v23, v25);
    v30 = (void *)objc_msgSend_animation(v26, v27, v28, v29);
    v275 = xmmword_1B2268520;
    v276 = v253;
    v278[0] = 0;
    v278[1] = 0;
    v277 = (uint64_t *)v278;
    v34 = (void *)objc_msgSend_caAnimation(v30, v31, v32, v33);
    sub_1B1979AD8((uint64_t)&v275, v34);
    v38 = (void *)objc_opt_new();
    v272 = 0;
    v273 = 0;
    v274 = 0;
    v39 = (void **)*v4;
    v40 = (void **)v4[1];
    while (v39 != v40)
    {
      v41 = *v39;
      v42 = (void *)objc_msgSend_name(*v39, v35, v36, v37);
      v46 = (char *)objc_msgSend_UTF8String(v42, v43, v44, v45);
      sub_1B1970F28(&__p, v46);
      v47 = sub_1B1970FD4((uint64_t)&v277, (void **)&__p.__r_.__value_.__l.__data_);
      if (v278 == (_QWORD **)v47)
      {
        if (!objc_msgSend_identifier(v41, v35, v36, v37))
          goto LABEL_20;
        v48 = (void *)objc_msgSend_identifier(v41, v35, v36, v37);
        v52 = (char *)objc_msgSend_UTF8String(v48, v49, v50, v51);
        sub_1B19711A0(&__p, v52);
        v47 = sub_1B1970FD4((uint64_t)&v277, (void **)&__p.__r_.__value_.__l.__data_);
      }
      if (v47 != (void **)v278)
      {
        v53 = *(void **)*v4;
        v54 = &stru_1E63FD500;
        do
        {
          v55 = (void *)objc_msgSend_name(v41, v35, v36, v37);
          v57 = (void *)sub_1B196D580(v55, v56);
          v54 = (const __CFString *)objc_msgSend_stringByAppendingPathComponent_(v57, v58, (uint64_t)v54, v59);
          if (v41 == v53)
            break;
          v41 = (void *)objc_msgSend_parentNode(v41, v35, v60, v37);
        }
        while (v41);
        objc_msgSend_addObject_(v38, v35, (uint64_t)v54, v37);
        v61 = v273;
        if ((unint64_t)v273 >= v274)
        {
          v63 = sub_1B1976784(&v272, (__int128 *)&__p);
        }
        else
        {
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1B197137C(v273, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
          }
          else
          {
            v62 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v273 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *v61 = v62;
          }
          v63 = (char *)v61 + 24;
        }
        v273 = v63;
      }
LABEL_20:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      ++v39;
    }
    v67 = objc_msgSend_count(v38, v35, v36, v37);
    if (v67)
    {
      v68 = (void *)sub_1B1977FDC(a1, v64, v65, v66);
      v70 = sub_1B196D580(v23, v69);
      v73 = objc_msgSend_stringByAppendingPathComponent_(v68, v71, v70, v72);
      v250 = (const char *)objc_msgSend_objectPathWithString_(VFXUSKObjectPath_helper, v74, v73, v75);
      v76 = objc_msgSend_world_nodeAtPath_type_(VFXUSKHelper, v250, *(_QWORD *)(a1 + 56), (uint64_t)v250, qword_1EEF66B80);
      v78 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v77, v76, (uint64_t)CFSTR("joints"), qword_1EEF66B38, qword_1EEF66BB0);
      objc_msgSend_setStringArray_(v78, v79, (uint64_t)v38, v80);

      memset(&__p, 0, sizeof(__p));
      sub_1B19737F0((void **)&__p.__r_.__value_.__l.__data_, 0xAAAAAAAAAAAAAAABLL * ((v273 - v272) >> 3));
      v268 = 0;
      v269 = 0;
      v270 = 0;
      sub_1B195E990(&v268, 0xAAAAAAAAAAAAAAABLL * ((v273 - v272) >> 3));
      v265 = 0;
      v266 = 0;
      v267 = 0;
      sub_1B19737F0(&v265, 0xAAAAAAAAAAAAAAABLL * ((v273 - v272) >> 3));
      v81 = *((double *)&v275 + 1) - *(double *)&v275;
      v82 = (int)((*((double *)&v275 + 1) - *(double *)&v275) / *(double *)&v276 + 0.5);
      if ((v82 & 0x80000000) == 0)
      {
        v83 = 0;
        v84 = (double)v82;
        v256 = (v82 + 1);
        v257 = v76;
        v258 = v67;
        do
        {
          v85 = *(double *)&v275;
          sub_1B17F76F8((uint64_t)&__p, 0);
          sub_1B18261CC((uint64_t)&v268, 0);
          sub_1B17F76F8((uint64_t)&v265, 0);
          v88 = (__int128 *)v272;
          v87 = (__int128 *)v273;
          v260 = (__int128 *)v273;
          while (v88 != v87)
          {
            v264.n128_u32[2] = 0;
            v264.n128_u64[0] = 0;
            v262 = v261;
            v279 = v88;
            v89 = sub_1B197A058(&v277, (void **)v88, (uint64_t)&unk_1B22458B0, &v279);
            v263 = xmmword_1B2244E20;
            v264 = 0u;
            v262 = v261;
            v92 = (void **)v89[7];
            v93 = (void **)v89[8];
            while (v92 != v93)
            {
              v94 = *v92;
              v95 = (void *)objc_msgSend_keyTimes(*v92, (const char *)v86, v90, v91);
              if (objc_msgSend_count(v95, v96, v97, v98))
              {
                v99 = (void *)objc_msgSend_keyPath(v94, (const char *)v86, v90, v91);
                v102 = (void *)objc_msgSend_componentsSeparatedByString_(v99, v100, (uint64_t)CFSTR("."), v101);
                objc_msgSend_duration(v94, v103, v104, v105);
                v107 = v106;
                v111 = objc_msgSend_count(v95, v108, v109, v110);
                v114 = (void *)objc_msgSend_objectAtIndexedSubscript_(v95, v112, v111 - 1, v113);
                objc_msgSend_doubleValue(v114, v115, v116, v117);
                v119 = v118;
                v122 = (void *)objc_msgSend_objectAtIndexedSubscript_(v95, v120, 0, v121);
                objc_msgSend_doubleValue(v122, v123, v124, v125);
                v129 = 0;
                if (v119 - v130 >= 0.0001 && v107 >= 0.0001)
                {
                  objc_msgSend_beginTime(v94, v126, v127, v128);
                  if (objc_msgSend_count(v95, v131, v132, v133) <= v83)
                  {
                    v129 = objc_msgSend_count(v95, v134, v135, v136) - 1;
                  }
                  else
                  {
                    v137 = (void *)objc_msgSend_objectAtIndexedSubscript_(v95, v134, v83, v136);
                    objc_msgSend_doubleValue(v137, v138, v139, v140);
                    v129 = v83;
                  }
                }
                v141 = (void *)objc_msgSend_objectAtIndex_(v102, v126, 1, v128);
                if (objc_msgSend_isEqualToString_(v141, v142, (uint64_t)CFSTR("transform"), v143))
                {
                  v147 = (void *)objc_msgSend_keyTimes(v94, v144, v145, v146);
                  if (objc_msgSend_count(v147, v148, v149, v150))
                  {
                    v151 = (void *)objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    v154 = (void *)objc_msgSend_objectAtIndexedSubscript_(v151, v152, v129, v153);
                    objc_msgSend_VFXMatrix4Value(v154, v155, v156, v157);
                    sub_1B18927E4((float32x4_t *)&v263, &v264, &v262, v158, v159, v160, v161);
                  }
                }
                else if ((objc_msgSend_isEqualToString_(v141, v144, (uint64_t)CFSTR("position"), v146) & 1) != 0
                       || objc_msgSend_isEqualToString_(v141, v162, (uint64_t)CFSTR("translation"), v164))
                {
                  v165 = (void *)objc_msgSend_keyTimes(v94, v162, v163, v164);
                  if (objc_msgSend_count(v165, v166, v167, v168))
                  {
                    v169 = (void *)objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    v172 = (void *)objc_msgSend_objectAtIndexedSubscript_(v169, v170, v129, v171);
                    objc_msgSend_VFXFloat3Value(v172, v173, v174, v175);
                    v264 = v176;
                  }
                }
                else if ((objc_msgSend_isEqualToString_(v141, v162, (uint64_t)CFSTR("orientation"), v164) & 1) != 0
                       || objc_msgSend_isEqualToString_(v141, v177, (uint64_t)CFSTR("quaternion"), v179))
                {
                  v180 = (void *)objc_msgSend_keyTimes(v94, v177, v178, v179);
                  if (objc_msgSend_count(v180, v181, v182, v183))
                  {
                    v184 = (void *)objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    v187 = (void *)objc_msgSend_objectAtIndexedSubscript_(v184, v185, v129, v186);
                    objc_msgSend_VFXFloat4Value(v187, v188, v189, v190);
                    v263 = (__int128)v191;
                  }
                }
                else if (objc_msgSend_isEqualToString_(v141, v177, (uint64_t)CFSTR("scale"), v179))
                {
                  v192 = (void *)objc_msgSend_keyTimes(v94, (const char *)v86, v90, v91);
                  if (objc_msgSend_count(v192, v193, v194, v195))
                  {
                    v196 = (void *)objc_msgSend_values(v94, (const char *)v86, v90, v91);
                    if (v129 >= objc_msgSend_count(v196, v197, v198, v199))
                      v202 = (void *)objc_msgSend_objectAtIndexedSubscript_(v196, v200, 0, v201);
                    else
                      v202 = (void *)objc_msgSend_objectAtIndexedSubscript_(v196, v200, v129, v201);
                    objc_msgSend_VFXFloat3Value(v202, v203, v204, v205);
                    v262 = v206;
                  }
                }
              }
              ++v92;
            }
            size = __p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_ >= __p.__r_.__value_.__r.__words[2])
            {
              v209 = (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4;
              if ((unint64_t)(v209 + 1) >> 60)
                goto LABEL_121;
              v210 = (uint64_t)(__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0]) >> 3;
              if (v210 <= v209 + 1)
                v210 = v209 + 1;
              if (__p.__r_.__value_.__r.__words[2] - __p.__r_.__value_.__r.__words[0] >= 0x7FFFFFFFFFFFFFF0)
                v86 = 0xFFFFFFFFFFFFFFFLL;
              else
                v86 = v210;
              if (v86)
                v211 = (char *)sub_1B17F7824((uint64_t)&__p.__r_.__value_.__r.__words[2], v86);
              else
                v211 = 0;
              v212 = (__n128 *)&v211[16 * v209];
              *v212 = v264;
              n128_u64 = (std::string::size_type)v212[1].n128_u64;
              v213 = (__n128 *)__p.__r_.__value_.__l.__size_;
              v214 = __p.__r_.__value_.__r.__words[0];
              if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
              {
                do
                {
                  v215 = v213[-1];
                  --v213;
                  v212[-1] = v215;
                  --v212;
                }
                while (v213 != (__n128 *)v214);
                v213 = (__n128 *)__p.__r_.__value_.__r.__words[0];
              }
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v212;
              __p.__r_.__value_.__l.__size_ = n128_u64;
              __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v211[16 * v86];
              if (v213)
                operator delete(v213);
            }
            else
            {
              *(__n128 *)__p.__r_.__value_.__l.__size_ = v264;
              n128_u64 = size + 16;
            }
            __p.__r_.__value_.__l.__size_ = n128_u64;
            v216 = v269;
            if (v269 >= v270)
            {
              v218 = ((char *)v269 - (_BYTE *)v268) >> 4;
              v219 = v218 + 1;
              if ((unint64_t)(v218 + 1) >> 60)
                goto LABEL_121;
              v220 = (char *)v270 - (_BYTE *)v268;
              if (((char *)v270 - (_BYTE *)v268) >> 3 > v219)
                v219 = v220 >> 3;
              if ((unint64_t)v220 >= 0x7FFFFFFFFFFFFFF0)
                v86 = 0xFFFFFFFFFFFFFFFLL;
              else
                v86 = v219;
              if (v86)
                v221 = (char *)sub_1B17F7824((uint64_t)&v270, v86);
              else
                v221 = 0;
              v222 = (float32x4_t *)&v221[16 * v218];
              *v222 = (float32x4_t)v263;
              v224 = (float32x4_t *)v268;
              v223 = v269;
              v225 = v222;
              if (v269 != v268)
              {
                do
                {
                  v225[-1] = v223[-1];
                  --v225;
                  --v223;
                }
                while (v223 != v224);
                v223 = (float32x4_t *)v268;
              }
              v217 = v222 + 1;
              v268 = v225;
              v269 = v222 + 1;
              v270 = (float32x4_t *)&v221[16 * v86];
              if (v223)
                operator delete(v223);
            }
            else
            {
              *v269 = (float32x4_t)v263;
              v217 = v216 + 1;
            }
            v269 = v217;
            v226 = v266;
            if (v266 >= v267)
            {
              v228 = ((char *)v266 - (_BYTE *)v265) >> 4;
              if ((unint64_t)(v228 + 1) >> 60)
LABEL_121:
                abort();
              v229 = ((char *)v267 - (_BYTE *)v265) >> 3;
              if (v229 <= v228 + 1)
                v229 = v228 + 1;
              if ((unint64_t)((char *)v267 - (_BYTE *)v265) >= 0x7FFFFFFFFFFFFFF0)
                v86 = 0xFFFFFFFFFFFFFFFLL;
              else
                v86 = v229;
              if (v86)
                v230 = (char *)sub_1B17F7824((uint64_t)&v267, v86);
              else
                v230 = 0;
              v231 = (float32x4_t *)&v230[16 * v228];
              *v231 = v262;
              v227 = v231 + 1;
              v233 = (float32x4_t *)v265;
              v232 = v266;
              if (v266 != v265)
              {
                do
                {
                  v234 = v232[-1];
                  --v232;
                  v231[-1] = v234;
                  --v231;
                }
                while (v232 != v233);
                v232 = (float32x4_t *)v265;
              }
              v265 = v231;
              v266 = v227;
              v267 = (float32x4_t *)&v230[16 * v86];
              if (v232)
                operator delete(v232);
            }
            else
            {
              *v266 = v262;
              v227 = v226 + 1;
            }
            v266 = v227;
            v88 = (__int128 *)((char *)v88 + 24);
            v87 = v260;
          }
          v235 = (v81 * (double)(int)v83 / v84 + v85) / *(double *)(a1 + 504) + 0.0;
          v236 = (double)(int)v235;
          if (vabdd_f64(v235, v236) >= 0.001)
          {
            v237 = v257;
            v67 = v258;
            if (1.0 - (v235 - v236) < 0.001)
              v235 = v236 + 1.0;
            v238 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v86, v257, (uint64_t)CFSTR("translations"), qword_1EEF66B00, qword_1EEF66BB0);
          }
          else
          {
            v235 = (double)(int)v235;
            v237 = v257;
            v67 = v258;
            v238 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v86, v257, (uint64_t)CFSTR("translations"), qword_1EEF66B00, qword_1EEF66BB0);
          }
          objc_msgSend_setFloat3Array_count_atTime_(v238, v239, (uint64_t)__p.__r_.__value_.__l.__data_, (uint64_t)(__p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]) >> 4, v235);
          v241 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v240, v237, (uint64_t)CFSTR("rotations"), qword_1EEF66B30, qword_1EEF66BB0);
          objc_msgSend_setQuatfArray_count_atTime_(v241, v242, (uint64_t)v268, ((char *)v269 - (_BYTE *)v268) >> 4, v235);
          v244 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v243, v237, (uint64_t)CFSTR("scales"), qword_1EEF66B00, qword_1EEF66BB0);
          objc_msgSend_setFloat3Array_count_atTime_(v244, v245, (uint64_t)v265, ((char *)v266 - (_BYTE *)v265) >> 4, v235);
          ++v83;
        }
        while (v83 != v256);
      }
      if (v265)
      {
        v266 = (float32x4_t *)v265;
        operator delete(v265);
      }
      v4 = v251;
      if (v268)
      {
        v269 = (float32x4_t *)v268;
        operator delete(v268);
      }
      if (__p.__r_.__value_.__r.__words[0])
      {
        __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    else
    {

    }
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v272;
    sub_1B196D84C((void ***)&__p);
    sub_1B197A21C((uint64_t)&v277, v278[0]);
    if (!v67)
    {
      v10 = v252;
      v249 = objc_msgSend_count(v252, v246, v247, v248);
      v16 = v255 + 1;
      if (v255 + 1 >= v249)
        return 0;
      continue;
    }
    return (char *)v250;
  }
}

void sub_1B1979320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  a45 = (void *)(v50 - 248);
  sub_1B196D84C((void ***)&a45);
  sub_1B197A21C(a30, *(_QWORD **)(v50 - 184));
  _Unwind_Resume(a1);
}

uint64_t sub_1B19793F0(uint64_t result, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v5;
  const char *v6;
  uint64_t v7;

  if (!*(_QWORD *)(result + 120))
  {
    v2 = result;
    v3 = *(_QWORD *)(result + 104);
    if (v3)
    {
      v5 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, v3, (uint64_t)CFSTR("skel:animationSource"), qword_1EEF66B18, qword_1EEF66BB0);
      result = objc_msgSend_setObjectPath_(v5, v6, (uint64_t)a2, v7);
      *(_QWORD *)(v2 + 120) = a2;
    }
  }
  return result;
}

_QWORD *sub_1B1979450(_QWORD *result, const char *a2, const char *a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  void *v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  const char *v23;
  void *v24;
  const char *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  int v37;
  int v38;

  v4 = result[1] - *result;
  if (v4)
  {
    v7 = (uint64_t)result;
    v8 = 0;
    v9 = v4 >> 3;
    if (v9 <= 1)
      v9 = 1;
    while (*(const char **)(*result + 8 * v8) != a2)
    {
      if (v9 == ++v8)
        return result;
    }
    if (v8 != -1)
    {
      v38 = 1065353216;
      v10 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a3, (uint64_t)CFSTR("primvars:skel:jointWeights"), qword_1EEF66B08, qword_1EEF66BB0);
      objc_msgSend_setFloatArray_count_(v10, v11, (uint64_t)&v38, 1);
      v14 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v12, 1, v13);
      objc_msgSend_setMetadataWithKey_value_(v10, v15, (uint64_t)CFSTR("elementSize"), v14);
      v18 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v16, (uint64_t)CFSTR("constant"), v17);
      v21 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v19, v18, v20);
      objc_msgSend_setMetadataWithKey_value_(v10, v22, (uint64_t)CFSTR("interpolation"), v21);
      v37 = v8;
      v24 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v23, (uint64_t)a3, (uint64_t)CFSTR("primvars:skel:jointIndices"), qword_1EEF66B10, qword_1EEF66BB0);
      objc_msgSend_setIntArray_count_(v24, v25, (uint64_t)&v37, 1);
      v28 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v26, 1, v27);
      objc_msgSend_setMetadataWithKey_value_(v24, v29, (uint64_t)CFSTR("elementSize"), v28);
      v32 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v30, (uint64_t)CFSTR("constant"), v31);
      v35 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v33, v32, v34);
      objc_msgSend_setMetadataWithKey_value_(v24, v36, (uint64_t)CFSTR("interpolation"), v35);
      return (_QWORD *)sub_1B1979A24(v7, a3, a4);
    }
  }
  return result;
}

void sub_1B1979618(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8, int a9, _OWORD *a10)
{
  void *v16;
  const char *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  int v40;
  uint64_t v41;
  int v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  int v51;
  void *v52;
  const char *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const char *v66;
  void *__p;
  char *v69;
  char *v70;
  unint64_t v71;
  unint64_t *v72;

  v16 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a2, (uint64_t)CFSTR("primvars:skel:jointWeights"), qword_1EEF66B08, qword_1EEF66BB0);
  objc_msgSend_setFloatArray_count_(v16, v17, a3, a4);
  v20 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v18, a5, v19);
  objc_msgSend_setMetadataWithKey_value_(v16, v21, (uint64_t)CFSTR("elementSize"), v20);
  v24 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v22, (uint64_t)CFSTR("vertex"), v23);
  v27 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v25, v24, v26);
  objc_msgSend_setMetadataWithKey_value_(v16, v28, (uint64_t)CFSTR("interpolation"), v27);
  __p = 0;
  v69 = 0;
  v70 = 0;
  sub_1B17F7530(&__p, a7);
  v66 = a2;
  if (a9 == 2)
  {
    if (a7)
    {
      v30 = 0;
      do
      {
        v71 = *(unsigned __int16 *)(a6 + 2 * v30);
        v72 = &v71;
        v31 = *((_DWORD *)sub_1B181D66C((uint64_t **)(a1 + 64), &v71, (uint64_t)&unk_1B22458B0, (uint64_t **)&v72) + 10);
        v32 = v69;
        if (v69 >= v70)
        {
          v34 = (char *)__p;
          v35 = (v69 - (_BYTE *)__p) >> 2;
          v36 = v35 + 1;
          if ((unint64_t)(v35 + 1) >> 62)
            abort();
          v37 = v70 - (_BYTE *)__p;
          if ((v70 - (_BYTE *)__p) >> 1 > v36)
            v36 = v37 >> 1;
          if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v36;
          if (v29)
          {
            v38 = (char *)sub_1B17F7E58((uint64_t)&v70, v29);
            v34 = (char *)__p;
            v32 = v69;
          }
          else
          {
            v38 = 0;
          }
          v39 = &v38[4 * v35];
          *(_DWORD *)v39 = v31;
          v33 = v39 + 4;
          while (v32 != v34)
          {
            v40 = *((_DWORD *)v32 - 1);
            v32 -= 4;
            *((_DWORD *)v39 - 1) = v40;
            v39 -= 4;
          }
          __p = v39;
          v69 = v33;
          v70 = &v38[4 * v29];
          if (v34)
            operator delete(v34);
        }
        else
        {
          *(_DWORD *)v69 = v31;
          v33 = v32 + 4;
        }
        v69 = v33;
        ++v30;
      }
      while (v30 != a7);
    }
  }
  else if (a7)
  {
    v41 = 0;
    do
    {
      v71 = *(int *)(a6 + 4 * v41);
      v72 = &v71;
      v42 = *((_DWORD *)sub_1B181D66C((uint64_t **)(a1 + 64), &v71, (uint64_t)&unk_1B22458B0, (uint64_t **)&v72) + 10);
      v43 = v69;
      if (v69 >= v70)
      {
        v45 = (char *)__p;
        v46 = (v69 - (_BYTE *)__p) >> 2;
        v47 = v46 + 1;
        if ((unint64_t)(v46 + 1) >> 62)
          abort();
        v48 = v70 - (_BYTE *)__p;
        if ((v70 - (_BYTE *)__p) >> 1 > v47)
          v47 = v48 >> 1;
        if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
          v29 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v29 = v47;
        if (v29)
        {
          v49 = (char *)sub_1B17F7E58((uint64_t)&v70, v29);
          v45 = (char *)__p;
          v43 = v69;
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[4 * v46];
        *(_DWORD *)v50 = v42;
        v44 = v50 + 4;
        while (v43 != v45)
        {
          v51 = *((_DWORD *)v43 - 1);
          v43 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        __p = v50;
        v69 = v44;
        v70 = &v49[4 * v29];
        if (v45)
          operator delete(v45);
      }
      else
      {
        *(_DWORD *)v69 = v42;
        v44 = v43 + 4;
      }
      v69 = v44;
      ++v41;
    }
    while (v41 != a7);
  }
  v52 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, (const char *)v29, (uint64_t)v66, (uint64_t)CFSTR("primvars:skel:jointIndices"), qword_1EEF66B10, qword_1EEF66BB0);
  objc_msgSend_setIntArray_count_(v52, v53, (uint64_t)__p, a7);
  v56 = objc_msgSend_dataWithInt_(VFXUSKData_helper, v54, a8, v55);
  objc_msgSend_setMetadataWithKey_value_(v52, v57, (uint64_t)CFSTR("elementSize"), v56);
  v60 = objc_msgSend_tokenWithString_(VFXUSKToken_helper, v58, (uint64_t)CFSTR("vertex"), v59);
  v63 = objc_msgSend_dataWithToken_(VFXUSKData_helper, v61, v60, v62);
  objc_msgSend_setMetadataWithKey_value_(v52, v64, (uint64_t)CFSTR("interpolation"), v63);
  sub_1B1979A24(*(_QWORD *)(a1 + 56), v66, a10);
  if (__p)
  {
    v69 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B19799F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B1979A24(uint64_t a1, const char *a2, _OWORD *a3)
{
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  _OWORD v18[8];

  v6 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, a2, (uint64_t)a2, (uint64_t)CFSTR("primvars:skel:geomBindTransform"), qword_1EEF66AC8, qword_1EEF66BB0);
  v7 = a3[5];
  v18[4] = a3[4];
  v18[5] = v7;
  v8 = a3[7];
  v18[6] = a3[6];
  v18[7] = v8;
  v9 = a3[1];
  v18[0] = *a3;
  v18[1] = v9;
  v10 = a3[3];
  v18[2] = a3[2];
  v18[3] = v10;
  objc_msgSend_setDouble4x4Value_(v6, v11, (uint64_t)v18, v12);
  v14 = (void *)objc_msgSend_node_propertyWithName_type_role_(VFXUSKHelper, v13, (uint64_t)a2, (uint64_t)CFSTR("skel:skeleton"), qword_1EEF66B18, qword_1EEF66BB0);
  return objc_msgSend_setObjectPath_(v14, v15, *(_QWORD *)(a1 + 112), v16);
}

void sub_1B1979AD8(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void **v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  double v54;
  const char *v55;
  uint64_t v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  double v64;
  double v65;
  double v66;
  const char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  double v73;
  double v74;
  double v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  double v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  void *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  double v92;
  double v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  double v99;
  double v100;
  double v101;
  void *v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  double v107;
  const char *v108;
  uint64_t v109;
  void *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  double v115;
  void *__p;
  _BYTE *v117;
  uint64_t v118;
  void *v119[2];
  char v120;
  void *v121;
  void **v122;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    sub_1B1979E0C(a1, a2, v4, v5);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v121 = a2;
      v9 = (void *)objc_msgSend_keyTimes(a2, v6, v7, v8);
      if (objc_msgSend_count(v9, v10, v11, v12))
      {
        v16 = (void *)objc_msgSend_keyPath(a2, v13, v14, v15);
        if (objc_msgSend_length(v16, v17, v18, v19))
        {
          v22 = (void *)objc_msgSend_componentsSeparatedByString_(v16, v20, (uint64_t)CFSTR("."), v21);
          if (objc_msgSend_count(v22, v23, v24, v25) == 2)
          {
            v28 = (void *)objc_msgSend_objectAtIndex_(v22, v26, 0, v27);
            if (objc_msgSend_characterAtIndex_(v28, v29, 0, v30) == 47)
            {
              v33 = (void *)objc_msgSend_substringFromIndex_(v28, v31, 1, v32);
              v37 = (char *)objc_msgSend_UTF8String(v33, v34, v35, v36);
              sub_1B1970F28(v119, v37);
              v38 = sub_1B1970FD4(a1 + 32, v119);
              if ((void **)(a1 + 40) == v38)
              {
                __p = 0;
                v117 = 0;
                v118 = 0;
                sub_1B1979E7C(&__p, &v121);
                v122 = v119;
                v42 = (char *)(sub_1B197A058((uint64_t **)(a1 + 32), v119, (uint64_t)&unk_1B22458B0, (__int128 **)&v122)
                             + 7);
                if (v42 != (char *)&__p)
                  sub_1B1979F54(v42, (char *)__p, (uint64_t)v117, (v117 - (_BYTE *)__p) >> 3);
                if (__p)
                {
                  v117 = __p;
                  operator delete(__p);
                }
              }
              else
              {
                sub_1B1979E7C(v38 + 7, &v121);
              }
              if ((unint64_t)objc_msgSend_count(v9, v39, v40, v41) >= 2)
              {
                v46 = objc_msgSend_count(v9, v43, v44, v45);
                v49 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v47, v46 - 1, v48);
                objc_msgSend_doubleValue(v49, v50, v51, v52);
                v54 = v53;
                v57 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v55, 0, v56);
                objc_msgSend_doubleValue(v57, v58, v59, v60);
                v65 = v54 - v64;
                if (v65 >= 0.0001)
                {
                  objc_msgSend_duration(v121, v61, v62, v63);
                  *(double *)(a1 + 24) = v66 / v65;
                  v69 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v67, 0, v68);
                  objc_msgSend_doubleValue(v69, v70, v71, v72);
                  v74 = v73;
                  v75 = *(double *)(a1 + 24);
                  objc_msgSend_beginTime(v121, v76, v77, v78);
                  v80 = v79;
                  v84 = objc_msgSend_count(v9, v81, v82, v83);
                  v87 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v85, v84 - 1, v86);
                  objc_msgSend_doubleValue(v87, v88, v89, v90);
                  v92 = v91;
                  v93 = *(double *)(a1 + 24);
                  objc_msgSend_beginTime(v121, v94, v95, v96);
                  v99 = v80 + v74 * v75;
                  v101 = v100 + v92 * v93;
                  if (*(double *)a1 > v99)
                    *(double *)a1 = v99;
                  if (*(double *)(a1 + 8) < v101)
                    *(double *)(a1 + 8) = v101;
                  v102 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v97, 1, v98);
                  objc_msgSend_doubleValue(v102, v103, v104, v105);
                  v107 = v106;
                  v110 = (void *)objc_msgSend_objectAtIndexedSubscript_(v9, v108, 0, v109);
                  objc_msgSend_doubleValue(v110, v111, v112, v113);
                  v115 = (v107 - v114) * *(double *)(a1 + 24);
                  if (v115 > 0.0001 && *(double *)(a1 + 16) > 0.0001)
                    *(double *)(a1 + 16) = v115;
                }
              }
              if (v120 < 0)
                operator delete(v119[0]);
            }
          }
        }
      }
    }
  }
}

void sub_1B1979DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B1979E0C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t i;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v6 = (void *)objc_msgSend_animations(a2, (const char *)a2, a3, a4);
  result = objc_msgSend_count(v6, v7, v8, v9);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      v15 = (void *)objc_msgSend_animations(a2, v11, v12, v13);
      v18 = objc_msgSend_objectAtIndex_(v15, v16, i, v17);
      sub_1B1979AD8(a1, v18);
      v22 = (void *)objc_msgSend_animations(a2, v19, v20, v21);
      result = objc_msgSend_count(v22, v23, v24, v25);
    }
  }
  return result;
}

void sub_1B1979E7C(void **a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v10 = v5 - (_QWORD)*a1;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)sub_1B17F812C(v4, v12);
    else
      v13 = 0;
    v14 = &v13[8 * v9];
    v15 = &v13[8 * v12];
    *(_QWORD *)v14 = *a2;
    v8 = v14 + 8;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *((_QWORD *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

char *sub_1B1979F54(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      abort();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1B183C0E4(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t *sub_1B197A058(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v6 = (uint64_t **)sub_1B1971250((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    sub_1B197A100((uint64_t)a1, a4, (uint64_t)v10);
    sub_1B181D728(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    sub_1B197A194((uint64_t)v10, 0);
  }
  return v7;
}

_BYTE *sub_1B197A100@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = operator new(0x50uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 4;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_1B197137C(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1B197A17C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B197A194(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1B197A194(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1B197A1D8((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void sub_1B197A1D8(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1B197A21C(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1B197A21C(a1, *a2);
    sub_1B197A21C(a1, a2[1]);
    sub_1B197A1D8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1B197A264(uint64_t a1)
{
  void *v2;

  sub_1B196D638(a1 + 440);
  sub_1B1805B90(a1 + 416, *(_QWORD **)(a1 + 424));
  sub_1B196D6A8((uint64_t **)(a1 + 344));
  sub_1B1805B90(a1 + 320, *(_QWORD **)(a1 + 328));
  v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(_QWORD *)(a1 + 304) = v2;
    operator delete(v2);
  }
  sub_1B1805B90(a1 + 272, *(_QWORD **)(a1 + 280));
  sub_1B1805B90(a1 + 248, *(_QWORD **)(a1 + 256));
  sub_1B196D7C0(a1 + 216, *(_QWORD **)(a1 + 224));
  sub_1B196D8D8(a1 + 192, *(char **)(a1 + 200));
  sub_1B1805B90(a1 + 168, *(_QWORD **)(a1 + 176));
  sub_1B196D928(a1 + 144, *(char **)(a1 + 152));
  sub_1B1805B90(a1 + 120, *(_QWORD **)(a1 + 128));
  sub_1B1805B90(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_1B196D928(a1 + 64, *(char **)(a1 + 72));
  return a1;
}

uint64_t VFXBoundingBoxIsNull(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2;
  uint32x4_t v3;

  v2 = (uint32x4_t)vceqzq_f32(a1);
  v2.i32[3] = v2.i32[2];
  v3 = (uint32x4_t)vceqzq_f32(a2);
  v3.i32[3] = v3.i32[2];
  return (vminvq_u32(v2) & vminvq_u32(v3)) >> 31;
}

char *sub_1B197A46C(char **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char **v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"queue");
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EEF66BE0);
  v16 = sub_1B19D1A44(qword_1ED4CF768, v9, v10, v11, v12, v13, v14, v15);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EEF66BE0);
  *((_QWORD *)v16 + 6) = 0;
  *((_OWORD *)v16 + 1) = 0u;
  *((_OWORD *)v16 + 2) = 0u;
  *(_OWORD *)v16 = 0u;
  v17 = (char **)a1[1];
  if (!v17)
    v17 = a1;
  *v17 = v16;
  a1[1] = v16;
  return v16;
}

uint64_t sub_1B197A508(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

const void *sub_1B197A534()
{
  const __CFArray *v0;
  CFIndex v1;

  v0 = (const __CFArray *)*((_QWORD *)sub_1B197A564() + 2);
  v1 = CFArrayGetCount(v0) - 1;
  return CFArrayGetValueAtIndex(v0, v1);
}

void *sub_1B197A564()
{
  void *v0;
  _QWORD *v1;
  __CFRunLoop *Current;
  CFRunLoopMode v3;
  __CFRunLoopObserver *v4;

  if (qword_1ED4C1EF0[0] != -1)
    dispatch_once(qword_1ED4C1EF0, &unk_1E63D1370);
  v0 = pthread_getspecific(qword_1ED4CF778);
  if (!v0)
  {
    v0 = malloc_type_calloc(0x38uLL, 1uLL, 0x7A9368E0uLL);
    *((_QWORD *)v0 + 2) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    *((_BYTE *)v0 + 32) = 0;
    pthread_setspecific(qword_1ED4CF778, v0);
    sub_1B197A7BC(1);
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
    v1 = (_QWORD *)qword_1ED4CF780;
    *((_QWORD *)v0 + 1) = qword_1ED4CF780;
    if (v1)
      *v1 = v0;
    qword_1ED4CF780 = (uint64_t)v0;
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
    if (!*((_QWORD *)v0 + 3))
    {
      Current = CFRunLoopGetCurrent();
      v3 = CFRunLoopCopyCurrentMode(Current);
      v4 = CFRunLoopObserverCreate(0, 0xA0uLL, 1u, 2000000, (CFRunLoopObserverCallBack)sub_1B197BC7C, 0);
      *((_QWORD *)v0 + 3) = v4;
      if (v4)
        CFRunLoopAddObserver(Current, v4, (CFRunLoopMode)*MEMORY[0x1E0C9B270]);
      if (v3)
      {
        if (*((_QWORD *)v0 + 3) && v3 != (CFRunLoopMode)*MEMORY[0x1E0C9B280])
        {
          if (!qword_1EEF66BF0 && CFEqual(v3, CFSTR("UITrackingRunLoopMode")))
          {
            qword_1EEF66BF0 = (uint64_t)CFRetain(v3);
            CFRunLoopAddObserver(Current, *((CFRunLoopObserverRef *)v0 + 3), v3);
          }
          if (v3 != (CFRunLoopMode)qword_1EEF66BF0)
            CFRunLoopAddObserver(Current, *((CFRunLoopObserverRef *)v0 + 3), v3);
        }
        CFRelease(v3);
      }
    }
  }
  return v0;
}

void sub_1B197A7BC(int a1)
{
  uint64_t v2;
  const __CFArray *v3;
  CFIndex Count;
  unsigned int *ValueAtIndex;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unsigned int *v9;
  unsigned int v10;
  CFTypeRef v11;
  CFTypeRef v12;

  v2 = sub_1B197A564();
  if (CFArrayGetCount(*(CFArrayRef *)(v2 + 16)) < 1)
  {
    ValueAtIndex = 0;
  }
  else
  {
    v3 = *(const __CFArray **)(v2 + 16);
    Count = CFArrayGetCount(v3);
    ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v3, Count - 1);
  }
  if (qword_1ED4D0670 != -1)
    dispatch_once_f(&qword_1ED4D0670, &qword_1ED4CEEB0, (dispatch_function_t)sub_1B197A508);
  v6 = sub_1B179CB90(qword_1ED4CEEB0, 0x48uLL);
  v7 = v6;
  *(_QWORD *)(v6 + 32) = 0;
  if (a1)
    v8 = 2;
  else
    v8 = 0;
  *(_BYTE *)(v6 + 60) = *(_BYTE *)(v6 + 60) & 0xFD | v8;
  if (ValueAtIndex)
  {
    *(_QWORD *)(v6 + 72) = CFRetain(ValueAtIndex);
    v9 = ValueAtIndex + 16;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
    if ((ValueAtIndex[15] & 2) == 0)
    {
      *(_QWORD *)(v7 + 32) = *((_QWORD *)ValueAtIndex + 4);
      v11 = *(CFTypeRef *)(v7 + 24);
      v12 = (CFTypeRef)*((_QWORD *)ValueAtIndex + 3);
      if (v11 != v12)
      {
        if (v11)
        {
          CFRelease(*(CFTypeRef *)(v7 + 24));
          *(_QWORD *)(v7 + 24) = 0;
          v12 = (CFTypeRef)*((_QWORD *)ValueAtIndex + 3);
        }
        if (v12)
          v12 = CFRetain(v12);
        *(_QWORD *)(v7 + 24) = v12;
      }
    }
  }
  CFArrayAppendValue(*(CFMutableArrayRef *)(v2 + 16), (const void *)v7);
  CFRelease((CFTypeRef)v7);
}

void sub_1B197A8F4()
{
  if (*(double *)&qword_1ED4CF760 == 0.0)
    qword_1ED4CF760 = CACurrentMediaTime();
}

uint64_t sub_1B197A924()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
  v0 = qword_1ED4CF780;
  if (qword_1ED4CF780)
  {
    while (1)
    {
      v1 = *(_QWORD *)(v0 + 40);
      if (v1)
      {
        v2 = *(_QWORD *)(v1 + 32);
        if (v2)
        {
          if ((*(_BYTE *)(v2 + 60) & 2) != 0 || *(double *)(v2 + 40) != 0.0)
            break;
        }
      }
      v0 = *(_QWORD *)(v0 + 8);
      if (!v0)
        goto LABEL_7;
    }
    v3 = 1;
  }
  else
  {
LABEL_7:
    v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
  return v3;
}

void sub_1B197A9A8(int a1, int a2)
{
  if (!a2 || sub_1B197A924())
  {
    prof_beginFlame((uint64_t)"_CFXTransactionFlush", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Transactions/CFXTransaction.c", 993);
    if (a1)
    {
      if (qword_1ED4CECD0 != -1)
        dispatch_once(&qword_1ED4CECD0, &unk_1E63D1A70);
      dispatch_async((dispatch_queue_t)qword_1ED4CECC8, &unk_1E63DA080);
    }
    else
    {
      if (qword_1ED4CECD0 != -1)
        dispatch_once(&qword_1ED4CECD0, &unk_1E63D1A70);
      dispatch_async_and_wait((dispatch_queue_t)qword_1ED4CECC8, &unk_1E63DA080);
    }
    prof_endFlame();
  }
}

uint64_t sub_1B197AA68(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  char v25;
  uint64x2_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CFString *v40;
  double v41;
  const void *v42;
  const void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  const void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  size_t v85;
  uint64_t v86;
  uint64_t v87;
  const void *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  size_t v104;
  uint64_t v105;
  uint64_t v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  size_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  float v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const void *v173;
  const void *v174;
  __CFString *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  const void *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  void *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  size_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __CFString *v223;
  uint64_t v224;
  void *key;
  int v226;
  UInt8 bytes[13];
  int8x16_t v228;
  char v229;
  char v230;
  char v231;
  uint64_t v232;

  v232 = *MEMORY[0x1E0C80C00];
  if (!a3)
    return 0;
  result = sub_1B187A97C(a3, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (!result)
    return result;
  v22 = result;
  v23 = sub_1B19C4770(a1, v15, v16, v17, v18, v19, v20, v21);
  v24 = *(_BYTE *)(a1 + 34);
  v25 = *(_BYTE *)(a1 + 35);
  qmemcpy(bytes, "transition-0x", sizeof(bytes));
  v26 = (uint64x2_t)vdupq_n_s64((unint64_t)a2);
  v27.i64[0] = 0xF0000000FLL;
  v27.i64[1] = 0xF0000000FLL;
  v28 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B2268570), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B2268560)), v27);
  v29 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B2268590), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B2268580)), v27);
  v30 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B22685B0), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B22685A0)), v27);
  v31 = (int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B22685D0), (int32x4_t)vshlq_u64(v26, (uint64x2_t)xmmword_1B22685C0)), v27);
  v27.i64[0] = 0xA0000000ALL;
  v27.i64[1] = 0xA0000000ALL;
  v32.i64[0] = 0x5700000057;
  v32.i64[1] = 0x5700000057;
  v228 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v29), (int8x16_t)(*(_OWORD *)&v29 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v29, v32)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v28), (int8x16_t)(*(_OWORD *)&v28 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v28, v32))), (int8x16_t)vuzp1q_s16((int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v31), (int8x16_t)(*(_OWORD *)&v31 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v31, v32)), (int16x8_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v27, (uint32x4_t)v30), (int8x16_t)(*(_OWORD *)&v30 | __PAIR128__(0x3000000030, 0x3000000030)), (int8x16_t)vaddq_s32(v30, v32))));
  v229 = v24 + 97;
  v230 = v25 + 97;
  v231 = 0;
  v33 = (__CFString *)CFStringCreateWithBytes(0, bytes, 31, 0x8000100u, 0);
  v40 = v33;
  v41 = *(double *)(a5 + 32);
  if (v41 <= 0.0)
  {
    sub_1B17F3D7C(v22, a4, v33, v35, v36, v37, v38, v39);
    v175 = v40;
  }
  else
  {
    v223 = v33;
    v224 = a5;
    key = a4;
    v42 = (const void *)sub_1B191E290(v23, 1, v34, v35, v36, v37, v38, v39);
    v43 = *(const void **)(a1 + 16);
    v51 = (void *)sub_1B191E41C((uint64_t)v42, v44, v45, v46, v47, v48, v49, v50);
    v59 = sub_1B191E340((uint64_t)v42, v52, v53, v54, v55, v56, v57, v58);
    sub_1B17C5830(v43, a2, v51, v59, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v60, v61);
    (*(void (**)(uint64_t, double))(a6 + 16))(a6, v41);
    v226 = v23;
    v68 = (const void *)sub_1B191E290(v23, 1, v62, v63, v64, v65, v66, v67);
    v69 = *(const void **)(a1 + 16);
    v77 = (void *)sub_1B191E41C((uint64_t)v68, v70, v71, v72, v73, v74, v75, v76);
    v85 = sub_1B191E340((uint64_t)v68, v78, v79, v80, v81, v82, v83, v84);
    sub_1B17C5830(v69, a2, v77, v85, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v86, v87);
    v88 = *(const void **)(a1 + 16);
    v96 = (const void *)sub_1B191E41C((uint64_t)v42, v89, v90, v91, v92, v93, v94, v95);
    v104 = sub_1B191E340((uint64_t)v42, v97, v98, v99, v100, v101, v102, v103);
    sub_1B17C58FC(v88, a2, v96, v104, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v105, v106);
    v107 = (const void *)sub_1B185E424();
    sub_1B185E5C4((uint64_t)v107, (uint64_t)v68, v108, v109, v110, v111, v112, v113);
    v121 = *(double *)&qword_1ED4CF760;
    if (*(double *)&qword_1ED4CF760 == 0.0)
    {
      v121 = CACurrentMediaTime();
      qword_1ED4CF760 = *(_QWORD *)&v121;
    }
    sub_1B17F2548(v22, v121, v114, v115, v116, v117, v118, v119, v120);
    sub_1B17F2EC0(v22, a1, v122, v123, v124, v125, v126, v127);
    v128 = *(const void **)(a1 + 16);
    v136 = (void *)sub_1B191E41C((uint64_t)v42, v129, v130, v131, v132, v133, v134, v135);
    v144 = sub_1B191E340((uint64_t)v42, v137, v138, v139, v140, v141, v142, v143);
    sub_1B17C5830(v128, a2, v136, v144, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v145, v146);
    sub_1B185E69C((uint64_t)v107, (uint64_t)v42, v147, v148, v149, v150, v151, v152);
    sub_1B185DBDC((uint64_t)v107, 1, v153, v154, v155, v156, v157, v158);
    v159 = v41;
    sub_1B185D0C4((uint64_t)v107, v159, v160, v161, v162, v163, v164, v165, v166);
    v173 = *(const void **)(v224 + 24);
    if (!v173)
    {
      sub_1B1802788();
      v173 = v174;
    }
    sub_1B185D334((uint64_t)v107, v173, v167, v168, v169, v170, v171, v172);
    v175 = v223;
    sub_1B17F3D7C(v22, key, v223, v176, v177, v178, v179, v180);
    sub_1B17F377C(v22, v107, (const void *)a1, key, v223, v181, v182, v183);
    CFRelease(v107);
    CFRelease(v42);
    v23 = v226;
    if (v68)
      goto LABEL_13;
  }
  (*(void (**)(uint64_t, double))(a6 + 16))(a6, v41);
  v68 = (const void *)sub_1B191E290(v23, 1, v191, v192, v193, v194, v195, v196);
  v197 = *(const void **)(a1 + 16);
  v205 = (void *)sub_1B191E41C((uint64_t)v68, v198, v199, v200, v201, v202, v203, v204);
  v213 = sub_1B191E340((uint64_t)v68, v206, v207, v208, v209, v210, v211, v212);
  sub_1B17C5830(v197, a2, v205, v213, *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), v214, v215);
LABEL_13:
  v216 = sub_1B187B058(a3, v184, v185, v186, v187, v188, v189, v190);
  sub_1B19C4FCC(v216, a1, (uint64_t)v68, v217, v218, v219, v220, v221, v222);
  CFRelease(v175);
  CFRelease((CFTypeRef)a1);
  CFRelease(v68);
  return 1;
}

uint64_t sub_1B197AEC4(uint64_t a1, _QWORD *a2, const __CFString *a3, uint64_t a4, uint64_t a5)
{
  const __CFString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;

  if (!a1 || !a2 || !a3)
    return (*(uint64_t (**)(uint64_t, double))(a5 + 16))(a5, *(double *)(a4 + 32));
  v10 = sub_1B19C1A30(a2, a3, 0);
  v18 = (void *)sub_1B19C4614((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  if (!v10 || !v18)
  {
    if (v10)
      CFRelease(v10);
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: invalid keypath: %@ sent to object %@"), v19, v20, v21, v22, v23, v24, (uint64_t)a3);
    return (*(uint64_t (**)(uint64_t, double))(a5 + 16))(a5, *(double *)(a4 + 32));
  }
  result = sub_1B197AA68((uint64_t)v10, v18, a1, a2, a4, a5, v23, v24);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t, double))(a5 + 16))(a5, *(double *)(a4 + 32));
  return result;
}

uint64_t sub_1B197AF98(uint64_t a1, void *a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;

  if (!a1 || !a2 || !a3)
    return (*(uint64_t (**)(uint64_t, double))(a6 + 16))(a6, *(double *)(a5 + 32));
  v11 = (const void *)sub_1B19C1A88(a2, a3, a4, 0);
  v19 = (void *)sub_1B19C4614((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
  if (!v11 || !v19)
  {
    if (v11)
      CFRelease(v11);
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: invalid key+index: %@ %d sent to object %@"), v20, v21, v22, v23, v24, v25, (uint64_t)a3);
    return (*(uint64_t (**)(uint64_t, double))(a6 + 16))(a6, *(double *)(a5 + 32));
  }
  result = sub_1B197AA68((uint64_t)v11, v19, a1, a2, a5, a6, v24, v25);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t, double))(a6 + 16))(a6, *(double *)(a5 + 32));
  return result;
}

uint64_t sub_1B197B084(uint64_t a1, void *a2, const __CFString *a3, void *a4, uint64_t a5, uint64_t a6)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;

  if (!a1 || !a2 || !a3 || !a4)
    return (*(uint64_t (**)(uint64_t, double))(a6 + 16))(a6, *(double *)(a5 + 32));
  v11 = (const void *)sub_1B19C1B20(a2, a3, a4, 0);
  v19 = (void *)sub_1B19C4614((uint64_t)v11, v12, v13, v14, v15, v16, v17, v18);
  if (!v11 || !v19)
  {
    if (v11)
      CFRelease(v11);
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: invalid key+subscript: %@ %@ sent to object %@"), v20, v21, v22, v23, v24, v25, (uint64_t)a3);
    return (*(uint64_t (**)(uint64_t, double))(a6 + 16))(a6, *(double *)(a5 + 32));
  }
  result = sub_1B197AA68((uint64_t)v11, v19, a1, a2, a5, a6, v24, v25);
  if ((result & 1) == 0)
    return (*(uint64_t (**)(uint64_t, double))(a6 + 16))(a6, *(double *)(a5 + 32));
  return result;
}

void sub_1B197B174(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v10;
  const __CFArray *v11;
  CFIndex Count;
  double *ValueAtIndex;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  CFArrayRef *v36;
  CFIndex v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v10 = sub_1B197A564();
  v11 = (const __CFArray *)*((_QWORD *)v10 + 2);
  Count = CFArrayGetCount(v11);
  ValueAtIndex = (double *)CFArrayGetValueAtIndex(v11, Count - 1);
  if (ValueAtIndex[5] == 0.0)
  {
    v20 = (uint64_t)ValueAtIndex;
    prof_beginFlame((uint64_t)"CFXTransactionCommit", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Transactions/CFXTransaction.c", 1312);
    *(CFTimeInterval *)(v20 + 40) = CACurrentMediaTime();
    if ((a1 & 1) != 0)
    {
      *(_BYTE *)(v20 + 60) |= 1u;
      sub_1B197B2DC(v20, v21, v22, v23, v24, v25, v26, v27);
    }
    else
    {
      os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
      v35 = sub_1B197A46C((char **)v10 + 5, v28, v29, v30, v31, v32, v33, v34);
      *((_QWORD *)v35 + 5) = 0;
      *((_QWORD *)v35 + 4) = CFRetain((CFTypeRef)v20);
      os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
    }
    v36 = (CFArrayRef *)sub_1B197A564();
    v37 = CFArrayGetCount(v36[2]);
    if (v37 <= 1)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Error in CFXTransactionPop -> stack empty"), v38, v39, v40, v41, v42, v43, (uint64_t)"(count >= 2)");
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: unexpected transaction commit (missing begin?)"), v44, v45, v46, v47, v48, v49, v50);
    }
    else
    {
      CFArrayRemoveValueAtIndex(v36[2], v37 - 1);
    }
    if (CFArrayGetCount(*((CFArrayRef *)v10 + 2)) <= 1 && (a1 & 1) == 0)
      sub_1B197A9A8(1, 0);
    prof_endFlame();
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXTransactionCommit - transaction already committed"), v14, v15, v16, v17, v18, v19, a9);
  }
}

void sub_1B197B2DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  int v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"t");
  if ((*(_BYTE *)(a1 + 60) & 1) != 0 && !*(_DWORD *)(a1 + 56) && !atomic_load((unsigned int *)(a1 + 64)))
  {
    CFRetain((CFTypeRef)a1);
    v17 = *(unsigned int **)(a1 + 72);
    if (v17)
    {
      CFRetain(*(CFTypeRef *)(a1 + 72));
      v24 = v17 + 16;
      v25 = atomic_load(v17 + 16);
      if (v25 <= 0)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransactionRemoveChild - no child"), v18, v19, v20, v21, v22, v23, (uint64_t)"t->childCount > 0");
      v26 = v17;
      if (*(unsigned int **)(a1 + 72) == v17
        || (sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransactionRemoveChild inconsistency"), v18, v19, v20, v21, v22, v23, (uint64_t)"child->parentTransaction == t"), (v26 = *(unsigned int **)(a1 + 72)) != 0))
      {
        CFRelease(v26);
      }
      *(_QWORD *)(a1 + 72) = 0;
      do
        v34 = __ldaxr(v24);
      while (__stlxr(v34 - 1, v24));
      sub_1B197C268(a1, v27, v28, v29, v30, v31, v32, v33);
      if (!atomic_load(v24))
        sub_1B197B2DC(v17);
      CFRelease(v17);
    }
    else
    {
      sub_1B197C268(a1, v10, v11, v12, v13, v14, v15, v16);
    }
    CFRelease((CFTypeRef)a1);
  }
}

void sub_1B197B418(const void *a1, const void *a2)
{
  const void *v4;
  __CFDictionary *Mutable;

  v4 = sub_1B197A534();
  Mutable = (__CFDictionary *)*((_QWORD *)v4 + 2);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)v4 + 2) = Mutable;
  }
  if (a2)
    CFDictionarySetValue(Mutable, a1, a2);
  else
    CFDictionaryRemoveValue(Mutable, a1);
}

const __CFDictionary *sub_1B197B488(const void *a1)
{
  const __CFDictionary *result;

  result = (const __CFDictionary *)*((_QWORD *)sub_1B197A534() + 2);
  if (result)
    return (const __CFDictionary *)CFDictionaryGetValue(result, a1);
  return result;
}

void *sub_1B197B4C0(const void *a1)
{
  _QWORD *v2;
  const void *v3;
  void *result;

  v2 = sub_1B197A534();
  v3 = (const void *)v2[10];
  if (v3)
    _Block_release(v3);
  result = _Block_copy(a1);
  v2[10] = result;
  return result;
}

void sub_1B197B514()
{
  +[VFXTransaction setAnimationDuration:]_0(0.0);
}

CFTypeRef sub_1B197B59C(CFTypeRef a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  CFTypeRef result;
  uint64_t v10;

  v8 = sub_1B197A534();
  if ((v8[60] & 2) != 0)
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: modifying the timing function of an implicit transaction. Missing transaction begin?"), v2, v3, v4, v5, v6, v7, v10);
  result = (CFTypeRef)*((_QWORD *)v8 + 3);
  if (result != a1)
  {
    if (result)
    {
      CFRelease(result);
      *((_QWORD *)v8 + 3) = 0;
    }
    if (a1)
      result = CFRetain(a1);
    else
      result = 0;
    *((_QWORD *)v8 + 3) = result;
  }
  return result;
}

uint64_t sub_1B197B608()
{
  return *((_QWORD *)sub_1B197A534() + 3);
}

_BYTE *sub_1B197B620(char a1)
{
  _BYTE *result;

  result = sub_1B197A564();
  result[32] = a1;
  return result;
}

uint64_t sub_1B197B644()
{
  return *((unsigned __int8 *)sub_1B197A564() + 32);
}

void sub_1B197B65C(int a1)
{
  _BYTE *v2;
  char v3;

  v2 = sub_1B197A534();
  if (a1)
    v3 = 4;
  else
    v3 = 0;
  v2[60] = v2[60] & 0xFB | v3;
  if (a1)
    qword_1ED4CF760 = CACurrentMediaTime();
}

_QWORD *sub_1B197B6A8(uint64_t a1)
{
  _QWORD *result;

  result = sub_1B197A534();
  result[6] = a1;
  return result;
}

uint64_t sub_1B197B6CC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 60) >> 2) & 1;
}

uint64_t sub_1B197B6D8(uint64_t a1, id *a2)
{
  uint64_t v4;
  id *v5;
  id *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (!*((_BYTE *)sub_1B197A564() + 32) && (*(_BYTE *)(a1 + 60) & 4) == 0)
    return 0;
  v5 = *(id **)(a1 + 48);
  if (v5 == a2 || a2 == 0 || v5 == 0)
    return 1;
  v4 = 1;
  if ((byte_1EEF66BE8 & 1) == 0)
  {
    byte_1EEF66BE8 = 1;
    v8 = sub_1B193E758(a2);
    sub_1B193E758(*(id **)(a1 + 48));
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: World %@ is modified within a rendering callback of another world (%@). This is not allowed and may lead to crash"), v9, v10, v11, v12, v13, v14, (uint64_t)v8);
  }
  return v4;
}

CFIndex sub_1B197B780()
{
  CFArrayRef *v0;

  v0 = (CFArrayRef *)sub_1B197A564();
  return CFArrayGetCount(v0[2]) - 1;
}

_QWORD *sub_1B197B7A0(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = pthread_getspecific(qword_1ED4CF770);
  if (result)
  {
    v9 = result;
    sub_1B1807D3C(a1, result, v3, v4, v5, v6, v7, v8);
    result = (_QWORD *)sub_1B1807CF4(a1, v10, v11, v12, v13, v14, v15, v16);
    *result = sub_1B197B804;
    result[1] = sub_1B197B8A4;
    ++*((_DWORD *)v9 + 14);
  }
  return result;
}

_QWORD *sub_1B197B804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *result;

  v16 = sub_1B1807DB4(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"t");
  v17 = *(_DWORD *)(v16 + 56);
  if (!v17)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransactionAnimationDidComplete inconsistent animation count"), v10, v11, v12, v13, v14, v15, (uint64_t)"t->pendingAnimationCount>0");
    v17 = *(_DWORD *)(v16 + 56);
  }
  v18 = v17 - 1;
  *(_DWORD *)(v16 + 56) = v18;
  if (!v18)
    sub_1B197B2DC(v16, v9, v10, v11, v12, v13, v14, v15);
  sub_1B1807D3C(a1, 0, v10, v11, v12, v13, v14, v15);
  result = (_QWORD *)sub_1B1807CF4(a1, v19, v20, v21, v22, v23, v24, v25);
  *result = 0;
  result[1] = 0;
  return result;
}

_QWORD *sub_1B197B8A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *result;

  v16 = sub_1B1807DB4(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"t");
  v17 = *(_DWORD *)(v16 + 56);
  if (!v17)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXTransactionAnimationDidInterrupt inconsistent animation count"), v10, v11, v12, v13, v14, v15, (uint64_t)"t->pendingAnimationCount>0");
    v17 = *(_DWORD *)(v16 + 56);
  }
  v18 = v17 - 1;
  *(_DWORD *)(v16 + 56) = v18;
  if (!v18)
    sub_1B197B2DC(v16, v9, v10, v11, v12, v13, v14, v15);
  sub_1B1807D3C(a1, 0, v10, v11, v12, v13, v14, v15);
  result = (_QWORD *)sub_1B1807CF4(a1, v19, v20, v21, v22, v23, v24, v25);
  *result = 0;
  result[1] = 0;
  return result;
}

void sub_1B197B944()
{
  _QWORD *v0;

  v0 = pthread_getspecific(qword_1ED4CF770);
  if (v0)
  {
    if (!v0[3])
      sub_1B1802788();
  }
}

double sub_1B197B974()
{
  double *v0;

  v0 = (double *)pthread_getspecific(qword_1ED4CF770);
  if (v0)
    return v0[4];
  else
    return 0.0;
}

void sub_1B197B9A0(const void *a1, const void *a2, const void *a3, uint64_t a4, const void *a5, const void *a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  char **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  CFTypeRef v23;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef v26;

  v10 = (const void *)a4;
  if (!a6)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, (uint64_t)a5, 0, a7, a8, (uint64_t)"applyBlock");
    if (a1)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!a1)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, (uint64_t)a5, (uint64_t)a6, a7, a8, (uint64_t)"transaction");
LABEL_4:
  v14 = (char **)sub_1B197A564();
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
  v22 = sub_1B197A46C(v14 + 5, v15, v16, v17, v18, v19, v20, v21);
  if (v10 || (v10 = a2) != 0)
    v23 = CFRetain(v10);
  else
    v23 = 0;
  *((_QWORD *)v22 + 2) = v23;
  if (a5)
    v24 = CFRetain(a5);
  else
    v24 = 0;
  *((_QWORD *)v22 + 3) = v24;
  if (a3)
    v25 = CFRetain(a3);
  else
    v25 = 0;
  *((_QWORD *)v22 + 1) = v25;
  *((_QWORD *)v22 + 5) = _Block_copy(a6);
  if (a1)
    v26 = CFRetain(a1);
  else
    v26 = 0;
  *((_QWORD *)v22 + 4) = v26;
  *((CFTimeInterval *)v22 + 6) = CACurrentMediaTime();
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
}

void sub_1B197BAE0(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  v2 = (const void *)a1[2];
  if (v2)
    CFRelease(v2);
  v3 = (const void *)a1[3];
  if (v3)
    CFRelease(v3);
  v4 = (const void *)a1[9];
  if (v4)
    CFRelease(v4);
  v5 = (const void *)a1[10];
  if (v5)
    _Block_release(v5);
}

CFStringRef sub_1B197BB34(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTransaction>"));
}

CFStringRef sub_1B197BB54(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTransaction>"));
}

_QWORD *sub_1B197BB74()
{
  _QWORD *result;

  pthread_key_create((pthread_key_t *)&qword_1ED4CF778, (void (__cdecl *)(void *))sub_1B197BBC0);
  pthread_key_create((pthread_key_t *)&qword_1ED4CF770, (void (__cdecl *)(void *))nullsub_140);
  result = sub_1B19D19C8(56, 2048);
  qword_1ED4CF768 = (uint64_t)result;
  return result;
}

void sub_1B197BBC0(void *a1)
{
  uint64_t v2;
  _QWORD *v3;
  __CFRunLoopObserver *v4;

  if (!a1)
    goto LABEL_10;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
  v2 = *((_QWORD *)a1 + 5);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
  if (v2)
    sub_1B197A9A8(1, 1);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
  v3 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (!*(_QWORD *)a1)
  {
    qword_1ED4CF780 = *((_QWORD *)a1 + 1);
    if (!v3)
      goto LABEL_7;
    goto LABEL_6;
  }
  *(_QWORD *)(*(_QWORD *)a1 + 8) = v3;
  v3 = (_QWORD *)*((_QWORD *)a1 + 1);
  if (v3)
LABEL_6:
    *v3 = *(_QWORD *)a1;
LABEL_7:
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
  v4 = (__CFRunLoopObserver *)*((_QWORD *)a1 + 3);
  if (v4)
  {
    CFRunLoopObserverInvalidate(v4);
    CFRelease(*((CFTypeRef *)a1 + 3));
  }
  CFRelease(*((CFTypeRef *)a1 + 2));
LABEL_10:
  free(a1);
}

void sub_1B197BC7C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1B197A564();
  if (v2)
  {
    if (*(_QWORD *)(v2 + 24) == a1)
      sub_1B197A9A8(1, 1);
  }
}

void sub_1B197BCC0()
{
  uint64_t v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  NSObject *v13;
  os_signpost_id_t v14;
  NSObject *v15;
  unint64_t v16;
  NSObject *v17;
  __CFSet *Mutable;
  __CFArray *v19;
  _QWORD *v20;
  const void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  const void *v39;
  _QWORD *v40;
  const void *v41;
  const void *v42;
  const void *v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CFNotificationCenterRef LocalCenter;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  os_signpost_id_t spid;
  int v75;
  uint8_t v76[16];
  uint8_t buf[16];
  CFRange v78;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
  v0 = qword_1ED4CF780;
  if (qword_1ED4CF780)
  {
    v1 = 0;
    v2 = 0;
    do
    {
      v3 = 0;
      v4 = v2;
      v5 = 3.40282347e38;
      do
      {
        v6 = *(_QWORD *)(v0 + 40);
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 32);
          if ((*(double *)(v7 + 40) != 0.0 || (*(_BYTE *)(v7 + 60) & 2) != 0) && *(double *)(v6 + 48) < v5)
          {
            v3 = v0;
            v5 = *(double *)(v6 + 48);
          }
        }
        v0 = *(_QWORD *)(v0 + 8);
      }
      while (v0);
      if (!v3)
        break;
      v8 = *(_QWORD **)(v3 + 40);
      v9 = v8[4];
      v2 = v8;
      if (v4)
      {
        if (v1)
          *v1 = v8;
        v2 = v4;
      }
      while (1)
      {
        v1 = v8;
        if (!v8[5] && v8[4] == v9)
          break;
        v8 = (_QWORD *)*v8;
        if (!*v1)
        {
          *(_QWORD *)(v3 + 40) = 0;
LABEL_19:
          *(_QWORD *)(v3 + 48) = 0;
          goto LABEL_20;
        }
      }
      v10 = *v8;
      *(_QWORD *)(v3 + 40) = *v8;
      if (!v10)
        goto LABEL_19;
LABEL_20:
      *v1 = 0;
      v0 = qword_1ED4CF780;
    }
    while (qword_1ED4CF780);
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
    if (v2)
    {
      v75 = 0;
      v11 = (os_unfair_lock_s *)&unk_1EEF66BE0;
      while (1)
      {
        v12 = v11;
        pthread_mutex_lock(&stru_1ED4B7AA8);
        prof_beginFlame((uint64_t)"CFXTransactionExecuteFlush", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/Transactions/CFXTransaction.c", 1211);
        v13 = sub_1B17C439C();
        v14 = os_signpost_id_generate(v13);
        v15 = sub_1B17C439C();
        v16 = v14 - 1;
        if (v14 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v17 = v15;
          if (os_signpost_enabled(v15))
          {
            *(_WORD *)buf = 0;
            _os_signpost_emit_with_name_impl(&dword_1B178D000, v17, OS_SIGNPOST_INTERVAL_BEGIN, v14, "TransactionFlush", "", buf, 2u);
          }
        }
        spid = v14;
        Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
        v19 = 0;
        qword_1ED4CF760 = CACurrentMediaTime();
        v20 = v2;
        do
        {
          v21 = (const void *)v20[4];
          if (v20[5])
          {
            pthread_setspecific(qword_1ED4CF770, (const void *)v20[4]);
            v22 = (const void *)v20[2];
            if (v22 && sub_1B193EBA0(v22))
            {
              v30 = (const void *)sub_1B17C6244((_QWORD *)v20[2], v23, v24, v25, v26, v27, v28, v29);
              if (v30 && !CFSetContainsValue(Mutable, v30))
              {
                CFSetAddValue(Mutable, v30);
                sub_1B187973C((uint64_t)v30, v31, v32, v33, v34, v35, v36, v37);
              }
            }
            else
            {
              v30 = 0;
            }
            sub_1B197AEC4((uint64_t)v30, (_QWORD *)v20[2], (const __CFString *)v20[3], (uint64_t)v21, v20[5]);
            pthread_setspecific(qword_1ED4CF770, 0);
          }
          else
          {
            if (!v19)
              v19 = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
            CFArrayAppendValue(v19, v21);
          }
          v20 = (_QWORD *)*v20;
        }
        while (v20);
        if (v19)
        {
          v78.length = CFArrayGetCount(v19);
          v78.location = 0;
          CFArrayApplyFunction(v19, v78, (CFArrayApplierFunction)sub_1B197C1C8, 0);
          CFRelease(v19);
        }
        v38 = v2;
        v11 = v12;
        do
        {
          v40 = (_QWORD *)*v38;
          v39 = (const void *)v38[1];
          if (v39)
          {
            CFRelease(v39);
            v38[1] = 0;
          }
          v41 = (const void *)v38[2];
          if (v41)
          {
            CFRelease(v41);
            v38[2] = 0;
          }
          v42 = (const void *)v38[3];
          if (v42)
          {
            CFRelease(v42);
            v38[3] = 0;
          }
          v43 = (const void *)v38[4];
          if (v43)
          {
            CFRelease(v43);
            v38[4] = 0;
          }
          v44 = (const void *)v38[5];
          if (v44)
            _Block_release(v44);
          v38 = v40;
        }
        while (v40);
        os_unfair_lock_lock(v12);
        do
        {
          v51 = (_QWORD *)*v2;
          sub_1B19D1BD4(qword_1ED4CF768, (unint64_t)v2, v45, v46, v47, v48, v49, v50, v73);
          v2 = v51;
        }
        while (v51);
        os_unfair_lock_unlock(v12);
        CFSetApplyFunction(Mutable, (CFSetApplierFunction)sub_1B197C1D8, 0);
        LocalCenter = CFNotificationCenterGetLocalCenter();
        if (!LocalCenter)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v52, v53, v54, v55, v56, v57, (uint64_t)"nc");
        CFSetApplyFunction(Mutable, (CFSetApplierFunction)sub_1B197C1FC, LocalCenter);
        if (Mutable)
          CFRelease(Mutable);
        v59 = sub_1B17C439C();
        if (v16 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v60 = v59;
          if (os_signpost_enabled(v59))
          {
            *(_WORD *)v76 = 0;
            _os_signpost_emit_with_name_impl(&dword_1B178D000, v60, OS_SIGNPOST_INTERVAL_END, spid, "TransactionFlush", "", v76, 2u);
          }
        }
        prof_endFlame();
        pthread_mutex_unlock(&stru_1ED4B7AA8);
        if (v75 == 6)
          break;
        v67 = sub_1B197A564();
        os_unfair_lock_lock((os_unfair_lock_t)&unk_1ED4CFEB0);
        v2 = (_QWORD *)v67[5];
        if (!v2
          || (v68 = v2[4]) == 0
          || (v69 = (_QWORD *)v67[5], ++v75, (*(_BYTE *)(v68 + 60) & 2) == 0)
          && (v69 = (_QWORD *)v67[5], *(double *)(v68 + 40) == 0.0))
        {
          os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
          return;
        }
        while (1)
        {
          v70 = v69;
          v71 = v69[4];
          if (!v71 || (*(_BYTE *)(v71 + 60) & 2) == 0 && *(double *)(v71 + 40) == 0.0)
            break;
          v69 = (_QWORD *)*v70;
          if (!*v70)
          {
            v67[5] = 0;
            goto LABEL_77;
          }
        }
        v72 = (_QWORD *)*v70;
        v67[5] = *v70;
        if (v72)
          goto LABEL_78;
LABEL_77:
        v67[6] = 0;
LABEL_78:
        *v70 = 0;
        os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
      }
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: max successive flush reached"), v61, v62, v63, v64, v65, v66, v73);
    }
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ED4CFEB0);
  }
}

void sub_1B197C1C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_BYTE *)(a1 + 60) |= 1u;
  sub_1B197B2DC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B197C1D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  sub_1B187AF6C(a1, a2, a3, a4, a5, a6, a7, a8);
  return sub_1B18797B4(a1, v9, v10, v11, v12, v13, v14, v15);
}

void sub_1B197C1FC(void *object, CFNotificationCenterRef center)
{
  if (center)
    CFNotificationCenterPostNotificationWithOptions(center, CFSTR("kCFXWorldDidUpdateNotification"), object, 0, 4uLL);
}

dispatch_queue_t sub_1B197C228()
{
  NSObject *v0;
  NSObject *v1;
  dispatch_queue_t result;

  v0 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v1 = dispatch_queue_attr_make_with_qos_class(v0, QOS_CLASS_USER_INTERACTIVE, 0);
  result = dispatch_queue_create("com.apple.vfx.transaction-queue", v1);
  qword_1ED4CECC8 = (uint64_t)result;
  return result;
}

void sub_1B197C268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"t");
  v9 = *(void **)(a1 + 80);
  if (v9)
    dispatch_async(MEMORY[0x1E0C80D38], v9);
}

uint64_t sub_1B197C83C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  NSString *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  if (objc_msgSend_immediateMode(VFXTransaction, a2, a3, a4))
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  v6 = NSStringFromSelector(*(SEL *)(a1 + 40));
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Command enqueued by %@ was expected to be run in immediate mode"), v7, v8, v9, v10, v11, v12, (uint64_t)v6);
  objc_msgSend_setImmediateMode_(VFXTransaction, v13, 1, v14);
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return objc_msgSend_setImmediateMode_(VFXTransaction, v15, 0, v16);
}

void *sub_1B197CA2C(void *a1, size_t a2, size_t size, unint64_t a4)
{
  void *v6;
  size_t v8;
  void *memptr;

  if (a4 == 1)
  {
    v6 = malloc_type_malloc(size, 0x295520E9uLL);
    if (!a2)
      goto LABEL_15;
    goto LABEL_14;
  }
  if ((a4 & (a4 - 1)) != 0 || a4 >= 8)
    v8 = a4;
  else
    v8 = 8;
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, v8, size, 0xBA8A1232uLL))
    v6 = 0;
  else
    v6 = memptr;
  if (a2)
LABEL_14:
    memcpy(v6, a1, a2);
LABEL_15:
  free(a1);
  return v6;
}

double sub_1B197CAD0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)(a2 + 32) = a1;
  *(_OWORD *)a2 = xmmword_1B22685E0;
  *(_QWORD *)&result = 255;
  *(_QWORD *)(a2 + 16) = 255;
  *(_DWORD *)(a2 + 24) = 255;
  *(_BYTE *)(a2 + 28) = 0;
  return result;
}

uint64_t sub_1B197CAF8(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B197CB24(const void *a1)
{
  uint64_t v2;

  if (qword_1EEF66C00 != -1)
    dispatch_once_f(&qword_1EEF66C00, &qword_1EEF66BF8, (dispatch_function_t)sub_1B197CAF8);
  v2 = sub_1B179CB90(qword_1EEF66BF8, 0xB8uLL);
  return sub_1B197FA28(v2, a1);
}

uint64_t sub_1B197CB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
  return sub_1B197CBD4(a1, a2);
}

uint64_t sub_1B197CBD4(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v22[2];

  v5 = *(unsigned int *)(a1 + 16);
  v4 = *(_DWORD *)(a1 + 20);
  if (v5 >= v4)
  {
    sub_1B197FBB0(a1, 2 * v4);
    v5 = *(unsigned int *)(a1 + 16);
  }
  *(_DWORD *)(a1 + 16) = v5 + 1;
  v6 = sub_1B197FF48(a1, v5);
  sub_1B1869150(a2, v22);
  v7 = v22[1];
  v8 = (_OWORD *)(*(_QWORD *)(a1 + 64) + 32 * v5);
  *v8 = v22[0];
  v8[1] = v7;
  *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v5) = a2;
  sub_1B197D0F0(a1, v5, v9, v10, v11, v12, v13, v14);
  sub_1B1980054((_QWORD *)a1, v5, v15, v16, v17, v18, v19, v20);
  return v6;
}

void sub_1B197CC7C(_QWORD *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  float32x4_t v13;
  float32x4_t *v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  __n128 v18;
  float32x4_t v19;
  __n128 v20;

  if (a1)
  {
    if ((a2 & 0x80000000) != 0)
      goto LABEL_8;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
    if ((a2 & 0x80000000) != 0)
    {
LABEL_8:
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: invalid spatial handle (%d) given"), (uint64_t)a3, a4, a5, a6, a7, a8, a2);
      return;
    }
  }
  v11 = a1[4];
  if (a2 >= (unint64_t)((a1[5] - v11) >> 2))
    goto LABEL_8;
  v12 = *(unsigned int *)(v11 + 4 * a2);
  v13 = a3[1];
  v14 = (float32x4_t *)(a1[8] + 32 * v12);
  *v14 = *a3;
  v14[1] = v13;
  if ((*(_WORD *)(a1[11] + 2 * v12) & 8) != 0)
  {
    v20 = (__n128)xmmword_1B22685F0;
    v18 = (__n128)xmmword_1B2244E20;
  }
  else
  {
    v15 = sub_1B1869AC8(*(_QWORD *)(a1[13] + 8 * v12), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v16 = *(float32x4_t *)(v15 + 16);
    v17 = *(float32x4_t *)(v15 + 32);
    v18 = (__n128)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v15 + 48), v17, *a3, 2), v16, *(float32x2_t *)a3->f32, 1), *(float32x4_t *)v15, COERCE_FLOAT(*a3));
    v18.n128_u32[3] = HIDWORD(*(unsigned __int128 *)a3);
    v19 = a3[1];
    v19.i32[1] = v19.i32[0];
    v19.i32[2] = (__int32)a3[1];
    v20 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)a3[1].f32, 1), (int32x4_t)a3[1]), vabsq_f32(v16)), vabsq_f32(*(float32x4_t *)v15), v19), vabsq_f32(v17), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)a3[1], (int32x4_t)a3[1]), (int32x4_t)a3[1]));
  }
  sub_1B197CDB0((uint64_t)a1, v12, v18, v20);
}

uint64_t sub_1B197CDB0(uint64_t result, unsigned int a2, __n128 a3, __n128 a4)
{
  int v4;
  uint64_t v5;
  unsigned int v6;
  __n128 *v7;

  v4 = *(_DWORD *)(result + 24);
  if (v4 == 4)
  {
    v5 = *(_QWORD *)(result + 96) + 96 * (a2 >> 2);
    *(_DWORD *)(v5 + 4 * (a2 & 3)) = a3.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 4)) = a3.n128_u32[1];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 8)) = a3.n128_u32[2];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 0xC)) = a4.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 3 | 0x10)) = a4.n128_u32[1];
    v6 = a2 & 3 | 0x14;
    goto LABEL_5;
  }
  if (v4 == 8)
  {
    v5 = *(_QWORD *)(result + 96) + 192 * (a2 >> 3);
    *(_DWORD *)(v5 + 4 * (a2 & 7)) = a3.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 8)) = a3.n128_u32[1];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 0x10)) = a3.n128_u32[2];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 0x18)) = a4.n128_u32[0];
    *(_DWORD *)(v5 + 4 * (a2 & 7 | 0x20)) = a4.n128_u32[1];
    v6 = a2 & 7 | 0x28;
LABEL_5:
    *(_DWORD *)(v5 + 4 * v6) = a4.n128_u32[2];
    return result;
  }
  v7 = (__n128 *)(*(_QWORD *)(result + 96) + 32 * a2);
  *v7 = a3;
  v7[1] = a4;
  return result;
}

uint64_t sub_1B197CEA0(uint64_t a1, unsigned int a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;

  if (a1)
  {
    if ((a2 & 0x80000000) != 0)
      goto LABEL_6;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
    if ((a2 & 0x80000000) != 0)
    {
LABEL_6:
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. invalid spatial handle (%d) given"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"handle >= 0 && ((uint32_t)handle < cullingSystem->_handles.size())");
      v11 = *(_QWORD *)(a1 + 32);
      return sub_1B197CDB0(a1, *(_DWORD *)(v11 + 4 * (int)a2), *a3, a3[1]);
    }
  }
  v11 = *(_QWORD *)(a1 + 32);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 40) - v11) >> 2))
    goto LABEL_6;
  return sub_1B197CDB0(a1, *(_DWORD *)(v11 + 4 * (int)a2), *a3, a3[1]);
}

void sub_1B197CF40(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  float32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  float32x4_t v21;

  LODWORD(v8) = a4;
  if (a1)
  {
    if (!(_DWORD)a4)
      return;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
    if (!(_DWORD)v8)
      return;
  }
  v8 = v8;
  v12 = (float32x4_t *)(a3 + 32);
  do
  {
    v14 = *a2++;
    v13 = v14;
    if ((_DWORD)v14 != -1)
    {
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v13);
      if (v15 < *(_DWORD *)(a1 + 16))
      {
        v16 = (__n128)xmmword_1B2244E20;
        v17 = (__n128)xmmword_1B22685F0;
        if ((*(_WORD *)(*(_QWORD *)(a1 + 88) + 2 * v15) & 8) == 0)
        {
          v18 = v12[-2];
          v19 = v12[-1];
          v20 = (float32x4_t *)(*(_QWORD *)(a1 + 64) + 32 * v15);
          v16 = (__n128)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v12[1], *v12, *v20, 2), v19, *(float32x2_t *)v20->f32, 1), v18, COERCE_FLOAT(*v20));
          v16.n128_u32[3] = HIDWORD(*(unsigned __int128 *)v20);
          v21 = v20[1];
          v21.i32[1] = v21.i32[0];
          v21.i32[2] = (__int32)v20[1];
          v17 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v20[1].f32, 1), (int32x4_t)v20[1]), vabsq_f32(v19)), vabsq_f32(v18), v21), vabsq_f32(*v12), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v20[1], (int32x4_t)v20[1]), (int32x4_t)v20[1]));
        }
        sub_1B197CDB0(a1, v15, v16, v17);
      }
    }
    v12 += 4;
    --v8;
  }
  while (v8);
}

uint64_t sub_1B197D060(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (a1)
  {
    if ((a2 & 0x80000000) != 0)
      goto LABEL_6;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
    if ((a2 & 0x80000000) != 0)
    {
LABEL_6:
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. invalid spatial handle (%d) given"), a3, a4, a5, a6, a7, a8, (uint64_t)"handle >= 0 && ((uint32_t)handle < cullingSystem->_handles.size())");
      v10 = *(_QWORD *)(a1 + 32);
      return sub_1B197D0F0(a1, *(unsigned int *)(v10 + 4 * (int)a2), a3, a4, a5, a6, a7, a8);
    }
  }
  v10 = *(_QWORD *)(a1 + 32);
  if (a2 >= (unint64_t)((*(_QWORD *)(a1 + 40) - v10) >> 2))
    goto LABEL_6;
  return sub_1B197D0F0(a1, *(unsigned int *)(v10 + 4 * (int)a2), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B197D0F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  if (*(_DWORD *)(result + 16) > a2)
  {
    v8 = (_QWORD *)result;
    v9 = *(_QWORD *)(result + 104);
    v10 = *(_QWORD *)(v9 + 8 * a2);
    if (v10)
    {
      v11 = a2;
      v12 = sub_1B186CC98(*(_QWORD *)(v9 + 8 * a2), a2, a3, a4, a5, a6, a7, a8);
      v13 = v8[10];
      *(_DWORD *)(v8[9] + 4 * v11) = v12;
      *(_DWORD *)(v13 + 4 * v11) = HIDWORD(v12);
      if (sub_1B186C6D8(v10, v14, v15, v16, v17, v18, v19, v20))
        v28 = 3;
      else
        v28 = 1;
      if (sub_1B186CAF4(v10, v21, v22, v23, v24, v25, v26, v27))
        v28 |= 4u;
      if (sub_1B1869348(v10, v29, v30, v31, v32, v33, v34, v35))
        v28 |= 0x10u;
      if (sub_1B1869380(v10, v36, v37, v38, v39, v40, v41, v42))
        v28 |= 8u;
      if (sub_1B1869D88(v10, v43, v44, v45, v46, v47, v48, v49))
        v28 |= 0x20u;
      result = sub_1B186E064(v10);
      *(_WORD *)(v8[11] + 2 * v11) = (256 << result) & 0xFF00 | v28;
    }
  }
  return result;
}

double sub_1B197D1C8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"cullingSystem");
  return sub_1B197D218(a1, a2, a3, a4, a5, a6, a7, a8);
}

double sub_1B197D218(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  int v14;
  unint64_t v15;
  __n128 v16;
  __n128 v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  char v26;
  _OWORD *v27;
  double result;
  uint64_t v29;

  if ((a2 & 0x80000000) != 0
    || (v10 = *(_QWORD *)(a1 + 32), a2 >= (unint64_t)((*(_QWORD *)(a1 + 40) - v10) >> 2)))
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. invalid spatial handle (%d) given"), a3, a4, a5, a6, a7, a8, (uint64_t)"handle >= 0 && ((uint32_t)handle < _handles.size())");
    v10 = *(_QWORD *)(a1 + 32);
  }
  v11 = *(unsigned int *)(v10 + 4 * (int)a2);
  v12 = *(_DWORD *)(a1 + 16);
  if (v11 >= v12)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. handle should not point to non existing index"), a3, a4, a5, a6, a7, a8, (uint64_t)"indexToRemove < _count");
    v12 = *(_DWORD *)(a1 + 16);
  }
  v13 = v12 - 1;
  *(_DWORD *)(a1 + 16) = v13;
  if ((_DWORD)v11 == (_DWORD)v13)
  {
    v14 = 1 << ((v12 - 1) & 7);
    v15 = v13 >> 3;
  }
  else
  {
    v16 = sub_1B197DD38(a1, v12 - 1);
    sub_1B197CDB0(a1, v11, v16, v17);
    v18 = *(_QWORD *)(a1 + 64);
    v19 = (_OWORD *)(v18 + 32 * v13);
    v20 = v19[1];
    v21 = (_OWORD *)(v18 + 32 * v11);
    *v21 = *v19;
    v21[1] = v20;
    *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v11) = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v13);
    v22 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v11) = *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v13);
    *(_DWORD *)(v22 + 4 * v11) = *(_DWORD *)(v22 + 4 * v13);
    *(_WORD *)(*(_QWORD *)(a1 + 88) + 2 * v11) = *(_WORD *)(*(_QWORD *)(a1 + 88) + 2 * v13);
    v14 = 1 << (v13 & 7);
    v23 = *(_QWORD *)(a1 + 112);
    v15 = v13 >> 3;
    LODWORD(v22) = 1 << (v11 & 7);
    v24 = *(_BYTE *)(v23 + (v11 >> 3));
    v25 = v24 & ~(_BYTE)v22;
    v26 = v24 | v22;
    if ((v14 & *(_BYTE *)(v23 + (v13 >> 3))) == 0)
      v26 = v25;
    *(_BYTE *)(v23 + (v11 >> 3)) = v26;
    *(_DWORD *)(*(_QWORD *)(a1 + 32)
              + 4 * *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v13) + 216)) = v11;
  }
  sub_1B197CDB0(a1, v13, (__n128)xmmword_1B2268960, (__n128)xmmword_1B2268970);
  v27 = (_OWORD *)(*(_QWORD *)(a1 + 64) + 32 * v13);
  result = 0.0;
  *v27 = xmmword_1B2244E20;
  v27[1] = xmmword_1B2246ED0;
  *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v13) = 0;
  v29 = *(_QWORD *)(a1 + 80);
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v13) = 0;
  *(_DWORD *)(v29 + 4 * v13) = 0;
  *(_WORD *)(*(_QWORD *)(a1 + 88) + 2 * v13) = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 112) + v15) &= ~(_BYTE)v14;
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 4 * (int)a2) = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = a2;
  return result;
}

void sub_1B197D404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  _OWORD v26[1024];
  _BYTE v27[768];
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  char v36;
  __int16 v37;
  char v38;
  uint64_t v39;
  _OWORD *v40;
  int v41;
  uint64_t v42;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v9 = v3;
  v11 = v10;
  v12 = v2;
  v42 = *MEMORY[0x1E0C80C00];
  if (!v2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v3, v4, v5, v6, v7, v8, (uint64_t)"cullingSystem");
  v13 = *(_QWORD *)(v12 + 88);
  v28 = *(_QWORD *)(v12 + 96);
  v29 = v13;
  v30 = *(_OWORD *)(v12 + 72);
  v31 = *(_QWORD *)(v12 + 64);
  v32 = *(_QWORD *)(v12 + 104);
  if (v9)
  {
    v14 = *(_OWORD *)v9;
    v15 = *(_QWORD *)(v9 + 16);
    v16 = *(_DWORD *)(v9 + 24);
    v17 = *(_BYTE *)(v9 + 28);
    LOWORD(v26[0]) = *(_WORD *)(v9 + 29);
    BYTE2(v26[0]) = *(_BYTE *)(v9 + 31);
    v18 = *(_QWORD *)(v9 + 32);
  }
  else
  {
    v18 = 0;
    v17 = 0;
    v14 = xmmword_1B22685E0;
    v15 = 255;
    v16 = 255;
  }
  v19 = 0;
  v33 = v14;
  v34 = v15;
  v35 = v16;
  v36 = v17;
  v37 = v26[0];
  v38 = BYTE2(v26[0]);
  v39 = v18;
  v41 = 1;
  do
  {
    *(float32x4_t *)&v27[v19] = vnegq_f32(*(float32x4_t *)(v11 + v19));
    v19 += 16;
  }
  while (v19 != 96);
  v20 = *(_DWORD *)(v12 + 16) + 2047;
  memset(v26, 0, 512);
  v40 = v26;
  if (v20 >= 0x800)
  {
    v21 = v20 >> 11;
    v22 = 2048;
    do
    {
      v23 = *(_DWORD *)(v12 + 16);
      if (v22 >= v23)
        v24 = v23;
      else
        v24 = v22;
      v25 = (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t))(v12 + 176))(v27, v22 - 2048, v24);
      if (v25)
        (*(void (**)(uint64_t, _OWORD *, _QWORD))(v39 + 16))(v39, v40, v25);
      v22 += 2048;
      --v21;
    }
    while (v21);
  }
}

void sub_1B197D60C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[48];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  char v39;
  __int16 v40;
  char v41;
  uint64_t v42;
  _OWORD *v43;
  __int16 *v44;
  int v45;
  __int16 v46;
  char v47;
  _OWORD v48[1024];
  uint64_t v49;

  *(double *)&v8 = MEMORY[0x1E0C80A78](a1, a2);
  v12 = v11;
  v14 = v13;
  v49 = *MEMORY[0x1E0C80C00];
  if (!v13)
  {
    v28 = v9;
    v29 = v10;
    v27 = v8;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"cullingSystem");
    v8 = v27;
    v9 = v28;
    v10 = v29;
  }
  v15 = *(_QWORD *)(v14 + 88);
  v31 = *(_QWORD *)(v14 + 96);
  v16 = *(_DWORD *)(v14 + 16) + 2047;
  memset(v48, 0, 512);
  v32 = v15;
  v33 = *(_OWORD *)(v14 + 72);
  v34 = *(_QWORD *)(v14 + 64);
  v35 = *(_QWORD *)(v14 + 104);
  if (v12)
  {
    v17 = *(_OWORD *)v12;
    v18 = *(_QWORD *)(v12 + 16);
    v19 = *(_DWORD *)(v12 + 24);
    v20 = *(_BYTE *)(v12 + 28);
    v46 = *(_WORD *)(v12 + 29);
    v47 = *(_BYTE *)(v12 + 31);
    v21 = *(_QWORD *)(v12 + 32);
  }
  else
  {
    v21 = 0;
    v20 = 0;
    v17 = xmmword_1B22685E0;
    v18 = 255;
    v19 = 255;
  }
  v37 = v18;
  v38 = v19;
  v39 = v20;
  v40 = v46;
  v41 = v47;
  v42 = v21;
  v45 = 1;
  v43 = v48;
  v44 = &v46;
  v30[0] = v8;
  v30[1] = v9;
  v36 = v17;
  v30[2] = v10;
  if (v16 >= 0x800)
  {
    v22 = v16 >> 11;
    if (v22 <= 1)
      v23 = 1;
    else
      v23 = v22;
    v24 = 2048;
    do
    {
      v25 = *(_DWORD *)(v14 + 16);
      if (v24 >= v25)
        v26 = v25;
      else
        v26 = v24;
      sub_1B197D834(v14, (uint64_t)v30, v24 - 2048, v26);
      v24 += 2048;
      --v23;
    }
    while (v23);
  }
}

uint64_t sub_1B197D834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t *v17;
  uint64_t v18;
  __int32 *v19;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  uint64_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  int32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  __n128 v53;
  uint64_t v55;
  uint64_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t (*v60[2])(__int128 *, __int128 *);

  v60[1] = *(uint64_t (**)(__int128 *, __int128 *))MEMORY[0x1E0C80C00];
  v6 = 168;
  if (!*(_BYTE *)(a2 + 844))
    v6 = 160;
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + v6))(a2, a3, a4);
  if ((_DWORD)result)
  {
    v9 = result;
    if (*(_BYTE *)(a2 + 844))
    {
      MEMORY[0x1E0C80A78](result, v8);
      v17 = &v57 - v9;
      v18 = 0;
      v19 = &v17->i32[2];
      __asm { FMOV            V0.4S, #1.0 }
      v57 = _Q0;
      do
      {
        v24 = *(unsigned int *)(*(_QWORD *)(a2 + 864) + v18);
        v25 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 8 * v24);
        v26 = *(_QWORD *)(a1 + 64) + 32 * v24;
        v27 = *(float32x4_t *)(v26 + 16);
        v58 = *(float32x4_t *)v26;
        v59 = v27;
        v28 = sub_1B1869AC8(v25, v10, v11, v12, v13, v14, v15, v16);
        v29 = *(float32x4_t *)(v28 + 16);
        v30 = *(float32x4_t *)(v28 + 32);
        v31 = vmulq_f32(*(float32x4_t *)v28, *(float32x4_t *)v28);
        v32 = vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(*(float32x4_t *)(v28 + 48), *(float32x4_t *)v28, v58.f32[0]), v29, *(float32x2_t *)v58.f32, 1), v30, v58, 2);
        v33 = vaddq_f32(vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2));
        v33.f32[0] = sqrtf(v33.f32[0]);
        v34 = vmulq_f32(v29, v29);
        v34.i64[0] = vaddq_f32(vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2)).u64[0];
        v34.f32[0] = sqrtf(v34.f32[0]);
        v35 = vmulq_f32(v30, v30);
        v35.i64[0] = vaddq_f32(vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2)).u64[0];
        v35.f32[0] = sqrtf(v35.f32[0]);
        v36 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 0);
        v33.i32[1] = v34.i32[0];
        v33.i32[2] = v35.i32[0];
        v37 = (int32x4_t)vmulq_f32(*(float32x4_t *)v28, vdivq_f32(v57, v36));
        v38 = (int32x4_t)vmulq_f32(v29, vdivq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0)));
        v39 = (int32x4_t)vmulq_f32(v30, vdivq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 0)));
        v40 = vmulq_f32(v33, v59);
        v41 = vsubq_f32(v32, *(float32x4_t *)a2);
        v42 = vzip2q_s32(v37, v39);
        v43 = (float32x4_t)vzip1q_s32(vzip1q_s32(v37, v39), v38);
        v44 = (float32x4_t)vtrn2q_s32(v37, v38);
        v44.i32[2] = v39.i32[1];
        v45 = (float32x4_t)vzip1q_s32(v42, vdupq_laneq_s32(v38, 2));
        v46 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v44, *(float32x2_t *)v41.f32, 1), v43, v41.f32[0]), v45, v41, 2);
        v47 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v44, *(float32x2_t *)(a2 + 16), 1), v43, COERCE_FLOAT(*(_OWORD *)(a2 + 16))), v45, *(float32x4_t *)(a2 + 16), 2);
        v48 = vdivq_f32(vaddq_f32(v46, v40), v47);
        v49 = vdivq_f32(vsubq_f32(v46, v40), v47);
        v48.i32[3] = 0;
        v49.i32[3] = 0;
        v50 = vminnmq_f32(v48, v49);
        v53 = (__n128)vmaxnmq_f32(v48, v49);
        v51 = fmaxf(fmaxf(v50.f32[0], v50.f32[2]), v50.f32[1]);
        v52 = fminf(fminf(v53.n128_f32[0], v53.n128_f32[2]), v53.n128_f32[1]);
        v53.n128_u32[0] = 0;
        if (v52 >= v51 && v52 >= 0.0 && v51 < *(float *)(a2 + 44))
        {
          if (v51 >= 0.0)
            v53.n128_f32[0] = v51;
          else
            v53.n128_f32[0] = v52;
        }
        v18 += 4;
        *((_QWORD *)v19 - 1) = v25;
        *v19 = v53.n128_u32[0];
        v19 += 4;
      }
      while (4 * v9 != v18);
      v60[0] = (uint64_t (*)(__int128 *, __int128 *))sub_1B198010C;
      sub_1B1980120((__int128 *)&v57 - v9, (__int128 *)&v57, v60, 126 - 2 * __clz(v9), 1, v53);
      v55 = 0;
      do
      {
        v56 = v17->i64[0];
        ++v17;
        *(_QWORD *)(*(_QWORD *)(a2 + 856) + v55) = v56;
        v55 += 8;
      }
      while (8 * v9 != v55);
    }
    return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 848) + 16))();
  }
  return result;
}

void sub_1B197DAF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  __int128 v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  char v29;
  _OWORD v30[48];
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  char v39;
  __int16 v40;
  char v41;
  uint64_t v42;
  _BYTE *v43;
  int v44;
  _BYTE v45[16392];
  uint64_t v46;

  *(double *)&v8 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = v10;
  v13 = v12;
  v46 = *MEMORY[0x1E0C80C00];
  if (!v12)
  {
    v26 = v8;
    v27 = v9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"cullingSystem");
    v8 = v26;
    v9 = v27;
  }
  v14 = *(_QWORD *)(v13 + 88);
  v31 = *(_QWORD *)(v13 + 96);
  v15 = *(_DWORD *)(v13 + 16) + 2047;
  memset(v45, 0, 512);
  v32 = v14;
  v33 = *(_OWORD *)(v13 + 72);
  v34 = *(_QWORD *)(v13 + 64);
  v35 = *(_QWORD *)(v13 + 104);
  if (v11)
  {
    v16 = *(_OWORD *)v11;
    v17 = *(_QWORD *)(v11 + 16);
    v18 = *(_DWORD *)(v11 + 24);
    v19 = *(_BYTE *)(v11 + 28);
    v28 = *(_WORD *)(v11 + 29);
    v29 = *(_BYTE *)(v11 + 31);
    v20 = *(_QWORD *)(v11 + 32);
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v16 = xmmword_1B22685E0;
    v17 = 255;
    v18 = 255;
  }
  v36 = v16;
  v37 = v17;
  v38 = v18;
  v39 = v19;
  v40 = v28;
  v41 = v29;
  v42 = v20;
  v44 = 1;
  v30[0] = v8;
  v30[1] = v9;
  v43 = v45;
  if (v15 >= 0x800)
  {
    v21 = 0;
    v22 = v15 >> 11;
    if (v22 <= 1)
      v23 = 1;
    else
      v23 = v22;
    do
    {
      v24 = v21 + 2048;
      v25 = (*(uint64_t (**)(_OWORD *))(v13 + 152))(v30);
      if (v25)
        (*(void (**)(uint64_t, _BYTE *, _QWORD))(v42 + 16))(v42, v43, v25);
      v21 = v24;
      --v23;
    }
    while (v23);
  }
}

double sub_1B197DD18(uint64_t a1, int a2, int a3)
{
  uint64_t v3;
  __int128 v4;

  v3 = *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * a2);
  if (a3)
    v4 = *(_OWORD *)(*(_QWORD *)(a1 + 64) + 32 * v3);
  else
    *(_QWORD *)&v4 = sub_1B197DD38(a1, v3).n128_u64[0];
  return *(double *)&v4;
}

__n128 sub_1B197DD38(uint64_t a1, unsigned int a2)
{
  int v2;
  unsigned __int32 *v3;
  __n128 result;
  unsigned __int32 *v9;

  v2 = *(_DWORD *)(a1 + 24);
  if (v2 == 4)
  {
    v9 = (unsigned __int32 *)(*(_QWORD *)(a1 + 96) + 96 * (a2 >> 2) + 4 * (a2 & 3));
    __asm { FMOV            V0.4S, #1.0 }
    result.n128_u32[0] = *v9;
    result.n128_u32[1] = v9[4];
  }
  else if (v2 == 8)
  {
    v3 = (unsigned __int32 *)(*(_QWORD *)(a1 + 96) + 192 * (a2 >> 3) + 4 * (a2 & 7));
    __asm { FMOV            V0.4S, #1.0 }
    result.n128_u32[0] = *v3;
    result.n128_u32[1] = v3[8];
  }
  else
  {
    return *(__n128 *)(*(_QWORD *)(a1 + 96) + 32 * a2);
  }
  return result;
}

__n128 sub_1B197DDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  uint64_t *v14;
  _QWORD *v15;
  __int128 v17;
  _QWORD v18[6];
  _QWORD v19[4];
  simd_float4x4 v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  __n128 (*v27)(uint64_t, uint64_t);
  uint64_t (*v28)();
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  simd_float4x4 v32;
  simd_float4x4 v33;

  v31 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v25 = &v24;
  v26 = 0x5002000000;
  v27 = sub_1B197DF64;
  v28 = nullsub_141;
  v29 = xmmword_1B2244E20;
  v30 = xmmword_1B2246ED0;
  if ((_DWORD)a3)
  {
    v32 = *(simd_float4x4 *)sub_1B1869AC8(a2, a2, a3, a4, a5, a6, a7, a8);
    v33 = __invert_f4(v32);
    v10 = *(int *)(a2 + 216);
    if ((_DWORD)v10 != -1)
    {
      v11 = (__int128 *)(*(_QWORD *)(a1 + 64) + 32 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v10));
      v12 = *v11;
      v13 = v11[1];
      v14 = v25;
      *((_OWORD *)v25 + 3) = v12;
      *((_OWORD *)v14 + 4) = v13;
    }
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 0x40000000;
    v19[2] = sub_1B197DF74;
    v19[3] = &unk_1E63DA0F8;
    v22 = a2;
    v23 = a1;
    v20 = v33;
    v21 = &v24;
    v15 = v19;
  }
  else
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = sub_1B197E044;
    v18[3] = &unk_1E63DA120;
    v18[4] = &v24;
    v18[5] = a1;
    v15 = v18;
  }
  sub_1B186B018(a2, (uint64_t)v15);
  v17 = *((_OWORD *)v25 + 3);
  _Block_object_dispose(&v24, 8);
  return (__n128)v17;
}

__n128 sub_1B197DF64(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

uint64_t sub_1B197DF74(float32x4_t *a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t *v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;

  if (a1[6].i64[1] != a2)
  {
    v2 = *(int *)(a2 + 216);
    if ((_DWORD)v2 != -1)
    {
      v4 = sub_1B197DD38(a1[7].i64[0], *(_DWORD *)(*(_QWORD *)(a1[7].i64[0] + 32) + 4 * v2));
      v5 = a1[2];
      v6 = a1[3];
      v7 = a1[4];
      v8 = vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(a1[5], v5, v4.n128_f32[0]), v6, (float32x2_t)v4.n128_u64[0], 1), v7, (float32x4_t)v4, 2);
      v8.i32[3] = v4.n128_i32[3];
      v10 = (float32x4_t)v9;
      v10.i32[1] = v9.i32[0];
      v10.i32[2] = v9.i32[0];
      v11 = vmlaq_f32(vmlaq_f32(vmulq_f32(v10, vabsq_f32(v5)), vabsq_f32(v6), (float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v9.i8, 1), v9)), vabsq_f32(v7), (float32x4_t)vzip2q_s32(vtrn1q_s32(v9, v9), v9));
      v12 = *(float32x4_t **)(a1[6].i64[0] + 8);
      v13 = v12[3];
      v14 = v12[4];
      v15 = vminnmq_f32(vsubq_f32(v8, v11), vsubq_f32(v13, v14));
      v16 = vmaxnmq_f32(vaddq_f32(v8, v11), vaddq_f32(v14, v13));
      v14.i64[0] = 0x3F0000003F000000;
      v14.i64[1] = 0x3F0000003F000000;
      v12[3] = vmulq_f32(vaddq_f32(v16, v15), v14);
      v12[4] = vmulq_f32(vsubq_f32(v16, v15), v14);
    }
  }
  return 0;
}

uint64_t sub_1B197E044(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 v4;
  float32x4_t *v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;

  v2 = *(int *)(a2 + 216);
  if ((_DWORD)v2 != -1)
  {
    v4 = sub_1B197DD38(*(_QWORD *)(a1 + 40), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 4 * v2));
    v5 = *(float32x4_t **)(*(_QWORD *)(a1 + 32) + 8);
    v6 = v5[3];
    v7 = v5[4];
    v9 = vminnmq_f32(vsubq_f32((float32x4_t)v4, v8), vsubq_f32(v6, v7));
    v10 = vmaxnmq_f32(vaddq_f32((float32x4_t)v4, v8), vaddq_f32(v7, v6));
    v6.i64[0] = 0x3F0000003F000000;
    v6.i64[1] = 0x3F0000003F000000;
    v5[3] = vmulq_f32(vaddq_f32(v10, v9), v6);
    v5[4] = vmulq_f32(vsubq_f32(v10, v9), v6);
  }
  return 0;
}

uint64_t sub_1B197E0BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  __int16 v9;
  char v10;
  _BYTE v11[768];
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  int v19;
  char v20;
  __int16 v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 96);
  v13 = v2;
  v14 = *(_OWORD *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 64);
  v16 = *(_QWORD *)(a1 + 104);
  if (a2)
  {
    v3 = *(_OWORD *)a2;
    v4 = *(_QWORD *)(a2 + 16);
    v5 = *(_DWORD *)(a2 + 24);
    v6 = *(_BYTE *)(a2 + 28);
    v9 = *(_WORD *)(a2 + 29);
    v10 = *(_BYTE *)(a2 + 31);
    v7 = *(_QWORD *)(a2 + 32);
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v3 = xmmword_1B22685E0;
    v4 = 255;
    v5 = 255;
  }
  v17 = v3;
  v18 = v4;
  v19 = v5;
  v20 = v6;
  v21 = v9;
  v22 = v10;
  v23 = v7;
  v24 = 1;
  return (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD))(a1 + 144))(v11, 0, *(unsigned int *)(a1 + 16));
}

uint64_t sub_1B197E1B8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int8x16_t v14;
  const float *v15;
  uint64_t v16;
  const float *v17;
  int8x16_t v18;
  uint64_t v19;
  int8x16_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t *v30;
  int8x8_t v31;
  int8x16_t v32;
  unsigned __int32 v33;
  BOOL v34;
  unint64_t v35;

  v8 = a3;
  if ((a2 & 7) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 3;
  if (v11 >= (v8 + 7) >> 3)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 776);
  v14 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v15 = (const float *)(a1 + 816);
  v16 = *(_QWORD *)(a1 + 784);
  v17 = (const float *)(a1 + 820);
  v18 = (int8x16_t)vld1q_dup_f32(v15);
  v19 = *(_QWORD *)(a1 + 792);
  v20 = (int8x16_t)vld1q_dup_f32(v17);
  v21 = *(int32x4_t *)(a1 + 16);
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v24 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0);
  v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1);
  v27 = (float32x4_t)vdupq_laneq_s32(v21, 2);
  v28 = a2 & 0xFFFFFFF8;
  v29 = *(_QWORD *)(a1 + 768);
  do
  {
    v30 = (float32x4_t *)(v29 + 192 * v11);
    v31 = vmovn_s16((int16x8_t)vandq_s8(vandq_s8(vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 16 * v11)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v13 + 16 * v11))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v19 + 32 * v11), v20), vandq_s8(*(int8x16_t *)(v16 + 32 * v11), v18))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(
                                                                                       *(int8x16_t *)(v19 + 32 * v11 + 16),
                                                                                       v20),
                                                                                     vandq_s8(*(int8x16_t *)(v16 + 32 * v11 + 16), v18))))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v30[6], v25), vabdq_f32(v22, *v30)), (int16x8_t)vcgeq_f32(vaddq_f32(v30[7], v25), vabdq_f32(v22, v30[1])))), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v30[8], v26), vabdq_f32(v23, v30[2])), (int16x8_t)vcgeq_f32(vaddq_f32(v30[9], v26), vabdq_f32(v23, v30[3]))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vaddq_f32(v30[10], v27), vabdq_f32(v24, v30[4])), (int16x8_t)vcgeq_f32(vaddq_f32(v30[11], v27), vabdq_f32(v24, v30[5]))))));
    v32 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v31, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B2245E50), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v31, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B2268600));
    *(int8x8_t *)v32.i8 = vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL));
    v33 = vadd_s32(*(int32x2_t *)v32.i8, vdup_lane_s32(*(int32x2_t *)v32.i8, 1)).u32[0];
    if (v33)
      v34 = 8 * (int)v11 >= v8;
    else
      v34 = 1;
    if (!v34)
    {
      v35 = v28;
      do
      {
        if ((v33 & 1) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v35);
          result = (result + 1);
        }
        if (v33 < 2)
          break;
        ++v35;
        v33 >>= 1;
      }
      while (v35 < v8);
    }
    ++v11;
    v28 += 8;
  }
  while (v11 != (v8 + 7) >> 3);
  return result;
}

uint64_t sub_1B197E408(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  const float *v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  const float *v18;
  uint64_t v19;
  int8x16_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  unsigned int v28;
  uint64_t v29;
  float32x4_t *v30;
  int8x16_t v31;
  unsigned __int32 v32;
  BOOL v33;
  unint64_t v34;

  v8 = a3;
  if ((a2 & 3) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 2;
  if (v11 >= (v8 + 3) >> 2)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 776);
  v14 = (const float *)(a1 + 816);
  v15 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v16 = *(_QWORD *)(a1 + 784);
  v17 = (int8x16_t)vld1q_dup_f32(v14);
  v18 = (const float *)(a1 + 820);
  v19 = *(_QWORD *)(a1 + 792);
  v20 = (int8x16_t)vld1q_dup_f32(v18);
  v21 = *(int32x4_t *)(a1 + 16);
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v23 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v24 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 0);
  v26 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.i8, 1);
  v27 = (float32x4_t)vdupq_laneq_s32(v21, 2);
  v28 = a2 & 0xFFFFFFFC;
  v29 = *(_QWORD *)(a1 + 768);
  do
  {
    v30 = (float32x4_t *)(v29 + 96 * v11);
    v31 = vandq_s8(vandq_s8(vandq_s8(vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 8 * v11)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v19 + 16 * v11), v20), vandq_s8(*(int8x16_t *)(v16 + 16 * v11), v17)))), (int8x16_t)vcgeq_f32(vaddq_f32(v30[3], v25), vabdq_f32(v22, *v30))), vandq_s8((int8x16_t)vcgeq_f32(vaddq_f32(v30[4], v26), vabdq_f32(v23, v30[1])), (int8x16_t)vcgeq_f32(vaddq_f32(v30[5], v27), vabdq_f32(v24, v30[2])))), (int8x16_t)xmmword_1B2245E50);
    *(int8x8_t *)v31.i8 = vorr_s8(*(int8x8_t *)v31.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL));
    v32 = vadd_s32(*(int32x2_t *)v31.i8, vdup_lane_s32(*(int32x2_t *)v31.i8, 1)).u32[0];
    if (v32)
      v33 = 4 * (int)v11 >= v8;
    else
      v33 = 1;
    if (!v33)
    {
      v34 = v28;
      do
      {
        if ((v32 & 1) != 0)
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v34);
          result = (result + 1);
        }
        if (v32 < 2)
          break;
        ++v34;
        v32 >>= 1;
      }
      while (v34 < v8);
    }
    ++v11;
    v28 += 4;
  }
  while (v11 != (v8 + 3) >> 2);
  return result;
}

uint64_t sub_1B197E5BC(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint32x4_t v14;

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = a1[48].i64[1];
  v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  v7 = a1[49].i64[0];
  v8 = a1[51].i32[0];
  v9 = a1[51].i32[1];
  v10 = a1[49].i64[1];
  v11 = a2;
  v12 = (32 * a2) | 0x10;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v11) & v9 | *(_DWORD *)(v7 + 4 * v11) & v8)
      v13 = (unsigned __int16)(v6 & *(_WORD *)(v5 + 2 * v11)) == 0;
    else
      v13 = 0;
    if (v13)
    {
      v14 = (uint32x4_t)vcgeq_f32(vaddq_f32(*(float32x4_t *)(a1[48].i64[0] + v12), a1[1]), vabdq_f32(*a1, *(float32x4_t *)(a1[48].i64[0] + v12 - 16)));
      v14.i32[3] = v14.i32[2];
      if ((vminvq_u32(v14) & 0x80000000) != 0)
      {
        *(_QWORD *)(a1[53].i64[1] + 8 * result) = *(_QWORD *)(a1[50].i64[1] + 8 * v11);
        result = (result + 1);
      }
    }
    ++v11;
    v12 += 32;
  }
  while (a3 != v11);
  return result;
}

double sub_1B197E684(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  int v14;
  int v15;
  int32x2_t v16;
  uint64_t v17;
  const float *v18;
  int8x16_t v19;
  int8x16_t v20;
  uint64_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  uint16x8_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x8_t v29;
  int8x16_t v30;
  int8x16_t v31;
  float32x4_t *v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int8x16_t v38;
  int8x16_t v39;
  float32x4_t *v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  unsigned int v55;
  float32x4_t v56;
  float32x4_t v62;
  double result;
  __int128 v64;
  float32x4_t v65;
  __int128 v66;
  float32x4_t v67;
  __int128 v68;
  float32x4_t v69;
  __int128 v70;
  float32x4_t v71;
  __int128 v72;
  float32x4_t v73;
  __int128 v74;
  float32x4_t v75;
  uint64_t v76;

  v8 = a3;
  v76 = *MEMORY[0x1E0C80C00];
  if ((a2 & 7) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = *(_QWORD *)(a1 + 776);
  v12 = a2 >> 3;
  v13 = (const float *)(a1 + 816);
  v14 = *(_DWORD *)(a1 + 836);
  v15 = *(_DWORD *)(a1 + 840);
  v16 = *(int32x2_t *)(a1 + 832);
  v17 = *(_QWORD *)(a1 + 784);
  v18 = (const float *)(a1 + 820);
  v19 = (int8x16_t)vld1q_dup_f32(v13);
  v20 = (int8x16_t)vld1q_dup_f32(v18);
  v21 = *(_QWORD *)(a1 + 792);
  v72 = xmmword_1B2268860;
  v73 = (float32x4_t)unk_1B2268870;
  v74 = xmmword_1B2268880;
  v75 = (float32x4_t)unk_1B2268890;
  v70 = xmmword_1B2268840;
  v71 = (float32x4_t)unk_1B2268850;
  v66 = xmmword_1B22688C0;
  v67 = (float32x4_t)unk_1B22688D0;
  v68 = xmmword_1B22688E0;
  v69 = (float32x4_t)unk_1B22688F0;
  v64 = xmmword_1B22688A0;
  v65 = (float32x4_t)unk_1B22688B0;
  if (v12 >= (v8 + 7) >> 3)
  {
    v47 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v53.i64[0] = 0x80000000800000;
    v53.i64[1] = 0x80000000800000;
    v54.i64[0] = 0x80000000800000;
    v54.i64[1] = 0x80000000800000;
    v51.i64[0] = 0x80000000800000;
    v51.i64[1] = 0x80000000800000;
    v52.i64[0] = 0x80000000800000;
    v52.i64[1] = 0x80000000800000;
    v49.i64[0] = 0x80000000800000;
    v49.i64[1] = 0x80000000800000;
    v48 = v47;
    v50.i64[0] = 0x80000000800000;
    v50.i64[1] = 0x80000000800000;
    v45 = v47;
    v46 = v47;
    v43 = v47;
    v44 = v47;
  }
  else
  {
    v22 = (int8x16_t)vdupq_n_s32(v14 | (~v15 << 8));
    v23 = (int8x16_t)vdupq_lane_s32(v16, 0);
    v24 = *(_QWORD *)(a1 + 768) + 192 * v12 + 96;
    do
    {
      v25 = 0;
      v26 = *(uint16x8_t *)(v11 + 16 * v12);
      v27 = (int8x16_t)vmovl_high_u16(v26);
      v28 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v26.i8);
      v29 = vmovn_s16((int16x8_t)vbicq_s8(vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v22, v28)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v22, v27))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v21 + 32 * v12), v20), vandq_s8(*(int8x16_t *)(v17 + 32 * v12), v19))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v21 + 32 * v12 + 16), v20), vandq_s8(*(int8x16_t *)(v17 + 32 * v12 + 16), v19))))),
                                   (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v23, v28)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v23, v27)))));
      v30 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
      v31 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
      do
      {
        v32 = (float32x4_t *)((char *)&v70 + v25);
        v33 = *(float32x4_t *)((char *)&v70 + v25 + 16);
        v34 = *(float32x4_t *)(v24 + v25 - 96);
        v35 = *(float32x4_t *)(v24 + v25 - 80);
        v36 = *(float32x4_t *)(v24 + v25);
        v37 = *(float32x4_t *)(v24 + v25 + 16);
        v38 = (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
        v39 = (int8x16_t)vcgezq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v29, *(int8x8_t *)v19.i8)), 0x1FuLL));
        v40 = (float32x4_t *)((char *)&v64 + v25);
        v42 = *(float32x4_t *)((char *)&v64 + v25);
        v41 = *(float32x4_t *)((char *)&v64 + v25 + 16);
        *v32 = vminnmq_f32(*(float32x4_t *)((char *)&v70 + v25), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v34, v36), v31), vandq_s8(*(int8x16_t *)((char *)&v70 + v25), v38)));
        v32[1] = vminnmq_f32(v33, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v35, v37), v30), vandq_s8((int8x16_t)v33, v39)));
        *v40 = vmaxnmq_f32(v42, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v42, v38), vandq_s8((int8x16_t)vaddq_f32(v36, v34), v31)));
        v40[1] = vmaxnmq_f32(v41, (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v41, v39), vandq_s8((int8x16_t)vaddq_f32(v37, v35), v30)));
        v25 += 32;
      }
      while (v25 != 96);
      ++v12;
      v24 += 192;
    }
    while (v12 != (v8 + 7) >> 3);
    v43 = (float32x4_t)v70;
    v44 = v71;
    v45 = (float32x4_t)v72;
    v46 = v73;
    v47 = (float32x4_t)v74;
    v48 = v75;
    v49 = (float32x4_t)v64;
    v50 = v65;
    v51 = (float32x4_t)v66;
    v52 = v67;
    v53 = (float32x4_t)v68;
    v54 = v69;
  }
  *(float *)&v55 = vmaxvq_f32(vmaxnmq_f32(v51, v52));
  v56 = vmaxnmq_f32(v53, v54);
  __asm { FMOV            V2.4S, #1.0 }
  v62.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vminvq_f32(vminnmq_f32(v45, v46))), COERCE_UNSIGNED_INT(vminvq_f32(vminnmq_f32(v43, v44))));
  v62.i64[1] = __PAIR64__(_Q2.u32[3], COERCE_UNSIGNED_INT(vminvq_f32(vminnmq_f32(v47, v48))));
  _Q2.i64[0] = __PAIR64__(v55, COERCE_UNSIGNED_INT(vmaxvq_f32(vmaxnmq_f32(v49, v50))));
  _Q2.i32[2] = vmaxvq_f32(v56);
  v56.i64[0] = 0x3F0000003F000000;
  v56.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(vaddq_f32(_Q2, v62), v56).u64[0];
  return result;
}

double sub_1B197E9A8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  uint64_t v12;
  const float *v13;
  int v14;
  int v15;
  const float *v16;
  int32x4_t v17;
  uint64_t v18;
  const float *v19;
  int8x16_t v20;
  int8x16_t v21;
  uint64_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int16x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v44;
  float32x4_t v45;
  double result;
  __int128 v47;
  float32x4_t v48;
  __int128 v49;
  __int128 v50;
  float32x4_t v51;
  __int128 v52;
  uint64_t v53;

  v8 = a3;
  v53 = *MEMORY[0x1E0C80C00];
  if ((a2 & 3) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = *(_QWORD *)(a1 + 776);
  v12 = a2 >> 2;
  v13 = (const float *)(a1 + 816);
  v14 = *(_DWORD *)(a1 + 836);
  v15 = *(_DWORD *)(a1 + 840);
  v16 = (const float *)(a1 + 832);
  v17 = (int32x4_t)vld1q_dup_f32(v16);
  v18 = *(_QWORD *)(a1 + 784);
  v19 = (const float *)(a1 + 820);
  v20 = (int8x16_t)vld1q_dup_f32(v13);
  v21 = (int8x16_t)vld1q_dup_f32(v19);
  v22 = *(_QWORD *)(a1 + 792);
  v50 = xmmword_1B2268900;
  v51 = (float32x4_t)unk_1B2268910;
  v52 = xmmword_1B2268920;
  v47 = xmmword_1B2268930;
  v48 = (float32x4_t)unk_1B2268940;
  v49 = xmmword_1B2268950;
  if (v12 >= (v8 + 3) >> 2)
  {
    v35 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v38.i64[0] = 0x80000000800000;
    v38.i64[1] = 0x80000000800000;
    v36.i64[0] = 0x80000000800000;
    v36.i64[1] = 0x80000000800000;
    v37.i64[0] = 0x80000000800000;
    v37.i64[1] = 0x80000000800000;
    v33 = v35;
    v34 = v35;
  }
  else
  {
    v23 = (int8x16_t)vdupq_n_s32(v14 | (~v15 << 8));
    v24 = *(_QWORD *)(a1 + 768) + 96 * v12 + 48;
    do
    {
      v25 = 0;
      v26 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v11 + 8 * v12));
      v27 = (int32x4_t)vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v17, v26), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 16 * v12), v21), vandq_s8(*(int8x16_t *)(v18 + 16 * v12), v20)))), (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v23, (int8x16_t)v26)));
      v28 = vmovn_s32(v27);
      do
      {
        v29 = *(float32x4_t *)(v24 + v25 - 48);
        v30 = *(float32x4_t *)(v24 + v25);
        v31 = (int8x16_t)vmovl_s16(v28);
        v32 = *(float32x4_t *)((char *)&v47 + v25);
        *(__int128 *)((char *)&v50 + v25) = (__int128)vminnmq_f32(*(float32x4_t *)((char *)&v50 + v25), (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vsubq_f32(v29, v30), (int8x16_t)v27), vbicq_s8(*(int8x16_t *)((char *)&v50 + v25), v31)));
        *(__int128 *)((char *)&v47 + v25) = (__int128)vmaxnmq_f32(v32, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v32, v31), vandq_s8((int8x16_t)vaddq_f32(v30, v29), (int8x16_t)v27)));
        v25 += 16;
      }
      while (v25 != 48);
      ++v12;
      v24 += 96;
    }
    while (v12 != (v8 + 3) >> 2);
    v34 = (float32x4_t)v50;
    v33 = v51;
    v35 = (float32x4_t)v52;
    v37 = (float32x4_t)v47;
    v36 = v48;
    v38 = (float32x4_t)v49;
  }
  __asm { FMOV            V6.4S, #1.0 }
  v44.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vminvq_f32(v33)), COERCE_UNSIGNED_INT(vminvq_f32(v34)));
  v44.i64[1] = __PAIR64__(_Q6.u32[3], COERCE_UNSIGNED_INT(vminvq_f32(v35)));
  _Q6.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(vmaxvq_f32(v36)), COERCE_UNSIGNED_INT(vmaxvq_f32(v37)));
  _Q6.i32[2] = vmaxvq_f32(v38);
  v45.i64[0] = 0x3F0000003F000000;
  v45.i64[1] = 0x3F0000003F000000;
  *(_QWORD *)&result = vmulq_f32(vaddq_f32(_Q6, v44), v45).u64[0];
  return result;
}

double sub_1B197EBDC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  int v3;
  int v4;
  int v5;
  int v6;
  int *v7;
  int *v8;
  unsigned __int16 *v9;
  float32x4_t *v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;

  if (a2 >= a3)
  {
    v11.i64[0] = 0;
  }
  else
  {
    v3 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
    v4 = *(_DWORD *)(a1 + 832);
    v5 = *(_DWORD *)(a1 + 816);
    v6 = *(_DWORD *)(a1 + 820);
    v7 = (int *)(*(_QWORD *)(a1 + 784) + 4 * a2);
    v8 = (int *)(*(_QWORD *)(a1 + 792) + 4 * a2);
    v9 = (unsigned __int16 *)(*(_QWORD *)(a1 + 776) + 2 * a2);
    v10 = (float32x4_t *)(*(_QWORD *)(a1 + 768) + 32 * a2 + 16);
    v11 = (float32x4_t)xmmword_1B2244E20;
    v12 = (float32x4_t)xmmword_1B2246ED0;
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v14 = a3 - (unint64_t)a2;
    do
    {
      v15 = *v7++;
      v16 = v15 & v5;
      v17 = *v8++;
      v18 = v17 & v6;
      v19 = *v9++;
      v20 = v18 | v16;
      v21 = v4 & v19;
      if ((v3 & v19) == 0 && v20 != 0 && v21 != 0)
      {
        v24 = v10[-1];
        v25 = vminnmq_f32(vsubq_f32(v11, v12), vsubq_f32(v24, *v10));
        v26 = vmaxnmq_f32(vaddq_f32(v12, v11), vaddq_f32(*v10, v24));
        v11 = vmulq_f32(vaddq_f32(v26, v25), v13);
        v12 = vmulq_f32(vsubq_f32(v26, v25), v13);
      }
      v10 += 2;
      --v14;
    }
    while (v14);
  }
  return *(double *)v11.i64;
}

uint64_t sub_1B197ECBC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int8x16_t v14;
  const float *v15;
  const float *v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  int8x8_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  int8x8_t v61;
  int8x16_t v62;
  unsigned __int32 v63;
  unsigned int v64;
  uint64_t v66;

  v8 = a3;
  if ((a2 & 7) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 3;
  if (v11 >= (v8 + 7) >> 3)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 776);
  v14 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v15 = (const float *)(a1 + 816);
  v16 = (const float *)(a1 + 820);
  v17 = (int8x16_t)vld1q_dup_f32(v15);
  v18 = (int8x16_t)vld1q_dup_f32(v16);
  v19 = *(_QWORD *)(a1 + 784);
  v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v22 = *(_QWORD *)(a1 + 792);
  v23 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v24 = *(float32x4_t *)(a1 + 32);
  v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  v26 = *(_QWORD *)(a1 + 768);
  do
  {
    v27 = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 16 * v11)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v13 + 16 * v11))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 32 * v11), v18), vandq_s8(*(int8x16_t *)(v19 + 32 * v11), v17))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 32 * v11 + 16), v18),
                                                                                 vandq_s8(*(int8x16_t *)(v19 + 32 * v11 + 16), v17))))));
    if ((vmaxvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v27, *(int8x8_t *)v14.i8), vzip2_s8(v27, *(int8x8_t *)v14.i8))), 0x1FuLL))) & 0x80000000) != 0)
    {
      v28 = (float32x4_t *)(v26 + 192 * v11);
      v29 = v28[1];
      v30 = v28[6];
      v31 = v28[7];
      v32 = vmulq_n_f32(vsubq_f32(v29, vaddq_f32(v20, v31)), v24.f32[0]);
      v33 = vmulq_n_f32(vsubq_f32(*v28, vaddq_f32(v20, v30)), v24.f32[0]);
      v35 = v28[2];
      v34 = v28[3];
      v36 = v28[8];
      v37 = v28[9];
      v38 = vmulq_lane_f32(vsubq_f32(v34, vaddq_f32(v21, v37)), *(float32x2_t *)v24.f32, 1);
      v39 = vmulq_lane_f32(vsubq_f32(v35, vaddq_f32(v21, v36)), *(float32x2_t *)v24.f32, 1);
      v40 = v28[4];
      v41 = v28[5];
      v42 = v28[10];
      v43 = v28[11];
      v44 = vmulq_laneq_f32(vsubq_f32(v41, vaddq_f32(v23, v43)), v24, 2);
      v45 = vmulq_laneq_f32(vsubq_f32(v40, vaddq_f32(v23, v42)), v24, 2);
      v46 = vmulq_n_f32(vaddq_f32(vsubq_f32(v29, v20), v31), v24.f32[0]);
      v47 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v28, v20), v30), v24.f32[0]);
      v48 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v34, v21), v37), *(float32x2_t *)v24.f32, 1);
      v49 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v35, v21), v36), *(float32x2_t *)v24.f32, 1);
      v50 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v41, v23), v43), v24, 2);
      v51 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v40, v23), v42), v24, 2);
      v52 = vminnmq_f32(v33, v47);
      v53 = vminnmq_f32(v32, v46);
      v54 = vminnmq_f32(v44, v50);
      v55 = vmaxnmq_f32(v33, v47);
      v56 = vmaxnmq_f32(v32, v46);
      v57 = vmaxnmq_f32(v45, v51);
      v58 = vmaxnmq_f32(v44, v50);
      v59 = vmaxnmq_f32(v52, vmaxnmq_f32(vminnmq_f32(v39, v49), vminnmq_f32(v45, v51)));
      v60 = vmaxnmq_f32(v53, vmaxnmq_f32(vminnmq_f32(v38, v48), v54));
      v61 = vand_s8(vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v25, v59), (int16x8_t)vcgtq_f32(v25, v60)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vminnmq_f32(v55, vminnmq_f32(vmaxnmq_f32(v39, v49), v57)), v59), (int16x8_t)vcgeq_f32(vminnmq_f32(v56, vminnmq_f32(vmaxnmq_f32(v38, v48), v58)), v60)))), v27);
      v62 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v61, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B2245E50), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v61, *(int8x8_t *)v14.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B2268600));
      *(int8x8_t *)v62.i8 = vorr_s8(*(int8x8_t *)v62.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL));
      v63 = vadd_s32(*(int32x2_t *)v62.i8, vdup_lane_s32(*(int32x2_t *)v62.i8, 1)).u32[0];
      v64 = 8 * v11;
      if (v63 && v64 < v8)
      {
        v66 = *(_QWORD *)(a1 + 864);
        do
        {
          if ((v63 & 1) != 0)
          {
            *(_DWORD *)(v66 + 4 * result) = v64;
            result = (result + 1);
          }
          if (v63 < 2)
            break;
          ++v64;
          v63 >>= 1;
        }
        while (v64 < v8);
      }
    }
    ++v11;
  }
  while (v11 != (v8 + 7) >> 3);
  return result;
}

uint64_t sub_1B197EFD0(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  const float *v14;
  int8x16_t v15;
  uint64_t v16;
  const float *v17;
  int8x16_t v18;
  int8x16_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  uint64_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned int v26;
  uint64_t v27;
  int8x8_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x8_t v62;
  int8x16_t v63;
  unsigned __int32 v64;
  unint64_t v66;

  v8 = a3;
  if ((a2 & 7) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 3;
  if (v11 >= (v8 + 7) >> 3)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 776);
  v14 = (const float *)(a1 + 816);
  v15 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v16 = *(_QWORD *)(a1 + 784);
  v17 = (const float *)(a1 + 820);
  v18 = (int8x16_t)vld1q_dup_f32(v14);
  v19 = (int8x16_t)vld1q_dup_f32(v17);
  v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v22 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v23 = *(_QWORD *)(a1 + 792);
  v24 = *(float32x4_t *)(a1 + 32);
  v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  v26 = a2 & 0xFFFFFFF8;
  v27 = *(_QWORD *)(a1 + 768);
  do
  {
    v28 = vmovn_s16((int16x8_t)vbicq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 16 * v11)))), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_high_u16(*(uint16x8_t *)(v13 + 16 * v11))))), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v23 + 32 * v11), v19), vandq_s8(*(int8x16_t *)(v16 + 32 * v11), v18))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v23 + 32 * v11 + 16), v19),
                                                                                 vandq_s8(*(int8x16_t *)(v16 + 32 * v11 + 16), v18))))));
    if ((vmaxvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vorr_s8(vzip1_s8(v28, *(int8x8_t *)v15.i8), vzip2_s8(v28, *(int8x8_t *)v15.i8))), 0x1FuLL))) & 0x80000000) != 0)
    {
      v29 = (float32x4_t *)(v27 + 192 * v11);
      v30 = v29[1];
      v31 = v29[6];
      v32 = v29[7];
      v33 = vmulq_n_f32(vsubq_f32(v30, vaddq_f32(v20, v32)), v24.f32[0]);
      v34 = vmulq_n_f32(vsubq_f32(*v29, vaddq_f32(v20, v31)), v24.f32[0]);
      v36 = v29[2];
      v35 = v29[3];
      v37 = v29[8];
      v38 = v29[9];
      v39 = vmulq_lane_f32(vsubq_f32(v35, vaddq_f32(v21, v38)), *(float32x2_t *)v24.f32, 1);
      v40 = vmulq_lane_f32(vsubq_f32(v36, vaddq_f32(v21, v37)), *(float32x2_t *)v24.f32, 1);
      v41 = v29[4];
      v42 = v29[5];
      v43 = v29[10];
      v44 = v29[11];
      v45 = vmulq_laneq_f32(vsubq_f32(v42, vaddq_f32(v22, v44)), v24, 2);
      v46 = vmulq_laneq_f32(vsubq_f32(v41, vaddq_f32(v22, v43)), v24, 2);
      v47 = vmulq_n_f32(vaddq_f32(vsubq_f32(v30, v20), v32), v24.f32[0]);
      v48 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v29, v20), v31), v24.f32[0]);
      v49 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v35, v21), v38), *(float32x2_t *)v24.f32, 1);
      v50 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v36, v21), v37), *(float32x2_t *)v24.f32, 1);
      v51 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v42, v22), v44), v24, 2);
      v52 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v41, v22), v43), v24, 2);
      v53 = vminnmq_f32(v34, v48);
      v54 = vminnmq_f32(v33, v47);
      v55 = vminnmq_f32(v45, v51);
      v56 = vmaxnmq_f32(v34, v48);
      v57 = vmaxnmq_f32(v33, v47);
      v58 = vmaxnmq_f32(v46, v52);
      v59 = vmaxnmq_f32(v45, v51);
      v60 = vmaxnmq_f32(v53, vmaxnmq_f32(vminnmq_f32(v40, v50), vminnmq_f32(v46, v52)));
      v61 = vmaxnmq_f32(v54, vmaxnmq_f32(vminnmq_f32(v39, v49), v55));
      v62 = vand_s8(vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v25, v60), (int16x8_t)vcgtq_f32(v25, v61)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(vminnmq_f32(v56, vminnmq_f32(vmaxnmq_f32(v40, v50), v58)), v60), (int16x8_t)vcgeq_f32(vminnmq_f32(v57, vminnmq_f32(vmaxnmq_f32(v39, v49), v59)), v61)))), v28);
      v63 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v62, *(int8x8_t *)v15.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B2245E50), vandq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v62, *(int8x8_t *)v15.i8)), 0x1FuLL)), (int8x16_t)xmmword_1B2268600));
      *(int8x8_t *)v63.i8 = vorr_s8(*(int8x8_t *)v63.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL));
      v64 = vadd_s32(*(int32x2_t *)v63.i8, vdup_lane_s32(*(int32x2_t *)v63.i8, 1)).u32[0];
      if (v64 && 8 * (int)v11 < v8)
      {
        v66 = v26;
        do
        {
          if ((v64 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v66);
            result = (result + 1);
          }
          if (v64 < 2)
            break;
          ++v66;
          v64 >>= 1;
        }
        while (v66 < v8);
      }
    }
    ++v11;
    v26 += 8;
  }
  while (v11 != (v8 + 7) >> 3);
  return result;
}

uint64_t sub_1B197F2FC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  const float *v14;
  int8x16_t v15;
  uint64_t v16;
  int8x16_t v17;
  const float *v18;
  int8x16_t v19;
  float32x4_t v20;
  uint64_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  int32x4_t v27;
  float32x4_t *v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v44;
  unsigned __int32 v45;
  unsigned int v46;
  uint64_t v48;

  v8 = a3;
  if ((a2 & 3) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 2;
  if (v11 >= (v8 + 3) >> 2)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 776);
  v14 = (const float *)(a1 + 816);
  v15 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v16 = *(_QWORD *)(a1 + 784);
  v17 = (int8x16_t)vld1q_dup_f32(v14);
  v18 = (const float *)(a1 + 820);
  v19 = (int8x16_t)vld1q_dup_f32(v18);
  v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v21 = *(_QWORD *)(a1 + 792);
  v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v23 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v24 = *(float32x4_t *)(a1 + 32);
  v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  v26 = *(_QWORD *)(a1 + 768);
  do
  {
    v27 = (int32x4_t)vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v15, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 8 * v11)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v21 + 16 * v11), v19), vandq_s8(*(int8x16_t *)(v16 + 16 * v11), v17))));
    if ((vmaxvq_u32((uint32x4_t)v27) & 0x80000000) != 0)
    {
      v28 = (float32x4_t *)(v26 + 96 * v11);
      v30 = v28[2];
      v29 = v28[3];
      v31 = v28[1];
      v32 = vmulq_n_f32(vsubq_f32(*v28, vaddq_f32(v20, v29)), v24.f32[0]);
      v33 = v28[4];
      v34 = v28[5];
      v35 = vmulq_lane_f32(vsubq_f32(v31, vaddq_f32(v22, v33)), *(float32x2_t *)v24.f32, 1);
      v36 = vmulq_laneq_f32(vsubq_f32(v30, vaddq_f32(v23, v34)), v24, 2);
      v37 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v28, v20), v29), v24.f32[0]);
      v38 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v31, v22), v33), *(float32x2_t *)v24.f32, 1);
      v39 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v30, v23), v34), v24, 2);
      v40 = vminnmq_f32(v32, v37);
      v41 = vmaxnmq_f32(v32, v37);
      v42 = vmaxnmq_f32(v35, v38);
      v43 = vmaxnmq_f32(v40, vmaxnmq_f32(vminnmq_f32(v35, v38), vminnmq_f32(v36, v39)));
      v44 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v25, v43), (int8x16_t)vcgeq_f32(vminnmq_f32(v41, vminnmq_f32(v42, vmaxnmq_f32(v36, v39))), v43))), (int8x8_t)vmovn_s32(v27))), (int8x16_t)xmmword_1B2245E50);
      *(int8x8_t *)v44.i8 = vorr_s8(*(int8x8_t *)v44.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL));
      v45 = vadd_s32(*(int32x2_t *)v44.i8, vdup_lane_s32(*(int32x2_t *)v44.i8, 1)).u32[0];
      v46 = 4 * v11;
      if (v45 && v46 < v8)
      {
        v48 = *(_QWORD *)(a1 + 864);
        do
        {
          if ((v45 & 1) != 0)
          {
            *(_DWORD *)(v48 + 4 * result) = v46;
            result = (result + 1);
          }
          if (v45 < 2)
            break;
          ++v46;
          v45 >>= 1;
        }
        while (v46 < v8);
      }
    }
    ++v11;
  }
  while (v11 != (v8 + 3) >> 2);
  return result;
}

uint64_t sub_1B197F4FC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  int8x16_t v14;
  const float *v15;
  const float *v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  uint64_t v26;
  unsigned int v27;
  int32x4_t v28;
  float32x4_t *v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int8x16_t v45;
  unsigned __int32 v46;
  unint64_t v48;

  v8 = a3;
  if ((a2 & 3) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 2;
  if (v11 >= (v8 + 3) >> 2)
    return 0;
  result = 0;
  v13 = *(_QWORD *)(a1 + 776);
  v14 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v15 = (const float *)(a1 + 816);
  v16 = (const float *)(a1 + 820);
  v17 = (int8x16_t)vld1q_dup_f32(v15);
  v18 = (int8x16_t)vld1q_dup_f32(v16);
  v19 = *(_QWORD *)(a1 + 784);
  v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
  v22 = *(_QWORD *)(a1 + 792);
  v23 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
  v24 = *(float32x4_t *)(a1 + 32);
  v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 3);
  v26 = *(_QWORD *)(a1 + 768);
  v27 = a2 & 0xFFFFFFFC;
  do
  {
    v28 = (int32x4_t)vbicq_s8((int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v14, (int8x16_t)vmovl_u16(*(uint16x4_t *)(v13 + 8 * v11)))), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*(int8x16_t *)(v22 + 16 * v11), v18), vandq_s8(*(int8x16_t *)(v19 + 16 * v11), v17))));
    if ((vmaxvq_u32((uint32x4_t)v28) & 0x80000000) != 0)
    {
      v29 = (float32x4_t *)(v26 + 96 * v11);
      v31 = v29[2];
      v30 = v29[3];
      v32 = v29[1];
      v33 = vmulq_n_f32(vsubq_f32(*v29, vaddq_f32(v20, v30)), v24.f32[0]);
      v34 = v29[4];
      v35 = v29[5];
      v36 = vmulq_lane_f32(vsubq_f32(v32, vaddq_f32(v21, v34)), *(float32x2_t *)v24.f32, 1);
      v37 = vmulq_laneq_f32(vsubq_f32(v31, vaddq_f32(v23, v35)), v24, 2);
      v38 = vmulq_n_f32(vaddq_f32(vsubq_f32(*v29, v20), v30), v24.f32[0]);
      v39 = vmulq_lane_f32(vaddq_f32(vsubq_f32(v32, v21), v34), *(float32x2_t *)v24.f32, 1);
      v40 = vmulq_laneq_f32(vaddq_f32(vsubq_f32(v31, v23), v35), v24, 2);
      v41 = vminnmq_f32(v33, v38);
      v42 = vmaxnmq_f32(v33, v38);
      v43 = vmaxnmq_f32(v36, v39);
      v44 = vmaxnmq_f32(v41, vmaxnmq_f32(vminnmq_f32(v36, v39), vminnmq_f32(v37, v40)));
      v45 = vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v25, v44), (int8x16_t)vcgeq_f32(vminnmq_f32(v42, vminnmq_f32(v43, vmaxnmq_f32(v37, v40))), v44))), (int8x8_t)vmovn_s32(v28))), (int8x16_t)xmmword_1B2245E50);
      *(int8x8_t *)v45.i8 = vorr_s8(*(int8x8_t *)v45.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL));
      v46 = vadd_s32(*(int32x2_t *)v45.i8, vdup_lane_s32(*(int32x2_t *)v45.i8, 1)).u32[0];
      if (v46 && 4 * (int)v11 < v8)
      {
        v48 = v27;
        do
        {
          if ((v46 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v48);
            result = (result + 1);
          }
          if (v46 < 2)
            break;
          ++v48;
          v46 >>= 1;
        }
        while (v48 < v8);
      }
    }
    ++v11;
    v27 += 4;
  }
  while (v11 != (v8 + 3) >> 2);
  return result;
}

uint64_t sub_1B197F714(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  float32x4_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float v24;

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = a1[48].i64[1];
  v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  v7 = a1[49].i64[0];
  v8 = a1[51].i32[0];
  v9 = a1[51].i32[1];
  v10 = a1[49].i64[1];
  v11 = a1[54].i64[0];
  v12 = a2;
  v13 = a3;
  v14 = (32 * a2) | 0x10;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v12) & v9 | *(_DWORD *)(v7 + 4 * v12) & v8)
      v15 = (unsigned __int16)(v6 & *(_WORD *)(v5 + 2 * v12)) == 0;
    else
      v15 = 0;
    if (v15)
    {
      v16 = (float32x4_t *)(a1[48].i64[0] + v14);
      v17 = v16[-1];
      v18 = a1[2];
      v19 = vaddq_f32(*v16, v17);
      v20 = vmulq_f32(vsubq_f32(v17, vaddq_f32(*v16, *a1)), v18);
      v21 = vmulq_f32(vsubq_f32(v19, *a1), v18);
      v20.i32[3] = 0;
      v21.i32[3] = 0;
      v22 = vminnmq_f32(v20, v21);
      v23 = vmaxnmq_f32(v20, v21);
      v24 = fmaxf(fmaxf(v22.f32[0], v22.f32[2]), v22.f32[1]);
      if (fminf(fminf(v23.f32[0], v23.f32[2]), v23.f32[1]) >= v24 && v24 < COERCE_FLOAT(HIDWORD(*(_OWORD *)&a1[2])))
      {
        *(_DWORD *)(v11 + 4 * result) = v12;
        result = (result + 1);
      }
    }
    ++v12;
    v14 += 32;
  }
  while (v13 != v12);
  return result;
}

uint64_t sub_1B197F814(float32x4_t *a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int32 v8;
  __int32 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = a1[48].i64[1];
  v6 = a1[52].i32[1] | (~a1[52].i32[2] << 8);
  v7 = a1[49].i64[0];
  v8 = a1[51].i32[0];
  v9 = a1[51].i32[1];
  v10 = a1[49].i64[1];
  v11 = a2;
  v12 = (32 * a2) | 0x10;
  do
  {
    if (*(_DWORD *)(v10 + 4 * v11) & v9 | *(_DWORD *)(v7 + 4 * v11) & v8)
      v13 = (unsigned __int16)(v6 & *(_WORD *)(v5 + 2 * v11)) == 0;
    else
      v13 = 0;
    if (v13)
    {
      v14 = (float32x4_t *)(a1[48].i64[0] + v12);
      v15 = v14[-1];
      v16 = a1[2];
      v17 = vaddq_f32(*v14, v15);
      v18 = vmulq_f32(vsubq_f32(v15, vaddq_f32(*v14, *a1)), v16);
      v19 = vmulq_f32(vsubq_f32(v17, *a1), v16);
      v18.i32[3] = 0;
      v19.i32[3] = 0;
      v20 = vminnmq_f32(v18, v19);
      v21 = vmaxnmq_f32(v18, v19);
      v22 = fmaxf(fmaxf(v20.f32[0], v20.f32[2]), v20.f32[1]);
      if (fminf(fminf(v21.f32[0], v21.f32[2]), v21.f32[1]) >= v22 && v22 < COERCE_FLOAT(HIDWORD(*(_OWORD *)&a1[2])))
      {
        *(_QWORD *)(a1[53].i64[1] + 8 * result) = *(_QWORD *)(a1[50].i64[1] + 8 * v11);
        result = (result + 1);
      }
    }
    ++v11;
    v12 += 32;
  }
  while (a3 != v11);
  return result;
}

CFStringRef sub_1B197F924(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXCullingSystem %p>"), a1);
}

CFStringRef sub_1B197F960(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXCullingSystem %p>"), a1);
}

uint64_t sub_1B197F99C(uint64_t a1)
{
  const void *v2;
  NSObject *v3;
  void *v4;

  free(*(void **)(a1 + 112));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 64));
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 72));
  free(*(void **)(a1 + 80));
  free(*(void **)(a1 + 88));
  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(NSObject **)(a1 + 120);
  if (v3)
  {
    dispatch_release(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 128));
  }
  v4 = *(void **)(a1 + 32);
  if (v4)
  {
    *(_QWORD *)(a1 + 40) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B197FA28(uint64_t a1, const void *a2)
{
  int v4;
  const void *v5;
  CFTypeRef v6;
  void *v7;
  int v8;
  void *v9;
  uint64_t (*v10)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t);
  uint64_t (*v12)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v13)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  void *v16;
  void *v17;

  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v4 = sub_1B179F5E4();
  *(_DWORD *)(a1 + 24) = 4;
  *(_DWORD *)(a1 + 28) = v4;
  sub_1B197FBB0(a1, 0x80u);
  v5 = *(const void **)(a1 + 136);
  if (v5 != a2)
  {
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(a1 + 136) = 0;
    }
    if (a2)
      v6 = CFRetain(a2);
    else
      v6 = 0;
    *(_QWORD *)(a1 + 136) = v6;
  }
  v7 = sub_1B197E5BC;
  v8 = *(_DWORD *)(a1 + 24);
  if (v8 == 4)
  {
    v7 = sub_1B197E408;
    v9 = sub_1B197E9A8;
  }
  else
  {
    v9 = sub_1B197EBDC;
  }
  v10 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B19827DC;
  if (v8 == 4)
    v10 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B19824EC;
  v11 = (uint64_t (*)(uint64_t, uint64_t))sub_1B19817F8;
  if (v8 == 4)
    v11 = sub_1B19814B0;
  v12 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1981FE8;
  if (v8 == 4)
    v12 = (uint64_t (*)(int32x2_t *, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1981D1C;
  if (v8 == 8)
  {
    v7 = sub_1B197E1B8;
    v9 = sub_1B197E684;
  }
  *(_QWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 152) = v7;
  v13 = sub_1B19820F8;
  if (v8 != 8)
    v13 = v10;
  v14 = sub_1B198103C;
  if (v8 != 8)
    v14 = v11;
  *(_QWORD *)(a1 + 176) = v13;
  *(_QWORD *)(a1 + 184) = v14;
  v15 = sub_1B198194C;
  if (v8 != 8)
    v15 = v12;
  *(_QWORD *)(a1 + 192) = v15;
  if (v8 == 8)
  {
    v16 = sub_1B197ECBC;
    v17 = sub_1B197EFD0;
  }
  else if (v8 == 4)
  {
    v16 = sub_1B197F2FC;
    v17 = sub_1B197F4FC;
  }
  else
  {
    v16 = sub_1B197F714;
    v17 = sub_1B197F814;
  }
  *(_QWORD *)(a1 + 160) = v17;
  *(_QWORD *)(a1 + 168) = v16;
  return a1;
}

void sub_1B197FBB0(uint64_t a1, unsigned int a2)
{
  int v4;
  int v5;
  unint64_t v6;
  int v7;
  int v8;
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  size_t v14;
  int v15;
  void *v16;
  int v17;
  void *v18;
  int v19;
  void *v20;
  int v21;
  void *v22;
  int v23;
  void *v24;
  int v25;
  void *v26;
  size_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _OWORD *v32;
  void *memptr;

  v4 = *(_DWORD *)(a1 + 20);
  v5 = *(_DWORD *)(a1 + 24);
  if (v5 == 8)
    v6 = 32;
  else
    v6 = 16;
  if (v5 == 8)
    v7 = 192;
  else
    v7 = 0;
  if (v5 == 4)
    v7 = 96;
  v8 = v5 - 1;
  if (v5 == 1)
    v9 = 32;
  else
    v9 = v7;
  v10 = dword_1B226862C[(125613361 * v5) >> 27];
  v11 = (v9 * (v8 + a2)) >> v10;
  v12 = (v4 + 7) >> 3;
  v13 = (a2 + 7) >> 3;
  if (*(_QWORD *)(a1 + 64))
  {
    v14 = ((v4 + v8) * v9) >> v10;
    *(_QWORD *)(a1 + 112) = malloc_type_realloc(*(void **)(a1 + 112), (a2 + 7) >> 3, 0x63F4B450uLL);
    *(_QWORD *)(a1 + 96) = sub_1B197CA2C(*(void **)(a1 + 96), v14, v11, v6);
    *(_QWORD *)(a1 + 64) = sub_1B197CA2C(*(void **)(a1 + 64), 32 * *(unsigned int *)(a1 + 20), 32 * a2, v6);
    *(_QWORD *)(a1 + 104) = sub_1B197CA2C(*(void **)(a1 + 104), 8 * *(unsigned int *)(a1 + 20), 8 * a2, v6);
    *(_QWORD *)(a1 + 72) = sub_1B197CA2C(*(void **)(a1 + 72), 4 * *(unsigned int *)(a1 + 20), 4 * a2, v6);
    *(_QWORD *)(a1 + 80) = sub_1B197CA2C(*(void **)(a1 + 80), 4 * *(unsigned int *)(a1 + 20), 4 * a2, v6);
    *(_QWORD *)(a1 + 88) = sub_1B197CA2C(*(void **)(a1 + 88), 2 * *(unsigned int *)(a1 + 20), 2 * a2, v6);
  }
  else
  {
    *(_QWORD *)(a1 + 112) = malloc_type_malloc((a2 + 7) >> 3, 0xB351725EuLL);
    memptr = 0;
    v15 = malloc_type_posix_memalign(&memptr, v6, v11, 0xBA8A1232uLL);
    v16 = memptr;
    if (v15)
      v16 = 0;
    *(_QWORD *)(a1 + 96) = v16;
    memptr = 0;
    v17 = malloc_type_posix_memalign(&memptr, v6, 32 * a2, 0xBA8A1232uLL);
    v18 = memptr;
    if (v17)
      v18 = 0;
    *(_QWORD *)(a1 + 64) = v18;
    memptr = 0;
    v19 = malloc_type_posix_memalign(&memptr, v6, 8 * a2, 0xBA8A1232uLL);
    v20 = memptr;
    if (v19)
      v20 = 0;
    *(_QWORD *)(a1 + 104) = v20;
    memptr = 0;
    v21 = malloc_type_posix_memalign(&memptr, v6, 4 * a2, 0xBA8A1232uLL);
    v22 = memptr;
    if (v21)
      v22 = 0;
    *(_QWORD *)(a1 + 72) = v22;
    memptr = 0;
    v23 = malloc_type_posix_memalign(&memptr, v6, 4 * a2, 0xBA8A1232uLL);
    v24 = memptr;
    if (v23)
      v24 = 0;
    *(_QWORD *)(a1 + 80) = v24;
    memptr = 0;
    v25 = malloc_type_posix_memalign(&memptr, v6, 2 * a2, 0xBA8A1232uLL);
    v26 = memptr;
    if (v25)
      v26 = 0;
    *(_QWORD *)(a1 + 88) = v26;
  }
  v27 = v13 - v12;
  if ((int)v27 >= 1)
    bzero((void *)(*(_QWORD *)(a1 + 112) + v12), v27);
  v28 = *(unsigned int *)(a1 + 20);
  v29 = a2 - v28;
  if ((int)(a2 - v28) >= 1)
  {
    bzero((void *)(*(_QWORD *)(a1 + 104) + 8 * v28), 8 * (a2 - v28));
    bzero((void *)(*(_QWORD *)(a1 + 72) + 4 * *(unsigned int *)(a1 + 20)), 4 * v29);
    bzero((void *)(*(_QWORD *)(a1 + 80) + 4 * *(unsigned int *)(a1 + 20)), 4 * v29);
    bzero((void *)(*(_QWORD *)(a1 + 88) + 2 * *(unsigned int *)(a1 + 20)), 2 * v29);
    v30 = *(unsigned int *)(a1 + 20);
    if (v30 < a2)
    {
      v31 = 32 * v30;
      do
      {
        v32 = (_OWORD *)(*(_QWORD *)(a1 + 64) + v31);
        *v32 = xmmword_1B2244E20;
        v32[1] = xmmword_1B2246ED0;
        sub_1B197CDB0(a1, v30, (__n128)xmmword_1B2268960, (__n128)xmmword_1B2268970);
        LODWORD(v30) = v30 + 1;
        v31 += 32;
      }
      while (a2 != (_DWORD)v30);
    }
  }
  *(_DWORD *)(a1 + 20) = a2;
}

uint64_t sub_1B197FF48(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  _DWORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  int v17;

  result = *(unsigned int *)(a1 + 56);
  if ((_DWORD)result == -1)
  {
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(char **)(a1 + 40);
    if ((unint64_t)v7 >= v6)
    {
      v9 = *(char **)(a1 + 32);
      v10 = (v7 - v9) >> 2;
      v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62)
        abort();
      v12 = v6 - (_QWORD)v9;
      if (v12 >> 1 > v11)
        v11 = v12 >> 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
        v13 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v13 = v11;
      if (v13)
      {
        v14 = (char *)sub_1B17F7E58(a1 + 48, v13);
        v9 = *(char **)(a1 + 32);
        v7 = *(char **)(a1 + 40);
      }
      else
      {
        v14 = 0;
      }
      v15 = &v14[4 * v10];
      v16 = &v14[4 * v13];
      *(_DWORD *)v15 = a2;
      v8 = v15 + 4;
      while (v7 != v9)
      {
        v17 = *((_DWORD *)v7 - 1);
        v7 -= 4;
        *((_DWORD *)v15 - 1) = v17;
        v15 -= 4;
      }
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v8;
      *(_QWORD *)(a1 + 48) = v16;
      if (v9)
        operator delete(v9);
    }
    else
    {
      *(_DWORD *)v7 = a2;
      v8 = v7 + 4;
    }
    *(_QWORD *)(a1 + 40) = v8;
    return (((unint64_t)v8 - *(_QWORD *)(a1 + 32)) >> 2) - 1;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(v5 + 4 * (int)result);
    *(_DWORD *)(v5 + 4 * (int)result) = a2;
  }
  return result;
}

uint64_t sub_1B1980054(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  __n128 v14;
  float32x4_t v15;
  __n128 v16;

  v8 = a2;
  if ((*(_WORD *)(a1[11] + 2 * a2) & 8) != 0)
  {
    v16 = (__n128)xmmword_1B22685F0;
    v14 = (__n128)xmmword_1B2244E20;
  }
  else
  {
    v10 = sub_1B1869AC8(*(_QWORD *)(a1[13] + 8 * a2), a2, a3, a4, a5, a6, a7, a8);
    v11 = *(float32x4_t *)(v10 + 16);
    v12 = *(float32x4_t *)(v10 + 32);
    v13 = (float32x4_t *)(a1[8] + 32 * v8);
    v14 = (__n128)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(*(float32x4_t *)(v10 + 48), v12, *v13, 2), v11, *(float32x2_t *)v13->f32, 1), *(float32x4_t *)v10, COERCE_FLOAT(*v13));
    v14.n128_u32[3] = HIDWORD(*(unsigned __int128 *)v13);
    v15 = v13[1];
    v15.i32[1] = v15.i32[0];
    v15.i32[2] = (__int32)v13[1];
    v16 = (__n128)vmlaq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vuzp2q_s32(vdupq_lane_s32(*(int32x2_t *)v13[1].f32, 1), (int32x4_t)v13[1]), vabsq_f32(v11)), vabsq_f32(*(float32x4_t *)v10), v15), vabsq_f32(v12), (float32x4_t)vzip2q_s32(vtrn1q_s32((int32x4_t)v13[1], (int32x4_t)v13[1]), (int32x4_t)v13[1]));
  }
  return sub_1B197CDB0((uint64_t)a1, v8, v14, v16);
}

BOOL sub_1B198010C(uint64_t a1, uint64_t a2)
{
  return *(float *)(a1 + 8) < *(float *)(a2 + 8);
}

void sub_1B1980120(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5, __n128 a6)
{
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int128 *v17;
  __int128 *v18;
  char v19;
  BOOL v20;
  __int128 v21;
  __int128 v22;

LABEL_1:
  v10 = a2 - 1;
  v11 = a1;
LABEL_2:
  v12 = 1 - a4;
  while (2)
  {
    a1 = v11;
    v13 = v12;
    v14 = (char *)a2 - (char *)v11;
    v15 = a2 - v11;
    switch(v15)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if ((*a3)(a2 - 1, v11))
        {
          v22 = *v11;
          *v11 = *v10;
          *v10 = v22;
        }
        return;
      case 3uLL:
        sub_1B19805F0(v11, v11 + 1, a2 - 1, a3);
        return;
      case 4uLL:
        sub_1B1980B00(v11, v11 + 1, v11 + 2, a2 - 1, a3);
        return;
      case 5uLL:
        sub_1B1980BB8(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
        return;
      default:
        if (v14 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_1B1980474((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          else
            sub_1B1980540((uint64_t)v11, a2, (uint64_t (**)(_OWORD *, _QWORD))a3);
          return;
        }
        if (v13 != 1)
        {
          v16 = v15 >> 1;
          v17 = &v11[v15 >> 1];
          if ((unint64_t)v14 < 0x801)
          {
            sub_1B19805F0(&v11[v15 >> 1], v11, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1B19805F0(v11, &v11[v15 >> 1], a2 - 1, a3);
            sub_1B19805F0(v11 + 1, v17 - 1, a2 - 2, a3);
            sub_1B19805F0(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
            sub_1B19805F0(v17 - 1, v17, &v11[v16 + 1], a3);
            v21 = *v11;
            *v11 = *v17;
            *v17 = v21;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (((*a3)(v11 - 1, v11) & 1) == 0)
          {
            v11 = sub_1B19806EC(v11, a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v18 = sub_1B1980818(v11, a2, a3);
          if ((v19 & 1) == 0)
            goto LABEL_14;
          v20 = sub_1B1980948(v11, v18, a3);
          v11 = v18 + 1;
          if (!sub_1B1980948(v18 + 1, a2, a3))
          {
            v12 = v13 + 1;
            if (v20)
              continue;
LABEL_14:
            sub_1B1980120(a1, v18, a3, -v13, a5 & 1);
            v11 = v18 + 1;
LABEL_16:
            a5 = 0;
            a4 = -v13;
            goto LABEL_2;
          }
          a4 = -v13;
          a2 = v18;
          if (v20)
            return;
          goto LABEL_1;
        }
        if (v11 != a2)
          sub_1B1980C98(v11, a2, a2, (unsigned int (**)(__int128 *, __int128 *))a3, a6);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = (uint64_t)(a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v8 + 8))
        {
          v99 = *(_OWORD *)v8;
          v42 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(v8 + 8) = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v8 = v42;
          *(_DWORD *)(a2 - 8) = DWORD2(v99);
          *(_QWORD *)(a2 - 16) = v99;
        }
        return;
      case 3uLL:
        sub_1B21BA8F0((__int128 *)v8, (__int128 *)(v8 + 16), a2 - 16);
        return;
      case 4uLL:
        sub_1B21BAC8C(v8, v8 + 16, (__n128 *)(v8 + 32), a2 - 16);
        return;
      case 5uLL:
        v43 = (__int128 *)(v8 + 16);
        v44 = (__int128 *)(v8 + 32);
        v45 = (__int128 *)(v8 + 48);
        sub_1B21BAC8C(v8, v8 + 16, (__n128 *)(v8 + 32), v8 + 48);
        if (*(_DWORD *)(a2 - 8) < *(_DWORD *)(v8 + 56))
        {
          v100 = *v45;
          v46 = *(_QWORD *)(a2 - 16);
          *(_DWORD *)(v8 + 56) = *(_DWORD *)(a2 - 8);
          *(_QWORD *)v45 = v46;
          *(_DWORD *)(a2 - 8) = DWORD2(v100);
          *(_QWORD *)(a2 - 16) = v100;
          if (*(_DWORD *)(v8 + 56) < *(_DWORD *)(v8 + 40))
          {
            v101 = *v44;
            *(_QWORD *)v44 = *(_QWORD *)v45;
            *(_DWORD *)(v8 + 40) = *(_DWORD *)(v8 + 56);
            *(_QWORD *)v45 = v101;
            *(_DWORD *)(v8 + 56) = DWORD2(v101);
            if (*(_DWORD *)(v8 + 40) < *(_DWORD *)(v8 + 24))
            {
              v102 = *v43;
              *(_QWORD *)v43 = *(_QWORD *)v44;
              *(_DWORD *)(v8 + 24) = *(_DWORD *)(v8 + 40);
              *(_QWORD *)v44 = v102;
              *(_DWORD *)(v8 + 40) = DWORD2(v102);
              if (*(_DWORD *)(v8 + 24) < *(_DWORD *)(v8 + 8))
              {
                v103 = *(_OWORD *)v8;
                *(_QWORD *)v8 = *(_QWORD *)v43;
                *(_DWORD *)(v8 + 8) = *(_DWORD *)(v8 + 24);
                *(_QWORD *)v43 = v103;
                *(_DWORD *)(v8 + 24) = DWORD2(v103);
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v47 = v8 + 16;
          v49 = v8 == a2 || v47 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v49)
            {
              v50 = 0;
              v51 = v8;
              do
              {
                v52 = *(_DWORD *)(v51 + 24);
                v53 = *(_DWORD *)(v51 + 8);
                v51 = v47;
                if (v52 < v53)
                {
                  v54 = *(_QWORD *)v47;
                  v55 = v50;
                  while (1)
                  {
                    v56 = v8 + v55;
                    *(_QWORD *)(v56 + 16) = *(_QWORD *)(v8 + v55);
                    *(_DWORD *)(v56 + 24) = *(_DWORD *)(v8 + v55 + 8);
                    if (!v55)
                      break;
                    v55 -= 16;
                    if (v52 >= *(_DWORD *)(v56 - 8))
                    {
                      v57 = v8 + v55 + 16;
                      goto LABEL_79;
                    }
                  }
                  v57 = v8;
LABEL_79:
                  *(_QWORD *)v57 = v54;
                  *(_DWORD *)(v57 + 8) = v52;
                }
                v47 = v51 + 16;
                v50 += 16;
              }
              while (v51 + 16 != a2);
            }
          }
          else if (!v49)
          {
            do
            {
              v91 = *(_DWORD *)(a1 + 24);
              v92 = *(_DWORD *)(a1 + 8);
              a1 = v47;
              if (v91 < v92)
              {
                v93 = *(_QWORD *)v47;
                do
                {
                  v94 = v47;
                  v95 = *(_QWORD *)(v47 - 16);
                  v47 -= 16;
                  *(_QWORD *)v94 = v95;
                  *(_DWORD *)(v94 + 8) = *(_DWORD *)(v94 - 8);
                }
                while (v91 < *(_DWORD *)(v94 - 24));
                *(_QWORD *)v47 = v93;
                *(_DWORD *)(v47 + 8) = v91;
              }
              v47 = a1 + 16;
            }
            while (a1 + 16 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v58 = (v10 - 2) >> 1;
            v59 = v58;
            do
            {
              v60 = v59;
              if (v58 >= v59)
              {
                v61 = (2 * v59) | 1;
                v62 = v8 + 16 * v61;
                if (2 * v60 + 2 < (uint64_t)v10)
                {
                  v63 = *(_DWORD *)(v62 + 8);
                  v64 = *(_DWORD *)(v62 + 24);
                  v62 += 16 * (v63 < v64);
                  if (v63 < v64)
                    v61 = 2 * v60 + 2;
                }
                v65 = *(_DWORD *)(v8 + 16 * v60 + 8);
                if (*(_DWORD *)(v62 + 8) >= v65)
                {
                  v66 = v8 + 16 * v60;
                  v67 = *(_QWORD *)v66;
                  do
                  {
                    v68 = v66;
                    v66 = v62;
                    v69 = *(_QWORD *)v62;
                    *(_DWORD *)(v68 + 8) = *(_DWORD *)(v66 + 8);
                    *(_QWORD *)v68 = v69;
                    if (v58 < v61)
                      break;
                    v70 = (2 * v61) | 1;
                    v62 = v8 + 16 * v70;
                    v71 = 2 * v61 + 2;
                    if (v71 < (uint64_t)v10)
                    {
                      v72 = *(_DWORD *)(v62 + 8);
                      v73 = *(_DWORD *)(v62 + 24);
                      v62 += 16 * (v72 < v73);
                      if (v72 < v73)
                        v70 = v71;
                    }
                    v61 = v70;
                  }
                  while (*(_DWORD *)(v62 + 8) >= v65);
                  *(_QWORD *)v66 = v67;
                  *(_DWORD *)(v66 + 8) = v65;
                }
              }
              v59 = v60 - 1;
            }
            while (v60);
            v74 = (unint64_t)v9 >> 4;
            do
            {
              v75 = 0;
              v104 = *(_OWORD *)v8;
              v76 = v8;
              do
              {
                v77 = v76 + 16 * (v75 + 1);
                v78 = (2 * v75) | 1;
                v79 = 2 * v75 + 2;
                if (v79 < v74)
                {
                  v80 = *(_DWORD *)(v77 + 8);
                  v81 = *(_DWORD *)(v77 + 24);
                  v77 += 16 * (v80 < v81);
                  if (v80 < v81)
                    v78 = v79;
                }
                v82 = *(_QWORD *)v77;
                *(_DWORD *)(v76 + 8) = *(_DWORD *)(v77 + 8);
                *(_QWORD *)v76 = v82;
                v76 = v77;
                v75 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              a2 -= 16;
              if (v77 == a2)
              {
                *(_DWORD *)(v77 + 8) = DWORD2(v104);
                *(_QWORD *)v77 = v104;
              }
              else
              {
                v83 = *(_QWORD *)a2;
                *(_DWORD *)(v77 + 8) = *(_DWORD *)(a2 + 8);
                *(_QWORD *)v77 = v83;
                *(_DWORD *)(a2 + 8) = DWORD2(v104);
                *(_QWORD *)a2 = v104;
                v84 = v77 - v8 + 16;
                if (v84 >= 17)
                {
                  v85 = (((unint64_t)v84 >> 4) - 2) >> 1;
                  v86 = *(_DWORD *)(v77 + 8);
                  if (*(_DWORD *)(v8 + 16 * v85 + 8) < v86)
                  {
                    v87 = *(_QWORD *)v77;
                    do
                    {
                      v88 = v77;
                      v77 = v8 + 16 * v85;
                      v89 = *(_QWORD *)v77;
                      *(_DWORD *)(v88 + 8) = *(_DWORD *)(v77 + 8);
                      *(_QWORD *)v88 = v89;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                    }
                    while (*(_DWORD *)(v8 + 16 * v85 + 8) < v86);
                    *(_QWORD *)v77 = v87;
                    *(_DWORD *)(v77 + 8) = v86;
                  }
                }
              }
            }
            while (v74-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 16 * (v10 >> 1);
        if ((unint64_t)v9 < 0x801)
        {
          sub_1B21BA8F0((__int128 *)(a1 + 16 * (v10 >> 1)), (__int128 *)a1, a2 - 16);
        }
        else
        {
          sub_1B21BA8F0((__int128 *)a1, (__int128 *)(a1 + 16 * (v10 >> 1)), a2 - 16);
          sub_1B21BA8F0((__int128 *)(a1 + 16), (__int128 *)(v12 - 16), a2 - 32);
          sub_1B21BA8F0((__int128 *)(a1 + 32), (__int128 *)(a1 + 16 + 16 * v11), a2 - 48);
          sub_1B21BA8F0((__int128 *)(v12 - 16), (__int128 *)v12, a1 + 16 + 16 * v11);
          v96 = *(_OWORD *)a1;
          v13 = *(_QWORD *)v12;
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v12 + 8);
          *(_QWORD *)a1 = v13;
          *(_DWORD *)(v12 + 8) = DWORD2(v96);
          *(_QWORD *)v12 = v96;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(_DWORD *)(a1 + 8);
          if (*(_DWORD *)(a1 - 8) < v14)
            goto LABEL_11;
          if (v14 >= *(_DWORD *)(a2 - 8))
          {
            v32 = a1 + 16;
            do
            {
              v8 = v32;
              if (v32 >= a2)
                break;
              v33 = *(_DWORD *)(v32 + 8);
              v32 += 16;
            }
            while (v14 >= v33);
          }
          else
          {
            v30 = a1;
            do
            {
              v8 = v30 + 16;
              v31 = *(_DWORD *)(v30 + 24);
              v30 += 16;
            }
            while (v14 >= v31);
          }
          v34 = a2;
          if (v8 < a2)
          {
            v35 = a2;
            do
            {
              v34 = v35 - 16;
              v36 = *(_DWORD *)(v35 - 8);
              v35 -= 16;
            }
            while (v14 < v36);
          }
          v37 = *(_QWORD *)a1;
          while (v8 < v34)
          {
            v98 = *(_OWORD *)v8;
            v38 = *(_QWORD *)v34;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v34 + 8);
            *(_QWORD *)v8 = v38;
            *(_DWORD *)(v34 + 8) = DWORD2(v98);
            *(_QWORD *)v34 = v98;
            do
            {
              v39 = *(_DWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v14 >= v39);
            do
            {
              v40 = *(_DWORD *)(v34 - 8);
              v34 -= 16;
            }
            while (v14 < v40);
          }
          if (v8 - 16 != a1)
          {
            v41 = *(_QWORD *)(v8 - 16);
            *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 - 8);
            *(_QWORD *)a1 = v41;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v37;
          *(_DWORD *)(v8 - 8) = v14;
          continue;
        }
        v14 = *(_DWORD *)(a1 + 8);
LABEL_11:
        v15 = 0;
        v16 = *(_QWORD *)a1;
        do
        {
          v17 = *(_DWORD *)(a1 + v15 + 24);
          v15 += 16;
        }
        while (v17 < v14);
        v18 = a1 + v15;
        v19 = a2;
        if (v15 == 16)
        {
          v22 = a2;
          while (v18 < v22)
          {
            v20 = v22 - 16;
            v23 = *(_DWORD *)(v22 - 8);
            v22 -= 16;
            if (v23 < v14)
              goto LABEL_21;
          }
          v20 = v22;
        }
        else
        {
          do
          {
            v20 = v19 - 16;
            v21 = *(_DWORD *)(v19 - 8);
            v19 -= 16;
          }
          while (v21 >= v14);
        }
LABEL_21:
        v8 = v18;
        if (v18 < v20)
        {
          v24 = v20;
          do
          {
            v97 = *(_OWORD *)v8;
            v25 = *(_QWORD *)v24;
            *(_DWORD *)(v8 + 8) = *(_DWORD *)(v24 + 8);
            *(_QWORD *)v8 = v25;
            *(_DWORD *)(v24 + 8) = DWORD2(v97);
            *(_QWORD *)v24 = v97;
            do
            {
              v26 = *(_DWORD *)(v8 + 24);
              v8 += 16;
            }
            while (v26 < v14);
            do
            {
              v27 = *(_DWORD *)(v24 - 8);
              v24 -= 16;
            }
            while (v27 >= v14);
          }
          while (v8 < v24);
        }
        if (v8 - 16 != a1)
        {
          v28 = *(_QWORD *)(v8 - 16);
          *(_DWORD *)(a1 + 8) = *(_DWORD *)(v8 - 8);
          *(_QWORD *)a1 = v28;
        }
        *(_QWORD *)(v8 - 16) = v16;
        *(_DWORD *)(v8 - 8) = v14;
        if (v18 < v20)
        {
LABEL_32:
          sub_1B21BA0CC(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_1B21BAA00(a1, v8 - 16);
        if (!sub_1B21BAA00(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 16;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

uint64_t sub_1B1980474(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  if ((_OWORD *)result != a2)
  {
    v15 = v3;
    v16 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = 0;
      v10 = (_OWORD *)result;
      do
      {
        v11 = v10;
        v10 = v7;
        result = (*a3)(v7, v11);
        if ((_DWORD)result)
        {
          v14 = *v10;
          v12 = v9;
          while (1)
          {
            *(_OWORD *)((char *)v6 + v12 + 16) = *(_OWORD *)((char *)v6 + v12);
            if (!v12)
              break;
            v12 -= 16;
            result = (*a3)(&v14, (char *)v6 + v12);
            if ((result & 1) == 0)
            {
              v13 = (_OWORD *)((char *)v6 + v12 + 16);
              goto LABEL_10;
            }
          }
          v13 = v6;
LABEL_10:
          *v13 = v14;
        }
        v7 = v10 + 1;
        v9 += 16;
      }
      while (v10 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1B1980540(uint64_t result, _OWORD *a2, uint64_t (**a3)(_OWORD *, _QWORD))
{
  uint64_t v3;
  uint64_t v4;
  _OWORD *v6;
  _OWORD *v7;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  if ((_OWORD *)result != a2)
  {
    v13 = v3;
    v14 = v4;
    v6 = (_OWORD *)result;
    v7 = (_OWORD *)(result + 16);
    if ((_OWORD *)(result + 16) != a2)
    {
      v9 = result - 16;
      do
      {
        v10 = v6;
        v6 = v7;
        result = (*a3)(v7, v10);
        if ((_DWORD)result)
        {
          v12 = *v6;
          v11 = v9;
          do
          {
            *(_OWORD *)(v11 + 32) = *(_OWORD *)(v11 + 16);
            result = (*a3)(&v12, v11);
            v11 -= 16;
          }
          while ((result & 1) != 0);
          *(_OWORD *)(v11 + 32) = v12;
        }
        v7 = v6 + 1;
        v9 += 16;
      }
      while (v6 + 1 != a2);
    }
  }
  return result;
}

uint64_t sub_1B19805F0(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) == 0)
  {
    if (!(_DWORD)result)
      return result;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!(*a4)(a2, a1))
      return 1;
    v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
    return 2;
  }
  if (!(_DWORD)result)
  {
    v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    if (!(*a4)(a3, a2))
      return 1;
    v14 = *a2;
    *a2 = *a3;
    *a3 = v14;
    return 2;
  }
  v10 = *a1;
  *a1 = *a3;
  *a3 = v10;
  return 1;
}

__int128 *sub_1B19806EC(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  __int128 *v4;
  __int128 *v6;
  __int128 *v7;
  int v8;
  __int128 *v9;
  __int128 v11;
  __int128 v12;

  v4 = a2;
  v11 = *a1;
  if (((*a3)(&v11, a2 - 1) & 1) != 0)
  {
    v6 = a1;
    do
      ++v6;
    while (((*a3)(&v11, v6) & 1) == 0);
  }
  else
  {
    v7 = a1 + 1;
    do
    {
      v6 = v7;
      if (v7 >= v4)
        break;
      v8 = (*a3)(&v11, v7);
      v7 = v6 + 1;
    }
    while (!v8);
  }
  if (v6 < v4)
  {
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  while (v6 < v4)
  {
    v12 = *v6;
    *v6 = *v4;
    *v4 = v12;
    do
      ++v6;
    while (!(*a3)(&v11, v6));
    do
      --v4;
    while (((*a3)(&v11, v4) & 1) != 0);
  }
  v9 = v6 - 1;
  if (v6 - 1 != a1)
    *a1 = *v9;
  *v9 = v11;
  return v6;
}

__int128 *sub_1B1980818(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v13;
  __int128 v14;

  v6 = 0;
  v13 = *a1;
  do
    ++v6;
  while (((*a3)(&a1[v6], &v13) & 1) != 0);
  v7 = &a1[v6];
  v8 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v7 >= a2)
        break;
      --a2;
    }
    while (((*a3)(a2, &v13) & 1) == 0);
  }
  else
  {
    do
      --a2;
    while (!(*a3)(a2, &v13));
  }
  if (v7 < a2)
  {
    v9 = &a1[v6];
    v10 = a2;
    do
    {
      v14 = *v9;
      v11 = v14;
      *v9 = *v10;
      *v10 = v11;
      do
        ++v9;
      while (((*a3)(v9, &v13) & 1) != 0);
      do
        --v10;
      while (!(*a3)(v10, &v13));
    }
    while (v9 < v10);
    v8 = v9 - 1;
  }
  if (v8 != a1)
    *a1 = *v8;
  *v8 = v13;
  return v8;
}

BOOL sub_1B1980948(__int128 *a1, __int128 *a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  uint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = a2 - 1;
      if ((*a3)(a2 - 1, a1))
      {
        v9 = *a1;
        *a1 = *v8;
        *v8 = v9;
      }
      return 1;
    case 3:
      sub_1B19805F0(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1B1980B00(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1B1980BB8(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v10 = a1 + 2;
      sub_1B19805F0(a1, a1 + 1, a1 + 2, a3);
      v11 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)(v11, v10))
    {
      v17 = *v11;
      v14 = v12;
      while (1)
      {
        v15 = (__int128 *)((char *)a1 + v14);
        *(__int128 *)((char *)a1 + v14 + 48) = *(__int128 *)((char *)a1 + v14 + 32);
        if (v14 == -32)
          break;
        v14 -= 16;
        if (((*a3)(&v17, v15 + 1) & 1) == 0)
        {
          v16 = (__int128 *)((char *)a1 + v14 + 48);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v17;
      if (++v13 == 8)
        return v11 + 1 == a2;
    }
    v10 = v11;
    v12 += 16;
    if (++v11 == a2)
      return 1;
  }
}

__n128 sub_1B1980B00(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  __int128 v11;
  __int128 v12;

  sub_1B19805F0(a1, a2, a3, a5);
  if ((*a5)(a4, a3))
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    if ((*a5)(a3, a2))
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      if ((*a5)(a2, a1))
      {
        result = (__n128)*a1;
        *a1 = *a2;
        *a2 = (__int128)result;
      }
    }
  }
  return result;
}

__n128 sub_1B1980BB8(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v12 = sub_1B1980B00(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a6)(a5, a4, v12))
  {
    v14 = *a4;
    *a4 = *a5;
    *a5 = v14;
    if ((*a6)(a4, a3))
    {
      v15 = *a3;
      *a3 = *a4;
      *a4 = v15;
      if ((*a6)(a3, a2))
      {
        v16 = *a2;
        *a2 = *a3;
        *a3 = v16;
        if ((*a6)(a2, a1))
        {
          result = (__n128)*a1;
          *a1 = *a2;
          *a2 = (__int128)result;
        }
      }
    }
  }
  return result;
}

__int128 *sub_1B1980C98(__int128 *a1, __int128 *a2, __int128 *a3, unsigned int (**a4)(__int128 *, __int128 *), __n128 a5)
{
  __int128 *v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 *v13;
  __int128 *v14;
  __int128 *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 *v25;
  __int128 v26;

  if (a1 != a2)
  {
    v7 = a2;
    v9 = (char *)a2 - (char *)a1;
    v10 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 17)
    {
      v11 = (unint64_t)(v10 - 2) >> 1;
      v12 = v11 + 1;
      v13 = &a1[v11];
      do
      {
        a5.n128_f64[0] = sub_1B1980E68((uint64_t)a1, a4, v10, v13--);
        --v12;
      }
      while (v12);
    }
    v14 = v7;
    if (v7 != a3)
    {
      v15 = v7;
      do
      {
        if (((unsigned int (*)(__int128 *, __int128 *, __n128))*a4)(v15, a1, a5))
        {
          v16 = *v15;
          *v15 = *a1;
          *a1 = v16;
          a5.n128_f64[0] = sub_1B1980E68((uint64_t)a1, a4, v10, a1);
        }
        ++v15;
      }
      while (v15 != a3);
      v14 = a3;
    }
    if (v9 < 17)
    {
      return v14;
    }
    else
    {
      v25 = v14;
      v17 = (unint64_t)v9 >> 4;
      do
      {
        v18 = 0;
        v26 = *a1;
        v19 = a1;
        do
        {
          v20 = &v19[v18 + 1];
          v21 = (2 * v18) | 1;
          v22 = 2 * v18 + 2;
          if (v22 < v17 && (*a4)(&v19[v18 + 1], &v19[v18 + 2]))
          {
            ++v20;
            v21 = v22;
          }
          *v19 = *v20;
          v19 = v20;
          v18 = v21;
        }
        while (v21 <= (uint64_t)((unint64_t)(v17 - 2) >> 1));
        if (v20 == --v7)
        {
          *v20 = v26;
        }
        else
        {
          *v20 = *v7;
          *v7 = v26;
          sub_1B1980F98((uint64_t)a1, (uint64_t)(v20 + 1), (uint64_t (**)(__int128 *, __int128 *))a4, v20 + 1 - a1);
        }
      }
      while (v17-- > 2);
      return v25;
    }
  }
  return a3;
}

double sub_1B1980E68(uint64_t a1, unsigned int (**a2)(__int128 *, __int128 *), uint64_t a3, __int128 *a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __int128 *v7;
  int64_t v9;
  uint64_t v12;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  double result;
  __int128 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a3 - 2;
  if (a3 >= 2)
  {
    v21 = v4;
    v22 = v5;
    v7 = a4;
    v9 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) >= ((uint64_t)a4 - a1) >> 4)
    {
      v12 = ((uint64_t)a4 - a1) >> 3;
      v13 = v12 + 1;
      v14 = (__int128 *)(a1 + 16 * (v12 + 1));
      v15 = v12 + 2;
      if (v12 + 2 < a3 && (*a2)(v14, v14 + 1))
      {
        ++v14;
        v13 = v15;
      }
      if ((((uint64_t (*)(__int128 *, __int128 *))*a2)(v14, v7) & 1) == 0)
      {
        v20 = *v7;
        do
        {
          v17 = v14;
          *v7 = *v14;
          if (v9 < v13)
            break;
          v18 = (2 * v13) | 1;
          v14 = (__int128 *)(a1 + 16 * v18);
          v19 = 2 * v13 + 2;
          if (v19 < a3)
          {
            if ((*a2)((__int128 *)(a1 + 16 * v18), v14 + 1))
            {
              ++v14;
              v18 = v19;
            }
          }
          v7 = v17;
          v13 = v18;
        }
        while (!(*a2)(v14, &v20));
        result = *(double *)&v20;
        *v17 = v20;
      }
    }
  }
  return result;
}

double sub_1B1980F98(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v9;
  __int128 *v10;
  __int128 *v11;
  double result;
  __int128 *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = a4 - 2;
  if (a4 >= 2)
  {
    v15 = v4;
    v16 = v5;
    v9 = v6 >> 1;
    v10 = (__int128 *)(a1 + 16 * (v6 >> 1));
    v11 = (__int128 *)(a2 - 16);
    if ((*a3)(v10, (__int128 *)(a2 - 16)))
    {
      v14 = *v11;
      do
      {
        v13 = v10;
        *v11 = *v10;
        if (!v9)
          break;
        v9 = (v9 - 1) >> 1;
        v10 = (__int128 *)(a1 + 16 * v9);
        v11 = v13;
      }
      while (((*a3)(v10, &v14) & 1) != 0);
      result = *(double *)&v14;
      *v13 = v14;
    }
  }
  return result;
}

uint64_t sub_1B198103C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int32x2_t *v11;
  int32x2_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int8x16_t v19;
  int32x2_t *v20;
  uint64_t i;
  int32x4_t v22;
  int8x16_t v23;
  int8x16_t *v24;
  int8x16_t v25;
  int8x16_t v26;
  int32x4_t v27;
  int8x16_t *v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  uint64_t result;
  int32x2_t v33;
  const float *v34;
  int8x16_t v35;
  int8x16_t v36;
  int32x2_t v37;
  const float *v38;
  int8x16_t v39;
  const float *v40;
  const float *v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x2_t v44;
  int8x16_t v45;
  unsigned int v46;
  int32x2_t v47;
  int8x16_t *v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t *v52;
  int8x16_t v53;
  int8x16_t v54;
  uint16x8_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  uint64_t v60;
  unsigned int v61;
  int v62;
  _OWORD *v63;
  int8x16_t v64;
  int8x16_t v65;
  int8x16_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int v78;
  int v79;
  int32x4_t v80;
  int32x4_t v81;
  unsigned int v82;
  int8x16_t *v83;
  float32x4_t *v84;
  int8x16_t *v85;
  unsigned int v86;
  unint64_t v87;
  int v88;
  int8x16_t v89;
  int8x16_t v90;
  _OWORD v91[674];
  uint64_t v92;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = v2;
  v10 = v9;
  v12 = v11;
  v92 = *MEMORY[0x1E0C80C00];
  if ((v9 & 7) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"(start & kSOALaneMask) == 0");
  v13 = v10 >> 3;
  v14 = (v8 + 7) >> 3;
  v15 = v12[110].u32[0];
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    v20 = v12;
    do
    {
      for (i = 0; i != 12; i += 2)
      {
        v22 = *(int32x4_t *)v20[i].i8;
        v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
        v24 = (int8x16_t *)&v91[2 * v17 + 290];
        *v24 = v23;
        v24[1] = v23;
        v25 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
        v24[2] = v25;
        v24[3] = v25;
        v26 = (int8x16_t)vdupq_laneq_s32(v22, 2);
        v27 = vdupq_laneq_s32(v22, 3);
        v24[4] = v26;
        v24[5] = v26;
        v24[6] = (int8x16_t)v27;
        v24[7] = (int8x16_t)v27;
        v28 = (int8x16_t *)&v91[2 * v18 + 2];
        v29 = vandq_s8(v23, v19);
        *v28 = v29;
        v28[1] = v29;
        v30 = vandq_s8(v25, v19);
        v28[2] = v30;
        v28[3] = v30;
        v31 = vandq_s8(v26, v19);
        v28[4] = v31;
        v28[5] = v31;
        v17 += 4;
        v18 += 3;
      }
      ++v16;
      v20 += 12;
    }
    while (v16 != v15);
  }
  if (v13 >= v14)
    return 0;
  result = 0;
  v33 = v12[97];
  v34 = (const float *)&v12[102];
  v35 = (int8x16_t)vdupq_n_s32(v12[104].i32[1] | (~v12[105].i32[0] << 8));
  v36 = (int8x16_t)vdupq_lane_s32(v12[104], 0);
  v37 = v12[98];
  v38 = (const float *)&v12[102] + 1;
  v39 = (int8x16_t)vld1q_dup_f32(v34);
  v40 = (const float *)&v12[103];
  v41 = (const float *)&v12[103] + 1;
  v42 = (int8x16_t)vld1q_dup_f32(v40);
  v43 = (int8x16_t)vld1q_dup_f32(v38);
  v44 = v12[99];
  v45 = (int8x16_t)vld1q_dup_f32(v41);
  v46 = v10 & 0xFFFFFFF8;
  v47 = v12[96];
  v89 = v36;
  v90 = v35;
  do
  {
    v48 = (int8x16_t *)(*(_QWORD *)&v37 + 32 * v13);
    v49 = *v48;
    v50 = v48[1];
    v51 = vandq_s8(*v48, v39);
    v52 = (int8x16_t *)(*(_QWORD *)&v44 + 32 * v13);
    v53 = v52[1];
    v54 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v52, v43), v51)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v53, v43), vandq_s8(v50, v39))));
    v55 = *(uint16x8_t *)(*(_QWORD *)&v33 + 16 * v13);
    v56 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8);
    v57 = (int8x16_t)vmovl_high_u16(v55);
    *(int8x8_t *)v49.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v36, v56)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v36, v57)))), v54), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v52, v45), vandq_s8(v49, v42)), vandq_s8(v35, v56))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v53, v45), vandq_s8(v50, v42)), vandq_s8(v35, v57))))));
    v58 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)v35.i8)), 0x1FuLL));
    v59 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v49.i8, *(int8x8_t *)v35.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v59, v58)) & 0x80000000) != 0)
    {
      if ((_DWORD)v15)
      {
        v60 = 0;
        v61 = 0;
        v62 = 0;
        v63 = (_OWORD *)(*(_QWORD *)&v47 + 192 * v13);
        v65 = *((int8x16_t *)v63 + 6);
        v64 = *((int8x16_t *)v63 + 7);
        v67 = *((int8x16_t *)v63 + 8);
        v66 = *((int8x16_t *)v63 + 9);
        v69 = *((int8x16_t *)v63 + 10);
        v68 = *((int8x16_t *)v63 + 11);
        v71 = *(float32x4_t *)v63;
        v70 = *((float32x4_t *)v63 + 1);
        v73 = *((float32x4_t *)v63 + 2);
        v72 = *((float32x4_t *)v63 + 3);
        v75 = *((float32x4_t *)v63 + 4);
        v74 = *((float32x4_t *)v63 + 5);
        v76 = 0uLL;
        v77 = 0uLL;
        do
        {
          v78 = 0;
          v79 = v62 + 24;
          v80.i64[0] = -1;
          v80.i64[1] = -1;
          v81.i64[0] = -1;
          v81.i64[1] = -1;
          v82 = v61;
          do
          {
            v83 = (int8x16_t *)&v91[2 * v82 + 2];
            v84 = (float32x4_t *)&v91[2 * (v62 + v78) + 290];
            v81 = (int32x4_t)vandq_s8((int8x16_t)v81, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v84[7], vsubq_f32(v70, (float32x4_t)veorq_s8(v83[1], v64)), v84[1]), vsubq_f32(v72, (float32x4_t)veorq_s8(v83[3], v66)), v84[3]), vsubq_f32(v74, (float32x4_t)veorq_s8(v83[5], v68)), v84[5]));
            v80 = (int32x4_t)vandq_s8((int8x16_t)v80, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v84[6], vsubq_f32(v71, (float32x4_t)veorq_s8(*v83, v65)), *v84), vsubq_f32(v73, (float32x4_t)veorq_s8(v83[2], v67)), v84[2]), vsubq_f32(v75, (float32x4_t)veorq_s8(v83[4], v69)), v84[4]));
            v82 += 3;
            v78 += 4;
          }
          while (v78 != 24);
          v61 += 18;
          v85 = (int8x16_t *)((char *)&unk_1B22686C0 + 32 * v60);
          v76 = vorrq_s8(vandq_s8(vandq_s8(*v85, v59), (int8x16_t)vcltzq_s32(v80)), v76);
          v77 = vorrq_s8(vandq_s8(vandq_s8(v85[1], v58), (int8x16_t)vcltzq_s32(v81)), v77);
          ++v60;
          v62 = v79;
        }
        while (v60 != v15);
      }
      else
      {
        v76 = 0uLL;
        v77 = 0uLL;
      }
      if ((vminvq_u32((uint32x4_t)vceqzq_s32((int32x4_t)vorrq_s8(v76, v77))) & 0x80000000) != 0)
      {
        v36 = v89;
        v35 = v90;
      }
      else
      {
        v36 = v89;
        v35 = v90;
        if (8 * (int)v13 < v8)
        {
          v86 = 0;
          v87 = v46;
          do
          {
            v91[0] = v76;
            v91[1] = v77;
            v88 = *((_DWORD *)v91 + (v86 & 7));
            if ((_BYTE)v88)
            {
              *(_BYTE *)(*(_QWORD *)&v12[109] + result) = v88;
              *(_QWORD *)(*(_QWORD *)&v12[107] + 8 * result) = *(_QWORD *)(*(_QWORD *)&v12[101] + 8 * v87);
              result = (result + 1);
            }
            if (v86 > 6)
              break;
            ++v86;
            ++v87;
          }
          while (v87 < v8);
        }
      }
    }
    ++v13;
    v46 += 8;
  }
  while (v13 != v14);
  return result;
}

uint64_t sub_1B19814B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  int8x16_t v19;
  uint64_t v20;
  uint64_t i;
  int32x4_t v22;
  int8x16_t *v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t *v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  int8x16_t v31;
  const float *v32;
  const float *v33;
  int32x4_t v34;
  uint64_t v35;
  const float *v36;
  int8x16_t v37;
  const float *v38;
  const float *v39;
  int8x16_t v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  unsigned int v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  uint64_t v51;
  unsigned int v52;
  int v53;
  uint64_t v54;
  int32x4_t v55;
  int v56;
  int32x4_t v57;
  unsigned int v58;
  float32x4_t *v59;
  unsigned int v60;
  unint64_t v61;
  int v62;
  _OWORD v63[337];
  uint64_t v64;

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = v2;
  v10 = v9;
  v12 = v11;
  v64 = *MEMORY[0x1E0C80C00];
  if ((v9 & 3) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"(start & kSOALaneMask) == 0");
  v13 = v10 >> 2;
  v14 = (v8 + 3) >> 2;
  v15 = *(unsigned int *)(v12 + 880);
  if ((_DWORD)v15)
  {
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    v20 = v12;
    do
    {
      for (i = 0; i != 96; i += 16)
      {
        v22 = *(int32x4_t *)(v20 + i);
        v23 = (int8x16_t *)&v63[v17 + 145];
        v24 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 0);
        v25 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v22.i8, 1);
        *v23 = v24;
        v23[1] = v25;
        v26 = (int8x16_t)vdupq_laneq_s32(v22, 2);
        v23[2] = v26;
        v23[3] = (int8x16_t)vdupq_laneq_s32(v22, 3);
        v27 = (int8x16_t *)&v63[v18 + 1];
        *v27 = vandq_s8(v24, v19);
        v27[1] = vandq_s8(v25, v19);
        v27[2] = vandq_s8(v26, v19);
        v17 += 4;
        v18 += 3;
      }
      ++v16;
      v20 += 96;
    }
    while (v16 != v15);
  }
  if (v13 >= v14)
    return 0;
  result = 0;
  v29 = *(_QWORD *)(v12 + 768);
  v30 = *(_QWORD *)(v12 + 776);
  v31 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(v12 + 836) | (~*(_DWORD *)(v12 + 840) << 8));
  v32 = (const float *)(v12 + 816);
  v33 = (const float *)(v12 + 832);
  v34 = (int32x4_t)vld1q_dup_f32(v33);
  v35 = *(_QWORD *)(v12 + 784);
  v36 = (const float *)(v12 + 820);
  v37 = (int8x16_t)vld1q_dup_f32(v32);
  v38 = (const float *)(v12 + 824);
  v39 = (const float *)(v12 + 828);
  v40 = (int8x16_t)vld1q_dup_f32(v38);
  v41 = *(_QWORD *)(v12 + 792);
  v42 = (int8x16_t)vld1q_dup_f32(v36);
  v43 = (int8x16_t)vld1q_dup_f32(v39);
  v44 = v10 & 0xFFFFFFFC;
  do
  {
    v45 = *(int8x16_t *)(v35 + 16 * v13);
    v46 = *(int8x16_t *)(v41 + 16 * v13);
    v47 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v46, v42), vandq_s8(v45, v37)));
    v48 = vorrq_s8(vandq_s8(v46, v43), vandq_s8(v45, v40));
    v49 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v30 + 8 * v13));
    v50 = vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v34, v49), v47), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v48, vandq_s8(v31, (int8x16_t)v49))));
    if ((vmaxvq_u32((uint32x4_t)v50) & 0x80000000) != 0)
    {
      if ((_DWORD)v15)
      {
        v51 = 0;
        v52 = 0;
        v53 = 0;
        v55 = 0uLL;
        do
        {
          v56 = 0;
          v57.i64[0] = -1;
          v57.i64[1] = -1;
          v58 = v52;
          do
          {
            v59 = (float32x4_t *)&v63[(v53 + v56) + 145];
            v54 = v29 + 96 * v13;
            v57 = (int32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v59[3], vsubq_f32(*(float32x4_t *)v54, (float32x4_t)veorq_s8((int8x16_t)v63[v58 + 1], *(int8x16_t *)(v54 + 48))), *v59), vsubq_f32(*(float32x4_t *)(v54 + 16), (float32x4_t)veorq_s8((int8x16_t)v63[v58 + 2], *(int8x16_t *)(v54 + 64))), v59[1]), vsubq_f32(*(float32x4_t *)(v54 + 32), (float32x4_t)veorq_s8((int8x16_t)v63[v58 + 3], *(int8x16_t *)(v54 + 80))), v59[2]));
            v58 += 3;
            v56 += 4;
          }
          while (v56 != 24);
          v52 += 18;
          v55 = (int32x4_t)vorrq_s8(vandq_s8(vandq_s8(xmmword_1B22687C0[v51++], v50), (int8x16_t)vcltzq_s32(v57)), (int8x16_t)v55);
          v53 += 24;
        }
        while (v51 != v15);
      }
      else
      {
        v55 = 0uLL;
      }
      if ((vminvq_u32((uint32x4_t)vceqzq_s32(v55)) & 0x80000000) == 0 && 4 * (int)v13 < v8)
      {
        v60 = 0;
        v61 = v44;
        do
        {
          v63[0] = v55;
          v62 = *(_DWORD *)((unint64_t)v63 & 0xFFFFFFFFFFFFFFF3 | (4 * (v60 & 3)));
          if ((_BYTE)v62)
          {
            *(_BYTE *)(*(_QWORD *)(v12 + 872) + result) = v62;
            *(_QWORD *)(*(_QWORD *)(v12 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(v12 + 808)
                                                                                         + 8 * v61);
            result = (result + 1);
          }
          if (v60 > 2)
            break;
          ++v60;
          ++v61;
        }
        while (v61 < v8);
      }
    }
    ++v13;
    v44 += 4;
  }
  while (v13 != v14);
  return result;
}

uint64_t sub_1B19817F8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  BOOL v11;
  unint64_t v12;
  int v13;
  int v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  unint64_t v18;
  BOOL v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  _OWORD v26[6];

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  v6 = *(_DWORD *)(a1 + 832);
  v7 = a2;
  do
  {
    v8 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 776) + 2 * v7);
    v9 = v6 & v8;
    v10 = v5 & v8;
    if (v9)
      v11 = v10 == 0;
    else
      v11 = 0;
    if (v11)
    {
      v12 = *(unsigned int *)(*(_QWORD *)(a1 + 784) + 4 * v7) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 792) + 4 * v7) << 32);
      if ((v12 & *(_QWORD *)(a1 + 816)) != 0 && (*(_QWORD *)(a1 + 824) & v12) == 0)
      {
        v13 = 0;
        v14 = 0;
        v15 = (float32x4_t *)(*(_QWORD *)(a1 + 768) + 32 * v7);
        v16 = *v15;
        v17 = v15[1];
        do
        {
          v18 = 0;
          v19 = 0;
          v20 = *(_OWORD *)(a1 + 48);
          v26[2] = *(_OWORD *)(a1 + 32);
          v26[3] = v20;
          v21 = *(_OWORD *)(a1 + 80);
          v26[4] = *(_OWORD *)(a1 + 64);
          v26[5] = v21;
          v22 = *(_OWORD *)(a1 + 16);
          v26[0] = *(_OWORD *)a1;
          v26[1] = v22;
          do
          {
            v23 = (float32x4_t)v26[v18];
            v24 = (int8x16_t)vmulq_f32(v23, v16);
            v25 = vmulq_f32(vabsq_f32(v23), v17);
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))) > vaddq_f32(vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2)).f32[0])
              break;
            v19 = v18++ > 4;
          }
          while (v18 != 6);
          v14 |= (v19 << v13++);
        }
        while (v13 != 6);
        if (v14)
        {
          *(_BYTE *)(*(_QWORD *)(a1 + 872) + result) = v14;
          *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v7);
          result = (result + 1);
        }
      }
    }
    ++v7;
  }
  while (v7 != a3);
  return result;
}

uint64_t sub_1B198194C(int32x2_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int8x16_t v17;
  int32x2_t *v18;
  uint64_t i;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t result;
  int32x2_t v31;
  const float *v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x2_t v35;
  int8x16_t v36;
  const float *v37;
  const float *v38;
  const float *v39;
  int8x16_t v40;
  int32x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x2_t v44;
  int8x16_t *v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t *v49;
  int8x16_t v50;
  int8x16_t v51;
  uint16x8_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int32x4_t v55;
  int32x4_t v56;
  unsigned int v57;
  int v58;
  int v59;
  uint64_t v60;
  int v61;
  unsigned int v62;
  int8x16_t *v63;
  float32x4_t *v64;
  int8x16_t v65;
  unsigned __int32 v66;
  unsigned int v67;
  BOOL v68;
  int32x2_t v69;
  _OWORD v70[84];
  uint64_t v71;

  v8 = a3;
  v71 = *MEMORY[0x1E0C80C00];
  if ((a2 & 7) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 3;
  v12 = (v8 + 7) >> 3;
  v13 = a1[110].u32[0];
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    v18 = a1;
    do
    {
      for (i = 0; i != 12; i += 2)
      {
        v20 = *(int32x4_t *)v18[i].i8;
        v21 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        v22 = (int8x16_t *)&v70[2 * v15 + 36];
        *v22 = v21;
        v22[1] = v21;
        v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        v22[2] = v23;
        v22[3] = v23;
        v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        v25 = vdupq_laneq_s32(v20, 3);
        v22[4] = v24;
        v22[5] = v24;
        v22[6] = (int8x16_t)v25;
        v22[7] = (int8x16_t)v25;
        v26 = (int8x16_t *)&v70[2 * v16];
        v27 = vandq_s8(v21, v17);
        *v26 = v27;
        v26[1] = v27;
        v28 = vandq_s8(v23, v17);
        v26[2] = v28;
        v26[3] = v28;
        v29 = vandq_s8(v24, v17);
        v26[4] = v29;
        v26[5] = v29;
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 12;
    }
    while (v14 != v13);
  }
  if (v11 >= v12)
    return 0;
  result = 0;
  v31 = a1[97];
  v32 = (const float *)&a1[102];
  v33 = (int8x16_t)vdupq_n_s32(a1[104].i32[1] | (~a1[105].i32[0] << 8));
  v34 = (int8x16_t)vdupq_lane_s32(a1[104], 0);
  v35 = a1[98];
  v36 = (int8x16_t)vld1q_dup_f32(v32);
  v37 = (const float *)&a1[102] + 1;
  v38 = (const float *)&a1[103];
  v39 = (const float *)&a1[103] + 1;
  v40 = (int8x16_t)vld1q_dup_f32(v38);
  v41 = a1[99];
  v42 = (int8x16_t)vld1q_dup_f32(v37);
  v43 = (int8x16_t)vld1q_dup_f32(v39);
  v44 = a1[96];
  do
  {
    v45 = (int8x16_t *)(*(_QWORD *)&v35 + 32 * v11);
    v46 = *v45;
    v47 = v45[1];
    v48 = vandq_s8(*v45, v36);
    v49 = (int8x16_t *)(*(_QWORD *)&v41 + 32 * v11);
    v50 = v49[1];
    v51 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v49, v42), v48)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v50, v42), vandq_s8(v47, v36))));
    v52 = *(uint16x8_t *)(*(_QWORD *)&v31 + 16 * v11);
    v53 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v52.i8);
    v54 = (int8x16_t)vmovl_high_u16(v52);
    *(int8x8_t *)v47.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v34, v53)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v34, v54)))), v51), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v49, v43), vandq_s8(v46, v40)), vandq_s8(v33, v53))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v50, v43), vandq_s8(v47, v40)), vandq_s8(v33, v54))))));
    v55 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v33.i8)), 0x1FuLL));
    v56 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v47.i8, *(int8x8_t *)v33.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)v56, (int8x16_t)v55)) & 0x80000000) != 0)
    {
      if ((_DWORD)v13)
      {
        v57 = 0;
        v58 = 0;
        v59 = 0;
        v60 = *(_QWORD *)&v44 + 192 * v11;
        do
        {
          v61 = 0;
          v62 = v57;
          do
          {
            v63 = (int8x16_t *)&v70[2 * v62];
            v64 = (float32x4_t *)&v70[2 * (v58 + v61) + 36];
            v55 = (int32x4_t)vandq_s8((int8x16_t)v55, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v64[7], vsubq_f32(*(float32x4_t *)(v60 + 16), (float32x4_t)veorq_s8(v63[1], *(int8x16_t *)(v60 + 112))), v64[1]), vsubq_f32(*(float32x4_t *)(v60 + 48), (float32x4_t)veorq_s8(v63[3], *(int8x16_t *)(v60 + 144))), v64[3]), vsubq_f32(*(float32x4_t *)(v60 + 80), (float32x4_t)veorq_s8(v63[5], *(int8x16_t *)(v60 + 176))), v64[5]));
            v56 = (int32x4_t)vandq_s8((int8x16_t)v56, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v64[6], vsubq_f32(*(float32x4_t *)v60, (float32x4_t)veorq_s8(*v63, *(int8x16_t *)(v60 + 96))), *v64), vsubq_f32(*(float32x4_t *)(v60 + 32), (float32x4_t)veorq_s8(v63[2], *(int8x16_t *)(v60 + 128))), v64[2]), vsubq_f32(*(float32x4_t *)(v60 + 64), (float32x4_t)veorq_s8(v63[4], *(int8x16_t *)(v60 + 160))), v64[4]));
            v62 += 3;
            v61 += 4;
          }
          while (v61 != 24);
          v57 += 18;
          ++v59;
          v58 += 24;
        }
        while (v59 != (_DWORD)v13);
      }
      v65 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(v56), (int8x16_t)xmmword_1B2245E50), vandq_s8((int8x16_t)vcltzq_s32(v55), (int8x16_t)xmmword_1B2268600));
      *(int8x8_t *)v65.i8 = vorr_s8(*(int8x8_t *)v65.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v65, v65, 8uLL));
      v66 = vadd_s32(*(int32x2_t *)v65.i8, vdup_lane_s32(*(int32x2_t *)v65.i8, 1)).u32[0];
      v67 = 8 * v11;
      if (v66)
        v68 = v67 >= v8;
      else
        v68 = 1;
      if (!v68)
      {
        v69 = a1[108];
        do
        {
          if ((v66 & 1) != 0)
          {
            *(_DWORD *)(*(_QWORD *)&v69 + 4 * result) = v67;
            result = (result + 1);
          }
          if (v66 < 2)
            break;
          ++v67;
          v66 >>= 1;
        }
        while (v67 < v8);
      }
    }
    ++v11;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B1981D1C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t i;
  int32x4_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  const float *v29;
  int8x16_t v30;
  const float *v31;
  int32x4_t v32;
  uint64_t v33;
  const float *v34;
  int8x16_t v35;
  const float *v36;
  const float *v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  uint64_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int32x4_t v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  int v52;
  unsigned int v53;
  float32x4_t *v54;
  int8x16_t v55;
  unsigned __int32 v56;
  unsigned int v57;
  BOOL v58;
  uint64_t v59;
  _OWORD v60[42];
  uint64_t v61;

  v8 = a3;
  v61 = *MEMORY[0x1E0C80C00];
  if ((a2 & 3) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 2;
  v12 = (v8 + 3) >> 2;
  v13 = *(unsigned int *)(a1 + 880);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    v18 = a1;
    do
    {
      for (i = 0; i != 96; i += 16)
      {
        v20 = *(int32x4_t *)(v18 + i);
        v21 = (int8x16_t *)&v60[v15 + 18];
        v22 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        *v21 = v22;
        v21[1] = v23;
        v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        v21[2] = v24;
        v21[3] = (int8x16_t)vdupq_laneq_s32(v20, 3);
        v25 = (int8x16_t *)&v60[v16];
        *v25 = vandq_s8(v22, v17);
        v25[1] = vandq_s8(v23, v17);
        v25[2] = vandq_s8(v24, v17);
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 96;
    }
    while (v14 != v13);
  }
  if (v11 >= v12)
    return 0;
  result = 0;
  v27 = *(_QWORD *)(a1 + 768);
  v28 = *(_QWORD *)(a1 + 776);
  v29 = (const float *)(a1 + 816);
  v30 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v31 = (const float *)(a1 + 832);
  v32 = (int32x4_t)vld1q_dup_f32(v31);
  v33 = *(_QWORD *)(a1 + 784);
  v34 = (const float *)(a1 + 820);
  v35 = (int8x16_t)vld1q_dup_f32(v29);
  v36 = (const float *)(a1 + 824);
  v37 = (const float *)(a1 + 828);
  v38 = (int8x16_t)vld1q_dup_f32(v36);
  v39 = (int8x16_t)vld1q_dup_f32(v34);
  v40 = (int8x16_t)vld1q_dup_f32(v37);
  v41 = *(_QWORD *)(a1 + 792);
  do
  {
    v42 = *(int8x16_t *)(v33 + 16 * v11);
    v43 = *(int8x16_t *)(v41 + 16 * v11);
    v44 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v43, v39), vandq_s8(v42, v35)));
    v45 = vorrq_s8(vandq_s8(v43, v40), vandq_s8(v42, v38));
    v46 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v28 + 8 * v11));
    v47 = (int32x4_t)vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v32, v46), v44), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v45, vandq_s8(v30, (int8x16_t)v46))));
    if ((vmaxvq_u32((uint32x4_t)v47) & 0x80000000) != 0)
    {
      if ((_DWORD)v13)
      {
        v48 = 0;
        v49 = 0;
        v50 = 0;
        do
        {
          v52 = 0;
          v53 = v48;
          do
          {
            v54 = (float32x4_t *)&v60[(v49 + v52) + 18];
            v51 = v27 + 96 * v11;
            v47 = (int32x4_t)vandq_s8((int8x16_t)v47, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v54[3], vsubq_f32(*(float32x4_t *)v51, (float32x4_t)veorq_s8((int8x16_t)v60[v53], *(int8x16_t *)(v51 + 48))), *v54), vsubq_f32(*(float32x4_t *)(v51 + 16), (float32x4_t)veorq_s8((int8x16_t)v60[v53 + 1], *(int8x16_t *)(v51 + 64))), v54[1]), vsubq_f32(*(float32x4_t *)(v51 + 32), (float32x4_t)veorq_s8((int8x16_t)v60[v53 + 2], *(int8x16_t *)(v51 + 80))), v54[2]));
            v53 += 3;
            v52 += 4;
          }
          while (v52 != 24);
          v48 += 18;
          ++v50;
          v49 += 24;
        }
        while (v50 != (_DWORD)v13);
      }
      v55 = vandq_s8((int8x16_t)vcltzq_s32(v47), (int8x16_t)xmmword_1B2245E50);
      *(int8x8_t *)v55.i8 = vorr_s8(*(int8x8_t *)v55.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL));
      v56 = vadd_s32(*(int32x2_t *)v55.i8, vdup_lane_s32(*(int32x2_t *)v55.i8, 1)).u32[0];
      v57 = 4 * v11;
      if (v56)
        v58 = v57 >= v8;
      else
        v58 = 1;
      if (!v58)
      {
        v59 = *(_QWORD *)(a1 + 864);
        do
        {
          if ((v56 & 1) != 0)
          {
            *(_DWORD *)(v59 + 4 * result) = v57;
            result = (result + 1);
          }
          if (v56 < 2)
            break;
          ++v57;
          v56 >>= 1;
        }
        while (v57 < v8);
      }
    }
    ++v11;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B1981FE8(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t *v23;
  float32x4_t v24;
  int8x16_t v25;
  float32x4_t v26;
  _OWORD v27[6];

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  v6 = *(_DWORD *)(a1 + 832);
  v7 = *(_QWORD *)(a1 + 816);
  v8 = *(_QWORD *)(a1 + 824);
  v9 = *(_QWORD *)(a1 + 864);
  v10 = a2;
  do
  {
    v11 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 776) + 2 * v10);
    v12 = v6 & v11;
    v13 = v5 & v11;
    if (v12)
      v14 = v13 == 0;
    else
      v14 = 0;
    if (v14)
    {
      v15 = *(unsigned int *)(*(_QWORD *)(a1 + 784) + 4 * v10) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 792) + 4 * v10) << 32);
      v16 = v15 & v7;
      v17 = v8 & v15;
      if (v16 && v17 == 0)
      {
        v19 = 0;
        v20 = *(_OWORD *)(a1 + 48);
        v27[2] = *(_OWORD *)(a1 + 32);
        v27[3] = v20;
        v21 = *(_OWORD *)(a1 + 80);
        v27[4] = *(_OWORD *)(a1 + 64);
        v27[5] = v21;
        v22 = *(_OWORD *)(a1 + 16);
        v27[0] = *(_OWORD *)a1;
        v27[1] = v22;
        v23 = (float32x4_t *)(*(_QWORD *)(a1 + 768) + 32 * v10);
        while (1)
        {
          v24 = (float32x4_t)v27[v19];
          v25 = (int8x16_t)vmulq_f32(v24, *v23);
          v26 = vmulq_f32(vabsq_f32(v24), v23[1]);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v25.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL))) > vaddq_f32(vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2)).f32[0])
            break;
          if (++v19 == 6)
          {
            *(_DWORD *)(v9 + 4 * result) = v10;
            result = (result + 1);
            break;
          }
        }
      }
    }
    ++v10;
  }
  while (v10 != a3);
  return result;
}

uint64_t sub_1B19820F8(int32x2_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  int8x16_t v17;
  int32x2_t *v18;
  uint64_t i;
  int32x4_t v20;
  int8x16_t v21;
  int8x16_t *v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int8x16_t *v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  uint64_t result;
  int32x2_t v31;
  int8x16_t v32;
  int8x16_t v33;
  const float *v34;
  int32x2_t v35;
  const float *v36;
  int8x16_t v37;
  const float *v38;
  const float *v39;
  int8x16_t v40;
  int32x2_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int32x2_t v44;
  unsigned int v45;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t *v50;
  int8x16_t v51;
  int8x16_t v52;
  uint16x8_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int32x4_t v56;
  int32x4_t v57;
  unsigned int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  int8x16_t *v64;
  float32x4_t *v65;
  int8x16_t v66;
  unsigned __int32 v67;
  BOOL v68;
  unint64_t v69;
  _OWORD v70[84];
  uint64_t v71;

  v8 = a3;
  v71 = *MEMORY[0x1E0C80C00];
  if ((a2 & 7) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 3;
  v12 = (v8 + 7) >> 3;
  v13 = a1[110].u32[0];
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    v18 = a1;
    do
    {
      for (i = 0; i != 12; i += 2)
      {
        v20 = *(int32x4_t *)v18[i].i8;
        v21 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        v22 = (int8x16_t *)&v70[2 * v15 + 36];
        *v22 = v21;
        v22[1] = v21;
        v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        v22[2] = v23;
        v22[3] = v23;
        v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        v25 = vdupq_laneq_s32(v20, 3);
        v22[4] = v24;
        v22[5] = v24;
        v22[6] = (int8x16_t)v25;
        v22[7] = (int8x16_t)v25;
        v26 = (int8x16_t *)&v70[2 * v16];
        v27 = vandq_s8(v21, v17);
        *v26 = v27;
        v26[1] = v27;
        v28 = vandq_s8(v23, v17);
        v26[2] = v28;
        v26[3] = v28;
        v29 = vandq_s8(v24, v17);
        v26[4] = v29;
        v26[5] = v29;
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 12;
    }
    while (v14 != v13);
  }
  if (v11 >= v12)
    return 0;
  result = 0;
  v31 = a1[97];
  v32 = (int8x16_t)vdupq_n_s32(a1[104].i32[1] | (~a1[105].i32[0] << 8));
  v33 = (int8x16_t)vdupq_lane_s32(a1[104], 0);
  v34 = (const float *)&a1[102];
  v35 = a1[98];
  v36 = (const float *)&a1[102] + 1;
  v37 = (int8x16_t)vld1q_dup_f32(v34);
  v38 = (const float *)&a1[103];
  v39 = (const float *)&a1[103] + 1;
  v40 = (int8x16_t)vld1q_dup_f32(v38);
  v41 = a1[99];
  v42 = (int8x16_t)vld1q_dup_f32(v36);
  v43 = (int8x16_t)vld1q_dup_f32(v39);
  v44 = a1[96];
  v45 = a2 & 0xFFFFFFF8;
  do
  {
    v46 = (int8x16_t *)(*(_QWORD *)&v35 + 32 * v11);
    v47 = *v46;
    v48 = v46[1];
    v49 = vandq_s8(*v46, v37);
    v50 = (int8x16_t *)(*(_QWORD *)&v41 + 32 * v11);
    v51 = v50[1];
    v52 = (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(*v50, v42), v49)), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v51, v42), vandq_s8(v48, v37))));
    v53 = *(uint16x8_t *)(*(_QWORD *)&v31 + 16 * v11);
    v54 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v53.i8);
    v55 = (int8x16_t)vmovl_high_u16(v53);
    *(int8x8_t *)v48.i8 = vmovn_s16((int16x8_t)vandq_s8(vbicq_s8(vmvnq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v33, v54)), (int16x8_t)vceqzq_s32((int32x4_t)vandq_s8(v33, v55)))), v52), (int8x16_t)vuzp1q_s16((int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(*v50, v43), vandq_s8(v47, v40)), vandq_s8(v32, v54))), (int16x8_t)vceqzq_s32((int32x4_t)vorrq_s8(vorrq_s8(vandq_s8(v51, v43), vandq_s8(v48, v40)), vandq_s8(v32, v55))))));
    v56 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)v32.i8)), 0x1FuLL));
    v57 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v48.i8, *(int8x8_t *)v32.i8)), 0x1FuLL));
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8((int8x16_t)v57, (int8x16_t)v56)) & 0x80000000) != 0)
    {
      if ((_DWORD)v13)
      {
        v58 = 0;
        v59 = 0;
        v60 = 0;
        v61 = *(_QWORD *)&v44 + 192 * v11;
        do
        {
          v62 = 0;
          v63 = v58;
          do
          {
            v64 = (int8x16_t *)&v70[2 * v63];
            v65 = (float32x4_t *)&v70[2 * (v59 + v62) + 36];
            v56 = (int32x4_t)vandq_s8((int8x16_t)v56, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v65[7], vsubq_f32(*(float32x4_t *)(v61 + 16), (float32x4_t)veorq_s8(v64[1], *(int8x16_t *)(v61 + 112))), v65[1]), vsubq_f32(*(float32x4_t *)(v61 + 48), (float32x4_t)veorq_s8(v64[3], *(int8x16_t *)(v61 + 144))), v65[3]), vsubq_f32(*(float32x4_t *)(v61 + 80), (float32x4_t)veorq_s8(v64[5], *(int8x16_t *)(v61 + 176))), v65[5]));
            v57 = (int32x4_t)vandq_s8((int8x16_t)v57, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v65[6], vsubq_f32(*(float32x4_t *)v61, (float32x4_t)veorq_s8(*v64, *(int8x16_t *)(v61 + 96))), *v65), vsubq_f32(*(float32x4_t *)(v61 + 32), (float32x4_t)veorq_s8(v64[2], *(int8x16_t *)(v61 + 128))), v65[2]), vsubq_f32(*(float32x4_t *)(v61 + 64), (float32x4_t)veorq_s8(v64[4], *(int8x16_t *)(v61 + 160))), v65[4]));
            v63 += 3;
            v62 += 4;
          }
          while (v62 != 24);
          v58 += 18;
          ++v60;
          v59 += 24;
        }
        while (v60 != (_DWORD)v13);
      }
      v66 = vorrq_s8(vandq_s8((int8x16_t)vcltzq_s32(v57), (int8x16_t)xmmword_1B2245E50), vandq_s8((int8x16_t)vcltzq_s32(v56), (int8x16_t)xmmword_1B2268600));
      *(int8x8_t *)v66.i8 = vorr_s8(*(int8x8_t *)v66.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL));
      v67 = vadd_s32(*(int32x2_t *)v66.i8, vdup_lane_s32(*(int32x2_t *)v66.i8, 1)).u32[0];
      if (v67)
        v68 = 8 * (int)v11 >= v8;
      else
        v68 = 1;
      v69 = v45;
      if (!v68)
      {
        do
        {
          if ((v67 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)&a1[107] + 8 * result) = *(_QWORD *)(*(_QWORD *)&a1[101] + 8 * v69);
            result = (result + 1);
          }
          if (v67 < 2)
            break;
          ++v69;
          v67 >>= 1;
        }
        while (v69 < v8);
      }
    }
    ++v11;
    v45 += 8;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B19824EC(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int8x16_t v17;
  uint64_t v18;
  uint64_t i;
  int32x4_t v20;
  int8x16_t *v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  const float *v30;
  const float *v31;
  int32x4_t v32;
  uint64_t v33;
  const float *v34;
  int8x16_t v35;
  const float *v36;
  const float *v37;
  int8x16_t v38;
  uint64_t v39;
  int8x16_t v40;
  int8x16_t v41;
  unsigned int v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int32x4_t v47;
  int32x4_t v48;
  unsigned int v49;
  int v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  float32x4_t *v55;
  int8x16_t v56;
  unsigned __int32 v57;
  BOOL v58;
  unint64_t v59;
  _OWORD v60[42];
  uint64_t v61;

  v8 = a3;
  v61 = *MEMORY[0x1E0C80C00];
  if ((a2 & 3) != 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"(start & kSOALaneMask) == 0");
  v11 = a2 >> 2;
  v12 = (v8 + 3) >> 2;
  v13 = *(unsigned int *)(a1 + 880);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17.i64[0] = 0x8000000080000000;
    v17.i64[1] = 0x8000000080000000;
    v18 = a1;
    do
    {
      for (i = 0; i != 96; i += 16)
      {
        v20 = *(int32x4_t *)(v18 + i);
        v21 = (int8x16_t *)&v60[v15 + 18];
        v22 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 0);
        v23 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v20.i8, 1);
        *v21 = v22;
        v21[1] = v23;
        v24 = (int8x16_t)vdupq_laneq_s32(v20, 2);
        v21[2] = v24;
        v21[3] = (int8x16_t)vdupq_laneq_s32(v20, 3);
        v25 = (int8x16_t *)&v60[v16];
        *v25 = vandq_s8(v22, v17);
        v25[1] = vandq_s8(v23, v17);
        v25[2] = vandq_s8(v24, v17);
        v15 += 4;
        v16 += 3;
      }
      ++v14;
      v18 += 96;
    }
    while (v14 != v13);
  }
  if (v11 >= v12)
    return 0;
  result = 0;
  v27 = *(_QWORD *)(a1 + 768);
  v28 = *(_QWORD *)(a1 + 776);
  v29 = (int8x16_t)vdupq_n_s32(*(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8));
  v30 = (const float *)(a1 + 816);
  v31 = (const float *)(a1 + 832);
  v32 = (int32x4_t)vld1q_dup_f32(v31);
  v33 = *(_QWORD *)(a1 + 784);
  v34 = (const float *)(a1 + 820);
  v35 = (int8x16_t)vld1q_dup_f32(v30);
  v36 = (const float *)(a1 + 824);
  v37 = (const float *)(a1 + 828);
  v38 = (int8x16_t)vld1q_dup_f32(v36);
  v39 = *(_QWORD *)(a1 + 792);
  v40 = (int8x16_t)vld1q_dup_f32(v34);
  v41 = (int8x16_t)vld1q_dup_f32(v37);
  v42 = a2 & 0xFFFFFFFC;
  do
  {
    v43 = *(int8x16_t *)(v33 + 16 * v11);
    v44 = *(int8x16_t *)(v39 + 16 * v11);
    v45 = (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(vandq_s8(v44, v40), vandq_s8(v43, v35)));
    v46 = vorrq_s8(vandq_s8(v44, v41), vandq_s8(v43, v38));
    v47 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(v28 + 8 * v11));
    v48 = (int32x4_t)vandq_s8(vbicq_s8((int8x16_t)vtstq_s32(v32, v47), v45), (int8x16_t)vceqzq_s32((int32x4_t)vorrq_s8(v46, vandq_s8(v29, (int8x16_t)v47))));
    if ((vmaxvq_u32((uint32x4_t)v48) & 0x80000000) != 0)
    {
      if ((_DWORD)v13)
      {
        v49 = 0;
        v50 = 0;
        v51 = 0;
        do
        {
          v53 = 0;
          v54 = v49;
          do
          {
            v55 = (float32x4_t *)&v60[(v50 + v53) + 18];
            v52 = v27 + 96 * v11;
            v48 = (int32x4_t)vandq_s8((int8x16_t)v48, (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(v55[3], vsubq_f32(*(float32x4_t *)v52, (float32x4_t)veorq_s8((int8x16_t)v60[v54], *(int8x16_t *)(v52 + 48))), *v55), vsubq_f32(*(float32x4_t *)(v52 + 16), (float32x4_t)veorq_s8((int8x16_t)v60[v54 + 1], *(int8x16_t *)(v52 + 64))), v55[1]), vsubq_f32(*(float32x4_t *)(v52 + 32), (float32x4_t)veorq_s8((int8x16_t)v60[v54 + 2], *(int8x16_t *)(v52 + 80))), v55[2]));
            v54 += 3;
            v53 += 4;
          }
          while (v53 != 24);
          v49 += 18;
          ++v51;
          v50 += 24;
        }
        while (v51 != (_DWORD)v13);
      }
      v56 = vandq_s8((int8x16_t)vcltzq_s32(v48), (int8x16_t)xmmword_1B2245E50);
      *(int8x8_t *)v56.i8 = vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL));
      v57 = vadd_s32(*(int32x2_t *)v56.i8, vdup_lane_s32(*(int32x2_t *)v56.i8, 1)).u32[0];
      if (v57)
        v58 = 4 * (int)v11 >= v8;
      else
        v58 = 1;
      v59 = v42;
      if (!v58)
      {
        do
        {
          if ((v57 & 1) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v59);
            result = (result + 1);
          }
          if (v57 < 2)
            break;
          ++v59;
          v57 >>= 1;
        }
        while (v59 < v8);
      }
    }
    ++v11;
    v42 += 4;
  }
  while (v11 != v12);
  return result;
}

uint64_t sub_1B19827DC(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t result;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  BOOL v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float32x4_t *v22;
  float32x4_t v23;
  int8x16_t v24;
  float32x4_t v25;
  _OWORD v26[6];

  if (a2 >= a3)
    return 0;
  result = 0;
  v5 = *(_DWORD *)(a1 + 836) | (~*(_DWORD *)(a1 + 840) << 8);
  v6 = *(_DWORD *)(a1 + 832);
  v7 = *(_QWORD *)(a1 + 816);
  v8 = *(_QWORD *)(a1 + 824);
  v9 = a2;
  do
  {
    v10 = *(unsigned __int16 *)(*(_QWORD *)(a1 + 776) + 2 * v9);
    v11 = v6 & v10;
    v12 = v5 & v10;
    if (v11)
      v13 = v12 == 0;
    else
      v13 = 0;
    if (v13)
    {
      v14 = *(unsigned int *)(*(_QWORD *)(a1 + 784) + 4 * v9) | ((unint64_t)*(unsigned int *)(*(_QWORD *)(a1 + 792) + 4 * v9) << 32);
      v15 = v14 & v7;
      v16 = v8 & v14;
      if (v15 && v16 == 0)
      {
        v18 = 0;
        v19 = *(_OWORD *)(a1 + 48);
        v26[2] = *(_OWORD *)(a1 + 32);
        v26[3] = v19;
        v20 = *(_OWORD *)(a1 + 80);
        v26[4] = *(_OWORD *)(a1 + 64);
        v26[5] = v20;
        v21 = *(_OWORD *)(a1 + 16);
        v26[0] = *(_OWORD *)a1;
        v26[1] = v21;
        v22 = (float32x4_t *)(*(_QWORD *)(a1 + 768) + 32 * v9);
        while (1)
        {
          v23 = (float32x4_t)v26[v18];
          v24 = (int8x16_t)vmulq_f32(v23, *v22);
          v25 = vmulq_f32(vabsq_f32(v23), v22[1]);
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v24, v24, 8uLL))) > vaddq_f32(vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1)), (float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2)).f32[0])
            break;
          if (++v18 == 6)
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 856) + 8 * result) = *(_QWORD *)(*(_QWORD *)(a1 + 808) + 8 * v9);
            result = (result + 1);
            break;
          }
        }
      }
    }
    ++v9;
  }
  while (v9 != a3);
  return result;
}

uint64_t sub_1B19828F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int16 v24;
  unint64_t v25;
  char v26;
  __int128 v27;
  char v28;
  char v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v20 = a2;
  *((_QWORD *)&v20 + 1) = a3;
  v6 = atomic_load((unsigned __int8 *)&qword_1EEF66C10);
  if ((v6 & 1) == 0)
  {
    v18 = a3;
    v15 = a2;
    v16 = __cxa_guard_acquire(&qword_1EEF66C10);
    a2 = v15;
    a3 = v18;
    if (v16)
    {
      byte_1EEF66C08 = 1;
      __cxa_guard_release(&qword_1EEF66C10);
      a2 = v15;
      a3 = v18;
    }
  }
  if (byte_1EEF66C08)
    v7 = 0x82816288C4F8725ALL;
  else
    v7 = 0;
  sub_1B182AAEC(a1, a2, a3, a4, v7, 0);
  *(_QWORD *)a1 = &off_1E63CED20;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)&v21 = *(_QWORD *)(a1 + 368);
  LOBYTE(v25) = 0;
  v26 = 0;
  v23 = 0;
  v22 = 0uLL;
  v27 = xmmword_1B2245710;
  v28 = *(_BYTE *)(a1 + 376);
  v29 = 2;
  v30 = 8;
  v31 = 4;
  v32 = 1;
  *(_QWORD *)(a1 + 384) = sub_1B17CA2A0(v20, *((uint64_t *)&v20 + 1), (uint64_t *)&v20, (uint64_t *)&v21, &v22);
  v8 = v20;
  v9 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)&v22 = 0;
  WORD4(v22) = 256;
  BYTE10(v22) = *(_BYTE *)(a1 + 377);
  v23 = 0;
  v24 = 0;
  v10 = atomic_load((unsigned __int8 *)&qword_1EEF66C10);
  if ((v10 & 1) == 0)
  {
    v19 = v20;
    v17 = __cxa_guard_acquire(&qword_1EEF66C10);
    v8 = v19;
    if (v17)
    {
      byte_1EEF66C08 = 1;
      __cxa_guard_release(&qword_1EEF66C10);
      v8 = v19;
    }
  }
  if (byte_1EEF66C08)
    v11 = 0x82816288C4F8725ALL;
  else
    v11 = 0;
  v25 = v11;
  v21 = v8;
  v12 = sub_1B179C1C0(&v21, 0x40u, 8u);
  sub_1B182CDF0(v12, v9, (uint64_t)&v22, *(_QWORD *)(a1 + 384));
  *(_QWORD *)(a1 + 392) = v13;
  return a1;
}

void sub_1B1982AF0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B1982B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = sub_1B1815BE8(*(_QWORD *)(a1 + 368), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Manipulator", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm", 45, v6 | 0x300000000);
  sub_1B19610E0(*(__n128 **)(a1 + 384), v7, v8, v9);
  sub_1B196142C(*(_QWORD *)(a1 + 384), v10, v11, v12, v13, v14, v15, v16);
  sub_1B1961820(*(_QWORD *)(a1 + 384));
  sub_1B1961A30(*(uint64_t **)(a1 + 384), *(const char **)a2, *(_QWORD *)(a2 + 8), v17);
  prof_endFlame();
}

void sub_1B1982B74(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B1982B84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1B1815BE8(*(_QWORD *)(a1 + 368), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Manipulator", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm", 55, v6 | 0x300000000);
  sub_1B182CE18(*(_QWORD *)(a1 + 392), a2, v7, v8);
  prof_endFlame();
}

void sub_1B1982BD8(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B1982BE8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;

  v7 = sub_1B1815BE8(*(_QWORD *)(a1 + 368), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Manipulator", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/ManipulatorPass.mm", 60, v7 | 0x300000000);
  sub_1B182D4E8(*(_QWORD *)(a1 + 392), a2, a3, 0);
  prof_endFlame();
}

void sub_1B1982C50(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B1982C60(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  CFX::RG::Resource *v12;
  _OWORD v14[10];

  v6 = sub_1B1982D1C(a1, (uint64_t *)a2);
  CFX::RG::Pass::renderTo(v6, a3, 0x100000001, 0);
  v7 = *(_OWORD *)(a2 + 136);
  v14[6] = *(_OWORD *)(a2 + 120);
  v14[7] = v7;
  v8 = *(_OWORD *)(a2 + 168);
  v14[8] = *(_OWORD *)(a2 + 152);
  v14[9] = v8;
  v9 = *(_OWORD *)(a2 + 72);
  v14[2] = *(_OWORD *)(a2 + 56);
  v14[3] = v9;
  v10 = *(_OWORD *)(a2 + 104);
  v14[4] = *(_OWORD *)(a2 + 88);
  v14[5] = v10;
  v11 = *(_OWORD *)(a2 + 40);
  v14[0] = *(_OWORD *)(a2 + 24);
  v14[1] = v11;
  v12 = sub_1B17A34D0(a1, (uint64_t)"MANIPULATOR_DEPTH", v14);
  CFX::RG::Pass::renderTo(v6, (uint64_t)v12, 0x200000002, -1);
  *(_QWORD *)(v6 + 400) = v12;
  return v6;
}

uint64_t sub_1B1982D1C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v6[2];

  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[0] = sub_1B1982D94(v6[0], v4, v6, a2);
  sub_1B179C734(a1 + 18, v6);
  return v6[0];
}

void sub_1B1982D70(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B1982D94(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v6 = sub_1B179C1C0(v8, 0x198u, 8u);
  return sub_1B19828F4(v6, *a3, a3[1], a4);
}

_QWORD *sub_1B19830A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  result = (_QWORD *)objc_msgSend___CFObject(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4);
  if (result)
  {
    v11 = sub_1B18F4794(result, 0, v5, v6, v7, v8, v9, v10);
    return (_QWORD *)MEMORY[0x1E0DE7D20](v11, sel_killParticles, v12, v13);
  }
  return result;
}

_QWORD *sub_1B198314C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;

  result = (_QWORD *)objc_msgSend___CFObject(*(void **)(*(_QWORD *)(a1 + 32) + 8), a2, a3, a4);
  if (result)
  {
    v11 = (void *)sub_1B18F4794(result, 0, v5, v6, v7, v8, v9, v10);
    return (_QWORD *)objc_msgSend_restart(v11, v12, v13, v14);
  }
  return result;
}

uint64_t sub_1B19852FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  float32x4_t v39;

  if ((sub_1B1868D5C(a2, a2, a3, a4, a5, a6, a7, a8) & 1) != 0)
    return 1;
  if (!sub_1B18695D0(a2, v10, v11, v12, v13, v14, v15, v16))
  {
    v39 = 0uLL;
    v25 = (const void *)sub_1B1868FA0(a2, v18, v19, v20, v21, v22, v23, v24);
    if (v25)
    {
      if (sub_1B17C5D30(v25, 0, (uint64_t)&v39, v26, v27, v28, v29, v30))
      {
        v38 = (float32x4_t *)sub_1B1869AC8(a2, v31, v32, v33, v34, v35, v36, v37);
        sub_1B17D4478(&v39, v38, &v39);
        sub_1B17D43E4(*(float32x4_t **)(a1 + 32), *(float32x4_t **)(a1 + 32), &v39);
      }
    }
  }
  return 0;
}

uint64_t sub_1B1987084(void *a1, void *a2, __CFDictionary *a3, uint64_t a4)
{
  unsigned __int8 v4;
  const void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  double v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  double v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  const char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  double v125;
  const char *v126;
  uint64_t v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  const char *v133;
  uint64_t v134;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _BYTE v140[128];
  uint64_t v141;

  v4 = a4;
  v141 = *MEMORY[0x1E0C80C00];
  v8 = (const void *)objc_msgSend_rootNode(a2, (const char *)a2, (uint64_t)a3, a4);
  v12 = (const void *)objc_msgSend_rootNode(a1, v9, v10, v11);
  CFDictionarySetValue(a3, v8, v12);
  v16 = (void *)objc_msgSend_background(a1, v13, v14, v15);
  v20 = (void *)objc_msgSend_background(a2, v17, v18, v19);
  sub_1B19886BC(v16, v20, v21, v22);
  v26 = (void *)objc_msgSend_lightingEnvironment(a1, v23, v24, v25);
  v30 = (void *)objc_msgSend_lightingEnvironment(a2, v27, v28, v29);
  sub_1B19886BC(v26, v30, v31, v32);
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v36 = (void *)objc_msgSend_rootNode(a2, v33, v34, v35, 0);
  v40 = (void *)objc_msgSend_childNodes(v36, v37, v38, v39);
  v42 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v41, (uint64_t)&v136, (uint64_t)v140, 16);
  if (v42)
  {
    v46 = v42;
    v47 = *(_QWORD *)v137;
    do
    {
      v48 = 0;
      do
      {
        if (*(_QWORD *)v137 != v47)
          objc_enumerationMutation(v40);
        v49 = sub_1B19874F0(*(void **)(*((_QWORD *)&v136 + 1) + 8 * v48), a3, v4);
        v53 = (void *)objc_msgSend_rootNode(a1, v50, v51, v52);
        objc_msgSend_addChildNode_(v53, v54, (uint64_t)v49, v55);
        ++v48;
      }
      while (v46 != v48);
      v46 = objc_msgSend_countByEnumeratingWithState_objects_count_(v40, v56, (uint64_t)&v136, (uint64_t)v140, 16);
    }
    while (v46);
  }
  v57 = (void *)objc_msgSend_rootNode(a2, v43, v44, v45);
  sub_1B1988890(v57, a3);
  objc_msgSend_startTime(a2, v58, v59, v60);
  objc_msgSend_setStartTime_(a1, v61, v62, v63);
  objc_msgSend_endTime(a2, v64, v65, v66);
  objc_msgSend_setEndTime_(a1, v67, v68, v69);
  v73 = objc_msgSend_fogColor(a2, v70, v71, v72);
  objc_msgSend_setFogColor_(a1, v74, v73, v75);
  objc_msgSend_fogStartDistance(a2, v76, v77, v78);
  *(float *)&v79 = v79;
  objc_msgSend_setFogStartDistance_(a1, v80, v81, v82, v79);
  objc_msgSend_fogEndDistance(a2, v83, v84, v85);
  *(float *)&v86 = v86;
  objc_msgSend_setFogEndDistance_(a1, v87, v88, v89, v86);
  objc_msgSend_fogDensityExponent(a2, v90, v91, v92);
  *(float *)&v93 = v93;
  objc_msgSend_setFogDensityExponent_(a1, v94, v95, v96, v93);
  v100 = objc_msgSend_fogColor(a2, v97, v98, v99);
  objc_msgSend_setFogColor_(a1, v101, v100, v102);
  v106 = objc_msgSend_wantsScreenSpaceReflection(a2, v103, v104, v105);
  objc_msgSend_setWantsScreenSpaceReflection_(a1, v107, v106, v108);
  v112 = objc_msgSend_screenSpaceReflectionSampleCount(a2, v109, v110, v111);
  objc_msgSend_setScreenSpaceReflectionSampleCount_(a1, v113, v112, v114);
  objc_msgSend_screenSpaceReflectionMaximumDistance(a2, v115, v116, v117);
  *(float *)&v118 = v118;
  objc_msgSend_setScreenSpaceReflectionMaximumDistance_(a1, v119, v120, v121, v118);
  objc_msgSend_screenSpaceReflectionStride(a2, v122, v123, v124);
  *(float *)&v125 = v125;
  objc_msgSend_setScreenSpaceReflectionStride_(a1, v126, v127, v128, v125);
  v132 = objc_msgSend_screenSpaceReflectionSampleCount(a2, v129, v130, v131);
  return objc_msgSend_setScreenSpaceReflectionSampleCount_(a1, v133, v132, v134);
}

void *sub_1B19874F0(void *a1, const __CFDictionary *a2, unsigned __int8 a3)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *Value;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  const void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  double v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  unsigned int v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  double v102;
  const char *v103;
  uint64_t v104;
  uint64_t v105;
  double v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  const char *v114;
  uint64_t v115;
  const char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  const void *v128;
  const char *v129;
  double v130;
  uint64_t v131;
  uint64_t v132;
  double v133;
  const char *v134;
  uint64_t v135;
  uint64_t v136;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  const char *v149;
  uint64_t v150;
  uint64_t v151;
  double v152;
  const char *v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  const char *v160;
  uint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  double v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  const char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  const char *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  const char *v185;
  uint64_t v186;
  const char *v187;
  uint64_t v188;
  uint64_t v189;
  double v190;
  const char *v191;
  uint64_t v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  double v197;
  const char *v198;
  uint64_t v199;
  uint64_t v200;
  const char *v201;
  uint64_t v202;
  uint64_t v203;
  double v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  double v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  const char *v215;
  uint64_t v216;
  uint64_t v217;
  double v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  uint64_t v223;
  uint64_t v224;
  double v225;
  const char *v226;
  uint64_t v227;
  uint64_t v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  double v232;
  const char *v233;
  uint64_t v234;
  uint64_t v235;
  const char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  const char *v240;
  uint64_t v241;
  const char *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t updated;
  const char *v246;
  uint64_t v247;
  const char *v248;
  uint64_t v249;
  uint64_t v250;
  const char *v251;
  uint64_t v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  uint64_t v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  const char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  const char *v264;
  uint64_t v265;
  const char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  const char *v270;
  uint64_t v271;
  const char *v272;
  uint64_t v273;
  uint64_t v274;
  const char *v275;
  uint64_t v276;
  uint64_t v277;
  const char *v278;
  uint64_t v279;
  uint64_t v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  const char *v284;
  uint64_t v285;
  uint64_t v286;
  const char *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  const char *v291;
  uint64_t v292;
  const char *v293;
  uint64_t v294;
  uint64_t v295;
  const char *v296;
  uint64_t v297;
  uint64_t v298;
  const char *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  const char *v303;
  uint64_t v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  uint64_t v311;
  const char *v312;
  uint64_t v313;
  const char *v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  const char *v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  void *v322;
  const char *v323;
  uint64_t v324;
  void *v325;
  uint64_t v326;
  void *v327;
  const char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  const char *v332;
  uint64_t v333;
  const char *v334;
  uint64_t v335;
  uint64_t v336;
  const char *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  const char *v341;
  uint64_t v342;
  const char *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  const char *v347;
  uint64_t v348;
  uint64_t v349;
  void *v350;
  const char *v351;
  uint64_t v352;
  const char *v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  const char *v357;
  uint64_t v358;
  uint64_t v359;
  void *v360;
  const char *v361;
  uint64_t v362;
  const char *v363;
  uint64_t v364;
  uint64_t v365;
  double v366;
  float v367;
  const char *v368;
  uint64_t v369;
  uint64_t v370;
  void *v371;
  double v372;
  const char *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  const char *v377;
  uint64_t v378;
  const char *v379;
  uint64_t v380;
  uint64_t v381;
  double v382;
  const char *v383;
  uint64_t v384;
  uint64_t v385;
  const char *v386;
  uint64_t v387;
  uint64_t v388;
  double v389;
  const char *v390;
  uint64_t v391;
  uint64_t v392;
  const char *v393;
  uint64_t v394;
  uint64_t v395;
  double v396;
  const char *v397;
  uint64_t v398;
  uint64_t v399;
  const char *v400;
  uint64_t v401;
  uint64_t v402;
  const char *v403;
  uint64_t v404;
  const char *v405;
  uint64_t v406;
  uint64_t v407;
  uint64_t v408;
  const char *v409;
  uint64_t v410;
  const char *v411;
  uint64_t v412;
  uint64_t v413;
  const char *v414;
  uint64_t v415;
  const char *v416;
  uint64_t v417;
  uint64_t v418;
  double v419;
  const char *v420;
  uint64_t v421;
  uint64_t v422;
  const char *v423;
  uint64_t v424;
  uint64_t v425;
  double v426;
  const char *v427;
  uint64_t v428;
  uint64_t v429;
  const char *v430;
  uint64_t v431;
  uint64_t v432;
  double v433;
  const char *v434;
  uint64_t v435;
  uint64_t v436;
  const char *v437;
  uint64_t v438;
  uint64_t v439;
  uint64_t v440;
  const char *v441;
  uint64_t v442;
  const char *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  const char *v447;
  uint64_t v448;
  const char *v449;
  uint64_t v450;
  uint64_t v451;
  uint64_t v452;
  const char *v453;
  uint64_t v454;
  const char *v455;
  uint64_t v456;
  uint64_t v457;
  const char *v458;
  uint64_t v459;
  uint64_t v460;
  const char *v461;
  uint64_t v462;
  uint64_t v463;
  const char *v464;
  uint64_t v465;
  uint64_t v466;
  double v467;
  uint64_t v468;
  const char *v469;
  uint64_t v470;
  const char *v471;
  uint64_t v472;
  uint64_t v473;
  double v474;
  float v475;
  const char *v476;
  uint64_t v477;
  uint64_t v478;
  void *v479;
  double v480;
  const char *v481;
  uint64_t v482;
  uint64_t v483;
  const char *v484;
  uint64_t v485;
  uint64_t v486;
  double v487;
  uint64_t v488;
  const char *v489;
  uint64_t v490;
  const char *v491;
  uint64_t v492;
  uint64_t v493;
  double v494;
  float v495;
  const char *v496;
  uint64_t v497;
  uint64_t v498;
  void *v499;
  double v500;
  const char *v501;
  uint64_t v502;
  uint64_t v503;
  const char *v504;
  uint64_t v505;
  uint64_t v506;
  double v507;
  float v508;
  const char *v509;
  uint64_t v510;
  uint64_t v511;
  void *v512;
  double v513;
  const char *v514;
  uint64_t v515;
  uint64_t v516;
  const char *v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  const char *v521;
  uint64_t v522;
  uint64_t v523;
  void *v524;
  const char *v525;
  uint64_t v526;
  const char *v527;
  uint64_t v528;
  uint64_t v529;
  double v530;
  double v531;
  uint64_t v532;
  const char *v533;
  uint64_t v534;
  const char *v535;
  uint64_t v536;
  uint64_t v537;
  double v538;
  float v539;
  const char *v540;
  uint64_t v541;
  uint64_t v542;
  void *v543;
  double v544;
  const char *v545;
  uint64_t v546;
  uint64_t v547;
  const char *v548;
  uint64_t v549;
  uint64_t v550;
  double v551;
  double v552;
  uint64_t v553;
  const char *v554;
  uint64_t v555;
  const char *v556;
  uint64_t v557;
  uint64_t v558;
  double v559;
  float v560;
  const char *v561;
  uint64_t v562;
  uint64_t v563;
  void *v564;
  double v565;
  const char *v566;
  uint64_t v567;
  uint64_t v568;
  const char *v569;
  uint64_t v570;
  uint64_t v571;
  double v572;
  float v573;
  const char *v574;
  uint64_t v575;
  uint64_t v576;
  void *v577;
  double v578;
  const char *v579;
  uint64_t v580;
  uint64_t v581;
  const char *v582;
  uint64_t v583;
  uint64_t v584;
  double v585;
  double v586;
  uint64_t v587;
  const char *v588;
  uint64_t v589;
  const char *v590;
  uint64_t v591;
  uint64_t v592;
  double v593;
  float v594;
  const char *v595;
  uint64_t v596;
  uint64_t v597;
  void *v598;
  double v599;
  const char *v600;
  uint64_t v601;
  uint64_t v602;
  const char *v603;
  uint64_t v604;
  uint64_t v605;
  double v606;
  float v607;
  const char *v608;
  uint64_t v609;
  uint64_t v610;
  void *v611;
  double v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  const char *v616;
  uint64_t v617;
  uint64_t v618;
  double v619;
  float v620;
  const char *v621;
  uint64_t v622;
  uint64_t v623;
  void *v624;
  double v625;
  const char *v626;
  uint64_t v627;
  uint64_t v628;
  const char *v629;
  uint64_t v630;
  uint64_t v631;
  double v632;
  float v633;
  const char *v634;
  uint64_t v635;
  uint64_t v636;
  void *v637;
  double v638;
  const char *v639;
  uint64_t v640;
  uint64_t v641;
  const char *v642;
  uint64_t v643;
  uint64_t v644;
  double v645;
  uint64_t v646;
  const char *v647;
  uint64_t v648;
  const char *v649;
  uint64_t v650;
  uint64_t v651;
  double v652;
  float v653;
  const char *v654;
  uint64_t v655;
  uint64_t v656;
  void *v657;
  double v658;
  const char *v659;
  uint64_t v660;
  uint64_t v661;
  const char *v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t IsColored;
  const char *v666;
  uint64_t v667;
  uint64_t v668;
  void *v669;
  const char *v670;
  uint64_t v671;
  const char *v672;
  uint64_t v673;
  uint64_t v674;
  double v675;
  float v676;
  const char *v677;
  uint64_t v678;
  uint64_t v679;
  void *v680;
  double v681;
  const char *v682;
  uint64_t v683;
  uint64_t v684;
  uint64_t v685;
  const char *v686;
  uint64_t v687;
  uint64_t v688;
  uint64_t v689;
  const char *v690;
  uint64_t v691;
  uint64_t v692;
  void *v693;
  const char *v694;
  uint64_t v695;
  void *v696;
  const char *v697;
  uint64_t v698;
  uint64_t v699;
  void *v700;
  void *v701;
  const char *v702;
  uint64_t v703;
  uint64_t v704;
  const char *v705;
  uint64_t v706;
  uint64_t v707;
  void *v708;
  const char *v709;
  uint64_t v710;
  uint64_t v711;
  const char *v712;
  uint64_t v713;
  uint64_t v714;
  const char *v715;
  uint64_t v716;
  uint64_t v717;
  void *v718;
  const char *v719;
  uint64_t v720;
  uint64_t v721;
  uint64_t v722;
  void *v723;
  const char *v724;
  uint64_t v725;
  uint64_t v726;
  void *v727;
  const char *v728;
  uint64_t v729;
  const char *v730;
  uint64_t v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  uint64_t j;
  uint64_t v736;
  const char *v737;
  uint64_t v738;
  const char *v739;
  uint64_t v740;
  const char *v741;
  uint64_t v742;
  uint64_t v743;
  uint64_t v744;
  const char *v745;
  const char *v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  uint64_t v750;
  const char *v751;
  uint64_t v752;
  const char *v753;
  uint64_t v754;
  uint64_t v755;
  const char *v756;
  uint64_t v757;
  uint64_t v758;
  void *v759;
  const char *v760;
  uint64_t v761;
  void *v762;
  const char *v763;
  uint64_t v764;
  void *v765;
  VFXMorpher *v766;
  const char *v767;
  uint64_t v768;
  uint64_t v769;
  uint64_t v770;
  const char *v771;
  uint64_t v772;
  uint64_t v773;
  const char *v774;
  uint64_t v775;
  uint64_t v776;
  void *v777;
  void *v778;
  const char *v779;
  uint64_t v780;
  const char *v781;
  uint64_t v782;
  uint64_t v783;
  uint64_t v784;
  uint64_t v785;
  uint64_t k;
  void *v787;
  const char *v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t v791;
  const char *v792;
  uint64_t v793;
  const char *v794;
  void *v795;
  const char *v796;
  uint64_t v797;
  uint64_t v798;
  void *v799;
  const char *v800;
  uint64_t v801;
  const char *v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t m;
  void *v808;
  const char *v809;
  uint64_t v810;
  uint64_t v811;
  uint64_t v812;
  const char *v813;
  uint64_t v814;
  const char *v815;
  uint64_t v816;
  const char *v817;
  uint64_t v818;
  uint64_t v819;
  const char *v820;
  uint64_t v821;
  uint64_t v822;
  const char *v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  const char *v827;
  uint64_t v828;
  uint64_t v829;
  uint64_t v830;
  const char *v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  const char *v835;
  const char *v836;
  uint64_t v837;
  uint64_t v838;
  const char *v839;
  uint64_t v840;
  uint64_t v841;
  void *v842;
  const char *v843;
  uint64_t v844;
  const char *v845;
  uint64_t v846;
  uint64_t v847;
  uint64_t v848;
  uint64_t n;
  void *v850;
  const char *v851;
  uint64_t v852;
  uint64_t v853;
  uint64_t v854;
  const char *v855;
  uint64_t v856;
  const char *v857;
  const char *v858;
  uint64_t v859;
  uint64_t v860;
  uint64_t v861;
  const char *v862;
  uint64_t v863;
  uint64_t v864;
  const char *v865;
  uint64_t v866;
  const char *v867;
  uint64_t v868;
  uint64_t v869;
  uint64_t v870;
  const char *v871;
  uint64_t v872;
  const char *v873;
  uint64_t v874;
  uint64_t v875;
  uint64_t shouldMorphNormals;
  const char *v877;
  uint64_t v878;
  const char *v879;
  uint64_t v880;
  uint64_t v881;
  const char *v882;
  uint64_t v883;
  uint64_t v884;
  void *v885;
  const char *v886;
  uint64_t v887;
  uint64_t v888;
  void *v889;
  unint64_t v890;
  const char *v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  void *v895;
  uint64_t v896;
  void *v897;
  const char *v898;
  void *v899;
  const char *v900;
  uint64_t v901;
  uint64_t v902;
  double v903;
  const char *v904;
  uint64_t v905;
  uint64_t v906;
  const char *v907;
  uint64_t v908;
  uint64_t v909;
  int v910;
  double v911;
  const char *v912;
  uint64_t v913;
  uint64_t v914;
  const char *v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  const char *v919;
  uint64_t v920;
  const char *v921;
  uint64_t v922;
  uint64_t v923;
  double v924;
  const char *v925;
  uint64_t v926;
  uint64_t v927;
  const char *v928;
  uint64_t v929;
  uint64_t v930;
  double v931;
  const char *v932;
  uint64_t v933;
  uint64_t v934;
  const char *v935;
  uint64_t v936;
  uint64_t v937;
  double v938;
  const char *v939;
  uint64_t v940;
  uint64_t v941;
  const char *v942;
  uint64_t v943;
  uint64_t v944;
  double v945;
  const char *v946;
  uint64_t v947;
  uint64_t v948;
  const char *v949;
  uint64_t v950;
  uint64_t v951;
  uint64_t v952;
  const char *v953;
  uint64_t v954;
  const char *v955;
  uint64_t v956;
  uint64_t v957;
  int v958;
  double v959;
  const char *v960;
  uint64_t v961;
  uint64_t v962;
  const char *v963;
  uint64_t v964;
  uint64_t v965;
  int v966;
  double v967;
  const char *v968;
  uint64_t v969;
  uint64_t v970;
  const char *v971;
  uint64_t v972;
  uint64_t v973;
  double v974;
  const char *v975;
  uint64_t v976;
  uint64_t v977;
  const char *v978;
  uint64_t v979;
  uint64_t v980;
  double v981;
  const char *v982;
  uint64_t v983;
  uint64_t v984;
  const char *v985;
  uint64_t v986;
  uint64_t v987;
  int v988;
  double v989;
  const char *v990;
  uint64_t v991;
  uint64_t v992;
  const char *v993;
  uint64_t v994;
  uint64_t v995;
  int v996;
  double v997;
  const char *v998;
  uint64_t v999;
  uint64_t v1000;
  const char *v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t v1004;
  const char *v1005;
  uint64_t v1006;
  const char *v1007;
  uint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  const char *v1011;
  uint64_t v1012;
  const char *v1013;
  uint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  const char *v1017;
  uint64_t v1018;
  const char *v1019;
  uint64_t v1020;
  uint64_t v1021;
  uint64_t isAffectedByGravity;
  const char *v1023;
  uint64_t v1024;
  const char *v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t isHidden;
  const char *v1029;
  uint64_t v1030;
  const char *v1031;
  uint64_t v1032;
  uint64_t v1033;
  double v1034;
  const char *v1035;
  uint64_t v1036;
  uint64_t v1037;
  const char *v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  const char *v1042;
  uint64_t v1043;
  const char *v1044;
  uint64_t v1045;
  uint64_t v1046;
  uint64_t v1047;
  const char *v1048;
  uint64_t v1049;
  uint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  void *v1054;
  VFXMorpher *v1055;
  void *v1056;
  void *v1057;
  __int128 v1058;
  __int128 v1059;
  __int128 v1060;
  __int128 v1061;
  __int128 v1062;
  __int128 v1063;
  __int128 v1064;
  __int128 v1065;
  __int128 v1066;
  __int128 v1067;
  __int128 v1068;
  __int128 v1069;
  _BYTE v1070[128];
  __int128 v1071;
  __int128 v1072;
  __int128 v1073;
  __int128 v1074;
  _OWORD v1075[8];
  uint64_t v1076;

  v1076 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v5 = a1;
  Value = (void *)CFDictionaryGetValue(a2, a1);
  if (!Value)
  {
    Value = (void *)objc_msgSend_node(VFXNode, v6, v7, v8);
    CFDictionarySetValue(a2, v5, Value);
    v1060 = 0u;
    v1061 = 0u;
    v1058 = 0u;
    v1059 = 0u;
    v13 = (void *)objc_msgSend_childNodes(v5, v10, v11, v12);
    v15 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v1058, (uint64_t)v1070, 16);
    if (v15)
    {
      v19 = v15;
      v20 = *(_QWORD *)v1059;
      v21 = a3;
      do
      {
        for (i = 0; i != v19; ++i)
        {
          if (*(_QWORD *)v1059 != v20)
            objc_enumerationMutation(v13);
          v23 = sub_1B19874F0(*(_QWORD *)(*((_QWORD *)&v1058 + 1) + 8 * i), a2, a3);
          objc_msgSend_addChildNode_(Value, v24, v23, v25);
        }
        v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v26, (uint64_t)&v1058, (uint64_t)v1070, 16);
      }
      while (v19);
    }
    else
    {
      v21 = a3;
    }
    objc_msgSend_transform(v5, v16, v17, v18);
    objc_msgSend_setTransform_(Value, v27, v28, v29);
    objc_msgSend_pivot(v5, v30, v31, v32);
    objc_msgSend_setPivot_(Value, v33, v34, v35);
    v39 = objc_msgSend_castsShadow(v5, v36, v37, v38);
    objc_msgSend_setCastsShadow_(Value, v40, v39, v41);
    v45 = objc_msgSend_name(v5, v42, v43, v44);
    objc_msgSend_setName_(Value, v46, v45, v47);
    v51 = objc_msgSend_identifier(v5, v48, v49, v50);
    objc_msgSend_setIdentifier_(Value, v52, v51, v53);
    v57 = (void *)objc_msgSend_geometry(v5, v54, v55, v56);
    v58 = sub_1B1988B04(v57, a2);
    objc_msgSend_setModel_(Value, v59, (uint64_t)v58, v60);
    v64 = (void *)objc_msgSend_light(v5, v61, v62, v63);
    if (v64)
    {
      v67 = v64;
      v71 = (void *)CFDictionaryGetValue(a2, v64);
      if (!v71)
      {
        v71 = (void *)objc_msgSend_light(VFXLight, v68, v69, v70);
        CFDictionarySetValue(a2, v67, v71);
        v75 = (void *)objc_msgSend_type(v67, v72, v73, v74);
        v79 = sub_1B18BCF84(v75, v76, v77, v78);
        objc_msgSend_setType_(v71, v80, v79, v81);
        v85 = objc_msgSend_color(v67, v82, v83, v84);
        objc_msgSend_setColor_(v71, v86, v85, v87);
        objc_msgSend_temperature(v67, v88, v89, v90);
        *(float *)&v91 = v91;
        objc_msgSend_setTemperature_(v71, v92, v93, v94, v91);
        if ((a3 & 1) != 0)
        {
          objc_msgSend_intensity(v67, v95, v96, v97);
          *(float *)&v106 = v106;
        }
        else
        {
          v98 = objc_msgSend_type(v71, v95, v96, v97);
          objc_msgSend_intensity(v67, v99, v100, v101);
          *(float *)&v102 = v102;
          *(float *)&v106 = sub_1B1861B0C(v98, *(float *)&v102);
        }
        objc_msgSend_setIntensity_(v71, v103, v104, v105, v106);
        v113 = objc_msgSend_name(v67, v110, v111, v112);
        objc_msgSend_setName_(v71, v114, v113, v115);
        v119 = objc_msgSend_castsShadow(v67, v116, v117, v118);
        objc_msgSend_setCastsShadow_(v71, v120, v119, v121);
        if (objc_msgSend_shadowColor(v67, v122, v123, v124))
        {
          v128 = (const void *)objc_msgSend_shadowColor(v67, v125, v126, v127);
          sub_1B18BCF20(v128, 0);
          LODWORD(v130) = HIDWORD(v129);
          objc_msgSend_setShadowIntensity_(v71, v129, v131, v132, v130);
        }
        objc_msgSend_shadowRadius(v67, v125, v126, v127);
        *(float *)&v133 = v133;
        objc_msgSend_setShadowRadius_(v71, v134, v135, v136, v133);
        objc_msgSend_shadowMapSize(v67, v137, v138, v139);
        objc_msgSend_setShadowMapSize_(v71, v140, v141, v142);
        v146 = objc_msgSend_shadowSampleCount(v67, v143, v144, v145);
        objc_msgSend_setShadowSampleCount_(v71, v147, v146, v148);
        objc_msgSend_shadowBias(v67, v149, v150, v151);
        *(float *)&v152 = v152;
        objc_msgSend_setShadowBias_(v71, v153, v154, v155, v152);
        v159 = objc_msgSend_automaticallyAdjustsShadowProjection(v67, v156, v157, v158);
        objc_msgSend_setAutomaticallyAdjustsShadowProjection_(v71, v160, v159, v161);
        objc_msgSend_maximumShadowDistance(v67, v162, v163, v164);
        *(float *)&v165 = v165;
        objc_msgSend_setMaximumShadowDistance_(v71, v166, v167, v168, v165);
        v172 = objc_msgSend_forcesBackFaceCasters(v67, v169, v170, v171);
        objc_msgSend_setForcesBackFaceCasters_(v71, v173, v172, v174);
        v178 = objc_msgSend_sampleDistributedShadowMaps(v67, v175, v176, v177);
        objc_msgSend_setSampleDistributedShadowMaps_(v71, v179, v178, v180);
        v184 = objc_msgSend_shadowCascadeCount(v67, v181, v182, v183);
        objc_msgSend_setShadowCascadeCount_(v71, v185, v184, v186);
        objc_msgSend_shadowCascadeSplittingFactor(v67, v187, v188, v189);
        *(float *)&v190 = v190;
        objc_msgSend_setShadowCascadeSplittingFactor_(v71, v191, v192, v193, v190);
        objc_msgSend_orthographicScale(v67, v194, v195, v196);
        *(float *)&v197 = v197;
        objc_msgSend_setOrthographicScale_(v71, v198, v199, v200, v197);
        objc_msgSend_zNear(v67, v201, v202, v203);
        *(float *)&v204 = v204;
        objc_msgSend_setZNear_(v71, v205, v206, v207, v204);
        objc_msgSend_zFar(v67, v208, v209, v210);
        *(float *)&v211 = v211;
        objc_msgSend_setZFar_(v71, v212, v213, v214, v211);
        objc_msgSend_attenuationEndDistance(v67, v215, v216, v217);
        *(float *)&v218 = v218;
        objc_msgSend_setAttenuationDistance_(v71, v219, v220, v221, v218);
        objc_msgSend_spotInnerAngle(v67, v222, v223, v224);
        *(float *)&v225 = v225;
        objc_msgSend_setSpotInnerAngle_(v71, v226, v227, v228, v225);
        objc_msgSend_spotOuterAngle(v67, v229, v230, v231);
        *(float *)&v232 = v232;
        objc_msgSend_setSpotOuterAngle_(v71, v233, v234, v235, v232);
        v239 = objc_msgSend_probeType(v67, v236, v237, v238);
        objc_msgSend_setProbeType_(v71, v240, v239, v241);
        updated = objc_msgSend_probeUpdateType(v67, v242, v243, v244);
        objc_msgSend_setProbeUpdateType_(v71, v246, updated, v247);
        objc_msgSend_probeExtents(v67, v248, v249, v250);
        objc_msgSend_setProbeExtents_(v71, v251, v252, v253);
        objc_msgSend_probeOffset(v67, v254, v255, v256);
        objc_msgSend_setProbeOffset_(v71, v257, v258, v259);
        v263 = objc_msgSend__sphericalHarmonics(v67, v260, v261, v262);
        objc_msgSend_set_sphericalHarmonics_(v71, v264, v263, v265);
        v269 = objc_msgSend_parallaxCorrectionEnabled(v67, v266, v267, v268);
        objc_msgSend_setParallaxCorrectionEnabled_(v71, v270, v269, v271);
        objc_msgSend_parallaxExtentsFactor(v67, v272, v273, v274);
        objc_msgSend_setParallaxExtentsFactor_(v71, v275, v276, v277);
        objc_msgSend_parallaxCenterOffset(v67, v278, v279, v280);
        objc_msgSend_setParallaxCenterOffset_(v71, v281, v282, v283);
        if (objc_msgSend_type(v71, v284, v285, v286) == 5)
        {
          v290 = objc_msgSend_areaType(v67, v287, v288, v289);
          objc_msgSend_setAreaType_(v71, v291, v290, v292);
          objc_msgSend_areaExtents(v67, v293, v294, v295);
          objc_msgSend_setAreaExtents_(v71, v296, v297, v298);
          v302 = objc_msgSend_areaPolygonVertices(v67, v299, v300, v301);
          objc_msgSend_setAreaPolygonVertices_(v71, v303, v302, v304);
          v308 = objc_msgSend_drawsArea(v67, v305, v306, v307);
          objc_msgSend_setDrawsArea_(v71, v309, v308, v310);
        }
        v311 = objc_msgSend_doubleSided(v67, v287, v288, v289);
        objc_msgSend_setDoubleSided_(v71, v312, v311, v313);
        v317 = objc_msgSend_categoryBitMask(v67, v314, v315, v316);
        objc_msgSend_setCategoryBitMask_(v71, v318, v317, v319);
        sub_1B19889BC(v71, v67, v320, v321);
      }
      objc_msgSend_setLight_(Value, v68, (uint64_t)v71, v70);
    }
    else
    {
      objc_msgSend_setLight_(Value, v65, 0, v66);
    }
    v322 = (void *)objc_msgSend_camera(v5, v107, v108, v109);
    if (v322)
    {
      v325 = v322;
      v327 = (void *)CFDictionaryGetValue(a2, v322);
      if (!v327)
      {
        v327 = (void *)objc_msgSend_camera(VFXCamera, v323, v326, v324);
        CFDictionarySetValue(a2, v325, v327);
        v331 = objc_msgSend_name(v325, v328, v329, v330);
        objc_msgSend_setName_(v327, v332, v331, v333);
        if (objc_msgSend_wantsDepthOfField(v325, v334, v335, v336))
        {
          v340 = objc_msgSend_depthOfField(VFXCameraEffectDepthOfField, v337, v338, v339);
          objc_msgSend_setDepthOfField_(v327, v341, v340, v342);
          v346 = objc_msgSend_apertureBladeCount(v325, v343, v344, v345);
          v350 = (void *)objc_msgSend_depthOfField(v327, v347, v348, v349);
          objc_msgSend_setApertureBladeCount_(v350, v351, v346, v352);
          v356 = objc_msgSend_focalBlurSampleCount(v325, v353, v354, v355);
          v360 = (void *)objc_msgSend_depthOfField(v327, v357, v358, v359);
          objc_msgSend_setFocalBlurSampleCount_(v360, v361, v356, v362);
          objc_msgSend_fStop(v325, v363, v364, v365);
          v367 = v366;
          v371 = (void *)objc_msgSend_depthOfField(v327, v368, v369, v370);
          *(float *)&v372 = v367;
          objc_msgSend_setFStop_(v371, v373, v374, v375, v372);
        }
        v376 = objc_msgSend_name(v325, v337, v338, v339);
        objc_msgSend_setName_(v327, v377, v376, v378);
        objc_msgSend_focusDistance(v325, v379, v380, v381);
        *(float *)&v382 = v382;
        objc_msgSend_setFocusDistance_(v327, v383, v384, v385, v382);
        objc_msgSend_sensorHeight(v325, v386, v387, v388);
        *(float *)&v389 = v389;
        objc_msgSend_setSensorHeight_(v327, v390, v391, v392, v389);
        objc_msgSend_fieldOfView(v325, v393, v394, v395);
        *(float *)&v396 = v396;
        objc_msgSend_setFieldOfView_(v327, v397, v398, v399, v396);
        objc_msgSend_postProjectionTransform(v325, v400, v401, v402);
        v1071 = v1075[0];
        v1072 = v1075[1];
        v1073 = v1075[2];
        objc_msgSend_setPostProjectionTransform_(v327, v403, (uint64_t)&v1071, v404);
        v408 = objc_msgSend_fillMode(v325, v405, v406, v407);
        objc_msgSend_setFillMode_(v327, v409, v408, v410);
        if (objc_msgSend_projectionDirection(v325, v411, v412, v413))
          objc_msgSend_setProjectionDirection_(v327, v414, 3, v415);
        else
          objc_msgSend_setProjectionDirection_(v327, v414, 2, v415);
        objc_msgSend_zNear(v325, v416, v417, v418);
        *(float *)&v419 = v419;
        objc_msgSend_setZNear_(v327, v420, v421, v422, v419);
        objc_msgSend_zFar(v325, v423, v424, v425);
        *(float *)&v426 = v426;
        objc_msgSend_setZFar_(v327, v427, v428, v429, v426);
        objc_msgSend_orthographicScale(v325, v430, v431, v432);
        *(float *)&v433 = v433;
        objc_msgSend_setOrthographicScale_(v327, v434, v435, v436, v433);
        v440 = objc_msgSend_automaticallyAdjustsZRange(v325, v437, v438, v439);
        objc_msgSend_setAutomaticallyAdjustsZRange_(v327, v441, v440, v442);
        v446 = objc_msgSend_usesOrthographicProjection(v325, v443, v444, v445);
        objc_msgSend_setUsesOrthographicProjection_(v327, v447, v446, v448);
        v452 = objc_msgSend_wantsHDR(v325, v449, v450, v451);
        objc_msgSend_setWantsHDR_(v327, v453, v452, v454);
        objc_msgSend_lensShift(v325, v455, v456, v457);
        objc_msgSend_setFilmOffset_(v327, v458, v459, v460);
        objc_msgSend_motionBlurIntensity(v325, v461, v462, v463);
        if (v467 != 0.0)
        {
          v468 = objc_msgSend_motionBlur(VFXCameraEffectMotionBlur, v464, v465, v466);
          objc_msgSend_setMotionBlur_(v327, v469, v468, v470);
          objc_msgSend_motionBlurIntensity(v325, v471, v472, v473);
          v475 = v474;
          v479 = (void *)objc_msgSend_motionBlur(v327, v476, v477, v478);
          *(float *)&v480 = v475;
          objc_msgSend_setIntensity_(v479, v481, v482, v483, v480);
        }
        objc_msgSend_bloomIntensity(v325, v464, v465, v466);
        if (v487 != 0.0)
        {
          v488 = objc_msgSend_bloom(VFXCameraEffectBloom, v484, v485, v486);
          objc_msgSend_setBloom_(v327, v489, v488, v490);
          objc_msgSend_bloomIntensity(v325, v491, v492, v493);
          v495 = v494;
          v499 = (void *)objc_msgSend_bloom(v327, v496, v497, v498);
          *(float *)&v500 = v495;
          objc_msgSend_setIntensity_(v499, v501, v502, v503, v500);
          objc_msgSend_bloomThreshold(v325, v504, v505, v506);
          v508 = v507;
          v512 = (void *)objc_msgSend_bloom(v327, v509, v510, v511);
          *(float *)&v513 = v508;
          objc_msgSend_setThreshold_(v512, v514, v515, v516, v513);
          v520 = objc_msgSend_bloomIterationCount(v325, v517, v518, v519);
          v524 = (void *)objc_msgSend_bloom(v327, v521, v522, v523);
          objc_msgSend_setIterationCount_(v524, v525, v520, v526);
        }
        objc_msgSend_vignettingIntensity(v325, v484, v485, v486);
        if (v530 != 0.0)
        {
          objc_msgSend_vignettingPower(v325, v527, v528, v529);
          if (v531 > 0.0)
          {
            v532 = objc_msgSend_vignetting(VFXCameraEffectVignetting, v527, v528, v529);
            objc_msgSend_setVignetting_(v327, v533, v532, v534);
            objc_msgSend_vignettingIntensity(v325, v535, v536, v537);
            v539 = v538;
            v543 = (void *)objc_msgSend_vignetting(v327, v540, v541, v542);
            *(float *)&v544 = v539;
            objc_msgSend_setIntensity_(v543, v545, v546, v547, v544);
          }
        }
        objc_msgSend_colorFringeStrength(v325, v527, v528, v529);
        if (v551 != 0.0)
        {
          objc_msgSend_colorFringeIntensity(v325, v548, v549, v550);
          if (v552 != 0.0)
          {
            v553 = objc_msgSend_colorFringe(VFXCameraEffectColorFringe, v548, v549, v550);
            objc_msgSend_setColorFringe_(v327, v554, v553, v555);
            objc_msgSend_colorFringeStrength(v325, v556, v557, v558);
            v560 = v559;
            v564 = (void *)objc_msgSend_colorFringe(v327, v561, v562, v563);
            *(float *)&v565 = v560;
            objc_msgSend_setStrength_(v564, v566, v567, v568, v565);
            objc_msgSend_colorFringeIntensity(v325, v569, v570, v571);
            v573 = v572;
            v577 = (void *)objc_msgSend_colorFringe(v327, v574, v575, v576);
            *(float *)&v578 = v573;
            objc_msgSend_setIntensity_(v577, v579, v580, v581, v578);
          }
        }
        objc_msgSend_saturation(v325, v548, v549, v550);
        if (v585 != 1.0)
        {
          objc_msgSend_contrast(v325, v582, v583, v584);
          if (v586 != 1.0)
          {
            if (objc_msgSend_wantsHDR(v325, v582, v583, v584))
            {
              v587 = objc_msgSend_colorGrading(VFXCameraEffectColorGrading, v582, v583, v584);
              objc_msgSend_setColorGrading_(v327, v588, v587, v589);
              objc_msgSend_saturation(v325, v590, v591, v592);
              v594 = v593;
              v598 = (void *)objc_msgSend_colorGrading(v327, v595, v596, v597);
              *(float *)&v599 = v594;
              objc_msgSend_setSaturation_(v598, v600, v601, v602, v599);
              objc_msgSend_contrast(v325, v603, v604, v605);
              v607 = v606 + 1.0;
              v611 = (void *)objc_msgSend_colorGrading(v327, v608, v609, v610);
              *(float *)&v612 = v607;
              objc_msgSend_setContrast_(v611, v613, v614, v615, v612);
              objc_msgSend_whiteBalanceTemperature(v325, v616, v617, v618);
              v620 = v619 * 0.5;
              v624 = (void *)objc_msgSend_colorGrading(v327, v621, v622, v623);
              *(float *)&v625 = v620;
              objc_msgSend_setWhiteBalanceTemperature_(v624, v626, v627, v628, v625);
              objc_msgSend_whiteBalanceTint(v325, v629, v630, v631);
              v633 = v632 * 0.5;
              v637 = (void *)objc_msgSend_colorGrading(v327, v634, v635, v636);
              *(float *)&v638 = v633;
              objc_msgSend_setWhiteBalanceTint_(v637, v639, v640, v641, v638);
            }
          }
        }
        objc_msgSend_grainIntensity(v325, v582, v583, v584);
        if (v645 != 0.0)
        {
          v646 = objc_msgSend_grain(VFXCameraEffectGrain, v642, v643, v644);
          objc_msgSend_setGrain_(v327, v647, v646, v648);
          objc_msgSend_grainScale(v325, v649, v650, v651);
          v653 = v652;
          v657 = (void *)objc_msgSend_grain(v327, v654, v655, v656);
          *(float *)&v658 = v653;
          objc_msgSend_setScale_(v657, v659, v660, v661, v658);
          IsColored = objc_msgSend_grainIsColored(v325, v662, v663, v664);
          v669 = (void *)objc_msgSend_grain(v327, v666, v667, v668);
          objc_msgSend_setColored_(v669, v670, IsColored, v671);
          objc_msgSend_grainIntensity(v325, v672, v673, v674);
          v676 = v675;
          v680 = (void *)objc_msgSend_grain(v327, v677, v678, v679);
          *(float *)&v681 = v676;
          objc_msgSend_setIntensity_(v680, v682, v683, v684, v681);
        }
        v685 = objc_msgSend_categoryBitMask(v325, v642, v643, v644);
        objc_msgSend_setCategoryBitMask_(v327, v686, v685, v687);
        sub_1B19889BC(v327, v325, v688, v689);
      }
    }
    else
    {
      v327 = 0;
    }
    objc_msgSend_setCamera_(Value, v323, (uint64_t)v327, v324);
    v693 = (void *)objc_msgSend_skinner(v5, v690, v691, v692);
    if (v693)
    {
      v696 = v693;
      v700 = (void *)CFDictionaryGetValue(a2, v693);
      if (!v700)
      {
        v701 = (void *)objc_msgSend_baseGeometry(v696, v697, v698, v699);
        v1054 = (void *)sub_1B1988B04(v701, a2);
        if (objc_msgSend_boneWeights(v696, v702, v703, v704))
        {
          v708 = (void *)objc_msgSend_boneWeights(v696, v705, v706, v707);
          v1052 = sub_1B1989538(v708, v709, v710, v711);
        }
        else
        {
          v1052 = 0;
        }
        v1056 = v5;
        if (objc_msgSend_boneIndices(v696, v705, v706, v707))
        {
          v718 = (void *)objc_msgSend_boneIndices(v696, v715, v716, v717);
          v722 = sub_1B1989538(v718, v719, v720, v721);
        }
        else
        {
          v722 = 0;
        }
        v723 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v715, v716, v717);
        v1071 = 0u;
        v1072 = 0u;
        v1073 = 0u;
        v1074 = 0u;
        v727 = (void *)objc_msgSend_bones(v696, v724, v725, v726);
        v729 = objc_msgSend_countByEnumeratingWithState_objects_count_(v727, v728, (uint64_t)&v1071, (uint64_t)v1075, 16);
        if (v729)
        {
          v733 = v729;
          v734 = *(_QWORD *)v1072;
          do
          {
            for (j = 0; j != v733; ++j)
            {
              if (*(_QWORD *)v1072 != v734)
                objc_enumerationMutation(v727);
              v736 = sub_1B19874F0(*(_QWORD *)(*((_QWORD *)&v1071 + 1) + 8 * j), a2, v21);
              objc_msgSend_addObject_(v723, v737, v736, v738);
            }
            v733 = objc_msgSend_countByEnumeratingWithState_objects_count_(v727, v739, (uint64_t)&v1071, (uint64_t)v1075, 16);
          }
          while (v733);
        }
        v740 = objc_msgSend_mesh(v1054, v730, v731, v732);
        v744 = objc_msgSend_boneInverseBindTransforms(v696, v741, v742, v743);
        v700 = (void *)objc_msgSend_skinnerWithBaseMesh_bones_boneInverseBindTransforms_boneWeights_boneIndices_(VFXSkinner, v745, v740, (uint64_t)v723, v744, v1052, v722);
        v749 = objc_msgSend_skeleton(v696, v746, v747, v748);
        v750 = sub_1B19874F0(v749, a2, v21);
        objc_msgSend_setSkeleton_(v700, v751, v750, v752);
        objc_msgSend_baseGeometryBindTransform(v696, v753, v754, v755);
        objc_msgSend_setBaseMeshBindTransform_(v700, v756, v757, v758, *(double *)&v1066, *(double *)&v1067, *(double *)&v1068, *(double *)&v1069);
        CFDictionarySetValue(a2, v696, v700);
        v5 = v1056;
      }
      objc_msgSend_setSkinner_(Value, v697, (uint64_t)v700, v699);
    }
    else
    {
      objc_msgSend_setSkinner_(Value, v694, 0, v695);
    }
    v759 = (void *)objc_msgSend_morpher(v5, v712, v713, v714);
    if (v759)
    {
      v762 = v759;
      v765 = (void *)CFDictionaryGetValue(a2, v759);
      if (!v765)
      {
        v766 = objc_alloc_init(VFXMorpher);
        CFDictionarySetValue(a2, v762, v766);
        v770 = objc_msgSend_inBetweenCounts(v762, v767, v768, v769);
        v777 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v771, v772, v773);
        v1055 = v766;
        if (v770)
        {
          v1057 = v5;
          v1068 = 0u;
          v1069 = 0u;
          v1066 = 0u;
          v1067 = 0u;
          v778 = (void *)objc_msgSend_targetsAndInBetween(v762, v774, v775, v776);
          v780 = objc_msgSend_countByEnumeratingWithState_objects_count_(v778, v779, (uint64_t)&v1066, (uint64_t)v1075, 16);
          if (v780)
          {
            v784 = v780;
            v785 = *(_QWORD *)v1067;
            do
            {
              for (k = 0; k != v784; ++k)
              {
                if (*(_QWORD *)v1067 != v785)
                  objc_enumerationMutation(v778);
                v787 = (void *)sub_1B1988B04(*(void **)(*((_QWORD *)&v1066 + 1) + 8 * k), a2);
                v791 = objc_msgSend_mesh(v787, v788, v789, v790);
                objc_msgSend_addObject_(v777, v792, v791, v793);
              }
              v784 = objc_msgSend_countByEnumeratingWithState_objects_count_(v778, v794, (uint64_t)&v1066, (uint64_t)v1075, 16);
            }
            while (v784);
          }
          v795 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v781, v782, v783);
          v1062 = 0u;
          v1063 = 0u;
          v1064 = 0u;
          v1065 = 0u;
          v799 = (void *)objc_msgSend_correctivesAndInBetween(v762, v796, v797, v798);
          v801 = objc_msgSend_countByEnumeratingWithState_objects_count_(v799, v800, (uint64_t)&v1062, (uint64_t)&v1071, 16);
          if (v801)
          {
            v805 = v801;
            v806 = *(_QWORD *)v1063;
            do
            {
              for (m = 0; m != v805; ++m)
              {
                if (*(_QWORD *)v1063 != v806)
                  objc_enumerationMutation(v799);
                v808 = (void *)sub_1B1988B04(*(void **)(*((_QWORD *)&v1062 + 1) + 8 * m), a2);
                v812 = objc_msgSend_mesh(v808, v809, v810, v811);
                objc_msgSend_addObject_(v795, v813, v812, v814);
              }
              v805 = objc_msgSend_countByEnumeratingWithState_objects_count_(v799, v815, (uint64_t)&v1062, (uint64_t)&v1071, 16);
            }
            while (v805);
          }
          v816 = objc_msgSend_inBetweenCounts(v762, v802, v803, v804);
          v1053 = objc_msgSend_inBetweenWeights(v762, v817, v818, v819);
          v1051 = objc_msgSend_correctiveDriverCounts(v762, v820, v821, v822);
          v826 = objc_msgSend_correctiveDriverIndices(v762, v823, v824, v825);
          v830 = objc_msgSend_correctiveInBetweenCounts(v762, v827, v828, v829);
          v834 = objc_msgSend_correctiveInBetweenWeights(v762, v831, v832, v833);
          v765 = v1055;
          objc_msgSend_setTargetsAndInBetweens_inBetweenCounts_inBetweenWeights_correctives_driverCounts_driverIndices_inBetweenCounts_inBetweenWeights_(v1055, v835, (uint64_t)v777, v816, v1053, v795, v1051, v826, v830, v834);
          v5 = v1057;
        }
        else
        {
          v1073 = 0u;
          v1074 = 0u;
          v1071 = 0u;
          v1072 = 0u;
          v842 = (void *)objc_msgSend_targets(v762, v774, v775, v776);
          v844 = objc_msgSend_countByEnumeratingWithState_objects_count_(v842, v843, (uint64_t)&v1071, (uint64_t)v1075, 16);
          if (v844)
          {
            v847 = v844;
            v848 = *(_QWORD *)v1072;
            do
            {
              for (n = 0; n != v847; ++n)
              {
                if (*(_QWORD *)v1072 != v848)
                  objc_enumerationMutation(v842);
                v850 = (void *)sub_1B1988B04(*(void **)(*((_QWORD *)&v1071 + 1) + 8 * n), a2);
                v854 = objc_msgSend_mesh(v850, v851, v852, v853);
                objc_msgSend_addObject_(v777, v855, v854, v856);
              }
              v847 = objc_msgSend_countByEnumeratingWithState_objects_count_(v842, v857, (uint64_t)&v1071, (uint64_t)v1075, 16);
            }
            while (v847);
          }
          v765 = v1055;
          objc_msgSend_setTargets_(v1055, v845, (uint64_t)v777, v846);
          v861 = objc_msgSend_weights(v762, v858, v859, v860);
          objc_msgSend_setWeights_(v1055, v862, v861, v863);
        }
        v864 = objc_msgSend_calculationMode(v762, v836, v837, v838);
        objc_msgSend_setCalculationMode_(v765, v865, v864, v866);
        v870 = objc_msgSend_unifiesNormals(v762, v867, v868, v869);
        objc_msgSend_setUnifiesNormals_(v765, v871, v870, v872);
        shouldMorphNormals = objc_msgSend_shouldMorphNormals(v762, v873, v874, v875);
        objc_msgSend_setShouldMorphNormals_(v765, v877, shouldMorphNormals, v878);
        objc_msgSend_weightIncrementalThreshold(v762, v879, v880, v881);
        objc_msgSend_setWeightIncrementalThreshold_(v765, v882, v883, v884);
      }
      objc_msgSend_setMorpher_(Value, v763, (uint64_t)v765, v764);
    }
    else
    {
      objc_msgSend_setMorpher_(Value, v760, 0, v761);
    }
    v885 = (void *)objc_msgSend_physicsBody(v5, v839, v840, v841);
    if (v885)
    {
      v889 = v885;
      v890 = objc_msgSend_type(v885, v886, v887, v888);
      if (v890 >= 3)
        v894 = 1;
      else
        v894 = v890;
      v895 = (void *)objc_msgSend_physicsShape(v889, v891, v892, v893);
      v897 = sub_1B1989C84(v895, (const char *)a2, v21, v896);
      v899 = (void *)objc_msgSend_bodyWithType_shape_(VFXPhysicsBody, v898, v894, (uint64_t)v897);
      objc_msgSend_mass(v889, v900, v901, v902);
      *(float *)&v903 = v903;
      objc_msgSend_setMass_(v899, v904, v905, v906, v903);
      objc_msgSend_momentOfInertia(v889, v907, v908, v909);
      HIDWORD(v911) = v910;
      objc_msgSend_setMomentOfInertia_(v899, v912, v913, v914, v911);
      v918 = objc_msgSend_usesDefaultMomentOfInertia(v889, v915, v916, v917);
      objc_msgSend_setUsesDefaultMomentOfInertia_(v899, v919, v918, v920);
      objc_msgSend_charge(v889, v921, v922, v923);
      *(float *)&v924 = v924;
      objc_msgSend_setCharge_(v899, v925, v926, v927, v924);
      objc_msgSend_friction(v889, v928, v929, v930);
      *(float *)&v931 = v931;
      objc_msgSend_setFriction_(v899, v932, v933, v934, v931);
      objc_msgSend_restitution(v889, v935, v936, v937);
      *(float *)&v938 = v938;
      objc_msgSend_setRestitution_(v899, v939, v940, v941, v938);
      objc_msgSend_rollingFriction(v889, v942, v943, v944);
      *(float *)&v945 = v945;
      objc_msgSend_setRollingFriction_(v899, v946, v947, v948, v945);
      v952 = objc_msgSend_allowsResting(v889, v949, v950, v951);
      objc_msgSend_setAllowsResting_(v899, v953, v952, v954);
      objc_msgSend_velocity(v889, v955, v956, v957);
      HIDWORD(v959) = v958;
      objc_msgSend_setVelocity_(v899, v960, v961, v962, v959);
      objc_msgSend_angularVelocity(v889, v963, v964, v965);
      HIDWORD(v967) = v966;
      objc_msgSend_setAngularVelocity_(v899, v968, v969, v970, v967);
      objc_msgSend_damping(v889, v971, v972, v973);
      *(float *)&v974 = v974;
      objc_msgSend_setDamping_(v899, v975, v976, v977, v974);
      objc_msgSend_angularDamping(v889, v978, v979, v980);
      *(float *)&v981 = v981;
      objc_msgSend_setAngularDamping_(v899, v982, v983, v984, v981);
      objc_msgSend_velocityFactor(v889, v985, v986, v987);
      HIDWORD(v989) = v988;
      objc_msgSend_setVelocityFactor_(v899, v990, v991, v992, v989);
      objc_msgSend_angularVelocityFactor(v889, v993, v994, v995);
      HIDWORD(v997) = v996;
      objc_msgSend_setAngularVelocityFactor_(v899, v998, v999, v1000, v997);
      v1004 = objc_msgSend_categoryBitMask(v889, v1001, v1002, v1003);
      objc_msgSend_setCategoryBitMask_(v899, v1005, v1004, v1006);
      v1010 = objc_msgSend_collisionBitMask(v889, v1007, v1008, v1009);
      objc_msgSend_setCollisionBitMask_(v899, v1011, v1010, v1012);
      v1016 = objc_msgSend_contactTestBitMask(v889, v1013, v1014, v1015);
      objc_msgSend_setContactTestBitMask_(v899, v1017, v1016, v1018);
      isAffectedByGravity = objc_msgSend_isAffectedByGravity(v889, v1019, v1020, v1021);
      objc_msgSend_setAffectedByGravity_(v899, v1023, isAffectedByGravity, v1024);
    }
    else
    {
      v899 = 0;
    }
    objc_msgSend_setPhysicsBody_(Value, v886, (uint64_t)v899, v888);
    isHidden = objc_msgSend_isHidden(v5, v1025, v1026, v1027);
    objc_msgSend_setHidden_(Value, v1029, isHidden, v1030);
    objc_msgSend_opacity(v5, v1031, v1032, v1033);
    *(float *)&v1034 = v1034;
    objc_msgSend_setOpacity_(Value, v1035, v1036, v1037, v1034);
    v1041 = objc_msgSend_renderingOrder(v5, v1038, v1039, v1040);
    objc_msgSend_setRenderingOrder_(Value, v1042, v1041, v1043);
    v1047 = objc_msgSend_categoryBitMask(v5, v1044, v1045, v1046);
    objc_msgSend_setCategoryBitMask_(Value, v1048, v1047, v1049);
  }
  return Value;
}

uint64_t sub_1B19886BC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int8x16_t v33;
  int8x16_t v34;
  double v35;
  __int32 v36;
  int8x16_t v37;
  __int32 v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  const char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int8x16_t v82;
  int64x2_t v83;
  int32x4_t v84;
  int32x4_t v85;

  v6 = (void *)objc_msgSend_propertyName(a2, (const char *)a2, a3, a4);
  if (!objc_msgSend_isEqualToString_(v6, v7, (uint64_t)CFSTR("transparent"), v8)
    || (objc_msgSend_contents(a2, v9, v10, v11), objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0))
  {
    v12 = objc_msgSend_contents(a2, v9, v10, v11);
    objc_msgSend_setContents_(a1, v13, v12, v14);
  }
  v15 = objc_msgSend_minificationFilter(a2, v9, v10, v11);
  objc_msgSend_setMinificationFilter_(a1, v16, v15, v17);
  v21 = objc_msgSend_magnificationFilter(a2, v18, v19, v20);
  objc_msgSend_setMagnificationFilter_(a1, v22, v21, v23);
  v27 = objc_msgSend_mipFilter(a2, v24, v25, v26);
  objc_msgSend_setMipFilter_(a1, v28, v27, v29);
  if (a2)
  {
    objc_msgSend_contentsTransform(a2, v30, v31, v32);
    v34 = v82;
    v36 = v83.i32[1];
    LODWORD(v35) = v83.i32[0];
    v38 = v84.i32[0];
    v37 = (int8x16_t)v85;
    v39 = vextq_s8((int8x16_t)v85, (int8x16_t)vtrn2q_s32(v84, v85), 4uLL);
    v40 = (int8x16_t)vzip2q_s64((int64x2_t)v84, v83);
    v33 = vextq_s8(v34, v34, 8uLL);
    *(int8x8_t *)v33.i8 = vext_s8(*(int8x8_t *)v82.i8, *(int8x8_t *)v33.i8, 4uLL);
  }
  else
  {
    v37 = 0uLL;
    v33.i64[0] = 0;
    v36 = 0;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v38 = 0;
    LODWORD(v35) = 0;
    v34 = 0uLL;
    v39 = 0uLL;
    v40 = 0uLL;
  }
  HIDWORD(v35) = v36;
  v41 = vextq_s8(v39, v40, 8uLL);
  v41.i32[0] = v38;
  objc_msgSend_setContentsTransform_(a1, v30, v31, v32, *(double *)vextq_s8(vextq_s8(v34, v34, 4uLL), v33, 0xCuLL).i64, v35, *(double *)v41.i64, *(double *)vextq_s8(vextq_s8(v37, v37, 4uLL), v39, 0xCuLL).i64, *(_OWORD *)&v82, *(_OWORD *)&v83, *(_OWORD *)&v84, *(_OWORD *)&v85);
  v45 = objc_msgSend_wrapS(a2, v42, v43, v44);
  objc_msgSend_setWrapS_(a1, v46, v45, v47);
  v51 = objc_msgSend_wrapT(a2, v48, v49, v50);
  objc_msgSend_setWrapT_(a1, v52, v51, v53);
  objc_msgSend_intensity(a2, v54, v55, v56);
  *(float *)&v57 = v57;
  objc_msgSend_setIntensity_(a1, v58, v59, v60, v57);
  v64 = objc_msgSend_sRGBTexture(a2, v61, v62, v63);
  objc_msgSend_setColorManaged_(a1, v65, v64, v66);
  v70 = objc_msgSend_mappingChannel(a2, v67, v68, v69);
  objc_msgSend_setMappingChannel_(a1, v71, v70, v72);
  v76 = objc_msgSend_textureComponents(a2, v73, v74, v75);
  objc_msgSend_setTextureComponents_(a1, v77, v76, v78);
  return sub_1B19889BC(a1, a2, v79, v80);
}

uint64_t sub_1B1988890(void *a1, const __CFDictionary *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *Value;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _BYTE v25[128];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  Value = (void *)CFDictionaryGetValue(a2, a1);
  if (!Value)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unable to find node in remap table"), v4, v5, v6, v7, v8, v9, (uint64_t)"vfxNode!=nil");
  sub_1B19889BC(Value, a1, v4, v5);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v14 = (void *)objc_msgSend_childNodes(a1, v11, v12, v13);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v21, (uint64_t)v25, 16);
  if (result)
  {
    v17 = result;
    v18 = *(_QWORD *)v22;
    do
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v22 != v18)
          objc_enumerationMutation(v14);
        sub_1B1988890(*(_QWORD *)(*((_QWORD *)&v21 + 1) + 8 * v19++), a2);
      }
      while (v17 != v19);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v20, (uint64_t)&v21, (uint64_t)v25, 16);
      v17 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B19889BC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t result;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v6 = (void *)objc_msgSend_animationKeys(a2, (const char *)a2, a3, a4, 0);
  result = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v7, (uint64_t)&v34, (uint64_t)v38, 16);
  if (result)
  {
    v11 = result;
    v12 = *(_QWORD *)v35;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v35 != v12)
          objc_enumerationMutation(v6);
        v14 = *(_QWORD *)(*((_QWORD *)&v34 + 1) + 8 * v13);
        v15 = (void *)objc_msgSend_animationPlayerForKey_(a2, v9, v14, v10);
        v19 = (void *)objc_msgSend_animation(v15, v16, v17, v18);
        v23 = objc_msgSend_caAnimation(v19, v20, v21, v22);
        v26 = (void *)objc_msgSend_animationWithCAAnimation_(VFXAnimation, v24, v23, v25);
        v30 = objc_msgSend_keyPath(v19, v27, v28, v29);
        objc_msgSend_setKeyPath_(v26, v31, v30, v32);
        objc_msgSend_addAnimation_forKey_(a1, v33, (uint64_t)v26, v14);
        ++v13;
      }
      while (v11 != v13);
      result = objc_msgSend_countByEnumeratingWithState_objects_count_(v6, v9, (uint64_t)&v34, (uint64_t)v38, 16);
      v11 = result;
    }
    while (result);
  }
  return result;
}

const void *sub_1B1988B04(void *key, CFDictionaryRef theDict)
{
  __CFDictionary *v2;
  void *v3;
  const void *Value;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  float v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  float v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  float v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  double v25;
  double v26;
  double v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  void *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t i;
  uint64_t v80;
  const char *v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t j;
  void *v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  double v97;
  const char *v98;
  uint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  double v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  const char *v113;
  uint64_t v114;
  uint64_t v115;
  double v116;
  const char *v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  const char *v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  const char *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  const char *v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  uint64_t v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  void *v162;
  const char *v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  const char *v171;
  uint64_t v172;
  const char *v173;
  uint64_t v174;
  uint64_t v175;
  void *v176;
  const char *v177;
  uint64_t v178;
  const char *v179;
  uint64_t v180;
  const char *v181;
  uint64_t v182;
  uint64_t v183;
  double v184;
  const char *v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  const char *v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t isLitPerPixel;
  const char *v198;
  uint64_t v199;
  const char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t isDoubleSided;
  const char *v204;
  uint64_t v205;
  const char *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const char *v210;
  uint64_t v211;
  const char *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  uint64_t v217;
  const char *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  const char *v222;
  uint64_t v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  double v227;
  const char *v228;
  uint64_t v229;
  uint64_t v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const char *v235;
  uint64_t v236;
  const char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  const char *v241;
  uint64_t v242;
  const char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const char *v247;
  uint64_t v248;
  const char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  const char *v253;
  uint64_t v254;
  uint64_t v255;
  void *v256;
  const char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  void *v261;
  const char *v262;
  uint64_t v263;
  uint64_t v264;
  const char *v265;
  uint64_t v266;
  uint64_t v267;
  double v268;
  const char *v269;
  uint64_t v270;
  const char *v271;
  uint64_t v272;
  uint64_t v273;
  void *v274;
  const char *v275;
  uint64_t v276;
  const char *v277;
  uint64_t v278;
  uint64_t v279;
  void *v280;
  const char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t k;
  void *v288;
  VFXMaterialProperty *v289;
  uint64_t v290;
  uint64_t v291;
  const char *v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  const char *v296;
  const char *v297;
  uint64_t v298;
  uint64_t v299;
  const char *v300;
  const char *v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;
  const char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  const char *v309;
  uint64_t v310;
  const char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  const char *v315;
  uint64_t v316;
  uint64_t v317;
  void *v318;
  const char *v319;
  uint64_t v320;
  const char *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  const char *v325;
  uint64_t v326;
  const char *v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  const char *v331;
  uint64_t v332;
  const char *v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  const char *v337;
  uint64_t v338;
  void *v339;
  VFXModelTessellator *v340;
  const char *v341;
  uint64_t v342;
  uint64_t v343;
  double v344;
  const char *v345;
  uint64_t v346;
  uint64_t v347;
  const char *v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  const char *v352;
  uint64_t v353;
  const char *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t isAdaptive;
  const char *v358;
  uint64_t v359;
  const char *v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t isScreenSpace;
  const char *v364;
  uint64_t v365;
  const char *v366;
  uint64_t v367;
  uint64_t v368;
  double v369;
  const char *v370;
  uint64_t v371;
  uint64_t v372;
  const char *v373;
  uint64_t v374;
  uint64_t v375;
  double v376;
  const char *v377;
  uint64_t v378;
  uint64_t v379;
  const char *v380;
  uint64_t v381;
  uint64_t v382;
  double v383;
  const char *v384;
  uint64_t v385;
  uint64_t v386;
  const char *v387;
  uint64_t v388;
  uint64_t v389;
  int v390;
  const char *v391;
  uint64_t v392;
  VFXModelTessellator *v393;
  const char *v394;
  uint64_t v395;
  uint64_t v396;
  const char *v397;
  uint64_t v398;
  uint64_t v399;
  unsigned int v400;
  const char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  void *v406;
  void *v407;
  void *v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  void *v417;
  __CFDictionary *v418;
  uint64_t v419;
  id obj;
  __int128 v421;
  __int128 v422;
  __int128 v423;
  __int128 v424;
  __int128 v425;
  __int128 v426;
  __int128 v427;
  __int128 v428;
  __int128 v429;
  __int128 v430;
  __int128 v431;
  __int128 v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  _QWORD v437[5];
  _BYTE v438[128];
  _BYTE v439[128];
  _BYTE v440[128];
  _BYTE v441[128];
  uint64_t v442;

  v442 = *MEMORY[0x1E0C80C00];
  if (!key)
    return 0;
  v2 = theDict;
  v3 = key;
  Value = CFDictionaryGetValue(theDict, key);
  if (!Value)
  {
    v5 = objc_opt_class();
    v408 = v3;
    if (v5 == objc_opt_class())
      goto LABEL_6;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
      goto LABEL_6;
    objc_msgSend_width(v3, v6, v7, v8);
    v10 = v9;
    objc_msgSend_height(v3, v11, v12, v13);
    v15 = v14;
    objc_msgSend_length(v3, v16, v17, v18);
    v20 = v19;
    objc_msgSend_chamferRadius(v3, v21, v22, v23);
    *(float *)&v25 = v24;
    *(float *)&v24 = v10;
    *(float *)&v26 = v15;
    *(float *)&v27 = v20;
    v31 = (void *)objc_msgSend_cubeWithWidth_height_length_chamferRadius_(VFXParametricModel, v28, v29, v30, v24, v26, v27, v25);
    objc_msgSend_chamferRadius(v3, v32, v33, v34);
    *(float *)&v35 = v35;
    objc_msgSend_setChamferRadius_(v31, v36, v37, v38, v35);
    v42 = objc_msgSend_chamferSegmentCount(v3, v39, v40, v41);
    objc_msgSend_setChamferSegmentCount_(v31, v43, v42, v44);
    v48 = objc_msgSend_widthSegmentCount(v3, v45, v46, v47);
    objc_msgSend_setWidthSegmentCount_(v31, v49, v48, v50);
    v54 = objc_msgSend_heightSegmentCount(v3, v51, v52, v53);
    objc_msgSend_setHeightSegmentCount_(v31, v55, v54, v56);
    v60 = objc_msgSend_lengthSegmentCount(v3, v57, v58, v59);
    objc_msgSend_setLengthSegmentCount_(v31, v61, v60, v62);
    if (!v31)
    {
LABEL_6:
      v63 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v6, v7, v8);
      v67 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v64, v65, v66);
      v429 = 0u;
      v430 = 0u;
      v431 = 0u;
      v432 = 0u;
      v71 = (void *)objc_msgSend_geometrySources(v3, v68, v69, v70);
      v73 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v72, (uint64_t)&v429, (uint64_t)v440, 16);
      if (v73)
      {
        v77 = v73;
        v78 = *(_QWORD *)v430;
        do
        {
          for (i = 0; i != v77; ++i)
          {
            if (*(_QWORD *)v430 != v78)
              objc_enumerationMutation(v71);
            v80 = sub_1B1989538(*(void **)(*((_QWORD *)&v429 + 1) + 8 * i), v74, v75, v76);
            objc_msgSend_addObject_(v63, v81, v80, v82);
          }
          v77 = objc_msgSend_countByEnumeratingWithState_objects_count_(v71, v74, (uint64_t)&v429, (uint64_t)v440, 16);
        }
        while (v77);
      }
      v427 = 0u;
      v428 = 0u;
      v425 = 0u;
      v426 = 0u;
      v83 = (void *)objc_msgSend_geometryElements(v408, v74, v75, v76);
      v85 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v84, (uint64_t)&v425, (uint64_t)v439, 16);
      if (v85)
      {
        v89 = v85;
        v90 = *(_QWORD *)v426;
        do
        {
          for (j = 0; j != v89; ++j)
          {
            if (*(_QWORD *)v426 != v90)
              objc_enumerationMutation(v83);
            v92 = *(void **)(*((_QWORD *)&v425 + 1) + 8 * j);
            v93 = (void *)sub_1B1989754(v92, v86, v87, v88);
            objc_msgSend_pointSize(v92, v94, v95, v96);
            *(float *)&v97 = v97;
            objc_msgSend_setPointSize_(v93, v98, v99, v100, v97);
            objc_msgSend_primitiveRange(v92, v101, v102, v103);
            if (v104)
            {
              v107 = objc_msgSend_primitiveRange(v92, v104, v105, v106);
              objc_msgSend_setPrimitiveRange_(v93, v108, v107, (uint64_t)v108);
            }
            objc_msgSend_minimumPointScreenSpaceRadius(v92, v104, v105, v106);
            *(float *)&v109 = v109;
            objc_msgSend_setMinimumPointScreenSpaceRadius_(v93, v110, v111, v112, v109);
            objc_msgSend_maximumPointScreenSpaceRadius(v92, v113, v114, v115);
            *(float *)&v116 = v116;
            objc_msgSend_setMaximumPointScreenSpaceRadius_(v93, v117, v118, v119, v116);
            objc_msgSend_addObject_(v67, v120, (uint64_t)v93, v121);
          }
          v89 = objc_msgSend_countByEnumeratingWithState_objects_count_(v83, v86, (uint64_t)&v425, (uint64_t)v439, 16);
        }
        while (v89);
      }
      v122 = objc_msgSend_geometrySourceChannels(v408, v86, v87, v88);
      v3 = v408;
      v124 = objc_msgSend_meshWithSources_elements_sourceChannels_(VFXMesh, v123, (uint64_t)v63, (uint64_t)v67, v122);
      v31 = (void *)objc_msgSend_modelWithMesh_(VFXModel, v125, v124, v126);
      v130 = (void *)objc_msgSend_edgeCreasesSource(v408, v127, v128, v129);
      v134 = objc_msgSend_edgeCreasesElement(v408, v131, v132, v133);
      if (v130)
      {
        v138 = (void *)v134;
        if (v134)
        {
          v139 = sub_1B1989538(v130, v135, v136, v137);
          objc_msgSend_setEdgeCreasesSource_(v31, v140, v139, v141);
          v145 = sub_1B1989754(v138, v142, v143, v144);
          objc_msgSend_setEdgeCreasesElement_(v31, v146, v145, v147);
        }
      }
    }
    v406 = v31;
    CFDictionarySetValue(v2, v3, v31);
    v151 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v148, v149, v150);
    v421 = 0u;
    v422 = 0u;
    v423 = 0u;
    v424 = 0u;
    obj = (id)objc_msgSend_materials(v3, v152, v153, v154);
    v156 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v155, (uint64_t)&v421, (uint64_t)v438, 16);
    if (v156)
    {
      v159 = v156;
      v160 = *(_QWORD *)v422;
      v415 = *MEMORY[0x1E0CD5AF0];
      v414 = *MEMORY[0x1E0CD5B10];
      v413 = *MEMORY[0x1E0CD5B00];
      v412 = *MEMORY[0x1E0CD5B18];
      v411 = *MEMORY[0x1E0CD5AF8];
      v410 = *MEMORY[0x1E0CD5B08];
      v409 = *MEMORY[0x1E0CD5B20];
      v417 = v151;
      v418 = v2;
      v416 = *(_QWORD *)v422;
      do
      {
        v161 = 0;
        v419 = v159;
        do
        {
          if (*(_QWORD *)v422 != v160)
            objc_enumerationMutation(obj);
          v162 = *(void **)(*((_QWORD *)&v421 + 1) + 8 * v161);
          v166 = (void *)CFDictionaryGetValue(v2, v162);
          if (!v166)
          {
            v166 = (void *)objc_msgSend_material(VFXMaterial, v163, v164, v165);
            CFDictionarySetValue(v2, v162, v166);
            v170 = objc_msgSend_name(v162, v167, v168, v169);
            objc_msgSend_setName_(v166, v171, v170, v172);
            v176 = (void *)objc_msgSend_lightingModelName(v162, v173, v174, v175);
            if ((objc_msgSend_isEqualToString_(v176, v177, v415, v178) & 1) != 0
              || (objc_msgSend_isEqualToString_(v176, v179, v414, v180) & 1) != 0
              || (objc_msgSend_isEqualToString_(v176, v179, v413, v180) & 1) != 0)
            {
              objc_msgSend_setShadingModel_(v166, v179, 1, v180, v406);
            }
            else
            {
              if ((objc_msgSend_isEqualToString_(v176, v179, v412, v180) & 1) == 0)
              {
                if ((objc_msgSend_isEqualToString_(v176, v269, v411, v270) & 1) != 0
                  || (objc_msgSend_isEqualToString_(v176, v301, v410, v302) & 1) != 0)
                {
                  objc_msgSend_setShadingModel_(v166, v301, 2, v302, v406);
                  goto LABEL_35;
                }
                if (objc_msgSend_isEqualToString_(v176, v301, v409, v302))
                {
                  objc_msgSend_setShadingModel_(v166, v269, 3, v270, v406);
                  goto LABEL_35;
                }
              }
              objc_msgSend_setShadingModel_(v166, v269, 0, v270, v406);
            }
LABEL_35:
            objc_msgSend_shininess(v162, v181, v182, v183);
            *(float *)&v184 = v184;
            objc_msgSend_setShininess_(v166, v185, v186, v187, v184);
            v191 = objc_msgSend_transparencyMode(v162, v188, v189, v190);
            if (v191 == 3)
              objc_msgSend_setTransparencyMode_(v166, v192, 2, v193);
            else
              objc_msgSend_setTransparencyMode_(v166, v192, v191 == 2, v193);
            isLitPerPixel = objc_msgSend_isLitPerPixel(v162, v194, v195, v196);
            objc_msgSend_setLitPerPixel_(v166, v198, isLitPerPixel, v199);
            isDoubleSided = objc_msgSend_isDoubleSided(v162, v200, v201, v202);
            objc_msgSend_setDoubleSided_(v166, v204, isDoubleSided, v205);
            v209 = objc_msgSend_cullMode(v162, v206, v207, v208);
            objc_msgSend_setCullMode_(v166, v210, v209, v211);
            v215 = objc_msgSend_avoidsOverLighting(v162, v212, v213, v214);
            objc_msgSend_setAvoidsOverLighting_(v166, v216, v215, v217);
            v221 = objc_msgSend_fillMode(v162, v218, v219, v220);
            objc_msgSend_setFillMode_(v166, v222, v221, v223);
            objc_msgSend_fresnelExponent(v162, v224, v225, v226);
            *(float *)&v227 = v227;
            objc_msgSend_setFresnelExponent_(v166, v228, v229, v230, v227);
            v234 = objc_msgSend_writesToDepthBuffer(v162, v231, v232, v233);
            objc_msgSend_setWritesToDepthBuffer_(v166, v235, v234, v236);
            v240 = objc_msgSend_readsFromDepthBuffer(v162, v237, v238, v239);
            objc_msgSend_setReadsFromDepthBuffer_(v166, v241, v240, v242);
            v246 = objc_msgSend_colorBufferWriteMask(v162, v243, v244, v245);
            objc_msgSend_setColorBufferWriteMask_(v166, v247, v246, v248);
            v252 = objc_msgSend_blendMode(v162, v249, v250, v251);
            v255 = 2;
            switch(v252)
            {
              case 0:
                v256 = (void *)objc_msgSend_transparent(v162, v253, 2, v254);
                objc_msgSend_contents(v256, v257, v258, v259);
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0)
                {
                  v261 = (void *)objc_msgSend_diffuse(v162, v253, v260, v254);
                  objc_msgSend_contents(v261, v262, v263, v264);
                  objc_opt_class();
                  objc_opt_isKindOfClass();
                  goto LABEL_41;
                }
                v255 = 1;
                goto LABEL_49;
              case 1:
LABEL_49:
                objc_msgSend_setBlendMode_(v166, v253, v255, v254);
                break;
              case 2:
                objc_msgSend_setBlendMode_(v166, v253, 3, v254);
                break;
              case 3:
                objc_msgSend_setBlendMode_(v166, v253, 4, v254);
                break;
              case 4:
                objc_msgSend_setBlendMode_(v166, v253, 5, v254);
                break;
              case 6:
                objc_msgSend_setBlendMode_(v166, v253, 6, v254);
                break;
              default:
LABEL_41:
                objc_msgSend_setBlendMode_(v166, v253, 0, v254);
                break;
            }
            LODWORD(v268) = 0;
            objc_msgSend_setAlphaCutoff_(v166, v265, v266, v267, v268);
            v274 = (void *)objc_msgSend_properties(v162, v271, v272, v273);
            v437[0] = MEMORY[0x1E0C809B0];
            v437[1] = 3221225472;
            v437[2] = sub_1B1989A7C;
            v437[3] = &unk_1E63DA158;
            v437[4] = v166;
            objc_msgSend_enumerateObjectsUsingBlock_(v274, v275, (uint64_t)v437, v276);
            v435 = 0u;
            v436 = 0u;
            v433 = 0u;
            v434 = 0u;
            v280 = (void *)objc_msgSend_customMaterialProperties(v162, v277, v278, v279);
            v282 = objc_msgSend_countByEnumeratingWithState_objects_count_(v280, v281, (uint64_t)&v433, (uint64_t)v441, 16);
            if (v282)
            {
              v285 = v282;
              v286 = *(_QWORD *)v434;
              do
              {
                for (k = 0; k != v285; ++k)
                {
                  if (*(_QWORD *)v434 != v286)
                    objc_enumerationMutation(v280);
                  v288 = *(void **)(*((_QWORD *)&v433 + 1) + 8 * k);
                  v289 = objc_alloc_init(VFXMaterialProperty);
                  sub_1B19886BC(v289, v288, v290, v291);
                  v295 = objc_msgSend_propertyName(v288, v292, v293, v294);
                  objc_msgSend_setValue_forKey_(v166, v296, (uint64_t)v289, v295);

                }
                v285 = objc_msgSend_countByEnumeratingWithState_objects_count_(v280, v297, (uint64_t)&v433, (uint64_t)v441, 16);
              }
              while (v285);
            }
            sub_1B1989804(v166, v162, v283, v284);
            sub_1B19889BC(v166, v162, v298, v299);
            v151 = v417;
            v2 = v418;
            v160 = v416;
            v159 = v419;
          }
          objc_msgSend_addObject_(v151, v163, (uint64_t)v166, v165, v406);
          ++v161;
        }
        while (v161 != v159);
        v303 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v300, (uint64_t)&v421, (uint64_t)v438, 16);
        v159 = v303;
      }
      while (v303);
    }
    v304 = v406;
    objc_msgSend_setMaterials_(v406, v157, (uint64_t)v151, v158, v406);
    v308 = objc_msgSend_name(v408, v305, v306, v307);
    objc_msgSend_setName_(v304, v309, v308, v310);
    v314 = objc_msgSend_name(v304, v311, v312, v313);
    v318 = (void *)objc_msgSend_mesh(v304, v315, v316, v317);
    objc_msgSend_setName_(v318, v319, v314, v320);
    v324 = objc_msgSend_subdivisionLevel(v408, v321, v322, v323);
    objc_msgSend_setSubdivisionLevel_(v304, v325, v324, v326);
    v330 = objc_msgSend_wantsAdaptiveSubdivision(v408, v327, v328, v329);
    objc_msgSend_setWantsAdaptiveSubdivision_(v304, v331, v330, v332);
    v336 = objc_msgSend_tessellator(v408, v333, v334, v335);
    if (v336)
    {
      v339 = (void *)v336;
      v340 = objc_alloc_init(VFXModelTessellator);
      objc_msgSend_tessellationFactorScale(v339, v341, v342, v343);
      *(float *)&v344 = v344;
      objc_msgSend_setTessellationFactorScale_(v340, v345, v346, v347, v344);
      v351 = objc_msgSend_tessellationPartitionMode(v339, v348, v349, v350);
      objc_msgSend_setTessellationPartitionMode_(v340, v352, v351, v353);
      isAdaptive = objc_msgSend_isAdaptive(v339, v354, v355, v356);
      objc_msgSend_setAdaptive_(v340, v358, isAdaptive, v359);
      isScreenSpace = objc_msgSend_isScreenSpace(v339, v360, v361, v362);
      objc_msgSend_setScreenSpace_(v340, v364, isScreenSpace, v365);
      objc_msgSend_edgeTessellationFactor(v339, v366, v367, v368);
      *(float *)&v369 = v369;
      objc_msgSend_setEdgeTessellationFactor_(v340, v370, v371, v372, v369);
      objc_msgSend_insideTessellationFactor(v339, v373, v374, v375);
      *(float *)&v376 = v376;
      objc_msgSend_setInsideTessellationFactor_(v340, v377, v378, v379, v376);
      objc_msgSend_maximumEdgeLength(v339, v380, v381, v382);
      *(float *)&v383 = v383;
      objc_msgSend_setMaximumEdgeLength_(v340, v384, v385, v386, v383);
      v390 = objc_msgSend_smoothingMode(v339, v387, v388, v389);
      objc_msgSend_setSmoothingMode_(v340, v391, v390, v392);
      v393 = v340;
    }
    else
    {
      v393 = 0;
    }
    Value = v407;
    objc_msgSend_setTessellator_(v407, v337, (uint64_t)v393, v338);
    if (objc_msgSend_subdivisionLevel(v407, v394, v395, v396))
    {
      v400 = objc_msgSend__subdivisionSettings(v408, v397, v398, v399);
      objc_msgSend_set_subdivisionSettings_(v407, v401, v400, v402);
    }
    sub_1B1989804(v407, v408, v398, v399);
    sub_1B19889BC(v407, v408, v403, v404);
  }
  return Value;
}

uint64_t sub_1B1989538(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  __CFString **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v43;

  v5 = objc_msgSend_data(a1, a2, a3, a4);
  v9 = (void *)objc_msgSend_semantic(a1, v6, v7, v8);
  if (objc_msgSend_isEqualToString_(v9, v10, *MEMORY[0x1E0CD5A88], v11))
  {
    v15 = VFXMeshSourceSemanticPosition;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A70], v14))
  {
    v15 = VFXMeshSourceSemanticNormal;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A60], v14))
  {
    v15 = VFXMeshSourceSemanticColor;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A80], v14))
  {
    v15 = VFXMeshSourceSemanticTexcoord;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A78], v14))
  {
    v15 = VFXMeshSourceSemanticTangent;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A90], v14))
  {
    v15 = VFXMeshSourceSemanticVertexCrease;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A68], v14))
  {
    v15 = VFXMeshSourceSemanticEdgeCrease;
  }
  else if (objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A58], v14))
  {
    v15 = VFXMeshSourceSemanticBoneWeights;
  }
  else
  {
    if (!objc_msgSend_isEqualToString_(v9, v12, *MEMORY[0x1E0CD5A50], v14))
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: VFXMeshSourceSemanticFromSCNSemantic - unknown semantic"), v13, v14, v16, v17, v18, v19, v43);
      goto LABEL_20;
    }
    v15 = VFXMeshSourceSemanticBoneIndices;
  }
  v9 = *v15;
LABEL_20:
  v20 = objc_msgSend_vectorCount(a1, v12, v13, v14);
  v24 = objc_msgSend_floatComponents(a1, v21, v22, v23);
  v28 = objc_msgSend_componentsPerVector(a1, v25, v26, v27);
  v32 = objc_msgSend_bytesPerComponent(a1, v29, v30, v31);
  v36 = objc_msgSend_dataOffset(a1, v33, v34, v35);
  v40 = objc_msgSend_dataStride(a1, v37, v38, v39);
  return objc_msgSend_meshSourceWithData_semantic_vectorCount_floatComponents_componentsPerVector_bytesPerComponent_dataOffset_dataStride_(VFXMeshSource, v41, v5, (uint64_t)v9, v20, v24, v28, v32, v36, v40);
}

uint64_t sub_1B1989754(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t hasInterleavedIndicesChannels;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v32;

  v5 = objc_msgSend_data(a1, a2, a3, a4);
  v16 = objc_msgSend_primitiveType(a1, v6, v7, v8);
  if (v16 >= 5)
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: VFXMeshPrimitiveTypeFromSCNPrimitiveType - unknown type"), v10, v11, v12, v13, v14, v15, v32);
  v17 = objc_msgSend_primitiveCount(a1, v9, v10, v11);
  v21 = objc_msgSend_indicesChannelCount(a1, v18, v19, v20);
  hasInterleavedIndicesChannels = objc_msgSend_hasInterleavedIndicesChannels(a1, v22, v23, v24);
  v29 = objc_msgSend_bytesPerIndex(a1, v26, v27, v28);
  return objc_msgSend_meshElementWithData_primitiveType_primitiveCount_indicesChannelCount_interleavedIndicesChannels_bytesPerIndex_(VFXMeshElement, v30, v5, v16, v17, v21, hasInterleavedIndicesChannels, v29);
}

void sub_1B1989804(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  objc_class *v25;
  NSString *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[6];
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  char v53;
  _BYTE v54[128];
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_shaderModifiers(a2, (const char *)a2, a3, a4);
  if (objc_msgSend_count(v6, v7, v8, v9))
  {
    v50 = 0;
    v51 = &v50;
    v52 = 0x2020000000;
    v53 = 0;
    v10 = objc_alloc(MEMORY[0x1E0C99E08]);
    v14 = objc_msgSend_count(v6, v11, v12, v13);
    v17 = (void *)objc_msgSend_initWithCapacity_(v10, v15, v14, v16);
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = sub_1B1989B60;
    v49[3] = &unk_1E63DA180;
    v49[4] = v17;
    v49[5] = &v50;
    objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v6, v18, (uint64_t)v49, v19);
    if (*((_BYTE *)v51 + 24))
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        if (objc_msgSend_blendMode(a1, v22, v23, v24) != 1)
          objc_msgSend_setBlendMode_(a1, v20, 1, v21);
      }
      else
      {
        v25 = (objc_class *)objc_opt_class();
        v26 = NSStringFromClass(v25);
      }
    }
    objc_msgSend_setShaderModifiers_(a1, v20, (uint64_t)v17, v21);
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v36 = (void *)objc_msgSend_customMaterialAttributeNames(a2, v33, v34, v35);
    v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v37, (uint64_t)&v45, (uint64_t)v54, 16);
    if (v40)
    {
      v41 = *(_QWORD *)v46;
      do
      {
        for (i = 0; i != v40; ++i)
        {
          if (*(_QWORD *)v46 != v41)
            objc_enumerationMutation(v36);
          v43 = *(_QWORD *)(*((_QWORD *)&v45 + 1) + 8 * i);
          v44 = objc_msgSend_valueForKey_(a2, v38, v43, v39);
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) == 0)
            objc_msgSend_setValue_forKey_(a1, v38, v44, v43);
        }
        v40 = objc_msgSend_countByEnumeratingWithState_objects_count_(v36, v38, (uint64_t)&v45, (uint64_t)v54, 16);
      }
      while (v40);
    }

    _Block_object_dispose(&v50, 8);
  }
}

void sub_1B1989A50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B1989A7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  VFXMaterialProperty *v33;

  v11 = (void *)objc_msgSend_propertyName(a2, (const char *)a2, a3, a4);
  if (v11)
  {
    v19 = (uint64_t)v11;
    if ((objc_msgSend_isEqualToString_(v11, v12, (uint64_t)CFSTR("ambient"), v14) & 1) == 0)
    {
      v22 = (void *)objc_msgSend_propertyWithName_(*(void **)(a1 + 32), v20, v19, v21);
      if (v22)
      {
        sub_1B19886BC(v22, a2, v23, v24);
      }
      else
      {
        v33 = objc_alloc_init(VFXMaterialProperty);
        sub_1B19886BC(v33, a2, v25, v26);
        v27 = *(void **)(a1 + 32);
        v31 = objc_msgSend_propertyName(a2, v28, v29, v30);
        objc_msgSend_setValue_forKey_(v27, v32, (uint64_t)v33, v31);

      }
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unnamed source material property"), v13, v14, v15, v16, v17, v18, a9);
  }
}

uint64_t sub_1B1989B60(uint64_t a1, void *a2)
{
  void *v4;
  const char *v5;
  void *v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  __CFString **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;

  v4 = (void *)_SCNShadableConvertShaderToMetalIfNeeded();
  v6 = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v4, v5, (uint64_t)CFSTR("scn_frame"), (uint64_t)CFSTR("vfx_frame"));
  v8 = (void *)objc_msgSend_stringByReplacingOccurrencesOfString_withString_(v6, v7, (uint64_t)CFSTR("scn_node"), (uint64_t)CFSTR("vfx_node"));
  if (objc_msgSend_containsString_(v8, v9, (uint64_t)CFSTR("#pragma transparent"), v10))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  if ((objc_msgSend_isEqualToString_(a2, v11, *MEMORY[0x1E0CD5BC8], v12) & 1) != 0)
  {
    v15 = VFXShaderModifierEntryPointSurface;
  }
  else if ((objc_msgSend_isEqualToString_(a2, v13, *MEMORY[0x1E0CD5BB0], v14) & 1) != 0)
  {
    v15 = VFXShaderModifierEntryPointFragment;
  }
  else if ((objc_msgSend_isEqualToString_(a2, v13, *MEMORY[0x1E0CD5BB8], v16) & 1) != 0)
  {
    v15 = VFXShaderModifierEntryPointVertex;
  }
  else
  {
    result = objc_msgSend_isEqualToString_(a2, v13, *MEMORY[0x1E0CD5BC0], v17);
    if (!(_DWORD)result)
      return result;
    v15 = &VFXShaderModifierEntryPointLighting;
  }
  return objc_msgSend_setValue_forKey_(*(void **)(a1 + 32), v13, (uint64_t)v8, (uint64_t)*v15);
}

void *sub_1B1989C84(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v4;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  const void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t i;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  int32x2_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  void *v68;
  const char *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[128];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v4 = a3;
  v7 = (void *)objc_msgSend_sourceObject(a1, a2, a3, a4);
  v11 = (void *)objc_msgSend_options(a1, v8, v9, v10);
  v14 = (void *)objc_msgSend_objectForKeyedSubscript_(v11, v12, *MEMORY[0x1E0CD5B60], v13);
  if ((objc_msgSend_isEqualToString_(v14, v15, *MEMORY[0x1E0CD5B58], v16) & 1) != 0)
  {
    v19 = 0;
  }
  else if (objc_msgSend_isEqualToString_(v14, v17, *MEMORY[0x1E0CD5B50], v18))
  {
    v19 = 2;
  }
  else
  {
    v19 = 1;
  }
  v21 = (void *)objc_msgSend_objectForKeyedSubscript_(v11, v17, *MEMORY[0x1E0CD5B38], v18);
  if (v21)
    v25 = objc_msgSend_BOOLValue(v21, v22, v23, v24) ^ 1;
  else
    v25 = 0;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
  {
    v26 = sub_1B19874F0(v7, a2, v4);
    v28 = (void *)objc_msgSend_shapeWithNode_flattened_(VFXPhysicsShape, v27, v26, v25);
  }
  else
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      v31 = sub_1B1988B04(v7, (CFDictionaryRef)a2);
      v28 = (void *)objc_msgSend_shapeWithModel_(VFXPhysicsShape, v32, (uint64_t)v31, v33);
    }
    else
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v37 = (void *)objc_msgSend_array(MEMORY[0x1E0C99DE8], v34, v35, v36);
        v76 = 0u;
        v77 = 0u;
        v78 = 0u;
        v79 = 0u;
        v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v38, (uint64_t)&v76, (uint64_t)v80, 16);
        if (v39)
        {
          v43 = v39;
          v44 = *(_QWORD *)v77;
          do
          {
            for (i = 0; i != v43; ++i)
            {
              if (*(_QWORD *)v77 != v44)
                objc_enumerationMutation(v7);
              v46 = sub_1B1989C84(*(_QWORD *)(*((_QWORD *)&v76 + 1) + 8 * i), a2, v4);
              if (v46)
                objc_msgSend_addObject_(v37, v47, v46, v48);
            }
            v43 = objc_msgSend_countByEnumeratingWithState_objects_count_(v7, v47, (uint64_t)&v76, (uint64_t)v80, 16);
          }
          while (v43);
        }
        v49 = objc_msgSend_transforms(a1, v40, v41, v42);
        v28 = (void *)objc_msgSend_shapeWithShapes_transforms_(VFXPhysicsShape, v50, (uint64_t)v37, v49);
      }
      else
      {
        if (v7)
        {
          v20 = 0;
          objc_msgSend_setType_(0, v34, v19, v36);
          goto LABEL_28;
        }
        v28 = (void *)objc_msgSend_shapeWithModel_(VFXPhysicsShape, v34, 0, v36);
      }
    }
  }
  v20 = v28;
  objc_msgSend_setType_(v28, v29, v19, v30);
LABEL_28:
  v53 = objc_msgSend_objectForKeyedSubscript_(v11, v51, *MEMORY[0x1E0CD5B48], v52);
  if (v53)
  {
    v56 = (void *)v53;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      objc_msgSend_floatValue(v56, v57, v58, v59);
      objc_msgSend_setScale_(v20, v61, v62, v63, *(double *)vdupq_lane_s32(v60, 0).i64);
    }
    else
    {
      objc_msgSend_float3Value(v56, v57, v58, v59);
      objc_msgSend_setScale_(v20, v64, v65, v66, v67);
    }
  }
  v68 = (void *)objc_msgSend_objectForKeyedSubscript_(v11, v54, *MEMORY[0x1E0CD5B40], v55);
  if (v68)
  {
    objc_msgSend_floatValue(v68, v69, v70, v71);
    objc_msgSend_setMargin_(v20, v72, v73, v74);
  }
  return v20;
}

uint64_t sub_1B1989FB0()
{
  if (qword_1ED4CEC88 != -1)
    dispatch_once(&qword_1ED4CEC88, &unk_1E63D1390);
  return qword_1ED4CEC90;
}

double sub_1B1989FF0()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double result;

  if (!qword_1ED4CEC90)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEC90);
    qword_1ED4CEC90 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("fieldType"), 0x40u, 2, 0, 0, 0, v2, v3);
    sub_1B19C326C(CFSTR("strength"), 0x4Cu, 1, 0, 0, 0, v4, v5);
    sub_1B19C326C(CFSTR("dampening"), 0x50u, 1, 0, 0, 0, v6, v7);
    sub_1B19C326C(CFSTR("noiseAmount"), 0x54u, 1, 0, 0, 0, v8, v9);
    sub_1B19C326C(CFSTR("noiseSeed"), 0x58u, 2, 0, 0, 0, v10, v11);
    sub_1B19C326C(CFSTR("falloffExponent"), 0x80u, 1, 0, 0, 0, v12, v13);
    sub_1B19C326C(CFSTR("halfExtent"), 0x90u, 8, 0, 0, 0, v14, v15);
    sub_1B19C326C(CFSTR("offset"), 0xA0u, 8, 0, 0, 0, v16, v17);
    sub_1B19C326C(CFSTR("smoothness"), 0xB0u, 1, 0, 0, 0, v18, v19);
    sub_1B19C326C(CFSTR("speed"), 0xB4u, 1, 0, 0, 0, v20, v21);
    sub_1B19C3258();
    qword_1ED4BDF98 = (uint64_t)sub_1B198AD14;
    *(_QWORD *)&result = 0x1B198BAD8;
    xmmword_1ED4BDF88 = xmmword_1E63D2F50;
    qword_1ED4BDFD8 = (uint64_t)sub_1B198BB08;
  }
  return result;
}

void sub_1B198A24C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(_QWORD *)(a1 + 64) != v8)
  {
    *(_QWORD *)(a1 + 64) = v8;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B198A2BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  v9 = *(_QWORD **)(a1 + 192);
  if (v9)
  {
    v10 = sub_1B17C6244(v9, a2, a3, a4, a5, a6, a7, a8);
    if (v10)
      sub_1B187A92C(v10, *(void **)(a1 + 192), v11, v12, v13, v14, v15, v16);
  }
}

uint64_t sub_1B198A324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(unsigned int *)(a1 + 64);
}

void sub_1B198A36C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(float *)(a1 + 76) != a9)
  {
    *(float *)(a1 + 76) = a9;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B198A3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(float *)(a1 + 76);
}

void sub_1B198A42C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(float *)(a1 + 128) != a9)
  {
    *(float *)(a1 + 128) = a9;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B198A4A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(float *)(a1 + 128);
}

void sub_1B198A4EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(unsigned __int8 *)(a1 + 72) != v8)
  {
    *(_BYTE *)(a1 + 72) = v8;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B198A558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(unsigned __int8 *)(a1 + 72);
}

void sub_1B198A5A0(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  uint32x4_t v10;
  float32x4_t v11;

  if (!a1)
  {
    v11 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
    a9 = v11;
  }
  v10 = (uint32x4_t)vceqq_f32(a1[9], a9);
  v10.i32[3] = v10.i32[2];
  if ((vminvq_u32(v10) & 0x80000000) == 0)
  {
    a1[9] = a9;
    sub_1B198A2BC((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

__n128 sub_1B198A61C(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return a1[9];
}

void sub_1B198A664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(_QWORD *)(a1 + 112) != v8)
  {
    *(_QWORD *)(a1 + 112) = v8;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B198A6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(unsigned int *)(a1 + 112);
}

void sub_1B198A71C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  uint32x4_t v10;
  float32x4_t v11;

  if (!a1)
  {
    v11 = a9;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
    a9 = v11;
  }
  v10 = (uint32x4_t)vceqq_f32(a1[10], a9);
  v10.i32[3] = v10.i32[2];
  if ((vminvq_u32(v10) & 0x80000000) == 0)
  {
    a1[10] = a9;
    sub_1B198A2BC((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

__n128 sub_1B198A798(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return a1[10];
}

void sub_1B198A7E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(_QWORD *)(a1 + 96) != a2)
  {
    *(_QWORD *)(a1 + 96) = a2;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B198A84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(_QWORD *)(a1 + 96);
}

void sub_1B198A894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(_QWORD *)(a1 + 120) != v8)
  {
    *(_QWORD *)(a1 + 120) = v8;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B198A904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(unsigned int *)(a1 + 120);
}

void sub_1B198A94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(float *)(a1 + 176) != a9)
  {
    *(float *)(a1 + 176) = a9;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B198A9C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(float *)(a1 + 176);
}

void sub_1B198AA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(float *)(a1 + 180) != a9)
  {
    *(float *)(a1 + 180) = a9;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B198AA84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(float *)(a1 + 180);
}

void sub_1B198AACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (*(_QWORD *)(a1 + 104) != v8)
  {
    *(_QWORD *)(a1 + 104) = v8;
    sub_1B198A2BC(a1, a2, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B198AB3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1B198AB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  return a1 + 64;
}

void sub_1B198ABCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  if (a2 && *(_QWORD *)(a1 + 192))
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXForceFieldSetOwner - multiple owners"), a3, a4, a5, a6, a7, a8, v10);
  *(_QWORD *)(a1 + 192) = a2;
}

void sub_1B198AC34(_OWORD *a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"field");
  v10 = *a2;
  v11 = a2[1];
  v12 = a2[3];
  a1[6] = a2[2];
  a1[7] = v12;
  a1[4] = v10;
  a1[5] = v11;
  v13 = a2[4];
  v14 = a2[5];
  v15 = a2[7];
  a1[10] = a2[6];
  a1[11] = v15;
  a1[8] = v13;
  a1[9] = v14;
  sub_1B198A2BC((uint64_t)a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
}

CFStringRef sub_1B198ACAC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const __CFAllocator *v8;

  v8 = CFGetAllocator(a1);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v2, v3, v4, v5, v6, v7, (uint64_t)"field");
  return CFStringCreateWithFormat(v8, 0, CFSTR("<CFXForceField %p> Type:%d"), a1, a1[8]);
}

__CFArray *sub_1B198AD14(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  __CFDictionary *v4;
  CFNumberRef v5;
  CFNumberRef v6;
  CFNumberRef v7;
  __CFDictionary *v8;
  CFNumberRef v9;
  CFNumberRef v10;
  CFNumberRef v11;
  __CFDictionary *v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  __CFDictionary *v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFNumberRef v19;
  __CFDictionary *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFNumberRef v23;
  __CFDictionary *v24;
  CFNumberRef v25;
  CFNumberRef v26;
  CFNumberRef v27;
  const CFDictionaryValueCallBacks *v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  __CFDictionary *v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  __CFDictionary *v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFNumberRef v44;
  const CFDictionaryKeyCallBacks *v45;
  __CFDictionary *v46;
  CFNumberRef v47;
  CFNumberRef v48;
  CFNumberRef v49;
  __CFDictionary *v50;
  CFNumberRef v51;
  CFNumberRef v52;
  CFNumberRef v53;
  __CFDictionary *v54;
  CFNumberRef v55;
  CFNumberRef v56;
  CFNumberRef v57;
  __CFDictionary *v58;
  CFNumberRef v59;
  CFNumberRef v60;
  CFNumberRef v61;
  __CFDictionary *v62;
  CFNumberRef v63;
  CFNumberRef v64;
  CFNumberRef v65;
  uint64_t v67;
  int v68;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 2;
  v67 = a1 + 64;
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v7 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v4, CFSTR("name"), CFSTR("fieldType"));
  CFDictionarySetValue(v4, CFSTR("type"), v5);
  CFDictionarySetValue(v4, CFSTR("address"), v7);
  CFDictionarySetValue(v4, CFSTR("semantic"), v6);
  CFArrayAppendValue(Mutable, v4);
  CFRelease(v6);
  CFRelease(v4);
  CFRelease(v7);
  CFRelease(v5);
  v8 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 3;
  v67 = a1 + 72;
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v11 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v8, CFSTR("name"), CFSTR("active"));
  CFDictionarySetValue(v8, CFSTR("type"), v9);
  CFDictionarySetValue(v8, CFSTR("address"), v11);
  CFDictionarySetValue(v8, CFSTR("semantic"), v10);
  CFArrayAppendValue(Mutable, v8);
  CFRelease(v10);
  CFRelease(v8);
  CFRelease(v11);
  CFRelease(v9);
  v12 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 1;
  v67 = a1 + 76;
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v15 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v12, CFSTR("name"), CFSTR("strength"));
  CFDictionarySetValue(v12, CFSTR("type"), v13);
  CFDictionarySetValue(v12, CFSTR("address"), v15);
  CFDictionarySetValue(v12, CFSTR("semantic"), v14);
  CFArrayAppendValue(Mutable, v12);
  CFRelease(v14);
  CFRelease(v12);
  CFRelease(v15);
  CFRelease(v13);
  v16 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 1;
  v67 = a1 + 80;
  v17 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v19 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v16, CFSTR("name"), CFSTR("dampening"));
  CFDictionarySetValue(v16, CFSTR("type"), v17);
  CFDictionarySetValue(v16, CFSTR("address"), v19);
  CFDictionarySetValue(v16, CFSTR("semantic"), v18);
  CFArrayAppendValue(Mutable, v16);
  CFRelease(v18);
  CFRelease(v16);
  CFRelease(v19);
  CFRelease(v17);
  v20 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 1;
  v67 = a1 + 84;
  v21 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v23 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v20, CFSTR("name"), CFSTR("noiseAmount"));
  CFDictionarySetValue(v20, CFSTR("type"), v21);
  CFDictionarySetValue(v20, CFSTR("address"), v23);
  CFDictionarySetValue(v20, CFSTR("semantic"), v22);
  CFArrayAppendValue(Mutable, v20);
  CFRelease(v22);
  CFRelease(v20);
  CFRelease(v23);
  CFRelease(v21);
  v24 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 2;
  v67 = a1 + 88;
  v25 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v27 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v24, CFSTR("name"), CFSTR("noiseSeed"));
  CFDictionarySetValue(v24, CFSTR("type"), v25);
  CFDictionarySetValue(v24, CFSTR("address"), v27);
  CFDictionarySetValue(v24, CFSTR("semantic"), v26);
  CFArrayAppendValue(Mutable, v24);
  CFRelease(v26);
  CFRelease(v24);
  CFRelease(v27);
  CFRelease(v25);
  v28 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v29 = CFDictionaryCreateMutable(0, 4, v3, MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 2;
  v67 = a1 + 96;
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v32 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v29, CFSTR("name"), CFSTR("categoryBitMask"));
  CFDictionarySetValue(v29, CFSTR("type"), v30);
  CFDictionarySetValue(v29, CFSTR("address"), v32);
  CFDictionarySetValue(v29, CFSTR("semantic"), v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  v33 = CFDictionaryCreateMutable(0, 4, v3, v28);
  v68 = 0;
  valuePtr = 2;
  v67 = a1 + 104;
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v36 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v33, CFSTR("name"), CFSTR("shape"));
  CFDictionarySetValue(v33, CFSTR("type"), v34);
  CFDictionarySetValue(v33, CFSTR("address"), v36);
  CFDictionarySetValue(v33, CFSTR("semantic"), v35);
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  v37 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v28);
  v68 = 0;
  valuePtr = 2;
  v67 = a1 + 112;
  v38 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v39 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v40 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v37, CFSTR("name"), CFSTR("scope"));
  CFDictionarySetValue(v37, CFSTR("type"), v38);
  CFDictionarySetValue(v37, CFSTR("address"), v40);
  CFDictionarySetValue(v37, CFSTR("semantic"), v39);
  CFArrayAppendValue(Mutable, v37);
  CFRelease(v39);
  CFRelease(v37);
  CFRelease(v40);
  CFRelease(v38);
  v41 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v28);
  v68 = 0;
  valuePtr = 2;
  v67 = a1 + 120;
  v42 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v43 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v44 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v41, CFSTR("name"), CFSTR("cullMode"));
  CFDictionarySetValue(v41, CFSTR("type"), v42);
  CFDictionarySetValue(v41, CFSTR("address"), v44);
  CFDictionarySetValue(v41, CFSTR("semantic"), v43);
  CFArrayAppendValue(Mutable, v41);
  CFRelease(v43);
  CFRelease(v41);
  CFRelease(v44);
  CFRelease(v42);
  v45 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v46 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], v28);
  v68 = 0;
  valuePtr = 1;
  v67 = a1 + 128;
  v47 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v48 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v49 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v46, CFSTR("name"), CFSTR("falloffExponent"));
  CFDictionarySetValue(v46, CFSTR("type"), v47);
  CFDictionarySetValue(v46, CFSTR("address"), v49);
  CFDictionarySetValue(v46, CFSTR("semantic"), v48);
  CFArrayAppendValue(Mutable, v46);
  CFRelease(v48);
  CFRelease(v46);
  CFRelease(v49);
  CFRelease(v47);
  v50 = CFDictionaryCreateMutable(0, 4, v45, v28);
  v68 = 0;
  valuePtr = 8;
  v67 = a1 + 144;
  v51 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v52 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v53 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v50, CFSTR("name"), CFSTR("halfExtent"));
  CFDictionarySetValue(v50, CFSTR("type"), v51);
  CFDictionarySetValue(v50, CFSTR("address"), v53);
  CFDictionarySetValue(v50, CFSTR("semantic"), v52);
  CFArrayAppendValue(Mutable, v50);
  CFRelease(v52);
  CFRelease(v50);
  CFRelease(v53);
  CFRelease(v51);
  v54 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 8;
  v67 = a1 + 160;
  v55 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v56 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v57 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v54, CFSTR("name"), CFSTR("offset"));
  CFDictionarySetValue(v54, CFSTR("type"), v55);
  CFDictionarySetValue(v54, CFSTR("address"), v57);
  CFDictionarySetValue(v54, CFSTR("semantic"), v56);
  CFArrayAppendValue(Mutable, v54);
  CFRelease(v56);
  CFRelease(v54);
  CFRelease(v57);
  CFRelease(v55);
  v58 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 1;
  v67 = a1 + 176;
  v59 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v60 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v61 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v58, CFSTR("name"), CFSTR("smoothness"));
  CFDictionarySetValue(v58, CFSTR("type"), v59);
  CFDictionarySetValue(v58, CFSTR("address"), v61);
  CFDictionarySetValue(v58, CFSTR("semantic"), v60);
  CFArrayAppendValue(Mutable, v58);
  CFRelease(v60);
  CFRelease(v58);
  CFRelease(v61);
  CFRelease(v59);
  v62 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v68 = 0;
  valuePtr = 1;
  v67 = a1 + 180;
  v63 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v64 = CFNumberCreate(0, kCFNumberSInt32Type, &v68);
  v65 = CFNumberCreate(0, kCFNumberLongType, &v67);
  CFDictionarySetValue(v62, CFSTR("name"), CFSTR("speed"));
  CFDictionarySetValue(v62, CFSTR("type"), v63);
  CFDictionarySetValue(v62, CFSTR("address"), v65);
  CFDictionarySetValue(v62, CFSTR("semantic"), v64);
  CFArrayAppendValue(Mutable, v62);
  CFRelease(v64);
  CFRelease(v62);
  CFRelease(v65);
  CFRelease(v63);
  return Mutable;
}

void sub_1B198BAD8(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  memcpy(__dst, __src, __n);
  sub_1B198A2BC(a1, v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B198BB08(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;

  v10 = (const void *)sub_1B193E634(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (sub_1B17987F8(v10, a2))
    return a1;
  else
    return 0;
}

uint64_t sub_1B198C570(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;

  result = objc_msgSend__srcAssociatedNode_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
  if (!result)
  {
    v10 = objc_msgSend_parentNode(a2, v7, v8, v9);
    result = objc_msgSend__srcAssociatedNode_(*(void **)(a1 + 32), v11, v10, v12);
    if (result)
      return objc_msgSend_addOperation_src_dst_(*(void **)(a1 + 32), v13, 0, (uint64_t)a2, result);
  }
  return result;
}

uint64_t sub_1B198C5D4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;

  result = objc_msgSend__dstHasAssociatedNode_(*(void **)(a1 + 32), a2, (uint64_t)a2, a4);
  if ((result & 1) == 0)
    return objc_msgSend_addOperation_src_dst_(*(void **)(a1 + 32), v7, 1, (uint64_t)a2, a2);
  return result;
}

uint64_t sub_1B198C714(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1E0DE7D20](a3, sel__syncNode_with_, a2, a1);
}

void sub_1B198CA20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v6 = atomic_load((unsigned __int8 *)&qword_1EEF66C20);
  v7 = &qword_1EEF66000;
  if ((v6 & 1) == 0)
  {
    v10 = a2;
    v11 = a3;
    v9 = __cxa_guard_acquire(&qword_1EEF66C20);
    v7 = &qword_1EEF66000;
    a2 = v10;
    a3 = v11;
    if (v9)
    {
      byte_1EEF66C18 = 1;
      __cxa_guard_release(&qword_1EEF66C20);
      v7 = &qword_1EEF66000;
      a2 = v10;
      a3 = v11;
    }
  }
  if (*((_BYTE *)v7 + 3096))
    v8 = 0x7E14DD3412D33777;
  else
    v8 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a4, v8, 0);
  *(_QWORD *)a1 = &off_1E63CE6A8;
  *(_WORD *)(a1 + 384) = *(_WORD *)(a4 + 24);
}

void sub_1B198CAD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;

  v5 = sub_1B1815BE8(*(_QWORD *)(a1 + 368), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Overlay", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/OverlayPass.mm", 19, v5 | 0x300000000);
  if (*(_BYTE *)(a1 + 384))
  {
    v13 = sub_1B1814484(*(_QWORD *)(a1 + 368), 0, v7, v8, v9, v10, v11, v12);
    v14 = (_QWORD *)v13;
    if (v13)
    {
      sub_1B17FD4C4(v13);
      sub_1B17F942C(v14, v15, v16, v17, v18, v19, v20, v21);
    }
    if (*(_BYTE *)(a1 + 384))
      goto LABEL_6;
  }
  if (*(_BYTE *)(a1 + 385))
  {
LABEL_6:
    v22 = (void *)sub_1B1814A78(*(_QWORD *)(a1 + 368), v6, v7, v8, v9, v10, v11, v12);
    objc_msgSend__endImGuiFrameAndRender(v22, v23, v24, v25);
  }
  prof_endFlame();
}

void sub_1B198CB64(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B198CB78(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (!(*(unsigned __int8 *)(a2 + 24) | *(unsigned __int8 *)(a2 + 25)))
    return 0;
  v6 = sub_1B198CBF0(a1, a2);
  CFX::RG::Pass::renderTo(v6, a3, 0x100000001, 0);
  if (a4)
    CFX::RG::Pass::renderTo(v6, a4, 0x200000001, -1);
  return v6;
}

uint64_t sub_1B198CBF0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  sub_1B198CC68(v7[0], v4, v7, a2);
  v7[0] = v5;
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B198CC44(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B198CC68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a1;
  v7[1] = a2;
  v6 = sub_1B179C1C0(v7, 0x188u, 8u);
  sub_1B198CA20(v6, *a3, a3[1], a4);
}

uint64_t (*sub_1B198CCB4(int a1, int a2))(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  uint64_t (*result)(uint64_t, int, uint64_t, int, unsigned int);
  void *v3;
  void *v4;
  BOOL v5;

  if (a1 <= 21)
  {
    switch(a1)
    {
      case 7:
        v3 = sub_1B198D22C;
        if (a2 != 39)
          v3 = 0;
        v4 = sub_1B198D1C8;
        v5 = a2 == 35;
        break;
      case 8:
        v3 = sub_1B198D2F4;
        if (a2 != 23)
          v3 = 0;
        v4 = sub_1B198D290;
        v5 = a2 == 22;
        break;
      case 9:
        v3 = sub_1B198D368;
        if (a2 != 27)
          v3 = 0;
        v4 = sub_1B198D358;
        v5 = a2 == 26;
        break;
      default:
        return 0;
    }
LABEL_30:
    if (v5)
      return (uint64_t (*)(uint64_t, int, uint64_t, int, unsigned int))v4;
    else
      return (uint64_t (*)(uint64_t, int, uint64_t, int, unsigned int))v3;
  }
  else
  {
    switch(a1)
    {
      case 22:
        if (a2 != 8)
          return 0;
        return sub_1B198CE00;
      case 23:
        if (a2 != 8)
          return 0;
        return sub_1B198D090;
      case 24:
      case 25:
        return 0;
      case 26:
        v3 = sub_1B198CF18;
        if (a2 != 9)
          v3 = 0;
        v4 = sub_1B198CE94;
        goto LABEL_23;
      case 27:
        v3 = sub_1B198D014;
        if (a2 != 9)
          v3 = 0;
        v4 = sub_1B198CF8C;
LABEL_23:
        v5 = a2 == 8;
        goto LABEL_30;
      default:
        if (a1 != 35)
        {
          if (a1 == 39 && a2 == 7)
            return sub_1B198D178;
          return 0;
        }
        if (a2 != 7)
          return 0;
        result = sub_1B198D128;
        break;
    }
  }
  return result;
}

uint64_t sub_1B198CE00(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v14;
  float32x4_t v15;
  int8x16_t v16;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    __asm
    {
      FMOV            V1.4S, #-1.0
      FMOV            V2.4S, #1.0
    }
    do
    {
      v14 = a3 + v5;
      v15.i64[0] = *(_QWORD *)v14;
      v15.i32[2] = *(_DWORD *)(v14 + 8);
      v15.i32[3] = 1.0;
      v16 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v15, _Q1), _Q2), (float32x4_t)xmmword_1B2268A90)), (int8x16_t)xmmword_1B2268AA0);
      LODWORD(v14) = v16.i32[0] | (v16.i32[1] << 10);
      *(uint32x2_t *)v16.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL), (uint32x2_t)0x1E00000014);
      *(_DWORD *)(result + v6) = v14 | v16.i32[0] | v16.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198CE94(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  int8x16_t v9;
  uint64_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int8x16_t v13;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      v10 = a3 + v5;
      v11.i64[0] = *(_QWORD *)v10;
      v11.i64[1] = *(unsigned int *)(v10 + 8);
      v12.i64[0] = 0x3F0000003F000000;
      v12.i64[1] = 0x3F0000003F000000;
      v13 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32(v12, v8, v11)), v9);
      LODWORD(v10) = v13.i32[0] | (v13.i32[1] << 8);
      *(uint32x2_t *)v13.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v10 | v13.i32[0] | v13.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198CF18(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  int8x16_t v11;
  __int32 v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x437F0000u);
    v9.i64[0] = 0xFF000000FFLL;
    v9.i64[1] = 0xFF000000FFLL;
    do
    {
      v10.i64[0] = 0x3F0000003F000000;
      v10.i64[1] = 0x3F0000003F000000;
      v11 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32(v10, v8, *(float32x4_t *)(a3 + v5))), v9);
      v12 = v11.i32[0] | (v11.i32[1] << 8);
      *(uint32x2_t *)v11.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v12 | v11.i32[0] | v11.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198CF8C(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v13;
  int8x16_t v14;
  uint64_t v15;
  float32x4_t v16;
  int8x16_t v17;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    __asm { FMOV            V0.4S, #-1.0 }
    v13 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    do
    {
      v15 = a3 + v5;
      v16.i64[0] = *(_QWORD *)v15;
      v16.i64[1] = *(unsigned int *)(v15 + 8);
      v17 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q0, (int8x16_t)vcgezq_f32(v16)), v13, v16)), v14);
      LODWORD(v15) = v17.i32[0] | (v17.i32[1] << 8);
      *(uint32x2_t *)v17.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v15 | v17.i32[0] | v17.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D014(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v13;
  int8x16_t v14;
  int8x16_t v15;
  __int32 v16;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    __asm { FMOV            V0.4S, #-1.0 }
    v13 = (float32x4_t)vdupq_n_s32(0x42FF0000u);
    v14.i64[0] = 0xFF000000FFLL;
    v14.i64[1] = 0xFF000000FFLL;
    do
    {
      v15 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q0, (int8x16_t)vcgezq_f32(*(float32x4_t *)(a3 + v5))), v13, *(float32x4_t *)(a3 + v5))), v14);
      v16 = v15.i32[0] | (v15.i32[1] << 8);
      *(uint32x2_t *)v15.i8 = vshl_u32((uint32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (uint32x2_t)0x1800000010);
      *(_DWORD *)(result + v6) = v16 | v15.i32[0] | v15.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D090(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  int32x4_t v16;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    __asm { FMOV            V2.4S, #1.0 }
    do
    {
      v13 = a3 + v5;
      v14.i64[0] = *(_QWORD *)v13;
      v14.i32[2] = *(_DWORD *)(v13 + 8);
      v14.i32[3] = 1.0;
      v15.i64[0] = 0x3F0000003F000000;
      v15.i64[1] = 0x3F0000003F000000;
      v16 = vcvtq_s32_f32(vmlaq_f32(v15, (float32x4_t)xmmword_1B2268AB0, vminnmq_f32(vmaxnmq_f32(v14, (float32x4_t)0), _Q2)));
      v15.i32[0] = vmovn_s32(v16).u32[0];
      *(uint32x2_t *)v16.i8 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0x1E00000014);
      *(_DWORD *)(result + v6) = v15.u16[0] | (v15.u16[1] << 10) | v16.i32[0] | v16.i32[1];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D128(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x2_t v8;
  _WORD *v9;
  int32x2_t v10;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x2_t)vdup_n_s32(0x46FFFE00u);
    do
    {
      v9 = (_WORD *)(result + v6);
      v10 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)(a3 + v5), v8));
      *v9 = v10.i16[0];
      v9[1] = v10.i16[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D178(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x2_t v8;
  _WORD *v9;
  int32x2_t v10;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x2_t)vdup_n_s32(0x46FFFE00u);
    do
    {
      v9 = (_WORD *)(result + v6);
      v10 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)(a3 + v5), v8));
      *v9 = v10.i16[0];
      v9[1] = v10.i16[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D1C8(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  __int16 *v11;
  int32x2_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = vdup_n_s32(0x4B400000u);
    v9 = (float32x2_t)vdup_n_s32(0xCB400000);
    v10 = (float32x2_t)vdup_n_s32(0x38000100u);
    do
    {
      v11 = (__int16 *)(a3 + v5);
      v12.i32[0] = *v11;
      v12.i32[1] = v11[1];
      *(float32x2_t *)(result + v6) = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v12, v8), v9), v10);
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D22C(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int32x2_t v8;
  float32x2_t v9;
  float32x2_t v10;
  __int16 *v11;
  int32x2_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = vdup_n_s32(0x4B400000u);
    v9 = (float32x2_t)vdup_n_s32(0xCB400000);
    v10 = (float32x2_t)vdup_n_s32(0x38000100u);
    do
    {
      v11 = (__int16 *)(a3 + v5);
      v12.i32[0] = *v11;
      v12.i32[1] = v11[1];
      *(float32x2_t *)(result + v6) = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v12, v8), v9), v10);
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D290(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  const float *v9;
  uint32x4_t v10;
  float32x4_t v11;
  uint64_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x3B004020u);
    do
    {
      v9 = (const float *)(a3 + v5);
      v10 = (uint32x4_t)vld1q_dup_f32(v9);
      v11 = vmulq_f32(vcvtq_f32_s32(vshlq_s32((int32x4_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2268AC0), (int32x4_t)xmmword_1B2268AD0)), v8);
      v12 = result + v6;
      *(_QWORD *)v12 = v11.i64[0];
      *(_DWORD *)(v12 + 8) = v11.i32[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B198D2F4(uint64_t result, int a2, uint64_t a3, int a4, unsigned int a5)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  float32x4_t v8;
  const float *v9;
  uint32x4_t v10;
  float32x4_t v11;
  uint64_t v12;

  if (a5)
  {
    v5 = 0;
    v6 = 0;
    v7 = a5;
    v8 = (float32x4_t)vdupq_n_s32(0x3A802008u);
    do
    {
      v9 = (const float *)(a3 + v5);
      v10 = (uint32x4_t)vld1q_dup_f32(v9);
      v11 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v10, (uint32x4_t)xmmword_1B2268AE0), (int8x16_t)xmmword_1B2268AA0)), v8);
      v12 = result + v6;
      *(_QWORD *)v12 = v11.i64[0];
      *(_DWORD *)(v12 + 8) = v11.i32[2];
      v6 += a2;
      v5 += a4;
      --v7;
    }
    while (v7);
  }
  return result;
}

void sub_1B198D358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: not implemented"), a3, a4, a5, a6, a7, a8, a9);
}

void sub_1B198D368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: not implemented"), a3, a4, a5, a6, a7, a8, a9);
}

uint64_t sub_1B198D378(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v8 = a2;
  if (sub_1B179E6DC(a1, a2, a3, a4, a5, a6, a7, a8))
    v17 = sub_1B179E6DC(v8, v10, v11, v12, v13, v14, v15, v16);
  else
    v17 = 0;
  if (sub_1B198CCB4(a1, v8))
    return 1;
  else
    return v17;
}

void sub_1B198D3D0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int16 v8;
  unsigned __int16 v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t (*v15)(uint64_t, int, uint64_t, int, unsigned int);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  unsigned int v39;
  unsigned int v40;
  float32x4_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = a4;
  v10 = a2;
  v12 = a2 >> 16;
  v13 = HIDWORD(a2);
  v14 = a4 >> 16;
  if (HIDWORD(a2) != HIDWORD(a4))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. src and dst count must be equal"), a3, a4, a5, a6, a7, a8, (uint64_t)"dst.count == src.count");
  v15 = sub_1B198CCB4((__int16)v12, (__int16)v14);
  if (v15)
  {
    v15(a1, v10, a3, v8, v13);
  }
  else if (sub_1B179E6DC((__int16)v12, v16, v17, v18, v19, v20, v21, v22)
         && sub_1B179E6DC((__int16)v14, v23, v24, v25, v26, v27, v28, v29)
         && (_DWORD)v13)
  {
    v39 = 0;
    v40 = 0;
    do
    {
      *(double *)v41.i64 = sub_1B198D4F8((__int16)v14, (const float *)(a3 + v39), v30, v31, v32, v33, v34, v35, v36, v37, v38);
      sub_1B198D91C((__int16)v12, a1 + v40, v42, v43, v44, v45, v46, v47, v41);
      v40 += v10;
      v39 += v8;
      --v13;
    }
    while (v13);
  }
}

double sub_1B198D4F8(int a1, const float *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, float a10, float a11)
{
  const __CFString *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  int v22;
  unsigned int v23;
  uint32x4_t v24;
  float32x4_t v25;
  uint32x4_t v26;
  uint32x4_t v27;
  int8x16_t v28;
  unsigned int v29;
  int32x4_t v30;
  float v36;
  float32x2_t v37;
  float32x4_t v38;
  int32x2_t v39;
  int16x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  unsigned int v43;
  int v44;
  int v45;
  BOOL v46;
  int v47;
  unsigned int v48;
  unsigned int v49;
  int v50;
  int v51;
  int32x4_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int32x4_t v56;

  switch(a1)
  {
    case 1:
      a9.f32[0] = *a2;
      return *(double *)a9.i64;
    case 7:
      a9.i64[0] = *(_QWORD *)a2;
      return *(double *)a9.i64;
    case 8:
      a9.i64[0] = *(_QWORD *)a2;
      return *(double *)a9.i64;
    case 9:
      a9 = *(float32x4_t *)a2;
      return *(double *)a9.i64;
    case 14:
      v18 = *(unsigned __int16 *)a2;
      v19 = (v18 >> 10) & 0x1F;
      if (v19 == 31)
        v20 = 2139095040;
      else
        v20 = (v18 >> 10) & 0x1F;
      if (v19)
        _ZF = v19 == 31;
      else
        _ZF = 1;
      if (_ZF)
        v22 = v20;
      else
        v22 = (v19 << 23) + 939524096;
      v23 = v22 | (v18 << 16) & 0x80000000 | (v18 >> 7) & 7 | (8 * (v18 & 0x3FF)) & 0x1FFF | ((v18 & 0x3FF) << 13);
      goto LABEL_27;
    case 22:
      v24 = (uint32x4_t)vld1q_dup_f32(a2);
      a9 = vcvtq_f32_s32(vshlq_s32((int32x4_t)vshlq_u32(v24, (uint32x4_t)xmmword_1B2268AC0), (int32x4_t)xmmword_1B2268AD0));
      v25 = (float32x4_t)xmmword_1B2268B00;
      goto LABEL_33;
    case 23:
      v26 = (uint32x4_t)vld1q_dup_f32(a2);
      a9 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v26, (uint32x4_t)xmmword_1B2268AE0), (int8x16_t)xmmword_1B2268AA0));
      v25 = (float32x4_t)xmmword_1B2268AF0;
      goto LABEL_33;
    case 26:
      v27 = (uint32x4_t)vld1q_dup_f32(a2);
      v28.i64[0] = 0xFF000000FFLL;
      v28.i64[1] = 0xFF000000FFLL;
      a9 = vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v27, (uint32x4_t)xmmword_1B2245E80), v28));
      v29 = 998277249;
      goto LABEL_32;
    case 27:
      *(uint32x2_t *)v30.i8 = vshl_u32((uint32x2_t)vdup_n_s32(*(_DWORD *)a2), (uint32x2_t)0x1000000018);
      v30.i32[2] = *(_DWORD *)a2 << 8;
      *(float *)&v30.i32[3] = *a2;
      __asm { FMOV            V1.4S, #-1.0 }
      a9 = vmaxnmq_f32(vmulq_f32(vcvtq_f32_s32(vshrq_n_s32(v30, 0x18uLL)), (float32x4_t)vdupq_n_s32(0x3C010204u)), _Q1);
      __asm { FMOV            V1.4S, #1.0 }
      a9.i64[0] = vminnmq_f32(a9, _Q1).u64[0];
      return *(double *)a9.i64;
    case 34:
      a9.i16[0] = *(_WORD *)a2;
      a9.f32[0] = (float)a9.u32[0];
      v36 = 0.000015259;
      goto LABEL_26;
    case 35:
      a9.i16[0] = *(_WORD *)a2;
      v37.f32[0] = (float)a9.u32[0];
      LOWORD(a10) = *((_WORD *)a2 + 1);
      v37.f32[1] = (float)LODWORD(a10);
      *(float32x2_t *)a9.f32 = vmul_f32(v37, (float32x2_t)vdup_n_s32(0x37800080u));
      return *(double *)a9.i64;
    case 36:
      a9.i16[0] = *(_WORD *)a2;
      LOWORD(a10) = *((_WORD *)a2 + 1);
      LOWORD(a11) = *((_WORD *)a2 + 2);
      v38.i32[3] = 0;
      v38.f32[0] = (float)a9.u32[0];
      v38.f32[1] = (float)LODWORD(a10);
      v38.f32[2] = (float)LODWORD(a11);
      a9.i64[0] = vmulq_f32(v38, (float32x4_t)vdupq_n_s32(0x37800080u)).u64[0];
      return *(double *)a9.i64;
    case 37:
      a9 = vcvtq_f32_u32(vmovl_u16(*(uint16x4_t *)a2));
      v29 = 931135616;
      goto LABEL_32;
    case 38:
      a9.f32[0] = (float)*(__int16 *)a2;
      v36 = 0.000030519;
LABEL_26:
      *(float *)&v23 = a9.f32[0] * v36;
LABEL_27:
      a9.i8[4] = 0;
      a9.i8[5] = 0;
      a9.i8[6] = 0;
      a9.i8[7] = 0;
      a9.i32[0] = v23;
      return *(double *)a9.i64;
    case 39:
      v39.i32[0] = *(__int16 *)a2;
      v39.i32[1] = *((__int16 *)a2 + 1);
      *(float32x2_t *)a9.f32 = vmul_f32(vadd_f32((float32x2_t)vadd_s32(v39, vdup_n_s32(0x4B400000u)), (float32x2_t)vdup_n_s32(0xCB400000)), (float32x2_t)vdup_n_s32(0x38000100u));
      return *(double *)a9.i64;
    case 40:
      *(float *)v40.i32 = *a2;
      v40.i32[1] = *((unsigned __int16 *)a2 + 2);
      v41 = (float32x4_t)vdupq_n_s32(0xCB400000);
      v42 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), v40);
      goto LABEL_31;
    case 41:
      v41 = (float32x4_t)vdupq_n_s32(0xCB400000);
      v42 = (float32x4_t)vaddw_s16(vdupq_n_s32(0x4B400000u), *(int16x4_t *)a2);
LABEL_31:
      a9 = vaddq_f32(v42, v41);
      v29 = 939524352;
LABEL_32:
      v25 = (float32x4_t)vdupq_n_s32(v29);
LABEL_33:
      a9.i64[0] = vmulq_f32(a9, v25).u64[0];
      break;
    case 42:
      v43 = *(unsigned __int16 *)a2;
      v44 = (v43 >> 10) & 0x1F;
      if (v44 == 31)
        v45 = 2139095040;
      else
        v45 = (v43 >> 10) & 0x1F;
      if (v44)
        v46 = v44 == 31;
      else
        v46 = 1;
      if (v46)
        v47 = v45;
      else
        v47 = (v44 << 23) + 939524096;
      v48 = v47 | (v43 << 16) & 0x80000000 | (v43 >> 7) & 7 | (8 * (v43 & 0x3FF)) & 0x1FFF | ((v43 & 0x3FF) << 13);
      v49 = *((unsigned __int16 *)a2 + 1);
      v50 = (v49 >> 10) & 0x1F;
      if (v50 && v50 != 31)
      {
        v51 = (v50 << 23) + 939524096;
      }
      else if (v50 == 31)
      {
        v51 = 2139095040;
      }
      else
      {
        v51 = (v49 >> 10) & 0x1F;
      }
      a9.i32[0] = v48;
      a9.i32[1] = v51 | (v49 << 16) & 0x80000000 | (v49 >> 7) & 7 | (8 * (v49 & 0x3FF)) & 0x1FFF | ((v49 & 0x3FF) << 13);
      break;
    case 43:
      v52.i32[0] = *(unsigned __int16 *)a2;
      v52.i32[1] = *((unsigned __int16 *)a2 + 1);
      v52.i64[1] = *((unsigned __int16 *)a2 + 2);
      v53.i64[0] = 0x8000000080000000;
      v53.i64[1] = 0x8000000080000000;
      v54 = vandq_s8((int8x16_t)vshlq_n_s32(v52, 0x10uLL), v53);
      a9 = (float32x4_t)vshlq_n_s32(v52, 0xDuLL);
      v53.i64[0] = 0x3800000038000000;
      v53.i64[1] = 0x3800000038000000;
      a9.i64[0] = vorrq_s8(vorrq_s8(v54, vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0x7FE000u))), (int8x16_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0xF800000u)), (int32x4_t)v53)).u64[0];
      break;
    case 44:
      v55.i64[0] = 0x8000000080000000;
      v55.i64[1] = 0x8000000080000000;
      a9 = (float32x4_t)vshll_n_u16(*(uint16x4_t *)a2, 0xDuLL);
      v56.i64[0] = 0x3800000038000000;
      v56.i64[1] = 0x3800000038000000;
      a9.i64[0] = vaddq_s32((int32x4_t)vorrq_s8(vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0xF800000u)), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16(*(int16x4_t *)a2), v55), vandq_s8((int8x16_t)a9, (int8x16_t)vdupq_n_s32(0x7FE000u)))), v56).u64[0];
      break;
    default:
      v11 = sub_1B179E5A0(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: unsupported conversion %@ -> float4"), v12, v13, v14, v15, v16, v17, (uint64_t)v11);
      a9.i16[0] = 0;
      a9.i8[2] = 0;
      a9.i8[3] = 0;
      a9.i8[4] = 0;
      a9.i8[5] = 0;
      a9.i8[6] = 0;
      a9.i8[7] = 0;
      break;
  }
  return *(double *)a9.i64;
}

void sub_1B198D91C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9)
{
  const __CFString *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int32 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  __int16 v20;
  __int16 v21;
  unsigned __int32 v22;
  float32x4_t v28;
  int8x16_t v30;
  uint32x2_t v31;
  int v32;
  uint32x2_t v33;
  float32x4_t v35;
  int32x4_t v36;
  uint32x2_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v41;
  int8x16_t v42;
  int32x2_t v43;
  unsigned __int32 v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  int32x2_t v49;
  int16x4_t v50;
  unsigned __int32 v51;
  unsigned int v52;
  unsigned __int32 v53;
  unsigned int v54;
  unsigned __int32 v55;
  unsigned int v56;
  unsigned __int32 v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  __int16 v61;
  __int16 v62;
  unsigned __int32 v63;
  unsigned __int32 v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  __int16 v68;
  __int16 v69;
  unsigned __int32 v70;
  unsigned __int32 v71;
  unsigned int v72;
  unsigned __int32 v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  __int16 v77;
  __int16 v78;
  unsigned __int32 v79;
  unsigned int v80;
  unsigned __int32 v81;
  unsigned int v82;

  switch(a1)
  {
    case 1:
      *(_DWORD *)a2 = a9.i32[0];
      return;
    case 7:
      *(_QWORD *)a2 = a9.i64[0];
      return;
    case 8:
      *(_QWORD *)a2 = a9.i64[0];
      *(_DWORD *)(a2 + 8) = a9.i32[2];
      return;
    case 9:
      *(float32x4_t *)a2 = a9;
      return;
    case 14:
      v16 = HIWORD(a9.i32[0]) & 0x8000;
      v17 = ((unsigned __int32)a9.i32[0] >> 23);
      v18 = v17 - 112;
      v19 = v17 - 113;
      v20 = v16 | 0x7BFF;
      if (v17 == 255)
        v20 = v16 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
      if (v17 >= 0x71)
        v21 = v20;
      else
        v21 = a9.i16[1] & 0x8000;
      v22 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | (v18 << 10);
      if (v19 > 0x1D)
        LOWORD(v22) = v21;
      goto LABEL_27;
    case 22:
      __asm { FMOV            V1.4S, #-1.0; jumptable 00000001B198D948 case 22 }
      v28 = vmaxnmq_f32(a9, _Q1);
      __asm { FMOV            V1.4S, #1.0 }
      v30 = vandq_s8((int8x16_t)vcvtq_s32_f32(vmulq_f32(vminnmq_f32(v28, _Q1), (float32x4_t)xmmword_1B2268A90)), (int8x16_t)xmmword_1B2268AA0);
      v31 = (uint32x2_t)vextq_s8(v30, v30, 8uLL).u64[0];
      v32 = v30.i32[0] | (v30.i32[1] << 10);
      v33 = (uint32x2_t)0x1E00000014;
      goto LABEL_20;
    case 23:
      __asm { FMOV            V1.4S, #1.0 }
      v35.i64[0] = 0x3F0000003F000000;
      v35.i64[1] = 0x3F0000003F000000;
      v36 = vcvtq_s32_f32(vmlaq_f32(v35, (float32x4_t)xmmword_1B2268AB0, vminnmq_f32(vmaxnmq_f32(a9, (float32x4_t)0), _Q1)));
      _Q1.i32[0] = vmovn_s32(v36).u32[0];
      v32 = _Q1.u16[0] | (_Q1.u16[1] << 10);
      v37 = vshl_u32((uint32x2_t)vand_s8((int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL), (int8x8_t)0xFFFF0000FFFFLL), (uint32x2_t)0x1E00000014);
      goto LABEL_21;
    case 26:
      v38.i64[0] = 0x3F0000003F000000;
      v38.i64[1] = 0x3F0000003F000000;
      v39 = (int8x16_t)vcvtq_s32_f32(vmlaq_f32(v38, (float32x4_t)vdupq_n_s32(0x437F0000u), a9));
      goto LABEL_19;
    case 27:
      __asm { FMOV            V2.4S, #-1.0 }
      v39 = (int8x16_t)vcvtq_s32_f32(vmlaq_f32((float32x4_t)vandq_s8(_Q2, (int8x16_t)vcgezq_f32(a9)), (float32x4_t)vdupq_n_s32(0x42FF0000u), a9));
LABEL_19:
      v41.i64[0] = 0xFF000000FFLL;
      v41.i64[1] = 0xFF000000FFLL;
      v42 = vandq_s8(v39, v41);
      v31 = (uint32x2_t)vextq_s8(v42, v42, 8uLL).u64[0];
      v32 = v42.i32[0] | (v42.i32[1] << 8);
      v33 = (uint32x2_t)0x1800000010;
LABEL_20:
      v37 = vshl_u32(v31, v33);
LABEL_21:
      *(_DWORD *)a2 = v32 | v37.i32[0] | v37.i32[1];
      return;
    case 34:
      v22 = (int)vmla_n_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)vdup_n_s32(0x477FFF00u), a9.f32[0]).f32[0];
      goto LABEL_27;
    case 35:
      v43 = vcvt_s32_f32(vmla_f32((float32x2_t)0x3F0000003F000000, (float32x2_t)vdup_n_s32(0x477FFF00u), *(float32x2_t *)a9.f32));
      LOWORD(v44) = v43.i16[2];
      *(_WORD *)a2 = v43.i16[0];
      goto LABEL_78;
    case 36:
      v45.i64[0] = 0x3F0000003F000000;
      v45.i64[1] = 0x3F0000003F000000;
      v46 = vcvtq_s32_f32(vmlaq_f32(v45, (float32x4_t)vdupq_n_s32(0x477FFF00u), a9));
      goto LABEL_30;
    case 37:
      v47.i64[0] = 0x3F0000003F000000;
      v47.i64[1] = 0x3F0000003F000000;
      v48 = vcvtq_s32_f32(vmlaq_f32(v47, (float32x4_t)vdupq_n_s32(0x477FFF00u), a9));
      goto LABEL_36;
    case 38:
      v22 = (int)(float)(32767.0 * a9.f32[0]);
LABEL_27:
      *(_WORD *)a2 = v22;
      break;
    case 39:
      v49 = vcvt_s32_f32(vmul_f32(*(float32x2_t *)a9.f32, (float32x2_t)vdup_n_s32(0x46FFFE00u)));
      *(_WORD *)a2 = v49.i16[0];
      *(_WORD *)(a2 + 2) = v49.i16[2];
      break;
    case 40:
      v46 = vcvtq_s32_f32(vmulq_f32(a9, (float32x4_t)vdupq_n_s32(0x46FFFE00u)));
LABEL_30:
      v50 = vmovn_s32(v46);
      *(_DWORD *)a2 = v50.i32[0];
      *(_WORD *)(a2 + 4) = v50.i16[2];
      break;
    case 41:
      v48 = vcvtq_s32_f32(vmulq_f32(a9, (float32x4_t)vdupq_n_s32(0x46FFFE00u)));
LABEL_36:
      *(int16x4_t *)a2 = vmovn_s32(v48);
      break;
    case 42:
      v55 = HIWORD(a9.i32[0]) & 0x8000;
      v56 = ((unsigned __int32)a9.i32[0] >> 23);
      if (v56 - 113 > 0x1D)
      {
        if (v56 >= 0x71)
        {
          if (v56 == 255)
            LOWORD(v55) = a9.i16[1] & 0x8000 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v55) = v55 | 0x7BFF;
        }
      }
      else
      {
        v55 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | ((v56 - 112) << 10);
      }
      *(_WORD *)a2 = v55;
      v73 = HIWORD(a9.i32[1]) & 0x8000;
      v74 = ((unsigned __int32)a9.i32[1] >> 23);
      v75 = v74 - 112;
      v76 = v74 - 113;
      v77 = v73 | 0x7BFF;
      if (v74 == 255)
        v77 = v73 | ((a9.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
      if (v74 >= 0x71)
        v78 = v77;
      else
        v78 = a9.i16[3] & 0x8000;
      v44 = HIWORD(a9.i32[1]) & 0x8000 | ((unsigned __int32)a9.i32[1] >> 13) & 0x3FF | (v75 << 10);
      if (v76 > 0x1D)
        LOWORD(v44) = v78;
LABEL_78:
      *(_WORD *)(a2 + 2) = v44;
      break;
    case 43:
      v51 = HIWORD(a9.i32[0]) & 0x8000;
      v52 = ((unsigned __int32)a9.i32[0] >> 23);
      if (v52 - 113 > 0x1D)
      {
        if (v52 >= 0x71)
        {
          if (v52 == 255)
            LOWORD(v51) = a9.i16[1] & 0x8000 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v51) = v51 | 0x7BFF;
        }
      }
      else
      {
        v51 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | ((v52 - 112) << 10);
      }
      *(_WORD *)a2 = v51;
      v57 = HIWORD(a9.i32[1]) & 0x8000;
      v58 = ((unsigned __int32)a9.i32[1] >> 23);
      v59 = v58 - 112;
      v60 = v58 - 113;
      v61 = v57 | 0x7BFF;
      if (v58 == 255)
        v61 = v57 | ((a9.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
      if (v58 >= 0x71)
        v62 = v61;
      else
        v62 = a9.i16[3] & 0x8000;
      v63 = HIWORD(a9.i32[1]) & 0x8000 | ((unsigned __int32)a9.i32[1] >> 13) & 0x3FF | (v59 << 10);
      if (v60 > 0x1D)
        LOWORD(v63) = v62;
      *(_WORD *)(a2 + 2) = v63;
      v64 = HIWORD(a9.i32[2]) & 0x8000;
      v65 = ((unsigned __int32)a9.i32[2] >> 23);
      v66 = v65 - 112;
      v67 = v65 - 113;
      v68 = v64 | 0x7BFF;
      if (v65 == 255)
        v68 = v64 | ((a9.i32[2] & 0x7FFFFF) != 0) | 0x7C00;
      if (v65 >= 0x71)
        v69 = v68;
      else
        v69 = a9.i16[5] & 0x8000;
      v70 = HIWORD(a9.i32[2]) & 0x8000 | ((unsigned __int32)a9.i32[2] >> 13) & 0x3FF | (v66 << 10);
      if (v67 > 0x1D)
        LOWORD(v70) = v69;
      *(_WORD *)(a2 + 4) = v70;
      break;
    case 44:
      v53 = HIWORD(a9.i32[0]) & 0x8000;
      v54 = ((unsigned __int32)a9.i32[0] >> 23);
      if (v54 - 113 > 0x1D)
      {
        if (v54 >= 0x71)
        {
          if (v54 == 255)
            LOWORD(v53) = a9.i16[1] & 0x8000 | ((a9.i32[0] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v53) = v53 | 0x7BFF;
        }
      }
      else
      {
        v53 = HIWORD(a9.i32[0]) & 0x8000 | ((unsigned __int32)a9.i32[0] >> 13) & 0x3FF | ((v54 - 112) << 10);
      }
      *(_WORD *)a2 = v53;
      v71 = HIWORD(a9.i32[1]) & 0x8000;
      v72 = ((unsigned __int32)a9.i32[1] >> 23);
      if (v72 - 113 > 0x1D)
      {
        if (v72 >= 0x71)
        {
          if (v72 == 255)
            LOWORD(v71) = a9.i16[3] & 0x8000 | ((a9.i32[1] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v71) = v71 | 0x7BFF;
        }
      }
      else
      {
        v71 = HIWORD(a9.i32[1]) & 0x8000 | ((unsigned __int32)a9.i32[1] >> 13) & 0x3FF | ((v72 - 112) << 10);
      }
      *(_WORD *)(a2 + 2) = v71;
      v79 = HIWORD(a9.i32[2]) & 0x8000;
      v80 = ((unsigned __int32)a9.i32[2] >> 23);
      if (v80 - 113 > 0x1D)
      {
        if (v80 >= 0x71)
        {
          if (v80 == 255)
            LOWORD(v79) = a9.i16[5] & 0x8000 | ((a9.i32[2] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v79) = v79 | 0x7BFF;
        }
      }
      else
      {
        v79 = HIWORD(a9.i32[2]) & 0x8000 | ((unsigned __int32)a9.i32[2] >> 13) & 0x3FF | ((v80 - 112) << 10);
      }
      *(_WORD *)(a2 + 4) = v79;
      v81 = HIWORD(a9.i32[3]) & 0x8000;
      v82 = ((unsigned __int32)a9.i32[3] >> 23);
      if (v82 - 113 > 0x1D)
      {
        if (v82 >= 0x71)
        {
          if (v82 == 255)
            LOWORD(v81) = a9.i16[7] & 0x8000 | ((a9.i32[3] & 0x7FFFFF) != 0) | 0x7C00;
          else
            LOWORD(v81) = v81 | 0x7BFF;
        }
      }
      else
      {
        v81 = HIWORD(a9.i32[3]) & 0x8000 | ((unsigned __int32)a9.i32[3] >> 13) & 0x3FF | ((v82 - 112) << 10);
      }
      *(_WORD *)(a2 + 6) = v81;
      break;
    default:
      v9 = sub_1B179E5A0(a1, a2, a3, a4, a5, a6, a7, a8);
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: unsupported conversion %@ -> float4"), v10, v11, v12, v13, v14, v15, (uint64_t)v9);
      break;
  }
}

_QWORD *sub_1B198DFB4(void *a1, const void *a2, uint64_t a3, char a4, char a5, uint64_t a6, uint64_t a7)
{
  const char *v13;
  uint64_t v14;
  _QWORD *v15;
  CFTypeRef v16;
  objc_super v18;

  if (!a1)
    return 0;
  v18.receiver = a1;
  v18.super_class = (Class)VFXMTLSkinDeformer;
  v15 = objc_msgSendSuper2(&v18, sel_init);
  if (v15)
  {
    if (a2)
      v16 = CFRetain(a2);
    else
      v16 = 0;
    v15[1] = v16;
    v15[2] = a3;
    *((_BYTE *)v15 + 40) = (a4 & 2) != 0;
    *((_BYTE *)v15 + 41) = (a4 & 4) != 0;
    *((_BYTE *)v15 + 24) = a5;
    v15[4] = a6;
    objc_msgSend_setupWithComputeContext_(v15, v13, a7, v14);
  }
  return v15;
}

uint64_t sub_1B198E3A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_currentBlitEncoder(*(void **)(a1 + 32), a2, a3, a4);
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(a1 + 40), sel_makeReadOnlyBuffersWithBaseGeometry_baseMesh_blitEncoder_, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), *(_QWORD *)(a1 + 48));
}

BOOL sub_1B198EEC4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BOOL8 result;
  const void *v32;
  const void *v33;
  const void *v34;
  const void *v35;
  const void *v36;
  const void *v37;

  objc_opt_self();
  v5 = sub_1B18F09A0((uint64_t)a3);
  if (v5 != sub_1B18F09A0((uint64_t)a2))
    return 0;
  v6 = sub_1B17EE4F8((uint64_t)a3);
  if (v6 != sub_1B17EE4F8((uint64_t)a2))
    return 0;
  v14 = sub_1B18F0944((uint64_t)a3, v7, v8, v9, v10, v11, v12, v13);
  if (v14 != sub_1B18F0944((uint64_t)a2, v15, v16, v17, v18, v19, v20, v21))
    return 0;
  v29 = sub_1B18F0944((uint64_t)a3, v22, v23, v24, v25, v26, v27, v28);
  v30 = sub_1B17EE4F8((uint64_t)a3);
  v36 = 0;
  v37 = 0;
  v34 = 0;
  v35 = 0;
  v32 = 0;
  v33 = 0;
  sub_1B18F091C(a3, &v37, &v35, &v33);
  sub_1B18F091C(a2, &v36, &v34, &v32);
  if (v37 && v36)
  {
    if (memcmp(v37, v36, 8 * v30 + 8))
      return 0;
  }
  else
  {
    result = 0;
    if (!v37 || !v36)
      return result;
  }
  if (!v35 || !v34)
  {
    result = 0;
    if (!v35 || !v34)
      return result;
    goto LABEL_16;
  }
  if (memcmp(v35, v34, 2 * v29))
    return 0;
LABEL_16:
  if (v33 && v32)
    return !memcmp(v33, v32, 4 * v29);
  result = 0;
  if (v33 && v32)
    return 1;
  return result;
}

BOOL sub_1B198F028(const __CFURL *a1)
{
  return sub_1B198F030(a1, 1);
}

BOOL sub_1B198F030(const __CFURL *a1, uint64_t a2)
{
  const __CFString *v4;
  const __CFString *v5;
  stat v7;
  UInt8 buffer[1024];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v4 = CFURLCopyScheme(a1);
  if (!v4)
    return 0;
  v5 = v4;
  if (CFStringCompare(v4, CFSTR("file"), 0) == kCFCompareEqualTo)
  {
    CFRelease(v5);
    if (CFURLGetFileSystemRepresentation(a1, 1u, buffer, 1024))
    {
      memset(&v7, 0, sizeof(v7));
      if (!stat((const char *)buffer, &v7) && (v7.st_mode & 0xF000) == 0x8000)
        return access((const char *)buffer, 4) == 0;
    }
    return 0;
  }
  CFStringCompare(v5, CFSTR("http"), 0);
  CFRelease(v5);
  return a2;
}

uint64_t sub_1B198F738(void *Object, const char *a2, uint64_t a3, uint64_t a4)
{
  int i;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  for (i = 0; ; i += objc_msgSend_offset(Object, v18, v19, v20))
  {
    v6 = objc_msgSend_dataType(Object, a2, a3, a4);
    if (v6 != 1)
      break;
    v10 = (void *)objc_msgSend_structType(Object, v7, v8, v9);
    v14 = (void *)objc_msgSend_members(v10, v11, v12, v13);
    Object = (void *)objc_msgSend_lastObject(v14, v15, v16, v17);
  }
  if (v6 == 2)
  {
    v21 = (void *)objc_msgSend_arrayType(Object, v7, v8, v9);
    v25 = objc_msgSend_arrayLength(v21, v22, v23, v24);
    v29 = objc_msgSend_elementType(v21, v26, v27, v28);
    v30 = sub_1B189D6C0(v29) * v25;
  }
  else
  {
    v30 = sub_1B189D6C0(v6);
  }
  return (v30 + i);
}

void sub_1B198FF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B198FF58(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      abort();
    v11 = v5 - (_QWORD)*a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)sub_1B17F7824(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

void sub_1B1990AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_1B1991BD0(uint64_t a1)
{
  NSObject *v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  _QWORD block[4];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v1 = *(NSObject **)(a1 + 32);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 3221225472;
  block[2] = sub_1B1991C4C;
  block[3] = &unk_1E63DA1E8;
  v2 = *(_OWORD *)(a1 + 40);
  v3 = *(_OWORD *)(a1 + 88);
  v12 = *(_QWORD *)(a1 + 104);
  v4 = *(_OWORD *)(a1 + 72);
  v11 = v3;
  v10 = v4;
  v5 = *(_OWORD *)(a1 + 56);
  v8 = v2;
  v9 = v5;
  dispatch_async(v1, block);
  return result;
}

uint64_t sub_1B1991C4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;

  if ((objc_msgSend_isReadyForMoreMediaData(*(void **)(*(_QWORD *)(a1 + 32) + 376), a2, a3, a4) & 1) == 0)
  {
    do
      usleep(0x3E8u);
    while (!objc_msgSend_isReadyForMoreMediaData(*(void **)(*(_QWORD *)(a1 + 32) + 376), v6, v7, v8));
  }
  v9 = *(void **)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 56);
  v18 = *(_OWORD *)(a1 + 80);
  v19 = *(_QWORD *)(a1 + 96);
  if ((objc_msgSend_appendPixelBuffer_withPresentationTime_(v9, v5, v10, (uint64_t)&v18) & 1) == 0)
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: append pixel buffer failed"), v11, v12, v13, v14, v15, v16, v18);
  CFRelease(*(CFTypeRef *)(a1 + 56));
  CFRelease(*(CFTypeRef *)(a1 + 64));
  CVMetalTextureCacheFlush(*(CVMetalTextureCacheRef *)(a1 + 72), 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1B1991FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 160), 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1B1992028(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  CGImage *v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  uint64_t v37;
  void *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  _QWORD v45[6];
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD v50[5];

  if (objc_msgSend_isCancelled(*(void **)(a1 + 32), a2, a3, a4))
    objc_msgSend_setCanceled_(*(void **)(a1 + 40), v5, 1, v7);
  if ((objc_msgSend_canceled(*(void **)(a1 + 40), v5, v6, v7) & 1) != 0
    || (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) + (float)(*(float *)(a1 + 96) * -0.5)) > *(float *)(a1 + 100))
  {
    if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
    {
      v45[0] = MEMORY[0x1E0C809B0];
      v45[1] = 3221225472;
      v45[2] = sub_1B19922DC;
      v45[3] = &unk_1E63D8108;
      v8 = *(NSObject **)(a1 + 48);
      v9 = *(_QWORD *)(a1 + 56);
      v45[4] = *(_QWORD *)(a1 + 40);
      v45[5] = v9;
      dispatch_async(v8, v45);
    }
  }
  else
  {
    v13 = (void *)MEMORY[0x1B5E23520]();
    if (*(_BYTE *)(a1 + 108))
    {
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v14 = *(_QWORD *)(a1 + 72);
      v15 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      v17 = (int)(float)(1000.0 / *(float *)(v15 + 400));
      v18 = *(_QWORD *)(v15 + 384);
      v19 = 1000 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
      v49 = 0;
      v50[0] = MEMORY[0x1E0C809B0];
      v50[2] = sub_1B19922C4;
      v50[3] = &unk_1E63D6DD0;
      v20 = *(_QWORD *)(a1 + 88);
      v50[1] = 3221225472;
      v50[4] = v14;
      v46 = v19;
      v47 = v17;
      v48 = 1;
      objc_msgSend_renderAndAppendWithPresentationTime_usingAdaptor_metalTextureCache_cvQueue_completionBlock_((void *)v15, v10, (uint64_t)&v46, v18, v20, v16, v50);
    }
    else
    {
      v25 = *(void **)(a1 + 40);
      objc_msgSend_size(v25, v10, v11, v12);
      v29 = objc_msgSend__copySnapshot_(v25, v26, v27, v28);
      if (v29)
      {
        v30 = (CGImage *)v29;
        if ((objc_msgSend_isReadyForMoreMediaData(*(void **)(*(_QWORD *)(a1 + 40) + 376), v21, v22, v23) & 1) == 0)
        {
          do
            usleep(0x3E8u);
          while (!objc_msgSend_isReadyForMoreMediaData(*(void **)(*(_QWORD *)(a1 + 40) + 376), v32, v33, v34));
        }
        v35 = *(_QWORD *)(a1 + 40);
        v36 = 1000.0 / *(float *)(v35 + 400);
        v37 = *(_QWORD *)(v35 + 384);
        v46 = 1000 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
        v47 = (int)v36;
        v48 = 1;
        v49 = 0;
        objc_msgSend_appendImage_withPresentationTime_usingAdaptor_((void *)v35, v31, (uint64_t)v30, (uint64_t)&v46, v37);
        CGImageRelease(v30);
      }
    }
    *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = *(float *)(a1 + 96)
                                                               + *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                          + 24);
    ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24);
    *(float *)&v24 = (float)(*(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) - *(float *)(a1 + 104))
                   / (float)(*(float *)(a1 + 100) - *(float *)(a1 + 104));
    objc_msgSend_setProgress_(*(void **)(a1 + 40), v21, v22, v23, v24);
    v38 = *(void **)(a1 + 32);
    v42 = objc_msgSend_completedUnitCount(v38, v39, v40, v41);
    objc_msgSend_setCompletedUnitCount_(v38, v43, v42 + 1, v44);
    objc_autoreleasePoolPop(v13);
  }
}

uint64_t sub_1B19922C4(uint64_t result)
{
  --*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24);
  return result;
}

intptr_t sub_1B19922DC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_markAsFinished(*(void **)(*(_QWORD *)(a1 + 32) + 376), a2, a3, a4);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

intptr_t sub_1B1992310(uint64_t a1)
{
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

void sub_1B1992318(void *a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  int isHostedInAnotherProcess;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  id v15;

  v15 = a1;
  if ((_UIApplicationIsExtension() & 1) != 0
    || (objc_msgSend__applicationKeyWindow(MEMORY[0x1E0DC3F98], v1, v2, v3),
        v4 = (void *)objc_claimAutoreleasedReturnValue(),
        isHostedInAnotherProcess = objc_msgSend__isHostedInAnotherProcess(v4, v5, v6, v7),
        v4,
        isHostedInAnotherProcess))
  {
    v9 = v15;
    if (objc_msgSend_getBackgroundGPUPriority(v9, v10, v11, v12) == 3)
      objc_msgSend_setBackgroundGPUPriority_(v9, v13, 2, v14);

  }
}

uint64_t sub_1B1992398(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  BOOL v13;
  _QWORD v14[2];
  uint64_t (*v15)(uint64_t, uint64_t, int, int);
  void *v16;
  void *v17;
  void *v18;

  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 0x40000000;
  v15 = sub_1B19924FC;
  v16 = &unk_1E63DA2A0;
  v17 = &unk_1E63D13B0;
  v18 = &unk_1E63D1990;
  v2 = a2 - 2;
  if (a2 >= 2)
  {
    v3 = result;
    v4 = a2 - 1;
    v5 = (a2 >> 1) + 1;
    do
    {
      result = v15((uint64_t)v14, v3, v5 - 2, v4);
      --v5;
    }
    while (v5 > 1);
    if ((int)v4 >= 1)
    {
      v6 = 40 * v4;
      do
      {
        v7 = v3 + v6;
        v8 = *(_OWORD *)v3;
        v9 = *(_OWORD *)(v3 + 16);
        v10 = *(_QWORD *)(v3 + 32);
        v11 = *(_QWORD *)(v3 + v6 + 32);
        v12 = *(_OWORD *)(v3 + v6 + 16);
        *(_OWORD *)v3 = *(_OWORD *)(v3 + v6);
        *(_OWORD *)(v3 + 16) = v12;
        *(_QWORD *)(v3 + 32) = v11;
        *(_QWORD *)(v7 + 32) = v10;
        *(_OWORD *)v7 = v8;
        *(_OWORD *)(v7 + 16) = v9;
        result = v15((uint64_t)v14, v3, 0, v2);
        v6 -= 40;
        v13 = (int)v2 <= 0;
        v2 = (v2 - 1);
      }
      while (!v13);
    }
  }
  return result;
}

BOOL sub_1B199249C(uint64_t a1, float *a2, float *a3)
{
  return (float)((float)(a2[5] - a2[4]) * (float)(a2[7] - a2[6])) > (float)((float)(a3[5] - a3[4])
                                                                          * (float)(a3[7] - a3[6]));
}

__n128 sub_1B19924D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  v5 = *(_QWORD *)(a3 + 32);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 32) = v6;
  *(_QWORD *)(a2 + 32) = v5;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v4;
  return result;
}

uint64_t sub_1B19924FC(uint64_t result, uint64_t a2, int a3, int a4)
{
  int v4;
  int v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;

  v4 = (2 * a3) | 1;
  if (v4 <= a4)
  {
    v6 = a3;
    v7 = result;
    v8 = 2 * a3;
    do
    {
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v7 + 32) + 16))();
      if ((_DWORD)result)
        v9 = v4;
      else
        v9 = v6;
      if (v4 < a4)
      {
        v10 = v8 + 2;
        result = (*(uint64_t (**)(void))(*(_QWORD *)(v7 + 32) + 16))();
        if ((_DWORD)result)
          v9 = v10;
      }
      if (v9 == v6)
        break;
      result = (*(uint64_t (**)(void))(*(_QWORD *)(v7 + 40) + 16))();
      v8 = 2 * v9;
      v4 = (2 * v9) | 1;
      v6 = v9;
    }
    while (v4 <= a4);
  }
  return result;
}

uint64_t sub_1B19925D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  unsigned int v14;
  double *v15;
  double v16;
  double v17;
  int v18;
  unint64_t v19;
  double v20;
  double v21;
  double *v23;
  double v24;

  v1 = *((unsigned int *)a1 + 2);
  if (v1 < 2)
    return 0;
  v3 = 0;
  v4 = *a1;
  v5 = *a1 + 8;
  v6 = 2;
  while (2)
  {
    v7 = 0;
    v8 = v3;
    v9 = v6;
    v10 = (double *)(v5 + 80 * v6);
    v11 = (double *)(v4 + 80 * v3);
    v12 = *v11;
    v13 = v11[1];
    v14 = ++v3;
    if (v3 == v1)
      v14 = 0;
    v15 = (double *)(v4 + 80 * v14);
    v16 = *v15;
    v17 = v15[1];
    if (v8)
      v18 = -1;
    else
      v18 = -2;
    v19 = (v18 + v1);
    while (v9 + v7 <= v19)
    {
      v20 = *(v10 - 1);
      v21 = *v10;
      if (v16 != v20 || v17 != v21)
      {
        v23 = (double *)(v4 + 80 * (((int)v8 + (int)v7 + 3) % v1));
        v24 = v23[1];
        if (*v23 != v12 || v24 != v13)
        {
          v10 += 10;
          ++v7;
          if (!sub_1B1992708(v12, v13, v16, v17, v20, v21, *v23, v24))
            continue;
        }
      }
      return 1;
    }
    result = 0;
    v6 = v9 + 1;
    if (v3 != v1)
      continue;
    break;
  }
  return result;
}

uint64_t sub_1B1992708(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  if ((a3 - a1) * (a6 - a2) - (a4 - a2) * (a5 - a1) <= 0.0 != (a3 - a1) * (a8 - a2) - (a4 - a2) * (a7 - a1) > 0.0)
    return 0;
  else
    return ((a7 - a5) * (a2 - a6) - (a8 - a6) * (a1 - a5) > 0.0) ^ ((a7 - a5) * (a4 - a6)
                                                                                - (a8 - a6) * (a3 - a5) > 0.0);
}

uint64_t sub_1B1992790(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  uint64_t v6;

  v1 = a1[8];
  if (!(_DWORD)v1)
  {
    v2 = a1[2];
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = (double *)(*(_QWORD *)a1 + 8);
      v5 = 0.0;
      do
      {
        if (v2 - 1 == v3)
          v6 = 0;
        else
          v6 = v3 + 1;
        v5 = v5 + *(v4 - 1) * *(double *)(*(_QWORD *)a1 + 80 * v6 + 8) - *(double *)(*(_QWORD *)a1 + 80 * v6) * *v4;
        v4 += 10;
        ++v3;
      }
      while (v2 != v3);
      if (v5 < 0.0)
        v1 = 1;
      else
        v1 = 2;
    }
    else
    {
      v1 = 2;
    }
    a1[8] = v1;
  }
  return v1;
}

_DWORD *sub_1B199280C(_DWORD *result)
{
  unint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  float64x2_t v4;
  float64x2_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  __int128 *v9;
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _OWORD *v14;
  int v15;
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  LODWORD(v1) = result[2];
  if ((_DWORD)v1)
  {
    v2 = (_BYTE *)(*(_QWORD *)result + 68);
    v3 = result[2];
    do
    {
      v4 = *(float64x2_t *)(v2 - 52);
      v5 = v4;
      if (*v2)
        v5 = *(float64x2_t *)(v2 - 36);
      *(float64x2_t *)(v2 - 52) = vnegq_f64(v5);
      *(float64x2_t *)(v2 - 36) = vnegq_f64(v4);
      v2 += 80;
      --v3;
    }
    while (v3);
    if (v1 >= 2)
    {
      v6 = 0;
      v7 = 0;
      v8 = -1;
      do
      {
        v9 = (__int128 *)(*(_QWORD *)result + v6);
        v19 = v9[2];
        v20 = v9[3];
        v21 = v9[4];
        v17 = *v9;
        v18 = v9[1];
        v10 = (__int128 *)(*(_QWORD *)result + 80 * (v1 + v8));
        *v9 = *v10;
        v11 = v10[4];
        v13 = v10[1];
        v12 = v10[2];
        v9[3] = v10[3];
        v9[4] = v11;
        v9[1] = v13;
        v9[2] = v12;
        v14 = (_OWORD *)(*(_QWORD *)result + 80 * (v8 + result[2]));
        v14[2] = v19;
        v14[3] = v20;
        v14[4] = v21;
        *v14 = v17;
        v14[1] = v18;
        ++v7;
        v1 = result[2];
        --v8;
        v6 += 80;
      }
      while (v7 < v1 >> 1);
    }
  }
  v15 = result[8];
  if (v15 == 1)
  {
    v16 = 2;
  }
  else
  {
    if (v15 != 2)
      return result;
    v16 = 1;
  }
  result[8] = v16;
  return result;
}

BOOL sub_1B1992918(float *a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  double *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  double *i;
  uint64_t v11;
  char v12;
  double v13;
  double v14;
  double v15;
  double *v16;
  double v17;
  double v18;
  uint64_t v19;
  double *v20;
  double v21;

  v2 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v2)
  {
    v3 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = *(double **)a2;
      v7 = (float)(a1[4] + -100.0);
      v8 = *(_QWORD *)a1;
      v9 = *(_QWORD *)a1 + 8;
      for (i = *(double **)a2; ; i = &v6[10 * v5])
      {
        v11 = 0;
        v12 = 0;
        v13 = *i;
        v14 = i[1];
        v15 = v7 - *i;
        v16 = (double *)v9;
        do
        {
          v17 = *(v16 - 1);
          v18 = *v16;
          if (v3 - 1 == v11)
            v19 = 0;
          else
            v19 = v11 + 1;
          v20 = (double *)(v8 + 80 * v19);
          v21 = v20[1];
          if ((*v20 - v17) * (v14 - v18) - (v21 - v18) * (v13 - v17) < 0.0 == (*v20 - v17) * (v14 - v18)
                                                                             - (v21 - v18) * (v7 - v17) >= 0.0)
            v12 += ((v17 - v13) * -(v14 - v14) + v15 * (v18 - v14) >= 0.0) ^ ((*v20 - v13) * -(v14 - v14)
                                                                            + v15 * (v21 - v14) >= 0.0);
          ++v11;
          v16 += 10;
        }
        while (v3 != v11);
        if ((v12 & 1) == 0)
          break;
        v4 = ++v5 >= v2;
        if (v5 == v2)
          break;
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 1;
  }
  return v4;
}

uint64_t sub_1B1992A44(uint64_t result, _DWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  __int128 v8;

  LODWORD(v2) = *a2;
  if (*a2)
  {
    v4 = result;
    v5 = 0;
    do
    {
      result = sub_1B19925D8((uint64_t *)(v4 + 40 * v5));
      if ((_DWORD)result)
      {
        LODWORD(v2) = v2 - 1;
        if (v5 < v2)
        {
          v6 = v5;
          v7 = v4 + 40 * v5;
          do
          {
            ++v6;
            v8 = *(_OWORD *)(v7 + 56);
            *(_OWORD *)v7 = *(_OWORD *)(v7 + 40);
            *(_OWORD *)(v7 + 16) = v8;
            *(_QWORD *)(v7 + 32) = *(_QWORD *)(v7 + 72);
            v7 += 40;
            v2 = (*a2 - 1);
          }
          while (v6 < v2);
        }
        *a2 = v2;
      }
      else
      {
        ++v5;
      }
    }
    while (v5 < v2);
  }
  return result;
}

void sub_1B1992AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void **v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  __int128 v17;
  _QWORD *v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __int128 v30;
  BOOL v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  size_t v37;
  unsigned int v38;
  _DWORD *v39;
  uint64_t *v40;
  _DWORD *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _DWORD *v56;
  uint64_t v57;
  _BYTE *v58;
  uint64_t v60;
  unint64_t v61;
  __int128 *v62;
  double v63;
  __int128 v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int v68;
  _QWORD *v69;
  _DWORD *v70;
  uint64_t **v71;
  _QWORD *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t *v75;
  uint64_t v76;
  size_t v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  __int128 v86;
  __int128 v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unsigned int v92;
  void **v93;
  _QWORD *v94;
  _DWORD *v95;
  _OWORD v96[2];
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  void *v100;
  _DWORD v101[3];

  v2 = a2;
  v101[0] = 0;
  v4 = (void **)sub_1B1993140(*(const CGPath **)(a2 + 24), v101, *(float *)(a2 + 4), *(float *)(a2 + 20));
  sub_1B1992A44((uint64_t)v4, v101);
  v5 = v101[0];
  if (v101[0])
  {
    v6 = 0;
    do
    {
      if (LODWORD(v4[5 * v6 + 1]) > 1)
      {
        ++v6;
      }
      else
      {
        free(v4[5 * v6]);
        v13 = v101[0];
        v14 = (v101[0] - 1);
        if (v6 < v14)
        {
          v15 = &v4[5 * v6];
          v16 = v14 - v6;
          do
          {
            v17 = *(_OWORD *)(v15 + 7);
            *(_OWORD *)v15 = *(_OWORD *)(v15 + 5);
            *((_OWORD *)v15 + 1) = v17;
            v15[4] = v15[9];
            v15 += 5;
            --v16;
          }
          while (v16);
        }
        if (v13 <= 1)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. realloc has an allocation size of 0 bytes"), v7, v8, v9, v10, v11, v12, (uint64_t)"boundaryCount > 1");
          LODWORD(v14) = v101[0] - 1;
        }
        v101[0] = v14;
        v4 = (void **)malloc_type_realloc(v4, 40 * v14, 0x10200406E8F4065uLL);
        v5 = v101[0];
      }
    }
    while (v6 < v5);
  }
  sub_1B1992398((uint64_t)v4, v5);
  if (!v101[0])
  {
    v18 = 0;
LABEL_35:
    *(_DWORD *)(a1 + 48) = 0;
    v91 = (_DWORD *)(a1 + 48);
LABEL_36:
    *(_QWORD *)(a1 + 40) = 0;
    v40 = (uint64_t *)(a1 + 40);
    goto LABEL_37;
  }
  v18 = malloc_type_calloc(v101[0], 0x10uLL, 0x1020040D5A9D86FuLL);
  v19 = v101[0];
  if (!v101[0])
    goto LABEL_35;
  v20 = 0;
  v21 = 1;
  do
  {
    v18[v21] = malloc_type_calloc(v19, 0x30uLL, 0x1020040586F8431uLL);
    ++v20;
    v19 = v101[0];
    v21 += 2;
  }
  while (v20 < v101[0]);
  if (!v101[0])
    goto LABEL_35;
  v90 = v2;
  v22 = 0;
  v93 = v4;
  v94 = v18;
  do
  {
    v100 = 0;
    v98 = 0u;
    v99 = 0u;
    v23 = &v4[5 * v22];
    v24 = *(_OWORD *)v23;
    v25 = *((_OWORD *)v23 + 1);
    v100 = v23[4];
    v98 = v24;
    v99 = v25;
    v26 = v19 - 2;
    if ((int)(v19 - 2) < 0)
    {
LABEL_25:
      v32 = v18[1];
      v33 = (*(_DWORD *)v18)++;
      v34 = v32 + 48 * v33;
      *(_OWORD *)(v34 + 8) = v98;
      *(_OWORD *)(v34 + 24) = v99;
      *(_QWORD *)(v34 + 40) = v100;
    }
    else
    {
      while (1)
      {
        v27 = LODWORD(v18[2 * v26]);
        if ((_DWORD)v27)
          break;
LABEL_23:
        v31 = v26-- <= 0;
        v18 = v94;
        if (v31)
          goto LABEL_25;
      }
      v28 = 0;
      v29 = v94[2 * v26 + 1];
      while (1)
      {
        v30 = *(_OWORD *)(v29 + 24);
        v96[0] = *(_OWORD *)(v29 + 8);
        v96[1] = v30;
        v97 = *(_QWORD *)(v29 + 40);
        if (sub_1B1992918((float *)v96, (uint64_t)&v98))
          break;
        ++v28;
        v29 += 48;
        if (v28 >= v27)
          goto LABEL_23;
      }
      v18 = v94;
      v35 = (unsigned int *)((char *)v94 + (((v26 << 32) + 0x100000000) >> 28));
      v36 = *((_QWORD *)v35 + 1) + 48 * *v35;
      *(_QWORD *)v36 = v29;
      *(_OWORD *)(v36 + 8) = v98;
      *(_OWORD *)(v36 + 24) = v99;
      *(_QWORD *)(v36 + 40) = v100;
      ++*v35;
    }
    ++v22;
    v19 = v101[0];
    v4 = v93;
  }
  while (v22 < v101[0]);
  *(_DWORD *)(a1 + 48) = 0;
  v91 = (_DWORD *)(a1 + 48);
  if (!v19)
  {
    v2 = v90;
    goto LABEL_36;
  }
  LODWORD(v37) = 0;
  v38 = 0;
  v2 = v90;
  do
  {
    v37 = (v37 + LODWORD(v18[2 * v38]));
    v38 += 2;
  }
  while (v38 < v19);
  *v91 = v37;
  if ((_DWORD)v37)
  {
    v39 = malloc_type_calloc(v37, 0x20uLL, 0x10300409C64945DuLL);
    v19 = v101[0];
    *(_QWORD *)(a1 + 40) = v39;
    v40 = (uint64_t *)(a1 + 40);
    if (!v19)
      goto LABEL_37;
    v41 = v39;
  }
  else
  {
    v41 = 0;
    *(_QWORD *)(a1 + 40) = 0;
    v40 = (uint64_t *)(a1 + 40);
  }
  v65 = 0;
  do
  {
    v66 = v65;
    v95 = &v18[2 * v65];
    v92 = v65;
    if (*v95)
    {
      v67 = 0;
      v68 = v65 | 1;
      v69 = v18;
      v70 = &v18[2 * (v66 | 1)];
      v71 = (uint64_t **)(v70 + 2);
      v72 = &v69[2 * v66 + 1];
      do
      {
        if (v68 < v19 && (v73 = *v70, (_DWORD)v73))
        {
          v74 = 0;
          v75 = *v71;
          do
          {
            v76 = *v75;
            v75 += 6;
            if (v76 == *v72 + 48 * v67)
              ++v74;
            --v73;
          }
          while (v73);
        }
        else
        {
          v74 = 0;
        }
        v77 = v74 + 1;
        v41[2] = v77;
        v78 = malloc_type_calloc(v77, 0x28uLL, 0x10200406E8F4065uLL);
        *(_QWORD *)v41 = v78;
        v79 = *v72 + 48 * v67;
        v80 = *(_OWORD *)(v79 + 24);
        v81 = *(_OWORD *)(v79 + 8);
        v78[4] = *(_QWORD *)(v79 + 40);
        *(_OWORD *)v78 = v81;
        *((_OWORD *)v78 + 1) = v80;
        v19 = v101[0];
        if (v68 < v101[0] && *v70)
        {
          v82 = 0;
          v83 = 0;
          do
          {
            if ((*v71)[v82] == *v72 + 48 * v67)
            {
              v84 = *(_QWORD *)v41 + 40 * v74--;
              v85 = &(*v71)[v82];
              v86 = *(_OWORD *)(v85 + 1);
              v87 = *(_OWORD *)(v85 + 3);
              *(_QWORD *)(v84 + 32) = v85[5];
              *(_OWORD *)v84 = v86;
              *(_OWORD *)(v84 + 16) = v87;
            }
            ++v83;
            v82 += 6;
          }
          while (v83 < *v70);
        }
        v41 += 8;
        ++v67;
      }
      while (v67 < *v95);
    }
    v65 = v92 + 2;
    v18 = v94;
  }
  while (v92 + 2 < v19);
  if (v19)
  {
    v88 = 0;
    v89 = 1;
    do
    {
      free((void *)v94[v89]);
      ++v88;
      v89 += 2;
    }
    while (v88 < v101[0]);
  }
  v2 = v90;
  v4 = v93;
LABEL_37:
  free(v18);
  free(v4);
  v42 = *v91;
  if ((_DWORD)v42)
  {
    v43 = 0;
    v44 = *v40;
    do
    {
      if (*(_DWORD *)(v44 + 32 * v43 + 8))
      {
        v45 = 0;
        v46 = 0;
        do
        {
          v47 = sub_1B1992790((unsigned int *)(*(_QWORD *)(v44 + 32 * v43) + v45));
          if (v46)
            v48 = 2;
          else
            v48 = 1;
          if (v47 != v48)
            sub_1B199280C((_DWORD *)(*(_QWORD *)(*v40 + 32 * v43) + v45));
          ++v46;
          v44 = *v40;
          v45 += 40;
        }
        while (v46 < *(unsigned int *)(*v40 + 32 * v43 + 8));
        v42 = *v91;
      }
      ++v43;
    }
    while (v43 < v42);
    if (v42)
    {
      v49 = 0;
      v50 = *v40;
      do
      {
        v51 = *(unsigned int *)(v50 + 32 * v49 + 8);
        if ((_DWORD)v51)
        {
          v52 = 0;
          v53 = *(_QWORD *)(v50 + 32 * v49);
          do
          {
            v54 = *(unsigned int *)(v53 + 40 * v52 + 8);
            if ((_DWORD)v54)
            {
              v55 = (_QWORD *)(v53 + 40 * v52);
              v57 = *v55;
              v56 = (_DWORD *)v55 + 3;
              v58 = (_BYTE *)(v57 + 68);
              do
              {
                if (*v58)
                {
                  if (*(double *)(v58 - 52) == *(double *)(v58 - 36) && *(double *)(v58 - 44) == *(double *)(v58 - 28))
                  {
                    *v58 = 0;
                    --*v56;
                  }
                }
                v58 += 80;
                --v54;
              }
              while (v54);
            }
            ++v52;
          }
          while (v52 != v51);
        }
        ++v49;
      }
      while (v49 != v42);
      v60 = 0;
      v61 = 0;
      do
      {
        v62 = (__int128 *)(*v40 + v60);
        v63 = *(float *)(v2 + 12);
        v64 = v62[1];
        v98 = *v62;
        v99 = v64;
        sub_1B19A7C64(&v98, v63);
        ++v61;
        v60 += 32;
      }
      while (v61 < *v91);
    }
  }
}

void *sub_1B1993140(const CGPath *a1, _DWORD *a2, float a3, float a4)
{
  void *v8;
  _DWORD v10[2];
  void *v11;
  uint64_t v12;
  uint64_t v13;

  *a2 = 0;
  CGPathApply(a1, a2, (CGPathApplierFunction)sub_1B1993B78);
  v8 = malloc_type_calloc(*a2, 0x28uLL, 0x10200406E8F4065uLL);
  v12 = 0;
  v13 = 0;
  *(float *)v10 = a3;
  *(float *)&v10[1] = a4;
  v11 = v8;
  CGPathApply(a1, v10, (CGPathApplierFunction)sub_1B1993B94);
  return v8;
}

void sub_1B19931CC(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  __int128 v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t v7;
  unsigned int *v8;
  void **v9;
  uint64_t *v10;
  unsigned int v11;
  void *v12;
  unsigned int v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  _OWORD v17[2];
  unsigned int v18;

  if (*(_DWORD *)(a1 + 48))
  {
    v2 = 0;
    while (1)
    {
      v18 = 0;
      v3 = (_OWORD *)(*(_QWORD *)(a1 + 40) + 32 * v2);
      v4 = v3[1];
      v17[0] = *v3;
      v17[1] = v4;
      v5 = (uint64_t *)sub_1B1995BE0((uint64_t)v17, &v18);
      v6 = v5;
      if (v18)
        break;
      if (v5)
        goto LABEL_8;
LABEL_9:
      if (++v2 >= (unint64_t)*(unsigned int *)(a1 + 48))
        return;
    }
    v7 = 0;
    v8 = (unsigned int *)v3 + 6;
    v9 = (void **)(v3 + 1);
    v10 = v5 + 2;
    do
    {
      v11 = *v8 + 1;
      *v8 = v11;
      v12 = malloc_type_realloc(*v9, 4 * v11, 0x100004052888210uLL);
      *v9 = v12;
      *((_DWORD *)v12 + *v8 - 1) = *(_DWORD *)(a1 + 24);
      v13 = *(_DWORD *)(a1 + 24) + 3;
      *(_DWORD *)(a1 + 24) = v13;
      v14 = malloc_type_realloc(*(void **)(a1 + 32), 8 * v13, 0x2004093837F09uLL);
      *(_QWORD *)(a1 + 32) = v14;
      v15 = *(_DWORD *)(a1 + 24);
      v14[v15 - 3] = *(v10 - 2);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v15 - 2)) = *(v10 - 1);
      v16 = *v10;
      v10 += 7;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8 * (v15 - 1)) = v16;
      ++v7;
    }
    while (v7 < v18);
LABEL_8:
    free(v6);
    goto LABEL_9;
  }
}

void sub_1B1993318(uint64_t a1, int a2, double a3, double a4, long double a5, long double a6)
{
  int v10;
  double *v11;
  unsigned int v12;
  double v13;
  double v14;
  char *v15;
  int v16;
  double *v17;
  int v18;
  char *v19;
  float64x2_t v20;
  float32x4_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  double *v26;
  long double *v27;
  long double v28;
  long double v29;
  float v30;
  float v31;
  double *v32;
  long double v33;
  long double v34;
  long double v35;
  long double v36;
  long double v37;
  char *v38;
  long double v39;
  long double v40;
  long double v41;
  int v42;
  int v43;
  double *v44;
  long double v45;

  v10 = *(_DWORD *)(a1 + 8);
  v11 = *(double **)a1;
  if (!v10
    || (v12 = v10 - 1,
        v13 = hypot(v11[10 * v12] - a3, v11[10 * v12 + 1] - a4),
        v14 = hypot(*v11 - a3, v11[1] - a4),
        v13 >= 0.01)
    && v14 >= 0.01)
  {
    v15 = (char *)malloc_type_realloc(v11, 80 * (v10 + 1), 0x1000040B1CE3FD8uLL);
    *(_QWORD *)a1 = v15;
    v16 = *(_DWORD *)(a1 + 8);
    v17 = (double *)&v15[80 * v16];
    v17[6] = a3;
    v17[7] = a4;
    *(_OWORD *)v17 = *((_OWORD *)v17 + 3);
    *((_DWORD *)v17 + 18) = a2;
    *((_BYTE *)v17 + 68) = a2 != 3;
    *((_DWORD *)v17 + 16) = 0;
    v18 = *(_DWORD *)(a1 + 8);
    if (v18)
    {
      v19 = v15;
      v20.f64[0] = a3;
      v20.f64[1] = a4;
      *(float32x2_t *)&v20.f64[0] = vcvt_f32_f64(v20);
      v21 = *(float32x4_t *)(a1 + 16);
      v22 = vcvtq_f64_f32(*(float32x2_t *)v21.f32);
      v23 = vcvt_hight_f64_f32(v21);
      v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a3, 0);
      v25 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a4, 0);
      *(int8x16_t *)(a1 + 16) = vbslq_s8((int8x16_t)vmovl_s16(vtrn2_s16(vrev32_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v22, v24), (int32x4_t)vcgtq_f64(v23, v25)))), vmovn_s32(vuzp1q_s32((int32x4_t)vcgtq_f64(v24, v22), (int32x4_t)vcgtq_f64(v25, v23))))), (int8x16_t)vzip1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v21);
      v26 = *(double **)a1;
      if (a2)
      {
        v27 = (long double *)&v15[80 * v16];
        v28 = hypot(a5, a6);
        v27[2] = a5 / v28;
        v27[3] = a6 / v28;
        if (a2 == 3)
          goto LABEL_14;
      }
      else
      {
        v32 = &v26[10 * (v18 - 1)];
        v33 = v32[1] - a4;
        v34 = a3 - *v32;
        v35 = hypot(v33, v34);
        v36 = v33 / v35;
        v37 = v34 / v35;
        v32[4] = v36;
        v32[5] = v37;
        v38 = &v19[80 * v16];
        *((long double *)v38 + 2) = v36;
        *((long double *)v38 + 3) = v37;
      }
      v39 = a4 - v26[1];
      v40 = *v26 - a3;
      v41 = hypot(v39, v40);
      v26[2] = v39 / v41;
      v26[3] = v40 / v41;
      *(_OWORD *)&v19[80 * v16 + 32] = *((_OWORD *)v26 + 1);
      v18 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      v30 = a3;
      *(float *)(a1 + 16) = v30;
      *(float *)(a1 + 20) = v30;
      v31 = a4;
      *(float *)(a1 + 24) = v31;
      *(float *)(a1 + 28) = v31;
    }
LABEL_14:
    if (a2 == 3)
      v42 = 1;
    else
      v42 = 2;
    v43 = v42 + *(_DWORD *)(a1 + 12);
    *(_DWORD *)(a1 + 8) = v18 + 1;
    *(_DWORD *)(a1 + 12) = v43;
    return;
  }
  if (a2 == 1)
  {
    v44 = &v11[10 * v12];
    v45 = hypot(a5, a6);
    v44[4] = a5 / v45;
    v44[5] = a6 / v45;
  }
  else if (a2 == 2)
  {
    v29 = hypot(a5, a6);
    v11[2] = a5 / v29;
    v11[3] = a6 / v29;
  }
}

void sub_1B19935B4(uint64_t a1, int a2, double a3, double a4, double a5)
{
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  int v13;
  double v14;
  _BOOL4 v15;
  double v16;
  double v17;
  unsigned int v18;
  unsigned int v19;
  double v20;
  long double v21;
  long double v22;
  unsigned int v23;
  double v24;

  v7 = *(double **)a1;
  v8 = (double *)(*(_QWORD *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  v9 = *v8;
  v10 = v8[1];
  if (a2)
  {
    v12 = *v7;
    v11 = v7[1];
    v13 = 1;
  }
  else
  {
    v11 = a4;
    v12 = a3;
    v14 = v7[1];
    v15 = a3 == *v7;
    v13 = v11 == v14 && v15;
  }
  v16 = v11 - v10;
  v17 = hypot(v12 - v9, v11 - v10);
  if (v17 <= a5)
  {
    if ((v13 & 1) == 0)
      sub_1B1993318(a1, 0, v12, v11, *MEMORY[0x1E0C9D538], *(long double *)(MEMORY[0x1E0C9D538] + 8));
  }
  else
  {
    v18 = vcvtpd_u64_f64(v17 / a5);
    v19 = v18 - v13;
    if (v19)
    {
      v20 = (v12 - v9) / (double)v18;
      v21 = *MEMORY[0x1E0C9D538];
      v22 = *(double *)(MEMORY[0x1E0C9D538] + 8);
      v23 = 1;
      v24 = v16 / (double)v18;
      do
      {
        sub_1B1993318(a1, 0, v9 + (double)v23 * v20, v10 + (double)v23 * v24, v21, v22);
        ++v23;
      }
      while (v23 <= v19);
    }
  }
}

void sub_1B19936F8(uint64_t a1, double a2, double a3, double a4, double a5, double a6, double a7, float a8)
{
  double *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  unsigned int v32;
  double v33;
  double v34;
  int v35;
  BOOL v36;
  int v37;
  double v38;
  double v39;
  double v40;
  double i;
  long double v42;
  long double v43;
  double v44;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;

  v9 = (double *)(*(_QWORD *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  v10 = *v9;
  v11 = v9[1];
  v12 = a2 - *v9;
  v13 = a4 - a2 - v12;
  v44 = a6 - a4;
  v14 = a6 - a4 - (a4 - a2);
  v15 = v14 - v13;
  v16 = a5 - a3 - (a3 - v11);
  v17 = a7 - a5 - (a5 - a3);
  v18 = v17 - v16;
  v19 = v17 * v17 + v14 * v14;
  if (v16 * v16 + v13 * v13 > v19)
    v19 = v16 * v16 + v13 * v13;
  v20 = v19 * 9.0;
  v21 = (float)(a8 * a8);
  v22 = v15 * 6.0;
  v23 = (v13 + v15) * 6.0;
  v24 = v15 + (v12 + v13) * 3.0;
  v25 = v18 * 6.0;
  v26 = (v16 + v18) * 6.0;
  v27 = v18 + (a3 - v11 + v16) * 3.0;
  v28 = (a6 + v10 - a2 - a4) * 3.0;
  v29 = v11 - a3;
  v30 = (a7 + v11 - a3 - a5) * 3.0;
  v31 = v20 * 0.0625;
  if (v20 * 0.0625 <= v21)
  {
    v37 = 0;
    v50 = v18 * 6.0;
    v51 = v15 * 6.0;
    v48 = v18 * 6.0;
    v49 = v15 * 6.0;
  }
  else
  {
    v32 = 1;
    v33 = v18 * 6.0;
    v34 = v15 * 6.0;
    do
    {
      v22 = v22 * 0.125;
      v23 = v23 * 0.25 - v22;
      v24 = v24 * 0.5 - v23 * 0.5;
      v25 = v25 * 0.125;
      v26 = v26 * 0.25 - v25;
      v27 = v27 * 0.5 - v26 * 0.5;
      v34 = v34 * 0.25;
      v28 = v28 * 0.5 - v34 * 0.5;
      v33 = v33 * 0.25;
      v30 = v30 * 0.5 - v33 * 0.5;
      v35 = 2 * v32;
      v31 = v31 * 0.0625;
      if (v31 <= v21)
        break;
      v36 = v32 > 0x8000;
      v32 *= 2;
    }
    while (!v36);
    v48 = v33;
    v49 = v34;
    v50 = v25;
    v51 = v22;
    v37 = v35 - 1;
  }
  v52 = v12 * 3.0;
  v53 = v29 * 3.0;
  sub_1B1993318(a1, 1, v10, v11, v29 * 3.0, v12 * 3.0);
  v39 = v50;
  v38 = v51;
  v40 = v48;
  for (i = v49; v37; --v37)
  {
    v10 = v24 + v10;
    v42 = v53 - v30;
    v30 = v40 + v30;
    v24 = v23 + v24;
    v23 = v38 + v23;
    v11 = v27 + v11;
    v43 = v28 + v52;
    v28 = i + v28;
    v27 = v27 + v26;
    v26 = v39 + v26;
    v52 = v43;
    v53 = v42;
    sub_1B1993318(a1, 3, v10, v11, v42, v43);
    v40 = v48;
    i = v49;
    v39 = v50;
    v38 = v51;
  }
  sub_1B1993318(a1, 2, a6, a7, (a5 - a7) * 3.0, v44 * 3.0);
}

void sub_1B1993978(uint64_t a1, double a2, double a3, double a4, double a5, float a6)
{
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  unsigned int v18;
  double v19;
  double v20;
  int v21;
  BOOL v22;
  int v23;
  double v24;
  double v25;
  double i;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v38;
  double v39;

  v7 = (double *)(*(_QWORD *)a1 + 80 * (*(_DWORD *)(a1 + 8) - 1));
  v9 = *v7;
  v8 = v7[1];
  v10 = v8 - a3;
  v11 = ((a5 + v8 - a3 - a3) * (a5 + v8 - a3 - a3) + (a4 + *v7 - a2 - a2) * (a4 + *v7 - a2 - a2)) * 27.0 * 0.015625;
  v12 = (float)(a6 * a6);
  v13 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
  v14 = a4 - *v7;
  v15 = a5 + v8 + a3 * -2.0;
  v16 = v15 + v15;
  v17 = a5 - v8;
  if (v11 <= v12)
  {
    v23 = 0;
    v32 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
    v33 = v32;
    v19 = v15 + v15;
  }
  else
  {
    v18 = 1;
    v19 = v15 + v15;
    v20 = a4 + v9 + a2 * -2.0 + a4 + v9 + a2 * -2.0;
    do
    {
      v13 = v13 * 0.25;
      v14 = v14 * 0.5 - v13 * 0.5;
      v16 = v16 * 0.25;
      v17 = v17 * 0.5 - v16 * 0.5;
      v20 = v20 * 0.5;
      v19 = v19 * 0.5;
      v11 = v11 * 0.03125;
      v21 = 2 * v18;
      if (v11 <= v12)
        break;
      v22 = v18 > 0x8000;
      v18 *= 2;
    }
    while (!v22);
    v32 = v20;
    v33 = v13;
    v23 = v21 - 1;
  }
  v24 = v10 + v10;
  v25 = a2 - v9 + a2 - v9;
  sub_1B1993318(a1, 1, v9, v8, v10 + v10, v25);
  v27 = v32;
  for (i = v33; v23; --v23)
  {
    v9 = v14 + v9;
    v24 = v24 - v19;
    v8 = v17 + v8;
    v25 = v27 + v25;
    v38 = i + v14;
    v39 = v16 + v17;
    v28 = v16;
    v29 = v19;
    v30 = i;
    v31 = v27;
    sub_1B1993318(a1, 3, v9, v8, v24, v25);
    v27 = v31;
    i = v30;
    v19 = v29;
    v16 = v28;
    v14 = v38;
    v17 = v39;
  }
  sub_1B1993318(a1, 2, a4, a5, a3 - a5 + a3 - a5, a4 - a2 + a4 - a2);
}

_DWORD *sub_1B1993B78(_DWORD *result, _DWORD *a2)
{
  if (!*a2)
    ++*result;
  return result;
}

void sub_1B1993B94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  double *v5;

  switch(*(_DWORD *)a2)
  {
    case 0:
      v2 = *(_QWORD *)(a1 + 8);
      v3 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 24) = v3 + 1;
      v4 = v2 + 40 * v3;
      *(_QWORD *)(a1 + 16) = v4;
      sub_1B1993318(v4, 0, **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *MEMORY[0x1E0C9D538], *(long double *)(MEMORY[0x1E0C9D538] + 8));
      break;
    case 1:
      sub_1B19935B4(*(_QWORD *)(a1 + 16), 0, **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *(float *)(a1 + 4));
      break;
    case 2:
      sub_1B1993978(*(_QWORD *)(a1 + 16), **(double **)(a2 + 8), *(double *)(*(_QWORD *)(a2 + 8) + 8), *(double *)(*(_QWORD *)(a2 + 8) + 16), *(double *)(*(_QWORD *)(a2 + 8) + 24), *(float *)a1);
      break;
    case 3:
      v5 = *(double **)(a2 + 8);
      sub_1B19936F8(*(_QWORD *)(a1 + 16), *v5, v5[1], v5[2], v5[3], v5[4], v5[5], *(float *)a1);
      break;
    case 4:
      sub_1B19935B4(*(_QWORD *)(a1 + 16), 1, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8), *(float *)(a1 + 4));
      break;
    default:
      return;
  }
}

void sub_1B1993C78(void **a1)
{
  void *v1;

  v1 = *a1;
  if (v1)
    free(v1);
}

void **sub_1B1993C88(void **result, uint64_t a2, uint64_t a3)
{
  void **v5;
  unsigned int v6;
  unsigned int v7;

  v5 = result;
  v6 = *(_DWORD *)result;
  if (*(_DWORD *)result == *((_DWORD *)result + 1))
  {
    v7 = 2 * v6;
    *((_DWORD *)result + 1) = v7;
    result[1] = malloc_type_realloc(result[1], 8 * v7, 0x2004093837F09uLL);
    result = (void **)malloc_type_realloc(v5[2], 8 * *((unsigned int *)v5 + 1), 0x2004093837F09uLL);
    v5[2] = result;
    v6 = *(_DWORD *)v5;
  }
  *((_QWORD *)v5[1] + v6) = a2;
  *((_QWORD *)v5[2] + v6) = a3;
  *(_DWORD *)v5 = v6 + 1;
  return result;
}

_QWORD *sub_1B1993D28(int *a1, uint64_t a2)
{
  int v4;
  int v5;
  _QWORD *result;

  v4 = *a1;
  v5 = a1[1];
  if (v5 == *a1)
  {
    a1[1] = 2 * v5;
    result = malloc_type_realloc(*((void **)a1 + 1), 8 * (2 * v5), 0x2004093837F09uLL);
    *((_QWORD *)a1 + 1) = result;
    v4 = *a1;
  }
  else
  {
    result = (_QWORD *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  result[v4] = a2;
  return result;
}

uint64_t sub_1B1993D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v10;
  uint64_t result;

  v9 = *(_DWORD *)(a1 + 32);
  if (v9 >= *(_DWORD *)(a1 + 36))
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Cannot produce any additional triangle."), a3, a4, a5, a6, a7, a8, (uint64_t)"triangulation->triangleCount < triangulation->maxTriangleCount");
    v9 = *(_DWORD *)(a1 + 32);
  }
  v10 = *(_QWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 32) = v9 + 1;
  result = v10 + 56 * v9;
  *(_BYTE *)(result + 51) = 0;
  return result;
}

uint64_t sub_1B1993DFC(uint64_t a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  uint64_t v4;
  _QWORD *i;
  uint64_t v6;

  v2 = *(_DWORD *)(a2 + 32);
  v3 = v2 - 1;
  if (v2 - 1 < 0)
    return 2;
  v4 = *(_QWORD *)(a2 + 16);
  for (i = (_QWORD *)(v4 + 56 * v3); ; i -= 7)
  {
    if (v4)
    {
      v6 = v4 + 56 * v3;
      if (*i == a1 || i[1] == a1)
        return v6;
      if (i[2] == a1)
        break;
    }
    --v3;
    if (--v2 <= 0)
      return 2;
  }
  return (uint64_t)i;
}

uint64_t sub_1B1993E68(float64x2_t *a1, double **a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  char v6;
  float64x2_t v7;
  uint64_t v8;
  int8x16_t v9;
  float64x2_t v10;
  double v11;
  double v12;
  double v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  float v19;
  double v20;
  double v21;
  float v22;
  float v23;

  v3 = *(unsigned int *)(a3 + 32);
  v4 = *(_DWORD *)(a3 + 32);
  while (v4)
  {
    v5 = 0;
    v6 = 0;
    --v4;
    v7 = *a1;
    do
    {
      if (v5 == 2)
        v8 = 0;
      else
        v8 = v5 + 1;
      v9 = (int8x16_t)vsubq_f64(*(float64x2_t *)a2[v5], v7);
      v10 = vmulq_f64(vsubq_f64(*(float64x2_t *)a2[v8], v7), (float64x2_t)vextq_s8(v9, v9, 8uLL));
      if ((vmovn_s64(vcgtq_f64(v10, (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1))).u8[0] & 1) != 0)
      {
        a2 = (double **)a2[v5 + 3];
        v6 = 1;
      }
      ++v5;
    }
    while (v5 != 3);
    if ((v6 & 1) == 0)
      return (uint64_t)a2;
  }
  if (!(_DWORD)v3)
    return 2;
  a2 = *(double ***)(a3 + 16);
  v11 = a1->f64[0];
  v12 = a1->f64[1];
  v13 = -a1->f64[0];
  while (1)
  {
    v14 = a2[1];
    v15 = a2[2];
    v16 = **a2;
    v17 = (*a2)[1];
    v18 = v14[1];
    v19 = fabs(v16 * v18 + v11 * v17 + *v14 * v12 + v13 * v18 - *v14 * v17 - v16 * v12) * 0.5;
    v20 = v15[1];
    v21 = *v14 * v20;
    v22 = fabs(v21 + v11 * v18 + *v15 * v12 + v13 * v20 - *v15 * v18 - *v14 * v12) * 0.5;
    v23 = fabs(v17 * *v15 + v11 * v20 + v16 * v12 + v13 * v17 - v16 * v20 - *v15 * v12) * 0.5;
    *(float *)&v16 = fabs(v21 + v16 * v18 + *v15 * v17 - v16 * v20 - *v15 * v18 - *v14 * v17) * 0.5;
    if (vabds_f32((float)(*(float *)&v16 - v23) - v22, v19) < 0.001)
      break;
    a2 += 7;
    if (!--v3)
      return 2;
  }
  return (uint64_t)a2;
}

uint64_t sub_1B1993FCC(uint64_t a1, double *a2, double *a3, double ***a4)
{
  double *v8;
  double *v9;
  BOOL v10;
  double ***v11;
  double **v12;
  double *v13;
  double *v14;
  double *v15;
  uint64_t result;

  v8 = *(double **)a1;
  if (*(double **)a1 == a3 || (v9 = *(double **)(a1 + 8), v9 == a3) || *(double **)(a1 + 16) == a3)
  {
    v12 = *(double ***)(a1 + 24);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3))
      goto LABEL_41;
    v12 = *(double ***)(a1 + 32);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3))
      goto LABEL_41;
    v12 = *(double ***)(a1 + 40);
    if (v12 && (*v12 == a2 || v12[1] == a2 || v12[2] == a2) && (*v12 == a3 || v12[1] == a3 || v12[2] == a3))
      goto LABEL_41;
  }
  else
  {
    v10 = v8 == a2 || v9 == a2;
    if (!v10 && sub_1B1992708(*a2, a2[1], *a3, a3[1], *v8, v8[1], *v9, v9[1]))
    {
      v11 = (double ***)(a1 + 24);
LABEL_40:
      v12 = *v11;
LABEL_41:
      *a4 = v12;
      return 1;
    }
    v13 = *(double **)(a1 + 8);
    if (v13 != a2)
    {
      v14 = *(double **)(a1 + 16);
      if (v14 != a2)
      {
        if (sub_1B1992708(*a2, a2[1], *a3, a3[1], *v13, v13[1], *v14, v14[1]))
        {
          v11 = (double ***)(a1 + 32);
          goto LABEL_40;
        }
      }
    }
    v15 = *(double **)(a1 + 16);
    if (v15 != a2 && *(double **)a1 != a2)
    {
      result = sub_1B1992708(*a2, a2[1], *a3, a3[1], *v15, v15[1], **(double **)a1, *(double *)(*(_QWORD *)a1 + 8));
      if (!(_DWORD)result)
        return result;
      v11 = (double ***)(a1 + 40);
      goto LABEL_40;
    }
  }
  return 0;
}

BOOL sub_1B19941B4(double *a1, double *a2, double *a3, double *a4)
{
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;

  v4 = a1[1];
  v5 = a2[1];
  v6 = a3[1];
  v7 = v4 * v4 + *a1 * *a1;
  v8 = v5 * v5 + *a2 * *a2;
  v9 = v6 * v6 + *a3 * *a3;
  v10 = v5 - v6;
  v11 = *a2 * (v6 - v4) + *a1 * (v5 - v6);
  v12 = v4 - v5;
  v13 = v11 + *a3 * v12 + v11 + *a3 * v12;
  v14 = (v8 * (v6 - v4) + v7 * v10 + v9 * v12) / v13;
  v15 = *a2 - *a3;
  v16 = *a1 - *a2;
  v17 = -(v8 * (*a3 - *a1) + v7 * v15 + v9 * v16) / v13;
  v18 = sqrt(((v4 - v6) * (v4 - v6) + (*a1 - *a3) * (*a1 - *a3)) * ((v12 * v12 + v16 * v16) * (v10 * v10 + v15 * v15)));
  v19 = fabs(v13);
  return (v17 - a4[1]) * (v17 - a4[1]) + (v14 - *a4) * (v14 - *a4) < v18 / v19 * (v18 / v19);
}

uint64_t sub_1B1994278(uint64_t a1, double *a2, _DWORD *a3, _DWORD *a4)
{
  double *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v10;
  double *v11;
  double v12;

  v4 = *(double **)(a1 + 8);
  v5 = **(double **)a1;
  v6 = *(double *)(*(_QWORD *)a1 + 8);
  v7 = v4[1];
  v8 = *a2;
  v9 = a2[1];
  if ((*v4 - v5) * (v9 - v6) - (v7 - v6) * (*a2 - v5) == 0.0)
  {
    v10 = 0;
    *a3 = 0;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 24 + 8 * v10) == a1)
        break;
      ++v10;
    }
    while (v10 != 3);
LABEL_15:
    *a4 = v10;
    return 1;
  }
  v11 = *(double **)(a1 + 16);
  v12 = v11[1];
  if ((*v11 - *v4) * (v9 - v7) - (v12 - v7) * (v8 - *v4) == 0.0)
  {
    v10 = 0;
    *a3 = 1;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24 + 8 * v10) == a1)
        break;
      ++v10;
    }
    while (v10 != 3);
    goto LABEL_15;
  }
  if ((v5 - *v11) * (v9 - v12) - (v6 - v12) * (v8 - *v11) == 0.0)
  {
    v10 = 0;
    *a3 = 2;
    do
    {
      if (*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24 + 8 * v10) == a1)
        break;
      ++v10;
    }
    while (v10 != 3);
    goto LABEL_15;
  }
  return 0;
}

uint64_t sub_1B1994390(int *a1, double *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double *v8;
  double **v11;
  double *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  double *v17;
  double *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  double *v25;
  uint64_t v26;
  double **v27;
  double *v28;
  double *v29;
  unsigned int v30;
  double *v31;
  double *v32;
  unsigned int v33;
  double *v34;
  double *v35;
  double *v37;
  BOOL v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  uint64_t v43;
  double *v45;
  BOOL v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  double **v52;
  uint64_t v53;
  double *v54;
  double *v55;
  uint64_t v56;
  uint64_t *v57;
  double *v58;
  double *v60;
  unsigned int v63;
  double *v64;
  unsigned int v65;
  unsigned int v69;
  uint64_t v70;
  double *v71;
  unsigned int v76;
  uint64_t v77;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  double *v82;
  double *v84;
  int v86;
  unsigned int v88;
  double *v89;
  double *v91;
  int v93;
  unsigned int v95;
  double *v96;
  double *v98;
  int v100;
  unsigned int v102;
  double *v103;
  double *v105;
  int v107;
  unsigned int v109;
  uint64_t v111;
  uint64_t v112;

  v8 = (double *)a3;
  v11 = (double **)*((_QWORD *)a1 + 1);
  v12 = *v11;
  v13 = *a1;
  v14 = (*a1 - 1);
  if (v14 <= 1)
  {
    v15 = 0;
    v19 = (uint64_t **)(a1 + 4);
    v20 = (uint64_t *)*((_QWORD *)a1 + 2);
    v21 = *v20;
    v22 = *(_DWORD *)a4;
    goto LABEL_86;
  }
  LODWORD(v111) = *a1;
  HIDWORD(v111) = a5;
  v112 = a4;
  v15 = 0;
  v16 = 1;
  v17 = *v11;
  do
  {
    v18 = v11[v16];
    if (sub_1B19941B4(a2, v8, v17, v18))
    {
      v15 = v16;
      v17 = v18;
    }
    ++v16;
  }
  while (v14 != v16);
  v19 = (uint64_t **)(a1 + 4);
  v20 = (uint64_t *)*((_QWORD *)a1 + 2);
  v21 = *v20;
  a4 = v112;
  v22 = *(_DWORD *)v112;
  if (v15 < 1)
  {
    v12 = v17;
    a5 = HIDWORD(v111);
LABEL_85:
    v13 = v111;
LABEL_86:
    v50 = v20[v14];
    if (v13 - 3 >= v15)
    {
      v52 = &v11[v13 - 2];
      v53 = v13 - 3;
      while (1)
      {
        v54 = *v52;
        v51 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8 * --v22);
        *(_QWORD *)v51 = v8;
        if ((a5 & 1) != 0)
        {
          *(_QWORD *)(v51 + 8) = v54;
          v55 = v54;
          v54 = *(double **)(*((_QWORD *)a1 + 1) + 8 * v53);
          v56 = 1;
        }
        else
        {
          v55 = *(double **)(*((_QWORD *)a1 + 1) + 8 * v53);
          *(_QWORD *)(v51 + 8) = v55;
          v56 = v50;
          v50 = 1;
        }
        *(_QWORD *)(v51 + 16) = v54;
        *(_QWORD *)(v51 + 24) = v50;
        v57 = (uint64_t *)(*v19)[v53 + 1];
        *(_QWORD *)(v51 + 32) = v57;
        *(_QWORD *)(v51 + 40) = v56;
        if ((_DWORD)a5)
        {
          if (v50)
          {
            a6 = *(_QWORD *)v50;
            v58 = *(double **)(v50 + 8);
            if (*(double **)v50 == v55 && v58 == v8)
            {
              v63 = 0;
              if (!v57)
                goto LABEL_194;
            }
            else
            {
              v60 = *(double **)(v50 + 16);
              if (v60 == v55 && a6 == (_QWORD)v8)
                a6 = 2;
              else
                a6 = 0xFFFFFFFFLL;
              if (v58 == v55 && v60 == v8)
                v63 = 1;
              else
                v63 = a6;
              if (!v57)
                goto LABEL_194;
            }
          }
          else
          {
            v63 = -1;
            if (!v57)
              goto LABEL_194;
          }
          a7 = *v57;
          a3 = v57[1];
          if ((double *)*v57 == v54 && a3 == (_QWORD)v55)
          {
            v69 = 0;
          }
          else
          {
            a6 = v57[2];
            if ((double *)a6 == v54 && a7 == (_QWORD)v55)
              a7 = 2;
            else
              a7 = 0xFFFFFFFFLL;
            if ((double *)a3 == v54 && a6 == (_QWORD)v55)
              v69 = 1;
            else
              v69 = a7;
          }
          if (v63 == -1 || v69 == -1)
            goto LABEL_194;
          v57[v69 + 3] = v51;
          *(_QWORD *)(*(_QWORD *)(v51 + 24) + 8 * v63 + 24) = v51;
          v70 = *(_QWORD *)(v51 + 32);
          *(_BYTE *)(v51 + 48) = *(_BYTE *)(*(_QWORD *)(v51 + 24) + v63 + 48);
          *(_WORD *)(v51 + 49) = *(unsigned __int8 *)(v70 + v69 + 48);
        }
        else
        {
          if (v56)
          {
            v64 = *(double **)v56;
            a6 = *(_QWORD *)(v56 + 8);
            if (*(double **)v56 == v8 && (double *)a6 == v54)
            {
              v65 = 0;
              if (!v57)
                goto LABEL_194;
            }
            else
            {
              v71 = *(double **)(v56 + 16);
              if ((double *)a6 == v8 && v71 == v54)
              {
                v65 = 1;
                if (!v57)
                  goto LABEL_194;
              }
              else
              {
                if (v71 == v8 && v64 == v54)
                  v65 = 2;
                else
                  v65 = -1;
                if (!v57)
                  goto LABEL_194;
              }
            }
          }
          else
          {
            v65 = -1;
            if (!v57)
              goto LABEL_194;
          }
          a3 = *v57;
          a7 = v57[1];
          if ((double *)*v57 == v54 && a7 == (_QWORD)v55)
          {
            v76 = 0;
          }
          else
          {
            a6 = v57[2];
            if ((double *)a7 == v54 && a6 == (_QWORD)v55)
            {
              v76 = 1;
            }
            else if ((double *)a6 == v54 && a3 == (_QWORD)v55)
            {
              v76 = 2;
            }
            else
            {
              v76 = -1;
            }
          }
          if (v65 == -1 || v76 == -1)
            goto LABEL_194;
          v57[v76 + 3] = v51;
          *(_QWORD *)(*(_QWORD *)(v51 + 40) + 8 * v65 + 24) = v51;
          v77 = *(_QWORD *)(v51 + 32);
          *(_BYTE *)(v51 + 50) = *(_BYTE *)(*(_QWORD *)(v51 + 40) + v65 + 48);
          *(_BYTE *)(v51 + 49) = *(_BYTE *)(v77 + v76 + 48);
          *(_BYTE *)(v51 + 48) = 0;
        }
        v52 = (double **)(*((_QWORD *)a1 + 1) + 8 * v53);
        v50 = v51;
        if (v53-- <= v15)
          goto LABEL_174;
      }
    }
    v51 = v20[v14];
LABEL_174:
    v79 = *(_QWORD *)(a4 + 8);
    v80 = v22 - 1;
    *(_DWORD *)a4 = v80;
    v81 = *(_QWORD *)(v79 + 8 * v80);
    *(_QWORD *)v81 = a2;
    if ((_DWORD)a5)
    {
      *(_QWORD *)(v81 + 8) = v8;
      *(_QWORD *)(v81 + 16) = v12;
      if (v21)
      {
        v82 = *(double **)(v21 + 8);
        if (*(double **)v21 == a2 && v82 == v12)
        {
          v88 = 0;
          if (!v51)
            goto LABEL_256;
        }
        else
        {
          v84 = *(double **)(v21 + 16);
          if (v84 == a2 && *(_QWORD *)v21 == (_QWORD)v12)
            v86 = 2;
          else
            v86 = -1;
          if (v82 == a2 && v84 == v12)
            v88 = 1;
          else
            v88 = v86;
          if (!v51)
            goto LABEL_256;
        }
      }
      else
      {
        v88 = -1;
        if (!v51)
          goto LABEL_256;
      }
      v96 = *(double **)(v51 + 8);
      if (*(double **)v51 == v12 && v96 == v8)
      {
        v102 = 0;
      }
      else
      {
        v98 = *(double **)(v51 + 16);
        if (v98 == v12 && *(_QWORD *)v51 == (_QWORD)v8)
          v100 = 2;
        else
          v100 = -1;
        if (v96 == v12 && v98 == v8)
          v102 = 1;
        else
          v102 = v100;
      }
      if (v88 != -1 && v102 != -1)
      {
        *(_QWORD *)(v21 + 8 * v88 + 24) = v81;
        *(_QWORD *)(v51 + 8 * v102 + 24) = v81;
        *(_QWORD *)(v81 + 24) = 1;
        *(_QWORD *)(v81 + 32) = v51;
        *(_QWORD *)(v81 + 40) = v21;
        *(_BYTE *)(v81 + 48) = 1;
        *(_BYTE *)(v81 + 49) = *(_BYTE *)(v51 + v102 + 48);
        *(_BYTE *)(v81 + 50) = *(_BYTE *)(v21 + v88 + 48);
        return v81;
      }
LABEL_256:
      *(_QWORD *)(v81 + 24) = 1;
      *(_QWORD *)(v81 + 32) = 1;
      *(_QWORD *)(v81 + 40) = 1;
      return v81;
    }
    *(_QWORD *)(v81 + 8) = v12;
    *(_QWORD *)(v81 + 16) = v8;
    if (v21)
    {
      v89 = *(double **)(v21 + 8);
      if (*(double **)v21 == v12 && v89 == a2)
      {
        v95 = 0;
        if (!v51)
          goto LABEL_261;
      }
      else
      {
        v91 = *(double **)(v21 + 16);
        if (v91 == v12 && *(_QWORD *)v21 == (_QWORD)a2)
          v93 = 2;
        else
          v93 = -1;
        if (v89 == v12 && v91 == a2)
          v95 = 1;
        else
          v95 = v93;
        if (!v51)
          goto LABEL_261;
      }
    }
    else
    {
      v95 = -1;
      if (!v51)
        goto LABEL_261;
    }
    v103 = *(double **)(v51 + 8);
    if (*(double **)v51 == v8 && v103 == v12)
    {
      v109 = 0;
    }
    else
    {
      v105 = *(double **)(v51 + 16);
      if (v105 == v8 && *(_QWORD *)v51 == (_QWORD)v12)
        v107 = 2;
      else
        v107 = -1;
      if (v103 == v8 && v105 == v12)
        v109 = 1;
      else
        v109 = v107;
    }
    if (v95 <= 2 && v109 < 3)
    {
      *(_QWORD *)(v21 + 8 * v95 + 24) = v81;
      *(_QWORD *)(v51 + 8 * v109 + 24) = v81;
      *(_QWORD *)(v81 + 24) = v21;
      *(_QWORD *)(v81 + 32) = v51;
      *(_QWORD *)(v81 + 40) = 1;
      *(_BYTE *)(v81 + 48) = *(_BYTE *)(v21 + v95 + 48);
      *(_BYTE *)(v81 + 49) = *(_BYTE *)(v51 + v109 + 48);
      *(_BYTE *)(v81 + 50) = 1;
      return v81;
    }
LABEL_261:
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXShapeConnectedComponentTriangulatePseudopolygon - neighbor index out of bounds"), a3, a4, a5, a6, a7, a8, v111);
    return v81;
  }
  v23 = 1;
  a5 = HIDWORD(v111);
  while (1)
  {
    v24 = *(_QWORD *)(*(_QWORD *)(v112 + 8) + 8 * --v22);
    if (HIDWORD(v111))
    {
      v25 = v11[v23];
      *(_QWORD *)v24 = v25;
      v26 = 1;
    }
    else
    {
      *(_QWORD *)v24 = v12;
      v25 = v12;
      v12 = *(double **)(*((_QWORD *)a1 + 1) + v23 * 8);
      v26 = v21;
      v21 = 1;
    }
    *(_QWORD *)(v24 + 8) = v12;
    *(_QWORD *)(v24 + 16) = a2;
    v27 = (double **)(*v19)[v23];
    *(_QWORD *)(v24 + 24) = v27;
    *(_QWORD *)(v24 + 32) = v21;
    *(_QWORD *)(v24 + 40) = v26;
    if (!HIDWORD(v111))
      break;
    if (v21)
    {
      v28 = *(double **)v21;
      v29 = *(double **)(v21 + 8);
      if (*(double **)v21 == a2 && v29 == v12)
      {
        v30 = 0;
      }
      else
      {
        v34 = *(double **)(v21 + 16);
        if (v29 == a2 && v34 == v12)
        {
          v30 = 1;
        }
        else if (v34 == a2 && v28 == v12)
        {
          v30 = 2;
        }
        else
        {
          v30 = -1;
        }
      }
    }
    else
    {
      v30 = -1;
    }
    if (!v27)
      goto LABEL_194;
    v37 = v27[1];
    if (*v27 == v12 && v37 == v25)
    {
      v42 = 0;
    }
    else
    {
      a3 = (uint64_t)v27[2];
      v39 = (double *)a3 == v12 && *v27 == v25;
      v40 = v39 ? 2 : -1;
      v41 = v37 == v12 && a3 == (_QWORD)v25;
      v42 = v41 ? 1 : v40;
    }
    if (v30 == -1 || v42 == -1)
      goto LABEL_194;
    v27[v42 + 3] = (double *)v24;
    *(_QWORD *)(*(_QWORD *)(v24 + 32) + 8 * v30 + 24) = v24;
    v43 = *(_QWORD *)(v24 + 24);
    *(_BYTE *)(v24 + 49) = *(_BYTE *)(*(_QWORD *)(v24 + 32) + v30 + 48);
    *(_BYTE *)(v24 + 48) = *(_BYTE *)(v43 + v42 + 48);
    *(_BYTE *)(v24 + 50) = 0;
LABEL_81:
    v11 = (double **)*((_QWORD *)a1 + 1);
    v12 = v11[v23++];
    v21 = v24;
    if (v15 + 1 == v23)
    {
      *(_DWORD *)v112 = v22;
      v20 = *v19;
      v12 = v17;
      v21 = v24;
      goto LABEL_85;
    }
  }
  if (v26)
  {
    v32 = *(double **)v26;
    v31 = *(double **)(v26 + 8);
    if (*(double **)v26 == v25 && v31 == a2)
    {
      v33 = 0;
    }
    else
    {
      v35 = *(double **)(v26 + 16);
      if (v31 == v25 && v35 == a2)
      {
        v33 = 1;
      }
      else if (v35 == v25 && v32 == a2)
      {
        v33 = 2;
      }
      else
      {
        v33 = -1;
      }
    }
  }
  else
  {
    v33 = -1;
  }
  if (v27)
  {
    v45 = v27[1];
    if (*v27 == v12 && v45 == v25)
    {
      v49 = 0;
    }
    else
    {
      a3 = (uint64_t)v27[2];
      if (v45 == v12 && a3 == (_QWORD)v25)
      {
        v49 = 1;
      }
      else
      {
        v48 = (double *)a3 == v12 && *v27 == v25;
        v49 = v48 ? 2 : -1;
      }
    }
    if (v33 != -1 && v49 != -1)
    {
      v27[v49 + 3] = (double *)v24;
      *(_QWORD *)(*(_QWORD *)(v24 + 40) + 8 * v33 + 24) = v24;
      *(_BYTE *)(v24 + 50) = *(_BYTE *)(*(_QWORD *)(v24 + 40) + v33 + 48);
      *(_WORD *)(v24 + 48) = *(unsigned __int8 *)(*(_QWORD *)(v24 + 24) + v49 + 48);
      goto LABEL_81;
    }
  }
LABEL_194:
  *(_DWORD *)a4 = v22;
  return 2;
}

void sub_1B1994B0C(uint64_t a1, double *a2, double *a3)
{
  double *v3;
  double *v4;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  int v26;
  double *v27;
  void *v28;
  int v29;
  double *v30;
  uint64_t **v31;
  double v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  double *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  double *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  double v73;
  void *ptr;
  uint64_t v75;
  void *v76;
  void *v77;
  uint64_t v78;
  void *v79;
  void *v80;
  uint64_t v81;
  void *v82;
  double **v83;

  v4 = a3;
  if (*a2 > *a3 || *a2 == *a3 && a2[1] < a3[1])
  {
    v6 = a2;
  }
  else
  {
    v6 = a3;
    v4 = a2;
  }
  v7 = sub_1B1993DFC((uint64_t)v4, a1);
  if (v7 == 2)
  {
    v17 = 6;
    goto LABEL_42;
  }
  v8 = v7;
  v9 = *(_DWORD *)(a1 + 32);
  v83 = 0;
  if ((sub_1B1993FCC(v7, v4, v6, &v83) & 1) != 0)
  {
LABEL_17:
    if (v8 && (*(double **)v8 == v6 || *(double **)(v8 + 8) == v6 || *(double **)(v8 + 16) == v6))
    {
      v18 = 0;
      while (*(double ***)(v8 + 8 * v18 + 24) != v83)
      {
        if (++v18 == 3)
        {
          LODWORD(v18) = -1;
          break;
        }
      }
      v19 = 0;
      while (v83[v19 + 3] != (double *)v8)
      {
        if (++v19 == 3)
        {
          LODWORD(v19) = -1;
          break;
        }
      }
      *((_BYTE *)v83 + v19 + 48) = 1;
      *(_BYTE *)(v8 + v18 + 48) = 1;
      return;
    }
    v81 = 0x1000000000;
    v82 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
    v78 = 0x400000000;
    v79 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v80 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v75 = 0x400000000;
    v76 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v11 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v77 = v11;
    do
    {
      v15 = *(double **)(v8 + v12);
      if (v15 != v4)
      {
        if ((*v6 - *v4) * (v15[1] - v4[1]) - (v6[1] - v4[1]) * (*v15 - *v4) <= 0.0)
          v13 = *(_QWORD *)(v8 + v12);
        else
          v14 = *(_QWORD *)(v8 + v12);
      }
      v12 += 8;
    }
    while (v12 != 24);
    if (*(_QWORD *)v8 == v13)
    {
      v20 = (uint64_t *)(v8 + 32);
    }
    else if (*(_QWORD *)(v8 + 8) == v13)
    {
      v20 = (uint64_t *)(v8 + 40);
    }
    else
    {
      if (*(_QWORD *)(v8 + 16) != v13)
      {
        v16 = 0;
        goto LABEL_47;
      }
      v20 = (uint64_t *)(v8 + 24);
    }
    v16 = *v20;
LABEL_47:
    sub_1B1993C88((void **)&v78, v14, v16);
    if (*(_QWORD *)v8 == v14)
    {
      v22 = (uint64_t *)(v8 + 32);
    }
    else if (*(_QWORD *)(v8 + 8) == v14)
    {
      v22 = (uint64_t *)(v8 + 40);
    }
    else
    {
      if (*(_QWORD *)(v8 + 16) != v14)
      {
        v21 = 0;
LABEL_55:
        sub_1B1993C88((void **)&v75, v13, v21);
        v23 = 0;
        v24 = v81;
        v68 = a1;
        if ((double *)v14 != v6 && (double *)v13 != v6)
        {
          v25 = v13;
          v69 = 0;
          v70 = 0;
          v26 = *(_DWORD *)(a1 + 32);
          v71 = HIDWORD(v81);
          v27 = v4;
          v28 = v82;
          while (1)
          {
            v29 = v26 - 1;
            if (!v29)
            {
              v51 = 3;
LABEL_112:
              v52 = v68;
LABEL_131:
              *(_DWORD *)(v52 + 40) = v51;
              goto LABEL_132;
            }
            v30 = *(double **)(v8 + 8);
            if (*(double **)v8 == v27)
            {
              v32 = *(double *)(v8 + 16);
              v31 = (uint64_t **)(v8 + 32);
            }
            else if (v30 == v27)
            {
              v31 = (uint64_t **)(v8 + 40);
              v32 = *(double *)v8;
              v30 = *(double **)(v8 + 16);
            }
            else
            {
              if (*(double **)(v8 + 16) != v27)
                goto LABEL_110;
              v31 = (uint64_t **)(v8 + 24);
              v32 = *(double *)(v8 + 8);
              v30 = *(double **)v8;
            }
            v33 = *v31;
            if (!*v31)
            {
LABEL_110:
              v51 = 4;
              goto LABEL_112;
            }
            v34 = 0;
            while (v33[v34 + 3] != v8)
            {
              if (++v34 == 3)
                goto LABEL_73;
            }
            v35 = (v34 - 1);
            v36 = v34 == 0;
            v37 = 2;
            if (!v36)
              v37 = v35;
            v3 = (double *)v33[v37];
LABEL_73:
            v38 = (*v6 - *v4) * (v3[1] - v4[1]) - (v6[1] - v4[1]) * (*v3 - *v4);
            v39 = *v33;
            v73 = v32;
            ptr = v28;
            v72 = v29;
            if (v38 <= 0.0)
            {
              if (v39 == v14)
              {
                v42 = v25;
                v45 = v33 + 4;
              }
              else if (v33[1] == v14)
              {
                v42 = v25;
                v45 = v33 + 5;
              }
              else
              {
                v42 = v25;
                if (v33[2] != v14)
                {
                  v43 = 0;
LABEL_91:
                  sub_1B1993C88((void **)&v75, (uint64_t)v3, v43);
                  v46 = (double *)v14;
                  v69 = v42;
                  goto LABEL_92;
                }
                v45 = v33 + 3;
              }
              v43 = *v45;
              goto LABEL_91;
            }
            if (v39 == v25)
              break;
            if (v33[1] == v25)
            {
              v40 = (double *)v25;
              v44 = v33 + 5;
              goto LABEL_87;
            }
            v40 = (double *)v25;
            if (v33[2] == v25)
            {
              v44 = v33 + 3;
              goto LABEL_87;
            }
            v41 = 0;
LABEL_88:
            sub_1B1993C88((void **)&v78, (uint64_t)v3, v41);
            v46 = v3;
            v70 = v14;
            v3 = v40;
LABEL_92:
            v28 = ptr;
            if (v71 == v24)
            {
              v71 *= 2;
              v28 = malloc_type_realloc(ptr, 8 * v71, 0x2004093837F09uLL);
              v82 = v28;
            }
            v26 = v72;
            v47 = v24 + 1;
            *((_QWORD *)v28 + v24) = v8;
            if (v38 > 0.0 != (*v6 - *v4) * (v30[1] - v4[1]) - (v6[1] - v4[1]) * (*v30 - *v4) > 0.0)
              v27 = *(double **)&v73;
            else
              v27 = v30;
            if (v46 != v6)
            {
              v25 = (uint64_t)v3;
              v14 = (uint64_t)v46;
              v8 = (uint64_t)v33;
              ++v24;
              if (v3 != v6)
                continue;
            }
            v23 = v70;
            HIDWORD(v81) = v71;
            v48 = v69;
            goto LABEL_101;
          }
          v40 = (double *)v25;
          v44 = v33 + 4;
LABEL_87:
          v41 = *v44;
          goto LABEL_88;
        }
        v47 = v81;
        v33 = (uint64_t *)v8;
        v46 = (double *)v14;
        v48 = 0;
LABEL_101:
        v49 = *v33;
        if (v46 != v6)
        {
          if (v49 == v48)
          {
            v53 = v33 + 4;
          }
          else if (v33[1] == v48)
          {
            v53 = v33 + 5;
          }
          else
          {
            if (v33[2] != v48)
            {
              v50 = 0;
LABEL_118:
              v55 = &v78;
LABEL_123:
              sub_1B1993C88((void **)v55, (uint64_t)v6, v50);
              if (HIDWORD(v81) == v47)
              {
                HIDWORD(v81) = 2 * v47;
                v59 = malloc_type_realloc(v82, 16 * v47, 0x2004093837F09uLL);
                v82 = v59;
              }
              else
              {
                v59 = v82;
              }
              LODWORD(v81) = v47 + 1;
              *((_QWORD *)v59 + v47) = v33;
              v60 = sub_1B1994390((int *)&v78, v4, (uint64_t)v6, (uint64_t)&v81, 1, v56, v57, v58);
              if (v60 == 2)
              {
                *(_DWORD *)(v68 + 40) = 1;
              }
              else
              {
                v64 = v60;
                v65 = sub_1B1994390((int *)&v75, v4, (uint64_t)v6, (uint64_t)&v81, 0, v61, v62, v63);
                v52 = v68;
                if (v65 == 2)
                {
                  v51 = 1;
                  goto LABEL_131;
                }
                *(_QWORD *)(v64 + 24) = v65;
                *(_QWORD *)(v65 + 40) = v64;
              }
LABEL_132:
              free(v82);
              v66 = v80;
              free(v79);
              free(v66);
              v67 = v77;
              free(v76);
              free(v67);
              return;
            }
            v53 = v33 + 3;
          }
          v50 = *v53;
          goto LABEL_118;
        }
        if (v49 == v23)
        {
          v54 = v33 + 4;
        }
        else if (v33[1] == v23)
        {
          v54 = v33 + 5;
        }
        else
        {
          if (v33[2] != v23)
          {
            v50 = 0;
LABEL_122:
            v55 = &v75;
            goto LABEL_123;
          }
          v54 = v33 + 3;
        }
        v50 = *v54;
        goto LABEL_122;
      }
      v22 = (uint64_t *)(v8 + 24);
    }
    v21 = *v22;
    goto LABEL_55;
  }
  while (--v9)
  {
    if (*(double **)v8 == v4)
    {
      v10 = (uint64_t *)(v8 + 24);
      goto LABEL_15;
    }
    if (*(double **)(v8 + 8) == v4)
    {
      v10 = (uint64_t *)(v8 + 32);
      goto LABEL_15;
    }
    if (*(double **)(v8 + 16) == v4)
    {
      v10 = (uint64_t *)(v8 + 40);
LABEL_15:
      v8 = *v10;
    }
    if (sub_1B1993FCC(v8, v4, v6, &v83))
      goto LABEL_17;
  }
  v17 = 2;
LABEL_42:
  *(_DWORD *)(a1 + 40) = v17;
}

_QWORD *sub_1B1995278(_QWORD *result, double *a2)
{
  unsigned int v2;
  _QWORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  unsigned int v14;
  double *v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;

  v2 = *(_DWORD *)result;
  if (!*(_DWORD *)result)
    return result;
  v4 = result;
  while (2)
  {
    if (v2 > *((_DWORD *)v4 + 8))
    {
      v13 = 9;
LABEL_38:
      *((_DWORD *)v4 + 10) = v13;
      return result;
    }
    v5 = v4[1];
    v6 = v2 - 1;
    *(_DWORD *)v4 = v6;
    v7 = *(_QWORD *)(v5 + 8 * v6);
    v8 = *(_QWORD *)(v7 + 32);
    if (!v8)
    {
      v13 = 10;
      goto LABEL_38;
    }
    v9 = 0;
    v10 = 24;
    while (*(_QWORD *)(v8 + v10) != v7)
    {
      ++v9;
      v10 += 8;
      if (v9 == 3)
        goto LABEL_37;
    }
    if (v9 > 1)
      v11 = -2;
    else
      v11 = 1;
    if ((_DWORD)v9)
      v12 = (v9 - 1);
    else
      v12 = 2;
    v13 = 5;
    if (~v11 == (_DWORD)v9 || (_DWORD)v12 == -1)
      goto LABEL_38;
    if (!*(_BYTE *)(v7 + 49))
    {
      v14 = v11 + v9;
      v15 = *(double **)(v8 + v10 - 24);
      v16 = *(double **)(v8 + 8 * v12);
      result = (_QWORD *)sub_1B19941B4(v15, *(double **)(v8 + 8 * (v11 + v9)), v16, a2);
      if ((_DWORD)result)
      {
        v17 = *(_QWORD *)(v8 + 24 + 8 * v14);
        v18 = *(_QWORD *)(v8 + 24 + 8 * v12);
        v19 = *(_BYTE *)(v8 + 48 + v14);
        v20 = *(_QWORD *)(v7 + 40);
        v21 = *(_BYTE *)(v8 + 48 + v12);
        v22 = *(_BYTE *)(v7 + 50);
        *(_WORD *)(v7 + 49) = v19;
        *(_BYTE *)(v8 + 48) = 0;
        *(_BYTE *)(v8 + 49) = v21;
        *(_BYTE *)(v8 + 50) = v22;
        *(_QWORD *)(v7 + 16) = v16;
        *(_QWORD *)(v7 + 32) = v17;
        *(_QWORD *)(v7 + 40) = v8;
        *(_QWORD *)v8 = a2;
        *(_QWORD *)(v8 + 8) = v16;
        *(_QWORD *)(v8 + 16) = v15;
        *(_QWORD *)(v8 + 24) = v7;
        *(_QWORD *)(v8 + 32) = v18;
        *(_QWORD *)(v8 + 40) = v20;
        if (v17)
        {
          v23 = 0;
          while (*(_QWORD *)(v17 + 24 + v23) != v8)
          {
            v23 += 8;
            if (v23 == 24)
              goto LABEL_37;
          }
          v24 = (uint64_t *)(v17 + v23 + 24);
          if (v24 == (uint64_t *)3)
            goto LABEL_37;
          *v24 = v7;
          result = sub_1B1993D28((int *)v4, v7);
        }
        if (v18)
          result = sub_1B1993D28((int *)v4, v8);
        if (v20)
        {
          v25 = 0;
          while (*(_QWORD *)(v20 + 24 + v25) != v7)
          {
            v25 += 8;
            if (v25 == 24)
              goto LABEL_37;
          }
          v26 = (uint64_t *)(v20 + v25 + 24);
          if (v26 != (uint64_t *)3)
          {
            *v26 = v8;
            goto LABEL_35;
          }
LABEL_37:
          v13 = 5;
          goto LABEL_38;
        }
      }
    }
LABEL_35:
    v2 = *(_DWORD *)v4;
    if (*(_DWORD *)v4)
      continue;
    return result;
  }
}

_QWORD *sub_1B1995474(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v11 = *(_QWORD *)(a2 + 40);
  v30 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)a2;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v13;
  v16 = sub_1B1993D94((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  result = (_QWORD *)sub_1B1993D94((uint64_t)a1, v17, v18, v19, v20, v21, v22, v23);
  v25 = (uint64_t)result;
  *(_QWORD *)(a2 + 24) = v16;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = result;
  *(_QWORD *)v16 = a3;
  *(_QWORD *)(v16 + 8) = v14;
  *(_QWORD *)(v16 + 16) = v12;
  *(_QWORD *)(v16 + 24) = result;
  *(_QWORD *)(v16 + 32) = v11;
  *(_QWORD *)(v16 + 40) = a2;
  *result = a3;
  result[1] = v13;
  result[2] = v14;
  result[3] = a2;
  result[4] = v30;
  result[5] = v16;
  *(_BYTE *)(v16 + 48) = 0;
  *(_BYTE *)(v16 + 49) = *(_BYTE *)(a2 + 50);
  *(_BYTE *)(v16 + 50) = 0;
  *((_BYTE *)result + 48) = 0;
  *((_BYTE *)result + 49) = *(_BYTE *)(a2 + 49);
  *((_BYTE *)result + 50) = 0;
  *(_BYTE *)(a2 + 49) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 50) = 0;
  if (v15)
    result = sub_1B1993D28(a1, a2);
  if (v30)
  {
    v26 = 0;
    v27 = 3;
    while (*(_QWORD *)(v30 + 24 + v26) != a2)
    {
      v26 += 8;
      if (v26 == 24)
        goto LABEL_9;
    }
    v27 = v30 + v26 + 24;
LABEL_9:
    *(_QWORD *)v27 = v25;
    result = sub_1B1993D28(a1, v25);
  }
  if (v11)
  {
    v28 = 0;
    v29 = 3;
    while (*(_QWORD *)(v11 + 24 + v28) != a2)
    {
      v28 += 8;
      if (v28 == 24)
        goto LABEL_17;
    }
    v29 = v11 + v28 + 24;
LABEL_17:
    *(_QWORD *)v29 = v16;
    return sub_1B1993D28(a1, v16);
  }
  return result;
}

_QWORD *sub_1B19955F4(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v37;
  char v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;

  v11 = *(_QWORD *)(a2 + 24 + 8 * a4);
  v12 = ((int)a5 + 1) % 3u;
  v43 = *(_QWORD *)(v11 + 24 + 8 * v12);
  v13 = ((int)a5 + 2) % 3u;
  v41 = *(_QWORD *)(v11 + 24 + 8 * v13);
  v14 = ((int)a4 + 1) % 3u;
  v15 = *(_QWORD *)(a2 + 24 + 8 * v14);
  v16 = ((int)a4 + 2) % 3u;
  v40 = *(_QWORD *)(a2 + 24 + 8 * v16);
  v42 = *(_BYTE *)(v11 + 48 + v12);
  v38 = *(_BYTE *)(v11 + 48 + v13);
  v35 = *(_BYTE *)(a2 + 48 + v14);
  v39 = *(_BYTE *)(a2 + 48 + v16);
  v17 = *(_BYTE *)(v11 + 48 + a5);
  v37 = *(_QWORD *)(a2 + 8 * a4);
  v18 = *(_QWORD *)(v11 + 8 * a5);
  v19 = *(_QWORD *)(a2 + 8 * v16);
  v20 = *(_QWORD *)(v11 + 8 * v13);
  v21 = sub_1B1993D94((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);
  result = (_QWORD *)sub_1B1993D94((uint64_t)a1, v22, v23, v24, v25, v26, v27, v28);
  v30 = (uint64_t)result;
  *(_QWORD *)a2 = a3;
  *(_QWORD *)(a2 + 8) = v18;
  *(_QWORD *)(a2 + 16) = v19;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)(a2 + 40) = v21;
  *(_BYTE *)(a2 + 48) = v17;
  *(_BYTE *)(a2 + 49) = v35;
  *(_BYTE *)(a2 + 50) = 0;
  *(_QWORD *)v11 = a3;
  *(_QWORD *)(v11 + 8) = v20;
  *(_QWORD *)(v11 + 16) = v18;
  *(_QWORD *)(v11 + 24) = result;
  *(_QWORD *)(v11 + 32) = v41;
  *(_QWORD *)(v11 + 40) = a2;
  *(_BYTE *)(v11 + 48) = 0;
  *(_BYTE *)(v11 + 49) = v38;
  *(_BYTE *)(v11 + 50) = v17;
  *(_QWORD *)v21 = a3;
  *(_QWORD *)(v21 + 8) = v19;
  *(_QWORD *)(v21 + 16) = v37;
  *(_QWORD *)(v21 + 24) = a2;
  *(_QWORD *)(v21 + 32) = v40;
  *(_QWORD *)(v21 + 40) = result;
  *(_BYTE *)(v21 + 48) = 0;
  *(_BYTE *)(v21 + 49) = v39;
  *(_BYTE *)(v21 + 50) = v17;
  *result = a3;
  result[1] = v37;
  result[2] = v20;
  result[3] = v21;
  result[4] = v43;
  result[5] = v11;
  *((_BYTE *)result + 48) = v17;
  *((_BYTE *)result + 49) = v42;
  *((_BYTE *)result + 50) = 0;
  if (v41)
    result = sub_1B1993D28(a1, v11);
  if (v15)
    result = sub_1B1993D28(a1, a2);
  if (v40)
  {
    v31 = 0;
    v32 = 3;
    while (*(_QWORD *)(v40 + 24 + v31) != a2)
    {
      v31 += 8;
      if (v31 == 24)
        goto LABEL_11;
    }
    v32 = v40 + v31 + 24;
LABEL_11:
    *(_QWORD *)v32 = v21;
    result = sub_1B1993D28(a1, v21);
  }
  if (v43)
  {
    v33 = 0;
    v34 = 3;
    while (*(_QWORD *)(v43 + 24 + v33) != v11)
    {
      v33 += 8;
      if (v33 == 24)
        goto LABEL_19;
    }
    v34 = v43 + v33 + 24;
LABEL_19:
    *(_QWORD *)v34 = v30;
    return sub_1B1993D28(a1, v30);
  }
  return result;
}

_QWORD *sub_1B1995860(uint64_t a1, float64x2_t *a2)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = (_QWORD *)sub_1B1993E68(a2, (double **)(*(_QWORD *)(a1 + 16) + 56 * (*(_DWORD *)(a1 + 32) - 1)), a1);
  if (result == (_QWORD *)2)
  {
    *(_DWORD *)(a1 + 40) = 8;
  }
  else
  {
    v5 = (uint64_t)result;
    v11 = 0;
    if (sub_1B1994278((uint64_t)result, a2->f64, (_DWORD *)&v11 + 1, &v11))
      sub_1B19955F4((int *)a1, v5, (uint64_t)a2, HIDWORD(v11), v11, v8, v9, v10);
    else
      sub_1B1995474((int *)a1, v5, (uint64_t)a2, v6, v7, v8, v9, v10);
    return sub_1B1995278((_QWORD *)a1, a2->f64);
  }
  return result;
}

__n128 sub_1B1995914(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  __n128 result;

  v13 = sub_1B1993D94(a1, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 24) = v13;
  v14 = *(float *)(*(_QWORD *)a2 + 16);
  v15 = *(float *)(*(_QWORD *)a2 + 20);
  v16 = *(float *)(*(_QWORD *)a2 + 24);
  v17 = *(float *)(*(_QWORD *)a2 + 28);
  v18 = v15 - v14;
  v19 = v17 - v16;
  if (vabdd_f64(v15, v14) < 0.00001 || vabdd_f64(v17, v16) < 0.00001)
    *(_DWORD *)(a1 + 40) = 7;
  v20 = v16 + v19 * -100.0;
  *(_QWORD *)(v13 + 24) = 0;
  *(_QWORD *)(v13 + 32) = 0;
  *(_DWORD *)(v13 + 47) = 0;
  *(_QWORD *)(v13 + 40) = 0;
  *(double *)a3 = v14 + v18 * -100.0;
  *(double *)(a3 + 8) = v20;
  *(_OWORD *)(a3 + 48) = *(_OWORD *)a3;
  *(double *)a4 = v14 + v18 * 100.0;
  *(double *)(a4 + 8) = v20;
  *(_OWORD *)(a4 + 48) = *(_OWORD *)a4;
  *(double *)a5 = v14 + v18 * 0.0;
  *(double *)(a5 + 8) = v16 + v19 * 100.0;
  result = *(__n128 *)a5;
  *(_OWORD *)(a5 + 48) = *(_OWORD *)a5;
  *(_QWORD *)v13 = a3;
  *(_QWORD *)(v13 + 8) = a4;
  *(_QWORD *)(v13 + 16) = a5;
  return result;
}

uint64_t sub_1B1995A04(uint64_t a1, int a2, BOOL *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  unsigned __int8 *v9;

  *(_BYTE *)(a1 + 51) = 1;
  *(_BYTE *)(a1 + 52) = a2;
  v6 = *(_QWORD *)(a1 + 24);
  if (v6 && !*(_BYTE *)(v6 + 51))
    sub_1B1995A04();
  v7 = *(_QWORD *)(a1 + 32);
  if (v7 && !*(_BYTE *)(v7 + 51))
    sub_1B1995A04();
  result = *(_QWORD *)(a1 + 40);
  if (result)
  {
    if (!*(_BYTE *)(result + 51))
      result = sub_1B1995A04();
  }
  if (*(_QWORD *)(a1 + 24))
  {
    if (*(_QWORD *)(a1 + 32))
    {
      if (*(_QWORD *)(a1 + 40))
        return result;
      v9 = (unsigned __int8 *)(a1 + 50);
    }
    else
    {
      v9 = (unsigned __int8 *)(a1 + 49);
    }
  }
  else
  {
    v9 = (unsigned __int8 *)(a1 + 48);
  }
  *a3 = *v9 != a2;
  return result;
}

void *sub_1B1995AE4(uint64_t a1)
{
  unint64_t v2;
  unsigned int v3;
  int v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  void *result;
  BOOL v10;

  v10 = 0;
  sub_1B1995A04(*(_QWORD *)(a1 + 16), 1, &v10);
  LODWORD(v2) = *(_DWORD *)(a1 + 32);
  if (!(_DWORD)v2)
    goto LABEL_12;
  v3 = 0;
  v4 = v10;
  do
  {
    if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 16) + 56 * v3 + 52) == v4)
    {
      LODWORD(v2) = v2 - 1;
      *(_DWORD *)(a1 + 32) = v2;
      if (v3 < v2)
      {
        v5 = v3;
        v6 = 56 * v3;
        do
        {
          v7 = *(_QWORD *)(a1 + 16) + v6;
          ++v5;
          v8 = *(_OWORD *)(v7 + 72);
          *(_OWORD *)v7 = *(_OWORD *)(v7 + 56);
          *(_OWORD *)(v7 + 16) = v8;
          *(_OWORD *)(v7 + 32) = *(_OWORD *)(v7 + 88);
          *(_QWORD *)(v7 + 48) = *(_QWORD *)(v7 + 104);
          v2 = *(unsigned int *)(a1 + 32);
          v6 += 56;
        }
        while (v5 < v2);
      }
    }
    else
    {
      ++v3;
    }
  }
  while (v3 < v2);
  if ((_DWORD)v2)
  {
    result = malloc_type_realloc(*(void **)(a1 + 16), 56 * v2, 0x1020040F7381AC9uLL);
  }
  else
  {
LABEL_12:
    free(*(void **)(a1 + 16));
    result = 0;
  }
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

void *sub_1B1995BE0(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  int v5;
  int *v6;
  int v7;
  unsigned int v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float64x2_t *v17;
  float64x2_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float64x2_t *v22;
  double *f64;
  float64x2_t v24;
  float64x2_t v25;
  int32x2_t v26;
  int64x2_t v28;
  _OWORD v29[2];
  _OWORD v30[5];
  _OWORD v31[5];
  _OWORD v32[5];
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;

  v4 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = (int *)(*(_QWORD *)a1 + 8);
    do
    {
      v7 = *v6;
      v6 += 10;
      v5 += v7;
      --v4;
    }
    while (v4);
    v8 = 2 * v5 + 2;
  }
  else
  {
    v8 = 2;
  }
  v36 = 0;
  v33 = 0x1000000000;
  v34 = malloc_type_malloc(0x80uLL, 0x2004093837F09uLL);
  v35 = malloc_type_malloc(56 * v8, 0x1020040F7381AC9uLL);
  v37 = 0;
  v38 = v8;
  v39 = 0;
  memset(v32, 0, sizeof(v32));
  memset(v31, 0, sizeof(v31));
  v9 = *(_OWORD *)(a1 + 16);
  v29[0] = *(_OWORD *)a1;
  v29[1] = v9;
  memset(v30, 0, sizeof(v30));
  sub_1B1995914((uint64_t)&v33, (uint64_t)v29, (uint64_t)v32, (uint64_t)v31, (uint64_t)v30, v10, v11, v12);
  if (!(_DWORD)v39)
  {
    v14 = *(_DWORD *)(a1 + 8) - 1;
    if (v14 < 0)
    {
LABEL_23:
      sub_1B1995AE4((uint64_t)&v33);
      free(v34);
      *a2 = v37;
      return v35;
    }
    v28 = vdupq_n_s64(0x3EE4F8B588E368F1uLL);
    while (1)
    {
      v15 = *(_QWORD *)a1 + 40 * v14;
      v16 = *(unsigned int *)(v15 + 8);
      if (v16 >= 3)
        break;
LABEL_21:
      if (v14-- <= 0)
        goto LABEL_23;
    }
    v17 = *(float64x2_t **)v15;
    sub_1B1995860((uint64_t)&v33, *(float64x2_t **)v15);
    v18 = (float64x2_t)v28;
    if (!(_DWORD)v39)
    {
      v19 = 80;
      v20 = 1;
      while (1)
      {
        v21 = 0;
        v22 = &v17[5 * v20];
        v24 = *v22;
        f64 = v22[-5].f64;
        v25 = v24;
        while (1)
        {
          v26 = vmovn_s64(vcgeq_f64(v18, vabdq_f64(v25, v17[v21 / 0x10])));
          if ((v26.i32[0] & v26.i32[1] & 1) != 0)
            break;
          v21 += 80;
          if (v19 == v21)
          {
            sub_1B1995860((uint64_t)&v33, &v17[5 * v20]);
            if ((_DWORD)v39)
              goto LABEL_7;
            break;
          }
        }
        sub_1B1994B0C((uint64_t)&v33, f64, v17[5 * v20].f64);
        v18 = (float64x2_t)v28;
        if ((_DWORD)v39)
          break;
        ++v20;
        v19 += 80;
        if (v20 == v16)
        {
          sub_1B1994B0C((uint64_t)&v33, v17[5 * (v16 - 1)].f64, v17->f64);
          if ((_DWORD)v39)
            break;
          goto LABEL_21;
        }
      }
    }
  }
LABEL_7:
  free(v34);
  *a2 = 0;
  free(v35);
  return 0;
}

uint64_t sub_1B1995E3C(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B1995E68(const __CTFont *a1, CGGlyph a2, uint64_t a3)
{
  uint64_t v6;
  const CGPath *PathForGlyph;
  __int128 v8;
  _OWORD v10[3];
  uint64_t v11;

  if (qword_1EEF66C30 != -1)
    dispatch_once_f(&qword_1EEF66C30, &qword_1EEF66C28, (dispatch_function_t)sub_1B1995E3C);
  v6 = sub_1B179CB90(qword_1EEF66C28, 0x38uLL);
  PathForGlyph = CTFontCreatePathForGlyph(a1, a2, 0);
  *(_QWORD *)(a3 + 24) = PathForGlyph;
  v8 = *(_OWORD *)(a3 + 16);
  v10[0] = *(_OWORD *)a3;
  v10[1] = v8;
  v10[2] = *(_OWORD *)(a3 + 32);
  v11 = *(_QWORD *)(a3 + 48);
  sub_1B19DC7D4(v6, (uint64_t)v10);
  CGPathRelease(PathForGlyph);
  *(_QWORD *)(v6 + 56) = CFRetain(a1);
  *(_WORD *)(v6 + 64) = a2;
  return v6;
}

void sub_1B1995F44(uint64_t a1)
{
  const void *v2;

  if (a1)
  {
    v2 = *(const void **)(a1 + 56);
    if (v2)
      CFRelease(v2);
    sub_1B19DC83C(a1);
  }
}

CFStringRef sub_1B1995F7C(uint64_t a1)
{
  CGFont *v2;
  CFStringRef v3;
  CFStringRef v4;
  const __CFAllocator *v5;
  CFStringRef v6;

  v2 = CTFontCopyGraphicsFont(*(CTFontRef *)(a1 + 56), 0);
  v3 = CGFontCopyFullName(v2);
  v4 = CGFontCopyGlyphNameForGlyph(v2, *(_WORD *)(a1 + 64));
  v5 = CFGetAllocator((CFTypeRef)a1);
  v6 = CFStringCreateWithFormat(v5, 0, CFSTR("<CFXGlyph '%@' in '%@'>"), v4, v3);
  CFRelease(v4);
  CFRelease(v3);
  CGFontRelease(v2);
  return v6;
}

CFMutableDictionaryRef sub_1B199600C(CFMutableDictionaryRef result)
{
  CFMutableDictionaryRef v1;
  const void *v2;

  if (!*((_QWORD *)result + 2))
  {
    v1 = result;
    v2 = (const void *)*((_QWORD *)result + 4);
    if (v2)
      CFRelease(v2);
    result = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    *((_QWORD *)v1 + 4) = result;
  }
  return result;
}

const void *sub_1B1996064(uint64_t a1, unsigned int a2, void *key, __int128 *a4)
{
  uint64_t v8;
  __int128 v9;
  const void *v10;
  void *Value;
  __int128 v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v9 = a4[1];
    v14 = *a4;
    v15 = v9;
    v16 = a4[2];
    v17 = *((_QWORD *)a4 + 6);
    return sub_1B1996598(v8, a2, key, (uint64_t)&v14);
  }
  else
  {
    Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
    if (!Value)
    {
      Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
      CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, Value);
      CFRelease(Value);
    }
    v10 = CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)a2);
    if (!v10)
    {
      v12 = a4[1];
      v14 = *a4;
      v15 = v12;
      v16 = a4[2];
      v17 = *((_QWORD *)a4 + 6);
      v10 = (const void *)sub_1B1995E68((const __CTFont *)key, a2, (uint64_t)&v14);
      CFDictionaryAddValue((CFMutableDictionaryRef)Value, (const void *)a2, v10);
      CFRelease(v10);
    }
  }
  return v10;
}

CFIndex sub_1B199618C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFIndex result;
  const __CFArray *GlyphRuns;
  CFIndex v7;
  const void *v8;
  const __CTRun *ValueAtIndex;
  CFIndex GlyphCount;
  const __CFDictionary *Attributes;
  void *Value;
  void *v13;
  CFIndex i;
  __int128 v15;
  const void *v16;
  __int128 v17[3];
  uint64_t v18;
  CGGlyph buffer;
  CFRange v20;

  v4 = *(const void **)(a1 + 40);
  if (v4)
    CFRelease(v4);
  *(_QWORD *)(a1 + 40) = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    GlyphRuns = CTLineGetGlyphRuns((CTLineRef)result);
    result = CFArrayGetCount(GlyphRuns);
    if (result >= 1)
    {
      v7 = 0;
      v8 = (const void *)*MEMORY[0x1E0CA8188];
      do
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, v7);
        GlyphCount = CTRunGetGlyphCount(ValueAtIndex);
        Attributes = CTRunGetAttributes(ValueAtIndex);
        Value = (void *)CFDictionaryGetValue(Attributes, v8);
        if (GlyphCount >= 1)
        {
          v13 = Value;
          for (i = 0; i != GlyphCount; ++i)
          {
            buffer = 0;
            v20.location = i;
            v20.length = 1;
            CTRunGetGlyphs(ValueAtIndex, v20, &buffer);
            v15 = *(_OWORD *)(a2 + 16);
            v17[0] = *(_OWORD *)a2;
            v17[1] = v15;
            v17[2] = *(_OWORD *)(a2 + 32);
            v18 = *(_QWORD *)(a2 + 48);
            v16 = sub_1B1996064(a1, buffer, v13, v17);
            CFArrayAppendValue(*(CFMutableArrayRef *)(a1 + 40), v16);
          }
        }
        ++v7;
        result = CFArrayGetCount(GlyphRuns);
      }
      while (v7 < result);
    }
  }
  return result;
}

double sub_1B19962D4(uint64_t a1, uint64_t a2, unsigned int a3, double result)
{
  const __CFArray *GlyphRuns;
  CFIndex Count;
  CFIndex v8;
  unsigned int v9;
  CFIndex i;
  const __CTRun *ValueAtIndex;
  unsigned int GlyphCount;
  unsigned int v13;
  unsigned int v14;
  CFRange v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;

  if (a1)
  {
    GlyphRuns = CTLineGetGlyphRuns(*(CTLineRef *)(a1 + 24));
    Count = CFArrayGetCount(GlyphRuns);
    if (Count >= 1)
    {
      v8 = Count;
      v9 = 0;
      for (i = 0; i != v8; ++i)
      {
        ValueAtIndex = (const __CTRun *)CFArrayGetValueAtIndex(GlyphRuns, i);
        GlyphCount = CTRunGetGlyphCount(ValueAtIndex);
        v13 = GlyphCount;
        v14 = a3 - v9;
        if (a3 > v9)
        {
          if (v14 >= GlyphCount)
            v15.length = GlyphCount;
          else
            v15.length = v14;
          v15.location = 0;
          CTRunGetAdvances(ValueAtIndex, v15, (CGSize *)(a2 + 16 * v9));
        }
        v9 += v13;
      }
    }
    if (a3)
    {
      v16 = a3;
      v17 = (double *)(a2 + 8);
      result = 0.0;
      do
      {
        v18 = *(v17 - 1);
        v19 = -*v17;
        *(v17 - 1) = result;
        *v17 = v19;
        result = result + v18;
        v17 += 2;
        --v16;
      }
      while (v16);
    }
  }
  return result;
}

CFIndex sub_1B19963A8(CFIndex result)
{
  if (result)
    return CFArrayGetCount(*(CFArrayRef *)(result + 40));
  return result;
}

CFArrayRef *sub_1B19963C4(CFArrayRef *result, CFIndex idx)
{
  if (result)
    return (CFArrayRef *)CFArrayGetValueAtIndex(result[5], idx);
  return result;
}

uint64_t sub_1B19963D8(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

__CFDictionary *sub_1B1996404(const void *a1, uint64_t a2, uint64_t a3)
{
  __CFDictionary *v6;
  CFTypeRef v7;
  __int128 v8;
  _OWORD v10[3];
  uint64_t v11;

  if (qword_1EEF66C40 != -1)
    dispatch_once_f(&qword_1EEF66C40, &qword_1EEF66C38, (dispatch_function_t)sub_1B19963D8);
  v6 = (__CFDictionary *)sub_1B179CB90(qword_1EEF66C38, 0x20uLL);
  if (a1)
    v7 = CFRetain(a1);
  else
    v7 = 0;
  *((_QWORD *)v6 + 4) = 0;
  *((_QWORD *)v6 + 5) = 0;
  *((_QWORD *)v6 + 2) = a3;
  *((_QWORD *)v6 + 3) = v7;
  sub_1B199600C(v6);
  v8 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v8;
  v10[2] = *(_OWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 48);
  sub_1B199618C((uint64_t)v6, (uint64_t)v10);
  return v6;
}

void sub_1B19964CC(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  if (a1)
  {
    v2 = (const void *)a1[3];
    if (v2)
      CFRelease(v2);
    v3 = (const void *)a1[4];
    if (v3)
      CFRelease(v3);
    v4 = (const void *)a1[5];
    if (v4)
      CFRelease(v4);
  }
}

CFStringRef sub_1B1996510(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextLine>"));
}

CFStringRef sub_1B1996530(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextLine>"));
}

CFMutableDictionaryRef sub_1B1996550(uint64_t a1)
{
  const void *v2;
  CFMutableDictionaryRef result;

  v2 = *(const void **)(a1 + 32);
  if (v2)
    CFRelease(v2);
  result = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

const void *sub_1B1996598(uint64_t a1, unsigned int a2, void *key, uint64_t a4)
{
  void *Value;
  const void *v9;
  __int128 v10;
  _OWORD v12[3];
  uint64_t v13;

  Value = (void *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), key);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 32), key, Value);
    CFRelease(Value);
  }
  v9 = CFDictionaryGetValue((CFDictionaryRef)Value, (const void *)a2);
  if (!v9)
  {
    v10 = *(_OWORD *)(a4 + 16);
    v12[0] = *(_OWORD *)a4;
    v12[1] = v10;
    v12[2] = *(_OWORD *)(a4 + 32);
    v13 = *(_QWORD *)(a4 + 48);
    v9 = (const void *)sub_1B1995E68((const __CTFont *)key, a2, (uint64_t)v12);
    CFDictionaryAddValue((CFMutableDictionaryRef)Value, (const void *)a2, v9);
    CFRelease(v9);
  }
  return v9;
}

uint64_t sub_1B199667C(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19966A8(const void *a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  const __CFArray *Lines;
  CFIndex v7;
  const void *ValueAtIndex;
  __int128 v9;
  __CFDictionary *v10;
  _OWORD v12[3];
  uint64_t v13;

  if (qword_1EEF66C50 != -1)
    dispatch_once_f(&qword_1EEF66C50, &qword_1EEF66C48, (dispatch_function_t)sub_1B199667C);
  v4 = sub_1B179CB90(qword_1EEF66C48, 0x18uLL);
  *(_QWORD *)(v4 + 24) = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  if (a1)
  {
    v5 = CFRetain(a1);
    *(_QWORD *)(v4 + 16) = v5;
    if (v5)
    {
      sub_1B1996550(v4);
      Lines = CTFrameGetLines((CTFrameRef)a1);
      if (CFArrayGetCount(Lines) >= 1)
      {
        v7 = 0;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(Lines, v7);
          v9 = *(_OWORD *)(a2 + 16);
          v12[0] = *(_OWORD *)a2;
          v12[1] = v9;
          v12[2] = *(_OWORD *)(a2 + 32);
          v13 = *(_QWORD *)(a2 + 48);
          v10 = sub_1B1996404(ValueAtIndex, (uint64_t)v12, v4);
          CFArrayAppendValue(*(CFMutableArrayRef *)(v4 + 24), v10);
          CFRelease(v10);
          ++v7;
        }
        while (v7 < CFArrayGetCount(Lines));
      }
    }
  }
  else
  {
    *(_QWORD *)(v4 + 16) = 0;
  }
  return v4;
}

void sub_1B19967E0(uint64_t a1)
{
  const void *v2;
  const void *v3;

  if (a1)
  {
    v2 = *(const void **)(a1 + 16);
    if (v2)
      CFRelease(v2);
    v3 = *(const void **)(a1 + 32);
    if (v3)
      CFRelease(v3);
    CFRelease(*(CFTypeRef *)(a1 + 24));
  }
}

CFStringRef sub_1B1996820(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextFrame>"));
}

CFStringRef sub_1B1996840(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXTextFrame>"));
}

double sub_1B1996864(uint64_t a1, uint64_t a2)
{
  CGPath *v4;
  CGPath *Mutable;
  float v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  double result;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v4 = *(CGPath **)(a1 + 40);
  Mutable = v4;
  if (!v4)
  {
    Mutable = CGPathCreateMutable();
    CGPathMoveToPoint(Mutable, 0, 0.0, 1.0);
    CGPathAddArcToPoint(Mutable, 0, 1.0, 1.0, 1.0, 0.0, 1.0);
  }
  v22 = 0;
  v23 = 0uLL;
  v24 = 0;
  v6 = *(float *)(a1 + 4) * 0.1;
  v7 = sub_1B1993140(Mutable, &v22, v6, INFINITY);
  v14 = v7;
  if (v7 && (v15 = v7[2], v15 >= 2))
  {
    v16 = *(_QWORD *)v7;
    v17 = v7[3];
    v23 = *((_OWORD *)v7 + 1);
    v24 = *((_QWORD *)v7 + 4);
    if (v16)
      goto LABEL_9;
  }
  else
  {
    v17 = 0;
    v15 = 0;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v8, v9, v10, v11, v12, v13, (uint64_t)"profilePath.points");
  v16 = 0;
LABEL_9:
  if (*(_BYTE *)(v16 + 68))
  {
    *(_BYTE *)(v16 + 68) = 0;
    *(_OWORD *)(v16 + 16) = *(_OWORD *)(v16 + 32);
    --v17;
  }
  v18 = v16 + 80 * (v15 - 1);
  v20 = *(unsigned __int8 *)(v18 + 68);
  v19 = (_BYTE *)(v18 + 68);
  if (v20)
  {
    *v19 = 0;
    --v17;
  }
  if (!v4)
    CGPathRelease(Mutable);
  *(_QWORD *)(a2 + 32) = v16;
  *(_DWORD *)(a2 + 40) = v15;
  *(_DWORD *)(a2 + 44) = v17;
  result = *(double *)&v23;
  *(_OWORD *)(a2 + 48) = v23;
  *(_QWORD *)(a2 + 64) = v24;
  *(_QWORD *)(a2 + 72) = v14;
  *(_DWORD *)(a2 + 28) = v22;
  return result;
}

int32x2_t sub_1B1996A08(unsigned int a1, unsigned int a2, uint64_t a3, char a4)
{
  size_t v8;
  void *v9;
  void *v10;
  int32x2_t result;

  if (a1)
  {
    v8 = 12 * a1;
    *(_QWORD *)(a3 + 96) = malloc_type_malloc(v8, 0x10000403E1C8BA9uLL);
    *(_QWORD *)(a3 + 104) = malloc_type_malloc(v8, 0x10000403E1C8BA9uLL);
    v9 = malloc_type_malloc(8 * a1, 0x100004000313F17uLL);
  }
  else
  {
    v9 = 0;
    *(_QWORD *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = 0;
  }
  *(_QWORD *)(a3 + 88) = v9;
  *(_WORD *)(a3 + 80) = 0;
  if (a2)
    v10 = malloc_type_malloc(8 * a2, 0x2004093837F09uLL);
  else
    v10 = 0;
  *(_QWORD *)(a3 + 112) = v10;
  *(_WORD *)(a3 + 82) = 0;
  *(_DWORD *)(a3 + 120) = 0;
  *(_QWORD *)(a3 + 152) = 0;
  *(_DWORD *)(a3 + 160) = 0;
  *(_QWORD *)(a3 + 128) = 0;
  *(_QWORD *)(a3 + 136) = 0;
  *(_DWORD *)(a3 + 144) = 0;
  *(_QWORD *)(a3 + 168) = 0;
  *(_QWORD *)(a3 + 176) = 0;
  *(_BYTE *)(a3 + 24) = a4;
  *(_OWORD *)a3 = xmmword_1B2268B60;
  result = vdup_n_s32(0xC9742400);
  *(int32x2_t *)(a3 + 16) = result;
  return result;
}

void sub_1B1996B18(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5, double a6)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  float v11;
  unsigned int v12;
  size_t v13;
  __n128 v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  float v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  __n128 v25;
  unsigned int v26;
  float64x2_t **v27;
  uint64_t v28;
  float32x2_t *v29;
  float64x2_t *v30;
  float32x2_t v31;
  float32x2_t v32;
  float v33;
  int v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  UInt8 *v38;
  uint64_t v39;
  unsigned __int16 v40;
  float64x2_t v41;
  float64x2_t **v42;
  uint64_t v43;
  float32x2_t *v44;
  float64x2_t *v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  int v55;
  UInt8 *v56;
  UInt8 *v57;
  unint64_t v58;
  unint64_t i;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 v69;
  uint64_t v70;
  float64x2_t v71;
  float v72;
  float v73;
  int v74;
  float v75;
  float v76;
  float v77;
  unsigned __int16 v78;
  unsigned __int16 v79;
  float *v80;
  float *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;
  unsigned __int16 v86;
  float *v87;
  float *v88;
  uint64_t v89;
  uint64_t v90;
  float v91;
  float v92;
  float32x2_t v93;
  float32x2_t v94;
  int8x8_t v95;
  int8x8_t v96;
  int v97;
  __int16 v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  int v105;
  unsigned int v106;
  void *v107;
  int v108;
  unsigned int v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int16 v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  double v122;
  double v123;
  double v124;
  double v125;
  __int128 *v126;
  double v127;
  double v128;
  double v129;
  double v130;
  char v131;
  uint64_t v132;
  unsigned __int16 v133;
  uint64_t v134;
  float v135;
  float v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  __int128 *v140;
  double v141;
  double v142;
  double v143;
  double v144;
  char v145;
  float (*v146)(uint64_t, uint64_t, double, double, float, double, double, double, double);
  unint64_t v147;
  unint64_t v148;
  unsigned __int16 v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  double v159;
  double v160;
  double v161;
  double v162;
  __int128 *v163;
  double v164;
  double v165;
  double v166;
  double v167;
  char v168;
  uint64_t v169;
  unsigned __int16 v170;
  uint64_t v171;
  float v172;
  float v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  __int128 *v177;
  double v178;
  double v179;
  double v180;
  double v181;
  char v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  __int16 v192;
  __int16 v193;
  char v194;
  char v195;
  double v196;
  double v197;
  double v199;
  double v200;
  uint64_t v202;
  uint64_t v203;
  float v204;
  uint64_t v205;
  uint64_t v206;
  __int128 v207;
  double v208;
  double v209;
  double v210;
  double v211;
  __int128 v212;
  int v213;
  char v214;
  _BYTE v215[11];
  __int128 v216;
  _QWORD v217[2];
  float (*v218)(uint64_t, uint64_t, double, double, float, double, double, double, double);
  void *v219;
  uint64_t v220;
  double v221;
  double v222;
  float v223;
  _QWORD v224[2];
  void (*v225)(uint64_t, char, unsigned int, UInt8 *, unsigned int);
  void *v226;
  uint64_t v227;
  char v228;
  _QWORD v229[2];
  __int128 v230;
  int v231;
  uint64_t v232;

  v8 = a1;
  v232 = *MEMORY[0x1E0C80C00];
  v9 = *(_DWORD *)(a1 + 24);
  v10 = MEMORY[0x1E0C809B0];
  v224[0] = MEMORY[0x1E0C809B0];
  v224[1] = 0x40000000;
  v225 = sub_1B1997CDC;
  v226 = &unk_1E63DA2C0;
  v227 = a3;
  v228 = a4;
  v11 = *(float *)(a2 + 8);
  if (*(_BYTE *)(a3 + 24) == 1)
  {
    v12 = (unsigned __int16)v9;
    *(_DWORD *)(a3 + 120) = (unsigned __int16)v9;
    v13 = 2 * (unsigned __int16)v9;
    *(_QWORD *)(a3 + 128) = malloc_type_malloc(v13, 0x1000040BDFB0063uLL);
    v14.n128_u32[0] = *(_DWORD *)(a2 + 8);
    if (v14.n128_f32[0] == 0.0)
      v15 = 0;
    else
      v15 = malloc_type_malloc(v13, 0x1000040BDFB0063uLL);
    v16 = 0;
  }
  else
  {
    v16 = *(_DWORD *)(a3 + 120);
    v12 = (unsigned __int16)v9;
    v17 = v16 + (unsigned __int16)v9;
    *(_DWORD *)(a3 + 120) = v17;
    *(_QWORD *)(a3 + 128) = malloc_type_realloc(*(void **)(a3 + 128), 2 * v17, 0x1000040BDFB0063uLL);
    v14.n128_u32[0] = *(_DWORD *)(a2 + 8);
    if (v14.n128_f32[0] == 0.0)
      v15 = 0;
    else
      v15 = malloc_type_realloc(*(void **)(a3 + 136), 2 * *(unsigned int *)(a3 + 120), 0x1000040BDFB0063uLL);
  }
  v18 = v11 * 0.5;
  *(_QWORD *)(a3 + 136) = v15;
  v204 = v11 * 0.5;
  if (v12)
  {
    v19 = *(_DWORD *)(a2 + 16);
    v21 = *(_QWORD *)(a3 + 96);
    v20 = *(_QWORD *)(a3 + 104);
    v22 = *(_QWORD *)(a3 + 128);
    v23 = v12;
    v24 = *(_WORD *)(a3 + 80);
    v25.n128_f64[0] = a5;
    v25.n128_f64[1] = a6;
    v26 = v16;
    v27 = *(float64x2_t ***)(v8 + 32);
    do
    {
      v28 = v20 + 12 * v24;
      *(_QWORD *)v28 = 0;
      *(_DWORD *)(v28 + 8) = 1065353216;
      v29 = (float32x2_t *)(v21 + 12 * v24);
      v30 = *v27;
      if (v19 == 2)
      {
        v31.f32[0] = a5 + v30->f64[0];
        v32.f32[0] = a6 + v30->f64[1];
        v29->i32[0] = v31.i32[0];
        v29->i32[1] = v32.i32[0];
        v29[1].f32[0] = v18;
        v32.f32[1] = v11 * 0.5;
      }
      else
      {
        v31 = vcvt_f32_f64(vaddq_f64((float64x2_t)v25, v30[3]));
        *v29 = v31;
        v29[1].f32[0] = v18;
        v32 = *(float32x2_t *)((char *)v29 + 4);
      }
      if (v31.f32[0] >= *(float *)a3)
        v31.i32[0] = *(_DWORD *)a3;
      *(_DWORD *)a3 = v31.i32[0];
      *(int8x8_t *)(a3 + 4) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + 4), v32), (int8x8_t)v32, *(int8x8_t *)(a3 + 4));
      v33 = v29[1].f32[0];
      if (v33 <= *(float *)(a3 + 20))
        v33 = *(float *)(a3 + 20);
      *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*v29, *(float32x2_t *)(a3 + 12)), (int8x8_t)*v29, *(int8x8_t *)(a3 + 12));
      *(float *)(a3 + 20) = v33;
      *(_WORD *)(v22 + 2 * v26) = v24;
      v24 = *(_WORD *)(a3 + 80) + 1;
      *(_WORD *)(a3 + 80) = v24;
      ++v27;
      ++v26;
      --v23;
    }
    while (v23);
    ((void (*)(_QWORD *, _QWORD, unint64_t, uint64_t, _QWORD, __n128))v225)(v224, 0, *(unsigned int *)(a3 + 120) / 3uLL, v22, *(unsigned int *)(a3 + 120), v25);
  }
  else
  {
    ((void (*)(_QWORD *, _QWORD, unint64_t, _QWORD, _QWORD, __n128))sub_1B1997CDC)(v224, 0, *(unsigned int *)(a3 + 120) / 3uLL, *(_QWORD *)(a3 + 128), *(unsigned int *)(a3 + 120), v14);
  }
  if (*(float *)(a2 + 8) > 0.0)
  {
    if (v12)
    {
      v34 = *(_DWORD *)(a2 + 16);
      v35 = -v204;
      v37 = *(_QWORD *)(a3 + 96);
      v36 = *(_QWORD *)(a3 + 104);
      v38 = *(UInt8 **)(a3 + 136);
      v39 = v12;
      v40 = *(_WORD *)(a3 + 80);
      v41.f64[0] = a5;
      v41.f64[1] = a6;
      v42 = *(float64x2_t ***)(v8 + 32);
      do
      {
        v43 = v36 + 12 * v40;
        *(_QWORD *)v43 = 0;
        *(_DWORD *)(v43 + 8) = -1082130432;
        v44 = (float32x2_t *)(v37 + 12 * v40);
        v45 = *v42;
        if (v34 == 1)
        {
          v46.f32[0] = a5 + v45->f64[0];
          v47.f32[0] = a6 + v45->f64[1];
          v44->i32[0] = v46.i32[0];
          v44->i32[1] = v47.i32[0];
          v44[1].f32[0] = v35;
          v47.f32[1] = -v204;
        }
        else
        {
          v46 = vcvt_f32_f64(vaddq_f64(v41, v45[3]));
          *v44 = v46;
          v44[1].f32[0] = v35;
          v47 = *(float32x2_t *)((char *)v44 + 4);
        }
        if (v46.f32[0] >= *(float *)a3)
          v46.i32[0] = *(_DWORD *)a3;
        *(_DWORD *)a3 = v46.i32[0];
        *(int8x8_t *)(a3 + 4) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(a3 + 4), v47), (int8x8_t)v47, *(int8x8_t *)(a3 + 4));
        v48 = v44[1].f32[0];
        if (v48 <= *(float *)(a3 + 20))
          v48 = *(float *)(a3 + 20);
        *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*v44, *(float32x2_t *)(a3 + 12)), (int8x8_t)*v44, *(int8x8_t *)(a3 + 12));
        *(float *)(a3 + 20) = v48;
        *(_WORD *)&v38[2 * v16 - 2 + 2 * v39] = v40;
        v40 = *(_WORD *)(a3 + 80) + 1;
        *(_WORD *)(a3 + 80) = v40;
        ++v42;
        --v39;
      }
      while (v39);
    }
    else
    {
      v38 = *(UInt8 **)(a3 + 136);
    }
    v225((uint64_t)v224, 0, *(unsigned int *)(a3 + 120) / 3uLL, v38, *(_DWORD *)(a3 + 120));
  }
  if (v204 > 0.0)
  {
    v49 = *(unsigned int *)(v8 + 48);
    if ((_DWORD)v49)
    {
      v50 = 0;
      v51 = 0;
      v52 = *(_QWORD *)(v8 + 40);
      do
      {
        v53 = *(unsigned int *)(v52 + 32 * v50 + 8);
        if ((_DWORD)v53)
        {
          v54 = (int *)(*(_QWORD *)(v52 + 32 * v50) + 8);
          do
          {
            v55 = *v54;
            v54 += 10;
            v51 += v55;
            --v53;
          }
          while (v53);
        }
        ++v50;
      }
      while (v50 != v49);
    }
    else
    {
      v51 = 0;
    }
    if (*(_BYTE *)(a3 + 24) == 1)
    {
      *(_DWORD *)(a3 + 144) = 0;
      v56 = (UInt8 *)malloc_type_malloc(2 * (6 * v51), 0x1000040BDFB0063uLL);
    }
    else
    {
      v56 = (UInt8 *)malloc_type_realloc(*(void **)(a3 + 152), 2 * (*(_DWORD *)(a3 + 144) + 6 * v51), 0x1000040BDFB0063uLL);
    }
    v57 = v56;
    *(_QWORD *)(a3 + 152) = v56;
    v58 = *(unsigned int *)(v8 + 48);
    if ((_DWORD)v58)
    {
      for (i = 0; i < v58; ++i)
      {
        v60 = *(_QWORD *)(v8 + 40) + 32 * i;
        v61 = *(unsigned int *)(v60 + 8);
        if ((_DWORD)v61)
        {
          v62 = 0;
          v63 = *(_QWORD *)v60;
          do
          {
            v64 = (uint64_t *)(v63 + 40 * v62);
            v65 = *((unsigned int *)v64 + 2);
            v66 = *(_WORD *)(a3 + 80);
            if ((_DWORD)v65)
            {
              v67 = *v64;
              v68 = *(_QWORD *)(a3 + 96);
              v69 = *(_WORD *)(a3 + 80);
              do
              {
                v70 = v67 + 80 * (v65 - 1);
                v71 = *(float64x2_t *)(v70 + 16);
                v72 = a5 + *(double *)v70;
                v73 = a6 + *(double *)(v70 + 8);
                v74 = *(_DWORD *)(a2 + 16);
                if (v74 == 2)
                  v75 = 0.0;
                else
                  v75 = *(float *)(v70 + 64);
                v76 = v204 - v75;
                v77 = *(float *)(v70 + 64) - v204;
                if (v74 == 1)
                  v77 = -v204;
                if ((*(_BYTE *)(v70 + 68) & 1) != 0)
                {
                  v78 = v69 + 1;
                  v79 = v69 + 2;
                  v80 = (float *)(v68 + 12 * v69);
                  *v80 = v72;
                  v80[1] = v73;
                  v80[2] = v76;
                  *(_WORD *)(a3 + 80) = v79;
                  v81 = (float *)(v68 + 12 * v78);
                  *v81 = v72;
                  v81[1] = v73;
                  v81[2] = v77;
                  v82 = *(_QWORD *)(a3 + 104) + 12 * v79;
                  *(float32x2_t *)(v82 - 12) = vcvt_f32_f64(*(float64x2_t *)(v70 + 32));
                  *(_DWORD *)(v82 - 4) = 0;
                  *(_DWORD *)(v82 - 16) = 0;
                  *(_QWORD *)(v82 - 24) = *(_QWORD *)(v82 - 12);
                  v69 = *(_WORD *)(a3 + 80);
                  v68 = *(_QWORD *)(a3 + 96);
                }
                v83 = *(_QWORD *)(a3 + 152);
                v84 = *(unsigned int *)(a3 + 144);
                *(_WORD *)(v83 + 2 * v84) = v69;
                *(_WORD *)(v83 + 2 * (v84 + 1)) = *(_WORD *)(a3 + 80) + 1;
                *(_WORD *)(v83 + 2 * (v84 + 2)) = *(_WORD *)(a3 + 80) + 3;
                *(_WORD *)(v83 + 2 * (v84 + 3)) = *(_WORD *)(a3 + 80);
                *(_WORD *)(v83 + 2 * (v84 + 4)) = *(_WORD *)(a3 + 80) + 3;
                v85 = *(_WORD *)(a3 + 80) + 2;
                *(_DWORD *)(a3 + 144) = v84 + 6;
                *(_WORD *)(v83 + 2 * (v84 + 5)) = v85;
                v86 = *(_WORD *)(a3 + 80);
                LOWORD(v83) = v86 + 1;
                v87 = (float *)(v68 + 12 * v86);
                *v87 = v72;
                v87[1] = v73;
                v87[2] = v76;
                v86 += 2;
                *(_WORD *)(a3 + 80) = v86;
                v88 = (float *)(v68 + 12 * (unsigned __int16)v83);
                *v88 = v72;
                v88[1] = v73;
                v88[2] = v77;
                v89 = *(_QWORD *)(a3 + 104) + 12 * v86;
                *(float32x2_t *)(v89 - 12) = vcvt_f32_f64(v71);
                *(_DWORD *)(v89 - 4) = 0;
                *(_DWORD *)(v89 - 16) = 0;
                *(_QWORD *)(v89 - 24) = *(_QWORD *)(v89 - 12);
                v68 = *(_QWORD *)(a3 + 96);
                v69 = *(_WORD *)(a3 + 80);
                v90 = v68 + 12 * v69;
                v91 = *(float *)(v90 - 16);
                if (v91 >= *(float *)(a3 + 8))
                  v91 = *(float *)(a3 + 8);
                v92 = *(float *)(a3 + 20);
                v93 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3, *(float32x2_t *)(v90 - 24)), *(int8x8_t *)(v90 - 24), *(int8x8_t *)a3);
                *(float32x2_t *)a3 = v93;
                *(float *)(a3 + 8) = v91;
                if (*(float *)(v90 - 16) > v92)
                  v92 = *(float *)(v90 - 16);
                v94 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v90 - 24), *(float32x2_t *)(a3 + 12)), *(int8x8_t *)(v90 - 24), *(int8x8_t *)(a3 + 12));
                *(float32x2_t *)(a3 + 12) = v94;
                *(float *)(a3 + 20) = v92;
                v95 = vbsl_s8((int8x8_t)vcgt_f32(v93, *(float32x2_t *)(v90 - 12)), *(int8x8_t *)(v90 - 12), (int8x8_t)v93);
                if (*(float *)(v90 - 4) < v91)
                  v91 = *(float *)(v90 - 4);
                *(int8x8_t *)a3 = v95;
                *(float *)(a3 + 8) = v91;
                v96 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v90 - 12), v94), *(int8x8_t *)(v90 - 12), (int8x8_t)v94);
                if (*(float *)(v90 - 4) > v92)
                  v92 = *(float *)(v90 - 4);
                *(int8x8_t *)(a3 + 12) = v96;
                *(float *)(a3 + 20) = v92;
                --v65;
              }
              while (v65);
              v57 = *(UInt8 **)(a3 + 152);
            }
            v97 = *(_DWORD *)(a3 + 144);
            *(_WORD *)&v57[2 * (v97 - 1)] = v66;
            v98 = v66 + 1;
            *(_WORD *)&v57[2 * (v97 - 4)] = v98;
            *(_WORD *)&v57[2 * (v97 - 2)] = v98;
            ++v62;
          }
          while (v62 != v61);
          v58 = *(unsigned int *)(v8 + 48);
        }
      }
    }
    v225((uint64_t)v224, 0, *(unsigned int *)(a3 + 144) / 3uLL, v57, *(_DWORD *)(a3 + 144));
  }
  if (*(float *)(a2 + 12) > 0.0)
  {
    v99 = *(unsigned int *)(v8 + 48);
    if ((_DWORD)v99)
    {
      v100 = 0;
      v101 = 0;
      v102 = *(_QWORD *)(v8 + 40);
      do
      {
        v103 = *(unsigned int *)(v102 + 32 * v100 + 8);
        if ((_DWORD)v103)
        {
          v104 = (int *)(*(_QWORD *)(v102 + 32 * v100) + 8);
          do
          {
            v105 = *v104;
            v104 += 10;
            v101 += v105;
            --v103;
          }
          while (v103);
        }
        ++v100;
      }
      while (v100 != v99);
    }
    else
    {
      v101 = 0;
    }
    if (*(_BYTE *)(a3 + 24) == 1)
    {
      v106 = (6 * *(_DWORD *)(a3 + 40) - 6) * v101;
      *(_DWORD *)(a3 + 160) = v106;
      *(_QWORD *)(a3 + 168) = malloc_type_malloc(2 * v106, 0x1000040BDFB0063uLL);
      v107 = malloc_type_malloc(2 * *(unsigned int *)(a3 + 160), 0x1000040BDFB0063uLL);
      v108 = 0;
    }
    else
    {
      v108 = *(_DWORD *)(a3 + 160);
      v109 = v108 + (6 * *(_DWORD *)(a3 + 40) - 6) * v101;
      *(_DWORD *)(a3 + 160) = v109;
      *(_QWORD *)(a3 + 168) = malloc_type_realloc(*(void **)(a3 + 168), 2 * v109, 0x1000040BDFB0063uLL);
      v107 = malloc_type_realloc(*(void **)(a3 + 176), 2 * *(unsigned int *)(a3 + 160), 0x1000040BDFB0063uLL);
    }
    *(_QWORD *)(a3 + 176) = v107;
    v217[0] = v10;
    v217[1] = 0x40000000;
    v218 = sub_1B1997D8C;
    v219 = &unk_1E63DA2E0;
    v220 = a3;
    v221 = a5;
    v222 = a6;
    v223 = v11 * 0.5;
    v183 = v8;
    if (*(_DWORD *)(a2 + 16) == 2)
    {
      free(*(void **)(a3 + 168));
    }
    else
    {
      v110 = *(unsigned int *)(v8 + 48);
      if ((_DWORD)v110)
      {
        v111 = 0;
        v112 = 0;
        do
        {
          v113 = *(_QWORD *)(v183 + 40) + 32 * v111;
          v188 = *(unsigned int *)(v113 + 8);
          if ((_DWORD)v188)
          {
            v114 = 0;
            v184 = *(_QWORD *)v113;
            v186 = v111;
            LODWORD(v115) = *(_DWORD *)(a3 + 40);
            do
            {
              if ((_DWORD)v115)
              {
                v116 = 0;
                v190 = v114;
                v117 = (uint64_t *)(v184 + 40 * v114);
                v118 = *v117;
                v119 = *((unsigned int *)v117 + 2);
                v120 = *((_DWORD *)v117 + 3);
                v202 = v119;
                do
                {
                  v205 = v116;
                  v121 = *(_QWORD *)(a3 + 32) + 80 * v116;
                  v122 = *(double *)v121;
                  v123 = *(double *)(v121 + 8);
                  v196 = *(double *)(v121 + 40);
                  v199 = *(double *)(v121 + 32);
                  v192 = *(_WORD *)(a3 + 80);
                  v194 = *(_BYTE *)(v121 + 68);
                  if ((_DWORD)v119)
                  {
                    v125 = *(double *)(v121 + 16);
                    v124 = *(double *)(v121 + 24);
                    do
                    {
                      v126 = (__int128 *)(v118 + 80 * (v119 - 1));
                      v216 = *v126;
                      v127 = *((double *)v126 + 2);
                      v128 = *((double *)v126 + 3);
                      v129 = *((double *)v126 + 4);
                      v130 = *((double *)v126 + 5);
                      v230 = v126[3];
                      v231 = *((_DWORD *)v126 + 16);
                      v131 = *((_BYTE *)v126 + 68);
                      v229[0] = *(_QWORD *)((char *)v126 + 69);
                      *(_DWORD *)((char *)v229 + 7) = *((_DWORD *)v126 + 19);
                      if ((v131 & 1) != 0)
                      {
                        v207 = v216;
                        v208 = v127;
                        v209 = v128;
                        v210 = v129;
                        v211 = v130;
                        v212 = v230;
                        v213 = v231;
                        v214 = v131;
                        *(_QWORD *)v215 = v229[0];
                        *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                        v218((uint64_t)v217, (uint64_t)&v207, v129, v130, 1.0, v122, v123, v125, v124);
                      }
                      if (v205)
                      {
                        v132 = *(_QWORD *)(a3 + 168);
                        *(_WORD *)(v132 + 2 * (v108 + v112)) = *(_WORD *)(a3 + 80);
                        *(_WORD *)(v132 + 2 * (v108 + (unsigned __int16)(v112 + 1))) = *(_WORD *)(a3 + 80) - v120;
                        *(_WORD *)(v132 + 2 * (v108 + (unsigned __int16)(v112 + 2))) = *(_WORD *)(a3 + 80) - v120 + 1;
                        *(_WORD *)(v132 + 2 * (v108 + (unsigned __int16)(v112 + 3))) = *(_WORD *)(a3 + 80);
                        v133 = v112 + 5;
                        *(_WORD *)(v132 + 2 * (v108 + (unsigned __int16)(v112 + 4))) = *(_WORD *)(a3 + 80) - v120 + 1;
                        v112 += 6;
                        *(_WORD *)(v132 + 2 * (v108 + v133)) = *(_WORD *)(a3 + 80) + 1;
                      }
                      v207 = v216;
                      v208 = v127;
                      v209 = v128;
                      v210 = v129;
                      v211 = v130;
                      v212 = v230;
                      v213 = v231;
                      v214 = v131;
                      *(_QWORD *)v215 = v229[0];
                      *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                      v218((uint64_t)v217, (uint64_t)&v207, v127, v128, 1.0, v122, v123, v125, v124);
                      v134 = *(_QWORD *)(a3 + 96) + 12 * *(unsigned __int16 *)(a3 + 80);
                      v135 = *(float *)(v134 - 4);
                      if (v135 >= *(float *)(a3 + 8))
                        v135 = *(float *)(a3 + 8);
                      *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3, *(float32x2_t *)(v134 - 12)), *(int8x8_t *)(v134 - 12), *(int8x8_t *)a3);
                      *(float *)(a3 + 8) = v135;
                      v136 = *(float *)(v134 - 4);
                      if (v136 <= *(float *)(a3 + 20))
                        v136 = *(float *)(a3 + 20);
                      *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v134 - 12), *(float32x2_t *)(a3 + 12)), *(int8x8_t *)(v134 - 12), *(int8x8_t *)(a3 + 12));
                      *(float *)(a3 + 20) = v136;
                      --v119;
                    }
                    while (v119);
                  }
                  if (v205)
                  {
                    v137 = *(_QWORD *)(a3 + 168);
                    v138 = v108 + v112;
                    *(_WORD *)(v137 + 2 * (v138 - 1)) = v192;
                    *(_WORD *)(v137 + 2 * (v138 - 4)) = v192 - v120;
                    *(_WORD *)(v137 + 2 * (v138 - 2)) = v192 - v120;
                  }
                  if ((v194 & 1) != 0 && (_DWORD)v202)
                  {
                    v139 = v202;
                    do
                    {
                      v140 = (__int128 *)(v118 + 80 * (v139 - 1));
                      v216 = *v140;
                      v141 = *((double *)v140 + 2);
                      v142 = *((double *)v140 + 3);
                      v143 = *((double *)v140 + 4);
                      v144 = *((double *)v140 + 5);
                      v230 = v140[3];
                      v231 = *((_DWORD *)v140 + 16);
                      v145 = *((_BYTE *)v140 + 68);
                      v229[0] = *(_QWORD *)((char *)v140 + 69);
                      *(_DWORD *)((char *)v229 + 7) = *((_DWORD *)v140 + 19);
                      v146 = v218;
                      if ((v145 & 1) != 0)
                      {
                        v207 = v216;
                        v208 = v141;
                        v209 = v142;
                        v210 = v143;
                        v211 = v144;
                        v212 = v230;
                        v213 = v231;
                        v214 = v145;
                        *(_QWORD *)v215 = v229[0];
                        *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                        v218((uint64_t)v217, (uint64_t)&v207, v143, v144, 1.0, v122, v123, v199, v196);
                        v146 = v218;
                      }
                      v207 = v216;
                      v208 = v141;
                      v209 = v142;
                      v210 = v143;
                      v211 = v144;
                      v212 = v230;
                      v213 = v231;
                      v214 = v145;
                      *(_QWORD *)v215 = v229[0];
                      *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                      v146((uint64_t)v217, (uint64_t)&v207, v141, v142, 1.0, v122, v123, v199, v196);
                      --v139;
                    }
                    while (v139);
                  }
                  v116 = v205 + 1;
                  v115 = *(unsigned int *)(a3 + 40);
                  v119 = v202;
                }
                while (v205 + 1 < v115);
                v111 = v186;
                v114 = v190;
              }
              ++v114;
            }
            while (v114 != v188);
            v110 = *(unsigned int *)(v183 + 48);
          }
          ++v111;
        }
        while (v111 < v110);
      }
      v225((uint64_t)v224, 0, *(unsigned int *)(a3 + 160) / 3uLL, *(UInt8 **)(a3 + 168), *(_DWORD *)(a3 + 160));
      v8 = v183;
    }
    if (*(_DWORD *)(a2 + 16) == 1)
    {
      free(*(void **)(a3 + 176));
    }
    else
    {
      v147 = *(unsigned int *)(v8 + 48);
      if ((_DWORD)v147)
      {
        v148 = 0;
        v149 = 0;
        do
        {
          v150 = *(_QWORD *)(v183 + 40) + 32 * v148;
          v189 = *(unsigned int *)(v150 + 8);
          if ((_DWORD)v189)
          {
            v151 = 0;
            v185 = *(_QWORD *)v150;
            v187 = v148;
            LODWORD(v152) = *(_DWORD *)(a3 + 40);
            do
            {
              if ((_DWORD)v152)
              {
                v153 = 0;
                v191 = v151;
                v154 = (uint64_t *)(v185 + 40 * v151);
                v155 = *v154;
                v156 = *((unsigned int *)v154 + 2);
                v157 = *((_DWORD *)v154 + 3);
                v203 = v156;
                do
                {
                  v206 = v153;
                  v158 = *(_QWORD *)(a3 + 32) + 80 * v153;
                  v159 = *(double *)v158;
                  v160 = *(double *)(v158 + 8);
                  v197 = *(double *)(v158 + 40);
                  v200 = *(double *)(v158 + 32);
                  v193 = *(_WORD *)(a3 + 80);
                  v195 = *(_BYTE *)(v158 + 68);
                  if ((_DWORD)v156)
                  {
                    v162 = *(double *)(v158 + 16);
                    v161 = *(double *)(v158 + 24);
                    do
                    {
                      v163 = (__int128 *)(v155 + 80 * (v156 - 1));
                      v216 = *v163;
                      v164 = *((double *)v163 + 2);
                      v165 = *((double *)v163 + 3);
                      v166 = *((double *)v163 + 4);
                      v167 = *((double *)v163 + 5);
                      v230 = v163[3];
                      v231 = *((_DWORD *)v163 + 16);
                      v168 = *((_BYTE *)v163 + 68);
                      v229[0] = *(_QWORD *)((char *)v163 + 69);
                      *(_DWORD *)((char *)v229 + 7) = *((_DWORD *)v163 + 19);
                      if ((v168 & 1) != 0)
                      {
                        v207 = v216;
                        v208 = v164;
                        v209 = v165;
                        v210 = v166;
                        v211 = v167;
                        v212 = v230;
                        v213 = v231;
                        v214 = v168;
                        *(_QWORD *)v215 = v229[0];
                        *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                        v218((uint64_t)v217, (uint64_t)&v207, v166, v167, -1.0, v159, v160, v162, v161);
                      }
                      if (v206)
                      {
                        v169 = *(_QWORD *)(a3 + 176);
                        *(_WORD *)(v169 + 2 * (v108 + v149)) = *(_WORD *)(a3 + 80);
                        *(_WORD *)(v169 + 2 * (v108 + (unsigned __int16)(v149 + 1))) = *(_WORD *)(a3 + 80) - v157 + 1;
                        *(_WORD *)(v169 + 2 * (v108 + (unsigned __int16)(v149 + 2))) = *(_WORD *)(a3 + 80) - v157;
                        *(_WORD *)(v169 + 2 * (v108 + (unsigned __int16)(v149 + 3))) = *(_WORD *)(a3 + 80);
                        v170 = v149 + 5;
                        *(_WORD *)(v169 + 2 * (v108 + (unsigned __int16)(v149 + 4))) = *(_WORD *)(a3 + 80) + 1;
                        v149 += 6;
                        *(_WORD *)(v169 + 2 * (v108 + v170)) = *(_WORD *)(a3 + 80) - v157 + 1;
                      }
                      v207 = v216;
                      v208 = v164;
                      v209 = v165;
                      v210 = v166;
                      v211 = v167;
                      v212 = v230;
                      v213 = v231;
                      v214 = v168;
                      *(_QWORD *)v215 = v229[0];
                      *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                      v218((uint64_t)v217, (uint64_t)&v207, v164, v165, -1.0, v159, v160, v162, v161);
                      v171 = *(_QWORD *)(a3 + 96) + 12 * *(unsigned __int16 *)(a3 + 80);
                      v172 = *(float *)(v171 - 4);
                      if (v172 >= *(float *)(a3 + 8))
                        v172 = *(float *)(a3 + 8);
                      *(int8x8_t *)a3 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)a3, *(float32x2_t *)(v171 - 12)), *(int8x8_t *)(v171 - 12), *(int8x8_t *)a3);
                      *(float *)(a3 + 8) = v172;
                      v173 = *(float *)(v171 - 4);
                      if (v173 <= *(float *)(a3 + 20))
                        v173 = *(float *)(a3 + 20);
                      *(int8x8_t *)(a3 + 12) = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)(v171 - 12), *(float32x2_t *)(a3 + 12)), *(int8x8_t *)(v171 - 12), *(int8x8_t *)(a3 + 12));
                      *(float *)(a3 + 20) = v173;
                      --v156;
                    }
                    while (v156);
                  }
                  if (v206)
                  {
                    v174 = *(_QWORD *)(a3 + 176);
                    v175 = v108 + v149;
                    *(_WORD *)(v174 + 2 * (v175 - 2)) = v193;
                    *(_WORD *)(v174 + 2 * (v175 - 1)) = v193 - v157;
                    *(_WORD *)(v174 + 2 * (v175 - 5)) = v193 - v157;
                  }
                  if ((v195 & 1) != 0 && (_DWORD)v203)
                  {
                    v176 = v203;
                    do
                    {
                      v177 = (__int128 *)(v155 + 80 * (v176 - 1));
                      v216 = *v177;
                      v178 = *((double *)v177 + 2);
                      v179 = *((double *)v177 + 3);
                      v180 = *((double *)v177 + 4);
                      v181 = *((double *)v177 + 5);
                      v230 = v177[3];
                      v231 = *((_DWORD *)v177 + 16);
                      v182 = *((_BYTE *)v177 + 68);
                      v229[0] = *(_QWORD *)((char *)v177 + 69);
                      *(_DWORD *)((char *)v229 + 7) = *((_DWORD *)v177 + 19);
                      if ((v182 & 1) != 0)
                      {
                        v207 = v216;
                        v208 = v178;
                        v209 = v179;
                        v210 = v180;
                        v211 = v181;
                        v212 = v230;
                        v213 = v231;
                        v214 = v182;
                        *(_QWORD *)v215 = v229[0];
                        *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                        v218((uint64_t)v217, (uint64_t)&v207, v180, v181, -1.0, v159, v160, v200, v197);
                      }
                      v207 = v216;
                      v208 = v178;
                      v209 = v179;
                      v210 = v180;
                      v211 = v181;
                      v212 = v230;
                      v213 = v231;
                      v214 = v182;
                      *(_QWORD *)v215 = v229[0];
                      *(_DWORD *)&v215[7] = *(_DWORD *)((char *)v229 + 7);
                      v218((uint64_t)v217, (uint64_t)&v207, v178, v179, -1.0, v159, v160, v200, v197);
                      --v176;
                    }
                    while (v176);
                  }
                  v153 = v206 + 1;
                  v152 = *(unsigned int *)(a3 + 40);
                  v156 = v203;
                }
                while (v206 + 1 < v152);
                v148 = v187;
                v151 = v191;
              }
              ++v151;
            }
            while (v151 != v189);
            v147 = *(unsigned int *)(v183 + 48);
          }
          ++v148;
        }
        while (v148 < v147);
      }
      v225((uint64_t)v224, 0, *(unsigned int *)(a3 + 160) / 3uLL, *(UInt8 **)(a3 + 176), *(_DWORD *)(a3 + 160));
    }
  }
}

void sub_1B1997CDC(uint64_t a1, char a2, unsigned int a3, UInt8 *bytes, unsigned int a5)
{
  CFDataRef v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 24) || *(_BYTE *)(a1 + 40))
  {
    v9 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], bytes, 2 * a5);
    v10 = sub_1B17A39B4();
    sub_1B17A3C5C(v10, a2, a3, v9, 2, v11, v12, v13);
    if (v9)
      CFRelease(v9);
    free(bytes);
    v14 = *(_QWORD *)(a1 + 32);
    v15 = *(_QWORD *)(v14 + 112);
    v16 = *(unsigned __int16 *)(v14 + 82);
    *(_WORD *)(v14 + 82) = v16 + 1;
    *(_QWORD *)(v15 + 8 * v16) = v10;
  }
}

float sub_1B1997D8C(uint64_t a1, uint64_t a2, double a3, double a4, float a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  float32x2_t *v11;
  float *v12;
  float v13;
  float result;
  float v15;
  float v16;

  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(unsigned __int16 *)(v9 + 80);
  v11 = (float32x2_t *)(*(_QWORD *)(v9 + 96) + 12 * v10);
  v12 = (float *)(*(_QWORD *)(v9 + 104) + 12 * v10);
  v13 = (float)(*(float *)(a1 + 56) - *(float *)(a2 + 64)) + a6 * *(float *)(a2 + 64);
  *v11 = vcvt_f32_f64(vmlaq_n_f64(vmulq_n_f64(vaddq_f64(*(float64x2_t *)(a1 + 40), *(float64x2_t *)a2), a7), vaddq_f64(*(float64x2_t *)(a2 + 48), *(float64x2_t *)(a1 + 40)), 1.0 - a7));
  v11[1].f32[0] = v13 * a5;
  result = a3 * a9;
  v15 = a4 * a9;
  v16 = a8 * a5;
  *v12 = result;
  v12[1] = v15;
  v12[2] = v16;
  *(_WORD *)(v9 + 80) = v10 + 1;
  return result;
}

uint64_t sub_1B1997E24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  void *v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  BOOL v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  CFIndex v34;
  const __CFAllocator *v35;
  __CFData *Mutable;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CFData *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __CFData *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const CFArrayCallBacks *v48;
  const __CFArray *v49;
  const __CFArray *v50;
  unsigned int v51;
  unint64_t v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v61;
  char v62;
  void *values[2];
  CFTypeRef cf[2];
  uint64_t v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 28))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = (__int128 *)(*(_QWORD *)(a1 + 72) + v2);
      v5 = *v4;
      v6 = v4[1];
      v65 = *((_QWORD *)v4 + 4);
      *(_OWORD *)values = v5;
      *(_OWORD *)cf = v6;
      sub_1B1993C78(values);
      ++v3;
      v2 += 40;
    }
    while (v3 < *(unsigned int *)(a1 + 28));
  }
  v7 = *(void **)(a1 + 72);
  if (v7)
    free(v7);
  v8 = *(unsigned __int16 *)(a1 + 80);
  if (*(_WORD *)(a1 + 80))
  {
    v9 = *(float *)a1;
    v10 = *(float *)(a1 + 4);
    v11 = *(float *)(a1 + 8);
    v12 = *(float *)(a1 + 12) - *(float *)a1;
    v13 = *(float *)(a1 + 16) - v10;
    v14 = *(float *)(a1 + 20) - v11;
    v15 = (float *)(*(_QWORD *)(a1 + 96) + 8);
    v16 = (float *)(*(_QWORD *)(a1 + 88) + 4);
    v17 = (float *)(*(_QWORD *)(a1 + 104) + 4);
    v18 = *(unsigned __int16 *)(a1 + 80);
    do
    {
      v20 = *(v15 - 2);
      v19 = *(v15 - 1);
      v21 = *v15;
      v22 = *(v17 - 1);
      v23 = v17[1];
      v24 = fabsf(v22);
      v25 = fabsf(*v17);
      v26 = fabsf(v23);
      if (v24 <= v25)
      {
        v29 = (float)(v20 - v9) / v12;
        if (v25 <= v26)
        {
          v28 = v23 <= 0.0;
          v33 = 1.0 - (float)((float)(v19 - v10) / v13);
          if (v28)
            v30 = 1.0 - v29;
          else
            v30 = v29;
          v31 = v33;
        }
        else
        {
          v30 = 1.0 - v29;
          v31 = (float)(v21 - v11) / v14;
          if (*v17 > 0.0)
            v30 = v29;
        }
      }
      else
      {
        if (v24 <= v26)
        {
          v27 = (float)(v20 - v9) / v12;
          v28 = v23 <= 0.0;
        }
        else
        {
          v27 = (float)(v21 - v11) / v14;
          v28 = v22 <= 0.0;
        }
        v32 = 1.0 - (float)((float)(v19 - v10) / v13);
        if (v28)
          v30 = 1.0 - v27;
        else
          v30 = v27;
        v31 = v32;
      }
      *(v16 - 1) = v30;
      *v16 = v31;
      v15 += 3;
      v16 += 2;
      v17 += 3;
      --v18;
    }
    while (v18);
    v34 = 12 * v8;
  }
  else
  {
    v34 = 0;
  }
  v35 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v34);
  CFDataAppendBytes(Mutable, *(const UInt8 **)(a1 + 96), 12 * *(unsigned __int16 *)(a1 + 80));
  values[0] = (void *)sub_1B17ED204(Mutable, 0, *(unsigned __int16 *)(a1 + 80), 3, 1, v37, v38, v39);
  if (Mutable)
    CFRelease(Mutable);
  v40 = CFDataCreateMutable(v35, 12 * *(unsigned __int16 *)(a1 + 80));
  CFDataAppendBytes(v40, *(const UInt8 **)(a1 + 104), 12 * *(unsigned __int16 *)(a1 + 80));
  values[1] = (void *)sub_1B17ED204(v40, 1, *(unsigned __int16 *)(a1 + 80), 3, 1, v41, v42, v43);
  if (v40)
    CFRelease(v40);
  v44 = CFDataCreateMutable(v35, 8 * *(unsigned __int16 *)(a1 + 80));
  CFDataAppendBytes(v44, *(const UInt8 **)(a1 + 88), 8 * *(unsigned __int16 *)(a1 + 80));
  cf[0] = (CFTypeRef)sub_1B17ED204(v44, 3, *(unsigned __int16 *)(a1 + 80), 2, 1, v45, v46, v47);
  if (v44)
    CFRelease(v44);
  free(*(void **)(a1 + 104));
  free(*(void **)(a1 + 96));
  free(*(void **)(a1 + 88));
  v62 = 0;
  v61 = 0;
  v48 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
  v49 = CFArrayCreate(v35, (const void **)values, 3, MEMORY[0x1E0C9B378]);
  v50 = CFArrayCreate(v35, *(const void ***)(a1 + 112), *(unsigned __int16 *)(a1 + 82), v48);
  v51 = *(unsigned __int16 *)(a1 + 82);
  if (*(_WORD *)(a1 + 82))
  {
    v52 = 0;
    do
    {
      v53 = *(const void **)(*(_QWORD *)(a1 + 112) + 8 * v52);
      if (v53)
      {
        CFRelease(v53);
        *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v52) = 0;
        v51 = *(unsigned __int16 *)(a1 + 82);
      }
      ++v52;
    }
    while (v52 < v51);
  }
  free(*(void **)(a1 + 112));
  v59 = sub_1B17AF674(v49, v50, (uint64_t)&v61, v54, v55, v56, v57, v58);
  if (v50)
    CFRelease(v50);
  if (v49)
    CFRelease(v49);
  if (values[0])
  {
    CFRelease(values[0]);
    values[0] = 0;
  }
  if (values[1])
  {
    CFRelease(values[1]);
    values[1] = 0;
  }
  if (cf[0])
    CFRelease(cf[0]);
  return v59;
}

uint64_t sub_1B19981C0(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  int v5;
  int v6;
  float v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  __int128 v17;
  uint64_t result;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v33 = 0;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  memset(v23, 0, sizeof(v23));
  v4 = a2[1];
  v19 = *a2;
  v20 = v4;
  v21 = a2[2];
  v22 = *((_QWORD *)a2 + 6);
  sub_1B1996864((uint64_t)&v19, (uint64_t)v23);
  if (*((float *)a2 + 3) <= 0.0)
  {
    v6 = 0;
  }
  else
  {
    v5 = *((_DWORD *)a2 + 4);
    if (v5 == 2)
      v6 = 1;
    else
      v6 = (v5 != 1) + 1;
  }
  v7 = *((float *)a2 + 2);
  v8 = *(_DWORD *)(a1 + 24) << (v7 > 0.0);
  if (v7 <= 0.0)
    v9 = v6 + 1;
  else
    v9 = v6 + 3;
  v10 = *(unsigned int *)(a1 + 48);
  if ((_DWORD)v10)
  {
    v11 = 0;
    v12 = HIDWORD(v24) * v6 + 2 * (v7 > 0.0);
    do
    {
      v13 = *(_QWORD *)(a1 + 40) + 32 * v11;
      v14 = *(unsigned int *)(v13 + 8);
      if ((_DWORD)v14)
      {
        v15 = (int *)(*(_QWORD *)v13 + 12);
        do
        {
          v16 = *v15;
          v15 += 10;
          v8 += v12 * v16;
          --v14;
        }
        while (v14);
      }
      ++v11;
    }
    while (v11 != v10);
  }
  sub_1B1996A08(v8, v9, (uint64_t)v23, 0);
  v17 = a2[1];
  v19 = *a2;
  v20 = v17;
  v21 = a2[2];
  v22 = *((_QWORD *)a2 + 6);
  sub_1B1996B18(a1, (uint64_t)&v19, (uint64_t)v23, 1, *MEMORY[0x1E0C9D538], *(double *)(MEMORY[0x1E0C9D538] + 8));
  result = sub_1B1997E24((uint64_t)v23);
  if (!result)
    return -[VFXMesh __createCFObject]_0();
  return result;
}

uint64_t sub_1B1998320(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float64_t a9, float64_t a10)
{
  __int128 v12;
  float v13;
  float v14;
  unsigned int v15;
  unsigned int v16;
  CFIndex v17;
  int v18;
  int v19;
  int v20;
  int v21;
  CFArrayRef *ValueAtIndex;
  CFIndex v23;
  CFArrayRef *v24;
  uint64_t v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  uint64_t result;
  CFIndex Count;
  CGPoint *v33;
  CFIndex v34;
  float64x2_t v35;
  CFArrayRef *v36;
  unsigned int v37;
  float64x2_t *v38;
  double v39;
  CFIndex j;
  CFArrayRef *v41;
  char v43;
  float64x2_t v44;
  __int128 v45;
  uint64_t v46;
  CFIndex v49;
  float64x2_t v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  _OWORD v56[2];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  CFRange v67;

  if (a1)
  {
    v66 = 0;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    memset(v56, 0, sizeof(v56));
    v12 = a2[1];
    v52 = *a2;
    v53 = v12;
    v54 = a2[2];
    v55 = *((_QWORD *)a2 + 6);
    sub_1B1996864((uint64_t)&v52, (uint64_t)v56);
    v13 = *((float *)a2 + 2);
    v14 = *((float *)a2 + 3);
    if (CFArrayGetCount(*(CFArrayRef *)(a1 + 24)) < 1)
    {
      v16 = 0;
      v15 = 0;
    }
    else
    {
      v15 = 0;
      v16 = 0;
      v17 = 0;
      v18 = v13 > 0.0;
      v19 = 2 * (v14 > 0.0);
      if (v13 > 0.0)
        v20 = v19 + 3;
      else
        v20 = v19 + 1;
      v21 = HIDWORD(v57) * v19 + 2 * v18;
      do
      {
        ValueAtIndex = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v17);
        if (sub_1B19963A8((CFIndex)ValueAtIndex))
        {
          v23 = 0;
          do
          {
            v24 = sub_1B19963C4(ValueAtIndex, v23);
            v15 += *((_DWORD *)v24 + 6) << v18;
            v25 = *((unsigned int *)v24 + 12);
            if ((_DWORD)v25)
            {
              for (i = 0; i != v25; ++i)
              {
                v27 = (uint64_t)v24[5] + 32 * i;
                v28 = *(unsigned int *)(v27 + 8);
                if ((_DWORD)v28)
                {
                  v29 = (int *)(*(_QWORD *)v27 + 12);
                  do
                  {
                    v30 = *v29;
                    v29 += 10;
                    v15 += v21 * v30;
                    --v28;
                  }
                  while (v28);
                }
              }
            }
            v16 += v20;
            v23 = (v23 + 1);
          }
          while (v23 < sub_1B19963A8((CFIndex)ValueAtIndex));
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(*(CFArrayRef *)(a1 + 24)));
    }
    sub_1B1996A08(v15, v16, (uint64_t)v56, *(_BYTE *)(a3 + 34));
    Count = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    v33 = (CGPoint *)malloc_type_malloc(16 * Count, 0x1000040451B5BE8uLL);
    v67.location = 0;
    v67.length = 0;
    CTFrameGetLineOrigins(*(CTFrameRef *)(a1 + 16), v67, v33);
    v49 = CFArrayGetCount(*(CFArrayRef *)(a1 + 24));
    if (v49 >= 1)
    {
      v34 = 0;
      v35.f64[0] = a9;
      v35.f64[1] = a10;
      v51 = v35;
      do
      {
        v36 = (CFArrayRef *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a1 + 24), v34);
        v37 = sub_1B19963A8((CFIndex)v36);
        v38 = (float64x2_t *)malloc_type_malloc(16 * v37, 0x1000040451B5BE8uLL);
        sub_1B19962D4((uint64_t)v36, (uint64_t)v38, v37, v39);
        if (v37)
        {
          for (j = 0; j != v37; ++j)
          {
            v41 = sub_1B19963C4(v36, j);
            v43 = v34 == v49 - 1 && v37 - 1 == j;
            v44 = vaddq_f64(vaddq_f64(v51, (float64x2_t)v33[v34]), v38[j]);
            v45 = a2[1];
            v52 = *a2;
            v53 = v45;
            v54 = a2[2];
            v55 = *((_QWORD *)a2 + 6);
            sub_1B1996B18((uint64_t)v41, (uint64_t)&v52, (uint64_t)v56, v43, v44.f64[0], v44.f64[1]);
          }
        }
        free(v38);
        ++v34;
      }
      while (v34 != v49);
    }
    free(v33);
    result = sub_1B1997E24((uint64_t)v56);
    if (!result)
      return -[VFXMesh __createCFObject]_0();
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXMeshCreateTextFrame: CFXTextFrameRef object is NULL, will create NULL mesh\n"), a3, a4, a5, a6, a7, a8, v46);
    return 0;
  }
  return result;
}

void sub_1B1998630()
{
  if (!qword_1EEF66C58)
    qword_1EEF66C58 = sub_1B179CB60(&qword_1EEF66C58);
}

uint64_t sub_1B1998670(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  const void *v19;

  if (qword_1EEF66C60 != -1)
    dispatch_once(&qword_1EEF66C60, &unk_1E63D13D0);
  v2 = sub_1B179CB90(qword_1EEF66C58, 0x28uLL);
  *(_QWORD *)(v2 + 16) = a1;
  v3 = *(_QWORD *)(v2 + 24);
  if (v3 != sub_1B1868FA0(a1, v4, v5, v6, v7, v8, v9, v10))
  {
    v18 = *(const void **)(v2 + 24);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(v2 + 24) = 0;
    }
    v19 = (const void *)sub_1B1868FA0(a1, v11, v12, v13, v14, v15, v16, v17);
    if (v19)
      v19 = CFRetain(v19);
    *(_QWORD *)(v2 + 24) = v19;
  }
  return v2;
}

uint64_t sub_1B1998710(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;

  if (qword_1EEF66C60 != -1)
    dispatch_once(&qword_1EEF66C60, &unk_1E63D13D0);
  v4 = sub_1B179CB90(qword_1EEF66C58, 0x28uLL);
  *(_QWORD *)(v4 + 16) = a2;
  v5 = *(CFTypeRef *)(v4 + 24);
  v6 = (CFTypeRef)a1[3];
  if (v5 != v6)
  {
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(v4 + 24) = 0;
      v6 = (CFTypeRef)a1[3];
    }
    if (v6)
      v6 = CFRetain(v6);
    *(_QWORD *)(v4 + 24) = v6;
  }
  v7 = *(CFTypeRef *)(v4 + 32);
  v8 = (CFTypeRef)a1[4];
  if (v7 != v8)
  {
    if (v7)
    {
      CFRelease(*(CFTypeRef *)(v4 + 32));
      *(_QWORD *)(v4 + 32) = 0;
      v8 = (CFTypeRef)a1[4];
    }
    if (v8)
      v8 = CFRetain(v8);
    *(_QWORD *)(v4 + 32) = v8;
  }
  v9 = *(CFTypeRef *)(v4 + 40);
  v10 = (CFTypeRef)a1[5];
  if (v9 != v10)
  {
    if (v9)
    {
      CFRelease(*(CFTypeRef *)(v4 + 40));
      *(_QWORD *)(v4 + 40) = 0;
      v10 = (CFTypeRef)a1[5];
    }
    if (v10)
      v10 = CFRetain(v10);
    *(_QWORD *)(v4 + 40) = v10;
  }
  v11 = *(CFTypeRef *)(v4 + 48);
  v12 = (CFTypeRef)a1[6];
  if (v11 != v12)
  {
    if (v11)
    {
      CFRelease(*(CFTypeRef *)(v4 + 48));
      *(_QWORD *)(v4 + 48) = 0;
      v12 = (CFTypeRef)a1[6];
    }
    if (v12)
      v12 = CFRetain(v12);
    *(_QWORD *)(v4 + 48) = v12;
  }
  return v4;
}

BOOL sub_1B199883C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  return !a1[4] && !a1[5] && a1[6] == 0;
}

BOOL sub_1B19988A4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  if (sub_1B199883C(a1, a2, a3, a4, a5, a6, a7, a8))
    return 0;
  if (a1[4])
    return 1;
  v10 = a1[5];
  if (!v10)
    return 1;
  return !sub_1B18E4B20(v10);
}

uint64_t sub_1B1998924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  return *(_QWORD *)(a1 + 24);
}

void sub_1B199896C(_QWORD *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  CFTypeRef v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  v10 = (CFTypeRef)a1[3];
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      a1[3] = 0;
    }
    if (cf)
      v11 = CFRetain(cf);
    else
      v11 = 0;
    a1[3] = v11;
    v12 = a1[4];
    if (v12)
      sub_1B19439D8(v12, cf, a3, a4, a5, a6, a7, a8);
    v13 = a1[5];
    if (v13)
      sub_1B18E5A04(v13);
    sub_1B194F874(CFSTR("kCFXNotificationDeformerStackDidChange"), a1, 0, 1u);
  }
}

uint64_t sub_1B1998A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  return *(_QWORD *)(a1 + 32);
}

void sub_1B1998A70(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  v10 = *(CFTypeRef *)(a1 + 32);
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      *(_QWORD *)(a1 + 32) = 0;
    }
    if (cf)
    {
      *(_QWORD *)(a1 + 32) = CFRetain(cf);
      sub_1B19439D8((uint64_t)cf, *(const void **)(a1 + 24), v11, v12, v13, v14, v15, v16);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = 0;
    }
    v17 = *(_QWORD *)(a1 + 40);
    if (v17)
    {
      sub_1B18E5A04(*(_QWORD *)(a1 + 40));
      v18 = sub_1B17A0A4C(v17);
      if (v18)
        sub_1B18F0EE4(v18, cf, v19, v20, v21, v22, v23, v24);
    }
    sub_1B194F874(CFSTR("kCFXNotificationDeformerStackDidChange"), (const void *)a1, 0, 1u);
  }
}

uint64_t sub_1B1998B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  return *(_QWORD *)(a1 + 40);
}

void sub_1B1998B94(_QWORD *a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  v10 = (CFTypeRef)a1[5];
  if (v10 != cf)
  {
    if (v10)
    {
      CFRelease(v10);
      a1[5] = 0;
    }
    if (cf)
    {
      a1[5] = CFRetain(cf);
      sub_1B18E5A04((uint64_t)cf);
      v11 = (const void *)a1[4];
      if (v11)
      {
        v12 = sub_1B17A0A4C((uint64_t)cf);
        if (v12)
          sub_1B18F0EE4(v12, v11, v13, v14, v15, v16, v17, v18);
      }
    }
    else
    {
      a1[5] = 0;
    }
    sub_1B194F874(CFSTR("kCFXNotificationDeformerStackDidChange"), a1, 0, 1u);
  }
}

uint64_t sub_1B1998C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"stack");
  return *(_QWORD *)(a1 + 48);
}

void sub_1B1998CAC(uint64_t a1, const __CFArray *cf)
{
  const __CFArray *v2;
  const __CFArray *v4;
  CFTypeRef v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = cf;
  if (cf && !CFArrayGetCount(cf))
    v2 = 0;
  v4 = *(const __CFArray **)(a1 + 48);
  if (v4 != v2)
  {
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(a1 + 48) = 0;
    }
    if (v2)
      v5 = CFRetain(v2);
    else
      v5 = 0;
    *(_QWORD *)(a1 + 48) = v5;
    sub_1B194F874(CFSTR("kCFXNotificationDeformerStackDidChange"), (const void *)a1, 0, 1u);
    sub_1B18690BC(*(float32x4_t **)(a1 + 16), v6, v7, v8, v9, v10, v11, v12);
  }
}

void sub_1B1998D3C(uint64_t a1, uint64_t a2)
{
  const __CFArray *v2;
  _QWORD v3[5];

  v2 = *(const __CFArray **)(a1 + 48);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 3221225472;
  v3[2] = sub_1B1998D90;
  v3[3] = &unk_1E63DA308;
  v3[4] = a2;
  sub_1B17A0470(v2, (uint64_t)v3);
}

uint64_t sub_1B1998D90(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[5];
  char v7;

  v4 = *(_QWORD *)(a1 + 32);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1B19990E0;
  v6[3] = &unk_1E63DA358;
  v6[4] = v4;
  v7 = 0;
  return objc_msgSend__enumerateDependencyNodesUsingBlock_(a3, a2, (uint64_t)v6, a4);
}

uint64_t sub_1B1998DF0(uint64_t *a1, uint64_t a2)
{
  const __CFArray *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v14 = 0;
  v15 = &v14;
  v16 = 0x2020000000;
  v17 = 0;
  v4 = (const __CFArray *)a1[6];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1B1998EC0;
  v13[3] = &unk_1E63DA330;
  v13[4] = &v14;
  v13[5] = a2;
  sub_1B17A0470(v4, (uint64_t)v13);
  if (!*((_BYTE *)v15 + 24))
  {
    v10 = a1[5];
    if (!v10)
    {
      v11 = 0;
      goto LABEL_5;
    }
    sub_1B18E5470(v10, a1[2], a2, v5, v6, v7, v8, v9);
  }
  v11 = 1;
LABEL_5:
  _Block_object_dispose(&v14, 8);
  return v11;
}

void sub_1B1998EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B1998EC0(uint64_t result, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v4;

  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24))
  {
    v4 = result;
    result = objc_msgSend__getDeformedMeshBoundingBox_(a3, a2, *(_QWORD *)(result + 40), a4);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 8) + 24) = result;
  }
  return result;
}

void sub_1B1998F0C(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;

  sub_1B194F874(CFSTR("kCFXNotificationDeformerStackWillDie"), a1, 0, 1u);
  v2 = (const void *)a1[3];
  if (v2)
  {
    CFRelease(v2);
    a1[3] = 0;
  }
  v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  v4 = (const void *)a1[5];
  if (v4)
  {
    CFRelease(v4);
    a1[5] = 0;
  }
  v5 = (const void *)a1[6];
  if (v5)
  {
    CFRelease(v5);
    a1[6] = 0;
  }
}

CFStringRef sub_1B1998F88(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _BOOL4 v9;
  const __CFAllocator *v10;
  __CFString *Mutable;
  const __CFArray *v13;
  _QWORD v14[5];

  v9 = sub_1B199883C(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v9)
    return CFStringCreateWithFormat(v10, 0, CFSTR("<CFXDeformerStack %p>"), a1);
  Mutable = CFStringCreateMutable(v10, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXDeformerStack %p (geometry: %p)\n"), a1, a1[3]);
  if (a1[4])
    CFStringAppendFormat(Mutable, 0, CFSTR("  morpher: %p\n"), a1[4]);
  if (a1[5])
    CFStringAppendFormat(Mutable, 0, CFSTR("  skinner: %p\n"), a1[5]);
  v13 = (const __CFArray *)a1[6];
  if (v13)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = sub_1B1999094;
    v14[3] = &unk_1E63D6610;
    v14[4] = Mutable;
    sub_1B17A0470(v13, (uint64_t)v14);
  }
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

void sub_1B1999094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __CFString *v4;
  objc_class *v5;
  NSString *v6;

  v4 = *(__CFString **)(a1 + 32);
  v5 = (objc_class *)objc_opt_class();
  v6 = NSStringFromClass(v5);
  CFStringAppendFormat(v4, 0, CFSTR("  %@: %p\n"), v6, a3);
}

uint64_t sub_1B19990E0(uint64_t a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v5 = objc_msgSend_nodeRef(a3, a2, (uint64_t)a3, a4);
  result = sub_1B1868F58(v5, v6, v7, v8, v9, v10, v11, v12);
  if (result)
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return result;
}

float sub_1B199927C(uint64_t a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  int v19[4];
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  *(_OWORD *)v19 = 0u;
  sub_1B17A4804(a1, 0, a3, a4, a5, a6, a7, a8, (uint64_t)v19);
  v15 = 0.0;
  if (*(_QWORD *)v19 && BYTE10(v20) != 4)
  {
    v16 = sub_1B17A4A10(SBYTE10(v20), v19[2], v9, v10, v11, v12, v13, v14);
    switch(BYTE11(v20))
    {
      case 4u:
        return sub_1B1999564(*(uint64_t *)v19, v16, a2);
      case 2u:
        return sub_1B1999464(*(uint64_t *)v19, v16, a2);
      case 1u:
        return sub_1B199933C(*(uint64_t *)v19, v16, a2);
    }
  }
  return v15;
}

float sub_1B199933C(uint64_t a1, unsigned int a2, size_t __len)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unsigned __int8 __b;
  _BYTE v14[3];
  unsigned int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = __len;
  if ((_DWORD)__len)
    memset(&__b, 255, __len);
  if (!a2)
    return 0.0;
  v5 = 0;
  v6 = 0;
  v7 = __b;
  do
  {
    v8 = *(unsigned __int8 *)(a1 + v5);
    if (!v15)
      goto LABEL_11;
    if (v7 != v8)
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v15 == v9)
          break;
        v11 = v14[v9++ - 1];
      }
      while (v11 != v8);
      if (v10 >= v15)
      {
LABEL_11:
        memmove(v14, &__b, v15 - 1);
        __b = v8;
        ++v6;
        v7 = v8;
      }
    }
    ++v5;
  }
  while (v5 != a2);
  return (float)v6 / (float)(a2 / 3);
}

float sub_1B1999464(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _WORD __b[64];
  __int16 v14;
  unsigned int v15;

  v15 = a3;
  if (a3)
    memset(__b, 255, 2 * a3);
  if (!a2)
    return 0.0;
  v5 = 0;
  v6 = 0;
  v7 = __b[0];
  do
  {
    v8 = *(unsigned __int16 *)(a1 + 2 * v5);
    if (!v15)
      goto LABEL_11;
    if (v7 != v8)
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v15 == v9)
          break;
        v11 = (unsigned __int16)__b[v9++];
      }
      while (v11 != v8);
      if (v10 >= v15)
      {
LABEL_11:
        memmove(&v14, __b, 2 * (v15 - 1));
        __b[0] = v8;
        ++v6;
        v7 = v8;
      }
    }
    ++v5;
  }
  while (v5 != a2);
  return (float)v6 / (float)(a2 / 3);
}

float sub_1B1999564(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  _DWORD __b[64];
  uint64_t v14;
  unsigned int v15;

  v15 = a3;
  if (a3)
    memset(__b, 255, 4 * a3);
  if (!a2)
    return 0.0;
  v5 = 0;
  v6 = 0;
  v7 = __b[0];
  do
  {
    v8 = *(_DWORD *)(a1 + 4 * v5);
    if (!v15)
      goto LABEL_11;
    if (v7 != v8)
    {
      v9 = 1;
      do
      {
        v10 = v9;
        if (v15 == v9)
          break;
        v11 = __b[v9++];
      }
      while (v11 != v8);
      if (v10 >= v15)
      {
LABEL_11:
        memmove(&v14, __b, 4 * (v15 - 1));
        __b[0] = v8;
        ++v6;
        v7 = v8;
      }
    }
    ++v5;
  }
  while (v5 != a2);
  return (float)v6 / (float)(a2 / 3);
}

CFDataRef sub_1B199966C(const __CFData *a1, int a2, int a3)
{
  unsigned int *BytePtr;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  int v23;

  BytePtr = (unsigned int *)CFDataGetBytePtr(a1);
  switch(a3)
  {
    case 4:
      if (a2)
      {
        v12 = 0;
        v13 = (3 * a2);
        v14 = BytePtr;
        do
        {
          v16 = *v14++;
          v15 = v16;
          if (v12 <= v16)
            v12 = v15;
          --v13;
        }
        while (v13);
        v17 = v12 + 1;
      }
      else
      {
        v17 = 1;
      }
      return sub_1B19998CC(BytePtr, a2, v17);
    case 2:
      if (a2)
      {
        LOWORD(v18) = 0;
        v19 = (3 * a2);
        v20 = BytePtr;
        do
        {
          v22 = *(unsigned __int16 *)v20;
          v20 = (unsigned int *)((char *)v20 + 2);
          v21 = v22;
          v18 = (unsigned __int16)v18;
          if ((unsigned __int16)v18 <= v22)
            v18 = v21;
          --v19;
        }
        while (v19);
        v23 = v18 + 1;
      }
      else
      {
        v23 = 1;
      }
      return sub_1B1999820((unsigned __int16 *)BytePtr, a2, v23);
    case 1:
      if (a2)
      {
        LOBYTE(v6) = 0;
        v7 = (3 * a2);
        v8 = BytePtr;
        do
        {
          v10 = *(unsigned __int8 *)v8;
          v8 = (unsigned int *)((char *)v8 + 1);
          v9 = v10;
          v6 = v6;
          if (v6 <= v10)
            v6 = v9;
          --v7;
        }
        while (v7);
        v11 = v6 + 1;
      }
      else
      {
        v11 = 1;
      }
      return sub_1B1999774((unsigned __int8 *)BytePtr, a2, v11);
    default:
      return 0;
  }
}

CFDataRef sub_1B1999774(unsigned __int8 *a1, int a2, int a3)
{
  size_t v6;
  UInt8 *v7;
  _BYTE v9[256];

  v6 = 3 * a2;
  v7 = (UInt8 *)malloc_type_calloc(1uLL, v6, 0x3DFFCD08uLL);
  sub_1B199A144((uint64_t)v9);
  if (sub_1B1999B0C((uint64_t)v9, (uint64_t)v7, a1, a2, a3))
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  free(v7);
  return 0;
}

CFDataRef sub_1B1999820(unsigned __int16 *a1, int a2, int a3)
{
  size_t v6;
  UInt8 *v7;
  _BYTE v9[256];

  v6 = 3 * a2;
  v7 = (UInt8 *)malloc_type_calloc(2uLL, v6, 0x3DFFCD08uLL);
  sub_1B199A144((uint64_t)v9);
  if (sub_1B199A2A8((uint64_t)v9, (uint64_t)v7, a1, a2, a3))
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, 2 * v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  free(v7);
  return 0;
}

CFDataRef sub_1B19998CC(unsigned int *a1, int a2, int a3)
{
  size_t v6;
  UInt8 *v7;
  _BYTE v9[256];

  v6 = 3 * a2;
  v7 = (UInt8 *)malloc_type_calloc(4uLL, v6, 0x3DFFCD08uLL);
  sub_1B199A144((uint64_t)v9);
  if (sub_1B199A8E0((uint64_t)v9, (uint64_t)v7, a1, a2, a3))
    return CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v7, 4 * v6, (CFAllocatorRef)*MEMORY[0x1E0C9AE00]);
  free(v7);
  return 0;
}

void sub_1B1999978(uint64_t a1)
{
  CFDataRef v2;
  CFDataRef v3;

  if (!*(_BYTE *)(a1 + 88))
  {
    v2 = sub_1B199966C(*(const __CFData **)(a1 + 96), *(_DWORD *)(a1 + 104), *(unsigned __int8 *)(a1 + 80));
    if (v2)
    {
      v3 = v2;
      sub_1B17A4464(a1, *(_DWORD *)(a1 + 104), v2, *(_BYTE *)(a1 + 80));
      CFRelease(v3);
    }
  }
}

_DWORD *sub_1B19999D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  __int16 v9;
  __int16 v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  float v20;
  float v21;
  float32x4_t v22;
  unsigned int v23;
  uint64_t i;
  float32x4_t v25;
  float32x4_t *v26;
  __int32 v27;
  uint64_t v28;
  float32x4_t v30;
  float32x4_t v31;
  __int128 v32;
  __int128 v33;
  int v34;
  float32x4_t *v35;

  v8 = sub_1B17ED6C4(a1, a2, a3, a4, a5, a6, a7, a8);
  v10 = v9;
  v12 = v11;
  v19 = malloc_type_calloc(v11, 4uLL, 0x100004052888210uLL);
  v22 = 0uLL;
  v32 = 0u;
  v33 = 0u;
  v34 = 1065353216;
  if (v12)
  {
    v23 = 0;
    for (i = 0; i != v12; ++i)
    {
      *(double *)v25.i64 = sub_1B198D4F8(v10, (const float *)(v8 + v23), v13, v14, v15, v16, v17, v18, v22, v20, v21);
      v30 = v25;
      v31 = v25;
      v26 = sub_1B199AF1C(&v32, &v31);
      if (v26)
      {
        v27 = v26[2].i32[0];
      }
      else
      {
        v31 = v30;
        v35 = &v31;
        sub_1B199AFEC((uint64_t)&v32, &v31, (uint64_t)&unk_1B22458B0, &v35)[2].i32[0] = i;
        v27 = i;
      }
      v19[i] = v27;
      v23 += HIBYTE(v10);
    }
    v28 = *((_QWORD *)&v33 + 1);
  }
  else
  {
    v28 = 0;
  }
  if (v28 == v12)
  {
    free(v19);
    v19 = 0;
  }
  sub_1B185B888((uint64_t)&v32);
  return v19;
}

uint64_t sub_1B1999B0C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, int a5)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int *v15;
  _WORD *v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int16 *v20;
  char *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  _WORD *v65;
  __int16 v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int8 *v82;
  void *v83;
  void *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[5];
  _BYTE v93[28];
  uint64_t v94;

  v91 = a1;
  v94 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v11 = a3;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  v88 = a2;
  v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  v18 = a4 + 7;
  if (a4 < -7)
    v18 = a4 + 14;
  v87 = (uint64_t)v18 >> 3;
  v19 = (unsigned __int8 *)malloc_type_malloc(v87, 0x6AD5D4E6uLL);
  v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  v86 = 12 * a4;
  v21 = (char *)malloc_type_malloc(v86, 0x3B81A4AuLL);
  bzero(v19, v87);
  bzero(v20, 2 * a4);
  bzero(v21, v86);
  if (a5 >= 1)
  {
    v22 = 0;
    v23 = a5;
    v24 = v15;
    v25 = v9;
    v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  v27 = v91;
  if (a4 >= 1)
  {
    v28 = 0;
    v29 = a3;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v31 = v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    v32 = 0;
    do
    {
      v33 = v9[v32];
      if (v9[v32])
      {
        v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v27 + 4 * v34);
        if (v33 <= 0x1F)
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        v36 = 0;
        v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    v40 = -1;
  }
  else
  {
    v38 = 0;
    v39 = -1;
    v40 = -1;
    do
    {
      v41 = v20[v38];
      if (v39 < v41)
        v40 = v38;
      if (v39 <= v41)
        v39 = v20[v38];
      ++v38;
    }
    while (a4 != v38);
  }
  v90 = a4;
  v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(_QWORD *)&v44 = -1;
  *((_QWORD *)&v44 + 1) = -1;
  *(_OWORD *)&v93[12] = v44;
  v92[4] = v44;
  *(_OWORD *)v93 = v44;
  v92[2] = v44;
  v92[3] = v44;
  v92[0] = v44;
  v92[1] = v44;
  v45 = v91;
  if ((v40 & 0x80000000) != 0)
    goto LABEL_92;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0)
        LODWORD(j) = v48 + 24;
      for (j = (int)j; j > v48; --j)
      {
        v51 = (_DWORD *)v92 + j;
        v52 = *(v51 - 1);
        *v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          v53 = (char)v17[v52];
          if (v53 <= 25)
            v17[v52] = v53 + 1;
        }
      }
      *((_DWORD *)v92 + v48) = v49;
      v17[v49] = v48;
      v54 = v9[v49];
      if (v9[v49])
      {
        v55 = v15[v49];
        v56 = &v21[4 * v55];
        v57 = v9[v49];
        while (*(_DWORD *)v56 != v40)
        {
          v56 += 4;
          if (!--v57)
            goto LABEL_58;
        }
        *(_DWORD *)v56 = *(_DWORD *)&v21[4 * v54 - 4 + 4 * (int)v55];
        LOBYTE(v54) = v9[v49];
      }
LABEL_58:
      v9[v49] = v54 - 1;
      ++v48;
    }
    while (v48 != 3);
    v58 = 0;
    ++v46;
    do
    {
      v59 = *((unsigned int *)v92 + v58);
      if ((v59 & 0x80000000) != 0)
        break;
      if (v58 <= 0x17)
      {
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
        {
          v62 = (char)v17[v59];
          if ((v62 & 0x80000000) != 0)
LABEL_67:
            v63 = 0;
          else
            v63 = *(_DWORD *)(v45 + 4 * v62);
          if (v61 <= 0x1F)
            v63 += *(_DWORD *)(v45 + 4 * v61 + 128);
          v64 = 0;
          v65 = &v16[v59];
          v66 = v63 - *v65;
          v67 = &v21[4 * v15[v59]];
          do
            v20[*(int *)&v67[4 * v64++]] += v66;
          while (v64 < *v60);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v59] = -1;
        *((_DWORD *)v92 + v58) = -1;
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
          goto LABEL_67;
      }
      LOWORD(v63) = 0;
      v65 = &v16[v59];
LABEL_74:
      *v65 = v63;
      ++v58;
    }
    while (v58 != 27);
    v68 = 0;
    v69 = -1;
    v40 = -1;
    do
    {
      v70 = *((unsigned int *)v92 + v68);
      if ((v70 & 0x80000000) != 0)
        break;
      v71 = v9[v70];
      if (v9[v70])
      {
        v72 = &v21[4 * v15[v70]];
        do
        {
          v74 = *(int *)v72;
          v72 += 4;
          v73 = v74;
          v75 = v20[v74];
          if (v69 < v75)
            v40 = v73;
          if (v69 <= v75)
            v69 = v75;
          --v71;
        }
        while (v71);
      }
      ++v68;
    }
    while (v68 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          v47 = a4;
          goto LABEL_91;
        }
      }
      v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  v76 = a4 < 1;
  v42 = v88;
  if (!v76)
  {
    v77 = 0;
    v78 = 0;
    do
    {
      v79 = 0;
      v80 = v78;
      v81 = v88 + v78;
      v82 = &a3[3 * v43[v77]];
      do
      {
        *(_BYTE *)(v81 + v79) = v82[v79];
        ++v79;
      }
      while (v79 != 3);
      ++v77;
      v78 = v80 + 3;
    }
    while (v77 != v90);
  }
  v83 = v21;
  v84 = v43;
  free(v83);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v84);
  return v42;
}

uint64_t sub_1B199A144(uint64_t a1)
{
  unint64_t i;
  float v3;
  unint64_t v4;
  uint64x2_t v5;
  int32x2_t v6;
  float32x2_t v7;
  float v8;
  uint64x2_t v10;
  float v11;
  float v12;
  unsigned __int8 v13;
  uint64x2_t v14;

  for (i = 0; i != 32; ++i)
  {
    v3 = 0.75;
    if (i >= 3)
      v3 = powf((float)((float)((int)i - 3) * -0.034483) + 1.0, 1.5);
    *(_DWORD *)(a1 + 4 * i) = (float)(v3 * 7281.0);
  }
  v4 = 0;
  v10 = (uint64x2_t)vdupq_n_s64(0x1FuLL);
  do
  {
    v5 = (uint64x2_t)vorrq_s8((int8x16_t)vdupq_n_s64(v4), (int8x16_t)xmmword_1B2244C80);
    v13 = vmovn_s64((int64x2_t)vcgtq_u64(v10, v5)).u8[0];
    v14 = v5;
    v6.i32[0] = v4 | 1;
    v6.i32[1] = vadd_s32(vdup_lane_s32((int32x2_t)v4, 0), (int32x2_t)0x200000002).i32[1];
    v7 = vcvt_f32_s32(v6);
    v11 = v7.f32[0];
    v12 = powf(v7.f32[1], -0.5);
    v8 = powf(v11, -0.5);
    if ((v13 & 1) != 0)
      *(_DWORD *)(a1 + 4 * v4 + 132) = (float)((float)(v8 + v8) * 7281.0);
    if ((vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)vdupq_n_s64(0x1FuLL), v14)).i32[1] & 1) != 0)
      *(_DWORD *)(a1 + 4 * v4 + 136) = (float)((float)(v12 + v12) * 7281.0);
    v4 += 2;
  }
  while (v4 != 32);
  return a1;
}

uint64_t sub_1B199A2A8(uint64_t a1, uint64_t a2, unsigned __int16 *a3, int a4, int a5)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int *v15;
  _WORD *v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int16 *v20;
  char *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t j;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  int v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  unint64_t v64;
  _WORD *v65;
  __int16 v66;
  char *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned __int16 *v82;
  void *v83;
  void *v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[5];
  _BYTE v93[28];
  uint64_t v94;

  v91 = a1;
  v94 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v11 = a3;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  v88 = a2;
  v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  v18 = a4 + 7;
  if (a4 < -7)
    v18 = a4 + 14;
  v87 = (uint64_t)v18 >> 3;
  v19 = (unsigned __int8 *)malloc_type_malloc(v87, 0x6AD5D4E6uLL);
  v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  v86 = 12 * a4;
  v21 = (char *)malloc_type_malloc(v86, 0x3B81A4AuLL);
  bzero(v19, v87);
  bzero(v20, 2 * a4);
  bzero(v21, v86);
  if (a5 >= 1)
  {
    v22 = 0;
    v23 = a5;
    v24 = v15;
    v25 = v9;
    v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  v27 = v91;
  if (a4 >= 1)
  {
    v28 = 0;
    v29 = a3;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v31 = v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    v32 = 0;
    do
    {
      v33 = v9[v32];
      if (v9[v32])
      {
        v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v27 + 4 * v34);
        if (v33 <= 0x1F)
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        v36 = 0;
        v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    v40 = -1;
  }
  else
  {
    v38 = 0;
    v39 = -1;
    v40 = -1;
    do
    {
      v41 = v20[v38];
      if (v39 < v41)
        v40 = v38;
      if (v39 <= v41)
        v39 = v20[v38];
      ++v38;
    }
    while (a4 != v38);
  }
  v90 = a4;
  v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(_QWORD *)&v44 = -1;
  *((_QWORD *)&v44 + 1) = -1;
  *(_OWORD *)&v93[12] = v44;
  v92[4] = v44;
  *(_OWORD *)v93 = v44;
  v92[2] = v44;
  v92[3] = v44;
  v92[0] = v44;
  v92[1] = v44;
  v45 = v91;
  if ((v40 & 0x80000000) != 0)
    goto LABEL_92;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0)
        LODWORD(j) = v48 + 24;
      for (j = (int)j; j > v48; --j)
      {
        v51 = (_DWORD *)v92 + j;
        v52 = *(v51 - 1);
        *v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          v53 = (char)v17[v52];
          if (v53 <= 25)
            v17[v52] = v53 + 1;
        }
      }
      *((_DWORD *)v92 + v48) = v49;
      v17[v49] = v48;
      v54 = v9[v49];
      if (v9[v49])
      {
        v55 = v15[v49];
        v56 = &v21[4 * v55];
        v57 = v9[v49];
        while (*(_DWORD *)v56 != v40)
        {
          v56 += 4;
          if (!--v57)
            goto LABEL_58;
        }
        *(_DWORD *)v56 = *(_DWORD *)&v21[4 * v54 - 4 + 4 * (int)v55];
        LOBYTE(v54) = v9[v49];
      }
LABEL_58:
      v9[v49] = v54 - 1;
      ++v48;
    }
    while (v48 != 3);
    v58 = 0;
    ++v46;
    do
    {
      v59 = *((unsigned int *)v92 + v58);
      if ((v59 & 0x80000000) != 0)
        break;
      if (v58 <= 0x17)
      {
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
        {
          v62 = (char)v17[v59];
          if ((v62 & 0x80000000) != 0)
LABEL_67:
            v63 = 0;
          else
            v63 = *(_DWORD *)(v45 + 4 * v62);
          if (v61 <= 0x1F)
            v63 += *(_DWORD *)(v45 + 4 * v61 + 128);
          v64 = 0;
          v65 = &v16[v59];
          v66 = v63 - *v65;
          v67 = &v21[4 * v15[v59]];
          do
            v20[*(int *)&v67[4 * v64++]] += v66;
          while (v64 < *v60);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v59] = -1;
        *((_DWORD *)v92 + v58) = -1;
        v60 = &v9[v59];
        v61 = v9[v59];
        if (v9[v59])
          goto LABEL_67;
      }
      LOWORD(v63) = 0;
      v65 = &v16[v59];
LABEL_74:
      *v65 = v63;
      ++v58;
    }
    while (v58 != 27);
    v68 = 0;
    v69 = -1;
    v40 = -1;
    do
    {
      v70 = *((unsigned int *)v92 + v68);
      if ((v70 & 0x80000000) != 0)
        break;
      v71 = v9[v70];
      if (v9[v70])
      {
        v72 = &v21[4 * v15[v70]];
        do
        {
          v74 = *(int *)v72;
          v72 += 4;
          v73 = v74;
          v75 = v20[v74];
          if (v69 < v75)
            v40 = v73;
          if (v69 <= v75)
            v69 = v75;
          --v71;
        }
        while (v71);
      }
      ++v68;
    }
    while (v68 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          v47 = a4;
          goto LABEL_91;
        }
      }
      v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  v76 = a4 < 1;
  v42 = v88;
  if (!v76)
  {
    v77 = 0;
    v78 = 0;
    do
    {
      v79 = 0;
      v80 = v78;
      v81 = v88 + 2 * v78;
      v82 = &a3[3 * v43[v77]];
      do
      {
        *(_WORD *)(v81 + 2 * v79) = v82[v79];
        ++v79;
      }
      while (v79 != 3);
      ++v77;
      v78 = v80 + 3;
    }
    while (v77 != v90);
  }
  v83 = v21;
  v84 = v43;
  free(v83);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v84);
  return v42;
}

uint64_t sub_1B199A8E0(uint64_t a1, uint64_t a2, unsigned int *a3, int a4, int a5)
{
  size_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unsigned int *v11;
  uint64_t v12;
  unsigned int v13;
  int v14;
  int *v15;
  _WORD *v16;
  _BYTE *v17;
  int v18;
  unsigned __int8 *v19;
  unsigned __int16 *v20;
  char *v21;
  int v22;
  uint64_t v23;
  _DWORD *v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  uint64_t v42;
  int *v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t j;
  _DWORD *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned __int8 *v61;
  unsigned int v62;
  unsigned int v63;
  int v64;
  unint64_t v65;
  _WORD *v66;
  __int16 v67;
  char *v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  BOOL v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  unsigned int *v83;
  void *v84;
  void *v85;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[5];
  _BYTE v94[28];
  uint64_t v95;

  v92 = a1;
  v95 = *MEMORY[0x1E0C80C00];
  v8 = a5;
  v9 = (unsigned __int8 *)malloc_type_malloc(a5, 0x100004077774924uLL);
  bzero(v9, v8);
  if (a4 >= 1)
  {
    LODWORD(v10) = 3 * a4;
    if (3 * a4 <= 1)
      v10 = 1;
    else
      v10 = v10;
    v11 = a3;
    do
    {
      v13 = *v11++;
      v12 = v13;
      v14 = v9[v13];
      if (v14 == 255)
      {
        free(v9);
        return 0;
      }
      v9[v12] = v14 + 1;
      --v10;
    }
    while (v10);
  }
  v89 = a2;
  v15 = (int *)malloc_type_malloc(4 * v8, 0x100004052888210uLL);
  v16 = malloc_type_malloc(2 * v8, 0x1000040BDFB0063uLL);
  v17 = malloc_type_malloc(v8, 0x100004077774924uLL);
  v18 = a4 + 7;
  if (a4 < -7)
    v18 = a4 + 14;
  v88 = (uint64_t)v18 >> 3;
  v19 = (unsigned __int8 *)malloc_type_malloc(v88, 0x6AD5D4E6uLL);
  v20 = (unsigned __int16 *)malloc_type_malloc(2 * a4, 0x1000040BDFB0063uLL);
  v87 = 12 * a4;
  v21 = (char *)malloc_type_malloc(v87, 0x3B81A4AuLL);
  bzero(v19, v88);
  bzero(v20, 2 * a4);
  bzero(v21, v87);
  if (a5 >= 1)
  {
    v22 = 0;
    v23 = a5;
    v24 = v15;
    v25 = v9;
    v26 = v17;
    do
    {
      *v24++ = v22;
      v22 += *v25;
      *v25++ = 0;
      *v26++ = -1;
      --v23;
    }
    while (v23);
  }
  v27 = v92;
  if (a4 >= 1)
  {
    v28 = 0;
    v29 = a3;
    do
    {
      for (i = 0; i != 3; ++i)
      {
        v31 = (int)v29[i];
        *(_DWORD *)&v21[4 * v15[v31] + 4 * v9[v31]++] = v28;
      }
      ++v28;
      v29 += 3;
    }
    while (v28 != a4);
  }
  if (a5 >= 1)
  {
    v32 = 0;
    do
    {
      v33 = v9[v32];
      if (v9[v32])
      {
        v34 = (char)v17[v32];
        if ((v34 & 0x80000000) != 0)
          v35 = 0;
        else
          v35 = *(_DWORD *)(v27 + 4 * v34);
        if (v33 <= 0x1F)
          v35 += *(_DWORD *)(v27 + 4 * v33 + 128);
      }
      else
      {
        LOWORD(v35) = 0;
      }
      v16[v32] = v35;
      if (v9[v32])
      {
        v36 = 0;
        v37 = &v21[4 * v15[v32]];
        do
          v20[*(int *)&v37[4 * v36++]] += v16[v32];
        while (v36 < v9[v32]);
      }
      ++v32;
    }
    while (v32 != a5);
  }
  if (a4 < 1)
  {
    v40 = -1;
  }
  else
  {
    v38 = 0;
    v39 = -1;
    v40 = -1;
    do
    {
      v41 = v20[v38];
      if (v39 < v41)
        v40 = v38;
      if (v39 <= v41)
        v39 = v20[v38];
      ++v38;
    }
    while (a4 != v38);
  }
  v91 = a4;
  v43 = (int *)malloc_type_malloc(4 * a4, 0x100004052888210uLL);
  *(_QWORD *)&v44 = -1;
  *((_QWORD *)&v44 + 1) = -1;
  *(_OWORD *)&v94[12] = v44;
  v93[4] = v44;
  *(_OWORD *)v94 = v44;
  v93[2] = v44;
  v93[3] = v44;
  v93[0] = v44;
  v93[1] = v44;
  v45 = v92;
  if ((v40 & 0x80000000) != 0)
    goto LABEL_92;
  v46 = 0;
  v47 = 0;
  do
  {
    v48 = 0;
    v19[(unint64_t)v40 >> 3] |= 1 << (v40 & 7);
    v43[v46] = v40;
    do
    {
      v49 = a3[v48 + (int)(3 * v40)];
      LODWORD(j) = (char)v17[v49];
      if ((int)j < 0)
        LODWORD(j) = v48 + 24;
      for (j = (int)j; j > v48; --j)
      {
        v51 = (_DWORD *)v93 + j;
        v52 = *(v51 - 1);
        *v51 = v52;
        if ((v52 & 0x80000000) == 0)
        {
          v53 = (char)v17[v52];
          if (v53 <= 25)
            v17[v52] = v53 + 1;
        }
      }
      v54 = (int)v49;
      *((_DWORD *)v93 + v48) = v49;
      v17[v49] = v48;
      v55 = v9[v49];
      if (v55)
      {
        v56 = v15[v54];
        v57 = &v21[4 * v56];
        v58 = v55;
        while (*(_DWORD *)v57 != v40)
        {
          v57 += 4;
          if (!--v58)
            goto LABEL_58;
        }
        *(_DWORD *)v57 = *(_DWORD *)&v21[4 * (int)v55 - 4 + 4 * (int)v56];
        LOBYTE(v55) = v9[v54];
      }
LABEL_58:
      v9[v54] = v55 - 1;
      ++v48;
    }
    while (v48 != 3);
    v59 = 0;
    ++v46;
    do
    {
      v60 = *((unsigned int *)v93 + v59);
      if ((v60 & 0x80000000) != 0)
        break;
      if (v59 <= 0x17)
      {
        v61 = &v9[v60];
        v62 = v9[v60];
        if (v9[v60])
        {
          v63 = (char)v17[v60];
          if ((v63 & 0x80000000) != 0)
LABEL_67:
            v64 = 0;
          else
            v64 = *(_DWORD *)(v45 + 4 * v63);
          if (v62 <= 0x1F)
            v64 += *(_DWORD *)(v45 + 4 * v62 + 128);
          v65 = 0;
          v66 = &v16[v60];
          v67 = v64 - *v66;
          v68 = &v21[4 * v15[v60]];
          do
            v20[*(int *)&v68[4 * v65++]] += v67;
          while (v65 < *v61);
          goto LABEL_74;
        }
      }
      else
      {
        v17[v60] = -1;
        *((_DWORD *)v93 + v59) = -1;
        v61 = &v9[v60];
        v62 = v9[v60];
        if (v9[v60])
          goto LABEL_67;
      }
      LOWORD(v64) = 0;
      v66 = &v16[v60];
LABEL_74:
      *v66 = v64;
      ++v59;
    }
    while (v59 != 27);
    v69 = 0;
    v70 = -1;
    v40 = -1;
    do
    {
      v71 = *((unsigned int *)v93 + v69);
      if ((v71 & 0x80000000) != 0)
        break;
      v72 = v9[v71];
      if (v9[v71])
      {
        v73 = &v21[4 * v15[v71]];
        do
        {
          v75 = *(int *)v73;
          v73 += 4;
          v74 = v75;
          v76 = v20[v75];
          if (v70 < v76)
            v40 = v74;
          if (v70 <= v76)
            v70 = v76;
          --v72;
        }
        while (v72);
      }
      ++v69;
    }
    while (v69 != 24);
    if ((v40 & 0x80000000) != 0 && v47 < a4)
    {
      while (((v19[v47 >> 3] >> (v47 & 7)) & 1) != 0)
      {
        if (a4 == ++v47)
        {
          v47 = a4;
          goto LABEL_91;
        }
      }
      v40 = v47;
    }
LABEL_91:
    ;
  }
  while ((v40 & 0x80000000) == 0);
LABEL_92:
  v77 = a4 < 1;
  v42 = v89;
  if (!v77)
  {
    v78 = 0;
    v79 = 0;
    do
    {
      v80 = 0;
      v81 = v79;
      v82 = v89 + 4 * v79;
      v83 = &a3[3 * v43[v78]];
      do
      {
        *(_DWORD *)(v82 + 4 * v80) = v83[v80];
        ++v80;
      }
      while (v80 != 3);
      ++v78;
      v79 = v81 + 3;
    }
    while (v78 != v91);
  }
  v84 = v21;
  v85 = v43;
  free(v84);
  free(v15);
  free(v16);
  free(v9);
  free(v17);
  free(v19);
  free(v20);
  free(v85);
  return v42;
}

float32x4_t *sub_1B199AF1C(_QWORD *a1, float32x4_t *a2)
{
  int8x8_t v2;
  unint64_t v3;
  uint8x8_t v4;
  unint64_t v5;
  float32x4_t **v6;
  float32x4_t *result;
  unint64_t v8;
  uint32x4_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v3 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
  v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    v5 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
    if (*(_QWORD *)&v2 <= v3)
      v5 = v3 % *(_QWORD *)&v2;
  }
  else
  {
    v5 = (v2.i32[0] - 1) & v3;
  }
  v6 = *(float32x4_t ***)(*a1 + 8 * v5);
  if (!v6)
    return 0;
  for (result = *v6; result; result = (float32x4_t *)result->i64[0])
  {
    v8 = result->u64[1];
    if (v8 == v3)
    {
      v9 = (uint32x4_t)vceqq_f32(result[1], *a2);
      v9.i32[3] = v9.i32[2];
      if ((vminvq_u32(v9) & 0x80000000) != 0)
        return result;
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(_QWORD *)&v2)
          v8 %= *(_QWORD *)&v2;
      }
      else
      {
        v8 &= *(_QWORD *)&v2 - 1;
      }
      if (v8 != v5)
        return 0;
    }
  }
  return result;
}

float32x4_t *sub_1B199AFEC(uint64_t a1, float32x4_t *a2, uint64_t a3, float32x4_t **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  float32x4_t **v10;
  float32x4_t *i;
  unint64_t v12;
  uint32x4_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  uint64_t v20;
  float32x4_t **v21;
  unint64_t v22;

  v7 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = a2->i32[0] ^ (2 * a2->i32[1]) ^ (4 * a2->i32[2]);
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
    v10 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (float32x4_t *)i->i64[0])
      {
        v12 = i->u64[1];
        if (v12 == v7)
        {
          v13 = (uint32x4_t)vceqq_f32(i[1], *a2);
          v13.i32[3] = v13.i32[2];
          if ((vminvq_u32(v13) & 0x80000000) != 0)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  i = (float32x4_t *)operator new(0x30uLL);
  i->i64[0] = 0;
  i->i64[1] = v7;
  i[1] = **a4;
  i[2].i32[0] = 0;
  v14 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v15 = *(float *)(a1 + 32);
  if (!v8 || (float)(v15 * (float)v8) < v14)
  {
    v16 = 1;
    if (v8 >= 3)
      v16 = (v8 & (v8 - 1)) != 0;
    v17 = v16 | (2 * v8);
    v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18)
      v19 = v18;
    else
      v19 = v17;
    sub_1B179C4B4(a1, v19);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = ((_DWORD)v8 - 1) & v7;
    }
  }
  v20 = *(_QWORD *)a1;
  v21 = *(float32x4_t ***)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    i->i64[0] = (uint64_t)*v21;
LABEL_38:
    *v21 = i;
    goto LABEL_39;
  }
  i->i64[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v20 + 8 * v4) = a1 + 16;
  if (i->i64[0])
  {
    v22 = *(_QWORD *)(i->i64[0] + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v22 >= v8)
        v22 %= v8;
    }
    else
    {
      v22 &= v8 - 1;
    }
    v21 = (float32x4_t **)(*(_QWORD *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1B199B218()
{
  void *v0;
  const void *v1;

  if (!qword_1EEF66C68)
  {
    v0 = (void *)sub_1B179CB60(&qword_1EEF66C68);
    qword_1EEF66C68 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C3258();
  }
}

void sub_1B199B278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = sub_1B1868FE8(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    v18 = (float32x4_t *)v11;
    v19 = *((int *)v11 + 20);
    if (v19 > 3)
    {
      v21 = 0;
    }
    else
    {
      v20 = qword_1B2268B88[v19];
      v21 = sub_1B199BD04();
      v22 = *(float32x4_t **)(v21 + 16);
      if (v22 != v18)
      {
        if (v22)
        {
          CFRelease(v22);
          *(_QWORD *)(v21 + 16) = 0;
        }
        *(_QWORD *)(v21 + 16) = CFRetain(v18);
      }
      *(_DWORD *)(v21 + 24) = 1;
      *(_QWORD *)(v21 + 32) = v20;
    }
    sub_1B1879CB8(a1, (void *)v21);
    v25 = (void *)sub_1B199B39C(v18, v23, v24);
    sub_1B199B414(a2, v25, v26, v27, v28, v29, v30, v31);
    sub_1B199B69C((uint64_t)v18, v25, v32, v33, v34, v35, v36, v37);
    v38 = (void *)sub_1B199B850((int *)v18, v25);
    sub_1B1879CB8(a1, v38);
  }
  else
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Should not update VFXLight without CFXLight"), v12, v13, v14, v15, v16, v17, a9);
  }
}

uint64_t sub_1B199B39C(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _TtC3VFX23VFXSceneLightParameters *v5;
  uint64_t v6;

  v3 = a1[5].i32[0];
  if (v3 > 3)
    return 0;
  v4 = qword_1B2268B88[v3];
  sub_1B18610E8(a1, a2, a3);
  v5 = [_TtC3VFX23VFXSceneLightParameters alloc];
  return MEMORY[0x1E0DE7D20](v5, sel_initWithType_intensity_color_, v4, v6);
}

uint64_t sub_1B199B414(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int8x16_t v37;
  float32x4_t v38;
  int32x4_t v39;
  float v40;
  float32x4_t v41;
  float v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t v47;
  int8x16_t v48;
  float v49;
  float32x2_t v50;
  float32x2_t v51;
  float32x2_t v52;
  uint64_t v53;
  int32x2_t v54;
  float32x4_t v55;
  float32x2_t v56;
  float32x2_t v57;

  v9 = sub_1B1869AC8(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  objc_msgSend_setPosition_(a2, v10, v11, v12, *(double *)(v9 + 48));
  v16 = *(float32x4_t *)(v9 + 16);
  v17 = *(float32x4_t *)(v9 + 32);
  v18 = (int32x4_t)vmulq_f32(*(float32x4_t *)v9, *(float32x4_t *)v9);
  v19 = (int32x4_t)vmulq_f32(v16, v16);
  v20 = (int32x4_t)vmulq_f32(v17, v17);
  v21 = vzip2q_s32(v18, v20);
  v22 = (float32x4_t)vzip1q_s32(vzip1q_s32(v18, v20), v19);
  v23 = (float32x4_t)vtrn2q_s32(v18, v19);
  v23.i32[2] = v20.i32[1];
  v24 = vaddq_f32((float32x4_t)vzip1q_s32(v21, vdupq_laneq_s32(v19, 2)), vaddq_f32(v22, v23));
  v23.i64[0] = 0x80000000800000;
  v23.i64[1] = 0x80000000800000;
  v25 = vcgeq_f32(v23, v24);
  v24.i32[3] = 0;
  v26 = vrsqrteq_f32(v24);
  v27 = vmulq_f32(v26, vrsqrtsq_f32(v24, vmulq_f32(v26, v26)));
  v28 = v25;
  v28.i32[3] = 0;
  v29 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v28), (int8x16_t)v24, (int8x16_t)vmulq_f32(v27, vrsqrtsq_f32(v24, vmulq_f32(v27, v27))));
  v30 = vmulq_n_f32(*(float32x4_t *)v9, v29.f32[0]);
  v31 = vmulq_lane_f32(v16, *(float32x2_t *)v29.f32, 1);
  v32 = vmulq_laneq_f32(v17, v29, 2);
  v33 = (int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32);
  v34 = (int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31);
  v35 = (int32x4_t)v30;
  if (v25.i32[0])
  {
    v36 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v33, (int8x16_t)v32, 0xCuLL), vnegq_f32(v31)), v32, (float32x4_t)vextq_s8(v34, (int8x16_t)v31, 0xCuLL));
    v35 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v36, v36), (int8x16_t)v36, 0xCuLL);
  }
  v37 = (int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30);
  v38 = v31;
  if (v25.i32[1])
  {
    v39 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v37, (int8x16_t)v30, 0xCuLL), vnegq_f32(v32)), v30, (float32x4_t)vextq_s8(v33, (int8x16_t)v32, 0xCuLL));
    v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v39, v39), (int8x16_t)v39, 0xCuLL);
  }
  if (v25.i32[2])
  {
    v25 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v34, (int8x16_t)v31, 0xCuLL), vnegq_f32(v30)), v31, (float32x4_t)vextq_s8(v37, (int8x16_t)v30, 0xCuLL));
    v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v25, v25), (int8x16_t)v25, 0xCuLL);
  }
  v40 = (float)(*(float *)v35.i32 + v38.f32[1]) + v32.f32[2];
  if (v40 > 0.0)
  {
    v41 = (float32x4_t)vzip2q_s32((int32x4_t)v38, vuzp1q_s32((int32x4_t)v38, (int32x4_t)v32));
    v41.i32[2] = v35.i32[1];
    v42 = sqrtf(v40 + 1.0);
    v43 = (float32x4_t)vtrn2q_s32((int32x4_t)v32, vzip2q_s32((int32x4_t)v32, v35));
    v43.i32[2] = v38.i32[0];
    v45 = vsubq_f32(v41, v43);
    v41.f32[3] = v42;
    v43.f32[3] = v42;
    v44 = vmulq_f32(v41, v43);
    v45.i32[3] = v44.i32[3];
LABEL_18:
    v44.f32[0] = 0.5 / v42;
    v55 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 0);
    return objc_msgSend_setOrientation_(a2, v13, v14, v15, *(double *)vmulq_f32(v45, v55).i64);
  }
  if (*(float *)v35.i32 < v38.f32[1] || *(float *)v35.i32 < v32.f32[2])
  {
    if (v38.f32[1] <= v32.f32[2])
    {
      v42 = sqrtf((float)((float)(v32.f32[2] + 1.0) - *(float *)v35.i32) - v38.f32[1]);
      *(float32x2_t *)v45.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v35, (int32x4_t)v38), *(float32x2_t *)v32.f32);
      v56 = (float32x2_t)__PAIR64__(v35.u32[1], LODWORD(v42));
      v57 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
      *(float32x2_t *)v44.f32 = vsub_f32(*(float32x2_t *)v35.i8, v57);
      v57.f32[0] = v42;
      v57.i32[0] = vmul_f32(v56, v57).u32[0];
      v57.i32[1] = v44.i32[1];
      *(float32x2_t *)&v45.u32[2] = v57;
      goto LABEL_18;
    }
    v49 = sqrtf((float)((float)(v38.f32[1] + 1.0) - *(float *)v35.i32) - v32.f32[2]);
    *(int32x2_t *)v25.i8 = vdup_laneq_s32((int32x4_t)v38, 2);
    v47 = (int8x16_t)v25;
    *(float *)v47.i32 = v49;
    v47.i32[0] = vmul_f32(*(float32x2_t *)v47.i8, (float32x2_t)__PAIR64__(v32.u32[1], LODWORD(v49))).u32[0];
    v47.i32[1] = vadd_f32(*(float32x2_t *)&v25, *(float32x2_t *)&v32).i32[1];
    v48 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.i8, 1), v38);
    v54 = (int32x2_t)vsubq_f32(v32, (float32x4_t)vdupq_laneq_s32(v35, 2)).u64[0];
    v55 = (float32x4_t)vextq_s8(vextq_s8(v48, v48, 4uLL), v47, 0xCuLL);
    v55.i32[3] = v54.i32[0];
  }
  else
  {
    v49 = sqrtf((float)((float)(*(float *)v35.i32 + 1.0) - v38.f32[1]) - v32.f32[2]);
    v50 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.f32, 0);
    v51 = vadd_f32(*(float32x2_t *)v35.i8, v50);
    v50.f32[0] = v49;
    v55.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v35.u32[1], LODWORD(v49)), v50).u32[0];
    v55.i32[1] = v51.i32[1];
    v52 = (float32x2_t)vzip2q_s32(v35, (int32x4_t)v38).u64[0];
    LODWORD(v53) = vadd_f32(v52, *(float32x2_t *)v32.f32).u32[0];
    v54 = (int32x2_t)vsub_f32(v52, *(float32x2_t *)v32.f32);
    HIDWORD(v53) = v54.i32[1];
    v55.i64[1] = v53;
  }
  *(float *)v54.i32 = 0.5 / v49;
  v45 = (float32x4_t)vdupq_lane_s32(v54, 0);
  return objc_msgSend_setOrientation_(a2, v13, v14, v15, *(double *)vmulq_f32(v45, v55).i64);
}

uint64_t sub_1B199B69C(uint64_t result, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  int v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;

  if (a2)
  {
    v9 = result;
    v10 = *(_DWORD *)(result + 80);
    if ((v10 & 0xFFFFFFFD) == 1)
    {
      *(float *)&v11 = sub_1B185FC40(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
      result = objc_msgSend_setAttenuationRadius_(a2, v12, v13, v14, v11);
      v10 = *(_DWORD *)(v9 + 80);
    }
    switch(v10)
    {
      case 1:
        sub_1B1860734(v9, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
        sub_1B1860694(v9, v15, v16, v17, v18, v19, v20, v21);
        result = MEMORY[0x1E0DE7D20](a2, sel_setPointLightParametersWithZNear_zFar_, v60, v61);
        break;
      case 2:
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        sub_1B185F8E8(v9, (uint64_t)&v62, a3, a4, a5, a6, a7, a8);
        LODWORD(v22) = DWORD2(v64);
        LODWORD(v24) = DWORD2(v62);
        LODWORD(v23) = DWORD1(v62);
        result = objc_msgSend_setDirectionalParametersWithScale_zNear_zFar_(a2, v25, v26, v27, v22, v23, v24);
        break;
      case 3:
        v71 = 0u;
        v72 = 0u;
        v69 = 0u;
        v70 = 0u;
        v67 = 0u;
        v68 = 0u;
        v65 = 0u;
        v66 = 0u;
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        sub_1B185F8E8(v9, (uint64_t)&v62, a3, a4, a5, a6, a7, a8);
        v35 = fminf(sub_1B185FA20(v9, v28, v29, v30, v31, v32, v33, v34), 180.0) / 180.0 * 3.14159265;
        v43 = fminf(sub_1B186045C(v9, v36, v37, v38, v39, v40, v41, v42), 180.0) / 180.0 * 3.14159265;
        *(float *)&v44 = v43;
        LODWORD(v46) = DWORD2(v62);
        LODWORD(v45) = DWORD1(v62);
        *(float *)&v43 = v35;
        result = objc_msgSend_setSpotLightParametersWithOuterAngle_innerAngle_zNear_zFar_(a2, v47, v48, v49, v43, v44, v45, v46);
        break;
      case 5:
        v63 = 0u;
        v64 = 0u;
        v62 = 0u;
        sub_1B1860FEC(v9, a3, a4, a5, a6, a7, a8, (uint64_t)&v62);
        v57 = sub_1B1860F8C(v9, v50, v51, v52, v53, v54, v55, v56);
        result = objc_msgSend_setAreaLightParametersWithExtents_doubleSided_(a2, v58, v57, v59, *(double *)&v63);
        break;
      default:
        return result;
    }
  }
  return result;
}

uint64_t sub_1B199B850(int *a1, void *a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;

  if (!a2)
    return 0;
  v3 = a1[20];
  if (v3 > 3)
    return 0;
  v5 = qword_1B2268B88[v3];
  v6 = sub_1B199BD04();
  v7 = *(int **)(v6 + 16);
  if (v7 != a1)
  {
    if (v7)
    {
      CFRelease(v7);
      *(_QWORD *)(v6 + 16) = 0;
    }
    *(_QWORD *)(v6 + 16) = CFRetain(a1);
  }
  *(_DWORD *)(v6 + 24) = 3;
  *(_QWORD *)(v6 + 32) = v5;
  *(_QWORD *)(v6 + 40) = a2;
  v15 = sub_1B185F4D4((uint64_t)a1, v8, v9, v10, v11, v12, v13, v14);
  *(_BYTE *)(v6 + 48) = v15;
  if (v15)
  {
    v23 = (const void *)sub_1B18626CC((uint64_t)a1, v16, v17, v18, v19, v20, v21, v22);
    v31 = sub_1B1862714((uint64_t)a1, v24, v25, v26, v27, v28, v29, v30);
    *(_DWORD *)(v6 + 160) = v31;
    memcpy((void *)(v6 + 64), v23, 16 * v31);
    v39 = sub_1B1860068((uint64_t)a1, v32, v33, v34, v35, v36, v37, v38) * 0.001;
    *(float *)(v6 + 164) = v39;
  }
  return v6;
}

void sub_1B199B938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFDictionary *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = sub_1B1868FE8(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    v18 = (int *)v11;
    v19 = sub_1B199BD04();
    v20 = *(int **)(v19 + 16);
    if (v20 != v18)
    {
      if (v20)
      {
        CFRelease(v20);
        *(_QWORD *)(v19 + 16) = 0;
      }
      *(_QWORD *)(v19 + 16) = CFRetain(v18);
    }
    *(_DWORD *)(v19 + 24) = 2;
    v21 = v18[20];
    if (v21 > 3)
      v22 = -1;
    else
      v22 = qword_1B2268B88[v21];
    *(_QWORD *)(v19 + 32) = v22;
    sub_1B1879CB8(a1, (void *)v19);
  }
  else
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Should not update VFXLight without CFXLight"), v12, v13, v14, v15, v16, v17, a9);
  }
}

void sub_1B199BA14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float32x4_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"node");
  v11 = (float32x4_t *)sub_1B1868FE8(a2, a2, a3, a4, a5, a6, a7, a8);
  if (v11)
  {
    v20 = (int *)v11;
    v21 = (void *)sub_1B199B39C(v11, v18, v19);
    sub_1B199B414(a2, v21, v22, v23, v24, v25, v26, v27);
    v28 = (void *)sub_1B199B850(v20, v21);
    sub_1B1879CB8(a1, v28);
  }
  else
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Should not update VFXLight without CFXLight"), v12, v13, v14, v15, v16, v17, a9);
  }
}

void sub_1B199BAB8(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;

  v10 = sub_1B17C6244(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    if (a1)
    {
      v19 = v10;
      v20 = (void *)sub_1B199B39C(a1, v17, v18);
      sub_1B199B69C((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
      v27 = (void *)sub_1B199B850((int *)a1, v20);
      sub_1B1879CB8(v19, v27);
    }
    else
    {
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Should not update VFXLight without CFXLight"), v11, v12, v13, v14, v15, v16, a9);
    }
  }
}

void sub_1B199BB44(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  CFTypeRef v35;
  uint64_t v36;
  CFTypeRef v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _TtC3VFX23VFXSceneLightParameters *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  _TtC3VFX23VFXSceneLightParameters *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const __CFString *v67;

  if (sub_1B1841A40((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8))
  {
    v18 = sub_1B1841C84((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17);
    v26 = (void *)sub_1B184293C((uint64_t)a2, v19, v20, v21, v22, v23, v24, v25);
    v34 = sub_1B199BD04();
    *(_DWORD *)(v34 + 24) = 1;
    *(_QWORD *)(v34 + 32) = 5;
    if (a2)
      v35 = CFRetain(a2);
    else
      v35 = 0;
    *(_QWORD *)(v34 + 16) = v35;
    if (v18)
    {
      if ((sub_1B180B6F8(v18, v27, v28, v29, v30, v31, v32, v33) & 1) != 0)
      {
        v45 = sub_1B1809180(v18, v38, v39, v40, v41, v42, v43, v44);
        if (v45)
        {
          v46 = v45;
          v47 = [_TtC3VFX23VFXSceneLightParameters alloc];
          v50 = (void *)objc_msgSend_initWithType_(v47, v48, 5, v49);
          objc_msgSend_setIBLParametersWithUrl_texture_(v50, v51, v46, 0);
LABEL_16:
          *(_QWORD *)(v34 + 40) = v50;
          goto LABEL_17;
        }
        CFRelease((CFTypeRef)v34);
        v67 = CFSTR("Warning: VFXCore IBL Sync from image only supports URL");
      }
      else
      {
        CFRelease((CFTypeRef)v34);
        v67 = CFSTR("Warning: Invalid image");
      }
    }
    else
    {
      if (!v26)
      {
LABEL_17:
        sub_1B1879CB8(a1, (void *)v34);
        sub_1B199BD58(a1, a2);
        return;
      }
      if (sub_1B187A9C4(a1, v27, v28, v29, v30, v31, v32, v33))
      {
        v52 = [_TtC3VFX23VFXSceneLightParameters alloc];
        v50 = (void *)objc_msgSend_initWithType_(v52, v53, 5, v54);
        v58 = objc_msgSend_entityTag(v26, v55, v56, v57);
        objc_msgSend_setIBLParametersWithTag_(v50, v59, v58, v60);
        goto LABEL_16;
      }
      CFRelease((CFTypeRef)v34);
      v67 = CFSTR("Warning: Invalid VFXScene");
    }
    sub_1B17C4408(0, (uint64_t)v67, v61, v62, v63, v64, v65, v66, a9);
  }
  else
  {
    v36 = sub_1B199BD04();
    *(_DWORD *)(v36 + 24) = 2;
    *(_QWORD *)(v36 + 32) = 5;
    if (a2)
      v37 = CFRetain(a2);
    else
      v37 = 0;
    *(_QWORD *)(v36 + 16) = v37;
    sub_1B1879CB8(a1, (void *)v36);
  }
}

uint64_t sub_1B199BD04()
{
  uint64_t result;

  if (qword_1EEF66C70 != -1)
    dispatch_once(&qword_1EEF66C70, &unk_1E63D13F0);
  result = sub_1B179CB90(qword_1EEF66C68, 0xA0uLL);
  *(_QWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  return result;
}

void sub_1B199BD58(uint64_t a1, const void *a2)
{
  uint64_t v4;
  CFTypeRef v5;
  _TtC3VFX23VFXSceneLightParameters *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  int8x16_t v32;
  _OWORD *v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float v37;
  float v38;
  float32x4_t v39;
  float v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int8x16_t v45;
  int8x16_t v46;
  float v47;
  float32x2_t v48;
  int32x2_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x2_t v52;

  v4 = sub_1B199BD04();
  *(_DWORD *)(v4 + 24) = 3;
  *(_QWORD *)(v4 + 32) = 5;
  if (a2)
    v5 = CFRetain(a2);
  else
    v5 = 0;
  *(_QWORD *)(v4 + 16) = v5;
  v6 = [_TtC3VFX23VFXSceneLightParameters alloc];
  v9 = (void *)objc_msgSend_initWithType_(v6, v7, 5, v8);
  *(float *)&v17 = sub_1B1841E14((uint64_t)a2, v10, v11, v12, v13, v14, v15, v16);
  objc_msgSend_setIntensity_(v9, v18, v19, v20, v17);
  v28 = sub_1B1842B0C((uint64_t)a2, v21, v22, v23, v24, v25, v26, v27);
  v33 = (_OWORD *)MEMORY[0x1E0C83FF0];
  if (v28)
    v33 = (_OWORD *)v28;
  v34 = *(int32x4_t *)v33;
  v35 = *((float32x4_t *)v33 + 1);
  v36 = *((float32x4_t *)v33 + 2);
  v32.i32[0] = HIDWORD(*((_QWORD *)v33 + 2));
  v37 = COERCE_FLOAT(*((_QWORD *)v33 + 5));
  v38 = (float)(COERCE_FLOAT(*v33) + *(float *)v32.i32) + v37;
  if (v38 > 0.0)
  {
    v39 = (float32x4_t)vzip2q_s32((int32x4_t)v35, vuzp1q_s32((int32x4_t)v35, (int32x4_t)v36));
    v39.i32[2] = HIDWORD(*(_QWORD *)v33);
    v40 = sqrtf(v38 + 1.0);
    v41 = (float32x4_t)vtrn2q_s32((int32x4_t)v36, vzip2q_s32((int32x4_t)v36, v34));
    v41.i32[2] = v33[1];
    v43 = vsubq_f32(v39, v41);
    v39.f32[3] = v40;
    v41.f32[3] = v40;
    v42 = vmulq_f32(v39, v41);
    v43.i32[3] = v42.i32[3];
LABEL_17:
    v42.f32[0] = 0.5 / v40;
    v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 0);
    goto LABEL_18;
  }
  if (*(float *)v34.i32 < *(float *)v32.i32 || *(float *)v34.i32 < v37)
  {
    if (*(float *)v32.i32 <= v37)
    {
      v40 = sqrtf((float)((float)(v37 + 1.0) - *(float *)v34.i32) - *(float *)v32.i32);
      *(float32x2_t *)v43.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL)), *(float32x2_t *)v36.f32);
      v51 = *(int32x4_t *)v33;
      *(float *)v51.i32 = v40;
      v52 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 0);
      *(float32x2_t *)v42.f32 = vsub_f32(*(float32x2_t *)v34.i8, v52);
      v52.f32[0] = v40;
      v52.i32[0] = vmul_f32(*(float32x2_t *)v51.i8, v52).u32[0];
      v52.i32[1] = v42.i32[1];
      *(float32x2_t *)&v43.u32[2] = v52;
      goto LABEL_17;
    }
    v47 = sqrtf((float)((float)(*(float *)v32.i32 + 1.0) - *(float *)v34.i32) - v37);
    *(int32x2_t *)v32.i8 = vdup_laneq_s32((int32x4_t)v35, 2);
    v45 = v32;
    *(float *)v45.i32 = v47;
    v45.i32[0] = vmul_f32(*(float32x2_t *)v45.i8, (float32x2_t)__PAIR64__(v36.u32[1], LODWORD(v47))).u32[0];
    v45.i32[1] = vadd_f32(*(float32x2_t *)&v32, *(float32x2_t *)&v36).i32[1];
    v46 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.i8, 1), v35);
    v49 = (int32x2_t)vsubq_f32(v36, (float32x4_t)vdupq_laneq_s32(v34, 2)).u64[0];
    v50 = (float32x4_t)vextq_s8(vextq_s8(v46, v46, 4uLL), v45, 0xCuLL);
    v50.i32[3] = v49.i32[0];
  }
  else
  {
    v47 = sqrtf((float)((float)(*(float *)v34.i32 + 1.0) - *(float *)v32.i32) - v37);
    v48 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.f32, 0);
    v50.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v34.u32[1], LODWORD(v47)), (float32x2_t)__PAIR64__(v48.u32[1], LODWORD(v47))).u32[0];
    v50.i32[1] = vadd_f32(*(float32x2_t *)&v34, v48).i32[1];
    v49.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), *(float32x2_t *)v36.f32).u32[0];
    v49.i32[1] = vsub_f32((float32x2_t)vdup_laneq_s32(*(int32x4_t *)&v35, 2), *(float32x2_t *)&v36).i32[1];
    *(int32x2_t *)&v50.u32[2] = v49;
  }
  *(float *)v49.i32 = 0.5 / v47;
  v43 = (float32x4_t)vdupq_lane_s32(v49, 0);
LABEL_18:
  objc_msgSend_setOrientation_(v9, v29, v30, v31, *(double *)vmulq_f32(v43, v50).i64);
  *(_QWORD *)(v4 + 40) = v9;
  sub_1B1879CB8(a1, (void *)v4);
  CFRelease((CFTypeRef)v4);
}

void sub_1B199BF80(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }

}

CFStringRef sub_1B199BFB0(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXVFXLightUpdateCommand>"));
}

CFStringRef sub_1B199BFD0(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXVFXLightUpdateCommand>"));
}

void radix_sort_float_with_input_indices_0(uint64_t a1, uint64_t a2)
{
  int *v2;
  int *v3;
  int *v4;
  int *v5;
  unsigned int v6;
  unsigned int v7;
  int *v8;
  int *v9;
  int *v10;
  int *v11;
  uint64_t v12;
  int *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  int *v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int *v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t i;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int *v35;
  int v36;
  unsigned int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42[6144];
  uint64_t v43;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;
  v43 = *MEMORY[0x1E0C80C00];
  bzero(v42, 0x6000uLL);
  if (v3)
  {
    if (v7)
    {
      v12 = v7;
      v13 = v3;
      do
      {
        v14 = *v13++;
        v15 = ((v11[v14] >> 31) | 0x80000000) ^ v11[v14];
        ++v42[v15 & 0x7FF];
        ++v42[((v15 >> 11) & 0x7FF) + 2048];
        ++v42[(v15 >> 22) + 4096];
        --v12;
      }
      while (v12);
    }
  }
  else if (v7)
  {
    v16 = v7;
    v17 = v11;
    do
    {
      v18 = *v17++;
      v19 = ((v18 >> 31) | 0x80000000) ^ v18;
      ++v42[v19 & 0x7FF];
      ++v42[((v19 >> 11) & 0x7FF) + 2048];
      ++v42[(v19 >> 22) + 4096];
      --v16;
    }
    while (v16);
  }
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  do
  {
    v24 = &v42[v20];
    v25 = v42[v20];
    *v24 = v21;
    v21 += v25;
    v26 = v42[v20 + 2048];
    v24[2048] = v22;
    v22 += v26;
    v27 = v42[v20 + 4096];
    v24[4096] = v23;
    v23 += v27;
    ++v20;
  }
  while (v20 != 2048);
  *v9 = 666;
  if (v3)
  {
    if (!v7)
      return;
    v28 = v7;
    do
    {
      v29 = *v3++;
      v30 = v42[((unsigned __int16)v11[v29] ^ (unsigned __int16)(v11[v29] >> 31)) & 0x7FF];
      v42[((unsigned __int16)v11[v29] ^ (unsigned __int16)(v11[v29] >> 31)) & 0x7FF] = v30 + 1;
      v9[v30] = v29;
      --v28;
    }
    while (v28);
  }
  else
  {
    if (!v7)
      return;
    for (i = 0; i != v7; v9[v32] = i++)
    {
      v32 = v42[((unsigned __int16)v11[i] ^ (unsigned __int16)(v11[i] >> 31)) & 0x7FF];
      v42[((unsigned __int16)v11[i] ^ (unsigned __int16)(v11[i] >> 31)) & 0x7FF] = v32 + 1;
    }
  }
  v33 = v7;
  v34 = v7;
  v35 = v9;
  do
  {
    v36 = *v35++;
    v37 = ((v11[v36] ^ (v11[v36] >> 31)) >> 11) & 0x7FF;
    v38 = v42[v37 + 2048];
    v42[v37 + 2048] = v38 + 1;
    v5[v38] = v36;
    --v34;
  }
  while (v34);
  do
  {
    v39 = *v5++;
    v40 = (((v11[v39] >> 31) | 0x80000000) ^ v11[v39]) >> 22;
    v41 = v42[v40 + 4096];
    v42[v40 + 4096] = v41 + 1;
    v9[v41] = v39;
    --v33;
  }
  while (v33);
}

void radix_sort_float(uint64_t a1, uint64_t a2)
{
  radix_sort_float_with_input_indices_0(a1, a2);
}

void radix_sort_float_destructive(uint64_t a1, uint64_t a2)
{
  int *v2;
  int *v3;
  unsigned int v4;
  unsigned int v5;
  int *v6;
  int *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  unsigned int v33;
  unint64_t v34;
  uint64_t v35;
  int v36;
  unsigned int v37[6144];
  uint64_t v38;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v38 = *MEMORY[0x1E0C80C00];
  v10 = v4;
  bzero(v37, 0x6000uLL);
  if (v5)
  {
    v11 = v10;
    v12 = v9;
    do
    {
      v13 = *v12++;
      v14 = ((v13 >> 31) | 0x80000000) ^ v13;
      ++v37[v14 & 0x7FF];
      ++v37[((v14 >> 11) & 0x7FF) + 2048];
      ++v37[(v14 >> 22) + 4096];
      --v11;
    }
    while (v11);
  }
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = (unsigned int *)&v3[v5];
  do
  {
    v20 = &v37[v15];
    v21 = v37[v15];
    *v20 = v16;
    v16 += v21;
    v22 = v37[v15 + 2048];
    v20[2048] = v18;
    v18 += v22;
    v23 = v37[v15 + 4096];
    v20[4096] = v17;
    v17 += v23;
    ++v15;
  }
  while (v15 != 2048);
  *v7 = 666;
  if (v5)
  {
    v24 = 0;
    do
    {
      v25 = ((v9[v24] >> 31) | 0x80000000) ^ v9[v24];
      v26 = v37[v25 & 0x7FF];
      v37[v25 & 0x7FF] = v26 + 1;
      v7[v26] = v24;
      v19[v26] = v25;
      ++v24;
    }
    while (v10 != v24);
    v27 = v10;
    v28 = v7;
    do
    {
      v29 = ((unint64_t)*v19 >> 11) & 0x7FF;
      v30 = v37[v29 + 2048];
      v37[v29 + 2048] = v30 + 1;
      v31 = *v28++;
      v3[v30] = v31;
      v32 = *v19++;
      v9[v30] = v32;
      --v27;
    }
    while (v27);
    do
    {
      v33 = *v9++;
      v34 = ((unint64_t)v33 >> 20) & 0xFFC;
      v35 = *(unsigned int *)((char *)&v37[4096] + v34);
      *(unsigned int *)((char *)&v37[4096] + v34) = v35 + 1;
      v36 = *v3++;
      v7[v35] = v36;
      --v10;
    }
    while (v10);
  }
}

uint64_t reverse_order(uint64_t result, uint64_t a2, int a3)
{
  uint64_t i;

  if (a3)
  {
    for (i = 0; i != a3; ++i)
      *(_DWORD *)(result + 4 * *(unsigned int *)(a2 + 4 * i)) = i;
  }
  return result;
}

char *ordered_memcpy(char *result, uint64_t a2, uint64_t a3, size_t __n, unint64_t a5)
{
  char *v9;
  unint64_t v10;
  unsigned int v11;

  if (a5)
  {
    v9 = result;
    v10 = 0;
    v11 = 1;
    do
    {
      result = (char *)memcpy(&v9[v10 * __n], (const void *)(a2 + *(unsigned int *)(a3 + 4 * v10) * __n), __n);
      v10 = v11++;
    }
    while (v10 < a5);
  }
  return result;
}

void CGBitmapContext_fixIncorrectPremultiply(CGContext *a1)
{
  unsigned int Width;
  int Height;
  unsigned int *Data;
  unsigned int *v5;
  size_t BitsPerComponent;
  size_t v7;
  size_t BytesPerRow;
  size_t v9;
  uint64_t v10;
  uint32x4_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int *v42;
  unint64_t v43;
  int v44;
  int32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  _BYTE v66[256];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  Width = CGBitmapContextGetWidth(a1);
  Height = CGBitmapContextGetHeight(a1);
  Data = (unsigned int *)CGBitmapContextGetData(a1);
  if (Data)
  {
    v5 = Data;
    BitsPerComponent = CGBitmapContextGetBitsPerComponent(a1);
    v7 = CGBitmapContextGetBitsPerPixel(a1) / BitsPerComponent * BitsPerComponent;
    BytesPerRow = CGBitmapContextGetBytesPerRow(a1);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0x20)
    {
      v9 = BytesPerRow;
      v10 = 0;
      v11 = (uint32x4_t)xmmword_1B2240BC0;
      v12 = (uint32x4_t)xmmword_1B2240BD0;
      v13 = (uint32x4_t)xmmword_1B2240BA0;
      v14 = (uint32x4_t)xmmword_1B2240BB0;
      v46 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        v47 = (int32x4_t)v14;
        v48 = (int32x4_t)v12;
        v45 = (int32x4_t)v13;
        v49 = (int32x4_t)v11;
        v50 = vdivq_f32(vcvtq_f32_u32(v12), v46);
        v53 = vdivq_f32(vcvtq_f32_u32(v11), v46);
        v54 = vdivq_f32(vcvtq_f32_u32(v13), v46);
        v58 = vdivq_f32(vcvtq_f32_u32(v14), v46);
        v62 = powf(v58.f32[1], 0.45455);
        v15.f32[0] = powf(v58.f32[0], 0.45455);
        v15.f32[1] = v62;
        v63 = v15;
        v16 = powf(v58.f32[2], 0.45455);
        v17 = v63;
        v17.f32[2] = v16;
        v64 = v17;
        v18 = powf(v58.f32[3], 0.45455);
        v19 = v64;
        v19.f32[3] = v18;
        v65 = v19;
        v58.i32[0] = powf(v54.f32[1], 0.45455);
        v20.f32[0] = powf(v54.f32[0], 0.45455);
        v20.i32[1] = v58.i32[0];
        v59 = v20;
        v21 = powf(v54.f32[2], 0.45455);
        v22 = v59;
        v22.f32[2] = v21;
        v60 = v22;
        v23 = powf(v54.f32[3], 0.45455);
        v24 = v60;
        v24.f32[3] = v23;
        v61 = v24;
        v54.i32[0] = powf(v50.f32[1], 0.45455);
        v25.f32[0] = powf(v50.f32[0], 0.45455);
        v25.i32[1] = v54.i32[0];
        v55 = v25;
        v26 = powf(v50.f32[2], 0.45455);
        v27 = v55;
        v27.f32[2] = v26;
        v56 = v27;
        v28 = powf(v50.f32[3], 0.45455);
        v29 = v56;
        v29.f32[3] = v28;
        v57 = v29;
        v50.i32[0] = powf(v53.f32[1], 0.45455);
        v30.f32[0] = powf(v53.f32[0], 0.45455);
        v30.i32[1] = v50.i32[0];
        v51 = v30;
        v31 = powf(v53.f32[2], 0.45455);
        v32 = v51;
        v32.f32[2] = v31;
        v52 = v32;
        v33 = powf(v53.f32[3], 0.45455);
        v34 = v52;
        v34.f32[3] = v33;
        v35.i64[0] = 0x3F0000003F000000;
        v35.i64[1] = 0x3F0000003F000000;
        v36 = vmlaq_f32(v35, v46, v34);
        v34.i64[0] = 0x3F0000003F000000;
        v34.i64[1] = 0x3F0000003F000000;
        v37.i64[0] = 0x3F0000003F000000;
        v37.i64[1] = 0x3F0000003F000000;
        v38.i64[0] = 0x3F0000003F000000;
        v38.i64[1] = 0x3F0000003F000000;
        *(int16x4_t *)v38.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v38, v46, v65)));
        *(int16x4_t *)&v38.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v37, v46, v61)));
        *(int16x4_t *)v34.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v34, v46, v57)));
        *(int16x4_t *)&v34.u32[2] = vmovn_s32(vcvtq_s32_f32(v36));
        *(int8x16_t *)&v66[v10] = vuzp1q_s8((int8x16_t)v38, (int8x16_t)v34);
        v10 += 16;
        v39.i64[0] = 0x1000000010;
        v39.i64[1] = 0x1000000010;
        v14 = (uint32x4_t)vaddq_s32(v47, v39);
        v13 = (uint32x4_t)vaddq_s32(v45, v39);
        v12 = (uint32x4_t)vaddq_s32(v48, v39);
        v11 = (uint32x4_t)vaddq_s32(v49, v39);
      }
      while (v10 != 256);
      if (Height)
      {
        v40 = 0;
        do
        {
          v41 = Width;
          v42 = v5;
          if (Width)
          {
            do
            {
              v43 = *v42;
              if (HIBYTE(*v42))
              {
                if (HIBYTE(*v42) != 255)
                {
                  v44 = v66[v43 >> 24];
                  *v42 = *v42 & 0xFF000000 | (*v42 * v44 / BYTE3(v43)) | (unsigned __int16)((BYTE1(*v42) * v44 / BYTE3(v43)) << 8) | ((BYTE2(*v42) * v44 / BYTE3(v43)) << 16);
                }
              }
              ++v42;
              --v41;
            }
            while (v41);
          }
          ++v40;
          v5 = (unsigned int *)((char *)v5 + v9);
        }
        while (v40 != Height);
      }
    }
  }
}

void CGBitmapContext_gammaizeAlpha(CGContext *a1)
{
  unsigned int Width;
  int Height;
  char *Data;
  char *v5;
  size_t BitsPerComponent;
  size_t v7;
  size_t BytesPerRow;
  size_t v9;
  uint64_t v10;
  uint32x4_t v11;
  uint32x4_t v12;
  uint32x4_t v13;
  uint32x4_t v14;
  float32x4_t v15;
  float v16;
  float32x4_t v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  float v31;
  float32x4_t v32;
  float v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  _BYTE v64[256];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  Width = CGBitmapContextGetWidth(a1);
  Height = CGBitmapContextGetHeight(a1);
  Data = (char *)CGBitmapContextGetData(a1);
  if (Data)
  {
    v5 = Data;
    BitsPerComponent = CGBitmapContextGetBitsPerComponent(a1);
    v7 = CGBitmapContextGetBitsPerPixel(a1) / BitsPerComponent * BitsPerComponent;
    BytesPerRow = CGBitmapContextGetBytesPerRow(a1);
    if ((v7 & 0xFFFFFFFFFFFFFFF8) == 0x20)
    {
      v9 = BytesPerRow;
      v10 = 0;
      v11 = (uint32x4_t)xmmword_1B2240BC0;
      v12 = (uint32x4_t)xmmword_1B2240BD0;
      v13 = (uint32x4_t)xmmword_1B2240BA0;
      v14 = (uint32x4_t)xmmword_1B2240BB0;
      v44 = (float32x4_t)vdupq_n_s32(0x437F0000u);
      do
      {
        v45 = (int32x4_t)v14;
        v46 = (int32x4_t)v12;
        v43 = (int32x4_t)v13;
        v47 = (int32x4_t)v11;
        v48 = vdivq_f32(vcvtq_f32_u32(v12), v44);
        v51 = vdivq_f32(vcvtq_f32_u32(v11), v44);
        v52 = vdivq_f32(vcvtq_f32_u32(v13), v44);
        v56 = vdivq_f32(vcvtq_f32_u32(v14), v44);
        v60 = powf(v56.f32[1], 2.2);
        v15.f32[0] = powf(v56.f32[0], 2.2);
        v15.f32[1] = v60;
        v61 = v15;
        v16 = powf(v56.f32[2], 2.2);
        v17 = v61;
        v17.f32[2] = v16;
        v62 = v17;
        v18 = powf(v56.f32[3], 2.2);
        v19 = v62;
        v19.f32[3] = v18;
        v63 = v19;
        v56.i32[0] = powf(v52.f32[1], 2.2);
        v20.f32[0] = powf(v52.f32[0], 2.2);
        v20.i32[1] = v56.i32[0];
        v57 = v20;
        v21 = powf(v52.f32[2], 2.2);
        v22 = v57;
        v22.f32[2] = v21;
        v58 = v22;
        v23 = powf(v52.f32[3], 2.2);
        v24 = v58;
        v24.f32[3] = v23;
        v59 = v24;
        v52.i32[0] = powf(v48.f32[1], 2.2);
        v25.f32[0] = powf(v48.f32[0], 2.2);
        v25.i32[1] = v52.i32[0];
        v53 = v25;
        v26 = powf(v48.f32[2], 2.2);
        v27 = v53;
        v27.f32[2] = v26;
        v54 = v27;
        v28 = powf(v48.f32[3], 2.2);
        v29 = v54;
        v29.f32[3] = v28;
        v55 = v29;
        v48.i32[0] = powf(v51.f32[1], 2.2);
        v30.f32[0] = powf(v51.f32[0], 2.2);
        v30.i32[1] = v48.i32[0];
        v49 = v30;
        v31 = powf(v51.f32[2], 2.2);
        v32 = v49;
        v32.f32[2] = v31;
        v50 = v32;
        v33 = powf(v51.f32[3], 2.2);
        v34 = v50;
        v34.f32[3] = v33;
        v35.i64[0] = 0x3F0000003F000000;
        v35.i64[1] = 0x3F0000003F000000;
        v36 = vmlaq_f32(v35, v44, v34);
        v34.i64[0] = 0x3F0000003F000000;
        v34.i64[1] = 0x3F0000003F000000;
        v37.i64[0] = 0x3F0000003F000000;
        v37.i64[1] = 0x3F0000003F000000;
        v38.i64[0] = 0x3F0000003F000000;
        v38.i64[1] = 0x3F0000003F000000;
        *(int16x4_t *)v38.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v38, v44, v63)));
        *(int16x4_t *)&v38.u32[2] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v37, v44, v59)));
        *(int16x4_t *)v34.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v34, v44, v55)));
        *(int16x4_t *)&v34.u32[2] = vmovn_s32(vcvtq_s32_f32(v36));
        *(int8x16_t *)&v64[v10] = vuzp1q_s8((int8x16_t)v38, (int8x16_t)v34);
        v10 += 16;
        v39.i64[0] = 0x1000000010;
        v39.i64[1] = 0x1000000010;
        v14 = (uint32x4_t)vaddq_s32(v45, v39);
        v13 = (uint32x4_t)vaddq_s32(v43, v39);
        v12 = (uint32x4_t)vaddq_s32(v46, v39);
        v11 = (uint32x4_t)vaddq_s32(v47, v39);
      }
      while (v10 != 256);
      if (Height)
      {
        v40 = 0;
        do
        {
          v41 = Width;
          v42 = v5;
          if (Width)
          {
            do
            {
              v42[3] = v64[v42[3]];
              v42 += 4;
              --v41;
            }
            while (v41);
          }
          ++v40;
          v5 += v9;
        }
        while (v40 != Height);
      }
    }
  }
}

uint64_t MurmurHash2(unsigned __int8 *a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  int v5;
  BOOL v6;

  v3 = a3 ^ a2;
  if (a2 < 4)
  {
    v5 = a2;
  }
  else
  {
    do
    {
      v4 = *(_DWORD *)a1;
      a1 += 4;
      v3 = (1540483477 * ((1540483477 * v4) ^ ((1540483477 * v4) >> 24))) ^ (1540483477 * v3);
      v5 = a2 - 4;
      v6 = a2 > 7;
      a2 -= 4;
    }
    while (v6);
  }
  switch(v5)
  {
    case 1:
      goto LABEL_10;
    case 2:
LABEL_9:
      v3 ^= a1[1] << 8;
LABEL_10:
      v3 = 1540483477 * (v3 ^ *a1);
      return (1540483477 * (v3 ^ (v3 >> 13))) ^ ((1540483477 * (v3 ^ (v3 >> 13))) >> 15);
    case 3:
      v3 ^= a1[2] << 16;
      goto LABEL_9;
  }
  return (1540483477 * (v3 ^ (v3 >> 13))) ^ ((1540483477 * (v3 ^ (v3 >> 13))) >> 15);
}

uint64_t memset_pattern4_nocache(uint64_t result, int *a2, unint64_t a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 4)
  {
    v3 = 0;
    v4 = *a2;
    do
      *(_DWORD *)(result + 4 * v3++) = v4;
    while (a3 >> 2 > v3);
  }
  return result;
}

uint64_t memset_pattern8_nocache(uint64_t result, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 >= 8)
  {
    v3 = 0;
    v4 = *a2;
    do
      *(_QWORD *)(result + 8 * v3++) = v4;
    while (a3 >> 3 > v3);
  }
  return result;
}

void memset_pattern16_nocache(void *__b, const void *__pattern16, size_t __len)
{
  uint64_t v3;
  __int128 v4;

  if ((__b & 0xF) != 0)
  {
    memset_pattern16(__b, __pattern16, __len);
  }
  else if (__len >= 0x10)
  {
    v3 = 0;
    v4 = *(_OWORD *)__pattern16;
    do
      *((_OWORD *)__b + v3++) = v4;
    while (__len >> 4 > v3);
  }
}

uint64_t memswap_pattern4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 4)
  {
    v3 = 0;
    do
    {
      v4 = *(_DWORD *)(a2 + 4 * v3);
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(result + 4 * v3);
      *(_DWORD *)(result + 4 * v3++) = v4;
    }
    while (a3 >> 2 > v3);
  }
  return result;
}

uint64_t memswap_pattern8(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (a3 >= 8)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(a2 + 8 * v3);
      *(_QWORD *)(a2 + 8 * v3) = *(_QWORD *)(result + 8 * v3);
      *(_QWORD *)(result + 8 * v3++) = v4;
    }
    while (a3 >> 3 > v3);
  }
  return result;
}

__n128 memswap_pattern16(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  __n128 result;

  if (a3 >= 0x10)
  {
    v3 = 0;
    do
    {
      result = *(__n128 *)(a2 + 16 * v3);
      *(_OWORD *)(a2 + 16 * v3) = *(_OWORD *)(a1 + 16 * v3);
      *(__n128 *)(a1 + 16 * v3++) = result;
    }
    while (a3 >> 4 > v3);
  }
  return result;
}

uint64_t __debugPointer(const char *a1, const void *a2)
{
  return printf("%s %p\n", a1, a2);
}

uint64_t ecs_sysctl_get_int_value(const char *a1)
{
  int v1;
  int v2;
  size_t v4;
  int v5;

  v5 = 0;
  v4 = 4;
  v1 = sysctlbyname(a1, &v5, &v4, 0, 0);
  v2 = v5;
  if (v1)
    return 0;
  return v2;
}

id sub_1B199CEAC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t i;
  uint64_t v8;
  const char *v9;
  id result;

  for (i = 0; i != 6; ++i)
  {
    v8 = objc_msgSend_pixelFormat(a1, a2, a3, a4);
    result = (id)objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(a1, v9, v8, 2, a2, 1, i, 1);
    *(_QWORD *)(a3 + 8 * i) = result;
  }
  return result;
}

uint64_t sub_1B199CF18(void *a1, void *a2, uint64_t a3, uint64_t a4, const __CFData *a5, uint64_t a6)
{
  unsigned int v8;
  unsigned int v9;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  const UInt8 *BytePtr;
  const char *v25;
  _QWORD v27[6];

  v8 = a4;
  v9 = a3;
  v12 = objc_msgSend_width(a2, (const char *)a2, a3, a4);
  v16 = objc_msgSend_height(a2, v13, v14, v15);
  v20 = objc_msgSend_pixelFormat(a1, v17, v18, v19);
  v21 = sub_1B189D6D0();
  if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0xA0)
    v22 = 0;
  else
    v22 = (v21 >> 3) * v12;
  if (v8)
  {
    v23 = v8;
    do
    {
      if (v12 >> 1 <= 1)
        v12 = 1;
      else
        v12 >>= 1;
      if (v16 >> 1 <= 1)
        v16 = 1;
      else
        v16 >>= 1;
      if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0xA0)
      {
        if (a6 && *(_BYTE *)(a6 + 7))
          v22 = ((v12 + (unint64_t)*(unsigned __int8 *)(a6 + 7) - 1)
               / *(unsigned __int8 *)(a6 + 7)
               * *(unsigned __int8 *)(a6 + 4)) >> 3;
        else
          v22 = v12 * (v21 >> 3);
      }
      --v23;
    }
    while (v23);
  }
  BytePtr = CFDataGetBytePtr(a5);
  memset(v27, 0, 24);
  v27[3] = v12;
  v27[4] = v16;
  v27[5] = 1;
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(a1, v25, (uint64_t)v27, v8, v9, BytePtr, v22, 0);
}

unint64_t sub_1B199D044(void *a1, void *a2, unsigned int a3, CFArrayRef theArray, uint64_t a5)
{
  CFIndex Count;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t result;
  CFIndex v24;
  unint64_t v25;
  const __CFData *ValueAtIndex;
  const char *v27;
  const UInt8 *BytePtr;
  unint64_t v29;
  unint64_t v30;
  _QWORD v31[6];

  Count = CFArrayGetCount(theArray);
  v14 = objc_msgSend_width(a2, v11, v12, v13);
  v18 = objc_msgSend_height(a2, v15, v16, v17);
  v22 = objc_msgSend_pixelFormat(a1, v19, v20, v21);
  result = sub_1B189D6D0();
  if (Count >= 1)
  {
    v24 = 0;
    v30 = result >> 3;
    v25 = v22 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, v24);
      BytePtr = CFDataGetBytePtr(ValueAtIndex);
      if (v25 == 160)
      {
        v29 = 0;
      }
      else if (a5 && *(_BYTE *)(a5 + 7))
      {
        v29 = ((v14 + *(unsigned __int8 *)(a5 + 7) - 1)
             / *(unsigned __int8 *)(a5 + 7)
             * (unint64_t)*(unsigned __int8 *)(a5 + 4)) >> 3;
      }
      else
      {
        v29 = v14 * v30;
      }
      memset(v31, 0, 24);
      v31[3] = v14;
      v31[4] = v18;
      v31[5] = 1;
      result = objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(a1, v27, (uint64_t)v31, v24, a3, BytePtr, v29, 0);
      if (v14 >> 1 <= 1)
        v14 = 1;
      else
        v14 >>= 1;
      if (v18 >> 1 <= 1)
        v18 = 1;
      else
        v18 >>= 1;
      ++v24;
    }
    while (Count != v24);
  }
  return result;
}

void sub_1B199D54C(void **a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t i;
  void *v43;
  _QWORD v44[3];
  _QWORD v45[3];
  _QWORD v46[3];

  v10 = objc_msgSend_width(a2, (const char *)a2, a3, (uint64_t)a4);
  v14 = objc_msgSend_height(a2, v11, v12, v13);
  v18 = objc_msgSend_depth(a2, v15, v16, v17);
  v22 = objc_msgSend_arrayLength(a2, v19, v20, v21);
  if ((unint64_t)(objc_msgSend_textureType(a2, v23, v24, v25) - 5) >= 2)
    v29 = v22;
  else
    v29 = 6 * v22;
  v30 = objc_msgSend_arrayLength(a4, v26, v27, v28);
  if ((unint64_t)(objc_msgSend_textureType(a4, v31, v32, v33) - 5) >= 2)
    v41 = v30;
  else
    v41 = 6 * v30;
  if (v29 != v41)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. slice count must match to copy"), v35, v36, v37, v38, v39, v40, (uint64_t)"sliceCount == VFXMTLComputeTextureSliceCount(dstTexture)");
  if (v29)
  {
    for (i = 0; i != v29; ++i)
    {
      v43 = *a1;
      v45[2] = v18;
      memset(v46, 0, sizeof(v46));
      v45[0] = v10;
      v45[1] = v14;
      memset(v44, 0, sizeof(v44));
      objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(v43, v34, (uint64_t)a2, i, a3, v46, v45, a4, i, a5, v44);
    }
  }
}

uint64_t sub_1B199DE7C(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  __int128 v4;
  _OWORD v6[3];

  v3 = *(void **)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  v6[2] = *(_OWORD *)(a1 + 72);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v3, a2, (uint64_t)v6, 0, a2, a3, *(unsigned int *)(a1 + 96), *(_QWORD *)(a1 + 88) * *(unsigned int *)(a1 + 96));
}

uint64_t sub_1B199DED0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  _OWORD v13[2];
  __int128 v14;

  v6 = *(_OWORD *)(a1 + 64);
  v13[0] = *(_OWORD *)(a1 + 48);
  v13[1] = v6;
  v14 = *(_OWORD *)(a1 + 80);
  v7 = a2;
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(void **)(a1 + 32);
  v10 = objc_msgSend_height(*(void **)(a1 + 40), a2, a3, a4, v13[0], v6, v14);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v9, v11, (uint64_t)v13, 0, v7, a3, v8, *(_QWORD *)(a1 + 96) * v10);
}

uint64_t sub_1B199DF4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = a2;
  v7 = objc_msgSend_width(*(void **)(a1 + 32), a2, a3, a4);
  v11 = objc_msgSend_height(*(void **)(a1 + 32), v8, v9, v10);
  v20[0] = 0;
  v20[1] = 0;
  v21 = v6;
  v22 = v7;
  v23 = v11;
  v24 = 1;
  v13 = *(void **)(a1 + 40);
  v12 = *(_QWORD *)(a1 + 48);
  v17 = objc_msgSend_height(*(void **)(a1 + 32), v14, v15, v16, 0, 0, v21, v22, v11, 1);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v13, v18, (uint64_t)v20, 0, 0, a3, v12, *(_QWORD *)(a1 + 48) * v17);
}

uint64_t sub_1B199DFD4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  _OWORD v13[2];
  __int128 v14;

  v6 = *(_OWORD *)(a1 + 64);
  v13[0] = *(_OWORD *)(a1 + 48);
  v13[1] = v6;
  v14 = *(_OWORD *)(a1 + 80);
  v7 = a2;
  v8 = *(_QWORD *)(a1 + 96);
  v9 = *(void **)(a1 + 32);
  v10 = objc_msgSend_height(*(void **)(a1 + 40), a2, a3, a4, v13[0], v6, v14);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v9, v11, (uint64_t)v13, 0, v7, a3, v8, *(_QWORD *)(a1 + 96) * v10);
}

void sub_1B199E4B0(void **a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  BOOL IsCube;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t i;
  void *v87;
  void **v88;
  _QWORD v89[3];
  _QWORD v90[3];
  _QWORD v91[3];

  v7 = objc_msgSend_width(a2, (const char *)a2, (uint64_t)a3, a4);
  if (v7 != objc_msgSend_width(a3, v8, v9, v10))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. width must match to copy"), v12, v13, v14, v15, v16, v17, (uint64_t)"srcTexture.width == dstTexture.width");
  v18 = objc_msgSend_height(a2, v11, v12, v13);
  if (v18 != objc_msgSend_height(a3, v19, v20, v21))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. height must match to copy"), v23, v24, v25, v26, v27, v28, (uint64_t)"srcTexture.height == dstTexture.height");
  v29 = objc_msgSend_depth(a2, v22, v23, v24);
  if (v29 != objc_msgSend_depth(a3, v30, v31, v32))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. depth must match to copy"), v34, v35, v36, v37, v38, v39, (uint64_t)"srcTexture.depth == dstTexture.depth");
  v88 = a1;
  v40 = objc_msgSend_textureType(a2, v33, v34, v35);
  IsCube = VFXMTLTextureTypeIsCube(v40);
  v45 = objc_msgSend_mipmapLevelCount(a2, v42, v43, v44);
  v49 = objc_msgSend_mipmapLevelCount(a3, v46, v47, v48);
  if (v45 >= v49)
    v53 = v49;
  else
    v53 = v45;
  v54 = objc_msgSend_arrayLength(a2, v50, v51, v52);
  if ((unint64_t)(objc_msgSend_textureType(a2, v55, v56, v57) - 5) >= 2)
    v61 = v54;
  else
    v61 = 6 * v54;
  v62 = objc_msgSend_arrayLength(a3, v58, v59, v60);
  if ((unint64_t)(objc_msgSend_textureType(a3, v63, v64, v65) - 5) >= 2)
    v73 = v62;
  else
    v73 = 6 * v62;
  if (v61 != v73)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. slice count must match to copy"), v67, v68, v69, v70, v71, v72, (uint64_t)"sliceCount == VFXMTLComputeTextureSliceCount(dstTexture)");
  if (v61)
  {
    v74 = 0;
    v75 = IsCube;
    do
    {
      v76 = objc_msgSend_width(a2, v66, v67, v68);
      v80 = objc_msgSend_height(a2, v77, v78, v79);
      v84 = objc_msgSend_depth(a2, v81, v82, v83);
      if (v53)
      {
        v85 = v84;
        for (i = 0; i != v53; ++i)
        {
          v87 = *v88;
          v90[2] = v85;
          memset(v91, 0, sizeof(v91));
          v90[0] = v76;
          v90[1] = v80;
          memset(v89, 0, sizeof(v89));
          objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(v87, v66, (uint64_t)a2, v74, i, v91, v90, a3, v74, i, v89);
          v76 >>= 1;
          v80 >>= 1;
          v85 >>= v75;
        }
      }
      ++v74;
    }
    while (v74 != v61);
  }
}

void sub_1B199FAD0(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B199FB54(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_1B19A0510(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  _QWORD v9[5];

  if (qword_1EEF66C80 != -1)
    dispatch_once(&qword_1EEF66C80, &unk_1E63DA410);
  v5 = (void *)objc_msgSend_clone((void *)qword_1EEF66C78, a2, a3, a4);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1B19A51D4;
  v9[3] = &unk_1E63D80A0;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B19A05A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  _QWORD v9[5];

  if (qword_1EEF66C90 != -1)
    dispatch_once(&qword_1EEF66C90, &unk_1E63DA430);
  v5 = (void *)objc_msgSend_clone((void *)qword_1EEF66C88, a2, a3, a4);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1B19A5360;
  v9[3] = &unk_1E63D80A0;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B19A0640(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  _QWORD v9[5];

  if (qword_1EEF66CA0 != -1)
    dispatch_once(&qword_1EEF66CA0, &unk_1E63DA450);
  v5 = (void *)objc_msgSend_clone((void *)qword_1EEF66C98, a2, a3, a4);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1B19A5518;
  v9[3] = &unk_1E63D80A0;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B19A06D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  _QWORD v9[5];

  if (qword_1EEF66CB0 != -1)
    dispatch_once(&qword_1EEF66CB0, &unk_1E63DA470);
  v5 = (void *)objc_msgSend_clone((void *)qword_1EEF66CA8, a2, a3, a4);
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = sub_1B19A579C;
  v9[3] = &unk_1E63D80A0;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B19A0770(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, float a5)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  _QWORD v11[5];
  float v12;

  if (qword_1EEF66CC0 != -1)
    dispatch_once(&qword_1EEF66CC0, &unk_1E63DA490);
  v7 = (void *)objc_msgSend_clone((void *)qword_1EEF66CB8, a2, a3, a4);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1B19A5A18;
  v11[3] = &unk_1E63DA4B8;
  v12 = a5;
  v11[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v7, v8, (uint64_t)v11, v9);
  return v7;
}

uint64_t sub_1B19A0BE0(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  simd_float4x4 v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39;
  uint64_t v40;
  float32x4_t v41;
  float32x4_t v42;
  uint64_t v43;
  float32x4_t v44;
  uint64_t v45;
  float v46;
  float v47;
  float32x4_t v48;
  float v49;
  float v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  simd_float4 v54;
  simd_float4 v55;
  simd_float4 v56;
  simd_float4 v57;
  _BYTE v58[128];
  uint64_t v59;
  simd_float4x4 v60;

  v59 = *MEMORY[0x1E0C80C00];
  v5 = (void *)objc_msgSend_targets(a1, a2, a3, a4);
  result = objc_msgSend_firstObject(v5, v6, v7, v8);
  if (result)
  {
    v13 = (void *)result;
    v14 = objc_msgSend_effectiveEditingSpace(a1, v10, v11, v12);
    v18.columns[3].i8[0] = 0;
    v18.columns[3].i8[1] = 0;
    v18.columns[3].i8[2] = 0;
    v18.columns[3].i8[3] = 0;
    v18.columns[3].i8[4] = 0;
    v18.columns[3].i8[5] = 0;
    v18.columns[3].i8[6] = 0;
    v18.columns[3].i8[7] = 0;
    v18.columns[3].i8[8] = 0;
    v18.columns[3].i8[9] = 0;
    v18.columns[3].i8[10] = 0;
    v18.columns[3].i8[11] = 0;
    v18.columns[3].i8[12] = 0;
    v18.columns[3].i8[13] = 0;
    v18.columns[3].i8[14] = 0;
    v18.columns[3].i8[15] = 0;
    v18.columns[0] = 0uLL;
    v18.columns[1].i8[0] = 0;
    v18.columns[1].i8[1] = 0;
    v18.columns[1].i8[2] = 0;
    v18.columns[1].i8[3] = 0;
    v18.columns[1].i8[4] = 0;
    v18.columns[1].i8[5] = 0;
    v18.columns[1].i8[6] = 0;
    v18.columns[1].i8[7] = 0;
    v18.columns[1].i8[8] = 0;
    v18.columns[1].i8[9] = 0;
    v18.columns[1].i8[10] = 0;
    v18.columns[1].i8[11] = 0;
    v18.columns[1].i8[12] = 0;
    v18.columns[1].i8[13] = 0;
    v18.columns[1].i8[14] = 0;
    v18.columns[1].i8[15] = 0;
    v18.columns[2].i8[0] = 0;
    v18.columns[2].i8[1] = 0;
    v18.columns[2].i8[2] = 0;
    v18.columns[2].i8[3] = 0;
    v18.columns[2].i8[4] = 0;
    v18.columns[2].i8[5] = 0;
    v18.columns[2].i8[6] = 0;
    v18.columns[2].i8[7] = 0;
    v18.columns[2].i8[8] = 0;
    v18.columns[2].i8[9] = 0;
    v18.columns[2].i8[10] = 0;
    v18.columns[2].i8[11] = 0;
    v18.columns[2].i8[12] = 0;
    v18.columns[2].i8[13] = 0;
    v18.columns[2].i8[14] = 0;
    v18.columns[2].i8[15] = 0;
    switch(v14)
    {
      case 0:
        objc_msgSend_worldTransform(v13, v15, v16, v17, *(double *)v18.columns[0].i64, *(double *)v18.columns[1].i64, *(double *)v18.columns[2].i64, *(double *)v18.columns[3].i64);
        goto LABEL_11;
      case 1:
        v19 = (void *)objc_msgSend_parentItem(v13, v15, v16, v17, *(double *)v18.columns[0].i64, *(double *)v18.columns[1].i64, *(double *)v18.columns[2].i64, *(double *)v18.columns[3].i64);
        if (!v19)
          v19 = v13;
        objc_msgSend_worldTransform(v19, v20, v21, v22, v23, v24, v25, v26);
        goto LABEL_11;
      case 2:
        v18.columns[2] = (simd_float4)xmmword_1B2244D90;
        v18.columns[1] = (simd_float4)xmmword_1B2244DD0;
        v18.columns[0] = (simd_float4)xmmword_1B2244DB0;
        break;
      case 3:
        v27 = (void *)objc_msgSend_authoringEnvironment(a1, v15, v16, v17, *(double *)v18.columns[0].i64, *(double *)v18.columns[1].i64, *(double *)v18.columns[2].i64, *(double *)v18.columns[3].i64);
        objc_msgSend_viewMatrix(v27, v28, v29, v30);
        v18 = __invert_f4(v60);
LABEL_11:
        v18.columns[3] = 0uLL;
        break;
      default:
        break;
    }
    v56 = v18.columns[3];
    v57 = v18.columns[3];
    v54 = v18.columns[3];
    v55 = v18.columns[3];
    v31 = (void *)objc_msgSend_targets(a1, v15, v16, v17, v18.columns[1].i64[0], v18.columns[1].i64[1], *(_OWORD *)v18.columns, v18.columns[2].i64[0], v18.columns[2].i64[1]);
    result = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v54, (uint64_t)v58, 16);
    v36 = 0uLL;
    if (result)
    {
      v37 = result;
      v38 = *(_QWORD *)v55.i64[0];
      v39 = 0.0;
      do
      {
        v40 = 0;
        do
        {
          v52 = v36;
          if (*(_QWORD *)v55.i64[0] != v38)
            objc_enumerationMutation(v31);
          objc_msgSend_worldTransform(*(void **)(v54.i64[1] + 8 * v40), v33, v34, v35);
          v43 = a1[78];
          if (v43 == 2)
          {
            v44 = v52;
            if ((vmovn_s32(vcgtq_f32(v41, v52)).u8[0] & 1) != 0)
              v42.f32[0] = v41.f32[0];
            else
              v42.f32[0] = v52.f32[0];
            goto LABEL_25;
          }
          v44 = v52;
          if (v43 == 1)
          {
            if ((vmovn_s32(vcgtq_f32(v41, v52)).u8[0] & 1) != 0)
              v42.f32[0] = v52.f32[0];
            else
              v42.f32[0] = v41.f32[0];
LABEL_25:
            v42.i32[1] = v44.i32[1];
            v42.i32[2] = v44.i32[2];
            goto LABEL_27;
          }
          v42 = v52;
          v42.i32[0] = vaddq_f32(v52, v41).u32[0];
LABEL_27:
          v45 = a1[79];
          v46 = v42.f32[1];
          if (v42.f32[1] >= v41.f32[1])
            v47 = v42.f32[1];
          else
            v47 = v41.f32[1];
          if (v42.f32[1] >= v41.f32[1])
            v46 = v41.f32[1];
          if (v45 != 1)
            v46 = v41.f32[1] + v42.f32[1];
          if (v45 == 2)
            v46 = v47;
          v48 = v42;
          v48.f32[1] = v46;
          v49 = v41.f32[2];
          v50 = v41.f32[2] + v42.f32[2];
          if (v42.f32[2] >= v41.f32[2])
            v51 = v42.f32[2];
          else
            v51 = v41.f32[2];
          if (v43 == 2)
            v50 = v51;
          if (v42.f32[2] < v41.f32[2])
            v49 = v42.f32[2];
          if (a1[80] != 1)
            v49 = v50;
          v48.f32[2] = v49;
          v36 = v48;
          v36.i32[3] = v44.i32[3];
          v39 = v39 + 1.0;
          ++v40;
        }
        while (v37 != v40);
        v53 = v36;
        result = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v33, (uint64_t)&v54, (uint64_t)v58, 16);
        v36 = v53;
        v37 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_1B19A121C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *Material;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;

  v5 = objc_msgSend_blackColor(MEMORY[0x1E0DC3658], a2, a3, a4);
  v9 = (void *)objc_msgSend_model(a2, v6, v7, v8);
  Material = (void *)objc_msgSend_firstMaterial(v9, v10, v11, v12);
  v17 = (void *)objc_msgSend_emission(Material, v14, v15, v16);
  objc_msgSend_setContents_(v17, v18, v5, v19);
  v23 = objc_msgSend_whiteColor(MEMORY[0x1E0DC3658], v20, v21, v22);
  v27 = (void *)objc_msgSend_model(a2, v24, v25, v26);
  v31 = (void *)objc_msgSend_firstMaterial(v27, v28, v29, v30);
  v35 = (void *)objc_msgSend_multiply(v31, v32, v33, v34);
  return objc_msgSend_setContents_(v35, v36, v23, v37);
}

uint64_t sub_1B19A1598(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *Material;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;

  v5 = objc_msgSend_whiteColor(MEMORY[0x1E0DC3658], a2, a3, a4);
  v9 = (void *)objc_msgSend_model(a2, v6, v7, v8);
  Material = (void *)objc_msgSend_firstMaterial(v9, v10, v11, v12);
  v17 = (void *)objc_msgSend_emission(Material, v14, v15, v16);
  objc_msgSend_setContents_(v17, v18, v5, v19);
  v23 = objc_msgSend_orangeColor(MEMORY[0x1E0DC3658], v20, v21, v22);
  v27 = (void *)objc_msgSend_model(a2, v24, v25, v26);
  v31 = (void *)objc_msgSend_firstMaterial(v27, v28, v29, v30);
  v35 = (void *)objc_msgSend_multiply(v31, v32, v33, v34);
  return objc_msgSend_setContents_(v35, v36, v23, v37);
}

float32x4_t sub_1B19A2450(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  _OWORD *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  int32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int8x16_t v43;
  float32x4_t v44;
  int32x4_t v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  __int128 v53;
  float v54;
  int8x16_t v55;
  int8x16_t v56;
  int32x2_t v57;
  float v58;
  float32x2_t v59;
  float32x2_t v60;
  float32x2_t v61;
  uint64_t v62;
  int32x2_t v63;
  float32x4_t result;
  float32x2_t v65;
  float32x2_t v66;
  int32x2_t v67;
  __int128 v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;

  objc_msgSend_initializeDraggedTransform(a2, (const char *)a2, a3, a4);
  objc_msgSend_worldTransform(a2, v7, v8, v9);
  v69 = v10;
  v70 = v11;
  v71 = v12;
  v68 = v13;
  v14 = (_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 408) + (a3 << 6));
  objc_msgSend_transform(a2, v15, v16, v17);
  *v14 = v18;
  v14[1] = v19;
  v14[2] = v20;
  v14[3] = v21;
  v22 = vmulq_f32(v69, v69);
  v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)));
  v24 = vmulq_f32(v70, v70);
  v23.f32[0] = sqrtf(v23.f32[0]);
  v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2);
  v26 = vmulq_f32(v71, v71);
  v23.i32[1] = sqrtf(vaddq_f32(v25, vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
  v23.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 416) + 16 * a3) = v23;
  v27 = vzip2q_s32((int32x4_t)v22, (int32x4_t)v26);
  v28 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v22, (int32x4_t)v26), (int32x4_t)v24);
  v29 = (float32x4_t)vtrn2q_s32((int32x4_t)v22, (int32x4_t)v24);
  v29.i32[2] = v26.i32[1];
  v30 = vaddq_f32((float32x4_t)vzip1q_s32(v27, (int32x4_t)v25), vaddq_f32(v28, v29));
  v28.i64[0] = 0x80000000800000;
  v28.i64[1] = 0x80000000800000;
  v31 = vcgeq_f32(v28, v30);
  v30.i32[3] = 0;
  v32 = vrsqrteq_f32(v30);
  v33 = vmulq_f32(v32, vrsqrtsq_f32(v30, vmulq_f32(v32, v32)));
  v34 = v31;
  v34.i32[3] = 0;
  v35 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v34), (int8x16_t)v30, (int8x16_t)vmulq_f32(v33, vrsqrtsq_f32(v30, vmulq_f32(v33, v33))));
  v36 = vmulq_n_f32(v69, v35.f32[0]);
  v37 = vmulq_lane_f32(v70, *(float32x2_t *)v35.f32, 1);
  v38 = vmulq_laneq_f32(v71, v35, 2);
  v39 = (int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38);
  v40 = (int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37);
  v41 = (int32x4_t)v36;
  if (v31.i32[0])
  {
    v42 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v39, (int8x16_t)v38, 0xCuLL), vnegq_f32(v37)), v38, (float32x4_t)vextq_s8(v40, (int8x16_t)v37, 0xCuLL));
    v41 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL);
  }
  v43 = (int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36);
  v44 = v37;
  if (v31.i32[1])
  {
    v45 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v43, (int8x16_t)v36, 0xCuLL), vnegq_f32(v38)), v36, (float32x4_t)vextq_s8(v39, (int8x16_t)v38, 0xCuLL));
    v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL);
  }
  if (v31.i32[2])
  {
    v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v40, (int8x16_t)v37, 0xCuLL), vnegq_f32(v36)), v37, (float32x4_t)vextq_s8(v43, (int8x16_t)v36, 0xCuLL));
    v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL);
  }
  v46 = (float)(*(float *)v41.i32 + v44.f32[1]) + v38.f32[2];
  if (v46 > 0.0)
  {
    v47 = (float32x4_t)vzip2q_s32((int32x4_t)v44, vuzp1q_s32((int32x4_t)v44, (int32x4_t)v38));
    v47.i32[2] = v41.i32[1];
    v48 = (float32x4_t)vtrn2q_s32((int32x4_t)v38, vzip2q_s32((int32x4_t)v38, v41));
    v48.i32[2] = v44.i32[0];
    v50 = vsubq_f32(v47, v48);
    v47.i32[3] = sqrtf(v46 + 1.0);
    v48.i32[3] = v47.i32[3];
    v49 = vmulq_f32(v47, v48);
    v50.i32[3] = v49.i32[3];
    v49.f32[0] = 0.5 / v47.f32[3];
    v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0);
LABEL_16:
    v53 = v68;
    goto LABEL_17;
  }
  if (*(float *)v41.i32 >= v44.f32[1] && *(float *)v41.i32 >= v38.f32[2])
  {
    v58 = sqrtf((float)((float)(*(float *)v41.i32 + 1.0) - v44.f32[1]) - v38.f32[2]);
    v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.f32, 0);
    v60 = vadd_f32(*(float32x2_t *)v41.i8, v59);
    v59.f32[0] = v58;
    v51.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v41.u32[1], LODWORD(v58)), v59).u32[0];
    v51.i32[1] = v60.i32[1];
    v61 = (float32x2_t)vzip2q_s32(v41, (int32x4_t)v44).u64[0];
    LODWORD(v62) = vadd_f32(v61, *(float32x2_t *)v38.f32).u32[0];
    v63 = (int32x2_t)vsub_f32(v61, *(float32x2_t *)v38.f32);
    HIDWORD(v62) = v63.i32[1];
    v51.i64[1] = v62;
    *(float *)v63.i32 = 0.5 / v58;
    v50 = (float32x4_t)vdupq_lane_s32(v63, 0);
    goto LABEL_16;
  }
  v53 = v68;
  if (v44.f32[1] <= v38.f32[2])
  {
    *(float32x2_t *)v38.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v41, (int32x4_t)v44), *(float32x2_t *)v38.f32);
    v65 = (float32x2_t)__PAIR64__(v41.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v38.f32[2] + 1.0) - *(float *)v41.i32) - v44.f32[1])));
    v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.f32, 0);
    v67 = (int32x2_t)vsub_f32(*(float32x2_t *)v41.i8, v66);
    v66.i32[0] = v65.i32[0];
    v66.i32[0] = vmul_f32(v65, v66).u32[0];
    v66.i32[1] = v67.i32[1];
    *(float32x2_t *)&v50.u32[2] = v66;
    *(float *)v67.i32 = 0.5 / v65.f32[0];
    v51 = (float32x4_t)vdupq_lane_s32(v67, 0);
  }
  else
  {
    v54 = sqrtf((float)((float)(v44.f32[1] + 1.0) - *(float *)v41.i32) - v38.f32[2]);
    *(int32x2_t *)v31.i8 = vdup_laneq_s32((int32x4_t)v44, 2);
    v55 = (int8x16_t)v31;
    *(float *)v55.i32 = v54;
    v55.i32[0] = vmul_f32(*(float32x2_t *)v55.i8, (float32x2_t)__PAIR64__(v38.u32[1], LODWORD(v54))).u32[0];
    v55.i32[1] = vadd_f32(*(float32x2_t *)&v31, *(float32x2_t *)&v38).i32[1];
    v56 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 1), v44);
    v57 = (int32x2_t)vsubq_f32(v38, (float32x4_t)vdupq_laneq_s32(v41, 2)).u64[0];
    v51 = (float32x4_t)vextq_s8(vextq_s8(v56, v56, 4uLL), v55, 0xCuLL);
    v51.i32[3] = v57.i32[0];
    *(float *)v57.i32 = 0.5 / v54;
    v50 = (float32x4_t)vdupq_lane_s32(v57, 0);
  }
LABEL_17:
  result = vmulq_f32(v50, v51);
  *(float32x4_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 400) + 16 * a3) = result;
  *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 392) + 16 * a3) = v53;
  return result;
}

double sub_1B19A3310(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  float32x4_t v9;
  float32x2_t v10;
  float32x2_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  double result;

  v3 = (int32x4_t)vmulq_f32(a3, a3);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  v5.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
  v6 = a1[19];
  v7 = a1[20];
  v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  v9 = vmulq_n_f32(a3, v5.f32[0]);
  v10 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10)));
  v12 = vmulq_n_f32(v7, vmul_f32(v11, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v11, v11))).f32[0]);
  v13 = vmulq_f32(v9, v12);
  v14 = vsubq_f32(v6, a2);
  v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
  v16 = vmulq_f32(v9, v14);
  v17 = vmulq_f32(v14, v12);
  v17.f32[0] = vmlas_n_f32(-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0], v15.f32[0])/ (1.0 - vmulq_f32(v15, v15).f32[0]);
  *(_QWORD *)&result = vmlaq_n_f32(v6, v12, v17.f32[0]).u64[0];
  return result;
}

double sub_1B19A33F4(int a1, _BYTE *a2, float32x4_t a3, float32x4_t a4, float a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v10;
  float v11;
  float v12;
  float32x4_t v13;
  float v14;
  float v15;
  _BOOL8 v16;
  float v17;
  float v18;
  float v19;
  float v20;
  uint64_t v21;
  float32x4_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  uint64_t v28;
  float32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float v40;
  int v41;
  int v42;
  float v43;
  unsigned __int32 v44;
  float32x4_t v45;
  float32x4_t v46;
  _BOOL4 v47;
  float32x4_t v48;
  float32x4_t v49;
  float v50;
  float v53;
  float32x4_t v54;
  __n128 v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  __n128 v63;
  __n128 v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  __int128 v68;
  float32x4_t v69;

  v61 = a7;
  v62 = a6;
  v10 = vsubq_f32(a3, a4);
  v56 = (__n128)a3;
  v54 = v10;
  if (fabsf(v10.f32[0]) <= 0.00001)
  {
    v16 = 0;
    v13 = a3;
    goto LABEL_15;
  }
  if (a3.f32[0] >= 0.0)
    v11 = a3.f32[0];
  else
    v11 = -a3.f32[0];
  v12 = fmodf(v11, a5);
  v14 = a5 * 0.3;
  if (v12 >= v14)
  {
    if (v12 <= (float)(a5 - v14))
    {
      v16 = 0;
      a3 = (float32x4_t)v56;
      v13 = (float32x4_t)v56;
      v10 = v54;
      goto LABEL_15;
    }
    v15 = v11 + (float)(a5 - v12);
  }
  else
  {
    v15 = v11 - v12;
  }
  a3 = (float32x4_t)v56;
  v10 = v54;
  if (v56.n128_f32[0] >= 0.0)
    v13.f32[0] = v15;
  else
    v13.f32[0] = -v15;
  *(uint64_t *)((char *)v13.i64 + 4) = *(uint64_t *)((char *)v56.n128_i64 + 4);
  v16 = 1;
LABEL_15:
  v53 = a3.f32[1];
  if (fabsf(v10.f32[1]) <= 0.00001)
  {
    v21 = 0;
    goto LABEL_29;
  }
  v57 = v13;
  if (a3.f32[1] >= 0.0)
    v17 = a3.f32[1];
  else
    v17 = -a3.f32[1];
  v18 = fmodf(v17, a5);
  v19 = a5 * 0.3;
  if (v18 < v19)
  {
    v20 = v17 - v18;
LABEL_24:
    a3.i32[2] = v56.n128_i32[2];
    if (v53 < 0.0)
      v20 = -v20;
    v22.i64[0] = __PAIR64__(LODWORD(v20), v57.u32[0]);
    v22.i64[1] = v57.i64[1];
    v21 = 1;
    v13 = v22;
    goto LABEL_28;
  }
  if (v18 > (float)(a5 - v19))
  {
    v20 = v17 + (float)(a5 - v18);
    goto LABEL_24;
  }
  v21 = 0;
  a3.i32[2] = v56.n128_i32[2];
  v13 = v57;
LABEL_28:
  v10.i32[2] = v54.i32[2];
LABEL_29:
  v23 = a3.f32[2];
  if (fabsf(v10.f32[2]) <= 0.00001)
  {
    v28 = 0;
    goto LABEL_42;
  }
  v58 = v13;
  if (a3.f32[2] >= 0.0)
    v24 = a3.f32[2];
  else
    v24 = -a3.f32[2];
  v25 = fmodf(v24, a5);
  v26 = a5 * 0.3;
  if (v25 >= v26)
  {
    if (v25 <= (float)(a5 - v26))
    {
      v28 = 0;
      v13 = v58;
      goto LABEL_42;
    }
    v27 = v24 + (float)(a5 - v25);
  }
  else
  {
    v27 = v24 - v25;
  }
  if (v23 < 0.0)
    v27 = -v27;
  v13.i64[0] = v58.i64[0];
  v13.i64[1] = __PAIR64__(v58.u32[3], LODWORD(v27));
  v28 = 1;
LABEL_42:
  v29 = a7;
  if (v16)
  {
    *a2 = 1;
  }
  else
  {
    *a2 = v21 | v28;
    if (((v21 | v28) & 1) == 0)
      return *(double *)v13.i64;
  }
  if (a1)
  {
    v63 = 0u;
    v64 = 0u;
    v59 = v13;
    sub_1B1824088(&v63, &v62, (__n128 *)&v61);
    sub_1B19A4E20(v16, v21, v28, 0, v30, v31, v32, v33, v59, v56, v63, v64);
    v13.i64[0] = v34;
    return *(double *)v13.i64;
  }
  v35 = vmulq_f32(a6, a7);
  v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)));
  v29.f32[3] = -v36.f32[0];
  v69 = v29;
  if (v16 | v21 | v28)
  {
    v66 = v13;
    v67 = v13;
    v64 = 0u;
    v65 = v13;
    v63 = 0u;
    v37 = vmulq_f32(v13, v29);
    if (vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))), v36).f32[0] >= 5.0)
    {
      v60 = v13;
      if (v16)
      {
        v13.f32[1] = v53;
        v67.f32[2] = v23;
        v67.i64[0] = v13.i64[0];
        v68 = xmmword_1B2244DD0;
        sub_1B1824088(&v63, &v67, (__n128 *)&v68);
        if (sub_1B17C3060((uint64_t)&v63, v69.f32, &v67))
        {
          v38 = vsubq_f32((float32x4_t)v56, v67);
          v39 = vmulq_f32(v38, v38);
          v40 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]);
          v41 = 1;
        }
        else
        {
          v41 = 0;
          v40 = 3.4028e38;
        }
        v13 = v60;
        if ((_DWORD)v21)
          goto LABEL_56;
      }
      else
      {
        v41 = 0;
        v40 = 3.4028e38;
        if ((_DWORD)v21)
        {
LABEL_56:
          v13.i32[0] = v56.n128_u32[0];
          v66.f32[2] = v23;
          v66.i64[0] = v13.i64[0];
          v68 = xmmword_1B2244DD0;
          sub_1B1824088(&v63, &v66, (__n128 *)&v68);
          if (sub_1B17C3060((uint64_t)&v63, v69.f32, &v66))
          {
            v45 = vsubq_f32((float32x4_t)v56, v66);
            v46 = vmulq_f32(v45, v45);
            v43 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
            v42 = 1;
          }
          else
          {
            v42 = 0;
            v43 = 3.4028e38;
          }
          v44 = v56.n128_u32[0];
          v13 = v60;
LABEL_60:
          if ((_DWORD)v28
            && (v65.i32[2] = v13.i32[2],
                v65.i64[0] = __PAIR64__(LODWORD(v53), v44),
                v68 = xmmword_1B2244D90,
                sub_1B1824088(&v63, &v65, (__n128 *)&v68),
                v47 = sub_1B17C3060((uint64_t)&v63, v69.f32, &v65),
                v13.i64[0] = v60.i64[0],
                v47))
          {
            v48 = vsubq_f32((float32x4_t)v56, v65);
            v49 = vmulq_f32(v48, v48);
            v50 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0]);
          }
          else
          {
            if ((v41 | v42) != 1)
              return *(double *)v13.i64;
            v50 = 3.4028e38;
          }
          if (v40 >= v43)
          {
            if (v43 < v50)
            {
              v13.i64[0] = v66.i64[0];
              return *(double *)v13.i64;
            }
          }
          else if (v40 < v50)
          {
            v13.i64[0] = v67.i64[0];
            return *(double *)v13.i64;
          }
          v13.i64[0] = v65.i64[0];
          return *(double *)v13.i64;
        }
      }
      v42 = 0;
      v43 = 3.4028e38;
      v44 = v56.n128_u32[0];
      goto LABEL_60;
    }
  }
  return *(double *)v13.i64;
}

void sub_1B19A402C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19A4200(float *a1, float *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a1 > *a2;
}

BOOL sub_1B19A46A4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_model(a2, (const char *)a2, a3, a4) != 0;
}

uint64_t sub_1B19A46C4(void *a1, char *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a2)
    return 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, a2, (uint64_t)&v13, (uint64_t)v17, 16);
  if (v4)
  {
    v8 = v4;
    v9 = *(_QWORD *)v14;
    while (2)
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v14 != v9)
          objc_enumerationMutation(a1);
        if ((char *)objc_msgSend_node(*(void **)(*((_QWORD *)&v13 + 1) + 8 * v10), v5, v6, v7) == a2)
          return 1;
        ++v10;
      }
      while (v8 != v10);
      v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v5, (uint64_t)&v13, (uint64_t)v17, 16);
      if (v8)
        continue;
      break;
    }
  }
  v11 = objc_msgSend_parentNode(a2, v5, v6, v7);
  return sub_1B19A46C4(a1, v11);
}

uint64_t sub_1B19A4AE8(uint64_t a1, uint64_t a2, float *a3, float a4)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;

  if (a2 < 2)
    return 0;
  if (a2 == 2)
  {
    v5 = 0;
    v6 = 1;
  }
  else
  {
    v5 = 0;
    v6 = a2 - 1;
    do
    {
      v7 = v6 + v5;
      if (v6 + v5 < 0 != __OFADD__(v6, v5))
        ++v7;
      v8 = v7 >> 1;
      if (*(float *)(a1 + 24 * v8) > a4)
        v6 = v8;
      else
        v5 = v8;
    }
    while (v6 - v5 > 1);
  }
  v9 = vabds_f32(a4, *(float *)(a1 + 24 * v5));
  v10 = vabds_f32(*(float *)(a1 + 24 * v6), a4);
  if (v9 >= v10)
  {
    result = v6;
  }
  else
  {
    v10 = v9;
    result = v5;
  }
  *a3 = v10;
  return result;
}

uint64_t sub_1B19A4B74(uint64_t a1, uint64_t a2, _DWORD *a3, float a4, float a5)
{
  uint64_t result;
  double v9;
  float v10;
  float v11;

  v11 = 0.0;
  result = sub_1B19A4AE8(a1, a2, &v11, a4);
  v9 = 0.03;
  if (a5 > 0.1)
    v9 = a5 * 0.3;
  v10 = v9;
  if (v11 >= v10)
    return -1;
  *a3 = *(_DWORD *)(a1 + 24 * result);
  return result;
}

BOOL sub_1B19A4E20(_BOOL8 result, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, __n128 a10, __n128 a11, __n128 a12)
{
  int v13;
  int v14;
  __n128 v15;
  float32x4_t v17;
  __n128 v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  _OWORD v22[2];

  v13 = a3;
  v14 = a2;
  v15 = a10;
  v22[0] = a11;
  v22[1] = a12;
  if (!result && (a2 & 1) == 0 && !(_DWORD)a3)
    return result;
  v20 = a9;
  v21 = a9;
  v19 = a9;
  v18 = 0uLL;
  v17 = a9;
  if (!result)
  {
    if ((_DWORD)a2)
      goto LABEL_13;
LABEL_8:
    if (!v13)
      return result;
    goto LABEL_18;
  }
  v21.i32[2] = a10.n128_i32[2];
  v21.i64[0] = __PAIR64__(a10.n128_u32[1], a9.u32[0]);
  sub_1B17C4A6C(&v18, a9, (float32x4_t)xmmword_1B2244DB0, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = sub_1B17C3060((uint64_t)v22, (float *)&v18, &v21);
  if (result)
  {
    v15 = a10;
  }
  else
  {
    v15 = a10;
    if (a4)
      *a4 = -1;
  }
  a9 = v17;
  if (!v14)
    goto LABEL_8;
LABEL_13:
  a9.i32[0] = v15.n128_u32[0];
  v20.i32[2] = v15.n128_i32[2];
  v20.i64[0] = a9.i64[0];
  sub_1B17C4A6C(&v18, v20, (float32x4_t)xmmword_1B2244DD0, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  result = sub_1B17C3060((uint64_t)v22, (float *)&v18, &v20);
  if (result)
  {
    v15.n128_u64[0] = a10.n128_u64[0];
  }
  else
  {
    v15.n128_u64[0] = a10.n128_u64[0];
    if (a4)
      a4[1] = -1;
  }
  a9.i32[2] = v17.i32[2];
  if (v13)
  {
LABEL_18:
    v19.i32[2] = a9.i32[2];
    v19.i64[0] = v15.n128_u64[0];
    sub_1B17C4A6C(&v18, v19, (float32x4_t)xmmword_1B2244D90, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    result = sub_1B17C3060((uint64_t)v22, (float *)&v18, &v19);
    if (!result)
    {
      if (a4)
        a4[2] = -1;
    }
  }
  return result;
}

uint64_t sub_1B19A50A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;

  qword_1EEF66C78 = objc_msgSend_node(VFXNode, a2, a3, a4);
  LODWORD(v4) = 1014350479;
  LODWORD(v5) = 1060320051;
  v9 = objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v6, v7, v8, v4, v5);
  v12 = (void *)objc_msgSend_nodeWithModel_(VFXNode, v10, v9, v11);
  objc_msgSend_setPosition_(v12, v13, v14, v15);
  objc_msgSend_addChildNode_((void *)qword_1EEF66C78, v16, (uint64_t)v12, v17);
  LODWORD(v18) = 1031127695;
  LODWORD(v19) = 1050253722;
  LODWORD(v20) = 0;
  v24 = objc_msgSend_coneWithTopRadius_bottomRadius_height_(VFXParametricModel, v21, v22, v23, v20, v18, v19);
  v27 = (void *)objc_msgSend_nodeWithModel_(VFXNode, v25, v24, v26);
  objc_msgSend_setPosition_(v27, v28, v29, v30, 0.00156250037);
  objc_msgSend_addChildNode_((void *)qword_1EEF66C78, v31, (uint64_t)v27, v32);
  qword_1EEF66C78 = objc_msgSend_flattenedCopy((void *)qword_1EEF66C78, v33, v34, v35);
  LODWORD(v36) = 1028443341;
  LODWORD(v37) = 1060320051;
  v41 = objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v38, v39, v40, v36, v37);
  v44 = (void *)objc_msgSend_nodeWithModel_(VFXNode, v42, v41, v43);
  objc_msgSend_setPosition_(v44, v45, v46, v47, 0.000001144409);
  objc_msgSend_setHidden_(v44, v48, 1, v49);
  objc_msgSend_setCategoryBitMask_(v44, v50, 0xFFFFLL, v51);
  return objc_msgSend_addChildNode_((void *)qword_1EEF66C78, v52, (uint64_t)v44, v53);
}

uint64_t sub_1B19A51D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *Material;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  _QWORD v64[2];

  v64[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_model(a2, (const char *)a2, a3, a4);
  v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  v16 = (void *)objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v16, v17, v18, v19))
  {
    v23 = (void *)objc_msgSend_model(a2, v20, v21, v22);
    Material = (void *)objc_msgSend_firstMaterial(v23, v24, v25, v26);
    v64[0] = (id)objc_msgSend_copy(Material, v28, v29, v30);
    v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v31, (uint64_t)v64, 1);
  }
  else
  {
    v32 = MEMORY[0x1E0C9AA60];
  }
  v33 = (void *)objc_msgSend_model(a2, v20, v21, v22);
  objc_msgSend_setMaterials_(v33, v34, v32, v35);
  v36 = *(_QWORD *)(a1 + 32);
  v40 = (void *)objc_msgSend_model(a2, v37, v38, v39);
  v44 = (void *)objc_msgSend_firstMaterial(v40, v41, v42, v43);
  v48 = (void *)objc_msgSend_diffuse(v44, v45, v46, v47);
  objc_msgSend_setContents_(v48, v49, v36, v50);
  v54 = (void *)objc_msgSend_model(a2, v51, v52, v53);
  v58 = (void *)objc_msgSend_firstMaterial(v54, v55, v56, v57);
  objc_msgSend_setShadingModel_(v58, v59, 2, v60);
  return objc_msgSend_setIsAuthoring_(a2, v61, 1, v62);
}

uint64_t sub_1B19A52E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;

  qword_1EEF66C88 = objc_msgSend_node(VFXNode, a2, a3, a4);
  LODWORD(v4) = 1008981770;
  LODWORD(v5) = 1058642330;
  v9 = objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v6, v7, v8, v4, v5);
  v12 = (void *)objc_msgSend_nodeWithModel_(VFXNode, v10, v9, v11);
  objc_msgSend_setPosition_(v12, v13, v14, v15, 0.000000381469818);
  objc_msgSend_addChildNode_((void *)qword_1EEF66C88, v16, (uint64_t)v12, v17);
  result = objc_msgSend_flattenedCopy((void *)qword_1EEF66C88, v18, v19, v20);
  qword_1EEF66C88 = result;
  return result;
}

uint64_t sub_1B19A5360(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *Material;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  _QWORD v64[2];

  v64[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_model(a2, (const char *)a2, a3, a4);
  v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  v16 = (void *)objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v16, v17, v18, v19))
  {
    v23 = (void *)objc_msgSend_model(a2, v20, v21, v22);
    Material = (void *)objc_msgSend_firstMaterial(v23, v24, v25, v26);
    v64[0] = (id)objc_msgSend_copy(Material, v28, v29, v30);
    v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v31, (uint64_t)v64, 1);
  }
  else
  {
    v32 = MEMORY[0x1E0C9AA60];
  }
  v33 = (void *)objc_msgSend_model(a2, v20, v21, v22);
  objc_msgSend_setMaterials_(v33, v34, v32, v35);
  v36 = *(_QWORD *)(a1 + 32);
  v40 = (void *)objc_msgSend_model(a2, v37, v38, v39);
  v44 = (void *)objc_msgSend_firstMaterial(v40, v41, v42, v43);
  v48 = (void *)objc_msgSend_diffuse(v44, v45, v46, v47);
  objc_msgSend_setContents_(v48, v49, v36, v50);
  v54 = (void *)objc_msgSend_model(a2, v51, v52, v53);
  v58 = (void *)objc_msgSend_firstMaterial(v54, v55, v56, v57);
  objc_msgSend_setShadingModel_(v58, v59, 2, v60);
  return objc_msgSend_setIsAuthoring_(a2, v61, 1, v62);
}

uint64_t sub_1B19A5470(double a1, double a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  double v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;

  LODWORD(a1) = 1050253722;
  LODWORD(a2) = 1050253722;
  v6 = objc_msgSend_planeWithWidth_height_(VFXParametricModel, a4, a5, a6, a1, a2);
  qword_1EEF66C98 = (uint64_t)(id)objc_msgSend_nodeWithModel_(VFXNode, v7, v6, v8);
  LODWORD(v9) = 1046034724;
  LODWORD(v10) = 1008981770;
  v14 = (void *)objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, v11, v12, v13, v9, v10);
  objc_msgSend_setPipeSegmentCount_(v14, v15, 3, v16);
  objc_msgSend_setRadialSegmentCount_(v14, v17, 4, v18);
  v21 = (void *)objc_msgSend_nodeWithModel_(VFXNode, v19, (uint64_t)v14, v20);
  objc_msgSend_setEulerAngles_(v21, v22, v23, v24, COERCE_DOUBLE(1070141403));
  return objc_msgSend_addChildNode_((void *)qword_1EEF66C98, v25, (uint64_t)v21, v26);
}

uint64_t sub_1B19A5518(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *Material;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  double v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  _QWORD v107[2];

  v107[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_model(a2, (const char *)a2, a3, a4);
  v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  v16 = (void *)objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v16, v17, v18, v19))
  {
    v23 = (void *)objc_msgSend_model(a2, v20, v21, v22);
    Material = (void *)objc_msgSend_firstMaterial(v23, v24, v25, v26);
    v107[0] = (id)objc_msgSend_copy(Material, v28, v29, v30);
    v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v31, (uint64_t)v107, 1);
  }
  else
  {
    v32 = MEMORY[0x1E0C9AA60];
  }
  v33 = (void *)objc_msgSend_model(a2, v20, v21, v22);
  objc_msgSend_setMaterials_(v33, v34, v32, v35);
  objc_msgSend_model(a2, v36, v37, v38);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (v42 = (void *)objc_msgSend_model(a2, v39, v40, v41), objc_msgSend_parametricType(v42, v43, v44, v45) == 8))
  {
    v46 = *(_QWORD *)(a1 + 32);
    v47 = (void *)objc_msgSend_model(a2, v39, v40, v41);
    v51 = (void *)objc_msgSend_firstMaterial(v47, v48, v49, v50);
    v55 = (void *)objc_msgSend_diffuse(v51, v52, v53, v54);
    objc_msgSend_setContents_(v55, v56, v46, v57);
  }
  else
  {
    v60 = *(_QWORD *)(a1 + 32);
    v61 = (void *)objc_msgSend_model(a2, v39, v40, v41);
    v65 = (void *)objc_msgSend_firstMaterial(v61, v62, v63, v64);
    v69 = (void *)objc_msgSend_diffuse(v65, v66, v67, v68);
    objc_msgSend_setContents_(v69, v70, v60, v71);
    v75 = (void *)objc_msgSend_model(a2, v72, v73, v74);
    v79 = (void *)objc_msgSend_firstMaterial(v75, v76, v77, v78);
    objc_msgSend_setBlendMode_(v79, v80, 1, v81);
    LODWORD(v82) = 1050253722;
    objc_msgSend_setOpacity_(a2, v83, v84, v85, v82);
    v89 = (void *)objc_msgSend_model(a2, v86, v87, v88);
    v93 = (void *)objc_msgSend_firstMaterial(v89, v90, v91, v92);
    objc_msgSend_setDoubleSided_(v93, v94, 1, v95);
  }
  objc_msgSend_setIsAuthoring_(a2, v58, 1, v59);
  v99 = (void *)objc_msgSend_model(a2, v96, v97, v98);
  v103 = (void *)objc_msgSend_firstMaterial(v99, v100, v101, v102);
  return objc_msgSend_setShadingModel_(v103, v104, 2, v105);
}

uint64_t sub_1B19A56BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double v4;
  double v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;

  qword_1EEF66CA8 = (uint64_t)(id)objc_msgSend_node(VFXNode, a2, a3, a4);
  LODWORD(v4) = 1050253722;
  LODWORD(v5) = 0;
  v9 = (void *)objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v6, v7, v8, v4, v5);
  LODWORD(v10) = 0.25;
  objc_msgSend_setRadialSpan_(v9, v11, v12, v13, v10);
  objc_msgSend_setRadialSegmentCount_(v9, v14, 24, v15);
  v16 = (void *)qword_1EEF66CA8;
  v19 = objc_msgSend_nodeWithModel_(VFXNode, v17, (uint64_t)v9, v18);
  objc_msgSend_addChildNode_(v16, v20, v19, v21);
  LODWORD(v22) = 1059984507;
  LODWORD(v23) = 1014350479;
  v27 = (void *)objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, v24, v25, v26, v22, v23);
  LODWORD(v28) = 0.25;
  objc_msgSend_setRadialSpan_(v27, v29, v30, v31, v28);
  objc_msgSend_setRadialSegmentCount_(v27, v32, 24, v33);
  objc_msgSend_setPipeSegmentCount_(v27, v34, 6, v35);
  v36 = (void *)qword_1EEF66CA8;
  v39 = objc_msgSend_nodeWithModel_(VFXNode, v37, (uint64_t)v27, v38);
  return objc_msgSend_addChildNode_(v36, v40, v39, v41);
}

uint64_t sub_1B19A579C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *Material;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  const char *v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  double v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  _QWORD v110[2];

  v110[1] = *MEMORY[0x1E0C80C00];
  result = objc_msgSend_model(a2, (const char *)a2, a3, a4);
  if (result)
  {
    v10 = (void *)objc_msgSend_model(a2, v7, v8, v9);
    v14 = (id)objc_msgSend_copy(v10, v11, v12, v13);
    objc_msgSend_setModel_(a2, v15, (uint64_t)v14, v16);
    v20 = (void *)objc_msgSend_model(a2, v17, v18, v19);
    if (objc_msgSend_firstMaterial(v20, v21, v22, v23))
    {
      v27 = (void *)objc_msgSend_model(a2, v24, v25, v26);
      Material = (void *)objc_msgSend_firstMaterial(v27, v28, v29, v30);
      v110[0] = (id)objc_msgSend_copy(Material, v32, v33, v34);
      v36 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v35, (uint64_t)v110, 1);
    }
    else
    {
      v36 = MEMORY[0x1E0C9AA60];
    }
    v37 = (void *)objc_msgSend_model(a2, v24, v25, v26);
    objc_msgSend_setMaterials_(v37, v38, v36, v39);
    objc_msgSend_model(a2, v40, v41, v42);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (v46 = (void *)objc_msgSend_model(a2, v43, v44, v45), objc_msgSend_parametricType(v46, v47, v48, v49) == 8))
    {
      v50 = *(_QWORD *)(a1 + 32);
      v51 = (void *)objc_msgSend_model(a2, v43, v44, v45);
      v55 = (void *)objc_msgSend_firstMaterial(v51, v52, v53, v54);
      v59 = (void *)objc_msgSend_diffuse(v55, v56, v57, v58);
      objc_msgSend_setContents_(v59, v60, v50, v61);
    }
    else
    {
      v64 = *(_QWORD *)(a1 + 32);
      v65 = (void *)objc_msgSend_model(a2, v43, v44, v45);
      v69 = (void *)objc_msgSend_firstMaterial(v65, v66, v67, v68);
      v73 = (void *)objc_msgSend_diffuse(v69, v70, v71, v72);
      objc_msgSend_setContents_(v73, v74, v64, v75);
      v79 = (void *)objc_msgSend_model(a2, v76, v77, v78);
      v83 = (void *)objc_msgSend_firstMaterial(v79, v80, v81, v82);
      objc_msgSend_setBlendMode_(v83, v84, 1, v85);
      LODWORD(v86) = 1058642330;
      objc_msgSend_setOpacity_(a2, v87, v88, v89, v86);
      v93 = (void *)objc_msgSend_model(a2, v90, v91, v92);
      v97 = (void *)objc_msgSend_firstMaterial(v93, v94, v95, v96);
      objc_msgSend_setDoubleSided_(v97, v98, 1, v99);
    }
    objc_msgSend_setIsAuthoring_(a2, v62, 1, v63);
    v103 = (void *)objc_msgSend_model(a2, v100, v101, v102);
    v107 = (void *)objc_msgSend_firstMaterial(v103, v104, v105, v106);
    return objc_msgSend_setShadingModel_(v107, v108, 2, v109);
  }
  return result;
}

uint64_t sub_1B19A594C(double a1, double a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  double v15;
  double v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;

  LODWORD(a2) = 1008981770;
  LODWORD(a1) = 1.0;
  v6 = (void *)objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, a4, a5, a6, a1, a2);
  objc_msgSend_setPipeSegmentCount_(v6, v7, 5, v8);
  objc_msgSend_setRadialSegmentCount_(v6, v9, 64, v10);
  qword_1EEF66CB8 = (uint64_t)(id)objc_msgSend_nodeWithModel_(VFXNode, v11, (uint64_t)v6, v12);
  objc_msgSend_setHittable_((void *)qword_1EEF66CB8, v13, 0, v14);
  LODWORD(v15) = 1032805417;
  LODWORD(v16) = 1.0;
  v20 = (void *)objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, v17, v18, v19, v16, v15);
  objc_msgSend_setPipeSegmentCount_(v20, v21, 5, v22);
  objc_msgSend_setRadialSegmentCount_(v20, v23, 30, v24);
  v27 = (void *)objc_msgSend_nodeWithModel_(VFXNode, v25, (uint64_t)v20, v26);
  objc_msgSend_setHidden_(v27, v28, 1, v29);
  objc_msgSend_setCategoryBitMask_(v27, v30, 0xFFFFLL, v31);
  return objc_msgSend_addChildNode_((void *)qword_1EEF66CB8, v32, (uint64_t)v27, v33);
}

uint64_t sub_1B19A5A18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  float v16;
  void *v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *Material;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  _QWORD v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  v6 = (void *)objc_msgSend_model(a2, (const char *)a2, a3, a4);
  v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  v16 = *(float *)(a1 + 40);
  if (v16 != 1.0)
  {
    v17 = (void *)objc_msgSend_model(a2, v13, v14, v15);
    *(float *)&v18 = v16;
    objc_msgSend_setRadius_(v17, v19, v20, v21, v18);
  }
  v22 = (void *)objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v22, v23, v24, v25))
  {
    v29 = (void *)objc_msgSend_model(a2, v26, v27, v28);
    Material = (void *)objc_msgSend_firstMaterial(v29, v30, v31, v32);
    v70[0] = (id)objc_msgSend_copy(Material, v34, v35, v36);
    v38 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v37, (uint64_t)v70, 1);
  }
  else
  {
    v38 = MEMORY[0x1E0C9AA60];
  }
  v39 = (void *)objc_msgSend_model(a2, v26, v27, v28);
  objc_msgSend_setMaterials_(v39, v40, v38, v41);
  v42 = *(_QWORD *)(a1 + 32);
  v46 = (void *)objc_msgSend_model(a2, v43, v44, v45);
  v50 = (void *)objc_msgSend_firstMaterial(v46, v47, v48, v49);
  v54 = (void *)objc_msgSend_diffuse(v50, v51, v52, v53);
  objc_msgSend_setContents_(v54, v55, v42, v56);
  v60 = (void *)objc_msgSend_model(a2, v57, v58, v59);
  v64 = (void *)objc_msgSend_firstMaterial(v60, v61, v62, v63);
  objc_msgSend_setShadingModel_(v64, v65, 2, v66);
  return objc_msgSend_setIsAuthoring_(a2, v67, 1, v68);
}

_QWORD *sub_1B19A5B50(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1B21AB51C(a1, "GBuffer");
  *result = off_1E63D0778;
  result[3] = a2;
  return result;
}

uint64_t sub_1B19A5B88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v5, *(_WORD *)(a1 + 8), 9273, 1656467160);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v6, *(_WORD *)(a1 + 8), 9273, -797957750);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v7, *(_WORD *)(a1 + 8), 9273, 1893898584);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v8, *(_WORD *)(a1 + 8), 9273, 1490954098);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v9, *(_WORD *)(a1 + 8), 9273, -287492009);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v10, *(_WORD *)(a1 + 8), 9273, 1251382574);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v11, *(_WORD *)(a1 + 8), 9273, -1170177454);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v12, *(_WORD *)(a1 + 8), 9273, -495228831);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v13, *(_WORD *)(a1 + 8), 9273, -965507924);
  return sub_1B17A371C(a2, &v5, 9);
}

uint64_t sub_1B19A5CD0@<X0>(CFX::RG::ResourceIdentifier *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = CFX::RG::ResourceIdentifier::finalColor(a1);
  return sub_1B17A371C(a2, v4, 1);
}

unint64_t sub_1B19A5D38(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *a3;
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a3 + 1);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v10 = v7;
      v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B19A5DBC(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const __CFDictionary *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  CFX::RG::Resource *v88;
  CFX::RG::Resource *v89;
  CFX::RG::Resource *v90;
  MTLPixelFormat v91;
  CFX::RG::Resource *v92;
  CFX::RG::Resource *v93;
  CFX::RG::Resource *v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _BYTE *v105;
  char v106;
  unsigned __int8 *v107;
  __int16 v108;
  int v109;
  CFX::RG::Resource *v110;
  unint64_t v111;
  CFX::RG::Resource *v112;
  CFX::RG::Resource *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _OWORD v123[10];
  _OWORD v124[10];
  _OWORD v125[10];
  _OWORD v126[10];
  _OWORD v127[10];
  _OWORD v128[10];
  _OWORD v129[10];
  _OWORD v130[10];
  __int128 v131;
  __int16 v132;
  char v133;
  CFX::RG::Resource *v134;
  CFX::RG::Resource *v135;
  CFX::RG::Resource *v136;
  CFX::RG::Resource *v137;
  CFX::RG::Resource *v138;
  CFX::RG::Resource *v139;
  CFX::RG::Resource *v140;
  CFX::RG::Resource *v141;
  CFX::RG::Resource *v142;
  _OWORD v143[10];

  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 24), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v19 = sub_1B1813884(*(_QWORD *)(a1 + 24), v12, v13, v14, v15, v16, v17, v18);
  v27 = sub_1B1814768(*(uint64_t **)(a1 + 24), v20, v21, v22, v23, v24, v25, v26);
  if (v27)
  {
    v35 = sub_1B186CFA8((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34);
    if (v35)
    {
      v43 = (uint64_t)v35;
      v44 = sub_1B1865A88((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42);
      sub_1B187B5FC(v19, v45, v46, v47, v48, v49, v50, v51);
      sub_1B18652E8(v43, v52, v53, v54, v55, v56, v57, v58);
      v66 = sub_1B18650B8(v43, v59, v60, v61, v62, v63, v64, v65);
      sub_1B18651D0(v43, v67, v68, v69, v70, v71, v72, v73);
      sub_1B1865584(v43, v74, v75, v76, v77, v78, v79, v80);
      sub_1B186569C(v43, v81, v82, v83, v84, v85, v86, v87);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormatIf(&v131, MTLPixelFormatRGBA16Float, v44, (uint64_t)v143);
      v110 = sub_1B17A34D0(a3, (uint64_t)"COLOR", v143);
      CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v110);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatDepth32Float, (uint64_t)v130);
      v112 = sub_1B17A34D0(a3, (uint64_t)"DEPTH", v130);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA8Unorm, (uint64_t)v129);
      v113 = sub_1B17A34D0(a3, (uint64_t)"Albedo", v129);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v128);
      v88 = sub_1B17A34D0(a3, (uint64_t)"Normals", v128);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v127);
      v89 = sub_1B17A34D0(a3, (uint64_t)"RoughnessMetalness", v127);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v126);
      v90 = sub_1B17A34D0(a3, (uint64_t)"Emission", v126);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      if (v66)
        v91 = MTLPixelFormatRGBA16Float;
      else
        v91 = MTLPixelFormatRG16Float;
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, v91, (uint64_t)v125);
      v92 = sub_1B17A34D0(a3, (uint64_t)"Velocity", v125);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v124);
      v93 = sub_1B17A34D0(a3, (uint64_t)"ClearCoat", v124);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v123);
      v94 = sub_1B17A34D0(a3, (uint64_t)"Subsurface", v123);
      objc_msgSend_setSampleCount_(v11, v95, 1, v96);
      v97 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)&v131 = "GBuffer";
      *((_QWORD *)&v131 + 1) = v97;
      v132 = 0;
      v133 = 1;
      v134 = v110;
      v135 = v112;
      v136 = v113;
      v111 = (unint64_t)v92;
      v137 = v88;
      v138 = v89;
      v139 = v90;
      v140 = v92;
      v141 = v93;
      v142 = v94;
      v104 = sub_1B18E0610(a3, (uint64_t *)&v131, v98, v99, v100, v101, v102, v103);
      v105 = *(_BYTE **)(v104 + 24);
      v106 = *v105;
      if (*v105)
      {
        v107 = v105 + 1;
        v108 = -25147;
        do
        {
          v108 = 403 * (v108 ^ v106);
          v109 = *v107++;
          v106 = v109;
        }
        while (v109);
      }
      else
      {
        v108 = -25147;
      }
      if (v110)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v122, *(_WORD *)(a1 + 8), v108, 1656467160);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v122, (unint64_t)v110, v104);
      }
      if (v112)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v121, *(_WORD *)(a1 + 8), v108, -797957750);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v121, (unint64_t)v112, v104);
      }
      if (v113)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v120, *(_WORD *)(a1 + 8), v108, 1893898584);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v120, (unint64_t)v113, v104);
      }
      if (v88)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v119, *(_WORD *)(a1 + 8), v108, 1490954098);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v119, (unint64_t)v88, v104);
      }
      if (v89)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v118, *(_WORD *)(a1 + 8), v108, -287492009);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v118, (unint64_t)v89, v104);
      }
      if (v90)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v117, *(_WORD *)(a1 + 8), v108, 1251382574);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v117, (unint64_t)v90, v104);
      }
      if (v111)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v116, *(_WORD *)(a1 + 8), v108, -1170177454);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v116, v111, v104);
      }
      if (v93)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v115, *(_WORD *)(a1 + 8), v108, -495228831);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v115, (unint64_t)v93, v104);
      }
      if (v94)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v114, *(_WORD *)(a1 + 8), v108, -965507924);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v114, (unint64_t)v94, v104);
      }
    }
  }
}

void sub_1B19A62C4(unsigned int *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (*a1)
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = *((_QWORD *)a1 + 1);
      if (*(_DWORD *)(v4 + v2))
        free(*(void **)(v4 + v2 + 8));
      v5 = v4 + v2;
      *(_QWORD *)(v5 + 8) = 0;
      *(_DWORD *)v5 = 0;
      ++v3;
      v6 = *a1;
      v2 += 16;
    }
    while (v3 < v6);
    if ((_DWORD)v6)
      free(*((void **)a1 + 1));
  }
  *((_QWORD *)a1 + 1) = 0;
  *a1 = 0;
}

float sub_1B19A6344(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6;
  double v7;
  double v8;
  double v9;
  float v10;
  double v11;
  float v12;
  float v13;

  v6 = a5 - a3;
  v7 = a6 - a4;
  v8 = a1 - a3;
  v9 = a2 - a4;
  v10 = hypot(a5 - a3, a6 - a4);
  v11 = hypot(v8, v9);
  if (v10 == 0.0)
    return 0.0;
  v12 = v11;
  if (v12 == 0.0)
    return 0.0;
  v13 = (v9 * v7 + v6 * v8) / (float)(v10 * v12);
  if (v13 > 1.0)
    v13 = 1.0;
  if (v13 < -1.0)
    v13 = -1.0;
  return acosf(v13);
}

__n128 sub_1B19A63F4(int *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  char *v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v4 = *a1;
  if (*a1 == a1[1])
  {
    v5 = 2 * v4;
    a1[1] = v5;
    v6 = (char *)malloc_type_realloc(*((void **)a1 + 1), 88 * v5, 0x1020040662E9E32uLL);
    *((_QWORD *)a1 + 1) = v6;
    v4 = *a1;
  }
  else
  {
    v6 = (char *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  v7 = &v6[88 * v4];
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v8;
  result = *(__n128 *)(a2 + 32);
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  *((_QWORD *)v7 + 10) = *(_QWORD *)(a2 + 80);
  *((_OWORD *)v7 + 3) = v10;
  *((_OWORD *)v7 + 4) = v11;
  *((__n128 *)v7 + 2) = result;
  return result;
}

void sub_1B19A6488(unsigned int a1, void ***a2)
{
  uint64_t v3;
  void ***v4;
  void **v5;

  v3 = a1;
  if (a1)
  {
    v4 = a2;
    do
    {
      v5 = *v4++;
      free(v5[1]);
      free(v5);
      --v3;
    }
    while (v3);
  }
  free(a2);
}

_QWORD *sub_1B19A64D8(int *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  _QWORD *result;

  v4 = *a1;
  if (*a1 == a1[1])
  {
    v5 = 2 * v4;
    a1[1] = v5;
    result = malloc_type_realloc(*((void **)a1 + 1), 8 * v5, 0x2004093837F09uLL);
    *((_QWORD *)a1 + 1) = result;
    v4 = *a1;
  }
  else
  {
    result = (_QWORD *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  result[v4] = a2;
  return result;
}

void sub_1B19A6544(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>)
{
  double v16;
  double v17;
  float v18;
  double v19;
  double v20;
  long double v21;
  double v22;
  float v23;
  double v24;
  double v25;
  double v26;
  float v27;
  float v28;
  float v29;
  double v30;
  long double v31;
  float v32;
  float v33;
  float v34;
  double v36;
  double v37;

  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(_QWORD *)(a4 + 16) = a1;
  *(int64x2_t *)(a4 + 24) = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  *(_QWORD *)(a4 + 40) = a2;
  *(_DWORD *)(a4 + 48) = a3;
  *(_QWORD *)(a4 + 52) = -1;
  v16 = a5 - a7;
  v17 = a6 - a8;
  v18 = hypot(a5 - a7, a6 - a8);
  v19 = v18;
  v20 = v16 / v19;
  v36 = a9;
  v37 = a10;
  v21 = a10 - a6;
  v22 = v17 / v19;
  v23 = hypot(a9 - a5, v21);
  v24 = v23;
  v25 = (a9 - a5) / v24;
  v26 = v21 / v24;
  v27 = v20 + v25;
  v28 = v22 + v26;
  v29 = hypotf(v27, v28);
  if (v29 == 0.0)
  {
    v30 = *MEMORY[0x1E0C9D538];
    v31 = *(double *)(MEMORY[0x1E0C9D538] + 8);
  }
  else
  {
    v30 = (float)(v27 / v29);
    v31 = (float)(v28 / v29);
  }
  v32 = hypot(v30, v31);
  if (v32 >= 0.00001)
  {
    *(_BYTE *)(a4 + 84) = v36 * a6 - a5 * v37 - v36 * a8 + a7 * v37 + a5 * a8 - a7 * a6 > 0.0;
    *(long double *)(a4 + 64) = -v31;
    *(double *)(a4 + 72) = v30;
    v33 = sub_1B19A6344(a7, a8, a5, a6, v36, v37);
    v34 = sin(v33 * 0.5);
    if (fabsf(v34) >= 0.00001)
      *(float *)(a4 + 80) = 1.0 / v34;
  }
  else
  {
    *(double *)(a4 + 64) = v25;
    *(double *)(a4 + 72) = v26;
  }
}

double sub_1B19A6704@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v3;
  double v4;
  double v5;
  double v6;
  float v7;
  double v8;
  double v9;
  double v10;
  float v11;
  float v12;
  float v13;
  float v14;
  double v15;
  double v16;
  double result;

  v3 = *(double *)(a1 + 64);
  v4 = *(double *)(a1 + 72);
  v5 = *(double *)(a2 + 64);
  v6 = *(double *)(a2 + 72);
  v7 = v3 * v6 - v4 * v5;
  if (v7 == 0.0
    || (v8 = *(double *)(a1 + 8),
        v9 = v8 - *(double *)(a2 + 8),
        v10 = *(double *)a1 - *(double *)a2,
        v11 = (v5 * v9 - v6 * v10) / v7,
        v11 < 0.0)
    || (v12 = (v10 * -v4 + v3 * v9) / v7, v12 < 0.0))
  {
    result = -0.0078125;
    *(_OWORD *)a3 = xmmword_1B2268D18;
    *(_OWORD *)(a3 + 16) = unk_1B2268D28;
    *(_QWORD *)(a3 + 32) = 0;
  }
  else
  {
    v13 = v11 / *(float *)(a1 + 80);
    v14 = v12 / *(float *)(a2 + 80);
    v15 = (float)(1.0 - v11);
    v16 = v11;
    result = (v8 + v4) * v16 + v15 * v8;
    *(double *)(a3 + 8) = (*(double *)a1 + v3) * v16 + v15 * *(double *)a1;
    *(double *)(a3 + 16) = result;
    if (v13 <= v14)
      *(float *)&result = v14;
    else
      *(float *)&result = v13;
    *(_DWORD *)(a3 + 4) = LODWORD(result);
    *(_DWORD *)a3 = 1;
    *(_QWORD *)(a3 + 24) = a1;
    *(_QWORD *)(a3 + 32) = a2;
  }
  return result;
}

void sub_1B19A67DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  long double v14;
  float v15;
  double v16;
  long double v17;
  double v18;
  float v19;
  float v20;
  double v21;
  double v22;
  double v23;
  double v24;
  float v25;
  float v26;
  float v27;
  float v28;
  double v29;
  float v30;
  float v31;
  float v32;
  float v33;
  double v34;
  float v35;
  double v36;
  double v37;
  float v38;
  float v39;

  v9 = *(double *)a1;
  v8 = *(double *)(a1 + 8);
  v10 = *(double *)a2;
  v11 = *(double *)(a2 + 8);
  v13 = *(double *)a3;
  v12 = *(double *)(a3 + 8);
  v14 = *(double *)a3 - *(double *)a2;
  v15 = hypot(v14, v12 - v11);
  v16 = v15;
  v17 = v14 / v16;
  v18 = (v12 - v11) / v16;
  v19 = v9 - v10;
  v20 = v8 - v11;
  v21 = *(float *)(a2 + 80);
  v22 = *(float *)(a1 + 80);
  v23 = *(double *)(a1 + 64);
  v24 = *(double *)(a1 + 72);
  v25 = *(double *)(a2 + 64) * v21 - v23 * v22;
  v26 = *(double *)(a2 + 72) * v21 - v24 * v22;
  v27 = v17;
  v28 = v18;
  v29 = fabsf(v27);
  if (v29 <= 0.00001)
  {
    if (fabsf(v28) <= 0.00001)
      goto LABEL_14;
    v33 = (float)(v27 * v26) / v28;
    if (vabds_f32(v25, v33) <= 0.00001)
      goto LABEL_14;
    v31 = (float)(v19 - (float)((float)(v20 * v27) / v28)) / (float)(v25 - v33);
    v32 = (float)(v20 - (float)(v26 * v31)) / v28;
  }
  else
  {
    v30 = (float)(v28 * v25) / v27;
    if (vabds_f32(v26, v30) <= 0.00001)
      goto LABEL_14;
    v31 = (float)(v20 - (float)((float)(v19 * v28) / v27)) / (float)(v26 - v30);
    v32 = (float)(v19 - (float)(v25 * v31)) / v27;
  }
  if (v31 < 0.0 || v32 < 0.0)
    goto LABEL_14;
  v34 = *(float *)(a3 + 80);
  if (v29 > 0.00001)
  {
    v35 = -v27;
    v36 = *(double *)(a3 + 64) * v34 - v23 * v22;
    v37 = v9 - v13;
    goto LABEL_13;
  }
  if (fabsf(v28) <= 0.00001)
  {
LABEL_14:
    *(_OWORD *)a4 = xmmword_1B2268D18;
    *(_OWORD *)(a4 + 16) = unk_1B2268D28;
    *(_QWORD *)(a4 + 32) = 0;
    return;
  }
  v35 = -v28;
  v36 = *(double *)(a3 + 72) * v34 - v24 * v22;
  v37 = v8 - v12;
LABEL_13:
  v38 = v37;
  v39 = v36;
  if ((float)((float)(v38 - (float)(v39 * v31)) / v35) < 0.0)
    goto LABEL_14;
  *(_DWORD *)a4 = 2;
  *(float *)(a4 + 4) = v31;
  *(double *)(a4 + 8) = v9 + v23 * v22 * v31;
  *(double *)(a4 + 16) = v8 + v24 * v22 * v31;
  *(_QWORD *)(a4 + 24) = a1;
  *(_QWORD *)(a4 + 32) = a2;
}

float sub_1B19A69E8(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  float v4;
  uint64_t v5;

  if (!a1)
    return 0.0;
  v2 = 0;
  v3 = (double *)(a2 + 8);
  v4 = 0.0;
  do
  {
    if (a1 - 1 == v2)
      v5 = 0;
    else
      v5 = v2 + 1;
    v4 = *(v3 - 1) * *(double *)(a2 + 24 * v5 + 8) - *v3 * *(double *)(a2 + 24 * v5) + v4;
    v3 += 3;
    ++v2;
  }
  while (a1 != v2);
  return v4 * 0.5;
}

void sub_1B19A6A54(int *a1, unsigned int a2, uint64_t a3)
{
  int *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[5];
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  if (a2 >= 3 && fabsf(sub_1B19A69E8(a2, a3)) >= 0.0001)
  {
    v6 = (int *)malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    *(_QWORD *)v6 = 0x400000000;
    v7 = malloc_type_malloc(0x160uLL, 0x1020040662E9E32uLL);
    v8 = 0;
    *((_QWORD *)v6 + 1) = v7;
    v9 = a3 + 8;
    do
    {
      v20 = 0;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v15 = 0u;
      v11 = v8 + 1;
      if (a2 - 1 == v8)
        v12 = 0;
      else
        v12 = v8 + 1;
      v10 = (double *)(a3 + 24 * ((a2 - 1 + v8) % a2));
      sub_1B19A6544(*(_QWORD *)(v9 + 8), (uint64_t)v6, v8, (uint64_t)&v15, *(double *)(v9 - 8), *(double *)v9, *v10, v10[1], *(double *)(a3 + 24 * v12), *(double *)(a3 + 24 * v12 + 8));
      v13[2] = v17;
      v13[3] = v18;
      v13[4] = v19;
      v14 = v20;
      v13[0] = v15;
      v13[1] = v16;
      sub_1B19A63F4(v6, (uint64_t)v13);
      v9 += 24;
      v8 = v11;
    }
    while (a2 != v11);
    sub_1B19A64D8(a1, (uint64_t)v6);
  }
}

void sub_1B19A6BDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  void *v6;
  void *v7;
  uint64_t *v9;

  *(_QWORD *)(a3 + 48) = 0;
  *(float *)(a3 + 52) = a4;
  v6 = malloc_type_malloc(0xE0uLL, 0x10A0040E17462F8uLL);
  *(_QWORD *)(a3 + 16) = 0x400000000;
  *(_QWORD *)(a3 + 24) = v6;
  *(_QWORD *)(a3 + 32) = a1;
  *(_QWORD *)(a3 + 40) = a2;
  v7 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
  *(_QWORD *)a3 = 0x400000000;
  *(_QWORD *)(a3 + 8) = v7;
  a1 = a1;
  if ((_DWORD)a1)
  {
    v9 = (uint64_t *)(a2 + 8);
    do
    {
      sub_1B19A6A54((int *)a3, *(v9 - 1), *v9);
      v9 += 2;
      --a1;
    }
    while (a1);
  }
}

void sub_1B19A6C74(uint64_t a1)
{
  sub_1B19A6CA8(*(_QWORD *)(a1 + 16), *(_OWORD **)(a1 + 24));
  sub_1B19A6488(*(_QWORD *)a1, *(void ****)(a1 + 8));
  sub_1B19A62C4((unsigned int *)(a1 + 32));
}

void sub_1B19A6CA8(unsigned int a1, _OWORD *a2)
{
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  _OWORD v6[3];
  uint64_t v7;

  v3 = a1;
  if (a1)
  {
    v4 = a2;
    do
    {
      v5 = v4[1];
      v6[0] = *v4;
      v6[1] = v5;
      v6[2] = v4[2];
      v7 = *((_QWORD *)v4 + 6);
      sub_1B19A6C74(v6);
      v4 = (_OWORD *)((char *)v4 + 56);
      --v3;
    }
    while (v3);
  }
  free(a2);
}

__n128 sub_1B19A6D10(int *a1, uint64_t a2)
{
  int v4;
  unsigned int v5;
  char *v6;
  char *v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v4 = *a1;
  if (*a1 == a1[1])
  {
    v5 = 2 * v4;
    a1[1] = v5;
    v6 = (char *)malloc_type_realloc(*((void **)a1 + 1), 56 * v5, 0x10A0040E17462F8uLL);
    *((_QWORD *)a1 + 1) = v6;
    v4 = *a1;
  }
  else
  {
    v6 = (char *)*((_QWORD *)a1 + 1);
  }
  *a1 = v4 + 1;
  v7 = &v6[56 * v4];
  result = *(__n128 *)a2;
  v9 = *(_OWORD *)(a2 + 16);
  v10 = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 48);
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  *(__n128 *)v7 = result;
  return result;
}

float sub_1B19A6D9C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  float v9;
  unint64_t v10;
  unint64_t i;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  float v21;
  __int128 v22;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  *(_DWORD *)a4 = 0;
  sub_1B19A6704(a2, *(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 88 * ((*(_DWORD *)(a2 + 48) + 1) % **(_DWORD **)(a2 + 40)), (uint64_t)&v25);
  v8 = v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 32) = v27;
  if (*(_DWORD *)a3)
    v9 = *(float *)(a3 + 4);
  else
    v9 = 3.4028e38;
  if (*(_BYTE *)(a2 + 84))
  {
    v10 = *a1;
    if ((_DWORD)v10)
    {
      for (i = 0; i < v10; ++i)
      {
        v12 = *(unsigned int **)(*((_QWORD *)a1 + 1) + 8 * i);
        v13 = *v12;
        if ((_DWORD)v13)
        {
          v14 = 0;
          v15 = 1;
          do
          {
            v16 = *((_QWORD *)v12 + 1);
            v17 = v16 + v14;
            if (v15 == v13)
              v18 = 0;
            else
              v18 = v15;
            v19 = v16 + 88 * v18;
            if (v17 != a2 && v19 != a2)
            {
              v27 = 0;
              v25 = 0u;
              v26 = 0u;
              sub_1B19A67DC(a2, v17, v19, (uint64_t)&v25);
              if ((_DWORD)v25)
              {
                v21 = *((float *)&v25 + 1);
                if (v9 + -0.00001 > *((float *)&v25 + 1))
                {
                  *(_DWORD *)a3 = 0;
                  v22 = v26;
                  *(_OWORD *)a4 = v25;
                  *(_OWORD *)(a4 + 16) = v22;
                  *(_QWORD *)(a4 + 32) = v27;
                  v9 = v21;
                }
              }
              v13 = *v12;
            }
            v14 += 88;
          }
          while (v15++ < v13);
          v10 = *a1;
        }
      }
    }
  }
  return v9;
}

uint64_t sub_1B19A6F24(unsigned int *a1, int a2, float a3, float a4)
{
  unint64_t v4;
  unint64_t v8;
  unsigned int v9;
  double *v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  unsigned int v18;
  float v19;
  float v20;
  _QWORD *v21;
  int v22;
  double *v23;

  LODWORD(v4) = *a1;
  if (*a1)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    for (i = 80; ; i += 88)
    {
      v12 = *((_QWORD *)a1 + 1);
      v13 = v12 + i;
      v14 = (float)(*(float *)(v12 + i) * a3);
      v15 = *(double *)(v12 + i - 80) + v14 * *(double *)(v12 + i - 16);
      v16 = *(double *)(v12 + i - 72) + v14 * *(double *)(v12 + i - 8);
      v17 = *(_QWORD *)(v12 + i - 64);
      if (v17)
      {
        *(double *)(v17 + 48) = v15;
        *(double *)(v17 + 56) = v16;
        *(float *)(v17 + 64) = a4;
      }
      *(double *)(v13 - 56) = v15;
      *(double *)(v13 - 48) = v16;
      *(_DWORD *)(v13 - 28) = a2;
      if (!v9)
        break;
      v18 = v9 - 1;
      v19 = hypot(v10[3 * v18] - v15, v10[3 * v18 + 1] - v16);
      if (v19 >= 1.0)
      {
        if (v8 != (_DWORD)v4 - 1 || (v20 = hypot(*v10 - v15, v10[1] - v16), v20 >= 1.0))
        {
          v22 = v9 + 1;
          v10 = (double *)malloc_type_realloc(v10, 24 * (v9 + 1), 0x10200403ED2C137uLL);
          v23 = &v10[3 * v9];
          *v23 = v15;
          v23[1] = v16;
          v21 = v23 + 2;
          goto LABEL_12;
        }
        v18 = 0;
      }
LABEL_13:
      *(_DWORD *)(v12 + i - 24) = v18;
      ++v8;
      v4 = *a1;
      if (v8 >= v4)
        return v9;
    }
    v10 = (double *)malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
    *v10 = v15;
    v10[1] = v16;
    v21 = v10 + 2;
    v22 = 1;
LABEL_12:
    *v21 = v17;
    v18 = v9;
    v9 = v22;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1B19A70E0(unsigned int *a1, float a2)
{
  unint64_t v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;

  if (*a1)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = sub_1B19A6F24(*(unsigned int **)(*((_QWORD *)a1 + 1) + 8 * v4), v4, a2, *((float *)a1 + 13) + a2);
      v9 = v7;
      v10 = (uint64_t)v8;
      if (v7 < 3)
      {
        if ((_DWORD)v7)
          free(v8);
      }
      else
      {
        v5 = (char *)malloc_type_realloc(v5, 16 * (v6 + 1), 0x1020040D5A9D86FuLL);
        v11 = (uint64_t *)&v5[16 * v6];
        *v11 = v9;
        v11[1] = v10;
        ++v6;
      }
      ++v4;
    }
    while (v4 < *a1);
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t sub_1B19A71C4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t result;
  void **v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unsigned int v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _QWORD *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  int v44;
  char *v45;
  unsigned int v46;
  void **v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  char *v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  int v61;
  char *v62;
  unsigned int v63;
  _DWORD *v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int v69;
  char *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  int v81;
  char *v82;
  unsigned int v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  char *v89;
  uint64_t v90;
  unsigned int v92;
  _DWORD *v93;
  uint64_t v94;
  _DWORD *v95;
  unint64_t v96;

  v9 = *(_QWORD *)(a4 + 24);
  v8 = *(_QWORD *)(a4 + 32);
  *a5 = *(_DWORD *)(v9 + 52);
  *a6 = *(_DWORD *)(v8 + 52);
  v10 = *(unsigned int *)(v9 + 52);
  if (v10 >= a2 || (v11 = *(unsigned int *)(v8 + 52), v11 >= a2))
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: boundaryOfVerticesIndex out of bound"), a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, v90);
    return 0;
  }
  else
  {
    v14 = (_DWORD *)(a3 + 16 * v11);
    v15 = *(_DWORD *)(a3 + 16 * v10);
    v16 = *(_DWORD *)(v9 + 56);
    v17 = *(_DWORD *)(v8 + 56);
    v96 = *v14;
    v18 = (v17 + 1) % *v14;
    *a8 = 0;
    *a7 = 0;
    v19 = (v16 + 1) % v15;
    *((_QWORD *)a8 + 1) = 0;
    *((_QWORD *)a7 + 1) = 0;
    if ((_DWORD)v10 == (_DWORD)v11)
    {
      result = 3;
      if (v16 != v17 && v16 != (_DWORD)v18)
      {
        v94 = a3 + 16 * v10;
        v21 = (void **)(v94 + 8);
        v22 = (uint64_t *)(*(_QWORD *)(v94 + 8) + 24 * v16);
        v23 = *v22;
        v24 = v22[1];
        *a7 = 1;
        v25 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
        *((_QWORD *)a7 + 1) = v25;
        *v25 = v23;
        v25[1] = v24;
        v25[2] = 0;
        v26 = *a7;
        do
        {
          v27 = (uint64_t *)((char *)*v21 + 24 * v18);
          v28 = v27[2];
          v29 = *v27;
          v30 = v27[1];
          v25 = malloc_type_realloc(v25, 24 * (v26 + 1), 0x10200403ED2C137uLL);
          *((_QWORD *)a7 + 1) = v25;
          v31 = *a7;
          v32 = &v25[3 * *a7];
          *v32 = v29;
          v32[1] = v30;
          v32[2] = v28;
          v26 = v31 + 1;
          *a7 = v26;
          LODWORD(v18) = ((int)v18 + 1) % v15;
        }
        while ((_DWORD)v18 != v16);
        v33 = (uint64_t *)((char *)*v21 + 24 * v16);
        v34 = *v33;
        v35 = v33[1];
        *a8 = 1;
        v36 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
        *((_QWORD *)a8 + 1) = v36;
        *v36 = v34;
        v36[1] = v35;
        v36[2] = 0;
        v37 = *a8;
        while (v19 != v17)
        {
          v38 = (uint64_t *)((char *)*v21 + 24 * v19);
          v39 = v38[2];
          v40 = *v38;
          v41 = v38[1];
          v36 = malloc_type_realloc(v36, 24 * (v37 + 1), 0x10200403ED2C137uLL);
          *((_QWORD *)a8 + 1) = v36;
          v42 = *a8;
          v43 = &v36[3 * *a8];
          *v43 = v40;
          v43[1] = v41;
          v43[2] = v39;
          v37 = v42 + 1;
          *a8 = v37;
          if (v19 + 1 == v15)
            v19 = 0;
          else
            ++v19;
        }
        v65 = (uint64_t *)((char *)*v21 + 24 * v17);
        v66 = *v65;
        v67 = v65[1];
        v68 = (char *)malloc_type_realloc(v36, 24 * (v37 + 1), 0x10200403ED2C137uLL);
        *((_QWORD *)a8 + 1) = v68;
        v69 = *a8;
        v70 = &v68[24 * *a8];
        *(_QWORD *)v70 = v66;
        *((_QWORD *)v70 + 1) = v67;
        *((_QWORD *)v70 + 2) = 0;
        *a8 = v69 + 1;
        if (*(_DWORD *)v94)
          free(*v21);
        *v21 = 0;
        *(_DWORD *)v94 = 0;
        return 1;
      }
    }
    else
    {
      v92 = v16;
      v93 = (_DWORD *)(a3 + 16 * v11);
      v95 = (_DWORD *)(a3 + 16 * v10);
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v47 = (void **)(v14 + 2);
      do
      {
        v48 = (uint64_t *)((char *)*v47 + 24 * v46);
        v49 = v48[2];
        v50 = *v48;
        v51 = v48[1];
        v45 = (char *)malloc_type_realloc(v45, 24 * (v44 + 1), 0x10200403ED2C137uLL);
        *((_QWORD *)a7 + 1) = v45;
        v52 = *a7;
        v53 = &v45[24 * *a7];
        *(_QWORD *)v53 = v50;
        *((_QWORD *)v53 + 1) = v51;
        *((_QWORD *)v53 + 2) = v49;
        v44 = v52 + 1;
        *a7 = v52 + 1;
        ++v46;
      }
      while (v46 <= v17);
      v54 = a3 + 16 * v10;
      v56 = *(_QWORD *)(v54 + 8);
      v55 = (void **)(v54 + 8);
      v57 = (uint64_t *)(v56 + 24 * v92);
      v58 = *v57;
      v59 = v57[1];
      v60 = (char *)malloc_type_realloc(v45, 24 * (v52 + 2), 0x10200403ED2C137uLL);
      *((_QWORD *)a7 + 1) = v60;
      v61 = *a7;
      v62 = &v60[24 * *a7];
      *(_QWORD *)v62 = v58;
      *((_QWORD *)v62 + 1) = v59;
      *((_QWORD *)v62 + 2) = 0;
      v63 = v61 + 1;
      *a7 = v63;
      if (v19 == v92)
      {
        v64 = v95;
      }
      else
      {
        v64 = v95;
        do
        {
          v71 = (uint64_t *)((char *)*v55 + 24 * v19);
          v72 = v71[2];
          v73 = *v71;
          v74 = v71[1];
          v60 = (char *)malloc_type_realloc(v60, 24 * (v63 + 1), 0x10200403ED2C137uLL);
          *((_QWORD *)a7 + 1) = v60;
          v75 = *a7;
          v76 = &v60[24 * *a7];
          *(_QWORD *)v76 = v73;
          *((_QWORD *)v76 + 1) = v74;
          *((_QWORD *)v76 + 2) = v72;
          v63 = v75 + 1;
          *a7 = v63;
          if (v19 + 1 == v15)
            v19 = 0;
          else
            ++v19;
        }
        while (v19 != v92);
      }
      v77 = (uint64_t *)((char *)*v55 + 24 * v92);
      v78 = *v77;
      v79 = v77[1];
      v80 = (char *)malloc_type_realloc(v60, 24 * (v63 + 1), 0x10200403ED2C137uLL);
      *((_QWORD *)a7 + 1) = v80;
      v81 = *a7;
      v82 = &v80[24 * *a7];
      *(_QWORD *)v82 = v78;
      *((_QWORD *)v82 + 1) = v79;
      *((_QWORD *)v82 + 2) = 0;
      v83 = v81 + 1;
      *a7 = v83;
      if ((_DWORD)v18)
      {
        do
        {
          v84 = (uint64_t *)((char *)*v47 + 24 * v18);
          v85 = v84[2];
          v86 = *v84;
          v87 = v84[1];
          v80 = (char *)malloc_type_realloc(v80, 24 * (v83 + 1), 0x10200403ED2C137uLL);
          *((_QWORD *)a7 + 1) = v80;
          v88 = *a7;
          v89 = &v80[24 * *a7];
          *(_QWORD *)v89 = v86;
          *((_QWORD *)v89 + 1) = v87;
          *((_QWORD *)v89 + 2) = v85;
          v83 = v88 + 1;
          *a7 = v83;
          ++v18;
        }
        while (v18 < v96);
      }
      if (*v64)
        free(*v55);
      *v55 = 0;
      *v64 = 0;
      if (*v93)
        free(*v47);
      *v47 = 0;
      *v93 = 0;
      return 2;
    }
  }
  return result;
}

void sub_1B19A7680(unsigned int *a1, float a2)
{
  unsigned int *v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  __int128 *v7;
  int v8;
  unsigned int v9;
  float v10;
  unsigned int *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  float v15;
  char *v16;
  __int128 v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int *v37;
  __int128 v38;
  __int128 v39;
  int v40;
  unint64_t v41;
  char *v42;
  unsigned int *v43;
  uint64_t v44;
  unsigned int v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  _BYTE v52[56];
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  __int128 v57;
  _QWORD v58[2];
  __int128 v59;
  int v60;
  int v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;

  v3 = a1;
  v4 = *a1;
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 3.4028e38;
    do
    {
      v11 = *(unsigned int **)(*((_QWORD *)v3 + 1) + 8 * v5);
      if (*v11)
      {
        v50 = v5;
        v12 = 0;
        v13 = 0;
        do
        {
          v14 = *((_QWORD *)v11 + 1) + v12;
          v67 = 0;
          v65 = 0u;
          v66 = 0u;
          v64 = 0;
          v62 = 0u;
          v63 = 0u;
          v15 = sub_1B19A6D9C(v3, v14, (uint64_t)&v65, (uint64_t)&v62);
          if (v10 + -0.00001 > v15)
          {
            if (v6)
              free(v6);
            if (v7)
            {
              free(v7);
              v9 = 0;
              v8 = 0;
              v7 = 0;
            }
            else
            {
              v9 = 0;
              v8 = 0;
            }
            v6 = 0;
            v10 = v15;
          }
          if (vabds_f32(v15, v10) < 0.00001)
          {
            if ((_DWORD)v65)
            {
              v6 = (char *)malloc_type_realloc(v6, 40 * (v8 + 1), 0x1020040BD065CB0uLL);
              v16 = &v6[40 * v8];
              v17 = v66;
              *(_OWORD *)v16 = v65;
              *((_OWORD *)v16 + 1) = v17;
              *((_QWORD *)v16 + 4) = v67;
              ++v8;
            }
            if ((_DWORD)v62)
            {
              v7 = (__int128 *)malloc_type_realloc(v7, 40 * (v9 + 1), 0x1020040BD065CB0uLL);
              v18 = (char *)v7 + 40 * v9;
              v19 = v63;
              *(_OWORD *)v18 = v62;
              *((_OWORD *)v18 + 1) = v19;
              *((_QWORD *)v18 + 4) = v64;
              ++v9;
            }
            v3 = a1;
          }
          ++v13;
          v12 += 88;
        }
        while (v13 < *v11);
        v4 = *v3;
        v5 = v50;
      }
      ++v5;
    }
    while (v5 < v4);
  }
  else
  {
    v7 = 0;
    v6 = 0;
    v10 = 3.4028e38;
  }
  if (fabsf(v10) >= 0.00001)
  {
    *((float *)v3 + 12) = v10;
    v59 = 0uLL;
    v58[0] = 0;
    v58[1] = 0;
    v57 = 0uLL;
    v55 = 0;
    v56 = 0;
    v53 = 0;
    v54 = 0;
    if (v10 <= a2)
    {
      v22 = sub_1B19A70E0(v3, v10);
      v21 = v22;
      v30 = v29;
      *(_QWORD *)&v59 = v22;
      *((_QWORD *)&v59 + 1) = v29;
      if (!v6 || v7)
      {
        if (!(_DWORD)v22)
          goto LABEL_50;
        if (!v7)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v23, v24, v25, v26, v27, v28, (uint64_t)"bestSplitEvents");
        if (*(_DWORD *)(*((_QWORD *)v7 + 3) + 52) < v21 && *(_DWORD *)(*((_QWORD *)v7 + 4) + 52) < v21)
        {
          v38 = *v7;
          v39 = v7[1];
          v67 = *((_QWORD *)v7 + 4);
          v65 = v38;
          v66 = v39;
          v40 = sub_1B19A71C4(v22, v21, v30, (uint64_t)&v65, &v61, &v60, (unsigned int *)&v55, (unsigned int *)&v53);
          if (v40 == 2 || v40 == 1)
          {
            if ((_DWORD)v55)
              free(v56);
            if ((_DWORD)v53)
              free(v54);
            v37 = (unsigned int *)&v59;
            goto LABEL_37;
          }
        }
LABEL_29:
        v31 = *((float *)v3 + 12);
        v32 = v31 + *((float *)v3 + 13);
        v33 = a2 - v31;
        v34.n128_u64[1] = *((_QWORD *)&v59 + 1);
        v57 = v59;
        v34.n128_f64[0] = v33;
        if (v33 > 0.00001)
        {
          if ((_DWORD)v57)
          {
            sub_1B19A6BDC(v57, *((uint64_t *)&v57 + 1), (uint64_t)v52, v32);
            sub_1B19A6D10((int *)v3 + 4, (uint64_t)v52);
          }
          if (v3[4])
          {
            v35 = 0;
            v36 = 0;
            do
            {
              sub_1B19A7680(*((_QWORD *)v3 + 3) + v35, v33, v34);
              ++v36;
              v35 += 56;
            }
            while (v36 < v3[4]);
          }
          goto LABEL_50;
        }
        sub_1B19A62C4((unsigned int *)&v57);
        v37 = (unsigned int *)v58;
LABEL_37:
        sub_1B19A62C4(v37);
        goto LABEL_50;
      }
    }
    else
    {
      *((float *)v3 + 12) = a2;
      *(_QWORD *)&v59 = sub_1B19A70E0(v3, a2);
      *((_QWORD *)&v59 + 1) = v20;
      v21 = v59;
    }
    if (!v21)
      goto LABEL_50;
    goto LABEL_29;
  }
LABEL_50:
  if (v6)
    free(v6);
  if (v7)
    free(v7);
  if (byte_1EEF66CC8 == 1 && *v3)
  {
    v41 = 0;
    v42 = (char *)qword_1EEF66CD0;
    do
    {
      v43 = *(unsigned int **)(*((_QWORD *)v3 + 1) + 8 * v41);
      v42 = (char *)malloc_type_realloc(v42, 32 * (*v43 + dword_1EEF66CD8), 0x1000040E0EAB150uLL);
      qword_1EEF66CD0 = (uint64_t)v42;
      v44 = *v43;
      if ((_DWORD)v44)
      {
        v45 = dword_1EEF66CD8;
        v46 = (_OWORD *)*((_QWORD *)v43 + 1);
        do
        {
          v47 = v45++;
          v48 = *(_OWORD *)((char *)v46 + 24);
          v49 = &v42[32 * v47];
          *(_OWORD *)v49 = *v46;
          *((_OWORD *)v49 + 1) = v48;
          v46 = (_OWORD *)((char *)v46 + 88);
          --v44;
        }
        while (v44);
        dword_1EEF66CD8 = v45;
      }
      ++v41;
    }
    while (v41 < *v3);
  }
}

void sub_1B19A7AFC(uint64_t *a1, float a2)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int v14;
  _OWORD *v15;
  uint64_t v16;
  _OWORD v17[3];
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  v4 = *((unsigned int *)a1 + 2);
  v5 = malloc_type_malloc(16 * v4, 0x1020040D5A9D86FuLL);
  if ((_DWORD)v4)
  {
    v6 = 0;
    v7 = *a1;
    do
    {
      v8 = malloc_type_malloc(24 * *(unsigned int *)(v7 + 40 * v6 + 8), 0x10200403ED2C137uLL);
      v9 = (char *)&v5[4 * v6];
      *((_QWORD *)v9 + 1) = v8;
      v10 = v9 + 8;
      v7 = *a1;
      LODWORD(v11) = *(_DWORD *)(*a1 + 40 * v6 + 8);
      v5[4 * v6] = v11;
      if ((_DWORD)v11)
      {
        v12 = 0;
        v13 = 0;
        v14 = -1;
        do
        {
          v15 = (_OWORD *)(*(_QWORD *)(v7 + 40 * v6) + 80 * (v11 + v14));
          v16 = *v10 + v12;
          *(_QWORD *)(v16 + 16) = v15;
          *(_OWORD *)v16 = *v15;
          ++v13;
          v7 = *a1;
          v11 = *(unsigned int *)(*a1 + 40 * v6 + 8);
          --v14;
          v12 += 24;
        }
        while (v13 < v11);
      }
      ++v6;
    }
    while (v6 != v4);
  }
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v19 = 0u;
  sub_1B19A6BDC(v4, (uint64_t)v5, (uint64_t)&v19, 0.0);
  sub_1B19A7680((unsigned int *)&v19, a2);
  v17[0] = v19;
  v17[1] = v20;
  v17[2] = v21;
  v18 = v22;
  sub_1B19A6C74((uint64_t)v17);
}

float sub_1B19A7C64(_OWORD *a1, double a2)
{
  float v2;
  __int128 v3;
  float result;
  _OWORD v5[2];

  byte_1EEF66CC8 = 0;
  v2 = a2;
  v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  sub_1B19A7AFC((uint64_t *)v5, v2);
  return result;
}

void sub_1B19A7E9C(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t sub_1B19A7F44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addWorldReference_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

uint64_t sub_1B19A7FFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_removeWorldReference_(a2, (const char *)a2, *(_QWORD *)(a1 + 32), a4);
}

CFStringRef sub_1B19A80C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  return sub_1B193E5B0(v5, *(CFStringRef *)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19A863C(void *a1, const char *a2, void *a3, void *a4)
{
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  unsigned int v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v11 = objc_msgSend_count(a1, a2, (uint64_t)a3, (uint64_t)a4);
  if (!v11)
  {
    bzero(a4, (size_t)a2);
    return;
  }
  v19 = objc_msgSend_count(a3, v8, v9, v10);
  if (!v19)
  {
    v21 = 0;
    if (!a2)
      return;
    goto LABEL_15;
  }
  v20 = 0;
  v21 = 0;
  do
  {
    v22 = (void *)objc_msgSend_objectAtIndexedSubscript_(a3, v12, v20, v14);
    v26 = objc_msgSend_indicesChannelCount(v22, v23, v24, v25);
    if (v20)
    {
      v27 = v26;
      if (v26 != v21)
      {
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: Found elements with different channel counts in the same geometry"), v13, v14, v15, v16, v17, v18, v35);
        if (v27 < v21)
          v21 = v27;
      }
    }
    else
    {
      v21 = v26;
    }
    ++v20;
  }
  while (v19 != v20);
  if (a2)
  {
LABEL_15:
    v28 = 0;
    v29 = 0;
    while (v29 < v11)
    {
      v30 = (void *)objc_msgSend_objectAtIndexedSubscript_(a1, v12, v28, v14);
      v34 = objc_msgSend_intValue(v30, v31, v32, v33);
      if ((v34 & 0x80000000) != 0 || (int)v34 > v21)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: Invalid channel (%d) for source at index %u"), v13, v14, v15, v16, v17, v18, v34);
        goto LABEL_22;
      }
      *((_BYTE *)a4 + v28) = v34;
LABEL_23:
      v28 = (v29 + 1);
      v29 = v28;
      if (v28 >= (unint64_t)a2)
        return;
    }
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Missing channel for source at index %u"), v13, v14, v15, v16, v17, v18, v29);
LABEL_22:
    *((_BYTE *)a4 + v28) = 0;
    goto LABEL_23;
  }
}

uint64_t sub_1B19A958C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;

  v8 = sub_1B21AB51C(a1, "PostRender");
  *(_QWORD *)v8 = off_1E63CE378;
  *(_WORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 32) = a2;
  *(_QWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = a4;
  return a1;
}

void sub_1B19A95F4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

void sub_1B19A9600(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

unint64_t sub_1B19A960C(uint64_t a1, const char *a2)
{
  unint64_t v2;
  void *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  unint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(unsigned __int16 *)(a1 + 8);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = *(void **)(a1 + 40);
  v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, a2, (uint64_t)&v11, (uint64_t)v15, 16);
  if (v4)
  {
    v6 = v4;
    v7 = *(_QWORD *)v12;
    do
    {
      for (i = 0; i != v6; ++i)
      {
        if (*(_QWORD *)v12 != v7)
          objc_enumerationMutation(v3);
        v9 = 0x9DDFEA08EB382D69 * (v2 ^ *(_QWORD *)(*((_QWORD *)&v11 + 1) + 8 * i));
        v2 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v2 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v9 >> 47) ^ v9)) >> 47));
      }
      v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v11, (uint64_t)v15, 16);
    }
    while (v6);
  }
  return v2;
}

__n128 sub_1B19A9724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  _QWORD *v26;
  __n128 *v27;
  unsigned int v28;
  unsigned int v29;
  CFX::RG::Pass **v30;
  uint64_t v31;
  CFX::RG::Pass *v32;
  __n128 result;
  uint64_t v34;
  unsigned int v35;
  CFX::RG::Pass **v36;
  _QWORD v37[2];
  int v38;
  uint64_t v39;
  _QWORD v40[3];
  _QWORD v41[2];

  v40[0] = *(_QWORD *)(a2 + 16);
  v40[1] = 0;
  v40[2] = v41;
  if (objc_msgSend_count(*(void **)(a1 + 40), (const char *)a2, a3, a4))
  {
    v13 = 0;
    v14 = 1;
    do
    {
      v15 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v7, v13, v8);
      v37[0] = objc_msgSend_nodeRef(v15, v16, v17, v18);
      sub_1B18AE3A0(v40, v37);
      v13 = v14;
    }
    while (objc_msgSend_count(*(void **)(a1 + 40), v19, v20, v21) > (unint64_t)v14++);
  }
  v37[0] = *(_QWORD *)(a1 + 32);
  v37[1] = v40;
  v38 = 3;
  v39 = 0;
  sub_1B18AE274((uint64_t *)a3, a2, (uint64_t)v37, v8, v9, v10, v11, v12, (uint64_t)&v34);
  v24 = *(_QWORD *)(a3 + 8);
  v41[0] = *(_QWORD *)a3;
  v23 = v41[0];
  v41[1] = v24;
  v25 = (uint64_t *)sub_1B179C1C0(v41, 0x198u, 8u);
  v26 = (_QWORD *)CFX::RG::Pass::Pass((uint64_t)v25, v23, v24, (uint64_t)"Register probes", 1, 0, 0);
  *v26 = &off_1E63D0858;
  v26[45] = v23;
  v26[46] = v24;
  v27 = (__n128 *)(v26 + 49);
  v26[49] = 0;
  v26[50] = 0;
  v26[47] = 0;
  v26[48] = v26 + 49;
  v28 = *(_DWORD *)(a3 + 160);
  v29 = v28 + 1;
  if (v28 + 1 > *(_DWORD *)(a3 + 164))
  {
    sub_1B179C78C(a3 + 144, 1, 0);
    v28 = *(_DWORD *)(a3 + 160);
    v29 = v28 + 1;
  }
  *(_QWORD *)(*(_QWORD *)(a3 + 168) + 8 * v28) = v25;
  *(_DWORD *)(a3 + 160) = v29;
  if (v35)
  {
    v30 = v36;
    v31 = 8 * v35;
    do
    {
      v32 = *v30++;
      v41[0] = *((_QWORD *)v32 + 50);
      sub_1B179C734(v25 + 45, v41);
      CFX::RG::Pass::dependsOn(v25, v32);
      v31 -= 8;
    }
    while (v31);
  }
  result = *(__n128 *)(a1 + 40);
  *v27 = result;
  return result;
}

void sub_1B19A98C8(CFX::RG::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E63D0858;
  sub_1B190D7C4((uint64_t)a1 + 360);
  CFX::RG::Pass::~Pass(a1);
}

void sub_1B19A98FC(CFX::RG::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E63D0858;
  sub_1B190D7C4((uint64_t)a1 + 360);
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B19A9944(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  _QWORD v7[8];

  if (a3 == 2)
  {
    v7[6] = v4;
    v7[7] = v5;
    v6 = *(void **)(a4 + 24);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = sub_1B19A99A4;
    v7[3] = &unk_1E63DA4D8;
    v7[4] = result;
    v7[5] = a2;
    return objc_msgSend_addCompletedHandler_(v6, a2, (uint64_t)v7, a4);
  }
  return result;
}

uint64_t sub_1B19A99A4(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  double v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t i;
  void *v42;
  void *v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  void *v78[3];
  _BYTE v79[128];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v73 = result;
  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 376))
  {
    v2 = 0;
    v72 = *(_QWORD *)(result + 32);
    do
    {
      *(_QWORD *)&v3 = CFX::GPUResourceManager::getBuffer((CFX::GPUResourceManager *)*(_QWORD *)(*(_QWORD *)(v73 + 40) + 24), (const CFX::RG::Resource *)*(_QWORD *)(*(_QWORD *)(v1 + 384) + 8 * v2), v78).n128_u64[0];
      v7 = objc_msgSend_contents(v78[0], v4, v5, v6, v3);
      v8 = (float *)(v7 + ((unint64_t)v78[1] & 0xFFFFFFFFFFFFFFFCLL));
      sub_1B17C4408(0, (uint64_t)CFSTR("Info: Irradiance: %f, %f, %f"), v9, v10, v11, v12, v13, v14, COERCE__INT64(*v8));
      v17 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(v1 + 392), v15, v2, v16);
      v21 = objc_msgSend_nodeRef(v17, v18, v19, v20);
      v24 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(v1 + 392), v22, v2, v23);
      v28 = (void *)objc_msgSend_light(v24, v25, v26, v27);
      v32 = objc_msgSend_lightRef(v28, v29, v30, v31);
      v74 = 0u;
      v75 = 0u;
      v76 = 0u;
      v77 = 0u;
      v33 = *(void **)(v1 + 400);
      v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v74, (uint64_t)v79, 16);
      if (v35)
      {
        v39 = v35;
        v40 = *(_QWORD *)v75;
        do
        {
          for (i = 0; i != v39; ++i)
          {
            if (*(_QWORD *)v75 != v40)
              objc_enumerationMutation(v33);
            v42 = *(void **)(*((_QWORD *)&v74 + 1) + 8 * i);
            v43 = (void *)objc_msgSend_light(v42, v36, v37, v38);
            v47 = (float32x4_t *)objc_msgSend_lightRef(v43, v44, v45, v46);
            v51 = objc_msgSend_nodeRef(v42, v48, v49, v50);
            sub_1B1861CB0(v32, v21, v47, v51, 3, (uint64_t)v8, v52, v53);
          }
          v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v74, (uint64_t)v79, 16);
        }
        while (v39);
      }
      v54 = v78[2];
      if (v54 != (void *)CFX::ConstantBufferAlignSize((CFX *)0x6C))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. MTLBuffer containing the SH coefficients has not the expected size"), v56, v57, v58, v59, v60, v61, (uint64_t)"bufferView.length == CFX::ConstantBufferAlignSize((shOrder * shOrder) * 3 * sizeof(float))");
      v62 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E0C99D50], v55, (uint64_t)v8, 108);
      v1 = v72;
      v65 = (void *)objc_msgSend_objectAtIndexedSubscript_(*(void **)(v72 + 392), v63, v2, v64);
      v69 = (void *)objc_msgSend_light(v65, v66, v67, v68);
      result = objc_msgSend_set_sphericalHarmonics_(v69, v70, v62, v71);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v72 + 376));
  }
  return result;
}

uint64_t sub_1B19A9BD8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;

  if (objc_msgSend_requiresSecureCoding(a1, a2, a3, a4))
    return MEMORY[0x1E0DE7D20](a1, sel_decodeArrayOfObjectsOfClass_forKey_, a3, a4);
  v7 = (void *)MEMORY[0x1E0C99E60];
  v8 = objc_opt_class();
  v11 = objc_msgSend_setWithObjects_(v7, v9, v8, v10, a3, 0);
  return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v12, v11, a4);
}

uint64_t sub_1B19A9C64(void *a1, const char *a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;

  if (objc_msgSend_requiresSecureCoding(a1, a2, (uint64_t)a3, a4))
    return MEMORY[0x1E0DE7D20](a1, sel_decodeArrayOfObjectsOfClasses_forKey_, a3, a4);
  v7 = objc_opt_class();
  v10 = objc_msgSend_setByAddingObject_(a3, v8, v7, v9);
  return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v11, v10, a4);
}

uint64_t sub_1B19A9CD8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1E0C99E60];
  v16[0] = objc_opt_class();
  v16[1] = a3;
  v9 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v8, (uint64_t)v16, 2);
  v12 = objc_msgSend_setWithArray_(v7, v10, v9, v11);
  v14 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v13, v12, a4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v14;
  else
    return 0;
}

uint64_t sub_1B19A9DA4(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  v7 = objc_opt_class();
  v10 = objc_msgSend_setByAddingObject_(a3, v8, v7, v9);
  v12 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v11, v10, a4);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v12;
  else
    return 0;
}

uint64_t sub_1B19A9E18(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;

  if (objc_msgSend_requiresSecureCoding(a1, a2, a3, a4))
    return MEMORY[0x1E0DE7D20](a1, sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_, a3, a4);
  v9 = (void *)MEMORY[0x1E0C99E60];
  v10 = objc_opt_class();
  v13 = objc_msgSend_setWithObjects_(v9, v11, v10, v12, a3, a4, 0);
  return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v14, v13, a5);
}

uint64_t sub_1B19A9EBC(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  const char *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  if (objc_msgSend_requiresSecureCoding(a1, a2, (uint64_t)a3, a4))
    return MEMORY[0x1E0DE7D20](a1, sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_, a3, a4);
  v11 = (void *)objc_msgSend_setByAddingObjectsFromSet_(a3, v9, a4, v10);
  v12 = objc_opt_class();
  v15 = objc_msgSend_setByAddingObject_(v11, v13, v12, v14);
  return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v16, v15, a5);
}

uint64_t sub_1B19A9F48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  _QWORD v18[4];

  v18[3] = *MEMORY[0x1E0C80C00];
  v9 = (void *)MEMORY[0x1E0C99E60];
  v18[0] = objc_opt_class();
  v18[1] = a3;
  v18[2] = a4;
  v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v10, (uint64_t)v18, 3);
  v14 = objc_msgSend_setWithArray_(v9, v12, v11, v13);
  v16 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v15, v14, a5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v16;
  else
    return 0;
}

uint64_t sub_1B19AA020(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  void *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v7 = (void *)objc_msgSend_setByAddingObjectsFromSet_(a3, a2, a4, a4);
  v8 = objc_opt_class();
  v11 = objc_msgSend_setByAddingObject_(v7, v9, v8, v10);
  v13 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v12, v11, a5);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return v13;
  else
    return 0;
}

void sub_1B19AA0A0(NSMapTable *a1, uint64_t a2, uint64_t a3)
{
  char v4;
  void *value;
  void *key;
  NSMapEnumerator enumerator;

  memset(&enumerator, 0, sizeof(enumerator));
  NSEnumerateMapTable(&enumerator, a1);
  value = 0;
  key = 0;
  do
  {
    if (!NSNextMapEnumeratorPair(&enumerator, &key, &value))
      break;
    v4 = 0;
    (*(void (**)(uint64_t, void *, void *, char *))(a3 + 16))(a3, key, value, &v4);
  }
  while (!v4);
  NSEndMapTableEnumeration(&enumerator);
}

_QWORD *sub_1B19AA114(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  result = (_QWORD *)sub_1B21AB51C(a1, "PathTracer");
  *result = off_1E63CE298;
  result[3] = a2;
  return result;
}

uint64_t sub_1B19AA14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v4, *(_WORD *)(a1 + 8), 9273, 1656467160);
  return sub_1B17A371C(a2, v4, 1);
}

uint64_t sub_1B19AA1C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[2];

  v8[1] = *MEMORY[0x1E0C80C00];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 53296, 9273, 1893898584);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v4, 53296, 9273, 1490954098);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v5, 53296, 9273, -287492009);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v6, 53296, 9273, 1251382574);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v7, 53296, 9273, -1170177454);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v8, 53296, 9273, -797957750);
  return sub_1B17A371C(a1, &v3, 6);
}

unint64_t sub_1B19AA2B8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *a3;
  if ((_DWORD)v4)
  {
    v5 = (uint64_t *)*((_QWORD *)a3 + 1);
    v6 = 8 * v4;
    do
    {
      v7 = *v5++;
      v10 = v7;
      v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B19AA33C(uint64_t a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  CFX::RG::Resource *v6;
  CFX::RG::Resource *v7;
  CFX::RG::Resource *v8;
  CFX::RG::Resource *v9;
  CFX::RG::Resource *v10;
  CFX::RG::ResourceIdentifier *v11;
  uint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15[2];
  uint64_t v16;
  _BYTE v17[160];
  uint64_t v18;
  _BYTE v19[160];
  uint64_t v20;
  _BYTE v21[160];
  uint64_t v22;
  _BYTE v23[160];
  uint64_t v24;
  _BYTE v25[160];
  uint64_t v26;
  _BYTE v27[160];

  sub_1B1815FE8(*(_QWORD *)(a1 + 24), 1);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v26, 9273, 9273, 1251382574);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v27, v26);
  v6 = sub_1B17C1128((uint64_t)a3, (uint64_t)"PathTracer input emission", (CFX::RG::ResourceReference *)v27);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v24, 9273, 9273, 1490954098);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v25, v24);
  v7 = sub_1B17C1128((uint64_t)a3, (uint64_t)"PathTracer input normals", (CFX::RG::ResourceReference *)v25);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v22, 9273, 9273, 1893898584);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v23, v22);
  v8 = sub_1B17C1128((uint64_t)a3, (uint64_t)"PathTracer input albedo", (CFX::RG::ResourceReference *)v23);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v20, 9273, 9273, -287492009);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v21, v20);
  v9 = sub_1B17C1128((uint64_t)a3, (uint64_t)"PathTracer input roughmetalTarget", (CFX::RG::ResourceReference *)v21);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v18, 9273, 9273, -1170177454);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v19, v18);
  v10 = sub_1B17C1128((uint64_t)a3, (uint64_t)"PathTracer input velocityTarget", (CFX::RG::ResourceReference *)v19);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v16, 9273, 9273, -797957750);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v17, v16);
  v11 = sub_1B17C1128((uint64_t)a3, (uint64_t)"PathTracer input depthTarget", (CFX::RG::ResourceReference *)v17);
  v15[0] = *(_QWORD *)(a1 + 24);
  v15[1] = CFX::RG::ResourceIdentifier::finalColor(v11);
  v12 = (uint64_t *)sub_1B18F81F0(a3, a2, v15);
  sub_1B18F81D0(v12, v11, 0);
  sub_1B18F81D0(v12, v7, 1u);
  sub_1B18F81D0(v12, v8, 2u);
  sub_1B18F81D0(v12, v9, 3u);
  sub_1B18F81D0(v12, v6, 4u);
  sub_1B18F81D0(v12, v10, 7u);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v14, *(_WORD *)(a1 + 8), 21755, 1656467160);
  v13 = sub_1B18F81DC((uint64_t)v12);
  CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v14, v13, (uint64_t)v12);
}

uint64_t sub_1B19AA5B0(uint64_t a1)
{
  id v3;

  if (off_1EEF66CE0)
  {
    if (off_1EEF66CE0(a1, qword_1EEF66CF0) && off_1EEF66CE8 != 0)
      return off_1EEF66CE8(a1, qword_1EEF66CF0);
  }
  v3 = objc_alloc(MEMORY[0x1E0C99D50]);
  return MEMORY[0x1E0DE7D20](v3, sel_initWithContentsOfURL_options_error_, a1, 0);
}

CGImageSourceRef sub_1B19AA638(const __CFURL *a1)
{
  BOOL v2;
  const __CFData *v4;
  const __CFData *v5;
  CGImageSourceRef v6;

  if (!off_1EEF66CE0 || (off_1EEF66CE0(a1, qword_1EEF66CF0) ? (v2 = off_1EEF66CE8 == 0) : (v2 = 1), v2))
  {
    if (sub_1B198F028(a1))
      return CGImageSourceCreateWithURL(a1, 0);
  }
  else
  {
    v4 = (const __CFData *)off_1EEF66CE8(a1, qword_1EEF66CF0);
    if (v4)
    {
      v5 = v4;
      v6 = CGImageSourceCreateWithData(v4, 0);
      CFRelease(v5);
      return v6;
    }
  }
  return 0;
}

void meshopt_initialize()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  char v3;
  _QWORD v4[2];

  v0 = 0;
  v4[1] = *MEMORY[0x1E0C80C00];
  do
  {
    v1 = 0;
    v2 = 0;
    do
    {
      if (((v0 >> v1) & 1) != 0)
        v3 = v2;
      else
        v3 = 0x80;
      *((_BYTE *)v4 + v1) = v3;
      v2 += (v0 >> v1++) & 1;
    }
    while (v1 != 8);
    qword_1ED4CEF20[v0] = v4[0];
    byte_1ED4C1DE8[v0++] = v2;
  }
  while (v0 != 256);
}

uint64_t sub_1B19AA778(uint64_t a1, void *a2)
{
  uint64_t v4;

  v4 = operator new();
  sub_1B19AB0CC(v4, a1, a2);
  return v4;
}

void sub_1B19AA7CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10F0C403D4FC5B6);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19AA7F0(uint64_t result)
{
  if (result)
  {
    sub_1B19AB708(result);
    JUMPOUT(0x1B5E22E18);
  }
  return result;
}

void sub_1B19AA81C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  unsigned int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v5 = *(_QWORD **)(a1 + 56);
  v6 = sub_1B1815BE8((uint64_t)v5, a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"CRenderGraphEngineContextRenderFrame", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 696, v6 | 0x300000000);
  sub_1B19AA944(a1, v7, v8, v9);
  if (sub_1B19AA9C0((_QWORD *)a1))
  {
    v17 = sub_1B1814C44((uint64_t)v5, v10, v11, v12, v13, v14, v15, v16);
    v25 = sub_1B1814D00((uint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    if (!*(_BYTE *)(a1 + 368) || (v28 = *(_QWORD *)(a1 + 664)) == 0)
    {
      if (v17 == 1)
      {
        v28 = a1 + 440;
      }
      else if (v25)
      {
        v28 = a1 + 496;
      }
      else if (v17 == 3)
      {
        v28 = a1 + 608;
      }
      else if (v17 == 2)
      {
        v28 = a1 + 552;
      }
      else
      {
        v28 = a1 + 384;
      }
    }
    sub_1B19AB80C(a1, v28, v26, v27);
  }
  else
  {
    sub_1B19ABB40(a1, v10, v11, v12, v13, v14, v15, v16);
    CFX::RG::RenderGraph::resolveResourceDescriptors(*(const CFX::RG::Resource ****)(a1 + 48), (CFX::GPUResourceManager **)(a1 + 112));
  }
  if (*(_QWORD *)(a1 + 48))
  {
    sub_1B1815CC8(v5, v29, v30, v31, v32, v33, v34, v35);
    sub_1B19AAA1C(a1, v36, v37, v38);
    sub_1B19AAA80(a1, v39, v40, v41);
    sub_1B19AAAE0((_QWORD *)a1, v42, v43, v44);
  }
  prof_endFlame();
}

void sub_1B19AA92C(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B19AA944(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  uint64_t v6;

  v5 = sub_1B1815BE8(*(_QWORD *)(a1 + 56), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Resources nextFrame", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 152, v5 | 0x300000000);
  if (*(_BYTE *)(a1 + 685))
  {
    *(_BYTE *)(a1 + 685) = 0;
    v6 = *(_QWORD *)(a1 + 672);
    if (v6)
      ++*(_QWORD *)(v6 + 48);
  }
  CFX::RG::RenderGraphContext::nextFrame((CFX::RG::RenderGraphContext *)(a1 + 112));
  prof_endFlame();
}

void sub_1B19AA9B0(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t sub_1B19AA9C0(_QWORD *a1)
{
  CFX::RG::RenderGraphProvider *v2;
  uint64_t v3;
  unint64_t v4;

  v2 = (CFX::RG::RenderGraphProvider *)a1[84];
  if (v2 && *((_BYTE *)v2 + 41))
  {
    v3 = a1[6];
    v4 = CFX::RG::RenderGraphProvider::hash(v2, (CFX::RG::RenderGraphContext *)(a1 + 14));
    if (v3 && v4 && a1[5] == v4)
      return 0;
    a1[5] = v4;
  }
  return 1;
}

void sub_1B19AAA1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;

  v5 = sub_1B1815BE8(*(_QWORD *)(a1 + 56), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"setup", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 320, v5 | 0x300000000);
  CFX::RG::RenderGraph::execute(*(_QWORD *)(a1 + 48), a1 + 112, 0);
  prof_endFlame();
}

void sub_1B19AAA70(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B19AAA80(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;

  v5 = sub_1B1815BE8(*(_QWORD *)(a1 + 56), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"compile", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 326, v5 | 0x300000000);
  sub_1B19ABC8C(a1, *(_QWORD *)(a1 + 48));
  prof_endFlame();
}

void sub_1B19AAAD0(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B19AAAE0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;

  sub_1B19ABD60(a1, a1[6], a3, a4);
  v8 = sub_1B1815BE8(a1[7], v5, v6, v7);
  prof_beginFlameSmallData((uint64_t)"Destroy graph", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 338, v8 | 0x300000000);
  if (!a1[44])
  {
    sub_1B19AB7CC(*(_QWORD *)a1[6], *(_QWORD **)(a1[6] + 8), (CFX::RG::RenderGraph *)a1[6]);
    a1[6] = 0;
  }
  prof_endFlame();
}

void sub_1B19AAB44(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B19AAB54(uint64_t a1)
{
  CFX::GPUResourceManager::clearFrameTexturePool(*(CFX::GPUResourceManager **)(a1 + 136));
}

uint64_t sub_1B19AAB5C(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 672);
  if (v1)
    ++*(_QWORD *)(v1 + 48);
  return result;
}

id sub_1B19AAB74(uint64_t a1, int a2)
{
  return CFX::GPUResourceManager::getRegisteredFrameTextureNamed(*(CFX::GPUResourceManager **)(a1 + 136), a2);
}

id sub_1B19AAB7C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 *v6;
  const char *v7;
  uint64_t v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v6 = (unsigned __int8 *)objc_msgSend_UTF8String(a2, (const char *)a2, a3, a4);
  v9 = objc_msgSend_lengthOfBytesUsingEncoding_(a2, v7, 4, v8);
  if (v6)
  {
    v10 = 0xC6A4A7935BD1E995 * v9;
    if (v9 >= 8)
    {
      v11 = v9 >> 3;
      v12 = &v6[8 * v11];
      v13 = 8 * v11;
      do
      {
        v14 = *(_QWORD *)v6;
        v6 += 8;
        v10 = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v14) ^ ((0xC6A4A7935BD1E995 * v14) >> 47))) ^ v10);
        v13 -= 8;
      }
      while (v13);
      v6 = v12;
    }
    switch(v9 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v10 ^= (unint64_t)v6[6] << 48;
LABEL_8:
        v10 ^= (unint64_t)v6[5] << 40;
LABEL_9:
        v10 ^= (unint64_t)v6[4] << 32;
LABEL_10:
        v10 ^= (unint64_t)v6[3] << 24;
LABEL_11:
        v10 ^= (unint64_t)v6[2] << 16;
LABEL_12:
        v10 ^= (unint64_t)v6[1] << 8;
LABEL_13:
        v10 = 0xC6A4A7935BD1E995 * (v10 ^ *v6);
        break;
      default:
        break;
    }
    v15 = (((0xC6A4A7935BD1E995 * (v10 ^ (v10 >> 47))) >> 32) >> 15) ^ (1540483477 * (v10 ^ (v10 >> 47)));
  }
  else
  {
    v15 = 0;
  }
  return CFX::GPUResourceManager::getRegisteredFrameTextureNamed(*(CFX::GPUResourceManager **)(a1 + 136), v15);
}

id sub_1B19AAC90(uint64_t a1, const CFX::RG::Resource *a2)
{
  return CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a1 + 136), a2);
}

double sub_1B19AAC98(uint64_t a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;

  sub_1B21A96BC(a2, (uint64_t)&v4);
  result = *(double *)&v4;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

void sub_1B19AACD8(uint64_t a1, uint64_t a2, void *a3)
{
  CFX::RG::RenderGraphProvider *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  id *v12;
  void *v13;

  if (a2)
  {
    v4 = (CFX::RG::RenderGraphProvider *)sub_1B17A79D0(*(_QWORD *)(a1 + 56), a1 + 112, a2, a3);
    if (*((_BYTE *)v4 + 40))
    {
      sub_1B19AAD8C(a1, (uint64_t)v4);
    }
    else
    {
      CFX::RG::RenderGraphProvider::~RenderGraphProvider(v4);
      free(v13);
    }
  }
  else
  {
    sub_1B19AAD8C(a1, 0);
    if (a3)
    {
      v11 = (id *)sub_1B1813884(*(_QWORD *)(a1 + 56), (uint64_t)a3, v5, v6, v7, v8, v9, v10);
      v12 = sub_1B193E758(v11);
      sub_1B1C5FF4C(v12, a3);

    }
  }
}

void sub_1B19AAD8C(uint64_t a1, uint64_t a2)
{
  CFX::RG::RenderGraphProvider *v4;
  void *v5;

  v4 = *(CFX::RG::RenderGraphProvider **)(a1 + 664);
  if (v4)
  {
    CFX::RG::RenderGraphProvider::~RenderGraphProvider(v4);
    free(v5);
  }
  *(_QWORD *)(a1 + 664) = a2;
  *(_DWORD *)(a1 + 680) = 0;
  *(_QWORD *)(a1 + 672) = 0;
}

void sub_1B19AADC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  uint64_t v11;

  __p[0] = 0;
  __p[1] = 0;
  v11 = 0;
  if ((CFX::RG::RenderGraphProvider::resolve((uint64_t)a2, a1 + 112, (uint64_t)__p) & 1) != 0)
    sub_1B19AAD8C(a1, (uint64_t)a2);
  else
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unable to resolve custom provider %s: %s"), v4, v5, v6, v7, v8, v9, *a2);
  if (SHIBYTE(v11) < 0)
    operator delete(__p[0]);
}

void sub_1B19AAE58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B19AAE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  void *v35;
  const char *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  void *v76;
  const char *v77;
  uint64_t v78;
  double v79;
  double v80;
  double v81;
  float v82;
  double v83;
  float v84;
  double v85;
  const char *v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  const char *v90;
  uint64_t v91;
  void *v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  const char *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  char v117;
  uint64_t v118;
  RGCachedRenderCommandEncoder *v119;
  uint64_t v120;
  char v121;

  v9 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
  v13 = objc_msgSend__finalRenderTexture(v9, v10, v11, v12);
  if (v13)
  {
    v17 = v13;
    v18 = 0;
    v19 = *(void **)(a1 + 96);
    do
    {
      v20 = (void *)objc_msgSend_colorAttachments(v19, v14, v15, v16);
      v23 = (void *)objc_msgSend_objectAtIndexedSubscript_(v20, v21, v18, v22);
      objc_msgSend_setTexture_(v23, v24, 0, v25);
      v29 = (void *)objc_msgSend_colorAttachments(v19, v26, v27, v28);
      v32 = (void *)objc_msgSend_objectAtIndexedSubscript_(v29, v30, v18, v31);
      objc_msgSend_setResolveTexture_(v32, v33, 0, v34);
      ++v18;
    }
    while (v18 != 8);
    v35 = (void *)objc_msgSend_depthAttachment(v19, v14, v15, v16);
    objc_msgSend_setTexture_(v35, v36, 0, v37);
    v41 = (void *)objc_msgSend_depthAttachment(v19, v38, v39, v40);
    objc_msgSend_setResolveTexture_(v41, v42, 0, v43);
    v47 = (void *)objc_msgSend_stencilAttachment(v19, v44, v45, v46);
    objc_msgSend_setTexture_(v47, v48, 0, v49);
    objc_msgSend_setRenderTargetArrayLength_(v19, v50, 0, v51);
    v55 = (void *)objc_msgSend_colorAttachments(v19, v52, v53, v54);
    v58 = (void *)objc_msgSend_objectAtIndexedSubscript_(v55, v56, 0, v57);
    objc_msgSend_setTexture_(v58, v59, v17, v60);
    v64 = (void *)objc_msgSend_colorAttachments(v19, v61, v62, v63);
    v67 = (void *)objc_msgSend_objectAtIndexedSubscript_(v64, v65, 0, v66);
    objc_msgSend_setStoreAction_(v67, v68, 1, v69);
    v73 = (void *)objc_msgSend_colorAttachments(v19, v70, v71, v72);
    v76 = (void *)objc_msgSend_objectAtIndexedSubscript_(v73, v74, 0, v75);
    objc_msgSend_setLoadAction_(v76, v77, 2, v78);
    v79 = sub_1B18158EC(*(float32x4_t **)(a1 + 56));
    v80 = *(float *)&v79;
    v81 = *((float *)&v79 + 1);
    v83 = v82;
    v85 = v84;
    v89 = (void *)objc_msgSend_colorAttachments(v19, v86, v87, v88);
    v92 = (void *)objc_msgSend_objectAtIndexedSubscript_(v89, v90, 0, v91);
    objc_msgSend_setClearColor_(v92, v93, v94, v95, v80, v81, v83, v85);
    v99 = objc_msgSend_currentCommandBuffer(v9, v96, v97, v98);
    v103 = objc_msgSend_frameConstantBufferPool(v9, v100, v101, v102);
    v119 = objc_alloc_init(RGCachedRenderCommandEncoder);
    objc_msgSend_setDeferredBindingEnabled_(v119, v104, 1, v105);
    v118 = v99;
    objc_msgSend_loadWithCommandBuffer_renderPassDescriptor_(v119, v106, v99, (uint64_t)v19);
    v120 = v103;
    v116 = 1;
    v117 = 1;
    v121 = 0;
    objc_msgSend_setLabel_(v119, v107, (uint64_t)CFSTR("Clear drawable"), v108);
    sub_1B19AB070((uint64_t)&v116, v109, v110, v111, v112, v113, v114, v115);

  }
}

void sub_1B19AB05C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1B19AB070(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  const char *v10;
  uint64_t v11;

  v9 = *(void **)(a1 + 16);
  if (!v9)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_encoder != nil");
    v9 = *(void **)(a1 + 16);
  }
  objc_msgSend_endEncoding(v9, a2, a3, a4);
  *(_QWORD *)(a1 + 8) = 0;
  return objc_msgSend_setEncoder_(*(void **)(a1 + 16), v10, 0, v11);
}

uint64_t sub_1B19AB0CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void **v20;
  const __CFString *v21;
  void *__p[2];
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[2];
  __int128 v27;

  *(_BYTE *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  v6 = a3;
  *(_QWORD *)(a1 + 72) = &off_1E63CC428;
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = sub_1B18F8C8C((uint64_t)VFXMTLResourceManager, (uint64_t)a3);
  *(_QWORD *)(a1 + 88) = a3;
  *(_QWORD *)(a1 + 96) = objc_alloc_init(MEMORY[0x1E0CC6B50]);
  *(_QWORD *)(a1 + 104) = objc_alloc_init(RGCachedComputeCommandEncoder);
  v12 = sub_1B1814B08(a2, CFSTR("maxInFlightFrameCount"), 3, v7, v8, v9, v10, v11);
  CFX::RG::RenderGraphContext::RenderGraphContext(a1 + 112, a1 + 72, v12);
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 368) = 1;
  *(_QWORD *)(a1 + 370) = 0x100010101010101;
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 384));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 440));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 496));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 552));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 608));
  *(_QWORD *)(a1 + 678) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  sub_1B17A7298(*(_QWORD *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(_QWORD *)(a1 + 384) = v24;
  sub_1B19AB630(a1 + 392, v25);
  sub_1B19AB630(a1 + 408, v26);
  *(_OWORD *)(a1 + 424) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 384, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    v20 = __p;
    if (v23 < 0)
      v20 = (void **)__p[0];
    v21 = CFSTR("Error: Builtin forward rendergraph provider resolve failed: %s");
LABEL_24:
    sub_1B17C4408(16, (uint64_t)v21, v13, v14, v15, v16, v17, v18, (uint64_t)v20);
    abort();
  }
  sub_1B17A7524(*(_QWORD *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(_QWORD *)(a1 + 440) = v24;
  sub_1B19AB630(a1 + 448, v25);
  sub_1B19AB630(a1 + 464, v26);
  *(_OWORD *)(a1 + 480) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 440, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    v20 = __p;
    if (v23 < 0)
      v20 = (void **)__p[0];
    v21 = CFSTR("Error: Builtin pathTracer rendergraph provider resolve failed: %s");
    goto LABEL_24;
  }
  sub_1B17A7784(*(_QWORD *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(_QWORD *)(a1 + 496) = v24;
  sub_1B19AB630(a1 + 504, v25);
  sub_1B19AB630(a1 + 520, v26);
  *(_OWORD *)(a1 + 536) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 496, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    v20 = __p;
    if (v23 < 0)
      v20 = (void **)__p[0];
    v21 = CFSTR("Error: Builtin stereo rendergraph provider resolve failed: %s");
    goto LABEL_24;
  }
  sub_1B17A7864(*(_QWORD *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(_QWORD *)(a1 + 552) = v24;
  sub_1B19AB630(a1 + 560, v25);
  sub_1B19AB630(a1 + 576, v26);
  *(_OWORD *)(a1 + 592) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 552, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    v20 = __p;
    if (v23 < 0)
      v20 = (void **)__p[0];
    v21 = CFSTR("Error: Builtin holographic rendergraph provider resolve failed: %s");
    goto LABEL_24;
  }
  sub_1B17A7678(*(_QWORD *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(_QWORD *)(a1 + 608) = v24;
  sub_1B19AB630(a1 + 616, v25);
  sub_1B19AB630(a1 + 632, v26);
  *(_OWORD *)(a1 + 648) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 608, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    v20 = __p;
    if (v23 < 0)
      v20 = (void **)__p[0];
    v21 = CFSTR("Error: Builtin hybrid renderer rendergraph provider resolve failed: %s");
    goto LABEL_24;
  }
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B19AB498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;
  CFX::RG::RenderGraphContext *v18;
  CFX::RG::RenderGraphProvider *v19;
  CFX::RG::RenderGraphProvider *v20;
  CFX::RG::RenderGraphProvider *v21;
  CFX::RG::RenderGraphProvider *v22;
  CFX::RG::RenderGraphProvider *v23;

  if (a16 < 0)
    operator delete(__p);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v23);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v22);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v21);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v20);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v19);
  sub_1B19AB6B0(v17 + 280);
  CFX::RG::RenderGraphContext::~RenderGraphContext(v18);
  _Unwind_Resume(a1);
}

void sub_1B19AB55C()
{
  JUMPOUT(0x1B5E22E18);
}

id sub_1B19AB570(uint64_t a1, _OWORD *a2)
{
  id v4;
  __int128 v5;
  __int128 v6;
  const char *v7;
  uint64_t v8;
  _OWORD v10[5];

  v4 = objc_alloc_init(MEMORY[0x1E0CC6BB0]);
  v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v10[4] = a2[4];
  v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)v10, v4);
  return (id)objc_msgSend_newTextureWithDescriptor_(*(void **)(a1 + 8), v7, (uint64_t)v4, v8);
}

id sub_1B19AB5E8(uint64_t a1, uint64_t a2)
{
  return (id)sub_1B18FC078(*(_QWORD *)(a1 + 8), *(const char **)a2, *(_QWORD *)(a2 + 8));
}

uint64_t sub_1B19AB608(uint64_t a1)
{
  void *v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)sub_1B18FD768(*(_QWORD *)(a1 + 8));
  return objc_msgSend_frameworkLibrary(v1, v2, v3, v4);
}

uint64_t sub_1B19AB620(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B19AB628(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_supportsMemorylessRenderTargets(*(void **)(a1 + 16), a2, a3, a4);
}

uint64_t sub_1B19AB630(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;

  if (a2 != (_QWORD *)a1)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      free(*(void **)(a1 + 8));
      *(_QWORD *)(a1 + 8) = a1 + 16;
    }
    *(_QWORD *)a1 = *a2;
    v4 = (_QWORD *)a2[1];
    if (v4 == a2 + 2)
      memcpy((void *)(a1 + 16), v4, 8 * *(unsigned int *)a2);
    else
      *(_QWORD *)(a1 + 8) = v4;
    *a2 = 0;
    a2[1] = a2 + 2;
  }
  return a1;
}

uint64_t sub_1B19AB6B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_1B19AB708(uint64_t a1)
{
  CFX::RG::RenderGraph *v2;

  v2 = *(CFX::RG::RenderGraph **)(a1 + 48);
  if (v2)
    sub_1B19AB7CC(*(_QWORD *)v2, *((_QWORD **)v2 + 1), v2);

  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 608));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 552));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 496));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 440));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 384));
  sub_1B19AB6B0(a1 + 352);
  CFX::RG::RenderGraphContext::~RenderGraphContext((CFX::RG::RenderGraphContext *)(a1 + 112));
  return a1;
}

void sub_1B19AB788(_Unwind_Exception *a1)
{
  uint64_t v1;

  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 608));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 552));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 496));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 440));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 384));
  sub_1B19AB6B0(v1 + 352);
  CFX::RG::RenderGraphContext::~RenderGraphContext((CFX::RG::RenderGraphContext *)(v1 + 112));
  _Unwind_Resume(a1);
}

void sub_1B19AB7CC(int a1, _QWORD *a2, CFX::RG::RenderGraph *this)
{
  uint64_t v4;
  uint64_t v5;

  CFX::RG::RenderGraph::~RenderGraph(this);
  v5 = v4;
  if (a2)
    sub_1B179C834(a2, &v5);
}

void sub_1B19AB80C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  CFX::RG::RenderGraph *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t Aligned;
  uint64_t v13;
  uint64_t v14;
  CFX::RG *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFX::RG *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t p_p;
  unsigned int v30;
  id *v31;
  id *v32;
  __int128 __p;
  uint64_t v34;

  v6 = sub_1B1815BE8(*(_QWORD *)(a1 + 56), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"loadGraphProvider", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 168, v6 | 0x300000000);
  CFX::RG::RenderGraphContext::clearReferenceDescriptors((void **)(a1 + 112));
  CFX::GPUResourceManager::clearResourcesMapping(*(void ***)(a1 + 136));
  v7 = *(CFX::RG::RenderGraph **)(a1 + 48);
  if (v7)
    sub_1B19AB7CC(*(_QWORD *)v7, *((_QWORD **)v7 + 1), v7);
  v8 = *(_QWORD *)(a1 + 664);
  if (*(_BYTE *)(a2 + 41))
  {
    CFX::RG::RenderGraphContext::createPersistentRenderGraphBuilder((CFX::RG::RenderGraphContext *)(a1 + 112), (uint64_t *)&__p);
    sub_1B19ABADC(a1 + 352, &__p);
    v9 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
    if (*((_QWORD *)&__p + 1))
    {
      v10 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    Aligned = *(_QWORD *)(a1 + 352);
  }
  else
  {
    v13 = *(_QWORD *)(a1 + 112);
    v14 = *(_QWORD *)(a1 + 120);
    Aligned = CScratchAllocatorAllocateAligned(v13, 328, 8);
    CFX::RG::RenderGraphBuilder::RenderGraphBuilder(Aligned, v13, v14);
    sub_1B19ABA80((_QWORD *)(a1 + 352));
  }
  __p = 0uLL;
  v34 = 0;
  v15 = CFX::RG::RenderGraphProvider::encodeIfNeeded(a2, a1 + 112, Aligned, (uint64_t)&__p);
  v23 = v15;
  v24 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v24)
  {
    v25 = *(_QWORD *)(a2 + 16);
    v26 = 8 * v24;
    while (*(_WORD *)(*(_QWORD *)v25 + 8) != 14151)
    {
      v25 += 8;
      v26 -= 8;
      if (!v26)
        goto LABEL_15;
    }
    v27 = *(id *)(*(_QWORD *)v25 + 56);
    if (!v23)
      goto LABEL_18;
LABEL_16:
    *(_DWORD *)(a1 + 680) = 0;
    v28 = a2;
    goto LABEL_23;
  }
LABEL_15:
  v27 = 0;
  if (v15)
    goto LABEL_16;
LABEL_18:
  p_p = (uint64_t)&__p;
  if (v34 < 0)
    p_p = __p;
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: Unable to build graph %s\n"), v17, v18, v19, v20, v21, v22, p_p);
  *(_QWORD *)(a1 + 40) = 0;
  sub_1B19ABA80((_QWORD *)(a1 + 352));
  v28 = 0;
  v30 = *(_DWORD *)(a1 + 680) + 1;
  *(_DWORD *)(a1 + 680) = v30;
  if (v8 == a2 && v30 >= 3)
  {
    sub_1B19AAD8C(a1, 0);
    v28 = 0;
  }
LABEL_23:
  *(_QWORD *)(a1 + 672) = v28;
  *(_QWORD *)(a1 + 48) = v23;
  if (v27)
  {
    v31 = (id *)sub_1B1813884(*(_QWORD *)(a1 + 56), v16, v17, v18, v19, v20, v21, v22);
    v32 = sub_1B193E758(v31);
    sub_1B1C5FF4C(v32, v27);

  }
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
  prof_endFlame();
}

void sub_1B19ABA40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B19ABA80(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_1B19ABADC(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1B19ABB40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  CFX::RG::ResourceIdentifier *v12;
  uint64_t v13;
  uint64_t v14;
  CFX::RG::Resource *v15;
  CFX::RG::ResourceIdentifier *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[10];
  float32x4_t v31;
  float v32;
  float v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v9 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
  sub_1B18A5078(&v31, v9, v10, v11);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  RGTextureDescriptorMake2D(v32, v33, v34, (uint64_t)&v25);
  *((_QWORD *)&v27 + 1) = v35;
  v12 = (CFX::RG::ResourceIdentifier *)CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v30, &v25);
  v13 = *(_QWORD *)(a1 + 352);
  v14 = CFX::RG::ResourceIdentifier::finalColor(v12);
  CFX::RG::RenderGraphBuilder::findPublishedResource(v13, v14);
  v16 = (CFX::RG::ResourceIdentifier *)CFX::RG::Resource::textureDesc(v15);
  v17 = v30[1];
  *(_OWORD *)v16 = v30[0];
  *((_OWORD *)v16 + 1) = v17;
  v18 = v30[5];
  v20 = v30[2];
  v19 = v30[3];
  *((_OWORD *)v16 + 4) = v30[4];
  *((_OWORD *)v16 + 5) = v18;
  *((_OWORD *)v16 + 2) = v20;
  *((_OWORD *)v16 + 3) = v19;
  v21 = v30[9];
  v23 = v30[6];
  v22 = v30[7];
  *((_OWORD *)v16 + 8) = v30[8];
  *((_OWORD *)v16 + 9) = v21;
  *((_OWORD *)v16 + 6) = v23;
  *((_OWORD *)v16 + 7) = v22;
  v24 = CFX::RG::ResourceIdentifier::finalColor(v16);
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v25 = 0u;
  RGTextureDescriptorMake2D(v32, v33, v34, (uint64_t)&v25);
  *((_QWORD *)&v27 + 1) = v35;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v30, &v25);
  CFX::RG::RenderGraphContext::registerReferenceDescriptor(a1 + 112, v24, (unsigned __int16 *)v30);
}

uint64_t sub_1B19ABC8C(uint64_t a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;

  v7 = *(unsigned int **)(a1 + 128);
  v8 = a2;
  v5 = &v8;
  v6 = a1;
  sub_1B19ABCE4(&v7, (uint64_t)&v5);
  v3 = *(unsigned int **)(a1 + 128);
  v6 = a1;
  v7 = v3;
  v5 = &v8;
  return sub_1B19ABD20(&v7, (uint64_t)&v5);
}

uint64_t sub_1B19ABCE4(unsigned int **a1, uint64_t a2)
{
  CFX::RG::RenderGraphContext *v4;

  CStackAllocatorPushFrame(*a1);
  CFX::RG::AllocateResources(**(CFX::RG ***)a2, (CFX::RG::RenderGraph *)(*(_QWORD *)(a2 + 8) + 112), v4);
  return CStackAllocatorPopFrame((uint64_t)*a1);
}

uint64_t sub_1B19ABD20(unsigned int **a1, uint64_t a2)
{
  CStackAllocatorPushFrame(*a1);
  CFX::RG::RenderGraph::execute(**(_QWORD **)a2, *(_QWORD *)(a2 + 8) + 112, 1);
  return CStackAllocatorPopFrame((uint64_t)*a1);
}

void sub_1B19ABD60(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;

  v6 = sub_1B1815BE8(a1[7], (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Execute", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 427, v6 | 0x300000000);
  if (*((_BYTE *)a1 + 684) || *(_BYTE *)a1)
  {
    CFX::RG::RenderGraph::log((CFX::RG::RenderGraph *)a2, __p);
    if (v22 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    printf("%s", (const char *)v7);
    if (v22 < 0)
      operator delete(__p[0]);
    *((_BYTE *)a1 + 684) = 0;
  }
  v8 = *(unsigned int *)(a2 + 256);
  if ((_DWORD)v8)
  {
    v9 = *(_QWORD *)(a2 + 264);
    v10 = v9 + 32 * v8;
    do
    {
      v11 = *(unsigned int *)(v9 + 16);
      if ((_DWORD)v11)
      {
        v12 = *(uint64_t **)(v9 + 24);
        v13 = 8 * v11;
        do
        {
          v14 = *v12;
          sub_1B19ABEE4(a1, *v12);
          switch(*(_BYTE *)(v14 + 344))
          {
            case 1:
              sub_1B19ABFCC((uint64_t)a1, v14, v15, v16, v17, v18, v19, v20);
              break;
            case 2:
              sub_1B19AC048((uint64_t)a1, (uint64_t *)v14, v15, v16, v17, v18, v19, v20);
              break;
            case 3:
              sub_1B19AC170((uint64_t)a1, (_DWORD *)a2, (uint64_t *)v14, v16, v17, v18, v19, v20);
              break;
            case 4:
              sub_1B19AC0D8((uint64_t)a1, (uint64_t *)v14, v15, v16, v17, v18, v19, v20);
              break;
            default:
              break;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v9 += 32;
    }
    while (v9 != v10);
  }
  prof_endFlame();
}

void sub_1B19ABED0(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

id sub_1B19ABEE4(id result, uint64_t a2)
{
  CFX::GPUResourceManager **v3;
  uint64_t v4;
  CFX::RG::Resource **v5;
  uint64_t v6;
  const CFX::RG::Resource *v7;
  uint64_t v8;
  CFX::RG::Resource **v9;
  uint64_t v10;
  const CFX::RG::Resource *v11;

  v3 = (CFX::GPUResourceManager **)result;
  v4 = *(unsigned int *)(a2 + 168);
  if ((_DWORD)v4)
  {
    v5 = *(CFX::RG::Resource ***)(a2 + 176);
    v6 = 8 * v4;
    do
    {
      v7 = *v5;
      result = (id)CFX::RG::Resource::isExternal(*v5);
      if ((_DWORD)result)
      {
        result = CFX::GPUResourceManager::getTexture(v3[17], v7);
        if (!result)
        {
          CFX::GPUResourceManager::allocate(v3[17], v7, (const CFX::RG::RenderGraphContext *)(v3 + 14));
          result = CFX::GPUResourceManager::getTexture(v3[17], v7);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  v8 = *(unsigned int *)(a2 + 72);
  if ((_DWORD)v8)
  {
    v9 = *(CFX::RG::Resource ***)(a2 + 80);
    v10 = 8 * v8;
    do
    {
      v11 = *v9;
      result = (id)CFX::RG::Resource::isExternal(*v9);
      if ((_DWORD)result)
      {
        result = CFX::GPUResourceManager::getTexture(v3[17], v11);
        if (!result)
        {
          CFX::GPUResourceManager::allocate(v3[17], v11, (const CFX::RG::RenderGraphContext *)(v3 + 14));
          result = CFX::GPUResourceManager::getTexture(v3[17], v11);
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_1B19ABFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21[8];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
  v14 = objc_msgSend_commandQueue(v10, v11, v12, v13);
  v18 = objc_msgSend_currentCommandBuffer(v10, v15, v16, v17);
  v19 = *(_QWORD *)(a1 + 64);
  v21[0] = 1;
  v22 = v19;
  v23 = v14;
  v24 = v18;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)a2 + 24))(a2, a1 + 112, 2, v21);
}

uint64_t sub_1B19AC048(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char v28[8];
  void *v29;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v14 = (void *)objc_msgSend_currentCommandBuffer(v10, v11, v12, v13);
  v18 = (void *)objc_msgSend_blitCommandEncoder(v14, v15, v16, v17);
  v21 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v19, a2[3], v20);
  objc_msgSend_setLabel_(v18, v22, v21, v23);
  v28[0] = 2;
  v29 = v18;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, char *))(*a2 + 24))(a2, a1 + 112, 2, v28);
  return objc_msgSend_endEncoding(v18, v24, v25, v26);
}

uint64_t sub_1B19AC0D8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  char v25[8];
  uint64_t v26;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v14 = objc_msgSend_currentCommandBuffer(v10, v11, v12, v13);
  v15 = *(void **)(a1 + 104);
  v18 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v16, a2[3], v17);
  objc_msgSend_loadWithCommandBuffer_label_(v15, v19, v14, v18);
  v20 = *(_QWORD *)(a1 + 104);
  v25[0] = 4;
  v26 = v20;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, char *))(*a2 + 24))(a2, a1 + 112, 2, v25);
  return objc_msgSend_endEncoding(*(void **)(a1 + 104), v21, v22, v23);
}

void sub_1B19AC170(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  RGCachedRenderCommandEncoder *v14;
  const char *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v46;
  uint64_t v47;
  char v49[8];
  RGCachedRenderCommandEncoder *v50;
  uint64_t v51;
  char v52;
  unsigned __int8 v53;
  __int128 v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  RGCachedRenderCommandEncoder *v59;
  uint64_t v60;
  char v61;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 56), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v47 = objc_msgSend_frameConstantBufferPool(v10, v11, v12, v13);
  v14 = objc_alloc_init(RGCachedRenderCommandEncoder);
  v59 = v14;
  objc_msgSend_setDeferredBindingEnabled_(v14, v15, 1, v16);
  v54 = *(_OWORD *)(a1 + 16);
  v55 = *(_QWORD *)(a1 + 32);
  objc_msgSend_setCounters_(v14, v17, (uint64_t)&v54, v18);
  v19 = *(_QWORD *)(a1 + 96);
  v23 = objc_msgSend_currentCommandBuffer(v10, v20, v21, v22);
  v24 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3) + 274);
  v25 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3) + 275);
  v46 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3) + 276);
  v26 = (*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3);
  if (v25)
  {
    v44 = v25 + v24;
    v45 = *(unsigned __int8 *)(v26 + 277);
    do
    {
      v27 = v46;
      if (v45)
      {
        do
        {
          sub_1B19AC400(a1, *(char **)(a1 + 96), a2, (CFX::RG::Pass *)a3, v24, v27);
          prof_beginFlame((uint64_t)"Begin encoding", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 625);
          v30 = objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v28, a3[3], v29);
          v58 = v23;
          objc_msgSend_loadWithCommandBuffer_renderPassDescriptor_(v59, v31, v23, v19);
          v60 = v47;
          v56 = 1;
          v57 = 1;
          v61 = 0;
          if (v30)
            objc_msgSend_setLabel_(v59, v32, v30, v33);
          objc_msgSend_beginRenderPass_renderEncoder_(v10, v32, v19, (uint64_t)&v56);
          prof_endFlame();
          v49[0] = 3;
          v50 = v59;
          v51 = v19;
          v52 = v24;
          v53 = v27;
          (*(void (**)(uint64_t *, uint64_t, uint64_t, char *))(*a3 + 24))(a3, a1 + 112, 2, v49);
          prof_beginFlame((uint64_t)"End encoding", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 640);
          sub_1B19AB070((uint64_t)&v56, v34, v35, v36, v37, v38, v39, v40);
          objc_msgSend_endRenderPass(v10, v41, v42, v43);
          prof_endFlame();
          ++v27;
        }
        while (v45 + v46 > v27);
      }
      LOBYTE(v24) = v24 + 1;
    }
    while (v44 > v24);
    v14 = v59;
  }

}

void sub_1B19AC3B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{

  _Unwind_Resume(a1);
}

void sub_1B19AC400(uint64_t a1, char *a2, _DWORD *a3, CFX::RG::Pass *a4, unsigned int a5, unsigned int a6)
{
  unint64_t v6;
  unsigned int v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  void *v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const char *v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  CFX::RG::Resource **v49;
  uint64_t v50;
  const CFX::RG::Resource *v51;
  uint64_t v52;
  id Texture;
  int v54;
  uint64_t v55;
  CFX::RG::ExternalResourceDesc *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  void *v62;
  const char *v63;
  uint64_t v64;
  void *v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  uint64_t v84;
  const char *v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  const char *v92;
  uint64_t v93;
  const char *v94;
  uint64_t v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  const char *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  const char *v104;
  uint64_t v105;
  const char *v106;
  uint64_t v107;
  const char *v108;
  uint64_t v109;
  const char *v110;
  uint64_t v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;

  v10 = sub_1B1815BE8(*(_QWORD *)(a1 + 56), a2, (uint64_t)a3, (uint64_t)a4);
  prof_beginFlameSmallData((uint64_t)"setupRenderPassDescriptor", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 509, v10 | 0x300000000);
  for (i = 0; i != 8; ++i)
  {
    v15 = (void *)objc_msgSend_colorAttachments(a2, v11, v12, v13);
    v18 = (void *)objc_msgSend_objectAtIndexedSubscript_(v15, v16, i, v17);
    objc_msgSend_setTexture_(v18, v19, 0, v20);
    v24 = (void *)objc_msgSend_colorAttachments(a2, v21, v22, v23);
    v27 = (void *)objc_msgSend_objectAtIndexedSubscript_(v24, v25, i, v26);
    objc_msgSend_setResolveTexture_(v27, v28, 0, v29);
  }
  v30 = (void *)objc_msgSend_depthAttachment(a2, v11, v12, v13);
  objc_msgSend_setTexture_(v30, v31, 0, v32);
  v36 = (void *)objc_msgSend_depthAttachment(a2, v33, v34, v35);
  objc_msgSend_setResolveTexture_(v36, v37, 0, v38);
  v42 = (void *)objc_msgSend_stencilAttachment(a2, v39, v40, v41);
  objc_msgSend_setTexture_(v42, v43, 0, v44);
  v45 = (*(uint64_t (**)(CFX::RG::Pass *))(*(_QWORD *)a4 + 32))(a4);
  objc_msgSend_setRenderTargetArrayLength_(a2, v46, *(unsigned __int8 *)(v45 + 268), v47);
  v116 = a2;
  v48 = *((unsigned int *)a4 + 42);
  if ((_DWORD)v48)
  {
    v49 = (CFX::RG::Resource **)*((_QWORD *)a4 + 22);
    v50 = 8 * v48;
    v114 = a6;
    v115 = a5;
    do
    {
      v51 = *v49;
      v52 = CFX::RG::Pass::renderTargetInfo(a4, *v49);
      if (v52)
      {
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a1 + 136), v51);
        v54 = *(_DWORD *)v52;
        if ((*(_DWORD *)v52 & 1) != 0)
          v55 = 1;
        else
          v55 = *(_DWORD *)v52 & 2;
        if (CFX::RG::Resource::isExternal(v51))
        {
          v56 = (CFX::RG::ExternalResourceDesc *)CFX::RG::Resource::externalResourceDesc(v51);
          if (CFX::RG::ExternalResourceDesc::requireLoad(v56))
            v55 = 1;
        }
        v6 = v6 & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)(a1 + 377);
        v60 = CFX::RG::DeduceStoreAction(a3, a4, v51, *(unsigned int **)(a1 + 128), *(_QWORD *)(a1 + 369));
        v61 = *(unsigned __int8 *)(v52 + 4);
        switch(v61)
        {
          case 1:
            v74 = (void *)objc_msgSend_colorAttachments(v116, v57, v58, v59);
            v77 = (void *)objc_msgSend_objectAtIndexedSubscript_(v74, v75, *(unsigned int *)(v52 + 8), v76);
            v78 = (*(uint64_t (**)(CFX::RG::Pass *))(*(_QWORD *)a4 + 32))(a4);
            if ((v54 & 4) != 0)
            {
              objc_msgSend_setResolveTexture_(v77, v79, (uint64_t)Texture, v80);
              objc_msgSend_setResolveLevel_(v77, v110, v115, v111);
              objc_msgSend_setResolveSlice_(v77, v112, v114, v113);
            }
            else
            {
              v81 = v78;
              v82 = *(unsigned int *)(v52 + 8);
              objc_msgSend_setTexture_(v77, v79, (uint64_t)Texture, v80);
              objc_msgSend_setLoadAction_(v77, v83, v55, v84);
              objc_msgSend_setStoreAction_(v77, v85, v60, v86);
              objc_msgSend_setClearColor_(v77, v87, v88, v89, *(double *)(v81 + 32 * v82), *(double *)(v81 + 32 * v82 + 8), *(double *)(v81 + 32 * v82 + 16), *(double *)(v81 + 32 * v82 + 24));
              objc_msgSend_setLevel_(v77, v90, v115, v91);
              objc_msgSend_setSlice_(v77, v92, v114, v93);
            }
            break;
          case 2:
            v62 = (void *)objc_msgSend_depthAttachment(v116, v57, v58, v59);
            v65 = v62;
            if ((v54 & 4) != 0)
            {
LABEL_21:
              objc_msgSend_setResolveTexture_(v62, v63, (uint64_t)Texture, v64);
              objc_msgSend_setResolveLevel_(v65, v106, v115, v107);
              objc_msgSend_setResolveSlice_(v65, v108, v114, v109);
              break;
            }
            objc_msgSend_setTexture_(v62, v63, (uint64_t)Texture, v64);
            objc_msgSend_setLoadAction_(v65, v94, v55, v95);
            objc_msgSend_setStoreAction_(v65, v96, v60, v97);
            v98 = (*(uint64_t (**)(CFX::RG::Pass *))(*(_QWORD *)a4 + 32))(a4);
            objc_msgSend_setClearDepth_(v65, v99, v100, v101, *(double *)(v98 + 256));
            objc_msgSend_setLevel_(v65, v102, v115, v103);
            objc_msgSend_setSlice_(v65, v104, v114, v105);
            break;
          case 3:
            v62 = (void *)objc_msgSend_stencilAttachment(v116, v57, v58, v59);
            v65 = v62;
            if ((v54 & 4) != 0)
              goto LABEL_21;
            objc_msgSend_setTexture_(v62, v63, (uint64_t)Texture, v64);
            objc_msgSend_setLoadAction_(v65, v66, v55, v67);
            objc_msgSend_setStoreAction_(v65, v68, v60, v69);
            objc_msgSend_setLevel_(v65, v70, v115, v71);
            objc_msgSend_setSlice_(v65, v72, v114, v73);
            break;
        }
      }
      ++v49;
      v50 -= 8;
    }
    while (v50);
  }
  prof_endFlame();
}

void sub_1B19AC7A4(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B19AC7D8()
{
  if (!qword_1EEF66CF8)
  {
    qword_1EEF66CF8 = sub_1B179CB60(&qword_1EEF66CF8);
    qword_1ED4AEF78 = (uint64_t)sub_1B19AF3DC;
  }
}

uint64_t sub_1B19AC828()
{
  uint64_t result;

  if (qword_1EEF66D00 != -1)
    dispatch_once(&qword_1EEF66D00, &unk_1E63D1430);
  result = sub_1B179CB90(qword_1EEF66CF8, 0x68uLL);
  *(_DWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 40) = -1;
  *(_QWORD *)(result + 24) = 1;
  return result;
}

uint64_t sub_1B19AC884(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  const char *CStringPtr;
  unint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  result = *(_QWORD *)(a1 + 56);
  if ((CFStringRef)result != theString)
  {
    if (result)
    {
      CFRelease((CFTypeRef)result);
      *(_QWORD *)(a1 + 56) = 0;
    }
    if (theString)
      result = (uint64_t)CFRetain(theString);
    else
      result = 0;
    *(_QWORD *)(a1 + 56) = result;
  }
  if (theString && (CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u), result = strlen(CStringPtr), CStringPtr))
  {
    v12 = 0xC6A4A7935BD1E995 * result;
    if (result >= 8)
    {
      v13 = result >> 3;
      v14 = &CStringPtr[8 * v13];
      v15 = 8 * v13;
      do
      {
        v16 = *(_QWORD *)CStringPtr;
        CStringPtr += 8;
        v12 = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v16) ^ ((0xC6A4A7935BD1E995 * v16) >> 47))) ^ v12);
        v15 -= 8;
      }
      while (v15);
      CStringPtr = v14;
    }
    switch(result & 7)
    {
      case 1:
        goto LABEL_23;
      case 2:
        goto LABEL_22;
      case 3:
        goto LABEL_21;
      case 4:
        goto LABEL_20;
      case 5:
        goto LABEL_19;
      case 6:
        goto LABEL_18;
      case 7:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 6) << 48;
LABEL_18:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 5) << 40;
LABEL_19:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 4) << 32;
LABEL_20:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 3) << 24;
LABEL_21:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 2) << 16;
LABEL_22:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 1) << 8;
LABEL_23:
        v12 = 0xC6A4A7935BD1E995 * (v12 ^ *(unsigned __int8 *)CStringPtr);
        break;
      default:
        break;
    }
    v17 = (0xC6A4A7935BD1E995 * (v12 ^ (v12 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v12 ^ (v12 >> 47))) >> 47);
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(a1 + 64) = v17;
  return result;
}

void sub_1B19AC9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  v9 = *(_DWORD *)(a1 + 24);
  v10 = v9 > 6;
  v11 = (1 << v9) & 0x4C;
  v12 = v10 || v11 == 0;
  if (v12
    || (v13 = *(_QWORD *)(a1 + 96)) != 0
    && ((v14 = sub_1B1878184(v13, a2, a3, a4, a5, a6, a7, a8)) == 0
     || sub_1B1841314(v14, v15, v16, v17, v18, v19, v20, v21) == 2))
  {
    v22 = *(_DWORD *)(a1 + 184) & 0xFFFF7FFF;
  }
  else
  {
    v22 = *(_DWORD *)(a1 + 184) | 0x8000;
  }
  *(_DWORD *)(a1 + 184) = v22;
}

void sub_1B19ACA80()
{
  if (!qword_1EEF66D08)
  {
    qword_1EEF66D08 = sub_1B179CB60(&qword_1EEF66D08);
    qword_1ED4AEEA0 = (uint64_t)sub_1B19AF994;
  }
}

uint64_t sub_1B19ACAD0()
{
  uint64_t v0;
  int v1;

  if (qword_1EEF66D10 != -1)
    dispatch_once(&qword_1EEF66D10, &unk_1E63D1A50);
  v0 = sub_1B179CB90(qword_1EEF66D08, 0x230uLL);
  *(_QWORD *)(v0 + 536) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v1 = *(_DWORD *)(v0 + 184);
  *(_QWORD *)(v0 + 376) = 0x3FF0000000000000;
  *(_QWORD *)(v0 + 384) = 0x3FF0000000000000;
  *(_BYTE *)(v0 + 368) = *(_BYTE *)(v0 + 368) & 0xF8 | 1;
  *(_BYTE *)(v0 + 480) = 1;
  *(_BYTE *)(v0 + 32) = 1;
  *(_DWORD *)(v0 + 180) = 1;
  *(_DWORD *)(v0 + 184) = v1 | 0x310B;
  return v0;
}

uint64_t sub_1B19ACB7C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2;
  return result;
}

CFTypeRef sub_1B19ACB84(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 48);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 48) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 48) = result;
  }
  return result;
}

CFTypeRef sub_1B19ACBFC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 56);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 56) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 56) = result;
  }
  return result;
}

CFTypeRef sub_1B19ACC74(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 64);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

CFTypeRef sub_1B19ACCEC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 72) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 72) = result;
  }
  return result;
}

void sub_1B19ACD64(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  *(_BYTE *)(a1 + 80) = a2;
}

CFTypeRef sub_1B19ACDB0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 88);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 88) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 88) = result;
  }
  return result;
}

uint64_t sub_1B19ACE28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return *(_QWORD *)(a1 + 88);
}

BOOL sub_1B19ACE70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return *(_DWORD *)(a1 + 180) != 0;
}

void sub_1B19ACEC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;

  v8 = a2;
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  *(_DWORD *)(a1 + 24) = v8;
  sub_1B19AC9E8(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19ACF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1B19ACF58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return *(_QWORD *)(a1 + 96);
}

CFStringRef sub_1B19ACFA0(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef result;

  if (a1)
  {
    if (theString)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
    if (theString)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"name");
LABEL_3:
  result = *(CFStringRef *)(a1 + 16);
  if (result != theString)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (theString)
      result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1B19AD04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B19AD094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return (*(unsigned __int8 *)(a1 + 186) >> 5) & 1;
}

void sub_1B19AD0E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  *(_QWORD *)(a1 + 448) = a2;
}

CFTypeRef sub_1B19AD12C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 456);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 456) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 456) = result;
  }
  return result;
}

CFTypeRef sub_1B19AD1A4(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 472);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 472) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 472) = result;
  }
  return result;
}

uint64_t sub_1B19AD21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return (*(unsigned __int8 *)(a1 + 185) >> 2) & 1;
}

uint64_t sub_1B19AD268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 && (v10 = *(_QWORD *)(v9 + 96)) != 0)
    return *(_QWORD *)v10;
  else
    return 0;
}

double sub_1B19AD2C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v8;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t isEqualToString;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  int v38;
  const char *v39;
  const char *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  void *v51;
  const char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  void *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  const char *v69;
  uint64_t v70;
  void *v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  const char *v76;
  uint64_t v77;
  void *v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  void *v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  int v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  uint64_t v99;
  void *v100;
  const char *v101;
  uint64_t v102;
  uint64_t v103;
  const char *v104;
  __int128 v105;
  void *v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  double v111;
  const char *v112;
  uint64_t v113;
  void *v114;
  const char *v115;
  uint64_t v116;
  _BOOL4 v117;
  void *v118;
  int v119;
  void *v120;
  const char *v121;
  uint64_t v122;
  void *v123;
  void *v124;
  const char *v125;
  uint64_t v126;
  void *v127;
  int v128;
  uint64_t v129;
  int v130;
  int v131;
  const char *v132;
  void *v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  void *v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  const char *v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  void *v152;
  uint64_t v153;
  const char *v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  void *v158;
  BOOL v159;
  void *v160;
  const char *v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  void *v165;
  const char *v166;
  uint64_t v167;
  uint64_t v168;
  int v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  const void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *v185;
  const char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  const char *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  void *v200;
  const char *v201;
  uint64_t v202;
  void *v203;
  const char *v204;
  uint64_t v205;
  uint64_t v206;
  char v207;
  void *v208;
  const char *v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  void *v213;
  const char *v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  void *v218;
  const char *v219;
  uint64_t v220;
  uint64_t v221;
  char v222;
  void *v223;
  const char *v224;
  uint64_t v225;
  uint64_t v226;
  char v227;
  void *v228;
  const char *v229;
  uint64_t v230;
  uint64_t v231;
  void *v232;
  uint64_t v233;
  const void *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  const void *v247;
  const __CFDictionary *Value;
  const void *v249;
  double result;
  const void *v251;
  const __CFDictionary *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const __CFDictionary *v259;
  const __CFDictionary *v260;
  char v261;
  unsigned int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  _BYTE *v276;
  char v277;
  char v278;
  const char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  const char *v285;
  const char *v286;
  const char *v287;
  const char *v288;
  BOOL v289;
  uint64_t v290;
  const __CFDictionary *v291;
  _OWORD v292[2];
  uint64_t v293;
  _BYTE context[32];
  _OWORD v295[2];
  _BYTE v296[24];
  uint64_t v297;
  uint64_t v298;

  v8 = (const __CFDictionary *)a3;
  v10 = a1;
  v298 = *MEMORY[0x1E0C80C00];
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  v11 = (void *)objc_msgSend_valueForKey_(a2, (const char *)a2, (uint64_t)CFSTR("draw"), a4);
  v15 = (void *)objc_msgSend_lowercaseString(v11, v12, v13, v14);
  if ((objc_msgSend_isEqualToString_(v15, v16, (uint64_t)CFSTR("draw_world"), v17) & 1) != 0
    || (objc_msgSend_isEqualToString_(v15, v18, (uint64_t)CFSTR("draw_node"), v20) & 1) != 0)
  {
    isEqualToString = 3;
  }
  else if ((objc_msgSend_isEqualToString_(v15, v25, (uint64_t)CFSTR("draw_main_world"), v20) & 1) != 0)
  {
    isEqualToString = 8;
  }
  else if ((objc_msgSend_isEqualToString_(v15, v39, (uint64_t)CFSTR("draw_nodes"), v20) & 1) != 0)
  {
    isEqualToString = 6;
  }
  else if ((objc_msgSend_isEqualToString_(v15, v40, (uint64_t)CFSTR("draw_geometry"), v20) & 1) != 0)
  {
    isEqualToString = 2;
  }
  else if ((objc_msgSend_isEqualToString_(v15, v279, (uint64_t)CFSTR("draw_quad"), v20) & 1) != 0)
  {
    isEqualToString = 4;
  }
  else if ((objc_msgSend_isEqualToString_(v15, v285, (uint64_t)CFSTR("metal_custom"), v20) & 1) != 0)
  {
    isEqualToString = 7;
  }
  else if ((objc_msgSend_isEqualToString_(v15, v286, (uint64_t)CFSTR("draw_none"), v20) & 1) != 0
         || (objc_msgSend_isEqualToString_(v15, v287, (uint64_t)CFSTR("none"), v20) & 1) != 0)
  {
    isEqualToString = 1;
  }
  else
  {
    isEqualToString = objc_msgSend_isEqualToString_(v15, v288, (uint64_t)CFSTR("custom"), v20);
  }
  sub_1B19ACEC0(v10, isEqualToString, v19, v20, v21, v22, v23, v24);
  v29 = (void *)objc_msgSend_valueForKey_(a2, v27, (uint64_t)CFSTR("stage"), v28);
  v33 = (void *)objc_msgSend_lowercaseString(v29, v30, v31, v32);
  if ((objc_msgSend_isEqualToString_(v33, v34, (uint64_t)CFSTR("preDraw"), v35) & 1) != 0)
  {
    v38 = 1;
  }
  else if ((objc_msgSend_isEqualToString_(v33, v36, (uint64_t)CFSTR("preFX"), v37) & 1) != 0)
  {
    v38 = 2;
  }
  else if ((objc_msgSend_isEqualToString_(v33, v36, (uint64_t)CFSTR("preToneMap"), v37) & 1) != 0)
  {
    v38 = 3;
  }
  else
  {
    objc_msgSend_isEqualToString_(v33, v36, (uint64_t)CFSTR("postFX"), v37);
    v38 = 4;
  }
  *(_DWORD *)(v10 + 28) = v38;
  v41 = objc_msgSend_objectForKey_(a2, v36, (uint64_t)CFSTR("ignoreFloors"), v37);
  if (v41)
  {
    v44 = (void *)objc_msgSend_objectForKey_(a2, v42, (uint64_t)CFSTR("ignoreFloors"), v43);
    LOBYTE(v41) = objc_msgSend_BOOLValue(v44, v45, v46, v47);
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFDF | (32 * (v41 & 1));
  v48 = objc_msgSend_objectForKey_(a2, v42, (uint64_t)CFSTR("onlyShadowCasters"), v43);
  if (v48)
  {
    v51 = (void *)objc_msgSend_objectForKey_(a2, v49, (uint64_t)CFSTR("onlyShadowCasters"), v50);
    LOBYTE(v48) = objc_msgSend_BOOLValue(v51, v52, v53, v54);
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFBFF | ((v48 & 1) << 10);
  v55 = objc_msgSend_objectForKey_(a2, v49, (uint64_t)CFSTR("onlyMovableNodes"), v50);
  if (v55)
  {
    v58 = (void *)objc_msgSend_objectForKey_(a2, v56, (uint64_t)CFSTR("onlyMovableNodes"), v57);
    LOBYTE(v55) = objc_msgSend_BOOLValue(v58, v59, v60, v61);
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFF7FF | ((v55 & 1) << 11);
  if (objc_msgSend_objectForKey_(a2, v56, (uint64_t)CFSTR("hasConstantAlpha"), v57))
  {
    v64 = (void *)objc_msgSend_objectForKey_(a2, v62, (uint64_t)CFSTR("hasConstantAlpha"), v63);
    v68 = objc_msgSend_BOOLValue(v64, v65, v66, v67);
  }
  else
  {
    v68 = 1;
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFEFF | ((v68 & 1) << 8);
  if (objc_msgSend_objectForKey_(a2, v62, (uint64_t)CFSTR("installViewport"), v63))
  {
    v71 = (void *)objc_msgSend_objectForKey_(a2, v69, (uint64_t)CFSTR("installViewport"), v70);
    v75 = objc_msgSend_BOOLValue(v71, v72, v73, v74);
  }
  else
  {
    v75 = 1;
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFEFFF | ((v75 & 1) << 12);
  if (objc_msgSend_objectForKey_(a2, v69, (uint64_t)CFSTR("isViewDependant"), v70))
  {
    v78 = (void *)objc_msgSend_objectForKey_(a2, v76, (uint64_t)CFSTR("isViewDependant"), v77);
    v82 = objc_msgSend_BOOLValue(v78, v79, v80, v81);
  }
  else
  {
    v82 = 1;
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFDFFF | ((v82 & 1) << 13);
  v83 = (void *)objc_msgSend_objectForKey_(a2, v76, (uint64_t)CFSTR("overridesCustomProgram"), v77);
  if (objc_msgSend_BOOLValue(v83, v84, v85, v86))
    v89 = 0x100000;
  else
    v89 = 0;
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFEFFFFF | v89;
  v90 = (void *)objc_msgSend_objectForKey_(a2, v87, (uint64_t)CFSTR("layerMask"), v88);
  if (v90)
    *(_BYTE *)(v10 + 480) = sub_1B19ADEC8(v90);
  v93 = (void *)objc_msgSend_objectForKey_(a2, v91, (uint64_t)CFSTR("includeCategoryMask"), v92);
  if (v93)
    v96 = sub_1B19ADEC8(v93);
  else
    v96 = -1;
  *(_QWORD *)(v10 + 200) = v96;
  v97 = (void *)objc_msgSend_objectForKey_(a2, v94, (uint64_t)CFSTR("excludeCategoryMask"), v95);
  if (v97)
    v97 = (void *)sub_1B19ADEC8(v97);
  *(_QWORD *)(v10 + 208) = v97;
  v100 = (void *)objc_msgSend_objectForKey_(a2, v98, (uint64_t)CFSTR("viewport"), v99);
  if (v100)
  {
    *(_DWORD *)(v10 + 184) |= 0x40000u;
    *(_DWORD *)context = 0;
    LODWORD(v292[0]) = 0;
    v293 = 0;
    v104 = (const char *)objc_msgSend_UTF8String(v100, v101, v102, v103);
    sscanf(v104, "%f %f %f %f", context, v292, (char *)&v293 + 4, &v293);
    *(_QWORD *)&v105 = __PAIR64__(v292[0], *(unsigned int *)context);
    *((_QWORD *)&v105 + 1) = __PAIR64__(v293, HIDWORD(v293));
    *(_OWORD *)(v10 + 144) = v105;
  }
  v106 = (void *)objc_msgSend_objectForKey_(a2, v101, (uint64_t)CFSTR("samples"), v103);
  v110 = objc_msgSend_intValue(v106, v107, v108, v109);
  if (!v110)
    LOBYTE(v110) = (*(_DWORD *)(v10 + 24) & 0xFFFFFFFB) == 0;
  *(_BYTE *)(v10 + 176) = v110;
  memset(v292, 0, 28);
  v111 = sub_1B181EB54(v292);
  v114 = (void *)objc_msgSend_objectForKey_(a2, v112, (uint64_t)CFSTR("cullMode"), v113, v111);
  v117 = v114 != 0;
  if (v114)
  {
    v118 = v114;
    if ((objc_msgSend_isEqualToString_(v114, v115, (uint64_t)CFSTR("cullFront"), v116) & 1) != 0
      || (objc_msgSend_isEqualToString_(v118, v115, (uint64_t)CFSTR("front"), v116) & 1) != 0)
    {
      v119 = 1;
    }
    else if ((objc_msgSend_isEqualToString_(v118, v115, (uint64_t)CFSTR("cullNone"), v116) & 1) != 0
           || (objc_msgSend_isEqualToString_(v118, v115, (uint64_t)CFSTR("none"), v116) & 1) != 0)
    {
      v119 = 2;
    }
    else
    {
      if ((objc_msgSend_isEqualToString_(v118, v115, (uint64_t)CFSTR("cullBack"), v116) & 1) == 0
        && (objc_msgSend_isEqualToString_(v118, v115, (uint64_t)CFSTR("back"), v116) & 1) == 0)
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown cull mode named %@"), v280, v116, v281, v282, v283, v284, (uint64_t)v118);
      }
      v119 = 0;
    }
    LODWORD(v292[0]) = v119;
  }
  v120 = (void *)objc_msgSend_objectForKey_(a2, v115, (uint64_t)CFSTR("colorStates"), v116);
  if (v120)
  {
    v123 = v120;
    v124 = (void *)objc_msgSend_objectForKey_(v120, v121, (uint64_t)CFSTR("clearColor"), v122);
    if (v124)
    {
      v127 = v124;
      v128 = objc_msgSend_isEqualToString_(v124, v125, (uint64_t)CFSTR("worldBackground"), v126);
      v130 = *(_DWORD *)(v10 + 184);
      if (v128)
      {
        v131 = v130 | 0x200;
      }
      else
      {
        *(_DWORD *)(v10 + 184) = v130 & 0xFFFFFDFF;
        v132 = (const char *)objc_msgSend_UTF8String(v127, v125, v129, v126);
        sscanf(v132, "%f %f %f %f", v10 + 128, v10 + 132, v10 + 136, v10 + 140);
        v131 = *(_DWORD *)(v10 + 184);
      }
      *(_DWORD *)(v10 + 184) = v131 | 1;
    }
    v133 = (void *)objc_msgSend_objectForKey_(v123, v125, (uint64_t)CFSTR("clear"), v126);
    if (v133)
      *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFFE | objc_msgSend_BOOLValue(v133, v121, v134, v122);
  }
  v135 = (void *)objc_msgSend_objectForKey_(a2, v121, (uint64_t)CFSTR("depthStates"), v122);
  if (!v135)
    goto LABEL_72;
  v138 = v135;
  v139 = (void *)objc_msgSend_objectForKey_(v135, v136, (uint64_t)CFSTR("enableWrite"), v137);
  if (v139)
  {
    BYTE9(v292[0]) = objc_msgSend_BOOLValue(v139, v140, v141, v142);
    v117 = 1;
  }
  v143 = (void *)objc_msgSend_objectForKey_(v138, v140, (uint64_t)CFSTR("enableRead"), v142);
  if (v143)
  {
    BYTE8(v292[0]) = objc_msgSend_BOOLValue(v143, v144, v145, v146);
    v117 = 1;
  }
  v147 = (void *)objc_msgSend_objectForKey_(v138, v144, (uint64_t)CFSTR("clear"), v146);
  if (v147)
  {
    if (objc_msgSend_BOOLValue(v147, v148, v149, v150))
      v151 = 2;
    else
      v151 = 0;
    *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFFD | v151;
  }
  v152 = (void *)objc_msgSend_objectForKey_(v138, v148, (uint64_t)CFSTR("func"), v150);
  if (!v152)
  {
LABEL_72:
    v158 = (void *)objc_msgSend_objectForKey_(a2, v136, (uint64_t)CFSTR("stencilStates"), v137);
    if (!v158)
    {
      v159 = 0;
      if (!v117)
        goto LABEL_87;
      goto LABEL_86;
    }
    goto LABEL_73;
  }
  BYTE10(v292[0]) = sub_1B19ADF6C(v152, v136, v153, v137);
  v158 = (void *)objc_msgSend_objectForKey_(a2, v154, (uint64_t)CFSTR("stencilStates"), v155);
  if (v158)
  {
LABEL_73:
    v160 = (void *)objc_msgSend_objectForKey_(v158, v156, (uint64_t)CFSTR("enable"), v157);
    if (v160)
      v164 = objc_msgSend_BOOLValue(v160, v161, v162, v163);
    else
      v164 = 1;
    BYTE11(v292[0]) = v164;
    v159 = v164 != 0;
    v165 = (void *)objc_msgSend_objectForKey_(v158, v161, (uint64_t)CFSTR("clear"), v163);
    if (v165)
    {
      if (objc_msgSend_BOOLValue(v165, v166, v167, v168))
        v169 = 4;
      else
        v169 = 0;
      *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFF3 | v169;
    }
    v170 = (void *)objc_msgSend_objectForKey_(v158, v166, (uint64_t)CFSTR("behavior"), v168);
    if (v170)
      sub_1B19AE07C(v170, (uint64_t)v292 + 13, v172, v173);
    v174 = (void *)objc_msgSend_objectForKey_(v158, v171, (uint64_t)CFSTR("backFaceBehavior"), v173);
    if (v174)
    {
      BYTE12(v292[0]) = 1;
      sub_1B19AE07C(v174, (uint64_t)&v292[1] + 4, v175, v176);
    }
    goto LABEL_86;
  }
  v159 = 0;
LABEL_86:
  *(_OWORD *)context = v292[0];
  *(_OWORD *)&context[12] = *(_OWORD *)((char *)v292 + 12);
  v177 = (const void *)sub_1B181EC70((uint64_t)context);
  sub_1B19AE15C(v10, v177, v178, v179, v180, v181, v182, v183);
  sub_1B181EE08(v177);
LABEL_87:
  v184 = objc_msgSend_objectForKey_(a2, v156, (uint64_t)CFSTR("blendStates"), v157);
  if (!v184)
    goto LABEL_117;
  v185 = (void *)v184;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
    v185 = (void *)objc_msgSend_arrayWithObject_(MEMORY[0x1E0C99D20], v186, (uint64_t)v185, v188);
  v291 = v8;
  v189 = objc_msgSend_count(v185, v186, v187, v188);
  if (v189 >= 5)
  {
    v197 = 4;
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: too many blend states: max render target is %d"), v191, v192, v193, v194, v195, v196, 4);
    goto LABEL_93;
  }
  v197 = v189;
  if (v189 >= 1)
  {
LABEL_93:
    v289 = v159;
    v290 = v10;
    v198 = 0;
    v199 = &context[3];
    do
    {
      v200 = (void *)objc_msgSend_objectAtIndex_(v185, v190, v198, v192);
      v203 = (void *)objc_msgSend_objectForKey_(v200, v201, (uint64_t)CFSTR("enable"), v202);
      if (v203)
        v207 = objc_msgSend_BOOLValue(v203, v204, v205, v206);
      else
        v207 = 1;
      *(v199 - 3) = v207;
      v208 = (void *)objc_msgSend_objectForKey_(v200, v204, (uint64_t)CFSTR("colorSrc"), v206);
      if (v208)
        v212 = sub_1B19B0238(v208, v209, v210, v211);
      else
        v212 = 1;
      *(v199 - 1) = v212;
      v213 = (void *)objc_msgSend_objectForKey_(v200, v209, (uint64_t)CFSTR("colorDst"), v211);
      if (v213)
        v217 = sub_1B19B0238(v213, v214, v215, v216);
      else
        v217 = 5;
      *v199 = v217;
      *(v199 - 2) = 0;
      v218 = (void *)objc_msgSend_objectForKey_(v200, v214, (uint64_t)CFSTR("alphaSrc"), v216);
      if (v218)
      {
        v222 = sub_1B19B0238(v218, v219, v220, v221);
        *(v199 - 2) = 1;
      }
      else
      {
        v222 = 1;
      }
      v199[2] = v222;
      v223 = (void *)objc_msgSend_objectForKey_(v200, v219, (uint64_t)CFSTR("alphaDst"), v221);
      if (v223)
      {
        v227 = sub_1B19B0238(v223, v224, v225, v226);
        *(v199 - 2) = 1;
      }
      else
      {
        v227 = 5;
      }
      v199[3] = v227;
      v228 = (void *)objc_msgSend_objectForKey_(v200, v224, (uint64_t)CFSTR("colorOp"), v226);
      if (v228)
        LOBYTE(v228) = sub_1B19B0410(v228, v229, v230, v231);
      v199[1] = (char)v228;
      v232 = (void *)objc_msgSend_objectForKey_(v200, v229, (uint64_t)CFSTR("alphaOp"), v231);
      if (v232)
      {
        LOBYTE(v232) = sub_1B19B0410(v232, v190, v233, v192);
        *(v199 - 2) = 1;
      }
      v199[4] = (char)v232;
      ++v198;
      v199 += 8;
    }
    while (v197 != v198);
    v10 = v290;
    v159 = v289;
  }
  v234 = (const void *)sub_1B18A7830((uint64_t)context, v197);
  sub_1B19AE1CC(v10, v234, v235, v236, v237, v238, v239, v240);
  CFRelease(v234);
  v8 = v291;
  if (!v10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v241, v242, v243, v244, v245, v246, (uint64_t)"fxPass");
LABEL_117:
  v247 = *(const void **)(v10 + 16);
  Value = (const __CFDictionary *)CFDictionaryGetValue(v8, CFSTR("passes"));
  v249 = CFDictionaryGetValue(v8, CFSTR("targets"));
  if (Value)
  {
    v251 = v249;
    v252 = (const __CFDictionary *)CFDictionaryGetValue(Value, v247);
    if (v252)
    {
      v259 = (const __CFDictionary *)CFDictionaryGetValue(v252, CFSTR("outputs"));
      if (v259)
      {
        v260 = v259;
        memset(v296, 0, sizeof(v296));
        *(_OWORD *)&context[16] = 0u;
        memset(v295, 0, sizeof(v295));
        *(_QWORD *)&context[8] = v251;
        *(_QWORD *)context = 0x1003F800000;
        memset_pattern16(v295, &xmmword_1B2244E30, 0x20uLL);
        v261 = 0;
        __asm { FMOV            V0.2S, #1.0 }
        *(_QWORD *)&v296[12] = _D0;
        v297 = 0;
        v296[22] = v159;
        v267 = *(_DWORD *)(v10 + 24);
        if (v267 <= 6 && ((1 << v267) & 0x4C) != 0)
        {
          context[4] = 1;
          v261 = 41;
        }
        *(_QWORD *)&context[24] = 0;
        v296[8] = v261;
        CFDictionaryApplyFunction(v260, (CFDictionaryApplierFunction)sub_1B19AE244, context);
        v274 = 0;
        *(_BYTE *)(v10 + 363) = (*(_BYTE *)(v10 + 363) & 0xFC | context[4] | (2 * v296[21])) ^ 1;
        *(_BYTE *)(v10 + 360) = v296[8];
        *(_DWORD *)(v10 + 424) = *(_DWORD *)&v296[12];
        v275 = v297;
        v276 = (_BYTE *)(v10 + 299);
        v277 = context[5] | (2 * v296[20]);
        do
        {
          if (context[v274 + 24])
          {
            v278 = *v276 & 0xEC | v277;
            *(v276 - 3) = context[v274 + 24];
            *v276 = (v278 | (16 * v296[v274])) ^ 1;
            *(_DWORD *)(v10 + 4 * v274 + 392) = *(_DWORD *)&context[4 * v274 + 32];
            *(v276 - 1) = v275;
            *(_BYTE *)(v10 + 368) = *(_BYTE *)(v10 + 368) & 0xF8 | (v274 + 1) & 7;
          }
          ++v274;
          v276 += 8;
        }
        while (v274 != 8);
        if (*(float *)&context[16] == 0.0 || *(float *)&context[20] == 0.0)
        {
          sub_1B181C184(v10 + 288, 1, v268, v269, v270, v271, v272, v273);
        }
        else
        {
          sub_1B181C184(v10 + 288, 0, v268, v269, v270, v271, v272, v273);
          *(_QWORD *)(v10 + 288) = *(_QWORD *)&context[16];
        }
        result = *(float *)context;
        *(double *)(v10 + 376) = *(float *)context;
        *(double *)(v10 + 384) = result;
      }
      else
      {
        *(_BYTE *)(v10 + 360) = 0;
        *(_BYTE *)(v10 + 296) = 0;
      }
    }
    else
    {
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: can't create a fbo description for pass %@ - can't find pass description with name %@"), v253, v254, v255, v256, v257, v258, v10);
    }
  }
  return result;
}

uint64_t sub_1B19ADEC8(void *a1)
{
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;

  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0)
    return objc_msgSend_unsignedIntegerValue(a1, v2, v3, v4);
  if (!objc_msgSend_hasPrefix_(a1, v2, (uint64_t)CFSTR("0x"), v4))
    return objc_msgSend_integerValue(a1, v6, v7, v8);
  v10 = 0;
  v9 = (const char *)objc_msgSend_cStringUsingEncoding_(a1, v6, 4, v8);
  sscanf(v9, "%lu", &v10);
  return v10;
}

uint64_t sub_1B19ADF6C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("never"), a4) & 1) != 0)
    return 0;
  if ((objc_msgSend_isEqualToString_(a1, v5, (uint64_t)CFSTR("always"), v6) & 1) != 0)
    return 1;
  if ((objc_msgSend_isEqualToString_(a1, v8, (uint64_t)CFSTR("equal"), v9) & 1) != 0)
    return 2;
  if ((objc_msgSend_isEqualToString_(a1, v10, (uint64_t)CFSTR("notEqual"), v11) & 1) != 0)
    return 3;
  if ((objc_msgSend_isEqualToString_(a1, v12, (uint64_t)CFSTR("less"), v13) & 1) != 0)
    return 4;
  if ((objc_msgSend_isEqualToString_(a1, v14, (uint64_t)CFSTR("lessEqual"), v15) & 1) != 0)
    return 5;
  if ((objc_msgSend_isEqualToString_(a1, v16, (uint64_t)CFSTR("greater"), v17) & 1) == 0)
  {
    if ((objc_msgSend_isEqualToString_(a1, v18, (uint64_t)CFSTR("greaterEqual"), v19) & 1) != 0)
      return 7;
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown depth comparison function named %@"), v20, v21, v22, v23, v24, v25, (uint64_t)a1);
  }
  return 6;
}

void *sub_1B19AE07C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *result;
  const char *v31;
  uint64_t v32;
  uint64_t v33;

  v6 = (void *)objc_msgSend_valueForKey_(a1, (const char *)a2, (uint64_t)CFSTR("depthFail"), a4);
  if (v6)
    *(_BYTE *)(a2 + 5) = sub_1B19B0124(v6, v7, v8, v9);
  v10 = (void *)objc_msgSend_valueForKey_(a1, v7, (uint64_t)CFSTR("fail"), v9);
  if (v10)
    *(_BYTE *)(a2 + 6) = sub_1B19B0124(v10, v11, v12, v13);
  v14 = (void *)objc_msgSend_valueForKey_(a1, v11, (uint64_t)CFSTR("pass"), v13);
  if (v14)
    *(_BYTE *)(a2 + 4) = sub_1B19B0124(v14, v15, v16, v17);
  v18 = (void *)objc_msgSend_valueForKey_(a1, v15, (uint64_t)CFSTR("function"), v17);
  if (v18)
    *(_BYTE *)a2 = sub_1B19ADF6C(v18, v19, v20, v21);
  v22 = (void *)objc_msgSend_valueForKey_(a1, v19, (uint64_t)CFSTR("readMask"), v21);
  if (v22)
    *(_BYTE *)(a2 + 1) = objc_msgSend_unsignedCharValue(v22, v23, v24, v25);
  v26 = (void *)objc_msgSend_valueForKey_(a1, v23, (uint64_t)CFSTR("writeMask"), v25);
  if (v26)
    *(_BYTE *)(a2 + 2) = objc_msgSend_unsignedCharValue(v26, v27, v28, v29);
  result = (void *)objc_msgSend_valueForKey_(a1, v27, (uint64_t)CFSTR("referenceValue"), v29);
  if (result)
  {
    result = (void *)objc_msgSend_unsignedCharValue(result, v31, v32, v33);
    *(_BYTE *)(a2 + 3) = (_BYTE)result;
  }
  return result;
}

CFTypeRef sub_1B19AE15C(uint64_t a1, CFTypeRef a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 112);
  if (result != a2)
  {
    sub_1B181EE08(result);
    if (a2)
      result = CFRetain(a2);
    else
      result = 0;
    *(_QWORD *)(a1 + 112) = result;
  }
  return result;
}

CFTypeRef sub_1B19AE1CC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  result = *(CFTypeRef *)(a1 + 104);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 104) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 104) = result;
  }
  return result;
}

void sub_1B19AE244(const void *a1, const void *a2, uint64_t a3)
{
  const __CFDictionary *v5;
  const __CFDictionary *Value;
  const char *v7;
  uint64_t v8;
  int v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFNumber *v24;
  const __CFNumber *v25;
  const char *v26;
  const char *v27;
  const void *v28;
  const __CFArray *v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const __CFNumber *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFNumber *v49;
  char v50;
  uint64_t v51;

  v5 = *(const __CFDictionary **)(a3 + 8);
  if (v5)
    Value = (const __CFDictionary *)CFDictionaryGetValue(v5, a2);
  else
    Value = 0;
  if (CFEqual(a1, CFSTR("color")) || CFEqual(a1, CFSTR("color0")))
  {
    v9 = 1;
LABEL_7:
    *(_BYTE *)(a3 + 5) = 0;
    if (Value)
    {
      v10 = (void *)CFDictionaryGetValue(Value, CFSTR("format"));
      if (v10)
      {
        v12 = (uint64_t)v10;
        v13 = sub_1B181C224(v10, v7, v11, v8);
        if (v13)
        {
LABEL_12:
          v19 = (v9 - 1);
          *(_BYTE *)(a3 + v19 + 24) = v13;
          v20 = (void *)objc_msgSend_objectForKeyedSubscript_(Value, v7, (uint64_t)CFSTR("mipmapped"), v8);
          *(_BYTE *)(a3 + v19 + 64) = objc_msgSend_BOOLValue(v20, v21, v22, v23);
          if (!Value)
            return;
          v24 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
          if (v24)
            CFNumberGetValue(v24, kCFNumberFloatType, (void *)(a3 + 4 * v19 + 32));
          goto LABEL_15;
        }
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: unknown texture format : %@"), v14, v8, v15, v16, v17, v18, v12);
      }
    }
    LOBYTE(v13) = 1;
    goto LABEL_12;
  }
  if (CFEqual(a1, CFSTR("color1")))
  {
    v9 = 2;
    goto LABEL_7;
  }
  if (CFEqual(a1, CFSTR("color2")))
  {
    v9 = 3;
    goto LABEL_7;
  }
  if (CFEqual(a1, CFSTR("color3")))
  {
    v9 = 4;
    goto LABEL_7;
  }
  if (!CFEqual(a1, CFSTR("depth")))
  {
    if (CFEqual(a1, CFSTR("stencil")))
    {
      *(_BYTE *)(a3 + 4) = 0;
      *(_BYTE *)(a3 + 72) = 44;
      if (!Value)
        return;
      v49 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
      if (v49)
        CFNumberGetValue(v49, kCFNumberFloatType, (void *)(a3 + 80));
      v9 = 5;
      goto LABEL_15;
    }
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: _bufferTypeFromName - unknown output type: %@"), v43, v44, v45, v46, v47, v48, (uint64_t)a1);
  }
  *(_BYTE *)(a3 + 4) = 0;
  if (!Value)
  {
    if (*(_BYTE *)(a3 + 86))
      v50 = 44;
    else
      v50 = 41;
    *(_BYTE *)(a3 + 72) = v50;
    return;
  }
  v30 = (void *)CFDictionaryGetValue(Value, CFSTR("format"));
  if (!v30)
    goto LABEL_38;
  v34 = (uint64_t)v30;
  v35 = sub_1B181C224(v30, v31, v32, v33);
  if (!v35)
  {
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: unknown depth texture format : %@"), v36, v37, v38, v39, v40, v41, v34);
LABEL_38:
    if (*(_BYTE *)(a3 + 86))
      LOBYTE(v35) = 44;
    else
      LOBYTE(v35) = 41;
  }
  *(_BYTE *)(a3 + 72) = v35;
  v42 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
  if (v42)
    CFNumberGetValue(v42, kCFNumberFloatType, (void *)(a3 + 76));
  v9 = 0;
LABEL_15:
  v25 = (const __CFNumber *)CFDictionaryGetValue(Value, CFSTR("scaleFactor"));
  if (v25)
    CFNumberGetValue(v25, kCFNumberFloatType, (void *)a3);
  v26 = (const char *)CFDictionaryGetValue(Value, CFSTR("size"));
  if (v26)
  {
    v51 = 0;
    v27 = sub_1B179F0AC(v26);
    sscanf(v27, "%fx%f", (char *)&v51 + 4, &v51);
    *(_QWORD *)(a3 + 16) = __PAIR64__(v51, HIDWORD(v51));
  }
  v28 = CFDictionaryGetValue(Value, CFSTR("target"));
  if (v28 && CFEqual(v28, CFSTR("texture_rectangle")))
  {
    if (v9 == 1)
      *(_BYTE *)(a3 + 84) = 1;
    else
      *(_BYTE *)(a3 + 85) = 1;
  }
  v29 = (const __CFArray *)CFDictionaryGetValue(Value, CFSTR("usage"));
  if (v29)
    *(_QWORD *)(a3 + 88) = sub_1B189E6DC(v29);
}

_QWORD *sub_1B19AE560(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"pass");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"inputName");
LABEL_3:
  v10 = *(_QWORD *)(a1 + 520);
  if (v10 == *(_QWORD *)(a1 + 528))
  {
    v11 = 2 * v10;
    if (v11 <= 1)
      v11 = 1;
    *(_QWORD *)(a1 + 528) = v11;
    *(_QWORD *)(a1 + 512) = malloc_type_realloc(*(void **)(a1 + 512), 8 * v11, 0x2004093837F09uLL);
  }
  v12 = (_QWORD *)sub_1B19AC828();
  v13 = *(_QWORD *)(a1 + 512);
  v14 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 520) = v14 + 1;
  *(_QWORD *)(v13 + 8 * v14) = v12;
  v12[6] = CFRetain(a2);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 536), a2, v12);
  return v12;
}

const void *sub_1B19AE654(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"pass");
    if (key)
      return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 536), key);
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"inputName");
    return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 536), key);
  }
  if (!key)
    goto LABEL_5;
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 536), key);
}

uint64_t sub_1B19AE6CC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 216) = a2;
  return result;
}

uint64_t sub_1B19AE6D4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 232) = a2;
  return result;
}

uint64_t sub_1B19AE6DC(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 240);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_1B19AE6F0(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 248);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_1B19AE704(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(*(_QWORD *)result + 256);
  if (v1)
    return v1();
  return result;
}

void sub_1B19AE718(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  uint64_t v19;
  _QWORD context[3];

  context[2] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
    if (theDict)
      goto LABEL_3;
LABEL_6:
    *(_QWORD *)(a1 + 520) = 0;
    return;
  }
  if (!theDict)
    goto LABEL_6;
LABEL_3:
  Count = CFDictionaryGetCount(theDict);
  v18 = Count;
  *(_QWORD *)(a1 + 520) = 0;
  if (Count < 1)
  {
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 512) = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
    context[0] = a1;
    context[1] = a3;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1B19AE824, context);
    v19 = *(_QWORD *)(a1 + 520);
  }
  if (v19 != v18)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected error in CFXFXPassSetInputs"), v12, v13, v14, v15, v16, v17, (uint64_t)"fxPass->_inputCount == count");
}

void sub_1B19AE824(const void *a1, __CFString *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  CFTypeID v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __CFString *Value;
  const __CFDictionary *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const __CFDictionary *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFDictionary *v34;
  const __CFDictionary *v35;
  void *v36;
  const __CFDictionary *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  const __CFString *v43;
  _QWORD v44[2];

  v44[1] = *MEMORY[0x1E0C80C00];
  v11 = *a3;
  v10 = a3[1];
  v12 = sub_1B19AE560(*a3, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  v13 = CFGetTypeID(a2);
  if (v13 == CFDictionaryGetTypeID())
  {
    Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("target"));
    v21 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, CFSTR("sampler"));
    if (!v21)
      v21 = (const __CFDictionary *)a2;
    v12[10] = sub_1B180C8F8(v21);
    a2 = Value;
  }
  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v14, v15, v16, v17, v18, v19, (uint64_t)"targetName");
  sub_1B19AC884((uint64_t)v12, a2, v14, v15, v16, v17, v18, v19);
  if (CFEqual(a2, CFSTR("COLOR")))
  {
    *((_BYTE *)v12 + 88) |= 1u;
    v25 = *(_DWORD *)(v11 + 184) | 0x2000000;
LABEL_11:
    *(_DWORD *)(v11 + 184) = v25;
    sub_1B19B04D0(v11, (uint64_t)v12, (uint64_t)a1, v10, 0, v22, v23, v24);
    return;
  }
  if (CFEqual(a2, CFSTR("DEPTH")))
  {
    *((_BYTE *)v12 + 88) |= 2u;
    v25 = *(_DWORD *)(v11 + 184) | 0x4000000;
    goto LABEL_11;
  }
  v30 = (const __CFDictionary *)sub_1B18D64E0(v10, v26, v27, v28, v29, v22, v23, v24);
  if (!v30)
    goto LABEL_20;
  v34 = v30;
  v35 = (const __CFDictionary *)CFDictionaryGetValue(v30, CFSTR("targets"));
  if (v35)
  {
    v36 = (void *)CFDictionaryGetValue(v35, a2);
    if (v36)
      goto LABEL_21;
  }
  v37 = (const __CFDictionary *)CFDictionaryGetValue(v34, CFSTR("symbols"));
  if (!v37)
  {
    if (sub_1B19B0700(a2, v38, v39, v40))
    {
      v43 = CFSTR("semantic");
      v44[0] = a2;
      v41 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v42, (uint64_t)v44, (uint64_t)&v43, 1);
      goto LABEL_19;
    }
LABEL_20:
    v36 = 0;
    goto LABEL_21;
  }
  v41 = (uint64_t)CFDictionaryGetValue(v37, a2);
LABEL_19:
  v36 = (void *)v41;
LABEL_21:
  sub_1B19B04D0(v11, (uint64_t)v12, (uint64_t)a1, v10, v36, v31, v32, v33);
}

void sub_1B19AEA54(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFIndex v18;
  CFIndex v19;
  _QWORD context[4];

  context[3] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
    if (theDict)
      goto LABEL_3;
LABEL_6:
    *(_DWORD *)(a1 + 440) = 0;
    return;
  }
  if (!theDict)
    goto LABEL_6;
LABEL_3:
  Count = CFDictionaryGetCount(theDict);
  v18 = Count;
  *(_DWORD *)(a1 + 440) = 0;
  if (Count < 1)
  {
    v19 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 432) = malloc_type_malloc(Count << 6, 0x1060040C031C1FFuLL);
    context[1] = a3;
    context[2] = 0;
    context[0] = a1;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1B19AEB64, context);
    v19 = *(unsigned int *)(a1 + 440);
  }
  if (v18 < v19)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. unexpected error in CFXFXPassSetOutput"), v12, v13, v14, v15, v16, v17, (uint64_t)"(CFIndex)fxPass->_outputCount <= count");
}

void sub_1B19AEB64(const void *a1, CFTypeRef cf1, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _DWORD *v20;
  const __CFBoolean *v21;
  const __CFBoolean *v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  uint64_t v29;
  CFTypeRef v30;
  const __CFDictionary *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFDictionary *v38;
  const __CFDictionary *Value;
  const __CFDictionary *v40;
  const __CFDictionary *v41;
  const __CFDictionary *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = *a3;
  v5 = a3[1];
  if (CFEqual(cf1, CFSTR("COLOR")))
  {
    *(_DWORD *)(v6 + 184) |= 0xA00000u;
    if (!CFEqual(cf1, CFSTR("DEPTH")))
    {
      v7 = 0;
LABEL_6:
      v15 = 1;
      goto LABEL_7;
    }
LABEL_5:
    v7 = 0;
    *(_DWORD *)(v6 + 184) |= 0x1200000u;
    goto LABEL_6;
  }
  if (CFEqual(cf1, CFSTR("DEPTH")))
    goto LABEL_5;
  v31 = (const __CFDictionary *)sub_1B18D64E0(v5, v8, v9, v10, v11, v12, v13, v14);
  if (!v31)
    goto LABEL_33;
  v38 = v31;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v31, CFSTR("targets"));
  if (!Value || (v40 = (const __CFDictionary *)CFDictionaryGetValue(Value, cf1)) == 0)
  {
    v41 = (const __CFDictionary *)CFDictionaryGetValue(v38, CFSTR("symbols"));
    if (v41)
    {
      v42 = (const __CFDictionary *)CFDictionaryGetValue(v41, cf1);
      if (v42)
      {
        v7 = v42;
        sub_1B17C4408(0, (uint64_t)CFSTR("Warning: symbol named %@ should be in \"targets\" not \"symbols\""), v32, v33, v34, v35, v36, v37, (uint64_t)cf1);
        goto LABEL_32;
      }
    }
LABEL_33:
    sub_1B17C4408(0, (uint64_t)CFSTR("Warning: _convertOutputsDescriptionToOutputs - can't find output named %@"), v32, v33, v34, v35, v36, v37, (uint64_t)cf1);
    return;
  }
  v7 = v40;
LABEL_32:
  v15 = 0;
LABEL_7:
  v16 = *(_QWORD *)(v6 + 432);
  v17 = *(unsigned int *)(v6 + 440);
  v18 = v16 + (v17 << 6);
  *(_BYTE *)(v18 + 48) = 0;
  v19 = (_BYTE *)(v18 + 48);
  *(_DWORD *)(v18 + 20) = 0;
  v20 = (_DWORD *)(v18 + 20);
  *(_DWORD *)(v16 + (v17 << 6)) = 1065353216;
  if (v7)
  {
    v21 = (const __CFBoolean *)CFDictionaryGetValue(v7, CFSTR("global"));
    if (v21 && CFBooleanGetValue(v21))
      *v20 = 2147483646;
    v22 = (const __CFBoolean *)CFDictionaryGetValue(v7, CFSTR("persistent"));
    if (v22 && CFBooleanGetValue(v22))
      *v20 = 0x7FFFFFFF;
    v23 = (void *)CFDictionaryGetValue(v7, CFSTR("clearColor"));
    if (v23)
    {
      v27 = (const char *)objc_msgSend_UTF8String(v23, v24, v25, v26);
      sscanf(v27, "%f %f %f %f", v16 + (v17 << 6) + 32, v16 + (v17 << 6) + 36, v16 + (v17 << 6) + 40, v16 + (v17 << 6) + 44);
      *v19 = 1;
    }
  }
  if (CFEqual(a1, CFSTR("color")) || CFEqual(a1, CFSTR("color0")))
  {
    v28 = 1;
  }
  else if (CFEqual(a1, CFSTR("color1")))
  {
    v28 = 2;
  }
  else if (CFEqual(a1, CFSTR("color2")))
  {
    v28 = 3;
  }
  else if (CFEqual(a1, CFSTR("color3")))
  {
    v28 = 4;
  }
  else if (CFEqual(a1, CFSTR("depth")))
  {
    v28 = 0;
  }
  else
  {
    if (!CFEqual(a1, CFSTR("stencil")))
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: _convertOutputsDescriptionToOutputs - unknown output type: %@"), v43, v44, v45, v46, v47, v48, (uint64_t)a1);
      return;
    }
    v28 = 5;
  }
  v29 = v16 + (v17 << 6);
  *(_DWORD *)(v29 + 16) = v28;
  *(_DWORD *)(v6 + 184) |= 0x200000u;
  if ((v15 & 1) != 0)
    v30 = 0;
  else
    v30 = CFRetain(cf1);
  *(_QWORD *)(v29 + 8) = v30;
  ++*(_DWORD *)(v6 + 440);
}

BOOL sub_1B19AEE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"pass");
  return *(_QWORD *)(a1 + 96) != 0;
}

const void *sub_1B19AEEB4(uint64_t a1, uint64_t a2, char *key, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v11;
  __int128 v12;
  __CFNotificationCenter *LocalCenter;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *Value;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 *v31;
  int v32;
  int v33;
  char v34;
  int v35;
  int v36;
  int v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  const void *v68;
  uint64_t v69;
  unint64_t v70;
  _QWORD *v71;
  __n128 *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  const void *v78;
  __CFDictionary *v79;
  CFDictionaryValueCallBacks valueCallBacks;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"pass");
  if (!*(_QWORD *)(a2 + 96))
    return 0;
  v11 = *(const __CFDictionary **)(a2 + 560);
  if (!v11)
  {
    v12 = *(_OWORD *)(MEMORY[0x1E0C9B3A0] + 16);
    *(_OWORD *)&valueCallBacks.version = *MEMORY[0x1E0C9B3A0];
    *(_OWORD *)&valueCallBacks.release = v12;
    valueCallBacks.equal = *(CFDictionaryEqualCallBack *)(MEMORY[0x1E0C9B3A0] + 32);
    valueCallBacks.release = (CFDictionaryReleaseCallBack)sub_1B19AF1C0;
    *(_QWORD *)(a2 + 560) = CFDictionaryCreateMutable(0, 0, 0, &valueCallBacks);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)a2, (CFNotificationCallback)sub_1B19AF1C8, CFSTR("kCFXNotificationRendererElementWillDie"), 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    v11 = *(const __CFDictionary **)(a2 + 560);
  }
  Value = CFDictionaryGetValue(v11, key);
  if (!Value)
  {
    v22 = *(_QWORD *)(a2 + 96);
    if (v22 && sub_1B1878184(*(_QWORD *)(a2 + 96), v14, v15, v16, v17, v18, v19, v20))
    {
      v30 = sub_1B17C2DEC((uint64_t)key);
      if (a1)
      {
        sub_1B1813BC4(a1, v23, v24, v25, v26, v27, v28, v29);
        v31 = (__int16 *)(key + 80);
        v32 = (*((unsigned __int16 *)key + 40) >> 11) & 7;
        v33 = sub_1B1815C04(a1);
        v34 = sub_1B1814EF8(a1);
        v35 = 8 * (v34 & 3);
        if ((v34 & 3) != 0)
          v36 = 32 * (sub_1B1815C10(a1) & 3);
        else
          v36 = 0;
        v38 = v35 | v32 | v36;
        v39 = sub_1B179F7DC(a1) << 16;
      }
      else
      {
        v33 = 0;
        v31 = (__int16 *)(key + 80);
        v38 = (*((unsigned __int16 *)key + 40) >> 11) & 7;
        v39 = 0x10000;
      }
      v40 = sub_1B17C2E80((uint64_t)key);
      v41 = sub_1B17C2E5C((uint64_t)key);
      if ((!sub_1B17C2E50((uint64_t)key) || (v38 & 0x18) != 0) && (*(_BYTE *)(a2 + 185) & 4) != 0
        || v40 && (sub_1B193F9D0(v40, 0, v43, v44, v45, v46, v47, v48) & 1) != 0)
      {
        v49 = *v31;
LABEL_32:
        *((_WORD *)key + 40) = v49 | 0x400;
        v75 = v33 | (v38 << 24);
        v76 = sub_1B17C2E5C((uint64_t)key);
        v77 = sub_1B17C2EA0((uint64_t)key);
        v78 = sub_1B17C2EC0((uint64_t)key);
        v74 = sub_1B17C2E80((uint64_t)key);
        v70 = v75 | v39 | 0x10;
        v71 = (_QWORD *)v30;
        v72 = (__n128 *)v76;
        v73 = v77;
        v68 = v78;
LABEL_33:
        Value = (const void *)sub_1B1957258(v71, v72, v73, (uint64_t)v68, 0, v74, v70, v69);
        v79 = *(__CFDictionary **)(a2 + 560);
        if (Value)
        {
          CFDictionarySetValue(v79, key, Value);
          CFRelease(Value);
        }
        else
        {
          CFDictionaryRemoveValue(v79, key);
        }
        return Value;
      }
      if (v41)
      {
        v50 = sub_1B193F9D0(v41, 0, v43, v44, v45, v46, v47, v48) ^ 1;
        if (!v40)
          goto LABEL_31;
      }
      else
      {
        v50 = 1;
        if (!v40)
          goto LABEL_31;
      }
      if (v50)
      {
        v51 = sub_1B187813C(v40, v42, v43, v44, v45, v46, v47, v48);
        v57 = sub_1B1840E70(v51, 16, 0, v52, v53, v54, v55, v56);
        if (v57)
        {
          v65 = sub_1B1841A40(v57, v58, v59, v60, v61, v62, v63, v64);
          v49 = *v31;
          if (v65)
            goto LABEL_32;
LABEL_30:
          *((_WORD *)key + 40) = v49 & 0xFBFF;
          v66 = sub_1B17C2E5C((uint64_t)key);
          v67 = sub_1B17C2EA0((uint64_t)key);
          v68 = sub_1B17C2EC0((uint64_t)key);
          v70 = v33 | (v38 << 24) | v39;
          v71 = (_QWORD *)v30;
          v72 = (__n128 *)v66;
          v73 = v67;
          v74 = v22;
          goto LABEL_33;
        }
      }
LABEL_31:
      v49 = *v31;
      if (!v50)
        goto LABEL_32;
      goto LABEL_30;
    }
    return 0;
  }
  return Value;
}

void sub_1B19AF1C0(uint64_t a1, uint64_t a2)
{
  sub_1B195809C(a2);
}

void sub_1B19AF1C8(int a1, uint64_t a2, uint64_t a3, void *key, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __CFDictionary *v9;

  v9 = *(__CFDictionary **)(a2 + 560);
  if (!v9)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, (uint64_t)key, a5, a6, a7, a8, (uint64_t)"pass->_overridedRendererElementsProgramHashcodes");
    v9 = *(__CFDictionary **)(a2 + 560);
  }
  CFDictionaryRemoveValue(v9, key);
}

uint64_t sub_1B19AF21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return *(_QWORD *)(a1 + 104);
}

uint64_t sub_1B19AF264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  return *(_QWORD *)(a1 + 112);
}

uint64_t sub_1B19AF2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
    return *(_QWORD *)a1;
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"passInstance");
  return 0;
}

void sub_1B19AF2F4(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;

  v2 = (const void *)a1[10];
  if (v2)
  {
    CFRelease(v2);
    a1[10] = 0;
  }
  v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  v4 = (const void *)a1[9];
  if (v4)
  {
    CFRelease(v4);
    a1[9] = 0;
  }
  v5 = (const void *)a1[13];
  if (v5)
    _Block_release(v5);
  v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
}

CFStringRef sub_1B19AF35C(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXFXPassInput %@>"), a1[7]);
}

CFStringRef sub_1B19AF39C(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXFXPassInput %@>"), a1[7]);
}

__CFArray *sub_1B19AF3DC(uint64_t a1)
{
  __CFArray *Mutable;
  __CFDictionary *v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  CFNumberRef v10;
  __CFDictionary *v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  uint64_t v16;
  int v17;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 2, MEMORY[0x1E0C9B378]);
  v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 80;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v6 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v3, CFSTR("name"), CFSTR("sampler"));
  CFDictionarySetValue(v3, CFSTR("type"), v4);
  CFDictionarySetValue(v3, CFSTR("address"), v6);
  CFDictionarySetValue(v3, CFSTR("semantic"), v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 56;
  v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v10 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v7, CFSTR("name"), CFSTR("symbolName"));
  CFDictionarySetValue(v7, CFSTR("type"), v8);
  CFDictionarySetValue(v7, CFSTR("address"), v10);
  CFDictionarySetValue(v7, CFSTR("semantic"), v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v17 = 2;
  valuePtr = 5;
  v16 = a1 + 48;
  v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  v14 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v11, CFSTR("name"), CFSTR("uniformName"));
  CFDictionarySetValue(v11, CFSTR("type"), v12);
  CFDictionarySetValue(v11, CFSTR("address"), v14);
  CFDictionarySetValue(v11, CFSTR("semantic"), v13);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v13);
  CFRelease(v11);
  CFRelease(v14);
  CFRelease(v12);
  return Mutable;
}

void sub_1B19AF708(uint64_t a1)
{
  void (*v2)(uint64_t *);
  uint64_t v3;
  __CFNotificationCenter *LocalCenter;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;
  const void *v14;
  const void *v15;
  const void *v16;
  __CFNotificationCenter *v17;
  const void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *(void (**)(uint64_t *))(a1 + 272);
  if (v2)
  {
    v27 = a1;
    v28 = 0u;
    v29 = 0u;
    v30 = 0;
    v31 = 0xBFF0000000000000;
    v3 = *(_QWORD *)(a1 + 280);
    v34 = 0;
    v32 = v3;
    v33 = 0;
    v35 = 0;
    v2(&v27);
  }
  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterPostNotification(LocalCenter, CFSTR("kCFXNotificationPassWillDie"), (const void *)a1, 0, 1u);
  v5 = *(const void **)(a1 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v6 = *(const void **)(a1 + 536);
  if (v6)
  {
    CFRelease(v6);
    *(_QWORD *)(a1 + 536) = 0;
  }
  v7 = *(const void **)(a1 + 48);
  if (v7)
  {
    CFRelease(v7);
    *(_QWORD *)(a1 + 48) = 0;
  }
  v8 = *(const void **)(a1 + 56);
  if (v8)
  {
    CFRelease(v8);
    *(_QWORD *)(a1 + 56) = 0;
  }
  v9 = *(const void **)(a1 + 64);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 64) = 0;
  }
  v10 = *(const void **)(a1 + 72);
  if (v10)
  {
    CFRelease(v10);
    *(_QWORD *)(a1 + 72) = 0;
  }
  v11 = *(const void **)(a1 + 88);
  if (v11)
  {
    CFRelease(v11);
    *(_QWORD *)(a1 + 88) = 0;
  }
  v12 = *(const void **)(a1 + 96);
  if (v12)
  {
    CFRelease(v12);
    *(_QWORD *)(a1 + 96) = 0;
  }
  v13 = *(const void **)(a1 + 104);
  if (v13)
  {
    CFRelease(v13);
    *(_QWORD *)(a1 + 104) = 0;
  }
  sub_1B181EE08(*(CFTypeRef *)(a1 + 112));
  v14 = *(const void **)(a1 + 456);
  if (v14)
  {
    CFRelease(v14);
    *(_QWORD *)(a1 + 456) = 0;
  }
  v15 = *(const void **)(a1 + 472);
  if (v15)
  {
    CFRelease(v15);
    *(_QWORD *)(a1 + 472) = 0;
  }
  v16 = *(const void **)(a1 + 464);
  if (v16)
  {
    CFRelease(v16);
    *(_QWORD *)(a1 + 464) = 0;
  }
  if (*(_QWORD *)(a1 + 560))
  {
    v17 = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(v17, (const void *)a1, CFSTR("kCFXNotificationRendererElementWillDie"), 0);
    v18 = *(const void **)(a1 + 560);
    if (v18)
    {
      CFRelease(v18);
      *(_QWORD *)(a1 + 560) = 0;
    }
  }
  if (*(uint64_t *)(a1 + 520) >= 1)
  {
    v19 = 0;
    do
      CFRelease(*(CFTypeRef *)(*(_QWORD *)(a1 + 512) + 8 * v19++));
    while (*(_QWORD *)(a1 + 520) > v19);
  }
  v20 = *(unsigned int *)(a1 + 440);
  if ((_DWORD)v20)
  {
    v21 = 0;
    v22 = *(_QWORD *)(a1 + 432);
    v23 = 8;
    do
    {
      v24 = *(const void **)(v22 + v23);
      if (v24)
      {
        CFRelease(v24);
        v22 = *(_QWORD *)(a1 + 432);
        *(_QWORD *)(v22 + v23) = 0;
        v20 = *(unsigned int *)(a1 + 440);
      }
      ++v21;
      v23 += 64;
    }
    while (v21 < v20);
  }
  free(*(void **)(a1 + 512));
  free(*(void **)(a1 + 432));
  v25 = *(const void **)(a1 + 544);
  if (v25)
    _Block_release(v25);
  v26 = *(const void **)(a1 + 552);
  if (v26)
    _Block_release(v26);
}

CFStringRef sub_1B19AF914(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXFXPass %@>"), a1[2]);
}

CFStringRef sub_1B19AF954(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXFXPass %@>"), a1[2]);
}

__CFArray *sub_1B19AF994(uint64_t a1)
{
  __CFArray *Mutable;
  const CFDictionaryKeyCallBacks *v3;
  const CFDictionaryValueCallBacks *v4;
  __CFDictionary *v5;
  CFNumberRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  __CFDictionary *v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  __CFDictionary *v13;
  CFNumberRef v14;
  CFNumberRef v15;
  CFNumberRef v16;
  __CFDictionary *v17;
  CFNumberRef v18;
  CFNumberRef v19;
  CFNumberRef v20;
  __CFDictionary *v21;
  CFNumberRef v22;
  CFNumberRef v23;
  CFNumberRef v24;
  __CFDictionary *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  __CFDictionary *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  __CFDictionary *v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  uint64_t v38;
  int v39;
  int valuePtr;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 16;
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v8 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v5, CFSTR("name"), CFSTR("name"));
  CFDictionarySetValue(v5, CFSTR("type"), v6);
  CFDictionarySetValue(v5, CFSTR("address"), v8);
  CFDictionarySetValue(v5, CFSTR("semantic"), v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 88;
  v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v12 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v9, CFSTR("name"), CFSTR("program"));
  CFDictionarySetValue(v9, CFSTR("type"), v10);
  CFDictionarySetValue(v9, CFSTR("address"), v12);
  CFDictionarySetValue(v9, CFSTR("semantic"), v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  v13 = CFDictionaryCreateMutable(0, 4, v3, v4);
  v39 = 0;
  valuePtr = 2;
  v38 = a1 + 24;
  v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v16 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v13, CFSTR("name"), CFSTR("draw"));
  CFDictionarySetValue(v13, CFSTR("type"), v14);
  CFDictionarySetValue(v13, CFSTR("address"), v16);
  CFDictionarySetValue(v13, CFSTR("semantic"), v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 448;
  v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v20 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v17, CFSTR("name"), CFSTR("pointOfView"));
  CFDictionarySetValue(v17, CFSTR("type"), v18);
  CFDictionarySetValue(v17, CFSTR("address"), v20);
  CFDictionarySetValue(v17, CFSTR("semantic"), v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 456;
  v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v24 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v21, CFSTR("name"), CFSTR("rootNode"));
  CFDictionarySetValue(v21, CFSTR("type"), v22);
  CFDictionarySetValue(v21, CFSTR("address"), v24);
  CFDictionarySetValue(v21, CFSTR("semantic"), v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  v25 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 472;
  v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v28 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v25, CFSTR("name"), CFSTR("mirrorNode"));
  CFDictionarySetValue(v25, CFSTR("type"), v26);
  CFDictionarySetValue(v25, CFSTR("address"), v28);
  CFDictionarySetValue(v25, CFSTR("semantic"), v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 96;
  v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v32 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v29, CFSTR("name"), CFSTR("material"));
  CFDictionarySetValue(v29, CFSTR("type"), v30);
  CFDictionarySetValue(v29, CFSTR("address"), v32);
  CFDictionarySetValue(v29, CFSTR("semantic"), v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  v33 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v39 = 2;
  valuePtr = 5;
  v38 = a1 + 536;
  v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  v36 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v33, CFSTR("name"), CFSTR("nameToInput"));
  CFDictionarySetValue(v33, CFSTR("type"), v34);
  CFDictionarySetValue(v33, CFSTR("address"), v36);
  CFDictionarySetValue(v33, CFSTR("semantic"), v35);
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  return Mutable;
}

uint64_t sub_1B19B0124(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if ((objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("keep"), a4) & 1) != 0)
    return 0;
  if ((objc_msgSend_isEqualToString_(a1, v5, (uint64_t)CFSTR("zero"), v6) & 1) != 0)
    return 1;
  if ((objc_msgSend_isEqualToString_(a1, v8, (uint64_t)CFSTR("replace"), v9) & 1) != 0)
    return 2;
  if ((objc_msgSend_isEqualToString_(a1, v10, (uint64_t)CFSTR("increment"), v11) & 1) != 0)
    return 3;
  if ((objc_msgSend_isEqualToString_(a1, v12, (uint64_t)CFSTR("decrement"), v13) & 1) != 0)
    return 4;
  if ((objc_msgSend_isEqualToString_(a1, v14, (uint64_t)CFSTR("invert"), v15) & 1) != 0)
    return 5;
  if ((objc_msgSend_isEqualToString_(a1, v16, (uint64_t)CFSTR("incrementWrap"), v17) & 1) != 0)
    return 6;
  if ((objc_msgSend_isEqualToString_(a1, v18, (uint64_t)CFSTR("decrementWrap"), v19) & 1) == 0)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown depth comparison function named %@"), v20, v21, v22, v23, v24, v25, (uint64_t)a1);
    return 0;
  }
  return 7;
}

uint64_t sub_1B19B0238(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if ((objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("zero"), a4) & 1) != 0)
    return 0;
  if ((objc_msgSend_isEqualToString_(a1, v5, (uint64_t)CFSTR("one"), v6) & 1) != 0)
    return 1;
  if ((objc_msgSend_isEqualToString_(a1, v8, (uint64_t)CFSTR("srcColor"), v9) & 1) != 0)
    return 2;
  if ((objc_msgSend_isEqualToString_(a1, v10, (uint64_t)CFSTR("oneMinusSrcColor"), v11) & 1) != 0)
    return 3;
  if ((objc_msgSend_isEqualToString_(a1, v12, (uint64_t)CFSTR("srcAlpha"), v13) & 1) != 0)
    return 4;
  if ((objc_msgSend_isEqualToString_(a1, v14, (uint64_t)CFSTR("oneMinusSrcAlpha"), v15) & 1) != 0)
    return 5;
  if ((objc_msgSend_isEqualToString_(a1, v16, (uint64_t)CFSTR("dstColor"), v17) & 1) != 0)
    return 6;
  if ((objc_msgSend_isEqualToString_(a1, v18, (uint64_t)CFSTR("oneMinusDstColor"), v19) & 1) != 0)
    return 7;
  if ((objc_msgSend_isEqualToString_(a1, v20, (uint64_t)CFSTR("dstAlpha"), v21) & 1) != 0)
    return 8;
  if ((objc_msgSend_isEqualToString_(a1, v22, (uint64_t)CFSTR("oneMinusDstAlpha"), v23) & 1) != 0)
    return 9;
  if ((objc_msgSend_isEqualToString_(a1, v24, (uint64_t)CFSTR("constantColor"), v25) & 1) != 0)
    return 10;
  if ((objc_msgSend_isEqualToString_(a1, v26, (uint64_t)CFSTR("oneMinusConstantColor"), v27) & 1) != 0)
    return 11;
  if ((objc_msgSend_isEqualToString_(a1, v28, (uint64_t)CFSTR("constantAlpha"), v29) & 1) != 0)
    return 12;
  if ((objc_msgSend_isEqualToString_(a1, v30, (uint64_t)CFSTR("oneMinusConstantAlpha"), v31) & 1) != 0)
    return 13;
  if ((objc_msgSend_isEqualToString_(a1, v32, (uint64_t)CFSTR("alphaSaturate"), v33) & 1) == 0)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown blend factor named %@"), v34, v35, v36, v37, v38, v39, (uint64_t)a1);
    return 1;
  }
  return 14;
}

uint64_t sub_1B19B0410(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if ((objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("add"), a4) & 1) != 0)
    return 0;
  if ((objc_msgSend_isEqualToString_(a1, v5, (uint64_t)CFSTR("substract"), v6) & 1) != 0)
    return 1;
  if ((objc_msgSend_isEqualToString_(a1, v8, (uint64_t)CFSTR("reverseSubstract"), v9) & 1) != 0)
    return 2;
  if ((objc_msgSend_isEqualToString_(a1, v10, (uint64_t)CFSTR("min"), v11) & 1) != 0)
    return 3;
  if ((objc_msgSend_isEqualToString_(a1, v12, (uint64_t)CFSTR("max"), v13) & 1) == 0)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown blend op named %@"), v14, v15, v16, v17, v18, v19, (uint64_t)a1);
    return 0;
  }
  return 4;
}

void sub_1B19B04D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  void *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  const __CFString *Value;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  CFURLRef v52;
  CFURLRef v53;
  const void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int16 v66;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"pass");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"input");
LABEL_3:
  *(_DWORD *)(a2 + 16) = 0;
  v12 = (void *)objc_msgSend_valueForKey_(a5, (const char *)a2, (uint64_t)CFSTR("semantic"), a4);
  if (v12)
  {
    v20 = sub_1B19B0700(v12, v13, v14, v15);
    if (v20)
    {
      *(_DWORD *)(a2 + 32) = v20;
      v23 = (void *)objc_msgSend_valueForKey_(a5, v21, (uint64_t)CFSTR("channel"), v22);
      *(_DWORD *)(a2 + 112) = objc_msgSend_intValue(v23, v24, v25, v26);
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 88) & 3) != 0)
      goto LABEL_9;
    if (!a5)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: description for input named %@ is missing"), v14, v15, v16, v17, v18, v19, a3);
      return;
    }
    Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a5, CFSTR("type"));
    if (!Value)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: 'type' is required for symbol %@"), v28, v29, v30, v31, v32, v33, a3);
      return;
    }
    v34 = Value;
    if (CFEqual(Value, CFSTR("color")) || CFEqual(v34, CFSTR("depth")) || CFEqual(v34, CFSTR("stencil")))
    {
LABEL_9:
      *(_DWORD *)(a2 + 16) = 1;
      return;
    }
    *(_DWORD *)(a2 + 16) = 2;
    *(_QWORD *)(a2 + 24) = sub_1B179E2A4(v34);
    *(_WORD *)(a2 + 20) = sub_1B179E324(v34);
    v66 = 0;
    v39 = sub_1B18D6A34(a4, *(void **)(a2 + 56), &v66, 0, v35, v36, v37, v38);
    *(_QWORD *)(a2 + 96) = v39;
    if (v39 == -1)
    {
      *(_DWORD *)(a2 + 16) = 0;
    }
    else
    {
      v47 = v66;
      if (v66 != *(unsigned __int16 *)(a2 + 20))
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. pass:_setupInput unexpected type"), v41, v42, v43, v44, v45, v46, (uint64_t)"typeTest == input->_baseType");
        v47 = *(unsigned __int16 *)(a2 + 20);
      }
      if (v47 == 5)
      {
        v48 = objc_msgSend_valueForKey_(a5, v40, (uint64_t)CFSTR("image"), v42);
        if (v48)
        {
          v52 = sub_1B180A088(v48, v49, v50, v51);
          if (v52)
          {
            v53 = v52;
            v54 = (const void *)sub_1B192097C();
            sub_1B1920A08((uint64_t)v54, v53, v55, v56, v57, v58, v59, v60);
            CFRelease(v53);
            sub_1B18D6A2C(a4, *(void **)(a2 + 56), v54, v61, v62, v63, v64, v65);
            CFRelease(v54);
          }
        }
      }
    }
  }
}

uint64_t sub_1B19B0700(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;

  if ((objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("position"), a4) & 1) != 0)
    return 1;
  if ((objc_msgSend_isEqualToString_(a1, v5, (uint64_t)CFSTR("normal"), v6) & 1) != 0)
    return 2;
  if ((objc_msgSend_isEqualToString_(a1, v8, (uint64_t)CFSTR("color"), v9) & 1) != 0)
    return 3;
  if ((objc_msgSend_isEqualToString_(a1, v10, (uint64_t)CFSTR("texcoord"), v11) & 1) != 0)
    return 4;
  if ((objc_msgSend_isEqualToString_(a1, v12, (uint64_t)CFSTR("tangent"), v13) & 1) != 0)
    return 5;
  if ((objc_msgSend_isEqualToString_(a1, v14, (uint64_t)CFSTR("modelViewProjectionTransform"), v15) & 1) != 0)
    return 6;
  if ((objc_msgSend_isEqualToString_(a1, v16, (uint64_t)CFSTR("modelViewTransform"), v17) & 1) != 0)
    return 7;
  if ((objc_msgSend_isEqualToString_(a1, v18, (uint64_t)CFSTR("modelTransform"), v19) & 1) != 0)
    return 8;
  if ((objc_msgSend_isEqualToString_(a1, v20, (uint64_t)CFSTR("viewTransform"), v21) & 1) != 0)
    return 9;
  if ((objc_msgSend_isEqualToString_(a1, v22, (uint64_t)CFSTR("projectionTransform"), v23) & 1) != 0)
    return 10;
  if ((objc_msgSend_isEqualToString_(a1, v24, (uint64_t)CFSTR("normalTransform"), v25) & 1) != 0)
    return 11;
  if ((objc_msgSend_isEqualToString_(a1, v26, (uint64_t)CFSTR("modelViewProjectionInverseTransform"), v27) & 1) != 0)
    return 12;
  if ((objc_msgSend_isEqualToString_(a1, v28, (uint64_t)CFSTR("modelViewInverseTransform"), v29) & 1) != 0)
    return 13;
  if ((objc_msgSend_isEqualToString_(a1, v30, (uint64_t)CFSTR("modelInverseTransform"), v31) & 1) != 0)
    return 14;
  if ((objc_msgSend_isEqualToString_(a1, v32, (uint64_t)CFSTR("viewInverseTransform"), v33) & 1) != 0)
    return 15;
  if ((objc_msgSend_isEqualToString_(a1, v34, (uint64_t)CFSTR("projectionInverseTransform"), v35) & 1) != 0)
    return 16;
  if (objc_msgSend_isEqualToString_(a1, v36, (uint64_t)CFSTR("normalInverseTransform"), v37))
    return 17;
  return 0;
}

void sub_1B19B0AC8(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t sub_1B19B0CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B18F4998(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(CFTypeRef *)(*(_QWORD *)(a1 + 32) + 32), a3, a4, a5, a6, a7, a8);
}

void sub_1B19B109C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B18F4D38(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 16), *(const void **)(a1 + 40), *(_QWORD *)(a1 + 48), a4, a5, a6, a7, a8);
  CFRelease(*(CFTypeRef *)(a1 + 48));
}

uint64_t sub_1B19B1284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_BYTE *)(a1 + 8) = 0;
  *(_QWORD *)a1 = &off_1E63CF550;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_BYTE *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  v9 = sub_1B1813884(a2, a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 24) = v9;
  v17 = sub_1B187B1D0(v9, v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 32) = v17;
  *(_WORD *)(a1 + 48) = 15;
  sub_1B19D7DD8(v17, 0xFu);
  return a1;
}

void sub_1B19B1358(_Unwind_Exception *a1)
{
  id *v1;
  uint64_t v2;
  uint64_t v3;
  CFX::RG::Resource **v4;

  sub_1B181C064(v4, 0);
  sub_1B2227AE0(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19B1380(uint64_t a1)
{
  uint64_t i;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E63CF550;
  sub_1B19D7E4C(*(int16x4_t **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  sub_1B181C064((CFX::RG::Resource **)(a1 + 728), 0);
  for (i = 712; i != 696; i -= 8)
  {
    v3 = *(void **)(a1 + i);
    if (v3)

  }
  v4 = *(void **)(a1 + 688);
  if (v4)

  return a1;
}

void sub_1B19B13EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B181C064((CFX::RG::Resource **)(v1 + 728), 0);
  sub_1B2227BE0(v1 + 720, v1 + 704, v1);
  _Unwind_Resume(a1);
}

void sub_1B19B1418(uint64_t a1)
{
  sub_1B19B1380(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19B143C(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  _BOOL8 v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  const char *v48;
  const char *v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  void *v55;
  unsigned __int16 *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  void *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  __int16 v82;
  __int16 v83;
  CFX::RG::Resource *v84;
  _OWORD v85[5];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned int v91;
  _BOOL4 v92;
  unsigned int v93;
  BOOL v94;
  char v95;
  const char *v96;

  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v15 = (void *)objc_msgSend_resourceManager(v11, v12, v13, v14);
  v23 = sub_1B1813884(*(_QWORD *)(a1 + 16), v16, v17, v18, v19, v20, v21, v22);
  v31 = sub_1B1814768(*(uint64_t **)(a1 + 16), v24, v25, v26, v27, v28, v29, v30);
  if (v31 && sub_1B186CFA8((uint64_t)v31, v32, v33, v34, v35, v36, v37, v38))
  {
    v39 = sub_1B187B0F0(v23, 0) != 0;
    v94 = v39;
    v93 = sub_1B19DA3D0(*(_QWORD *)(a1 + 32));
    v40 = sub_1B19DA3E0(*(_QWORD *)(a1 + 32)) != 0;
    v91 = *(_DWORD *)(a3 + 172);
    v92 = v40;
    v41 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v93) ^ ((0x9DDFEA08EB382D69 * v93) >> 47));
    v42 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v40)));
    v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    v44 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) ^ ((0x9DDFEA08EB382D69 * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) >> 47));
    v45 = 0x9DDFEA08EB382D69
        * (v44 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v91)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v91)));
    v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
    if (*(_QWORD *)(a1 + 680) != v46)
    {
      *(_QWORD *)(a1 + 680) = v46;
      sub_1B19D9F28(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 16));
      v47 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      objc_msgSend_setConstantValue_type_withName_(v47, v48, (uint64_t)&v93, 33, CFSTR("LightCount"));
      objc_msgSend_setConstantValue_type_withName_(v47, v49, (uint64_t)&v94, 53, CFSTR("has_IBL"));
      objc_msgSend_setConstantValue_type_withName_(v47, v50, (uint64_t)&v92, 33, CFSTR("raytracing_use_function_constant"));
      objc_msgSend_setConstantValue_type_withName_(v47, v51, (uint64_t)&v91, 33, CFSTR("quality_mode"));
      v52 = sub_1B19DA304(*(_QWORD *)(a1 + 32));
      v54 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(v15, v53, (uint64_t)CFSTR("vfx_rt_specular_trace"), (uint64_t)v47, v52);

      v55 = *(void **)(a1 + 688);
      if (v55 != (void *)v54)
      {
        if (v55)

        *(_QWORD *)(a1 + 688) = v54;
      }
      *(_DWORD *)(a1 + 588) = 0;
      sub_1B19DA290(*(_QWORD *)(a1 + 32));
    }
    v56 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, *(const CFX::RG::Resource **)(a3 + 248));
    v60 = *v56;
    v61 = v56[1];
    v62 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v60) ^ ((0x9DDFEA08EB382D69 * v60) >> 47));
    v63 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)));
    v64 = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47));
    if (*(_QWORD *)(a1 + 696) != v64)
    {
      *(_QWORD *)(a1 + 696) = v64;
      v65 = v60 >> 1;
      v66 = v61 >> 1;
      v67 = (v61 >> 1) * (v60 >> 1);
      v68 = (void *)objc_msgSend_device(v11, v57, v58, v59);
      v69 = 96 * v67;
      v71 = objc_msgSend_newBufferWithLength_options_(v68, v70, v69, 32);
      v75 = *(void **)(a1 + 704);
      if (v75 != (void *)v71)
      {
        v76 = v71;
        if (v75)

        *(_QWORD *)(a1 + 704) = v76;
      }
      v77 = (void *)objc_msgSend_device(v11, v72, v73, v74);
      v79 = objc_msgSend_newBufferWithLength_options_(v77, v78, v69, 32);
      v80 = *(void **)(a1 + 712);
      if (v80 != (void *)v79)
      {
        v81 = v79;
        if (v80)

        *(_QWORD *)(a1 + 712) = v81;
      }
      *(_DWORD *)(a1 + 588) = 0;
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      v88 = 0u;
      v86 = 0u;
      if (v65 <= 1)
        v82 = 1;
      else
        v82 = v65;
      if (v66 <= 1)
        v83 = 1;
      else
        v83 = v66;
      RGTextureDescriptorMake2D(v82, v83, 25, (uint64_t)&v86);
      CFX::RG::RenderGraphContext::currentBuilder(a2);
      v85[2] = v88;
      v85[3] = v89;
      v85[4] = v90;
      v85[0] = v86;
      v85[1] = v87;
      v96 = "distanceTex";
      v95 = 2;
      sub_1B1825D28((uint64_t *)&v96, (uint64_t)v85, &v95);
      sub_1B181C064((CFX::RG::Resource **)(a1 + 728), v84);
    }
    *(_BYTE *)(a1 + 720) ^= 1u;
  }
}

uint64_t sub_1B19B17A0(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  CFX::CrossFrameResourceManager *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37[2];

  v8 = *(_QWORD *)a5;
  v37[0] = (uint64_t)"RTSpecularTracePass";
  v37[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF66D20);
  if ((v8 & 1) == 0)
  {
    v36 = a3;
    v34 = a2;
    v35 = __cxa_guard_acquire(&qword_1EEF66D20);
    a2 = v34;
    a3 = v36;
    if (v35)
    {
      byte_1EEF66D18 = 1;
      __cxa_guard_release(&qword_1EEF66D20);
      a2 = v34;
      a3 = v36;
    }
  }
  if (byte_1EEF66D18)
    v9 = 0x4C296BE714C36EAFLL;
  else
    v9 = 0;
  sub_1B18F7354(a1, a2, a3, v37, v9, 0);
  *(_QWORD *)a1 = &off_1E63CF570;
  *(_QWORD *)(a1 + 376) = a5;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 392) = v17;
  *(_QWORD *)(a1 + 400) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  v21 = a4[4];
  v22 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v23 = CFX::CrossFrameResourceManager::get(v21, v22);
  *(_QWORD *)(a1 + 384) = v23;
  if (!v23)
  {
    v29 = (uint64_t)a4[4];
    v30 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    v37[0] = *(_QWORD *)(a1 + 368);
    v23 = sub_1B19B197C(v29, v30, v37);
    *(_QWORD *)(a1 + 384) = v23;
    *(_DWORD *)(v23 + 588) = 0;
  }
  sub_1B19B143C(v23, (CFX::RG::RenderGraphContext *)a4, a5, v24, v25, v26, v27, v28);
  v31 = sub_1B17928F4(*(void **)(a1 + 392), a4[4]);
  v32 = *(_QWORD *)(a1 + 384);
  *(_QWORD *)(v32 + 672) = v31;
  *(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) = v32 + 64;
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(v32 + 728));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 384) + 728));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 264));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 248));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 272));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 176));
  return a1;
}

void sub_1B19B1964(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19B197C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = operator new();
  sub_1B19B1284(v6, *a3, v7, v8, v9, v10, v11, v12);
  CFX::CrossFrameResourceManager::set(a1, a2, v6);
  return v6;
}

void sub_1B19B19E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E22E18](v1, 0x10A1C40D943C058);
  _Unwind_Resume(a1);
}

void sub_1B19B1A08(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id Texture;
  id v56;
  id v57;
  id v58;
  id v59;
  const CFX::RG::Resource *v60;
  id v61;
  id v62;
  const char *v63;
  const char *v64;
  const char *v65;
  const char *v66;
  const char *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  _OWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unsigned __int8 *v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD *v89;
  float32x4_t *v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  _OWORD *v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  const char *v118;
  const char *v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  const char *v127;
  uint64_t v128;
  const char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  const char *v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const char *v156;
  uint64_t v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  const char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  float32x2_t v180;
  id v181;
  _QWORD v182[3];
  __n128 v183;
  unsigned __int8 v184[176];
  float32x4_t v185[4];
  _OWORD v186[5];

  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 688))
  {
    v10 = *a3;
    v11 = sub_1B1813884(*(_QWORD *)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    v19 = sub_1B1814768(*(uint64_t **)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
    if (v19)
    {
      if (sub_1B186CFA8((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26))
      {
        v34 = sub_1B1814768(*(uint64_t **)(a1 + 368), v27, v28, v29, v30, v31, v32, v33);
        sub_1B17B33F4((uint64_t)v34, (uint64_t)v184, v35, v36, v37, v38, v39, v40);
        v41 = (__int128 *)sub_1B1815A5C(*(_QWORD *)(a1 + 368), 1);
        v177 = v41[1];
        v178 = *v41;
        v175 = v41[3];
        v176 = v41[2];
        v183 = sub_1B181537C(*(_QWORD *)(a1 + 368), 0, v42, v43, v44, v45, v46, v47);
        v179 = sub_1B187B1D0(v11, v48, v49, v50, v51, v52, v53, v54);
        sub_1B19D9F28(v179, *(_QWORD *)(a1 + 368));
        Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 256));
        v181 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 248));
        v56 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 280));
        v57 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 176));
        v58 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 264));
        v59 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 272));
        v60 = *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 288);
        if (v60)
          v61 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v60);
        else
          v61 = 0;
        v62 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 384) + 728));
        objc_msgSend_setTexture_atIndex_(v10, v63, (uint64_t)Texture, 0);
        objc_msgSend_setTexture_atIndex_(v10, v64, (uint64_t)v181, 1);
        objc_msgSend_setTexture_atIndex_(v10, v65, (uint64_t)v56, 2);
        objc_msgSend_setTexture_atIndex_(v10, v66, (uint64_t)v57, 3);
        objc_msgSend_setTexture_atIndex_(v10, v67, (uint64_t)v58, 4);
        objc_msgSend_setTexture_atIndex_(v10, v68, (uint64_t)v59, 5);
        objc_msgSend_setTexture_atIndex_(v10, v69, (uint64_t)v62, 7);
        objc_msgSend_setTexture_atIndex_(v10, v70, (uint64_t)v61, 10);
        v71 = sub_1B187B0F0(v11, 0);
        if (v71)
        {
          v75 = objc_msgSend_textureForMaterialProperty_(*(void **)(a1 + 392), v72, v71, v74);
          if (v75)
            objc_msgSend_setTexture_atIndex_(v10, v76, v75, 6);
        }
        v180 = sub_1B1816010(**(float32x2_t ***)(a1 + 376), 0, v73, v74);
        v77 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 320);
        v77[8] = v178;
        v77[9] = v177;
        v77[10] = v176;
        v77[11] = v175;
        v84 = sub_1B18667B4(v184, (uint64_t)&v183, v78, v79, v80, v81, v82, v83);
        v85 = 0;
        v86 = *((_OWORD *)v84 + 1);
        v87 = *((_OWORD *)v84 + 2);
        v88 = *((_OWORD *)v84 + 3);
        v89 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 320);
        v89[20] = *(_OWORD *)v84;
        v89[21] = v86;
        v89[22] = v87;
        v89[23] = v88;
        v90 = *(float32x4_t **)(a1 + 384);
        v91 = v90[24];
        v92 = v90[25];
        v93 = v90[26];
        v94 = v90[27];
        v95 = v90[13];
        v96 = v90[14];
        v97 = v90[15];
        v185[0] = v90[12];
        v185[1] = v95;
        v185[2] = v96;
        v185[3] = v97;
        do
        {
          v186[v85] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*(_OWORD *)&v185[v85])), v92, *(float32x2_t *)v185[v85].f32, 1), v93, v185[v85], 2), v94, v185[v85], 3);
          ++v85;
        }
        while (v85 != 4);
        v98 = v186[1];
        v99 = v186[2];
        v100 = v186[3];
        v101 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 320);
        *v101 = v186[0];
        v101[1] = v98;
        v101[2] = v99;
        v101[3] = v100;
        *(simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 192) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 384) + 192));
        *(simd_float4x4 *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 384) = __invert_f4(*(simd_float4x4 *)(*(_QWORD *)(a1 + 384) + 64));
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 512) = (float)((float)(unint64_t)objc_msgSend_width(v181, v102, v103, v104)
                                                                               * v180.f32[0])
                                                                       * 0.5;
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 516) = vmuls_lane_f32((float)(unint64_t)objc_msgSend_height(v181, v105, v106, v107), v180, 1)* 0.5;
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 528) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 208);
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 544) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 224);
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 576) = *(_OWORD *)(*(_QWORD *)(a1 + 376) + 192);
        *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 560) = (float)*(int *)(*(_QWORD *)(a1 + 376) + 184);
        v108 = sub_1B187B0F0(v11, 0);
        if (v108)
          v116 = sub_1B1841E14(v108, (uint64_t)v109, v110, v111, v112, v113, v114, v115);
        else
          v116 = 0.0;
        v117 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 320);
        *(float *)(v117 + 592) = v116;
        objc_msgSend_setBytes_length_atIndex_(v10, v109, v117, 608, 8);
        objc_msgSend_setTexture_atIndex_(v10, v118, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 672), 9);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v119, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 720) + 704), 0, 10);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v120, *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 384) + 720) == 0) + 704), 0, 11);
        v121 = sub_1B19DA2DC(v179);
        objc_msgSend_useHeap_(v10, v122, v121, v123);
        v124 = sub_1B19DA2EC(v179);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v125, v124, 0, 0);
        v126 = sub_1B19DA2E4(v179);
        objc_msgSend_setAccelerationStructure_atBufferIndex_(v10, v127, v126, 1);
        if (sub_1B19DA3D0(v179))
        {
          v128 = sub_1B19DA2F4(v179);
          objc_msgSend_setBuffer_offset_atIndex_(v10, v129, v128, 0, 2);
        }
        if (sub_1B19DA3E0(v179))
        {
          v136 = *(_QWORD *)(a1 + 384);
          v137 = *(_QWORD *)(v136 + 688);
          if (!v137)
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v130, v131, v132, v133, v134, v135, (uint64_t)"_ptr != NULL");
            v137 = *(_QWORD *)(v136 + 688);
          }
          v138 = (void *)sub_1B18FD774(v137);
          v139 = sub_1B19DA30C(v179, v138);
          objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(v10, v140, (uint64_t)v139, 3);
        }
        else
        {
          v139 = 0;
        }
        v141 = sub_1B19DA2FC(v179);
        v145 = sub_1B19DA3F0(v179, v142, v143, v144);
        objc_msgSend_useResources_count_usage_(v10, v146, v141, v145, 1);
        v153 = *(_QWORD *)(a1 + 384);
        v154 = *(_QWORD *)(v153 + 688);
        if (!v154)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v147, v148, v149, v150, v151, v152, (uint64_t)"_ptr != NULL");
          v154 = *(_QWORD *)(v153 + 688);
        }
        v155 = sub_1B18FD774(v154);
        objc_msgSend_setComputePipelineState_(v10, v156, v155, v157);
        v161 = (unint64_t)objc_msgSend_width(v181, v158, v159, v160) >> 1;
        v171 = (unint64_t)objc_msgSend_height(v181, v162, v163, v164) >> 1;
        v172 = *(_QWORD *)(a1 + 384);
        v173 = *(_QWORD *)(v172 + 688);
        if (!v173)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v165, v166, v167, v168, v169, v170, (uint64_t)"_ptr != NULL");
          v173 = *(_QWORD *)(v172 + 688);
        }
        v174 = (void *)sub_1B18FD774(v173);
        v182[0] = v161;
        v182[1] = v171;
        v182[2] = 1;
        RGMTLComputeCommandEncoderDispatchOnGrid2D(v10, v174, (uint64_t)v182, 1);

        ++*(_DWORD *)(*(_QWORD *)(a1 + 384) + 736);
        sub_1B19DA290(v179);
      }
    }
  }
}

uint64_t sub_1B19B2030(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  unsigned __int16 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  const char *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  const char *v57;
  uint64_t v58;
  void *v59;
  uint64_t v61;
  uint64_t v62;
  int v63;
  const char *v64;
  uint64_t v65;

  v8 = *a5;
  v64 = "RTSpecularSpatialReSTIRPass";
  v65 = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF66D30);
  if ((v8 & 1) == 0)
  {
    v61 = a3;
    v62 = a2;
    v63 = __cxa_guard_acquire(&qword_1EEF66D30);
    a2 = v62;
    a3 = v61;
    if (v63)
    {
      qword_1EEF66D28 = (uint64_t)sub_1B19B3348("RT_SPECULAR_SPATIAL_RESTIR", 0x1Au);
      __cxa_guard_release(&qword_1EEF66D30);
      a2 = v62;
      a3 = v61;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v64, qword_1EEF66D28, 0);
  *(_QWORD *)a1 = &off_1E63CFDF8;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  v9 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[31]);
  v10 = *v9;
  v11 = v9[1];
  v19 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
  *(_QWORD *)(a1 + 408) = v19;
  *(_QWORD *)(a1 + 416) = objc_msgSend_resourceManager(v19, v20, v21, v22, v64, v65);
  v23 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v24 = CFX::CrossFrameResourceManager::get(a4[4], v23);
  *(_QWORD *)(a1 + 384) = v24;
  if (!v24)
  {
    v25 = (uint64_t)a4[4];
    v26 = (_QWORD *)operator new();
    *v26 = &off_1E63CFDB8;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = 0;
    CFX::CrossFrameResourceManager::set(v25, v23, (uint64_t)v26);
    *(_QWORD *)(a1 + 384) = v26;
    v27 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    LODWORD(v64) = 0;
    objc_msgSend_setConstantValue_type_withName_(v27, v28, (uint64_t)&v64, 29, CFSTR("spatial_pass_id"));
    v29 = *(_QWORD *)(a1 + 384);
    v32 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 416), v30, (uint64_t)CFSTR("vfx_rt_specular_spatial_restir"), (uint64_t)v27);
    v33 = *(void **)(v29 + 16);
    if (v33 != (void *)v32)
    {
      if (v33)

      *(_QWORD *)(v29 + 16) = v32;
    }
    LODWORD(v64) = 1;
    objc_msgSend_setConstantValue_type_withName_(v27, v31, (uint64_t)&v64, 29, CFSTR("spatial_pass_id"));
    v34 = *(_QWORD *)(a1 + 384);
    v36 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(*(void **)(a1 + 416), v35, (uint64_t)CFSTR("vfx_rt_specular_spatial_restir"), (uint64_t)v27);
    v37 = *(void **)(v34 + 24);
    if (v37 != (void *)v36)
    {
      if (v37)

      *(_QWORD *)(v34 + 24) = v36;
    }

  }
  v38 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v39 = 0x9DDFEA08EB382D69
      * (v38 ^ ((0x9DDFEA08EB382D69 * (v38 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (v38 ^ v10)));
  v40 = 0x9DDFEA08EB382D69 * (v39 ^ (v39 >> 47));
  v41 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v40 ^ ((0x9DDFEA08EB382D69 * (v40 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v40 ^ v11)))) >> 47));
  v42 = CFX::CrossFrameResourceManager::get(a4[4], v41);
  *(_QWORD *)(a1 + 392) = v42;
  if (!v42)
  {
    v43 = (uint64_t)a4[4];
    v44 = (_QWORD *)operator new();
    *v44 = &off_1E63CFDD8;
    v44[1] = 0;
    v44[2] = 0;
    v44[3] = 0;
    CFX::CrossFrameResourceManager::set(v43, v41, (uint64_t)v44);
    *(_QWORD *)(a1 + 392) = v44;
    v48 = (void *)objc_msgSend_device(*(void **)(a1 + 408), v45, v46, v47);
    v53 = objc_msgSend_newBufferWithLength_options_(v48, v49, 96 * (v10 >> 1) * (unint64_t)(v11 >> 1), 32);
    v54 = (void *)v44[2];
    if (v54 != (void *)v53)
    {
      if (v54)

      v44[2] = v53;
    }
    v55 = *(_QWORD *)(a1 + 392);
    v56 = (void *)objc_msgSend_device(*(void **)(a1 + 408), v50, v51, v52);
    v58 = objc_msgSend_newBufferWithLength_options_(v56, v57, 96 * (v10 >> 1) * (unint64_t)(v11 >> 1), 32);
    v59 = *(void **)(v55 + 24);
    if (v59 != (void *)v58)
    {
      if (v59)

      *(_QWORD *)(v55 + 24) = v58;
    }
  }
  return a1;
}

void sub_1B19B2388(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19B23B0(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v3;
  uint64_t v5;
  void *v6;
  id Texture;
  id v8;
  id v9;
  id v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  const char *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD v67[3];
  _QWORD v68[3];

  v3 = *(_QWORD *)(result + 384);
  if (*(_QWORD *)(v3 + 16) && *(_QWORD *)(v3 + 24))
  {
    v5 = result;
    v6 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(result + 376) + 320), 608, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v5 + 376) + 256));
    v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v5 + 376) + 248));
    v9 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v5 + 400));
    v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v5 + 376) + 272));
    objc_msgSend_setTexture_atIndex_(v6, v11, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v6, v12, (uint64_t)v8, 1);
    objc_msgSend_setTexture_atIndex_(v6, v13, (uint64_t)v9, 2);
    objc_msgSend_setTexture_atIndex_(v6, v14, (uint64_t)v10, 3);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v15, *(_QWORD *)(*(_QWORD *)(v5 + 376) + 304), 0, 0);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v16, *(_QWORD *)(*(_QWORD *)(v5 + 392) + 16), 0, 1);
    v23 = *(_QWORD *)(v5 + 384);
    v24 = *(_QWORD *)(v23 + 16);
    if (!v24)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v17, v18, v19, v20, v21, v22, (uint64_t)"_ptr != NULL");
      v24 = *(_QWORD *)(v23 + 16);
    }
    v25 = sub_1B18FD774(v24);
    objc_msgSend_setComputePipelineState_(v6, v26, v25, v27);
    v31 = (unint64_t)objc_msgSend_width(v8, v28, v29, v30) >> 1;
    v41 = (unint64_t)objc_msgSend_height(v8, v32, v33, v34) >> 1;
    v42 = *(_QWORD *)(v5 + 384);
    v43 = *(_QWORD *)(v42 + 16);
    if (!v43)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v35, v36, v37, v38, v39, v40, (uint64_t)"_ptr != NULL");
      v43 = *(_QWORD *)(v42 + 16);
    }
    v44 = (void *)sub_1B18FD774(v43);
    v68[0] = v31;
    v68[1] = v41;
    v68[2] = 1;
    RGMTLComputeCommandEncoderDispatchOnGrid2D(v6, v44, (uint64_t)v68, 1);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v45, *(_QWORD *)(*(_QWORD *)(v5 + 392) + 16), 0, 0);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v46, *(_QWORD *)(*(_QWORD *)(v5 + 392) + 24), 0, 1);
    v53 = *(_QWORD *)(v5 + 384);
    v54 = *(_QWORD *)(v53 + 24);
    if (!v54)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v47, v48, v49, v50, v51, v52, (uint64_t)"_ptr != NULL");
      v54 = *(_QWORD *)(v53 + 24);
    }
    v55 = sub_1B18FD774(v54);
    objc_msgSend_setComputePipelineState_(v6, v56, v55, v57);
    v64 = *(_QWORD *)(v5 + 384);
    v65 = *(_QWORD *)(v64 + 24);
    if (!v65)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v58, v59, v60, v61, v62, v63, (uint64_t)"_ptr != NULL");
      v65 = *(_QWORD *)(v64 + 24);
    }
    v66 = (void *)sub_1B18FD774(v65);
    v67[0] = v31;
    v67[1] = v41;
    v67[2] = 1;
    return RGMTLComputeCommandEncoderDispatchOnGrid2D(v6, v66, (uint64_t)v67, 1);
  }
  return result;
}

uint64_t sub_1B19B2634(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t *v39;
  CFX::RG::TextureDescriptorReference *v40;
  uint64_t *v41;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _OWORD v46[10];
  _OWORD v47[10];
  uint64_t v48[2];

  v8 = *a5;
  v48[0] = (uint64_t)"RTSpecularUpscalePass";
  v48[1] = v8;
  LOBYTE(v8) = atomic_load((unsigned __int8 *)&qword_1EEF66D40);
  if ((v8 & 1) == 0)
  {
    v45 = a3;
    v43 = a2;
    v44 = __cxa_guard_acquire(&qword_1EEF66D40);
    a2 = v43;
    a3 = v45;
    if (v44)
    {
      qword_1EEF66D38 = (uint64_t)sub_1B19B3348("RT_SPECULAR_UPSCALE", 0x13u);
      __cxa_guard_release(&qword_1EEF66D40);
      a2 = v43;
      a3 = v45;
    }
  }
  sub_1B18F7354(a1, a2, a3, v48, qword_1EEF66D38, 0);
  *(_QWORD *)a1 = &off_1E63CF748;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  v16 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(a1 + 408) = v16;
  *(_QWORD *)(a1 + 416) = objc_msgSend_resourceManager(v16, v17, v18, v19);
  v20 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v21 = CFX::CrossFrameResourceManager::get(a4[4], v20);
  *(_QWORD *)(a1 + 384) = v21;
  if (!v21)
  {
    *(_QWORD *)(a1 + 384) = sub_1B19B2838(a4[4], v20);
    v29 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v22, v23, v24, v25, v26, v27, v28);
    v33 = (void *)objc_msgSend_resourceManager(v29, v30, v31, v32);
    v34 = *(_QWORD *)(a1 + 384);
    v37 = objc_msgSend_newComputePipelineStateWithFunctionName_(v33, v35, (uint64_t)CFSTR("vfx_rt_specular_upscale"), v36);
    v38 = *(void **)(v34 + 16);
    if (v38 != (void *)v37)
    {
      if (v38)

      *(_QWORD *)(v34 + 16) = v37;
    }
  }
  v39 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  v40 = (CFX::RG::TextureDescriptorReference *)(a5 + 1);
  CFX::RG::TextureDescriptorReference::withPixelFormat(v40, MTLPixelFormatRGBA16Float, (uint64_t)v47);
  *(_QWORD *)(a1 + 392) = sub_1B17A34D0(v39, (uint64_t)"SpecularUpscale", v47);
  v41 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  CFX::RG::TextureDescriptorReference::withPixelFormat(v40, MTLPixelFormatR16Float, (uint64_t)v46);
  *(_QWORD *)(a1 + 400) = sub_1B17A34D0(v41, (uint64_t)"SpecularUpscaleDistance", v46);
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 392));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 400));
  return a1;
}

void sub_1B19B2818(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19B2838(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF728;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B19B28B0(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v4;
  void *v5;
  id Texture;
  id v7;
  id v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;
  id v13;
  const char *v14;
  id v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;

  if (*(_QWORD *)(*(_QWORD *)(result + 384) + 16))
  {
    v4 = result;
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(result + 376) + 320), 608, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 256));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 248));
    v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(v4 + 376) + 272));
    objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v10, (uint64_t)v7, 1);
    objc_msgSend_setTexture_atIndex_(v5, v11, (uint64_t)v8, 2);
    objc_msgSend_setBuffer_offset_atIndex_(v5, v12, *(_QWORD *)(*(_QWORD *)(v4 + 376) + 312), 0, 0);
    v13 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 392));
    objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v13, 10);
    v15 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 400));
    objc_msgSend_setTexture_atIndex_(v5, v16, (uint64_t)v15, 11);
    v23 = *(_QWORD *)(v4 + 384);
    v24 = *(_QWORD *)(v23 + 16);
    if (!v24)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v17, v18, v19, v20, v21, v22, (uint64_t)"_ptr != NULL");
      v24 = *(_QWORD *)(v23 + 16);
    }
    v25 = sub_1B18FD774(v24);
    return objc_msgSend_dispatch_onTexture2D_(v5, v26, v25, (uint64_t)v13);
  }
  return result;
}

uint64_t sub_1B19B2A24(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int16 *v21;
  unsigned int v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __int16 v32;
  __int16 v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  CFX::RG::Resource *v41;
  CFX::RG::Resource *v42;
  uint64_t v44;
  int v45;
  _OWORD v46[5];
  _OWORD v47[5];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  const char *v54;

  v9 = *a5;
  *(_QWORD *)&v48 = "RTSpecularTemporalDenoisePass";
  *((_QWORD *)&v48 + 1) = v9;
  LOBYTE(v9) = atomic_load((unsigned __int8 *)&qword_1EEF66D50);
  if ((v9 & 1) == 0)
  {
    v44 = a3;
    v45 = __cxa_guard_acquire(&qword_1EEF66D50);
    a3 = v44;
    if (v45)
    {
      qword_1EEF66D48 = (uint64_t)sub_1B19B3348("RT_SPECULAR_TEMPORAL_DENOISE", 0x1Cu);
      __cxa_guard_release(&qword_1EEF66D50);
      a3 = v44;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)&v48, qword_1EEF66D48, 0);
  *(_QWORD *)a1 = &off_1E63D0068;
  *(_QWORD *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  v17 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(_QWORD *)(a1 + 416) = v17;
  *(_QWORD *)(a1 + 424) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  v21 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[31]);
  v22 = *v21;
  v23 = v21[1];
  v24 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v25 = CFX::CrossFrameResourceManager::get(a4[4], v24);
  *(_QWORD *)(a1 + 384) = v25;
  if (!v25)
  {
    v26 = (uint64_t)a4[4];
    v27 = (_OWORD *)operator new();
    *v27 = 0u;
    v27[1] = 0u;
    *(_QWORD *)v27 = &off_1E63D0028;
    CFX::CrossFrameResourceManager::set(v26, v24, (uint64_t)v27);
    *(_QWORD *)(a1 + 384) = v27;
    v30 = objc_msgSend_newComputePipelineStateWithFunctionName_(*(void **)(a1 + 424), v28, (uint64_t)CFSTR("vfx_rt_specular_temporal_denoise"), v29);
    v31 = (void *)*((_QWORD *)v27 + 2);
    if (v31 != (void *)v30)
    {
      if (v31)

      *((_QWORD *)v27 + 2) = v30;
    }
  }
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  if (v22 <= 1)
    v32 = 1;
  else
    v32 = v22;
  if (v23 <= 1)
    v33 = 1;
  else
    v33 = v23;
  RGTextureDescriptorMake2D(v32, v33, 115, (uint64_t)&v48);
  v34 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v35 = 0x9DDFEA08EB382D69
      * (v34 ^ ((0x9DDFEA08EB382D69 * (v34 ^ (unsigned __int16)v48)) >> 47) ^ (0x9DDFEA08EB382D69
                                                                               * (v34 ^ (unsigned __int16)v48)));
  v36 = 0x9DDFEA08EB382D69 * (v35 ^ (v35 >> 47));
  v37 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))))) ^ ((0x9DDFEA08EB382D69 * (v36 ^ ((0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))) >> 47) ^ (0x9DDFEA08EB382D69 * (v36 ^ WORD1(v48))))) >> 47));
  v38 = CFX::CrossFrameResourceManager::get(a4[4], v37);
  *(_QWORD *)(a1 + 392) = v38;
  if (!v38)
  {
    v39 = (uint64_t)a4[4];
    v40 = (_QWORD *)operator new();
    *v40 = &off_1E63D0048;
    v40[1] = 0;
    v40[2] = 0;
    v40[3] = 0;
    CFX::CrossFrameResourceManager::set(v39, v37, (uint64_t)v40);
    *(_QWORD *)(a1 + 392) = v40;
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v47[2] = v50;
    v47[3] = v51;
    v47[4] = v52;
    v47[0] = v48;
    v47[1] = v49;
    v54 = "pingPongTex0";
    v53 = 2;
    sub_1B1825D28((uint64_t *)&v54, (uint64_t)v47, &v53);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 16), v41);
    CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
    v46[2] = v50;
    v46[3] = v51;
    v46[4] = v52;
    v46[0] = v48;
    v46[1] = v49;
    v54 = "pingPongTex1";
    v53 = 2;
    sub_1B1825D28((uint64_t *)&v54, (uint64_t)v46, &v53);
    sub_1B181C064((CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 24), v42);
  }
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 264));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 384) + 24) == 0) + 16));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(_QWORD *)(a1 + 392) + 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 24) + 16));
  return a1;
}

void sub_1B19B2D94(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1B19B2DC0(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  id Texture;
  id v7;
  id v8;
  uint64_t v9;
  const CFX::RG::Resource *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  const char *v15;
  const char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  id v22;
  id v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _OWORD *v36;
  __int128 v37;
  __int128 v38;
  _OWORD *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int128 v43;
  __n128 result;
  __int128 v45;
  uint64_t v46;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 384) + 16))
  {
    v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(_QWORD *)(*(_QWORD *)(a1 + 376) + 320), 608, 8);
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
    v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 408));
    v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 256));
    v9 = *(_QWORD *)(a1 + 376);
    v10 = *(const CFX::RG::Resource **)(v9 + 288);
    if (v10)
    {
      v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v10);
      v9 = *(_QWORD *)(a1 + 376);
    }
    else
    {
      v11 = 0;
    }
    v12 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 264));
    v13 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 272));
    v14 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 376) + 248));
    objc_msgSend_setTexture_atIndex_(v5, v15, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v16, (uint64_t)v8, 1);
    objc_msgSend_setTexture_atIndex_(v5, v17, (uint64_t)v11, 2);
    objc_msgSend_setTexture_atIndex_(v5, v18, (uint64_t)v12, 3);
    objc_msgSend_setTexture_atIndex_(v5, v19, (uint64_t)v13, 4);
    objc_msgSend_setTexture_atIndex_(v5, v20, (uint64_t)v7, 5);
    objc_msgSend_setTexture_atIndex_(v5, v21, (uint64_t)v14, 6);
    v22 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 392)+ 8 * (*(_BYTE *)(*(_QWORD *)(a1 + 384) + 24) == 0)+ 16));
    v23 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(_QWORD *)(a1 + 392)+ 8 * *(unsigned __int8 *)(*(_QWORD *)(a1 + 384) + 24)+ 16));
    objc_msgSend_setTexture_atIndex_(v5, v24, (uint64_t)v23, 10);
    objc_msgSend_setTexture_atIndex_(v5, v25, (uint64_t)v22, 11);
    v32 = *(_QWORD *)(a1 + 384);
    v33 = *(_QWORD *)(v32 + 16);
    if (!v33)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v26, v27, v28, v29, v30, v31, (uint64_t)"_ptr != NULL");
      v33 = *(_QWORD *)(v32 + 16);
    }
    v34 = sub_1B18FD774(v33);
    objc_msgSend_dispatch_onTexture2D_(v5, v35, v34, (uint64_t)v23);
    v36 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 320);
    v37 = v36[13];
    v36[16] = v36[12];
    v36[17] = v37;
    v38 = v36[15];
    v36[18] = v36[14];
    v36[19] = v38;
    v39 = *(_OWORD **)(*(_QWORD *)(a1 + 376) + 320);
    v40 = v39[1];
    v39[4] = *v39;
    v39[5] = v40;
    v41 = v39[3];
    v39[6] = v39[2];
    v39[7] = v41;
    v42 = *(_QWORD *)(*(_QWORD *)(a1 + 376) + 320);
    v43 = *(_OWORD *)(v42 + 400);
    *(_OWORD *)(v42 + 448) = *(_OWORD *)(v42 + 384);
    *(_OWORD *)(v42 + 464) = v43;
    result = *(__n128 *)(v42 + 416);
    v45 = *(_OWORD *)(v42 + 432);
    *(__n128 *)(v42 + 480) = result;
    *(_OWORD *)(v42 + 496) = v45;
    v46 = *(_QWORD *)(a1 + 384);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 376) + 320) + 524);
    *(_BYTE *)(v46 + 24) ^= 1u;
  }
  return result;
}

CFX::RG::Pass *sub_1B19B3038(CFX::RG::RenderGraphContext *a1, uint64_t *a2)
{
  uint64_t *v4;
  CFX::RG::Pass *v5;
  uint64_t *v6;
  CFX::RG::Resource *v7;
  uint64_t *v8;
  CFX::RG::Resource *v9;
  uint64_t *v10;
  CFX::RG::Resource *v11;
  CFX::RG::Resource *v12;

  v4 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  v5 = (CFX::RG::Pass *)sub_1B19B3158(v4, (CFX::CrossFrameResourceManager **)a1, (uint64_t)a2);
  a2[38] = *(_QWORD *)(*((_QWORD *)v5 + 48) + 8 * *(unsigned __int8 *)(*((_QWORD *)v5 + 48) + 720) + 704);
  v6 = (uint64_t *)sub_1B19B31AC(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  v7 = *(CFX::RG::Resource **)(*((_QWORD *)v5 + 48) + 728);
  v6[50] = (uint64_t)v7;
  CFX::RG::Pass::readFrom(v6, v7);
  CFX::RG::Pass::dependsOn(v6, v5);
  a2[39] = *(_QWORD *)(v6[49] + 24);
  v8 = (uint64_t *)sub_1B19B3200(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  v9 = *(CFX::RG::Resource **)(*((_QWORD *)v5 + 48) + 728);
  v8[50] = (uint64_t)v9;
  CFX::RG::Pass::readFrom(v8, v9);
  CFX::RG::Pass::dependsOn(v8, (CFX::RG::Pass *)v6);
  v10 = (uint64_t *)sub_1B19B3254(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  v11 = (CFX::RG::Resource *)v8[49];
  v10[50] = (uint64_t)v11;
  CFX::RG::Pass::readFrom(v10, v11);
  v12 = *(CFX::RG::Resource **)(*((_QWORD *)v5 + 48) + 728);
  v10[51] = (uint64_t)v12;
  CFX::RG::Pass::readFrom(v10, v12);
  CFX::RG::Pass::dependsOn(v10, (CFX::RG::Pass *)v8);
  a2[37] = *(_QWORD *)(v10[49] + 8 * *(unsigned __int8 *)(v10[48] + 24) + 16);
  return v5;
}

uint64_t sub_1B19B3158(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19B36F0(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B19B31AC(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19B374C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B19B3200(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19B37A8(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B19B3254(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19B3804(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B19B32AC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19B32D4(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19B32FC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19B3324(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B19B3348(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B19B3410(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63CFDB8;
  for (i = 3; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B19B3458(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63CFDB8;
  v2 = 3;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

_QWORD *sub_1B19B34B0(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63CFDD8;
  for (i = 3; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B19B34F8(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63CFDD8;
  v2 = 3;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

_QWORD *sub_1B19B3550(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF728;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B19B3588(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF728;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B19B35D0(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63D0028;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B19B3608(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63D0028;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B19B3650(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63D0048;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  return a1;
}

void sub_1B19B3698(_QWORD *a1)
{
  uint64_t i;

  *a1 = &off_1E63D0048;
  for (i = 3; i != 1; --i)
    sub_1B181C064((CFX::RG::Resource **)&a1[i], 0);
  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B19B36F0(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x198u, 8u);
  return sub_1B19B17A0(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B19B374C(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A8u, 8u);
  return sub_1B19B2030(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B19B37A8(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A8u, 8u);
  return sub_1B19B2634(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B19B3804(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1B0u, 8u);
  return sub_1B19B2A24(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B19B3860(uint64_t a1, const char *a2)
{
  _QWORD v3[6];

  v3[5] = *MEMORY[0x1E0C80C00];
  v3[0] = CFSTR("kGeometrySourceSemanticPosition");
  v3[1] = CFSTR("kGeometrySourceSemanticNormal");
  v3[2] = CFSTR("kGeometrySourceSemanticColor");
  v3[3] = CFSTR("kGeometrySourceSemanticTexcoord");
  v3[4] = CFSTR("kGeometrySourceSemanticTangent");
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v3, 5);
}

uint64_t sub_1B19B38EC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;

  if ((objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR("kGeometrySourceSemanticPosition"), a4) & 1) != 0)
    return 0;
  if ((objc_msgSend_isEqualToString_(a1, v5, (uint64_t)CFSTR("kGeometrySourceSemanticNormal"), v6) & 1) != 0)
    return 1;
  if ((objc_msgSend_isEqualToString_(a1, v8, (uint64_t)CFSTR("kGeometrySourceSemanticColor"), v9) & 1) != 0)
    return 2;
  if ((objc_msgSend_isEqualToString_(a1, v10, (uint64_t)CFSTR("kGeometrySourceSemanticTexcoord"), v11) & 1) != 0)
    return 3;
  if ((objc_msgSend_isEqualToString_(a1, v12, (uint64_t)CFSTR("kGeometrySourceSemanticTangent"), v13) & 1) != 0)
    return 4;
  if ((objc_msgSend_isEqualToString_(a1, v14, (uint64_t)CFSTR("kGeometrySourceSemanticVertexCrease"), v15) & 1) != 0)
    return 7;
  if ((objc_msgSend_isEqualToString_(a1, v16, (uint64_t)CFSTR("kGeometrySourceSemanticEdgeCrease"), v17) & 1) != 0)
    return 8;
  if ((objc_msgSend_isEqualToString_(a1, v18, (uint64_t)CFSTR("kGeometrySourceSemanticBoneIndices"), v19) & 1) != 0)
    return 5;
  if (objc_msgSend_isEqualToString_(a1, v20, (uint64_t)CFSTR("kGeometrySourceSemanticBoneWeights"), v21))
    return 6;
  return 0;
}

void sub_1B19B3C08(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 32));
}

uint64_t vfx_setOwnerWithIdentity(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;

  v5 = a1;
  if ((objc_opt_respondsToSelector() & 1) != 0)
    objc_msgSend_setResponsibleProcess_(v5, v6, a2, v7);
  if ((objc_opt_respondsToSelector() & 1) != 0)
    v10 = objc_msgSend_setOwnerWithIdentity_(v5, v8, a3, v9);
  else
    v10 = 0;

  return v10;
}

void sph_compute_pressures_and_densitites_2d(__int128 *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  __int128 v12;
  unsigned int v13;
  float v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  _QWORD v23[4];
  __int128 v24;
  float v25;
  float32x4_t v26;
  float v27;
  float v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  float v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[3];
  v8 = a3[4];
  v39 = *a1;
  v9 = *((float *)a1 + 4);
  v21 = *(float32x4_t *)((char *)a1 + 20);
  v10 = *((float *)a1 + 9);
  v11 = *((float *)a1 + 10);
  v12 = *(__int128 *)((char *)a1 + 60);
  v40 = *(__int128 *)((char *)a1 + 44);
  v41 = v12;
  v42 = *((_DWORD *)a1 + 19);
  v13 = a5 - a4;
  if (a5 <= a4)
  {
    v22 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  }
  else
  {
    v15 = v10 * (float)(v10 * (float)(v10 * vmuls_lane_f32(v11, v21, 2)));
    v22 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16 = a4;
    do
    {
      v17 = *(_QWORD *)(v6 + 8 * v16);
      v35 = 0;
      v36 = (float *)&v35;
      v37 = 0x2020000000;
      v38 = v15;
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = sub_1B19B57AC;
      v23[3] = &unk_1E63DA5E0;
      v34 = v17;
      v24 = v39;
      v25 = v9;
      v26 = v21;
      v27 = v10;
      v28 = v11;
      v31 = v42;
      v29 = v40;
      v30 = v41;
      v32 = &v35;
      v33 = v6;
      vfx_uniform_grid_apply(a2, v16, (uint64_t)v23);
      v18 = v36;
      *(float *)(v7 + 4 * v16) = v36[6];
      v19.i64[1] = v21.i64[1];
      v20 = v21.f32[0] * (float)(v18[6] - v9);
      *(float *)(v8 + 4 * v16) = v20;
      v19.i32[0] = *(_DWORD *)(v7 + 4 * v16);
      v19.f32[1] = v20;
      v19.i64[1] = vnegq_f32(v19).u64[0];
      v22 = vminnmq_f32(v22, v19);
      _Block_object_dispose(&v35, 8);
      ++v16;
      --v13;
    }
    while (v13);
  }
  *((_DWORD *)a1 + 15) = v22.i32[1];
  *((_DWORD *)a1 + 13) = v22.i32[0];
  *((float *)a1 + 14) = -v22.f32[2];
  *((float *)a1 + 16) = -v22.f32[3];
}

void sub_1B19B5794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

float32x2_t *sub_1B19B57AC(float32x2_t *result, unsigned int *a2, unsigned int a3)
{
  float32x2_t v3;
  uint64_t v4;
  unsigned int v5;
  float32x2_t v6;
  float v7;
  float v8;

  if (a3)
  {
    v3 = result[15];
    v4 = a3;
    do
    {
      v5 = *a2++;
      v6 = vsub_f32(*(float32x2_t *)(*(_QWORD *)&v3 + 8 * v5), result[16]);
      v7 = vaddv_f32(vmul_f32(v6, v6));
      v8 = result[8].f32[1];
      if (v8 > v7)
        *(float *)(*(_QWORD *)(*(_QWORD *)&result[14] + 8) + 24) = *(float *)(*(_QWORD *)(*(_QWORD *)&result[14]
                                                                                            + 8)
                                                                                + 24)
                                                                     + (float)((float)((float)(v8 - v7)
                                                                                     * (float)((float)(v8 - v7)
                                                                                             * (float)(result[7].f32[1] * result[9].f32[0])))
                                                                             * (float)(v8 - v7));
      --v4;
    }
    while (v4);
  }
  return result;
}

void sph_compute_forces_2d(__int128 *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float v25;
  __int128 v26;
  _QWORD v27[5];
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  float32x2_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x2_t *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v23 = a3[1];
  v24 = *a3;
  v5 = a3[2];
  v21 = a3[4];
  v22 = a3[3];
  v6 = *a1;
  v7 = *(__int128 *)((char *)a1 + 28);
  v8 = *(__int128 *)((char *)a1 + 60);
  v53 = *(__int128 *)((char *)a1 + 44);
  v54 = v8;
  v55 = *((_DWORD *)a1 + 19);
  v51 = *(__int128 *)((char *)a1 + 12);
  v52 = v7;
  if (a4 < a5)
  {
    v9 = 0;
    v10 = v24 + 8 * a4;
    v11 = v23 + 8 * a4;
    v12 = v22 + 4 * a4;
    v13 = v5 + 8 * a4;
    v14 = a4 - a5;
    v15 = v21 + 4 * a4;
    v26 = v6;
    do
    {
      v16 = *(_QWORD *)(v10 + 8 * v9);
      v17 = *(_QWORD *)(v11 + 8 * v9);
      v25 = *(float *)(v12 + 4 * v9);
      v18 = *(_DWORD *)(v15 + 4 * v9);
      v47 = 0;
      v48 = (float32x2_t *)&v47;
      v49 = 0x2020000000;
      v50 = 0;
      v43 = 0;
      v44 = (float32x2_t *)&v43;
      v45 = 0x2020000000;
      v46 = 0;
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 3221225472;
      v27[2] = sub_1B19B5A50;
      v27[3] = &unk_1E63DA608;
      v36 = v24;
      v37 = v16;
      v28 = DWORD2(v6);
      v27[4] = v6;
      v31 = v53;
      v32 = v54;
      v33 = v55;
      v29 = v51;
      v30 = v52;
      v38 = v23;
      v39 = v22;
      v40 = v21;
      v42 = v18;
      v34 = &v47;
      v35 = &v43;
      v41 = v17;
      vfx_uniform_grid_apply(a2, a4 + v9, (uint64_t)v27);
      *(float32x2_t *)(v13 + 8 * v9) = vadd_f32(vmul_n_f32(*(float32x2_t *)&v26, v25), vadd_f32(v48[3], v44[3]));
      _Block_object_dispose(&v43, 8);
      _Block_object_dispose(&v47, 8);
      ++v9;
      v6 = v26;
    }
    while (v14 + (_DWORD)v9);
  }
}

void sub_1B19B5A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  uint64_t v43;

  _Block_object_dispose(&a43, 8);
  _Block_object_dispose((const void *)(v43 - 240), 8);
  _Unwind_Resume(a1);
}

float32x2_t *sub_1B19B5A50(float32x2_t *result, unsigned int *a2, unsigned int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  float32x2_t v12;
  float v13;
  float32x2_t v14;
  float v15;
  float32x2_t *v16;

  if (a3)
  {
    v9 = a3;
    do
    {
      v11 = *a2++;
      v10 = v11;
      v12 = vsub_f32(*(float32x2_t *)(*(_QWORD *)&result[16] + 8 * v11), result[17]);
      *(float *)&a9 = sqrtf(vaddv_f32(vmul_f32(v12, v12))) + 0.0000001;
      v13 = result[7].f32[0] - *(float *)&a9;
      if (v13 > 0.0)
      {
        v14 = *(float32x2_t *)(*(_QWORD *)&result[18] + 8 * v10);
        v15 = 1.0 / *(float *)(*(_QWORD *)&result[19] + 4 * v10);
        *(float *)&a9 = (float)(v13 * (float)(v13 * result[9].f32[1]))
                      * (float)((float)(result[7].f32[1] / *(float *)&a9)
                              * (float)(v15
                                      * (float)((float)(*(float *)(*(_QWORD *)&result[20] + 4 * v10) + result[22].f32[0])
                                              * 0.5)));
        *(float32x2_t *)(*(_QWORD *)(*(_QWORD *)&result[14] + 8) + 24) = vmls_lane_f32(*(float32x2_t *)(*(_QWORD *)(*(_QWORD *)&result[14] + 8)+ 24), v12, *(float32x2_t *)&a9, 0);
        v16 = *(float32x2_t **)(*(_QWORD *)&result[15] + 8);
        a9 = COERCE_DOUBLE(vmla_n_f32(v16[3], vsub_f32(v14, result[21]), (float)(v13 * v15) * (float)((float)(result[10].f32[0] * result[8].f32[0]) * result[7].f32[1])));
        *(double *)&v16[3] = a9;
      }
      --v9;
    }
    while (v9);
  }
  return result;
}

void sph_compute_pressures_and_densitites_3d(__int128 *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  float v10;
  float v11;
  __int128 v12;
  unsigned int v13;
  float v15;
  uint64_t v16;
  __int128 v17;
  float *v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  _QWORD v23[4];
  __int128 v24;
  __int128 v25;
  float v26;
  float32x4_t v27;
  float v28;
  float v29;
  __int128 v30;
  __int128 v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  float *v36;
  uint64_t v37;
  float v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v6 = *a3;
  v7 = a3[3];
  v8 = a3[4];
  v39 = *a1;
  v9 = *((float *)a1 + 4);
  v21 = *(float32x4_t *)((char *)a1 + 20);
  v10 = *((float *)a1 + 9);
  v11 = *((float *)a1 + 10);
  v12 = *(__int128 *)((char *)a1 + 60);
  v40 = *(__int128 *)((char *)a1 + 44);
  v41 = v12;
  v42 = *((_DWORD *)a1 + 19);
  v13 = a5 - a4;
  if (a5 <= a4)
  {
    v22 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  }
  else
  {
    v15 = v10 * (float)(v10 * (float)(v10 * vmuls_lane_f32(v11, v21, 2)));
    v22 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    v16 = a4;
    do
    {
      v17 = *(_OWORD *)(v6 + 16 * v16);
      v35 = 0;
      v36 = (float *)&v35;
      v37 = 0x2020000000;
      v38 = v15;
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = sub_1B19B5D50;
      v23[3] = &unk_1E63DA630;
      v24 = v17;
      v25 = v39;
      v26 = v9;
      v27 = v21;
      v28 = v10;
      v29 = v11;
      v32 = v42;
      v30 = v40;
      v31 = v41;
      v33 = &v35;
      v34 = v6;
      vfx_uniform_grid_apply(a2, v16, (uint64_t)v23);
      v18 = v36;
      *(float *)(v7 + 4 * v16) = v36[6];
      v19.i64[1] = v21.i64[1];
      v20 = v21.f32[0] * (float)(v18[6] - v9);
      *(float *)(v8 + 4 * v16) = v20;
      v19.i32[0] = *(_DWORD *)(v7 + 4 * v16);
      v19.f32[1] = v20;
      v19.i64[1] = vnegq_f32(v19).u64[0];
      v22 = vminnmq_f32(v22, v19);
      _Block_object_dispose(&v35, 8);
      ++v16;
      --v13;
    }
    while (v13);
  }
  *((_DWORD *)a1 + 15) = v22.i32[1];
  *((_DWORD *)a1 + 13) = v22.i32[0];
  *((float *)a1 + 14) = -v22.f32[2];
  *((float *)a1 + 16) = -v22.f32[3];
}

void sub_1B19B5D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1B19B5D50(float32x4_t *result, unsigned int *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  float32x4_t v6;
  float32x4_t v7;
  float v8;
  float v9;

  if (a3)
  {
    v3 = result[8].i64[1];
    v4 = a3;
    do
    {
      v5 = *a2++;
      v6 = vsubq_f32(*(float32x4_t *)(v3 + 16 * v5), result[2]);
      v7 = vmulq_f32(v6, v6);
      v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
      v9 = result[5].f32[1];
      if (v9 > v8)
        *(float *)(*(_QWORD *)(result[8].i64[0] + 8) + 24) = *(float *)(*(_QWORD *)(result[8].i64[0] + 8) + 24)
                                                             + (float)((float)((float)(v9 - v8)
                                                                             * (float)((float)(v9 - v8)
                                                                                     * (float)(result[4].f32[3]
                                                                                             * result[5].f32[2])))
                                                                     * (float)(v9 - v8));
      --v4;
    }
    while (v4);
  }
  return result;
}

void sph_compute_forces_3d(float32x4_t *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  int v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float32x4_t v27;
  _QWORD v28[4];
  __int128 v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  __int128 v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  float32x4_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  float32x4_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v24 = a3[1];
  v25 = *a3;
  v5 = a3[2];
  v22 = a3[4];
  v23 = a3[3];
  v6 = *a1;
  v7 = a1[2];
  v8 = a1[3];
  v53 = a1[1];
  v54 = v7;
  v9 = a1[4];
  v55 = v8;
  v56 = v9;
  if (a4 < a5)
  {
    v10 = 0;
    v11 = v25 + 16 * a4;
    v12 = v24 + 16 * a4;
    v13 = v23 + 4 * a4;
    v14 = v22 + 4 * a4;
    v15 = v5 + 16 * a4;
    v16 = a4 - a5;
    v27 = v6;
    do
    {
      v17 = *(_OWORD *)(v11 + 16 * v10);
      v18 = *(_OWORD *)(v12 + 16 * v10);
      v26 = *(float *)(v13 + 4 * v10);
      v19 = *(_DWORD *)(v14 + 4 * v10);
      v48 = 0;
      v49 = (float32x4_t *)&v48;
      v50 = 0x3020000000;
      v51 = 0;
      v52 = 0;
      v43 = 0;
      v44 = (float32x4_t *)&v43;
      v45 = 0x3020000000;
      v46 = 0;
      v47 = 0;
      v28[0] = MEMORY[0x1E0C809B0];
      v28[1] = 3221225472;
      v28[2] = sub_1B19B5FE4;
      v28[3] = &unk_1E63DA658;
      v29 = v17;
      v30 = v6;
      v31 = v53;
      v32 = v54;
      v33 = v55;
      v34 = v56;
      v38 = v25;
      v39 = v24;
      v40 = v23;
      v41 = v22;
      v42 = v19;
      v36 = &v48;
      v37 = &v43;
      v35 = v18;
      vfx_uniform_grid_apply(a2, a4 + v10, (uint64_t)v28);
      *(float32x4_t *)(v15 + 16 * v10) = vaddq_f32(vmulq_n_f32(v27, v26), vaddq_f32(v49[2], v44[2]));
      _Block_object_dispose(&v43, 8);
      _Block_object_dispose(&v48, 8);
      ++v10;
      v6 = v27;
    }
    while (v16 + (_DWORD)v10);
  }
}

void sub_1B19B5FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 224), 8);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1B19B5FE4(float32x4_t *result, unsigned int *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  float32x4_t v10;
  float v11;

  if (a3)
  {
    v3 = a3;
    do
    {
      v5 = *a2++;
      v4 = v5;
      v6 = vsubq_f32(*(float32x4_t *)(result[10].i64[0] + 16 * v5), result[2]);
      v7 = vmulq_f32(v6, v6);
      v8 = vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1));
      v8.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), v8).f32[0]) + 0.0000001;
      v9 = result[4].f32[2] - v8.f32[0];
      if (v9 > 0.0)
      {
        v10 = *(float32x4_t *)(result[10].i64[1] + 16 * v4);
        v11 = 1.0 / *(float *)(result[11].i64[0] + 4 * v4);
        v8.f32[0] = (float)(v9 * (float)(v9 * result[5].f32[3]))
                  * (float)((float)(result[4].f32[3] / v8.f32[0])
                          * (float)(v11
                                  * (float)((float)(*(float *)(result[11].i64[1] + 4 * v4) + result[12].f32[0]) * 0.5)));
        *(float32x4_t *)(*(_QWORD *)(result[9].i64[0] + 8) + 32) = vmlsq_lane_f32(*(float32x4_t *)(*(_QWORD *)(result[9].i64[0] + 8)+ 32), v6, *(float32x2_t *)v8.f32, 0);
        *(float32x4_t *)(*(_QWORD *)(result[9].i64[1] + 8) + 32) = vmlaq_n_f32(*(float32x4_t *)(*(_QWORD *)(result[9].i64[1] + 8)+ 32), vsubq_f32(v10, result[8]), (float)(v9 * v11)* (float)((float)(result[6].f32[0]* result[5].f32[0])* result[4].f32[3]));
      }
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1B19B60D4(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t Aligned;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  CFIndex Count;
  unsigned int v20;
  uint64_t v21;
  unsigned int *v22;
  _DWORD *v23;
  CFIndex v24;
  uint64_t v25;
  _QWORD *ValueAtIndex;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v38;
  _QWORD v39[5];

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_18:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
    if (a3)
      goto LABEL_4;
    goto LABEL_19;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"nodes");
  if (!a2)
    goto LABEL_18;
LABEL_3:
  if (a3)
    goto LABEL_4;
LABEL_19:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"scratchAllocator");
LABEL_4:
  v11 = sub_1B1813884(a2, a2, a3, a4, a5, a6, a7, a8);
  Aligned = CScratchAllocatorAllocateAligned(a3, 32, 8);
  *(_QWORD *)Aligned = a3;
  *(_QWORD *)(Aligned + 8) = 0;
  *(_QWORD *)(Aligned + 16) = 0;
  *(_QWORD *)(Aligned + 24) = Aligned + 32;
  Count = CFArrayGetCount(a1);
  v20 = *(_DWORD *)(Aligned + 20);
  v21 = Count - v20;
  if (Count > v20)
    sub_1B179C78C(Aligned, v21, 1);
  v22 = (unsigned int *)sub_1B1814AC0(a2, v21, v13, v14, v15, v16, v17, v18);
  CStackAllocatorPushFrame(v22);
  v23 = CStackAllocatorAllocate((uint64_t)v22, 0x28uLL);
  v38 = (uint64_t)v22;
  *(_QWORD *)v23 = v22;
  sub_1B19B7E30((uint64_t)v23, 32);
  if (Count >= 1)
  {
    v24 = 0;
    v25 = MEMORY[0x1E0C809B0];
    do
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v24);
      if (sub_1B17C6244(ValueAtIndex, v27, v28, v29, v30, v31, v32, v33) == v11)
      {
        v39[0] = v25;
        v39[1] = 3221225472;
        v39[2] = sub_1B19B62DC;
        v39[3] = &unk_1E63D68E8;
        v39[4] = v23;
        sub_1B186B018((uint64_t)ValueAtIndex, (uint64_t)v39);
      }
      ++v24;
    }
    while (Count != v24);
  }
  v34 = v23[9];
  if (v34 != -15)
  {
    v35 = 0;
    v36 = 0;
    do
    {
      if ((*(_WORD *)(*((_QWORD *)v23 + 3) + 2 * v36) & 1) != 0)
      {
        sub_1B179C734((uint64_t *)Aligned, (_QWORD *)(*((_QWORD *)v23 + 2) + v35));
        v34 = v23[9];
      }
      ++v36;
      v35 += 8;
    }
    while (v36 < (v34 + 15));
  }
  CStackAllocatorPopFrame(v38);
  return Aligned;
}

BOOL sub_1B19B62DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  uint64_t v13;

  result = 0;
  if (a2)
  {
    if (sub_1B186C75C(a2, a2, a3, a4, a5, a6, a7, a8))
      return 1;
    v10 = 0xC6A4A7935BD1E995
        * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47))) ^ 0x35253C9ADE8F4CA8);
    v11 = *(_QWORD *)(a1 + 32);
    v13 = a2;
    if (!sub_1B19B7EC8(v11, (0xC6A4A7935BD1E995 * (v10 ^ (v10 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v10 ^ (v10 >> 47))) >> 47), &v13))return 1;
  }
  return result;
}

unsigned __int8 *sub_1B19B6374(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

BOOL sub_1B19B643C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[5];
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  if ((sub_1B1814458(a1) & 0x10000) == 0)
    return 0;
  v10 = (void *)sub_1B17FF168(a2, v3, v4, v5);
  v11 = 0;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v12 = MEMORY[0x1E0C809B0];
  while (v11 < objc_msgSend_count(v10, v7, v8, v9))
  {
    v15 = objc_msgSend_objectAtIndexedSubscript_(v10, v13, v11, v14);
    v17[0] = v12;
    v17[1] = 3221225472;
    v17[2] = sub_1B19B6558;
    v17[3] = &unk_1E63D9420;
    v17[4] = &v18;
    sub_1B186B018(v15, (uint64_t)v17);
    ++v11;
    if (*((_BYTE *)v19 + 24))
    {
      v6 = 1;
      goto LABEL_8;
    }
  }
  v6 = *((_BYTE *)v19 + 24) != 0;
LABEL_8:
  _Block_object_dispose(&v18, 8);
  return v6;
}

void sub_1B19B653C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19B6558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if (!a2)
    return 0;
  if (sub_1B186C75C(a2, a2, a3, a4, a5, a6, a7, a8))
    return 1;
  result = sub_1B1868FA0(a2, v10, v11, v12, v13, v14, v15, v16);
  if (result)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 2;
  }
  return result;
}

uint64_t sub_1B19B65B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned __int8 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  unint64_t v27;
  char v28;
  __int128 v29;
  char v30;
  char v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = a3;
  v6 = atomic_load((unsigned __int8 *)&qword_1EEF66D60);
  if ((v6 & 1) == 0)
  {
    v20 = a3;
    v17 = a2;
    v18 = __cxa_guard_acquire(&qword_1EEF66D60);
    a2 = v17;
    a3 = v20;
    if (v18)
    {
      byte_1EEF66D58 = 1;
      __cxa_guard_release(&qword_1EEF66D60);
      a2 = v17;
      a3 = v20;
    }
  }
  if (byte_1EEF66D58)
    v7 = 0xA5BDF038E97191F5;
  else
    v7 = 0;
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a4, v7, 0);
  *(_QWORD *)a1 = &off_1E63CE830;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  v8 = *(_OWORD *)(a4 + 24);
  v9 = *(_OWORD *)(a4 + 40);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a4 + 56);
  *(_OWORD *)(a1 + 424) = v8;
  *(_OWORD *)(a1 + 440) = v9;
  *(_QWORD *)&v23 = *(_QWORD *)(a1 + 368);
  LOBYTE(v27) = 0;
  v28 = 0;
  v25 = 0;
  v24 = 0uLL;
  v29 = xmmword_1B2245710;
  v30 = *(_BYTE *)(a1 + 376);
  v31 = 2;
  v32 = 8;
  v33 = 2;
  v34 = 1;
  *(_QWORD *)(a1 + 384) = sub_1B17CA2A0(v22, *((uint64_t *)&v22 + 1), (uint64_t *)&v22, (uint64_t *)&v23, &v24);
  v10 = v22;
  v11 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)&v24 = 0;
  WORD4(v24) = 0;
  BYTE10(v24) = *(_BYTE *)(a1 + 377);
  v25 = 0;
  v26 = 0;
  v12 = atomic_load((unsigned __int8 *)&qword_1EEF66D60);
  if ((v12 & 1) == 0)
  {
    v21 = v22;
    v19 = __cxa_guard_acquire(&qword_1EEF66D60);
    v10 = v21;
    if (v19)
    {
      byte_1EEF66D58 = 1;
      __cxa_guard_release(&qword_1EEF66D60);
      v10 = v21;
    }
  }
  if (byte_1EEF66D58)
    v13 = 0xA5BDF038E97191F5;
  else
    v13 = 0;
  v27 = v13;
  v23 = v10;
  v14 = sub_1B179C1C0(&v23, 0x40u, 8u);
  sub_1B182CDF0(v14, v11, (uint64_t)&v24, *(_QWORD *)(a1 + 384));
  *(_QWORD *)(a1 + 392) = v15;
  return a1;
}

void sub_1B19B67D0(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B19B67E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1B19610E0(*(__n128 **)(a1 + 384), (const char *)a2, a3, a4);
  sub_1B196142C(*(_QWORD *)(a1 + 384), v6, v7, v8, v9, v10, v11, v12);
  sub_1B1961820(*(_QWORD *)(a1 + 384));
  sub_1B1961A30(*(uint64_t **)(a1 + 384), *(const char **)a2, *(_QWORD *)(a2 + 8), v13);
}

void sub_1B19B6828(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  VFXMTLMesh *v30;
  _BOOL4 v31;
  uint64_t v32;
  void *v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  const __CFString *v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  const __CFArray *v49;
  const void *ValueAtIndex;
  VFXMTLMeshElement *v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  void *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  void *v76;
  _OWORD v77[6];
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  const __CFString *v92;
  __int128 v93;
  uint64_t v94;
  _OWORD v95[6];
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  uint64_t v109;
  const __CFString *v110;
  __int128 v111;
  uint64_t v112;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 416));
  v6 = *(unsigned __int8 *)(v5 + 9);
  v7 = *(_QWORD *)(v5 + 16);
  v8 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 440))+ 16);
  v9 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v4)));
  v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                      * ((0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ v8)));
  v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v6)))) ^ ((0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v6)))) >> 47));
  v13 = CFX::CrossFrameResourceManager::get(a2[4], v12);
  *(_QWORD *)(a1 + 400) = v13;
  if (!v13)
  {
    *(_QWORD *)(a1 + 400) = sub_1B19B6B78(a2[4], v12);
    v76 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v16, v17, v18, v19, v20, v21, v22);
    v26 = (void *)objc_msgSend_resourceManager(v76, v23, v24, v25);
    v27 = sub_1B18E2808(0, 12, 0, 1.0, 1.0);
    v28 = *(_QWORD *)(a1 + 400);
    v29 = *(const void **)(v28 + 40);
    if (v29 != (const void *)v27)
    {
      if (v29)
        CFRelease(v29);
      *(_QWORD *)(v28 + 40) = v27;
    }
    v30 = sub_1B18FB1C0((uint64_t)v26, v27, 1);
    v31 = sub_1B1815AD8(*(_QWORD *)(a1 + 368), 256);
    v32 = *(_QWORD *)(a1 + 400);
    memset(v95, 0, sizeof(v95));
    v96 = 0;
    v98 = 0u;
    v99 = 0u;
    v100 = 0u;
    v101 = 0u;
    v102 = 0u;
    v103 = 0u;
    v104 = 0u;
    v105 = 0u;
    v106 = 0u;
    v107 = 0u;
    v108 = 0u;
    v111 = 0u;
    v112 = 0;
    v33 = (void *)sub_1B18FD768((uint64_t)v26);
    v97 = objc_msgSend_frameworkLibrary(v33, v34, v35, v36);
    *(_QWORD *)&v98 = v7;
    *(_QWORD *)&v102 = v8;
    LOBYTE(v103) = v6;
    v109 = sub_1B18FD780((uint64_t)v30);
    v110 = CFSTR("debug_probe_vert");
    v39 = CFSTR("debug_probe_frag_cube_array");
    if (!v31)
      v39 = CFSTR("debug_probe_frag_2d_array");
    *(_QWORD *)&v111 = v39;
    v40 = objc_msgSend_newRenderPipelineStateWithDesc_(v26, v37, (uint64_t)v95, v38);
    v41 = *(void **)(v32 + 16);
    if (v41 != (void *)v40)
    {
      v42 = v40;
      if (v41)

      *(_QWORD *)(v32 + 16) = v42;
    }
    sub_1B19B6BF4((void **)(*(_QWORD *)(a1 + 400) + 24), v30);
    v49 = (const __CFArray *)sub_1B1876264(v27, 1, v43, v44, v45, v46, v47, v48);
    if (v49)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v49, 0);
      if (ValueAtIndex)
      {
        v51 = sub_1B18FAA70((uint64_t)v26, (uint64_t)ValueAtIndex);
        sub_1B19B6BF4((void **)(*(_QWORD *)(a1 + 400) + 32), v51);
      }
    }
    v52 = (void *)objc_opt_new();
    objc_msgSend_setDepthCompareFunction_(v52, v53, 7, v54);
    objc_msgSend_setDepthWriteEnabled_(v52, v55, 0, v56);
    v60 = (void *)objc_msgSend_device(v76, v57, v58, v59);
    v63 = objc_msgSend_newDepthStencilStateWithDescriptor_(v60, v61, (uint64_t)v52, v62);

    v64 = *(_QWORD *)(a1 + 400);
    v65 = *(void **)(v64 + 48);
    if (v65 != (void *)v63)
    {
      v66 = *(_QWORD *)(a1 + 400);
      if (v65)
      {

        v66 = *(_QWORD *)(a1 + 400);
      }
      *(_QWORD *)(v64 + 48) = v63;
      v64 = v66;
    }
    v94 = 0;
    v91 = 0;
    v93 = 0u;
    v89 = 0u;
    v90 = 0u;
    v87 = 0u;
    v88 = 0u;
    v85 = 0u;
    v86 = 0u;
    v83 = 0u;
    v84 = 0u;
    v81 = 0u;
    v82 = 0u;
    v78 = 0;
    v80 = 0u;
    memset(v77, 0, sizeof(v77));
    v67 = (void *)sub_1B18FD768((uint64_t)v26);
    v79 = objc_msgSend_frameworkLibrary(v67, v68, v69, v70);
    *(_QWORD *)&v80 = v7;
    *(_QWORD *)&v84 = v8;
    LOBYTE(v85) = v6;
    v92 = CFSTR("vfx_draw_fullscreen_triangle_vertex");
    *(_QWORD *)&v93 = CFSTR("vfx_draw_fullscreen_fragment");
    v73 = objc_msgSend_newRenderPipelineStateWithDesc_(v26, v71, (uint64_t)v77, v72);
    v74 = *(void **)(v64 + 56);
    if (v74 != (void *)v73)
    {
      v75 = v73;
      if (v74)

      *(_QWORD *)(v64 + 56) = v75;
    }
  }
  sub_1B182CE18(*(_QWORD *)(a1 + 392), (const char *)a2, v14, v15);
}

uint64_t sub_1B19B6B78(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = operator new();
    *(_QWORD *)v4 = &off_1E63CE810;
    *(_QWORD *)(v4 + 8) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, v4);
  }
  return v4;
}

void **sub_1B19B6BF4(void **a1, void *a2)
{
  id v4;
  void *v5;

  if (a2)
    v4 = a2;
  v5 = *a1;
  *a1 = a2;
  if (v5)

  return a1;
}

uint64_t sub_1B19B6C30(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  unint64_t v9;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const CFX::RG::Resource *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id Texture;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  CFX::CrossFrameResourceManager *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned int *v96;
  unsigned int v97;
  uint64_t v98;
  float32x4_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  const char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t result;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;

  v8 = a3;
  v9 = a2;
  v11 = (void *)sub_1B1813BC4(a1[46], a2, a3, a4, a5, a6, a7, a8);
  v21 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  v22 = (const CFX::RG::Resource *)a1[51];
  if (v22)
  {
    Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(v9 + 24), v22);
    v30 = a1[50];
    v31 = *(_QWORD *)(v30 + 48);
    if (!v31)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), 0, v24, v25, v26, v27, v28, (uint64_t)"_ptr != NULL");
      v31 = *(_QWORD *)(v30 + 48);
    }
    objc_msgSend_setDepthStencilState_(*(void **)(v21 + 16), v23, v31, v24);
    v39 = a1[50];
    v40 = *(void **)(v39 + 56);
    if (!v40)
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v33, v34, v35, v36, v37, v38, (uint64_t)"_ptr != NULL");
      v40 = *(void **)(v39 + 56);
    }
    v41 = objc_msgSend_state(v40, v32, v33, v34);
    objc_msgSend_setRenderPipelineState_(*(void **)(v21 + 16), v42, v41, v43);
    sub_1B179AEE4(v21, Texture, 0, v44);
    sub_1B179AF64(v21, v45);
  }
  v46 = sub_1B1813884(a1[46], (uint64_t)v22, v15, v16, v17, v18, v19, v20);
  v53 = (_QWORD *)sub_1B1814484(a1[46], 1, v47, v48, v49, v50, v51, v52);
  v61 = sub_1B187B140(v46, v54, v55, v56, v57, v58, v59, v60);
  v69 = sub_1B1820C0C(v61, v62, v63, v64, v65, v66, v67, v68);
  if ((sub_1B1814458(a1[46]) & 0x200) != 0)
  {
    v77 = sub_1B18799E8(v46, v70, v71, v72, v73, v74, v75, v76);
    sub_1B19C12A4(v77, (uint64_t)v53, v78, v79, v80, v81, v82, v83);
  }
  v84 = *(CFX::CrossFrameResourceManager **)(v9 + 32);
  v85 = sub_1B1960EF8();
  v86 = CFX::CrossFrameResourceManager::get(v84, v85);
  if (v86)
  {
    v93 = v86;
    v169 = v46;
    v170 = v9;
    v171 = v8;
    v94 = *(_QWORD *)(v86 + 16);
    if (v94)
    {
      v95 = *(unsigned int *)(v94 + 12824);
      if ((_DWORD)v95)
      {
        v96 = *(unsigned int **)(v94 + 12816);
        do
        {
          v97 = *v96++;
          v9 = v9 & 0xFFFFFFFF00000000 | v97;
          v98 = sub_1B19CFAFC(v69, v9, v87, v88, v89, v90, v91, v92);
          v99 = (float32x4_t *)sub_1B17C2DEC(v98);
          if (v99)
            sub_1B17FC208((uint64_t)v53, v99);
          --v95;
        }
        while (v95);
      }
    }
    *(_QWORD *)(v93 + 16) = 0;
    v9 = v170;
    v8 = v171;
    v46 = v169;
  }
  sub_1B17FA734((uint64_t)v53);
  sub_1B17FAE40((uint64_t)v53, v100, v101, v102, v103, v104, v105, v106);
  v113 = a1[50];
  v114 = *(_QWORD *)(v113 + 48);
  if (!v114)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), 0, v108, v109, v110, v111, v112, (uint64_t)"_ptr != NULL");
    v114 = *(_QWORD *)(v113 + 48);
  }
  objc_msgSend_setDepthStencilState_(*(void **)(v21 + 16), v107, v114, v108);
  sub_1B17FACB8((uint64_t)v53, v122, v115, v116, v117, v118, v119, v120, v121);
  sub_1B17FAE40((uint64_t)v53, v123, v124, v125, v126, v127, v128, v129);
  v130 = sub_1B181EEC0();
  v134 = objc_msgSend_resourceManager(v11, v131, v132, v133);
  v135 = sub_1B18FA408(v134, v130);
  objc_msgSend_setDepthStencilState_(*(void **)(v21 + 16), v136, (uint64_t)v135, v137);
  objc_msgSend_setRasterizerStates_(v11, v138, v130, v139);
  if (v53 && (sub_1B1814458(a1[46]) & 8) != 0)
    sub_1B19B6EFC((uint64_t)a1, v21, v141, v142, v143, v144, v145, v146);
  if ((objc_msgSend_features(v11, v140, v141, v142) & 0x1000) != 0)
    objc_msgSend_setDepthClipMode_(*(void **)(v21 + 16), v147, 1, v148);
  sub_1B182D4E8(a1[49], (const char *)v9, v8, 0);
  sub_1B17F942C(v53, v149, v150, v151, v152, v153, v154, v155);
  result = sub_1B187AA20(v46, v156, v157, v158, v159, v160, v161, v162);
  if (result)
    return sub_1B18D2BCC(result, a1[46], *(_QWORD *)(v21 + 16), v164, v165, v166, v167, v168);
  return result;
}

uint64_t sub_1B19B6EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  __int16 v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  const char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  unsigned int v61;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  result = objc_msgSend__clusterInfo(v10, v11, v12, v13);
  v18 = *(_QWORD *)(result + 104);
  v19 = HIDWORD(v18);
  if (HIDWORD(v18))
  {
    v20 = result;
    v61 = *(_QWORD *)(result + 104);
    result = objc_msgSend__reflectionProbeArrayTexture(v10, v15, v16, v17);
    if (result)
    {
      v24 = (void *)result;
      v25 = objc_msgSend_features(v10, v21, v22, v23);
      objc_msgSend_setCullMode_(*(void **)(a2 + 16), v26, 2, v27);
      if ((v25 & 0x1000) != 0)
        objc_msgSend_setDepthClipMode_(*(void **)(a2 + 16), v28, 1, v30);
      v35 = *(_QWORD *)(a1 + 400);
      v36 = *(void **)(v35 + 16);
      if (!v36)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v29, v30, v31, v32, v33, v34, (uint64_t)"_ptr != NULL");
        v36 = *(void **)(v35 + 16);
      }
      v37 = objc_msgSend_state(v36, v28, v29, v30);
      objc_msgSend_setRenderPipelineState_(*(void **)(a2 + 16), v38, v37, v39);
      sub_1B179AEE4(a2, v24, 0, v40);
      objc_msgSend__setWorldBufferAtVertexIndex_fragmentIndex_(v10, v41, 0, -1);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(a2 + 16), v42, *(_QWORD *)(v20 + 120), *(_QWORD *)(v20 + 128) + 368 * v61, 1);
      v49 = *(_QWORD *)(a1 + 400);
      v50 = *(_QWORD *)(v49 + 24);
      if (!v50)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), 0, v44, v45, v46, v47, v48, (uint64_t)"_ptr != NULL");
        v50 = *(_QWORD *)(v49 + 24);
      }
      objc_msgSend__setMeshBuffers_(v10, v43, v50, v44);
      v57 = *(_QWORD *)(a1 + 400);
      v58 = *(_QWORD *)(v57 + 32);
      if (!v58)
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), 0, v52, v53, v54, v55, v56, (uint64_t)"_ptr != NULL");
        v58 = *(_QWORD *)(v57 + 32);
      }
      result = objc_msgSend__drawMeshElement_instanceCount_(v10, v51, v58, v19);
      if ((v25 & 0x1000) != 0)
        return objc_msgSend_setDepthClipMode_(*(void **)(a2 + 16), v59, 0, v60);
    }
  }
  return result;
}

uint64_t sub_1B19B70B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  int v17;
  uint64_t v18;
  __int128 v19;
  _OWORD v20[10];
  _OWORD v21[10];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  char v28;
  __int128 v29;
  char v30;
  char v31;
  uint64_t v32;
  int v33;
  __int16 v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v22 = a2;
  *((_QWORD *)&v22 + 1) = a3;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF66D70);
  if ((v9 & 1) == 0)
  {
    v18 = a2;
    v16 = __cxa_guard_acquire(&qword_1EEF66D70);
    a2 = v18;
    if (v16)
    {
      qword_1EEF66D68 = (uint64_t)sub_1B19B6374("PICKED_OBJECT", 0xDu);
      __cxa_guard_release(&qword_1EEF66D70);
      a2 = v18;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, qword_1EEF66D68, 0);
  *(_QWORD *)a1 = &off_1E63CEEC0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)&v23 = *(_QWORD *)(a1 + 368);
  LOBYTE(v27) = 0;
  v28 = 0;
  v25 = 0;
  v24 = 0uLL;
  v29 = xmmword_1B2245710;
  v30 = *(_BYTE *)(a1 + 376);
  v31 = 2;
  v32 = 128;
  v33 = 1;
  v34 = 1;
  *(_QWORD *)(a1 + 384) = sub_1B17CA2A0(v22, *((uint64_t *)&v22 + 1), (uint64_t *)&v22, (uint64_t *)&v23, &v24);
  v10 = v22;
  v11 = *(_QWORD *)(a1 + 368);
  *(_QWORD *)&v24 = 0;
  WORD4(v24) = 16;
  BYTE10(v24) = *(_BYTE *)(a1 + 377);
  v25 = 8;
  v26 = 0;
  v12 = atomic_load((unsigned __int8 *)&qword_1EEF66D70);
  if ((v12 & 1) == 0)
  {
    v19 = v22;
    v17 = __cxa_guard_acquire(&qword_1EEF66D70);
    v10 = v19;
    if (v17)
    {
      qword_1EEF66D68 = (uint64_t)sub_1B19B6374("PICKED_OBJECT", 0xDu);
      __cxa_guard_release(&qword_1EEF66D70);
      v10 = v19;
    }
  }
  v27 = qword_1EEF66D68;
  v23 = v10;
  v13 = sub_1B179C1C0(&v23, 0x40u, 8u);
  sub_1B182CDF0(v13, v11, (uint64_t)&v24, *(_QWORD *)(a1 + 384));
  *(_QWORD *)(a1 + 392) = v14;
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a5 + 24), 1, (uint64_t)v21);
  *(_QWORD *)(a1 + 400) = sub_1B17A34D0(a4, (uint64_t)"COLOR_PICKED", v21);
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a5 + 184), 1, (uint64_t)v20);
  *(_QWORD *)(a1 + 408) = sub_1B17A34D0(a4, (uint64_t)"DEPTH_PICKED", v20);
  CFX::RG::Pass::renderTo(a1, *(_QWORD *)(a1 + 400), 0x100000002, 0);
  CFX::RG::Pass::renderTo(a1, *(_QWORD *)(a1 + 408), 0x200000002, -1);
  return a1;
}

void sub_1B19B7334(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B19B7350(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const __CFArray *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v10 = (void *)sub_1B1814484(a1[46], 0, a3, a4, a5, a6, a7, a8);
  v14 = (const __CFArray *)sub_1B17FF168(v10, v11, v12, v13);
  v20 = sub_1B19B60D4(v14, a1[46], a1[1], v15, v16, v17, v18, v19);
  v21 = (__n128 *)a1[48];
  v21[3].n128_u64[0] = v20;
  sub_1B19610E0(v21, v22, v23, v24);
  sub_1B196142C(a1[48], v25, v26, v27, v28, v29, v30, v31);
  sub_1B1961820(a1[48]);
  sub_1B1961A30((uint64_t *)a1[48], *(const char **)a2, *(_QWORD *)(a2 + 8), v32);
}

void sub_1B19B73B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B182CE18(*(_QWORD *)(a1 + 392), a2, a3, a4);
}

void sub_1B19B73BC(uint64_t a1, const char *a2, uint64_t a3)
{
  sub_1B182D4E8(*(_QWORD *)(a1 + 392), a2, a3, 0);
}

uint64_t sub_1B19B73C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v8;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  CFX::RG::Resource *v17;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[10];

  v8 = &qword_1EEF66000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF66D80);
  if ((v9 & 1) == 0)
  {
    v20 = a2;
    v21 = a3;
    v19 = __cxa_guard_acquire(&qword_1EEF66D80);
    v8 = &qword_1EEF66000;
    a2 = v20;
    a3 = v21;
    if (v19)
    {
      qword_1EEF66D78 = (uint64_t)sub_1B19B6374("OUTLINE", 7u);
      __cxa_guard_release(&qword_1EEF66D80);
      v8 = &qword_1EEF66000;
      a2 = v20;
      a3 = v21;
    }
  }
  sub_1B182AAEC(a1, a2, a3, (uint64_t *)a5, v8[431], 0);
  *(_QWORD *)a1 = &off_1E63CE658;
  v10 = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(a1 + 400) = v10;
  v11 = *(_OWORD *)(a5 + 56);
  v12 = *(_OWORD *)(a5 + 72);
  v13 = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a5 + 88);
  *(_OWORD *)(a1 + 464) = v13;
  *(_OWORD *)(a1 + 416) = v11;
  *(_OWORD *)(a1 + 432) = v12;
  v14 = *(_OWORD *)(a5 + 120);
  v15 = *(_OWORD *)(a5 + 136);
  v16 = *(_OWORD *)(a5 + 168);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a5 + 152);
  *(_OWORD *)(a1 + 528) = v16;
  *(_OWORD *)(a1 + 480) = v14;
  *(_OWORD *)(a1 + 496) = v15;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a5 + 24), 1, (uint64_t)v22);
  v17 = sub_1B17A34D0(a4, (uint64_t)"COLOR_OUTLINE", v22);
  *(_QWORD *)(a1 + 584) = v17;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v17, 0x100000000, 0);
  return a1;
}

void sub_1B19B7504(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B19B7518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  const char *v27;
  uint64_t v28;
  void *v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  BOOL v44;

  v6 = sub_1B1815BE8(*(_QWORD *)(a1 + 368), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Authoring", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/AuthoringPass.mm", 406, v6 | 0x300000000);
  v7 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v8 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 584))+ 16);
  v9 = 0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v7)));
  v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  v11 = *(_QWORD *)(a1 + 576) != 0;
  v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) >> 47));
  v13 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v12);
  *(_QWORD *)(a1 + 544) = v13;
  if (!v13)
  {
    *(_QWORD *)(a1 + 544) = sub_1B19B7704(*(CFX::CrossFrameResourceManager **)(a2 + 32), v12);
    v21 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v14, v15, v16, v17, v18, v19, v20);
    v25 = (void *)objc_msgSend_resourceManager(v21, v22, v23, v24);
    v26 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    v44 = *(_QWORD *)(a1 + 576) != 0;
    objc_msgSend_setConstantValue_type_atIndex_(v26, v27, (uint64_t)&v44, 53, 0);
    v28 = *(_QWORD *)(a1 + 544);
    v29 = (void *)sub_1B18FD768((uint64_t)v25);
    *((_QWORD *)&v38 + 1) = objc_msgSend_frameworkLibrary(v29, v30, v31, v32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(_QWORD *)&v39 = v8;
    LOBYTE(v40) = 1;
    *((_QWORD *)&v41 + 1) = v26;
    *((_QWORD *)&v42 + 1) = CFSTR("vfx_outline_vert");
    *(_QWORD *)&v43 = CFSTR("vfx_outline_frag");
    v35 = objc_msgSend_newRenderPipelineStateWithDesc_(v25, v33, (uint64_t)&v37, v34);
    v36 = *(void **)(v28 + 16);
    if (v36 != (void *)v35)
    {
      if (v36)

      *(_QWORD *)(v28 + 16) = v35;
    }

  }
  prof_endFlame();
}

void sub_1B19B76E0(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

_QWORD *sub_1B19B7704(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CE638;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B19B7778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  id Texture;
  uint64_t v32;
  id v33;
  uint64_t v34;
  const CFX::RG::Resource *v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  const char *v40;

  v6 = sub_1B1815BE8(*(_QWORD *)(a1 + 368), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Authoring", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/AuthoringPass.mm", 442, v6 | 0x300000000);
  v14 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), v7, v8, v9, v10, v11, v12, v13);
  v25 = objc_msgSend_renderEncoder(v14, v15, v16, v17);
  v26 = *(_QWORD *)(a1 + 544);
  v27 = *(void **)(v26 + 16);
  if (!v27)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v19, v20, v21, v22, v23, v24, (uint64_t)"_ptr != NULL");
    v27 = *(void **)(v26 + 16);
  }
  v28 = objc_msgSend_state(v27, v18, v19, v20);
  objc_msgSend_setRenderPipelineState_(*(void **)(v25 + 16), v29, v28, v30);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 552));
  sub_1B179AEE4(v25, Texture, 0, v32);
  v33 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568));
  sub_1B179AEE4(v25, v33, 1, v34);
  v35 = *(const CFX::RG::Resource **)(a1 + 576);
  if (v35)
  {
    v36 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v35);
    sub_1B179AEE4(v25, v36, 2, v37);
  }
  v38 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 560));
  sub_1B179AEE4(v25, v38, 3, v39);
  sub_1B179AF64(v25, v40);
  prof_endFlame();
}

void sub_1B19B7898(_Unwind_Exception *a1)
{
  prof_endFlame();
  _Unwind_Resume(a1);
}

uint64_t *sub_1B19B78BC(CFX::RG::RenderGraphContext *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v12;
  _BOOL4 v13;
  __int128 *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned __int8 v44;
  BOOL v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  CFX::RG::Pass *v49;
  uint64_t v50;
  CFX::RG::Pass *v51;
  CFX::RG::RenderGraphBuilder *v52;
  CFX::RG::Resource *v53;
  const char *v54;
  CFX::RG::Resource *v55;
  CFX::RG::RenderGraphBuilder *v56;
  CFX::RG::Resource *v57;
  const char *v58;
  CFX::RG::Resource *v59;
  uint64_t v60;
  uint64_t *v61;
  CFX::RG::Resource *v62;
  CFX::RG::Resource *v63;
  CFX::RG::Pass *v64;
  CFX::RG::Resource *v65;
  CFX::RG::Resource *v66;
  char v67;
  _OWORD *v68;
  CFX::RG::Resource *v69;
  CFX::RG::Resource *v70;
  _OWORD v72[10];
  _OWORD v73[10];
  _QWORD v74[2];
  __int16 v75;
  uint64_t v76;
  _QWORD v77[2];
  __int16 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int16 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;

  v12 = (void *)sub_1B1814484(*(_QWORD *)(a3 + 8), 0, a3, a4, a5, a6, a7, a8);
  v13 = sub_1B19B643C(*(_QWORD *)(a3 + 8), v12);
  v14 = (__int128 *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)a4);
  v15 = v14[1];
  v116 = *v14;
  v117 = v15;
  v16 = v14[5];
  v18 = v14[2];
  v17 = v14[3];
  v120 = v14[4];
  v121 = v16;
  v118 = v18;
  v119 = v17;
  v19 = v14[9];
  v21 = v14[6];
  v20 = v14[7];
  v124 = v14[8];
  v125 = v19;
  v122 = v21;
  v123 = v20;
  v22 = (__int128 *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)(a4 + 16));
  v23 = v22[1];
  v106 = *v22;
  v107 = v23;
  v24 = v22[5];
  v26 = v22[2];
  v25 = v22[3];
  v110 = v22[4];
  v111 = v24;
  v108 = v26;
  v109 = v25;
  v27 = v22[8];
  v29 = v22[6];
  v28 = v22[7];
  v115 = v22[9];
  v114 = v27;
  v112 = v29;
  v113 = v28;
  v30 = *(unsigned __int8 *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a1, *(const CFX::RG::Resource **)a4)
                           + 9);
  v31 = *(unsigned __int8 *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a1, *(const CFX::RG::Resource **)(a4 + 16))+ 9);
  v39 = (void *)sub_1B1813BC4(*(_QWORD *)(a3 + 8), v32, v33, v34, v35, v36, v37, v38);
  v43 = objc_msgSend_sampleCount(v39, v40, v41, v42);
  if (v31 < 2)
    v44 = 1;
  else
    v44 = v43;
  v45 = v43 < 2 || v31 < 2;
  v99 = *(_OWORD *)a3;
  v100 = *(_WORD *)(a3 + 16);
  v102 = 0;
  v101 = 0;
  v103 = *(_QWORD *)(a4 + 16);
  v104 = 0;
  v105 = 0;
  v46 = sub_1B19B7CC0(a2, (uint64_t)&v99);
  v47 = (uint64_t *)v46;
  if (*(_BYTE *)(a4 + 32))
    v48 = 0x200000002;
  else
    v48 = 0x200000001;
  CFX::RG::Pass::renderTo(v46, *(_QWORD *)(a4 + 16), v48, -1);
  v49 = *(CFX::RG::Pass **)(a4 + 8);
  if (v49)
    CFX::RG::Pass::dependsOn(v47, v49);
  if (v13)
  {
    v85 = v122;
    v86 = v123;
    v87 = v124;
    v88 = v125;
    v81 = v118;
    v82 = v119;
    v83 = v120;
    v84 = v121;
    v79 = v116;
    v80 = v117;
    v96 = v113;
    v97 = v114;
    v98 = v115;
    v94 = v111;
    v95 = v112;
    v91 = v108;
    v92 = v109;
    v93 = v110;
    v89 = v106;
    v50 = *(_QWORD *)(a3 + 8);
    v77[0] = "Picked object";
    v77[1] = v50;
    v78 = 0;
    v90 = v107;
    v51 = (CFX::RG::Pass *)sub_1B19B7D10(a2, a2, (uint64_t)v77);
    v52 = *(CFX::RG::RenderGraphBuilder **)a4;
    v53 = *(CFX::RG::Resource **)(a4 + 8);
    CFX::RG::TextureDescriptorReference::withSampleCount(&v116, 1, (uint64_t)v74);
    v55 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded((CFX::RG *)a2, v52, v53, (CFX::RG::Pass *)v74, 0, v54);
    v56 = *(CFX::RG::RenderGraphBuilder **)(a4 + 16);
    v57 = *(CFX::RG::Resource **)(a4 + 24);
    CFX::RG::TextureDescriptorReference::withSampleCount(&v106, 1, (uint64_t)v74);
    v59 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded((CFX::RG *)a2, v56, v57, (CFX::RG::Pass *)v74, 0, v58);
    v60 = *(_QWORD *)(a3 + 8);
    v74[0] = "Outline";
    v74[1] = v60;
    v75 = 0;
    CFX::RG::TextureDescriptorReference::withSampleCount(&v116, 1, (uint64_t)&v76);
    v61 = (uint64_t *)sub_1B19B7D64(a2, a2, (uint64_t)v74);
    v62 = (CFX::RG::Resource *)*((_QWORD *)v51 + 50);
    v61[69] = (uint64_t)v62;
    CFX::RG::Pass::readFrom(v61, v62);
    v63 = (CFX::RG::Resource *)*((_QWORD *)v51 + 51);
    v61[70] = (uint64_t)v63;
    CFX::RG::Pass::readFrom(v61, v63);
    v61[71] = (uint64_t)v55;
    CFX::RG::Pass::readFrom(v61, v55);
    if (!*(_BYTE *)(a4 + 32))
    {
      v61[72] = (uint64_t)v59;
      CFX::RG::Pass::readFrom(v61, v59);
    }
    CFX::RG::Pass::dependsOn(v61, v51);
    v64 = *(CFX::RG::Pass **)(a4 + 24);
    if (v64)
      CFX::RG::Pass::dependsOn(v61, v64);
    CFX::RG::TextureDescriptorReference::withSampleCount(&v116, v44, (uint64_t)v73);
    v65 = sub_1B17A34D0(a2, (uint64_t)"AUTHORING COLOR OUTPUT", v73);
    v66 = (CFX::RG::Resource *)v61[73];
    v47[51] = (uint64_t)v66;
    CFX::RG::Pass::readFrom(v47, v66);
    CFX::RG::Pass::renderTo((uint64_t)v47, (uint64_t)v65, 0x100000000, 0);
    v47[52] = (uint64_t)v65;
    CFX::RG::Pass::dependsOn(v47, (CFX::RG::Pass *)v61);
  }
  else
  {
    v67 = v30 > 1 || v45;
    if ((v67 & 1) != 0)
    {
      CFX::RG::Pass::renderTo((uint64_t)v47, *(_QWORD *)a4, 0x100000001, 0);
      v47[52] = *(_QWORD *)a4;
    }
    else
    {
      v68 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)a4);
      CFX::RG::TextureDescriptorReference::withSampleCount(v68, v44, (uint64_t)v72);
      v69 = sub_1B17A34D0(a2, (uint64_t)"AUTHORING COLOR OUTPUT", v72);
      v70 = *(CFX::RG::Resource **)a4;
      v47[51] = *(_QWORD *)a4;
      CFX::RG::Pass::readFrom(v47, v70);
      CFX::RG::Pass::renderTo((uint64_t)v47, (uint64_t)v69, 0x100000000, 0);
      v47[52] = (uint64_t)v69;
    }
  }
  return v47;
}

uint64_t sub_1B19B7CC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6[2];

  v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[0] = sub_1B19B82D0(v6[0], v4, v6, a2);
  sub_1B179C734(a1 + 18, v6);
  return v6[0];
}

uint64_t sub_1B19B7D10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19B831C(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B19B7D64(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19B8378(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B19B7DBC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19B7DE4(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19B7E0C(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19B7E30(uint64_t a1, int a2)
{
  unsigned int v3;
  size_t v4;
  size_t v5;

  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  v3 = a2 + 15;
  v4 = 2 * (a2 + 15);
  *(_QWORD *)(a1 + 24) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, (2 * (a2 + 15)), 4, 2);
  v5 = 8 * v3;
  *(_QWORD *)(a1 + 8) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, v5 & 0xFFFFFFF8, 8, 2);
  *(_QWORD *)(a1 + 16) = CStackAllocatorAllocateAligned(*(_QWORD *)a1, v5 & 0xFFFFFFF8, 8, 2);
  memset(*(void **)(a1 + 8), 255, v5);
  bzero(*(void **)(a1 + 24), v4);
}

uint64_t sub_1B19B7EC8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  unsigned int v12;
  unsigned int v13;
  __int16 *v14;
  unsigned int v15;
  __int16 v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;

  while (1)
  {
    v6 = *(_DWORD *)(a1 + 36);
    v7 = (v6 - 1) & a2;
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2)
      break;
LABEL_6:
    v12 = v7 + 496;
    v13 = v6 + 15;
    if (v13 < (int)v7 + 496)
      v12 = v13;
    if (v7 >= v12)
    {
      v15 = v7;
    }
    else
    {
      v14 = (__int16 *)(v8 + 2 * v7);
      v15 = v7;
      while (1)
      {
        v16 = *v14++;
        if ((v16 & 1) == 0)
          break;
        if (v12 == ++v15)
          goto LABEL_33;
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF)
            v17 = v15 - 14;
          else
            v17 = 0;
          v18 = v17 - 1;
          if (v17 <= v15)
            v19 = v15;
          else
            v19 = v17;
          v20 = 1;
          while (1)
          {
            v21 = v18 + 1;
            if (v17 <= v21)
              break;
LABEL_27:
            ++v20;
            v18 = v21;
            if ((_DWORD)v21 == v19)
              goto LABEL_32;
          }
          v22 = 1 << (v18 - v17 + 2);
          v23 = v20;
          v24 = v17;
          while (1)
          {
            v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0)
              break;
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21)
              goto LABEL_27;
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          v26 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v15) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21);
          *(_QWORD *)(v26 + 8 * v15) = *(_QWORD *)(v26 + 8 * v21);
          v8 = *(_QWORD *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          v15 = v21;
          if (v21 > (int)v7 + 14)
            continue;
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v21) = *a3;
      *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v21) = a2;
      v28 = *(_QWORD *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B19B80E8(a1);
  }
  v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    v11 = v9 > 3;
    v9 >>= 1;
    if (!v11)
      goto LABEL_6;
  }
  result = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void sub_1B19B80E8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  __int16 *v4;
  int v5;
  uint64_t v6;
  __int16 v7;

  v3 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(__int16 **)(a1 + 24);
  v5 = *(_DWORD *)(a1 + 36);
  sub_1B19B7E30(a1, 2 * v5);
  v6 = (v5 + 15);
  if ((_DWORD)v6)
  {
    do
    {
      v7 = *v4++;
      if ((v7 & 1) != 0)
        sub_1B19B7EC8(a1, *v3, v2);
      ++v3;
      v2 += 8;
      --v6;
    }
    while (v6);
  }
}

_QWORD *sub_1B19B8158(_QWORD *a1)
{
  void *v2;
  void *v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = &off_1E63CE810;
  v2 = (void *)a1[7];
  if (v2)

  v3 = (void *)a1[6];
  if (v3)

  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (void *)a1[4];
  if (v5)

  v6 = (void *)a1[3];
  if (v6)

  v7 = (void *)a1[2];
  if (v7)

  return a1;
}

void sub_1B19B81CC(_QWORD *a1)
{
  void *v2;
  void *v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = &off_1E63CE810;
  v2 = (void *)a1[7];
  if (v2)

  v3 = (void *)a1[6];
  if (v3)

  v4 = (const void *)a1[5];
  if (v4)
    CFRelease(v4);
  v5 = (void *)a1[4];
  if (v5)

  v6 = (void *)a1[3];
  if (v6)

  v7 = (void *)a1[2];
  if (v7)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B19B8250(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CE638;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B19B8288(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CE638;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

uint64_t sub_1B19B82D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v6 = sub_1B179C1C0(v8, 0x1D0u, 8u);
  return sub_1B19B65B8(v6, *a3, a3[1], a4);
}

uint64_t sub_1B19B831C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1A0u, 8u);
  return sub_1B19B70B4(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B19B8378(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x250u, 8u);
  return sub_1B19B73C8(v8, *a3, a3[1], a4, a5);
}

const void *sub_1B19B83D4(void *key)
{
  const __CFDictionary *v2;
  _OWORD v4[9];
  void *keys[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFDictionary *)qword_1EEF66D88;
  if (!qword_1EEF66D88)
  {
    v11 = xmmword_1E63DA6D8;
    v12 = *(_OWORD *)&off_1E63DA6E8;
    v13 = xmmword_1E63DA6F8;
    v7 = xmmword_1E63DA698;
    v8 = *(_OWORD *)&off_1E63DA6A8;
    v9 = xmmword_1E63DA6B8;
    v10 = *(_OWORD *)&off_1E63DA6C8;
    *(_OWORD *)keys = xmmword_1E63DA678;
    v6 = *(_OWORD *)&off_1E63DA688;
    v4[6] = xmmword_1E63DA768;
    v4[7] = *(_OWORD *)&off_1E63DA778;
    v4[8] = xmmword_1E63DA788;
    v4[2] = xmmword_1E63DA728;
    v4[3] = *(_OWORD *)&off_1E63DA738;
    v4[4] = xmmword_1E63DA748;
    v4[5] = *(_OWORD *)&off_1E63DA758;
    v4[0] = xmmword_1E63DA708;
    v4[1] = *(_OWORD *)&off_1E63DA718;
    v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)v4, 17, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    qword_1EEF66D88 = (uint64_t)v2;
  }
  return CFDictionaryGetValue(v2, key);
}

uint64_t sub_1B19B84C4(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

void sub_1B19B84F0()
{
  const __CFAllocator *v0;
  __CFString *Mutable;
  uint64_t i;
  const __CFString *v3;
  CFDictionaryRef v4;
  uint64_t v5;
  void *values[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *keys[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  *(_OWORD *)values = 0u;
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 100);
  for (i = 0; i != 35; ++i)
  {
    v3 = off_1E63DA7B8[i];
    keys[i] = (void *)CFStringCreateWithFormat(v0, 0, CFSTR("_surface.%@"), v3);
    CFStringReplaceAll(Mutable, v3);
    CFStringUppercase(Mutable, 0);
    values[i] = (void *)CFStringCreateWithFormat(v0, 0, CFSTR("USE_%@"), Mutable);
  }
  CFRelease(Mutable);
  v4 = CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 35, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 0;
  qword_1EEF66DA0 = (uint64_t)v4;
  do
  {
    CFRelease(keys[v5]);
    CFRelease(values[v5++]);
  }
  while (v5 != 35);
}

void sub_1B19B86A4()
{
  const __CFAllocator *v0;
  __CFString *Mutable;
  uint64_t i;
  const __CFString *v3;
  CFDictionaryRef v4;
  uint64_t v5;
  void *values[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void *keys[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  *(_OWORD *)values = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 100);
  for (i = 0; i != 8; ++i)
  {
    v3 = off_1E63DA910[i];
    keys[i] = (void *)CFStringCreateWithFormat(v0, 0, CFSTR("u_%@Texture"), v3);
    CFStringReplaceAll(Mutable, v3);
    CFStringUppercase(Mutable, 0);
    values[i] = (void *)CFStringCreateWithFormat(v0, 0, CFSTR("USE_%@_MAP"), Mutable);
  }
  CFRelease(Mutable);
  v4 = CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 8, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v5 = 0;
  qword_1EEF66DB0 = (uint64_t)v4;
  do
  {
    CFRelease(keys[v5]);
    CFRelease(values[v5++]);
  }
  while (v5 != 8);
}

CFDictionaryRef sub_1B19B8818()
{
  CFDictionaryRef result;
  _OWORD v1[3];
  const __CFString *v2;
  void *keys[2];
  __int128 v4;
  __int128 v5;
  const __CFString *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)keys = xmmword_1E63DA990;
  v4 = *(_OWORD *)&off_1E63DA9A0;
  v6 = CFSTR("_geometry.clipDistance3");
  v5 = xmmword_1E63DA9B0;
  v1[0] = xmmword_1E63DA9C8;
  v1[1] = *(_OWORD *)&off_1E63DA9D8;
  v1[2] = xmmword_1E63DA9E8;
  v2 = CFSTR("USE_CLIP_DISTANCE3");
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)v1, 7, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  qword_1EEF66DC0 = (uint64_t)result;
  return result;
}

CFDictionaryRef sub_1B19B88D0()
{
  CFDictionaryRef result;
  __int128 v1;
  void *keys[2];
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = xmmword_1E63DAA30;
  *(_OWORD *)keys = xmmword_1E63DAA20;
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&v1, 2, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  qword_1EEF66DD0 = (uint64_t)result;
  return result;
}

CFDictionaryRef sub_1B19B8964()
{
  CFDictionaryRef result;
  void *values;
  void *keys[2];

  keys[1] = *(void **)MEMORY[0x1E0C80C00];
  values = CFSTR("USE_BARYCENTRIC_COORD");
  keys[0] = CFSTR("u_barycentricCoord");
  result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  qword_1EEF66DE0 = (uint64_t)result;
  return result;
}

uint64_t sub_1B19B89F0(const __CFString *a1, int a2, int a3, __int16 a4)
{
  __int128 v6;
  const void *v7;
  const void *v8;
  __int128 v9;
  const void *v10;
  const void *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const void *v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;
  const __CFDictionary *v31;
  const __CFAllocator *v32;
  CFMutableDictionaryRef MutableCopy;
  CFIndex Count;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CFDictionaryRef Copy;
  CFDictionaryRef v42;
  CFTypeRef v43;
  const __CFDictionary *v44;
  const __CFDictionary *v45;
  uint64_t v46;
  uint64_t v47;
  const __CFDictionary *v48;
  uint64_t v50;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  CC_SHA256_CTX context;

  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v53 = 0u;
  sub_1B18AF4C0(0, (uint64_t)&v53);
  sub_1B18AE79C(a1, (uint64_t)&v53, 0);
  v6 = v53;
  v7 = (const void *)v54;
  if (a3)
    v8 = (const void *)*((_QWORD *)&v54 + 1);
  else
    v8 = 0;
  v9 = v55;
  v10 = (const void *)v56;
  v11 = (const void *)v57;
  v12 = WORD4(v57);
  if (qword_1EEF66D98 != -1)
    dispatch_once_f(&qword_1EEF66D98, &qword_1EEF66D90, (dispatch_function_t)sub_1B19B84C4);
  v19 = sub_1B179CB90(qword_1EEF66D90, 0x70uLL);
  if ((_QWORD)v6)
  {
    if (CFStringGetLength((CFStringRef)v6))
    {
      v20 = *(const void **)(v19 + 16);
      if (v20 != (const void *)v6)
      {
        if (v20)
        {
          CFRelease(v20);
          *(_QWORD *)(v19 + 16) = 0;
        }
        *(_QWORD *)(v19 + 16) = CFRetain((CFTypeRef)v6);
      }
    }
  }
  if ((_QWORD)v9)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v9))
    {
      v21 = *(const void **)(v19 + 56);
      if (v21 != (const void *)v9)
      {
        if (v21)
        {
          CFRelease(v21);
          *(_QWORD *)(v19 + 56) = 0;
        }
        *(_QWORD *)(v19 + 56) = CFRetain((CFTypeRef)v9);
      }
    }
  }
  if (*((_QWORD *)&v9 + 1))
  {
    if (CFDictionaryGetCount(*((CFDictionaryRef *)&v9 + 1)))
    {
      v22 = *(const void **)(v19 + 64);
      if (v22 != *((const void **)&v9 + 1))
      {
        if (v22)
        {
          CFRelease(v22);
          *(_QWORD *)(v19 + 64) = 0;
        }
        *(_QWORD *)(v19 + 64) = CFRetain(*((CFTypeRef *)&v9 + 1));
      }
    }
  }
  if (v10)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v10))
    {
      v23 = *(const void **)(v19 + 72);
      if (v23 != v10)
      {
        if (v23)
        {
          CFRelease(v23);
          *(_QWORD *)(v19 + 72) = 0;
        }
        *(_QWORD *)(v19 + 72) = CFRetain(v10);
      }
    }
  }
  if (*((_QWORD *)&v6 + 1) && CFStringGetLength(*((CFStringRef *)&v6 + 1)))
  {
    v24 = *(const void **)(v19 + 24);
    if (v24 != *((const void **)&v6 + 1))
    {
      if (v24)
      {
        CFRelease(v24);
        *(_QWORD *)(v19 + 24) = 0;
      }
      *(_QWORD *)(v19 + 24) = CFRetain(*((CFTypeRef *)&v6 + 1));
    }
  }
  else
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: modifier without code is invalid"), v13, v14, v15, v16, v17, v18, v50);
  }
  if (v7)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v7))
    {
      v25 = *(const void **)(v19 + 32);
      if (v25 != v7)
      {
        if (v25)
        {
          CFRelease(v25);
          *(_QWORD *)(v19 + 32) = 0;
        }
        *(_QWORD *)(v19 + 32) = CFRetain(v7);
      }
    }
  }
  if (v8)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v8))
    {
      v26 = *(const void **)(v19 + 48);
      if (v26 != v8)
      {
        if (v26)
        {
          CFRelease(v26);
          *(_QWORD *)(v19 + 48) = 0;
        }
        *(_QWORD *)(v19 + 48) = CFRetain(v8);
      }
    }
  }
  if (v11)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v11))
    {
      v27 = *(const void **)(v19 + 40);
      if (v27 != v11)
      {
        if (v27)
        {
          CFRelease(v27);
          *(_QWORD *)(v19 + 40) = 0;
        }
        *(_QWORD *)(v19 + 40) = CFRetain(v11);
      }
    }
  }
  v28 = v12 | a4;
  *(_DWORD *)(v19 + 88) = a2;
  *(_WORD *)(v19 + 94) = 0;
  v29 = *(_QWORD *)(v19 + 24);
  if (v29)
  {
    *(_QWORD *)&context.hash[2] = 0;
    v30 = *(_QWORD *)(v19 + 16);
    *(_QWORD *)context.count = v29;
    *(_QWORD *)context.hash = v30;
    v31 = *(const __CFDictionary **)(v19 + 32);
    v32 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (v31)
    {
      MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, v31);
      Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v19 + 32));
    }
    else
    {
      MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      Count = 0;
    }
    *(_QWORD *)&context.hash[2] = MutableCopy;
    if (qword_1EEF66DA8 != -1)
      dispatch_once(&qword_1EEF66DA8, &unk_1E63D1450);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1EEF66DA0, (CFDictionaryApplierFunction)sub_1B19B9B30, &context);
    if (qword_1EEF66DB8 != -1)
      dispatch_once(&qword_1EEF66DB8, &unk_1E63DA8F0);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1EEF66DB0, (CFDictionaryApplierFunction)sub_1B19B9B30, &context);
    if (qword_1EEF66DC8 != -1)
      dispatch_once(&qword_1EEF66DC8, &unk_1E63DA970);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1EEF66DC0, (CFDictionaryApplierFunction)sub_1B19B9B30, &context);
    if (qword_1EEF66DD8 != -1)
      dispatch_once(&qword_1EEF66DD8, &unk_1E63D1550);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1EEF66DD0, (CFDictionaryApplierFunction)sub_1B19B9B30, &context);
    if (qword_1EEF66DE8 != -1)
      dispatch_once(&qword_1EEF66DE8, &unk_1E63DAA60);
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1EEF66DE0, (CFDictionaryApplierFunction)sub_1B19B9B30, &context);
    if (CFDictionaryGetCount(*(CFDictionaryRef *)&context.hash[2]) != Count)
    {
      Copy = CFDictionaryCreateCopy(v32, *(CFDictionaryRef *)&context.hash[2]);
      if (!Copy)
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v35, v36, v37, v38, v39, v40, (uint64_t)"newDefines");
      v42 = *(CFDictionaryRef *)(v19 + 32);
      if (v42 != Copy)
      {
        if (v42)
        {
          CFRelease(v42);
          *(_QWORD *)(v19 + 32) = 0;
        }
        if (Copy)
          v43 = CFRetain(Copy);
        else
          v43 = 0;
        *(_QWORD *)(v19 + 32) = v43;
      }
      CFRelease(Copy);
    }
    CFRelease(*(CFTypeRef *)&context.hash[2]);
  }
  v44 = *(const __CFDictionary **)(v19 + 32);
  if (v44)
  {
    if (CFDictionaryGetCountOfKey(v44, CFSTR("USE_TANGENT"))
      || CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_TANGENT")))
    {
      v28 |= 2u;
    }
    v45 = *(const __CFDictionary **)(v19 + 32);
    *(_WORD *)(v19 + 92) = v28;
    if (v45)
    {
      if (CFDictionaryGetCountOfKey(v45, CFSTR("USE_EMISSIVETEXCOORD")))
        *(_WORD *)(v19 + 94) |= 1u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_DIFFUSETEXCOORD")))
        *(_WORD *)(v19 + 94) |= 2u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_SPECULARTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 4u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_REFLECTIVETEXCOORD")))
        *(_WORD *)(v19 + 94) |= 8u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_TRANSPARENTTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x10u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_FILTERTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x20u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_NORMALTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x40u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_METALNESSTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x200u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_ROUGHNESSTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x400u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_CLEARCOATTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x800u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_CLEARCOATROUGHNESSTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x1000u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_CLEARCOATNORMALTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x2000u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_SUBSURFACETEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x4000u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_SUBSURFACERADIUSTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x8000u;
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), CFSTR("USE_AMBIENTOCCLUSIONTEXCOORD")))
        *(_WORD *)(v19 + 94) |= 0x80u;
    }
  }
  else
  {
    *(_WORD *)(v19 + 92) = v28;
  }
  memset(&context, 0, sizeof(context));
  CC_SHA256_Init(&context);
  CC_SHA256_Update(&context, (const void *)(v19 + 88), 4u);
  v46 = *(_QWORD *)(v19 + 24);
  if (v46)
    sub_1B19B9800(v46, (uint64_t)&context);
  v47 = *(_QWORD *)(v19 + 16);
  if (v47)
    sub_1B19B9800(v47, (uint64_t)&context);
  v48 = *(const __CFDictionary **)(v19 + 32);
  if (v48)
    CFDictionaryApplyFunction(v48, (CFDictionaryApplierFunction)sub_1B19B9940, &context);
  CC_SHA256_Final((unsigned __int8 *)(v19 + 96), &context);
  sub_1B18AF5FC((uint64_t)&v53);
  return v19;
}

uint64_t sub_1B19B9164(CFStringRef theString, int a2, CFDictionaryRef theDict, int a4, __int16 a5)
{
  CFIndex Count;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  CFMutableStringRef Mutable;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];

  v24[1] = *MEMORY[0x1E0C80C00];
  if (theDict && CFDictionaryGetCount(theDict) >= 1)
  {
    Count = CFDictionaryGetCount(theDict);
    v24[0] = v24;
    MEMORY[0x1E0C80A78](Count, v11);
    v12 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    v13 = (_QWORD *)((char *)v24 - v12);
    if ((unint64_t)(8 * Count) >= 0x200)
      v14 = 512;
    else
      v14 = 8 * Count;
    bzero((char *)v24 - v12, v14);
    MEMORY[0x1E0C80A78](v15, v16);
    v17 = (_QWORD *)((char *)v24 - v12);
    bzero((char *)v24 - v12, v14);
    CFDictionaryGetKeysAndValues(theDict, (const void **)((char *)v24 - v12), (const void **)((char *)v24 - v12));
    Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (Count >= 1)
    {
      do
      {
        v20 = *v13++;
        v19 = v20;
        v21 = *v17++;
        CFStringAppendFormat(Mutable, 0, CFSTR("#define %@ %@\n"), v19, v21);
        --Count;
      }
      while (Count);
    }
    CFStringAppend(Mutable, theString);
  }
  else
  {
    Mutable = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, theString);
  }
  v22 = sub_1B19B89F0(Mutable, a2, a4, a5);
  CFRelease(Mutable);
  return v22;
}

uint64_t sub_1B19B932C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B19B9374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(_QWORD *)(a1 + 40);
}

uint64_t sub_1B19B93BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(_QWORD *)(a1 + 56);
}

uint64_t sub_1B19B9404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(_QWORD *)(a1 + 72);
}

uint64_t sub_1B19B944C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(_QWORD *)(a1 + 24);
}

uint64_t sub_1B19B9494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(_QWORD *)(a1 + 32);
}

void sub_1B19B94DC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[5];
  _QWORD v4[5];
  _QWORD v5[5];
  _QWORD v6[5];
  _QWORD v7[5];

  if (qword_1EEF66DA8 != -1)
    dispatch_once(&qword_1EEF66DA8, &unk_1E63D1450);
  v2 = MEMORY[0x1E0C809B0];
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 0x40000000;
  v7[2] = sub_1B19B96D8;
  v7[3] = &unk_1E63DAA88;
  v7[4] = a1;
  sub_1B17A04DC((const __CFDictionary *)qword_1EEF66DA0, (uint64_t)v7);
  if (qword_1EEF66DB8 != -1)
    dispatch_once(&qword_1EEF66DB8, &unk_1E63DA8F0);
  v6[0] = v2;
  v6[1] = 0x40000000;
  v6[2] = sub_1B19B96E8;
  v6[3] = &unk_1E63DAAB0;
  v6[4] = a1;
  sub_1B17A04DC((const __CFDictionary *)qword_1EEF66DB0, (uint64_t)v6);
  if (qword_1EEF66DC8 != -1)
    dispatch_once(&qword_1EEF66DC8, &unk_1E63DA970);
  v5[0] = v2;
  v5[1] = 0x40000000;
  v5[2] = sub_1B19B96F8;
  v5[3] = &unk_1E63DAAD8;
  v5[4] = a1;
  sub_1B17A04DC((const __CFDictionary *)qword_1EEF66DC0, (uint64_t)v5);
  if (qword_1EEF66DD8 != -1)
    dispatch_once(&qword_1EEF66DD8, &unk_1E63D1550);
  v4[0] = v2;
  v4[1] = 0x40000000;
  v4[2] = sub_1B19B9708;
  v4[3] = &unk_1E63DAB00;
  v4[4] = a1;
  sub_1B17A04DC((const __CFDictionary *)qword_1EEF66DD0, (uint64_t)v4);
  if (qword_1EEF66DE8 != -1)
    dispatch_once(&qword_1EEF66DE8, &unk_1E63DAA60);
  v3[0] = v2;
  v3[1] = 0x40000000;
  v3[2] = sub_1B19B9718;
  v3[3] = &unk_1E63DAB28;
  v3[4] = a1;
  sub_1B17A04DC((const __CFDictionary *)qword_1EEF66DE0, (uint64_t)v3);
}

uint64_t sub_1B19B96D8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B19B96E8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B19B96F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B19B9708(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B19B9718(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B19B9728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(__int16 *)(a1 + 92);
}

uint64_t sub_1B19B9770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(unsigned __int16 *)(a1 + 94);
}

uint64_t sub_1B19B97B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  return *(unsigned int *)(a1 + 88);
}

CFIndex sub_1B19B9800(uint64_t a1, uint64_t a2)
{
  const __CFString *v2;
  CC_SHA256_CTX *v3;
  CC_SHA256_CTX *v4;
  const __CFString *v5;
  const char *CStringPtr;
  CFIndex result;
  CFIndex v8;
  CFIndex v9;
  CFIndex usedBufLen;
  UInt8 buffer[32768];
  uint64_t v12;
  CFRange v13;

  v2 = (const __CFString *)MEMORY[0x1E0C80A78](a1, a2);
  v4 = v3;
  v5 = v2;
  v12 = *MEMORY[0x1E0C80C00];
  CStringPtr = CFStringGetCStringPtr(v2, 0x600u);
  result = CFStringGetLength(v5);
  v8 = result;
  if (CStringPtr)
    return CC_SHA256_Update(v4, CStringPtr, result);
  do
  {
    if (!v8)
      break;
    usedBufLen = 0;
    v13.location = (CFIndex)CStringPtr;
    v13.length = v8;
    result = CFStringGetBytes(v5, v13, 0x8000100u, 0, 0, buffer, 0x8000, &usedBufLen);
    v9 = result;
    if (usedBufLen)
      result = CC_SHA256_Update(v4, buffer, usedBufLen);
    CStringPtr += v9;
    v8 -= v9;
  }
  while (v9);
  return result;
}

CFIndex sub_1B19B9940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex result;

  result = sub_1B19B9800(a1, a3);
  if (a2)
    return sub_1B19B9800(a2, a3);
  return result;
}

uint64_t sub_1B19B9980(uint64_t a1, CC_SHA256_CTX *c)
{
  return CC_SHA256_Update(c, (const void *)(a1 + 96), 0x20u);
}

void sub_1B19B9998(_QWORD *a1)
{
  const void *v2;
  const void *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const void *v8;
  const void *v9;

  v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
    a1[9] = 0;
  }
  v7 = (const void *)a1[4];
  if (v7)
  {
    CFRelease(v7);
    a1[4] = 0;
  }
  v8 = (const void *)a1[5];
  if (v8)
  {
    CFRelease(v8);
    a1[5] = 0;
  }
  v9 = (const void *)a1[6];
  if (v9)
  {
    CFRelease(v9);
    a1[6] = 0;
  }
}

__CFString *sub_1B19B9A38(uint64_t a1)
{
  __CFString *Mutable;

  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("<CFXShaderModifier %p language:%s, entryPoint:\"%d\" flags:%x\n"), a1, "Metal", *(unsigned int *)(a1 + 88), *(__int16 *)(a1 + 92));
  if (*(_QWORD *)(a1 + 16))
    CFStringAppendFormat(Mutable, 0, CFSTR("  declaration : %@\n"), *(_QWORD *)(a1 + 16));
  if (*(_QWORD *)(a1 + 56))
    CFStringAppendFormat(Mutable, 0, CFSTR("  arguments : %@\n"), *(_QWORD *)(a1 + 56));
  if (*(_QWORD *)(a1 + 72))
    CFStringAppendFormat(Mutable, 0, CFSTR("  varyings : %@\n"), *(_QWORD *)(a1 + 72));
  if (*(_QWORD *)(a1 + 24))
    CFStringAppendFormat(Mutable, 0, CFSTR("  code : %@\n"), *(_QWORD *)(a1 + 24));
  CFStringAppend(Mutable, CFSTR(">"));
  return Mutable;
}

void sub_1B19B9B30(CFStringRef stringToFind, const void *a2, uint64_t a3)
{
  const __CFString *v6;

  if ((unint64_t)CFStringFind((CFStringRef)*(_QWORD *)a3, stringToFind, 0).length
    || (v6 = *(const __CFString **)(a3 + 8)) != 0 && (unint64_t)CFStringFind(v6, stringToFind, 0).length)
  {
    CFDictionarySetValue(*(CFMutableDictionaryRef *)(a3 + 16), a2, CFSTR("2"));
  }
}

uint64_t sub_1B19B9BA8(const char *a1)
{
  if (!strcmp(a1, "f"))
    return 1;
  if (!strcmp(a1, "i") || !strcmp(a1, "I") || !strcmp(a1, "q") || !strcmp(a1, "Q"))
    return 2;
  if (!strcmp(a1, "s") || !strcmp(a1, "S"))
    return 13;
  if (!strcmp(a1, "B"))
    return 3;
  if (!strcmp(a1, "c") || !strcmp(a1, "C"))
    return 4;
  if (!strcmp(a1, "d"))
    return 6;
  if (!strcmp(a1, "{CATransform3D=dddddddddddddddd}"))
    return 10;
  if (!strcmp(a1, "{CGPoint=dd}"))
    return 7;
  if (!strcmp(a1, "{?=ffff}") || !strcmp(a1, "{CGRect={CGPoint=dd}{CGSize=dd}}"))
    return 9;
  if (!strcmp(a1, "{?=fff}"))
    return 8;
  if (*a1 == 64)
    return 5;
  return 0;
}

const void *sub_1B19B9D68(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v10 = (const void *)sub_1B191E290(a2, 1, a3, a4, a5, a6, a7, a8);
  v18 = sub_1B191E41C((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  if ((sub_1B19B9DE4(a1, v18, a2, v19) & 1) == 0)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unexpected value (%@)"), v20, v21, v22, v23, v24, v25, (uint64_t)a1);
    CFRelease(v10);
    return 0;
  }
  return v10;
}

uint64_t sub_1B19B9DE4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  int v49;
  const char *v50;
  uint64_t v51;
  __int128 v52;

  result = 0;
  switch((int)a3)
  {
    case 1:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          return 0;
      }
      objc_msgSend_floatValue(a1, v17, v18, v19);
      *(_DWORD *)a2 = v20;
      return 1;
    case 2:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          return 0;
      }
      *(_DWORD *)a2 = objc_msgSend_intValue(a1, v21, v22, v23);
      return 1;
    case 3:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          return 0;
      }
      v27 = objc_msgSend_BOOLValue(a1, v24, v25, v26);
      goto LABEL_31;
    case 4:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return 0;
      v27 = objc_msgSend_charValue(a1, v28, v29, v30);
      goto LABEL_31;
    case 5:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return 0;
      v34 = objc_msgSend_pointerValue(a1, v31, v32, v33);
      goto LABEL_37;
    case 6:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0)
          return 0;
      }
      objc_msgSend_doubleValue(a1, v35, v36, v37);
      *(_QWORD *)a2 = v38;
      return 1;
    case 7:
    case 17:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v52 = 0uLL;
        sub_1B191E6F8((char *)a1, (uint64_t)&v52, 2);
        goto LABEL_27;
      }
      objc_msgSend_CGPointValue(a1, v7, v8, v9);
      *(float *)&v46 = v46;
      *(float *)&v47 = v47;
      *(_DWORD *)a2 = LODWORD(v46);
      *(_DWORD *)(a2 + 4) = LODWORD(v47);
      return 1;
    case 8:
    case 18:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
        v52 = 0uLL;
        sub_1B191E604((const char *)a1, (int *)&v52, 3);
        *(_QWORD *)a2 = v52;
        *(_DWORD *)(a2 + 8) = DWORD2(v52);
      }
      else
      {
        objc_msgSend_VFXFloat3Value(a1, v10, v11, v12);
        *(_QWORD *)a2 = v48;
        *(_DWORD *)(a2 + 8) = v49;
      }
      return 1;
    case 9:
    case 19:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
        goto LABEL_26;
      objc_msgSend_VFXFloat4Value(a1, v13, v14, v15);
      goto LABEL_28;
    case 10:
      objc_msgSend_VFXMatrix4Value(a1, (const char *)a2, a3, a4);
      *(_OWORD *)a2 = v39;
      *(_OWORD *)(a2 + 16) = v40;
      *(_OWORD *)(a2 + 32) = v41;
      *(_OWORD *)(a2 + 48) = v42;
      return 1;
    case 12:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0)
      {
LABEL_26:
        v52 = 0uLL;
        sub_1B191E604((const char *)a1, (int *)&v52, 4);
LABEL_27:
        v16 = v52;
LABEL_28:
        *(_OWORD *)a2 = v16;
      }
      else
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
        {
          v34 = objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, v50, 0, 0);
          *(_QWORD *)(a2 + 8) = v51;
LABEL_37:
          *(_QWORD *)a2 = v34;
        }
      }
      return 1;
    case 15:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
        return 0;
      v27 = objc_msgSend_unsignedCharValue(a1, v43, v44, v45);
LABEL_31:
      *(_BYTE *)a2 = v27;
      return 1;
    default:
      return result;
  }
}

const void *sub_1B19BA12C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = (const char *)objc_msgSend_objCType(a1, a2, a3, a4);
  v6 = sub_1B19B9BA8(v5);
  if ((_DWORD)v6)
    return sub_1B19B9D68(a1, v6, v7, v8, v9, v10, v11, v12);
  else
    return 0;
}

uint64_t sub_1B19BA16C(double *a1, const char *a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  switch((int)a2)
  {
    case 1:
      LODWORD(a3) = *(_DWORD *)a1;
      result = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a1, a5, a3);
      break;
    case 2:
      result = objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, *(int *)a1, a5);
      break;
    case 3:
      result = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int8 *)a1, a5);
      break;
    case 4:
      result = MEMORY[0x1E0DE7D20](MEMORY[0x1E0CB37E8], sel_numberWithChar_, *(char *)a1, a5);
      break;
    case 5:
      result = objc_msgSend_valueWithPointer_(MEMORY[0x1E0CB3B18], a2, *(_QWORD *)a1, a5);
      break;
    case 6:
      result = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, (uint64_t)a1, a5, *a1);
      break;
    case 7:
      result = objc_msgSend_valueWithCGPoint_(MEMORY[0x1E0CB3B18], a2, (uint64_t)a1, a5, *(float *)a1, *((float *)a1 + 1));
      break;
    case 8:
      result = objc_msgSend_valueWithVFXFloat3_(MEMORY[0x1E0CB3B18], a2, (uint64_t)a1, a5, *a1);
      break;
    case 9:
      result = objc_msgSend_valueWithVFXFloat4_(MEMORY[0x1E0CB3B18], a2, (uint64_t)a1, a5, *a1);
      break;
    case 10:
      result = objc_msgSend_valueWithVFXMatrix4_(MEMORY[0x1E0CB3B18], a2, (uint64_t)a1, a5, *a1, a1[2], a1[4], a1[6]);
      break;
    case 12:
      result = objc_msgSend_vfx_colorWithCFXColor_(MEMORY[0x1E0DC3658], a2, (uint64_t)a1, a5);
      break;
    case 15:
      result = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], a2, *(unsigned __int8 *)a1, a5);
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1B19BA26C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t result;

  switch((int)a1)
  {
    case 1:
    case 14:
      LODWORD(a9) = 0;
      result = objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], a2, a3, a4, a9);
      break;
    case 2:
      result = objc_msgSend_numberWithInteger_(MEMORY[0x1E0CB37E8], a2, 0, a4);
      break;
    case 3:
      result = objc_msgSend_numberWithBool_(MEMORY[0x1E0CB37E8], a2, 0, a4);
      break;
    case 4:
    case 15:
    case 20:
    case 21:
      result = objc_msgSend_numberWithUnsignedChar_(MEMORY[0x1E0CB37E8], a2, 0, a4);
      break;
    case 5:
      result = objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], a2, 0, a4);
      break;
    case 6:
      result = objc_msgSend_numberWithDouble_(MEMORY[0x1E0CB37E8], a2, a3, a4, 0.0);
      break;
    case 7:
    case 17:
      result = objc_msgSend_valueWithCGPoint_(MEMORY[0x1E0CB3B18], a2, a3, a4, 0.0, 0.0);
      break;
    case 8:
    case 18:
      result = objc_msgSend_valueWithVFXFloat3_(MEMORY[0x1E0CB3B18], a2, a3, a4, 0.0);
      break;
    case 9:
    case 12:
    case 19:
      result = objc_msgSend_valueWithVFXFloat4_(MEMORY[0x1E0CB3B18], a2, a3, a4, 0.0);
      break;
    case 10:
    case 11:
      result = objc_msgSend_valueWithVFXMatrix4_(MEMORY[0x1E0CB3B18], a2, a3, a4, *(double *)&VFXMatrix4Identity, unk_1B2247DB0, 0.0, unk_1B2247DD0);
      break;
    case 13:
    case 16:
      result = objc_msgSend_numberWithUnsignedShort_(MEMORY[0x1E0CB37E8], a2, 0, a4);
      break;
    default:
      sub_1B17C4408(0, (uint64_t)CFSTR("Warning: VFXDefaultValueWithBaseType - unknwon base type %d"), a3, a4, a5, a6, a7, a8, a1);
      result = 0;
      break;
  }
  return result;
}

objc_property *sub_1B19BA3D8(objc_class *a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  objc_property *result;
  const char *Attributes;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;

  v5 = (const char *)objc_msgSend_UTF8String(a2, (const char *)a2, a3, a4);
  result = class_getProperty(a1, v5);
  if (result)
  {
    Attributes = property_getAttributes(result);
    v10 = (void *)objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v8, (uint64_t)Attributes, v9);
    v13 = (void *)objc_msgSend_componentsSeparatedByString_(v10, v11, (uint64_t)CFSTR(","), v12);
    v16 = (void *)objc_msgSend_objectAtIndex_(v13, v14, 0, v15);
    v19 = (void *)objc_msgSend_substringFromIndex_(v16, v17, 1, v18);
    v23 = (const char *)objc_msgSend_UTF8String(v19, v20, v21, v22);
    return (objc_property *)sub_1B19B9BA8(v23);
  }
  return result;
}

uint64_t sub_1B19BA44C(void *a1, void *a2)
{
  objc_class *v4;
  uint64_t v5;
  uint64_t v6;
  objc_property *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = (objc_class *)objc_opt_class();
  v7 = sub_1B19BA3D8(v4, a2, v5, v6);
  if (!(_DWORD)v7)
    return 0;
  v10 = (uint64_t)v7;
  v11 = objc_msgSend_valueForKey_(a1, v8, (uint64_t)a2, v9);
  if (v11)
  {
    v19 = (void *)v11;
    v20 = (const void *)sub_1B191E290(v10, 1, v13, v14, v15, v16, v17, v18);
    v28 = sub_1B191E41C((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27);
    if ((sub_1B19B9DE4(v19, v28, v10, v29) & 1) != 0)
      return (uint64_t)v20;
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: unexpected returned value for property %@ of object %@"), v30, v31, v32, v33, v34, v35, (uint64_t)a2);
    CFRelease(v20);
    return 0;
  }
  return sub_1B191E394(v10, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1B19BA514()
{
  if (qword_1ED4CEC08 != -1)
    dispatch_once(&qword_1ED4CEC08, &unk_1E63D1B10);
  return qword_1ED4CEC10;
}

uint64_t sub_1B19BA554()
{
  if (qword_1ED4CEBD8 != -1)
    dispatch_once(&qword_1ED4CEBD8, &unk_1E63D15F0);
  return qword_1ED4CEBE0;
}

uint64_t sub_1B19BA594()
{
  if (qword_1EEF66E08 != -1)
    dispatch_once_f(&qword_1EEF66E08, &qword_1ED4CEC18, (dispatch_function_t)sub_1B19BD748);
  return qword_1ED4CEC18;
}

uint64_t sub_1B19BA5DC()
{
  if (qword_1ED4CEBF8 != -1)
    dispatch_once(&qword_1ED4CEBF8, &unk_1E63D1590);
  return qword_1ED4CEC00;
}

uint64_t sub_1B19BA61C()
{
  if (qword_1ED4CEBB0 != -1)
    dispatch_once(&qword_1ED4CEBB0, &unk_1E63D1650);
  return qword_1ED4CEBB8;
}

uint64_t sub_1B19BA65C()
{
  if (qword_1ED4CEC20 != -1)
    dispatch_once(&qword_1ED4CEC20, &unk_1E63D16F0);
  return qword_1ED4CEC28;
}

uint64_t sub_1B19BA69C()
{
  if (qword_1ED4CEBC0 != -1)
    dispatch_once(&qword_1ED4CEBC0, &unk_1E63D1BF0);
  return qword_1ED4CEBC8;
}

uint64_t sub_1B19BA6DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a2)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"constraintController");
    if (a4)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)(a2 + 16) + 88))(a1, a2, a3, a4, a9);
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"target");
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)(a2 + 16) + 88))(a1, a2, a3, a4, a9);
  }
  if (!a4)
    goto LABEL_5;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)(a2 + 16) + 88))(a1, a2, a3, a4, a9);
}

uint64_t sub_1B19BA784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  return (*(uint64_t (**)(uint64_t))(a1 + 96))(a1);
}

uint64_t sub_1B19BA7D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  return *(_QWORD *)(a1 + 64);
}

CFStringRef sub_1B19BA818(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFStringRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  result = *(CFStringRef *)(a1 + 64);
  if (result != theString)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (theString)
      result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], theString);
    else
      result = 0;
    *(_QWORD *)(a1 + 64) = result;
  }
  return result;
}

uint64_t sub_1B19BA89C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 76) = a2;
  return result;
}

uint64_t sub_1B19BA8A4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 77) = a2;
  return result;
}

uint64_t sub_1B19BA8AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t sub_1B19BA8B4(uint64_t result, float a2)
{
  *(float *)(result + 72) = a2;
  return result;
}

uint64_t sub_1B19BA8BC(uint64_t result)
{
  uint64_t (*v1)(void);

  v1 = *(uint64_t (**)(void))(result + 112);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_1B19BA8CC(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

_QWORD *sub_1B19BA8F8(const void *a1, const void *a2, const void *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void (*v14)(_QWORD *, _QWORD *, const void *);

  if (qword_1EEF66DF8 != -1)
    dispatch_once_f(&qword_1EEF66DF8, &qword_1EEF66DF0, (dispatch_function_t)sub_1B19BA8CC);
  v6 = (_QWORD *)sub_1B179CB90(qword_1EEF66DF0, 0x30uLL);
  v13 = CFRetain(a1);
  v6[2] = v13;
  if (!v13)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v7, v8, v9, v10, v11, v12, (uint64_t)"constraint");
  v14 = (void (*)(_QWORD *, _QWORD *, const void *))v13[10];
  if (v14)
    v14(v13, v6, a2);
  v6[4] = CFRetain(a3);
  v6[3] = CFRetain(a2);
  return v6;
}

void sub_1B19BA9D8(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

void sub_1B19BAA04()
{
  void *v0;
  const void *v1;
  uint64_t v2;
  uint64_t v3;

  if (!qword_1ED4CEBF0)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEBF0);
    qword_1ED4CEBF0 = (uint64_t)v0;
    v1 = (const void *)sub_1B193E4C8();
    sub_1B19C3200(v0, v1);
    sub_1B19C326C(CFSTR("influenceFactor"), 0x48u, 1, 0, 0, 0, v2, v3);
    sub_1B19C3258();
  }
}

uint64_t sub_1B19BAA84(uint64_t result)
{
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  return result;
}

void sub_1B19BAA98()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!qword_1ED4CEC10)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEC10);
    qword_1ED4CEC10 = (uint64_t)v0;
    if (qword_1ED4CEBE8 != -1)
      dispatch_once(&qword_1ED4CEBE8, &unk_1E63D1470);
    sub_1B19C3200(v0, (const void *)qword_1ED4CEBF0);
    sub_1B19C326C(CFSTR("targetOffset"), 0xB0u, 9, 0, 0, 0, v1, v2);
    sub_1B19C326C(CFSTR("worldUp"), 0xA0u, 9, 0, 0, 0, v3, v4);
    sub_1B19C326C(CFSTR("localFront"), 0xC0u, 8, 0, 0, 0, v5, v6);
    sub_1B19C3258();
  }
}

uint64_t sub_1B19BAB80(const void *a1)
{
  uint64_t v2;
  CFTypeRef v3;

  if (qword_1ED4CEC08 != -1)
    dispatch_once(&qword_1ED4CEC08, &unk_1E63D1B10);
  v2 = sub_1B179CB90(qword_1ED4CEC10, 0xC0uLL);
  *(_DWORD *)(v2 + 72) = 1065353216;
  *(_WORD *)(v2 + 76) = 257;
  if (a1)
    v3 = CFRetain(a1);
  else
    v3 = 0;
  *(_QWORD *)(v2 + 136) = v3;
  *(_BYTE *)(v2 + 144) = 0;
  *(_OWORD *)(v2 + 176) = xmmword_1B2244E20;
  *(_OWORD *)(v2 + 192) = xmmword_1B2244DF0;
  *(_OWORD *)(v2 + 160) = xmmword_1B2244DD0;
  *(_QWORD *)(v2 + 88) = sub_1B19BAC3C;
  *(_QWORD *)(v2 + 96) = sub_1B19BB524;
  return v2;
}

uint64_t sub_1B19BAC3C(float a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x2_t v81;
  float32x2_t v82;
  int32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int32x4_t v111;
  float32x4_t v112;
  int32x4_t v113;
  float32x4_t v114;
  float v115;
  float32x4_t v116;
  BOOL v117;
  float32x4_t v118;
  int32x2_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  int32x4_t v123;
  __float2 v125;
  int32x4_t v128;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x16_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int32x4_t v157;
  float32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float v162;
  float v163;
  float32x4_t v164;
  int8x16_t v165;
  float32x4_t v166;
  int8x16_t v167;
  float v168;
  float v169;
  float v170;
  float v171;
  float32x2_t v172;
  float32x2_t v173;
  float v174;
  float v175;
  int32x2_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float v179;
  float v180;
  float v181;
  float32x4_t v182;
  float32x4_t v183;
  int8x16_t v184;
  float32x4_t v185;
  int8x16_t v186;
  float v187;
  float v188;
  float v189;
  float v190;
  float32x2_t v191;
  int32x2_t v192;
  float v193;
  float32x4_t v194;
  float v195;
  float v196;
  float v197;
  int8x16_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  const void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  size_t v219;
  uint64_t v220;
  uint64_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float v233;
  float v234;
  float v235;
  float v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  _OWORD v248[4];
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;

  if (!a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a4, a5, a6, a7, a8, a9, (uint64_t)"constraintController");
  v13 = *(_QWORD *)(a3 + 16);
  v14 = *(_QWORD *)(v13 + 136);
  if (v14)
    _ZF = v14 == (_QWORD)a4;
  else
    _ZF = 1;
  if (_ZF)
    return 0;
  v17 = sub_1B186A28C(v14, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  v25 = v17;
  v26 = *(_QWORD *)(v13 + 136);
  if (v25)
  {
    *(double *)v27.i64 = sub_1B186BC70(v26, v18, v19, v20, v21, v22, v23, v24);
    v237 = v28;
    v242 = v27;
    v225 = v30;
    v229 = v29;
    v38 = sub_1B186B574(*(_QWORD *)(v13 + 136), v31, v32, v33, v34, v35, v36, v37);
    if (v38)
    {
      v46 = (_OWORD *)sub_1B1869AC8(v38, v39, v40, v41, v42, v43, v44, v45);
      v47 = 0;
      v48 = v46[1];
      v49 = v46[2];
      v50 = v46[3];
      v248[0] = *v46;
      v248[1] = v48;
      v248[2] = v49;
      v248[3] = v50;
      v249 = 0u;
      v250 = 0u;
      v251 = 0u;
      v252 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v249 + v47 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v242, COERCE_FLOAT(v248[v47])), v237, *(float32x2_t *)&v248[v47], 1), v229, (float32x4_t)v248[v47], 2), v225, (float32x4_t)v248[v47], 3);
        ++v47;
      }
      while (v47 != 4);
      v51 = v249;
      v52 = v250;
      v53 = v251;
      v54 = v252;
    }
    else
    {
      v52 = v237;
      v51 = v242;
      v54 = v225;
      v53 = v229;
    }
  }
  else
  {
    v55 = (float32x4_t *)sub_1B1869AC8(v26, v18, v19, v20, v21, v22, v23, v24);
    v51 = *v55;
    v52 = v55[1];
    v53 = v55[2];
    v54 = v55[3];
  }
  v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)(v13 + 176))), v52, *(float32x2_t *)(v13 + 176), 1), v53, *(float32x4_t *)(v13 + 176), 2), v54, *(float32x4_t *)(v13 + 176), 3);
  v249 = (float32x4_t)xmmword_1B2244E20;
  v238 = v56;
  if (!*(_BYTE *)(v13 + 144))
  {
    *(double *)v132.i64 = sub_1B186B90C((uint64_t)a4, v39, v40, v41, v42, v43, v44, v45);
    v136 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v134, v133, v238, 2), v135, *(float32x2_t *)v238.f32, 1), v132, v238.f32[0]);
    v137 = (int32x4_t)vmulq_f32(v136, v136);
    v137.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v137, 2), vadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v137.i8, 1))).u32[0];
    *(float32x2_t *)v135.f32 = vrsqrte_f32((float32x2_t)v137.u32[0]);
    *(float32x2_t *)v135.f32 = vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v137.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32)));
    v138 = vmulq_n_f32(v136, vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v137.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32))).f32[0]);
    v139 = *(float32x4_t *)(v13 + 192);
    v140 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v138, (int32x4_t)v138), (int8x16_t)v138, 0xCuLL), vnegq_f32(v139)), v138, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v139, (int32x4_t)v139), (int8x16_t)v139, 0xCuLL));
    v141 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v140, v140), (int8x16_t)v140, 0xCuLL);
    v142 = vmulq_f32(v139, v138);
    v141.f32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0]+ 1.0;
    v143 = (int8x16_t)vmulq_f32(v141, v141);
    *(float32x2_t *)v143.i8 = vadd_f32(*(float32x2_t *)v143.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL));
    v144 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v143.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v143.i8, 1)), 0);
    v145 = vrsqrteq_f32(v144);
    v146 = vmulq_f32(v145, vrsqrtsq_f32(v144, vmulq_f32(v145, v145)));
    __asm { FMOV            V3.4S, #1.0 }
    v245 = vmulq_f32(v141, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v144), _Q3, (int8x16_t)vmulq_f32(v146, vrsqrtsq_f32(v144, vmulq_f32(v146, v146)))));
    *(double *)_Q0.i64 = sub_1B186BB70(a4, v148, v149, v150, v151, v152, v153, v154);
    _S1 = v245.i32[3];
    v157 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v245, (int32x4_t)v245), (int8x16_t)v245, 0xCuLL), vnegq_f32(_Q0)), v245, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    v76 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(_Q0, v245, 3), v245, _Q0, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v157, v157), (int8x16_t)v157, 0xCuLL));
    __asm { FMLA            S2, S1, V0.S[3] }
    v76.i32[3] = _S2;
LABEL_24:
    v249 = v76;
    goto LABEL_25;
  }
  result = sub_1B186B574((uint64_t)a4, v39, v40, v41, v42, v43, v44, v45);
  if (!result)
    return result;
  *(double *)v64.i64 = sub_1B186B90C(result, v57, v58, v59, v60, v61, v62, v63);
  v226 = v65;
  v230 = v66;
  v223 = v64;
  v224 = v67;
  v239 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v66, v65, v238, 2), v67, *(float32x2_t *)v238.f32, 1), v64, v238.f32[0]);
  v222 = *(float32x4_t *)(v13 + 160);
  *(double *)v75.i64 = sub_1B186B9C0((__n128 *)a4);
  v76 = (float32x4_t)xmmword_1B2244E20;
  v77 = (uint32x4_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x3727C5ACu), vabdq_f32(v239, v75));
  v77.i32[3] = v77.i32[2];
  if ((vminvq_u32(v77) & 0x80000000) == 0)
  {
    v78 = vsubq_f32(v239, v75);
    v79 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, v222.f32[0]), v224, *(float32x2_t *)v222.f32, 1), v226, v222, 2), v230, v222, 3);
    v80 = (int32x4_t)vmulq_f32(v79, v79);
    v80.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v80, 2), vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1))).u32[0];
    v81 = vrsqrte_f32((float32x2_t)v80.u32[0]);
    v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
    v231 = vmulq_n_f32(v79, vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).f32[0]);
    v83 = (int32x4_t)vmulq_f32(v78, v78);
    v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
    *(float32x2_t *)v80.i8 = vrsqrte_f32((float32x2_t)v83.u32[0]);
    *(float32x2_t *)v80.i8 = vmul_f32(*(float32x2_t *)v80.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8)));
    v243 = vmulq_n_f32(v78, vmul_f32(*(float32x2_t *)v80.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8))).f32[0]);
    *(double *)v84.i64 = sub_1B19C0644(*(float32x4_t *)(v13 + 192), v243);
    v240 = v84;
    v85 = vmulq_f32(v84, (float32x4_t)xmmword_1B2244F80);
    v86 = (int32x4_t)vnegq_f32(v85);
    v87 = (int8x16_t)vtrn2q_s32((int32x4_t)v85, vtrn1q_s32((int32x4_t)v85, v86));
    v88 = (float32x4_t)vextq_s8((int8x16_t)v85, (int8x16_t)v86, 8uLL);
    v89 = (float32x4_t)vrev64q_s32((int32x4_t)v85);
    v89.i32[0] = v86.i32[1];
    v89.i32[3] = v86.i32[2];
    v90 = vmlaq_f32(vmlaq_f32(v88, (float32x4_t)0, (float32x4_t)vextq_s8(v87, v87, 8uLL)), (float32x4_t)0, v89);
    v91 = (int32x4_t)vnegq_f32(v90);
    v92 = (int8x16_t)vtrn2q_s32((int32x4_t)v90, vtrn1q_s32((int32x4_t)v90, v91));
    v93 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v90, (int8x16_t)v91, 8uLL), *(float32x2_t *)v84.f32, 1), (float32x4_t)vextq_s8(v92, v92, 8uLL), v84.f32[0]);
    v94 = (float32x4_t)vrev64q_s32((int32x4_t)v90);
    v94.i32[0] = v91.i32[1];
    v94.i32[3] = v91.i32[2];
    v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v90, v84, 3), v94, v84, 2), v93);
    v96 = vmulq_f32(v95, v243);
    v97 = vmlsq_lane_f32(v95, v243, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))), 0);
    v98 = vmulq_f32(v97, v97);
    v98.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).u64[0];
    v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 0);
    v99.i32[3] = 0;
    v100 = vrsqrteq_f32(v99);
    v101 = vmulq_f32(v100, vrsqrtsq_f32(v99, vmulq_f32(v100, v100)));
    v102 = vmulq_f32(v101, vrsqrtsq_f32(v99, vmulq_f32(v101, v101)));
    v103 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v98.f32[0] != 0.0)), 0x1FuLL));
    v103.i32[3] = 0;
    v104 = vmulq_f32(v231, v243);
    v105 = vmlsq_lane_f32(v231, v243, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))), 0);
    v106 = vmulq_f32(v105, v105);
    v106.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).u64[0];
    v107 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 0);
    v108 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v103), (int8x16_t)vmulq_f32(v102, v97), (int8x16_t)v97);
    v107.i32[3] = 0;
    v109 = vrsqrteq_f32(v107);
    v110 = vmulq_f32(v109, vrsqrtsq_f32(v107, vmulq_f32(v109, v109)));
    v111 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v106.f32[0] != 0.0)), 0x1FuLL));
    v111.i32[3] = 0;
    v112 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v111), (int8x16_t)vmulq_f32(vmulq_f32(v110, vrsqrtsq_f32(v107, vmulq_f32(v110, v110))), v105), (int8x16_t)v105);
    v113 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL), vnegq_f32(v108)), v112, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), (int8x16_t)v108, 0xCuLL));
    v232 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v113, v113), (int8x16_t)v113, 0xCuLL);
    v114 = vmulq_f32(v112, v108);
    v115 = acosf(fminf(fmaxf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).f32[0], -1.0), 1.0));
    v116 = vmulq_f32(v243, v232);
    v117 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1))).f32[0] <= 0.0;
    v118 = vmulq_f32(v243, v243);
    v119 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 2), vaddq_f32(v118, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 1))).u64[0];
    v120 = (float32x4_t)vdupq_lane_s32(v119, 0);
    if (v117)
      v115 = -v115;
    v120.i32[3] = 0;
    v121 = vrsqrteq_f32(v120);
    v122 = vmulq_f32(v121, vrsqrtsq_f32(v120, vmulq_f32(v121, v121)));
    v123 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(*(float *)v119.i32 != 0.0)), 0x1FuLL));
    v123.i32[3] = 0;
    v244 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v123), (int8x16_t)vmulq_f32(vmulq_f32(v122, vrsqrtsq_f32(v120, vmulq_f32(v122, v122))), v243), (int8x16_t)v243);
    v125 = __sincosf_stret(v115 * 0.5);
    _S1 = v125.__cosval;
    _Q6 = (int32x4_t)v240;
    _Q0 = vmulq_n_f32(v244, v125.__sinval);
    v128 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v240, 0xCuLL), vnegq_f32(_Q0)), v240, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    v76 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(_Q0, v240, 3), v240, v125.__cosval), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v128, v128), (int8x16_t)v128, 0xCuLL));
    __asm { FMLA            S0, S1, V6.S[3] }
    v76.i32[3] = _Q0.i32[0];
    goto LABEL_24;
  }
LABEL_25:
  if (a1 != 1.0)
  {
    v246 = v76;
    *(double *)v159.i64 = sub_1B186BB70(a4, v68, v69, v70, v71, v72, v73, v74);
    v160 = v159;
    v161 = (int8x16_t)vmulq_f32(v159, v246);
    v241 = v160;
    v162 = 1.0;
    v163 = 1.0 - a1;
    if (vaddv_f32(vadd_f32(*(float32x2_t *)v161.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL))) >= 0.0)
    {
      v183 = vsubq_f32(v160, v246);
      v184 = (int8x16_t)vmulq_f32(v183, v183);
      v185 = vaddq_f32(v160, v246);
      v186 = (int8x16_t)vmulq_f32(v185, v185);
      v187 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v184.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v186.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL)))));
      v188 = v187 + v187;
      _ZF = (float)(v187 + v187) == 0.0;
      v189 = 1.0;
      if (!_ZF)
        v189 = sinf(v188) / v188;
      v190 = v189;
      v191 = vrecpe_f32((float32x2_t)LODWORD(v189));
      v192 = (int32x2_t)vmul_f32(v191, vrecps_f32((float32x2_t)LODWORD(v190), v191));
      LODWORD(v193) = vmul_f32((float32x2_t)v192, vrecps_f32((float32x2_t)LODWORD(v190), (float32x2_t)v192)).u32[0];
      if ((float)(v163 * v188) != 0.0)
      {
        v235 = v193;
        *(float *)v192.i32 = sinf(v163 * v188);
        v193 = v235;
        v162 = *(float *)v192.i32 / (float)(v163 * v188);
      }
      *(float *)v192.i32 = v163 * (float)(v193 * v162);
      v194 = (float32x4_t)vdupq_lane_s32(v192, 0);
      v195 = v188 * a1;
      v196 = 1.0;
      if (v195 != 0.0)
      {
        v228 = v194;
        v236 = v193;
        v197 = sinf(v195);
        v194 = v228;
        v193 = v236;
        v196 = v197 / v195;
      }
      v182 = vmlaq_f32(vmulq_n_f32(v246, (float)(v193 * v196) * a1), v241, v194);
    }
    else
    {
      v164 = vaddq_f32(v160, v246);
      v165 = (int8x16_t)vmulq_f32(v164, v164);
      v166 = vsubq_f32(v160, v246);
      v167 = (int8x16_t)vmulq_f32(v166, v166);
      v168 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v165.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v167.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL)))));
      v169 = v168 + v168;
      _ZF = (float)(v168 + v168) == 0.0;
      v170 = 1.0;
      if (!_ZF)
        v170 = sinf(v169) / v169;
      v171 = v170;
      v172 = vrecpe_f32((float32x2_t)LODWORD(v170));
      v173 = vmul_f32(v172, vrecps_f32((float32x2_t)LODWORD(v171), v172));
      LODWORD(v174) = vmul_f32(v173, vrecps_f32((float32x2_t)LODWORD(v171), v173)).u32[0];
      if ((float)(v163 * v169) != 0.0)
      {
        v233 = v174;
        v175 = sinf(v163 * v169);
        v174 = v233;
        v162 = v175 / (float)(v163 * v169);
      }
      v176.i32[1] = v246.i32[1];
      v177 = vnegq_f32(v246);
      *(float *)v176.i32 = v163 * (float)(v174 * v162);
      v178 = (float32x4_t)vdupq_lane_s32(v176, 0);
      v179 = v169 * a1;
      v180 = 1.0;
      if (v179 != 0.0)
      {
        v227 = v178;
        v234 = v174;
        v247 = v177;
        v181 = sinf(v179);
        v178 = v227;
        v174 = v234;
        v177 = v247;
        v180 = v181 / v179;
      }
      v182 = vmlaq_f32(vmulq_n_f32(v177, (float)(v174 * v180) * a1), v241, v178);
    }
    v198 = (int8x16_t)vmulq_f32(v182, v182);
    *(float32x2_t *)v198.i8 = vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL));
    v199 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v198.i8, 1)), 0);
    v200 = vrsqrteq_f32(v199);
    v201 = vmulq_f32(v200, vrsqrtsq_f32(v199, vmulq_f32(v200, v200)));
    __asm { FMOV            V3.4S, #1.0 }
    v249 = vmulq_f32(v182, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v199), _Q3, (int8x16_t)vmulq_f32(v201, vrsqrtsq_f32(v199, vmulq_f32(v201, v201)))));
  }
  v203 = (const void *)sub_1B19C45CC(a5, v68, v69, v70, v71, v72, v73, v74);
  v211 = (void *)sub_1B19C4614(a5, v204, v205, v206, v207, v208, v209, v210);
  v219 = sub_1B179E250(9, v212, v213, v214, v215, v216, v217, v218);
  sub_1B17C58FC(v203, v211, &v249, v219, 3, 0, v220, v221);
  return 1;
}

const __CFString *sub_1B19BB524()
{
  return CFSTR("transform");
}

void sub_1B19BB534(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  *(_BYTE *)(a1 + 144) = a2;
}

__n128 sub_1B19BB580(__n128 *a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = result;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    result = v10;
  }
  result.n128_u32[3] = a1[11].n128_u32[3];
  a1[11] = result;
  return result;
}

__n128 sub_1B19BB5D8(__n128 *a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = result;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    result = v10;
  }
  result.n128_u32[3] = a1[10].n128_u32[3];
  a1[10] = result;
  return result;
}

void sub_1B19BB630(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[12] = a2;
}

void sub_1B19BB680()
{
  if (!qword_1ED4CEBC8)
    qword_1ED4CEBC8 = sub_1B179CB60(&qword_1ED4CEBC8);
}

uint64_t sub_1B19BB6C0()
{
  uint64_t result;

  if (qword_1ED4CEBC0 != -1)
    dispatch_once(&qword_1ED4CEBC0, &unk_1E63D1BF0);
  result = sub_1B179CB90(qword_1ED4CEBC8, 0x80uLL);
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  *(_QWORD *)(result + 88) = sub_1B19BB73C;
  *(_QWORD *)(result + 96) = sub_1B19BB828;
  *(_BYTE *)(result + 140) = 1;
  *(_DWORD *)(result + 136) = 7;
  return result;
}

BOOL sub_1B19BB73C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v47[4];

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  v18 = sub_1B1814768(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v18)
  {
    v19 = *(_QWORD *)(a2 + 16);
    if (*(_DWORD *)(v19 + 136))
    {
      memset(v47, 0, sizeof(v47));
      sub_1B19BB838(a1, v19, a3, v47, v14, v15, v16, v17, a9);
      v27 = (const void *)sub_1B19C45CC(a4, v20, v21, v22, v23, v24, v25, v26);
      v35 = (void *)sub_1B19C4614(a4, v28, v29, v30, v31, v32, v33, v34);
      v43 = sub_1B179E250(10, v36, v37, v38, v39, v40, v41, v42);
      sub_1B17C58FC(v27, v35, v47, v43, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v44, v45);
    }
  }
  return v18 != 0;
}

const __CFString *sub_1B19BB828()
{
  return CFSTR("transform");
}

BOOL sub_1B19BB838(uint64_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  int8x16_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  int32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  int32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int32x4_t v80;
  float32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  __int128 v84;
  int8x16_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  int32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  int32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  int32x4_t v109;
  float32x4_t v110;
  __int128 v111;
  int32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  int32x4_t v116;
  float32x2_t v117;
  float32x2_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  int32x4_t v122;
  float32x2_t v123;
  float32x2_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  int32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int32x4_t v142;
  float32x4_t v143;
  __int128 v144;
  float32x4_t v145;
  float32x4_t v146;
  int32x4_t v147;
  float32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int8x16_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int32x4_t v155;
  float32x2_t v156;
  float32x2_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int32x4_t v161;
  float32x2_t v162;
  float32x2_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int32x4_t v168;
  float32x2_t v169;
  float32x2_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  int32x4_t v174;
  float32x2_t v175;
  float32x2_t v176;
  float32x4_t v177;
  int v178;
  int v179;
  int8x16_t v180;
  float v181;
  float v182;
  float32x4_t v183;
  int8x16_t v184;
  float32x4_t v185;
  int8x16_t v186;
  float v187;
  float v188;
  float v190;
  float v191;
  float32x2_t v192;
  float32x2_t v193;
  float v194;
  float v195;
  int32x2_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float v199;
  float v200;
  float v201;
  float v202;
  float32x4_t v203;
  float v204;
  float32x4_t v205;
  int8x16_t v206;
  float32x4_t v207;
  int8x16_t v208;
  float v209;
  float v210;
  float v211;
  float v212;
  float32x2_t v213;
  int32x2_t v214;
  float v215;
  float32x4_t v216;
  float v217;
  float v218;
  float v219;
  int8x16_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  simd_float4x4 v249;
  uint64_t v250;
  int32x4_t v251;
  float32x4_t v252;
  int32x4_t v253;
  int32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  int32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  int32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  int8x16_t v266;
  int8x16_t v267;
  int32x4_t v268;
  int32x4_t v269;
  int8x16_t v270;
  float32x4_t v271;
  int32x4_t v272;
  float v273;
  float32x4_t v274;
  float v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  int8x16_t v281;
  int8x16_t v282;
  float v283;
  float32x2_t v284;
  float32x2_t v285;
  float32x2_t v286;
  uint64_t v287;
  int32x2_t v288;
  int8x16_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x2_t v301;
  float32x2_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  int8x16_t v321;
  __n128 v323;
  float32x4_t v324;
  float32x4_t v325[4];
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  __int128 v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  simd_float4x4 v334;

  v19 = sub_1B1814768(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v19)
  {
    *(double *)v20.i64 = sub_1B186BC70(a3, v12, v13, v14, v15, v16, v17, v18);
    v311 = v21;
    v317 = v20;
    v307 = v22;
    v321 = v23;
    v31 = (_OWORD *)sub_1B1869AC8(a3, v24, v25, v26, v27, v28, v29, v30);
    if (*(_BYTE *)(a2 + 140))
    {
      v40 = vmulq_f32(v317, v317);
      v41 = vmulq_f32(v311, v311);
      v39.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
      v40.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
      v42 = vmulq_f32(v307, v307);
      v39.i32[1] = v40.i32[0];
      v39.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]);
      v303 = v39;
    }
    else
    {
      v303 = 0u;
    }
    v305 = *((float32x4_t *)v31 + 1);
    v306 = *(float32x4_t *)v31;
    v304 = *((float32x4_t *)v31 + 2);
    v323 = *((__n128 *)v31 + 3);
    v43 = (float32x4_t *)sub_1B1869AC8((uint64_t)v19, v32, v33, v34, v35, v36, v37, v38);
    v52 = *v43;
    v51 = v43[1];
    v53 = v43[2];
    v54 = v311;
    v55 = v317;
    v56 = v307;
    switch(*(_DWORD *)(a2 + 136))
    {
      case 0:
        goto LABEL_57;
      case 1:
        v57 = vmulq_f32(v53, (float32x4_t)0);
        v58 = vmlaq_f32(vaddq_f32(v51, v57), (float32x4_t)0, v52);
        v59 = vmulq_f32(v58, v58);
        v59.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u64[0];
        v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 0);
        v60.i32[3] = 0;
        v61 = vrsqrteq_f32(v60);
        v62 = vmulq_f32(v61, vrsqrtsq_f32(v60, vmulq_f32(v61, v61)));
        v63 = (int8x16_t)vmulq_f32(v58, vmulq_f32(v62, vrsqrtsq_f32(v60, vmulq_f32(v62, v62))));
        v64 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v59.f32[0] != 0.0)), 0x1FuLL));
        v64.i32[3] = 0;
        v65 = vaddq_f32(v52, vmlaq_f32(v57, (float32x4_t)0, v51));
        v66 = vmulq_f32(v65, v65);
        v66.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u64[0];
        v67 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 0);
        v67.i32[3] = 0;
        v68 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v64), v63, (int8x16_t)v58);
        v69 = vrsqrteq_f32(v67);
        v70 = vmulq_f32(v69, vrsqrtsq_f32(v67, vmulq_f32(v69, v69)));
        v71 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v66.f32[0] != 0.0)), 0x1FuLL));
        v71.i32[3] = 0;
        v72 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v71), (int8x16_t)vmulq_f32(v65, vmulq_f32(v70, vrsqrtsq_f32(v67, vmulq_f32(v70, v70)))), (int8x16_t)v65);
        v73 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vnegq_f32(v72)), v68, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL));
        v74 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL);
        v75 = (int32x4_t)vmulq_f32(v73, v73);
        v75.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), *(float32x2_t *)v75.i8)).u32[0];
        *(float32x2_t *)v68.f32 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        *(float32x2_t *)v68.f32 = vmul_f32(*(float32x2_t *)v68.f32, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32)));
        v76 = vmulq_n_f32(v74, vmul_f32(*(float32x2_t *)v68.f32, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32))).f32[0]);
        v77 = (int32x4_t)vmulq_f32(v76, (float32x4_t)xmmword_1B2244F20);
        v78 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v77, v77), (int8x16_t)v77, 0xCuLL), (float32x4_t)xmmword_1B2244DD0, v76);
        v79 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL);
        v80 = (int32x4_t)vmulq_f32(v78, v78);
        v80.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v80, 2), *(float32x2_t *)v80.i8)).u32[0];
        *(float32x2_t *)v63.i8 = vrsqrte_f32((float32x2_t)v80.u32[0]);
        *(float32x2_t *)v63.i8 = vmul_f32(*(float32x2_t *)v63.i8, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8)));
        v81 = vmulq_n_f32(v79, vmul_f32(*(float32x2_t *)v63.i8, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8))).f32[0]);
        v82 = (int32x4_t)vmulq_f32(v81, (float32x4_t)xmmword_1B2244F20);
        v83 = (int32x4_t)vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v82, v82), (int8x16_t)v82, 0xCuLL), (float32x4_t)xmmword_1B2244DD0, v81);
        v84 = xmmword_1B2244DB0;
        HIDWORD(v84) = HIDWORD(*(unsigned __int128 *)v43);
        v81.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        v85 = vextq_s8((int8x16_t)vuzp1q_s32(v83, v83), (int8x16_t)v83, 0xCuLL);
        v85.i32[3] = HIDWORD(*(_OWORD *)&v43[2]);
        v52 = (float32x4_t)v84;
        v51 = v81;
        goto LABEL_8;
      case 2:
        v86 = vmulq_f32(v53, (float32x4_t)0);
        v87 = vaddq_f32(v51, v86);
        v88 = vaddq_f32(v52, vmlaq_f32(v86, (float32x4_t)0, v51));
        v89 = vmulq_f32(v88, v88);
        v89.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).u64[0];
        v90 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 0);
        v90.i32[3] = 0;
        v91 = vrsqrteq_f32(v90);
        v92 = vmulq_f32(v91, vrsqrtsq_f32(v90, vmulq_f32(v91, v91)));
        v93 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v89.f32[0] != 0.0)), 0x1FuLL));
        v93.i32[3] = 0;
        v94 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v93), (int8x16_t)vmulq_f32(v88, vmulq_f32(v92, vrsqrtsq_f32(v90, vmulq_f32(v92, v92)))), (int8x16_t)v88);
        v95 = vmlaq_f32(v87, (float32x4_t)0, v52);
        v96 = vmulq_f32(v95, v95);
        v96.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).u64[0];
        v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 0);
        v97.i32[3] = 0;
        v98 = vrsqrteq_f32(v97);
        v99 = vmulq_f32(v98, vrsqrtsq_f32(v97, vmulq_f32(v98, v98)));
        v100 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v96.f32[0] != 0.0)), 0x1FuLL));
        v100.i32[3] = 0;
        v101 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v100), (int8x16_t)vmulq_f32(v95, vmulq_f32(v99, vrsqrtsq_f32(v97, vmulq_f32(v99, v99)))), (int8x16_t)v95);
        v102 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL), vnegq_f32(v94)), v101, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL));
        v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), (int8x16_t)v102, 0xCuLL);
        v104 = (int32x4_t)vmulq_f32(v102, v102);
        v104.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), *(float32x2_t *)v104.i8)).u32[0];
        *(float32x2_t *)v95.f32 = vrsqrte_f32((float32x2_t)v104.u32[0]);
        *(float32x2_t *)v95.f32 = vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32)));
        v105 = vmulq_n_f32(v103, vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32))).f32[0]);
        v106 = (int32x4_t)vmulq_f32(v105, (float32x4_t)xmmword_1B2244EF0);
        v107 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v106, v106), (int8x16_t)v106, 0xCuLL), (float32x4_t)xmmword_1B2244D90, v105);
        v108 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), (int8x16_t)v107, 0xCuLL);
        v109 = (int32x4_t)vmulq_f32(v107, v107);
        v109.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v109, 2), *(float32x2_t *)v109.i8)).u32[0];
        *(float32x2_t *)v95.f32 = vrsqrte_f32((float32x2_t)v109.u32[0]);
        *(float32x2_t *)v95.f32 = vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32)));
        v110 = vmulq_n_f32(v108, vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32))).f32[0]);
        v111 = xmmword_1B2244DD0;
        v112 = (int32x4_t)vmlaq_f32(vmulq_f32(v110, (float32x4_t)xmmword_1B2244F20), (float32x4_t)xmmword_1B2244DD0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL));
        v110.i32[3] = HIDWORD(*(unsigned __int128 *)v43);
        HIDWORD(v111) = HIDWORD(*(_OWORD *)&v43[1]);
        v85 = vextq_s8((int8x16_t)vuzp1q_s32(v112, v112), (int8x16_t)v112, 0xCuLL);
        v85.i32[3] = HIDWORD(*(_OWORD *)&v43[2]);
        v52 = v110;
        v51 = (float32x4_t)v111;
LABEL_8:
        v53 = (float32x4_t)v85;
        goto LABEL_13;
      case 3:
        v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        v114 = vmlaq_f32(vmulq_f32(v113, (float32x4_t)xmmword_1B2244F00), (float32x4_t)xmmword_1B2244D90, v53);
        v115 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), (int8x16_t)v114, 0xCuLL);
        v116 = (int32x4_t)vmulq_f32(v114, v114);
        v116.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v116, 2), *(float32x2_t *)v116.i8)).u32[0];
        v117 = vrsqrte_f32((float32x2_t)v116.u32[0]);
        v118 = vmul_f32(v117, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v117, v117)));
        v119 = vmulq_n_f32(v115, vmul_f32(v118, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v118, v118))).f32[0]);
        v120 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v119, (int32x4_t)v119), (int8x16_t)v119, 0xCuLL), vnegq_f32(v53)), v119, v113);
        v121 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v120, (int32x4_t)v120), (int8x16_t)v120, 0xCuLL);
        v122 = (int32x4_t)vmulq_f32(v120, v120);
        v122.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v122.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v122, 2), *(float32x2_t *)v122.i8)).u32[0];
        v123 = vrsqrte_f32((float32x2_t)v122.u32[0]);
        v124 = vmul_f32(v123, vrsqrts_f32((float32x2_t)v122.u32[0], vmul_f32(v123, v123)));
        v125 = vmulq_n_f32(v121, vmul_f32(v124, vrsqrts_f32((float32x2_t)v122.u32[0], vmul_f32(v124, v124))).f32[0]);
        v119.i32[3] = HIDWORD(*(unsigned __int128 *)v43);
        v125.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        v52 = v119;
        v51 = v125;
        goto LABEL_13;
      case 4:
        v126 = vaddq_f32(v52, vmlaq_f32(vmulq_f32(v53, (float32x4_t)0), (float32x4_t)0, v51));
        v127 = vmulq_f32(v126, v126);
        v127.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).u64[0];
        v128 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 0);
        v128.i32[3] = 0;
        v129 = vrsqrteq_f32(v128);
        v130 = vmulq_f32(v129, vrsqrtsq_f32(v128, vmulq_f32(v129, v129)));
        v131 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v127.f32[0] != 0.0)), 0x1FuLL));
        v131.i32[3] = 0;
        v132 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v131), (int8x16_t)vmulq_f32(v126, vmulq_f32(v130, vrsqrtsq_f32(v128, vmulq_f32(v130, v130)))), (int8x16_t)v126);
        v133 = vmlaq_f32(vmlaq_f32(v53, (float32x4_t)0, v51), (float32x4_t)0, v52);
        v134 = vmulq_f32(v133, v133);
        v134.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).u64[0];
        v135 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 0);
        v135.i32[3] = 0;
        v136 = vrsqrteq_f32(v135);
        v137 = vmulq_f32(v136, vrsqrtsq_f32(v135, vmulq_f32(v136, v136)));
        v138 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v134.f32[0] != 0.0)), 0x1FuLL));
        v138.i32[3] = 0;
        v139 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v138), (int8x16_t)vmulq_f32(v133, vmulq_f32(v137, vrsqrtsq_f32(v135, vmulq_f32(v137, v137)))), (int8x16_t)v133);
        v140 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v139, (int32x4_t)v139), (int8x16_t)v139, 0xCuLL), vnegq_f32(v132)), v139, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v132, (int32x4_t)v132), (int8x16_t)v132, 0xCuLL));
        v141 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v140, (int32x4_t)v140), (int8x16_t)v140, 0xCuLL);
        v142 = (int32x4_t)vmulq_f32(v140, v140);
        v142.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v142.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v142, 2), *(float32x2_t *)v142.i8)).u32[0];
        *(float32x2_t *)v133.f32 = vrsqrte_f32((float32x2_t)v142.u32[0]);
        *(float32x2_t *)v133.f32 = vmul_f32(*(float32x2_t *)v133.f32, vrsqrts_f32((float32x2_t)v142.u32[0], vmul_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32)));
        v143 = vmulq_n_f32(v141, vmul_f32(*(float32x2_t *)v133.f32, vrsqrts_f32((float32x2_t)v142.u32[0], vmul_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32))).f32[0]);
        v144 = xmmword_1B2244D90;
        v145 = vmlaq_f32(vmulq_f32(v143, (float32x4_t)xmmword_1B2244EF0), (float32x4_t)xmmword_1B2244D90, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v143, (int32x4_t)v143), (int8x16_t)v143, 0xCuLL));
        v146 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v145, (int32x4_t)v145), (int8x16_t)v145, 0xCuLL);
        v147 = (int32x4_t)vmulq_f32(v145, v145);
        v147.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v147.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v147, 2), *(float32x2_t *)v147.i8)).u32[0];
        *(float32x2_t *)v135.f32 = vrsqrte_f32((float32x2_t)v147.u32[0]);
        *(float32x2_t *)v135.f32 = vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v147.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32)));
        v148 = vmulq_n_f32(v146, vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v147.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32))).f32[0]);
        v149 = (int32x4_t)vmulq_f32(v148, (float32x4_t)xmmword_1B2244F00);
        v150 = (int32x4_t)vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v149, v149), (int8x16_t)v149, 0xCuLL), (float32x4_t)xmmword_1B2244DB0, v148);
        v151 = vextq_s8((int8x16_t)vuzp1q_s32(v150, v150), (int8x16_t)v150, 0xCuLL);
        v148.i32[3] = HIDWORD(*(unsigned __int128 *)v43);
        v151.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        HIDWORD(v144) = HIDWORD(*(_OWORD *)&v43[2]);
        v52 = v148;
        v51 = (float32x4_t)v151;
        v53 = (float32x4_t)v144;
        goto LABEL_13;
      case 5:
        v152 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        v153 = vmlaq_f32(vmulq_f32(v51, (float32x4_t)xmmword_1B2244EF0), (float32x4_t)xmmword_1B2244D90, v152);
        v154 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), (int8x16_t)v153, 0xCuLL);
        v155 = (int32x4_t)vmulq_f32(v153, v153);
        v155.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v155, 2), *(float32x2_t *)v155.i8)).u32[0];
        v156 = vrsqrte_f32((float32x2_t)v155.u32[0]);
        v157 = vmul_f32(v156, vrsqrts_f32((float32x2_t)v155.u32[0], vmul_f32(v156, v156)));
        v158 = vmulq_n_f32(v154, vmul_f32(v157, vrsqrts_f32((float32x2_t)v155.u32[0], vmul_f32(v157, v157))).f32[0]);
        v159 = vmlaq_f32(vmulq_f32(v152, vnegq_f32(v158)), v51, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v158, (int32x4_t)v158), (int8x16_t)v158, 0xCuLL));
        v160 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v159, (int32x4_t)v159), (int8x16_t)v159, 0xCuLL);
        v161 = (int32x4_t)vmulq_f32(v159, v159);
        v161.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v161, 2), *(float32x2_t *)v161.i8)).u32[0];
        v162 = vrsqrte_f32((float32x2_t)v161.u32[0]);
        v163 = vmul_f32(v162, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(v162, v162)));
        v164 = vmulq_n_f32(v160, vmul_f32(v163, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(v163, v163))).f32[0]);
        v158.i32[3] = HIDWORD(*(unsigned __int128 *)v43);
        v164.i32[3] = HIDWORD(*(_OWORD *)&v43[2]);
        v52 = v158;
        v53 = v164;
        goto LABEL_13;
      case 6:
        v165 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        v166 = vmlaq_f32(vmulq_f32(v165, (float32x4_t)xmmword_1B2244EF0), (float32x4_t)xmmword_1B2244DD0, v53);
        v167 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v166, (int32x4_t)v166), (int8x16_t)v166, 0xCuLL);
        v168 = (int32x4_t)vmulq_f32(v166, v166);
        v168.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v168, 2), *(float32x2_t *)v168.i8)).u32[0];
        v169 = vrsqrte_f32((float32x2_t)v168.u32[0]);
        v170 = vmul_f32(v169, vrsqrts_f32((float32x2_t)v168.u32[0], vmul_f32(v169, v169)));
        v171 = vmulq_n_f32(v167, vmul_f32(v170, vrsqrts_f32((float32x2_t)v168.u32[0], vmul_f32(v170, v170))).f32[0]);
        v172 = vmlaq_f32(vmulq_f32(v165, vnegq_f32(v171)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v171, (int32x4_t)v171), (int8x16_t)v171, 0xCuLL));
        v173 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v172, (int32x4_t)v172), (int8x16_t)v172, 0xCuLL);
        v174 = (int32x4_t)vmulq_f32(v172, v172);
        v174.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v174.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v174, 2), *(float32x2_t *)v174.i8)).u32[0];
        v175 = vrsqrte_f32((float32x2_t)v174.u32[0]);
        v176 = vmul_f32(v175, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v175, v175)));
        v177 = vmulq_n_f32(v173, vmul_f32(v176, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v176, v176))).f32[0]);
        v177.i32[3] = HIDWORD(*(unsigned __int128 *)v43);
        v171.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        v52 = v177;
        v51 = v171;
        goto LABEL_13;
      default:
LABEL_13:
        v308 = v52;
        v312 = v51;
        v318 = v53;
        if (a9 != 1.0)
        {
          v326 = 0uLL;
          v325[0] = 0uLL;
          v333.i32[2] = 0;
          v333.i64[0] = 0;
          v332.i32[2] = 0;
          v332.i64[0] = 0;
          v331.i32[2] = 0;
          v331.i64[0] = 0;
          v330.i32[2] = 0;
          v330.i64[0] = 0;
          v178 = sub_1B1802048(&v326, (__n128 *)&v333, &v331, v306, v305, v304, v323);
          v179 = sub_1B1802048(v325, (__n128 *)&v332, &v330, v308, v312, v318, v323);
          if (v178 && v179)
          {
            v180 = (int8x16_t)vmulq_f32(v326, v325[0]);
            v324 = v326;
            v319 = v325[0];
            v181 = 1.0;
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v180.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL))) >= 0.0)
            {
              v204 = 1.0 - a9;
              v205 = vsubq_f32(v326, v325[0]);
              v206 = (int8x16_t)vmulq_f32(v205, v205);
              v207 = vaddq_f32(v326, v325[0]);
              v208 = (int8x16_t)vmulq_f32(v207, v207);
              v209 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v206.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v206, v206, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v208.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL)))));
              v210 = v209 + v209;
              _ZF = (float)(v209 + v209) == 0.0;
              v211 = 1.0;
              if (!_ZF)
                v211 = sinf(v210) / v210;
              v212 = v211;
              v213 = vrecpe_f32((float32x2_t)LODWORD(v211));
              v214 = (int32x2_t)vmul_f32(v213, vrecps_f32((float32x2_t)LODWORD(v212), v213));
              LODWORD(v215) = vmul_f32((float32x2_t)v214, vrecps_f32((float32x2_t)LODWORD(v212), (float32x2_t)v214)).u32[0];
              if ((float)(v204 * v210) != 0.0)
              {
                v315 = v215;
                *(float *)v214.i32 = sinf(v204 * v210);
                v215 = v315;
                v181 = *(float *)v214.i32 / (float)(v204 * v210);
              }
              *(float *)v214.i32 = v204 * (float)(v215 * v181);
              v216 = (float32x4_t)vdupq_lane_s32(v214, 0);
              v199 = a9;
              v217 = v210 * a9;
              v218 = 1.0;
              if (v217 != 0.0)
              {
                v310 = v216;
                v316 = v215;
                v219 = sinf(v217);
                v216 = v310;
                v215 = v316;
                v199 = a9;
                v218 = v219 / v217;
              }
              v203 = vmlaq_f32(vmulq_n_f32(v319, (float)(v215 * v218) * v199), v324, v216);
            }
            else
            {
              v182 = 1.0 - a9;
              v183 = vaddq_f32(v326, v325[0]);
              v184 = (int8x16_t)vmulq_f32(v183, v183);
              v185 = vsubq_f32(v326, v325[0]);
              v186 = (int8x16_t)vmulq_f32(v185, v185);
              v187 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v184.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v186.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL)))));
              v188 = v187 + v187;
              _ZF = (float)(v187 + v187) == 0.0;
              v190 = 1.0;
              if (!_ZF)
                v190 = sinf(v188) / v188;
              v191 = v190;
              v192 = vrecpe_f32((float32x2_t)LODWORD(v190));
              v193 = vmul_f32(v192, vrecps_f32((float32x2_t)LODWORD(v191), v192));
              LODWORD(v194) = vmul_f32(v193, vrecps_f32((float32x2_t)LODWORD(v191), v193)).u32[0];
              if ((float)(v182 * v188) != 0.0)
              {
                v313 = v194;
                v195 = sinf(v182 * v188);
                v194 = v313;
                v181 = v195 / (float)(v182 * v188);
              }
              v196.i32[1] = v319.i32[1];
              v197 = vnegq_f32(v319);
              *(float *)v196.i32 = v182 * (float)(v194 * v181);
              v198 = (float32x4_t)vdupq_lane_s32(v196, 0);
              v199 = a9;
              v200 = v188 * a9;
              v201 = 1.0;
              if (v200 != 0.0)
              {
                v314 = v194;
                v320 = v197;
                v309 = v198;
                v202 = sinf(v200);
                v198 = v309;
                v194 = v314;
                v197 = v320;
                v199 = a9;
                v201 = v202 / v200;
              }
              v203 = vmlaq_f32(vmulq_n_f32(v197, (float)(v194 * v201) * v199), v324, v198);
            }
            v220 = (int8x16_t)vmulq_f32(v203, v203);
            *(float32x2_t *)v220.i8 = vadd_f32(*(float32x2_t *)v220.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL));
            v221 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v220.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v220.i8, 1)), 0);
            v222 = vrsqrteq_f32(v221);
            v223 = vmulq_f32(v222, vrsqrtsq_f32(v221, vmulq_f32(v222, v222)));
            __asm { FMOV            V3.4S, #1.0 }
            v227 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v221), _Q3, (int8x16_t)vmulq_f32(v223, vrsqrtsq_f32(v221, vmulq_f32(v223, v223))));
            v228 = vmlaq_n_f32(v333, vsubq_f32(v332, v333), v199);
            v229 = vmlaq_n_f32(v331, vsubq_f32(v330, v331), v199);
            v228.i32[3] = 1.0;
            v323 = (__n128)v228;
            v230 = vabsq_f32(v229);
            v230.i32[3] = 0;
            v231 = vmulq_f32(v203, v227);
            v232 = vmaxnmq_f32(v230, (float32x4_t)xmmword_1B2245780);
            v230.i64[0] = 0x8000000080000000;
            v230.i64[1] = 0x8000000080000000;
            v233 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v229, (int8x16_t)v230), (int8x16_t)(*(_OWORD *)&v232 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
            v234 = vmulq_f32(v231, v231);
            v235 = vmulq_laneq_f32(v231, v231, 3);
            v236 = vmulq_lane_f32(v231, *(float32x2_t *)v231.f32, 1).f32[0];
            v237 = vaddq_f32(v233, v233);
            v234.f32[0] = 0.5 - v234.f32[0];
            *(float32x2_t *)v231.f32 = vmul_laneq_f32(*(float32x2_t *)v231.f32, v231, 2);
            v238.i32[3] = 0;
            v238.f32[0] = (float)(0.5 - v234.f32[1]) - v234.f32[2];
            v238.f32[1] = v236 + v235.f32[2];
            v239.i32[3] = 0;
            v238.f32[2] = v231.f32[0] - v235.f32[1];
            v239.f32[0] = v236 - v235.f32[2];
            v239.f32[1] = v234.f32[0] - v234.f32[2];
            v239.f32[2] = v231.f32[1] + v235.f32[0];
            v305 = vmulq_lane_f32(v239, *(float32x2_t *)v237.f32, 1);
            v306 = vmulq_n_f32(v238, v237.f32[0]);
            *(int32x2_t *)v235.f32 = vrev64_s32(*(int32x2_t *)v235.f32);
            v240.i32[0] = vadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v235.f32).u32[0];
            v240.i32[1] = vsub_f32(*(float32x2_t *)&v231, *(float32x2_t *)&v235).i32[1];
            v240.f32[2] = v234.f32[0] - v234.f32[1];
            v240.i32[3] = 0;
            v304 = vmulq_laneq_f32(v240, v237, 2);
          }
          v308 = v306;
          v312 = v305;
          v318 = v304;
        }
        v241 = sub_1B186B574(a3, v44, v45, v46, v47, v48, v49, v50);
        if (v241)
        {
          v249 = *(simd_float4x4 *)sub_1B1869AC8(v241, v242, v243, v244, v245, v246, v247, v248);
        }
        else
        {
          v249.columns[0] = (simd_float4)xmmword_1B2244DB0;
          v249.columns[1] = (simd_float4)xmmword_1B2244DD0;
          v249.columns[2] = (simd_float4)xmmword_1B2244D90;
          v249.columns[3] = (simd_float4)xmmword_1B2244E20;
        }
        v334 = __invert_f4(v249);
        v250 = 0;
        v325[0] = v308;
        v325[1] = v312;
        v325[2] = v318;
        v325[3] = (float32x4_t)v323;
        v326 = 0u;
        v327 = 0u;
        v328 = 0u;
        v329 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v326 + v250 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v334.columns[0], COERCE_FLOAT(*(_OWORD *)&v325[v250])), (float32x4_t)v334.columns[1], *(float32x2_t *)v325[v250].f32, 1), (float32x4_t)v334.columns[2], v325[v250], 2), (float32x4_t)v334.columns[3], v325[v250], 3);
          ++v250;
        }
        while (v250 != 4);
        v55 = v326;
        v54 = v327;
        v56 = v328;
        if (!*(_BYTE *)(a2 + 140))
          goto LABEL_57;
        v251 = (int32x4_t)vmulq_f32(v326, v326);
        v252 = vmulq_f32(v327, v327);
        v253 = (int32x4_t)vmulq_f32(v328, v328);
        v254 = vzip2q_s32(v251, v253);
        v255 = (float32x4_t)vzip1q_s32(vzip1q_s32(v251, v253), (int32x4_t)v252);
        v256 = (float32x4_t)vtrn2q_s32(v251, (int32x4_t)v252);
        v256.i32[2] = v253.i32[1];
        v257 = vaddq_f32((float32x4_t)vzip1q_s32(v254, vdupq_laneq_s32((int32x4_t)v252, 2)), vaddq_f32(v255, v256));
        v252.i64[0] = 0x80000000800000;
        v252.i64[1] = 0x80000000800000;
        v258 = vcgeq_f32(v252, v257);
        v257.i32[3] = 0;
        v259 = vrsqrteq_f32(v257);
        v260 = vmulq_f32(v259, vrsqrtsq_f32(v257, vmulq_f32(v259, v259)));
        v261 = v258;
        v261.i32[3] = 0;
        v262 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v261), (int8x16_t)v257, (int8x16_t)vmulq_f32(v260, vrsqrtsq_f32(v257, vmulq_f32(v260, v260))));
        v263 = vmulq_n_f32(v326, v262.f32[0]);
        v264 = vmulq_lane_f32(v327, *(float32x2_t *)v262.f32, 1);
        v265 = vmulq_laneq_f32(v328, v262, 2);
        v266 = (int8x16_t)vuzp1q_s32((int32x4_t)v265, (int32x4_t)v265);
        v267 = (int8x16_t)vuzp1q_s32((int32x4_t)v264, (int32x4_t)v264);
        v268 = (int32x4_t)v263;
        if (v258.i32[0])
        {
          v269 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v266, (int8x16_t)v265, 0xCuLL), vnegq_f32(v264)), v265, (float32x4_t)vextq_s8(v267, (int8x16_t)v264, 0xCuLL));
          v268 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v269, v269), (int8x16_t)v269, 0xCuLL);
        }
        v270 = (int8x16_t)vuzp1q_s32((int32x4_t)v263, (int32x4_t)v263);
        v271 = v264;
        if (v258.i32[1])
        {
          v272 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v270, (int8x16_t)v263, 0xCuLL), vnegq_f32(v265)), v263, (float32x4_t)vextq_s8(v266, (int8x16_t)v265, 0xCuLL));
          v271 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v272, v272), (int8x16_t)v272, 0xCuLL);
        }
        if (v258.i32[2])
        {
          v258 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v267, (int8x16_t)v264, 0xCuLL), vnegq_f32(v263)), v264, (float32x4_t)vextq_s8(v270, (int8x16_t)v263, 0xCuLL));
          v265 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v258, v258), (int8x16_t)v258, 0xCuLL);
        }
        v273 = (float)(*(float *)v268.i32 + v271.f32[1]) + v265.f32[2];
        if (v273 > 0.0)
        {
          v274 = (float32x4_t)vzip2q_s32((int32x4_t)v271, vuzp1q_s32((int32x4_t)v271, (int32x4_t)v265));
          v274.i32[2] = v268.i32[1];
          v275 = sqrtf(v273 + 1.0);
          v276 = (float32x4_t)vtrn2q_s32((int32x4_t)v265, vzip2q_s32((int32x4_t)v265, v268));
          v276.i32[2] = v271.i32[0];
          v278 = vsubq_f32(v274, v276);
          v274.f32[3] = v275;
          v276.f32[3] = v275;
          v277 = vmulq_f32(v274, v276);
          v278.i32[3] = v277.i32[3];
LABEL_47:
          v277.f32[0] = 0.5 / v275;
          v279 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v277.f32, 0);
          goto LABEL_56;
        }
        if (*(float *)v268.i32 < v271.f32[1] || *(float *)v268.i32 < v265.f32[2])
        {
          if (v271.f32[1] <= v265.f32[2])
          {
            v275 = sqrtf((float)((float)(v265.f32[2] + 1.0) - *(float *)v268.i32) - v271.f32[1]);
            *(float32x2_t *)v278.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v268, (int32x4_t)v271), *(float32x2_t *)v265.f32);
            v301 = (float32x2_t)__PAIR64__(v268.u32[1], LODWORD(v275));
            v302 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v271.f32, 0);
            *(float32x2_t *)v277.f32 = vsub_f32(*(float32x2_t *)v268.i8, v302);
            v302.f32[0] = v275;
            v302.i32[0] = vmul_f32(v301, v302).u32[0];
            v302.i32[1] = v277.i32[1];
            *(float32x2_t *)&v278.u32[2] = v302;
            goto LABEL_47;
          }
          v283 = sqrtf((float)((float)(v271.f32[1] + 1.0) - *(float *)v268.i32) - v265.f32[2]);
          *(int32x2_t *)v258.i8 = vdup_laneq_s32((int32x4_t)v271, 2);
          v281 = (int8x16_t)v258;
          *(float *)v281.i32 = v283;
          v281.i32[0] = vmul_f32(*(float32x2_t *)v281.i8, (float32x2_t)__PAIR64__(v265.u32[1], LODWORD(v283))).u32[0];
          v281.i32[1] = vadd_f32(*(float32x2_t *)&v258, *(float32x2_t *)&v265).i32[1];
          v282 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v268.i8, 1), v271);
          v288 = (int32x2_t)vsubq_f32(v265, (float32x4_t)vdupq_laneq_s32(v268, 2)).u64[0];
          v279 = (float32x4_t)vextq_s8(vextq_s8(v282, v282, 4uLL), v281, 0xCuLL);
          v279.i32[3] = v288.i32[0];
        }
        else
        {
          v283 = sqrtf((float)((float)(*(float *)v268.i32 + 1.0) - v271.f32[1]) - v265.f32[2]);
          v284 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v271.f32, 0);
          v285 = vadd_f32(*(float32x2_t *)v268.i8, v284);
          v284.f32[0] = v283;
          v279.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v268.u32[1], LODWORD(v283)), v284).u32[0];
          v279.i32[1] = v285.i32[1];
          v286 = (float32x2_t)vzip2q_s32(v268, (int32x4_t)v271).u64[0];
          LODWORD(v287) = vadd_f32(v286, *(float32x2_t *)v265.f32).u32[0];
          v288 = (int32x2_t)vsub_f32(v286, *(float32x2_t *)v265.f32);
          HIDWORD(v287) = v288.i32[1];
          v279.i64[1] = v287;
        }
        *(float *)v288.i32 = 0.5 / v283;
        v278 = (float32x4_t)vdupq_lane_s32(v288, 0);
LABEL_56:
        v289 = v321;
        v289.i32[3] = 1.0;
        v321 = v289;
        v290 = vabsq_f32(v303);
        v290.i32[3] = 0;
        v291 = vmulq_f32(v278, v279);
        v289.i64[0] = 0x8000000080000000;
        v289.i64[1] = 0x8000000080000000;
        v292 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v290, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v303, v289));
        v293 = vmulq_f32(v291, v291);
        v294 = vmulq_laneq_f32(v291, v291, 3);
        v295 = vmulq_lane_f32(v291, *(float32x2_t *)v291.f32, 1).f32[0];
        v296 = vaddq_f32(v292, v292);
        v293.f32[0] = 0.5 - v293.f32[0];
        *(float32x2_t *)v291.f32 = vmul_laneq_f32(*(float32x2_t *)v291.f32, v291, 2);
        v297.i32[3] = 0;
        v297.f32[0] = (float)(0.5 - v293.f32[1]) - v293.f32[2];
        v297.f32[1] = v295 + v294.f32[2];
        v298.i32[3] = 0;
        v297.f32[2] = v291.f32[0] - v294.f32[1];
        v55 = vmulq_n_f32(v297, v296.f32[0]);
        v298.f32[0] = v295 - v294.f32[2];
        v298.f32[1] = v293.f32[0] - v293.f32[2];
        v298.f32[2] = v291.f32[1] + v294.f32[0];
        v54 = vmulq_lane_f32(v298, *(float32x2_t *)v296.f32, 1);
        *(int32x2_t *)v294.f32 = vrev64_s32(*(int32x2_t *)v294.f32);
        v299.i32[0] = vadd_f32(*(float32x2_t *)v291.f32, *(float32x2_t *)v294.f32).u32[0];
        v299.i32[1] = vsub_f32(*(float32x2_t *)&v291, *(float32x2_t *)&v294).i32[1];
        v299.f32[2] = v293.f32[0] - v293.f32[1];
        v299.i32[3] = 0;
        v56 = vmulq_laneq_f32(v299, v296, 2);
LABEL_57:
        *a4 = v55;
        a4[1] = v54;
        a4[2] = v56;
        a4[3] = (float32x4_t)v321;
        break;
    }
  }
  return v19 != 0;
}

uint64_t sub_1B19BC8E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t sub_1B19BC8F0(uint64_t result, char a2)
{
  *(_BYTE *)(result + 140) = a2;
  return result;
}

uint64_t sub_1B19BC8F8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 140);
}

uint64_t sub_1B19BC900(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19BC92C()
{
  if (qword_1EEF66E00 != -1)
    dispatch_once_f(&qword_1EEF66E00, &qword_1ED4CEBD0, (dispatch_function_t)sub_1B19BC900);
  return qword_1ED4CEBD0;
}

uint64_t sub_1B19BC974()
{
  uint64_t result;

  if (qword_1EEF66E00 != -1)
    dispatch_once_f(&qword_1EEF66E00, &qword_1ED4CEBD0, (dispatch_function_t)sub_1B19BC900);
  result = sub_1B179CB90(qword_1ED4CEBD0, 0x80uLL);
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  *(_QWORD *)(result + 88) = sub_1B19BC9EC;
  *(_QWORD *)(result + 96) = sub_1B19BD730;
  *(_DWORD *)(result + 136) = 1065353216;
  return result;
}

uint64_t sub_1B19BC9EC(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  float32x4_t v20;
  __n128 v21;
  float32x4_t v22;
  float32x4_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  float32x4_t v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  __n128 v73;
  float v74;
  float v75;
  float v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float32x4_t v86;
  __n128 v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t *v90;
  unint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  int8x16_t v111;
  int8x16_t v112;
  int32x4_t v113;
  int32x4_t v114;
  int8x16_t v115;
  float32x4_t v116;
  int32x4_t v117;
  float v118;
  float32x4_t v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int8x16_t v125;
  int8x16_t v126;
  float v127;
  float32x2_t v128;
  float32x2_t v129;
  float32x2_t v130;
  uint64_t v131;
  int32x2_t v132;
  float32x4_t v133;
  __n128 v134;
  int32x4_t v135;
  float32x4_t v136;
  int32x4_t v137;
  int32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  int32x4_t v152;
  int32x4_t v153;
  int8x16_t v154;
  float32x4_t v155;
  int32x4_t v156;
  float v157;
  float32x4_t v158;
  float v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x4_t v165;
  __n128 v166;
  float32x4_t v167;
  int8x16_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float v173;
  float32x4_t v174;
  float32x2_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  unint64_t v186;
  float v187;
  int v188;
  int v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x16_t v192;
  float v193;
  float v194;
  float32x4_t v195;
  int8x16_t v196;
  float32x4_t v197;
  int8x16_t v198;
  float v199;
  float v200;
  float v202;
  float v203;
  float32x2_t v204;
  float32x2_t v205;
  float v206;
  float v207;
  int32x2_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float v211;
  float v212;
  float v213;
  float v214;
  float32x4_t v215;
  float v216;
  float32x4_t v217;
  int8x16_t v218;
  float32x4_t v219;
  int8x16_t v220;
  float v221;
  float v222;
  float v223;
  float v224;
  float32x2_t v225;
  int32x2_t v226;
  float v227;
  float32x4_t v228;
  float v229;
  float v230;
  float v231;
  int8x16_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  const void *v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  size_t v268;
  uint64_t v269;
  uint64_t v270;
  int8x16_t v272;
  int8x16_t v273;
  float v274;
  float32x2_t v275;
  float32x2_t v276;
  float32x2_t v277;
  uint64_t v278;
  int32x2_t v279;
  float32x4_t v280;
  float32x2_t v281;
  float32x2_t v282;
  float32x4_t v283;
  float32x4_t v284;
  int8x16_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v305;
  __n128 v306;
  __n128 v307;
  __n128 v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float v313;
  float v314;
  float v315;
  float v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  __n128 v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  __n128 v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  __n128 v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  simd_float4x4 v338;
  simd_float4x4 v339;

  v12 = *(_QWORD *)(a2 + 16);
  *(double *)v20.i64 = sub_1B18697A0(a3, a2, a3, a4, a5, a6, a7, a8);
  v324 = 0u;
  v325 = 0u;
  v322 = 0u;
  v323 = 0u;
  v317 = v20;
  v320 = v21;
  v309 = v23;
  v312 = v22;
  if (*(_BYTE *)(v12 + 140))
  {
    result = (uint64_t)sub_1B1814768((uint64_t *)a1, v13, v14, v15, v16, v17, v18, v19);
    if (!result)
      return result;
    v32 = result;
    result = (uint64_t)sub_1B186CFA8(result, v25, v26, v27, v28, v29, v30, v31);
    if (!result)
      return result;
    result = sub_1B1866E38(result, v33, v34, v35, v36, v37, v38, v39);
    if (!result)
      return result;
    v48 = (unsigned __int8 *)result;
    if ((*(_BYTE *)result & 1) != 0)
    {
      v76 = *(float *)(result + 40);
    }
    else
    {
      v338 = *(simd_float4x4 *)sub_1B1869AC8(v32, v40, v41, v42, v43, v44, v45, v46);
      v339 = __invert_f4(v338);
      v294 = (float32x4_t)v339.columns[0];
      v297 = (float32x4_t)v339.columns[1];
      v305 = (float32x4_t)v339.columns[2];
      v300 = (float32x4_t)v339.columns[3];
      v330.i32[2] = 0;
      v330.i64[0] = 0;
      sub_1B186B5BC(a3, (__n128 *)&v330, v49, v50, v51, v52, v53, v54);
      v55 = vmulq_f32(vaddq_f32(v300, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v294, v330.f32[0]), v297, *(float32x2_t *)v330.f32, 1), v305, v330, 2)), (float32x4_t)xmmword_1B2244DF0);
      v305.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0];
      v63 = sub_1B1866628((uint64_t)v48, v56, v57, v58, v59, v60, v61, v62);
      v64 = 1.0 / (tan(v63 * 3.14159265 / 180.0 * 0.5) + v305.f32[0]);
      v73 = sub_1B1815A98(a1);
      v72 = v73.n128_u64[1];
      v73.n128_f64[0] = v73.n128_f32[3];
      if (v73.n128_f32[3] < 0.000001)
        v73.n128_f64[0] = 0.000001;
      v74 = v73.n128_f32[2] / v73.n128_f64[0];
      if (sub_1B18662A8(v48, v74, v65, v66, v67, v68, v69, v70, v71))
        v75 = *(float *)&v72;
      else
        v75 = *((float *)&v72 + 1);
      v76 = v75 * v64;
    }
    v134 = v320;
    if (v76 == 0.0)
      return 0;
    v135 = (int32x4_t)vmulq_f32(v317, v317);
    v136 = vmulq_f32(v312, v312);
    v137 = (int32x4_t)vmulq_f32(v309, v309);
    v138 = vzip2q_s32(v135, v137);
    v139 = (float32x4_t)vzip1q_s32(vzip1q_s32(v135, v137), (int32x4_t)v136);
    v140 = (float32x4_t)vtrn2q_s32(v135, (int32x4_t)v136);
    v140.i32[2] = v137.i32[1];
    v141 = vaddq_f32((float32x4_t)vzip1q_s32(v138, vdupq_laneq_s32((int32x4_t)v136, 2)), vaddq_f32(v139, v140));
    v136.i64[0] = 0x80000000800000;
    v136.i64[1] = 0x80000000800000;
    v142 = vcgeq_f32(v136, v141);
    v141.i32[3] = 0;
    v143 = vrsqrteq_f32(v141);
    v144 = vmulq_f32(v143, vrsqrtsq_f32(v141, vmulq_f32(v143, v143)));
    v145 = v142;
    v145.i32[3] = 0;
    v146 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v145), (int8x16_t)v141, (int8x16_t)vmulq_f32(v144, vrsqrtsq_f32(v141, vmulq_f32(v144, v144))));
    v147 = vmulq_n_f32(v317, v146.f32[0]);
    v148 = vmulq_lane_f32(v312, *(float32x2_t *)v146.f32, 1);
    v149 = vmulq_laneq_f32(v309, v146, 2);
    v150 = (int8x16_t)vuzp1q_s32((int32x4_t)v149, (int32x4_t)v149);
    v151 = (int8x16_t)vuzp1q_s32((int32x4_t)v148, (int32x4_t)v148);
    v152 = (int32x4_t)v147;
    if (v142.i32[0])
    {
      v153 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v150, (int8x16_t)v149, 0xCuLL), vnegq_f32(v148)), v149, (float32x4_t)vextq_s8(v151, (int8x16_t)v148, 0xCuLL));
      v152 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v153, v153), (int8x16_t)v153, 0xCuLL);
    }
    v154 = (int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147);
    v155 = v148;
    if (v142.i32[1])
    {
      v156 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v154, (int8x16_t)v147, 0xCuLL), vnegq_f32(v149)), v147, (float32x4_t)vextq_s8(v150, (int8x16_t)v149, 0xCuLL));
      v155 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v156, v156), (int8x16_t)v156, 0xCuLL);
    }
    v47.f32[0] = *(float *)(v12 + 136) / v76;
    if (v142.i32[2])
    {
      v142 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v151, (int8x16_t)v148, 0xCuLL), vnegq_f32(v147)), v148, (float32x4_t)vextq_s8(v154, (int8x16_t)v147, 0xCuLL));
      v149 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v142, v142), (int8x16_t)v142, 0xCuLL);
    }
    v157 = (float)(*(float *)v152.i32 + v155.f32[1]) + v149.f32[2];
    if (v157 > 0.0)
    {
      v158 = (float32x4_t)vzip2q_s32((int32x4_t)v155, vuzp1q_s32((int32x4_t)v155, (int32x4_t)v149));
      v158.i32[2] = v152.i32[1];
      v159 = sqrtf(v157 + 1.0);
      v160 = (float32x4_t)vtrn2q_s32((int32x4_t)v149, vzip2q_s32((int32x4_t)v149, v152));
      v160.i32[2] = v155.i32[0];
      v162 = vsubq_f32(v158, v160);
      v158.f32[3] = v159;
      v160.f32[3] = v159;
      v161 = vmulq_f32(v158, v160);
      v162.i32[3] = v161.i32[3];
LABEL_83:
      v161.f32[0] = 0.5 / v159;
      v280 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v161.f32, 0);
      goto LABEL_84;
    }
    if (*(float *)v152.i32 < v155.f32[1] || *(float *)v152.i32 < v149.f32[2])
    {
      if (v155.f32[1] <= v149.f32[2])
      {
        v159 = sqrtf((float)((float)(v149.f32[2] + 1.0) - *(float *)v152.i32) - v155.f32[1]);
        *(float32x2_t *)v162.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v152, (int32x4_t)v155), *(float32x2_t *)v149.f32);
        v281 = (float32x2_t)__PAIR64__(v152.u32[1], LODWORD(v159));
        v282 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.f32, 0);
        *(float32x2_t *)v161.f32 = vsub_f32(*(float32x2_t *)v152.i8, v282);
        v282.f32[0] = v159;
        v282.i32[0] = vmul_f32(v281, v282).u32[0];
        v282.i32[1] = v161.i32[1];
        *(float32x2_t *)&v162.u32[2] = v282;
        goto LABEL_83;
      }
      v274 = sqrtf((float)((float)(v155.f32[1] + 1.0) - *(float *)v152.i32) - v149.f32[2]);
      *(int32x2_t *)v142.i8 = vdup_laneq_s32((int32x4_t)v155, 2);
      v272 = (int8x16_t)v142;
      *(float *)v272.i32 = v274;
      v272.i32[0] = vmul_f32(*(float32x2_t *)v272.i8, (float32x2_t)__PAIR64__(v149.u32[1], LODWORD(v274))).u32[0];
      v272.i32[1] = vadd_f32(*(float32x2_t *)&v142, *(float32x2_t *)&v149).i32[1];
      v273 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.i8, 1), v155);
      v279 = (int32x2_t)vsubq_f32(v149, (float32x4_t)vdupq_laneq_s32(v152, 2)).u64[0];
      v280 = (float32x4_t)vextq_s8(vextq_s8(v273, v273, 4uLL), v272, 0xCuLL);
      v280.i32[3] = v279.i32[0];
    }
    else
    {
      v274 = sqrtf((float)((float)(*(float *)v152.i32 + 1.0) - v155.f32[1]) - v149.f32[2]);
      v275 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.f32, 0);
      v276 = vadd_f32(*(float32x2_t *)v152.i8, v275);
      v275.f32[0] = v274;
      v280.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v152.u32[1], LODWORD(v274)), v275).u32[0];
      v280.i32[1] = v276.i32[1];
      v277 = (float32x2_t)vzip2q_s32(v152, (int32x4_t)v155).u64[0];
      LODWORD(v278) = vadd_f32(v277, *(float32x2_t *)v149.f32).u32[0];
      v279 = (int32x2_t)vsub_f32(v277, *(float32x2_t *)v149.f32);
      HIDWORD(v278) = v279.i32[1];
      v280.i64[1] = v278;
    }
    *(float *)v279.i32 = 0.5 / v274;
    v162 = (float32x4_t)vdupq_lane_s32(v279, 0);
LABEL_84:
    v283 = vmulq_f32(v162, v280);
    v166 = v320;
    v166.n128_u32[3] = 1.0;
    v284 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vabsq_f32(v47), 0);
    v284.i32[3] = 0;
    v285.i64[0] = 0x8000000080000000;
    v285.i64[1] = 0x8000000080000000;
    v286 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v284, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8((int8x16_t)v47, v285), 0));
    v287 = vmulq_f32(v283, v283);
    v288 = vmulq_laneq_f32(v283, v283, 3);
    v289 = vmulq_lane_f32(v283, *(float32x2_t *)v283.f32, 1).f32[0];
    v290 = vaddq_f32(v286, v286);
    v287.f32[0] = 0.5 - v287.f32[0];
    *(float32x2_t *)v283.f32 = vmul_laneq_f32(*(float32x2_t *)v283.f32, v283, 2);
    v291.i32[3] = 0;
    v291.f32[0] = (float)(0.5 - v287.f32[1]) - v287.f32[2];
    v291.f32[1] = v289 + v288.f32[2];
    v292.i32[3] = 0;
    v291.f32[2] = v283.f32[0] - v288.f32[1];
    v179 = vmulq_n_f32(v291, v290.f32[0]);
    v292.f32[0] = v289 - v288.f32[2];
    v292.f32[1] = v287.f32[0] - v287.f32[2];
    v292.f32[2] = v283.f32[1] + v288.f32[0];
    v180 = vmulq_lane_f32(v292, *(float32x2_t *)v290.f32, 1);
    *(int32x2_t *)v288.f32 = vrev64_s32(*(int32x2_t *)v288.f32);
    v293.i32[0] = vadd_f32(*(float32x2_t *)v283.f32, *(float32x2_t *)v288.f32).u32[0];
    v293.i32[1] = vsub_f32(*(float32x2_t *)&v283, *(float32x2_t *)&v288).i32[1];
    v293.f32[2] = v287.f32[0] - v287.f32[1];
    v293.i32[3] = 0;
    v181 = vmulq_laneq_f32(v293, v290, 2);
    v187 = a9;
    goto LABEL_49;
  }
  v77 = sub_1B186B574(a3, v13, v14, v15, v16, v17, v18, v19);
  v85 = v77;
  v86 = v317;
  v87 = v320;
  v88 = v309;
  v89 = v312;
  if (v77)
  {
    v90 = (float32x4_t *)sub_1B1869AC8(v77, v78, v79, v80, v81, v82, v83, v84);
    v91 = 0;
    v92 = *v90;
    v93 = v90[1];
    v94 = v90[2];
    v95 = v90[3];
    v326 = v317;
    v327 = v312;
    v328 = v309;
    v329 = v320;
    v330 = 0u;
    v331 = 0u;
    v332 = 0u;
    v333 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v330 + v91) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)((char *)&v326 + v91))), v93, *(float32x2_t *)&v326.f32[v91 / 4], 1), v94, *(float32x4_t *)((char *)&v326 + v91), 2), v95, *(float32x4_t *)((char *)&v326 + v91), 3);
      v91 += 16;
    }
    while (v91 != 64);
    v86 = v330;
    v89 = v331;
    v88 = v332;
    v87 = v333;
  }
  v96 = (int32x4_t)vmulq_f32(v86, v86);
  v97 = (int32x4_t)vmulq_f32(v89, v89);
  v98 = (int32x4_t)vmulq_f32(v88, v88);
  v99 = vzip2q_s32(v96, v98);
  v100 = (float32x4_t)vzip1q_s32(vzip1q_s32(v96, v98), v97);
  v101 = (float32x4_t)vtrn2q_s32(v96, v97);
  v101.i32[2] = v98.i32[1];
  v102 = vaddq_f32((float32x4_t)vzip1q_s32(v99, vdupq_laneq_s32(v97, 2)), vaddq_f32(v100, v101));
  v101.i64[0] = 0x80000000800000;
  v101.i64[1] = 0x80000000800000;
  v103 = vcgeq_f32(v101, v102);
  v102.i32[3] = 0;
  v104 = vrsqrteq_f32(v102);
  v105 = vmulq_f32(v104, vrsqrtsq_f32(v102, vmulq_f32(v104, v104)));
  v106 = v103;
  v106.i32[3] = 0;
  v107 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v106), (int8x16_t)v102, (int8x16_t)vmulq_f32(v105, vrsqrtsq_f32(v102, vmulq_f32(v105, v105))));
  v108 = vmulq_n_f32(v86, v107.f32[0]);
  v109 = vmulq_lane_f32(v89, *(float32x2_t *)v107.f32, 1);
  v110 = vmulq_laneq_f32(v88, v107, 2);
  v111 = (int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110);
  v112 = (int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109);
  v113 = (int32x4_t)v108;
  if (v103.i32[0])
  {
    v114 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v111, (int8x16_t)v110, 0xCuLL), vnegq_f32(v109)), v110, (float32x4_t)vextq_s8(v112, (int8x16_t)v109, 0xCuLL));
    v113 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v114, v114), (int8x16_t)v114, 0xCuLL);
  }
  v115 = (int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108);
  v116 = v109;
  if (v103.i32[1])
  {
    v117 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v115, (int8x16_t)v108, 0xCuLL), vnegq_f32(v110)), v108, (float32x4_t)vextq_s8(v111, (int8x16_t)v110, 0xCuLL));
    v116 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v117, v117), (int8x16_t)v117, 0xCuLL);
  }
  if (v103.i32[2])
  {
    v103 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v112, (int8x16_t)v109, 0xCuLL), vnegq_f32(v108)), v109, (float32x4_t)vextq_s8(v115, (int8x16_t)v108, 0xCuLL));
    v110 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v103, v103), (int8x16_t)v103, 0xCuLL);
  }
  v118 = (float)(*(float *)v113.i32 + v116.f32[1]) + v110.f32[2];
  v306 = v87;
  if (v118 > 0.0)
  {
    v119 = (float32x4_t)vzip2q_s32((int32x4_t)v116, vuzp1q_s32((int32x4_t)v116, (int32x4_t)v110));
    v119.i32[2] = v113.i32[1];
    v120 = sqrtf(v118 + 1.0);
    v121 = (float32x4_t)vtrn2q_s32((int32x4_t)v110, vzip2q_s32((int32x4_t)v110, v113));
    v121.i32[2] = v116.i32[0];
    v123 = vsubq_f32(v119, v121);
    v119.f32[3] = v120;
    v121.f32[3] = v120;
    v122 = vmulq_f32(v119, v121);
    v123.i32[3] = v122.i32[3];
LABEL_44:
    v122.f32[0] = 0.5 / v120;
    v133 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 0);
    goto LABEL_45;
  }
  if (*(float *)v113.i32 < v116.f32[1] || *(float *)v113.i32 < v110.f32[2])
  {
    if (v116.f32[1] <= v110.f32[2])
    {
      v120 = sqrtf((float)((float)(v110.f32[2] + 1.0) - *(float *)v113.i32) - v116.f32[1]);
      *(float32x2_t *)v123.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v113, (int32x4_t)v116), *(float32x2_t *)v110.f32);
      v163 = (float32x2_t)__PAIR64__(v113.u32[1], LODWORD(v120));
      v164 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
      *(float32x2_t *)v122.f32 = vsub_f32(*(float32x2_t *)v113.i8, v164);
      v164.f32[0] = v120;
      v164.i32[0] = vmul_f32(v163, v164).u32[0];
      v164.i32[1] = v122.i32[1];
      *(float32x2_t *)&v123.u32[2] = v164;
      goto LABEL_44;
    }
    v127 = sqrtf((float)((float)(v116.f32[1] + 1.0) - *(float *)v113.i32) - v110.f32[2]);
    *(int32x2_t *)v103.i8 = vdup_laneq_s32((int32x4_t)v116, 2);
    v125 = (int8x16_t)v103;
    *(float *)v125.i32 = v127;
    v125.i32[0] = vmul_f32(*(float32x2_t *)v125.i8, (float32x2_t)__PAIR64__(v110.u32[1], LODWORD(v127))).u32[0];
    v125.i32[1] = vadd_f32(*(float32x2_t *)&v103, *(float32x2_t *)&v110).i32[1];
    v126 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.i8, 1), v116);
    v132 = (int32x2_t)vsubq_f32(v110, (float32x4_t)vdupq_laneq_s32(v113, 2)).u64[0];
    v133 = (float32x4_t)vextq_s8(vextq_s8(v126, v126, 4uLL), v125, 0xCuLL);
    v133.i32[3] = v132.i32[0];
  }
  else
  {
    v127 = sqrtf((float)((float)(*(float *)v113.i32 + 1.0) - v116.f32[1]) - v110.f32[2]);
    v128 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
    v129 = vadd_f32(*(float32x2_t *)v113.i8, v128);
    v128.f32[0] = v127;
    v133.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v113.u32[1], LODWORD(v127)), v128).u32[0];
    v133.i32[1] = v129.i32[1];
    v130 = (float32x2_t)vzip2q_s32(v113, (int32x4_t)v116).u64[0];
    LODWORD(v131) = vadd_f32(v130, *(float32x2_t *)v110.f32).u32[0];
    v132 = (int32x2_t)vsub_f32(v130, *(float32x2_t *)v110.f32);
    HIDWORD(v131) = v132.i32[1];
    v133.i64[1] = v131;
  }
  *(float *)v132.i32 = 0.5 / v127;
  v123 = (float32x4_t)vdupq_lane_s32(v132, 0);
LABEL_45:
  v301 = vmulq_f32(v123, v133);
  *(double *)v165.i64 = sub_1B186BAFC(a3, v78, v79, v80, v81, v82, v83, v84);
  v166 = v306;
  v166.n128_u32[3] = 1.0;
  v167 = vabsq_f32(v165);
  v167.i32[3] = 0;
  v168.i64[0] = 0x8000000080000000;
  v168.i64[1] = 0x8000000080000000;
  v169 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v167, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v165, v168));
  v170 = v301;
  v171 = vmulq_f32(v170, v170);
  v172 = vmulq_laneq_f32(v170, v170, 3);
  v173 = vmulq_lane_f32(v170, *(float32x2_t *)v170.f32, 1).f32[0];
  v174 = vaddq_f32(v169, v169);
  v171.f32[0] = 0.5 - v171.f32[0];
  v175 = vmul_laneq_f32(*(float32x2_t *)v301.f32, v301, 2);
  v176.i32[3] = 0;
  v176.f32[0] = (float)(0.5 - v171.f32[1]) - v171.f32[2];
  v176.f32[1] = v173 + v172.f32[2];
  v176.f32[2] = v175.f32[0] - v172.f32[1];
  v177.i32[3] = 0;
  v177.f32[0] = v173 - v172.f32[2];
  v177.f32[1] = v171.f32[0] - v171.f32[2];
  v177.f32[2] = v175.f32[1] + v172.f32[0];
  *(int32x2_t *)v172.f32 = vrev64_s32(*(int32x2_t *)v172.f32);
  v178.i32[0] = vadd_f32(v175, *(float32x2_t *)v172.f32).u32[0];
  v178.i32[1] = vsub_f32(v175, *(float32x2_t *)&v172).i32[1];
  v179 = vmulq_n_f32(v176, v174.f32[0]);
  v178.i64[1] = COERCE_UNSIGNED_INT(v171.f32[0] - v171.f32[1]);
  v180 = vmulq_lane_f32(v177, *(float32x2_t *)v174.f32, 1);
  v322 = v179;
  v323 = v180;
  v181 = vmulq_laneq_f32(v178, v174, 2);
  v324 = v181;
  v325 = (float32x4_t)v166;
  if (!v85)
  {
    v187 = a9;
    v134 = v320;
    goto LABEL_51;
  }
  v307 = v166;
  v295 = v180;
  v298 = v179;
  v302 = v181;
  *(double *)v182.i64 = sub_1B186B90C(v85, v40, v41, v42, v43, v44, v45, v46);
  v186 = 0;
  v326 = v298;
  v327 = v295;
  v328 = v302;
  v329 = v307;
  v330 = 0u;
  v331 = 0u;
  v332 = 0u;
  v333 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v330 + v186) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v182, COERCE_FLOAT(*(_OWORD *)((char *)&v326 + v186))), v183, *(float32x2_t *)&v326.f32[v186 / 4], 1), v184, *(float32x4_t *)((char *)&v326 + v186), 2), v185, *(float32x4_t *)((char *)&v326 + v186), 3);
    v186 += 16;
  }
  while (v186 != 64);
  v179 = v330;
  v180 = v331;
  v181 = v332;
  v166 = v333;
  v187 = a9;
  v134 = v320;
LABEL_49:
  v322 = v179;
  v323 = v180;
  v324 = v181;
  v325 = (float32x4_t)v166;
LABEL_51:
  if (v187 != 1.0)
  {
    v330 = 0uLL;
    v326 = 0uLL;
    v337.i32[2] = 0;
    v337.i64[0] = 0;
    v336.i32[2] = 0;
    v336.i64[0] = 0;
    v335.i32[2] = 0;
    v335.i64[0] = 0;
    v334.i32[2] = 0;
    v334.i64[0] = 0;
    v299 = v179;
    v303 = v181;
    v308 = v166;
    v296 = v180;
    v188 = sub_1B1802048(&v330, (__n128 *)&v337, &v335, v317, v312, v309, v134);
    v189 = sub_1B1802048(&v326, (__n128 *)&v336, &v334, v299, v296, v303, v308);
    if (v188)
    {
      v190 = (float32x4_t)v320;
      v191 = v309;
      if (v189)
      {
        v192 = (int8x16_t)vmulq_f32(v330, v326);
        v318 = v326;
        v321 = v330;
        v193 = 1.0;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v192.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v192, v192, 8uLL))) >= 0.0)
        {
          v216 = 1.0 - a9;
          v217 = vsubq_f32(v330, v326);
          v218 = (int8x16_t)vmulq_f32(v217, v217);
          v219 = vaddq_f32(v330, v326);
          v220 = (int8x16_t)vmulq_f32(v219, v219);
          v221 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v218.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v220.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)))));
          v222 = v221 + v221;
          _ZF = (float)(v221 + v221) == 0.0;
          v223 = 1.0;
          if (!_ZF)
            v223 = sinf(v222) / v222;
          v224 = v223;
          v225 = vrecpe_f32((float32x2_t)LODWORD(v223));
          v226 = (int32x2_t)vmul_f32(v225, vrecps_f32((float32x2_t)LODWORD(v224), v225));
          LODWORD(v227) = vmul_f32((float32x2_t)v226, vrecps_f32((float32x2_t)LODWORD(v224), (float32x2_t)v226)).u32[0];
          if ((float)(v216 * v222) != 0.0)
          {
            v315 = v227;
            *(float *)v226.i32 = sinf(v216 * v222);
            v227 = v315;
            v193 = *(float *)v226.i32 / (float)(v216 * v222);
          }
          *(float *)v226.i32 = v216 * (float)(v227 * v193);
          v228 = (float32x4_t)vdupq_lane_s32(v226, 0);
          v211 = a9;
          v229 = v222 * a9;
          v230 = 1.0;
          if (v229 != 0.0)
          {
            v311 = v228;
            v316 = v227;
            v231 = sinf(v229);
            v228 = v311;
            v227 = v316;
            v211 = a9;
            v230 = v231 / v229;
          }
          v215 = vmlaq_f32(vmulq_n_f32(v318, (float)(v227 * v230) * v211), v321, v228);
        }
        else
        {
          v194 = 1.0 - a9;
          v195 = vaddq_f32(v330, v326);
          v196 = (int8x16_t)vmulq_f32(v195, v195);
          v197 = vsubq_f32(v330, v326);
          v198 = (int8x16_t)vmulq_f32(v197, v197);
          v199 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v196.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL)))));
          v200 = v199 + v199;
          _ZF = (float)(v199 + v199) == 0.0;
          v202 = 1.0;
          if (!_ZF)
            v202 = sinf(v200) / v200;
          v203 = v202;
          v204 = vrecpe_f32((float32x2_t)LODWORD(v202));
          v205 = vmul_f32(v204, vrecps_f32((float32x2_t)LODWORD(v203), v204));
          LODWORD(v206) = vmul_f32(v205, vrecps_f32((float32x2_t)LODWORD(v203), v205)).u32[0];
          if ((float)(v194 * v200) != 0.0)
          {
            v313 = v206;
            v207 = sinf(v194 * v200);
            v206 = v313;
            v193 = v207 / (float)(v194 * v200);
          }
          v208.i32[1] = v318.i32[1];
          v209 = vnegq_f32(v318);
          *(float *)v208.i32 = v194 * (float)(v206 * v193);
          v210 = (float32x4_t)vdupq_lane_s32(v208, 0);
          v211 = a9;
          v212 = v200 * a9;
          v213 = 1.0;
          if (v212 != 0.0)
          {
            v314 = v206;
            v319 = v209;
            v310 = v210;
            v214 = sinf(v212);
            v210 = v310;
            v206 = v314;
            v209 = v319;
            v211 = a9;
            v213 = v214 / v212;
          }
          v215 = vmlaq_f32(vmulq_n_f32(v209, (float)(v206 * v213) * v211), v321, v210);
        }
        v232 = (int8x16_t)vmulq_f32(v215, v215);
        *(float32x2_t *)v232.i8 = vadd_f32(*(float32x2_t *)v232.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v232, v232, 8uLL));
        v233 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v232.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v232.i8, 1)), 0);
        v234 = vrsqrteq_f32(v233);
        v235 = vmulq_f32(v234, vrsqrtsq_f32(v233, vmulq_f32(v234, v234)));
        __asm { FMOV            V3.4S, #1.0 }
        v239 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v233), _Q3, (int8x16_t)vmulq_f32(v235, vrsqrtsq_f32(v233, vmulq_f32(v235, v235))));
        v190 = vmlaq_n_f32(v337, vsubq_f32(v336, v337), v211);
        v240 = vmlaq_n_f32(v335, vsubq_f32(v334, v335), v211);
        v190.i32[3] = 1.0;
        v241 = vabsq_f32(v240);
        v241.i32[3] = 0;
        v242 = vmulq_f32(v215, v239);
        v243 = vmaxnmq_f32(v241, (float32x4_t)xmmword_1B2245780);
        v241.i64[0] = 0x8000000080000000;
        v241.i64[1] = 0x8000000080000000;
        v244 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v240, (int8x16_t)v241), (int8x16_t)(*(_OWORD *)&v243 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        v245 = vmulq_f32(v242, v242);
        v246 = vmulq_laneq_f32(v242, v242, 3);
        v247 = vmulq_lane_f32(v242, *(float32x2_t *)v242.f32, 1).f32[0];
        v248 = vaddq_f32(v244, v244);
        v245.f32[0] = 0.5 - v245.f32[0];
        *(float32x2_t *)v242.f32 = vmul_laneq_f32(*(float32x2_t *)v242.f32, v242, 2);
        v249.i32[3] = 0;
        v249.f32[0] = (float)(0.5 - v245.f32[1]) - v245.f32[2];
        v249.f32[1] = v247 + v246.f32[2];
        v250.i32[3] = 0;
        v249.f32[2] = v242.f32[0] - v246.f32[1];
        v250.f32[0] = v247 - v246.f32[2];
        v250.f32[1] = v245.f32[0] - v245.f32[2];
        v250.f32[2] = v242.f32[1] + v246.f32[0];
        v312 = vmulq_lane_f32(v250, *(float32x2_t *)v248.f32, 1);
        v317 = vmulq_n_f32(v249, v248.f32[0]);
        *(int32x2_t *)v246.f32 = vrev64_s32(*(int32x2_t *)v246.f32);
        v251.i32[0] = vadd_f32(*(float32x2_t *)v242.f32, *(float32x2_t *)v246.f32).u32[0];
        v251.i32[1] = vsub_f32(*(float32x2_t *)&v242, *(float32x2_t *)&v246).i32[1];
        v251.f32[2] = v245.f32[0] - v245.f32[1];
        v251.i32[3] = 0;
        v191 = vmulq_laneq_f32(v251, v248, 2);
      }
    }
    else
    {
      v190 = (float32x4_t)v320;
      v191 = v309;
    }
    v322 = v317;
    v323 = v312;
    v324 = v191;
    v325 = v190;
  }
  v252 = (const void *)sub_1B19C45CC(a4, v40, v41, v42, v43, v44, v45, v46);
  v260 = (void *)sub_1B19C4614(a4, v253, v254, v255, v256, v257, v258, v259);
  v268 = sub_1B179E250(10, v261, v262, v263, v264, v265, v266, v267);
  sub_1B17C58FC(v252, v260, &v322, v268, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v269, v270);
  return 1;
}

const __CFString *sub_1B19BD730()
{
  return CFSTR("transform");
}

uint64_t sub_1B19BD740(uint64_t result, float a2)
{
  *(float *)(result + 136) = a2;
  return result;
}

uint64_t sub_1B19BD748(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19BD774(const void *a1, const void *a2)
{
  uint64_t v4;

  if (qword_1EEF66E08 != -1)
    dispatch_once_f(&qword_1EEF66E08, &qword_1ED4CEC18, (dispatch_function_t)sub_1B19BD748);
  v4 = sub_1B179CB90(qword_1ED4CEC18, 0x88uLL);
  *(_DWORD *)(v4 + 72) = 1065353216;
  *(_WORD *)(v4 + 76) = 257;
  *(_QWORD *)(v4 + 136) = _Block_copy(a1);
  *(_QWORD *)(v4 + 144) = CFRetain(a2);
  *(_QWORD *)(v4 + 88) = sub_1B19BD82C;
  *(_QWORD *)(v4 + 96) = sub_1B19BD850;
  *(_DWORD *)(v4 + 72) = 1065353216;
  *(_BYTE *)(v4 + 76) = 1;
  return v4;
}

uint64_t sub_1B19BD82C(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) + 136) + 16))();
  return 1;
}

uint64_t sub_1B19BD850(uint64_t a1)
{
  return *(_QWORD *)(a1 + 144);
}

_QWORD *sub_1B19BD858(uint64_t a1)
{
  _QWORD *v2;

  if (qword_1EEF66E08 != -1)
    dispatch_once_f(&qword_1EEF66E08, &qword_1ED4CEC18, (dispatch_function_t)sub_1B19BD748);
  v2 = (_QWORD *)sub_1B179CB90(qword_1ED4CEC18, 0x88uLL);
  v2[17] = _Block_copy(*(const void **)(a1 + 136));
  v2[18] = CFRetain(*(CFTypeRef *)(a1 + 144));
  v2[11] = sub_1B19BD82C;
  v2[12] = sub_1B19BD850;
  return v2;
}

void sub_1B19BD8E8()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;

  if (!qword_1ED4CEC00)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEC00);
    qword_1ED4CEC00 = (uint64_t)v0;
    if (qword_1ED4CEBE8 != -1)
      dispatch_once(&qword_1ED4CEBE8, &unk_1E63D1470);
    sub_1B19C3200(v0, (const void *)qword_1ED4CEBF0);
    sub_1B19C326C(CFSTR("targetPosition"), 0x90u, 8, 0, 0, 0, v1, v2);
    sub_1B19C3258();
  }
}

uint64_t sub_1B19BD990()
{
  uint64_t result;

  if (qword_1ED4CEBF8 != -1)
    dispatch_once(&qword_1ED4CEBF8, &unk_1E63D1590);
  result = sub_1B179CB90(qword_1ED4CEC00, 0xB0uLL);
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  *(_QWORD *)(result + 88) = sub_1B19BD9FC;
  *(_QWORD *)(result + 96) = sub_1B19BDF60;
  return result;
}

uint64_t sub_1B19BD9FC(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 *v9;
  _QWORD *v10;
  __n128 **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  __n128 **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  float32x4_t *v37;
  __n128 *v38;
  float32x4_t *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float32x4_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  float32x4_t v62;
  int32x4_t v63;
  float32x2_t v64;
  float32x2_t v65;
  float v66;
  int32x4_t v67;
  float32x4_t v68;
  float v69;
  float v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  int8x16_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  float v94;
  float32x4_t v95;
  float v96;
  float v97;
  float32x4_t v98;
  float32x4_t v99;
  BOOL v100;
  uint64_t result;
  float32x4_t *v102;
  float32x4_t *v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t *v112;
  size_t v113;
  unint64_t v114;
  uint64_t v115;
  void *v116;
  uint64_t v117;
  unint64_t v118;
  const __CFDictionary *v119;
  const void *Value;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  const __CFString *v130;
  uint64_t v131;
  uint64_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  __n128 v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  __n128 v143[2];

  v9 = *(__n128 **)(a3 + 16);
  v10 = (_QWORD *)v9[8].n128_u64[1];
  if (!v10)
    return 0;
  v12 = (__n128 **)v9[10].n128_u64[0];
  if (!v12)
  {
    v112 = (float32x4_t *)a4;
    if (v10 == (_QWORD *)a4)
    {
      v129 = &byte_1EEF66E11;
      if ((byte_1EEF66E11 & 1) != 0)
        return 0;
      v130 = CFSTR("Error: CFXConstraintApplyIK root and leaf nodes are the same node");
    }
    else
    {
      v113 = 0;
      v114 = 0;
      v115 = a4;
      while (v115)
      {
        ++v114;
        v115 = sub_1B186B574(v115, a3, a4, a5, a6, a7, a8, a9);
        v113 += 48;
        if ((_QWORD *)v115 == v10)
        {
          v116 = malloc_type_malloc(v113, 0x102004031CE6520uLL);
          v117 = 0;
          v9[10].n128_u64[0] = (unint64_t)v116;
          v9[10].n128_u64[1] = v114;
          do
          {
            v118 = v9[10].n128_u64[0];
            *(_DWORD *)(v118 + v117 + 8) = 1078530011;
            v119 = (const __CFDictionary *)v9[11].n128_u64[0];
            if (v119)
            {
              Value = CFDictionaryGetValue(v119, v112);
              v118 = v9[10].n128_u64[0];
              if (Value)
                *(_DWORD *)(v118 + v117 + 8) = (_DWORD)Value;
            }
            *(_QWORD *)(v118 + v117) = v112;
            *(double *)&v121 = sub_1B186BB70(v112, a3, a4, a5, a6, a7, a8, a9);
            *(_OWORD *)(v9[10].n128_u64[0] + v117 + 16) = v121;
            v112 = (float32x4_t *)sub_1B186B574((uint64_t)v112, v122, v123, v124, v125, v126, v127, v128);
            v117 += 48;
            --v114;
          }
          while (v114);
          v12 = (__n128 **)v9[10].n128_u64[0];
          goto LABEL_3;
        }
      }
      v129 = &byte_1EEF66E10;
      if ((byte_1EEF66E10 & 1) != 0)
        return 0;
      v130 = CFSTR("Error: CFXConstraintApplyIK leef is not a child of root");
    }
    *v129 = 1;
    sub_1B17C4408(16, (uint64_t)v130, a4, a5, a6, a7, a8, a9, v131);
    return 0;
  }
LABEL_3:
  v132 = v9[10].n128_i64[1];
  v13 = sub_1B17C6244(v10, a3, a4, a5, a6, a7, a8, a9);
  if (v13 && (v21 = sub_1B187B058(v13, v14, v15, v16, v17, v18, v19, v20)) != 0)
  {
    v23 = v21;
    v24 = 0;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v15, v16, v17, v18, v19, v20, (uint64_t)"storage");
    v23 = 0;
    v24 = 1;
  }
  if (a1 != 1.0 && v132 >= 1)
  {
    v25 = v132;
    v26 = v12;
    do
    {
      sub_1B19C50DC(v23, (uint64_t)*v26);
      *(double *)&v34 = sub_1B186BB70((float32x4_t *)*v26, v27, v28, v29, v30, v31, v32, v33);
      *((_OWORD *)v26 + 2) = v34;
      v26 += 6;
      --v25;
    }
    while (v25);
  }
  v35 = 0;
  v36 = v132 - 1;
  v133 = 0u;
  v136 = 0u;
  do
  {
    v37 = (float32x4_t *)(v12 + 8);
    if (v132 >= 2)
    {
      do
      {
        v38 = *v12;
        v39 = (float32x4_t *)v37[-1].i64[0];
        if (!v35)
          sub_1B19C50DC(v23, v37[-1].i64[0]);
        v40.n128_f64[0] = sub_1B186B9C0(v38);
        v137 = v40;
        v48 = sub_1B186B574((uint64_t)v38, v41, v42, v43, v44, v45, v46, v47);
        *(double *)v55.i64 = sub_1B19BE0AC(v48, (uint64_t)v39, v49, v50, v51, v52, v53, v54, v137);
        v136 = v55;
        *(double *)v62.i64 = sub_1B19BE0AC(0, (uint64_t)v39, v56, v57, v58, v59, v60, v61, v9[9]);
        v63 = (int32x4_t)vmulq_f32(v136, v136);
        v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
        v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
        v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
        LODWORD(v66) = vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).u32[0];
        v67 = (int32x4_t)vmulq_f32(v62, v62);
        v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v67, 2), vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1))).u32[0];
        *(float32x2_t *)v67.i8 = vrsqrte_f32((float32x2_t)v63.u32[0]);
        *(float32x2_t *)v67.i8 = vmul_f32(*(float32x2_t *)v67.i8, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8)));
        v133 = v62;
        v134 = vmulq_n_f32(v62, vmul_f32(*(float32x2_t *)v67.i8, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8))).f32[0]);
        v135 = vmulq_n_f32(v136, v66);
        v68 = vmulq_f32(v135, v134);
        v69 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0];
        if (v69 > 1.0)
          v69 = 1.0;
        if (v69 < -1.0)
          v69 = -1.0;
        v70 = acosf(v69);
        if (v9[11].n128_u8[8] || v70 > 0.00001)
        {
          v71 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v134, (int32x4_t)v134), (int8x16_t)v134, 0xCuLL), vnegq_f32(v135)), v134, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), (int8x16_t)v135, 0xCuLL));
          v72 = vmulq_f32(v71, v71);
          v72.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), v72)).u64[0];
          v73 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 0);
          v73.i32[3] = 0;
          v74 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), (int8x16_t)v71, 0xCuLL);
          v75 = vrsqrteq_f32(v73);
          v76 = vmulq_f32(v75, vrsqrtsq_f32(v73, vmulq_f32(v75, v75)));
          v77 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v72.f32[0] != 0.0)), 0x1FuLL));
          v77.i32[3] = 0;
          v78 = vbslq_s8((int8x16_t)vcltzq_s32(v77), (int8x16_t)vmulq_f32(v74, vmulq_f32(v76, vrsqrtsq_f32(v73, vmulq_f32(v76, v76)))), (int8x16_t)v74);
          v143[0] = 0u;
          *(float *)&v78.i32[3] = v70;
          v142 = (float32x4_t)v78;
          sub_1B17C9890(v143, &v142);
          v141 = 0u;
          *(double *)v86.i64 = sub_1B186BB70(v39, v79, v80, v81, v82, v83, v84, v85);
          v141 = v86;
          v140 = 0u;
          sub_1B17C9A20(&v141, (int32x4_t *)v143, &v140);
          sub_1B17C99D0(&v140);
          v94 = v37[-1].f32[2];
          if (v94 < 3.14159265)
          {
            v139 = 0uLL;
            *(double *)v95.i64 = sub_1B17C9D94(*v37, v140);
            v139 = v95;
            sub_1B17C99D0(&v139);
            v96 = acosf(v139.f32[3]);
            v97 = fabsf(v96 + v96);
            if (v97 > v94)
            {
              v138 = v140;
              sub_1B17C9A84(v37, &v138, &v140, v94 / v97);
              sub_1B17C99D0(&v140);
            }
          }
          sub_1B186BBD8(v39, v87, v88, v89, v90, v91, v92, v93, (__n128)v140);
        }
        if ((v24 & 1) == 0)
          sub_1B19C5080(v23, (uint64_t)v39);
        v37 += 3;
        --v36;
      }
      while (v36);
    }
    v98 = vsubq_f32(v136, v133);
    v99 = vmulq_f32(v98, v98);
    v100 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0]) < 0.9|| ++v35 == 10;
    v36 = v132 - 1;
  }
  while (!v100);
  result = 1;
  if (a1 != 1.0 && v132 >= 2)
  {
    v102 = (float32x4_t *)(v12 + 10);
    do
    {
      v103 = (float32x4_t *)v102[-2].i64[0];
      v143[0] = 0uLL;
      v104.n128_f64[0] = sub_1B186BB70(v103, v22, v15, v16, v17, v18, v19, v20);
      v143[0] = v104;
      sub_1B17C9A84(v102, (float32x4_t *)v143, (float32x4_t *)v143, a1);
      sub_1B17C99D0((float32x4_t *)v143);
      sub_1B186BBD8(v103, v105, v106, v107, v108, v109, v110, v111, v143[0]);
      v102 += 3;
      --v36;
    }
    while (v36);
    return 1;
  }
  return result;
}

const __CFString *sub_1B19BDF60()
{
  return CFSTR("transform");
}

void sub_1B19BDF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  *(_QWORD *)(a1 + 136) = a2;
  v10 = *(void **)(a1 + 160);
  if (v10)
  {
    free(v10);
    *(_QWORD *)(a1 + 160) = 0;
  }
}

void sub_1B19BDFCC(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[9] = a2;
}

void sub_1B19BE01C(uint64_t a1, void *key, float a3)
{
  __CFDictionary *Mutable;
  uint64_t v7;
  uint64_t v8;
  float *v9;

  Mutable = *(__CFDictionary **)(a1 + 176);
  if (!Mutable)
  {
    Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
    *(_QWORD *)(a1 + 176) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, (const void *)LODWORD(a3));
  *(_BYTE *)(a1 + 184) = 1;
  v7 = *(_QWORD *)(a1 + 160);
  if (v7)
  {
    v8 = *(_QWORD *)(a1 + 168);
    if (v8 >= 1)
    {
      v9 = (float *)(v7 + 8);
      do
      {
        *v9 = a3;
        v9 += 12;
        --v8;
      }
      while (v8);
    }
  }
}

double sub_1B19BE0AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  simd_float4 v32;
  simd_float4 v33;
  simd_float4 v34;
  simd_float4 v35;
  __n128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  uint64_t v45;
  uint64_t v46;
  simd_float4x4 v47;
  simd_float4x4 v48;

  if (a1 != a2)
  {
    v45 = v9;
    v46 = v10;
    v36 = a9;
    v47 = *(simd_float4x4 *)sub_1B1869AC8(a2, a2, a3, a4, a5, a6, a7, a8);
    v48 = __invert_f4(v47);
    if (a1)
    {
      v34 = v48.columns[1];
      v35 = v48.columns[0];
      v32 = v48.columns[3];
      v33 = v48.columns[2];
      v19 = (__int128 *)sub_1B1869AC8(a1, v12, v13, v14, v15, v16, v17, v18);
      v48.columns[3] = v32;
      v48.columns[2] = v33;
      v48.columns[1] = v34;
      v48.columns[0] = v35;
      v20 = *v19;
      v21 = v19[1];
      v22 = v19[2];
      v23 = v19[3];
    }
    else
    {
      v20 = xmmword_1B2244DB0;
      v21 = xmmword_1B2244DD0;
      v22 = xmmword_1B2244D90;
      v23 = xmmword_1B2244E20;
    }
    v24 = 0;
    v25 = v36;
    v25.n128_u32[3] = 1.0;
    v37 = v20;
    v38 = v21;
    v39 = v22;
    v40 = v23;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v41 + v24) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v48.columns[0], COERCE_FLOAT(*(__int128 *)((char *)&v37 + v24))), (float32x4_t)v48.columns[1], *(float32x2_t *)((char *)&v37 + v24), 1), (float32x4_t)v48.columns[2], *(float32x4_t *)((char *)&v37 + v24), 2), (float32x4_t)v48.columns[3], *(float32x4_t *)((char *)&v37 + v24), 3);
      v24 += 16;
    }
    while (v24 != 64);
    v26 = 0;
    v27 = v41;
    v28 = v42;
    v29 = v43;
    v30 = v44;
    v37 = xmmword_1B2244DB0;
    v38 = xmmword_1B2244DD0;
    v39 = xmmword_1B2244D90;
    v40 = (__int128)v25;
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    v44 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v41 + v26) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*(__int128 *)((char *)&v37 + v26))), v28, *(float32x2_t *)((char *)&v37 + v26), 1), v29, *(float32x4_t *)((char *)&v37 + v26), 2), v30, *(float32x4_t *)((char *)&v37 + v26), 3);
      v26 += 16;
    }
    while (v26 != 64);
    a9.n128_u64[0] = v44.i64[0];
  }
  return a9.n128_f64[0];
}

void sub_1B19BE1F4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (!qword_1ED4CEBE0)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEBE0);
    qword_1ED4CEBE0 = (uint64_t)v0;
    if (qword_1ED4CEBE8 != -1)
      dispatch_once(&qword_1ED4CEBE8, &unk_1E63D1470);
    sub_1B19C3200(v0, (const void *)qword_1ED4CEBF0);
    sub_1B19C326C(CFSTR("minimumDistance"), 0x90u, 1, 0, 0, 0, v1, v2);
    sub_1B19C326C(CFSTR("maximumDistance"), 0x94u, 1, 0, 0, 0, v3, v4);
    sub_1B19C3258();
  }
}

void sub_1B19BE2BC(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[11] = a2;
}

void sub_1B19BE30C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  *(_BYTE *)(a1 + 152) = a2;
}

void sub_1B19BE358(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  *(float *)(a1 + 144) = a2;
}

void sub_1B19BE3AC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  *(float *)(a1 + 148) = a2;
}

BOOL sub_1B19BE400(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  uint32_t v31;
  float32x4_t v32;
  uint32_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  int8x16_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int8x16_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int32x4_t v56;
  int8x16_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  int8x16_t v62;
  float v63;
  float v64;
  float32x4_t v65;
  int8x16_t v66;
  float32x4_t v67;
  int8x16_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float32x2_t v73;
  float32x2_t v74;
  float v75;
  float v76;
  int32x2_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float32x4_t v84;
  float v85;
  float32x4_t v86;
  int8x16_t v87;
  float32x4_t v88;
  int8x16_t v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float32x2_t v94;
  int32x2_t v95;
  float v96;
  float32x4_t v97;
  float v98;
  float v99;
  float v100;
  int8x16_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int32x4_t v107;
  int8x16_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int32x4_t v112;
  int8x16_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;
  int8x16_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int32x4_t v121;
  int8x16_t v122;
  float32x4_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  simd_float4x4 v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  const void *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  size_t v156;
  uint64_t v157;
  uint64_t v158;
  float32x4_t v160;
  float32x4_t v161;
  float v162;
  float v163;
  float v164;
  float v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  int8x16_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  simd_float4x4 v180;

  if (!a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"controller");
  v12 = *(float32x4_t **)(a3 + 16);
  v13 = v12[8].i64[1];
  if (v13)
  {
    v179.i32[2] = 0;
    v179.i64[0] = 0;
    v178.i32[2] = 0;
    v178.i64[0] = 0;
    sub_1B186B5BC(v13, (__n128 *)&v179, a4, a5, a6, a7, a8, a9);
    sub_1B186B5BC(a4, (__n128 *)&v178, v14, v15, v16, v17, v18, v19);
    v27 = vsubq_f32(v178, v179);
    v28 = vmulq_f32(v27, v27);
    v29 = vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1));
    v30 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), v29);
    v30.f32[0] = sqrtf(v30.f32[0]);
    v174 = v30;
    if (v30.f32[0] == 0.0)
    {
      v31 = arc4random();
      *(float32x2_t *)v32.f32 = vcvt_f32_u32((uint32x2_t)__PAIR64__(arc4random(), v31));
      v172 = v32;
      v33 = arc4random();
      v34 = v172;
      v34.f32[2] = (float)v33;
      v35 = (int32x4_t)vmulq_f32(v34, v34);
      v36 = v34;
      v37 = (float32x4_t)vdupq_laneq_s32(v35, 2);
      v35.i32[0] = vadd_f32(*(float32x2_t *)v37.f32, vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
      *(float32x2_t *)v37.f32 = vrsqrte_f32((float32x2_t)v35.u32[0]);
      *(float32x2_t *)v37.f32 = vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)));
      *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
      v38 = vmulq_n_f32(v36, vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v35.u32[0], *(float32x2_t *)v29.f32)).f32[0]);
    }
    else
    {
      v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0);
      v38 = vdivq_f32(v27, v37);
    }
    if (v12[9].i8[8])
    {
      v177 = 0uLL;
      v168 = v38;
      sub_1B186B63C(v12[8].i64[1], &v177, v21, v22, v23, v24, v25, v26);
      v173 = v177;
      v39 = vmulq_f32(v177, (float32x4_t)xmmword_1B2244F80);
      v40 = (int8x16_t)vmulq_f32(v39, v39);
      *(float32x2_t *)v40.i8 = vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
      v41 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1)), 0);
      v42 = vrsqrteq_f32(v41);
      v43 = vmulq_f32(v42, vrsqrtsq_f32(v41, vmulq_f32(v42, v42)));
      __asm { FMOV            V2.4S, #1.0 }
      v170 = _Q2;
      v171 = v39;
      v49 = vmulq_f32(v39, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v41), _Q2, (int8x16_t)vmulq_f32(v43, vrsqrtsq_f32(v41, vmulq_f32(v43, v43)))));
      v50 = vmulq_f32(v49, (float32x4_t)xmmword_1B2244F80);
      v51 = (int32x4_t)vnegq_f32(v50);
      v52 = (int8x16_t)vtrn2q_s32((int32x4_t)v50, vtrn1q_s32((int32x4_t)v50, v51));
      v53 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v50, (int8x16_t)v51, 8uLL), (float32x2_t)*(_OWORD *)&vnegq_f32(v168), 1);
      v54 = (float32x4_t)vrev64q_s32((int32x4_t)v50);
      v54.i32[0] = v51.i32[1];
      v54.i32[3] = v51.i32[2];
      v55 = vmlsq_laneq_f32(vmlsq_lane_f32(v53, (float32x4_t)vextq_s8(v52, v52, 8uLL), *(float32x2_t *)v168.f32, 0), v54, v168, 2);
      v56 = (int32x4_t)vnegq_f32(v55);
      v57 = (int8x16_t)vtrn2q_s32((int32x4_t)v55, vtrn1q_s32((int32x4_t)v55, v56));
      v58 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v55, (int8x16_t)v56, 8uLL), *(float32x2_t *)v49.f32, 1), (float32x4_t)vextq_s8(v57, v57, 8uLL), v49.f32[0]);
      v59 = (float32x4_t)vrev64q_s32((int32x4_t)v55);
      v59.i32[0] = v56.i32[1];
      v59.i32[3] = v56.i32[2];
      v169 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v55, v49, 3), v59, v49, 2), v58);
      *(double *)v60.i64 = sub_1B19C0644(v169, v12[11]);
      v61 = v60;
      v62 = (int8x16_t)vmulq_f32(v60, (float32x4_t)xmmword_1B2244E20);
      v166 = v61;
      v63 = 1.0;
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL))) >= 0.0)
      {
        v85 = 1.0 - a1;
        v86 = vsubq_f32((float32x4_t)xmmword_1B2244E20, v61);
        v87 = (int8x16_t)vmulq_f32(v86, v86);
        v88 = vaddq_f32(v61, (float32x4_t)xmmword_1B2244E20);
        v89 = (int8x16_t)vmulq_f32(v88, v88);
        v90 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)))));
        v91 = v90 + v90;
        _ZF = (float)(v90 + v90) == 0.0;
        v92 = 1.0;
        if (!_ZF)
          v92 = sinf(v91) / v91;
        v93 = v92;
        v94 = vrecpe_f32((float32x2_t)LODWORD(v92));
        v95 = (int32x2_t)vmul_f32(v94, vrecps_f32((float32x2_t)LODWORD(v93), v94));
        LODWORD(v96) = vmul_f32((float32x2_t)v95, vrecps_f32((float32x2_t)LODWORD(v93), (float32x2_t)v95)).u32[0];
        if ((float)(v85 * v91) != 0.0)
        {
          v164 = v96;
          *(float *)v95.i32 = sinf(v85 * v91);
          v96 = v164;
          v63 = *(float *)v95.i32 / (float)(v85 * v91);
        }
        *(float *)v95.i32 = v85 * (float)(v96 * v63);
        v97 = (float32x4_t)vdupq_lane_s32(v95, 0);
        v80 = a1;
        v98 = v91 * a1;
        v99 = 1.0;
        if (v98 != 0.0)
        {
          v161 = v97;
          v165 = v96;
          v100 = sinf(v98);
          v97 = v161;
          v96 = v165;
          v80 = a1;
          v99 = v100 / v98;
        }
        v84 = vmlaq_f32(vmulq_n_f32(v166, (float)(v96 * v99) * v80), (float32x4_t)xmmword_1B2244E20, v97);
      }
      else
      {
        v64 = 1.0 - a1;
        v65 = vaddq_f32(v61, (float32x4_t)xmmword_1B2244E20);
        v66 = (int8x16_t)vmulq_f32(v65, v65);
        v67 = vsubq_f32((float32x4_t)xmmword_1B2244E20, v61);
        v68 = (int8x16_t)vmulq_f32(v67, v67);
        v69 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)))));
        v70 = v69 + v69;
        _ZF = (float)(v69 + v69) == 0.0;
        v71 = 1.0;
        if (!_ZF)
          v71 = sinf(v70) / v70;
        v72 = v71;
        v73 = vrecpe_f32((float32x2_t)LODWORD(v71));
        v74 = vmul_f32(v73, vrecps_f32((float32x2_t)LODWORD(v72), v73));
        LODWORD(v75) = vmul_f32(v74, vrecps_f32((float32x2_t)LODWORD(v72), v74)).u32[0];
        if ((float)(v64 * v70) != 0.0)
        {
          v162 = v75;
          v76 = sinf(v64 * v70);
          v75 = v162;
          v63 = v76 / (float)(v64 * v70);
        }
        v77.i32[1] = v166.i32[1];
        v78 = vnegq_f32(v166);
        *(float *)v77.i32 = v64 * (float)(v75 * v63);
        v79 = (float32x4_t)vdupq_lane_s32(v77, 0);
        v80 = a1;
        v81 = v70 * a1;
        v82 = 1.0;
        if (v81 != 0.0)
        {
          v163 = v75;
          v167 = v78;
          v160 = v79;
          v83 = sinf(v81);
          v79 = v160;
          v75 = v163;
          v78 = v167;
          v80 = a1;
          v82 = v83 / v81;
        }
        v84 = vmlaq_f32(vmulq_n_f32(v78, (float)(v75 * v82) * v80), (float32x4_t)xmmword_1B2244E20, v79);
      }
      v101 = (int8x16_t)vmulq_f32(v84, v84);
      *(float32x2_t *)v101.i8 = vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
      v102 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1)), 0);
      v103 = vrsqrteq_f32(v102);
      v104 = vmulq_f32(v103, vrsqrtsq_f32(v102, vmulq_f32(v103, v103)));
      v105 = vmulq_f32(v84, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v102), v170, (int8x16_t)vmulq_f32(v104, vrsqrtsq_f32(v102, vmulq_f32(v104, v104)))));
      v106 = vmulq_f32(v105, (float32x4_t)xmmword_1B2244F80);
      v107 = (int32x4_t)vnegq_f32(v106);
      v108 = (int8x16_t)vtrn2q_s32((int32x4_t)v106, vtrn1q_s32((int32x4_t)v106, v107));
      v109 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v106, (int8x16_t)v107, 8uLL), *(float32x2_t *)v169.f32, 1);
      v110 = (float32x4_t)vrev64q_s32((int32x4_t)v106);
      v110.i32[0] = v107.i32[1];
      v110.i32[3] = v107.i32[2];
      v111 = vmlaq_laneq_f32(vmlaq_n_f32(v109, (float32x4_t)vextq_s8(v108, v108, 8uLL), v169.f32[0]), v110, v169, 2);
      v112 = (int32x4_t)vnegq_f32(v111);
      v113 = (int8x16_t)vtrn2q_s32((int32x4_t)v111, vtrn1q_s32((int32x4_t)v111, v112));
      v114 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v111, (int8x16_t)v112, 8uLL), *(float32x2_t *)v105.f32, 1), (float32x4_t)vextq_s8(v113, v113, 8uLL), v105.f32[0]);
      v115 = (float32x4_t)vrev64q_s32((int32x4_t)v111);
      v115.i32[0] = v112.i32[1];
      v115.i32[3] = v112.i32[2];
      v116 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v111, v105, 3), v115, v105, 2), v114);
      v117 = (int32x4_t)vnegq_f32(v171);
      v118 = (int8x16_t)vtrn2q_s32((int32x4_t)v171, vtrn1q_s32((int32x4_t)v171, v117));
      v119 = vmlsq_lane_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v171, (int8x16_t)v117, 8uLL), (float32x2_t)*(_OWORD *)&vnegq_f32(v116), 1), (float32x4_t)vextq_s8(v118, v118, 8uLL), *(float32x2_t *)v116.f32, 0);
      v120 = (float32x4_t)vrev64q_s32((int32x4_t)v171);
      v120.i32[0] = v117.i32[1];
      v120.i32[3] = v117.i32[2];
      v37 = vmlsq_laneq_f32(v119, v120, v116, 2);
      v121 = (int32x4_t)vnegq_f32(v37);
      v122 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, v121));
      v29 = (float32x4_t)vextq_s8(v122, v122, 8uLL);
      v123 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
      v123.i32[0] = v121.i32[1];
      v123.i32[3] = v121.i32[2];
      v38 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v37, v173, 3), v123, v173, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v121, 8uLL), *(float32x2_t *)v173.f32, 1), v29, v173.f32[0]));
    }
    else
    {
      v80 = a1;
    }
    v37.i32[0] = v12[9].i32[0];
    v29.i32[0] = v12[9].i32[1];
    v176 = vmlaq_n_f32(v178, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v37, v174), 0), (int8x16_t)vmlaq_n_f32(v179, v38, v37.f32[0]), vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v174, v29), 0), (int8x16_t)vmlaq_n_f32(v179, v38, v29.f32[0]), (int8x16_t)vmlaq_n_f32(v179, v38, v174.f32[0]))), v178), v80);
    v124 = sub_1B186B574(a4, v20, v21, v22, v23, v24, v25, v26);
    if (v124)
    {
      v132 = *(simd_float4x4 *)sub_1B1869AC8(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      v132.columns[0] = (simd_float4)xmmword_1B2244DB0;
      v132.columns[1] = (simd_float4)xmmword_1B2244DD0;
      v132.columns[2] = (simd_float4)xmmword_1B2244D90;
      v132.columns[3] = (simd_float4)xmmword_1B2244E20;
    }
    v180 = __invert_f4(v132);
    v177 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v180.columns[3], (float32x4_t)v180.columns[2], v176, 2), (float32x4_t)v180.columns[1], *(float32x2_t *)v176.f32, 1), (float32x4_t)v180.columns[0], v176.f32[0]);
    v140 = (const void *)sub_1B19C45CC(a5, v133, v134, v135, v136, v137, v138, v139);
    v148 = (void *)sub_1B19C4614(a5, v141, v142, v143, v144, v145, v146, v147);
    v156 = sub_1B179E250(8, v149, v150, v151, v152, v153, v154, v155);
    sub_1B17C58FC(v140, v148, &v177, v156, 6, 0, v157, v158);
  }
  return v13 != 0;
}

const __CFString *sub_1B19BEA3C()
{
  return CFSTR("transform");
}

int32x2_t sub_1B19BEA4C()
{
  uint64_t v0;
  int32x2_t result;

  if (qword_1ED4CEBD8 != -1)
    dispatch_once(&qword_1ED4CEBD8, &unk_1E63D15F0);
  v0 = sub_1B179CB90(qword_1ED4CEBE0, 0xB0uLL);
  *(_DWORD *)(v0 + 72) = 1065353216;
  *(_WORD *)(v0 + 76) = 257;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0x7F7FFFFF00000000;
  *(_BYTE *)(v0 + 152) = 0;
  *(_OWORD *)(v0 + 176) = xmmword_1B2244DF0;
  result = vdup_n_s32(0x43B40000u);
  *(int32x2_t *)(v0 + 156) = result;
  *(_QWORD *)(v0 + 88) = sub_1B19BE400;
  *(_QWORD *)(v0 + 96) = sub_1B19BEA3C;
  return result;
}

void sub_1B19BEAE4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!qword_1ED4CEBB8)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEBB8);
    qword_1ED4CEBB8 = (uint64_t)v0;
    if (qword_1ED4CEBE8 != -1)
      dispatch_once(&qword_1ED4CEBE8, &unk_1E63D1470);
    sub_1B19C3200(v0, (const void *)qword_1ED4CEBF0);
    sub_1B19C326C(CFSTR("maximumLinearAcceleration"), 0x8Cu, 1, 0, 0, 0, v1, v2);
    sub_1B19C326C(CFSTR("maximumLinearVelocity"), 0x88u, 1, 0, 0, 0, v3, v4);
    sub_1B19C326C(CFSTR("decelerationDistance"), 0x90u, 1, 0, 0, 0, v5, v6);
    sub_1B19C326C(CFSTR("damping"), 0x94u, 1, 0, 0, 0, v7, v8);
    sub_1B19C3258();
  }
}

void sub_1B19BEBEC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  *(float *)(a1 + 136) = a2;
}

void sub_1B19BEC40(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  *(float *)(a1 + 140) = a2;
}

uint64_t sub_1B19BEC94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v24;
  __n128 v25;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  v10 = malloc_type_calloc(1uLL, 0x60uLL, 0x100004084AB7CDAuLL);
  *(_QWORD *)(a2 + 56) = v10;
  v25.n128_u32[2] = 0;
  v25.n128_u64[0] = 0;
  sub_1B186B5BC(a3, &v25, v11, v12, v13, v14, v15, v16);
  *v10 = v25;
  v10[1] = 0u;
  v24 = 0uLL;
  sub_1B186B63C(a3, &v24, v17, v18, v19, v20, v21, v22);
  v10[2] = v24;
  v10[3] = 0u;
  return 1;
}

uint64_t sub_1B19BED48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  simd_float4x4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float v55;
  float v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float v60;
  float v61;
  float32x2_t v62;
  float32x2_t v63;
  float v64;
  float32x4_t v65;
  float32x4_t v66;
  float v67;
  float32x4_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x4_t v77;
  float32x4_t v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  int32x2_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v105;
  float32x4_t v106;
  simd_float4x4 v107;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  v13 = *(_QWORD *)(a2 + 56);
  v21 = sub_1B1815810(a1);
  if (v21 != *(double *)(v13 + 72))
  {
    v22 = sub_1B186B574(a3, v14, v15, v16, v17, v18, v19, v20);
    if (v22)
    {
      v30 = *(simd_float4x4 *)sub_1B1869AC8(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      v30.columns[0] = (simd_float4)xmmword_1B2244DB0;
      v30.columns[1] = (simd_float4)xmmword_1B2244DD0;
      v30.columns[2] = (simd_float4)xmmword_1B2244D90;
      v30.columns[3] = (simd_float4)xmmword_1B2244E20;
    }
    v107 = __invert_f4(v30);
    v102 = (float32x4_t)v107.columns[3];
    v103 = (float32x4_t)v107.columns[2];
    v100 = (float32x4_t)v107.columns[0];
    v101 = (float32x4_t)v107.columns[1];
    if (*(_BYTE *)(v13 + 80))
    {
      *(double *)v107.columns[0].i64 = v21 - *(double *)(v13 + 72);
      v107.columns[0].f32[0] = *(double *)v107.columns[0].i64;
    }
    else
    {
      v107.columns[0].i32[0] = 1015580809;
    }
    v99 = *(int32x2_t *)v107.columns[0].f32;
    v37 = *(float **)(a2 + 16);
    *(uint64_t *)((char *)v106.i64 + 4) = 0;
    v106.i32[0] = 0;
    sub_1B186B5BC(a3, (__n128 *)&v106, v31, v32, v33, v34, v35, v36);
    if (!*(_BYTE *)(v13 + 80))
    {
      *(float32x4_t *)v13 = v106;
      *(_BYTE *)(v13 + 80) = 1;
    }
    *(double *)(v13 + 72) = sub_1B1815810(a1);
    v45 = v37[34];
    v46 = v37[35];
    v47 = v106;
    v48 = *(float32x4_t *)v13;
    v49 = *(float32x4_t *)(v13 + 16);
    v50 = vsubq_f32(v106, *(float32x4_t *)v13);
    v51 = (float32x4_t)vdupq_lane_s32(v99, 0);
    v52 = vdivq_f32(v50, v51);
    v53 = vdivq_f32(vsubq_f32(v52, v49), v51);
    v54 = vmulq_f32(v53, v53);
    LODWORD(v55) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).u32[0];
    if (sqrtf(v55) > v46)
    {
      v56 = v55;
      v57 = vrsqrte_f32((float32x2_t)LODWORD(v55));
      v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)LODWORD(v56), vmul_f32(v57, v57)));
      v52 = vmlaq_f32(v49, v51, vmulq_n_f32(vmulq_n_f32(v53, vmul_f32(v58, vrsqrts_f32((float32x2_t)LODWORD(v56), vmul_f32(v58, v58))).f32[0]), v46));
    }
    v59 = vmulq_f32(v52, v52);
    LODWORD(v60) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u32[0];
    if (sqrtf(v60) > v45)
    {
      v61 = v60;
      v62 = vrsqrte_f32((float32x2_t)LODWORD(v60));
      v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v62, v62)));
      v52 = vmulq_n_f32(vmulq_n_f32(v52, vmul_f32(v63, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v63, v63))).f32[0]), v45);
    }
    v64 = v37[36];
    v65 = vmulq_n_f32(v52, 1.0 - v37[37]);
    if (v64 != 0.0)
    {
      v66 = vmulq_f32(v50, v50);
      v67 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0]);
      v68 = vmulq_f32(v65, v65);
      LODWORD(v69) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).u32[0];
      v70 = sqrtf(v69);
      if (v67 >= v64)
      {
        *(float *)(v13 + 64) = v70;
      }
      else
      {
        v71 = v67 / v64;
        if (v71 >= 1.0)
          v72 = 1.0;
        else
          v72 = v71 * v71;
        v73 = v72 * *(float *)(v13 + 64);
        if (v70 > v73)
        {
          v74 = v69;
          v75 = vrsqrte_f32((float32x2_t)LODWORD(v69));
          v76 = vmul_f32(v75, vrsqrts_f32((float32x2_t)LODWORD(v74), vmul_f32(v75, v75)));
          v65 = vmulq_n_f32(vmulq_n_f32(v65, vmul_f32(v76, vrsqrts_f32((float32x2_t)LODWORD(v74), vmul_f32(v76, v76))).f32[0]), v73);
        }
      }
    }
    v77 = vmlaq_f32(v48, v51, v65);
    if (a9 != 0.0)
    {
      v78 = vmlaq_n_f32(v47, vsubq_f32(v77, v47), a9);
      v65 = vdivq_f32(vsubq_f32(v78, v48), v51);
      v77 = v78;
    }
    *(float32x4_t *)v13 = v77;
    *(float32x4_t *)(v13 + 16) = v65;
    v105 = vaddq_f32(v102, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, v77.f32[0]), v101, *(float32x2_t *)v77.f32, 1), v103, v77, 2));
    v79 = (const void *)sub_1B19C45CC(a4, v38, v39, v40, v41, v42, v43, v44);
    v87 = (void *)sub_1B19C4614(a4, v80, v81, v82, v83, v84, v85, v86);
    v95 = sub_1B179E250(8, v88, v89, v90, v91, v92, v93, v94);
    sub_1B17C58FC(v79, v87, &v105, v95, 6, 0, v96, v97);
  }
  return 1;
}

const __CFString *sub_1B19BF06C()
{
  return CFSTR("transform");
}

double sub_1B19BF07C()
{
  uint64_t v0;
  double result;

  if (qword_1ED4CEBB0 != -1)
    dispatch_once(&qword_1ED4CEBB0, &unk_1E63D1650);
  v0 = sub_1B179CB90(qword_1ED4CEBB8, 0x88uLL);
  *(_DWORD *)(v0 + 72) = 1065353216;
  *(_WORD *)(v0 + 76) = 257;
  result = 1.40444743e306;
  *(_OWORD *)(v0 + 136) = xmmword_1B2268DB0;
  *(_QWORD *)(v0 + 88) = sub_1B19BED48;
  *(_QWORD *)(v0 + 96) = sub_1B19BF06C;
  *(_QWORD *)(v0 + 80) = sub_1B19BEC94;
  return result;
}

void sub_1B19BF100()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!qword_1ED4CEC28)
  {
    v0 = (void *)sub_1B179CB60(&qword_1ED4CEC28);
    qword_1ED4CEC28 = (uint64_t)v0;
    if (qword_1ED4CEBE8 != -1)
      dispatch_once(&qword_1ED4CEBE8, &unk_1E63D1470);
    sub_1B19C3200(v0, (const void *)qword_1ED4CEBF0);
    sub_1B19C326C(CFSTR("orientationOffset"), 0xC0u, 9, 3, 0, 0, v1, v2);
    sub_1B19C326C(CFSTR("positionOffset"), 0xA0u, 8, 6, 0, 0, v3, v4);
    sub_1B19C326C(CFSTR("scaleOffset"), 0xB0u, 8, 7, 0, 0, v5, v6);
    sub_1B19C3258();
  }
}

void sub_1B19BF1E8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xFE | a2;
}

void sub_1B19BF240(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  if (a2)
    v10 = 2;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xFD | v10;
}

void sub_1B19BF2A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  if (a2)
    v10 = 4;
  else
    v10 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 144) & 0xFB | v10;
}

void sub_1B19BF308(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 v10;

  if (!a1)
  {
    v10 = a2;
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[10] = a2;
}

uint64_t sub_1B19BF358(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  float32x4_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  simd_float4x4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int8 v38;
  float32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  float v71;
  float v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  int32x4_t v88;
  int32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  int32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  int32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  int8x16_t v101;
  int8x16_t v102;
  int32x4_t v103;
  int32x4_t v104;
  int8x16_t v105;
  float32x4_t v106;
  int32x4_t v107;
  int32x4_t v108;
  float v109;
  float32x4_t v110;
  float v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  int8x16_t v116;
  float32x2_t v117;
  unsigned __int32 v118;
  int8x16_t v120;
  int8x16_t v121;
  int8x16_t v122;
  float v123;
  float32x2_t v124;
  float32x2_t v125;
  float32x4_t v126;
  float32x2_t v127;
  uint64_t v128;
  float32x4_t v129;
  float v130;
  float32x2_t v131;
  float32x2_t v132;
  float32x4_t v133;
  float32x2_t v134;
  uint64_t v135;
  int32x2_t v136;
  float32x2_t v137;
  float32x2_t v138;
  float32x2_t v139;
  float32x2_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x2_t v143;
  float32x2_t v144;
  uint64_t v145;
  float32x4_t v146;
  float32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  int32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  int32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int32x4_t v165;
  int32x4_t v166;
  int8x16_t v167;
  float32x4_t v168;
  int32x4_t v169;
  int32x4_t v170;
  int8x16_t v171;
  float v173;
  float32x4_t v174;
  float v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  int8x16_t v180;
  int8x16_t v181;
  float v182;
  float32x2_t v183;
  float32x2_t v184;
  float32x2_t v185;
  uint64_t v186;
  int32x2_t v187;
  float32x4_t v188;
  float32x2_t v189;
  float32x2_t v190;
  int32x4_t v193;
  float32x4_t v197;
  float32x4_t v198;
  int8x16_t v199;
  float v200;
  float v201;
  float32x4_t v202;
  int8x16_t v203;
  float32x4_t v204;
  int8x16_t v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float32x2_t v210;
  float32x2_t v211;
  float v212;
  float v213;
  int32x2_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float v217;
  float v218;
  float v219;
  float v220;
  float32x4_t v221;
  float32x4_t v222;
  int8x16_t v223;
  float32x4_t v224;
  int8x16_t v225;
  float v226;
  float v227;
  float v228;
  float v229;
  float32x2_t v230;
  int32x2_t v231;
  float v232;
  float32x4_t v233;
  float v234;
  float v235;
  float v236;
  float v237;
  int8x16_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t *v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  float32x4_t *v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  uint64_t v264;
  float32x4_t v265;
  int8x16_t v266;
  int8x16_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float v270;
  float32x2_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  const void *v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  void *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  size_t v293;
  uint64_t v294;
  uint64_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float v298;
  float v299;
  float v300;
  float v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  __n128 v315[4];
  float32x4_t v316;
  simd_float4x4 v317;

  if (!a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a4, a5, a6, a7, a8, a9, (uint64_t)"controller");
  v12 = *(float32x4_t **)(a3 + 16);
  if (!v12[8].i64[1])
    return 0;
  v13 = sub_1B186B574(a4, a3, a4, a5, a6, a7, a8, a9);
  result = sub_1B1869AC8(a4, v14, v15, v16, v17, v18, v19, v20);
  if (!result)
    return result;
  v29 = (float32x4_t *)result;
  if (v13)
  {
    v30 = *(simd_float4x4 *)sub_1B1869AC8(v13, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    v30.columns[0] = (simd_float4)xmmword_1B2244DB0;
    v30.columns[1] = (simd_float4)xmmword_1B2244DD0;
    v30.columns[2] = (simd_float4)xmmword_1B2244D90;
    v30.columns[3] = (simd_float4)xmmword_1B2244E20;
  }
  v317 = __invert_f4(v30);
  v38 = v12[9].i8[0];
  v312 = (float32x4_t)v317.columns[1];
  v313 = (float32x4_t)v317.columns[0];
  v310 = (float32x4_t)v317.columns[3];
  v311 = (float32x4_t)v317.columns[2];
  if ((v38 & 1) != 0)
  {
    v316.i32[2] = 0;
    v316.i64[0] = 0;
    sub_1B186B5BC(v12[8].i64[1], (__n128 *)&v316, v32, v33, v34, v35, v36, v37);
    v315[0].n128_u32[2] = 0;
    v315[0].n128_u64[0] = 0;
    sub_1B186B5BC(a4, v315, v40, v41, v42, v43, v44, v45);
    v39 = vmlaq_n_f32((float32x4_t)v315[0], vsubq_f32(vaddq_f32(v316, v12[10]), (float32x4_t)v315[0]), a1);
    v38 = v12[9].i8[0];
  }
  else
  {
    v39 = v29[3];
  }
  v309 = v39;
  if ((v38 & 2) != 0)
  {
    v76 = sub_1B1869AC8(v12[8].i64[1], v31, v32, v33, v34, v35, v36, v37);
    v84 = *(float32x4_t *)(v76 + 16);
    v85 = *(float32x4_t *)(v76 + 32);
    v86 = (int32x4_t)vmulq_f32(*(float32x4_t *)v76, *(float32x4_t *)v76);
    v87 = (int32x4_t)vmulq_f32(v84, v84);
    v88 = (int32x4_t)vmulq_f32(v85, v85);
    v89 = vzip2q_s32(v86, v88);
    v90 = (float32x4_t)vzip1q_s32(vzip1q_s32(v86, v88), v87);
    v91 = (float32x4_t)vtrn2q_s32(v86, v87);
    v91.i32[2] = v88.i32[1];
    v92 = vaddq_f32((float32x4_t)vzip1q_s32(v89, vdupq_laneq_s32(v87, 2)), vaddq_f32(v90, v91));
    v91.i64[0] = 0x80000000800000;
    v91.i64[1] = 0x80000000800000;
    v93 = vcgeq_f32(v91, v92);
    v92.i32[3] = 0;
    v94 = vrsqrteq_f32(v92);
    v95 = vmulq_f32(v94, vrsqrtsq_f32(v92, vmulq_f32(v94, v94)));
    v96 = v93;
    v96.i32[3] = 0;
    v97 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v96), (int8x16_t)v92, (int8x16_t)vmulq_f32(v95, vrsqrtsq_f32(v92, vmulq_f32(v95, v95))));
    v98 = vmulq_n_f32(*(float32x4_t *)v76, v97.f32[0]);
    v99 = vmulq_lane_f32(v84, *(float32x2_t *)v97.f32, 1);
    v100 = vmulq_laneq_f32(v85, v97, 2);
    v101 = (int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100);
    v102 = (int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99);
    v103 = (int32x4_t)v98;
    if (v93.i32[0])
    {
      v104 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v101, (int8x16_t)v100, 0xCuLL), vnegq_f32(v99)), v100, (float32x4_t)vextq_s8(v102, (int8x16_t)v99, 0xCuLL));
      v103 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v104, v104), (int8x16_t)v104, 0xCuLL);
    }
    v105 = (int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98);
    v106 = v99;
    if (v93.i32[1])
    {
      v107 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v105, (int8x16_t)v98, 0xCuLL), vnegq_f32(v100)), v98, (float32x4_t)vextq_s8(v101, (int8x16_t)v100, 0xCuLL));
      v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v107, v107), (int8x16_t)v107, 0xCuLL);
    }
    if (v93.i32[2])
    {
      v108 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v102, (int8x16_t)v99, 0xCuLL), vnegq_f32(v98)), v99, (float32x4_t)vextq_s8(v105, (int8x16_t)v98, 0xCuLL));
      v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL);
    }
    v109 = (float)(*(float *)v103.i32 + v106.f32[1]) + v100.f32[2];
    if (v109 > 0.0)
    {
      v110 = (float32x4_t)vzip2q_s32((int32x4_t)v106, vuzp1q_s32((int32x4_t)v106, (int32x4_t)v100));
      v110.i32[2] = v103.i32[1];
      v111 = sqrtf(v109 + 1.0);
      v112 = (float32x4_t)vtrn2q_s32((int32x4_t)v100, vzip2q_s32((int32x4_t)v100, v103));
      v112.i32[2] = v106.i32[0];
      v113 = vsubq_f32(v110, v112);
      v110.f32[3] = v111;
      v112.f32[3] = v111;
      v114 = vmulq_f32(v110, v112);
      v113.i32[3] = v114.i32[3];
      v306 = v113;
LABEL_47:
      v114.f32[0] = 0.5 / v111;
      v302 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 0);
LABEL_48:
      v145 = sub_1B1869AC8(a4, v77, v78, v79, v80, v81, v82, v83);
      v146 = *(float32x4_t *)(v145 + 16);
      v147 = *(float32x4_t *)(v145 + 32);
      v148 = (int32x4_t)vmulq_f32(*(float32x4_t *)v145, *(float32x4_t *)v145);
      v149 = (int32x4_t)vmulq_f32(v146, v146);
      v150 = (int32x4_t)vmulq_f32(v147, v147);
      v151 = vzip2q_s32(v148, v150);
      v152 = (float32x4_t)vzip1q_s32(vzip1q_s32(v148, v150), v149);
      v153 = (float32x4_t)vtrn2q_s32(v148, v149);
      v153.i32[2] = v150.i32[1];
      v154 = vaddq_f32((float32x4_t)vzip1q_s32(v151, vdupq_laneq_s32(v149, 2)), vaddq_f32(v152, v153));
      v153.i64[0] = 0x80000000800000;
      v153.i64[1] = 0x80000000800000;
      v155 = vcgeq_f32(v153, v154);
      v154.i32[3] = 0;
      v156 = vrsqrteq_f32(v154);
      v157 = vmulq_f32(v156, vrsqrtsq_f32(v154, vmulq_f32(v156, v156)));
      v158 = v155;
      v158.i32[3] = 0;
      v159 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v158), (int8x16_t)v154, (int8x16_t)vmulq_f32(v157, vrsqrtsq_f32(v154, vmulq_f32(v157, v157))));
      v160 = vmulq_n_f32(*(float32x4_t *)v145, v159.f32[0]);
      v161 = vmulq_lane_f32(v146, *(float32x2_t *)v159.f32, 1);
      v162 = vmulq_laneq_f32(v147, v159, 2);
      v163 = (int8x16_t)vuzp1q_s32((int32x4_t)v162, (int32x4_t)v162);
      v164 = (int8x16_t)vuzp1q_s32((int32x4_t)v161, (int32x4_t)v161);
      v165 = (int32x4_t)v160;
      if (v155.i32[0])
      {
        v166 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v163, (int8x16_t)v162, 0xCuLL), vnegq_f32(v161)), v162, (float32x4_t)vextq_s8(v164, (int8x16_t)v161, 0xCuLL));
        v165 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v166, v166), (int8x16_t)v166, 0xCuLL);
      }
      v167 = (int8x16_t)vuzp1q_s32((int32x4_t)v160, (int32x4_t)v160);
      v168 = v161;
      if (v155.i32[1])
      {
        v169 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v167, (int8x16_t)v160, 0xCuLL), vnegq_f32(v162)), v160, (float32x4_t)vextq_s8(v163, (int8x16_t)v162, 0xCuLL));
        v168 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v169, v169), (int8x16_t)v169, 0xCuLL);
      }
      if (v155.i32[2])
      {
        v170 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v164, (int8x16_t)v161, 0xCuLL), vnegq_f32(v160)), v161, (float32x4_t)vextq_s8(v167, (int8x16_t)v160, 0xCuLL));
        v162 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v170, v170), (int8x16_t)v170, 0xCuLL);
      }
      v171.i64[1] = v302.i64[1];
      _Q0 = vmulq_f32(v306, v302);
      v173 = (float)(*(float *)v165.i32 + v168.f32[1]) + v162.f32[2];
      if (v173 > 0.0)
      {
        v174 = (float32x4_t)vzip2q_s32((int32x4_t)v168, vuzp1q_s32((int32x4_t)v168, (int32x4_t)v162));
        v174.i32[2] = v165.i32[1];
        v175 = sqrtf(v173 + 1.0);
        v176 = (float32x4_t)vtrn2q_s32((int32x4_t)v162, vzip2q_s32((int32x4_t)v162, v165));
        v176.i32[2] = v168.i32[0];
        v178 = vsubq_f32(v174, v176);
        v174.f32[3] = v175;
        v176.f32[3] = v175;
        v177 = vmulq_f32(v174, v176);
        v178.i32[3] = v177.i32[3];
LABEL_65:
        v177.f32[0] = 0.5 / v175;
        v188 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v177.f32, 0);
        goto LABEL_66;
      }
      if (*(float *)v165.i32 < v168.f32[1] || *(float *)v165.i32 < v162.f32[2])
      {
        if (v168.f32[1] <= v162.f32[2])
        {
          v175 = sqrtf((float)((float)(v162.f32[2] + 1.0) - *(float *)v165.i32) - v168.f32[1]);
          *(float32x2_t *)v178.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v165, (int32x4_t)v168), *(float32x2_t *)v162.f32);
          v189 = (float32x2_t)__PAIR64__(v165.u32[1], LODWORD(v175));
          v190 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.f32, 0);
          *(float32x2_t *)v177.f32 = vsub_f32(*(float32x2_t *)v165.i8, v190);
          v190.f32[0] = v175;
          v190.i32[0] = vmul_f32(v189, v190).u32[0];
          v190.i32[1] = v177.i32[1];
          *(float32x2_t *)&v178.u32[2] = v190;
          goto LABEL_65;
        }
        v182 = sqrtf((float)((float)(v168.f32[1] + 1.0) - *(float *)v165.i32) - v162.f32[2]);
        *(int32x2_t *)v171.i8 = vdup_laneq_s32((int32x4_t)v168, 2);
        v180 = v171;
        *(float *)v180.i32 = v182;
        v180.i32[0] = vmul_f32(*(float32x2_t *)v180.i8, (float32x2_t)__PAIR64__(v162.u32[1], LODWORD(v182))).u32[0];
        v180.i32[1] = vadd_f32(*(float32x2_t *)&v171, *(float32x2_t *)&v162).i32[1];
        v181 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v165.i8, 1), v168);
        v187 = (int32x2_t)vsubq_f32(v162, (float32x4_t)vdupq_laneq_s32(v165, 2)).u64[0];
        v188 = (float32x4_t)vextq_s8(vextq_s8(v181, v181, 4uLL), v180, 0xCuLL);
        v188.i32[3] = v187.i32[0];
      }
      else
      {
        v182 = sqrtf((float)((float)(*(float *)v165.i32 + 1.0) - v168.f32[1]) - v162.f32[2]);
        v183 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.f32, 0);
        v184 = vadd_f32(*(float32x2_t *)v165.i8, v183);
        v183.f32[0] = v182;
        v188.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v165.u32[1], LODWORD(v182)), v183).u32[0];
        v188.i32[1] = v184.i32[1];
        v185 = (float32x2_t)vzip2q_s32(v165, (int32x4_t)v168).u64[0];
        LODWORD(v186) = vadd_f32(v185, *(float32x2_t *)v162.f32).u32[0];
        v187 = (int32x2_t)vsub_f32(v185, *(float32x2_t *)v162.f32);
        HIDWORD(v186) = v187.i32[1];
        v188.i64[1] = v186;
      }
      *(float *)v187.i32 = 0.5 / v182;
      v178 = (float32x4_t)vdupq_lane_s32(v187, 0);
LABEL_66:
      _Q1 = v12[12];
      _S3 = _Q1.i32[3];
      v193 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL), vnegq_f32(_Q0)), _Q1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
      v197 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(_Q0, _Q1, 3), _Q1, _Q0, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v193, v193), (int8x16_t)v193, 0xCuLL));
      __asm { FMLA            S1, S3, V0.S[3] }
      v197.i32[3] = _Q1.i32[0];
      v198 = vmulq_f32(v178, v188);
      v199 = (int8x16_t)vmulq_f32(v198, v197);
      v303 = v197;
      v307 = v198;
      v200 = 1.0;
      v201 = 1.0 - a1;
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v199.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v199, v199, 8uLL))) >= 0.0)
      {
        v222 = vsubq_f32(v198, v197);
        v223 = (int8x16_t)vmulq_f32(v222, v222);
        v224 = vaddq_f32(v198, v197);
        v225 = (int8x16_t)vmulq_f32(v224, v224);
        v226 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v223.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v223, v223, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v225.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v225, v225, 8uLL)))));
        v227 = v226 + v226;
        _ZF = (float)(v226 + v226) == 0.0;
        v228 = 1.0;
        if (!_ZF)
          v228 = sinf(v227) / v227;
        v229 = v228;
        v230 = vrecpe_f32((float32x2_t)LODWORD(v228));
        v231 = (int32x2_t)vmul_f32(v230, vrecps_f32((float32x2_t)LODWORD(v229), v230));
        LODWORD(v232) = vmul_f32((float32x2_t)v231, vrecps_f32((float32x2_t)LODWORD(v229), (float32x2_t)v231)).u32[0];
        if ((float)(v201 * v227) != 0.0)
        {
          v300 = v232;
          *(float *)v231.i32 = sinf(v201 * v227);
          v232 = v300;
          v200 = *(float *)v231.i32 / (float)(v201 * v227);
        }
        *(float *)v231.i32 = v201 * (float)(v232 * v200);
        v233 = (float32x4_t)vdupq_lane_s32(v231, 0);
        v234 = a1;
        v235 = v227 * a1;
        v236 = 1.0;
        if (v235 != 0.0)
        {
          v297 = v233;
          v301 = v232;
          v237 = sinf(v235);
          v233 = v297;
          v232 = v301;
          v234 = a1;
          v236 = v237 / v235;
        }
        v221 = vmlaq_f32(vmulq_n_f32(v303, (float)(v232 * v236) * v234), v307, v233);
      }
      else
      {
        v202 = vaddq_f32(v198, v197);
        v203 = (int8x16_t)vmulq_f32(v202, v202);
        v204 = vsubq_f32(v198, v197);
        v205 = (int8x16_t)vmulq_f32(v204, v204);
        v206 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v203.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v205.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v205, v205, 8uLL)))));
        v207 = v206 + v206;
        _ZF = (float)(v206 + v206) == 0.0;
        v208 = 1.0;
        if (!_ZF)
          v208 = sinf(v207) / v207;
        v209 = v208;
        v210 = vrecpe_f32((float32x2_t)LODWORD(v208));
        v211 = vmul_f32(v210, vrecps_f32((float32x2_t)LODWORD(v209), v210));
        LODWORD(v212) = vmul_f32(v211, vrecps_f32((float32x2_t)LODWORD(v209), v211)).u32[0];
        if ((float)(v201 * v207) != 0.0)
        {
          v298 = v212;
          v213 = sinf(v201 * v207);
          v212 = v298;
          v200 = v213 / (float)(v201 * v207);
        }
        v214.i32[1] = v303.i32[1];
        v215 = vnegq_f32(v303);
        *(float *)v214.i32 = v201 * (float)(v212 * v200);
        v216 = (float32x4_t)vdupq_lane_s32(v214, 0);
        v217 = a1;
        v218 = v207 * a1;
        v219 = 1.0;
        if (v218 != 0.0)
        {
          v299 = v212;
          v304 = v215;
          v296 = v216;
          v220 = sinf(v218);
          v216 = v296;
          v212 = v299;
          v215 = v304;
          v217 = a1;
          v219 = v220 / v218;
        }
        v221 = vmlaq_f32(vmulq_n_f32(v215, (float)(v212 * v219) * v217), v307, v216);
      }
      v238 = (int8x16_t)vmulq_f32(v221, v221);
      *(float32x2_t *)v238.i8 = vadd_f32(*(float32x2_t *)v238.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL));
      v239 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v238.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v238.i8, 1)), 0);
      v240 = vrsqrteq_f32(v239);
      v241 = vmulq_f32(v240, vrsqrtsq_f32(v239, vmulq_f32(v240, v240)));
      __asm { FMOV            V3.4S, #1.0 }
      v129 = vmulq_f32(v221, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v239), _Q3, (int8x16_t)vmulq_f32(v241, vrsqrtsq_f32(v239, vmulq_f32(v241, v241)))));
      v39 = v309;
      goto LABEL_82;
    }
    if (*(float *)v103.i32 < v106.f32[1] || *(float *)v103.i32 < v100.f32[2])
    {
      if (v106.f32[1] <= v100.f32[2])
      {
        v111 = sqrtf((float)((float)(v100.f32[2] + 1.0) - *(float *)v103.i32) - v106.f32[1]);
        *(float32x2_t *)v142.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v103, (int32x4_t)v106), *(float32x2_t *)v100.f32);
        v143 = (float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v111));
        v144 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0);
        *(float32x2_t *)v114.f32 = vsub_f32(*(float32x2_t *)v103.i8, v144);
        v144.f32[0] = v111;
        v143.i32[0] = vmul_f32(v143, v144).u32[0];
        v143.i32[1] = v114.i32[1];
        *(float32x2_t *)&v142.u32[2] = v143;
        v306 = v142;
        goto LABEL_47;
      }
      v130 = sqrtf((float)((float)(v106.f32[1] + 1.0) - *(float *)v103.i32) - v100.f32[2]);
      *(int32x2_t *)v99.f32 = vdup_laneq_s32((int32x4_t)v106, 2);
      v120 = (int8x16_t)v99;
      *(float *)v120.i32 = v130;
      v120.i32[0] = vmul_f32(*(float32x2_t *)v120.i8, (float32x2_t)__PAIR64__(v100.u32[1], LODWORD(v130))).u32[0];
      v120.i32[1] = vadd_f32(*(float32x2_t *)&v99, *(float32x2_t *)&v100).i32[1];
      v121 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.i8, 1), v106);
      v136 = (int32x2_t)vsubq_f32(v100, (float32x4_t)vdupq_laneq_s32(v103, 2)).u64[0];
      v122 = vextq_s8(vextq_s8(v121, v121, 4uLL), v120, 0xCuLL);
      v122.i32[3] = v136.i32[0];
      v302 = (float32x4_t)v122;
    }
    else
    {
      v130 = sqrtf((float)((float)(*(float *)v103.i32 + 1.0) - v106.f32[1]) - v100.f32[2]);
      v131 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0);
      v132 = vadd_f32(*(float32x2_t *)v103.i8, v131);
      v131.f32[0] = v130;
      v133.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v130)), v131).u32[0];
      v133.i32[1] = v132.i32[1];
      v134 = (float32x2_t)vzip2q_s32(v103, (int32x4_t)v106).u64[0];
      LODWORD(v135) = vadd_f32(v134, *(float32x2_t *)v100.f32).u32[0];
      v136 = (int32x2_t)vsub_f32(v134, *(float32x2_t *)v100.f32);
      HIDWORD(v135) = v136.i32[1];
      v133.i64[1] = v135;
      v302 = v133;
    }
    *(float *)v136.i32 = 0.5 / v130;
    v306 = (float32x4_t)vdupq_lane_s32(v136, 0);
    goto LABEL_48;
  }
  v46 = v29[1];
  v47 = v29[2];
  v48 = (int32x4_t)vmulq_f32(*v29, *v29);
  v49 = (int32x4_t)vmulq_f32(v46, v46);
  v50 = (int32x4_t)vmulq_f32(v47, v47);
  v51 = vzip2q_s32(v48, v50);
  v52 = (float32x4_t)vzip1q_s32(vzip1q_s32(v48, v50), v49);
  v53 = (float32x4_t)vtrn2q_s32(v48, v49);
  v53.i32[2] = v50.i32[1];
  v54 = vaddq_f32((float32x4_t)vzip1q_s32(v51, vdupq_laneq_s32(v49, 2)), vaddq_f32(v52, v53));
  v53.i64[0] = 0x80000000800000;
  v53.i64[1] = 0x80000000800000;
  v55 = vcgeq_f32(v53, v54);
  v54.i32[3] = 0;
  v56 = vrsqrteq_f32(v54);
  v57 = vmulq_f32(v56, vrsqrtsq_f32(v54, vmulq_f32(v56, v56)));
  v58 = v55;
  v58.i32[3] = 0;
  v59 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v58), (int8x16_t)v54, (int8x16_t)vmulq_f32(v57, vrsqrtsq_f32(v54, vmulq_f32(v57, v57))));
  v60 = vmulq_n_f32(*v29, v59.f32[0]);
  v61 = vmulq_lane_f32(v46, *(float32x2_t *)v59.f32, 1);
  v62 = vmulq_laneq_f32(v47, v59, 2);
  v63 = (int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62);
  v64 = (int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61);
  v65 = (int32x4_t)v60;
  if (v55.i32[0])
  {
    v66 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v63, (int8x16_t)v62, 0xCuLL), vnegq_f32(v61)), v62, (float32x4_t)vextq_s8(v64, (int8x16_t)v61, 0xCuLL));
    v65 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v66, 0xCuLL);
  }
  v67 = (int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60);
  v68 = v61;
  if (v55.i32[1])
  {
    v69 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v67, (int8x16_t)v60, 0xCuLL), vnegq_f32(v62)), v60, (float32x4_t)vextq_s8(v63, (int8x16_t)v62, 0xCuLL));
    v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v69, v69), (int8x16_t)v69, 0xCuLL);
  }
  if (v55.i32[2])
  {
    v70 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v64, (int8x16_t)v61, 0xCuLL), vnegq_f32(v60)), v61, (float32x4_t)vextq_s8(v67, (int8x16_t)v60, 0xCuLL));
    v62 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v70, v70), (int8x16_t)v70, 0xCuLL);
  }
  v71 = (float)(*(float *)v65.i32 + v68.f32[1]) + v62.f32[2];
  if (v71 > 0.0)
  {
    v72 = sqrtf(v71 + 1.0);
    v73 = (float32x4_t)vzip2q_s32((int32x4_t)v68, vuzp1q_s32((int32x4_t)v68, (int32x4_t)v62));
    v73.i32[2] = v65.i32[1];
    v74 = (float32x4_t)vtrn2q_s32((int32x4_t)v62, vzip2q_s32((int32x4_t)v62, v65));
    v74.i32[2] = v68.i32[0];
    v75 = vsubq_f32(v73, v74);
    v73.f32[3] = v72;
    v74.f32[3] = v72;
    v75.i32[3] = vmulq_f32(v73, v74).i32[3];
LABEL_36:
    v129 = vmulq_n_f32(v75, 0.5 / v72);
    goto LABEL_82;
  }
  if (*(float *)v65.i32 < v68.f32[1] || *(float *)v65.i32 < v62.f32[2])
  {
    if (v68.f32[1] <= v62.f32[2])
    {
      v137 = (float32x2_t)vzip2q_s32(v65, (int32x4_t)v68).u64[0];
      v138 = (float32x2_t)__PAIR64__(v65.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v62.f32[2] + 1.0) - *(float *)v65.i32) - v68.f32[1])));
      v139 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.f32, 0);
      v140 = vsub_f32(*(float32x2_t *)v65.i8, v139);
      v139.i32[0] = v138.i32[0];
      v139.i32[0] = vmul_f32(v138, v139).u32[0];
      v139.i32[1] = v140.i32[1];
      *(float32x2_t *)v141.f32 = vadd_f32(v137, *(float32x2_t *)v62.f32);
      *(float32x2_t *)&v141.u32[2] = v139;
      v129 = vmulq_n_f32(v141, 0.5 / v138.f32[0]);
      goto LABEL_82;
    }
    v72 = sqrtf((float)((float)(v68.f32[1] + 1.0) - *(float *)v65.i32) - v62.f32[2]);
    v116 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 1), v68);
    *(int32x2_t *)v68.f32 = vdup_laneq_s32((int32x4_t)v68, 2);
    v117 = vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v62.f32);
    v68.f32[0] = v72;
    v68.i32[0] = vmul_f32(*(float32x2_t *)v68.f32, (float32x2_t)__PAIR64__(v62.u32[1], LODWORD(v72))).u32[0];
    v68.i32[1] = v117.i32[1];
    v118 = vsubq_f32(v62, (float32x4_t)vdupq_laneq_s32(v65, 2)).u32[0];
    v75 = (float32x4_t)vextq_s8(vextq_s8(v116, v116, 4uLL), (int8x16_t)v68, 0xCuLL);
    v75.i32[3] = v118;
    goto LABEL_36;
  }
  v123 = sqrtf((float)((float)(*(float *)v65.i32 + 1.0) - v68.f32[1]) - v62.f32[2]);
  v124 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.f32, 0);
  v125 = vadd_f32(*(float32x2_t *)v65.i8, v124);
  v124.f32[0] = v123;
  v126.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v65.u32[1], LODWORD(v123)), v124).u32[0];
  v126.i32[1] = v125.i32[1];
  v127 = (float32x2_t)vzip2q_s32(v65, (int32x4_t)v68).u64[0];
  LODWORD(v128) = vadd_f32(v127, *(float32x2_t *)v62.f32).u32[0];
  HIDWORD(v128) = vsub_f32(v127, *(float32x2_t *)&v62).i32[1];
  v126.i64[1] = v128;
  v129 = vmulq_n_f32(v126, 0.5 / v123);
LABEL_82:
  if ((v12[9].i8[0] & 4) != 0)
  {
    v308 = v129;
    v247 = (float32x4_t *)sub_1B1869AC8(v12[8].i64[1], v31, v32, v33, v34, v35, v36, v37);
    v248 = vmulq_f32(*v247, *v247);
    v249 = vmulq_f32(v247[1], v247[1]);
    v250.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v248, 2), vaddq_f32(v248, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v248.f32, 1))).f32[0]);
    v248.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v249, 2), vaddq_f32(v249, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v249.f32, 1))).f32[0]);
    v251 = vmulq_f32(v247[2], v247[2]);
    v250.i32[1] = v248.i32[0];
    v250.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v251, 2), vaddq_f32(v251, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v251.f32, 1))).f32[0]);
    v305 = v250;
    v259 = (float32x4_t *)sub_1B1869AC8(a4, v252, v253, v254, v255, v256, v257, v258);
    v129 = v308;
    v39 = v309;
    v260 = vmulq_f32(*v259, *v259);
    v261 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v260, 2), vaddq_f32(v260, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 1)));
    v261.f32[0] = sqrtf(v261.f32[0]);
    v262 = vmulq_f32(v259[1], v259[1]);
    v263 = vmulq_f32(v259[2], v259[2]);
    v261.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v262, 2), vaddq_f32(v262, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v262.f32, 1))).f32[0]);
    v261.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v263, 2), vaddq_f32(v263, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v263.f32, 1))).f32[0]);
    v246 = vmlaq_n_f32(v261, vsubq_f32(vmulq_f32(v305, v12[11]), v261), a1);
  }
  else
  {
    v243 = vmulq_f32(*v29, *v29);
    v246 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v243, 2), vaddq_f32(v243, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v243.f32, 1)));
    v244 = vmulq_f32(v29[1], v29[1]);
    v246.f32[0] = sqrtf(v246.f32[0]);
    v245 = vmulq_f32(v29[2], v29[2]);
    v246.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v244, 2), vaddq_f32(v244, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v244.f32, 1))).f32[0]);
    v246.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v245, 2), vaddq_f32(v245, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v245.f32, 1))).f32[0]);
  }
  v264 = 0;
  v39.i32[3] = 1.0;
  v265 = vabsq_f32(v246);
  v265.i32[3] = 0;
  v266.i64[0] = 0x8000000080000000;
  v266.i64[1] = 0x8000000080000000;
  v267 = vandq_s8((int8x16_t)v246, v266);
  v268 = vmulq_f32(v129, v129);
  v269 = vmulq_laneq_f32(v129, v129, 3);
  v270 = vmulq_lane_f32(v129, *(float32x2_t *)v129.f32, 1).f32[0];
  v268.f32[0] = 0.5 - v268.f32[0];
  v271 = vmul_laneq_f32(*(float32x2_t *)v129.f32, v129, 2);
  v272.i32[3] = 0;
  v272.f32[0] = (float)(0.5 - v268.f32[1]) - v268.f32[2];
  v272.f32[1] = v270 + v269.f32[2];
  v272.f32[2] = v271.f32[0] - v269.f32[1];
  v273.i32[3] = 0;
  v273.f32[0] = v270 - v269.f32[2];
  v273.f32[1] = v268.f32[0] - v268.f32[2];
  v273.f32[2] = v271.f32[1] + v269.f32[0];
  *(int32x2_t *)v269.f32 = vrev64_s32(*(int32x2_t *)v269.f32);
  v274.i32[0] = vadd_f32(v271, *(float32x2_t *)v269.f32).u32[0];
  v274.i32[1] = vsub_f32(v271, *(float32x2_t *)&v269).i32[1];
  v274.f32[2] = v268.f32[0] - v268.f32[1];
  v275 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v265, (float32x4_t)xmmword_1B2245780) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), v267);
  v274.i32[3] = 0;
  v276 = vaddq_f32(v275, v275);
  v315[0] = (__n128)vmulq_n_f32(v272, v276.f32[0]);
  v315[1] = (__n128)vmulq_lane_f32(v273, *(float32x2_t *)v276.f32, 1);
  v315[2] = (__n128)vmulq_laneq_f32(v274, v276, 2);
  v315[3] = (__n128)v39;
  memset(&v316, 0, 64);
  do
  {
    *(float32x4_t *)((char *)&v316 + v264 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v313, COERCE_FLOAT(*(_OWORD *)&v315[v264])), v312, (float32x2_t)v315[v264].n128_u64[0], 1), v311, (float32x4_t)v315[v264], 2), v310, (float32x4_t)v315[v264], 3);
    ++v264;
  }
  while (v264 != 4);
  v277 = (const void *)sub_1B19C45CC(a5, v31, v32, v33, v34, v35, v36, v37);
  v285 = (void *)sub_1B19C4614(a5, v278, v279, v280, v281, v282, v283, v284);
  v293 = sub_1B179E250(10, v286, v287, v288, v289, v290, v291, v292);
  sub_1B17C58FC(v277, v285, &v316, v293, *(char *)(a5 + 34), *(unsigned __int8 *)(a5 + 35), v294, v295);
  return 1;
}

const __CFString *sub_1B19C0104()
{
  return CFSTR("transform");
}

double sub_1B19C0114()
{
  uint64_t v0;
  double result;

  if (qword_1ED4CEC20 != -1)
    dispatch_once(&qword_1ED4CEC20, &unk_1E63D16F0);
  v0 = sub_1B179CB90(qword_1ED4CEC28, 0xC0uLL);
  *(_DWORD *)(v0 + 72) = 1065353216;
  *(_WORD *)(v0 + 76) = 257;
  *(_BYTE *)(v0 + 144) = 7;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = _Q1;
  result = 0.0;
  *(_OWORD *)(v0 + 192) = xmmword_1B2244E20;
  *(_QWORD *)(v0 + 88) = sub_1B19BF358;
  *(_QWORD *)(v0 + 96) = sub_1B19C0104;
  return result;
}

void sub_1B19C01A4(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 32);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 32) = 0;
  }
  v4 = *(const void **)(a1 + 24);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 24) = 0;
  }
  free(*(void **)(a1 + 56));
}

CFStringRef sub_1B19C01F4(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintController>"));
}

CFStringRef sub_1B19C0214(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintController>"));
}

CFStringRef sub_1B19C0234(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraint %@ %p>"), a1[8], a1);
}

CFStringRef sub_1B19C0274(_QWORD *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraint %@ %p>"), a1[8], a1);
}

void sub_1B19C02B8(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C02F4(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintLookAt %p>"), a1);
}

CFStringRef sub_1B19C0330(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintLookAt %p>"), a1);
}

void sub_1B19C0370(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C039C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintBillboard %p>"), a1);
}

CFStringRef sub_1B19C03D8(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintBillboard %p>"), a1);
}

void sub_1B19C0418(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C0444(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintConstantScale>"));
}

CFStringRef sub_1B19C0464(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintConstantScale>"));
}

void sub_1B19C0488(uint64_t a1)
{
  const void *v2;
  const void *v3;

  _Block_release(*(const void **)(a1 + 136));
  v2 = *(const void **)(a1 + 144);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 144) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C04CC(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintProcedural>"));
}

CFStringRef sub_1B19C04EC(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintProcedural>"));
}

void sub_1B19C0510(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 176) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C054C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintIK %p>"), a1);
}

CFStringRef sub_1B19C0588(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXConstraintIK %p>"), a1);
}

void sub_1B19C05C8(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C0604(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintDistance>"));
}

CFStringRef sub_1B19C0624(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintDistance>"));
}

double sub_1B19C0644(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  unint64_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;

  v2 = vmulq_f32(a1, a2);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] >= 0.0)
  {
    v33 = vaddq_f32(a1, a2);
    v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    v37 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(a1)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
    v32 = vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL).u64[0];
  }
  else
  {
    v3 = (int32x4_t)vmulq_f32(a1, a1);
    v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
    v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
    v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
    v3.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
    v6 = (int32x4_t)vmulq_f32(a2, a2);
    v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
    v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
    v9 = vaddq_f32(vmulq_n_f32(a1, *(float *)v3.i32), vmulq_n_f32(a2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]));
    v10 = vmulq_f32(v9, v9);
    v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
    if (v11 <= 1.4211e-14)
    {
      v39 = vabsq_f32(a1);
      v40 = v39.f32[1];
      v41 = v39.f32[2];
      if (v39.f32[0] > v39.f32[1] || v39.f32[0] > v39.f32[2])
      {
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        if (v40 <= v41)
        {
          v43 = vmulq_f32(a1, (float32x4_t)xmmword_1B2244F20);
          v44 = (float32x4_t)xmmword_1B2244DD0;
        }
        else
        {
          v43 = vmulq_f32(a1, (float32x4_t)xmmword_1B2244EF0);
          v44 = (float32x4_t)xmmword_1B2244D90;
        }
      }
      else
      {
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        v43 = vmulq_f32(a1, (float32x4_t)xmmword_1B2244F00);
        v44 = (float32x4_t)xmmword_1B2244DB0;
      }
      v45 = vmlaq_f32(v43, v44, v42);
      v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
      v47 = (int32x4_t)vmulq_f32(v45, v45);
      v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
      v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
      v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
      v32 = vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]).u64[0];
    }
    else
    {
      v12 = v11;
      v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
      v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
      v15 = vmulq_n_f32(v9, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
      v16 = vaddq_f32(a1, v15);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      v20 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(a1)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
      v22 = vmulq_f32(v20, a1);
      v23 = vaddq_f32(a2, v15);
      v24 = (int32x4_t)vmulq_f32(v23, v23);
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
      *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
      *(float32x2_t *)v20.f32 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
      v25 = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32))).f32[0]);
      v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), vnegq_f32(v15)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
      v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
      v28 = vmulq_f32(v15, v25);
      v27.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u32[0];
      v29 = (int32x4_t)vnegq_f32(v27);
      v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v29));
      v31 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
      v31.i32[0] = v29.i32[1];
      v31.i32[3] = v29.i32[2];
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v31, *(float32x2_t *)v21.f32, 1), vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v29, 8uLL), v21.f32[0]), (float32x4_t)vextq_s8(v30, v30, 8uLL), v21, 2)).u64[0];
    }
  }
  return *(double *)&v32;
}

void sub_1B19C0984(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C09B0(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintAcceleration>"));
}

CFStringRef sub_1B19C09D0(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintAcceleration>"));
}

void sub_1B19C09F4(uint64_t a1)
{
  const void *v2;
  const void *v3;

  v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B19C0A30(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintReplicator>"));
}

CFStringRef sub_1B19C0A50(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintReplicator>"));
}

uint64_t sub_1B19C0A70(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19C0A9C(uint64_t a1)
{
  uint64_t result;

  if (qword_1EEF66E20 != -1)
    dispatch_once_f(&qword_1EEF66E20, &qword_1EEF66E18, (dispatch_function_t)sub_1B19C0A70);
  result = sub_1B179CB90(qword_1EEF66E18, 0x18uLL);
  *(_QWORD *)(result + 24) = a1;
  return result;
}

void sub_1B19C0AFC(uint64_t a1, const __CFArray *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const char *v8;
  uint64_t v11;
  VFXOrderedDictionary *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  double v24;
  uint64_t Count;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __CFSet *Mutable;
  CFIndex v34;
  float v35;
  const void *ValueAtIndex;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const void *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  CFTypeRef v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  const __CFArray *v156;
  const __CFArray *v157;
  CFIndex v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  CFIndex i;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __CFArray *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  CFIndex j;
  const void *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  const __CFString *v210;
  const __CFString *v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  double v226;
  double v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _WORD *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  float v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  CFTypeRef v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  const void *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  const void *v274;
  const void *v275;
  const __CFArray *v276;
  uint64_t v277;
  const char *v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  uint64_t v283;
  uint64_t v284;
  const __CFArray *v285;
  uint64_t v286;
  __int128 cf;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  simd_float4x4 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  simd_float4x4 v296;

  v8 = (const char *)a4;
  v11 = a1;
  if (a1)
  {
    if (a4)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (v8)
    {
LABEL_3:
      if (v11)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
  if (!v11)
LABEL_4:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
LABEL_5:
  v12 = *(VFXOrderedDictionary **)(v11 + 16);
  if (!v12)
  {
    v12 = sub_1B18C00F4();
    *(_QWORD *)(v11 + 16) = v12;
  }
  v13 = sub_1B18C00D0(v12, v8, (uint64_t)a3, a4);
  v284 = v11;
  v285 = a2;
  v278 = v8;
  if (v13)
  {
    v20 = (const __CFArray *)v13;
    v23 = sub_1B197B974();
    if (v23 > 0.0)
    {
      v24 = v23;
      Count = CFArrayGetCount(v20);
      v277 = sub_1B187B058(*(_QWORD *)(v11 + 24), v26, v27, v28, v29, v30, v31, v32);
      Mutable = CFSetCreateMutable(0, Count, 0);
      v286 = Count;
      if (Count >= 1)
      {
        v34 = 0;
        v35 = v24;
        v276 = v20;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v20, v34);
          v37 = (const void *)*((_QWORD *)ValueAtIndex + 4);
          v45 = (float32x4_t *)sub_1B19C4614((uint64_t)v37, v38, v39, v40, v41, v42, v43, v44);
          if (!CFSetContainsValue(Mutable, v45))
          {
            if (sub_1B19C4770((uint64_t)v37, v46, v47, v48, v49, v50, v51, v52) == 10)
            {
              CFSetAddValue(Mutable, v45);
              v67 = sub_1B187A97C(*(_QWORD *)(v284 + 24), v60, v61, v62, v63, v64, v65, v66);
              v289 = 0u;
              v290 = 0u;
              cf = 0u;
              v288 = 0u;
              v281 = v45[1];
              v282 = *v45;
              v279 = v45[3];
              v280 = v45[2];
              sub_1B19C4CB8(v277, *((_QWORD *)ValueAtIndex + 5), v68, v69, v70, v71, v72, v73);
              v283 = v67;
              sub_1B17F2EC0(v67, (uint64_t)v37, v74, v75, v76, v77, v78, v79);
              v296 = __invert_f4(*(simd_float4x4 *)v45->f32);
              v86 = 0;
              v291 = v296;
              v292 = 0u;
              v293 = 0u;
              v294 = 0u;
              v295 = 0u;
              do
              {
                *(__int128 *)((char *)&v292 + v86 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v282, COERCE_FLOAT(*(_OWORD *)&v291.columns[v86])), v281, *(float32x2_t *)v291.columns[v86].f32, 1), v280, (float32x4_t)v291.columns[v86], 2), v279, (float32x4_t)v291.columns[v86], 3);
                ++v86;
              }
              while (v86 != 4);
              cf = v292;
              v288 = v293;
              v289 = v294;
              v290 = v295;
              v87 = (const void *)sub_1B191E290(10, 1, v80, v81, v82, v83, v84, v85);
              v94 = (const void *)sub_1B191E290(10, 1, v88, v89, v90, v91, v92, v93);
              sub_1B191E4F4((uint64_t)v87, &cf, v95, v96, v97, v98, v99, v100);
              sub_1B191E4F4((uint64_t)v94, MEMORY[0x1E0C83FF0], v101, v102, v103, v104, v105, v106);
              v107 = (const void *)sub_1B185E424();
              sub_1B185D3F4((uint64_t)v107, 1, v108, v109, v110, v111, v112, v113);
              sub_1B185D5A0((uint64_t)v107, 1, v114, v115, v116, v117, v118, v119);
              sub_1B185D0C4((uint64_t)v107, v35, v120, v121, v122, v123, v124, v125, v126);
              sub_1B197B944();
              sub_1B185D334((uint64_t)v107, v127, v128, v129, v130, v131, v132, v133);
              sub_1B185E69C((uint64_t)v107, (uint64_t)v87, v134, v135, v136, v137, v138, v139);
              sub_1B185E5C4((uint64_t)v107, (uint64_t)v94, v140, v141, v142, v143, v144, v145);
              CFRelease(v87);
              CFRelease(v94);
              sub_1B17F377C(v283, v107, v37, *((void **)ValueAtIndex + 3), CFSTR("__controller"), v146, v147, v148);
              CFRelease(v107);
              a2 = v285;
              v20 = v276;
            }
            else
            {
              v149 = sub_1B19C4770((uint64_t)v37, v53, v54, v55, v56, v57, v58, v59);
              sub_1B17C4408(0, (uint64_t)CFSTR("Warning: unsupported ease out for contraint applied on base type %d"), v150, v151, v152, v153, v154, v155, v149);
            }
          }
          ++v34;
        }
        while (v34 != v286);
      }
      CFRelease(Mutable);
      v8 = v278;
      v11 = v284;
    }
    v156 = (const __CFArray *)sub_1B18C00D0(*(void **)(v11 + 16), v8, v21, v22);
    if (v156)
    {
      v157 = v156;
      v158 = CFArrayGetCount(v156);
      v166 = sub_1B187B058(*(_QWORD *)(v11 + 24), v159, v160, v161, v162, v163, v164, v165);
      if (v158 >= 1)
      {
        v169 = v166;
        for (i = 0; i != v158; ++i)
        {
          v171 = CFArrayGetValueAtIndex(v157, i);
          sub_1B19C4CB8(v169, v171[5], v172, v173, v174, v175, v176, v177);
          sub_1B19C4D8C(v169, v171[5], v178, v179, v180, v181, v182, v183);
        }
      }
      sub_1B18C00E0(*(void **)(v11 + 16), v8, v167, v168);
      a2 = v285;
    }
  }
  if (a2)
  {
    if (!a3)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v14, v15, v16, v17, v18, v19, (uint64_t)"target");
    v184 = CFArrayGetCount(a2);
    v185 = CFArrayCreateMutable(0, v184, MEMORY[0x1E0C9B378]);
    v193 = sub_1B187B058(*(_QWORD *)(v11 + 24), v186, v187, v188, v189, v190, v191, v192);
    if (v184 >= 1)
    {
      v194 = v193;
      for (j = 0; j != v184; ++j)
      {
        v196 = CFArrayGetValueAtIndex(a2, j);
        v210 = (const __CFString *)sub_1B19BA784((uint64_t)v196, v197, v198, v199, v200, v201, v202, v203);
        if (!v210)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v204, v205, v206, v207, v208, v209, (uint64_t)"path");
        v211 = sub_1B19C1A30(a3, v210, 0);
        v212 = sub_1B19BA8F8(v196, a3, v211);
        v212[5] = sub_1B19C4990(v194, v211, v213, v214, v215, v216, v217, v218);
        CFArrayAppendValue(v185, v212);
        CFRelease(v212);
        CFRelease(v211);
        if (+[VFXTransaction disableActions]_0() || (v226 = sub_1B197B974(), v226 <= 0.0))
        {
          *((_DWORD *)v212 + 12) = 1065353216;
        }
        else
        {
          v227 = v226;
          v228 = sub_1B187A97C(*(_QWORD *)(v11 + 24), v219, v220, v221, v222, v223, v224, v225);
          LODWORD(v292) = 1065353216;
          v235 = (const void *)sub_1B191E290(1, 1, v229, v230, v231, v232, v233, v234);
          sub_1B191E4F4((uint64_t)v235, &v292, v236, v237, v238, v239, v240, v241);
          v242 = (_WORD *)sub_1B185E424();
          sub_1B185D90C(v242, 1, v243, v244, v245, v246, v247, v248);
          v249 = v227;
          sub_1B185D0C4((uint64_t)v242, v249, v250, v251, v252, v253, v254, v255, v256);
          sub_1B197B944();
          sub_1B185D334((uint64_t)v242, v257, v258, v259, v260, v261, v262, v263);
          sub_1B185E5C4((uint64_t)v242, (uint64_t)v235, v264, v265, v266, v267, v268, v269);
          CFRelease(v235);
          v270 = (const void *)sub_1B19C4420(v212, (uint64_t)(v212 + 6), 1, 0);
          sub_1B17F377C(v228, v242, v270, v212, CFSTR("__controller"), v271, v272, v273);
          v274 = v242;
          v11 = v284;
          CFRelease(v274);
          v275 = v270;
          a2 = v285;
          CFRelease(v275);
        }
      }
    }
    sub_1B18C00D8(*(void **)(v11 + 16), v278, (uint64_t)v185);
    CFRelease(v185);
  }
}

BOOL sub_1B19C10AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
    sub_1B18C00E8(*(_QWORD *)(a1 + 16), (uint64_t)sub_1B19C1114, a1);
  return v9 != 0;
}

void sub_1B19C1114(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  CFIndex Count;
  CFIndex v12;
  CFIndex v13;
  float *ValueAtIndex;
  uint64_t v15;
  float v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v9 = *(_QWORD *)(a3 + 32);
  v10 = sub_1B187B058(*(_QWORD *)(a3 + 24), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    v12 = Count;
    v13 = 0;
    while (1)
    {
      ValueAtIndex = (float *)CFArrayGetValueAtIndex(a2, v13);
      v15 = *((_QWORD *)ValueAtIndex + 2);
      if (!*(_BYTE *)(v15 + 76))
        goto LABEL_14;
      v16 = ValueAtIndex[12] * *(float *)(v15 + 72);
      if (v16 <= 0.0)
        goto LABEL_14;
      v24 = sub_1B19BA8AC(v15);
      if ((v24 & 1) != 0)
        break;
      if (!sub_1B186DB64(*((_QWORD *)ValueAtIndex + 3), v17, v18, v19, v20, v21, v22, v23)
        || !sub_1B19033AC(*((_QWORD *)ValueAtIndex + 3), v29, v30, v31))
      {
        sub_1B19C5140(v10, *((_QWORD *)ValueAtIndex + 5), v30, v31, v32, v33, v34, v35);
LABEL_12:
        if ((v24 & sub_1B19BA6DC(v9, (uint64_t)ValueAtIndex, *((_QWORD *)ValueAtIndex + 3), *((_QWORD *)ValueAtIndex + 4), v25, v26, v27, v28, v16)) == 1)sub_1B19C4B08(v10, *((_QWORD *)ValueAtIndex + 5), v37, v38, v39, v40, v41, v42);
        goto LABEL_14;
      }
      if ((sub_1B1903388(*((_QWORD *)ValueAtIndex + 3), v36, v30, v31) & 1) == 0)
        break;
LABEL_14:
      if (v12 == ++v13)
        return;
    }
    sub_1B19C5074(v10, *((_QWORD *)ValueAtIndex + 5));
    goto LABEL_12;
  }
}

CFIndex sub_1B19C122C(int a1, CFArrayRef theArray)
{
  CFIndex result;
  CFIndex v4;
  CFIndex i;

  result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    v4 = result;
    for (i = 0; i != v4; ++i)
    {
      result = *((_QWORD *)CFArrayGetValueAtIndex(theArray, i) + 2);
      if (*(_BYTE *)(result + 76))
      {
        if (*(float *)(result + 72) > 0.0)
          result = sub_1B19BA8BC(result);
      }
    }
  }
  return result;
}

uint64_t sub_1B19C12A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v11[2];

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  result = *(_QWORD *)(a1 + 16);
  if (result)
  {
    v11[0] = a2;
    v11[1] = a1;
    return sub_1B18C00E8(result, (uint64_t)sub_1B19C122C, (uint64_t)v11);
  }
  return result;
}

void sub_1B19C130C(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef sub_1B19C1338(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintManagerRef>"));
}

CFStringRef sub_1B19C1358(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXConstraintManagerRef>"));
}

uint64_t sub_1B19C1378(char *cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39[4];

  v8 = a6;
  v10 = a4;
  v11 = a3;
  sub_1B19C44C8(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= v10)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    v22 = sub_1B19C14D8(ValueAtIndex) - 67;
    result = 0;
    switch(v22)
    {
      case 0u:
      case 1u:
        v24 = sub_1B1842894((uint64_t)cf, v15, v16, v17, v18, v19, v20, v21);
        sub_1B19C152C(v24, a2, v11 + 1, v10, a5);
        return 1;
      case 2u:
        return result;
      case 4u:
        v25 = sub_1B1842B0C((uint64_t)cf, v15, v16, v17, v18, v19, v20, v21);
        if (!v25)
        {
          v39[0] = (float32x4_t)xmmword_1B2244DB0;
          v39[1] = (float32x4_t)xmmword_1B2244DD0;
          v39[2] = (float32x4_t)xmmword_1B2244D90;
          v39[3] = (float32x4_t)xmmword_1B2244E20;
          sub_1B1842B64((uint64_t)cf, v39, v26, v27, v28, v29, v30, v31);
          v25 = sub_1B1842B0C((uint64_t)cf, v32, v33, v34, v35, v36, v37, v38);
        }
        sub_1B19C15F0(v25, a2, v11 + 1, v10, a5);
        return 1;
      case 5u:
        *(_QWORD *)(a5 + 24) = cf + 80;
        result = 1;
        *(_WORD *)(a5 + 32) = 1;
        break;
      default:
        if (v8)
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXModelPathResolveCommonProfileProperty unknown path %@"), v16, v17, v18, v19, v20, v21, (uint64_t)ValueAtIndex);
        result = 0;
        break;
    }
  }
  return result;
}

const void *sub_1B19C14D8(void *key)
{
  if (qword_1EEF66E40 != -1)
    dispatch_once(&qword_1EEF66E40, &unk_1E63D1690);
  return CFDictionaryGetValue((CFDictionaryRef)qword_1EEF66E38, key);
}

void sub_1B19C152C(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 12;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    v8 = sub_1B19C14D8(ValueAtIndex);
    *(_WORD *)(a5 + 32) = 1;
    switch(v8)
    {
      case 0xEu:
      case 0x12u:
        *(_QWORD *)(a5 + 24) = a1;
        return;
      case 0xFu:
      case 0x13u:
        v15 = a1 + 4;
        goto LABEL_8;
      case 0x10u:
      case 0x14u:
        v15 = a1 + 8;
        goto LABEL_8;
      case 0x11u:
      case 0x15u:
        v15 = a1 + 12;
LABEL_8:
        *(_QWORD *)(a5 + 24) = v15;
        break;
      default:
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveColor4 unknown path %@"), v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
        break;
    }
  }
}

void sub_1B19C15F0(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  signed int v15;
  char v16;
  uint64_t v17;

  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 10;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    v8 = sub_1B19C14D8(ValueAtIndex);
    *(_WORD *)(a5 + 32) = 1;
    v15 = v8 - 22;
    if (v8 - 22 >= 0x10)
    {
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveMatrix unknown path %@"), v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
    }
    else
    {
      v16 = byte_1B2268DE0[v15];
      v17 = qword_1B2268E50[v15];
      *(_BYTE *)(a5 + 35) = v16;
      *(_QWORD *)(a5 + 24) = a1 + 4 * v17;
    }
  }
}

uint64_t sub_1B19C16A0(const __CFArray *a1, const void *a2, _BYTE *a3)
{
  const __CFString *ValueAtIndex;
  CFIndex Length;
  CFIndex v8;
  CFStringRef v9;
  uint64_t v10;
  CFRange v12;

  if (a1
    && CFArrayGetCount(a1) >= 2
    && (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, 0),
        Length = CFStringGetLength(ValueAtIndex),
        Length >= 2)
    && (v8 = Length, CFStringGetCharacterAtIndex(ValueAtIndex, 0) == 47))
  {
    if (a3)
      *a3 = 1;
    v12.length = v8 - 1;
    v12.location = 1;
    v9 = CFStringCreateWithSubstring(0, ValueAtIndex, v12);
    v10 = sub_1B17C62B4(a2, (uint64_t)v9);
    CFRelease(v9);
    return v10;
  }
  else
  {
    if (a3)
      *a3 = 0;
    return 0;
  }
}

void sub_1B19C1760(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5, int a6)
{
  void *ValueAtIndex;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const __CFArray *v21;
  int v22;
  const __CFArray *v23;
  int v24;
  uint64_t v25;
  int v26;

  *(_BYTE *)(a5 + 34) = 8;
  *(_BYTE *)(a5 + 37) = 1;
  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 10;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    v13 = sub_1B19C14D8(ValueAtIndex);
    if (v13 - 22 >= 0x10)
    {
      switch(v13)
      {
        case 5u:
          v22 = a3 + 1;
          v20 = a1;
          v21 = theArray;
          goto LABEL_4;
        case 6u:
          v26 = 0;
          v25 = 0;
          sub_1B19C1D88((uint64_t)&v25, theArray, a3 + 1, a4, a5);
          *(_BYTE *)(a5 + 34) = 6;
          goto LABEL_5;
        case 7u:
          v24 = a3 + 1;
          v23 = theArray;
          goto LABEL_13;
        case 8u:
          *(_BYTE *)(a5 + 34) = 7;
          *(_WORD *)(a5 + 32) = 8;
          *(_BYTE *)(a5 + 35) = sub_1B19C3DB8(theArray, a3 + 1, a4, a5);
          goto LABEL_5;
        case 0xCu:
        case 0xDu:
          v23 = theArray;
          v24 = a3;
LABEL_13:
          sub_1B19C3C60(v23, v24, a4, a5);
          goto LABEL_5;
        default:
          if (a6)
            sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveTransform unknown path %@"), v14, v15, v16, v17, v18, v19, (uint64_t)ValueAtIndex);
          return;
      }
    }
    v20 = a1;
    v21 = theArray;
    v22 = a3;
LABEL_4:
    sub_1B19C15F0(v20, v21, v22, a4, a5);
LABEL_5:
    *(_QWORD *)(a5 + 24) = a1;
  }
}

uint64_t sub_1B19C18E0(_QWORD *a1, const __CFArray *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  CFIndex Count;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v19;

  if (!a1)
    return 0;
  v5 = a1;
  v19 = 0;
  v6 = sub_1B19C4420(0, 0, 0, 0);
  v7 = sub_1B19C16A0(a2, v5, &v19);
  if (v7)
    v5 = (_QWORD *)v7;
  Count = CFArrayGetCount(a2);
  v9 = Count;
  if (v19)
  {
    v9 = Count - 1;
    a2 = (const __CFArray *)sub_1B17A0360(a2, (const char *)1, Count - 1);
  }
  v10 = (void *)CFGetTypeID(v5);
  sub_1B19C1E48(v5, v10, a2, 0, v9, v6, a3);
  if (*(_QWORD *)(v6 + 24))
    *(_BYTE *)(v6 + 36) = sub_1B179E250(*(__int16 *)(v6 + 32), v11, v12, v13, v14, v15, v16, v17);
  return v6;
}

const void *sub_1B19C19C8(const void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v11;
  CFTypeID v12;

  if (result)
  {
    v11 = result;
    v12 = CFGetTypeID(result);
    return (const void *)sub_1B19C1E48(v11, v12, a2, a3, a4, a5, a6);
  }
  return result;
}

const __CFString *sub_1B19C1A30(_QWORD *a1, CFStringRef theString, uint64_t a3)
{
  const __CFString *result;
  const __CFString *v6;
  uint64_t v7;

  result = sub_1B17A02B4(theString);
  if (result)
  {
    v6 = result;
    v7 = sub_1B19C18E0(a1, (const __CFArray *)result, a3);
    CFRelease(v6);
    return (const __CFString *)v7;
  }
  return result;
}

uint64_t sub_1B19C1A88(const void *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    return 0;
  v8 = sub_1B19C4420(0, 0, 0, 0);
  v9 = CFGetTypeID(a1);
  sub_1B19C2EE8((uint64_t)a1, v9, a2, a3, v8, a4);
  if (*(_QWORD *)(v8 + 24))
    *(_BYTE *)(v8 + 36) = sub_1B179E250(*(__int16 *)(v8 + 32), v10, v11, v12, v13, v14, v15, v16);
  return v8;
}

uint64_t sub_1B19C1B20(const void *a1, const __CFString *a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  CFTypeID v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a1)
    return 0;
  v8 = sub_1B19C4420(0, 0, 0, 0);
  v9 = CFGetTypeID(a1);
  sub_1B19C3064((uint64_t)a1, v9, a2, a3, v8, a4);
  if (*(_QWORD *)(v8 + 24))
    *(_BYTE *)(v8 + 36) = sub_1B179E250(*(__int16 *)(v8 + 32), v10, v11, v12, v13, v14, v15, v16);
  return v8;
}

const void *sub_1B19C1BB8(void *key)
{
  const __CFDictionary *Mutable;
  const void *Value;

  Mutable = (const __CFDictionary *)qword_1ED4CF750;
  if (!qword_1ED4CF750)
  {
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, 0, MEMORY[0x1E0C9B3A0]);
    qword_1ED4CF750 = (uint64_t)Mutable;
  }
  Value = CFDictionaryGetValue(Mutable, key);
  if (!Value)
  {
    Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], 0);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1ED4CF750, key, Value);
  }
  return Value;
}

uint64_t sub_1B19C1C54(CFArrayRef theArray, int a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;
  void *ValueAtIndex;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = 0;
  switch(*(_WORD *)(a4 + 32))
  {
    case 8:
      sub_1B19C1D88(*(_QWORD *)(a4 + 24), theArray, a2, a3, a4);
      goto LABEL_14;
    case 9:
      if (a2 >= a3)
      {
        *(_WORD *)(a4 + 32) = 9;
      }
      else
      {
        v7 = *(_QWORD *)(a4 + 24);
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a2);
        v9 = sub_1B19C14D8(ValueAtIndex);
        *(_WORD *)(a4 + 32) = 1;
        switch(v9)
        {
          case 0xEu:
            *(_QWORD *)(a4 + 24) = v7;
            goto LABEL_14;
          case 0xFu:
            v16 = v7 + 4;
            goto LABEL_13;
          case 0x10u:
            v16 = v7 + 8;
            goto LABEL_13;
          case 0x11u:
            v16 = v7 + 12;
LABEL_13:
            *(_QWORD *)(a4 + 24) = v16;
            break;
          default:
            sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveVector4 unknown path %@"), v10, v11, v12, v13, v14, v15, (uint64_t)ValueAtIndex);
            break;
        }
      }
      goto LABEL_14;
    case 0xA:
      sub_1B19C15F0(*(_QWORD *)(a4 + 24), theArray, a2, a3, a4);
      goto LABEL_14;
    case 0xC:
      sub_1B19C152C(*(_QWORD *)(a4 + 24), theArray, a2, a3, a4);
LABEL_14:
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B19C1D88(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  if (a3 >= a4)
  {
    *(_QWORD *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 8;
    return;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  v8 = sub_1B19C14D8(ValueAtIndex);
  *(_WORD *)(a5 + 32) = 1;
  switch(v8)
  {
    case 0xEu:
      *(_QWORD *)(a5 + 24) = a1;
      return;
    case 0xFu:
      *(_QWORD *)(a5 + 24) = a1 + 4;
      v15 = 1;
      goto LABEL_9;
    case 0x10u:
      *(_QWORD *)(a5 + 24) = a1 + 8;
      v15 = 2;
LABEL_9:
      *(_BYTE *)(a5 + 35) = v15;
      return;
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveVector3 unknown path %@"), v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
}

uint64_t sub_1B19C1E48(_QWORD *a1, void *a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *ValueAtIndex;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  const void *v34;
  _BYTE *Value;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void **v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  if ((void *)sub_1B193E4C8() == a2)
  {
    if ((sub_1B19C22CC(a1, a3, a4, a5, a6) & 1) != 0)
      return 1;
  }
  else if ((void *)sub_1B1869F5C() == a2)
  {
    if ((sub_1B19C2464(a1, a3, a4, a5, a6, a7) & 1) != 0)
      return 1;
  }
  else if ((void *)sub_1B1877980() == a2)
  {
    if ((sub_1B19C277C((uint64_t)a1, a3, a4, a5, a6, a7) & 1) != 0)
      return 1;
  }
  else
  {
    if ((void *)sub_1B185EA24() == a2)
    {
      if (a1)
      {
        if ((sub_1B19C22CC(a1, a3, a4, a5, a6) & 1) == 0)
        {
          sub_1B19C44C8(a6, a1, v14, v15, v16, v17, v18, v19);
          if ((int)a4 < (int)a5)
          {
            ValueAtIndex = (void *)CFArrayGetValueAtIndex(a3, (int)a4);
            switch(sub_1B19C14D8(ValueAtIndex))
            {
              case 'L':
                v27 = 1;
                v28 = (char *)sub_1B185F064((uint64_t)a1, 1, v21, v22, v23, v24, v25, v26);
                goto LABEL_53;
              case 'M':
                v27 = 1;
                v28 = (char *)sub_1B185F0C8((uint64_t)a1, 1, v21, v22, v23, v24, v25, v26);
LABEL_53:
                sub_1B19C1378(v28, a3, (a4 + 1), a5, a6, a7, v29, v30);
                return v27;
              case 'O':
                v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                v60 = (_QWORD *)((char *)a1 + 84);
                goto LABEL_58;
              case 'P':
                v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                v60 = (_QWORD *)((char *)a1 + 308);
                goto LABEL_58;
              case 'Q':
                v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                v60 = a1 + 38;
                goto LABEL_58;
              case 'R':
                v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                v60 = a1 + 39;
LABEL_58:
                *(_QWORD *)(a6 + 24) = v60;
                break;
              default:
                goto LABEL_21;
            }
            return v27;
          }
          *(_QWORD *)(a6 + 24) = 0;
          *(_WORD *)(a6 + 32) = 0;
        }
        return 1;
      }
      goto LABEL_21;
    }
    if ((void *)sub_1B19435F8() == a2)
    {
      v31 = sub_1B17A0A4C((uint64_t)a1);
    }
    else
    {
      if ((void *)sub_1B1941738() != a2)
      {
        if ((void *)sub_1B17A12B4() == a2)
        {
          if ((sub_1B19C2A30(a1, a3, a4, a5, a6, a7, v53, v54) & 1) != 0)
            return 1;
        }
        else if ((void *)sub_1B18F52DC() == a2)
        {
          if ((sub_1B19C2B88(a1, a3, a4, a5, a6, v55, v56, v57) & 1) != 0)
            return 1;
        }
        else if ((void *)sub_1B187A3A8() == a2)
        {
          if ((sub_1B19C2C38(a1, a3, a4, a5, a6, a7, v58, v59) & 1) != 0)
            return 1;
        }
        else if ((void *)sub_1B18D5690() == a2)
        {
          if (sub_1B19C2D0C(a1, a3, a4, a5, a6))
            return 1;
        }
        else if ((void *)sub_1B18F4824() == a2 && (sub_1B19C2D80((uint64_t)a1, a3, a4, a5, a6) & 1) != 0)
        {
          return 1;
        }
        goto LABEL_21;
      }
      v31 = (uint64_t)a1;
    }
    if ((sub_1B19C285C(v31, a3, a4, a5, a6, a7) & 1) != 0)
      return 1;
  }
LABEL_21:
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EEF66E28);
  v32 = (const __CFDictionary *)sub_1B19C1BB8(a2);
  if ((int)a4 >= (int)a5 || (v33 = v32) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EEF66E28);
LABEL_29:
    v27 = 0;
    if (!(_DWORD)a7 || (_DWORD)a4 + 1 != (_DWORD)a5)
      return v27;
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolverRegistryResolvePathWithClassName unknown path %@"), v46, v47, v48, v49, v50, v51, (uint64_t)a3);
    return 0;
  }
  v34 = CFArrayGetValueAtIndex(a3, (int)a4);
  Value = CFDictionaryGetValue(v33, v34);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EEF66E28);
  if (!Value)
  {
    v52 = CFDictionaryGetValue(v33, CFSTR("superClass"));
    if (v52 && (sub_1B19C1E48(a1, v52, a3, a4, a5, a6, a7) & 1) != 0)
      return 1;
    goto LABEL_29;
  }
  sub_1B19C44C8(a6, a1, v36, v37, v38, v39, v40, v41);
  v42 = *((unsigned __int16 *)Value + 4);
  *(_WORD *)(a6 + 32) = v42;
  *(_BYTE *)(a6 + 34) = Value[10];
  v43 = (const void **)((char *)a1 + *(_QWORD *)Value);
  *(_QWORD *)(a6 + 24) = v43;
  *(_OWORD *)(a6 + 40) = *((_OWORD *)Value + 1);
  v44 = (a4 + 1);
  if ((int)v44 >= (int)a5)
    return 1;
  if (v42 != 5)
    return sub_1B19C1C54(a3, (int)a4 + 1, a5, a6);
  if (a1)
    return (uint64_t)sub_1B19C19C8(*v43, (uint64_t)a3, v44, a5, a6, a7);
  return 0;
}

uint64_t sub_1B19C22CC(_QWORD *a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  CFTypeID v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  if (a3 >= a4)
    return 0;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  v11 = sub_1B19C14D8(ValueAtIndex);
  if (v11 == 89)
  {
    if (a3 + 1 < a4)
    {
      v50 = CFArrayGetValueAtIndex(theArray, a3 + 1);
      result = sub_1B17C6244(a1, v51, v52, v53, v54, v55, v56, v57);
      if (result)
      {
        v65 = sub_1B187A97C(result, v58, v59, v60, v61, v62, v63, v64);
        result = (uint64_t)sub_1B17F3E08(v65, a1, v50, v66, v67, v68, v69, v70);
        if (result)
        {
          *(_QWORD *)(a5 + 24) = result + 52;
          sub_1B19C44C8(a5, (CFTypeRef)result, v71, v72, v73, v74, v75, v76);
          result = 1;
          *(_WORD *)(a5 + 32) = 1;
          *(_BYTE *)(a5 + 34) = 0;
        }
      }
      return result;
    }
    return 0;
  }
  if (v11 == 88)
  {
    if (a3 + 1 < a4)
    {
      v19 = CFArrayGetValueAtIndex(theArray, a3 + 1);
      v26 = sub_1B193FCB0((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
      if (v26)
      {
        v33 = v26;
        v34 = CFGetTypeID(v26);
        if (v34 == sub_1B191E200())
        {
          sub_1B19C44C8(a5, v33, v27, v28, v29, v30, v31, v32);
          *(_QWORD *)(a5 + 24) = sub_1B191E41C((uint64_t)v33, v35, v36, v37, v38, v39, v40, v41);
          *(_WORD *)(a5 + 32) = sub_1B191E464((uint64_t)v33, v42, v43, v44, v45, v46, v47, v48);
          *(_BYTE *)(a5 + 34) = 0;
          return 1;
        }
      }
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _CFXModelPathResolveEntity inconsistent cftype"), v27, v28, v29, v30, v31, v32, (uint64_t)"0");
    }
    return 0;
  }
  result = sub_1B193EEA8(a1, v12, v13, v14, v15, v16, v17, v18);
  if ((_DWORD)result)
  {
    sub_1B193F97C((uint64_t)a1, v77, v78, v79, v80, v81, v82, v83);
    return sub_1B193FE38((uint64_t)a1, theArray, a3, a5);
  }
  return result;
}

uint64_t sub_1B19C2464(_QWORD *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *ValueAtIndex;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  const __CFArray *v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  const __CFDictionary *v32;
  uint64_t v33;
  const __CFDictionary *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v44;
  CFTypeRef cf[2];
  __int128 v46;
  __int128 v47;
  __int128 v48;

  if (!a1)
    return 0;
  if ((sub_1B19C22CC(a1, a2, a3, a4, a5) & 1) == 0)
  {
    sub_1B19C44C8(a5, a1, v12, v13, v14, v15, v16, v17);
    if ((int)a3 < (int)a4)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, (int)a3);
      v19 = sub_1B19C14D8(ValueAtIndex);
      if (v19 <= 38)
      {
        switch(v19)
        {
          case 1:
            v29 = (a3 + 1);
            v27 = (char *)a1;
            v28 = a2;
            goto LABEL_7;
          case 2:
            *(_QWORD *)(a5 + 24) = (char *)a1 + 204;
            v30 = 1;
            *(_WORD *)(a5 + 32) = 1;
            return v30;
          case 3:
            *(_QWORD *)(a5 + 24) = a1 + 25;
            *(_WORD *)(a5 + 32) = 3;
            return 1;
          case 4:
          case 11:
            goto LABEL_32;
          case 5:
          case 6:
          case 7:
          case 8:
          case 12:
          case 13:
            v27 = (char *)a1;
            v28 = a2;
            v29 = a3;
LABEL_7:
            sub_1B19C3E08(v27, v28, v29, a4, a5, a6, v25, v26);
            return 1;
          case 9:
            *(_BYTE *)(a5 + 34) = 8;
            v33 = a1[24];
            if (!v33)
            {
              *(_OWORD *)cf = xmmword_1B2244DB0;
              v46 = xmmword_1B2244DD0;
              v47 = xmmword_1B2244D90;
              v48 = xmmword_1B2244E20;
              sub_1B186A2DC((uint64_t)a1, (__int128 *)cf, v21, v22, v23, v24, v25, v26);
              v33 = a1[24];
            }
            sub_1B19C15F0(v33, a2, a3 + 1, a4, a5);
            return 1;
          case 10:
            if ((int)a3 + 1 >= (int)a4)
              goto LABEL_32;
            v34 = sub_1B186DF9C((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
            if (!v34)
              goto LABEL_32;
            sub_1B19C3EB8(v34, a2, a3 + 1, a4, a5, a6);
            return 1;
          default:
            if (v19 != 38)
              goto LABEL_32;
            v31 = sub_1B186CFA8((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
            goto LABEL_22;
        }
      }
      switch(v19)
      {
        case 'T':
          v31 = (const void *)sub_1B186ACAC((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
          goto LABEL_22;
        case 'U':
          v32 = sub_1B1869D88((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
          goto LABEL_20;
        case 'V':
          v32 = sub_1B186DDDC((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
          goto LABEL_20;
        case 'W':
          v32 = sub_1B186DDFC((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
LABEL_20:
          sub_1B19C2D80((uint64_t)v32, a2, a3 + 1, a4, a5);
          return 1;
        default:
          if (v19 == 39)
          {
            v31 = (const void *)sub_1B1868FA0((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
            goto LABEL_22;
          }
          if (v19 == 73)
          {
            v31 = sub_1B1868FE8((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
LABEL_22:
            sub_1B19C19C8(v31, (uint64_t)a2, (a3 + 1), a4, a5, a6);
            return 1;
          }
LABEL_32:
          cf[0] = 0;
          v44 = 0;
          if (!sub_1B19C3FAC(a2, a3, a4, (SInt32 *)&v44, (CFStringRef *)cf))
            goto LABEL_38;
          if (sub_1B19C14D8((void *)cf[0]) == 11)
          {
            v41 = sub_1B186AF90((uint64_t)a1);
            if (v41 <= v44)
            {
              v30 = 0;
            }
            else
            {
              v42 = sub_1B186B18C((uint64_t)a1, v44);
              v30 = sub_1B19C2464(v42, a2, (a3 + 1), a4, a5, a6);
            }
            if (cf[0])
              CFRelease(cf[0]);
            return v30;
          }
          if (cf[0])
            CFRelease(cf[0]);
LABEL_38:
          if ((_DWORD)a6)
            sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveNode unknown path %@"), v35, v36, v37, v38, v39, v40, (uint64_t)ValueAtIndex);
          break;
      }
      return 0;
    }
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
  }
  return 1;
}

uint64_t sub_1B19C277C(uint64_t result, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *ValueAtIndex;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;

  if (result)
  {
    v11 = (const void *)result;
    if ((sub_1B19C22CC((_QWORD *)result, a2, a3, a4, a5) & 1) == 0)
    {
      sub_1B19C44C8(a5, v11, v12, v13, v14, v15, v16, v17);
      if ((int)a3 >= (int)a4)
      {
        *(_QWORD *)(a5 + 24) = 0;
        *(_WORD *)(a5 + 32) = 0;
      }
      else
      {
        ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, (int)a3);
        v19 = sub_1B19C14D8(ValueAtIndex);
        v27 = (char *)sub_1B187813C((uint64_t)v11, v20, v21, v22, v23, v24, v25, v26);
        if (v19 != 42)
          return sub_1B19C41D8(v27, a2, a3, a4, a5, a6, v28, v29);
        sub_1B19C41D8(v27, a2, (a3 + 1), a4, a5, a6, v28, v29);
      }
    }
    return 1;
  }
  return result;
}

uint64_t sub_1B19C285C(uint64_t result, const __CFArray *a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __CFString *ValueAtIndex;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFRange v26;
  int v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  CFRange v32;
  CFRange v33;
  __CFString *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  CFRange v54;

  if (!result)
    return result;
  v11 = (const void *)result;
  if ((sub_1B19C22CC((_QWORD *)result, a2, a3, a4, a5) & 1) != 0)
    return 1;
  sub_1B19C44C8(a5, v11, v12, v13, v14, v15, v16, v17);
  if (a3 >= (int)a4)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(a2, a3);
  v19 = sub_1B19C14D8(ValueAtIndex);
  v26 = CFStringFind(ValueAtIndex, CFSTR("weights"), 0);
  if (v26.length <= 0)
    v27 = 0;
  else
    v27 = -1;
  if (v26.length > 0 || v19 == 83)
  {
    v28 = (const void *)sub_1B194203C((uint64_t)v11);
    v32 = CFStringFind(ValueAtIndex, CFSTR("[\""), 0);
    if (v32.length >= 1)
    {
      v33 = CFStringFind(ValueAtIndex, CFSTR("\"]"), 0);
      if (v33.length >= 1 && v33.location > v32.location + 2)
      {
        v54.location = v32.location + 2;
        v54.length = v33.location - (v32.location + 2);
        v34 = (__CFString *)CFStringCreateWithSubstring(0, ValueAtIndex, v54);
        v35 = sub_1B1942DB8((uint64_t)v11, v34);
        if (v35 != -1)
        {
          v39 = v35;
          sub_1B19C44C8(a5, v28, v36, v37, v38, v29, v30, v31);
          v47 = (_QWORD *)sub_1B18F5B98((uint64_t)v28, v40, v41, v42, v43, v44, v45, v46);
          *(_QWORD *)(a5 + 24) = sub_1B18F3A4C(v47, v39, v48, v49, v50, v51, v52, v53);
          *(_WORD *)(a5 + 32) = sub_1B18F3854((uint64_t)v47);
          if (v34)
            CFRelease(v34);
          return 1;
        }
        if (v34)
          CFRelease(v34);
      }
    }
    if (v28)
      sub_1B19C2B88(v28, a2, (a3 + v27 + 1), a4, a5, v29, v30, v31);
    return 1;
  }
  if (a6)
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveMorpher unknown path %@"), v20, v21, v22, v23, v24, v25, (uint64_t)ValueAtIndex);
  return 0;
}

uint64_t sub_1B19C2A30(CFTypeRef cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const __CFArray *v28;
  const void *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const __CFArray *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const __CFArray *v45;
  SInt32 v46;
  CFTypeRef cfa;

  if (!cf)
    return 0;
  v11 = a3;
  sub_1B19C44C8(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= (int)a4)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
  if (sub_1B19C14D8(ValueAtIndex) == 40)
  {
    if ((uint64_t)sub_1B17A08A0((uint64_t)cf, v15, v16, v17, v18, v19, v20, v21) >= 1)
    {
      v28 = sub_1B17A08FC((uint64_t)cf, 0, v22, v23, v24, v25, v26, v27);
      sub_1B19C277C((uint64_t)v28, a2, (v11 + 1), a4, a5, a6);
    }
    return 1;
  }
  cfa = 0;
  v46 = 0;
  v29 = 0;
  if (sub_1B19C3FAC(a2, v11, a4, &v46, (CFStringRef *)&cfa))
  {
    if (sub_1B19C14D8((void *)cfa) == 41
      && (v38 = sub_1B17A08A0((uint64_t)cf, v31, v32, v33, v34, v35, v36, v37), (uint64_t)v38 > v46))
    {
      v45 = sub_1B17A08FC((uint64_t)cf, v46, v39, v40, v41, v42, v43, v44);
      v29 = sub_1B19C19C8(v45, (uint64_t)a2, (v11 + 1), a4, a5, a6);
    }
    else
    {
      v29 = 0;
    }
    if (cfa)
      CFRelease(cfa);
  }
  return (uint64_t)v29;
}

uint64_t sub_1B19C2B88(CFTypeRef cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  SInt32 v29;

  v9 = a4;
  v10 = a3;
  sub_1B19C44C8(a5, cf, a3, a4, a5, a6, a7, a8);
  if (!cf)
    return 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_WORD *)(a5 + 32) = 0;
  v29 = 0;
  v20 = sub_1B19C3FAC(a2, v10, v9, &v29, 0);
  if ((_DWORD)v20)
  {
    v21 = (_QWORD *)sub_1B18F5B98((uint64_t)cf, v13, v14, v15, v16, v17, v18, v19);
    *(_QWORD *)(a5 + 24) = sub_1B18F3A4C(v21, v29, v22, v23, v24, v25, v26, v27);
    *(_WORD *)(a5 + 32) = sub_1B18F3854((uint64_t)v21);
  }
  return v20;
}

uint64_t sub_1B19C2C38(CFTypeRef cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  void *ValueAtIndex;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v11 = a3;
  sub_1B19C44C8(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= (int)a4)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    v15 = sub_1B19C14D8(ValueAtIndex);
    if (v15 == 90)
    {
      v16 = 1;
      v17 = (char *)sub_1B187B0A0((uint64_t)cf, 1);
    }
    else
    {
      if (v15 != 91)
        return 0;
      v16 = 1;
      v17 = (char *)sub_1B187B0F0((uint64_t)cf, 1);
    }
    sub_1B19C1378(v17, a2, (v11 + 1), a4, a5, a6, v18, v19);
  }
  return v16;
}

BOOL sub_1B19C2D0C(const void *a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  void *ValueAtIndex;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (a3 >= a4)
    return 0;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  sub_1B19C44C8(a5, a1, v8, v9, v10, v11, v12, v13);
  v19 = sub_1B18D6B18((uint64_t)a1, ValueAtIndex, (_WORD *)(a5 + 32), v14, v15, v16, v17, v18);
  *(_QWORD *)(a5 + 24) = v19;
  return v19 != 0;
}

uint64_t sub_1B19C2D80(uint64_t result, void *a2, int a3, int a4, uint64_t a5)
{
  const void *v7;
  int v8;
  const __CFArray *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const void *ValueAtIndex;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const __CFDictionary *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;

  if (result)
  {
    v7 = (const void *)result;
    v8 = a4 - a3;
    v9 = (const __CFArray *)sub_1B17A0360(a2, (const char *)a3, a4 - a3);
    ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
    if (v8 == 2 && (v16 = CFArrayGetValueAtIndex(v9, 1)) != 0)
    {
      v17 = v16;
      if (CFEqual(v16, CFSTR("x")))
      {
        v23 = 0;
      }
      else if (CFEqual(v17, CFSTR("y")))
      {
        v23 = 1;
      }
      else if (CFEqual(v17, CFSTR("z")))
      {
        v23 = 2;
      }
      else
      {
        if (!CFEqual(v17, CFSTR("w")))
        {
          sub_1B17C4408(16, (uint64_t)CFSTR("Error: unknown field type in path %@"), v38, v18, v19, v20, v21, v22, (uint64_t)a2);
          return 0;
        }
        v23 = 3;
      }
      v24 = sub_1B18F4CE4((uint64_t)v7, ValueAtIndex, v23, v18, v19, v20, v21, v22);
      v37 = 1;
    }
    else
    {
      v24 = sub_1B18F4CE4((uint64_t)v7, ValueAtIndex, 0, v10, v11, v12, v13, v14);
      v37 = sub_1B18F4ACC((uint64_t)v7, ValueAtIndex, v25, v26, v27, v28, v29, v30);
    }
    result = 0;
    if (v24)
    {
      if (v37)
      {
        sub_1B19C44C8(a5, v7, v31, v32, v33, v34, v35, v36);
        *(_QWORD *)(a5 + 24) = v24;
        *(_WORD *)(a5 + 32) = v37;
        result = 1;
        *(_BYTE *)(a5 + 34) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B19C2EE8(uint64_t a1, CFTypeID a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFStringRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (sub_1B19435F8() == a2)
  {
    v12 = (const void *)sub_1B17A0A4C(a1);
  }
  else
  {
    if (sub_1B1941738() != a2)
    {
      v16 = CFCopyTypeIDDescription(a2);
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Support for subscript model path is not implemented for %@"), v17, v18, v19, v20, v21, v22, (uint64_t)v16);
      CFRelease(v16);
      return 0;
    }
    v12 = (const void *)a1;
  }
  sub_1B19C2F9C(v12, a3, a4, a5, a6, v13, v14, v15);
  return 0;
}

void sub_1B19C2F9C(CFTypeRef cf, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (cf)
  {
    v8 = a5;
    sub_1B19C44C8(a4, cf, a3, a4, a5, a6, a7, a8);
    if (CFStringCompare(a2, CFSTR("weights"), 0))
    {
      if (v8)
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveMorpher unknown key subscript %@[%ld]"), v13, v14, v15, v16, v17, v18, (uint64_t)a2);
    }
    else
    {
      v19 = (const void *)sub_1B194203C((uint64_t)cf);
      sub_1B19C44C8(a4, v19, v20, v21, v22, v23, v24, v25);
      v33 = (_QWORD *)sub_1B18F5B98((uint64_t)v19, v26, v27, v28, v29, v30, v31, v32);
      *(_QWORD *)(a4 + 24) = sub_1B18F3A4C(v33, a3, v34, v35, v36, v37, v38, v39);
      *(_WORD *)(a4 + 32) = sub_1B18F3854((uint64_t)v33);
    }
  }
}

uint64_t sub_1B19C3064(uint64_t a1, CFTypeID a2, const __CFString *a3, void *a4, uint64_t a5, uint64_t a6)
{
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  CFStringRef v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (sub_1B19435F8() == a2)
  {
    v12 = (const void *)sub_1B17A0A4C(a1);
  }
  else
  {
    if (sub_1B1941738() != a2)
    {
      v16 = CFCopyTypeIDDescription(a2);
      sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Support for subscript model path is not implemented for %@"), v17, v18, v19, v20, v21, v22, (uint64_t)v16);
      CFRelease(v16);
      return 0;
    }
    v12 = (const void *)a1;
  }
  sub_1B19C3118(v12, a3, a4, a5, a6, v13, v14, v15);
  return 0;
}

void sub_1B19C3118(CFTypeRef cf, const __CFString *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  if (cf)
  {
    v8 = a5;
    sub_1B19C44C8(a4, cf, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (CFStringCompare(a2, CFSTR("weights"), 0))
    {
      if (!v8)
        return;
LABEL_8:
      sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveMorpher unknown key subscript %@[%@]"), v13, v14, v15, v16, v17, v18, (uint64_t)a2);
      return;
    }
    v19 = (const void *)sub_1B194203C((uint64_t)cf);
    sub_1B19C44C8(a4, v19, v20, v21, v22, v23, v24, v25);
    v26 = sub_1B1942DB8((uint64_t)cf, a3);
    if (v26 != -1)
    {
      v28 = v26;
      v29 = (_QWORD *)sub_1B18F5B98((uint64_t)v19, v27, v13, v14, v15, v16, v17, v18);
      *(_QWORD *)(a4 + 24) = sub_1B18F3A4C(v29, v28, v30, v31, v32, v33, v34, v35);
      *(_WORD *)(a4 + 32) = sub_1B18F3854((uint64_t)v29);
      return;
    }
    if ((v8 & 1) != 0)
      goto LABEL_8;
  }
}

void sub_1B19C3200(void *a1, const void *a2)
{
  __CFDictionary *v4;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EEF66E28);
  v4 = (__CFDictionary *)sub_1B19C1BB8(a1);
  qword_1EEF66E30 = (uint64_t)v4;
  if (a2)
    CFDictionaryAddValue(v4, CFSTR("superClass"), a2);
}

void sub_1B19C3258()
{
  qword_1EEF66E30 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EEF66E28);
}

void sub_1B19C326C(const void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10;
  __int16 v11;
  _WORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = a4;
  v11 = a3;
  if (!qword_1EEF66E30)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"_currentClassRegistry");
  v14 = malloc_type_malloc(0x20uLL, 0x1080040FF9D436EuLL);
  v14[4] = v11;
  *(_QWORD *)v14 = a2;
  *((_BYTE *)v14 + 10) = v10;
  *((_QWORD *)v14 + 2) = a5;
  *((_QWORD *)v14 + 3) = a6;
  if (CFDictionaryGetCountOfKey((CFDictionaryRef)qword_1EEF66E30, a1))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Cannot register twice the same propertyName : %@"), v15, v16, v17, v18, v19, v20, (uint64_t)"CFDictionaryGetCountOfKey(_currentClassRegistry, propertyName) == 0");
  CFDictionarySetValue((CFMutableDictionaryRef)qword_1EEF66E30, a1, v14);
}

void sub_1B19C334C()
{
  qword_1EEF66E38 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 110, MEMORY[0x1E0C9B390], 0);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("transform"), (const void *)1);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("opacity"), (const void *)2);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("hidden"), (const void *)3);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("attributes"), (const void *)4);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("matrix"), (const void *)5);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("translation"), (const void *)6);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("position"), (const void *)6);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("rotation"), (const void *)7);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("orientation"), (const void *)0xD);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("scale"), (const void *)8);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("eulerAngles"), (const void *)0xC);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("quaternion"), (const void *)0xD);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("pivot"), (const void *)9);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("filters"), (const void *)0xA);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("nodes"), (const void *)0xB);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("childNodes"), (const void *)0xB);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("x"), (const void *)0xE);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("y"), (const void *)0xF);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("z"), (const void *)0x10);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("w"), (const void *)0x11);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("(0)"), (const void *)0xE);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("(1)"), (const void *)0xF);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("(2)"), (const void *)0x10);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("(3)"), (const void *)0x11);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("r"), (const void *)0x12);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("g"), (const void *)0x13);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("b"), (const void *)0x14);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("a"), (const void *)0x15);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m11"), (const void *)0x16);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m12"), (const void *)0x1A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m13"), (const void *)0x1E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m14"), (const void *)0x22);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m21"), (const void *)0x17);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m22"), (const void *)0x1B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m23"), (const void *)0x1F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m24"), (const void *)0x23);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m31"), (const void *)0x18);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m32"), (const void *)0x1C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m33"), (const void *)0x20);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m34"), (const void *)0x24);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m41"), (const void *)0x19);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m42"), (const void *)0x1D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m43"), (const void *)0x21);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("m44"), (const void *)0x25);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("camera"), (const void *)0x26);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("geometry"), (const void *)0x27);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("firstMaterial"), (const void *)0x28);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("materials"), (const void *)0x29);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("commonProfile"), (const void *)0x2A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("diffuse"), (const void *)0x2B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("specular"), (const void *)0x2C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("emission"), (const void *)0x2D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("reflective"), (const void *)0x2E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("normal"), (const void *)0x2F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("ambientOcclusion"), (const void *)0x30);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("selfIllumination"), (const void *)0x31);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("metalness"), (const void *)0x32);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("roughness"), (const void *)0x33);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("selfIlluminationOcclusion"), (const void *)0x3A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("clearCoat"), (const void *)0x34);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("clearCoatRoughness"), (const void *)0x35);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("clearCoatNormal"), (const void *)0x36);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("subsurface"), (const void *)0x37);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("subsurfaceRadius"), (const void *)0x38);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("displacement"), (const void *)0x39);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("transparent"), (const void *)0x3B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("multiply"), (const void *)0x3C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("shininess"), (const void *)0x3D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("fresnelExponent"), (const void *)0x3E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("shaderModifiers"), (const void *)0x42);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("doubleSided"), (const void *)0x3F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("litPerPixel"), (const void *)0x40);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("cullMode"), (const void *)0x41);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("color"), (const void *)0x43);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("contents"), (const void *)0x44);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("texture"), (const void *)0x45);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("image"), (const void *)0x46);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("contentsTransform"), (const void *)0x47);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("intensity"), (const void *)0x48);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("light"), (const void *)0x49);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("shadowIntensity"), (const void *)0x4A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("shadowRadius"), (const void *)0x4B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("attenuation"), (const void *)0x4F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("spotInnerAngle"), (const void *)0x50);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("spotOuterAngle"), (const void *)0x51);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("spotFalloffExponent"), (const void *)0x52);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("weights"), (const void *)0x53);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("morpher"), (const void *)0x54);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("particleEmitter"), (const void *)0x55);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("particleCollider"), (const void *)0x56);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("behaviorGraph"), (const void *)0x57);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("background"), (const void *)0x5A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("environment"), (const void *)0x5B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("gobo"), (const void *)0x4C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("probeEnvironment"), (const void *)0x4D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("ies"), (const void *)0x4E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("customProperty"), (const void *)0x58);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("animations"), (const void *)0x59);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("euler"), (const void *)0xC);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1EEF66E38, CFSTR("axisAngle"), (const void *)7);
}

void sub_1B19C3C60(const __CFArray *a1, int a2, int a3, uint64_t a4)
{
  void *ValueAtIndex;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;

  *(_BYTE *)(a4 + 34) = 4;
  if (a2 >= a3)
  {
    *(_QWORD *)(a4 + 24) = 0;
    *(_WORD *)(a4 + 32) = 9;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, a2);
    switch(sub_1B19C14D8(ValueAtIndex))
    {
      case 7u:
        *(_WORD *)(a4 + 32) = 9;
        *(_BYTE *)(a4 + 35) = sub_1B19C3DB8(a1, a2 + 1, a3, a4);
        goto LABEL_9;
      case 0xCu:
        *(_WORD *)(a4 + 32) = 8;
        *(_BYTE *)(a4 + 35) = sub_1B19C3DB8(a1, a2 + 1, a3, a4);
        v15 = 5;
        goto LABEL_10;
      case 0xDu:
        *(_WORD *)(a4 + 32) = 9;
        *(_BYTE *)(a4 + 35) = sub_1B19C3DB8(a1, a2 + 1, a3, a4);
        v15 = 3;
        goto LABEL_10;
      case 0xEu:
        *(_WORD *)(a4 + 32) = 1;
LABEL_9:
        v15 = 4;
LABEL_10:
        *(_BYTE *)(a4 + 34) = v15;
        return;
      case 0xFu:
        v16 = 17039361;
        goto LABEL_14;
      case 0x10u:
        v16 = 33816577;
        goto LABEL_14;
      case 0x11u:
        v16 = 50593793;
LABEL_14:
        *(_DWORD *)(a4 + 32) = v16;
        break;
      default:
        sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveRotation unknown path %@"), v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
        break;
    }
  }
}

uint64_t sub_1B19C3DB8(const __CFArray *a1, int a2, int a3, uint64_t a4)
{
  void *ValueAtIndex;
  unsigned int v6;

  if (a2 >= a3)
    return 0;
  ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, a2);
  v6 = sub_1B19C14D8(ValueAtIndex);
  *(_WORD *)(a4 + 32) = 1;
  if (v6 - 15 >= 3)
    return 0;
  else
    return v6 - 14;
}

void sub_1B19C3E08(char *cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v10;
  int v11;
  void *ValueAtIndex;

  v8 = a6;
  v10 = a4;
  v11 = a3;
  sub_1B19C44C8(a5, cf, a3, a4, a5, a6, a7, a8);
  *(_BYTE *)(a5 + 34) = 8;
  *(_BYTE *)(a5 + 37) = 1;
  if (v11 >= v10)
  {
    *(_QWORD *)(a5 + 24) = cf + 96;
    *(_WORD *)(a5 + 32) = 10;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    sub_1B19C14D8(ValueAtIndex);
    sub_1B19C1760((uint64_t)(cf + 96), a2, v11, v10, a5, v8);
  }
}

void sub_1B19C3EB8(const void *a1, const __CFArray *a2, int a3, int a4, uint64_t a5, int a6)
{
  __CFArray *Mutable;
  __CFString *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFRange v28;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v28.location = a3;
  v28.length = a4 - a3;
  CFArrayAppendArray(Mutable, a2, v28);
  v13 = (__CFString *)CFStringCreateByCombiningStrings(0, Mutable, CFSTR("."));
  v20 = sub_1B19D1E7C((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19);
  if (v20)
  {
    v27 = v20;
    sub_1B19C44C8(a5, a1, v21, v22, v23, v24, v25, v26);
    *(_WORD *)(a5 + 32) = *(_WORD *)(v27 + 32);
    *(_QWORD *)(a5 + 24) = *(_QWORD *)(v27 + 24);
    *(_BYTE *)(a5 + 34) = *(_BYTE *)(v27 + 34);
    CFRelease(Mutable);
  }
  else if (a6)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: _CFXModelPathResolveDynamicParameter unknown path %@"), v21, v22, v23, v24, v25, v26, (uint64_t)v13);
  }
  CFRelease(v13);
}

uint64_t sub_1B19C3FAC(const __CFArray *a1, int a2, int a3, SInt32 *a4, CFStringRef *a5)
{
  const __CFString *ValueAtIndex;
  CFRange v8;
  CFRange v9;
  CFStringRef v10;
  CFStringRef v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __CFString *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  CFRange v25;
  CFRange v26;
  uint64_t v27;
  CFRange v29;
  CFRange v30;
  CFRange v31;
  CFRange v32;

  if (a2 >= a3)
    return 0;
  ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2);
  v8 = CFStringFind(ValueAtIndex, CFSTR("["), 0);
  if (v8.length >= 1)
  {
    v9 = CFStringFind(ValueAtIndex, CFSTR("]"), 0);
    if (v9.length >= 1 && v9.location > v8.location)
    {
      v29.location = 0;
      v29.length = v8.location;
      v10 = CFStringCreateWithSubstring(0, ValueAtIndex, v29);
      v30.location = v8.location + 1;
      v30.length = v9.location - (v8.location + 1);
      v11 = CFStringCreateWithSubstring(0, ValueAtIndex, v30);
      v18 = v11;
      if (v10)
      {
        if (!v11)
        {
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"indexString");
          goto LABEL_21;
        }
        goto LABEL_15;
      }
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v12, v13, v14, v15, v16, v17, (uint64_t)"prefix");
      if (v18)
      {
        v10 = 0;
LABEL_15:
        if (CFStringGetLength(v18) && CFStringGetCharacterAtIndex(v18, 0) - 48 < 0xA)
        {
          *a4 = CFStringGetIntValue(v18);
          if (a5)
          {
            *a5 = v10;
          }
          else if (v10)
          {
            CFRelease(v10);
          }
          v27 = 1;
          v10 = v18;
LABEL_26:
          CFRelease(v10);
          return v27;
        }
        CFRelease(v18);
LABEL_21:
        v27 = 0;
        if (!v10)
          return v27;
        goto LABEL_26;
      }
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v19, v20, v21, v22, v23, v24, (uint64_t)"indexString");
    }
  }
  v25 = CFStringFind(ValueAtIndex, CFSTR("("), 0);
  if (v25.length < 1)
    return 0;
  v26 = CFStringFind(ValueAtIndex, CFSTR(")"), 0);
  v27 = 0;
  if (v26.length >= 1 && v26.location > v25.location)
  {
    v31.location = 0;
    v31.length = v25.location;
    v10 = CFStringCreateWithSubstring(0, ValueAtIndex, v31);
    v32.location = v25.location + 1;
    v32.length = v26.location - (v25.location + 1);
    v18 = CFStringCreateWithSubstring(0, ValueAtIndex, v32);
    if (!v18)
      goto LABEL_21;
    goto LABEL_15;
  }
  return v27;
}

uint64_t sub_1B19C41D8(char *cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  void *ValueAtIndex;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;

  v11 = a3;
  sub_1B19C44C8(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= (int)a4)
  {
    *(_QWORD *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  else
  {
    ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    v20 = 0;
    switch(sub_1B19C14D8(ValueAtIndex))
    {
      case '+':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 1;
        goto LABEL_23;
      case ',':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 2;
        goto LABEL_23;
      case '-':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 0;
        goto LABEL_23;
      case '.':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 3;
        goto LABEL_23;
      case '/':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 6;
        goto LABEL_23;
      case '0':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 7;
        goto LABEL_23;
      case '1':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 8;
        goto LABEL_23;
      case '2':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 9;
        goto LABEL_23;
      case '3':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 10;
        goto LABEL_23;
      case '4':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 11;
        goto LABEL_23;
      case '5':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 12;
        goto LABEL_23;
      case '6':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 13;
        goto LABEL_23;
      case '7':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 14;
        goto LABEL_23;
      case '8':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 15;
        goto LABEL_23;
      case '9':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 16;
        goto LABEL_23;
      case ':':
        v20 = 1;
        *(_WORD *)(a5 + 32) = 1;
        v23 = cf + 180;
        goto LABEL_27;
      case ';':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 4;
        goto LABEL_23;
      case '<':
        v20 = 1;
        v21 = (uint64_t)cf;
        v22 = 5;
LABEL_23:
        v24 = (char *)sub_1B1840E70(v21, v22, 1, v15, v16, v17, v18, v19);
        sub_1B19C1378(v24, a2, (v11 + 1), a4, a5, a6, v25, v26);
        return v20;
      case '=':
        v20 = 1;
        *(_WORD *)(a5 + 32) = 1;
        v23 = cf + 168;
        goto LABEL_27;
      case '>':
        v20 = 1;
        *(_WORD *)(a5 + 32) = 1;
        v23 = cf + 176;
LABEL_27:
        *(_QWORD *)(a5 + 24) = v23;
        break;
      case '@':
        *(_WORD *)(a5 + 32) = 3;
        *(_QWORD *)(a5 + 24) = cf + 200;
        return 1;
      default:
        return v20;
    }
  }
  return v20;
}

uint64_t sub_1B19C43F4(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19C4420(const void *a1, uint64_t a2, int a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1EEF66E50 != -1)
    dispatch_once_f(&qword_1EEF66E50, &qword_1EEF66E48, (dispatch_function_t)sub_1B19C43F4);
  v8 = sub_1B179CB90(qword_1EEF66E48, 0x28uLL);
  v16 = v8;
  if (a1)
    sub_1B19C44C8(v8, a1, v10, v11, v12, v13, v14, v15);
  *(_QWORD *)(v16 + 24) = a2;
  *(_WORD *)(v16 + 32) = a3;
  *(_BYTE *)(v16 + 34) = a4;
  *(_BYTE *)(v16 + 36) = sub_1B179E250(a3, v9, v10, v11, v12, v13, v14, v15);
  return v16;
}

CFTypeRef sub_1B19C44C8(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  result = *(CFTypeRef *)(a1 + 16);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (cf)
      result = CFRetain(cf);
    else
      result = 0;
    *(_QWORD *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1B19C4540(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (qword_1EEF66E50 != -1)
    dispatch_once_f(&qword_1EEF66E50, &qword_1EEF66E48, (dispatch_function_t)sub_1B19C43F4);
  v2 = sub_1B179CB90(qword_1EEF66E48, 0x28uLL);
  sub_1B19C44C8(v2, *(CFTypeRef *)(a1 + 16), v3, v4, v5, v6, v7, v8);
  *(_QWORD *)(v2 + 24) = *(_QWORD *)(a1 + 24);
  *(_WORD *)(v2 + 32) = *(_WORD *)(a1 + 32);
  *(_DWORD *)(v2 + 34) = *(_DWORD *)(a1 + 34);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

uint64_t sub_1B19C45CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B19C4614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(_QWORD *)(a1 + 24);
}

void *sub_1B19C465C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"target");
    if (a2)
      return sub_1B17C5830(*(CFTypeRef *)(a1 + 16), *(const void **)(a1 + 24), a2, *(unsigned __int8 *)(a1 + 36), *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), a7, a8);
LABEL_5:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"output");
    return sub_1B17C5830(*(CFTypeRef *)(a1 + 16), *(const void **)(a1 + 24), a2, *(unsigned __int8 *)(a1 + 36), *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), a7, a8);
  }
  if (!a2)
    goto LABEL_5;
  return sub_1B17C5830(*(CFTypeRef *)(a1 + 16), *(const void **)(a1 + 24), a2, *(unsigned __int8 *)(a1 + 36), *(char *)(a1 + 34), *(unsigned __int8 *)(a1 + 35), a7, a8);
}

uint64_t sub_1B19C46E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(char *)(a1 + 34);
}

uint64_t sub_1B19C4728(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(unsigned __int8 *)(a1 + 35);
}

uint64_t sub_1B19C4770(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  return *(__int16 *)(a1 + 32);
}

void sub_1B19C47BC(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef sub_1B19C47E8(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXModelTarget>"));
}

CFStringRef sub_1B19C4808(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXModelTarget>"));
}

uint64_t sub_1B19C4828(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19C4854(const void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (qword_1EEF66E60 != -1)
    dispatch_once_f(&qword_1EEF66E60, &qword_1EEF66E58, (dispatch_function_t)sub_1B19C4828);
  v2 = sub_1B179CB90(qword_1EEF66E58, 0x90uLL);
  if (v2)
  {
    *(_QWORD *)(v2 + 24) = CFRetain(a1);
    *(_WORD *)(v2 + 16) = 1;
    v10 = sub_1B19C4770((uint64_t)a1, v3, v4, v5, v6, v7, v8, v9);
    *(_WORD *)(v2 + 128) = v10;
    *(_WORD *)(v2 + 130) = sub_1B179E250(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return v2;
}

uint64_t sub_1B19C48E4(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19C4910()
{
  uint64_t v0;

  if (qword_1EEF66E70 != -1)
    dispatch_once_f(&qword_1EEF66E70, &qword_1EEF66E68, (dispatch_function_t)sub_1B19C48E4);
  v0 = sub_1B179CB90(qword_1EEF66E68, 0x20uLL);
  if (v0)
    *(_QWORD *)(v0 + 16) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
  return v0;
}

uint64_t sub_1B19C4990(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  const void *v11;
  uint64_t Value;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const void *v20;
  void *(*v21)(int, void *, void *, size_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1)
  {
    if (a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
  if (!a2)
LABEL_3:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_4:
  v10 = (const void *)sub_1B19C4614((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  v11 = v10;
  if (*(const void **)(a1 + 24) == v10)
  {
    Value = *(_QWORD *)(a1 + 32);
    if (Value)
      goto LABEL_6;
LABEL_10:
    Value = sub_1B19C4854(a2);
    v20 = (const void *)sub_1B19C45CC((uint64_t)a2, v13, v14, v15, v16, v17, v18, v19);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), v11, (const void *)Value);
    *(_QWORD *)(Value + 136) = sub_1B17C59C8(v20);
    v21 = sub_1B17C5A10(v20);
    *(_QWORD *)(Value + 144) = v21;
    if (*(_QWORD *)(Value + 136))
    {
      if (v21)
      {
LABEL_12:
        sub_1B19C4B08(a1, Value, v22, v23, v24, v25, v26, v27);
        CFRelease((CFTypeRef)Value);
        *(_QWORD *)(a1 + 24) = v11;
        *(_QWORD *)(a1 + 32) = Value;
        return Value;
      }
    }
    else
    {
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v22, v23, v24, v25, v26, v27, (uint64_t)"item->_getter");
      if (*(_QWORD *)(Value + 144))
        goto LABEL_12;
    }
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v22, v23, v24, v25, v26, v27, (uint64_t)"item->_setter");
    goto LABEL_12;
  }
  *(_QWORD *)(a1 + 24) = v10;
  Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v10);
  *(_QWORD *)(a1 + 32) = Value;
  if (!Value)
    goto LABEL_10;
LABEL_6:
  ++*(_WORD *)(Value + 16);
  return Value;
}

void sub_1B19C4B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  CFTypeID v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_8:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"item");
    return;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
  if (!a2)
    goto LABEL_8;
LABEL_3:
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v9 + 37))
  {
    v10 = CFGetTypeID(*(CFTypeRef *)(v9 + 16));
    if (v10 != sub_1B1869F5C())
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXModelValueStorageUpdateModelValueFromPresentationValue - unexpected class"), v11, v12, v13, v14, v15, v16, (uint64_t)"CFGetTypeID(target->_owner) == CFXNodeGetTypeID()");
    v17 = (_OWORD *)sub_1B186BC40(*(_QWORD *)(v9 + 16));
    v18 = v17[1];
    *(_OWORD *)(a2 + 32) = *v17;
    *(_OWORD *)(a2 + 48) = v18;
    v19 = v17[5];
    v21 = v17[2];
    v20 = v17[3];
    *(_OWORD *)(a2 + 96) = v17[4];
    *(_OWORD *)(a2 + 112) = v19;
    *(_OWORD *)(a2 + 64) = v21;
    *(_OWORD *)(a2 + 80) = v20;
  }
  else
  {
    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 136);
    v22 = sub_1B19C45CC(v9, a2, a3, a4, a5, a6, a7, a8);
    v30 = sub_1B19C4614(v9, v23, v24, v25, v26, v27, v28, v29);
    v31(v22, v30, a2 + 32, *(__int16 *)(a2 + 130), *(char *)(v9 + 34), *(unsigned __int8 *)(v9 + 35));
  }
}

void sub_1B19C4C28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  if (*(_WORD *)(a2 + 16) == 1)
    sub_1B19C4CB8(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B19C4D8C(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19C4CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  v10 = sub_1B19C4614(*(_QWORD *)(a2 + 24), a2, a3, a4, a5, a6, a7, a8);
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned __int8 *)(v11 + 37);
  v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 144);
  v19 = sub_1B19C45CC(v11, (uint64_t)v26, v13, v14, v15, v16, v17, v18);
  if (v12)
  {
    v20 = v10;
    v21 = 96;
    v22 = 8;
    v23 = 0;
  }
  else
  {
    v21 = *(__int16 *)(a2 + 130);
    v24 = *(_QWORD *)(a2 + 24);
    v22 = *(char *)(v24 + 34);
    v23 = *(unsigned __int8 *)(v24 + 35);
    v20 = v10;
  }
  return v26(v19, v20, a2 + 32, v21, v22, v23);
}

void sub_1B19C4D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  __int16 v11;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  v10 = (const void *)sub_1B19C4614(*(_QWORD *)(a2 + 24), a2, a3, a4, a5, a6, a7, a8);
  v11 = *(_WORD *)(a2 + 16) - 1;
  *(_WORD *)(a2 + 16) = v11;
  if (!v11)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), v10);
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 32) = 0;
  }
}

const void *sub_1B19C4E28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  const void *result;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_3:
  v10 = (const void *)sub_1B19C4614(a2, a2, a3, a4, a5, a6, a7, a8);
  if (*(const void **)(a1 + 24) == v10)
    return *(const void **)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v10);
  *(_QWORD *)(a1 + 32) = result;
  return result;
}

void sub_1B19C4EC8(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
LABEL_7:
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"target");
    if (a3)
      goto LABEL_4;
    goto LABEL_8;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"item");
  if (!a2)
    goto LABEL_7;
LABEL_3:
  if (a3)
    goto LABEL_4;
LABEL_8:
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"aValue");
LABEL_4:
  v12 = *(unsigned __int8 *)(a1[1].n128_u64[1] + 37);
  v20 = (__int128 *)sub_1B191E41C(a3, a2, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
    v21 = sub_1B179E250(*(__int16 *)(a2 + 32), v13, v14, v15, v16, v17, v18, v19);
    sub_1B1823564(a1 + 2, v20, v21, *(char *)(a2 + 34), *(unsigned __int8 *)(a2 + 35), v22, v23, v24, v25, a9);
  }
  else
  {
    memcpy(&a1[2], v20, a1[8].n128_i16[1]);
  }
}

void sub_1B19C4FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_3:
  v12 = (__n128 *)sub_1B19C4E28(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v12)
    sub_1B19C4EC8(v12, a2, a3, v13, v14, v15, v16, v17, a9);
}

uint64_t sub_1B19C5074(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(a2 + 152) = *(_QWORD *)(result + 40);
  return result;
}

_QWORD *sub_1B19C5080(uint64_t a1, uint64_t a2)
{
  const void *v3;
  _QWORD *result;

  v3 = (const void *)sub_1B186BC40(a2);
  if (*(const void **)(a1 + 24) == v3)
  {
    result = *(_QWORD **)(a1 + 32);
    if (!result)
      return result;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = v3;
    result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v3);
    *(_QWORD *)(a1 + 32) = result;
    if (!result)
      return result;
  }
  result[19] = *(_QWORD *)(a1 + 40);
  return result;
}

void sub_1B19C50DC(uint64_t a1, uint64_t a2)
{
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const void *Value;

  v3 = (const void *)sub_1B186BC40(a2);
  if (*(const void **)(a1 + 24) != v3)
  {
    *(_QWORD *)(a1 + 24) = v3;
    Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v3);
    *(_QWORD *)(a1 + 32) = Value;
    if (!Value)
      return;
    goto LABEL_3;
  }
  Value = *(const void **)(a1 + 32);
  if (Value)
LABEL_3:
    sub_1B19C5140(a1, (uint64_t)Value, v4, v5, v6, v7, v8, v9);
}

void sub_1B19C5140(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void (*v23)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  _OWORD v34[4];

  if (a1)
  {
    if (a2)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  v10 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(a2 + 152) != v10)
  {
    *(_QWORD *)(a2 + 152) = v10;
    v18 = sub_1B19C4614(*(_QWORD *)(a2 + 24), a2, a3, a4, a5, a6, a7, a8);
    v19 = *(_QWORD *)(a2 + 24);
    if (*(_BYTE *)(v19 + 37))
    {
      v34[0] = sub_1B1822148((_BYTE *)(a2 + 32), v11, v12, v13, v14, v15, v16, v17);
      v34[1] = v20;
      v34[2] = v21;
      v34[3] = v22;
      v23 = *(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(a2 + 144);
      v31 = sub_1B19C45CC(*(_QWORD *)(a2 + 24), v24, v25, v26, v27, v28, v29, v30);
      v23(v31, v18, v34, 64, 8, 0);
    }
    else
    {
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(a2 + 144);
      v32 = sub_1B19C45CC(v19, (uint64_t)v33, v12, v13, v14, v15, v16, v17);
      v33(v32, v18, a2 + 32, *(__int16 *)(a2 + 130), *(char *)(*(_QWORD *)(a2 + 24) + 34), *(unsigned __int8 *)(*(_QWORD *)(a2 + 24) + 35));
    }
  }
}

uint64_t sub_1B19C5254(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v14 = sub_1B19C4614(a2[3], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  a2[19] = *(_QWORD *)(a1 + 40);
  v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2[18];
  v22 = sub_1B19C45CC(a2[3], v15, v16, v17, v18, v19, v20, v21);
  return v24(v22, v14, a5, a6, a3, a4);
}

uint64_t sub_1B19C52E0(uint64_t a1, uint64_t *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t (*v15)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t (*v41)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t (*v51)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t (*v67)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  uint64_t v68;
  uint64_t (*v69)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD);
  __n128 v70;

  result = a2[3];
  v12 = *(_QWORD *)(result + 24);
  a2[19] = *(_QWORD *)(a1 + 40);
  if ((_DWORD)a4 == 7)
  {
    v69 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
    v13 = sub_1B19C45CC(result, (uint64_t)v69, (uint64_t)a3, a4, a5, a6, a7, a8);
    return v69(v13, v12, a3, 96, 8, 0);
  }
  v14 = a4;
  if ((a4 & 1) != 0)
  {
    v70 = sub_1B1822B4C(a3);
    v15 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
    v23 = sub_1B19C45CC(a2[3], v16, v17, v18, v19, v20, v21, v22);
    result = v15(v23, v12, &v70, 16, 6, 0);
    if ((v14 & 4) == 0)
    {
LABEL_5:
      if ((v14 & 2) == 0)
        return result;
      goto LABEL_9;
    }
  }
  else if ((a4 & 4) == 0)
  {
    goto LABEL_5;
  }
  v70 = sub_1B1822B64((uint64_t)a3, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  v24 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
  v32 = sub_1B19C45CC(a2[3], v25, v26, v27, v28, v29, v30, v31);
  result = v24(v32, v12, &v70, 16, 7, 0);
  if ((v14 & 2) == 0)
    return result;
LABEL_9:
  result = sub_1B1822120((uint64_t)a3);
  switch((_DWORD)result)
  {
    case 2:
      sub_1B1822A68((float32x4_t *)a3, v33, v34, v35, v36, v37, v38, v39);
      v70 = v50;
      v51 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
      v59 = sub_1B19C45CC(a2[3], v52, v53, v54, v55, v56, v57, v58);
      return v51(v59, v12, &v70, 16, 4, 0);
    case 1:
      v70 = sub_1B182298C((float32x4_t *)a3, v33, v34, v35, v36, v37, v38, v39);
      v67 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
      v68 = sub_1B19C45CC(a2[3], v60, v61, v62, v63, v64, v65, v66);
      return v67(v68, v12, &v70, 16, 5, 0);
    case 0:
      v40.n128_f64[0] = sub_1B182240C((float32x4_t *)a3, v33, v34, v35, v36, v37, v38, v39);
      v70 = v40;
      v41 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, _QWORD))a2[18];
      v49 = sub_1B19C45CC(a2[3], v42, v43, v44, v45, v46, v47, v48);
      return v41(v49, v12, &v70, 16, 3, 0);
  }
  return result;
}

void sub_1B19C5490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
  ++*(_QWORD *)(a1 + 40);
}

void sub_1B19C54E4(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 24) = 0;
  }
}

CFStringRef sub_1B19C5510(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXModelValueStorageItem %p>"), a1);
}

CFStringRef sub_1B19C554C(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXModelValueStorageItem %p>"), a1);
}

void sub_1B19C558C(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
}

CFStringRef sub_1B19C55B8(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXModelValueStorage>"));
}

CFStringRef sub_1B19C55D8(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXModelValueStorage>"));
}

__n128 sub_1B19C55F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t *v8;
  uint64_t v9;
  __n128 result;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a4;
  v7 = atomic_load((unsigned __int8 *)&qword_1EEF66E80);
  v8 = &qword_1EEF66000;
  if ((v7 & 1) == 0)
  {
    v13 = a2;
    v14 = a3;
    v15 = v6;
    v12 = __cxa_guard_acquire(&qword_1EEF66E80);
    v8 = &qword_1EEF66000;
    a3 = v14;
    v6 = v15;
    a2 = v13;
    if (v12)
    {
      byte_1EEF66E78 = 1;
      __cxa_guard_release(&qword_1EEF66E80);
      v8 = &qword_1EEF66000;
      a3 = v14;
      v6 = v15;
      a2 = v13;
    }
  }
  if (*((_BYTE *)v8 + 3704))
    v9 = 0x942F6080D78D35A4;
  else
    v9 = 0;
  CFX::RG::Pass::Pass(a1, a2, a3, v6, 1, v9, 0);
  *(_QWORD *)a1 = &off_1E63CF518;
  result = *(__n128 *)a4;
  v11 = a4[2];
  *(_OWORD *)(a1 + 360) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 376) = v11;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = 0;
  return result;
}

void sub_1B19C56D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = 0x9DDFEA08EB382D69 * (v4 ^ (unint64_t)*(float *)(a1 + 368));
  v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  v7 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
  *(_QWORD *)(a1 + 384) = v7;
  if (!v7)
  {
    *(_QWORD *)(a1 + 384) = sub_1B19C57A8(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
    v15 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 376), v8, v9, v10, v11, v12, v13, v14);
    v16 = *(_QWORD *)(a1 + 384);
    v17 = objc_alloc(MEMORY[0x1E0CC6E48]);
    v21 = objc_msgSend_device(v15, v18, v19, v20);
    LODWORD(v22) = *(_DWORD *)(a1 + 368);
    v25 = objc_msgSend_initWithDevice_sigma_(v17, v23, v21, v24, v22);
    v26 = *(void **)(v16 + 16);
    if (v26 != (void *)v25)
    {
      v27 = v25;
      if (v26)

      *(_QWORD *)(v16 + 16) = v27;
    }
  }
}

_QWORD *sub_1B19C57A8(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    v4[1] = 0;
    v4[2] = 0;
    *v4 = &off_1E63CF4F8;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

uint64_t sub_1B19C581C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id Texture;

  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 392));
  CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
  return MEMORY[0x1E0DE7D20](*(_QWORD *)(*(_QWORD *)(a1 + 384) + 16), sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, *(_QWORD *)(a3 + 16), Texture);
}

void sub_1B19C5878(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    sub_1B19C581C(a1, a2, a4 + 8);
  }
  else if (a3 == 1)
  {
    sub_1B19C56D0(a1, a2);
  }
}

uint64_t *sub_1B19C5898(uint64_t *a1, uint64_t a2, uint64_t a3, float a4)
{
  uint64_t *v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  CFX::RG::RenderGraphBuilder *v15;
  const char *v16;
  CFX::RG::Resource *v17;
  CFX::RG::Resource *v18;
  _OWORD v20[10];
  _BYTE v21[160];
  _OWORD v22[4];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29[3];

  v29[0] = a2;
  v29[1] = LODWORD(a4);
  v29[2] = *(_QWORD *)a3;
  v6 = (uint64_t *)sub_1B19C59AC(a1, v29);
  v7 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)(a3 + 8));
  v8 = v7[1];
  v22[0] = *v7;
  v22[1] = v8;
  v9 = v7[5];
  v11 = v7[2];
  v10 = v7[3];
  v23 = v7[4];
  v24 = v9;
  v22[2] = v11;
  v22[3] = v10;
  v12 = v7[9];
  v14 = v7[6];
  v13 = v7[7];
  v27 = v7[8];
  v28 = v12;
  v25 = v14;
  v26 = v13;
  v15 = *(CFX::RG::RenderGraphBuilder **)(a3 + 8);
  CFX::RG::TextureDescriptorReference::withSampleCount(v22, 1, (uint64_t)v21);
  v17 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded((CFX::RG *)a1, v15, 0, (CFX::RG::Pass *)v21, (const CFX::RG::TextureDescriptorReference *)"MPSGaussianBlur color input resolve", v16);
  v6[49] = (uint64_t)v17;
  CFX::RG::Pass::readFrom(v6, v17);
  if (!(_BYTE)v24)
    LOBYTE(v24) = 1;
  *((_QWORD *)&v23 + 1) = 2;
  CFX::RG::TextureDescriptorReference::withSampleCount(v22, 1, (uint64_t)v20);
  v18 = sub_1B17A34D0(a1, (uint64_t)"color", v20);
  v6[50] = (uint64_t)v18;
  CFX::RG::Pass::writeTo(v6, v18);
  return v6;
}

uint64_t sub_1B19C59AC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7[2];

  v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  sub_1B19C5AA4(v7[0], v4, v7, a2);
  v7[0] = v5;
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B19C5A00(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B19C5A24(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E63CF4F8;
  v2 = (void *)a1[2];
  if (v2)

  return a1;
}

void sub_1B19C5A5C(_QWORD *a1)
{
  void *v1;

  *a1 = &off_1E63CF4F8;
  v1 = (void *)a1[2];
  if (v1)

  JUMPOUT(0x1B5E22E18);
}

double sub_1B19C5AA4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v6;
  double result;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v6 = sub_1B179C1C0(v8, 0x198u, 8u);
  *(_QWORD *)&result = sub_1B19C55F8(v6, *a3, a3[1], a4).n128_u64[0];
  return result;
}

uint64_t sub_1B19C5D28(uint64_t a1)
{
  return sub_1B19BA89C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40));
}

uint64_t sub_1B19C5DCC(uint64_t a1)
{
  return sub_1B19BA8A4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40));
}

uint64_t sub_1B19C5E84(uint64_t a1)
{
  return sub_1B19BA8B4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40));
}

void sub_1B19C61D8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;

  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
  if ((sub_1B18C2F24(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 16));
    objc_msgSend_removeObjectForKey_(*(void **)(*(_QWORD *)(a1 + 40) + 24), v10, *(_QWORD *)(a1 + 48), v11);
    os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 40) + 16));
  }
}

void sub_1B19C63A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C30E4(*(void **)(a1 + 32), a2, a3, a4);
}

void sub_1B19C6454(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3148(*(void **)(a1 + 32), a2, a3, a4, *(float *)(a1 + 40));
}

void sub_1B19C6510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C2FF4(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4);
}

void sub_1B19C65D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B18C3064(*(void **)(a1 + 32), *(char **)(a1 + 40), a3, a4, *(float *)(a1 + 48));
}

void sub_1B19C6AB4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  CFXBinding *v24;

  v5 = (_QWORD *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  v24 = objc_alloc_init(CFXBinding);
  v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(_QWORD *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(_QWORD *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(_QWORD *)(a1 + 64), v17);
  sub_1B193F4C8(v5, v24, v18, v19, v20, v21, v22, v23);

}

void sub_1B19C6BE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F704(v5, *(const __CFString **)(a1 + 40), v6, v7, v8, v9, v10, v11);
}

void sub_1B19C6C8C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFTypeRef *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B193F68C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B19C6F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BB534(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

CFTypeRef sub_1B19C7000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B182F974(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

double sub_1B19C70B0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_QWORD *)&result = sub_1B19BB580((__n128 *)*(_QWORD *)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

double sub_1B19C7168(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_QWORD *)&result = sub_1B19BB5D8((__n128 *)*(_QWORD *)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

void sub_1B19C7228(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BB630(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

CFTypeRef sub_1B19C7974(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B182F974(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C7A24(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BE2BC(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C7AD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BE30C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C7B94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BE358(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C7C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BE3AC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

CFTypeRef sub_1B19C814C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B182F974(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C8240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BF240(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C82F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BF1E8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C83A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BF2A4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(unsigned __int8 *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C8460(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BB630(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C8518(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BF308(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C85D0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BE2BC(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C8C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BEBEC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C8CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BEC40(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C8D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BE358(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C8E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BE3AC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19C91B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B182F790(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C9264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B182F7DC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

double sub_1B19C9310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  *(_QWORD *)&result = sub_1B182F830((__n128 *)*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(__n128 *)(*(_QWORD *)(a1 + 32) + 64), a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

uint64_t sub_1B19C9900(void *a1, char *a2, id *a3, uint64_t a4)
{
  uint64_t v7;
  id *v8;
  id *v9;

  v7 = objc_msgSend_delegate(a1, a2, (uint64_t)a3, a4);
  v8 = sub_1B193E758((id *)a2);
  v9 = sub_1B193E758(a3);
  if (v8 && v9)
    return MEMORY[0x1E0DE7D20](v7, sel_avoidOccluderConstraint_shouldAvoidOccluder_forNode_, a1, v8);
  else
    return 1;
}

void sub_1B19C9978(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v9 = sub_1B182DA90(a1[4], a1[5], a1[6], a4, a5, a6, a7, a8);
  sub_1B182F8FC(*(_QWORD *)(a1[4] + 8), v9, v10, v11, v12, v13, v14, v15);
  CFRelease(v9);
}

CFTypeRef sub_1B19C9A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B182F974(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C9B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B182F790(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_QWORD *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B19C9BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B182F9EC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19C9F14(uint64_t a1)
{
  return sub_1B19BC8E8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_DWORD *)(a1 + 40));
}

uint64_t sub_1B19C9FB8(uint64_t a1)
{
  return sub_1B19BC8F0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40));
}

uint64_t sub_1B19CA2B4(uint64_t a1)
{
  return sub_1B19BD740(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(float *)(a1 + 40));
}

uint64_t sub_1B19CA368(uint64_t a1)
{
  return sub_1B19BC8F0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), *(_BYTE *)(a1 + 40));
}

void *sub_1B19CA5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  __n128 *v12;
  const char *v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  void *result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  _OWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  __n128 v57;
  int v58;
  int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int8x16_t v64;
  float v65;
  float v66;
  float32x4_t v67;
  int8x16_t v68;
  float32x4_t v69;
  int8x16_t v70;
  float v71;
  float v72;
  float v74;
  float v75;
  float32x2_t v76;
  float32x2_t v77;
  float v78;
  float v79;
  int32x2_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float32x4_t v87;
  float v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  int32x2_t v98;
  float v99;
  float32x4_t v100;
  float v101;
  float v102;
  float v103;
  int8x16_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  const void *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  size_t v133;
  uint64_t v134;
  uint64_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  __n128 v139;
  __n128 v141;
  __n128 v142;
  float32x4_t v143;
  float32x4_t v144;
  __n128 v145;
  float32x4_t v146;
  float v147;
  float v148;
  float v149;
  float v150;
  __n128 v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  __n128 v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  __n128 v161;
  float32x4_t v162[4];
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  __n128 v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;

  if (*(_BYTE *)(a1 + 40))
  {
    v12 = (__n128 *)sub_1B1869AC8(a3, a2, a3, a4, a5, a6, a7, a8);
    v151 = v12[1];
    v155 = *v12;
    v141 = v12[3];
    v145 = v12[2];
  }
  else
  {
    v15.n128_f64[0] = sub_1B18697A0(a3, a2, a3, a4, a5, a6, a7, a8);
    v151 = v16;
    v155 = v15;
    v141 = v18;
    v145 = v17;
  }
  objc_msgSend_nodeWithNodeRef_(VFXNode, v13, a3, v14);
  v19.n128_f64[0] = (*(double (**)(__n128, __n128, __n128, __n128))(*(_QWORD *)(a1 + 32) + 16))(v155, v151, v145, v141);
  v20 = v19;
  v22 = v21;
  v24 = v23;
  v26 = v25;
  v28 = v151;
  v27 = v155;
  v30 = v141;
  v29 = v145;
  v152 = (float32x4_t)v22;
  v156 = (float32x4_t)v20;
  v142 = v26;
  v146 = (float32x4_t)v24;
  result = (void *)VFXMatrix4EqualToMatrix4(v27, v28, v29, v30, v20, v22, v24, v26);
  if ((result & 1) == 0)
  {
    v158 = v156;
    v159 = v152;
    v160 = v146;
    v161 = v142;
    if (*(_BYTE *)(a1 + 40))
    {
      v39 = sub_1B186B574(a3, v32, v33, v34, v35, v36, v37, v38);
      if (v39)
      {
        *(double *)v40.i64 = sub_1B186B90C(v39, v32, v33, v34, v35, v36, v37, v38);
        v44 = 0;
        v162[0] = v156;
        v162[1] = v152;
        v162[2] = v146;
        v162[3] = (float32x4_t)v142;
        v163 = 0u;
        v164 = 0u;
        v165 = 0u;
        v166 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v163 + v44 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, COERCE_FLOAT(*(_OWORD *)&v162[v44])), v41, *(float32x2_t *)v162[v44].f32, 1), v42, v162[v44], 2), v43, v162[v44], 3);
          ++v44;
        }
        while (v44 != 4);
        v156 = v163;
        v158 = v163;
        v146 = v165;
        v152 = v164;
        v159 = v164;
        v160 = v165;
        v142 = v166;
        v161 = v166;
      }
    }
    v45 = (_OWORD *)sub_1B19C4614(a4, v32, v33, v34, v35, v36, v37, v38);
    v53 = v45;
    if (a9 != 1.0)
    {
      v54 = *(float32x4_t *)v45;
      v55 = *((float32x4_t *)v45 + 1);
      v56 = *((float32x4_t *)v45 + 2);
      v57 = *((__n128 *)v45 + 3);
      v163 = 0uLL;
      v162[0] = 0uLL;
      v170.i32[2] = 0;
      v170.i64[0] = 0;
      v169.i32[2] = 0;
      v169.i64[0] = 0;
      v168.i32[2] = 0;
      v168.i64[0] = 0;
      v167.i32[2] = 0;
      v167.i64[0] = 0;
      v137 = v55;
      v138 = v54;
      v136 = v56;
      v139 = v57;
      v58 = sub_1B1802048(&v163, (__n128 *)&v170, &v168, v54, v55, v56, v57);
      v59 = sub_1B1802048(v162, (__n128 *)&v169, &v167, v156, v152, v146, v142);
      if (v58)
      {
        v60 = v138;
        v61 = (float32x4_t)v139;
        v62 = v136;
        v63 = v137;
        if (v59)
        {
          v64 = (int8x16_t)vmulq_f32(v163, v162[0]);
          v153 = v162[0];
          v157 = v163;
          v65 = 1.0;
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL))) >= 0.0)
          {
            v88 = 1.0 - a9;
            v89 = vsubq_f32(v163, v162[0]);
            v90 = (int8x16_t)vmulq_f32(v89, v89);
            v91 = vaddq_f32(v163, v162[0]);
            v92 = (int8x16_t)vmulq_f32(v91, v91);
            v93 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)))));
            v94 = v93 + v93;
            _ZF = (float)(v93 + v93) == 0.0;
            v95 = 1.0;
            if (!_ZF)
              v95 = sinf(v94) / v94;
            v96 = v95;
            v97 = vrecpe_f32((float32x2_t)LODWORD(v95));
            v98 = (int32x2_t)vmul_f32(v97, vrecps_f32((float32x2_t)LODWORD(v96), v97));
            LODWORD(v99) = vmul_f32((float32x2_t)v98, vrecps_f32((float32x2_t)LODWORD(v96), (float32x2_t)v98)).u32[0];
            if ((float)(v88 * v94) != 0.0)
            {
              v149 = v99;
              *(float *)v98.i32 = sinf(v88 * v94);
              v99 = v149;
              v65 = *(float *)v98.i32 / (float)(v88 * v94);
            }
            *(float *)v98.i32 = v88 * (float)(v99 * v65);
            v100 = (float32x4_t)vdupq_lane_s32(v98, 0);
            v83 = a9;
            v101 = v94 * a9;
            v102 = 1.0;
            if (v101 != 0.0)
            {
              v144 = v100;
              v150 = v99;
              v103 = sinf(v101);
              v100 = v144;
              v99 = v150;
              v83 = a9;
              v102 = v103 / v101;
            }
            v87 = vmlaq_f32(vmulq_n_f32(v153, (float)(v99 * v102) * v83), v157, v100);
          }
          else
          {
            v66 = 1.0 - a9;
            v67 = vaddq_f32(v163, v162[0]);
            v68 = (int8x16_t)vmulq_f32(v67, v67);
            v69 = vsubq_f32(v163, v162[0]);
            v70 = (int8x16_t)vmulq_f32(v69, v69);
            v71 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)))));
            v72 = v71 + v71;
            _ZF = (float)(v71 + v71) == 0.0;
            v74 = 1.0;
            if (!_ZF)
              v74 = sinf(v72) / v72;
            v75 = v74;
            v76 = vrecpe_f32((float32x2_t)LODWORD(v74));
            v77 = vmul_f32(v76, vrecps_f32((float32x2_t)LODWORD(v75), v76));
            LODWORD(v78) = vmul_f32(v77, vrecps_f32((float32x2_t)LODWORD(v75), v77)).u32[0];
            if ((float)(v66 * v72) != 0.0)
            {
              v147 = v78;
              v79 = sinf(v66 * v72);
              v78 = v147;
              v65 = v79 / (float)(v66 * v72);
            }
            v80.i32[1] = v153.i32[1];
            v81 = vnegq_f32(v153);
            *(float *)v80.i32 = v66 * (float)(v78 * v65);
            v82 = (float32x4_t)vdupq_lane_s32(v80, 0);
            v83 = a9;
            v84 = v72 * a9;
            v85 = 1.0;
            if (v84 != 0.0)
            {
              v148 = v78;
              v154 = v81;
              v143 = v82;
              v86 = sinf(v84);
              v82 = v143;
              v78 = v148;
              v81 = v154;
              v83 = a9;
              v85 = v86 / v84;
            }
            v87 = vmlaq_f32(vmulq_n_f32(v81, (float)(v78 * v85) * v83), v157, v82);
          }
          v104 = (int8x16_t)vmulq_f32(v87, v87);
          *(float32x2_t *)v104.i8 = vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL));
          v105 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0);
          v106 = vrsqrteq_f32(v105);
          v107 = vmulq_f32(v106, vrsqrtsq_f32(v105, vmulq_f32(v106, v106)));
          __asm { FMOV            V3.4S, #1.0 }
          v112 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v105), _Q3, (int8x16_t)vmulq_f32(v107, vrsqrtsq_f32(v105, vmulq_f32(v107, v107))));
          v61 = vmlaq_n_f32(v170, vsubq_f32(v169, v170), v83);
          v113 = vmlaq_n_f32(v168, vsubq_f32(v167, v168), v83);
          v61.i32[3] = 1.0;
          v114 = vabsq_f32(v113);
          v114.i32[3] = 0;
          v115 = vmulq_f32(v87, v112);
          v116 = vmaxnmq_f32(v114, (float32x4_t)xmmword_1B2245780);
          v114.i64[0] = 0x8000000080000000;
          v114.i64[1] = 0x8000000080000000;
          v117 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v113, (int8x16_t)v114), (int8x16_t)(*(_OWORD *)&v116 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
          v118 = vmulq_f32(v115, v115);
          v119 = vmulq_laneq_f32(v115, v115, 3);
          v120 = vmulq_lane_f32(v115, *(float32x2_t *)v115.f32, 1).f32[0];
          v121 = vaddq_f32(v117, v117);
          v118.f32[0] = 0.5 - v118.f32[0];
          *(float32x2_t *)v115.f32 = vmul_laneq_f32(*(float32x2_t *)v115.f32, v115, 2);
          v122.i32[3] = 0;
          v122.f32[0] = (float)(0.5 - v118.f32[1]) - v118.f32[2];
          v122.f32[1] = v120 + v119.f32[2];
          v123.i32[3] = 0;
          v122.f32[2] = v115.f32[0] - v119.f32[1];
          v60 = vmulq_n_f32(v122, v121.f32[0]);
          v123.f32[0] = v120 - v119.f32[2];
          v123.f32[1] = v118.f32[0] - v118.f32[2];
          v123.f32[2] = v115.f32[1] + v119.f32[0];
          v63 = vmulq_lane_f32(v123, *(float32x2_t *)v121.f32, 1);
          *(int32x2_t *)v119.f32 = vrev64_s32(*(int32x2_t *)v119.f32);
          v124.i32[0] = vadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v119.f32).u32[0];
          v124.i32[1] = vsub_f32(*(float32x2_t *)&v115, *(float32x2_t *)&v119).i32[1];
          v124.f32[2] = v118.f32[0] - v118.f32[1];
          v124.i32[3] = 0;
          v62 = vmulq_laneq_f32(v124, v121, 2);
        }
      }
      else
      {
        v60 = v138;
        v61 = (float32x4_t)v139;
        v62 = v136;
        v63 = v137;
      }
      v158 = v60;
      v159 = v63;
      v160 = v62;
      v161 = (__n128)v61;
    }
    v125 = (const void *)sub_1B19C45CC(a4, v46, v47, v48, v49, v50, v51, v52);
    v133 = sub_1B179E250(10, v126, v127, v128, v129, v130, v131, v132);
    return sub_1B17C58FC(v125, v53, &v158, v133, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v134, v135);
  }
  return result;
}

uint64_t sub_1B19CABC0(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  const char *v12;
  uint64_t v13;
  __n128 v14;
  float32x4_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  const void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  uint64_t v48;
  float v50;
  float32x4_t v51;
  __n128 v52;
  float32x4_t v53;

  if (*(_BYTE *)(a1 + 40))
    v14 = *(__n128 *)(sub_1B1869AC8((uint64_t)a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8) + 48);
  else
    v14.n128_f64[0] = sub_1B186B9C0(a3);
  v52 = v14;
  objc_msgSend_nodeWithNodeRef_(VFXNode, v12, (uint64_t)a3, v13, *(_OWORD *)&a9);
  *(double *)v15.i64 = (*(double (**)(__n128))(*(_QWORD *)(a1 + 32) + 16))(v52);
  v51 = v15;
  result = VFXVector3EqualToVector3(v15, (float32x4_t)v52);
  if ((result & 1) == 0)
  {
    v53 = v51;
    if (*(_BYTE *)(a1 + 40))
    {
      v24 = sub_1B186B574((uint64_t)a3, v17, v18, v19, v20, v21, v22, v23);
      if (v24)
      {
        *(double *)v25.i64 = sub_1B186B90C(v24, v17, v18, v19, v20, v21, v22, v23);
        v53 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v27, v26, v51, 2), v28, *(float32x2_t *)v51.f32, 1), v25, v51.f32[0]);
        v51 = v53;
      }
    }
    if (v50 != 1.0)
    {
      *(double *)v29.i64 = sub_1B186B9C0(a3);
      v53 = vmlaq_n_f32(v29, vsubq_f32(v51, v29), v50);
    }
    v30 = (const void *)sub_1B19C45CC(a4, v17, v18, v19, v20, v21, v22, v23);
    v38 = (void *)sub_1B19C4614(a4, v31, v32, v33, v34, v35, v36, v37);
    v46 = sub_1B179E250(8, v39, v40, v41, v42, v43, v44, v45);
    return (uint64_t)sub_1B17C58FC(v30, v38, &v53, v46, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v47, v48);
  }
  return result;
}

void sub_1B19CAD8C(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  const char *v13;
  uint64_t v14;
  float32x4_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  float32x4_t v23;
  uint64_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  float32x4_t v48;
  int32x4_t v49;
  float v50;
  float32x4_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  int8x16_t v57;
  int8x16_t v58;
  float v59;
  float32x2_t v60;
  float32x2_t v61;
  float32x2_t v62;
  uint64_t v63;
  int32x2_t v64;
  float32x4_t v65;
  float32x2_t v66;
  float32x2_t v67;
  int32x4_t v70;
  float32x4_t v71;
  float32x4_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  float32x4_t *v84;
  float32x4_t v85;
  int8x16_t v86;
  float v87;
  float v88;
  float32x4_t v89;
  int8x16_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float v93;
  float v94;
  float v95;
  float v96;
  float32x2_t v97;
  float32x2_t v98;
  float v99;
  float v100;
  int32x2_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float v104;
  float v105;
  float v106;
  float32x4_t v107;
  float32x4_t v108;
  int8x16_t v109;
  float32x4_t v110;
  int8x16_t v111;
  float v112;
  float v113;
  float v114;
  float v115;
  float32x2_t v116;
  int32x2_t v117;
  float v118;
  float32x4_t v119;
  float v120;
  float v121;
  float v122;
  int8x16_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  const void *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  size_t v136;
  uint64_t v137;
  uint64_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float32x4_t v145;
  __n128 v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;

  if (*(_BYTE *)(a1 + 40))
  {
    v149 = 0uLL;
    sub_1B186B63C((uint64_t)a3, &v149, (uint64_t)a3, a4, a5, a6, a7, a8);
    v15 = v149;
  }
  else
  {
    *(double *)v15.i64 = sub_1B186BB70(a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v146 = (__n128)v15;
  objc_msgSend_nodeWithNodeRef_(VFXNode, v13, (uint64_t)a3, v14);
  *(double *)v23.i64 = (*(double (**)(__n128))(*(_QWORD *)(a1 + 32) + 16))(v146);
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v23, (float32x4_t)v146)) & 0x80000000) != 0)
    return;
  v147 = v23;
  v149 = v23;
  if (*(_BYTE *)(a1 + 40))
  {
    v24 = sub_1B186B574((uint64_t)a3, v16, v17, v18, v19, v20, v21, v22);
    if (v24)
    {
      *(double *)v25.i64 = sub_1B186B90C(v24, v16, v17, v18, v19, v20, v21, v22);
      v26 = (int32x4_t)vmulq_f32(v25, v25);
      v28 = (int32x4_t)vmulq_f32(v27, v27);
      v30 = (int32x4_t)vmulq_f32(v29, v29);
      v31 = vzip2q_s32(v26, v30);
      v32 = (float32x4_t)vzip1q_s32(vzip1q_s32(v26, v30), v28);
      v33 = (float32x4_t)vtrn2q_s32(v26, v28);
      v33.i32[2] = v30.i32[1];
      v34 = vaddq_f32((float32x4_t)vzip1q_s32(v31, vdupq_laneq_s32(v28, 2)), vaddq_f32(v32, v33));
      v33.i64[0] = 0x80000000800000;
      v33.i64[1] = 0x80000000800000;
      v35 = vcgeq_f32(v33, v34);
      v34.i32[3] = 0;
      v36 = vrsqrteq_f32(v34);
      v37 = vmulq_f32(v36, vrsqrtsq_f32(v34, vmulq_f32(v36, v36)));
      v38 = v35;
      v38.i32[3] = 0;
      v39 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v38), (int8x16_t)v34, (int8x16_t)vmulq_f32(v37, vrsqrtsq_f32(v34, vmulq_f32(v37, v37))));
      v40 = vmulq_n_f32(v25, v39.f32[0]);
      v41 = vmulq_lane_f32(v27, *(float32x2_t *)v39.f32, 1);
      v42 = vmulq_laneq_f32(v29, v39, 2);
      v43 = (int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42);
      v44 = (int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41);
      v45 = (int32x4_t)v40;
      if (v35.i32[0])
      {
        v46 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v43, (int8x16_t)v42, 0xCuLL), vnegq_f32(v41)), v42, (float32x4_t)vextq_s8(v44, (int8x16_t)v41, 0xCuLL));
        v45 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL);
      }
      v47 = (int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40);
      v48 = v41;
      if (v35.i32[1])
      {
        v49 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v47, (int8x16_t)v40, 0xCuLL), vnegq_f32(v42)), v40, (float32x4_t)vextq_s8(v43, (int8x16_t)v42, 0xCuLL));
        v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL);
      }
      if (v35.i32[2])
      {
        v35 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v44, (int8x16_t)v41, 0xCuLL), vnegq_f32(v40)), v41, (float32x4_t)vextq_s8(v47, (int8x16_t)v40, 0xCuLL));
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v35, v35), (int8x16_t)v35, 0xCuLL);
      }
      v50 = (float)(*(float *)v45.i32 + v48.f32[1]) + v42.f32[2];
      if (v50 > 0.0)
      {
        v51 = (float32x4_t)vzip2q_s32((int32x4_t)v48, vuzp1q_s32((int32x4_t)v48, (int32x4_t)v42));
        v51.i32[2] = v45.i32[1];
        v52 = sqrtf(v50 + 1.0);
        v53 = (float32x4_t)vtrn2q_s32((int32x4_t)v42, vzip2q_s32((int32x4_t)v42, v45));
        v53.i32[2] = v48.i32[0];
        v55 = vsubq_f32(v51, v53);
        v51.f32[3] = v52;
        v53.f32[3] = v52;
        v54 = vmulq_f32(v51, v53);
        v55.i32[3] = v54.i32[3];
LABEL_24:
        v54.f32[0] = 0.5 / v52;
        v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
        goto LABEL_25;
      }
      if (*(float *)v45.i32 < v48.f32[1] || *(float *)v45.i32 < v42.f32[2])
      {
        if (v48.f32[1] <= v42.f32[2])
        {
          v52 = sqrtf((float)((float)(v42.f32[2] + 1.0) - *(float *)v45.i32) - v48.f32[1]);
          *(float32x2_t *)v55.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v45, (int32x4_t)v48), *(float32x2_t *)v42.f32);
          v66 = (float32x2_t)__PAIR64__(v45.u32[1], LODWORD(v52));
          v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.f32, 0);
          *(float32x2_t *)v54.f32 = vsub_f32(*(float32x2_t *)v45.i8, v67);
          v67.f32[0] = v52;
          v67.i32[0] = vmul_f32(v66, v67).u32[0];
          v67.i32[1] = v54.i32[1];
          *(float32x2_t *)&v55.u32[2] = v67;
          goto LABEL_24;
        }
        v59 = sqrtf((float)((float)(v48.f32[1] + 1.0) - *(float *)v45.i32) - v42.f32[2]);
        *(int32x2_t *)v35.i8 = vdup_laneq_s32((int32x4_t)v48, 2);
        v57 = (int8x16_t)v35;
        *(float *)v57.i32 = v59;
        v57.i32[0] = vmul_f32(*(float32x2_t *)v57.i8, (float32x2_t)__PAIR64__(v42.u32[1], LODWORD(v59))).u32[0];
        v57.i32[1] = vadd_f32(*(float32x2_t *)&v35, *(float32x2_t *)&v42).i32[1];
        v58 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 1), v48);
        v64 = (int32x2_t)vsubq_f32(v42, (float32x4_t)vdupq_laneq_s32(v45, 2)).u64[0];
        v65 = (float32x4_t)vextq_s8(vextq_s8(v58, v58, 4uLL), v57, 0xCuLL);
        v65.i32[3] = v64.i32[0];
      }
      else
      {
        v59 = sqrtf((float)((float)(*(float *)v45.i32 + 1.0) - v48.f32[1]) - v42.f32[2]);
        v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.f32, 0);
        v61 = vadd_f32(*(float32x2_t *)v45.i8, v60);
        v60.f32[0] = v59;
        v65.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v45.u32[1], LODWORD(v59)), v60).u32[0];
        v65.i32[1] = v61.i32[1];
        v62 = (float32x2_t)vzip2q_s32(v45, (int32x4_t)v48).u64[0];
        LODWORD(v63) = vadd_f32(v62, *(float32x2_t *)v42.f32).u32[0];
        v64 = (int32x2_t)vsub_f32(v62, *(float32x2_t *)v42.f32);
        HIDWORD(v63) = v64.i32[1];
        v65.i64[1] = v63;
      }
      *(float *)v64.i32 = 0.5 / v59;
      v55 = (float32x4_t)vdupq_lane_s32(v64, 0);
LABEL_25:
      _Q0 = vmulq_f32(v55, v65);
      _S1 = v147.i32[3];
      v70 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147), (int8x16_t)v147, 0xCuLL), vnegq_f32(_Q0)), v147, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
      v71 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(_Q0, v147, 3), v147, _Q0, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v70, v70), (int8x16_t)v70, 0xCuLL));
      __asm { FMLA            S3, S1, V0.S[3] }
      v71.i32[3] = _S3;
      v147 = v71;
      v149 = v71;
    }
  }
  v76 = (float32x4_t *)sub_1B19C4614(a4, v16, v17, v18, v19, v20, v21, v22);
  v84 = v76;
  if (a9 != 1.0)
  {
    v85 = *v76;
    v86 = (int8x16_t)vmulq_f32(*v76, v147);
    v145 = *v76;
    v87 = 1.0;
    v88 = 1.0 - a9;
    if (vaddv_f32(vadd_f32(*(float32x2_t *)v86.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL))) >= 0.0)
    {
      v108 = vsubq_f32(v85, v147);
      v109 = (int8x16_t)vmulq_f32(v108, v108);
      v110 = vaddq_f32(v85, v147);
      v111 = (int8x16_t)vmulq_f32(v110, v110);
      v112 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL)))));
      v113 = v112 + v112;
      _ZF = (float)(v112 + v112) == 0.0;
      v114 = 1.0;
      if (!_ZF)
        v114 = sinf(v113) / v113;
      v115 = v114;
      v116 = vrecpe_f32((float32x2_t)LODWORD(v114));
      v117 = (int32x2_t)vmul_f32(v116, vrecps_f32((float32x2_t)LODWORD(v115), v116));
      LODWORD(v118) = vmul_f32((float32x2_t)v117, vrecps_f32((float32x2_t)LODWORD(v115), (float32x2_t)v117)).u32[0];
      if ((float)(v88 * v113) != 0.0)
      {
        v143 = v118;
        *(float *)v117.i32 = sinf(v88 * v113);
        v118 = v143;
        v87 = *(float *)v117.i32 / (float)(v88 * v113);
      }
      *(float *)v117.i32 = v88 * (float)(v118 * v87);
      v119 = (float32x4_t)vdupq_lane_s32(v117, 0);
      v120 = v113 * a9;
      v121 = 1.0;
      if (v120 != 0.0)
      {
        v140 = v119;
        v144 = v118;
        v122 = sinf(v120);
        v119 = v140;
        v118 = v144;
        v121 = v122 / v120;
      }
      v107 = vmlaq_f32(vmulq_n_f32(v147, (float)(v118 * v121) * a9), v145, v119);
    }
    else
    {
      v89 = vaddq_f32(v85, v147);
      v90 = (int8x16_t)vmulq_f32(v89, v89);
      v91 = vsubq_f32(v85, v147);
      v92 = (int8x16_t)vmulq_f32(v91, v91);
      v93 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)))));
      v94 = v93 + v93;
      _ZF = (float)(v93 + v93) == 0.0;
      v95 = 1.0;
      if (!_ZF)
        v95 = sinf(v94) / v94;
      v96 = v95;
      v97 = vrecpe_f32((float32x2_t)LODWORD(v95));
      v98 = vmul_f32(v97, vrecps_f32((float32x2_t)LODWORD(v96), v97));
      LODWORD(v99) = vmul_f32(v98, vrecps_f32((float32x2_t)LODWORD(v96), v98)).u32[0];
      if ((float)(v88 * v94) != 0.0)
      {
        v141 = v99;
        v100 = sinf(v88 * v94);
        v99 = v141;
        v87 = v100 / (float)(v88 * v94);
      }
      v101.i32[1] = v147.i32[1];
      v102 = vnegq_f32(v147);
      *(float *)v101.i32 = v88 * (float)(v99 * v87);
      v103 = (float32x4_t)vdupq_lane_s32(v101, 0);
      v104 = v94 * a9;
      v105 = 1.0;
      if (v104 != 0.0)
      {
        v139 = v103;
        v142 = v99;
        v148 = v102;
        v106 = sinf(v104);
        v103 = v139;
        v99 = v142;
        v102 = v148;
        v105 = v106 / v104;
      }
      v107 = vmlaq_f32(vmulq_n_f32(v102, (float)(v99 * v105) * a9), v145, v103);
    }
    v123 = (int8x16_t)vmulq_f32(v107, v107);
    *(float32x2_t *)v123.i8 = vadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL));
    v124 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.i8, 1)), 0);
    v125 = vrsqrteq_f32(v124);
    v126 = vmulq_f32(v125, vrsqrtsq_f32(v124, vmulq_f32(v125, v125)));
    __asm { FMOV            V3.4S, #1.0 }
    v149 = vmulq_f32(v107, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v124), _Q3, (int8x16_t)vmulq_f32(v126, vrsqrtsq_f32(v124, vmulq_f32(v126, v126)))));
  }
  v128 = (const void *)sub_1B19C45CC(a4, v77, v78, v79, v80, v81, v82, v83);
  v136 = sub_1B179E250(9, v129, v130, v131, v132, v133, v134, v135);
  sub_1B17C58FC(v128, v84, &v149, v136, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v137, v138);
}

void sub_1B19CB738(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = objc_msgSend_nodeRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B19BDF70(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B19CB808(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B19BDFCC(*(__n128 **)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8);
}

void sub_1B19CB9B4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float v5;
  void *v6;

  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(float *)(a1 + 48) / 180.0 * 3.14159265;
  v6 = (void *)objc_msgSend_nodeRef(*(void **)(a1 + 40), a2, a3, a4);
  sub_1B19BE01C(v4, v6, v5);
}

uint64_t sub_1B19CC1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  __int128 v18;
  int v19;
  CFX::RG::Resource *v20;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _WORD v25[2];
  uint64_t v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v8 = &qword_1EEF66000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF66E90);
  if ((v9 & 1) == 0)
  {
    v23 = a2;
    v24 = a3;
    v22 = __cxa_guard_acquire(&qword_1EEF66E90);
    v8 = &qword_1EEF66000;
    a2 = v23;
    a3 = v24;
    if (v22)
    {
      byte_1EEF66E88 = 1;
      __cxa_guard_release(&qword_1EEF66E90);
      v8 = &qword_1EEF66000;
      a2 = v23;
      a3 = v24;
    }
  }
  if (*((_BYTE *)v8 + 3720))
    v10 = 0xF406179A13730E78;
  else
    v10 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v10, 0);
  *(_QWORD *)a1 = &off_1E63CF898;
  v11 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  v12 = *(_OWORD *)(a5 + 48);
  v13 = *(_OWORD *)(a5 + 64);
  v14 = *(_OWORD *)(a5 + 80);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 424) = v13;
  *(_OWORD *)(a1 + 440) = v14;
  *(_OWORD *)(a1 + 392) = v11;
  *(_OWORD *)(a1 + 408) = v12;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v15 = *(unsigned __int8 *)(a1 + 456);
  v16 = *(unsigned __int16 *)(a1 + 376) / v15;
  if (v16 <= 1)
    LOWORD(v16) = 1;
  v17 = *(unsigned __int16 *)(a1 + 378);
  v27 = *(_DWORD *)(a1 + 388);
  v26 = *(_QWORD *)(a1 + 380);
  v29 = *(_OWORD *)(a1 + 400);
  v18 = *(_OWORD *)(a1 + 440);
  v19 = v17 / v15;
  v31 = *(_OWORD *)(a1 + 424);
  v32 = v18;
  if (v17 / v15 <= 1)
    LOWORD(v19) = 1;
  v25[0] = v16;
  v25[1] = v19;
  v28 = 115;
  v30 = 3;
  v20 = sub_1B179BD38(a4, (uint64_t)"LENS_BLUR_DOWNSAMPLE", (uint64_t)v25);
  *(_QWORD *)(a1 + 480) = v20;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v20);
  return a1;
}

void sub_1B19CC308(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B19CC31C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  const char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  char v35;

  v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v5 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
  a1[58] = v5;
  if (!v5)
  {
    a1[58] = (uint64_t)sub_1B19CC454(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
    v13 = (void *)sub_1B1813BC4(a1[46], v6, v7, v8, v9, v10, v11, v12);
    v17 = (void *)objc_msgSend_resourceManager(v13, v14, v15, v16);
    v35 = 0;
    v18 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
    objc_msgSend_setConstantValue_type_atIndex_(v18, v19, (uint64_t)&v35, 53, 20501);
    v20 = a1[58];
    v22 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v17, v21, (uint64_t)CFSTR("compute_downsample2"), (uint64_t)v18);
    v24 = *(void **)(v20 + 16);
    if (v24 != (void *)v22)
    {
      v25 = v22;
      if (v24)

      *(_QWORD *)(v20 + 16) = v25;
    }
    v26 = a1[58];
    v27 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v17, v23, (uint64_t)CFSTR("compute_downsample4"), (uint64_t)v18);
    v29 = *(void **)(v26 + 24);
    if (v29 != (void *)v27)
    {
      v30 = v27;
      if (v29)

      *(_QWORD *)(v26 + 24) = v30;
    }
    v31 = a1[58];
    v32 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v17, v28, (uint64_t)CFSTR("compute_downsample8"), (uint64_t)v18);
    v33 = *(void **)(v31 + 32);
    if (v33 != (void *)v32)
    {
      v34 = v32;
      if (v33)

      *(_QWORD *)(v31 + 32) = v34;
    }

  }
}

_QWORD *sub_1B19CC454(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = (_QWORD *)operator new();
    *v4 = &off_1E63CF878;
    v4[1] = 0;
    v4[3] = 0;
    v4[4] = 0;
    v4[2] = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, (uint64_t)v4);
  }
  return v4;
}

void sub_1B19CC4CC(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  id Texture;
  id v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  void **v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  void *v28;

  v5 = *a3;
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 472));
  v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 480));
  objc_msgSend_setTexture_atIndex_(v5, v8, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)v7, 1);
  v28 = 0;
  v16 = *(unsigned __int8 *)(a1 + 456);
  switch(v16)
  {
    case 8:
      v17 = (void **)(*(_QWORD *)(a1 + 464) + 32);
      goto LABEL_7;
    case 4:
      v17 = (void **)(*(_QWORD *)(a1 + 464) + 24);
      goto LABEL_7;
    case 2:
      v17 = (void **)(*(_QWORD *)(a1 + 464) + 16);
LABEL_7:
      sub_1B19B6BF4(&v28, *v17);
      goto LABEL_9;
  }
  sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Invalid downsample rate"), v10, v11, v12, v13, v14, v15, v27);
LABEL_9:
  v24 = (uint64_t)v28;
  if (!v28)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v18, v19, v20, v21, v22, v23, (uint64_t)"_ptr != NULL");
    v24 = (uint64_t)v28;
  }
  v25 = sub_1B18FD774(v24);
  objc_msgSend_dispatch_onTexture2D_(v5, v26, v25, (uint64_t)v7);
  if (v28)

}

void sub_1B19CC5E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10)

  _Unwind_Resume(exception_object);
}

uint64_t sub_1B19CC600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  int v23;
  CFX::RG::Resource *v24;
  CFX::RG::Resource *v25;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _WORD v30[4];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  _WORD v37[4];
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v8 = atomic_load((unsigned __int8 *)&qword_1EEF66EA0);
  if ((v8 & 1) == 0)
  {
    v27 = a3;
    v28 = a2;
    v29 = __cxa_guard_acquire(&qword_1EEF66EA0);
    a2 = v28;
    a3 = v27;
    if (v29)
    {
      byte_1EEF66E98 = 1;
      __cxa_guard_release(&qword_1EEF66EA0);
      a2 = v28;
      a3 = v27;
    }
  }
  if (byte_1EEF66E98)
    v9 = 0x3B7BCF15DA1D0A80;
  else
    v9 = 0;
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v9, 0);
  *(_QWORD *)a1 = &off_1E63CF908;
  v10 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  v11 = *(_OWORD *)(a5 + 48);
  v12 = *(_OWORD *)(a5 + 64);
  v13 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a1 + 456) = v13;
  *(_OWORD *)(a1 + 408) = v11;
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 392) = v10;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v14 = *(unsigned __int8 *)(a1 + 456);
  if (*(unsigned __int16 *)(a1 + 376) / v14 <= 1)
    v15 = 1;
  else
    v15 = *(_WORD *)(a1 + 376) / *(unsigned __int8 *)(a1 + 456);
  v16 = *(unsigned __int16 *)(a1 + 378);
  v17 = *(_WORD *)(a1 + 380);
  v18 = *(_QWORD *)(a1 + 384);
  v19 = *(_QWORD *)(a1 + 408);
  v20 = *(_OWORD *)(a1 + 424);
  v21 = *(_OWORD *)(a1 + 440);
  v44 = v20;
  v45 = v21;
  if (v16 / v14 <= 1)
    v22 = 1;
  else
    v22 = v16 / v14;
  v23 = *(_DWORD *)(a1 + 464);
  v37[0] = v15;
  v37[1] = v22;
  v37[2] = v17;
  v37[3] = v23;
  v38 = v18;
  v39 = xmmword_1B2268ED0;
  v40 = v19;
  v41 = 3;
  v42 = v20;
  v43 = v21;
  v24 = sub_1B179BD38(a4, (uint64_t)"LENS_BLUR_HORIZONTAL_REAL", (uint64_t)v37);
  *(_QWORD *)(a1 + 488) = v24;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v24);
  v30[0] = v15;
  v30[1] = v22;
  v30[2] = v17;
  v30[3] = v23;
  v31 = v18;
  v32 = xmmword_1B2268ED0;
  v33 = v19;
  v34 = 3;
  v35 = v44;
  v36 = v45;
  v25 = sub_1B179BD38(a4, (uint64_t)"LENS_BLUR_HORIZONTAL_IMAGINARY", (uint64_t)v30);
  *(_QWORD *)(a1 + 496) = v25;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v25);
  return a1;
}

void sub_1B19CC7E4(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B19CC7F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  const __CFString *v24;
  id v25;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  void *v30;
  uint64_t *v31;
  void *v32;
  uint64_t v33;
  int v34;
  uint64_t result;
  int v36;

  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  v11 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v12 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
  *(_QWORD *)(a1 + 472) = v12;
  if (!v12)
  {
    *(_QWORD *)(a1 + 472) = sub_1B19CC944(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
    v16 = (void *)objc_msgSend_resourceManager(v10, v13, v14, v15);
    v20 = (void *)objc_msgSend_device(v10, v17, v18, v19);
    if (j__objc_msgSend_supportsWritableArrayOfTextures(v20, v21, v22, v23))
      v24 = CFSTR("compute_lens_blur_horizontal");
    else
      v24 = CFSTR("compute_lens_blur_horizontal_no_array_write");
    v36 = 1;
    do
    {
      v25 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      objc_msgSend_setConstantValue_type_atIndex_(v25, v26, (uint64_t)&v36, 29, 20500);
      v27 = *(_QWORD *)(a1 + 472) + 8 * v36;
      v29 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v16, v28, (uint64_t)v24, (uint64_t)v25);
      v32 = *(void **)(v27 + 8);
      v31 = (uint64_t *)(v27 + 8);
      v30 = v32;
      if (v32 != (void *)v29)
      {
        v33 = v29;
        if (v30)

        *v31 = v33;
      }

      v34 = v36++;
    }
    while (v34 < 3);
  }
  result = sub_1B1793184(v10, *(CFX::CrossFrameResourceManager **)(a2 + 32), *(unsigned __int8 *)(a1 + 464), 0, *(float *)(a1 + 460));
  *(_QWORD *)(*(_QWORD *)(a1 + 472) + 40) = result;
  return result;
}

uint64_t sub_1B19CC944(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_QWORD *)v4 = &off_1E63CF8E8;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, v4);
  }
  return v4;
}

void sub_1B19CC9C8(uint64_t a1, CFX::GPUResourceManager **a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  void *v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  id v27;
  const char *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  id v43;
  uint64_t v44;
  const char *v45;
  id Texture;
  _BYTE v47[32];
  unsigned int v48;

  v10 = *a3;
  v11 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  Texture = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 480));
  v12 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 488));
  v13 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 496));
  v14 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 488))+ 16);
  v15 = *(_QWORD *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 496))+ 16);
  v48 = vcvtps_s32_f32(*(float *)(a1 + 460));
  v19 = (void *)objc_msgSend_device(v11, v16, v17, v18);
  if ((j__objc_msgSend_supportsWritableArrayOfTextures(v19, v20, v21, v22) & 1) != 0)
  {
    objc_msgSend_setTexture_atIndex_(v10, v23, (uint64_t)v12, 1);
    objc_msgSend_setTexture_atIndex_(v10, v25, (uint64_t)v13, 2);
  }
  else if (*(int *)(a1 + 464) >= 1)
  {
    v26 = 4;
    do
    {
      v27 = (id)objc_msgSend_newTextureViewWithPixelFormat_(v12, v23, v14, v24);
      v30 = (id)objc_msgSend_newTextureViewWithPixelFormat_(v13, v28, v15, v29);
      v31 = v26 - 3;
      objc_msgSend_setTexture_atIndex_(v10, v32, (uint64_t)v27, v26 - 3);
      objc_msgSend_setTexture_atIndex_(v10, v33, (uint64_t)v30, v26++);
    }
    while (v31 < *(int *)(a1 + 464));
  }
  objc_msgSend_setTexture_atIndex_(v10, v23, (uint64_t)Texture, 0);
  objc_msgSend_setBytes_length_atIndex_(v10, v34, (uint64_t)v47, 40, 0);
  objc_msgSend_setBuffer_offset_atIndex_(v10, v35, *(_QWORD *)(*(_QWORD *)(a1 + 472) + 40), 0, 1);
  v42 = *(void **)(*(_QWORD *)(a1 + 472) + 8 * *(int *)(a1 + 464) + 8);
  if (v42)
    v43 = v42;
  else
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v36, v37, v38, v39, v40, v41, (uint64_t)"_ptr != NULL");
  v44 = sub_1B18FD774((uint64_t)v42);
  objc_msgSend_dispatch_onTexture2D_(v10, v45, v44, (uint64_t)Texture);
  if (v42)

}

void sub_1B19CCBB4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)

  _Unwind_Resume(exception_object);
}

uint64_t sub_1B19CCBC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v8;
  unsigned __int8 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  __int128 v17;
  int v18;
  CFX::RG::Resource *v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _WORD v24[2];
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;

  v8 = &qword_1EEF66000;
  v9 = atomic_load((unsigned __int8 *)&qword_1EEF66EB0);
  if ((v9 & 1) == 0)
  {
    v22 = a2;
    v23 = a3;
    v21 = __cxa_guard_acquire(&qword_1EEF66EB0);
    v8 = &qword_1EEF66000;
    a2 = v22;
    a3 = v23;
    if (v21)
    {
      qword_1EEF66EA8 = (uint64_t)sub_1B19CD57C("LENS_BLUR_VERTICAL_PASS", 0x17u);
      __cxa_guard_release(&qword_1EEF66EB0);
      v8 = &qword_1EEF66000;
      a2 = v22;
      a3 = v23;
    }
  }
  sub_1B18F7354(a1, a2, a3, (uint64_t *)a5, v8[469], 0);
  *(_QWORD *)a1 = &off_1E63CF5E0;
  v10 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  v11 = *(_OWORD *)(a5 + 48);
  v12 = *(_OWORD *)(a5 + 64);
  v13 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a1 + 456) = v13;
  *(_OWORD *)(a1 + 408) = v11;
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 392) = v10;
  *(_QWORD *)(a1 + 488) = 0;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 480) = 0;
  v14 = *(unsigned __int8 *)(a1 + 456);
  v15 = *(unsigned __int16 *)(a1 + 376) / v14;
  if (v15 <= 1)
    LOWORD(v15) = 1;
  v16 = *(unsigned __int16 *)(a1 + 378);
  v26 = *(_DWORD *)(a1 + 388);
  v25 = *(_QWORD *)(a1 + 380);
  v28 = *(_OWORD *)(a1 + 400);
  v17 = *(_OWORD *)(a1 + 440);
  v18 = v16 / v14;
  v30 = *(_OWORD *)(a1 + 424);
  v31 = v17;
  if (v16 / v14 <= 1)
    LOWORD(v18) = 1;
  v24[0] = v15;
  v24[1] = v18;
  v27 = 115;
  v29 = 3;
  v19 = sub_1B179BD38(a4, (uint64_t)"LENS_BLUR_OUTPUT", (uint64_t)v24);
  *(_QWORD *)(a1 + 496) = v19;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v19);
  return a1;
}

void sub_1B19CCD28(_Unwind_Exception *a1)
{
  CFX::RG::Pass *v1;

  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

double sub_1B19CCD3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void *v10;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v10 = (void *)sub_1B1813BC4(*(_QWORD *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  v11 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  v12 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
  *(_QWORD *)(a1 + 472) = v12;
  if (!v12)
  {
    *(_QWORD *)(a1 + 472) = sub_1B19CCEDC(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
    v16 = (void *)objc_msgSend_resourceManager(v10, v13, v14, v15);
    v30.i32[0] = 1;
    do
    {
      v17 = objc_alloc_init(MEMORY[0x1E0CC6AA0]);
      objc_msgSend_setConstantValue_type_atIndex_(v17, v18, (uint64_t)&v30, 29, 20500);
      v19 = *(_QWORD *)(a1 + 472) + 8 * v30.i32[0];
      v21 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v16, v20, (uint64_t)CFSTR("compute_lens_blur_vertical"), (uint64_t)v17);
      v24 = *(void **)(v19 + 8);
      v23 = (uint64_t *)(v19 + 8);
      v22 = v24;
      if (v24 != (void *)v21)
      {
        v25 = v21;
        if (v22)

        *v23 = v25;
      }

      v26 = v30.i32[0]++;
    }
    while (v26 < 3);
  }
  v27 = sub_1B1793184(v10, *(CFX::CrossFrameResourceManager **)(a2 + 32), *(unsigned __int8 *)(a1 + 464), &v30, *(float *)(a1 + 460));
  v28 = *(_QWORD *)(a1 + 472);
  *(_QWORD *)(v28 + 40) = v27;
  *(_QWORD *)&result = vextq_s8(v30, v30, 8uLL).u64[0];
  *(double *)(v28 + 48) = result;
  if (*(int *)(a1 + 464) >= 2)
  {
    *(_QWORD *)&result = vextq_s8(v31, v31, 8uLL).u64[0];
    *(double *)(*(_QWORD *)(a1 + 472) + 56) = result;
    if (*(int *)(a1 + 464) >= 3)
    {
      *(_QWORD *)&result = vextq_s8(v32, v32, 8uLL).u64[0];
      *(double *)(*(_QWORD *)(a1 + 472) + 64) = result;
    }
  }
  return result;
}

uint64_t sub_1B19CCEDC(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v4)
  {
    v4 = operator new();
    *(_OWORD *)v4 = 0u;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(_OWORD *)(v4 + 48) = 0u;
    *(_QWORD *)(v4 + 64) = 0;
    *(_QWORD *)v4 = &off_1E63CF5C0;
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = 0;
    *(_QWORD *)(v4 + 32) = 0;
    CFX::CrossFrameResourceManager::set((uint64_t)a1, a2, v4);
  }
  return v4;
}

uint64_t sub_1B19CCF64(uint64_t a1, uint64_t a2, void **a3)
{
  void *v5;
  unsigned int v6;
  const CFX::RG::Resource *v7;
  uint64_t v8;
  id Texture;
  id v10;
  id v11;
  const char *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  _QWORD v48[3];
  _QWORD v49[3];
  _BYTE v50[8];
  __int128 v51;
  uint64_t v52;
  unsigned int v53;

  v5 = *a3;
  v6 = vcvtps_s32_f32(*(float *)(a1 + 460));
  v53 = v6;
  v8 = *(_QWORD *)(a1 + 472);
  v7 = *(const CFX::RG::Resource **)(a1 + 480);
  v51 = *(_OWORD *)(v8 + 48);
  v52 = *(_QWORD *)(v8 + 64);
  Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v7);
  v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 488));
  v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 496));
  objc_msgSend_setTexture_atIndex_(v5, v12, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v5, v13, (uint64_t)v10, 1);
  objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v11, 2);
  objc_msgSend_setBytes_length_atIndex_(v5, v15, (uint64_t)v50, 40, 0);
  objc_msgSend_setBuffer_offset_atIndex_(v5, v16, *(_QWORD *)(*(_QWORD *)(a1 + 472) + 40), 0, 1);
  v23 = *(_QWORD *)(a1 + 472) + 8 * *(int *)(a1 + 464);
  v26 = *(_QWORD *)(v23 + 8);
  v25 = (uint64_t *)(v23 + 8);
  v24 = v26;
  if (!v26)
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Dereferencing null pointer"), v17, v18, v19, v20, v21, v22, (uint64_t)"_ptr != NULL");
    v24 = *v25;
  }
  v27 = (void *)sub_1B18FD774(v24);
  v31 = objc_msgSend_threadExecutionWidth(v27, v28, v29, v30);
  v32 = (v31 + 126) / v31 * v31;
  v36 = objc_msgSend_width(v11, v33, v34, v35);
  v40 = objc_msgSend_height(v11, v37, v38, v39);
  v41 = 16 * *(int *)(a1 + 464) * (v32 + (int)(2 * v6));
  v42 = (v32 + v40 - 1) / v32;
  objc_msgSend_setThreadgroupMemoryLength_atIndex_(v5, v43, v41, 0);
  objc_msgSend_setComputePipelineState_(v5, v44, (uint64_t)v27, v45);
  v49[0] = v36;
  v49[1] = v42;
  v49[2] = 1;
  v48[0] = 1;
  v48[1] = v32;
  v48[2] = 1;
  return objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v5, v46, (uint64_t)v49, (uint64_t)v48);
}

uint64_t *sub_1B19CD10C(CFX::RG *a1, CFX::RG::RenderGraphContext *a2, uint64_t *a3, CFX::RG::Resource *a4)
{
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  const char *v16;
  const CFX::RG::Resource *v17;
  unint64_t v18;
  float v19;
  int v20;
  float v21;
  _OWORD *v22;
  unsigned int v23;
  __int128 v24;
  __int128 v25;
  float v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  float v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  CFX::RG::Resource *v35;
  CFX::RG::Resource *v36;
  _QWORD v38[2];
  __int16 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[30];
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  uint64_t v47;
  __int16 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  _BYTE v52[30];
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[160];
  _OWORD v56[10];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _OWORD v60[2];
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v8 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a3[1]);
  v9 = v8[1];
  v56[0] = *v8;
  v56[1] = v9;
  v10 = v8[5];
  v12 = v8[2];
  v11 = v8[3];
  v56[4] = v8[4];
  v56[5] = v10;
  v56[2] = v12;
  v56[3] = v11;
  v13 = v8[9];
  v15 = v8[6];
  v14 = v8[7];
  v56[8] = v8[8];
  v56[9] = v13;
  v56[6] = v15;
  v56[7] = v14;
  CFX::RG::TextureDescriptorReference::withSampleCount(v56, 1, (uint64_t)v55);
  v17 = (const CFX::RG::Resource *)CFX::RG::copyIfNeeded(a1, (CFX::RG::RenderGraphBuilder *)a3[1], a4, (CFX::RG::Pass *)v55, 0, v16);
  v18 = 0x3F847AE147AE147BLL;
  LOWORD(v18) = *((_WORD *)a3 + 18);
  v19 = *((float *)a3 + 4) * 0.01 * (double)v18;
  v20 = *((_DWORD *)a3 + 6) + 1;
  v21 = 8.0;
  if (v19 <= 128.0)
  {
    v21 = 4.0;
    if (v19 <= 32.0)
    {
      v21 = 2.0;
      if (v19 < 4.0)
        v20 = 1;
    }
  }
  v22 = (_OWORD *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v17);
  v23 = *(unsigned __int16 *)v22;
  v24 = *(_OWORD *)((char *)v22 + 18);
  v25 = *(_OWORD *)((char *)v22 + 50);
  v59 = *(_OWORD *)((char *)v22 + 34);
  v60[0] = v25;
  *(_OWORD *)((char *)v60 + 14) = v22[4];
  v57 = *(_OWORD *)((char *)v22 + 2);
  v58 = v24;
  LOWORD(v24) = *((_WORD *)a3 + 16);
  v26 = (float)v24 / (float)v23;
  v27 = (int)fmax((float)(v21 / v26), 1.0);
  if (v27 >= 2)
  {
    v50 = v58;
    v51 = v59;
    *(_OWORD *)v52 = v60[0];
    *(_OWORD *)&v52[14] = *(_OWORD *)((char *)v60 + 14);
    v53 = 0;
    v28 = *a3;
    v46 = "Lens blur downsample pass";
    v47 = v28;
    v48 = v23;
    v49 = v57;
    LOBYTE(v53) = v27;
    v29 = (uint64_t *)sub_1B19CD408((uint64_t *)a1, (uint64_t *)a1, (uint64_t)&v46);
    v29[59] = (uint64_t)v17;
    CFX::RG::Pass::readFrom(v29, v17);
    v17 = (const CFX::RG::Resource *)v29[60];
  }
  v50 = v58;
  v51 = v59;
  *(_OWORD *)v52 = v60[0];
  *(_OWORD *)&v52[14] = *(_OWORD *)((char *)v60 + 14);
  v53 = 0;
  v54 = 0;
  v30 = *a3;
  v46 = "Lens blur horizontal pass";
  v47 = v30;
  v48 = v23;
  v49 = v57;
  LOBYTE(v53) = v27;
  v31 = fminf(v19 / fmaxf(v21, v26), 63.0);
  *((float *)&v53 + 1) = v31;
  LODWORD(v54) = v20;
  v32 = (uint64_t *)sub_1B19CD45C((uint64_t *)a1, (uint64_t *)a1, (uint64_t)&v46);
  v32[60] = (uint64_t)v17;
  CFX::RG::Pass::readFrom(v32, v17);
  v41 = v58;
  v42 = v59;
  *(_OWORD *)v43 = v60[0];
  *(_OWORD *)&v43[14] = *(_OWORD *)((char *)v60 + 14);
  v44 = 0;
  v45 = 0;
  v33 = *a3;
  v38[0] = "Lens blur vertical pass";
  v38[1] = v33;
  v39 = v23;
  v40 = v57;
  LOBYTE(v44) = v27;
  *((float *)&v44 + 1) = v31;
  LODWORD(v45) = v20;
  v34 = (uint64_t *)sub_1B19CD4B0((uint64_t *)a1, (uint64_t *)a1, (uint64_t)v38);
  v35 = (CFX::RG::Resource *)v32[61];
  v34[60] = (uint64_t)v35;
  CFX::RG::Pass::readFrom(v34, v35);
  v36 = (CFX::RG::Resource *)v32[62];
  v34[61] = (uint64_t)v36;
  CFX::RG::Pass::readFrom(v34, v36);
  return v34;
}

uint64_t sub_1B19CD408(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19CD834(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B19CD45C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19CD890(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B19CD4B0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7[2];

  v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B19CD8EC(v7[0], v5, v7, a2, a3);
  sub_1B179C734(a1 + 18, v7);
  return v7[0];
}

void sub_1B19CD508(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19CD530(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

void sub_1B19CD558(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);
  JUMPOUT(0x1B5E22E18);
}

unsigned __int8 *sub_1B19CD57C(unsigned __int8 *result, unsigned int a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;

  if (result)
  {
    v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      v3 = a2 >> 3;
      v4 = &result[8 * v3];
      v5 = 8 * v3;
      do
      {
        v6 = *(_QWORD *)result;
        result += 8;
        v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

_QWORD *sub_1B19CD644(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_1E63CF878;
  v2 = (void *)a1[4];
  if (v2)

  v3 = (void *)a1[3];
  if (v3)

  v4 = (void *)a1[2];
  if (v4)

  return a1;
}

void sub_1B19CD694(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  *a1 = &off_1E63CF878;
  v2 = (void *)a1[4];
  if (v2)

  v3 = (void *)a1[3];
  if (v3)

  v4 = (void *)a1[2];
  if (v4)

  JUMPOUT(0x1B5E22E18);
}

_QWORD *sub_1B19CD6F4(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63CF8E8;
  for (i = 4; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B19CD73C(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63CF8E8;
  v2 = 4;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

_QWORD *sub_1B19CD794(_QWORD *a1)
{
  uint64_t i;
  void *v3;

  *a1 = &off_1E63CF5C0;
  for (i = 4; i != 1; --i)
  {
    v3 = (void *)a1[i];
    if (v3)

  }
  return a1;
}

void sub_1B19CD7DC(_QWORD *a1)
{
  uint64_t v2;
  void *v3;

  *a1 = &off_1E63CF5C0;
  v2 = 4;
  while (1)
  {
    v3 = (void *)a1[v2];
    if (v3)

    if (--v2 == 1)
      JUMPOUT(0x1B5E22E18);
  }
}

uint64_t sub_1B19CD834(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1E8u, 8u);
  return sub_1B19CC1A0(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B19CD890(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1F8u, 8u);
  return sub_1B19CC600(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B19CD8EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8;
  _QWORD v10[2];

  v10[0] = a1;
  v10[1] = a2;
  v8 = sub_1B179C1C0(v10, 0x1F8u, 8u);
  return sub_1B19CCBC8(v8, *a3, a3[1], a4, a5);
}

float sub_1B19CD948(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  double v6;
  uint64_t v7;
  unsigned int v8;
  double v9;
  float v10;
  float v11;
  uint64_t v19;
  float v20;
  uint64_t v21;
  float32x4_t v22;
  float32x2_t v23;
  float32x4_t v24;
  float32x2_t v25;
  float32x2_t v26;
  float32x4_t v27;
  double v29;
  float32x4_t v30;
  float *v31;
  float32x4_t *v32;
  uint64_t v33;
  float v34;
  uint64_t v35;
  int v36;
  __int128 *v37;
  __int128 v38;
  _OWORD v40[16];
  int v41;
  float32x2_t v42;
  float v43;
  uint64_t v44;
  float v45;
  float v46;
  float v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  LODWORD(v6) = 0;
  v7 = (a4 * a4);
  memset(v40, 0, sizeof(v40));
  if (a2)
  {
    v8 = 0;
    v9 = (float)a2;
    v6 = 1.0;
    v10 = 1.0 / v9 + -1.0;
    v11 = (1.0 - 1.0 / v9 + 1.0 - 1.0 / v9) / (v9 + -1.0);
    __asm
    {
      FMOV            V4.4S, #-1.0
      FMOV            V5.4S, #1.0
    }
    _S17 = 3.0;
    do
    {
      v19 = 0;
      v20 = v10 + (float)((float)v8 * v11);
      LODWORD(v21) = _Q4.i32[0];
      v22 = _Q5;
      do
      {
        *(float *)_Q24.i32 = v10 + (float)((float)v19 * v11);
        v23.f32[0] = *(float *)_Q24.i32;
        switch(a3)
        {
          case 0:
            v22.f32[1] = -v20;
            v24 = v22;
            v24.f32[2] = -*(float *)_Q24.i32;
            break;
          case 1:
            *((float *)&v21 + 1) = -v20;
            v24.i64[0] = v21;
            v24.i64[1] = _Q24.i64[0];
            break;
          case 2:
            v24 = _Q5;
            v24.f32[2] = v10 + (float)((float)v8 * v11);
            v24.i32[0] = _Q24.i32[0];
            break;
          case 3:
            v24 = _Q4;
            v24.f32[0] = v10 + (float)((float)v19 * v11);
            v24.f32[2] = -v20;
            break;
          case 4:
            v24.i64[1] = _Q5.i64[1];
            goto LABEL_11;
          case 5:
            *(float *)_Q24.i32 = -*(float *)_Q24.i32;
            v24.i64[1] = _Q4.i64[1];
LABEL_11:
            v24.i32[0] = _Q24.i32[0];
            v24.f32[1] = -v20;
            break;
          default:
            v24 = 0uLL;
            break;
        }
        if (a4 < 1)
          goto LABEL_17;
        v41 = 1049652929;
        if (a4 != 1)
        {
          _Q24 = (int32x4_t)vmulq_f32(v24, v24);
          _Q24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(_Q24, 2), vadd_f32(*(float32x2_t *)_Q24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q24.i8, 1))).u32[0];
          v25 = vrsqrte_f32((float32x2_t)_Q24.u32[0]);
          v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)_Q24.u32[0], vmul_f32(v25, v25)));
          v27 = vmulq_n_f32(v24, vmul_f32(v26, vrsqrts_f32((float32x2_t)_Q24.u32[0], vmul_f32(v26, v26))).f32[0]);
          _Q24.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
          v42 = vmul_f32(*(float32x2_t *)_Q24.i8, (float32x2_t)0x3EFA2A2CBEFA2A2CLL);
          v43 = -0.4886 * v27.f32[0];
          if (a4 >= 3)
          {
            _Q25 = vmulq_f32(v27, v27);
            *(float32x2_t *)_Q24.i8 = vmul_f32(*(float32x2_t *)_Q24.i8, vmul_f32(*(float32x2_t *)v27.f32, (float32x2_t)0xBF8BD89D3F8BD89DLL));
            v44 = _Q24.i64[0];
            __asm { FMLA            S24, S17, V25.S[2] }
            v45 = *(float *)_Q24.i32 * 0.31539;
            v46 = vmuls_lane_f32(v27.f32[0] * -1.0925, v27, 2);
            v47 = 0.54627 * vsubq_f32(_Q25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q25.f32, 1)).f32[0];
          }
LABEL_17:
          if (!(_DWORD)v7)
            goto LABEL_20;
        }
        v23.f32[1] = v10 + (float)((float)v8 * v11);
        v29 = vaddv_f32(vmul_f32(v23, v23)) + 1.0;
        *(float *)&v29 = (float)(4.0 / (float)((float)a2 * (float)a2)) / (v29 * sqrt(v29));
        v30 = vmulq_n_f32(*(float32x4_t *)(a1 + 16 * (v8 * a2 + v19)), *(float *)&v29);
        v31 = (float *)&v41;
        v32 = (float32x4_t *)v40;
        v33 = (a4 * a4);
        do
        {
          v34 = *v31++;
          _Q24 = (int32x4_t)vmlaq_n_f32(*v32, v30, v34);
          *v32++ = (float32x4_t)_Q24;
          --v33;
        }
        while (v33);
LABEL_20:
        ++v19;
      }
      while (v19 != a2);
      ++v8;
    }
    while (v8 != a2);
  }
  if ((_DWORD)v7)
  {
    v35 = 0;
    v36 = 2 * v7;
    v37 = v40;
    do
    {
      v38 = *v37++;
      *(float *)(a5 + 4 * v35) = *(float *)(a5 + 4 * v35) + *(float *)&v38;
      *(float *)(a5 + 4 * (v7 + v35)) = *((float *)&v38 + 1)
                                                      + *(float *)(a5 + 4 * (v7 + v35));
      *(float *)&v6 = *((float *)&v38 + 2) + *(float *)(a5 + 4 * (v36 + v35));
      *(float *)(a5 + 4 * (v36 + v35++)) = *(float *)&v6;
    }
    while (v7 != v35);
  }
  return *(float *)&v6;
}

void sub_1B19CDC5C(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  uint64_t v11;
  uint32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  simd_float4 v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t *v19;
  const float *v20;
  int v21;
  uint32x4_t v22;
  simd_float4 v23;
  simd_float4 v24;
  int32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;

  if (a6)
  {
    v11 = 0;
    v12 = (uint32x4_t)xmmword_1B2245E80;
    v13 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v14 = (float32x4_t)vdupq_n_s32(0x3D6147AEu);
    v15 = (float32x4_t)vdupq_n_s32(0x3F870A3Du);
    v16 = (simd_float4)xmmword_1B2268F30;
    v17 = a6;
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    v31 = v13;
    v29 = v15;
    v30 = v14;
    v28 = (float32x4_t)vdupq_n_s32(0x414EB852u);
    v27 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    do
    {
      if (a5)
      {
        v19 = (int8x16_t *)(a1 + (v11 * a2));
        v20 = (const float *)(a3 + (v11 * a4));
        v21 = a5;
        do
        {
          v22 = (uint32x4_t)vld1q_dup_f32(v20++);
          v32 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, v12), v18)), v13);
          v23 = (simd_float4)vdivq_f32(vaddq_f32(v32, v14), v15);
          v23.i32[3] = 0;
          v24 = _simd_pow_f4(v23, v16);
          v18.i64[0] = 0xFF000000FFLL;
          v18.i64[1] = 0xFF000000FFLL;
          v16 = (simd_float4)xmmword_1B2268F30;
          v15 = v29;
          v25 = vcgeq_f32(v27, v32);
          v25.i32[3] = 0;
          v26 = vbslq_s8((int8x16_t)vcltzq_s32(v25), (int8x16_t)vdivq_f32(v32, v28), (int8x16_t)v24);
          v14 = v30;
          v13 = v31;
          v12 = (uint32x4_t)xmmword_1B2245E80;
          v26.i32[3] = v32.i32[3];
          *v19++ = v26;
          --v21;
        }
        while (v21);
      }
      ++v11;
    }
    while (v11 != v17);
  }
}

uint64_t sub_1B19CDDA4(uint64_t result, int a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int32x4_t v10;
  int32x4_t *v11;
  int16x4_t *v12;
  int v13;
  int16x4_t v14;
  int8x16_t v15;

  if (a6)
  {
    v6 = 0;
    v7.i64[0] = 0x8000000080000000;
    v7.i64[1] = 0x8000000080000000;
    v8 = (int8x16_t)vdupq_n_s32(0x7FE000u);
    v9 = (int8x16_t)vdupq_n_s32(0xF800000u);
    v10.i64[0] = 0x3800000038000000;
    v10.i64[1] = 0x3800000038000000;
    do
    {
      if (a5)
      {
        v11 = (int32x4_t *)(result + (v6 * a2));
        v12 = (int16x4_t *)(a3 + (v6 * a4));
        v13 = a5;
        do
        {
          v14 = *v12++;
          v15 = (int8x16_t)vshll_n_u16((uint16x4_t)v14, 0xDuLL);
          *v11++ = vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v15, v9), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16(v14), v7), vandq_s8(v15, v8))), v10);
          --v13;
        }
        while (v13);
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1B19CE464(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B19CE490(size_t a1)
{
  uint64_t v2;

  if (qword_1EEF66EC0 != -1)
    dispatch_once_f(&qword_1EEF66EC0, &qword_1EEF66EB8, (dispatch_function_t)sub_1B19CE464);
  v2 = sub_1B179CB90(qword_1EEF66EB8, 0x18uLL);
  *(_QWORD *)(v2 + 16) = malloc_type_calloc(0x10uLL, a1, 0x26DF777CuLL);
  *(_QWORD *)(v2 + 24) = a1;
  return v2;
}

void *sub_1B19CE50C(_QWORD *a1, void *aBlock, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  void *result;
  uint64_t v14;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  v12 = a1[4];
  if (v12 >= a1[3])
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimationEventsAddEvent - index out of bounds"), a3, a4, a5, a6, a7, a8, (uint64_t)"events->_eventCount < events->_eventCapacity");
    v12 = a1[4];
  }
  *(double *)(a1[2] + 16 * v12) = a9;
  result = _Block_copy(aBlock);
  v14 = a1[4];
  *(_QWORD *)(a1[2] + 16 * v14 + 8) = result;
  a1[4] = v14 + 1;
  return result;
}

void sub_1B19CE5B8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  int v11;
  int v12;
  double v17;
  _QWORD *v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  double v22;
  _QWORD *v23;
  uint64_t v24;
  double v25;
  uint64_t v26;

  v11 = a4;
  v12 = a3;
  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  if (v12 == v11)
  {
    if (!v11)
    {
      if (a10 >= a9)
      {
        v23 = a1;
        v24 = a2;
        v25 = a9;
        goto LABEL_16;
      }
      v20 = 1.0;
      v18 = a1;
      v19 = a2;
      v17 = a9;
      v21 = 0;
LABEL_12:
      sub_1B19CE720(v18, v19, v21, a5, a5, a6, a7, a8, v17, v20);
      v25 = 0.0;
      v23 = a1;
      v24 = a2;
LABEL_16:
      v22 = a10;
      goto LABEL_17;
    }
    if (a9 < a10)
    {
      sub_1B19CE720(a1, a2, 0, a5, a5, a6, a7, a8, 0.0, a9);
      v22 = 1.0;
      v23 = a1;
      v24 = a2;
      v25 = a10;
LABEL_17:
      v26 = 0;
      goto LABEL_18;
    }
    v23 = a1;
    v24 = a2;
    v25 = a10;
    v22 = a9;
  }
  else
  {
    if ((v12 & 1) != 0)
    {
      v17 = 0.0;
      v18 = a1;
      v19 = a2;
      v20 = a9;
      v21 = 1;
      goto LABEL_12;
    }
    sub_1B19CE720(a1, a2, 0, a5, a5, a6, a7, a8, a9, 1.0);
    v22 = 1.0;
    v23 = a1;
    v24 = a2;
    v25 = a10;
  }
  v26 = 1;
LABEL_18:
  sub_1B19CE720(v23, v24, v26, a5, a5, a6, a7, a8, v25, v22);
}

void sub_1B19CE720(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  if (!a2)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  if (a9 > a10)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _CFXAnimationEventsTriggerEventsWithTimeChanges invalid time"), a3, a4, a5, a6, a7, a8, (uint64_t)"t0 <= t1");
  if (a9 != a10)
  {
    v16 = sub_1B19CEA0C(a2, a3, a3, a4, a5, a6, a7, a8, a9);
    v23 = sub_1B19CEA0C(a2, a3, v17, v18, v19, v20, v21, v22, a10);
    v30 = v16 & ~(v16 >> 63);
    v31 = v23 >= *(_QWORD *)(a2 + 32) ? *(_QWORD *)(a2 + 32) : v23;
    if (v30 < v31)
    {
      v32 = (16 * v30) | 8;
      do
      {
        if (*(_QWORD *)(a2 + 32) <= v30)
          sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. _CFXAnimationEventsTriggerEventAtIndex - index out of bounds"), v24, v25, v26, v27, v28, v29, (uint64_t)"index < events->_eventCount");
        sub_1B17F2490(a1, *(_QWORD *)(*(_QWORD *)(a2 + 16) + v32), a4, a3, v26, v27, v28, v29);
        ++v30;
        v32 += 16;
      }
      while (v31 != v30);
    }
  }
}

uint64_t sub_1B19CE864(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  return *(_QWORD *)(a1 + 32);
}

uint64_t sub_1B19CE8AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16 * a2 + 8);
}

double sub_1B19CE900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  return *(double *)(*(_QWORD *)(a1 + 16) + 16 * a2);
}

void sub_1B19CE958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const void *v5;
  void *v6;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 1)
  {
    v3 = 0;
    v4 = 8;
    do
    {
      v5 = *(const void **)(*(_QWORD *)(a1 + 16) + v4);
      if (v5)
      {
        _Block_release(v5);
        v2 = *(_QWORD *)(a1 + 32);
      }
      ++v3;
      v4 += 16;
    }
    while (v3 < v2);
  }
  v6 = *(void **)(a1 + 16);
  if (v6)
    free(v6);
}

CFStringRef sub_1B19CE9CC(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXAnimationEvents>"));
}

CFStringRef sub_1B19CE9EC(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXAnimationEvents>"));
}

uint64_t sub_1B19CEA0C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  double v16;
  _BOOL4 v17;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  v12 = *(_QWORD *)(a1 + 32);
  v13 = *(_QWORD *)(a1 + 16);
  if (v12 < 2)
  {
    v14 = 0;
    result = 1;
  }
  else
  {
    v14 = 0;
    do
    {
      if (*(double *)(v13 + 16 * (uint64_t)((double)v14 + (double)(v12 - v14) * 0.5)) > a9)
        v12 = (uint64_t)((double)v14 + (double)(v12 - v14) * 0.5);
      else
        v14 = (uint64_t)((double)v14 + (double)(v12 - v14) * 0.5);
      result = v14 + 1;
    }
    while (v12 > v14 + 1);
  }
  v16 = *(double *)(v13 + 16 * v14);
  if (v16 >= a9)
  {
    v17 = a9 != 1.0;
    if (v16 != a9)
      v17 = 1;
    if (v17 | a2)
      return v14;
  }
  return result;
}

uint64_t sub_1B19CEAE8(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

_QWORD *sub_1B19CEB14()
{
  _QWORD *v0;

  if (qword_1EEF66ED0 != -1)
    dispatch_once_f(&qword_1EEF66ED0, &qword_1EEF66EC8, (dispatch_function_t)sub_1B19CEAE8);
  v0 = (_QWORD *)sub_1B179CB90(qword_1EEF66EC8, 0x18uLL);
  v0[3] = sub_1B19D13DC(0x7FFFFFFFLL);
  v0[4] = sub_1B19D13DC(0x7FFFFFFFLL);
  v0[2] = sub_1B17D4C44(96, 4096);
  return v0;
}

uint64_t sub_1B19CEB9C(int a1, int a2)
{
  return (a2 + (a1 << 12));
}

void sub_1B19CEBA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if ((_DWORD)a3)
  {
    v8 = a3;
    if ((*(_WORD *)(a2 + 80) & 0x20) != 0)
      sub_1B19CEC34(a1, a2, a3, a4, a5, a6, a7, a8);
    sub_1B17C2B8C(a2, v8, a1, a4, a5, a6, a7, a8);
    if ((v8 & 4) != 0)
      sub_1B19D14E8(*(_QWORD *)(a1 + 24), (void *)*(int *)(a2 + 72), v11, v12, v13, v14, v15, v16);
    if ((v8 & 1) != 0 && !sub_1B17C2B78(a2))
      sub_1B19D14E8(*(_QWORD *)(a1 + 32), *(void **)(a2 + 32), v17, v18, v19, v20, v21, v22);
    *(_WORD *)(a2 + 80) |= 0x20u;
  }
}

void sub_1B19CEC34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v8 = a3;
  if ((a3 & 4) != 0)
    sub_1B19D1600(*(_QWORD *)(a1 + 24), (void *)*(int *)(a2 + 72), a3, a4, a5, a6, a7, a8);
  if ((v8 & 1) != 0 && !sub_1B17C2B78(a2))
    sub_1B19D1600(*(_QWORD *)(a1 + 32), *(void **)(a2 + 32), v11, v12, v13, v14, v15, v16);
}

void sub_1B19CEC98(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[4];
  int v28;
  int v29;

  v11 = HIDWORD(a2);
  if (!HIDWORD(a2))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXRendererElementStoreDeallocateSpan - null span"), a3, a4, a5, a6, a7, a8, (uint64_t)"span.count > 0");
  v12 = sub_1B181FEE0(a3);
  if (v12)
  {
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 0x40000000;
    v27[2] = sub_1B19CF860;
    v27[3] = &unk_1E63DAC90;
    v28 = a2;
    v29 = v11;
    sub_1B18798D8(v12, (uint64_t)v27, v13, v14, v15, v16, v17, v18);
  }
  v19 = sub_1B17D5510(*(_QWORD *)(a1 + 16), a2, 0, v14, v15, v16, v17, v18);
  if ((_DWORD)v11)
  {
    v26 = v19;
    do
    {
      sub_1B19CF89C(v26, a1, v20, v21, v22, v23, v24, v25);
      v26 += 96;
      --v11;
    }
    while (v11);
  }
  sub_1B17D54F4(*(_QWORD *)(a1 + 16), a2, v20, v21, v22, v23, v24, v25);
}

unint64_t sub_1B19CED70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8;
  unsigned int v12;
  const __CFDictionary *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  const __CFDictionary *v29;
  unsigned int v30;
  unsigned int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  char v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const void *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  CFTypeID v91;
  const void *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  const void *v99;
  CFTypeRef v100;
  unint64_t v101;
  unsigned __int16 v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned __int16 v129;
  int v130;
  unsigned __int16 v131;
  int v132;
  int v133;
  unsigned int v134;
  const void *v135;
  CFTypeRef cf;

  v8 = a4;
  v12 = a4 & 2;
  if (!a3 && (a4 & 2) == 0)
  {
LABEL_44:
    v101 = 0;
    v102 = -1;
    v103 = -65536;
    return v103 & 0xFFFF0000 | v101 | v102;
  }
  if (a3)
  {
    if (*(_DWORD *)(a3 + 228))
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. RendererElement should not be in span already"), a3, a4, a5, a6, a7, a8, (uint64_t)"node == NULL || node->_rendererElementSpan.count == 0");
    v13 = sub_1B1868FE8(a3, a2, a3, a4, a5, a6, a7, a8);
    cf = (CFTypeRef)sub_1B1868FA0(a3, v14, v15, v16, v17, v18, v19, v20);
    v28 = v13 != 0;
    if (v13)
      v135 = (const void *)sub_1B18607D4((uint64_t)v13);
    else
      v135 = 0;
    v29 = sub_1B1869D88(a3, v21, v22, v23, v24, v25, v26, v27);
    if ((v8 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v30 = sub_1B19CF220(a2, a3, (uint64_t)cf, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  v135 = 0;
  cf = 0;
  v28 = 0;
  v29 = 0;
  if ((a4 & 1) != 0)
    goto LABEL_9;
LABEL_12:
  v30 = 0;
LABEL_13:
  v31 = v30 + (v12 >> 1);
  v134 = v30;
  if ((v8 & 4) != 0)
  {
    v33 = sub_1B1868FA0(a3, a2, a3, a4, a5, a6, a7, a8);
    v32 = sub_1B19CF220(a2, a3, v33, v34, v35, v36, v37, v38) + 1;
  }
  else
  {
    v32 = 0;
  }
  v39 = v32 + v31;
  v40 = !v28;
  if ((v8 & 8) == 0)
    v40 = 1;
  if ((v40 & 1) != 0)
  {
    v41 = 0;
  }
  else
  {
    v41 = sub_1B19CF220(a2, a3, (uint64_t)v135, a4, a5, a6, a7, a8);
    v39 = v32 + v31;
  }
  v42 = 0;
  v43 = v41 + v39;
  v131 = v39;
  v133 = v41;
  if ((v8 & 0x10) != 0 && v29)
  {
    v44 = sub_1B1813884(a2, a2, a3, a4, a5, a6, a7, a8);
    v52 = sub_1B187AA20(v44, v45, v46, v47, v48, v49, v50, v51);
    v42 = sub_1B18D322C((uint64_t)v29, v52, v53, v54, v55, v56, v57, v58);
  }
  v59 = (v42 + v43);
  v129 = v43;
  v132 = v42;
  if ((v8 & 0x21) == 0x21)
    v60 = sub_1B19CF220(a2, a3, (uint64_t)cf, a4, a5, a6, a7, a8);
  else
    v60 = 0;
  v61 = (v60 + v59);
  if (!(v60 + (_DWORD)v59))
    goto LABEL_44;
  v130 = v8 & 0x21;
  v62 = sub_1B1820C0C(a1, a2, a3, a4, a5, a6, a7, a8);
  v69 = sub_1B17D54EC(*(_QWORD *)(v62 + 16), v61, v63, v64, v65, v66, v67, v68);
  v77 = v69;
  if ((v8 & 4) != 0)
  {
    if (cf)
    {
      sub_1B19CF300(v62, v69, (unsigned __int16)v31, cf, a3, 0, v75, v76);
      if (sub_1B18692B4(a3))
        sub_1B19CF458(a2, v62, a3, v72, v73, v74, v75, v76);
    }
    v78 = sub_1B17C6244((_QWORD *)a3, v70, v71, v72, v73, v74, v75, v76);
    v85 = sub_1B1879DB8(v78, (void *)a3, v79, v80, v81, v82, v83, v84);
    if (!v85)
      v85 = (const void *)sub_1B18D62C8();
    sub_1B19CF5A4(v62, v77, v31 + v32 - 1, a3, 2, 0, 0, v85, 0, 0);
  }
  if ((v8 & 1) != 0)
  {
    sub_1B19CF300(v62, v77, 0, cf, a3, 0, v75, v76);
    if (sub_1B18692B4(a3))
      sub_1B19CF458(a2, v62, a3, v86, v87, v88, v89, v90);
    v91 = CFGetTypeID(cf);
    if (v91 == sub_1B18D9D1C())
    {
      v92 = (const void *)sub_1B18F2F90(a2, a3);
      v98 = sub_1B17D5510(*(_QWORD *)(v62 + 16), v77, 0, v93, v94, v95, v96, v97);
      v99 = *(const void **)(v98 + 40);
      if (v99 != v92)
      {
        if (v99)
        {
          CFRelease(v99);
          *(_QWORD *)(v98 + 40) = 0;
        }
        if (v92)
          v100 = CFRetain(v92);
        else
          v100 = 0;
        *(_QWORD *)(v98 + 40) = v100;
      }
      CFRelease(v92);
      sub_1B19CEBA4(v62, v98, 2, v104, v105, v106, v107, v108);
    }
  }
  if (v12)
    sub_1B19CF5A4(v62, v77, v134, a3, 1, 0, 0, 0, 0, 0);
  if (v133)
    sub_1B19CF300(v62, v77, v131, v135, a3, 0, v75, v76);
  v103 = v77 & 0xFFFF0000;
  v101 = v77 & 0xFFFFFFFF00000000;
  if (v132 && (_WORD)v132)
  {
    v109 = 0;
    do
    {
      sub_1B19CF5A4(v62, v77, v129 + v109, a3, 4, 0, 0, 0, 0, 0);
      v115 = sub_1B17D5510(*(_QWORD *)(v62 + 16), v77, v109, v110, v111, v112, v113, v114);
      sub_1B18D2EE0(a2, v115, v109++, v116, v117, v118, v119, v120);
    }
    while ((unsigned __int16)v132 != v109);
  }
  if (v130 != 33)
    goto LABEL_60;
  v102 = v77;
  sub_1B19CF300(v62, v77, (unsigned __int16)v59, cf, a3, 5, v75, v76);
  if (v134)
  {
    v126 = v134;
    do
    {
      v127 = sub_1B17D5510(*(_QWORD *)(v62 + 16), v77, v59, v121, v122, v123, v124, v125);
      *(_WORD *)(v127 + 80) = *(_WORD *)(v127 + 80) & 0xBFA7 | 0x4008;
      ++v59;
      --v126;
    }
    while (v126);
LABEL_60:
    v102 = v77;
  }
  return v103 & 0xFFFF0000 | v101 | v102;
}

uint64_t sub_1B19CF220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const __CFArray *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFArray *v25;
  CFIndex v26;
  uint64_t v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;

  if (!a3)
    return 0;
  v10 = sub_1B19CFDA0(a2, a3, a3, a4, a5, a6, a7, a8);
  if (!v10)
    return 0;
  v18 = (uint64_t)v10;
  v19 = sub_1B1874BE0((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  if ((uint64_t)v19 < 1)
    return 0;
  v25 = v19;
  v26 = 0;
  v27 = 0;
  do
  {
    v28 = sub_1B1874C3C(v18, v26, 0, v20, v21, v22, v23, v24);
    if (sub_1B17A47FC((uint64_t)v28))
      ++v27;
    ++v26;
  }
  while (v25 != (const __CFArray *)v26);
  if (v27 && sub_1B184AB48(a3, v29, v30, v20, v21, v22, v23, v24))
  {
    v31 = 0;
    v32 = 1;
    do
    {
      sub_1B195BC3C(a3, 1, a1);
      v33 = v32;
      v31 += sub_1B1958B70(a3, v32++);
    }
    while (v33 < 6);
    v27 *= v31;
  }
  return v27;
}

void sub_1B19CF300(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  CFTypeRef v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const __CFArray *v26;
  CFIndex v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  unsigned int v35;
  const __CFArray *v36;
  unint64_t v37;
  unsigned int v39;

  v39 = a6;
  v9 = a3;
  v12 = sub_1B19CFDA0(a5, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8);
  v20 = sub_1B1874BE0((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
  if ((uint64_t)v20 >= 1)
  {
    v26 = v20;
    v27 = 0;
    v28 = 0;
    v29 = a2;
    v30 = v9;
    v36 = v20;
    do
    {
      v31 = sub_1B1874C3C((uint64_t)v12, v27, 0, v21, v22, v23, v24, v25);
      if (sub_1B17A47FC((uint64_t)v31))
      {
        if (sub_1B184AB48((uint64_t)a4, v32, v33, v21, v22, v23, v24, v25))
        {
          v34 = 1;
          do
          {
            v35 = v34;
            if (sub_1B1958B70((uint64_t)a4, v34))
            {
              a2 = a2 & 0xFFFFFFFF00000000 | v29;
              sub_1B19CF5A4(a1, a2, v28 + v30, a5, v39, a4, v12, 0, v27, v34);
              ++v28;
            }
            ++v34;
          }
          while (v35 < 6);
          v26 = v36;
        }
        else
        {
          v37 = v37 & 0xFFFFFFFF00000000 | v29;
          sub_1B19CF5A4(a1, v29, v28 + v30, a5, v39, a4, v12, 0, v27, 0);
          ++v28;
        }
      }
      ++v27;
    }
    while ((const __CFArray *)v27 != v26);
  }
}

void sub_1B19CF458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const __CFArray *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFIndex Count;
  uint64_t v28;
  CFIndex i;
  const void *ValueAtIndex;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v19 = sub_1B1868FA0(a3, a2, a3, a4, a5, a6, a7, a8);
  if (!v19)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v13, v14, v15, v16, v17, v18, (uint64_t)"geometry");
  v20 = (const __CFArray *)sub_1B17A1994(v19, v12, v13, v14, v15, v16, v17, v18);
  Count = CFArrayGetCount(v20);
  if (Count != **(unsigned __int16 **)(a3 + 232))
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. __AllocateSpansForNodeGeometryLOD unexpected lod count"), v21, v22, v23, v24, v25, v26, (uint64_t)"node->_rendererLOD->count == count");
  if (Count >= 1)
  {
    v28 = 0;
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(v20, i);
      v38 = sub_1B184696C((uint64_t)ValueAtIndex, v31, v32, v33, v34, v35, v36, v37);
      if (v38)
      {
        v44 = (const void *)v38;
        v45 = sub_1B19CF220(a1, a3, v38, v39, v40, v41, v42, v43);
        v52 = sub_1B17D54EC(*(_QWORD *)(a2 + 16), v45, v46, v47, v48, v49, v50, v51);
        *(_QWORD *)(*(_QWORD *)(a3 + 232) + v28 + 12) = v52;
        v8 = v8 & 0xFFFFFFFF00000000 | v52;
        sub_1B19CF300(a2, v8, 0, v44, a3, 0, v53, v54);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a3 + 232) + v28 + 12) = 0xFFFFFFFFLL;
      }
      v28 += 12;
    }
  }
}

void sub_1B19CF5A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, const void *a7, const void *a8, CFIndex a9, char a10)
{
  int v13;
  __int16 v15;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  const void *v28;
  CFTypeRef v29;
  const void *v30;
  CFTypeRef v31;
  const void *v32;
  const void *v33;
  CFTypeRef v34;
  _BOOL8 v35;
  const void *v36;
  const void *v37;
  CFTypeRef v38;
  const __CFArray *v39;
  const __CFArray *v40;
  uint64_t v41;
  uint64_t v42;
  const __CFArray *v43;
  const __CFArray *v44;
  const __CFArray *v45;
  const void *v46;
  const void *v47;
  CFTypeRef v48;
  const __CFArray *v49;
  const __CFArray *v50;
  CFTypeRef v51;

  v13 = a5;
  v15 = a3;
  v17 = sub_1B17D5510(*(_QWORD *)(a1 + 16), a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  v18 = (const void **)(v17 + 16);
  sub_1B17C2AA0(v17);
  *(_DWORD *)v17 = ((unsigned __int16)a2 << 12) + (unsigned __int16)(v15 + HIWORD(a2));
  v26 = *(_WORD *)(v17 + 80) & 0xC7F8 | ((a10 & 7) << 11);
  *(_QWORD *)(v17 + 8) = a4;
  *(_WORD *)(v17 + 80) = v26 & 0xFFF8 | v13 & 7;
  if (v13 != 4)
  {
    v28 = *v18;
    if (*v18 != a6)
    {
      if (v28)
      {
        CFRelease(v28);
        *v18 = 0;
      }
      if (a6)
        v29 = CFRetain(a6);
      else
        v29 = 0;
      *v18 = v29;
    }
    v30 = *(const void **)(v17 + 24);
    if (v30 != a7)
    {
      if (v30)
      {
        CFRelease(v30);
        *(_QWORD *)(v17 + 24) = 0;
      }
      if (a7)
        v31 = CFRetain(a7);
      else
        v31 = 0;
      *(_QWORD *)(v17 + 24) = v31;
    }
    v32 = *(const void **)(v17 + 32);
    if (v32)
    {
      CFRelease(v32);
      *(_QWORD *)(v17 + 32) = 0;
    }
    v33 = *(const void **)(v17 + 40);
    if (v33 != a8)
    {
      if (v33)
      {
        CFRelease(v33);
        *(_QWORD *)(v17 + 40) = 0;
      }
      if (a8)
        v34 = CFRetain(a8);
      else
        v34 = 0;
      *(_QWORD *)(v17 + 40) = v34;
    }
    if (a7)
    {
      v35 = !a6 || (uint64_t)sub_1B17A289C((uint64_t)a6, v19, v20, v21, v22, v23, v24, v25);
      v36 = sub_1B1874C3C((uint64_t)a7, a9, v35, v21, v22, v23, v24, v25);
      v37 = *(const void **)(v17 + 48);
      if (v37 != v36)
      {
        if (v37)
        {
          CFRelease(v37);
          *(_QWORD *)(v17 + 48) = 0;
        }
        if (v36)
          v38 = CFRetain(v36);
        else
          v38 = 0;
        *(_QWORD *)(v17 + 48) = v38;
      }
    }
    if (!a6)
      goto LABEL_60;
    v39 = sub_1B17A08A0((uint64_t)a6, v19, v20, v21, v22, v23, v24, v25);
    if (!v39)
    {
      v46 = (const void *)sub_1B1878138();
      v47 = *(const void **)(v17 + 32);
      if (v47 != v46)
      {
        if (v47)
        {
          CFRelease(v47);
          *(_QWORD *)(v17 + 32) = 0;
        }
        if (v46)
          v48 = CFRetain(v46);
        else
          v48 = 0;
        *(_QWORD *)(v17 + 32) = v48;
      }
      if (v46)
        CFRelease(v46);
      goto LABEL_60;
    }
    v40 = v39;
    v41 = sub_1B17A0A4C((uint64_t)a6);
    if (v41)
    {
      v43 = (const __CFArray *)v41;
      v44 = *(const __CFArray **)(v17 + 32);
      if (v44 != v43)
      {
        if (v44)
        {
          CFRelease(v44);
          *(_QWORD *)(v17 + 32) = 0;
        }
        v45 = v43;
        goto LABEL_54;
      }
    }
    else
    {
      v49 = sub_1B17A08FC((uint64_t)a6, a9 % (uint64_t)v40, v42, v21, v22, v23, v24, v25);
      v50 = *(const __CFArray **)(v17 + 32);
      if (v50 != v49)
      {
        if (v50)
        {
          CFRelease(v50);
          *(_QWORD *)(v17 + 32) = 0;
        }
        if (!v49)
        {
          v51 = 0;
          goto LABEL_55;
        }
        v45 = v49;
LABEL_54:
        v51 = CFRetain(v45);
LABEL_55:
        *(_QWORD *)(v17 + 32) = v51;
      }
    }
LABEL_60:
    v27 = 0xFFFFFFFFLL;
    goto LABEL_61;
  }
  *(_QWORD *)(v17 + 48) = 0;
  v27 = 4;
  *(_OWORD *)v18 = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
LABEL_61:
  sub_1B19CEBA4(a1, v17, v27, v21, v22, v23, v24, v25);
}

uint64_t sub_1B19CF860(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v10 = sub_1B18143C8(a2, a2, a3, a4, a5, a6, a7, a8);
  sub_1B17C7CBC(v10, *(_QWORD *)(a1 + 32));
  v18 = sub_1B1814410(a2, v11, v12, v13, v14, v15, v16, v17);
  return sub_1B18D3DF8(v18, *(_QWORD *)(a1 + 32), v19, v20, v21, v22, v23, v24);
}

void sub_1B19CF89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_WORD *)(a1 + 80) & 0x20) != 0)
    sub_1B19CEC34(a2, a1, 0xFFFFFFFFLL, a4, a5, a6, a7, a8);
  *(_QWORD *)(a1 + 8) = 0;
  sub_1B17C2AB0(a1);
}

void sub_1B19CF8D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const __CFArray *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CFIndex Count;
  uint64_t v40;
  uint64_t v41;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  v16 = sub_1B1820C0C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), v10, v11, v12, v13, v14, v15, (uint64_t)"store");
  if (*(_DWORD *)(a2 + 228))
  {
    sub_1B19CEC98(v16, *(_QWORD *)(a2 + 224), a1, v11, v12, v13, v14, v15);
    *(_QWORD *)(a2 + 224) = 0xFFFFFFFFLL;
  }
  if (sub_1B18692B4(a2))
  {
    v24 = sub_1B1868FA0(a2, v17, v18, v19, v20, v21, v22, v23);
    if (v24)
    {
      v32 = (const __CFArray *)sub_1B17A1994(v24, v25, v26, v27, v28, v29, v30, v31);
      Count = CFArrayGetCount(v32);
      if (Count != **(unsigned __int16 **)(a2 + 232))
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXRendererElementStoreDeallocateSpanForNodeGeometryLOD unexpected lod count"), v33, v34, v35, v36, v37, v38, (uint64_t)"node->_rendererLOD->count == count");
      if (Count >= 1)
      {
        v40 = 0;
        v41 = *(_QWORD *)(a2 + 232);
        do
        {
          if (*(_DWORD *)(v41 + v40 + 16))
          {
            sub_1B19CEC98(v16, *(_QWORD *)(v41 + v40 + 12), a1, v34, v35, v36, v37, v38);
            v41 = *(_QWORD *)(a2 + 232);
          }
          *(_QWORD *)(v41 + v40 + 12) = 0xFFFFFFFFLL;
          v40 += 12;
          --Count;
        }
        while (Count);
      }
    }
  }
}

void sub_1B19CFA14(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  sub_1B17D4D6C(a1[2]);
  sub_1B19D1718(a1[3], v9, v10, v11, v12, v13, v14, v15);
  sub_1B19D1718(a1[4], v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_1B19CFA6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  return sub_1B17D54F8(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1B19CFAB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  return sub_1B17D5500(*(_QWORD *)(a1 + 16));
}

uint64_t sub_1B19CFAFC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  return sub_1B17D5510(*(_QWORD *)(a1 + 16), a2, 0, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19CFB50(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;

  v9 = a2;
  v11 = HIDWORD(a2);
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  if (v11 <= a3)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. wrong index in rendererElements span"), a3, a4, a5, a6, a7, a8, (uint64_t)"index < (CFIndex)span.count");
  return sub_1B17D5510(*(_QWORD *)(a1 + 16), v9, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19CFBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[6];

  v3 = *(_QWORD *)(a1 + 16);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_1B19CFC2C;
  v5[3] = &unk_1E63DACB0;
  v5[4] = a2;
  v5[5] = a3;
  return sub_1B17D5600(v3, (uint64_t)v5);
}

uint64_t sub_1B19CFC2C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a1 + 32))(a2, *(_QWORD *)(a1 + 40));
}

uint64_t sub_1B19CFC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B19D1780(*(_QWORD *)(a1 + 24), (void *)*(int *)(a2 + 72), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19CFC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B19D1484(*(_QWORD *)(a1 + 32), *(void **)(a2 + 32), a3, a4, a5, a6, a7, a8);
}

CFIndex sub_1B19CFC54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B19D16D0(*(_QWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
}

CFIndex sub_1B19CFC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B19D16D0(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B19CFC84(uint64_t a1)
{
  return sub_1B17A0A4C(*(_QWORD *)(a1 + 24));
}

void sub_1B19CFC90(_QWORD *a1)
{
  uint64_t v2;
  const void *v3;
  const void *v4;
  const void *v5;
  _QWORD v6[6];

  v2 = a1[2];
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 0x40000000;
  v6[2] = sub_1B19CFC2C;
  v6[3] = &unk_1E63DACB0;
  v6[4] = sub_1B19CF89C;
  v6[5] = a1;
  sub_1B17D5600(v2, (uint64_t)v6);
  v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  v5 = (const void *)a1[2];
  if (v5)
  {
    CFRelease(v5);
    a1[2] = 0;
  }
}

CFStringRef sub_1B19CFD28(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXRendererElementStore %p>"), a1);
}

CFStringRef sub_1B19CFD64(const void *a1)
{
  const __CFAllocator *v2;

  v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, CFSTR("<CFXRendererElementStore %p>"), a1);
}

CFTypeRef sub_1B19CFDA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (sub_1B1868FA0(a1, a2, a3, a4, a5, a6, a7, a8) == a2)
    return sub_1B186CDCC(a1, v10, v11, v12, v13, v14, v15, v16);
  else
    return sub_1B17A1ACC(a2, v10, v11, v12, v13, v14, v15, v16);
}

void sub_1B19CFDE0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (a1 + 544 != a2)
    {
      sub_1B19CFDE0();
      free((void *)(a2 - 32));
    }
  }
}

_QWORD *ecs_stack_allocator_create(uint64_t a1)
{
  unint64_t v1;
  _QWORD *result;
  uint64_t v3;
  char *v4;

  v1 = (a1 + 31) & 0xFFFFFFFFFFFFFFE0;
  result = malloc_type_aligned_alloc(0x20uLL, (v1 + 575) & 0xFFFFFFFFFFFFFFE0, 0x61E8937BuLL);
  v3 = 0;
  *result = result + 68;
  result[1] = v1;
  result[2] = 0;
  *((_DWORD *)result + 134) = 0;
  do
  {
    v4 = (char *)&result[v3];
    *((_QWORD *)v4 + 3) = 0;
    *((_DWORD *)v4 + 8) = 0;
    v3 += 2;
  }
  while (v3 != 64);
  return result;
}

void ecs_stack_allocator_destroy(uint64_t *a1)
{
  sub_1B19CFDE0((uint64_t)a1, *a1);
  free(a1);
}

_QWORD *ecs_stack_allocator_allocate(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *result;
  uint64_t v13;
  _DWORD *v14;

  v4 = (a3 + *(_QWORD *)(a1 + 16) - 1) & -a3;
  v5 = v4 + a2;
  if ((unint64_t)(v4 + a2) <= *(_QWORD *)(a1 + 8))
  {
    *(_QWORD *)(a1 + 16) = v5;
    return (_QWORD *)(*(_QWORD *)a1 + v4);
  }
  else
  {
    v7 = (v5 - 1) | ((unint64_t)(v5 - 1) >> 1) | (((v5 - 1) | ((unint64_t)(v5 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = v8 | (v8 >> 16);
    v10 = v9 + 1;
    v11 = malloc_type_aligned_alloc(0x20uLL, (v9 & 0xFFFFFFFFFFFFFFE0) + 64, 0x61E8937BuLL);
    *v11 = *(_QWORD *)a1;
    result = v11 + 4;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = v10;
    *(_QWORD *)(a1 + 16) = a2;
    v13 = *(unsigned int *)(a1 + 536);
    if ((_DWORD)v13)
    {
      v14 = (_DWORD *)(a1 + 32);
      do
      {
        *((_QWORD *)v14 - 1) = result;
        *v14 = 0;
        v14 += 4;
        --v13;
      }
      while (v13);
    }
  }
  return result;
}

_QWORD *ecs_stack_allocator_deallocate(_QWORD *result, unint64_t a2, unint64_t a3)
{
  unint64_t v3;

  v3 = result[2];
  if (v3 >= a3 && ((*result + v3 - a3) ^ a2) <= 7)
    result[2] = a2 - *result;
  return result;
}

uint64_t ecs_stack_allocator_push_snapshot(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(result + 16);
  v2 = *(unsigned int *)(result + 536);
  v3 = result + 16 * v2;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)result;
  *(_DWORD *)(v3 + 32) = v1;
  *(_DWORD *)(result + 536) = v2 + 1;
  return result;
}

uint64_t ecs_stack_allocator_pop_snapshot(uint64_t result)
{
  int v1;
  unsigned int v2;

  v1 = *(_DWORD *)(result + 536);
  if (v1)
  {
    v2 = v1 - 1;
    *(_DWORD *)(result + 536) = v2;
    *(_QWORD *)(result + 16) = *(unsigned int *)(result + 16 * v2 + 32);
  }
  return result;
}

BOOL ecs_stack_allocator_includes(unint64_t *a1, unint64_t a2)
{
  return *a1 <= a2 && *a1 + a1[1] > a2;
}

uint64_t ecs_stack_allocator_get_snapshot_depth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 536);
}

uint64_t ecs_stack_allocator_get_allocated_size(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uLong sub_1B19D1370(const Bytef *a1, uInt a2)
{
  unsigned int v4;

  v4 = crc32(0, 0, 0);
  return crc32(v4, a1, a2);
}

uint64_t sub_1B19D13B0(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

_QWORD *sub_1B19D13DC(uint64_t a1)
{
  _QWORD *v2;

  if (qword_1ED4D0658 != -1)
    dispatch_once_f(&qword_1ED4D0658, &qword_1ED4C1DE0, (dispatch_function_t)sub_1B19D13B0);
  v2 = (_QWORD *)sub_1B179CB90(qword_1ED4C1DE0, 0x40uLL);
  v2[2] = CFDictionaryCreateMutable(0, 0, 0, 0);
  v2[3] = sub_1B185BCB0();
  v2[4] = 0;
  v2[5] = a1;
  v2[6] = sub_1B19D19C8(16, 4096);
  sub_1B185C290(v2[3], 0, a1);
  return v2;
}

uint64_t sub_1B19D1484(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *Value;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value)
    return *(_QWORD *)Value;
  else
    return -1;
}

uint64_t sub_1B19D14E8(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *Value;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value)
  {
    v18 = (char *)Value;
    result = *Value;
  }
  else
  {
    v18 = sub_1B19D1A44(*(_QWORD *)(a1 + 48), v11, v12, v13, v14, v15, v16, v17);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), key, v18);
    *((_QWORD *)v18 + 1) = 0;
    result = sub_1B19D1598(a1);
    *(_QWORD *)v18 = result;
    ++*(_QWORD *)(a1 + 72);
  }
  ++*((_QWORD *)v18 + 1);
  return result;
}

uint64_t sub_1B19D1598(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v8 = sub_1B185BD00(*(_QWORD *)(a1 + 24));
  if (v8 == -1)
  {
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: indexstore::_getNextFreeIndex - no more free index"), v2, v3, v4, v5, v6, v7, v11);
  }
  else
  {
    sub_1B185CBF0(*(_QWORD *)(a1 + 24), v8, v2, v3, v4, v5, v6, v7);
    v9 = *(_QWORD *)(a1 + 32);
    if (v9 <= v8)
      v9 = v8;
    *(_QWORD *)(a1 + 32) = v9;
    *(_BYTE *)(a1 + 56) = 0;
  }
  return v8;
}

void sub_1B19D1600(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *Value;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value)
  {
    v11 = (unint64_t)Value;
    v12 = Value[1] - 1;
    Value[1] = v12;
    if (!v12)
    {
      v13 = *Value;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), key);
      sub_1B19D1BD4(*(_QWORD *)(a1 + 48), v11, v14, v15, v16, v17, v18, v19, v22);
      *(_BYTE *)(a1 + 56) = 0;
      sub_1B185CBE8(*(_QWORD *)(a1 + 24), v13);
      if (*(_QWORD *)(a1 + 32) == v13)
      {
        v20 = sub_1B185BD30(*(_QWORD *)(a1 + 24));
        if (v20 <= 1)
          v21 = 1;
        else
          v21 = v20;
        *(_QWORD *)(a1 + 32) = v21 - 1;
      }
      ++*(_QWORD *)(a1 + 72);
    }
  }
}

CFIndex sub_1B19D16D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
}

void sub_1B19D1718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  sub_1B185C900(*(_QWORD *)(a1 + 24));
  sub_1B185C290(*(_QWORD *)(a1 + 24), 0, *(_QWORD *)(a1 + 40));
  CFDictionaryRemoveAllValues(*(CFMutableDictionaryRef *)(a1 + 16));
}

uint64_t sub_1B19D1780(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFIndex Count;
  void *v11;
  uint64_t v12;
  const void **v13;
  uint64_t v14;
  uint64_t *Value;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;

  if (!*(_BYTE *)(a1 + 56))
  {
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
    v11 = *(void **)(a1 + 64);
    if (v11)
    {
      free(v11);
      *(_QWORD *)(a1 + 64) = 0;
    }
    if (Count >= 1)
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 64) = malloc_type_malloc(8 * v12 + 8, 0x100004000313F17uLL);
      v13 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), v13, 0);
      qsort(v13, Count, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1B19D1980);
      v14 = 0;
      while (1)
      {
        Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v13[v14]);
        if (Value)
        {
          v22 = *Value;
          if ((*Value & 0x8000000000000000) == 0 && v22 <= v12)
            goto LABEL_12;
        }
        else
        {
          v22 = -1;
        }
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXIndexStoreGetOrderedIndexForKey index out of bounds"), v16, v17, v18, v19, v20, v21, (uint64_t)"alignedIndex >= 0 && alignedIndex < bufferLength");
LABEL_12:
        *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v22) = v14++;
        if (Count == v14)
        {
          free(v13);
          break;
        }
      }
    }
    *(_BYTE *)(a1 + 56) = 1;
  }
  result = sub_1B19D1484(a1, key, a3, a4, a5, a6, a7, a8);
  if (result != -1)
  {
    v24 = *(_QWORD *)(a1 + 64);
    if (v24)
      return *(_QWORD *)(v24 + 8 * result);
  }
  return result;
}

void sub_1B19D18F0(uint64_t a1)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(a1 + 16) = 0;
  }
  v3 = *(const void **)(a1 + 24);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a1 + 24) = 0;
  }
  v4 = *(const void **)(a1 + 48);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a1 + 48) = 0;
  }
  free(*(void **)(a1 + 64));
}

CFStringRef sub_1B19D1940(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXIndexStore>"));
}

CFStringRef sub_1B19D1960(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXIndexStore>"));
}

uint64_t sub_1B19D1980(_QWORD *a1, _QWORD *a2)
{
  unsigned int v2;

  if (*a1 < *a2)
    v2 = -1;
  else
    v2 = 1;
  if (*a1 == *a2)
    return 0;
  else
    return v2;
}

uint64_t sub_1B19D199C(uint64_t *a1)
{
  uint64_t result;

  result = sub_1B179CB60(a1);
  *a1 = result;
  return result;
}

_QWORD *sub_1B19D19C8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  if (qword_1ED4D0640 != -1)
    dispatch_once_f(&qword_1ED4D0640, &qword_1ED4CEA90, (dispatch_function_t)sub_1B19D199C);
  v4 = (_QWORD *)sub_1B179CB90(qword_1ED4CEA90, 0x38uLL);
  v4[5] = sub_1B185BCB0();
  v4[2] = a1;
  v4[3] = a2;
  return v4;
}

char *sub_1B19D1A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"allocator");
  v15 = sub_1B185BD00(*(_QWORD *)(a1 + 40));
  if (v15 == -1)
  {
    v16 = *(_QWORD *)(a1 + 48);
    if (v16)
    {
      *(_QWORD *)(a1 + 48) = v16 + 1;
      v17 = (char *)malloc_type_realloc(*(void **)(a1 + 32), 16 * (v16 + 1), 0x10800409227ACB4uLL);
      *(_QWORD *)(a1 + 32) = v17;
      v18 = &v17[16 * v16];
      *(_QWORD *)v18 = malloc_type_malloc(*(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 16), 0x9F927EBDuLL);
      v19 = *(_QWORD *)(a1 + 24);
      *((_DWORD *)v18 + 2) = v19;
      v20 = *(_QWORD *)(a1 + 40);
      v21 = v19 * v16;
    }
    else
    {
      v22 = malloc_type_calloc(0x10uLL, 1uLL, 0x6EAFF678uLL);
      *(_QWORD *)(a1 + 32) = v22;
      *(_QWORD *)v22 = malloc_type_malloc(*(_QWORD *)(a1 + 24) * *(_QWORD *)(a1 + 16), 0x9F927EBDuLL);
      v19 = *(_QWORD *)(a1 + 24);
      v22[2] = v19;
      *(_QWORD *)(a1 + 48) = 1;
      v20 = *(_QWORD *)(a1 + 40);
      v21 = 0;
    }
    sub_1B185C290(v20, v21, v19);
    v15 = sub_1B185BD00(*(_QWORD *)(a1 + 40));
  }
  sub_1B185CBF0(*(_QWORD *)(a1 + 40), v15, v9, v10, v11, v12, v13, v14);
  v23 = *(_QWORD *)(a1 + 24);
  v24 = *(_QWORD *)(a1 + 32) + 16 * (v15 / v23);
  --*(_DWORD *)(v24 + 8);
  v25 = *(char **)v24;
  if (!*(_QWORD *)v24)
  {
    v25 = (char *)malloc_type_malloc(*(_QWORD *)(a1 + 16) * v23, 0x9F927EBDuLL);
    *(_QWORD *)v24 = v25;
    *(_DWORD *)(v24 + 8) = *(_DWORD *)(a1 + 24) - 1;
    --*(_QWORD *)(a1 + 56);
  }
  return &v25[*(_QWORD *)(a1 + 16) * (v15 % v23)];
}

void sub_1B19D1BD4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  char *v21;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"allocator");
  v12 = (uint64_t *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  if (v11 < 1)
  {
LABEL_10:
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: CFXAllocatorDelete - unknown address"), a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = *(_QWORD *)(a1 + 16);
    v16 = *(_QWORD *)(a1 + 24);
    v17 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      v18 = *(_QWORD *)(v17 + v13);
      if (v18 <= a2 && v18 + v16 * v15 > a2)
        break;
      ++v14;
      v13 += 16;
      if (!--v11)
        goto LABEL_10;
    }
    sub_1B185CBE8(*(_QWORD *)(a1 + 40), (a2 - v18) / v15 + v14 * v16);
    v20 = *(int *)(v17 + v13 + 8) + 1;
    *(_DWORD *)(v17 + v13 + 8) = v20;
    if (*(_QWORD *)(a1 + 24) == v20 && (!*(_BYTE *)(a1 + 64) || *v12 >= 2))
    {
      ++*(_QWORD *)(a1 + 56);
      free(*(void **)(*(_QWORD *)(a1 + 32) + v13));
      v21 = *(char **)(a1 + 32);
      *(_QWORD *)&v21[v13] = 0;
      if (*(_QWORD *)(a1 + 56) == *(_QWORD *)(a1 + 48))
      {
        free(v21);
        *(_QWORD *)(a1 + 32) = 0;
        sub_1B185C900(*(_QWORD *)(a1 + 40));
        *v12 = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
    }
  }
}

void sub_1B19D1D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!a1)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"allocator");
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    v9 = 0;
    v10 = 0;
    do
    {
      v11 = *(_QWORD *)(a1 + 32);
      free(*(void **)(v11 + v9));
      *(_QWORD *)(v11 + v9) = 0;
      ++v10;
      v9 += 16;
    }
    while (v10 < *(_QWORD *)(a1 + 48));
  }
  free(*(void **)(a1 + 32));
  *(_QWORD *)(a1 + 32) = 0;
  sub_1B185C900(*(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
}

void sub_1B19D1DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v9;

  sub_1B19D1D1C(a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = *(const void **)(a1 + 40);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a1 + 40) = 0;
  }
}

CFStringRef sub_1B19D1DF8(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXAllocator>"));
}

CFStringRef sub_1B19D1E18(const void *a1)
{
  const __CFAllocator *v1;

  v1 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v1, 0, CFSTR("<CFXAllocator>"));
}

uint64_t sub_1B19D1E7C(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v10;
  _QWORD *Value;
  int v12;
  int v13;
  CFIndex Count;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  CFTypeRef v23;
  CFTypeRef v24;
  __CFDictionary *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const void *v33;
  CFTypeRef v35;
  CFTypeRef cf;

  if (a1)
  {
    if (key)
      goto LABEL_3;
  }
  else
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
    if (key)
      goto LABEL_3;
  }
  sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Null argument"), a3, a4, a5, a6, a7, a8, (uint64_t)"name");
LABEL_3:
  v10 = *(const __CFDictionary **)(a1 + 48);
  if (!v10)
  {
    *(_QWORD *)(a1 + 48) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], 0);
    *(_QWORD *)(a1 + 56) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E0C9B3A0]);
    v10 = *(const __CFDictionary **)(a1 + 48);
  }
  Value = CFDictionaryGetValue(v10, key);
  if (Value)
    return *Value;
  v35 = 0;
  cf = 0;
  v12 = (*(uint64_t (**)(_QWORD, void *, CFTypeRef *, CFTypeRef *))(a1 + 24))(*(_QWORD *)(a1 + 16), key, &cf, &v35);
  if (v12)
  {
    v13 = v12;
    Value = malloc_type_calloc(0x18uLL, 1uLL, 0x9BFD30A1uLL);
    Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 56));
    v21 = a1 + Count;
    if (Count >= 64)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. CFXAnimatableParamControllerGetParamDescription - address out of bounds"), v15, v16, v17, v18, v19, v20, (uint64_t)"address < (void*) ((unsigned char*)controller+sizeof(struct __CFXAnimatableParamController))");
    v22 = sub_1B19C4420((const void *)a1, v21, v13, 0);
    *Value = v22;
    v23 = cf;
    if (!cf)
    {
      v23 = *(CFTypeRef *)(a1 + 16);
      if (v23)
        v23 = CFRetain(v23);
    }
    Value[1] = v23;
    v24 = v35;
    if (!v35)
      v24 = CFRetain(key);
    Value[2] = v24;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), key, Value);
    v25 = *(__CFDictionary **)(a1 + 56);
    v33 = (const void *)sub_1B19C4614(v22, v26, v27, v28, v29, v30, v31, v32);
    CFDictionaryAddValue(v25, v33, key);
    return *Value;
  }
  if (cf)
  {
    CFRelease(cf);
    cf = 0;
  }
  if (v35)
    CFRelease(v35);
  return 0;
}

void sub_1B19D2050(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t *v8;
  __int16 v9;
  __int16 v10;
  int v11;
  int v12;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float32x4_t *v22;
  __int32 *v23;
  unsigned int v24;
  int v25;
  _WORD *v26;
  unsigned int v27;
  _WORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int16 v32;
  __int16 v33;
  int v34;
  int v35;
  _WORD *v36;
  float *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  int8x16_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float v59;
  uint64_t v60;
  __n128 v61;
  float v62;
  float *v63;
  float32x4_t v64;
  float32x4_t v65;
  float v66;
  float *v67;
  uint64_t v68;
  uint64_t v69;
  __int32 *v70;
  unsigned int v71;
  int v72;
  _WORD *v73;
  float32x4_t *v74;
  float32x4_t v75;
  float32x4_t v76;

  v8 = &a1[a2];
  v74 = v8 + 801;
  v9 = *(_WORD *)(a3 + 224);
  v10 = *(_WORD *)(a3 + 226);
  v11 = *(_DWORD *)(a3 + 220);
  v12 = *(_DWORD *)(a3 + 228) + (v11 << 18 >> 31);
  if ((v11 & 0x4000) != 0)
  {
    if (sub_1B1815A4C(a1[790].i64[1]))
    {
      v22 = &a1[a2];
      v23 = &v22[801].i32[2];
      v24 = v22[801].u32[2];
      if (v24 + v12 > v22[801].i32[3])
      {
        sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Not enough space allocated"), v16, v17, v18, v19, v20, v21, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
        v24 = *v23;
      }
      if (v12)
      {
        v25 = 0;
        v26 = (_WORD *)(v74->i64[0] + 4 * v24);
        do
        {
          *v26 = v9;
          v26[1] = v10 + v25++;
          v26 += 2;
        }
        while (v12 != v25);
      }
      v27 = v24 + v12;
      *v23 = v27;
      v28 = *(_WORD **)(a3 + 232);
      v29 = (unsigned __int16)*v28;
      if (*v28)
      {
        v30 = 0;
        do
        {
          v31 = *(_QWORD *)(a3 + 232) + 12 * v30;
          v32 = *(_WORD *)(v31 + 12);
          v33 = *(_WORD *)(v31 + 14);
          v34 = *(_DWORD *)(v31 + 16);
          if (v27 + v34 > v22[801].i32[3])
          {
            sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Not enough space allocated"), v16, v17, v18, v19, v20, v21, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
            v27 = *v23;
          }
          if (v34)
          {
            v35 = 0;
            v36 = (_WORD *)(v74->i64[0] + 4 * v27);
            do
            {
              *v36 = v32;
              v36[1] = v33 + v35++;
              v36 += 2;
            }
            while (v34 != v35);
          }
          v27 += v34;
          *v23 = v27;
          ++v30;
        }
        while (v30 != v29);
      }
      return;
    }
    v37 = *(float **)(a3 + 232);
    v38 = *(unsigned __int16 *)v37;
    if (*((_BYTE *)v37 + 2))
    {
      v76 = 0uLL;
      sub_1B17C5D30((CFTypeRef)a3, 0, (uint64_t)&v76, v17, v18, v19, v20, v21);
      v75 = 0uLL;
      v46 = (float32x4_t *)sub_1B1869AC8(a3, v39, v40, v41, v42, v43, v44, v45);
      sub_1B17D4478(&v76, v46, &v75);
      v47 = vaddq_f32(vaddq_f32(v75, vmulq_laneq_f32(a1[793], v75, 3)), vmulq_laneq_f32(a1[794], v75, 3));
      v48 = a1[797];
      v49 = a1[798];
      v50 = a1[799];
      v51 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a1[800], v50, v75, 2), v49, *(float32x2_t *)v75.f32, 1), v48, v75.f32[0]);
      v52 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3);
      v53.i32[0] = 0;
      v54 = (int8x16_t)vdupq_n_s32(0x322BCC77u);
      v55 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a1[800], v50, v47, 2), v49, *(float32x2_t *)v47.f32, 1), v48, v47.f32[0]);
      v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
      v57 = vsubq_f32(vdivq_f32(v51, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v53)), 0), (int8x16_t)v52, v54)), vdivq_f32(v55, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v56, v53)), 0), (int8x16_t)v56, v54)));
      v58 = vmulq_f32(v57, v57);
      v59 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0])* 0.5;
      v61 = sub_1B1815A98((__n128 *)a1[790].i64[1]);
      LODWORD(v60) = 0;
      v61.n128_u32[0] = v61.n128_u32[3];
      if (v61.n128_f32[2] > v61.n128_f32[3])
        v61.n128_f32[0] = v61.n128_f32[2];
      v62 = v61.n128_f32[0] * v59;
      if (v37[2] < v62)
        goto LABEL_35;
      if (v38 >= 2)
      {
        v63 = v37 + 5;
        v60 = 1;
        while (*v63 >= v62)
        {
          ++v60;
          v63 += 3;
          if (v38 == v60)
          {
            LODWORD(v60) = v38;
            goto LABEL_35;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      v76.i32[2] = 0;
      v76.i64[0] = 0;
      sub_1B186B5BC(a3, (__n128 *)&v76, v16, v17, v18, v19, v20, v21);
      LODWORD(v60) = 0;
      v64 = a1[792];
      v65 = vmulq_f32(v76, v64);
      v66 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1)))).f32[0];
      if (v66 < 0.0)
        v66 = 0.0;
      if (v37[2] > v66)
        goto LABEL_35;
      if (v38 >= 2)
      {
        LODWORD(v60) = v38;
        v67 = v37 + 5;
        v68 = 1;
        while (*v67 <= v66)
        {
          ++v68;
          v67 += 3;
          if (v38 == v68)
            goto LABEL_35;
        }
        LODWORD(v60) = v68;
        goto LABEL_35;
      }
    }
    LODWORD(v60) = 1;
LABEL_35:
    if ((int)v60 >= 1)
    {
      v69 = *(_QWORD *)(a3 + 232) + 12 * v60;
      v9 = *(_WORD *)v69;
      v10 = *(_WORD *)(v69 + 2);
      v12 = *(_DWORD *)(v69 + 4);
    }
  }
  v70 = &v8[801].i32[2];
  v71 = v8[801].u32[2];
  if (v71 + v12 > v8[801].i32[3])
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Not enough space allocated"), a3, a4, a5, a6, a7, a8, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
    v71 = *v70;
  }
  if (v12)
  {
    v72 = 0;
    v73 = (_WORD *)(v74->i64[0] + 4 * v71);
    do
    {
      *v73 = v9;
      v73[1] = v10 + v72++;
      v73 += 2;
    }
    while (v12 != v72);
  }
  *v70 = v71 + v12;
}

void sub_1B19D2474(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  __int16 v9;
  unsigned int v12;
  int v13;
  _WORD *v14;

  v8 = a4;
  v9 = a3;
  v12 = *(_DWORD *)(a1 + 8);
  if (v12 + a4 > *(_DWORD *)(a1 + 12))
  {
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Not enough space allocated"), a3, a4, a5, a6, a7, a8, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
    v12 = *(_DWORD *)(a1 + 8);
  }
  if (v8)
  {
    v13 = 0;
    v14 = (_WORD *)(*(_QWORD *)a1 + 4 * v12);
    do
    {
      *v14 = a2;
      v14[1] = v13++ + v9;
      v14 += 2;
    }
    while (v8 != v13);
  }
  *(_DWORD *)(a1 + 8) = v12 + v8;
}

uint64_t sub_1B19D2510(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const __CFDictionary *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if (a1[789].i64[0] & *(_QWORD *)(a3 + 208) | ((a1[788].i64[1] & *(_QWORD *)(a3 + 208)) == 0))
    return 0;
  v11 = *(_DWORD *)(a3 + 228);
  if (!v11)
    return 0;
  v14 = *(_WORD *)(a3 + 224);
  v15 = *(_WORD *)(a3 + 226);
  if (sub_1B186C75C(a3, a2, a3, a4, a5, a6, a7, a8))
    return 1;
  v23 = *(_DWORD *)(a3 + 220);
  if ((v23 & 0x1000) == 0)
  {
    if ((v23 & 0x2000) != 0)
      goto LABEL_9;
LABEL_18:
    sub_1B19D2050(a1, a2, a3, v18, v19, v20, v21, v22);
    return 0;
  }
  a1[817].i8[0] = 1;
  if (a1[788].i8[0] || a1[787].i64[0])
    return 0;
  if ((*(_DWORD *)(a3 + 220) & 0x2000) == 0)
    goto LABEL_18;
LABEL_9:
  a1[817].i8[0] = 1;
  if (a1[786].i64[1] == a3 || sub_1B19ACF58(a1[785].i64[1], v16, v17, v18, v19, v20, v21, v22))
    goto LABEL_18;
  v26 = sub_1B17C6244((_QWORD *)a3, v24, v25, v18, v19, v20, v21, v22);
  v33 = sub_1B1879DB8(v26, (void *)a3, v27, v28, v29, v30, v31, v32);
  if (v33)
  {
    v41 = sub_1B18D7000((uint64_t)v33, v34, v35, v36, v37, v38, v39, v40);
    if (!v41 || sub_1B18D6F04(v41, v42, v43, v44, v45, v46, v47, v48))
    {
      v49 = (uint64_t)&a1[a2 + 801];
      v8 = 1;
      sub_1B19D2474(v49, v14, (unsigned __int16)(v15 + v11 - 1), 1, v45, v46, v47, v48);
      return v8;
    }
    return 1;
  }
  v8 = 1;
  if ((byte_1EEF66ED8 & 1) == 0)
  {
    byte_1EEF66ED8 = 1;
    sub_1B17C4408(16, (uint64_t)CFSTR("Error: renderGraph should not be null"), v35, v36, v37, v38, v39, v40, v50);
  }
  return v8;
}

uint64_t sub_1B19D2670(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  _QWORD v12[6];

  result = sub_1B19D2510(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = sub_1B19D26E8;
    v12[3] = &unk_1E63DACD0;
    v12[4] = a1;
    v12[5] = a2;
    return sub_1B1869628(a3, (uint64_t)v12);
  }
  return result;
}

uint64_t sub_1B19D26E8(uint64_t a1, uint64_t a2)
{
  return sub_1B19D2670(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), a2);
}

uint64_t sub_1B19D26F8(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t j;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t i;
  float32x4_t v29[6];
  float32x4_t v30;
  float32x4_t v31;

  if ((sub_1B1869380((uint64_t)a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8) & 1) != 0)
  {
    v16 = 2;
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
    result = sub_1B18699E8(a3, 0, &v30, v11, v12, v13, v14, v15);
    if ((result & 1) == 0)
      return result;
    v24 = &a1[6 * a2];
    v25 = v24[4];
    v29[2] = v24[3];
    v29[3] = v25;
    v26 = v24[6];
    v29[4] = v24[5];
    v29[5] = v26;
    v27 = v24[2];
    v29[0] = v24[1];
    v29[1] = v27;
    result = vfx_frustum_classify_aabb(v29, v30, v31);
    v16 = result;
    if ((_DWORD)result == 1)
      return result;
  }
  result = sub_1B19D2510(a1, a2, (uint64_t)a3, v11, v12, v13, v14, v15);
  if (!result)
  {
    if (v16 == 2)
    {
      result = sub_1B1842B54((uint64_t)a3);
      if ((_DWORD)result)
      {
        for (i = a3[4].i64[1]; i; i = *(_QWORD *)(i + 80))
          result = sub_1B19D26F8(a1, a2, i);
      }
    }
    else if (!v16)
    {
      result = sub_1B1842B54((uint64_t)a3);
      if ((_DWORD)result)
      {
        for (j = a3[4].i64[1]; j; j = *(_QWORD *)(j + 80))
          result = sub_1B19D2670(a1, a2, j, v18, v19, v20, v21, v22);
      }
    }
  }
  return result;
}

uint64_t sub_1B19D2810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (a1 && (v8 = sub_1B186CFA8(a1, a2, a3, a4, a5, a6, a7, a8)) != 0)
    return sub_1B18658E4((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
  else
    return -1;
}

double sub_1B19D2834(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double result;
  uint64_t v19;
  float32x4_t *v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  _OWORD v52[11];
  __n128 v53;
  simd_float4x4 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  simd_float4x4 v59;

  v10 = sub_1B1814984((uint64_t *)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    v19 = (uint64_t)v10;
    v20 = (float32x4_t *)sub_1B1869AC8((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
    v21 = v20[2];
    v22 = v20[3];
    v23 = vnegq_f32(v21);
    v24 = vmulq_f32(v22, v23);
    v23.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
    v25 = *v20;
    v26 = v20[1];
    *(float32x4_t *)(a1 + 12672) = v23;
    *(float32x4_t *)(a1 + 12688) = v25;
    *(float32x4_t *)(a1 + 12704) = v26;
    *(float32x4_t *)(a1 + 12720) = v21;
    *(float32x4_t *)(a1 + 12736) = v22;
    v53 = sub_1B1815A98(a2);
    memset(v52, 0, sizeof(v52));
    if ((sub_1B17B33F4(v19, (uint64_t)v52, v27, v28, v29, v30, v31, v32) & 1) == 0)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Invalid point of view"), v34, v35, v36, v37, v38, v39, (uint64_t)"NULL");
    if ((v52[0] & 2) != 0 || sub_1B1815564((uint64_t)a2, v33, v34, v35, v36, v37, v38, v39))
      sub_1B17B34F8((uint64_t)v52, v19, (uint64_t)&v53, *(_QWORD *)(a1 + 12640), v36, v37, v38, v39, v47);
    if (*(_BYTE *)(a1 + 12612))
      *(float32x2_t *)((char *)v52 + 4) = vcvt_f32_f64(*(float64x2_t *)(a1 + 12656));
    v42 = sub_1B18667B4((unsigned __int8 *)v52, (uint64_t)&v53, v40, v41, v36, v37, v38, v39);
    v50 = *((float32x4_t *)v42 + 1);
    v51 = *(float32x4_t *)v42;
    v48 = *((float32x4_t *)v42 + 3);
    v49 = *((float32x4_t *)v42 + 2);
    v59 = __invert_f4(*(simd_float4x4 *)(a1 + 12688));
    v43 = 0;
    v54 = v59;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    v58 = 0u;
    do
    {
      *(__int128 *)((char *)&v55 + v43 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)&v54.columns[v43])), v50, *(float32x2_t *)v54.columns[v43].f32, 1), v49, (float32x4_t)v54.columns[v43], 2), v48, (float32x4_t)v54.columns[v43], 3);
      ++v43;
    }
    while (v43 != 4);
    result = *(double *)&v55;
    v44 = v56;
    v45 = v57;
    v46 = v58;
    *(_OWORD *)(a1 + 12752) = v55;
    *(_OWORD *)(a1 + 12768) = v44;
    *(_OWORD *)(a1 + 12784) = v45;
    *(_OWORD *)(a1 + 12800) = v46;
  }
  return result;
}

double sub_1B19D29E4(uint64_t a1)
{
  uint64_t v2;
  _OWORD *v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  _OWORD *v13;
  double result;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  simd_float4x4 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  simd_float4x4 v23;

  v2 = 0;
  v3 = (_OWORD *)(a1 + 9232);
  do
  {
    if (v2)
    {
      v4 = (_OWORD *)(a1 + (v2 << 6));
      v5 = v3[1];
      v4[577] = *v3;
      v4[578] = v5;
      v6 = v3[3];
      v4[579] = v3[2];
      v4[580] = v6;
    }
    v7 = a1 + (v2 << 6);
    v23 = __invert_f4(*(simd_float4x4 *)(v7 + 7184));
    v8 = 0;
    *(simd_float4x4 *)(v7 + 8208) = v23;
    v9 = *(float32x4_t *)(v7 + 9232);
    v10 = *(float32x4_t *)(v7 + 9248);
    v11 = *(float32x4_t *)(v7 + 9264);
    v12 = *(float32x4_t *)(v7 + 9280);
    v18 = v23;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    do
    {
      *(__int128 *)((char *)&v19 + v8 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(*(_OWORD *)&v18.columns[v8])), v10, *(float32x2_t *)v18.columns[v8].f32, 1), v11, (float32x4_t)v18.columns[v8], 2), v12, (float32x4_t)v18.columns[v8], 3);
      ++v8;
    }
    while (v8 != 4);
    v13 = (_OWORD *)(a1 + (v2 << 6));
    result = *(double *)&v19;
    v15 = v20;
    v16 = v21;
    v17 = v22;
    v13[641] = v19;
    v13[642] = v15;
    v13[643] = v16;
    v13[644] = v17;
    ++v2;
  }
  while (v2 != 6);
  return result;
}

uint64_t sub_1B19D2AE8(uint64_t result)
{
  uint64_t i;
  _OWORD *v2;

  for (i = 0; i != 1024; i += 64)
  {
    v2 = (_OWORD *)(result + i);
    v2[97] = xmmword_1B2244DB0;
    v2[98] = xmmword_1B2244DD0;
    v2[99] = xmmword_1B2244D90;
    v2[100] = xmmword_1B2244E20;
    v2[161] = xmmword_1B2244DB0;
    v2[162] = xmmword_1B2244DD0;
    v2[163] = xmmword_1B2244D90;
    v2[164] = xmmword_1B2244E20;
    v2[225] = xmmword_1B2244DB0;
    v2[226] = xmmword_1B2244DD0;
    v2[227] = xmmword_1B2244D90;
    v2[228] = xmmword_1B2244E20;
    v2[289] = xmmword_1B2244DB0;
    v2[290] = xmmword_1B2244DD0;
    v2[291] = xmmword_1B2244D90;
    v2[292] = xmmword_1B2244E20;
    v2[449] = xmmword_1B2244DB0;
    v2[450] = xmmword_1B2244DD0;
    v2[451] = xmmword_1B2244D90;
    v2[452] = xmmword_1B2244E20;
    v2[513] = xmmword_1B2244DB0;
    v2[514] = xmmword_1B2244DD0;
    v2[515] = xmmword_1B2244D90;
    v2[516] = xmmword_1B2244E20;
    v2[577] = xmmword_1B2244DB0;
    v2[578] = xmmword_1B2244DD0;
    v2[579] = xmmword_1B2244D90;
    v2[580] = xmmword_1B2244E20;
    v2[641] = xmmword_1B2244DB0;
    v2[642] = xmmword_1B2244DD0;
    v2[643] = xmmword_1B2244D90;
    v2[644] = xmmword_1B2244E20;
  }
  return result;
}

__n128 sub_1B19D2BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v11;
  int v12;
  BOOL v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  simd_float4x4 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float32x4_t *v38;
  uint64_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  unsigned __int8 *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _OWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  simd_float4 *v111;
  simd_float4 *v112;
  simd_float4 v113;
  simd_float4 v114;
  simd_float4 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _OWORD *v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  simd_float4 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  float v133;
  double v134;
  float v135;
  uint64_t v137;
  simd_float4 v138;
  simd_float4 v139;
  simd_float4 v140;
  simd_float4 v141;
  simd_float4x4 v142;
  simd_float4x4 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  _OWORD v151[5];
  simd_float4x4 v152;
  simd_float4x4 v153;
  simd_float4x4 v154;

  v11 = (unsigned __int8 *)(a1 + 12560);
  v12 = *(unsigned __int8 *)(a1 + 12615);
  if (*(_BYTE *)(a1 + 12613))
    v13 = 0;
  else
    v13 = v12 == 2;
  if (!v13)
  {
    v14 = sub_1B179F7DC(a2);
    *v11 = v14;
    if (v12)
    {
      if (v12 == 1)
      {
        memset(&v142, 0, sizeof(v142));
        sub_1B186BDB8(a3, (uint64_t)&v142, v15, v16, v17, v18, v19, v20);
        v21 = __invert_f4(v142);
        v140 = v21.columns[1];
        v141 = v21.columns[0];
        v138 = v21.columns[3];
        v139 = v21.columns[2];
        if (*v11)
        {
          v27 = 0;
          do
          {
            v28 = (_OWORD *)(a1 + (v27 << 6));
            v29 = (_OWORD *)sub_1B1814F08(a2, 0, v27, v22, v23, v24, v25, v26);
            v30 = v29[2];
            v31 = v29[3];
            v32 = v29[1];
            v28[577] = *v29;
            v28[580] = v31;
            v28[579] = v30;
            v28[578] = v32;
            v38 = (float32x4_t *)sub_1B1814F08(a2, 1, v27, v33, v34, v35, v36, v37);
            v39 = 0;
            v40 = *v38;
            v41 = v38[1];
            v42 = v38[2];
            v43 = v38[3];
            v151[0] = v141;
            v151[1] = v140;
            v151[2] = v139;
            v151[3] = v138;
            memset(&v143, 0, sizeof(v143));
            do
            {
              v143.columns[v39] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, COERCE_FLOAT(v151[v39])), v41, *(float32x2_t *)&v151[v39], 1), v42, (float32x4_t)v151[v39], 2), v43, (float32x4_t)v151[v39], 3);
              ++v39;
            }
            while (v39 != 4);
            v152 = v143;
            v44 = a1 + (v27 << 6);
            *(simd_float4 *)(v44 + 8208) = v143.columns[0];
            *(simd_float4 *)(v44 + 8224) = v152.columns[1];
            *(simd_float4 *)(v44 + 8240) = v152.columns[2];
            *(simd_float4 *)(v44 + 8256) = v152.columns[3];
            *(simd_float4x4 *)(v44 + 7184) = __invert_f4(v152);
            *(_OWORD *)(v44 + 1552) = *(_OWORD *)(v44 + 7184);
            *(_OWORD *)(v44 + 1568) = *(_OWORD *)(v44 + 7200);
            *(_OWORD *)(v44 + 1584) = *(_OWORD *)(v44 + 7216);
            *(_OWORD *)(v44 + 1600) = *(_OWORD *)(v44 + 7232);
            v45 = v28[577];
            v46 = v28[578];
            v47 = v28[579];
            *(_OWORD *)(v44 + 3648) = v28[580];
            *(_OWORD *)(v44 + 3632) = v47;
            *(_OWORD *)(v44 + 3616) = v46;
            *(_OWORD *)(v44 + 3600) = v45;
            v21.columns[0] = (simd_float4)sub_1B181537C(a2, v27, v48, v49, v50, v51, v52, v53);
            *(simd_float4 *)(a1 + 16 * v27++ + 11280) = v21.columns[0];
          }
          while (v27 < *v11);
        }
        goto LABEL_39;
      }
      if (!v11[53])
      {
        sub_1B17C4408(16, (uint64_t)CFSTR("Unreachable code: Unsupported configuration"), v15, v16, v17, v18, v19, v20, v137);
LABEL_39:
        v133 = *(float *)(a1 + 9272);
        v134 = v133;
        v135 = *(float *)(a1 + 9288);
        *(double *)v21.columns[3].i64 = v135;
        v21.columns[0].f32[0] = v135 / v133;
        *(double *)v21.columns[2].i64 = v135 / (v134 + 1.0);
        *(double *)v21.columns[1].i64 = (*(double *)v21.columns[3].i64 + -1.0) / v134;
        if (*(float *)(a1 + 9276) != 0.0)
          v21.columns[1].i64[0] = v21.columns[2].i64[0];
        v21.columns[1].f32[0] = *(double *)v21.columns[1].i64;
        *(int32x2_t *)v21.columns[2].f32 = vcgt_f32(*(float32x2_t *)v21.columns[0].f32, *(float32x2_t *)v21.columns[1].f32);
        v21.columns[0].i32[1] = v21.columns[1].i32[0];
        v21.columns[0] = (simd_float4)vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v21.columns[2].f32, 0), (int8x8_t)vrev64_s32(*(int32x2_t *)v21.columns[0].f32), *(int8x8_t *)v21.columns[0].f32));
        *(simd_float4 *)(a1 + 12656) = v21.columns[0];
        return (__n128)v21.columns[0];
      }
    }
    if (v14)
    {
      v108 = 0;
      v109 = 0;
      v110 = a1 + 11280;
      do
      {
        v111 = (simd_float4 *)(v110 + v108 - 3072);
        v112 = (simd_float4 *)sub_1B1814F08(a2, 1, v109, v16, v17, v18, v19, v20);
        v113 = v112[3];
        v115 = *v112;
        v114 = v112[1];
        *(simd_float4 *)(v110 + v108 - 3040) = v112[2];
        *(simd_float4 *)(v110 + v108 - 3024) = v113;
        *v111 = v115;
        *(simd_float4 *)(v110 + v108 - 3056) = v114;
        v116 = a1 + v108;
        v122 = (_OWORD *)sub_1B1814F08(a2, 0, v109, v117, v118, v119, v120, v121);
        v123 = v122[2];
        v124 = v122[3];
        v125 = v122[1];
        *(_OWORD *)(v116 + 9232) = *v122;
        *(_OWORD *)(v116 + 9280) = v124;
        *(_OWORD *)(v116 + 9248) = v125;
        *(_OWORD *)(v116 + 9264) = v123;
        v126 = (simd_float4 *)(v110 + v108 - 4096);
        v153.columns[0] = *v111;
        v153.columns[1] = *(simd_float4 *)(a1 + v108 + 8224);
        v153.columns[2] = *(simd_float4 *)(a1 + v108 + 8240);
        v153.columns[3] = *(simd_float4 *)(a1 + v108 + 8256);
        v154 = __invert_f4(v153);
        *v126 = v154.columns[0];
        *(simd_float4 *)(v116 + 7200) = v154.columns[1];
        *(simd_float4 *)(v116 + 7216) = v154.columns[2];
        *(simd_float4 *)(v116 + 7232) = v154.columns[3];
        v154.columns[1] = *(simd_float4 *)(v110 + v108 - 4080);
        *(simd_float4 *)(v116 + 1552) = *v126;
        *(simd_float4 *)(v116 + 1568) = v154.columns[1];
        v154.columns[1] = *(simd_float4 *)(v110 + v108 - 4048);
        *(_OWORD *)(v116 + 1584) = *(_OWORD *)(v110 + v108 - 4064);
        *(simd_float4 *)(v116 + 1600) = v154.columns[1];
        v154.columns[0] = *(simd_float4 *)(a1 + v108 + 9232);
        v154.columns[1] = *(simd_float4 *)(a1 + v108 + 9248);
        v154.columns[2] = *(simd_float4 *)(a1 + v108 + 9264);
        *(_OWORD *)(v116 + 3648) = *(_OWORD *)(v116 + 9280);
        *(simd_float4 *)(v116 + 3632) = v154.columns[2];
        *(simd_float4 *)(v116 + 3616) = v154.columns[1];
        *(simd_float4 *)(v116 + 3600) = v154.columns[0];
        v21.columns[0] = (simd_float4)sub_1B181537C(a2, v109, v127, v128, v129, v130, v131, v132);
        *(simd_float4 *)(v110 + 16 * v109++) = v21.columns[0];
        v108 += 64;
      }
      while (v109 < *v11);
    }
    goto LABEL_39;
  }
  v149 = 0u;
  v150 = 0u;
  v147 = 0u;
  v148 = 0u;
  v145 = 0u;
  v146 = 0u;
  v144 = 0u;
  memset(&v143, 0, sizeof(v143));
  if ((sub_1B17B33F4(a3, (uint64_t)&v143, a3, a4, a5, a6, a7, a8) & 1) == 0)
    sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Invalid point of view"), v56, v57, v58, v59, v60, v61, (uint64_t)"NULL");
  if ((v143.columns[0].i8[0] & 2) != 0 || sub_1B1815564(a2, v55, v56, v57, v58, v59, v60, v61))
    sub_1B17B34F8((uint64_t)&v143, a3, a1 + 11280, *(_QWORD *)(a1 + 12640), v58, v59, v60, v61, v137);
  if (v11[52])
    *(float32x2_t *)&v143.columns[0].i32[1] = vcvt_f32_f64(*(float64x2_t *)(a1 + 12656));
  else
    *(float64x2_t *)(a1 + 12656) = vcvtq_f64_f32(*(float32x2_t *)&v143.columns[0].i32[1]);
  v64 = (_OWORD *)(a1 + 9232);
  v65 = sub_1B18667B4((unsigned __int8 *)&v143, a1 + 11280, v62, v63, v58, v59, v60, v61);
  v66 = *((_OWORD *)v65 + 2);
  v67 = *((_OWORD *)v65 + 3);
  v68 = *((_OWORD *)v65 + 1);
  *(_OWORD *)(a1 + 9232) = *(_OWORD *)v65;
  *(_OWORD *)(a1 + 9280) = v67;
  *(_OWORD *)(a1 + 9264) = v66;
  *(_OWORD *)(a1 + 9248) = v68;
  v69 = (_OWORD *)(a1 + 7184);
  sub_1B186BDB8(a3, a1 + 7184, v70, v71, v72, v73, v74, v75);
  if (a3 == a4)
  {
    v101 = *(_OWORD *)(a1 + 7200);
    *(_OWORD *)(a1 + 1552) = *v69;
    *(_OWORD *)(a1 + 1568) = v101;
    v102 = *(_OWORD *)(a1 + 7232);
    *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a1 + 7216);
    *(_OWORD *)(a1 + 1600) = v102;
    v103 = *(_OWORD *)(a1 + 9248);
    *(_OWORD *)(a1 + 3600) = *v64;
    *(_OWORD *)(a1 + 3616) = v103;
    v21.columns[0] = *(simd_float4 *)(a1 + 9264);
    v21.columns[1] = *(simd_float4 *)(a1 + 9280);
    *(simd_float4 *)(a1 + 3632) = v21.columns[0];
    *(simd_float4 *)(a1 + 3648) = v21.columns[1];
  }
  else
  {
    if ((sub_1B17B33F4(a4, (uint64_t)&v143, v76, v77, v78, v79, v80, v81) & 1) == 0)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Invalid point of view"), v83, v84, v85, v86, v87, v88, (uint64_t)"NULL");
    if ((v143.columns[0].i8[0] & 2) != 0 || sub_1B1815564(a2, v82, v83, v84, v85, v86, v87, v88))
      sub_1B17B34F8((uint64_t)&v143, a3, a1 + 11280, *(_QWORD *)(a1 + 12640), v85, v86, v87, v88, v137);
    *(float64x2_t *)(a1 + 12656) = vcvtq_f64_f32(*(float32x2_t *)&v143.columns[0].i32[1]);
    v91 = sub_1B18667B4((unsigned __int8 *)&v143, a1 + 11280, v89, v90, v85, v86, v87, v88);
    v92 = *((_OWORD *)v91 + 2);
    v93 = *((_OWORD *)v91 + 3);
    v94 = *((_OWORD *)v91 + 1);
    *(_OWORD *)(a1 + 3600) = *(_OWORD *)v91;
    *(_OWORD *)(a1 + 3648) = v93;
    *(_OWORD *)(a1 + 3632) = v92;
    *(_OWORD *)(a1 + 3616) = v94;
    v21.columns[0].i64[0] = sub_1B186BDB8(a4, a1 + 1552, v95, v96, v97, v98, v99, v100).n128_u64[0];
  }
  if (*v11 >= 2u)
  {
    v104 = a1 + 7248;
    v105 = 1;
    do
    {
      v106 = *v64;
      v107 = *(_OWORD *)(a1 + 9248);
      v21.columns[2] = *(simd_float4 *)(a1 + 9264);
      *(_OWORD *)(v104 + 2096) = *(_OWORD *)(a1 + 9280);
      *(simd_float4 *)(v104 + 2080) = v21.columns[2];
      *(_OWORD *)(v104 + 2064) = v107;
      *(_OWORD *)(v104 + 2048) = v106;
      v21.columns[0] = (simd_float4)*v69;
      v21.columns[1] = *(simd_float4 *)(a1 + 7200);
      v21.columns[3] = *(simd_float4 *)(a1 + 7232);
      *(_OWORD *)(v104 + 32) = *(_OWORD *)(a1 + 7216);
      *(simd_float4 *)(v104 + 48) = v21.columns[3];
      *(simd_float4 *)v104 = v21.columns[0];
      *(simd_float4 *)(v104 + 16) = v21.columns[1];
      v104 += 64;
      ++v105;
    }
    while (v105 < *v11);
  }
  return (__n128)v21.columns[0];
}

uint64_t sub_1B19D30F4(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;

  v8 = a1 + 12560;
  if (a1[12613])
  {
    if (*v8 != 2)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. Multiple viewport is for stereo only"), a3, a4, a5, a6, a7, a8, (uint64_t)"cullingContext->eyeCount == 2");
  }
  else
  {
    if (!a1[12614])
      return *v8;
    if (a1[12563] != 1 || *v8 != 6)
      sub_1B17C4408(17, (uint64_t)CFSTR("Assertion '%s' failed. singlePassCubeMapRendering require renderMode == Layered and eyeCount == 6"), a3, a4, a5, a6, a7, a8, (uint64_t)"cullingContext->viewMapping == kCFXViewMappingLayered && cullingContext->eyeCount == 6");
  }
  return 1;
}

void sub_1B19D3188(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  unsigned __int8 *v5;
  unint64_t v9;
  uint64_t v10;
  simd_float4x4 *v11;
  simd_float4x4 *v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  uint64_t v30;
  simd_float4 *v31;
  simd_float4 v32;
  simd_float4 v33;
  simd_float4 v34;
  simd_float4 v35;
  int32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x2_t v42;
  int8x16_t *v43;
  int8x16_t v44;
  int8x16_t v45;
  uint64_t v46;
  _OWORD *v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  simd_float4 v52;
  simd_float4 v53;
  simd_float4 v54;
  float32x4_t v55;
  _OWORD *v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v64;
  int32x4_t v66;
  float32x4_t v69;
  int32x4_t v70;
  float32x4_t *v71;
  float32x4_t v72;
  float32x2_t v73;
  float32x2_t v74;
  float32x2_t v75;
  float32x2_t v76;
  float32x2_t v77;
  float32x2_t v78;
  float32x4_t v79;
  float32x2_t v80;
  float32x2_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  unint64_t v85;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  float32x4_t v95;
  float32x4_t v96;
  uint64_t v97;
  simd_float4 v98;
  simd_float4 v99;
  simd_float4 v100;
  simd_float4 *v101;
  simd_float4 v102;
  simd_float4 v103;
  simd_float4 v104;
  float v105;
  double v106;
  double v107;
  double v108;
  unsigned int v109;
  float32x4_t v110;
  float32x4_t v111;
  double v112;
  unsigned int v113;
  float32x4_t v114;
  float32_t v115;
  unsigned int v116;
  float32x4_t v117;
  simd_float4 v118;
  simd_float4 v119;
  simd_float4 v120;
  _OWORD *v121;
  int32x4_t v122;
  int32x4_t v123;
  int32x4_t v124;
  unint64_t v125;
  int32x4_t *v126;
  float32x4_t *v127;
  int32x4_t v128;
  int32x4_t v129;
  int32x4_t v130;
  int32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float v136;
  float v137;
  float v138;
  float v139;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  int32x4_t *v146;
  int32x4_t v147;
  int32x4_t v148;
  int32x4_t v149;
  int32x4_t v150;
  int32x4_t v151;
  int32x4_t v152;
  float v153;
  float v154;
  float v155;
  int32x4_t v156;
  int32x4_t v157;
  float32x4_t *v158;
  int32x4_t v159;
  float32x4_t v160;
  int32x4_t v161;
  float32x4_t v162;
  float32x2_t v163;
  float32x2_t v164;
  float32x4_t v165;
  float32x2_t v166;
  float32x2_t v167;
  float32x2_t v168;
  float32x2_t v169;
  float32x4_t v170;
  float32x4_t v171;
  uint64_t v172;
  int32x4_t v173;
  float32x4_t v174;
  float32_t v175;
  float32x4_t v176;
  unsigned __int32 v177;
  float v178;
  unsigned __int32 v179;
  float32x2_t v180;
  float32x2_t v181;
  float32x4_t v182;
  unsigned __int32 v183;
  float32x4_t v184;
  int32x4_t v185;
  unsigned __int32 v186;
  float32x4_t v187;
  int32x4_t v188;
  __int128 v189;
  unsigned __int32 v190;
  int32x4_t *v191;
  float32x4_t *v192;
  int32x4_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float v201;
  float v202;
  __int128 v203;
  float v204;
  float v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float v210;
  float v211;
  float v212;
  uint64_t v213;
  float32x4_t v214;
  unsigned __int32 v215;
  float v216;
  float32_t v217;
  int32x4_t v218;
  unsigned __int32 v219;
  float32x2_t v220;
  float32x2_t v221;
  float32x4_t v222;
  int32x4_t v223;
  int32x4_t v224;
  unsigned __int32 v225;
  float32x4_t v226;
  __int128 v227;
  int32x4_t v228;
  unsigned __int32 v229;
  _OWORD *v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  unsigned int v234;
  simd_float4x4 v237;
  int32x4_t v238;
  int32x4_t v239;
  int32x4_t v240;
  int32x4_t v241;
  simd_float4x4 v242;

  v5 = (unsigned __int8 *)(a1 + 12560);
  if (*(_BYTE *)(a1 + 12560))
  {
    v9 = 0;
    do
    {
      if (v5[3] && !v5[4])
      {
        v13 = a1 + (v9 << 6);
        v11 = (simd_float4x4 *)(v13 + 7184);
        v12 = (simd_float4x4 *)(v13 + 8208);
      }
      else
      {
        v10 = a1 + (v9 << 6);
        v11 = (simd_float4x4 *)(v10 + 8208);
        v12 = (simd_float4x4 *)(v10 + 7184);
      }
      *v11 = __invert_f4(*v12);
      if (a5)
      {
        if (sub_1B1815DA8((uint64_t)a2))
        {
          v19 = sub_1B1815DC0((uint64_t)a2);
          *(double *)v26.i64 = sub_1B1815DE0((uint64_t)a2, v19, v20, v21, v22, v23, v24, v25);
          v30 = 0;
          v31 = (simd_float4 *)(a1 + (v9 << 6));
          v32 = v31[577];
          v33 = v31[578];
          v34 = v31[579];
          v35 = v31[580];
          v36 = (int32x4_t *)&v31[577];
          v237.columns[0] = v32;
          v237.columns[1] = v33;
          v237.columns[2] = v34;
          v237.columns[3] = v35;
          v238 = 0u;
          v239 = 0u;
          v240 = 0u;
          v241 = 0u;
          do
          {
            *(float32x4_t *)((char *)&v238 + v30 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)&v237.columns[v30])), v27, *(float32x2_t *)v237.columns[v30].f32, 1), v28, (float32x4_t)v237.columns[v30], 2), v29, (float32x4_t)v237.columns[v30], 3);
            ++v30;
          }
          while (v30 != 4);
          v37 = v239;
          v38 = v240;
          v39 = v241;
          *v36 = v238;
          v36[1] = v37;
          v36[2] = v38;
          v36[3] = v39;
        }
        if (sub_1B1816000((uint64_t)a2))
        {
          v42 = sub_1B1816010(a2, 0, v40, v41);
          v43 = (int8x16_t *)(a1 + (v9 << 6));
          v44 = v43[579];
          *(float32x2_t *)v45.i8 = vadd_f32(v42, *(float32x2_t *)v44.i8);
          v45.i64[1] = vextq_s8(v44, v44, 8uLL).u64[0];
          v43[579] = v45;
        }
      }
      v46 = 0;
      v47 = (_OWORD *)(a1 + (v9 << 6));
      v48 = *((float32x4_t *)v47 + 577);
      v49 = *((float32x4_t *)v47 + 578);
      v50 = *((float32x4_t *)v47 + 579);
      v51 = *((float32x4_t *)v47 + 580);
      v52 = *((simd_float4 *)v47 + 514);
      v53 = *((simd_float4 *)v47 + 515);
      v54 = *((simd_float4 *)v47 + 516);
      v237.columns[0] = (simd_float4)v47[513];
      v237.columns[1] = v52;
      v237.columns[2] = v53;
      v237.columns[3] = v54;
      v238 = 0u;
      v239 = 0u;
      v240 = 0u;
      v241 = 0u;
      do
      {
        v55 = (float32x4_t)v237.columns[v46];
        *(float32x4_t *)((char *)&v238 + v46 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, v55.f32[0]), v49, *(float32x2_t *)v55.f32, 1), v50, v55, 2), v51, v55, 3);
        ++v46;
      }
      while (v46 != 4);
      v56 = (_OWORD *)(a1 + (v9 << 6));
      v57 = v238;
      v58 = v239;
      v60 = v240;
      v59 = v241;
      v56[641] = v238;
      v56[642] = v58;
      v56[643] = v60;
      v14.f32[0] = *(float *)&v57.i32[3] - *(float *)v57.i32;
      v14.f32[1] = *(float *)&v58.i32[3] - *(float *)v58.i32;
      v14.f32[2] = *(float *)&v60.i32[3] - *(float *)v60.i32;
      v61 = (int32x4_t)vmulq_f32(v14, v14);
      v14.f32[3] = *(float *)&v59.i32[3] - *(float *)v59.i32;
      v15.f32[0] = *(float *)&v57.i32[3] + *(float *)v57.i32;
      v15.f32[1] = *(float *)&v58.i32[3] + *(float *)v58.i32;
      v15.f32[2] = *(float *)&v60.i32[3] + *(float *)v60.i32;
      v62 = (int32x4_t)vmulq_f32(v15, v15);
      v15.f32[3] = *(float *)&v59.i32[3] + *(float *)v59.i32;
      v16.f32[0] = *(float *)&v57.i32[3] + *(float *)&v57.i32[1];
      v16.f32[1] = *(float *)&v58.i32[3] + *(float *)&v58.i32[1];
      v16.f32[2] = *(float *)&v60.i32[3] + *(float *)&v60.i32[1];
      v64 = (int32x4_t)vmulq_f32(v16, v16);
      v16.f32[3] = *(float *)&v59.i32[3] + *(float *)&v59.i32[1];
      v17.f32[0] = *(float *)&v57.i32[3] - *(float *)&v57.i32[1];
      v17.f32[1] = *(float *)&v58.i32[3] - *(float *)&v58.i32[1];
      v17.f32[2] = *(float *)&v60.i32[3] - *(float *)&v60.i32[1];
      v66 = (int32x4_t)vmulq_f32(v17, v17);
      v17.f32[3] = *(float *)&v59.i32[3] - *(float *)&v59.i32[1];
      v55.f32[0] = *(float *)&v57.i32[3] - *(float *)&v57.i32[2];
      v55.f32[1] = *(float *)&v58.i32[3] - *(float *)&v58.i32[2];
      v55.f32[2] = *(float *)&v60.i32[3] - *(float *)&v60.i32[2];
      v83 = vmulq_f32(v55, v55);
      v55.f32[3] = *(float *)&v59.i32[3] - *(float *)&v59.i32[2];
      v56[644] = v59;
      v69 = (float32x4_t)vzip2q_s32(v57, v58);
      v69.i32[2] = v60.i32[2];
      v70 = (int32x4_t)vmulq_f32(v69, v69);
      v69.i32[3] = v59.i32[2];
      v71 = (float32x4_t *)(a1 + 96 * v9);
      v59.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1))).u32[0];
      *(float32x2_t *)v60.i8 = vrsqrte_f32((float32x2_t)v59.u32[0]);
      *(float32x2_t *)v60.i8 = vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)));
      v72 = vmulq_n_f32(v14, vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8))).f32[0]);
      v60.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v62, 2), vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1))).u32[0];
      v73 = vrsqrte_f32((float32x2_t)v60.u32[0]);
      v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v73, v73)));
      v60.i32[0] = vmul_f32(v74, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v74, v74))).u32[0];
      v74.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v64, 2), vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1))).u32[0];
      v75 = vrsqrte_f32((float32x2_t)v74.u32[0]);
      v76 = vmul_f32(v75, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(v75, v75)));
      v74.i32[0] = vmul_f32(v76, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(v76, v76))).u32[0];
      v76.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v66, 2), vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1))).u32[0];
      v77 = vrsqrte_f32((float32x2_t)v76.u32[0]);
      v78 = vmul_f32(v77, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v77, v77)));
      v79 = vmulq_n_f32(v17, vmul_f32(v78, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v78, v78))).f32[0]);
      v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
      v80 = vrsqrte_f32((float32x2_t)v70.u32[0]);
      v81 = vmul_f32(v80, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v80, v80)));
      v70.i32[0] = vmul_f32(v81, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v81, v81))).u32[0];
      v82 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2);
      v83.i32[0] = vadd_f32(*(float32x2_t *)v82.f32, vadd_f32(*(float32x2_t *)v83.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.f32, 1))).u32[0];
      v84 = vmulq_n_f32(v69, *(float *)v70.i32);
      *(float32x2_t *)v70.i8 = vrsqrte_f32((float32x2_t)v83.u32[0]);
      *(float32x2_t *)v70.i8 = vmul_f32(*(float32x2_t *)v70.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8)));
      v71[353] = v72;
      v71[354] = vmulq_n_f32(v15, *(float *)v60.i32);
      v71[355] = vmulq_n_f32(v16, v74.f32[0]);
      v71[356] = v79;
      v71[357] = v84;
      v71[358] = vmulq_n_f32(v55, vmul_f32(*(float32x2_t *)v70.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8))).f32[0]);
      ++v9;
    }
    while (v9 < *v5);
    if (*v5)
    {
      v85 = 0;
      __asm { FMOV            V0.4S, #1.0 }
      v234 = HIDWORD(_Q0);
      v91 = a1 + 10256;
      v92 = a1 + 4624;
      do
      {
        if (a3 == a4)
        {
          if (!v5[54])
          {
            v230 = (_OWORD *)(a1 + (v85 << 6));
            v230[161] = v230[513];
            v230[162] = v230[514];
            v230[163] = v230[515];
            v230[164] = v230[516];
            v230[225] = v230[577];
            v230[226] = v230[578];
            v230[227] = v230[579];
            v230[228] = v230[580];
            v231 = v230[641];
            v232 = v230[642];
            v233 = v230[643];
            v230[292] = v230[644];
            v230[291] = v233;
            v230[290] = v232;
            v230[289] = v231;
            goto LABEL_30;
          }
          v97 = 0;
          v98 = *(simd_float4 *)(a1 + 7504);
          v99 = *(simd_float4 *)(a1 + 7520);
          v100 = *(simd_float4 *)(a1 + 7536);
          v101 = (simd_float4 *)(a1 + (v85 << 6));
          v101[100] = *(simd_float4 *)(a1 + 7552);
          v101[99] = v100;
          v101[98] = v99;
          v101[97] = v98;
          v103 = *(simd_float4 *)(a1 + 8528);
          v102 = *(simd_float4 *)(a1 + 8544);
          v104 = *(simd_float4 *)(a1 + 8560);
          v101[164] = *(simd_float4 *)(a1 + 8576);
          v101[163] = v104;
          v101[162] = v102;
          v105 = *(double *)(a1 + 12664);
          v106 = (float)-v105;
          v107 = v105;
          if (v105 > 0.0)
            v108 = v105;
          else
            v108 = v106 + 1.0;
          *(float *)&v109 = 2.0 / (v107 - v106);
          v110 = (float32x4_t)v109;
          v111.i32[0] = 0;
          v111.i64[1] = 0;
          v111.i32[1] = v109;
          v112 = v106 - v108;
          *(float *)&v113 = 1.0 / (v106 - v108);
          v114.i64[0] = 0;
          v114.i64[1] = v113;
          v101[161] = v103;
          v115 = -(v106 + v107) / (v107 - v106);
          v117.f32[0] = v115;
          v117.f32[1] = v115;
          *(float *)&v116 = v106 / v112;
          v117.i64[1] = __PAIR64__(v234, v116);
          v101[225] = (simd_float4)v110.u32[0];
          v101[226] = (simd_float4)v111.u64[0];
          v101[227] = (simd_float4)v114;
          v101[228] = (simd_float4)v117;
          v118 = v101[162];
          v119 = v101[163];
          v120 = v101[164];
          v237.columns[0] = v101[161];
          v237.columns[1] = v118;
          v237.columns[2] = v119;
          v237.columns[3] = v120;
          v238 = 0u;
          v239 = 0u;
          v240 = 0u;
          v241 = 0u;
          do
          {
            v55 = (float32x4_t)v237.columns[v97];
            v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v110, v55.f32[0]), v111, *(float32x2_t *)v55.f32, 1), v114, v55, 2), v117, v55, 3);
            *(float32x4_t *)((char *)&v238 + v97 * 16) = v83;
            ++v97;
          }
          while (v97 != 4);
        }
        else
        {
          v93 = a1 + (v85 << 6);
          v242 = __invert_f4(*(simd_float4x4 *)(v93 + 1552));
          v94 = 0;
          *(simd_float4x4 *)(v93 + 2576) = v242;
          v55 = *(float32x4_t *)(v93 + 3600);
          v83 = *(float32x4_t *)(v93 + 3616);
          v95 = *(float32x4_t *)(v93 + 3632);
          v96 = *(float32x4_t *)(v93 + 3648);
          v237 = v242;
          v238 = 0u;
          v239 = 0u;
          v240 = 0u;
          v241 = 0u;
          do
          {
            *(float32x4_t *)((char *)&v238 + v94 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)&v237.columns[v94])), v83, *(float32x2_t *)v237.columns[v94].f32, 1), v95, (float32x4_t)v237.columns[v94], 2), v96, (float32x4_t)v237.columns[v94], 3);
            ++v94;
          }
          while (v94 != 4);
        }
        v121 = (_OWORD *)(a1 + (v85 << 6));
        v122 = v239;
        v123 = v240;
        v124 = v241;
        v121[289] = v238;
        v121[290] = v122;
        v121[291] = v123;
        v121[292] = v124;
LABEL_30:
        if (v5[53])
        {
          if (v85)
          {
            v125 = v85 - 1;
            v126 = (int32x4_t *)(v91 + ((v85 - 1) << 6));
            v127 = (float32x4_t *)(v91 + (v85 << 6));
            v128 = *v126;
            v129 = v126[1];
            v131 = v126[2];
            v130 = v126[3];
            v132 = *v127;
            v133 = v127[1];
            v135 = v127[2];
            v134 = v127[3];
            v136 = v134.f32[3];
            v137 = v134.f32[3] - v134.f32[0];
            v83.i32[0] = HIDWORD(*(unsigned __int128 *)v126);
            v18.i32[0] = HIDWORD(*(unsigned __int128 *)v127);
            v138 = v133.f32[3];
            v139 = v135.f32[3];
            if ((float)(*(float *)&v130.i32[3] - *(float *)v130.i32) >= (float)(v134.f32[3] - v134.f32[0]))
            {
              v137 = *(float *)&v130.i32[3] - *(float *)v130.i32;
              v140 = v135.f32[0];
              LODWORD(v141) = HIDWORD(*(_OWORD *)&v127[2]);
              v142 = v133.f32[0];
              LODWORD(v143) = HIDWORD(*(_OWORD *)&v127[1]);
              LODWORD(v144) = *(float32x4_t *)v127->f32;
              LODWORD(v145) = HIDWORD(*(unsigned __int128 *)v127);
              v135.i32[0] = v131.i32[0];
              LODWORD(v139) = HIDWORD(*(_OWORD *)&v126[2]);
              v133.i32[0] = v129.i32[0];
              LODWORD(v138) = HIDWORD(*(_OWORD *)&v126[1]);
              v132.i32[0] = (__int32)*v126;
              v18.i32[0] = HIDWORD(*(unsigned __int128 *)v126);
            }
            else
            {
              v134.i32[0] = v130.i32[0];
              LODWORD(v136) = HIDWORD(*(_OWORD *)&v126[3]);
              v140 = *(float *)v131.i32;
              LODWORD(v141) = HIDWORD(*(_OWORD *)&v126[2]);
              v142 = *(float *)v129.i32;
              LODWORD(v143) = HIDWORD(*(_OWORD *)&v126[1]);
              LODWORD(v144) = *v126;
              LODWORD(v145) = HIDWORD(*(unsigned __int128 *)v126);
            }
            v172 = a1 + 96 * v125 + 5648;
            v18.f32[0] = v18.f32[0] - v132.f32[0];
            v18.f32[1] = v138 - v133.f32[0];
            v18.f32[2] = v139 - v135.f32[0];
            v173 = (int32x4_t)vmulq_f32(v18, v18);
            v18.f32[3] = v137;
            v173.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v173, 2), vadd_f32(*(float32x2_t *)v173.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.i8, 1))).u32[0];
            *(float32x2_t *)v135.f32 = vrsqrte_f32((float32x2_t)v173.u32[0]);
            *(float32x2_t *)v135.f32 = vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v173.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32)));
            v174 = vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v173.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32))).f32[0]);
            v135.f32[0] = v144 + v145;
            v175 = v134.f32[0] + v136;
            v135.f32[1] = v142 + v143;
            v135.f32[2] = v140 + v141;
            v176 = vmulq_f32(v135, v135);
            v135.f32[3] = v175;
            v177 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v176, 2), vadd_f32(*(float32x2_t *)v176.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v176.f32, 1))).u32[0];
            *(float32x2_t *)v176.f32 = vrsqrte_f32((float32x2_t)v177);
            *(float32x2_t *)v176.f32 = vmul_f32(*(float32x2_t *)v176.f32, vrsqrts_f32((float32x2_t)v177, vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32)));
            LODWORD(v178) = vmul_f32(*(float32x2_t *)v176.f32, vrsqrts_f32((float32x2_t)v177, vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32))).u32[0];
            v176.f32[0] = v83.f32[0] + *(float *)&v128.i32[1];
            v176.f32[1] = *(float *)&v129.i32[3] + *(float *)&v129.i32[1];
            v176.f32[2] = *(float *)&v131.i32[3] + *(float *)&v131.i32[1];
            v17 = vmulq_f32(v176, v176);
            v176.f32[3] = *(float *)&v130.i32[3] + *(float *)&v130.i32[1];
            *(float32x4_t *)v172 = v174;
            *(float32x4_t *)(v172 + 16) = vmulq_n_f32(v135, v178);
            v179 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v17, 2), vadd_f32(*(float32x2_t *)v17.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
            v180 = vrsqrte_f32((float32x2_t)v179);
            v181 = vmul_f32(v180, vrsqrts_f32((float32x2_t)v179, vmul_f32(v180, v180)));
            v182 = vmulq_n_f32(v176, vmul_f32(v181, vrsqrts_f32((float32x2_t)v179, vmul_f32(v181, v181))).f32[0]);
            v176.f32[0] = v83.f32[0] - *(float *)&v128.i32[1];
            v176.f32[1] = *(float *)&v129.i32[3] - *(float *)&v129.i32[1];
            v176.f32[2] = *(float *)&v131.i32[3] - *(float *)&v131.i32[1];
            v184 = vmulq_f32(v176, v176);
            v176.f32[3] = *(float *)&v130.i32[3] - *(float *)&v130.i32[1];
            v183 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v184, 2), vadd_f32(*(float32x2_t *)v184.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v184.f32, 1))).u32[0];
            *(float32x2_t *)v184.f32 = vrsqrte_f32((float32x2_t)v183);
            *(float32x2_t *)v184.f32 = vmul_f32(*(float32x2_t *)v184.f32, vrsqrts_f32((float32x2_t)v183, vmul_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32)));
            v83.f32[0] = v83.f32[0] - *(float *)&v128.i32[2];
            v83.f32[1] = *(float *)&v129.i32[3] - *(float *)&v129.i32[2];
            v83.f32[2] = *(float *)&v131.i32[3] - *(float *)&v131.i32[2];
            v185 = (int32x4_t)vmulq_f32(v83, v83);
            v83.f32[3] = *(float *)&v130.i32[3] - *(float *)&v130.i32[2];
            *(float32x4_t *)(v172 + 32) = v182;
            *(float32x4_t *)(v172 + 48) = vmulq_n_f32(v176, vmul_f32(*(float32x2_t *)v184.f32, vrsqrts_f32((float32x2_t)v183, vmul_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32))).f32[0]);
            v186 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v185, 2), vadd_f32(*(float32x2_t *)v185.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v185.i8, 1))).u32[0];
            *(float32x2_t *)v185.i8 = vrsqrte_f32((float32x2_t)v186);
            *(float32x2_t *)v185.i8 = vmul_f32(*(float32x2_t *)v185.i8, vrsqrts_f32((float32x2_t)v186, vmul_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)v185.i8)));
            *(float32x4_t *)(v172 + 64) = vmulq_n_f32(v83, vmul_f32(*(float32x2_t *)v185.i8, vrsqrts_f32((float32x2_t)v186, vmul_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)v185.i8))).f32[0]);
            v187 = (float32x4_t)vzip2q_s32(v128, v129);
            v187.i32[2] = v131.i32[2];
            v188 = (int32x4_t)vmulq_f32(v187, v187);
            v187.i32[3] = v130.i32[2];
            v189 = *(_OWORD *)(a1 + 96 * v125 + 5712);
            v190 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v188, 2), vadd_f32(*(float32x2_t *)v188.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1))).u32[0];
            *(float32x2_t *)v188.i8 = vrsqrte_f32((float32x2_t)v190);
            *(float32x2_t *)v188.i8 = vmul_f32(*(float32x2_t *)v188.i8, vrsqrts_f32((float32x2_t)v190, vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8)));
            *(float32x4_t *)(v172 + 64) = vmulq_n_f32(v187, vmul_f32(*(float32x2_t *)v188.i8, vrsqrts_f32((float32x2_t)v190, vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8))).f32[0]);
            *(_OWORD *)(v172 + 80) = v189;
            v191 = (int32x4_t *)(v92 + (v125 << 6));
            v192 = (float32x4_t *)(v92 + (v85 << 6));
            v193 = *v191;
            v194 = v191[1];
            v196 = v191[2];
            v195 = v191[3];
            v197 = *v192;
            v198 = v192[1];
            v200 = v192[2];
            v199 = v192[3];
            v201 = v199.f32[3];
            v202 = v199.f32[3] - v199.f32[0];
            LODWORD(v203) = HIDWORD(*(unsigned __int128 *)v191);
            LODWORD(v204) = HIDWORD(*(unsigned __int128 *)v192);
            v205 = v198.f32[3];
            v206 = v200.f32[3];
            if ((float)(*(float *)&v195.i32[3] - *(float *)v195.i32) >= (float)(v199.f32[3] - v199.f32[0]))
            {
              v202 = *(float *)&v195.i32[3] - *(float *)v195.i32;
              v207 = v200.f32[0];
              LODWORD(v208) = HIDWORD(*(_OWORD *)&v192[2]);
              v209 = v198.f32[0];
              LODWORD(v210) = HIDWORD(*(_OWORD *)&v192[1]);
              LODWORD(v211) = *(float32x4_t *)v192->f32;
              LODWORD(v212) = HIDWORD(*(unsigned __int128 *)v192);
              v200.i32[0] = v196.i32[0];
              LODWORD(v206) = HIDWORD(*(_OWORD *)&v191[2]);
              v198.i32[0] = v194.i32[0];
              LODWORD(v205) = HIDWORD(*(_OWORD *)&v191[1]);
              v197.i32[0] = (__int32)*v191;
              LODWORD(v204) = HIDWORD(*(unsigned __int128 *)v191);
            }
            else
            {
              v199.i32[0] = v195.i32[0];
              LODWORD(v201) = HIDWORD(*(_OWORD *)&v191[3]);
              v207 = *(float *)v196.i32;
              LODWORD(v208) = HIDWORD(*(_OWORD *)&v191[2]);
              v209 = *(float *)v194.i32;
              LODWORD(v210) = HIDWORD(*(_OWORD *)&v191[1]);
              LODWORD(v211) = *v191;
              LODWORD(v212) = HIDWORD(*(unsigned __int128 *)v191);
            }
            v213 = a1 + 96 * v125;
            v197.f32[0] = v204 - v197.f32[0];
            v197.f32[1] = v205 - v198.f32[0];
            v197.f32[2] = v206 - v200.f32[0];
            v214 = vmulq_f32(v197, v197);
            v197.f32[3] = v202;
            v215 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v214, 2), vadd_f32(*(float32x2_t *)v214.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v214.f32, 1))).u32[0];
            *(float32x2_t *)v214.f32 = vrsqrte_f32((float32x2_t)v215);
            *(float32x2_t *)v214.f32 = vmul_f32(*(float32x2_t *)v214.f32, vrsqrts_f32((float32x2_t)v215, vmul_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32)));
            LODWORD(v216) = vmul_f32(*(float32x2_t *)v214.f32, vrsqrts_f32((float32x2_t)v215, vmul_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32))).u32[0];
            v214.f32[0] = v211 + v212;
            v214.f32[1] = v209 + v210;
            v214.f32[2] = v207 + v208;
            v217 = v199.f32[0] + v201;
            v218 = (int32x4_t)vmulq_f32(v214, v214);
            v214.f32[3] = v217;
            v219 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v218, 2), vadd_f32(*(float32x2_t *)v218.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v218.i8, 1))).u32[0];
            v220 = vrsqrte_f32((float32x2_t)v219);
            v221 = vmul_f32(v220, vrsqrts_f32((float32x2_t)v219, vmul_f32(v220, v220)));
            v222 = vmulq_n_f32(v214, vmul_f32(v221, vrsqrts_f32((float32x2_t)v219, vmul_f32(v221, v221))).f32[0]);
            *(float32x4_t *)(v213 + 16) = vmulq_n_f32(v197, v216);
            *(float32x4_t *)(v213 + 32) = v222;
            v213 += 16;
            v222.f32[0] = *(float *)&v203 + *(float *)&v193.i32[1];
            v222.f32[1] = *(float *)&v194.i32[3] + *(float *)&v194.i32[1];
            v222.f32[2] = *(float *)&v196.i32[3] + *(float *)&v196.i32[1];
            v223 = (int32x4_t)vmulq_f32(v222, v222);
            v222.f32[3] = *(float *)&v195.i32[3] + *(float *)&v195.i32[1];
            v218.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v223, 2), vadd_f32(*(float32x2_t *)v223.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v223.i8, 1))).u32[0];
            *(float32x2_t *)v223.i8 = vrsqrte_f32((float32x2_t)v218.u32[0]);
            *(float32x2_t *)v223.i8 = vmul_f32(*(float32x2_t *)v223.i8, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v223.i8, *(float32x2_t *)v223.i8)));
            v184.f32[0] = *(float *)&v203 - *(float *)&v193.i32[1];
            v184.f32[1] = *(float *)&v194.i32[3] - *(float *)&v194.i32[1];
            v184.f32[2] = *(float *)&v196.i32[3] - *(float *)&v196.i32[1];
            v15 = vmulq_f32(v184, v184);
            v184.f32[3] = *(float *)&v195.i32[3] - *(float *)&v195.i32[1];
            v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
            v82 = vmulq_n_f32(v222, vmul_f32(*(float32x2_t *)v223.i8, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v223.i8, *(float32x2_t *)v223.i8))).f32[0]);
            v218.i32[0] = vadd_f32(*(float32x2_t *)v16.f32, vadd_f32(*(float32x2_t *)v15.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1))).u32[0];
            *(float32x2_t *)v15.f32 = vrsqrte_f32((float32x2_t)v218.u32[0]);
            *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)v15.f32, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32)));
            *(float32x4_t *)(v213 + 32) = v82;
            *(float32x4_t *)(v213 + 48) = vmulq_n_f32(v184, vmul_f32(*(float32x2_t *)v15.f32, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32))).f32[0]);
            v83.f32[0] = *(float *)&v203 - *(float *)&v193.i32[2];
            v83.f32[1] = *(float *)&v194.i32[3] - *(float *)&v194.i32[2];
            v83.f32[2] = *(float *)&v196.i32[3] - *(float *)&v196.i32[2];
            v224 = (int32x4_t)vmulq_f32(v83, v83);
            v83.f32[3] = *(float *)&v195.i32[3] - *(float *)&v195.i32[2];
            v225 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v224, 2), vadd_f32(*(float32x2_t *)v224.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.i8, 1))).u32[0];
            *(float32x2_t *)v224.i8 = vrsqrte_f32((float32x2_t)v225);
            *(float32x2_t *)v224.i8 = vmul_f32(*(float32x2_t *)v224.i8, vrsqrts_f32((float32x2_t)v225, vmul_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v224.i8)));
            v55 = vmulq_n_f32(v83, vmul_f32(*(float32x2_t *)v224.i8, vrsqrts_f32((float32x2_t)v225, vmul_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v224.i8))).f32[0]);
            *(float32x4_t *)(v213 + 64) = v55;
            v226 = (float32x4_t)vzip2q_s32(v193, v194);
            v226.i32[2] = v196.i32[2];
            v227 = *(_OWORD *)(v213 + 64);
            v228 = (int32x4_t)vmulq_f32(v226, v226);
            v226.i32[3] = v195.i32[2];
            v229 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v228, 2), vadd_f32(*(float32x2_t *)v228.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.i8, 1))).u32[0];
            *(float32x2_t *)v228.i8 = vrsqrte_f32((float32x2_t)v229);
            *(float32x2_t *)v228.i8 = vmul_f32(*(float32x2_t *)v228.i8, vrsqrts_f32((float32x2_t)v229, vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8)));
            *(float32x4_t *)(v213 + 64) = vmulq_n_f32(v226, vmul_f32(*(float32x2_t *)v228.i8, vrsqrts_f32((float32x2_t)v229, vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8))).f32[0]);
            *(_OWORD *)(v213 + 80) = v227;
          }
        }
        else
        {
          v146 = (int32x4_t *)(a1 + (v85 << 6));
          v147 = v146[289];
          v148 = v146[290];
          v149 = v146[291];
          v150 = v146[292];
          v82.f32[0] = *(float *)&v147.i32[3] - *(float *)v147.i32;
          v82.f32[1] = *(float *)&v148.i32[3] - *(float *)v148.i32;
          v82.f32[2] = *(float *)&v149.i32[3] - *(float *)v149.i32;
          v151 = (int32x4_t)vmulq_f32(v82, v82);
          v82.f32[3] = *(float *)&v150.i32[3] - *(float *)v150.i32;
          v15.f32[0] = *(float *)&v147.i32[3] + *(float *)v147.i32;
          v15.f32[1] = *(float *)&v148.i32[3] + *(float *)v148.i32;
          v15.f32[2] = *(float *)&v149.i32[3] + *(float *)v149.i32;
          v152 = (int32x4_t)vmulq_f32(v15, v15);
          v15.f32[3] = *(float *)&v150.i32[3] + *(float *)v150.i32;
          v17.i32[0] = HIDWORD(v146[289].i64[0]);
          v16.f32[0] = *(float *)&v147.i32[3] + v17.f32[0];
          LODWORD(v153) = HIDWORD(v146[290].i64[0]);
          LODWORD(v154) = HIDWORD(v146[291].i64[0]);
          LODWORD(v155) = HIDWORD(v146[292].i64[0]);
          v16.f32[1] = *(float *)&v148.i32[3] + v153;
          v16.f32[2] = *(float *)&v149.i32[3] + v154;
          v156 = (int32x4_t)vmulq_f32(v16, v16);
          v16.f32[3] = *(float *)&v150.i32[3] + v155;
          v17.f32[0] = *(float *)&v147.i32[3] - v17.f32[0];
          v17.f32[1] = *(float *)&v148.i32[3] - v153;
          v17.f32[2] = *(float *)&v149.i32[3] - v154;
          v157 = (int32x4_t)vmulq_f32(v17, v17);
          v17.f32[3] = *(float *)&v150.i32[3] - v155;
          v158 = (float32x4_t *)(a1 + 96 * v85);
          v55.f32[0] = *(float *)&v147.i32[3] - *(float *)&v147.i32[2];
          v55.f32[1] = *(float *)&v148.i32[3] - *(float *)&v148.i32[2];
          v55.f32[2] = *(float *)&v149.i32[3] - *(float *)&v149.i32[2];
          v159 = (int32x4_t)vmulq_f32(v55, v55);
          v55.f32[3] = *(float *)&v150.i32[3] - *(float *)&v150.i32[2];
          v160 = (float32x4_t)vzip2q_s32(v147, v148);
          v160.i32[2] = v149.i32[2];
          v161 = (int32x4_t)vmulq_f32(v160, v160);
          v160.i32[3] = v150.i32[2];
          v150.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v151, 2), vadd_f32(*(float32x2_t *)v151.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.i8, 1))).u32[0];
          *(float32x2_t *)v149.i8 = vrsqrte_f32((float32x2_t)v150.u32[0]);
          *(float32x2_t *)v149.i8 = vmul_f32(*(float32x2_t *)v149.i8, vrsqrts_f32((float32x2_t)v150.u32[0], vmul_f32(*(float32x2_t *)v149.i8, *(float32x2_t *)v149.i8)));
          v162 = vmulq_n_f32(v82, vmul_f32(*(float32x2_t *)v149.i8, vrsqrts_f32((float32x2_t)v150.u32[0], vmul_f32(*(float32x2_t *)v149.i8, *(float32x2_t *)v149.i8))).f32[0]);
          v149.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v152, 2), vadd_f32(*(float32x2_t *)v152.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v152.i8, 1))).u32[0];
          v163 = vrsqrte_f32((float32x2_t)v149.u32[0]);
          v164 = vmul_f32(v163, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(v163, v163)));
          v165 = vmulq_n_f32(v15, vmul_f32(v164, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(v164, v164))).f32[0]);
          v164.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v156, 2), vadd_f32(*(float32x2_t *)v156.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v156.i8, 1))).u32[0];
          v166 = vrsqrte_f32((float32x2_t)v164.u32[0]);
          v167 = vmul_f32(v166, vrsqrts_f32((float32x2_t)v164.u32[0], vmul_f32(v166, v166)));
          v83 = vmulq_n_f32(v16, vmul_f32(v167, vrsqrts_f32((float32x2_t)v164.u32[0], vmul_f32(v167, v167))).f32[0]);
          v167.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v157, 2), vadd_f32(*(float32x2_t *)v157.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v157.i8, 1))).u32[0];
          v168 = vrsqrte_f32((float32x2_t)v167.u32[0]);
          v169 = vmul_f32(v168, vrsqrts_f32((float32x2_t)v167.u32[0], vmul_f32(v168, v168)));
          v170 = vmulq_n_f32(v17, vmul_f32(v169, vrsqrts_f32((float32x2_t)v167.u32[0], vmul_f32(v169, v169))).f32[0]);
          v82 = (float32x4_t)vdupq_laneq_s32(v161, 2);
          v161.i32[0] = vadd_f32(*(float32x2_t *)v82.f32, vadd_f32(*(float32x2_t *)v161.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.i8, 1))).u32[0];
          *(float32x2_t *)v82.f32 = vrsqrte_f32((float32x2_t)v161.u32[0]);
          *(float32x2_t *)v82.f32 = vmul_f32(*(float32x2_t *)v82.f32, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32)));
          v171 = vmulq_n_f32(v160, vmul_f32(*(float32x2_t *)v82.f32, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32))).f32[0]);
          v161.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v159, 2), vadd_f32(*(float32x2_t *)v159.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.i8, 1))).u32[0];
          *(float32x2_t *)v159.i8 = vrsqrte_f32((float32x2_t)v161.u32[0]);
          *(float32x2_t *)v159.i8 = vmul_f32(*(float32x2_t *)v159.i8, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8)));
          v158[1] = v162;
          v158[2] = v165;
          v158[3] = v83;
          v158[4] = v170;
          v158[5] = v171;
          v158[6] = vmulq_n_f32(v55, vmul_f32(*(float32x2_t *)v159.i8, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8))).f32[0]);
        }
        ++v85;
      }
      while (v85 < *v5);
    }
  }
}

void sub_1B19D4018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v9;
  simd_float4 v10;
  unint64_t v11;
  unint64_t v12;
  simd_float4 *v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4 *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  unint64_t v23;
  simd_float4x4 v24;
  simd_float4 *v25;
  simd_float4 v26;
  simd_float4 v27;
  simd_float4 v28;
  simd_float4 v29;
  simd_float4 *v30;
  simd_float4 v31;
  simd_float4 v32;
  simd_float4 v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  simd_float4 v38;
  simd_float4 v39;
  simd_float4 v40;
  simd_float4 v41;
  simd_float4x4 v42;
  simd_float4x4 v43;

  v9 = (unsigned __int8 *)(a1 + 12560);
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  sub_1B17B3920(*(__n128 **)(a1 + 12640), a2, (uint64_t)&v34, a4, a5, a6, a7, a8);
  v10 = 0uLL;
  if (*v9)
  {
    v11 = 0;
    do
    {
      v12 = 0;
      v13 = (simd_float4 *)(a1 + (v11 << 6));
      v14 = v13[449];
      v15 = v13[450];
      v16 = v13[451];
      v17 = v13[452];
      v18 = v13 + 449;
      v19 = v34;
      v20 = v35;
      v21 = v36;
      v22 = v37;
      v38 = v14;
      v39 = v15;
      v40 = v16;
      v41 = v17;
      v42.columns[0] = v10;
      v42.columns[1] = v10;
      v42.columns[2] = v10;
      v42.columns[3] = v10;
      do
      {
        v42.columns[v12 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v12 * 4))), v20, *(float32x2_t *)&v38.f32[v12], 1), v21, *(float32x4_t *)((char *)&v38 + v12 * 4), 2), v22, *(float32x4_t *)((char *)&v38 + v12 * 4), 3);
        v12 += 4;
      }
      while (v12 != 16);
      v23 = 0;
      v24 = v42;
      *v18 = v42.columns[0];
      v18[1] = v24.columns[1];
      v18[2] = v24.columns[2];
      v18[3] = v24.columns[3];
      v25 = (simd_float4 *)(a1 + (v11 << 6));
      v26 = v25[97];
      v27 = v25[98];
      v28 = v25[99];
      v29 = v25[100];
      v30 = v25 + 97;
      v38 = v26;
      v39 = v27;
      v40 = v28;
      v41 = v29;
      v42.columns[0] = v10;
      v42.columns[1] = v10;
      v42.columns[2] = v10;
      v42.columns[3] = v10;
      do
      {
        v42.columns[v23 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v23 * 4))), v20, *(float32x2_t *)&v38.f32[v23], 1), v21, *(float32x4_t *)((char *)&v38 + v23 * 4), 2), v22, *(float32x4_t *)((char *)&v38 + v23 * 4), 3);
        v23 += 4;
      }
      while (v23 != 16);
      v31 = v42.columns[1];
      v32 = v42.columns[2];
      v33 = v42.columns[3];
      *v30 = v42.columns[0];
      v30[1] = v31;
      v30[2] = v32;
      v30[3] = v33;
      if (v9[53])
      {
        v43 = __invert_f4(v24);
        v10 = 0uLL;
        *(simd_float4x4 *)(a1 + (v11 << 6) + 8208) = v43;
      }
      ++v11;
    }
    while (v11 < *v9);
  }
}

void sub_1B19D418C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  __n128 *v17;
  __n128 v18;
  __n128 v19;

  v19.n128_u32[2] = 0;
  v19.n128_u64[0] = 0;
  sub_1B187AD68(*(__n128 **)(a1 + 12640), &v19, a3, a4, a5, a6, a7, a8);
  v18 = 0uLL;
  sub_1B17B3860(a2, (float32x4_t *)&v19, &v18, v10, v11, v12, v13, v14);
  v15 = *(unsigned __int8 *)(a1 + 12560);
  if (*(_BYTE *)(a1 + 12560))
  {
    v16 = v18;
    v17 = (__n128 *)(a1 + 96);
    do
    {
      *v17 = v16;
      v17 += 6;
      --v15;
    }
    while (v15);
  }
}

void sub_1B19D41FC(uint64_t a1)
{
  os_signpost_id_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  int i;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  NSObject *v43;
  _QWORD v44[6];
  uint8_t buf[16];
  __int128 v46;
  uint64_t v47;

  v2 = sub_1B18137DC(*(_QWORD *)(a1 + 12648));
  v3 = sub_1B17C439C();
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    v11 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Culling", "", buf, 2u);
    }
  }
  v12 = sub_1B1813794(*(_QWORD *)(a1 + 12648), v4, v5, v6, v7, v8, v9, v10);
  v13 = CACurrentMediaTime();
  prof_beginFlame((uint64_t)"Culling", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXCullingContext.c", 712);
  v14 = *(_QWORD *)(a1 + 12584);
  v22 = sub_1B187A934(*(_QWORD *)(a1 + 12640), v15, v16, v17, v18, v19, v20, v21);
  if (sub_1B19D30F4((_BYTE *)a1, v23, v24, v25, v26, v27, v28, v29))
  {
    v37 = 0;
    v38 = (unsigned __int8 *)(a1 + 12562);
    do
    {
      if (*(_BYTE *)(a1 + 12610))
      {
        if (v14 == v22)
        {
          for (i = 0; i != 4; ++i)
          {
            if (((*v38 >> i) & 1) != 0)
            {
              v40 = sub_1B187BF48(*(_QWORD *)(a1 + 12640), i, v31, v32, v33, v34, v35, v36);
              if (v40)
                sub_1B19D2670((float32x4_t *)a1, v37, v40, v32, v33, v34, v35, v36);
            }
          }
        }
        else
        {
          sub_1B19D2670((float32x4_t *)a1, 0, *(_QWORD *)(a1 + 12584), v32, v33, v34, v35, v36);
        }
      }
      else if (v14 == v22)
      {
        v41 = sub_1B187B260(*(_QWORD *)(a1 + 12640), v30, v31, v32, v33, v34, v35, v36);
        v47 = 0;
        *(_OWORD *)buf = 0u;
        v46 = 0u;
        v44[0] = MEMORY[0x1E0C809B0];
        v44[1] = 0x40000000;
        v44[2] = sub_1B19D4488;
        v44[3] = &unk_1E63DACF0;
        v44[4] = a1;
        v44[5] = v37;
        sub_1B197CAD0((uint64_t)v44, (uint64_t)buf);
        *(_OWORD *)buf = *(_OWORD *)(a1 + 12616);
        DWORD1(v46) = 2;
        if (*(_BYTE *)(a1 + 12609))
          LODWORD(v46) = 4;
        DWORD2(v46) = *v38;
        sub_1B197D404(v41, a1 + 96 * v37 + 16);
      }
      else
      {
        sub_1B19D26F8((float32x4_t *)a1, 0, *(float32x4_t **)(a1 + 12584), v32, v33, v34, v35, v36);
      }
      ++v37;
    }
    while (v37 < sub_1B19D30F4((_BYTE *)a1, v30, v31, v32, v33, v34, v35, v36));
  }
  *(double *)(v12 + 104) = *(double *)(v12 + 104) + CACurrentMediaTime() - v13;
  prof_endFlame();
  v42 = sub_1B17C439C();
  if (v2 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    v43 = v42;
    if (os_signpost_enabled(v42))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B178D000, v43, OS_SIGNPOST_INTERVAL_END, v2, "Culling", "", buf, 2u);
    }
  }
}

