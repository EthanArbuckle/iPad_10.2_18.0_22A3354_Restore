double sub_1B1AF12B0()
{
  uint64_t *v0;

  return sub_1B1AAD36C(v0[2], v0[3], v0[4], &qword_1EEF59498, (uint64_t)&type metadata for AddressMode);
}

_QWORD *sub_1B1AF12DC(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF1308);
}

void sub_1B1AF1308()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59990)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, (uint64_t)&type metadata for AddressMode, (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59990);
  }
}

uint64_t sub_1B1AF136C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A88B04, a3);
}

_QWORD *sub_1B1AF139C(_QWORD *a1)
{
  return sub_1B1B01BF4(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF13C8);
}

void sub_1B1AF13C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59998)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59998);
  }
}

uint64_t sub_1B1AF142C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF599A0, (uint64_t)&type metadata for MotionDistribution, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A88C10, a3);
}

double sub_1B1AF145C()
{
  uint64_t *v0;

  return sub_1B1AAD524(v0[2], v0[3], v0[4], &qword_1EEF599A8, (uint64_t)&type metadata for MotionDistribution);
}

_QWORD *sub_1B1AF1488(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF14B4);
}

void sub_1B1AF14B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF599B0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, (uint64_t)&type metadata for MotionDistribution, (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF599B0);
  }
}

__n128 *sub_1B1AF1518(__n128 *a1, __n128 *a2)
{
  initializeWithCopy for ShapeDistribution(a2, a1);
  return a2;
}

uint64_t sub_1B1AF1554@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AF157C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A88D1C, a3);
}

void sub_1B1AF157C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EEF599B8)
  {
    sub_1B1A02758(255, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for EntityValueAccessors(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEF599B8);
  }
}

double sub_1B1AF15E8()
{
  uint64_t *v0;

  return sub_1B1AAD2EC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1AF15F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  __int128 v9;
  char v10;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(_OWORD *)(a1 + 32);
    v7 = *(_BYTE *)(a1 + 48);
  }
  else
  {
    v6 = 0uLL;
    v7 = -2;
  }
  v9 = v6;
  v10 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(v4 + 16))(v3, v5, &v9);
}

void sub_1B1AF1650()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF599C0)
  {
    sub_1B1A02758(255, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF599C0);
  }
}

_QWORD *sub_1B1AF16BC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A7556C(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B1AF16E0()
{
  return swift_setAtWritableKeyPath();
}

void sub_1B1AF1724(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF599C8)
  {
    sub_1B1A02758(255, &qword_1ED4B8010, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for EmitterShape, v2, (uint64_t)&off_1E63752C8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF599C8);
  }
}

uint64_t sub_1B1AF17A0()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1AF17C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A88E10, a3);
}

_QWORD *sub_1B1AF17EC(_QWORD *a1)
{
  return sub_1B1AE0D84(a1, (uint64_t)sub_1B1AE0BB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF1820);
}

void sub_1B1AF1820(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF599D0)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for EmitterShape, v2, (uint64_t)&off_1E63752C8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF599D0);
  }
}

uint64_t sub_1B1AF18A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF599D8, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A88F04, a3);
}

uint64_t sub_1B1AF18D4()
{
  uint64_t *v0;

  return sub_1B1AAD3FC(v0[2], v0[3], v0[4], (unint64_t *)&unk_1ED4BACC8, (uint64_t)&type metadata for EmitterShape.Direction);
}

_QWORD *sub_1B1AF1904(_QWORD *a1)
{
  return sub_1B1AF1F34(a1, (void (*)(__int128 *))sub_1B1AF1930, (uint64_t (*)(_QWORD))sub_1B1AF1944);
}

uint64_t sub_1B1AF1930()
{
  return sub_1B1AF16E0();
}

void sub_1B1AF1944()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF599E0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, (uint64_t)&type metadata for EmitterShape.Direction, (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF599E0);
  }
}

uint64_t sub_1B1AF19A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89010, a3);
}

_QWORD *sub_1B1AF19D8(_QWORD *a1)
{
  return sub_1B1B01E78(a1, (uint64_t)sub_1B1ADFFBC, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF1A04);
}

void sub_1B1AF1A04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF599E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF599E8);
  }
}

uint64_t sub_1B1AF1A68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8911C, a3);
}

_QWORD *sub_1B1AF1A98(_QWORD *a1)
{
  return sub_1B1B02578(a1, (uint64_t)sub_1B1ADF784, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF1AC4);
}

void sub_1B1AF1AC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF599F0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF599F0);
  }
}

uint64_t sub_1B1AF1B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AF1B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89228, a3);
}

void sub_1B1AF1B50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EEF599F8)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v5 = type metadata accessor for EntityValueAccessors(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEF599F8);
  }
}

double sub_1B1AF1BC4()
{
  uint64_t *v0;

  return sub_1B1AAE898(v0[2], v0[3], v0[4], (void (*)(_QWORD))sub_1B1AF1C38);
}

uint64_t sub_1B1AF1BE8(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = a1[2];
  if (v6)
  {
    v6 = a1[4];
    v7 = a1[5];
  }
  else
  {
    v7 = 0;
  }
  v9[0] = v6;
  v9[1] = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *))(v4 + 16))(v3, v5, v9);
}

void sub_1B1AF1C38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A00)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A00);
  }
}

_QWORD *sub_1B1AF1CAC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A759E8(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(__n128 *)*(_QWORD *)(v1 + 16));
}

void sub_1B1AF1CCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59A08)
  {
    sub_1B19F8E54(255, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for EmitterShape, v2, (uint64_t)&off_1E63752C8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59A08);
  }
}

double sub_1B1AF1D50(uint32x4_t a1)
{
  a1.i32[3] = 0;
  a1.i64[0] = vmaxq_u32(a1, (uint32x4_t)xmmword_1B226E590).u64[0];
  return *(double *)a1.i64;
}

uint64_t sub_1B1AF1D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59A10, (uint64_t)&type metadata for EmissionOrder, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8931C, a3);
}

double sub_1B1AF1D94()
{
  uint64_t *v0;

  return sub_1B1AAD36C(v0[2], v0[3], v0[4], &qword_1EEF59A18, (uint64_t)&type metadata for EmissionOrder);
}

_QWORD *sub_1B1AF1DC0(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF1DEC);
}

void sub_1B1AF1DEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A20)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, (uint64_t)&type metadata for EmissionOrder, (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A20);
  }
}

uint64_t sub_1B1AF1E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59A28, (uint64_t)&type metadata for ShapeDistribution, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89428, a3);
}

uint64_t sub_1B1AF1E80()
{
  uint64_t *v0;

  return sub_1B1AAD3FC(v0[2], v0[3], v0[4], &qword_1ED4BADC8, (uint64_t)&type metadata for ShapeDistribution);
}

uint64_t sub_1B1AF1EAC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  __int128 v9;
  char v10;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(_OWORD *)(a1 + 32);
    v7 = *(_BYTE *)(a1 + 48);
  }
  else
  {
    v6 = 0uLL;
    v7 = -1;
  }
  v9 = v6;
  v10 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(v4 + 16))(v3, v5, &v9);
}

_QWORD *sub_1B1AF1F08(_QWORD *a1)
{
  return sub_1B1AF1F34(a1, (void (*)(__int128 *))sub_1B1AF1930, (uint64_t (*)(_QWORD))sub_1B1AF1F70);
}

_QWORD *sub_1B1AF1F34(_QWORD *a1, void (*a2)(__int128 *), uint64_t (*a3)(_QWORD))
{
  uint64_t v3;

  return sub_1B1A75B5C(a1, **(_QWORD **)(v3 + 16), *(_QWORD *)(*(_QWORD *)(v3 + 16) + 8), *(unsigned __int8 *)(*(_QWORD *)(v3 + 16) + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a2, a3);
}

void sub_1B1AF1F70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A30)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, (uint64_t)&type metadata for ShapeDistribution, (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A30);
  }
}

uint64_t sub_1B1AF1FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89534, a3);
}

double sub_1B1AF1FFC()
{
  uint64_t *v0;

  return sub_1B1AADA0C(v0[2], v0[3], v0[4]);
}

_QWORD *sub_1B1AF2018(_QWORD *a1)
{
  return sub_1B1AF5A84(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF2044);
}

void sub_1B1AF2044(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59A38)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for EmitterShape, v2, (uint64_t)&off_1E63752C8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59A38);
  }
}

uint64_t sub_1B1AF20C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89628, a3);
}

_QWORD *sub_1B1AF20F8(_QWORD *a1)
{
  return sub_1B1B08044(a1, (uint64_t)sub_1B1ADFCB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF2124);
}

void sub_1B1AF2124()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A40)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A40);
  }
}

uint64_t sub_1B1AF2188(int *a1, uint64_t a2)
{
  initializeBufferWithCopyOfBuffer for QueryScope(a2, a1);
  return a2;
}

uint64_t sub_1B1AF21C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59A48, (uint64_t)&type metadata for EmitterShape.Shape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89734, a3);
}

double sub_1B1AF21F4()
{
  uint64_t *v0;

  return sub_1B1AADA80(v0[2], v0[3], v0[4], &qword_1ED4BACC0, (uint64_t)&type metadata for EmitterShape.Shape);
}

_QWORD *sub_1B1AF2220(_QWORD *a1)
{
  return sub_1B1AF0318(a1, (uint64_t)sub_1B1AE65D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF224C);
}

void sub_1B1AF224C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A50)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, (uint64_t)&type metadata for EmitterShape.Shape, (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A50);
  }
}

uint64_t sub_1B1AF22B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89840, a3);
}

_QWORD *sub_1B1AF22E0(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADFE94, (void (*)(unint64_t, uint64_t, double))sub_1B1A726E8, (uint64_t (*)(_QWORD))sub_1B1AF230C);
}

void sub_1B1AF230C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A58)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for EmitterShape, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63752C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A58);
  }
}

uint64_t sub_1B1AF2370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&off_1E638F1F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AF23A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF29B0);
}

uint64_t sub_1B1AF23C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&off_1E638F1F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AF23F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF28C8);
}

uint64_t sub_1B1AF2410@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&off_1E638F1F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF2440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF2808);
}

uint64_t sub_1B1AF2460@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&off_1E638F1F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF2490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF2740);
}

uint64_t sub_1B1AF24B0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 29);
  return result;
}

uint64_t sub_1B1AF24BC(uint64_t *a1)
{
  return sub_1B1A48000(*a1);
}

uint64_t sub_1B1AF24E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&off_1E638F1F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF2510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF2678);
}

uint64_t sub_1B1AF2530@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&off_1E638F1F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81A18, a2);
}

uint64_t sub_1B1AF2560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF25B0);
}

uint64_t sub_1B1AF2580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF599A0, (uint64_t)&type metadata for MotionDistribution, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A90FA0, a3);
}

_QWORD *sub_1B1AF25B0(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBE6A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AF25E4);
}

void sub_1B1AF25E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A60)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&type metadata for MotionDistribution, (uint64_t)&off_1E638F1F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A60);
  }
}

uint64_t sub_1B1AF2648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A910AC, a3);
}

_QWORD *sub_1B1AF2678(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EBE6A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AF26AC);
}

void sub_1B1AF26AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A68)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointCacheEmitter, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E638F1F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A68);
  }
}

uint64_t sub_1B1AF2710@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A911B8, a3);
}

_QWORD *sub_1B1AF2740(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBE6A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AF2774);
}

void sub_1B1AF2774()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A70)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointCacheEmitter, MEMORY[0x1E0DEB188], (uint64_t)&off_1E638F1F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A70);
  }
}

uint64_t sub_1B1AF27D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A912C4, a3);
}

_QWORD *sub_1B1AF2808(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBE6A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AF283C);
}

void sub_1B1AF283C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A78)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointCacheEmitter, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E638F1F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A78);
  }
}

uint64_t sub_1B1AF28A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A913D0, a3);
}

_QWORD *sub_1B1AF28C8(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EBE6A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AF28FC);
}

void sub_1B1AF28FC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59A80)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for PointCacheEmitter, v2, (uint64_t)&off_1E638F1F0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59A80);
  }
}

uint64_t sub_1B1AF2980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A914C4, a3);
}

_QWORD *sub_1B1AF29B0(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EBE6A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AF29E4);
}

void sub_1B1AF29E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A88)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointCacheEmitter, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E638F1F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A88);
  }
}

uint64_t sub_1B1AF2A48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for PointCacheSpawner, (uint64_t)&off_1E638F6B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AF2A78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF2BE0);
}

uint64_t sub_1B1AF2A98@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for PointCacheSpawner, (uint64_t)&off_1E638F6B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF2AC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF2B18);
}

uint64_t sub_1B1AF2AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A915D0, a3);
}

_QWORD *sub_1B1AF2B18(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EBE7F0, (void (*)(unint64_t, uint64_t, double))sub_1B1A734B4, (uint64_t (*)(_QWORD))sub_1B1AF2B4C);
}

void sub_1B1AF2B4C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A90)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointCacheSpawner, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E638F6B8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A90);
  }
}

uint64_t sub_1B1AF2BB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A916DC, a3);
}

_QWORD *sub_1B1AF2BE0(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EBE7F0, (void (*)(unint64_t, uint64_t, double))sub_1B1A734B4, (uint64_t (*)(_QWORD))sub_1B1AF2C14);
}

void sub_1B1AF2C14()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59A98)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointCacheSpawner, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E638F6B8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59A98);
  }
}

uint64_t sub_1B1AF2C78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleTargetFromPositionInit, (uint64_t)&off_1E63B5C68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AF2CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF2CF0);
}

uint64_t sub_1B1AF2CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7464, a3);
}

_QWORD *sub_1B1AF2CF0(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC3F8C, (void (*)(unint64_t, uint64_t, double))sub_1B1A7380C, (uint64_t (*)(_QWORD))sub_1B1AF2D24);
}

void sub_1B1AF2D24(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59AA0)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleTargetFromPositionInit, v2, (uint64_t)&off_1E63B5C68);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59AA0);
  }
}

char *sub_1B1AF2DA8@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AF2DB4(uint64_t *a1)
{
  return sub_1B1A25580(*a1);
}

uint64_t sub_1B1AF2DD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverLife, (uint64_t)&off_1E63A42E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF2E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF32B4);
}

uint64_t sub_1B1AF2E28@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverLife, (uint64_t)&off_1E63A42E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83CB8, a2);
}

uint64_t sub_1B1AF2E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF31EC);
}

uint64_t sub_1B1AF2E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleColorOverLife, (uint64_t)&off_1E63A42E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF2EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3124);
}

uint64_t sub_1B1AF2EC8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB21BC(a1, v2, (uint64_t)&type metadata for ParticleColorOverLife, (uint64_t)&off_1E63A42E0, a2);
}

uint64_t sub_1B1AF2EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB13A0(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3058);
}

uint64_t sub_1B1AF2F10@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverLife, (uint64_t)&off_1E63A42E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF2F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF2F90);
}

uint64_t sub_1B1AF2F60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B27C, a3);
}

_QWORD *sub_1B1AF2F90(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC0FF8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF2FC4);
}

void sub_1B1AF2FC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AA8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverLife, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A42E0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AA8);
  }
}

uint64_t sub_1B1AF3028@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59330, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B388, a3);
}

uint64_t sub_1B1AF3058(uint64_t a1)
{
  return sub_1B1AF6C0C(a1, (uint64_t)sub_1B1AE6AB0, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EC0FF8, (uint64_t (*)(_QWORD))sub_1B1AF308C);
}

void sub_1B1AF308C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AB0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverLife, (uint64_t)&type metadata for ColorRamp, (uint64_t)&off_1E63A42E0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AB0);
  }
}

uint64_t sub_1B1AF30F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B494, a3);
}

_QWORD *sub_1B1AF3124(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC0FF8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF3158);
}

void sub_1B1AF3158()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AB8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverLife, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A42E0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AB8);
  }
}

uint64_t sub_1B1AF31BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598B8, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B5A0, a3);
}

_QWORD *sub_1B1AF31EC(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC0FF8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF3220);
}

void sub_1B1AF3220()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AC0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverLife, (uint64_t)&type metadata for Composition.Operation, (uint64_t)&off_1E63A42E0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AC0);
  }
}

uint64_t sub_1B1AF3284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B6AC, a3);
}

_QWORD *sub_1B1AF32B4(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC0FF8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF32E8);
}

void sub_1B1AF32E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AC8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverLife, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63A42E0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AC8);
  }
}

char *sub_1B1AF334C@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AF3358(uint64_t *a1)
{
  return sub_1B1A25580(*a1);
}

uint64_t sub_1B1AF337C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&off_1E639DD88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF33AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF38B0);
}

uint64_t sub_1B1AF33CC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&off_1E639DD88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83CB8, a2);
}

uint64_t sub_1B1AF33FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF37E8);
}

uint64_t sub_1B1AF341C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&off_1E639DD88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF344C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3700);
}

uint64_t sub_1B1AF346C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 8);
  return result;
}

uint64_t sub_1B1AF3478(uint64_t *a1)
{
  return sub_1B1A49BE8(*a1);
}

uint64_t sub_1B1AF349C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&off_1E639DD88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83744, a2);
}

uint64_t sub_1B1AF34CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3638);
}

uint64_t sub_1B1AF34EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB22E4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&off_1E639DD88, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82B98, a2);
}

uint64_t sub_1B1AF351C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1D44(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3564);
}

uint64_t sub_1B1AF353C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE6C1C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99698, a3);
}

uint64_t sub_1B1AF3564(uint64_t a1)
{
  return sub_1B1B06F84(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7F94C);
}

void sub_1B1AF3580(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59AD0)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleSizeOverLife, v2, (uint64_t)&off_1E639DD88);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59AD0);
  }
}

uint64_t sub_1B1AF3608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598F0, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9978C, a3);
}

_QWORD *sub_1B1AF3638(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC08AC, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AF366C);
}

void sub_1B1AF366C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AD8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&type metadata for ScaleMode, (uint64_t)&off_1E639DD88);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AD8);
  }
}

uint64_t sub_1B1AF36D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99898, a3);
}

_QWORD *sub_1B1AF3700(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC08AC, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AF3734);
}

void sub_1B1AF3734()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AE0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverLife, MEMORY[0x1E0DEB188], (uint64_t)&off_1E639DD88);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AE0);
  }
}

uint64_t sub_1B1AF3798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598B8, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A999A4, a3);
}

uint64_t sub_1B1AF37C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF37E8);
}

_QWORD *sub_1B1AF37E8(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC08AC, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AF381C);
}

void sub_1B1AF381C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AE8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverLife, (uint64_t)&type metadata for Composition.Operation, (uint64_t)&off_1E639DD88);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AE8);
  }
}

uint64_t sub_1B1AF3880@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99AB0, a3);
}

_QWORD *sub_1B1AF38B0(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC08AC, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AF38E4);
}

void sub_1B1AF38E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59AF0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverLife, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E639DD88);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59AF0);
  }
}

uint64_t sub_1B1AF3948@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB22E4(a1, v2, (uint64_t)&type metadata for ParticleOpacityOverLife, (uint64_t)&off_1E63AB9F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82B98, a2);
}

uint64_t sub_1B1AF3978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1D44(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF39C0);
}

uint64_t sub_1B1AF3998@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE6C1C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9FE10, a3);
}

uint64_t sub_1B1AF39C0(uint64_t a1)
{
  return sub_1B1AF39F4(a1, (uint64_t)sub_1B1B0D3E8, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EC1F04, (uint64_t (*)(_QWORD))sub_1B1AF3A50);
}

uint64_t sub_1B1AF39F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A7FE34(**(_QWORD **)(v4 + 16), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16), *(unsigned __int8 *)(*(_QWORD *)(v4 + 16) + 24), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a2, a3, a4);
}

void sub_1B1AF3A50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59AF8)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleOpacityOverLife, v2, (uint64_t)&off_1E63AB9F8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59AF8);
  }
}

char *sub_1B1AF3AD8@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AF3AE4(uint64_t *a1)
{
  return sub_1B1A25580(*a1);
}

uint64_t sub_1B1AF3B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverVelocity, (uint64_t)&off_1E63B0628, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF3B38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3FFC);
}

uint64_t sub_1B1AF3B58@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverVelocity, (uint64_t)&off_1E63B0628, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83CB8, a2);
}

uint64_t sub_1B1AF3B88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3F34);
}

uint64_t sub_1B1AF3BA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleColorOverVelocity, (uint64_t)&off_1E63B0628, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF3BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3E6C);
}

uint64_t sub_1B1AF3BF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverVelocity, (uint64_t)&off_1E63B0628, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AF3C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3D84);
}

uint64_t sub_1B1AF3C48@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB21BC(a1, v2, (uint64_t)&type metadata for ParticleColorOverVelocity, (uint64_t)&off_1E63B0628, a2);
}

uint64_t sub_1B1AF3C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB13A0(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF3CC0);
}

uint64_t sub_1B1AF3C90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59330, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA35A8, a3);
}

uint64_t sub_1B1AF3CC0(uint64_t a1)
{
  return sub_1B1AF6C0C(a1, (uint64_t)sub_1B1B0D3FC, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EC303C, (uint64_t (*)(_QWORD))sub_1B1AF3CF4);
}

void sub_1B1AF3CF4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B00)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverVelocity, (uint64_t)&type metadata for ColorRamp, (uint64_t)&off_1E63B0628);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B00);
  }
}

uint64_t sub_1B1AF3D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA36B4, a3);
}

_QWORD *sub_1B1AF3D84(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC303C, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF3DB8);
}

void sub_1B1AF3DB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59B08)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleColorOverVelocity, v2, (uint64_t)&off_1E63B0628);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59B08);
  }
}

uint64_t sub_1B1AF3E3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA37A8, a3);
}

_QWORD *sub_1B1AF3E6C(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC303C, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF3EA0);
}

void sub_1B1AF3EA0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B10)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverVelocity, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B0628);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B10);
  }
}

uint64_t sub_1B1AF3F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598B8, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA38B4, a3);
}

_QWORD *sub_1B1AF3F34(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC303C, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF3F68);
}

void sub_1B1AF3F68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B18)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverVelocity, (uint64_t)&type metadata for Composition.Operation, (uint64_t)&off_1E63B0628);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B18);
  }
}

uint64_t sub_1B1AF3FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA39C0, a3);
}

_QWORD *sub_1B1AF3FFC(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC303C, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF4030);
}

void sub_1B1AF4030()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B20)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverVelocity, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63B0628);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B20);
  }
}

uint64_t sub_1B1AF4094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleOpacityOverVelocity, (uint64_t)&off_1E63B3538, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AF40C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4228);
}

uint64_t sub_1B1AF40E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB22E4(a1, v2, (uint64_t)&type metadata for ParticleOpacityOverVelocity, (uint64_t)&off_1E63B3538, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82B98, a2);
}

uint64_t sub_1B1AF4114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1D44(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF415C);
}

uint64_t sub_1B1AF4134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE6C1C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5BBC, a3);
}

uint64_t sub_1B1AF415C(uint64_t a1)
{
  return sub_1B1B06F84(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A80198);
}

void sub_1B1AF4178(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59B28)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleOpacityOverVelocity, v2, (uint64_t)&off_1E63B3538);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59B28);
  }
}

uint64_t sub_1B1AF4200@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5CB0, a3);
}

_QWORD *sub_1B1AF4228(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC3874, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF425C);
}

void sub_1B1AF425C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59B30)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleOpacityOverVelocity, v2, (uint64_t)&off_1E63B3538);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59B30);
  }
}

uint64_t sub_1B1AF42E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for OrientationOverVelocity, (uint64_t)&off_1E63AB358, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF4310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF45DC);
}

uint64_t sub_1B1AF4330@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 4);
  return result;
}

_BYTE *sub_1B1AF433C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 4) = *result == 1;
  return result;
}

uint64_t sub_1B1AF4350@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for OrientationOverVelocity, (uint64_t)&off_1E63AB358, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF4380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4514);
}

uint64_t sub_1B1AF43A0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for OrientationOverVelocity, (uint64_t)&off_1E63AB358, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85D5C, a2);
}

uint64_t sub_1B1AF43D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF444C);
}

uint64_t sub_1B1AF43F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59B40, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F9E0, a3);
}

double sub_1B1AF4420()
{
  uint64_t *v0;

  return sub_1B1AAD1CC(v0[2], v0[3], v0[4], &qword_1EEF59B48, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis);
}

_QWORD *sub_1B1AF444C(_QWORD *a1)
{
  return sub_1B1AF737C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC1D54, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AF4480);
}

void sub_1B1AF4480()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B50)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for OrientationOverVelocity, (uint64_t)&type metadata for OrientationOverVelocity.DirectionAxis, (uint64_t)&off_1E63AB358);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B50);
  }
}

uint64_t sub_1B1AF44E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9FAEC, a3);
}

_QWORD *sub_1B1AF4514(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADFE94, (uint64_t)sub_1B1EC1D54, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AF4548);
}

void sub_1B1AF4548()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B58)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for OrientationOverVelocity, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63AB358);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B58);
  }
}

uint64_t sub_1B1AF45AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9FBF8, a3);
}

_QWORD *sub_1B1AF45DC(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC1D54, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AF4610);
}

void sub_1B1AF4610()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B60)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for OrientationOverVelocity, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AB358);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B60);
  }
}

char *sub_1B1AF4674@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AF4680(uint64_t *a1)
{
  return sub_1B1A25580(*a1);
}

uint64_t sub_1B1AF46A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&off_1E63AED48, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF46D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4BCC);
}

uint64_t sub_1B1AF46F4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&off_1E63AED48, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83CB8, a2);
}

uint64_t sub_1B1AF4724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4B04);
}

uint64_t sub_1B1AF4744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&off_1E63AED48, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF4774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4A3C);
}

uint64_t sub_1B1AF4794@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 8);
  return result;
}

uint64_t sub_1B1AF47A0(uint64_t *a1)
{
  return sub_1B1A49BE8(*a1);
}

uint64_t sub_1B1AF47C4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&off_1E63AED48, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83744, a2);
}

uint64_t sub_1B1AF47F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4974);
}

uint64_t sub_1B1AF4814@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&off_1E63AED48, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AF4844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF488C);
}

uint64_t sub_1B1AF4864@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2530, a3);
}

_QWORD *sub_1B1AF488C(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC2B28, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1AF48C0);
}

void sub_1B1AF48C0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59B68)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleSizeOverVelocity, v2, (uint64_t)&off_1E63AED48);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59B68);
  }
}

uint64_t sub_1B1AF4944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598F0, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2624, a3);
}

_QWORD *sub_1B1AF4974(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2B28, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1AF49A8);
}

void sub_1B1AF49A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B70)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&type metadata for ScaleMode, (uint64_t)&off_1E63AED48);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B70);
  }
}

uint64_t sub_1B1AF4A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2730, a3);
}

_QWORD *sub_1B1AF4A3C(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC2B28, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1AF4A70);
}

void sub_1B1AF4A70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B78)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverVelocity, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AED48);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B78);
  }
}

uint64_t sub_1B1AF4AD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598B8, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA283C, a3);
}

_QWORD *sub_1B1AF4B04(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2B28, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1AF4B38);
}

void sub_1B1AF4B38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B80)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverVelocity, (uint64_t)&type metadata for Composition.Operation, (uint64_t)&off_1E63AED48);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B80);
  }
}

uint64_t sub_1B1AF4B9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2948, a3);
}

_QWORD *sub_1B1AF4BCC(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC2B28, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1AF4C00);
}

void sub_1B1AF4C00()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B88)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverVelocity, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63AED48);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B88);
  }
}

uint64_t sub_1B1AF4C64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for WrapAroundCamera, (uint64_t)&off_1E638B408, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF4C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4DFC);
}

uint64_t sub_1B1AF4CB4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for WrapAroundCamera, (uint64_t)&off_1E638B408, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF4CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF4D34);
}

uint64_t sub_1B1AF4D04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8FB28, a3);
}

_QWORD *sub_1B1AF4D34(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBE118, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF4D68);
}

void sub_1B1AF4D68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B90)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for WrapAroundCamera, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E638B408);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B90);
  }
}

uint64_t sub_1B1AF4DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8FC34, a3);
}

_QWORD *sub_1B1AF4DFC(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBE118, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF4E30);
}

void sub_1B1AF4E30()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59B98)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for WrapAroundCamera, MEMORY[0x1E0DEB188], (uint64_t)&off_1E638B408);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59B98);
  }
}

char *sub_1B1AF4E94@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AF4EA0(uint64_t *a1)
{
  return sub_1B1A25580(*a1);
}

uint64_t sub_1B1AF4EC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&off_1E63ADE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF4EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5504);
}

uint64_t sub_1B1AF4F14@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&off_1E63ADE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83CB8, a2);
}

uint64_t sub_1B1AF4F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF543C);
}

uint64_t sub_1B1AF4F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&off_1E63ADE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF4F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5374);
}

uint64_t sub_1B1AF4FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&off_1E63ADE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AF4FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF52AC);
}

uint64_t sub_1B1AF5004@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 16);
  return result;
}

uint64_t sub_1B1AF5010(uint64_t *a1)
{
  return sub_1B1A428F0(*a1);
}

uint64_t sub_1B1AF5034@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&off_1E63ADE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81910, a2);
}

uint64_t sub_1B1AF5064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF51E4);
}

uint64_t sub_1B1AF5084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&off_1E63ADE10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1AF50B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF50FC);
}

uint64_t sub_1B1AF50D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1088, a3);
}

_QWORD *sub_1B1AF50FC(_QWORD *a1)
{
  return sub_1B1AE45C4(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC2588, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF5130);
}

void sub_1B1AF5130(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59BA0)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleColorOverTexture, v2, (uint64_t)&off_1E63ADE10);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59BA0);
  }
}

uint64_t sub_1B1AF51B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59490, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA117C, a3);
}

_QWORD *sub_1B1AF51E4(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2588, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF5218);
}

void sub_1B1AF5218()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BA8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&type metadata for AddressMode, (uint64_t)&off_1E63ADE10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BA8);
  }
}

uint64_t sub_1B1AF527C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1288, a3);
}

_QWORD *sub_1B1AF52AC(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC2588, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF52E0);
}

void sub_1B1AF52E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BB0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63ADE10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BB0);
  }
}

uint64_t sub_1B1AF5344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1394, a3);
}

_QWORD *sub_1B1AF5374(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC2588, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF53A8);
}

void sub_1B1AF53A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BB8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverTexture, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63ADE10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BB8);
  }
}

uint64_t sub_1B1AF540C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598B8, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA14A0, a3);
}

_QWORD *sub_1B1AF543C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2588, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF5470);
}

void sub_1B1AF5470()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BC0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverTexture, (uint64_t)&type metadata for Composition.Operation, (uint64_t)&off_1E63ADE10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BC0);
  }
}

uint64_t sub_1B1AF54D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA15AC, a3);
}

_QWORD *sub_1B1AF5504(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC2588, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF5538);
}

void sub_1B1AF5538()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BC8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverTexture, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63ADE10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BC8);
  }
}

uint64_t sub_1B1AF559C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 12);
  return result;
}

uint64_t sub_1B1AF55A8(uint64_t *a1)
{
  return sub_1B1A4D5CC(*a1);
}

uint64_t sub_1B1AF55CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF55FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6010);
}

uint64_t sub_1B1AF561C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83CB8, a2);
}

uint64_t sub_1B1AF564C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5F50);
}

uint64_t sub_1B1AF566C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF569C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5E90);
}

uint64_t sub_1B1AF56BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AF56EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5DD0);
}

uint64_t sub_1B1AF570C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 8);
  return result;
}

uint64_t sub_1B1AF5718(uint64_t *a1)
{
  return sub_1B1A4D5E4(*a1);
}

uint64_t sub_1B1AF573C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84480, a2);
}

uint64_t sub_1B1AF576C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5D10);
}

uint64_t sub_1B1AF578C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 9);
  return result;
}

uint64_t sub_1B1AF5798(uint64_t *a1)
{
  return sub_1B1A4D604(*a1);
}

uint64_t sub_1B1AF57BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81910, a2);
}

uint64_t sub_1B1AF57EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5C24);
}

uint64_t sub_1B1AF580C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 20);
  return result;
}

uint64_t sub_1B1AF5818(uint64_t *a1)
{
  return sub_1B1A4D61C(*a1);
}

uint64_t sub_1B1AF583C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83744, a2);
}

uint64_t sub_1B1AF586C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5B64);
}

uint64_t sub_1B1AF588C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AF58BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5A58);
}

uint64_t sub_1B1AF58DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&off_1E63AC1D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1AF590C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF5954);
}

uint64_t sub_1B1AF592C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9FFF8, a3);
}

_QWORD *sub_1B1AF5954(_QWORD *a1)
{
  return sub_1B1AF5980(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF59AC);
}

_QWORD *sub_1B1AF5980(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A79054(a1, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), **(double **)(v4 + 16), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1AF59AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59BD0)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleSizeOverTexture, v2, (uint64_t)&off_1E63AC1D0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59BD0);
  }
}

uint64_t sub_1B1AF5A30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA00EC, a3);
}

_QWORD *sub_1B1AF5A58(_QWORD *a1)
{
  return sub_1B1AF5A84(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF5AB0);
}

_QWORD *sub_1B1AF5A84(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A78230(a1, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), **(float **)(v4 + 16), *(float *)(*(_QWORD *)(v4 + 16) + 4), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1AF5AB0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59BD8)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleSizeOverTexture, v2, (uint64_t)&off_1E63AC1D0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59BD8);
  }
}

uint64_t sub_1B1AF5B34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598F0, (uint64_t)&type metadata for ScaleMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA01E0, a3);
}

_QWORD *sub_1B1AF5B64(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF5B90);
}

void sub_1B1AF5B90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BE0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&type metadata for ScaleMode, (uint64_t)&off_1E63AC1D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BE0);
  }
}

uint64_t sub_1B1AF5BF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59490, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA02EC, a3);
}

_QWORD *sub_1B1AF5C24(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF5C50);
}

void sub_1B1AF5C50()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BE8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&type metadata for AddressMode, (uint64_t)&off_1E63AC1D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BE8);
  }
}

uint64_t sub_1B1AF5CB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59770, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA03F8, a3);
}

double sub_1B1AF5CE4()
{
  uint64_t *v0;

  return sub_1B1AAD6E4(v0[2], v0[3], v0[4], &qword_1EEF59778, (uint64_t)&type metadata for TextureChannel);
}

_QWORD *sub_1B1AF5D10(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF5D3C);
}

void sub_1B1AF5D3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BF0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&type metadata for TextureChannel, (uint64_t)&off_1E63AC1D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BF0);
  }
}

uint64_t sub_1B1AF5DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0504, a3);
}

_QWORD *sub_1B1AF5DD0(_QWORD *a1)
{
  return sub_1B1B01BF4(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF5DFC);
}

void sub_1B1AF5DFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59BF8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63AC1D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59BF8);
  }
}

uint64_t sub_1B1AF5E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0610, a3);
}

_QWORD *sub_1B1AF5E90(_QWORD *a1)
{
  return sub_1B1B08044(a1, (uint64_t)sub_1B1ADFCB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF5EBC);
}

void sub_1B1AF5EBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C00)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverTexture, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AC1D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C00);
  }
}

uint64_t sub_1B1AF5F20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598B8, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA071C, a3);
}

_QWORD *sub_1B1AF5F50(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF5F7C);
}

void sub_1B1AF5F7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C08)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverTexture, (uint64_t)&type metadata for Composition.Operation, (uint64_t)&off_1E63AC1D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C08);
  }
}

uint64_t sub_1B1AF5FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0828, a3);
}

_QWORD *sub_1B1AF6010(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADFE94, (void (*)(unint64_t, uint64_t, double))sub_1B1A73358, (uint64_t (*)(_QWORD))sub_1B1AF603C);
}

void sub_1B1AF603C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C10)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSizeOverTexture, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63AC1D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C10);
  }
}

uint64_t sub_1B1AF60A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&off_1E63B3860, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AF60D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6840);
}

uint64_t sub_1B1AF60F0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 8);
  return result;
}

uint64_t sub_1B1AF60FC(uint64_t *a1)
{
  return sub_1B1A4D5E4(*a1);
}

uint64_t sub_1B1AF6120@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&off_1E63B3860, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF6150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6778);
}

uint64_t sub_1B1AF6170@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&off_1E63B3860, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84480, a2);
}

uint64_t sub_1B1AF61A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF66B0);
}

uint64_t sub_1B1AF61C0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 9);
  return result;
}

uint64_t sub_1B1AF61CC(uint64_t *a1)
{
  return sub_1B1A4D604(*a1);
}

uint64_t sub_1B1AF61F0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&off_1E63B3860, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81910, a2);
}

uint64_t sub_1B1AF6220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF65E8);
}

uint64_t sub_1B1AF6240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&off_1E63B3860, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AF6270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6500);
}

uint64_t sub_1B1AF6290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&off_1E63B3860, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1AF62C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6420);
}

uint64_t sub_1B1AF62E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&off_1E63B3860, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF6310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6360);
}

uint64_t sub_1B1AF6330@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5DA4, a3);
}

_QWORD *sub_1B1AF6360(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC3A14, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF6394);
}

void sub_1B1AF6394()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C18)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePositionOverTexture, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B3860);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C18);
  }
}

uint64_t sub_1B1AF63F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5EB0, a3);
}

_QWORD *sub_1B1AF6420(_QWORD *a1)
{
  return sub_1B1AE45C4(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC3A14, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF6454);
}

void sub_1B1AF6454(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59C20)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticlePositionOverTexture, v2, (uint64_t)&off_1E63B3860);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59C20);
  }
}

uint64_t sub_1B1AF64D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5FA4, a3);
}

_QWORD *sub_1B1AF6500(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC3A14, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF6534);
}

void sub_1B1AF6534(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59C28)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticlePositionOverTexture, v2, (uint64_t)&off_1E63B3860);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59C28);
  }
}

uint64_t sub_1B1AF65B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59490, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA6098, a3);
}

_QWORD *sub_1B1AF65E8(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC3A14, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF661C);
}

void sub_1B1AF661C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C30)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&type metadata for AddressMode, (uint64_t)&off_1E63B3860);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C30);
  }
}

uint64_t sub_1B1AF6680@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59770, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA61A4, a3);
}

_QWORD *sub_1B1AF66B0(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC3A14, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF66E4);
}

void sub_1B1AF66E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C38)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&type metadata for TextureChannel, (uint64_t)&off_1E63B3860);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C38);
  }
}

uint64_t sub_1B1AF6748@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA62B0, a3);
}

_QWORD *sub_1B1AF6778(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC3A14, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF67AC);
}

void sub_1B1AF67AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C40)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePositionOverTexture, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63B3860);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C40);
  }
}

uint64_t sub_1B1AF6810@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA63BC, a3);
}

_QWORD *sub_1B1AF6840(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC3A14, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF6874);
}

void sub_1B1AF6874()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C48)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePositionOverTexture, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63B3860);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C48);
  }
}

uint64_t sub_1B1AF68D8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 4);
  return result;
}

uint64_t sub_1B1AF68E4(uint64_t *a1)
{
  return sub_1B1A4E8BC(*a1);
}

uint64_t sub_1B1AF6908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&off_1E63B0320, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF6938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF707C);
}

uint64_t sub_1B1AF6958@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&off_1E63B0320, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83CB8, a2);
}

uint64_t sub_1B1AF6988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6FB4);
}

uint64_t sub_1B1AF69A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&off_1E63B0320, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF69D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6EEC);
}

unsigned __int8 *sub_1B1AF69F8@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

unint64_t sub_1B1AF6A04(unint64_t *a1)
{
  return sub_1B1A25554(*a1);
}

uint64_t sub_1B1AF6A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&off_1E63B0320, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF6A58@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&off_1E63B0320, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A860E0, a2);
}

uint64_t sub_1B1AF6A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6E24);
}

uint64_t sub_1B1AF6AA8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 1);
  return result;
}

uint64_t sub_1B1AF6AB4(uint64_t *a1)
{
  return sub_1B1A4E8DC(*a1);
}

uint64_t sub_1B1AF6AD8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&off_1E63B0320, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81910, a2);
}

uint64_t sub_1B1AF6B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6D30);
}

uint64_t sub_1B1AF6B28@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB21BC(a1, v2, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&off_1E63B0320, a2);
}

uint64_t sub_1B1AF6B50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB13A0(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF6BD8);
}

uint64_t sub_1B1AF6B70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59330, (uint64_t)&type metadata for ColorRamp, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2F60, a3);
}

uint64_t sub_1B1AF6BA0()
{
  uint64_t *v0;

  return sub_1B1AADB98(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1AF6BBC(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1AAEEA4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B1AF6BD8(uint64_t a1)
{
  return sub_1B1AF6C0C(a1, (uint64_t)sub_1B1AE6AB0, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EC2ED8, (uint64_t (*)(_QWORD))sub_1B1AF6C64);
}

uint64_t sub_1B1AF6C0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A7FC8C(**(_QWORD **)(v4 + 16), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8), *(unsigned __int8 *)(*(_QWORD *)(v4 + 16) + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a2, a3, a4);
}

void sub_1B1AF6C64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C58)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&type metadata for ColorRamp, (uint64_t)&off_1E63B0320);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C58);
  }
}

uint64_t sub_1B1AF6CCC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1AF6D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59490, (uint64_t)&type metadata for AddressMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA306C, a3);
}

_QWORD *sub_1B1AF6D30(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2ED8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF6D64);
}

void sub_1B1AF6D64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C60)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&type metadata for AddressMode, (uint64_t)&off_1E63B0320);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C60);
  }
}

uint64_t sub_1B1AF6DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59C68, (uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3178, a3);
}

double sub_1B1AF6DF8()
{
  uint64_t *v0;

  return sub_1B1AAD36C(v0[2], v0[3], v0[4], &qword_1EEF59C70, (uint64_t)&type metadata for ParticleColorOverPosition.GradientMode);
}

_QWORD *sub_1B1AF6E24(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2ED8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF6E58);
}

void sub_1B1AF6E58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C78)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, (uint64_t)&off_1E63B0320);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C78);
  }
}

uint64_t sub_1B1AF6EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3284, a3);
}

_QWORD *sub_1B1AF6EEC(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC2ED8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF6F20);
}

void sub_1B1AF6F20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C80)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverPosition, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B0320);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C80);
  }
}

uint64_t sub_1B1AF6F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF598B8, (uint64_t)&type metadata for Composition.Operation, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3390, a3);
}

_QWORD *sub_1B1AF6FB4(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2ED8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF6FE8);
}

void sub_1B1AF6FE8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C88)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverPosition, (uint64_t)&type metadata for Composition.Operation, (uint64_t)&off_1E63B0320);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C88);
  }
}

uint64_t sub_1B1AF704C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA349C, a3);
}

_QWORD *sub_1B1AF707C(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC2ED8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF70B0);
}

void sub_1B1AF70B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59C90)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleColorOverPosition, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63B0320);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59C90);
  }
}

unsigned __int8 *sub_1B1AF7114@<X0>(unsigned __int8 *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_BYTE *sub_1B1AF7120(_BYTE *result, BOOL *a2)
{
  *a2 = *result == 1;
  return result;
}

uint64_t sub_1B1AF7134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for OrientationConstraint, (uint64_t)&off_1E63A38A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF7164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF744C);
}

uint64_t sub_1B1AF7184@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for OrientationConstraint, (uint64_t)&off_1E63A38A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85554, a2);
}

uint64_t sub_1B1AF71B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF7348);
}

uint64_t sub_1B1AF71D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for OrientationConstraint, (uint64_t)&off_1E63A38A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF7204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF7254);
}

uint64_t sub_1B1AF7224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9AD40, a3);
}

_QWORD *sub_1B1AF7254(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC0DD8, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AF7288);
}

void sub_1B1AF7288()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59CA0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for OrientationConstraint, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A38A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59CA0);
  }
}

uint64_t sub_1B1AF72EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59CA8, (uint64_t)&type metadata for OrientationConstraint.Mode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9AE4C, a3);
}

double sub_1B1AF731C()
{
  uint64_t *v0;

  return sub_1B1AAD1CC(v0[2], v0[3], v0[4], &qword_1EEF59CB0, (uint64_t)&type metadata for OrientationConstraint.Mode);
}

_QWORD *sub_1B1AF7348(_QWORD *a1)
{
  return sub_1B1AF737C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EC0DD8, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AF73B8);
}

_QWORD *sub_1B1AF737C(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A79888(a1, **(_BYTE **)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1AF73B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59CB8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for OrientationConstraint, (uint64_t)&type metadata for OrientationConstraint.Mode, (uint64_t)&off_1E63A38A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59CB8);
  }
}

uint64_t sub_1B1AF741C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9AF58, a3);
}

_QWORD *sub_1B1AF744C(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC0DD8, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AF7480);
}

void sub_1B1AF7480()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59CC0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for OrientationConstraint, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63A38A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59CC0);
  }
}

uint64_t sub_1B1AF74E4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 8) == 0;
  return result;
}

uint64_t sub_1B1AF74F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleAngleEvolution, (uint64_t)&off_1E63A7EA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF7528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF7820);
}

uint64_t sub_1B1AF7548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB22E4(a1, v2, (uint64_t)&type metadata for ParticleAngleEvolution, (uint64_t)&off_1E63A7EA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A857A0, a2);
}

uint64_t sub_1B1AF7578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1D44(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF76F8);
}

void sub_1B1AF7598()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60220)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60220);
  }
}

uint64_t sub_1B1AF760C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59CD0, (uint64_t (*)(uint64_t))sub_1B1AF7598, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D16C, a3);
}

double sub_1B1AF763C()
{
  uint64_t *v0;

  return sub_1B1AAE538(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1AF7658(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1AAF070(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B1AF7674(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B1AF76B0(uint64_t result)
{
  if (result != 1)
    return sub_1B1AF76C0(result);
  return result;
}

uint64_t sub_1B1AF76C0(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1AF76F8(uint64_t a1)
{
  return sub_1B1AF79BC(a1, (uint64_t)sub_1B1AF772C, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EC1894, (uint64_t (*)(_QWORD))sub_1B1AF7744);
}

uint64_t sub_1B1AF772C(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1AB2374(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

void sub_1B1AF7744(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF59CE0, (uint64_t (*)(uint64_t))sub_1B1AF7598, (uint64_t)&type metadata for ParticleAngleEvolution, (uint64_t)&off_1E63A7EA0);
}

void sub_1B1AF776C()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5CB70)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5CB70);
  }
}

uint64_t sub_1B1AF77F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D278, a3);
}

_QWORD *sub_1B1AF7820(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC1894, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF7854);
}

void sub_1B1AF7854()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59CF0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleAngleEvolution, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A7EA0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59CF0);
  }
}

uint64_t sub_1B1AF78B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleTextureFrameEvolution, (uint64_t)&off_1E63B4FA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF78E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF7AB0);
}

uint64_t sub_1B1AF7908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB22E4(a1, v2, (uint64_t)&type metadata for ParticleTextureFrameEvolution, (uint64_t)&off_1E63B4FA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A857A0, a2);
}

uint64_t sub_1B1AF7938(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1D44(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF7988);
}

uint64_t sub_1B1AF7958@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59CD0, (uint64_t (*)(uint64_t))sub_1B1AF7598, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA6C04, a3);
}

uint64_t sub_1B1AF7988(uint64_t a1)
{
  return sub_1B1AF79BC(a1, (uint64_t)sub_1B1B0D410, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EC3C7C, (uint64_t (*)(_QWORD))sub_1B1AF7A18);
}

uint64_t sub_1B1AF79BC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A8034C(**(_QWORD **)(v4 + 16), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v4 + 16) + 16), *(unsigned __int8 *)(*(_QWORD *)(v4 + 16) + 24), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), a2, a3, a4);
}

void sub_1B1AF7A18(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF59CF8, (uint64_t (*)(uint64_t))sub_1B1AF7598, (uint64_t)&type metadata for ParticleTextureFrameEvolution, (uint64_t)&off_1E63B4FA0);
}

uint64_t sub_1B1AF7A40()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_deallocObject();
}

uint64_t sub_1B1AF7A80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA6D10, a3);
}

_QWORD *sub_1B1AF7AB0(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC3C7C, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1AF7AE4);
}

void sub_1B1AF7AE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59D00)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleTextureFrameEvolution, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B4FA0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59D00);
  }
}

uint64_t sub_1B1AF7B48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF7B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8664);
}

uint64_t sub_1B1AF7B98@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0C18(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldType, a2);
}

uint64_t sub_1B1AF7BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF85C8);
}

uint64_t sub_1B1AF7BE8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF7C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF84DC);
}

uint64_t sub_1B1AF7C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF7C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF841C);
}

_QWORD *sub_1B1AF7C88@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (unint64_t)(*result - 7) < 2;
  return result;
}

_QWORD *sub_1B1AF7CA0@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (unint64_t)(*result - 5) < 0xFFFFFFFFFFFFFFFELL;
  return result;
}

uint64_t sub_1B1AF7CB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E4C, a2);
}

uint64_t sub_1B1AF7CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8330);
}

uint64_t sub_1B1AF7D08@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0C18(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldShape, a2);
}

uint64_t sub_1B1AF7D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8294);
}

uint64_t sub_1B1AF7D58@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0C18(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(_QWORD))type metadata accessor for ForceFieldCullMode, a2);
}

uint64_t sub_1B1AF7D88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF81F8);
}

uint64_t sub_1B1AF7DA8@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 40) != 0;
  return result;
}

uint64_t sub_1B1AF7DBC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1AF7DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF80E4);
}

_QWORD *sub_1B1AF7E14@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (unint64_t)(*result - 3) < 2;
  return result;
}

_QWORD *sub_1B1AF7E2C@<X0>(_QWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result == 9;
  return result;
}

uint64_t sub_1B1AF7E40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AF7E70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8008);
}

uint64_t sub_1B1AF7E90@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 32);
  return result;
}

unsigned int *sub_1B1AF7E9C(unsigned int *result, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) = *result;
  return result;
}

uint64_t sub_1B1AF7EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AF7ED8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF7F54);
}

uint64_t sub_1B1AF7EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87150, a3);
}

double sub_1B1AF7F28()
{
  uint64_t *v0;

  return sub_1B1AAD0A4(v0[2], v0[3], v0[4], &qword_1EEF59D30, (uint64_t)&type metadata for CollisionLayerSet);
}

_QWORD *sub_1B1AF7F54(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A747B4(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1B1AF7F74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59D38)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceField, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E636DA50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59D38);
  }
}

uint64_t sub_1B1AF7FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8725C, a3);
}

_QWORD *sub_1B1AF8008(_QWORD *a1)
{
  return sub_1B1B01BF4(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A72644, (uint64_t (*)(_QWORD))sub_1B1AF8034);
}

void sub_1B1AF8034()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59D40)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceField, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E636DA50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59D40);
  }
}

uint64_t sub_1B1AF8098@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87368, a3);
}

double sub_1B1AF80C0()
{
  uint64_t *v0;

  return sub_1B1AAE898(v0[2], v0[3], v0[4], (void (*)(_QWORD))sub_1B1AE031C);
}

_QWORD *sub_1B1AF80E4(_QWORD *a1)
{
  return sub_1B1AE0D84(a1, (uint64_t)sub_1B1AE0BB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A72644, (uint64_t (*)(_QWORD))sub_1B1AF8118);
}

void sub_1B1AF8118(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59D48)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ForceField, v2, (uint64_t)&off_1E636DA50);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59D48);
  }
}

uint64_t sub_1B1AF819C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59D50, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8745C, a3);
}

double sub_1B1AF81CC()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF59D58, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode);
}

uint64_t sub_1B1AF81F8(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A74910);
}

void sub_1B1AF8214(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF59D60, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldCullMode, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50);
}

uint64_t sub_1B1AF8238@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59D68, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87568, a3);
}

double sub_1B1AF8268()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF59D70, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape);
}

uint64_t sub_1B1AF8294(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7493C);
}

void sub_1B1AF82B0(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF59D78, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldShape, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50);
}

uint64_t sub_1B1AF82D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF595B0, MEMORY[0x1E0DEE190], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87674, a3);
}

double sub_1B1AF8304()
{
  uint64_t *v0;

  return sub_1B1AAD014(v0[2], v0[3], v0[4], &qword_1EEF595B8, MEMORY[0x1E0DEE190]);
}

_QWORD *sub_1B1AF8330(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADEFE0, (void (*)(unint64_t, uint64_t, double))sub_1B1A72644, (uint64_t (*)(_QWORD))sub_1B1AF835C);
}

void sub_1B1AF835C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59D80)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceField, MEMORY[0x1E0DEE190], (uint64_t)&off_1E636DA50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59D80);
  }
}

uint64_t sub_1B1AF83C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87780, a3);
}

uint64_t sub_1B1AF83F0()
{
  uint64_t *v0;

  return sub_1B1AAD134(v0[2], v0[3], v0[4], (unint64_t *)&unk_1ED4BAF10, MEMORY[0x1E0DEB188]);
}

_QWORD *sub_1B1AF841C(_QWORD *a1)
{
  return sub_1B1B08044(a1, (uint64_t)sub_1B1ADFCB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A72644, (uint64_t (*)(_QWORD))sub_1B1AF8448);
}

void sub_1B1AF8448()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59D88)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceField, MEMORY[0x1E0DEB188], (uint64_t)&off_1E636DA50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59D88);
  }
}

uint64_t sub_1B1AF84AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8788C, a3);
}

_QWORD *sub_1B1AF84DC(_QWORD *a1)
{
  return sub_1B1B01E78(a1, (uint64_t)sub_1B1ADFFBC, (void (*)(unint64_t, uint64_t, double))sub_1B1A72644, (uint64_t (*)(_QWORD))sub_1B1AF8508);
}

void sub_1B1AF8508()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59D90)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceField, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E636DA50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59D90);
  }
}

uint64_t sub_1B1AF856C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59D98, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87998, a3);
}

double sub_1B1AF859C()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF59DA0, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType);
}

uint64_t sub_1B1AF85C8(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A74AD8);
}

void sub_1B1AF85E4(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF59DA8, (uint64_t (*)(uint64_t))type metadata accessor for ForceFieldType, (uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50);
}

uint64_t sub_1B1AF8608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87AA4, a3);
}

double sub_1B1AF8638()
{
  uint64_t *v0;

  return sub_1B1AAD014(v0[2], v0[3], v0[4], &qword_1EEF58F60, MEMORY[0x1E0DEDC60]);
}

_QWORD *sub_1B1AF8664(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADEFE0, (void (*)(unint64_t, uint64_t, double))sub_1B1A72644, (uint64_t (*)(_QWORD))sub_1B1AF8690);
}

void sub_1B1AF8690()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DB0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceField, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E636DA50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DB0);
  }
}

uint64_t sub_1B1AF86F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleForceField, (uint64_t)&off_1E63946D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF8724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF88A4);
}

uint64_t sub_1B1AF8744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleForceField, (uint64_t)&off_1E63946D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AF8774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF87C4);
}

uint64_t sub_1B1AF8794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A92D6C, a3);
}

_QWORD *sub_1B1AF87C4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1ADF784, (uint64_t)sub_1B1EBF1E4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1AF8810);
}

void sub_1B1AF8810()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DB8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleForceField, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E63946D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DB8);
  }
}

uint64_t sub_1B1AF8874@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A92E78, a3);
}

_QWORD *sub_1B1AF88A4(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBF1E4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1AF88D8);
}

void sub_1B1AF88D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DC0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleForceField, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63946D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DC0);
  }
}

uint64_t sub_1B1AF893C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for Vortex, (uint64_t)&off_1E63BD828, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF89BC);
}

uint64_t sub_1B1AF898C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AAAD84, a3);
}

_QWORD *sub_1B1AF89BC(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC4E60, (void (*)(unint64_t, uint64_t, double))sub_1B1A740DC, (uint64_t (*)(_QWORD))sub_1B1AF89F0);
}

void sub_1B1AF89F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DC8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for Vortex, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63BD828);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DC8);
  }
}

uint64_t sub_1B1AF8A54@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ParticleForce, (uint64_t)&off_1E637C0C0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1AF8A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8D34);
}

uint64_t sub_1B1AF8AAC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 16);
  return result;
}

uint64_t sub_1B1AF8AB8(uint64_t *a1)
{
  return sub_1B1A51FAC(*a1);
}

uint64_t sub_1B1AF8ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleForce, (uint64_t)&off_1E637C0C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF8B0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8C74);
}

uint64_t sub_1B1AF8B2C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleForce, (uint64_t)&off_1E637C0C0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82744, a2);
}

uint64_t sub_1B1AF8B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8BAC);
}

uint64_t sub_1B1AF8B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF590B0, (uint64_t)&type metadata for EntitySpace, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8ADF4, a3);
}

_QWORD *sub_1B1AF8BAC(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EBC550, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1AF8BE0);
}

void sub_1B1AF8BE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DD0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleForce, (uint64_t)&type metadata for EntitySpace, (uint64_t)&off_1E637C0C0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DD0);
  }
}

uint64_t sub_1B1AF8C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8AF00, a3);
}

_QWORD *sub_1B1AF8C74(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EBC550, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1AF8CA8);
}

void sub_1B1AF8CA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DD8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleForce, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E637C0C0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DD8);
  }
}

uint64_t sub_1B1AF8D0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8B00C, a3);
}

uint64_t sub_1B1AF8D34(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A765E4);
}

void sub_1B1AF8D50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59DE0)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleForce, v2, (uint64_t)&off_1E637C0C0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59DE0);
  }
}

uint64_t sub_1B1AF8DD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleRibbonTrails, (uint64_t)&off_1E639D710, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AF8E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF91A4);
}

uint64_t sub_1B1AF8E24@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB23DC(a1, v2, (uint64_t)&type metadata for ParticleRibbonTrails, (uint64_t)&off_1E639D710, a2);
}

uint64_t sub_1B1AF8E4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1870(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF90C4);
}

uint64_t sub_1B1AF8E6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleRibbonTrails, (uint64_t)&off_1E639D710, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF8E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9004);
}

uint64_t sub_1B1AF8EBC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleRibbonTrails, (uint64_t)&off_1E639D710, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF8EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF8F3C);
}

uint64_t sub_1B1AF8F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99280, a3);
}

_QWORD *sub_1B1AF8F3C(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC083C, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AF8F70);
}

void sub_1B1AF8F70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DE8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonTrails, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E639D710);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DE8);
  }
}

uint64_t sub_1B1AF8FD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9938C, a3);
}

_QWORD *sub_1B1AF9004(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC083C, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AF9038);
}

void sub_1B1AF9038()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59DF0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonTrails, MEMORY[0x1E0DEB188], (uint64_t)&off_1E639D710);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59DF0);
  }
}

uint64_t sub_1B1AF909C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1ADFA94, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99498, a3);
}

_QWORD *sub_1B1AF90C4(_QWORD *a1)
{
  return sub_1B1AFC07C(a1, (uint64_t)sub_1B1ADFB94, (uint64_t)sub_1B1EC083C, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AF90F8);
}

void sub_1B1AF90F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59DF8)
  {
    sub_1B1A02758(255, &qword_1ED4BA580, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleRibbonTrails, v2, (uint64_t)&off_1E639D710);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59DF8);
  }
}

uint64_t sub_1B1AF9174@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9958C, a3);
}

_QWORD *sub_1B1AF91A4(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC083C, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AF91D8);
}

void sub_1B1AF91D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E00)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonTrails, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E639D710);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E00);
  }
}

char *sub_1B1AF923C@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AF9248(uint64_t *a1)
{
  return sub_1B1A25598(*a1);
}

uint64_t sub_1B1AF926C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, (uint64_t)&off_1E63B6AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AF929C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9788);
}

uint64_t sub_1B1AF92BC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, (uint64_t)&off_1E63B6AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A86668, a2);
}

uint64_t sub_1B1AF92EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF96C0);
}

uint64_t sub_1B1AF930C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, (uint64_t)&off_1E63B6AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF933C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF95F4);
}

uint64_t sub_1B1AF935C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 8);
  return result;
}

uint64_t sub_1B1AF9368(uint64_t *a1)
{
  return sub_1B1A5306C(*a1);
}

uint64_t sub_1B1AF938C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, (uint64_t)&off_1E63B6AA8, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1AF93C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9524);
}

uint64_t sub_1B1AF93E4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, (uint64_t)&off_1E63B6AA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF9414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9464);
}

uint64_t sub_1B1AF9434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7A7C, a3);
}

_QWORD *sub_1B1AF9464(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EC41D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF9498);
}

void sub_1B1AF9498()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E10)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B6AA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E10);
  }
}

uint64_t sub_1B1AF94FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7B88, a3);
}

uint64_t sub_1B1AF9524(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7B68C);
}

void sub_1B1AF9540(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59E18)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, v2, (uint64_t)&off_1E63B6AA8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59E18);
  }
}

uint64_t sub_1B1AF95C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7C7C, a3);
}

_QWORD *sub_1B1AF95F4(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1ADFCB4, (uint64_t)sub_1B1EC41D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF9628);
}

void sub_1B1AF9628()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E20)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B6AA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E20);
  }
}

uint64_t sub_1B1AF968C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59E28, (uint64_t)&type metadata for FlockingLocalAxis, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7D88, a3);
}

_QWORD *sub_1B1AF96C0(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC41D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF96F4);
}

void sub_1B1AF96F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E38)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, (uint64_t)&type metadata for FlockingLocalAxis, (uint64_t)&off_1E63B6AA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E38);
  }
}

uint64_t sub_1B1AF9758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7E94, a3);
}

_QWORD *sub_1B1AF9788(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC41D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AF97BC);
}

void sub_1B1AF97BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E40)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingAlignOrientation, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63B6AA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E40);
  }
}

uint64_t sub_1B1AF9820@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane, (uint64_t)&off_1E63B8068, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF9850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF99C0);
}

uint64_t sub_1B1AF9870@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane, (uint64_t)&off_1E63B8068, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1AF98A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF98F0);
}

uint64_t sub_1B1AF98C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA8C00, a3);
}

uint64_t sub_1B1AF98F0(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7BB94);
}

void sub_1B1AF990C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59E48)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane, v2, (uint64_t)&off_1E63B8068);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59E48);
  }
}

uint64_t sub_1B1AF9990@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA8CF4, a3);
}

_QWORD *sub_1B1AF99C0(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC451C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1AF99F4);
}

void sub_1B1AF99F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E50)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingAlignVelocityOnPlane, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B8068);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E50);
  }
}

uint64_t sub_1B1AF9A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFlockingConstrainToArea, (uint64_t)&off_1E63B61C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF9A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9D10);
}

uint64_t sub_1B1AF9AA8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ParticleFlockingConstrainToArea, (uint64_t)&off_1E63B61C8, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1AF9AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9C40);
}

uint64_t sub_1B1AF9B00@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingConstrainToArea, (uint64_t)&off_1E63B61C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF9B30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9B80);
}

uint64_t sub_1B1AF9B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7558, a3);
}

_QWORD *sub_1B1AF9B80(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC4078, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AF9BB4);
}

void sub_1B1AF9BB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E58)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingConstrainToArea, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B61C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E58);
  }
}

uint64_t sub_1B1AF9C18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7664, a3);
}

uint64_t sub_1B1AF9C40(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7B49C);
}

void sub_1B1AF9C5C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59E60)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleFlockingConstrainToArea, v2, (uint64_t)&off_1E63B61C8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59E60);
  }
}

uint64_t sub_1B1AF9CE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7758, a3);
}

_QWORD *sub_1B1AF9D10(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC4078, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AF9D44);
}

void sub_1B1AF9D44()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E68)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingConstrainToArea, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B61C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E68);
  }
}

uint64_t sub_1B1AF9DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane, (uint64_t)&off_1E63B6DB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AF9DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA060);
}

uint64_t sub_1B1AF9DF8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane, (uint64_t)&off_1E63B6DB8, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1AF9E30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9F90);
}

uint64_t sub_1B1AF9E50@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane, (uint64_t)&off_1E63B6DB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AF9E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AF9ED0);
}

uint64_t sub_1B1AF9EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7FA0, a3);
}

_QWORD *sub_1B1AF9ED0(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC42E0, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AF9F04);
}

void sub_1B1AF9F04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E70)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B6DB8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E70);
  }
}

uint64_t sub_1B1AF9F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA80AC, a3);
}

uint64_t sub_1B1AF9F90(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7B808);
}

void sub_1B1AF9FAC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59E78)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane, v2, (uint64_t)&off_1E63B6DB8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59E78);
  }
}

uint64_t sub_1B1AFA030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA81A0, a3);
}

_QWORD *sub_1B1AFA060(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC42E0, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AFA094);
}

void sub_1B1AFA094()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E80)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingConstrainToPlane, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B6DB8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E80);
  }
}

uint64_t sub_1B1AFA0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea, (uint64_t)&off_1E63B58A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFA128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA288);
}

uint64_t sub_1B1AFA148@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea, (uint64_t)&off_1E63B58A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFA178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA1C8);
}

uint64_t sub_1B1AFA198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA724C, a3);
}

_QWORD *sub_1B1AFA1C8(_QWORD *a1)
{
  return sub_1B1B01E78(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73760, (uint64_t (*)(_QWORD))sub_1B1AFA1F4);
}

void sub_1B1AFA1F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E88)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B58A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E88);
  }
}

uint64_t sub_1B1AFA258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7358, a3);
}

_QWORD *sub_1B1AFA288(_QWORD *a1)
{
  return sub_1B1B08044(a1, (uint64_t)sub_1B1AE1BC4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73760, (uint64_t (*)(_QWORD))sub_1B1AFA2B4);
}

void sub_1B1AFA2B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59E90)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingFlyTowardsArea, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B58A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59E90);
  }
}

uint64_t sub_1B1AFA318@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFlockingSolver, (uint64_t)&off_1E63A8470, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFA348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA994);
}

uint64_t sub_1B1AFA368@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleFlockingSolver, (uint64_t)&off_1E63A8470, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1AFA398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA8CC);
}

uint64_t sub_1B1AFA3B8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 32);
  return result;
}

uint64_t sub_1B1AFA3C4(uint64_t *a1)
{
  return sub_1B1A55674(*a1);
}

uint64_t sub_1B1AFA3E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleFlockingSolver, (uint64_t)&off_1E63A8470, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AFA418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA804);
}

uint64_t sub_1B1AFA438@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingSolver, (uint64_t)&off_1E63A8470, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85A44, a2);
}

uint64_t sub_1B1AFA468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA73C);
}

uint64_t sub_1B1AFA488@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1F68(a1, v2, a2);
}

uint64_t sub_1B1AFA490(uint64_t result)
{
  return sub_1B1AB1FE8(result);
}

void sub_1B1AFA498()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59EA8)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59EA8);
  }
}

uint64_t sub_1B1AFA50C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingSolver, (uint64_t)&off_1E63A8470, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFA53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFA58C);
}

uint64_t sub_1B1AFA55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D384, a3);
}

_QWORD *sub_1B1AFA58C(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EBB3D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AFA5C0);
}

void sub_1B1AFA5C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59EB0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSolver, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A8470);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59EB0);
  }
}

uint64_t sub_1B1AFA624@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59EB8, (uint64_t (*)(uint64_t))sub_1B1AFA498, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D490, a3);
}

double sub_1B1AFA654()
{
  uint64_t *v0;

  return sub_1B1AAE0C8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1AFA660(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  __int128 v9;
  char v10;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
  {
    v6 = *(_OWORD *)(a1 + 32);
    v7 = *(_BYTE *)(a1 + 48);
  }
  else
  {
    v7 = 0;
    v6 = 0uLL;
  }
  v9 = v6;
  v10 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, __int128 *))(v4 + 16))(v3, v5, &v9);
}

_QWORD *sub_1B1AFA6BC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A79D74(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B1AFA6E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59ED0, (uint64_t)&type metadata for FlockingSizeMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D59C, a3);
}

double sub_1B1AFA710()
{
  uint64_t *v0;

  return sub_1B1AAD36C(v0[2], v0[3], v0[4], &qword_1EEF59ED8, (uint64_t)&type metadata for FlockingSizeMode);
}

_QWORD *sub_1B1AFA73C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EBB3D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AFA770);
}

void sub_1B1AFA770()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59EE0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSolver, (uint64_t)&type metadata for FlockingSizeMode, (uint64_t)&off_1E63A8470);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59EE0);
  }
}

uint64_t sub_1B1AFA7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D6A8, a3);
}

_QWORD *sub_1B1AFA804(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EBB3D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AFA838);
}

void sub_1B1AFA838()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59EE8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSolver, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63A8470);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59EE8);
  }
}

uint64_t sub_1B1AFA89C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D7B4, a3);
}

_QWORD *sub_1B1AFA8CC(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EBB3D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AFA900);
}

void sub_1B1AFA900()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59EF0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSolver, MEMORY[0x1E0DEB418], (uint64_t)&off_1E63A8470);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59EF0);
  }
}

uint64_t sub_1B1AFA964@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D8C0, a3);
}

_QWORD *sub_1B1AFA994(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1ADFCB4, (uint64_t)sub_1B1EBB3D4, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1AFA9C8);
}

void sub_1B1AFA9C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59EF8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSolver, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A8470);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59EF8);
  }
}

uint64_t sub_1B1AFAA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFlockingSpeedControl, (uint64_t)&off_1E63B43B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFAA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFAEA8);
}

uint64_t sub_1B1AFAA7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleFlockingSpeedControl, (uint64_t)&off_1E63B43B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1AFAAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFADC0);
}

uint64_t sub_1B1AFAACC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 24);
  return result;
}

uint64_t sub_1B1AFAAD8(uint64_t *a1)
{
  return sub_1B1A55E70(*a1);
}

uint64_t sub_1B1AFAAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleFlockingSpeedControl, (uint64_t)&off_1E63B43B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AFAB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFAD00);
}

uint64_t sub_1B1AFAB4C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFlockingSpeedControl, (uint64_t)&off_1E63B43B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A86668, a2);
}

uint64_t sub_1B1AFAB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFAC38);
}

uint64_t sub_1B1AFAB9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59E28, (uint64_t)&type metadata for FlockingLocalAxis, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA64C8, a3);
}

double sub_1B1AFABCC()
{
  uint64_t *v0;

  return sub_1B1AAE5D8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1AFABE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 6;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1AFAC38(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC3B18, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1AFAC6C);
}

void sub_1B1AFAC6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F00)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSpeedControl, (uint64_t)&type metadata for FlockingLocalAxis, (uint64_t)&off_1E63B43B8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F00);
  }
}

uint64_t sub_1B1AFACD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA65D4, a3);
}

_QWORD *sub_1B1AFAD00(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC3B18, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1AFAD34);
}

void sub_1B1AFAD34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F08)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSpeedControl, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63B43B8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F08);
  }
}

uint64_t sub_1B1AFAD98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA66E0, a3);
}

_QWORD *sub_1B1AFADC0(_QWORD *a1)
{
  return sub_1B1AE45C4(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC3B18, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1AFADF4);
}

void sub_1B1AFADF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59F10)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleFlockingSpeedControl, v2, (uint64_t)&off_1E63B43B8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59F10);
  }
}

uint64_t sub_1B1AFAE78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA67D4, a3);
}

_QWORD *sub_1B1AFAEA8(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC3B18, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1AFAEDC);
}

void sub_1B1AFAEDC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F18)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFlockingSpeedControl, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B43B8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F18);
  }
}

uint64_t sub_1B1AFAF40@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter, (uint64_t)&off_1E63B46F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFAF70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFB1F0);
}

uint64_t sub_1B1AFAF90@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter, (uint64_t)&off_1E63B46F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AFAFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFB128);
}

uint64_t sub_1B1AFAFE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter, (uint64_t)&off_1E63B46F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFB010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFB060);
}

uint64_t sub_1B1AFB030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA68E0, a3);
}

_QWORD *sub_1B1AFB060(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1ADFCB4, (uint64_t)sub_1B1EC3C0C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFB094);
}

void sub_1B1AFB094()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F20)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B46F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F20);
  }
}

uint64_t sub_1B1AFB0F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA69EC, a3);
}

_QWORD *sub_1B1AFB128(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC3C0C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFB15C);
}

void sub_1B1AFB15C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F28)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63B46F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F28);
  }
}

uint64_t sub_1B1AFB1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA6AF8, a3);
}

_QWORD *sub_1B1AFB1F0(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC3C0C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFB224);
}

void sub_1B1AFB224()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F30)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B46F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F30);
  }
}

uint64_t sub_1B1AFB288@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFB2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFBBB4);
}

uint64_t sub_1B1AFB2D8@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 10);
  return result;
}

uint64_t sub_1B1AFB2E4(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t result;

  result = sub_1B1F1DDD8(*a1);
  *(_BYTE *)(a2 + 10) = result;
  return result;
}

uint64_t sub_1B1AFB30C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AFB33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFBAF4);
}

uint64_t sub_1B1AFB35C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A86560, a2);
}

uint64_t sub_1B1AFB38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFBA34);
}

uint64_t sub_1B1AFB3AC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 11);
  return result;
}

uint64_t sub_1B1AFB3B8(uint64_t *a1)
{
  return sub_1B1A57A8C(*a1);
}

uint64_t sub_1B1AFB3DC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A86458, a2);
}

uint64_t sub_1B1AFB40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFB944);
}

uint64_t sub_1B1AFB42C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFB45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFB854);
}

uint64_t sub_1B1AFB47C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1AFB4B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFB76C);
}

uint64_t sub_1B1AFB4D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A862F0, a2);
}

uint64_t sub_1B1AFB504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFB69C);
}

void sub_1B1AFB524(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t Set;
  uint64_t v6;

  if (!qword_1EEF59F48)
  {
    sub_1B1A02758(255, &qword_1EEF59F50, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    Set = type metadata accessor for EntityGetSet(a1, v2, v3, v4);
    if (!v6)
      atomic_store(Set, (unint64_t *)&qword_1EEF59F48);
  }
}

uint64_t sub_1B1AFB590@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AFB5B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5498, a3);
}

void sub_1B1AFB5B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;

  if (!qword_1EEF59F58)
  {
    sub_1B1A02758(255, &qword_1EEF59F50, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v5 = type metadata accessor for EntityValueAccessors(a1, v2, v3, v4);
    if (!v6)
      atomic_store(v5, (unint64_t *)&qword_1EEF59F58);
  }
}

double sub_1B1AFB624()
{
  uint64_t *v0;

  return sub_1B1AAE3A4(v0[2], v0[3], v0[4]);
}

void sub_1B1AFB630()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F60)
  {
    sub_1B1A02758(255, &qword_1EEF59F50, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F60);
  }
}

_QWORD *sub_1B1AFB69C(_QWORD *a1)
{
  return sub_1B1AF0318(a1, (uint64_t)sub_1B1AE65D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73564, (uint64_t (*)(_QWORD))sub_1B1AFB6C8);
}

void sub_1B1AFB6C8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59F68)
  {
    sub_1B1A02758(255, &qword_1EEF59F50, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, v2, (uint64_t)&off_1E63B31F8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59F68);
  }
}

uint64_t sub_1B1AFB744@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA558C, a3);
}

_QWORD *sub_1B1AFB76C(_QWORD *a1)
{
  return sub_1B1AE0D84(a1, (uint64_t)sub_1B1AE0BB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73564, (uint64_t (*)(_QWORD))sub_1B1AFB7A0);
}

void sub_1B1AFB7A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59F70)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, v2, (uint64_t)&off_1E63B31F8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59F70);
  }
}

uint64_t sub_1B1AFB824@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5680, a3);
}

_QWORD *sub_1B1AFB854(_QWORD *a1)
{
  return sub_1B1B08044(a1, (uint64_t)sub_1B1ADFCB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73564, (uint64_t (*)(_QWORD))sub_1B1AFB880);
}

void sub_1B1AFB880()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F78)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B31F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F78);
  }
}

uint64_t sub_1B1AFB8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59F80, (uint64_t)&type metadata for FluidSolver2DSolverBorderType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA578C, a3);
}

double sub_1B1AFB914()
{
  uint64_t *v0;

  return sub_1B1AADFAC(v0[2], v0[3], v0[4], &qword_1EEF59F88, (uint64_t)&type metadata for FluidSolver2DSolverBorderType);
}

_QWORD *sub_1B1AFB944(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73564, (uint64_t (*)(_QWORD))sub_1B1AFB970);
}

void sub_1B1AFB970()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59F90)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&type metadata for FluidSolver2DSolverBorderType, (uint64_t)&off_1E63B31F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59F90);
  }
}

uint64_t sub_1B1AFB9D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59F98, (uint64_t)&type metadata for FluidSolver2DSolverSetupType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5898, a3);
}

double sub_1B1AFBA04()
{
  uint64_t *v0;

  return sub_1B1AAE424(v0[2], v0[3], v0[4], &qword_1EEF59FA0, (uint64_t)&type metadata for FluidSolver2DSolverSetupType);
}

_QWORD *sub_1B1AFBA34(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73564, (uint64_t (*)(_QWORD))sub_1B1AFBA60);
}

void sub_1B1AFBA60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59FA8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&type metadata for FluidSolver2DSolverSetupType, (uint64_t)&off_1E63B31F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59FA8);
  }
}

uint64_t sub_1B1AFBAC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA59A4, a3);
}

_QWORD *sub_1B1AFBAF4(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADFE94, (void (*)(unint64_t, uint64_t, double))sub_1B1A73564, (uint64_t (*)(_QWORD))sub_1B1AFBB20);
}

void sub_1B1AFBB20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59FB0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63B31F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59FB0);
  }
}

uint64_t sub_1B1AFBB84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5AB0, a3);
}

_QWORD *sub_1B1AFBBB4(_QWORD *a1)
{
  return sub_1B1B01E78(a1, (uint64_t)sub_1B1ADFFBC, (void (*)(unint64_t, uint64_t, double))sub_1B1A73564, (uint64_t (*)(_QWORD))sub_1B1AFBBE0);
}

void sub_1B1AFBBE0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59FB8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleFluidSolver2DSolver, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B31F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59FB8);
  }
}

uint64_t sub_1B1AFBC44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleDrag, (uint64_t)&off_1E6376050, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFBC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFBDDC);
}

uint64_t sub_1B1AFBC94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleDrag, (uint64_t)&off_1E6376050, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFBCC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFBD14);
}

uint64_t sub_1B1AFBCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89B4C, a3);
}

_QWORD *sub_1B1AFBD14(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBBE0C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AFBD48);
}

void sub_1B1AFBD48()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59FC0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleDrag, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E6376050);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59FC0);
  }
}

uint64_t sub_1B1AFBDAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A89C58, a3);
}

_QWORD *sub_1B1AFBDDC(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBBE0C, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AFBE10);
}

void sub_1B1AFBE10()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59FC8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleDrag, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6376050);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59FC8);
  }
}

uint64_t sub_1B1AFBE74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleCopyData, (uint64_t)&off_1E63886A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AFBEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC3A0);
}

uint64_t sub_1B1AFBEC4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleCopyData, (uint64_t)&off_1E63886A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8363C, a2);
}

uint64_t sub_1B1AFBEF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC2D8);
}

uint64_t sub_1B1AFBF14@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleCopyData, (uint64_t)&off_1E63886A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83534, a2);
}

uint64_t sub_1B1AFBF44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC194);
}

uint64_t sub_1B1AFBF64@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB23DC(a1, v2, (uint64_t)&type metadata for ParticleCopyData, (uint64_t)&off_1E63886A8, a2);
}

uint64_t sub_1B1AFBF8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1870(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC048);
}

uint64_t sub_1B1AFBFAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1ADFA94, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E698, a3);
}

double sub_1B1AFBFD4()
{
  uint64_t *v0;

  return sub_1B1AADC2C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1AFBFF0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  char v10;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_BYTE *)(a1 + 40);
  }
  else
  {
    v7 = 0;
  }
  v9 = v6;
  v10 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v4 + 16))(v3, v5, &v9);
}

_QWORD *sub_1B1AFC048(_QWORD *a1)
{
  return sub_1B1AFC07C(a1, (uint64_t)sub_1B1ADFB94, (uint64_t)sub_1B1EBDA18, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFC0BC);
}

_QWORD *sub_1B1AFC07C(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A791F4(a1, **(_QWORD **)(v5 + 16), *(_BYTE *)(*(_QWORD *)(v5 + 16) + 8), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1AFC0BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF59FE0)
  {
    sub_1B1A02758(255, &qword_1ED4BA580, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleCopyData, v2, (uint64_t)&off_1E63886A8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF59FE0);
  }
}

uint64_t sub_1B1AFC138@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59FE8, (uint64_t)&type metadata for TargetDataKind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E78C, a3);
}

double sub_1B1AFC168()
{
  uint64_t *v0;

  return sub_1B1AAD36C(v0[2], v0[3], v0[4], &qword_1EEF59FF0, (uint64_t)&type metadata for TargetDataKind);
}

_QWORD *sub_1B1AFC194(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBDA18, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFC1C8);
}

void sub_1B1AFC1C8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF59FF8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleCopyData, (uint64_t)&type metadata for TargetDataKind, (uint64_t)&off_1E63886A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF59FF8);
  }
}

uint64_t sub_1B1AFC22C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A000, (uint64_t)&type metadata for SourceDataKind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E898, a3);
}

double sub_1B1AFC25C()
{
  uint64_t *v0;

  return sub_1B1AAE424(v0[2], v0[3], v0[4], &qword_1EEF5A008, (uint64_t)&type metadata for SourceDataKind);
}

uint64_t sub_1B1AFC288(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 8;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1AFC2D8(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBDA18, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFC30C);
}

void sub_1B1AFC30C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A010)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleCopyData, (uint64_t)&type metadata for SourceDataKind, (uint64_t)&off_1E63886A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A010);
  }
}

uint64_t sub_1B1AFC370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E9A4, a3);
}

_QWORD *sub_1B1AFC3A0(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EBDA18, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFC3D4);
}

void sub_1B1AFC3D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A018)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleCopyData, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63886A8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A018);
  }
}

uint64_t sub_1B1AFC438@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 36);
  return result;
}

uint64_t sub_1B1AFC444(uint64_t *a1)
{
  return sub_1B1A58A58(*a1);
}

uint64_t sub_1B1AFC468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleNoise, (uint64_t)&off_1E637C458, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AFC498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC974);
}

uint64_t sub_1B1AFC4B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleNoise, (uint64_t)&off_1E637C458, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8284C, a2);
}

uint64_t sub_1B1AFC4E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC8AC);
}

uint64_t sub_1B1AFC508@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleNoise, (uint64_t)&off_1E637C458, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFC538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC7B8);
}

uint64_t sub_1B1AFC558@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleNoise, (uint64_t)&off_1E637C458, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFC588(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC6F0);
}

uint64_t sub_1B1AFC5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleNoise, (uint64_t)&off_1E637C458, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1AFC5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFC628);
}

uint64_t sub_1B1AFC5F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8B100, a3);
}

_QWORD *sub_1B1AFC628(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EBC630, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AFC65C);
}

void sub_1B1AFC65C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A020)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleNoise, MEMORY[0x1E0DEB418], (uint64_t)&off_1E637C458);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A020);
  }
}

uint64_t sub_1B1AFC6C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8B20C, a3);
}

_QWORD *sub_1B1AFC6F0(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBC630, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AFC724);
}

void sub_1B1AFC724()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A028)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleNoise, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E637C458);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A028);
  }
}

uint64_t sub_1B1AFC788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8B318, a3);
}

_QWORD *sub_1B1AFC7B8(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBC630, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AFC7EC);
}

void sub_1B1AFC7EC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A030)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleNoise, MEMORY[0x1E0DEB188], (uint64_t)&off_1E637C458);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A030);
  }
}

uint64_t sub_1B1AFC850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59870, (uint64_t)&type metadata for NoiseKind, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8B424, a3);
}

double sub_1B1AFC880()
{
  uint64_t *v0;

  return sub_1B1AAD524(v0[2], v0[3], v0[4], &qword_1EEF59878, (uint64_t)&type metadata for NoiseKind);
}

_QWORD *sub_1B1AFC8AC(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EBC630, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AFC8E0);
}

void sub_1B1AFC8E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A038)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleNoise, (uint64_t)&type metadata for NoiseKind, (uint64_t)&off_1E637C458);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A038);
  }
}

uint64_t sub_1B1AFC944@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8B530, a3);
}

_QWORD *sub_1B1AFC974(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EBC630, (void (*)(unint64_t, uint64_t, double))sub_1B1A7396C, (uint64_t (*)(_QWORD))sub_1B1AFC9A8);
}

void sub_1B1AFC9A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A040)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleNoise, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E637C458);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A040);
  }
}

uint64_t sub_1B1AFCA0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ProjectorParameters, (uint64_t)&off_1E639A130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A850F0, a2);
}

uint64_t sub_1B1AFCA3C(uint64_t result)
{
  return sub_1B1AB1C98(result);
}

uint64_t sub_1B1AFCA44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ProjectorParameters, (uint64_t)&off_1E639A130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFCA74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFCCF4);
}

uint64_t sub_1B1AFCA94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ProjectorParameters, (uint64_t)&off_1E639A130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFCAC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFCC2C);
}

uint64_t sub_1B1AFCAE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ProjectorParameters, (uint64_t)&off_1E639A130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AFCB14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFCB64);
}

uint64_t sub_1B1AFCB34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A96BF4, a3);
}

_QWORD *sub_1B1AFCB64(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC01B0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AFCB98);
}

void sub_1B1AFCB98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A050)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ProjectorParameters, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E639A130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A050);
  }
}

uint64_t sub_1B1AFCBFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A96D00, a3);
}

_QWORD *sub_1B1AFCC2C(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC01B0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AFCC60);
}

void sub_1B1AFCC60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A058)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ProjectorParameters, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E639A130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A058);
  }
}

uint64_t sub_1B1AFCCC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A96E0C, a3);
}

_QWORD *sub_1B1AFCCF4(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC01B0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1AFCD28);
}

void sub_1B1AFCD28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A060)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ProjectorParameters, MEMORY[0x1E0DEB188], (uint64_t)&off_1E639A130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A060);
  }
}

uint64_t sub_1B1AFCD8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A068, (uint64_t)&type metadata for AngleF, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A96F18, a3);
}

uint64_t sub_1B1AFCDBC()
{
  uint64_t *v0;

  return sub_1B1AAD134(v0[2], v0[3], v0[4], &qword_1EEF5A070, (uint64_t)&type metadata for AngleF);
}

uint64_t sub_1B1AFCDE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_DWORD *)(a1 + 32);
  else
    v6 = 0;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1AFCE38(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A78EB0(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), **(float **)(v1 + 16));
}

void sub_1B1AFCE58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A078)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ProjectorParameters, (uint64_t)&type metadata for AngleF, (uint64_t)&off_1E639A130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A078);
  }
}

uint64_t sub_1B1AFCEBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for DistanceConstraint, (uint64_t)&off_1E63914E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFCEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFCF3C);
}

uint64_t sub_1B1AFCF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A91F24, a3);
}

_QWORD *sub_1B1AFCF3C(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBEDB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A732A8, (uint64_t (*)(_QWORD))sub_1B1AFCF70);
}

void sub_1B1AFCF70()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A080)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for DistanceConstraint, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63914E8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A080);
  }
}

uint64_t sub_1B1AFCFD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for Attach, (uint64_t)&off_1E63BAE20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFD004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD16C);
}

uint64_t sub_1B1AFD024@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for Attach, (uint64_t)&off_1E63BAE20, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFD054(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD0A4);
}

uint64_t sub_1B1AFD074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA9B24, a3);
}

_QWORD *sub_1B1AFD0A4(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC49B0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AFD0D8);
}

void sub_1B1AFD0D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A088)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for Attach, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63BAE20);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A088);
  }
}

uint64_t sub_1B1AFD13C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA9C30, a3);
}

_QWORD *sub_1B1AFD16C(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC49B0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1AFD1A0);
}

void sub_1B1AFD1A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A090)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for Attach, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63BAE20);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A090);
  }
}

uint64_t sub_1B1AFD204@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFD234(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD284);
}

uint64_t sub_1B1AFD254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E58C, a3);
}

_QWORD *sub_1B1AFD284(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EB9D40, (void (*)(unint64_t, uint64_t, double))sub_1B1A73F8C, (uint64_t (*)(_QWORD))sub_1B1AFD2B8);
}

void sub_1B1AFD2B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A098)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for DirectionalLight, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6387098);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A098);
  }
}

uint64_t sub_1B1AFD31C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFD34C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD39C);
}

uint64_t sub_1B1AFD36C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A87CBC, a3);
}

_QWORD *sub_1B1AFD39C(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EB9DB0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73F8C, (uint64_t (*)(_QWORD))sub_1B1AFD3D0);
}

void sub_1B1AFD3D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0A0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PointLight, MEMORY[0x1E0DEB188], (uint64_t)&off_1E636EB40);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0A0);
  }
}

uint64_t sub_1B1AFD434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFD464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD4B4);
}

uint64_t sub_1B1AFD484@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A886EC, a3);
}

_QWORD *sub_1B1AFD4B4(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EB9E20, (void (*)(unint64_t, uint64_t, double))sub_1B1A73B74, (uint64_t (*)(_QWORD))sub_1B1AFD4E8);
}

void sub_1B1AFD4E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0A8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for AmbientLight, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6374380);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0A8);
  }
}

uint64_t sub_1B1AFD54C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFD57C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD5CC);
}

uint64_t sub_1B1AFD59C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AAC720, a3);
}

_QWORD *sub_1B1AFD5CC(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EB9E90, (void (*)(unint64_t, uint64_t, double))sub_1B1A7470C, (uint64_t (*)(_QWORD))sub_1B1AFD600);
}

void sub_1B1AFD600()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0B0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for SpotLight, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C5190);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0B0);
  }
}

uint64_t sub_1B1AFD664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for Shadow, (uint64_t)&off_1E63BCD78, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFD694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD6E4);
}

uint64_t sub_1B1AFD6B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AAA73C, a3);
}

_QWORD *sub_1B1AFD6E4(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EB9F70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73F8C, (uint64_t (*)(_QWORD))sub_1B1AFD718);
}

void sub_1B1AFD718()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0B8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for Shadow, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63BCD78);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0B8);
  }
}

uint64_t sub_1B1AFD77C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleCollide, (uint64_t)&off_1E63849D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFD7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD92C);
}

uint64_t sub_1B1AFD7CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleCollide, (uint64_t)&off_1E63849D0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AFD7FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFD84C);
}

uint64_t sub_1B1AFD81C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D820, a3);
}

_QWORD *sub_1B1AFD84C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1AE1D34, (uint64_t)sub_1B1EBD3A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A7380C, (uint64_t (*)(_QWORD))sub_1B1AFD898);
}

void sub_1B1AFD898()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0C0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleCollide, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E63849D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0C0);
  }
}

uint64_t sub_1B1AFD8FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D92C, a3);
}

_QWORD *sub_1B1AFD92C(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBD3A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A7380C, (uint64_t (*)(_QWORD))sub_1B1AFD960);
}

void sub_1B1AFD960()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0C8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleCollide, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63849D0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0C8);
  }
}

uint64_t sub_1B1AFD9C4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1E63A4A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFD9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFDF80);
}

void sub_1B1AFDA14(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  *a3 = (*(float (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 8))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1B1AFDA50(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(*(_QWORD *)(a4 + a3 - 8) + 16))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1B1AFDA8C()
{
  return 24;
}

__n128 sub_1B1AFDA98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1B1AFDAAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1E63A4A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFDADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFDEB8);
}

void sub_1B1AFDAFC(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  *a3 = (*(float (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1B1AFDB38(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(*(_QWORD *)(a4 + a3 - 8) + 40))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1B1AFDB74()
{
  return 24;
}

__n128 sub_1B1AFDB80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void sub_1B1AFDB94(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  *a3 = (*(float (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 56))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1B1AFDBD0(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(*(_QWORD *)(a4 + a3 - 8) + 64))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1B1AFDC0C()
{
  return 24;
}

__n128 sub_1B1AFDC18(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

void sub_1B1AFDC2C(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  *a3 = (*(float (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 80))(*(_QWORD *)(a2 + a1 - 24));
}

uint64_t sub_1B1AFDC68(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(*(_QWORD *)(a4 + a3 - 8) + 88))(*(_QWORD *)(a4 + a3 - 24), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1B1AFDCA4()
{
  return 24;
}

__n128 sub_1B1AFDCB0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1B1AFDCC4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 128))(*(_QWORD *)(a2 + a1 - 24));
  *a3 = result;
  return result;
}

uint64_t sub_1B1AFDD00(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 136))(*a1, *(_QWORD *)(a4 + a3 - 24));
}

uint64_t sub_1B1AFDD38()
{
  return 24;
}

__n128 sub_1B1AFDD44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  a2[1].n128_u64[0] = a1[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_1B1AFDD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1E63A4A68, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AFDD88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFDDD8);
}

uint64_t sub_1B1AFDDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B8C4, a3);
}

_QWORD *sub_1B1AFDDD8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1ADF784, (uint64_t)sub_1B1EC1234, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFDE24);
}

void sub_1B1AFDE24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0D0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E63A4A68);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0D0);
  }
}

uint64_t sub_1B1AFDE88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B9D0, a3);
}

_QWORD *sub_1B1AFDEB8(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1ADFCB4, (uint64_t)sub_1B1EC1234, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFDEEC);
}

void sub_1B1AFDEEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0D8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePlaneCollider, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A4A68);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0D8);
  }
}

uint64_t sub_1B1AFDF50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9BADC, a3);
}

_QWORD *sub_1B1AFDF80(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EC1234, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFDFB4);
}

void sub_1B1AFDFB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0E0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePlaneCollider, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A4A68);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0E0);
  }
}

uint64_t sub_1B1AFE018@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1E63A8DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFE048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE2E0);
}

uint64_t sub_1B1AFE068@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1E63A8DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFE098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE218);
}

uint64_t sub_1B1AFE0B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&off_1E63A8DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AFE0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE138);
}

uint64_t sub_1B1AFE108@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E750, a3);
}

_QWORD *sub_1B1AFE138(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1ADF784, (uint64_t)sub_1B1EC1B10, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFE184);
}

void sub_1B1AFE184()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereCollider, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E63A8DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0E8);
  }
}

uint64_t sub_1B1AFE1E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E85C, a3);
}

_QWORD *sub_1B1AFE218(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC1B10, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFE24C);
}

void sub_1B1AFE24C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0F0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereCollider, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A8DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0F0);
  }
}

uint64_t sub_1B1AFE2B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E968, a3);
}

_QWORD *sub_1B1AFE2E0(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC1B10, (void (*)(unint64_t, uint64_t, double))sub_1B1A73608, (uint64_t (*)(_QWORD))sub_1B1AFE314);
}

void sub_1B1AFE314()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A0F8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereCollider, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A8DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A0F8);
  }
}

uint64_t sub_1B1AFE378@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1E63987F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFE3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE640);
}

uint64_t sub_1B1AFE3C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1E63987F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFE3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE578);
}

uint64_t sub_1B1AFE418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&off_1E63987F0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AFE448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE498);
}

uint64_t sub_1B1AFE468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94FC8, a3);
}

_QWORD *sub_1B1AFE498(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1AE1D34, (uint64_t)sub_1B1EBFB00, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFE4E4);
}

void sub_1B1AFE4E4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A100)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxCollider, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E63987F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A100);
  }
}

uint64_t sub_1B1AFE548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A950D4, a3);
}

_QWORD *sub_1B1AFE578(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBFB00, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFE5AC);
}

void sub_1B1AFE5AC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A108)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxCollider, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63987F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A108);
  }
}

uint64_t sub_1B1AFE610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A951E0, a3);
}

_QWORD *sub_1B1AFE640(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBFB00, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFE674);
}

void sub_1B1AFE674()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A110)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxCollider, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63987F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A110);
  }
}

uint64_t sub_1B1AFE6D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1E63AE088, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFE708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE888);
}

uint64_t sub_1B1AFE728@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&off_1E63AE088, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AFE758(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFE7A8);
}

uint64_t sub_1B1AFE778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA16B8, a3);
}

_QWORD *sub_1B1AFE7A8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1AE1D34, (uint64_t)sub_1B1EC26C0, (void (*)(unint64_t, uint64_t, double))sub_1B1A7470C, (uint64_t (*)(_QWORD))sub_1B1AFE7F4);
}

void sub_1B1AFE7F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A118)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleCylinderCollider, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E63AE088);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A118);
  }
}

uint64_t sub_1B1AFE858@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA17C4, a3);
}

_QWORD *sub_1B1AFE888(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC26C0, (void (*)(unint64_t, uint64_t, double))sub_1B1A7470C, (uint64_t (*)(_QWORD))sub_1B1AFE8BC);
}

void sub_1B1AFE8BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A120)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleCylinderCollider, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AE088);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A120);
  }
}

uint64_t sub_1B1AFE920@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSDFCollider, (uint64_t)&off_1E6399358, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AFE950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFEBE8);
}

uint64_t sub_1B1AFE970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSDFCollider, (uint64_t)&off_1E6399358, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFE9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFEB20);
}

uint64_t sub_1B1AFE9C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSDFCollider, (uint64_t)&off_1E6399358, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AFE9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFEA40);
}

uint64_t sub_1B1AFEA10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A96070, a3);
}

_QWORD *sub_1B1AFEA40(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1AE1D34, (uint64_t)sub_1B1EBFDE8, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFEA8C);
}

void sub_1B1AFEA8C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A128)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSDFCollider, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E6399358);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A128);
  }
}

uint64_t sub_1B1AFEAF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9617C, a3);
}

_QWORD *sub_1B1AFEB20(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBFDE8, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFEB54);
}

void sub_1B1AFEB54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A130)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSDFCollider, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6399358);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A130);
  }
}

uint64_t sub_1B1AFEBB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A96288, a3);
}

_QWORD *sub_1B1AFEBE8(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EBFDE8, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFEC1C);
}

void sub_1B1AFEC1C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A138)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSDFCollider, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E6399358);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A138);
  }
}

uint64_t sub_1B1AFEC80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&off_1E639CA10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AFECB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFEF98);
}

uint64_t sub_1B1AFECD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&off_1E639CA10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFED00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFEED0);
}

uint64_t sub_1B1AFED20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&off_1E639CA10, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80C00, a2);
}

uint64_t sub_1B1AFED50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFEDF0);
}

uint64_t sub_1B1AFED70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59D28, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97CB4, a3);
}

uint64_t sub_1B1AFEDA0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_DWORD *)(a1 + 32);
  else
    v6 = 0;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1AFEDF0(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1AE1D34, (uint64_t)sub_1B1EC0558, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFEE3C);
}

void sub_1B1AFEE3C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A140)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&type metadata for CollisionLayerSet, (uint64_t)&off_1E639CA10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A140);
  }
}

uint64_t sub_1B1AFEEA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97DC0, a3);
}

_QWORD *sub_1B1AFEED0(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC0558, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFEF04);
}

void sub_1B1AFEF04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A148)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleMeshCollider, MEMORY[0x1E0DEB188], (uint64_t)&off_1E639CA10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A148);
  }
}

uint64_t sub_1B1AFEF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97ECC, a3);
}

_QWORD *sub_1B1AFEF98(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC0558, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1AFEFCC);
}

void sub_1B1AFEFCC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A150)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E639CA10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A150);
  }
}

uint64_t sub_1B1AFF030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB28AC(a1, v2, (uint64_t)&type metadata for ParticleLocalBoxCollider, a2);
}

uint64_t sub_1B1AFF058(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB265C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF2D8);
}

uint64_t sub_1B1AFF078@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleLocalBoxCollider, (uint64_t)&off_1E63AE6D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFF0A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF210);
}

uint64_t sub_1B1AFF0C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleLocalBoxCollider, (uint64_t)&off_1E63AE6D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFF0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF148);
}

uint64_t sub_1B1AFF118@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1D00, a3);
}

_QWORD *sub_1B1AFF148(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC2860, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AFF17C);
}

void sub_1B1AFF17C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A158)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLocalBoxCollider, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AE6D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A158);
  }
}

uint64_t sub_1B1AFF1E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1E0C, a3);
}

_QWORD *sub_1B1AFF210(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EC2860, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AFF244);
}

void sub_1B1AFF244()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A160)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLocalBoxCollider, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63AE6D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A160);
  }
}

uint64_t sub_1B1AFF2A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F90, (uint64_t)&type metadata for AABB, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1F18, a3);
}

_QWORD *sub_1B1AFF2D8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A7A9B0(a1, *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(__n128 *)*(_QWORD *)(v1 + 16), *(__n128 *)(*(_QWORD *)(v1 + 16) + 16));
}

void sub_1B1AFF2F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A168)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLocalBoxCollider, (uint64_t)&type metadata for AABB, (uint64_t)&off_1E63AE6D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A168);
  }
}

char *sub_1B1AFF35C@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AFF368(uint64_t *a1)
{
  return sub_1B1A25568(*a1);
}

uint64_t sub_1B1AFF38C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for KillShape, (uint64_t)&off_1E63C3E28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1AFF3BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF658);
}

uint64_t sub_1B1AFF3DC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for KillShape, (uint64_t)&off_1E63C3E28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A86CD4, a2);
}

uint64_t sub_1B1AFF40C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF598);
}

uint64_t sub_1B1AFF42C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for KillShape, (uint64_t)&off_1E63C3E28, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1AFF45C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF4AC);
}

uint64_t sub_1B1AFF47C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AABEF0, a3);
}

_QWORD *sub_1B1AFF4AC(_QWORD *a1)
{
  return sub_1B1B01E78(a1, (uint64_t)sub_1B1ADFFBC, (void (*)(unint64_t, uint64_t, double))sub_1B1A73E40, (uint64_t (*)(_QWORD))sub_1B1AFF4D8);
}

void sub_1B1AFF4D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A178)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for KillShape, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63C3E28);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A178);
  }
}

uint64_t sub_1B1AFF53C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A180, (uint64_t)&type metadata for KillShape.Shape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AABFFC, a3);
}

double sub_1B1AFF56C()
{
  uint64_t *v0;

  return sub_1B1AAD524(v0[2], v0[3], v0[4], &qword_1EEF5A188, (uint64_t)&type metadata for KillShape.Shape);
}

_QWORD *sub_1B1AFF598(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADFFBC, (void (*)(unint64_t, uint64_t, double))sub_1B1A73E40, (uint64_t (*)(_QWORD))sub_1B1AFF5C4);
}

void sub_1B1AFF5C4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A190)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for KillShape, (uint64_t)&type metadata for KillShape.Shape, (uint64_t)&off_1E63C3E28);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A190);
  }
}

uint64_t sub_1B1AFF628@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AAC108, a3);
}

_QWORD *sub_1B1AFF658(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADFE94, (void (*)(unint64_t, uint64_t, double))sub_1B1A73E40, (uint64_t (*)(_QWORD))sub_1B1AFF684);
}

void sub_1B1AFF684()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A198)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for KillShape, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63C3E28);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A198);
  }
}

_BYTE *sub_1B1AFF6E8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1AFF6F4(unsigned __int8 *a1, char *a2)
{
  int v2;
  char v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 1)
    LOBYTE(v2) = *a2;
  *a2 = v2;
  return sub_1B1AB00E0(v3);
}

uint64_t sub_1B1AFF728@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1EF0(a1, v2, type metadata accessor for EmitterScript, (uint64_t)&off_1E637A0A8, a2);
}

uint64_t sub_1B1AFF750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF868);
}

uint64_t sub_1B1AFF778@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1E74(a1, v2, type metadata accessor for EmitterScript, (uint64_t)&off_1E637A0A8, a2);
}

uint64_t sub_1B1AFF7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1454(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF7F0);
}

uint64_t sub_1B1AFF7C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF590D0, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8A6A0, a3);
}

uint64_t sub_1B1AFF7F0(uint64_t a1)
{
  return sub_1B1B0847C(a1, sub_1B1A7DB3C);
}

uint64_t sub_1B1AFF80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1B0, (uint64_t)&type metadata for Language, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8A7AC, a3);
}

double sub_1B1AFF83C()
{
  uint64_t *v0;

  return sub_1B1AAD524(v0[2], v0[3], v0[4], &qword_1EEF5A1B8, (uint64_t)&type metadata for Language);
}

uint64_t sub_1B1AFF868(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A762DC);
}

uint64_t sub_1B1AFF884(char *a1, char *a2)
{
  char v2;
  char v3;

  v2 = *a1;
  v3 = *a2;
  *a2 = v2;
  return sub_1B1AB0434(v3);
}

uint64_t sub_1B1AFF8B0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1EF0(a1, v2, type metadata accessor for ParticleInitScript, (uint64_t)&off_1E6394B78, a2);
}

uint64_t sub_1B1AFF8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFFA10);
}

uint64_t sub_1B1AFF8FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *a2 = v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1AFF90C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1B1AFF94C@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1E74(a1, v2, type metadata accessor for ParticleInitScript, (uint64_t)&off_1E6394B78, a2);
}

uint64_t sub_1B1AFF974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1454(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFF9C4);
}

uint64_t sub_1B1AFF994@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF590D0, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A92F84, a3);
}

uint64_t sub_1B1AFF9C4(uint64_t a1)
{
  return sub_1B1B0847C(a1, sub_1B1A7EAB4);
}

uint64_t sub_1B1AFF9E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1B0, (uint64_t)&type metadata for Language, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A93090, a3);
}

uint64_t sub_1B1AFFA10(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A783A8);
}

uint64_t sub_1B1AFFA2C@<X0>(uint64_t result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 24);
  return result;
}

uint64_t sub_1B1AFFA38(char *a1, uint64_t a2)
{
  char v2;
  char v3;

  v2 = *a1;
  v3 = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a2 + 24) = v2;
  return sub_1B1AB073C(v3);
}

uint64_t sub_1B1AFFA64@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1EF0(a1, v2, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1E639E488, a2);
}

uint64_t sub_1B1AFFA8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFFB78);
}

uint64_t sub_1B1AFFAB4@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1E74(a1, v2, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1E639E488, a2);
}

uint64_t sub_1B1AFFADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1454(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFFB2C);
}

uint64_t sub_1B1AFFAFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF590D0, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99CC8, a3);
}

uint64_t sub_1B1AFFB2C(uint64_t a1)
{
  return sub_1B1B0847C(a1, sub_1B1A7FB00);
}

uint64_t sub_1B1AFFB48@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1B0, (uint64_t)&type metadata for Language, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99DD4, a3);
}

uint64_t sub_1B1AFFB78(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7938C);
}

uint64_t sub_1B1AFFB94(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(a1, **(unsigned __int8 **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1B1AFFBB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1AFFBE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFFD68);
}

uint64_t sub_1B1AFFC08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1AFFC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1AFFC80);
}

uint64_t sub_1B1AFFC58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9BBE8, a3);
}

_QWORD *sub_1B1AFFC80(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AFFCB4);
}

void sub_1B1AFFCB4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A1E8)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticlePointRenderer, v2, (uint64_t)&off_1E63A4DD0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A1E8);
  }
}

uint64_t sub_1B1AFFD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9BCDC, a3);
}

_QWORD *sub_1B1AFFD68(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1AFFD9C);
}

void sub_1B1AFFD9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A1F0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A1F0);
  }
}

uint64_t sub_1B1AFFE00@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 24))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1B1AFFE3C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 16))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1AFFE70()
{
  return 16;
}

__n128 sub_1B1AFFE7C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1AFFE88@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1B0081C(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1B1D24830, a3);
}

uint64_t sub_1B1AFFE94()
{
  return 16;
}

__n128 sub_1B1AFFEA0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1AFFEAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1AFFEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B00D64);
}

uint64_t sub_1B1AFFEFC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 32))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1B1AFFF34(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 40))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1AFFF68()
{
  return 16;
}

__n128 sub_1B1AFFF74(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1AFFF80@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1B0081C(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1B1D2480C, a3);
}

uint64_t sub_1B1AFFF8C()
{
  return 16;
}

__n128 sub_1B1AFFF98(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1AFFFA4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 32))(*(_QWORD *)(a2 + a1 - 16));
  *(_DWORD *)a3 = result;
  *(_BYTE *)(a3 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t sub_1B1AFFFE8(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(unint64_t, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 104))(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32), *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1B00034()
{
  return 16;
}

__n128 sub_1B1B00040(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B0004C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1A64C60(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1B1B0007C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A64C8C(*a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_1B1B000A8()
{
  return 16;
}

__n128 sub_1B1B000B4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B000C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B000F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B00C9C);
}

uint64_t sub_1B1B00110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

uint64_t sub_1B1B00140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B00BD4);
}

void sub_1B1B00160(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  *a3 = (*(float (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 40))(*(_QWORD *)(a2 + a1 - 16));
}

uint64_t sub_1B1B0019C(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(*(_QWORD *)(a4 + a3 - 8) + 120))(*(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1B1B001D4()
{
  return 16;
}

__n128 sub_1B1B001E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B001EC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 56))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B1B00228(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 64))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1B0025C()
{
  return 16;
}

__n128 sub_1B1B00268(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B00274@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B002A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B00B0C);
}

uint64_t sub_1B1B002C4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 80))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B1B00300(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 88))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1B00334()
{
  return 16;
}

__n128 sub_1B1B00340(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B0034C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1A5F1A8(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B1B00380()
{
  return 16;
}

__n128 sub_1B1B0038C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B00398@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8) + 64))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1B1B003D4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 136))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1B00408()
{
  return 16;
}

__n128 sub_1B1B00414(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B00420@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1A64D20(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1B1B00450(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A64D58(*a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_1B1B0047C()
{
  return 16;
}

__n128 sub_1B1B00488(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B00494@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B004C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B00A44);
}

uint64_t sub_1B1B004E4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _DWORD *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 152))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1B1B0051C(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 160))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1B00550()
{
  return 16;
}

__n128 sub_1B1B0055C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B00568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A812A8, a2);
}

uint64_t sub_1B1B00598(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B00964);
}

uint64_t sub_1B1B005B8@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 176))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result;
  return result;
}

uint64_t sub_1B1B005F0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 184))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1B00624()
{
  return 16;
}

__n128 sub_1B1B00630(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B0063C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1A64DAC(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(a2 + a1 - 8));
  *a3 = result;
  return result;
}

uint64_t sub_1B1B0066C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1A64DC8(*a1, *(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8));
}

uint64_t sub_1B1B00698()
{
  return 16;
}

__n128 sub_1B1B006A4(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B006B0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&off_1E63A4DD0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84B78, a2);
}

uint64_t sub_1B1B006E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0089C);
}

uint64_t sub_1B1B00700@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 200))(*(_QWORD *)(a2 + a1 - 16));
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B1B0073C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a4 + a3 - 8) + 208))(*a1, *(_QWORD *)(a4 + a3 - 16));
}

uint64_t sub_1B1B00770()
{
  return 16;
}

__n128 sub_1B1B0077C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

void sub_1B1B00788(uint64_t a1@<X1>, uint64_t a2@<X2>, float *a3@<X8>)
{
  *a3 = (*(float (**)(_QWORD))(*(_QWORD *)(a2 + a1 - 8) + 224))(*(_QWORD *)(a2 + a1 - 16));
}

uint64_t sub_1B1B007C0(float *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, float))(*(_QWORD *)(a4 + a3 - 8) + 232))(*(_QWORD *)(a4 + a3 - 16), *(_QWORD *)(a4 + a3 - 8), *a1);
}

uint64_t sub_1B1B007F8()
{
  return 16;
}

__n128 sub_1B1B00804(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B00810@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1B0081C(a1, a2, (uint64_t (*)(_QWORD, _QWORD))sub_1B1D248B0, a3);
}

uint64_t sub_1B1B0081C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t (*a3)(_QWORD, _QWORD)@<X3>, _BYTE *a4@<X8>)
{
  uint64_t result;

  result = a3(*(_QWORD *)(a2 + a1 - 16), *(_QWORD *)(*(_QWORD *)(a2 + a1 - 8) + 8));
  *a4 = result & 1;
  return result;
}

uint64_t sub_1B1B00854()
{
  return 16;
}

__n128 sub_1B1B00860(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B1B0086C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1F8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9BDE8, a3);
}

_QWORD *sub_1B1B0089C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B008D0);
}

void sub_1B1B008D0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A208)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A208);
  }
}

uint64_t sub_1B1B00934@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9BEF4, a3);
}

_QWORD *sub_1B1B00964(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1ADF784, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B009B0);
}

void sub_1B1B009B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A210)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A210);
  }
}

uint64_t sub_1B1B00A14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C000, a3);
}

_QWORD *sub_1B1B00A44(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B00A78);
}

void sub_1B1B00A78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A228)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A228);
  }
}

uint64_t sub_1B1B00ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C10C, a3);
}

_QWORD *sub_1B1B00B0C(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B00B40);
}

void sub_1B1B00B40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A230)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A230);
  }
}

uint64_t sub_1B1B00BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF592F8, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C218, a3);
}

_QWORD *sub_1B1B00BD4(_QWORD *a1)
{
  return sub_1B1B057F8(a1, (uint64_t)sub_1B1AE65D0, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B00C08);
}

void sub_1B1B00C08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A238)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&type metadata for BlendMode, (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A238);
  }
}

uint64_t sub_1B1B00C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C324, a3);
}

_QWORD *sub_1B1B00C9C(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B00CD0);
}

void sub_1B1B00CD0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A240)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A240);
  }
}

uint64_t sub_1B1B00D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C430, a3);
}

_QWORD *sub_1B1B00D64(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC12A4, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B00D98);
}

void sub_1B1B00D98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A248)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePointRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63A4DD0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A248);
  }
}

uint64_t sub_1B1B00DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B00E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B00E7C);
}

uint64_t sub_1B1B00E4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97454, a3);
}

_QWORD *sub_1B1B00E7C(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B00EB0);
}

void sub_1B1B00EB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A250)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A250);
  }
}

uint64_t sub_1B1B00F14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B00F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0163C);
}

uint64_t sub_1B1B00F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B00F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01574);
}

uint64_t sub_1B1B00FB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

uint64_t sub_1B1B00FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B014AC);
}

uint64_t sub_1B1B01004@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B01034(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B013E4);
}

uint64_t sub_1B1B01054@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B01084(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0131C);
}

uint64_t sub_1B1B010A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A812A8, a2);
}

uint64_t sub_1B1B010D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0123C);
}

uint64_t sub_1B1B010F4@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&off_1E639C780, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84B78, a2);
}

uint64_t sub_1B1B01124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01174);
}

uint64_t sub_1B1B01144@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1F8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97560, a3);
}

_QWORD *sub_1B1B01174(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B011A8);
}

void sub_1B1B011A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A258)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A258);
  }
}

uint64_t sub_1B1B0120C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9766C, a3);
}

_QWORD *sub_1B1B0123C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1ADF784, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B01288);
}

void sub_1B1B01288()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A260)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A260);
  }
}

uint64_t sub_1B1B012EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97778, a3);
}

_QWORD *sub_1B1B0131C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B01350);
}

void sub_1B1B01350()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A268)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A268);
  }
}

uint64_t sub_1B1B013B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97884, a3);
}

_QWORD *sub_1B1B013E4(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B01418);
}

void sub_1B1B01418()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A270)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A270);
  }
}

uint64_t sub_1B1B0147C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF592F8, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97990, a3);
}

_QWORD *sub_1B1B014AC(_QWORD *a1)
{
  return sub_1B1B057F8(a1, (uint64_t)sub_1B1AE65D0, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B014E0);
}

void sub_1B1B014E0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A278)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&type metadata for BlendMode, (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A278);
  }
}

uint64_t sub_1B1B01544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97A9C, a3);
}

_QWORD *sub_1B1B01574(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B015A8);
}

void sub_1B1B015A8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A280)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A280);
  }
}

uint64_t sub_1B1B0160C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97BA8, a3);
}

_QWORD *sub_1B1B0163C(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC03F4, (void (*)(unint64_t, uint64_t, double))sub_1B1A73404, (uint64_t (*)(_QWORD))sub_1B1B01670);
}

void sub_1B1B01670()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A288)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleLineRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E639C780);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A288);
  }
}

uint64_t sub_1B1B016D4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + 28) == -1 && *(_DWORD *)(result + 32) == 0;
  return result;
}

uint64_t sub_1B1B016FC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_1B1B0170C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B0173C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0228C);
}

uint64_t sub_1B1B0175C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0C18(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(_QWORD))type metadata accessor for MTLCullMode, a2);
}

uint64_t sub_1B1B0178C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0221C);
}

uint64_t sub_1B1B017AC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 96);
  return result;
}

uint64_t sub_1B1B017B8(uint64_t *a1)
{
  return sub_1B1A669E0(*a1);
}

uint64_t sub_1B1B017DC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8541C, a2);
}

uint64_t sub_1B1B0180C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02130);
}

uint64_t sub_1B1B0182C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 76);
  return result;
}

uint64_t sub_1B1B01838(uint64_t *a1)
{
  return sub_1B1A66A00(*a1);
}

uint64_t sub_1B1B0185C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85314, a2);
}

uint64_t sub_1B1B0188C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02044);
}

uint64_t sub_1B1B018AC@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 76) == 2;
  return result;
}

uint64_t sub_1B1B018C0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1B018F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01F30);
}

uint64_t sub_1B1B01918@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B01948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01E4C);
}

uint64_t sub_1B1B01968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B01998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01D8C);
}

uint64_t sub_1B1B019B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1B019E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01CAC);
}

uint64_t sub_1B1B01A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B01A38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01BC8);
}

uint64_t sub_1B1B01A58@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 138);
  return result;
}

uint64_t sub_1B1B01A64(uint64_t *a1)
{
  return sub_1B1A66A20(*a1);
}

uint64_t sub_1B1B01A88@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84480, a2);
}

uint64_t sub_1B1B01AB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B01B08);
}

uint64_t sub_1B1B01AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59770, (uint64_t)&type metadata for TextureChannel, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98408, a3);
}

_QWORD *sub_1B1B01B08(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B01B34);
}

void sub_1B1B01B34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A290)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&type metadata for TextureChannel, (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A290);
  }
}

uint64_t sub_1B1B01B98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98514, a3);
}

_QWORD *sub_1B1B01BC8(_QWORD *a1)
{
  return sub_1B1B01BF4(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B01C20);
}

_QWORD *sub_1B1B01BF4(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A7527C(a1, **(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1B01C20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A298)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A298);
  }
}

uint64_t sub_1B1B01C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98620, a3);
}

_QWORD *sub_1B1B01CAC(_QWORD *a1)
{
  return sub_1B1AF5980(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B01CD8);
}

void sub_1B1B01CD8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A2A0)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleQuadRenderer, v2, (uint64_t)&off_1E639D210);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A2A0);
  }
}

uint64_t sub_1B1B01D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98714, a3);
}

_QWORD *sub_1B1B01D8C(_QWORD *a1)
{
  return sub_1B1B08044(a1, (uint64_t)sub_1B1ADFCB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B01DB8);
}

void sub_1B1B01DB8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A2A8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A2A8);
  }
}

uint64_t sub_1B1B01E1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98820, a3);
}

_QWORD *sub_1B1B01E4C(_QWORD *a1)
{
  return sub_1B1B01E78(a1, (uint64_t)sub_1B1ADFFBC, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B01EA4);
}

_QWORD *sub_1B1B01E78(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A75700(a1, **(_BYTE **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1B01EA4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A2B0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A2B0);
  }
}

uint64_t sub_1B1B01F08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9892C, a3);
}

_QWORD *sub_1B1B01F30(_QWORD *a1)
{
  return sub_1B1AE0D84(a1, (uint64_t)sub_1B1AE0BB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B01F64);
}

void sub_1B1B01F64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A2B8)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleQuadRenderer, v2, (uint64_t)&off_1E639D210);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A2B8);
  }
}

uint64_t sub_1B1B01FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A2C0, (uint64_t)&type metadata for ParticleOrientationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98A20, a3);
}

double sub_1B1B02018()
{
  uint64_t *v0;

  return sub_1B1AAD6E4(v0[2], v0[3], v0[4], &qword_1EEF5A2C8, (uint64_t)&type metadata for ParticleOrientationMode);
}

_QWORD *sub_1B1B02044(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B02070);
}

void sub_1B1B02070()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A2D0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&type metadata for ParticleOrientationMode, (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A2D0);
  }
}

uint64_t sub_1B1B020D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A2D8, (uint64_t)&type metadata for ParticleQuadRenderer.Shape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98B2C, a3);
}

double sub_1B1B02104()
{
  uint64_t *v0;

  return sub_1B1AAD524(v0[2], v0[3], v0[4], &qword_1EEF5A2E0, (uint64_t)&type metadata for ParticleQuadRenderer.Shape);
}

_QWORD *sub_1B1B02130(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B0215C);
}

void sub_1B1B0215C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A2E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&type metadata for ParticleQuadRenderer.Shape, (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A2E8);
  }
}

uint64_t sub_1B1B021C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59500, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98C38, a3);
}

double sub_1B1B021F0()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF59508, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode);
}

uint64_t sub_1B1B0221C(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A791C8);
}

void sub_1B1B02238(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A2F0, (uint64_t (*)(uint64_t))type metadata accessor for MTLCullMode, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210);
}

uint64_t sub_1B1B0225C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98D44, a3);
}

_QWORD *sub_1B1B0228C(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADFE94, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B022B8);
}

void sub_1B1B022B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A2F8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A2F8);
  }
}

uint64_t sub_1B1B0231C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

uint64_t sub_1B1B0234C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B026F8);
}

uint64_t sub_1B1B0236C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B0239C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02638);
}

uint64_t sub_1B1B023BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A812A8, a2);
}

uint64_t sub_1B1B023EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0254C);
}

uint64_t sub_1B1B0240C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&off_1E639D210, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84B78, a2);
}

uint64_t sub_1B1B0243C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0248C);
}

uint64_t sub_1B1B0245C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1F8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98E50, a3);
}

_QWORD *sub_1B1B0248C(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B024B8);
}

void sub_1B1B024B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A300)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A300);
  }
}

uint64_t sub_1B1B0251C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A98F5C, a3);
}

_QWORD *sub_1B1B0254C(_QWORD *a1)
{
  return sub_1B1B02578(a1, (uint64_t)sub_1B1ADF784, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B025A4);
}

_QWORD *sub_1B1B02578(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A75874(a1, **(_DWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1B025A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A308)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A308);
  }
}

uint64_t sub_1B1B02608@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99068, a3);
}

_QWORD *sub_1B1B02638(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADF68C, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B02664);
}

void sub_1B1B02664()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A310)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A310);
  }
}

uint64_t sub_1B1B026C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF592F8, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A99174, a3);
}

_QWORD *sub_1B1B026F8(_QWORD *a1)
{
  return sub_1B1AF0318(a1, (uint64_t)sub_1B1AE65D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A72FCC, (uint64_t (*)(_QWORD))sub_1B1B02724);
}

void sub_1B1B02724()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A318)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleQuadRenderer, (uint64_t)&type metadata for BlendMode, (uint64_t)&off_1E639D210);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A318);
  }
}

uint64_t sub_1B1B02788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B027B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03060);
}

uint64_t sub_1B1B027D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B02808(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02F98);
}

uint64_t sub_1B1B02828@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

uint64_t sub_1B1B02858(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02EBC);
}

uint64_t sub_1B1B02878@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B028A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02DC8);
}

uint64_t sub_1B1B028C8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B028F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02D00);
}

uint64_t sub_1B1B02918@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B02948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02C38);
}

uint64_t sub_1B1B02968@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A812A8, a2);
}

uint64_t sub_1B1B02998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02B2C);
}

uint64_t sub_1B1B029B8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&off_1E6398B50, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84B78, a2);
}

uint64_t sub_1B1B029E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B02A64);
}

uint64_t sub_1B1B02A08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1F8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A952EC, a3);
}

double sub_1B1B02A38()
{
  uint64_t *v0;

  return sub_1B1AAD524(v0[2], v0[3], v0[4], &qword_1EEF5A200, (uint64_t)&type metadata for ParticleAnimationMode);
}

_QWORD *sub_1B1B02A64(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B02A98);
}

void sub_1B1B02A98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A320)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A320);
  }
}

uint64_t sub_1B1B02AFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A953F8, a3);
}

_QWORD *sub_1B1B02B2C(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1AE1D34, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B02B78);
}

void sub_1B1B02B78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A328)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A328);
  }
}

uint64_t sub_1B1B02BDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A95504, a3);
}

double sub_1B1B02C0C()
{
  uint64_t *v0;

  return sub_1B1AADFAC(v0[2], v0[3], v0[4], &qword_1EEF5A220, (uint64_t)&type metadata for ParticleSortMode);
}

_QWORD *sub_1B1B02C38(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B02C6C);
}

void sub_1B1B02C6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A330)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A330);
  }
}

uint64_t sub_1B1B02CD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A95610, a3);
}

_QWORD *sub_1B1B02D00(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B02D34);
}

void sub_1B1B02D34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A338)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A338);
  }
}

uint64_t sub_1B1B02D98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9571C, a3);
}

_QWORD *sub_1B1B02DC8(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B02DFC);
}

void sub_1B1B02DFC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A340)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A340);
  }
}

uint64_t sub_1B1B02E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF592F8, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A95828, a3);
}

double sub_1B1B02E90()
{
  uint64_t *v0;

  return sub_1B1AADA80(v0[2], v0[3], v0[4], &qword_1EEF59300, (uint64_t)&type metadata for BlendMode);
}

_QWORD *sub_1B1B02EBC(_QWORD *a1)
{
  return sub_1B1B057F8(a1, (uint64_t)sub_1B1B02EF0, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B02F04);
}

uint64_t sub_1B1B02EF0()
{
  return sub_1B1AE65D0();
}

void sub_1B1B02F04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A348)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&type metadata for BlendMode, (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A348);
  }
}

uint64_t sub_1B1B02F68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A95934, a3);
}

_QWORD *sub_1B1B02F98(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B02FCC);
}

void sub_1B1B02FCC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A350)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A350);
  }
}

uint64_t sub_1B1B03030@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A95A40, a3);
}

_QWORD *sub_1B1B03060(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EBFB70, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B03094);
}

void sub_1B1B03094()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A358)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleBoxRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E6398B50);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A358);
  }
}

uint64_t sub_1B1B030F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B03128(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03968);
}

uint64_t sub_1B1B03148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B03178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B038A0);
}

uint64_t sub_1B1B03198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

uint64_t sub_1B1B031C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B037D8);
}

uint64_t sub_1B1B031E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B03218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B036E0);
}

uint64_t sub_1B1B03238@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B03268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03618);
}

uint64_t sub_1B1B03288@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B032B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03550);
}

uint64_t sub_1B1B032D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A812A8, a2);
}

uint64_t sub_1B1B03308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03470);
}

uint64_t sub_1B1B03328@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84B78, a2);
}

uint64_t sub_1B1B03358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B033A8);
}

uint64_t sub_1B1B03378@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1F8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9EA74, a3);
}

_QWORD *sub_1B1B033A8(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B033DC);
}

void sub_1B1B033DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A360)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A360);
  }
}

uint64_t sub_1B1B03440@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9EB80, a3);
}

_QWORD *sub_1B1B03470(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1AE1D34, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B034BC);
}

void sub_1B1B034BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A368)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A368);
  }
}

uint64_t sub_1B1B03520@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9EC8C, a3);
}

_QWORD *sub_1B1B03550(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B03584);
}

void sub_1B1B03584()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A370)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A370);
  }
}

uint64_t sub_1B1B035E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9ED98, a3);
}

_QWORD *sub_1B1B03618(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B0364C);
}

void sub_1B1B0364C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A378)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A378);
  }
}

uint64_t sub_1B1B036B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9EEA4, a3);
}

_QWORD *sub_1B1B036E0(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B03714);
}

void sub_1B1B03714()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A380)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A380);
  }
}

uint64_t sub_1B1B03778@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF592F8, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9EFB0, a3);
}

uint64_t sub_1B1B037A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&off_1E63A9130, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

_QWORD *sub_1B1B037D8(_QWORD *a1)
{
  return sub_1B1B057F8(a1, (uint64_t)sub_1B1B02EF0, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B0380C);
}

void sub_1B1B0380C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A388)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&type metadata for BlendMode, (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A388);
  }
}

uint64_t sub_1B1B03870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F0BC, a3);
}

_QWORD *sub_1B1B038A0(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B038D4);
}

void sub_1B1B038D4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A390)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A390);
  }
}

uint64_t sub_1B1B03938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F1C8, a3);
}

_QWORD *sub_1B1B03968(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC1B80, (void (*)(unint64_t, uint64_t, double))sub_1B1A73150, (uint64_t (*)(_QWORD))sub_1B1B0399C);
}

void sub_1B1B0399C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A398)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSphereRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63A9130);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A398);
  }
}

uint64_t sub_1B1B03A00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleSurfaceRenderer, (uint64_t)&off_1E63AC728, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B03A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03A80);
}

uint64_t sub_1B1B03A50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0934, a3);
}

_QWORD *sub_1B1B03A80(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC22AC, (void (*)(unint64_t, uint64_t, double))sub_1B1A7380C, (uint64_t (*)(_QWORD))sub_1B1B03AB4);
}

void sub_1B1B03AB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3A0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleSurfaceRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AC728);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3A0);
  }
}

uint64_t sub_1B1B03B18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleVolumetricRenderer, (uint64_t)&off_1E63B22D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B03B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03B98);
}

uint64_t sub_1B1B03B68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4C68, a3);
}

_QWORD *sub_1B1B03B98(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1ADFCB4, (uint64_t)sub_1B1EC35C8, (void (*)(unint64_t, uint64_t, double))sub_1B1A734B4, (uint64_t (*)(_QWORD))sub_1B1B03BCC);
}

void sub_1B1B03BCC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3A8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleVolumetricRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B22D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3A8);
  }
}

uint64_t sub_1B1B03C30@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 36);
  return result;
}

uint64_t sub_1B1B03C3C(uint64_t *a1)
{
  return sub_1B1A6792C(*a1);
}

uint64_t sub_1B1B03C60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B03C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03E24);
}

uint64_t sub_1B1B03CB0@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A861E8, a2);
}

uint64_t sub_1B1B03CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B03D5C);
}

uint64_t sub_1B1B03D00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A3B8, (uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3ACC, a3);
}

double sub_1B1B03D30()
{
  uint64_t *v0;

  return sub_1B1AAD6E4(v0[2], v0[3], v0[4], &qword_1EEF5A3C0, (uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape);
}

_QWORD *sub_1B1B03D5C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B03D90);
}

void sub_1B1B03D90()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3C8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape, (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3C8);
  }
}

uint64_t sub_1B1B03DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3BD8, a3);
}

_QWORD *sub_1B1B03E24(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADFE94, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B03E58);
}

void sub_1B1B03E58()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3D0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3D0);
  }
}

uint64_t sub_1B1B03EBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B03EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B045E4);
}

uint64_t sub_1B1B03F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

uint64_t sub_1B1B03F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0451C);
}

uint64_t sub_1B1B03F5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B03F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B04454);
}

uint64_t sub_1B1B03FAC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B03FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0438C);
}

uint64_t sub_1B1B03FFC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B0402C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B042C4);
}

uint64_t sub_1B1B0404C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A812A8, a2);
}

uint64_t sub_1B1B0407C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B041E4);
}

uint64_t sub_1B1B0409C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&off_1E63B0AF0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84B78, a2);
}

uint64_t sub_1B1B040CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0411C);
}

uint64_t sub_1B1B040EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1F8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3CE4, a3);
}

_QWORD *sub_1B1B0411C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B04150);
}

void sub_1B1B04150()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3D8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3D8);
  }
}

uint64_t sub_1B1B041B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3DF0, a3);
}

_QWORD *sub_1B1B041E4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1ADF784, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B04230);
}

void sub_1B1B04230()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3E0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3E0);
  }
}

uint64_t sub_1B1B04294@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA3EFC, a3);
}

_QWORD *sub_1B1B042C4(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B042F8);
}

void sub_1B1B042F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3E8);
  }
}

uint64_t sub_1B1B0435C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4008, a3);
}

_QWORD *sub_1B1B0438C(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B043C0);
}

void sub_1B1B043C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3F0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3F0);
  }
}

uint64_t sub_1B1B04424@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4114, a3);
}

_QWORD *sub_1B1B04454(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B04488);
}

void sub_1B1B04488()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A3F8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A3F8);
  }
}

uint64_t sub_1B1B044EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF592F8, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4220, a3);
}

_QWORD *sub_1B1B0451C(_QWORD *a1)
{
  return sub_1B1B057F8(a1, (uint64_t)sub_1B1AE65D0, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B04550);
}

void sub_1B1B04550()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A400)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&type metadata for BlendMode, (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A400);
  }
}

uint64_t sub_1B1B045B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA432C, a3);
}

_QWORD *sub_1B1B045E4(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC31A0, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B04618);
}

void sub_1B1B04618()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A408)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticlePrimitiveRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63B0AF0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A408);
  }
}

uint64_t sub_1B1B0467C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleAOSphereRenderer, (uint64_t)&off_1E63ADAB8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B046AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B046FC);
}

uint64_t sub_1B1B046CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0F7C, a3);
}

_QWORD *sub_1B1B046FC(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC24B8, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1B04730);
}

void sub_1B1B04730()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A410)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleAOSphereRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63ADAB8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A410);
  }
}

uint64_t sub_1B1B04794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleAOBoxRenderer, (uint64_t)&off_1E63A3BE0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B047C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B04814);
}

uint64_t sub_1B1B047E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B064, a3);
}

_QWORD *sub_1B1B04814(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC0EB8, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1B04848);
}

void sub_1B1B04848()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A418)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleAOBoxRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A3BE0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A418);
  }
}

uint64_t sub_1B1B048AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleDecalRenderer, (uint64_t)&off_1E63A4800, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B048DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0492C);
}

uint64_t sub_1B1B048FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9B7B8, a3);
}

_QWORD *sub_1B1B0492C(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE16F8, (uint64_t)sub_1B1EC1164, (void (*)(unint64_t, uint64_t, double))sub_1B1A73AC4, (uint64_t (*)(_QWORD))sub_1B1B04960);
}

void sub_1B1B04960()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A420)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleDecalRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63A4800);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A420);
  }
}

uint64_t sub_1B1B049C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B049F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05AB8);
}

uint64_t sub_1B1B04A14@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 36);
  return result;
}

uint64_t sub_1B1B04A20(uint64_t *a1)
{
  return sub_1B1A6792C(*a1);
}

uint64_t sub_1B1B04A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B04A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B059F0);
}

uint64_t sub_1B1B04A94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85314, a2);
}

uint64_t sub_1B1B04AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05928);
}

uint64_t sub_1B1B04AE4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (*(_BYTE *)(result + 12) == 1)
    *a2 = *(unsigned int *)(result + 8);
  else
    *a2 = 3;
  return result;
}

uint64_t sub_1B1B04B08(uint64_t *a1)
{
  return sub_1B1A69C40(*a1);
}

uint64_t sub_1B1B04B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB251C(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84D88, a2);
}

uint64_t sub_1B1B04B5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB25A8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B057C4);
}

uint64_t sub_1B1B04B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B04BAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B056A4);
}

uint64_t sub_1B1B04BCC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B04BFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B055DC);
}

uint64_t sub_1B1B04C1C@<X0>(uint64_t result@<X0>, char *a2@<X8>)
{
  char v2;

  v2 = *(_BYTE *)(result + 20);
  if (*(_QWORD *)(result + 88))
    v2 = 5;
  if (*(uint64_t *)(result + 96) > 1)
    v2 = 5;
  *a2 = v2;
  return result;
}

_BYTE *sub_1B1B04C40(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(a2 + 20) = *result;
  return result;
}

uint64_t sub_1B1B04C4C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  v2 = *(char *)(result + 20);
  if (*(_QWORD *)(result + 88))
    v2 = 5;
  if (*(uint64_t *)(result + 96) > 1)
    v2 = 5;
  *a2 = v2;
  return result;
}

uint64_t sub_1B1B04C70(uint64_t *a1)
{
  return sub_1B1A64D40(*a1);
}

uint64_t sub_1B1B04C94@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B04CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05514);
}

uint64_t sub_1B1B04CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A812A8, a2);
}

uint64_t sub_1B1B04D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB113C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05434);
}

uint64_t sub_1B1B04D34@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 28);
  return result;
}

uint64_t sub_1B1B04D40(uint64_t *a1)
{
  return sub_1B1A69CA0(*a1);
}

uint64_t sub_1B1B04D64@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84B78, a2);
}

uint64_t sub_1B1B04D94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0536C);
}

uint64_t sub_1B1B04DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1B04DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05254);
}

char *sub_1B1B04E04@<X0>(char *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1B1B04E10(uint64_t *a1)
{
  return sub_1B1A25528(*a1);
}

uint64_t sub_1B1B04E34@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85C54, a2);
}

uint64_t sub_1B1B04E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B0518C);
}

uint64_t sub_1B1B04E84@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 64) == 0;
  return result;
}

uint64_t sub_1B1B04E98(uint64_t *a1)
{
  return sub_1B1A25568(*a1);
}

uint64_t sub_1B1B04EBC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85B4C, a2);
}

uint64_t sub_1B1B04EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05098);
}

uint64_t sub_1B1B04F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&off_1E63A8B18, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1B04F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B04F84);
}

uint64_t sub_1B1B04F5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9D9CC, a3);
}

_QWORD *sub_1B1B04F84(_QWORD *a1)
{
  return sub_1B1AE45C4(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B04FB8);
}

void sub_1B1B04FB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A438)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleRibbonRenderer, v2, (uint64_t)&off_1E63A8B18);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A438);
  }
}

uint64_t sub_1B1B0503C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A440, (uint64_t)&type metadata for ParticleRibbonTextureMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9DAC0, a3);
}

double sub_1B1B0506C()
{
  uint64_t *v0;

  return sub_1B1AAD524(v0[2], v0[3], v0[4], &qword_1EEF5A448, (uint64_t)&type metadata for ParticleRibbonTextureMode);
}

_QWORD *sub_1B1B05098(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B050CC);
}

void sub_1B1B050CC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A450)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&type metadata for ParticleRibbonTextureMode, (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A450);
  }
}

uint64_t sub_1B1B05130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A458, (uint64_t)&type metadata for ParticleRibbonProfile, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9DBCC, a3);
}

double sub_1B1B05160()
{
  uint64_t *v0;

  return sub_1B1AAD6E4(v0[2], v0[3], v0[4], &qword_1EEF5A460, (uint64_t)&type metadata for ParticleRibbonProfile);
}

_QWORD *sub_1B1B0518C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B051C0);
}

void sub_1B1B051C0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A468)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&type metadata for ParticleRibbonProfile, (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A468);
  }
}

uint64_t sub_1B1B05224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9DCD8, a3);
}

_QWORD *sub_1B1B05254(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B05288);
}

void sub_1B1B05288()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A470)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, MEMORY[0x1E0DEB418], (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A470);
  }
}

uint64_t sub_1B1B052EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A1F8, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9DDE4, a3);
}

uint64_t sub_1B1B0531C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 3;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1B0536C(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B053A0);
}

void sub_1B1B053A0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A478)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&type metadata for ParticleAnimationMode, (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A478);
  }
}

uint64_t sub_1B1B05404@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F00, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9DEF0, a3);
}

_QWORD *sub_1B1B05434(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A76DCC(a1, **(_DWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), (uint64_t)sub_1B1ADF784, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B05480);
}

void sub_1B1B05480()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A480)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, MEMORY[0x1E0DEE0F8], (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A480);
  }
}

uint64_t sub_1B1B054E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9DFFC, a3);
}

_QWORD *sub_1B1B05514(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B05548);
}

void sub_1B1B05548()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A488)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A488);
  }
}

uint64_t sub_1B1B055AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E108, a3);
}

_QWORD *sub_1B1B055DC(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B05610);
}

void sub_1B1B05610()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A490)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A490);
  }
}

uint64_t sub_1B1B05674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E214, a3);
}

_QWORD *sub_1B1B056A4(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B056D8);
}

void sub_1B1B056D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A498)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A498);
  }
}

uint64_t sub_1B1B0573C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF592F8, (uint64_t)&type metadata for BlendMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E320, a3);
}

uint64_t sub_1B1B0576C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  int v9;
  char v10;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    LODWORD(v6) = *(_DWORD *)(a1 + 32);
    v7 = *(_BYTE *)(a1 + 36);
  }
  else
  {
    v7 = 0;
  }
  v9 = v6;
  v10 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(v4 + 16))(v3, v5, &v9);
}

_QWORD *sub_1B1B057C4(_QWORD *a1)
{
  return sub_1B1B057F8(a1, (uint64_t)sub_1B1AE65D0, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B05844);
}

_QWORD *sub_1B1B057F8(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A78BB4(a1, **(unsigned int **)(v5 + 16) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v5 + 16) + 4) << 32), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1B05844()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4A0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&type metadata for BlendMode, (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4A0);
  }
}

uint64_t sub_1B1B058A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A2C0, (uint64_t)&type metadata for ParticleOrientationMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E42C, a3);
}

uint64_t sub_1B1B058D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 5;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1B05928(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B0595C);
}

void sub_1B1B0595C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4A8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&type metadata for ParticleOrientationMode, (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4A8);
  }
}

uint64_t sub_1B1B059C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E538, a3);
}

_QWORD *sub_1B1B059F0(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B05A24);
}

void sub_1B1B05A24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4B0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4B0);
  }
}

uint64_t sub_1B1B05A88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9E644, a3);
}

_QWORD *sub_1B1B05AB8(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC19D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A730A0, (uint64_t (*)(_QWORD))sub_1B1B05AEC);
}

void sub_1B1B05AEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4B8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleRibbonRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63A8B18);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4B8);
  }
}

uint64_t sub_1B1B05B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B05B80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05F48);
}

uint64_t sub_1B1B05BA0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 16);
  return result;
}

uint64_t sub_1B1B05BAC(uint64_t *a1)
{
  return sub_1B1A6A37C(*a1);
}

uint64_t sub_1B1B05BD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B05C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05E80);
}

uint64_t sub_1B1B05C20@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B05C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05DB8);
}

uint64_t sub_1B1B05C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&off_1E639CDA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1B05CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B05CF0);
}

uint64_t sub_1B1B05CC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97FD8, a3);
}

_QWORD *sub_1B1B05CF0(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC05C8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B05D24);
}

void sub_1B1B05D24()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4C0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleMeshRenderer, MEMORY[0x1E0DEB418], (uint64_t)&off_1E639CDA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4C0);
  }
}

uint64_t sub_1B1B05D88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A980E4, a3);
}

_QWORD *sub_1B1B05DB8(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC05C8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B05DEC);
}

void sub_1B1B05DEC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4C8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E639CDA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4C8);
  }
}

uint64_t sub_1B1B05E50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A981F0, a3);
}

_QWORD *sub_1B1B05E80(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC05C8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B05EB4);
}

void sub_1B1B05EB4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4D0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleMeshRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E639CDA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4D0);
  }
}

uint64_t sub_1B1B05F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A982FC, a3);
}

_QWORD *sub_1B1B05F48(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC05C8, (void (*)(unint64_t, uint64_t, double))sub_1B1A736B0, (uint64_t (*)(_QWORD))sub_1B1B05F7C);
}

void sub_1B1B05F7C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4D8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleMeshRenderer, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E639CDA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4D8);
  }
}

uint64_t sub_1B1B05FE0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(char *)(result + 8);
  return result;
}

uint64_t sub_1B1B05FEC(uint64_t *a1)
{
  return sub_1B1A6AA58(*a1);
}

uint64_t sub_1B1B06010@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleGaussianRenderer, (uint64_t)&off_1E63AE3C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B06040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06414);
}

uint64_t sub_1B1B06060@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleGaussianRenderer, (uint64_t)&off_1E63AE3C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A84C80, a2);
}

uint64_t sub_1B1B06090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06310);
}

uint64_t sub_1B1B060B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleGaussianRenderer, (uint64_t)&off_1E63AE3C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B060E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06248);
}

uint64_t sub_1B1B06100@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for ParticleGaussianRenderer, (uint64_t)&off_1E63AE3C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B06130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06180);
}

uint64_t sub_1B1B06150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA18D0, a3);
}

_QWORD *sub_1B1B06180(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2730, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1B061B4);
}

void sub_1B1B061B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4E0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleGaussianRenderer, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63AE3C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4E0);
  }
}

uint64_t sub_1B1B06218@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA19DC, a3);
}

_QWORD *sub_1B1B06248(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC2730, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1B0627C);
}

void sub_1B1B0627C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleGaussianRenderer, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AE3C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4E8);
  }
}

uint64_t sub_1B1B062E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A218, (uint64_t)&type metadata for ParticleSortMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1AE8, a3);
}

_QWORD *sub_1B1B06310(_QWORD *a1)
{
  return sub_1B1B06344(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC2730, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1B06380);
}

_QWORD *sub_1B1B06344(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A75FE4(a1, **(_BYTE **)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1B06380()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4F0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleGaussianRenderer, (uint64_t)&type metadata for ParticleSortMode, (uint64_t)&off_1E63AE3C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4F0);
  }
}

uint64_t sub_1B1B063E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA1BF4, a3);
}

_QWORD *sub_1B1B06414(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADEFE0, (uint64_t)sub_1B1EC2730, (void (*)(unint64_t, uint64_t, double))sub_1B1A73C1C, (uint64_t (*)(_QWORD))sub_1B1B06448);
}

void sub_1B1B06448()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A4F8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleGaussianRenderer, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63AE3C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A4F8);
  }
}

uint64_t sub_1B1B064AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for SceneKitAssetInstance, (uint64_t)&off_1E63A60C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80D1C, a2);
}

uint64_t sub_1B1B064DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B066DC);
}

uint64_t sub_1B1B064FC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for SceneKitAssetInstance, (uint64_t)&off_1E63A60C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B0652C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B065A8);
}

uint64_t sub_1B1B0654C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9CC48, a3);
}

double sub_1B1B0657C()
{
  uint64_t *v0;

  return sub_1B1AAD1CC(v0[2], v0[3], v0[4], qword_1EEF5E940, MEMORY[0x1E0DEAFA0]);
}

_QWORD *sub_1B1B065A8(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADF68C, (uint64_t)sub_1B1EC1660, (void (*)(unint64_t, uint64_t, double))sub_1B1A734B4, (uint64_t (*)(_QWORD))sub_1B1B065DC);
}

void sub_1B1B065DC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A500)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for SceneKitAssetInstance, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A60C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A500);
  }
}

uint64_t sub_1B1B06640@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF59018, (uint64_t)&type metadata for Entity, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9CD54, a3);
}

double sub_1B1B06670()
{
  uint64_t *v0;

  return sub_1B1AAD260(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1B0668C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_QWORD *)(a1 + 32);
  else
    v6 = 0;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1B066DC(_QWORD *a1)
{
  return sub_1B1B06710(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC1660, (void (*)(unint64_t, uint64_t, double))sub_1B1A734B4, (uint64_t (*)(_QWORD))sub_1B1B0674C);
}

_QWORD *sub_1B1B06710(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A76468(a1, **(_QWORD **)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1B0674C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A508)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for SceneKitAssetInstance, (uint64_t)&type metadata for Entity, (uint64_t)&off_1E63A60C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A508);
  }
}

uint64_t sub_1B1B067B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1AD0(a1, v2, (uint64_t)&type metadata for SceneFileAsset, a2);
}

uint64_t sub_1B1B067D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1B60(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06828);
}

uint64_t sub_1B1B067F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF593B8, (uint64_t)&type metadata for Asset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8CBF0, a3);
}

uint64_t sub_1B1B06828(uint64_t a1)
{
  return sub_1B1AE7680(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t))sub_1B1A7E1DC);
}

void sub_1B1B06844()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A510)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for SceneFileAsset, (uint64_t)&type metadata for Asset, (uint64_t)&off_1E6380E10);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A510);
  }
}

uint64_t sub_1B1B068B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1AD0(a1, v2, (uint64_t)&type metadata for CSVFileAsset, a2);
}

uint64_t sub_1B1B068DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1B60(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06AC8);
}

uint64_t sub_1B1B068FC@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2708(a1, v2, (uint64_t)&type metadata for CSVFileAsset, (uint64_t)&off_1E6374730, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], a2);
}

uint64_t sub_1B1B06934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B069A0);
}

uint64_t sub_1B1B06954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AEADA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A887F8, a3);
}

uint64_t sub_1B1B0697C()
{
  uint64_t *v0;

  return sub_1B1AAE788(v0[2], v0[3], v0[4], (void (*)(_QWORD))sub_1B1AEAE14);
}

uint64_t sub_1B1B069A0(uint64_t a1)
{
  return sub_1B1B069D4(a1, (uint64_t)sub_1B1AE725C, (uint64_t)sub_1B1EBBBAC, (void (*)(unint64_t, uint64_t, double))sub_1B1A73A1C, (uint64_t (*)(_QWORD))sub_1B1B06A1C);
}

uint64_t sub_1B1B069D4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A7D9CC(**(_QWORD **)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), a2, a3, a4, a5);
}

void sub_1B1B06A1C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A518)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for CSVFileAsset, v2, (uint64_t)&off_1E6374730);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A518);
  }
}

uint64_t sub_1B1B06A98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF593B8, (uint64_t)&type metadata for Asset, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A888EC, a3);
}

uint64_t sub_1B1B06AC8(uint64_t a1)
{
  return sub_1B1AE7680(a1, (uint64_t (*)(_OWORD *, uint64_t, uint64_t))sub_1B1A7D7AC);
}

void sub_1B1B06AE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A520)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CSVFileAsset, (uint64_t)&type metadata for Asset, (uint64_t)&off_1E6374730);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A520);
  }
}

uint64_t sub_1B1B06B4C()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_1B1B06B88@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for SetActive, (uint64_t)&off_1E63C4CB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81084, a2);
}

uint64_t sub_1B1B06BB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06C08);
}

uint64_t sub_1B1B06BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AAC614, a3);
}

_QWORD *sub_1B1B06C08(_QWORD *a1)
{
  return sub_1B1B06C3C(a1, (uint64_t)sub_1B1ADFFBC, (uint64_t)sub_1B1EC5154, (void (*)(unint64_t, uint64_t, double))sub_1B1A73EE4, (uint64_t (*)(_QWORD))sub_1B1B06C78);
}

_QWORD *sub_1B1B06C3C(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A74DF8(a1, **(_BYTE **)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1B06C78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A528)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for SetActive, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63C4CB0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A528);
  }
}

uint64_t sub_1B1B06CDC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = qword_1B2279D80[*(char *)(result + 8)];
  return result;
}

_QWORD *sub_1B1B06CF4(_QWORD *result, uint64_t a2)
{
  char v2;

  if (*result == 2)
  {
    if (*(_BYTE *)(a2 + 8) == 1)
      return result;
    *(_QWORD *)a2 = 0x3F80000000000000;
    v2 = 1;
    goto LABEL_8;
  }
  if (*result != 1)
  {
    *(_QWORD *)a2 = 0;
    v2 = 2;
LABEL_8:
    *(_BYTE *)(a2 + 8) = v2;
    return result;
  }
  if (*(_BYTE *)(a2 + 8))
  {
    *(_QWORD *)a2 = 1065353216;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t sub_1B1B06D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleOpacityEvolution, (uint64_t)&off_1E63AE988, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B06D7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B073EC);
}

uint64_t sub_1B1B06D9C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB209C(a1, v2, a2);
}

uint64_t sub_1B1B06DA4(uint64_t result)
{
  return sub_1B1AB2108(result);
}

uint64_t sub_1B1B06DAC@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  float v2;

  v2 = *(float *)result;
  if (*(_BYTE *)(result + 8))
    v2 = 0.0;
  *a2 = v2;
  return result;
}

unsigned int *sub_1B1B06DC8(unsigned int *result, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 8))
  {
    *(_QWORD *)a2 = *result;
    *(_BYTE *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t sub_1B1B06DE4@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 8) == 0;
  return result;
}

uint64_t sub_1B1B06DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for ParticleOpacityEvolution, (uint64_t)&off_1E63AE988, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B06E28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B07208);
}

uint64_t sub_1B1B06E48@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  float v2;
  float v3;

  v2 = *(float *)result;
  v3 = *(float *)(result + 4);
  if (*(_BYTE *)(result + 8) != 1)
  {
    v2 = 0.0;
    v3 = 1.0;
  }
  *a2 = v2;
  a2[1] = v3;
  return result;
}

_QWORD *sub_1B1B06E6C(_QWORD *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 8) == 1)
  {
    *(_QWORD *)a2 = *result;
    *(_BYTE *)(a2 + 8) = 1;
  }
  return result;
}

uint64_t sub_1B1B06E8C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 8) == 1;
  return result;
}

uint64_t sub_1B1B06EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParticleOpacityEvolution, (uint64_t)&off_1E63AE988, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82178, a2);
}

uint64_t sub_1B1B06ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B070B4);
}

uint64_t sub_1B1B06EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB22E4(a1, v2, (uint64_t)&type metadata for ParticleOpacityEvolution, (uint64_t)&off_1E63AE988, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A82B98, a2);
}

uint64_t sub_1B1B06F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1D44(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B06F68);
}

uint64_t sub_1B1B06F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE6C1C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2024, a3);
}

uint64_t sub_1B1B06F68(uint64_t a1)
{
  return sub_1B1B06F84(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7FFE4);
}

uint64_t sub_1B1B06F84(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(**(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 16), *(unsigned __int8 *)(*(_QWORD *)(v2 + 16) + 24), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1B1B06FC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A538)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleOpacityEvolution, v2, (uint64_t)&off_1E63AE988);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A538);
  }
}

uint64_t sub_1B1B07050()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B0708C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE485C, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2118, a3);
}

_QWORD *sub_1B1B070B4(_QWORD *a1)
{
  return sub_1B1B070E8(a1, (uint64_t)sub_1B1AE20D0, (uint64_t)sub_1B1EC2980, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B07118);
}

_QWORD *sub_1B1B070E8(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A77A54(a1, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), **(float **)(v5 + 16), *(float *)(*(_QWORD *)(v5 + 16) + 4), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1B07118(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A540)
  {
    sub_1B1AED5E4(255, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ParticleOpacityEvolution, v2, (uint64_t)&off_1E63AE988);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A540);
  }
}

uint64_t sub_1B1B0719C(uint64_t *a1, uint64_t a2)
{
  initializeBufferWithCopyOfBuffer for ParticleLifeInit(a2, a1);
  return a2;
}

uint64_t sub_1B1B071D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA220C, a3);
}

_QWORD *sub_1B1B07208(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC2980, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B0723C);
}

void sub_1B1B0723C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A548)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleOpacityEvolution, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AE988);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A548);
  }
}

uint64_t sub_1B1B072A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A550, (uint64_t)&type metadata for EvolutionMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2318, a3);
}

uint64_t sub_1B1B072D0()
{
  uint64_t *v0;

  return sub_1B1AAE1EC(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1B072DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  char v10;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_BYTE *)(a1 + 40);
  }
  else
  {
    v7 = -1;
  }
  v9 = v6;
  v10 = v7;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v4 + 16))(v3, v5, &v9);
}

_QWORD *sub_1B1B07334(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A7AB34(a1, **(_QWORD **)(v1 + 16), *(unsigned __int8 *)(*(_QWORD *)(v1 + 16) + 8), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_1B1B07358()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A560)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleOpacityEvolution, (uint64_t)&type metadata for EvolutionMode, (uint64_t)&off_1E63AE988);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A560);
  }
}

uint64_t sub_1B1B073BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2424, a3);
}

_QWORD *sub_1B1B073EC(_QWORD *a1)
{
  return sub_1B1B07420(a1, (uint64_t)sub_1B1ADFE94, (uint64_t)sub_1B1EC2980, (void (*)(unint64_t, uint64_t, double))sub_1B1A738BC, (uint64_t (*)(_QWORD))sub_1B1B0745C);
}

_QWORD *sub_1B1B07420(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A74C80(a1, **(_QWORD **)(v5 + 16), *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1B0745C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A568)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParticleOpacityEvolution, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63AE988);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A568);
  }
}

uint64_t sub_1B1B074C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for SineMoveAction, (uint64_t)&off_1E6381AB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B074F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B07660);
}

uint64_t sub_1B1B07510@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for SineMoveAction, (uint64_t)&off_1E6381AB0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50], a2);
}

uint64_t sub_1B1B07548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B07590);
}

uint64_t sub_1B1B07568@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8CCFC, a3);
}

uint64_t sub_1B1B07590(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A76F48);
}

void sub_1B1B075AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A570)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for SineMoveAction, v2, (uint64_t)&off_1E6381AB0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A570);
  }
}

uint64_t sub_1B1B07630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8CDF0, a3);
}

_QWORD *sub_1B1B07660(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EBD114, (void (*)(unint64_t, uint64_t, double))sub_1B1A74034, (uint64_t (*)(_QWORD))sub_1B1B07694);
}

void sub_1B1B07694()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A578)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for SineMoveAction, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6381AB0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A578);
  }
}

uint64_t sub_1B1B076F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B07728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B08018);
}

uint64_t sub_1B1B0774C(uint64_t *a1)
{
  return sub_1B1A6D47C(*a1);
}

uint64_t sub_1B1B07770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1B077A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B07F2C);
}

uint64_t sub_1B1B077C0@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB19A0(a1, v2, a2);
}

uint64_t sub_1B1B077C8(uint64_t result)
{
  return sub_1B1AB1A14(result);
}

uint64_t sub_1B1B077D0@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  float v2;

  v2 = *(float *)(result + 24);
  if (*(_BYTE *)(result + 36))
    v2 = 0.0;
  *a2 = v2;
  return result;
}

unsigned int *sub_1B1B077EC(unsigned int *result, uint64_t a2)
{
  if (!*(_BYTE *)(a2 + 36))
  {
    *(_QWORD *)(a2 + 24) = *result;
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 0;
  }
  return result;
}

uint64_t sub_1B1B0780C@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 36) == 0;
  return result;
}

uint64_t sub_1B1B07820@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = 0;
  if (*(_BYTE *)(result + 36) == 1)
  {
    *(float *)&v2 = (float)(int)*(_QWORD *)(result + 24);
    HIDWORD(v2) = HIDWORD(*(_QWORD *)(result + 24));
  }
  *a2 = v2;
  return result;
}

double sub_1B1B07850(_QWORD *a1, uint64_t a2)
{
  double result;

  if (*(_BYTE *)(a2 + 36) == 1)
  {
    result = *(double *)a1;
    *(_QWORD *)(a2 + 24) = (int)COERCE_FLOAT(*a1) | ((unint64_t)HIDWORD(*a1) << 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 1;
  }
  return result;
}

uint64_t sub_1B1B07880@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 36) == 1;
  return result;
}

uint64_t sub_1B1B07894@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1B078C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B07CD0);
}

uint64_t sub_1B1B078E4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = 0;
  if (*(_BYTE *)(result + 36) == 2)
  {
    *(float *)&v2 = (float)(int)*(_QWORD *)(result + 24);
    HIDWORD(v2) = HIDWORD(*(_QWORD *)(result + 24));
  }
  *a2 = v2;
  return result;
}

double sub_1B1B07914(_QWORD *a1, uint64_t a2)
{
  double result;

  if (*(_BYTE *)(a2 + 36) == 2)
  {
    result = *(double *)a1;
    *(_QWORD *)(a2 + 24) = (int)COERCE_FLOAT(*a1) | ((unint64_t)HIDWORD(*a1) << 32);
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 2;
  }
  return result;
}

uint64_t sub_1B1B07944@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 36) == 2;
  return result;
}

uint64_t sub_1B1B07958@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  float v2;

  v2 = *(float *)(result + 24);
  if (*(_BYTE *)(result + 36) != 3)
    v2 = 0.0;
  *a2 = v2;
  return result;
}

unsigned int *sub_1B1B07974(unsigned int *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 36) == 3)
  {
    *(_QWORD *)(a2 + 24) = *result;
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 3;
  }
  return result;
}

uint64_t sub_1B1B07998@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 36) == 3;
  return result;
}

uint64_t sub_1B1B079AC@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  float v2;

  v2 = *(float *)(result + 24);
  if (*(_BYTE *)(result + 36) != 4)
    v2 = 0.0;
  *a2 = v2;
  return result;
}

unsigned int *sub_1B1B079C8(unsigned int *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 36) == 4)
  {
    *(_QWORD *)(a2 + 24) = *result;
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 4;
  }
  return result;
}

uint64_t sub_1B1B079EC@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 36) == 4;
  return result;
}

uint64_t sub_1B1B07A00@<X0>(uint64_t result@<X0>, float *a2@<X8>)
{
  float v2;

  v2 = *(float *)(result + 24);
  if (*(_BYTE *)(result + 36) != 5)
    v2 = 0.0;
  *a2 = v2;
  return result;
}

unsigned int *sub_1B1B07A1C(unsigned int *result, uint64_t a2)
{
  if (*(_BYTE *)(a2 + 36) == 5)
  {
    *(_QWORD *)(a2 + 24) = *result;
    *(_DWORD *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 36) = 5;
  }
  return result;
}

uint64_t sub_1B1B07A40@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *(_BYTE *)(result + 36) == 5;
  return result;
}

uint64_t sub_1B1B07A54@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 21);
  return result;
}

unint64_t sub_1B1B07A60(unint64_t *a1)
{
  return sub_1B1A6D44C(*a1);
}

uint64_t sub_1B1B07A84@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2948(a1, v2, (uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1E6397740, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8494C, a2);
}

uint64_t sub_1B1B07AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B07BB0);
}

uint64_t sub_1B1B07AD4@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(unsigned __int8 *)(result + 22);
  return result;
}

unint64_t sub_1B1B07AE0(unint64_t *a1)
{
  return sub_1B1A6D468(*a1);
}

uint64_t sub_1B1B07B04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A590, (uint64_t)&type metadata for FillMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94998, a3);
}

double sub_1B1B07B34()
{
  uint64_t *v0;

  return sub_1B1AAD36C(v0[2], v0[3], v0[4], &qword_1EEF5A598, (uint64_t)&type metadata for FillMode);
}

uint64_t sub_1B1B07B60(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 4;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

_QWORD *sub_1B1B07BB0(_QWORD *a1)
{
  return sub_1B1B07BDC(a1, (uint64_t)sub_1B1ADFFBC, (void (*)(unint64_t, uint64_t, double))sub_1B1A72E60, (uint64_t (*)(_QWORD))sub_1B1B07C08);
}

_QWORD *sub_1B1B07BDC(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A753F8(a1, **(_BYTE **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1B07C08()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A5A0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&type metadata for FillMode, (uint64_t)&off_1E6397740);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A5A0);
  }
}

_QWORD *sub_1B1B07C6C(uint64_t *a1, _QWORD *a2)
{
  initializeBufferWithCopyOfBuffer for EasingFunction(a2, a1);
  return a2;
}

uint64_t sub_1B1B07CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94AA4, a3);
}

_QWORD *sub_1B1B07CD0(_QWORD *a1)
{
  return sub_1B1AF5980(a1, (uint64_t)sub_1B1AE20D0, (void (*)(unint64_t, uint64_t, double))sub_1B1A72E60, (uint64_t (*)(_QWORD))sub_1B1B07CFC);
}

void sub_1B1B07CFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A5A8)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for AnimationTimeSource, v2, (uint64_t)&off_1E6397740);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A5A8);
  }
}

uint64_t sub_1B1B07D80@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A5B0, (uint64_t)&type metadata for EasingFunction, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94B98, a3);
}

double sub_1B1B07DB0()
{
  uint64_t *v0;

  return sub_1B1AADF00(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1B07DBC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v10;
  int v11;
  char v12;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v6 = *(_QWORD *)(a1 + 32);
    v7 = *(_DWORD *)(a1 + 40);
    v8 = *(_BYTE *)(a1 + 44);
  }
  else
  {
    v7 = 0;
    v8 = -1;
  }
  v10 = v6;
  v11 = v7;
  v12 = v8;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v4 + 16))(v3, v5, &v10);
}

_QWORD *sub_1B1B07E20(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A78A38(a1, **(_QWORD **)(v1 + 16), *(unsigned int *)(*(_QWORD *)(v1 + 16) + 8) | ((unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 + 16)+ 12) << 32), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B1B07E4C()
{
  return swift_setAtWritableKeyPath();
}

void sub_1B1B07E98()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A5C0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&type metadata for EasingFunction, (uint64_t)&off_1E6397740);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A5C0);
  }
}

uint64_t sub_1B1B07EFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94CA4, a3);
}

_QWORD *sub_1B1B07F2C(_QWORD *a1)
{
  return sub_1B1B07F58(a1, (uint64_t)sub_1B1ADFE94, (void (*)(unint64_t, uint64_t, double))sub_1B1A72E60, (uint64_t (*)(_QWORD))sub_1B1B07F84);
}

_QWORD *sub_1B1B07F58(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A74968(a1, **(_QWORD **)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1B07F84()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A5C8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for AnimationTimeSource, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E6397740);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A5C8);
  }
}

uint64_t sub_1B1B07FE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94DB0, a3);
}

_QWORD *sub_1B1B08018(_QWORD *a1)
{
  return sub_1B1B08044(a1, (uint64_t)sub_1B1ADFCB4, (void (*)(unint64_t, uint64_t, double))sub_1B1A72E60, (uint64_t (*)(_QWORD))sub_1B1B08070);
}

_QWORD *sub_1B1B08044(_QWORD *a1, uint64_t a2, void (*a3)(unint64_t, uint64_t, double), uint64_t (*a4)(_QWORD))
{
  uint64_t v4;

  return sub_1B1A75CF4(a1, *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), **(float **)(v4 + 16), *(_QWORD *)(v4 + 40), a2, a3, a4);
}

void sub_1B1B08070()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A5D0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for AnimationTimeSource, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6397740);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A5D0);
  }
}

uint64_t sub_1B1B080D4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2814(a1, v2, (uint64_t)&type metadata for Rect2D, (uint64_t)&off_1E63BC120, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8], a2);
}

uint64_t sub_1B1B0810C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B08300);
}

float sub_1B1B08130@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

float sub_1B1B0813C(float *a1, _DWORD *a2)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

uint64_t sub_1B1B08148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB2790(a1, v2, (uint64_t)&type metadata for Rect2D, (uint64_t)&off_1E63BC120, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80F68, a2);
}

uint64_t sub_1B1B08178(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B08210);
}

float sub_1B1B08198@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 4);
  *a2 = result;
  return result;
}

float sub_1B1B081A4(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 4) = *a1;
  return result;
}

float sub_1B1B081B0@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 8);
  *a2 = result;
  return result;
}

float sub_1B1B081BC(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 8) = *a1;
  return result;
}

float sub_1B1B081C8@<S0>(uint64_t a1@<X0>, float *a2@<X8>)
{
  float result;

  result = *(float *)(a1 + 12);
  *a2 = result;
  return result;
}

float sub_1B1B081D4(float *a1, uint64_t a2)
{
  float result;

  result = *a1;
  *(float *)(a2 + 12) = *a1;
  return result;
}

uint64_t sub_1B1B081E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AAA248, a3);
}

_QWORD *sub_1B1B08210(_QWORD *a1)
{
  return sub_1B1B08244(a1, (uint64_t)sub_1B1AE1BC4, (uint64_t)sub_1B1EC4BE0, (void (*)(unint64_t, uint64_t, double))sub_1B1A73F8C, (uint64_t (*)(_QWORD))sub_1B1B08274);
}

_QWORD *sub_1B1B08244(_QWORD *a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t, uint64_t, double), uint64_t (*a5)(_QWORD))
{
  uint64_t v5;

  return sub_1B1A74B04(a1, *(_QWORD *)(v5 + 24), *(_QWORD *)(v5 + 32), **(float **)(v5 + 16), *(_QWORD *)(v5 + 40), a2, a3, a4, a5);
}

void sub_1B1B08274()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A5E0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for Rect2D, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63BC120);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A5E0);
  }
}

uint64_t sub_1B1B082D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1180, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AAA354, a3);
}

uint64_t sub_1B1B08300(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7C22C);
}

void sub_1B1B0831C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A5E8)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for Rect2D, v2, (uint64_t)&off_1E63BC120);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A5E8);
  }
}

uint64_t sub_1B1B083A8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v4 = *a1;
  v3 = a1[1];
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRelease();
  *a2 = v4;
  a2[1] = v3;
  return result;
}

uint64_t sub_1B1B083E8@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB1E74(a1, v2, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1E63982A0, a2);
}

uint64_t sub_1B1B08410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1454(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1B08460);
}

uint64_t sub_1B1B08430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF590D0, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94EBC, a3);
}

uint64_t sub_1B1B08460(uint64_t a1)
{
  return sub_1B1B0847C(a1, sub_1B1A7F428);
}

uint64_t sub_1B1B0847C(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v2;

  return a2(**(_QWORD **)(v2 + 16), *(_QWORD *)(*(_QWORD *)(v2 + 16) + 8), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1B1B084B8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  if (!*a2)
  {
    v9 = a3(255);
    v10 = type metadata accessor for ComponentValueWriter(a1, v9, a4, a5);
    if (!v11)
      atomic_store(v10, a2);
  }
}

uint64_t sub_1B1B0851C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1B0852C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A932A8, a3);
}

uint64_t sub_1B1B0855C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E826AC(a1, v2, a2);
}

uint64_t sub_1B1B08564(uint64_t result)
{
  return sub_1B1E826B8(result);
}

void sub_1B1B0856C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A608)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PrimitiveGenerator, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63958C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A608);
  }
}

uint64_t sub_1B1B085D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A933B4, a3);
}

uint64_t sub_1B1B08600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E82764(a1, v2, a2);
}

uint64_t sub_1B1B08608(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1E82770(a1, a2, a3, v3);
}

void sub_1B1B08610()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A610)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PrimitiveGenerator, MEMORY[0x1E0DEB418], (uint64_t)&off_1E63958C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A610);
  }
}

uint64_t sub_1B1B08674@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A618, (uint64_t)&type metadata for SimpleFontDescription, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A934C0, a3);
}

uint64_t sub_1B1B086A4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E8277C(a1, v2, a2);
}

uint64_t sub_1B1B086AC(uint64_t result)
{
  return sub_1B1E827F4(result);
}

uint64_t sub_1B1B086B4()
{
  uint64_t *v0;

  return sub_1B1AADCA8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1B086C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1AAEB7C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B1B086CC()
{
  swift_bridgeObjectRetain();
  return swift_setAtWritableKeyPath();
}

void sub_1B1B08720()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A630)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PrimitiveGenerator, (uint64_t)&type metadata for SimpleFontDescription, (uint64_t)&off_1E63958C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A630);
  }
}

uint64_t sub_1B1B08784()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B087B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A935CC, a3);
}

uint64_t sub_1B1B087E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E828A8(a1, v2, a2);
}

uint64_t sub_1B1B087E8(uint64_t result)
{
  return sub_1B1E82914(result);
}

void sub_1B1B087F0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A638)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PrimitiveGenerator, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63958C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A638);
  }
}

uint64_t sub_1B1B08854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF590D0, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A936D8, a3);
}

uint64_t sub_1B1B08884@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E829C0(a1, v2, a2);
}

uint64_t sub_1B1B0888C(uint64_t result)
{
  return sub_1B1E82A28(result);
}

void sub_1B1B08894()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A640)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PrimitiveGenerator, MEMORY[0x1E0DEA968], (uint64_t)&off_1E63958C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A640);
  }
}

uint64_t sub_1B1B088F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A648, (uint64_t)&type metadata for PrimitiveGenerator.PrimitiveType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A937E4, a3);
}

uint64_t sub_1B1B08928@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E82AD4(a1, v2, a2);
}

uint64_t sub_1B1B08930(uint64_t result)
{
  return sub_1B1E82B54(result);
}

double sub_1B1B08938()
{
  uint64_t *v0;

  return sub_1B1AADD40(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1B08944(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 10;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

void sub_1B1B08994()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A660)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PrimitiveGenerator, (uint64_t)&type metadata for PrimitiveGenerator.PrimitiveType, (uint64_t)&off_1E63958C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A660);
  }
}

uint64_t sub_1B1B089F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A938F0, a3);
}

uint64_t sub_1B1B08A28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1E82C00(a1, v2, a2);
}

uint64_t sub_1B1B08A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1E82C8C(a1, a2, a3, v3);
}

void sub_1B1B08A38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A668)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PrimitiveGenerator, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63958C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A668);
  }
}

uint64_t sub_1B1B08A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF58FC0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F6D4, a3);
}

uint64_t sub_1B1B08ACC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72094(a1, v2, a2);
}

uint64_t sub_1B1B08AD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F720A8(a1, a2, a3, v3);
}

uint64_t sub_1B1B08ADC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF59008, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F7E0, a3);
}

uint64_t sub_1B1B08B0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F720B4(a1, v2, a2);
}

uint64_t sub_1B1B08B14(uint64_t result)
{
  return sub_1B1F720D0(result);
}

uint64_t sub_1B1B08B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F8EC, a3);
}

uint64_t sub_1B1B08B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7217C(a1, v2, a2);
}

uint64_t sub_1B1B08B4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F721C8(a1, a2, a3, v3);
}

void sub_1B1B08B54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A680)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for NodeTransformController, v2, (uint64_t)&off_1E63AAF00);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A680);
  }
}

uint64_t sub_1B1B08BD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0C58, a3);
}

uint64_t sub_1B1B08C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F721F4(a1, v2, a2);
}

uint64_t sub_1B1B08C10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72210(a1, a2, a3, v3);
}

void sub_1B1B08C18()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A688)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for NodeVisibilityController, MEMORY[0x1E0DEB418], (uint64_t)&off_1E63AD7D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A688);
  }
}

uint64_t sub_1B1B08C7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0D64, a3);
}

uint64_t sub_1B1B08CAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7221C(a1, v2, a2);
}

uint64_t sub_1B1B08CB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72230(a1, a2, a3, v3);
}

void sub_1B1B08CBC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A690)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for NodeVisibilityController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AD7D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A690);
  }
}

uint64_t sub_1B1B08D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA0E70, a3);
}

uint64_t sub_1B1B08D50@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7223C(a1, v2, a2);
}

uint64_t sub_1B1B08D58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72250(a1, a2, a3, v3);
}

void sub_1B1B08D60()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A698)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for NodeVisibilityController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63AD7D8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A698);
  }
}

uint64_t sub_1B1B08DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D208, a3);
}

uint64_t sub_1B1B08DF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71C2C(a1, v2, a2);
}

uint64_t sub_1B1B08DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71C48(a1, a2, a3, v3);
}

void sub_1B1B08E04()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A6A0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for LightController, MEMORY[0x1E0DEB418], (uint64_t)&off_1E6384140);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A6A0);
  }
}

uint64_t sub_1B1B08E68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D314, a3);
}

uint64_t sub_1B1B08E98@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71C54(a1, v2, a2);
}

uint64_t sub_1B1B08EA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71C68(a1, a2, a3, v3);
}

void sub_1B1B08EA8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A6A8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for LightController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E6384140);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A6A8);
  }
}

uint64_t sub_1B1B08F0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D420, a3);
}

uint64_t sub_1B1B08F34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71C74(a1, v2, a2);
}

uint64_t sub_1B1B08F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71C90(a1, a2, a3, v3);
}

void sub_1B1B08F44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A6B0)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for LightController, v2, (uint64_t)&off_1E6384140);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A6B0);
  }
}

uint64_t sub_1B1B08FC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D514, a3);
}

uint64_t sub_1B1B08FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71C9C(a1, v2, a2);
}

uint64_t sub_1B1B09000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71CB0(a1, a2, a3, v3);
}

void sub_1B1B09008()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A6B8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for LightController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6384140);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A6B8);
  }
}

uint64_t sub_1B1B0906C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1180, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D620, a3);
}

uint64_t sub_1B1B09094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71CBC(a1, v2, a2);
}

uint64_t sub_1B1B0909C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71CD8(a1, a2, a3, v3);
}

void sub_1B1B090A4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A6C0)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for LightController, v2, (uint64_t)&off_1E6384140);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A6C0);
  }
}

uint64_t sub_1B1B09128@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A6C8, (uint64_t (*)(uint64_t))type metadata accessor for VFXLightType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8D714, a3);
}

uint64_t sub_1B1B09158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71CE4(a1, v2, a2);
}

uint64_t sub_1B1B09160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71D00(a1, a2, a3, v3);
}

double sub_1B1B09168()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A6D8, (uint64_t (*)(uint64_t))type metadata accessor for VFXLightType);
}

void sub_1B1B09194(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A6E0, (uint64_t (*)(uint64_t))type metadata accessor for VFXLightType, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140);
}

uint64_t sub_1B1B091B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF58FC0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E068, a3);
}

uint64_t sub_1B1B091E8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71D0C(a1, v2, a2);
}

uint64_t sub_1B1B091F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71D20(a1, a2, a3, v3);
}

uint64_t sub_1B1B091F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E174, a3);
}

uint64_t sub_1B1B09220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71D2C(a1, v2, a2);
}

uint64_t sub_1B1B09228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71D48(a1, a2, a3, v3);
}

uint64_t sub_1B1B09230()
{
  uint64_t *v0;

  return sub_1B1AADB20(v0[2], v0[3], v0[4]);
}

void sub_1B1B0924C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A6F0)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for CameraController, v2, (uint64_t)&off_1E63864C8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A6F0);
  }
}

uint64_t sub_1B1B092D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E268, a3);
}

uint64_t sub_1B1B09300@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71D54(a1, v2, a2);
}

uint64_t sub_1B1B09308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71D68(a1, a2, a3, v3);
}

void sub_1B1B09310()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A6F8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63864C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A6F8);
  }
}

uint64_t sub_1B1B09374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A8E374, a3);
}

uint64_t sub_1B1B093A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71D74(a1, v2, a2);
}

uint64_t sub_1B1B093AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71D88(a1, a2, a3, v3);
}

void sub_1B1B093B4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A700)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63864C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A700);
  }
}

uint64_t sub_1B1B09418@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4D74, a3);
}

uint64_t sub_1B1B09448@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72324(a1, v2, a2);
}

uint64_t sub_1B1B09450(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72340(a1, a2, a3, v3);
}

void sub_1B1B09458()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A708)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectBloomController, MEMORY[0x1E0DEB418], (uint64_t)&off_1E63B2620);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A708);
  }
}

uint64_t sub_1B1B094BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4E80, a3);
}

uint64_t sub_1B1B094E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7234C(a1, v2, a2);
}

uint64_t sub_1B1B094EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72368(a1, a2, a3, v3);
}

void sub_1B1B094F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A710)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for CameraEffectBloomController, v2, (uint64_t)&off_1E63B2620);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A710);
  }
}

uint64_t sub_1B1B09578@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4F74, a3);
}

uint64_t sub_1B1B095A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72374(a1, v2, a2);
}

uint64_t sub_1B1B095B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72388(a1, a2, a3, v3);
}

void sub_1B1B095B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A718)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectBloomController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B2620);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A718);
  }
}

uint64_t sub_1B1B0961C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5080, a3);
}

uint64_t sub_1B1B0964C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72394(a1, v2, a2);
}

uint64_t sub_1B1B09654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F723A8(a1, a2, a3, v3);
}

void sub_1B1B0965C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A720)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectBloomController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B2620);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A720);
  }
}

uint64_t sub_1B1B096C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA82AC, a3);
}

uint64_t sub_1B1B096F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F724B4(a1, v2, a2);
}

uint64_t sub_1B1B096F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F724C8(a1, a2, a3, v3);
}

void sub_1B1B09700()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A728)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectToneMappingController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B7168);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A728);
  }
}

uint64_t sub_1B1B09764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A730, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA83B8, a3);
}

uint64_t sub_1B1B09794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F724D4(a1, v2, a2);
}

uint64_t sub_1B1B0979C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F724F0(a1, a2, a3, v3);
}

double sub_1B1B097A4()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A738, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode);
}

void sub_1B1B097D0(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A740, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t)&type metadata for CameraEffectToneMappingController, (uint64_t)&off_1E63B7168);
}

uint64_t sub_1B1B097F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA84C4, a3);
}

uint64_t sub_1B1B09824@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F724FC(a1, v2, a2);
}

uint64_t sub_1B1B0982C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72510(a1, a2, a3, v3);
}

void sub_1B1B09834()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A748)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectToneMappingController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B7168);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A748);
  }
}

uint64_t sub_1B1B09898@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA6E1C, a3);
}

uint64_t sub_1B1B098C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F723F4(a1, v2, a2);
}

uint64_t sub_1B1B098D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72408(a1, a2, a3, v3);
}

void sub_1B1B098D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A750)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectExposureController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B5290);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A750);
  }
}

uint64_t sub_1B1B0993C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA6F28, a3);
}

uint64_t sub_1B1B0996C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72414(a1, v2, a2);
}

uint64_t sub_1B1B09974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72428(a1, a2, a3, v3);
}

void sub_1B1B0997C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A758)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectExposureController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B5290);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A758);
  }
}

uint64_t sub_1B1B099E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7034, a3);
}

uint64_t sub_1B1B09A10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72434(a1, v2, a2);
}

uint64_t sub_1B1B09A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72448(a1, a2, a3, v3);
}

void sub_1B1B09A20()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A760)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectLensBlurController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B5478);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A760);
  }
}

uint64_t sub_1B1B09A84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7140, a3);
}

uint64_t sub_1B1B09AB4@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72454(a1, v2, a2);
}

uint64_t sub_1B1B09ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72468(a1, a2, a3, v3);
}

void sub_1B1B09AC4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A768)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectLensBlurController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B5478);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A768);
  }
}

uint64_t sub_1B1B09B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA518C, a3);
}

uint64_t sub_1B1B09B58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F723B4(a1, v2, a2);
}

uint64_t sub_1B1B09B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F723C8(a1, a2, a3, v3);
}

void sub_1B1B09B68()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A770)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectGrainController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B2808);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A770);
  }
}

uint64_t sub_1B1B09BCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA5298, a3);
}

uint64_t sub_1B1B09BFC@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F723D4(a1, v2, a2);
}

uint64_t sub_1B1B09C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F723E8(a1, a2, a3, v3);
}

void sub_1B1B09C0C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A778)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectGrainController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B2808);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A778);
  }
}

uint64_t sub_1B1B09C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7864, a3);
}

uint64_t sub_1B1B09CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72474(a1, v2, a2);
}

uint64_t sub_1B1B09CA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72488(a1, a2, a3, v3);
}

void sub_1B1B09CB0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A780)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectMotionBlurController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B66B0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A780);
  }
}

uint64_t sub_1B1B09D14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA7970, a3);
}

uint64_t sub_1B1B09D44@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72494(a1, v2, a2);
}

uint64_t sub_1B1B09D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F724A8(a1, a2, a3, v3);
}

void sub_1B1B09D54()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A788)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectMotionBlurController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B66B0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A788);
  }
}

uint64_t sub_1B1B09DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA85D0, a3);
}

uint64_t sub_1B1B09DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7251C(a1, v2, a2);
}

uint64_t sub_1B1B09DF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72538(a1, a2, a3, v3);
}

void sub_1B1B09DF8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A790)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, MEMORY[0x1E0DEB418], (uint64_t)&off_1E63B75C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A790);
  }
}

uint64_t sub_1B1B09E5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA86DC, a3);
}

uint64_t sub_1B1B09E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72544(a1, v2, a2);
}

uint64_t sub_1B1B09E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72558(a1, a2, a3, v3);
}

void sub_1B1B09E9C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A798)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B75C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A798);
  }
}

uint64_t sub_1B1B09F00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA87E8, a3);
}

uint64_t sub_1B1B09F30@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72564(a1, v2, a2);
}

uint64_t sub_1B1B09F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72578(a1, a2, a3, v3);
}

void sub_1B1B09F40()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7A0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B75C8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7A0);
  }
}

uint64_t sub_1B1B09FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA910C, a3);
}

uint64_t sub_1B1B09FCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F725EC(a1, v2, a2);
}

uint64_t sub_1B1B09FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72608(a1, a2, a3, v3);
}

void sub_1B1B09FDC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A7A8)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for CameraEffectChromaticTransformController, v2, (uint64_t)&off_1E63B9138);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A7A8);
  }
}

uint64_t sub_1B1B0A060@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA9200, a3);
}

uint64_t sub_1B1B0A088@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72614(a1, v2, a2);
}

uint64_t sub_1B1B0A090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72630(a1, a2, a3, v3);
}

void sub_1B1B0A098(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A7B0)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for CameraEffectChromaticTransformController, v2, (uint64_t)&off_1E63B9138);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A7B0);
  }
}

uint64_t sub_1B1B0A11C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA92F4, a3);
}

uint64_t sub_1B1B0A14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7263C(a1, v2, a2);
}

uint64_t sub_1B1B0A154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F726C8(a1, a2, a3, v3);
}

void sub_1B1B0A15C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7B8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectChromaticTransformController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B9138);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7B8);
  }
}

uint64_t sub_1B1B0A1C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA9400, a3);
}

uint64_t sub_1B1B0A1F0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726D4(a1, v2, a2);
}

uint64_t sub_1B1B0A1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72758(a1, a2, a3, v3);
}

void sub_1B1B0A200()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7C0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectChromaticTransformController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B9138);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7C0);
  }
}

uint64_t sub_1B1B0A264@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1FB0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA88F4, a3);
}

uint64_t sub_1B1B0A28C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72584(a1, v2, a2);
}

uint64_t sub_1B1B0A294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F725A0(a1, a2, a3, v3);
}

uint64_t sub_1B1B0A29C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_QWORD *)(a1 + 32);
  else
    v6 = 0;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(v4 + 16))(v3, v5, &v8);
}

void sub_1B1B0A2EC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A7C8)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, v2, (uint64_t)&off_1E63B7968);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A7C8);
  }
}

uint64_t sub_1B1B0A370@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA89E8, a3);
}

uint64_t sub_1B1B0A3A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F725AC(a1, v2, a2);
}

uint64_t sub_1B1B0A3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F725C0(a1, a2, a3, v3);
}

void sub_1B1B0A3B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7D0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B7968);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7D0);
  }
}

uint64_t sub_1B1B0A414@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA8AF4, a3);
}

uint64_t sub_1B1B0A444@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F725CC(a1, v2, a2);
}

uint64_t sub_1B1B0A44C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F725E0(a1, a2, a3, v3);
}

void sub_1B1B0A454()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7D8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B7968);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7D8);
  }
}

uint64_t sub_1B1B0A4B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4868, a3);
}

uint64_t sub_1B1B0A4E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F722E4(a1, v2, a2);
}

uint64_t sub_1B1B0A4F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F722F8(a1, a2, a3, v3);
}

void sub_1B1B0A4F8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7E0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectSSAOController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B1528);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7E0);
  }
}

uint64_t sub_1B1B0A55C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4974, a3);
}

uint64_t sub_1B1B0A58C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72304(a1, v2, a2);
}

uint64_t sub_1B1B0A594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72318(a1, a2, a3, v3);
}

void sub_1B1B0A59C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for CameraEffectSSAOController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63B1528);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7E8);
  }
}

uint64_t sub_1B1B0A600@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2C54, a3);
}

uint64_t sub_1B1B0A630@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7225C(a1, v2, a2);
}

uint64_t sub_1B1B0A638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72270(a1, a2, a3, v3);
}

void sub_1B1B0A640()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A7F0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ParametricModelController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63AFAC8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A7F0);
  }
}

uint64_t sub_1B1B0A6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A7F8, (uint64_t (*)(uint64_t))type metadata accessor for VFXParametricModelType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA2D60, a3);
}

uint64_t sub_1B1B0A6D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7227C(a1, v2, a2);
}

uint64_t sub_1B1B0A6DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72298(a1, a2, a3, v3);
}

double sub_1B1B0A6E4()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A808, (uint64_t (*)(uint64_t))type metadata accessor for VFXParametricModelType);
}

void sub_1B1B0A710(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A810, (uint64_t (*)(uint64_t))type metadata accessor for VFXParametricModelType, (uint64_t)&type metadata for ParametricModelController, (uint64_t)&off_1E63AFAC8);
}

uint64_t sub_1B1B0A734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C73C, a3);
}

uint64_t sub_1B1B0A764@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71FBC(a1, v2, a2);
}

uint64_t sub_1B1B0A76C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71FD0(a1, a2, a3, v3);
}

void sub_1B1B0A774()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A818)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PhysicsBodyController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A5AA0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A818);
  }
}

uint64_t sub_1B1B0A7D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C848, a3);
}

uint64_t sub_1B1B0A808@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71FDC(a1, v2, a2);
}

uint64_t sub_1B1B0A810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71FF0(a1, a2, a3, v3);
}

void sub_1B1B0A818()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A820)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for PhysicsBodyController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A5AA0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A820);
  }
}

uint64_t sub_1B1B0A87C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1180, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9C954, a3);
}

uint64_t sub_1B1B0A8A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71FFC(a1, v2, a2);
}

uint64_t sub_1B1B0A8AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72018(a1, a2, a3, v3);
}

void sub_1B1B0A8B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A828)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for PhysicsBodyController, v2, (uint64_t)&off_1E63A5AA0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A828);
  }
}

uint64_t sub_1B1B0A938@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9CA48, a3);
}

uint64_t sub_1B1B0A960@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72024(a1, v2, a2);
}

uint64_t sub_1B1B0A968(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72040(a1, a2, a3, v3);
}

void sub_1B1B0A970(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A830)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for PhysicsBodyController, v2, (uint64_t)&off_1E63A5AA0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A830);
  }
}

uint64_t sub_1B1B0A9F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF595B0, MEMORY[0x1E0DEE190], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9A3EC, a3);
}

uint64_t sub_1B1B0AA24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71E64(a1, v2, a2);
}

uint64_t sub_1B1B0AA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71E80(a1, a2, a3, v3);
}

void sub_1B1B0AA34()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A838)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceFieldsController, MEMORY[0x1E0DEE190], (uint64_t)&off_1E63A04B0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A838);
  }
}

uint64_t sub_1B1B0AA98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A840, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldCullMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9A4F8, a3);
}

uint64_t sub_1B1B0AAC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71E8C(a1, v2, a2);
}

uint64_t sub_1B1B0AAD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71EA8(a1, a2, a3, v3);
}

double sub_1B1B0AAD8()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A848, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldCullMode);
}

void sub_1B1B0AB04(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A850, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldCullMode, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0);
}

uint64_t sub_1B1B0AB28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A858, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldScope, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9A604, a3);
}

uint64_t sub_1B1B0AB58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71EB4(a1, v2, a2);
}

uint64_t sub_1B1B0AB60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71ED0(a1, a2, a3, v3);
}

double sub_1B1B0AB68()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A868, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldScope);
}

void sub_1B1B0AB94(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A870, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldScope, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0);
}

uint64_t sub_1B1B0ABB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9A710, a3);
}

uint64_t sub_1B1B0ABE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71EDC(a1, v2, a2);
}

uint64_t sub_1B1B0ABE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71EF8(a1, a2, a3, v3);
}

void sub_1B1B0ABF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A878)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for ForceFieldsController, v2, (uint64_t)&off_1E63A04B0);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A878);
  }
}

uint64_t sub_1B1B0AC74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A880, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldShape, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9A804, a3);
}

uint64_t sub_1B1B0ACA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71F04(a1, v2, a2);
}

uint64_t sub_1B1B0ACAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71F20(a1, a2, a3, v3);
}

double sub_1B1B0ACB4()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A888, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldShape);
}

void sub_1B1B0ACE0(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A890, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldShape, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0);
}

uint64_t sub_1B1B0AD04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EF0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9A910, a3);
}

uint64_t sub_1B1B0AD34@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71F2C(a1, v2, a2);
}

uint64_t sub_1B1B0AD3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71F40(a1, a2, a3, v3);
}

uint64_t sub_1B1B0AD44(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 0;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

void sub_1B1B0AD94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A898)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceFieldsController, MEMORY[0x1E0DEAFA0], (uint64_t)&off_1E63A04B0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A898);
  }
}

uint64_t sub_1B1B0ADF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9AA1C, a3);
}

uint64_t sub_1B1B0AE28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71F4C(a1, v2, a2);
}

uint64_t sub_1B1B0AE30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71F60(a1, a2, a3, v3);
}

void sub_1B1B0AE38()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A8A0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceFieldsController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A04B0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A8A0);
  }
}

uint64_t sub_1B1B0AE9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A8A8, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9AB28, a3);
}

uint64_t sub_1B1B0AECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71F6C(a1, v2, a2);
}

uint64_t sub_1B1B0AED4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71F88(a1, a2, a3, v3);
}

double sub_1B1B0AEDC()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A8B8, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType);
}

void sub_1B1B0AF08(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A8C0, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0);
}

uint64_t sub_1B1B0AF2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58F58, MEMORY[0x1E0DEDC60], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9AC34, a3);
}

uint64_t sub_1B1B0AF5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71F94(a1, v2, a2);
}

uint64_t sub_1B1B0AF64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71FB0(a1, a2, a3, v3);
}

void sub_1B1B0AF6C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A8C8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for ForceFieldsController, MEMORY[0x1E0DEDC60], (uint64_t)&off_1E63A04B0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A8C8);
  }
}

uint64_t sub_1B1B0AFD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A92554, a3);
}

uint64_t sub_1B1B0B000@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71D94(a1, v2, a2);
}

uint64_t sub_1B1B0B008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71DA8(a1, a2, a3, v3);
}

void sub_1B1B0B010()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A8D0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for MaterialController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63921F8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A8D0);
  }
}

uint64_t sub_1B1B0B074@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1180, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A92660, a3);
}

uint64_t sub_1B1B0B09C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71DB4(a1, v2, a2);
}

uint64_t sub_1B1B0B0A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71DD0(a1, a2, a3, v3);
}

void sub_1B1B0B0AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A8D8)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for MaterialController, v2, (uint64_t)&off_1E63921F8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A8D8);
  }
}

uint64_t sub_1B1B0B130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF58FC0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA4650, a3);
}

uint64_t sub_1B1B0B160@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F722A4(a1, v2, a2);
}

uint64_t sub_1B1B0B168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F722B8(a1, a2, a3, v3);
}

uint64_t sub_1B1B0B170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1AA475C, a3);
}

uint64_t sub_1B1B0B1A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F722C4(a1, v2, a2);
}

uint64_t sub_1B1B0B1A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F722D8(a1, a2, a3, v3);
}

void sub_1B1B0B1B0()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A8E8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for WorldBackgroundController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63B12C0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A8E8);
  }
}

uint64_t sub_1B1B0B214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF58FC0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94780, a3);
}

uint64_t sub_1B1B0B244@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71E24(a1, v2, a2);
}

uint64_t sub_1B1B0B24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71E38(a1, a2, a3, v3);
}

uint64_t sub_1B1B0B254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9488C, a3);
}

uint64_t sub_1B1B0B284@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71E44(a1, v2, a2);
}

uint64_t sub_1B1B0B28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71E58(a1, a2, a3, v3);
}

void sub_1B1B0B294()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A8F8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for WorldIBLController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6396F88);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A8F8);
  }
}

uint64_t sub_1B1B0B2F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F2D4, a3);
}

uint64_t sub_1B1B0B328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7204C(a1, v2, a2);
}

uint64_t sub_1B1B0B330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72060(a1, a2, a3, v3);
}

void sub_1B1B0B338()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A900)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for WorldPhysicsController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63A9F08);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A900);
  }
}

uint64_t sub_1B1B0B39C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE02A4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9F3E0, a3);
}

uint64_t sub_1B1B0B3C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F7206C(a1, v2, a2);
}

uint64_t sub_1B1B0B3CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F72088(a1, a2, a3, v3);
}

void sub_1B1B0B3D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A908)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for WorldPhysicsController, v2, (uint64_t)&off_1E63A9F08);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A908);
  }
}

uint64_t sub_1B1B0B458@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94580, a3);
}

uint64_t sub_1B1B0B488@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71DDC(a1, v2, a2);
}

uint64_t sub_1B1B0B490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71DF0(a1, a2, a3, v3);
}

void sub_1B1B0B498()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A910)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for WorldFogController, MEMORY[0x1E0DEB188], (uint64_t)&off_1E6396DA8);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A910);
  }
}

uint64_t sub_1B1B0B4FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80A54(a1, a2, v3, (uint64_t (*)(_QWORD))sub_1B1AE1180, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9468C, a3);
}

uint64_t sub_1B1B0B524@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F71DFC(a1, v2, a2);
}

uint64_t sub_1B1B0B52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F71E18(a1, a2, a3, v3);
}

void sub_1B1B0B534(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1EEF5A918)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v3 = type metadata accessor for ComponentValueWriter(a1, (uint64_t)&type metadata for WorldFogController, v2, (uint64_t)&off_1E6396DA8);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1EEF5A918);
  }
}

_QWORD *sub_1B1B0B5B8(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1A7D62C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1B1B0B5D4()
{
  uint64_t v0;
  uint64_t v2;

  sub_1B1A02864(*(_QWORD *)(v0 + 24), (uint64_t)&v2);
  return swift_setAtWritableKeyPath();
}

void sub_1B1B0B624()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A920)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for MorpherController, MEMORY[0x1E0DEE9B8] + 8, (uint64_t)&off_1E638D3F0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A920);
  }
}

uint64_t sub_1B1B0B68C()
{
  uint64_t v0;

  swift_release();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 24);
  return swift_deallocObject();
}

void sub_1B1B0B6B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF63550)
  {
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF63550);
  }
}

uint64_t sub_1B1B0B71C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A928, (uint64_t (*)(uint64_t))sub_1B1B0B6B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A93E2C, a3);
}

uint64_t sub_1B1B0B74C@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109AB8(a1, v2, a2);
}

uint64_t sub_1B1B0B754(uint64_t result)
{
  return sub_1B2109B1C(result);
}

uint64_t sub_1B1B0B75C()
{
  uint64_t *v0;

  return sub_1B1AAE03C(v0[2], v0[3], v0[4], &qword_1EEF5A938, (uint64_t (*)(uint64_t))sub_1B1B0B6B8);
}

uint64_t sub_1B1B0B788(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1AAF198(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B1B0B7A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF5A948, (uint64_t (*)(uint64_t))type metadata accessor for MTLStorageMode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A93F38, a3);
}

uint64_t sub_1B1B0B7D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109BC8(a1, v2, a2);
}

uint64_t sub_1B1B0B7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B2109BD4(a1, a2, a3, v3);
}

double sub_1B1B0B7E4()
{
  uint64_t *v0;

  return sub_1B1AAE660(v0[2], v0[3], v0[4], &qword_1EEF5A950, (uint64_t (*)(uint64_t))type metadata accessor for MTLStorageMode);
}

void sub_1B1B0B810(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A958, (uint64_t (*)(uint64_t))type metadata accessor for MTLStorageMode, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640);
}

uint64_t sub_1B1B0B834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A960, (uint64_t)&type metadata for MetalFunctionReflection, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94044, a3);
}

uint64_t sub_1B1B0B864@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109BE0(a1, v2, a2);
}

uint64_t sub_1B1B0B86C(uint64_t result)
{
  return sub_1B2109C5C(result);
}

_OWORD *sub_1B1B0B874()
{
  uint64_t *v0;

  return sub_1B1AADDC8(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1B0B880(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1AAEC08(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B1B0B88C()
{
  return sub_1B1AB1924();
}

void sub_1B1B0B8A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF635E0)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&type metadata for MetalFunctionReflection, (uint64_t)&off_1E6396640);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF635E0);
  }
}

uint64_t sub_1B1B0B908()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B0B94C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF58EE0, MEMORY[0x1E0DEB418], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94150, a3);
}

uint64_t sub_1B1B0B97C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109D08(a1, v2, a2);
}

uint64_t sub_1B1B0B984(uint64_t result)
{
  return sub_1B2109D14(result);
}

void sub_1B1B0B98C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A978)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for TextureShaderAsset, MEMORY[0x1E0DEB418], (uint64_t)&off_1E6396640);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A978);
  }
}

uint64_t sub_1B1B0B9F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A809B4(a1, a2, v3, &qword_1EEF592C0, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A9425C, a3);
}

uint64_t sub_1B1B0BA20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109DC0(a1, v2, a2);
}

uint64_t sub_1B1B0BA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B2109E4C(a1, a2, a3, v3);
}

void sub_1B1B0BA30(uint64_t a1)
{
  sub_1B1AE0924(a1, &qword_1EEF5A980, (uint64_t (*)(uint64_t))type metadata accessor for MTLPixelFormat, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&off_1E6396640);
}

uint64_t sub_1B1B0BA54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF590D0, MEMORY[0x1E0DEA968], (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94368, a3);
}

uint64_t sub_1B1B0BA84@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109E58(a1, v2, a2);
}

uint64_t sub_1B1B0BA8C(uint64_t result)
{
  return sub_1B2109EC0(result);
}

void sub_1B1B0BA94()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A988)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for TextureShaderAsset, MEMORY[0x1E0DEA968], (uint64_t)&off_1E6396640);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A988);
  }
}

uint64_t sub_1B1B0BAF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5A990, (uint64_t)&type metadata for KernelReference, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A94474, a3);
}

uint64_t sub_1B1B0BB28@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B2109F6C(a1, v2, a2);
}

uint64_t sub_1B1B0BB30(uint64_t result)
{
  return sub_1B2109FE4(result);
}

double sub_1B1B0BB38()
{
  uint64_t *v0;

  return sub_1B1AADE64(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1B0BB44(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1AAECC8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B1B0BB50(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1B1B0BB60(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_1B1B0BB78(result, a2, a3 & 1);
  return result;
}

uint64_t sub_1B1B0BB78(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) == 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_1B1B0BB88()
{
  uint64_t v0;

  sub_1B1B0BB50(**(_QWORD **)(v0 + 24), *(_QWORD *)(*(_QWORD *)(v0 + 24) + 8), *(_BYTE *)(*(_QWORD *)(v0 + 24) + 16));
  return swift_setAtWritableKeyPath();
}

void sub_1B1B0BBE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5A9A8)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for TextureShaderAsset, (uint64_t)&type metadata for KernelReference, (uint64_t)&off_1E6396640);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5A9A8);
  }
}

uint64_t sub_1B1B0BC48()
{
  uint64_t v0;

  swift_release();
  sub_1B1B0BB78(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject();
}

uint64_t sub_1B1B0BC78(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_1B1B0BCA8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t TupleTypeMetadata2;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t destroy for KernelReference(uint64_t a1)
{
  return sub_1B1B0BB78(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s3VFX15KernelReferenceOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1B0BB50(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for KernelReference(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1B0BB50(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_BYTE *)(a1 + 16);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  sub_1B1B0BB78(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for KernelReference(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = v3;
  sub_1B1B0BB78(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FunctionConstant.Key(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FunctionConstant.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1B0BE84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_1B1B0BE8C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for KernelReference()
{
  return &type metadata for KernelReference;
}

uint64_t sub_1B1B0BEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1A80914(a1, a2, v3, &qword_1EEF5AA08, (uint64_t)&type metadata for GraphScriptingConfig.Mode, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_1B1A97348, a3);
}

uint64_t sub_1B1B0BED8@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1C075D8(a1, v2, a2);
}

uint64_t sub_1B1B0BEE0(uint64_t result)
{
  return sub_1B1C0763C(result);
}

double sub_1B1B0BEE8()
{
  uint64_t *v0;

  return sub_1B1AADFAC(v0[2], v0[3], v0[4], &qword_1EEF5AA18, (uint64_t)&type metadata for GraphScriptingConfig.Mode);
}

uint64_t sub_1B1B0BF14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v8;

  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  if (*(_QWORD *)(a1 + 16))
    v6 = *(_BYTE *)(a1 + 32);
  else
    v6 = 7;
  v8 = v6;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(v4 + 16))(v3, v5, &v8);
}

void sub_1B1B0BF64()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5AA20)
  {
    v0 = type metadata accessor for ComponentValueWriter(0, (uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&type metadata for GraphScriptingConfig.Mode, (uint64_t)&off_1E639BCE0);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5AA20);
  }
}

void sub_1B1B0BFC8(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1B1B0D3C0(uint64_t a1)
{
  return sub_1B1AE76D4(a1);
}

uint64_t sub_1B1B0D3D4(uint64_t a1)
{
  return sub_1B1AEA608(a1);
}

uint64_t sub_1B1B0D3E8()
{
  return sub_1B1AE6D70();
}

uint64_t sub_1B1B0D3FC()
{
  return sub_1B1AE6AB0();
}

uint64_t sub_1B1B0D410(uint64_t a1)
{
  return sub_1B1AF772C(a1);
}

uint64_t sub_1B1B0D50C()
{
  uint64_t v0;

  sub_1B1B0D8D0(v0 + 16);
  return swift_deallocClassInstance();
}

uint64_t VFXWorld.diagnosticsTracker.getter()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1B1B0D708(&unk_1EEF5AA30);
  if (result)
  {
    v1 = MEMORY[0x1B5E240CC](result + 16);
    swift_release();
    if (!v1)
      return 0;
    swift_getObjectType();
    if (swift_conformsToProtocol2())
      result = v1;
    else
      result = 0;
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B1B0D5A0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = sub_1B1B0D708(&unk_1EEF5AA30);
  if (!result)
    goto LABEL_8;
  v3 = MEMORY[0x1B5E240CC](result + 16);
  result = swift_release();
  if (!v3)
    goto LABEL_8;
  swift_getObjectType();
  result = swift_conformsToProtocol2();
  if (result)
    v4 = v3;
  else
    v4 = 0;
  if (!v4)
  {
    result = swift_unknownObjectRelease();
LABEL_8:
    v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1B1B0D624(uint64_t a1, void **a2)
{
  void *v2;
  void *v3;

  v2 = *a2;
  _s13WeakReferenceCMa();
  v3 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  objc_setAssociatedObject(v2, &unk_1EEF5AA30, v3, (void *)0x301);
  return swift_release();
}

uint64_t VFXWorld.diagnosticsTracker.setter()
{
  void *v0;
  void *v1;

  _s13WeakReferenceCMa();
  v1 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  objc_setAssociatedObject(v0, &unk_1EEF5AA30, v1, (void *)0x301);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1B0D708(void *key)
{
  void *v1;
  __int128 v3;
  _OWORD v4[2];

  if (objc_getAssociatedObject(v1, key))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
    sub_1B1A0DDAC(&v3, v4);
  }
  else
  {
    memset(v4, 0, sizeof(v4));
  }
  sub_1B1A0DD18();
  _s13WeakReferenceCMa();
  if (swift_dynamicCast())
    return v3;
  else
    return 0;
}

uint64_t _s13WeakReferenceCMa()
{
  return objc_opt_self();
}

uint64_t (*VFXWorld.diagnosticsTracker.modify(uint64_t *a1))(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  a1[1] = v1;
  v3 = sub_1B1B0D708(&unk_1EEF5AA30);
  if (!v3)
    goto LABEL_8;
  v4 = MEMORY[0x1B5E240CC](v3 + 16);
  swift_release();
  if (!v4)
    goto LABEL_8;
  swift_getObjectType();
  if (swift_conformsToProtocol2())
    v5 = v4;
  else
    v5 = 0;
  if (!v5)
  {
    swift_unknownObjectRelease();
LABEL_8:
    v5 = 0;
  }
  *a1 = v5;
  return sub_1B1B0D854;
}

uint64_t sub_1B1B0D854(uint64_t a1)
{
  void *v1;
  void *v2;

  v1 = *(void **)(a1 + 8);
  _s13WeakReferenceCMa();
  v2 = (void *)swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();
  objc_setAssociatedObject(v1, &unk_1EEF5AA30, v2, (void *)0x301);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1B0D8D0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  return a1;
}

_QWORD *initializeBufferWithCopyOfBuffer for TexturePlaceholder(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_unknownObjectRetain();
  return a1;
}

uint64_t destroy for TexturePlaceholder()
{
  return swift_unknownObjectRelease();
}

uint64_t assignWithCopy for TexturePlaceholder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TexturePlaceholder(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for TexturePlaceholder(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TexturePlaceholder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TexturePlaceholder()
{
  return &type metadata for TexturePlaceholder;
}

void **initializeBufferWithCopyOfBuffer for TextureCGImage(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void destroy for TextureCache.CacheEntry.Loading(id *a1)
{

}

void **assignWithCopy for TextureCGImage(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a1;
  v4 = *a2;
  *a1 = *a2;
  v5 = v4;

  return a1;
}

void **assignWithTake for TextureCGImage(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for TextureCGImage(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TextureCGImage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureCGImage()
{
  return &type metadata for TextureCGImage;
}

uint64_t sub_1B1B0DBB8()
{
  return 0x696669746E656469;
}

uint64_t sub_1B1B0DBD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1B0DC74()
{
  sub_1B1B0E7E8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B0DC9C()
{
  sub_1B1B0E7E8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B0DCC4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  sub_1B1B0E82C(0, &qword_1EEF5AA40, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v15 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B0E7E8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v11 = sub_1B22297CC();
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  a2[1] = v13;
  return result;
}

uint64_t sub_1B1B0DDF0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1B0E82C(0, &qword_1EEF5AA50, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B0E7E8();
  sub_1B222A180();
  sub_1B2229910();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void sub_1B1B0DEE4(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
}

_QWORD *sub_1B1B0DEF0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1B1B0E5D4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B1B0DF20(_QWORD *a1)
{
  uint64_t *v1;
  _BYTE v3[24];
  uint64_t v4;
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v5 = *v1;
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B1A0895C();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B1B0DFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2, 0, ObjectType, a2);
}

double sub_1B1B0E010@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *a1 = 0xFFFFFFFFLL;
  a1[1] = 0;
  return result;
}

uint64_t sub_1B1B0E020(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  os_unfair_lock_s *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;
  uint64_t v48[8];
  _OWORD v49[2];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  _BYTE v63[40];
  uint64_t v64;
  int v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v64 = qword_1ED4D09F8;
  v65 = 0;
  v66 = 2;
  v67 = 0;
  v68 = 2;
  v69 = 0;
  swift_retain();
  sub_1B1E3FF24(1, (uint64_t)v46);
  swift_release();
  v61[0] = v46[0];
  v61[1] = v46[1];
  v62 = v47;
  sub_1B1E8FCE4(v3, (uint64_t)v61, a3 & 0xFFFFFFFFFFLL, v48);
  sub_1B19F66A0((uint64_t)v48, (uint64_t)v49, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v49[0])
  {
    sub_1B19ED720((uint64_t)v46);
    goto LABEL_36;
  }
  v56 = v49[0];
  v57 = v49[1];
  v58 = v50;
  if (v55 <= 0 || (v38 = v52) == 0)
  {
    sub_1B19ED720((uint64_t)v46);
    sub_1B19ED748(v48);
LABEL_36:
    v9 = 0;
    v11 = -1;
    return v11 | (unint64_t)(v9 << 32);
  }
  v37 = v51;
  v7 = v54;
  v45 = v54[4];
  v44 = *(unsigned __int8 *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v35 = v54 + 8;
  v36 = (uint64_t)(v54 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = -1;
  v34 = a2;
  while (1)
  {
    v42 = v8;
    v43 = v9;
    v12 = (unsigned int *)(v37 + 48 * v8);
    v13 = *v12;
    v14 = (uint64_t *)*((_QWORD *)v12 + 2);
    v39 = v12[1];
    v40 = *((_QWORD *)v12 + 3);
    v15 = *((_QWORD *)v12 + 4);
    v16 = *((_QWORD *)v12 + 5);
    v41 = v10;
    if (v44)
    {
      v17 = *(os_unfair_lock_s **)(v16 + 376);
      swift_retain();
      os_unfair_lock_lock(v17);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v45);
    sub_1B19F66A0(v36, (uint64_t)v63, &qword_1ED4B7FB0);
    v18 = v7[4];
    v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v7[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
    v7[7] = v19;
    v35[1] = 0;
    v35[2] = 0;
    *v35 = 0;
    swift_release();
    v20 = sub_1B1A12038((uint64_t)&type metadata for TextureClient, (uint64_t)&off_1E637D4F8, v14, v40, v15, (uint64_t)v7);
    if (v14)
    {
      v21 = v43;
      if (v15)
      {
        v22 = (_QWORD *)(v20 + 8);
        while (1)
        {
          v24 = *v14++;
          v23 = v24;
          v25 = *(v22 - 1) == a1 && *v22 == v34;
          if (v25 || (sub_1B2229D24() & 1) != 0)
          {
            v26 = *(_BYTE *)(v16 + 184);
            v27 = swift_retain();
            if ((v26 & 1) != 0)
              goto LABEL_39;
            v11 = *(_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v23);
            v21 = *(unsigned int *)(*(_QWORD *)(v27 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v11 + 8);
            swift_release();
          }
          v22 += 2;
          if (!--v15)
            goto LABEL_23;
        }
      }
      goto LABEL_23;
    }
    v21 = v43;
    if ((_DWORD)v13 != (_DWORD)v39)
      break;
LABEL_23:
    v28 = v21;
    v59[0] = v56;
    v59[1] = v57;
    v60 = v58;
    v10 = v41;
    sub_1B1F05D48(v7, (unsigned __int16 **)v59, (uint64_t)v63);
    sub_1B1F03804((char *)v16);
    ecs_stack_allocator_pop_snapshot(v45);
    if ((v44 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
    }
    swift_release();
    v8 = v42 + 1;
    v9 = v28;
    if (v42 + 1 == v38)
    {
      sub_1B19ED720((uint64_t)v46);
      sub_1B19ED748(v48);
      sub_1B19ED748(v48);
      return v11 | (unint64_t)(v9 << 32);
    }
  }
  v29 = (_QWORD *)(v20 + 16 * v13 + 8);
  while (1)
  {
    v30 = *(v29 - 1) == a1 && *v29 == v34;
    if (!v30 && (sub_1B2229D24() & 1) == 0)
      goto LABEL_26;
    v31 = *(_BYTE *)(v16 + 184);
    v32 = swift_retain();
    if ((v31 & 1) != 0)
      break;
    v11 = *(_DWORD *)(*(_QWORD *)(v16 + 168) + 4 * v13);
    v21 = *(unsigned int *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v11 + 8);
    swift_release();
LABEL_26:
    ++v13;
    v29 += 2;
    if (v39 == v13)
      goto LABEL_23;
  }
LABEL_39:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1B0E4E4(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t result;
  uint64_t v7;

  v5 = HIDWORD(a1);
  swift_unknownObjectRetain();
  sub_1B1FE69F0(a1, v2, a2);
  result = swift_unknownObjectRelease();
  if (((_DWORD)a1 != -1 || (_DWORD)v5)
    && (uint64_t)(a1 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)a1 < *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    v7 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if ((_DWORD)v5 == -1 || *(_DWORD *)(v7 + 12 * (int)a1 + 8) == (_DWORD)v5)
      return sub_1B2094EFC(*(uint64_t **)(*(_QWORD *)(v2 + 136) + 8 * *(int *)(v7 + 12 * (int)a1) + 32));
  }
  return result;
}

_QWORD *sub_1B1B0E5D4(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD v5[7];

  v3 = sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v1)
  {
    sub_1B19FA070(v5, v5[3]);
    sub_1B1A08878();
    sub_1B2229D6C();
    v3 = (_QWORD *)v5[6];
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

_QWORD *initializeBufferWithCopyOfBuffer for TextureClient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for RenderGraph.RenderTargetDesc()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for TextureClient(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for TextureClient(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityInstance(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EntityInstance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TextureClient()
{
  return &type metadata for TextureClient;
}

unint64_t sub_1B1B0E7E8()
{
  unint64_t result;

  result = qword_1EEF5AA48;
  if (!qword_1EEF5AA48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A014, &type metadata for TextureClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AA48);
  }
  return result;
}

void sub_1B1B0E82C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1B0E7E8();
    v7 = a3(a1, &type metadata for TextureClient.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for TextureClient.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1B0E8C8 + 4 * asc_1B2279DC0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1B0E8E8 + 4 * byte_1B2279DC5[v4]))();
}

_BYTE *sub_1B1B0E8C8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1B0E8E8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1B0E8F0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1B0E8F8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1B0E900(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1B0E908(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TextureClient.CodingKeys()
{
  return &type metadata for TextureClient.CodingKeys;
}

unint64_t sub_1B1B0E928()
{
  unint64_t result;

  result = qword_1EEF5AA58;
  if (!qword_1EEF5AA58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2279FEC, &type metadata for TextureClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AA58);
  }
  return result;
}

unint64_t sub_1B1B0E970()
{
  unint64_t result;

  result = qword_1EEF5AA60;
  if (!qword_1EEF5AA60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2279F5C, &type metadata for TextureClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AA60);
  }
  return result;
}

unint64_t sub_1B1B0E9B8()
{
  unint64_t result;

  result = qword_1EEF5AA68;
  if (!qword_1EEF5AA68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2279F84, &type metadata for TextureClient.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AA68);
  }
  return result;
}

ValueMetadata *type metadata accessor for QuaternionFCoder()
{
  return &type metadata for QuaternionFCoder;
}

uint64_t sub_1B1B0EA18@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B1B0EB04(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1B0EA40(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B1791068();
  sub_1B1B0EBF8((unint64_t *)&qword_1ED4B7318, MEMORY[0x1E0DEDDB8]);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B1B0EB04(_QWORD *a1)
{
  uint64_t v1;
  _QWORD v4[4];

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v1)
  {
    sub_1B19FA070(v4, v4[3]);
    sub_1B1791068();
    sub_1B1B0EBF8((unint64_t *)&qword_1ED4B7330, MEMORY[0x1E0DEDDC8]);
    sub_1B2229D6C();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B1B0EBF8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B1791068();
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AssetManagerInstance()
{
  return &type metadata for AssetManagerInstance;
}

void sub_1B1B0EC48(void **a1, void *a2)
{
  void *v4;
  id v5;

  v4 = *a1;
  v5 = a2;

  *a1 = a2;
}

uint64_t sub_1B1B0EC8C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;

  if (*(_BYTE *)(v2 + 48) == 1)
  {
    v3 = v2;
    v5 = sub_1B1FDF6B0(result, v2);
    if (v5)
      v6 = v5;
    else
      v6 = MEMORY[0x1E0DEE9D8];
    v7 = sub_1B2228CD4();
    v27 = v7;
    v8 = *(_QWORD *)(v6 + 16);
    if (v8)
    {
      for (i = 0; i != v8; ++i)
      {
        v10 = *(_QWORD *)(v6 + 8 * i + 32);
        sub_1B1B8A534(&v29, v10);
      }
      swift_bridgeObjectRelease();
      v11 = v27;
    }
    else
    {
      v11 = v7;
      swift_bridgeObjectRelease();
    }
    v12 = *(unsigned __int16 *)(*(_QWORD *)a2 + 18);
    if (v12 < 0x10)
      return swift_bridgeObjectRelease();
    v13 = (uint64_t *)(*(_QWORD *)a2 + *(unsigned __int16 *)(*(_QWORD *)a2 + 16) + 41);
    v14 = (uint64_t *)((char *)v13 + ((unsigned __int16)v12 & 0xFFF0));
    v26 = OBJC_IVAR____TtC3VFX13EntityManager_logger;
    v15 = v11 + 56;
    while (1)
    {
      v20 = *v13;
      if (*(_QWORD *)(v11 + 16))
      {
        v21 = sub_1B222A060();
        v22 = -1 << *(_BYTE *)(v11 + 32);
        v23 = v21 & ~v22;
        if (((*(_QWORD *)(v15 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) != 0)
        {
          v24 = *(_QWORD *)(v11 + 48);
          if (*(_QWORD *)(v24 + 8 * v23) == v20)
            goto LABEL_15;
          v25 = ~v22;
          while (1)
          {
            v23 = (v23 + 1) & v25;
            if (((*(_QWORD *)(v15 + ((v23 >> 3) & 0xFFFFFFFFFFFFF8)) >> v23) & 1) == 0)
              break;
            if (*(_QWORD *)(v24 + 8 * v23) == v20)
              goto LABEL_15;
          }
        }
      }
      v16 = *(_QWORD *)(v3 + v26);
      v27 = 0;
      v28 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v17 = v27;
      v18 = v28;
      v19 = sub_1B2228E90();
      v27 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, unint64_t))(*(_QWORD *)v16 + 88))(v19, &v27, v17, v18);
      swift_release();
      swift_bridgeObjectRelease();
LABEL_15:
      v13 += 2;
      if (v13 == v14)
        return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1B0EF18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 32);
  v4 = *(_QWORD *)(v3 + 16);
  swift_retain();
  if (v4)
  {
    v11 = MEMORY[0x1E0DEE9D8];
    sub_1B202A10C(0, v4, 0);
    v5 = v11;
    v6 = *(_QWORD *)(v11 + 16);
    v7 = 32;
    do
    {
      v8 = *(_QWORD *)(v3 + v7);
      v9 = *(_QWORD *)(v11 + 24);
      if (v6 >= v9 >> 1)
        sub_1B202A10C(v9 > 1, v6 + 1, 1);
      *(_QWORD *)(v11 + 16) = v6 + 1;
      *(_QWORD *)(v11 + 8 * v6 + 32) = v8;
      v7 += 16;
      ++v6;
      --v4;
    }
    while (v4);
    result = swift_release();
  }
  else
  {
    result = swift_release();
    v5 = MEMORY[0x1E0DEE9D8];
  }
  *a2 = v5;
  return result;
}

BOOL sub_1B1B0F01C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = sub_1B222A060();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

BOOL sub_1B1B0F0E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 result;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v4 = sub_1B222A060();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v9 = ~v5;
  v10 = (v6 + 1) & v9;
  if (((*(_QWORD *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
    return 0;
  do
  {
    v11 = *(_QWORD *)(v8 + 8 * v10);
    result = v11 == a1;
    if (v11 == a1)
      break;
    v10 = (v10 + 1) & v9;
  }
  while (((*(_QWORD *)(v7 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  return result;
}

uint64_t sub_1B1B0F1AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_1B222A06C();
    sub_1B2228824();
    v6 = sub_1B222A0C0();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_1B2229D24() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_1B2229D24() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1B1B0F2E0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  char v13;

  if (*(_QWORD *)(a2 + 16))
  {
    sub_1B222A06C();
    sub_1B2228824();
    swift_bridgeObjectRelease();
    v4 = sub_1B222A0C0();
    v5 = -1 << *(_BYTE *)(a2 + 32);
    v6 = v4 & ~v5;
    if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
    {
      v7 = ~v5;
      while (1)
      {
        if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v6))
        {
          if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v6) == 1)
          {
            v8 = 0xE800000000000000;
            v9 = 0x746E656D67617266;
            v10 = a1;
            if (!a1)
              goto LABEL_18;
          }
          else
          {
            v8 = 0xE700000000000000;
            v9 = 0x657475706D6F63;
            v10 = a1;
            if (!a1)
            {
LABEL_18:
              v12 = 0xE600000000000000;
              if (v9 != 0x786574726576)
                goto LABEL_20;
              goto LABEL_19;
            }
          }
        }
        else
        {
          v8 = 0xE600000000000000;
          v9 = 0x786574726576;
          v10 = a1;
          if (!a1)
            goto LABEL_18;
        }
        if (v10 == 1)
          v11 = 0x746E656D67617266;
        else
          v11 = 0x657475706D6F63;
        if (v10 == 1)
          v12 = 0xE800000000000000;
        else
          v12 = 0xE700000000000000;
        if (v9 != v11)
          goto LABEL_20;
LABEL_19:
        if (v8 == v12)
        {
          swift_bridgeObjectRelease_n();
          v13 = 1;
          return v13 & 1;
        }
LABEL_20:
        v13 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v13 & 1) == 0)
        {
          v6 = (v6 + 1) & v7;
          if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
            continue;
        }
        return v13 & 1;
      }
    }
  }
  v13 = 0;
  return v13 & 1;
}

uint64_t sub_1B1B0F504(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  _BYTE v17[72];

  if (!*(_QWORD *)(a2 + 16))
    goto LABEL_9;
  sub_1B222A06C();
  sub_1B1C9721C((uint64_t)v17, a1);
  v4 = sub_1B222A0C0();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    goto LABEL_9;
  v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
  sub_1B1B1DD24(v8);
  sub_1B1CA8B88(v8);
  v10 = v9;
  sub_1B1A05610(v8);
  if ((v10 & 1) != 0)
  {
    v11 = 1;
    return v11 & 1;
  }
  v12 = ~v5;
  v13 = (v6 + 1) & v12;
  if (((*(_QWORD *)(v7 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
  {
LABEL_9:
    v11 = 0;
    return v11 & 1;
  }
  do
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v13);
    sub_1B1B1DD24(v14);
    sub_1B1CA8B88(v14);
    v11 = v15;
    sub_1B1A05610(v14);
    if ((v11 & 1) != 0)
      break;
    v13 = (v13 + 1) & v12;
  }
  while (((*(_QWORD *)(v7 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  return v11 & 1;
}

uint64_t sub_1B1B0F63C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;

  if (!*(_QWORD *)(a3 + 16))
    return 0;
  v5 = a1;
  v6 = HIDWORD(a1);
  sub_1B222A06C();
  sub_1B222A09C();
  sub_1B222A09C();
  sub_1B222A078();
  v7 = sub_1B222A0C0();
  v8 = -1 << *(_BYTE *)(a3 + 32);
  v9 = v7 & ~v8;
  if (((*(_QWORD *)(a3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
    return 0;
  v10 = ~v8;
  while (1)
  {
    v11 = *(_QWORD *)(a3 + 48) + 16 * v9;
    v12 = *(_DWORD *)v11 == v5 && *(_DWORD *)(v11 + 4) == (_DWORD)v6;
    if (v12 && *(_QWORD *)(v11 + 8) == a2)
      break;
    v9 = (v9 + 1) & v10;
    if (((*(_QWORD *)(a3 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      return 0;
  }
  return 1;
}

BOOL sub_1B1B0F738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_1B222A06C();
  sub_1B222A078();
  v4 = sub_1B222A0C0();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = ~v5;
  do
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a2 + 48) + 8 * v6);
    result = v8 == a1;
    if (v8 == a1)
      break;
    v6 = (v6 + 1) & v7;
  }
  while (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
  return result;
}

BOOL sub_1B1B0F7F4(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_1B222A06C();
  sub_1B222A09C();
  v4 = sub_1B222A0C0();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_DWORD *)(v8 + 4 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_DWORD *)(v8 + 4 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t sub_1B1B0F8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(char *, unint64_t, uint64_t);
  char v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_1B222826C();
  v16 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (sub_1B19E52CC((unint64_t *)&qword_1ED4B7B38, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09C8]), v7 = sub_1B22285D8(), v8 = -1 << *(_BYTE *)(a2 + 32), v9 = v7 & ~v8, ((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0))
  {
    v10 = ~v8;
    v11 = *(_QWORD *)(v16 + 72);
    v12 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
    do
    {
      v12(v6, *(_QWORD *)(a2 + 48) + v11 * v9, v3);
      sub_1B19E52CC(&qword_1ED4B7B40, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
      v13 = sub_1B22286E0();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v6, v3);
      if ((v13 & 1) != 0)
        break;
      v9 = (v9 + 1) & v10;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  else
  {
    v13 = 0;
  }
  return v13 & 1;
}

uint64_t sub_1B1B0FA64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int16 **v2;
  unsigned __int16 **v3;
  unsigned __int16 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  char v26;
  unsigned __int16 *v27;
  unsigned __int16 *v28;
  char v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v6 = *v2;
  v7 = (uint64_t)*v2 + 41;
  v8 = (*v2)[9];
  if (v8 > 0xF)
  {
    v10 = *(_QWORD *)(a1 + 16);
    v11 = sub_1B1DC8944((char *)(v7 + v6[8]), v8 >> 4);
    v9 = v11;
    if (v10)
    {
      v32 = v11;
      v12 = swift_bridgeObjectRetain();
      sub_1B19F4A48(v12);
      v9 = v32;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = a1;
  }
  v13 = v6[10];
  v14 = v6[11];
  v15 = sub_1B19F3C40(3, *(_QWORD *)(a1 + 16));
  v16 = v15;
  if (v14)
  {
    v17 = (char *)(v7 + v13);
    v18 = *(_QWORD *)(v16 + 16);
    v19 = sub_1B1DC8810(v17, v14);
    v20 = v19;
    if (v18)
    {
      v33 = v19;
      sub_1B19F499C(v16);
      v20 = v33;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    v20 = v15;
  }
  v21 = (char *)(v7 + v6[12]);
  v22 = (unint64_t)v6[13] >> 4;
  v23 = (char *)(v7 + v6[14]);
  v24 = v6[15] / 0x18u;
  v25 = *((_DWORD *)v3 + 2);
  v26 = *((_BYTE *)v3 + 12);
  v27 = v3[4];
  v28 = v3[2];
  v29 = *((_BYTE *)v3 + 24);
  v30 = sub_1B1CC8DA4((char *)(v9 + 32), *(_QWORD *)(v9 + 16), (char *)(v20 + 32), *(_QWORD *)(v20 + 16), v21, v22, v23, v24);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a2 = v30;
  *(_DWORD *)(a2 + 8) = v25;
  *(_BYTE *)(a2 + 12) = v26;
  *(_QWORD *)(a2 + 16) = v28;
  *(_BYTE *)(a2 + 24) = v29;
  *(_QWORD *)(a2 + 32) = v27;
  return result;
}

uint64_t sub_1B1B0FBE0(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  BOOL v14;
  char v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  ValueMetadata *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  float32x4_t *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char v69;
  ValueMetadata *v70;
  void *v71;
  simd_float4x4 v72;
  void *v73;
  simd_float4 v74;
  simd_float4 v75;
  simd_float4 v76;
  simd_float4 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  int *v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  BOOL v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  float32x4_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  simd_float4x4 *v119;
  simd_float4x4 *v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  unint64_t v124;
  float32x4_t v125;
  uint64_t v126;
  float32x4_t v127;
  simd_float4 v128;
  float32x4_t v129;
  simd_float4 v130;
  float32x4_t v131;
  simd_float4 v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  float32x4_t v139;
  simd_float4 v140;
  unint64_t v141;
  simd_float4 v142;
  simd_float4 v143;
  simd_float4 v144;
  simd_float4 v145;
  _QWORD v146[10];
  _BYTE v147[80];
  _QWORD v148[10];
  _BYTE v149[80];
  _BYTE v150[80];
  float32x4_t v151[3];
  float32x4_t v152;
  char v153;
  simd_float4x4 v154;
  simd_float4x4 v155;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = v1;
    v4 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    v5 = result + 32;
    swift_bridgeObjectRetain();
    v6 = 0;
    v135 = v5;
    v136 = v2;
    v134 = v4;
    while (1)
    {
      v7 = v5 + 32 * v6;
      if ((*(_BYTE *)(v7 + 8) & 2) == 0)
        goto LABEL_5;
      v8 = *(_QWORD *)v7;
      v9 = *(_QWORD *)v7 >> 60;
      if ((v9 - 5) < 0xB || v9 < 3)
        goto LABEL_5;
      v11 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x14);
      v12 = *(unsigned int *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      v141 = v8;
      sub_1B1B1DD24(v8);
      sub_1B2229304();
      result = swift_conformsToProtocol2();
      if (!result)
      {
        __break(1u);
        return result;
      }
      if (!swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype()
        && !swift_dynamicCastMetatype())
      {
LABEL_71:
        v59 = v141;
        goto LABEL_4;
      }
      v14 = (_DWORD)v12 == -1 && (_DWORD)v11 == 0;
      v15 = v14;
      v137 = (int)v12;
      v133 = v11;
      v138 = v15;
      if (v14)
        goto LABEL_29;
      if ((v12 & 0x80000000) != 0 || v4[1] <= (int)v12)
        goto LABEL_48;
      v22 = *v4;
      v23 = *v4 + 12 * (int)v12;
      if ((_DWORD)v11 != -1 && *(_DWORD *)(v23 + 8) != (_DWORD)v11)
        goto LABEL_48;
      v25 = *(_QWORD *)(v3[17] + 8 * *(int *)(v22 + 12 * (int)v12) + 32);
      v26 = *(_QWORD *)(v25 + 48);
      v27 = *(_QWORD *)(v26 + 16);
      if (v27)
      {
        v28 = *(__int16 *)(v23 + 4);
        v29 = (_QWORD *)(v26 + 56);
        while ((ValueMetadata *)*(v29 - 3) != &type metadata for NodeTransformController)
        {
          v29 += 5;
          if (!--v27)
            goto LABEL_45;
        }
        v71 = (void *)MEMORY[0x1B5E240CC](*(_QWORD *)(v25 + 128) + *v29 + 40 * v28 + 32);
        v72.columns[0] = (simd_float4)xmmword_1B2244DB0;
        v72.columns[1] = (simd_float4)xmmword_1B2244DD0;
        v72.columns[2] = (simd_float4)xmmword_1B2244D90;
        v72.columns[3] = (simd_float4)xmmword_1B2244E20;
        if (v71)
        {
          v73 = v71;
          objc_msgSend(v71, sel_worldTransform, COERCE_DOUBLE(1065353216), 0.0078125, 0.0, 0.0);
          v140 = v74;
          v130 = v76;
          v132 = v75;
          v128 = v77;

          v72.columns[3] = v128;
          v72.columns[2] = v130;
          v72.columns[1] = v132;
          v72.columns[0] = v140;
        }
        v78 = v4[1];
        if (v78 <= (int)v12)
        {
          v59 = v141;
        }
        else
        {
          v79 = *v4 + 12 * (int)v12;
          v80 = *(__int16 *)(v79 + 4);
          v59 = v141;
          if ((_DWORD)v11 == -1 || *(_DWORD *)(v79 + 8) == (_DWORD)v11)
          {
            v81 = *(_QWORD *)(v3[17] + 8 * *(int *)(*v4 + 12 * (int)v12) + 32);
            v82 = *(_QWORD *)(v81 + 48);
            v83 = *(_QWORD *)(v82 + 16);
            if (v83)
            {
              v84 = (_QWORD *)(v82 + 56);
              while ((ValueMetadata *)*(v84 - 3) != &type metadata for WorldTransform)
              {
                v84 += 5;
                if (!--v83)
                  goto LABEL_107;
              }
              *(simd_float4x4 *)(*(_QWORD *)(v81 + 128) + *v84 + (v80 << 6)) = v72;
              if (v4[1] <= (int)v12)
                goto LABEL_4;
LABEL_108:
              v98 = *v4 + 12 * (int)v12;
              v99 = *(__int16 *)(v98 + 4);
              if ((_DWORD)v11 == -1 || *(_DWORD *)(v98 + 8) == (_DWORD)v11)
              {
                v100 = *(_QWORD *)(v3[17] + 8 * *(int *)(*v4 + 12 * (int)v12) + 32);
                v101 = *(_QWORD *)(v100 + 48);
                v102 = *(_QWORD *)(v101 + 16);
                if (v102)
                {
                  v103 = (_QWORD *)(v101 + 56);
                  while ((ValueMetadata *)*(v103 - 3) != &type metadata for InverseWorldTransform)
                  {
                    v103 += 5;
                    if (!--v102)
                      goto LABEL_71;
                  }
                  v119 = (simd_float4x4 *)(*(_QWORD *)(v100 + 128) + *v103 + (v99 << 6));
                  *v119 = __invert_f4(v72);
                  v59 = v141;
                }
              }
              goto LABEL_4;
            }
          }
        }
LABEL_107:
        if (v78 > (int)v12)
          goto LABEL_108;
        goto LABEL_4;
      }
LABEL_45:
      v30 = *(_QWORD *)(*(_QWORD *)(v3[10] + 8 * *(__int16 *)(v22 + 12 * (int)v12 + 6) + 32) + 16);
      v31 = *(_QWORD *)(v30 + 128);
      if (*(_QWORD *)(v31 + 16))
      {
        v32 = sub_1B1DC3AC8((uint64_t)&type metadata for NotInHierarchy);
        if ((v33 & 1) != 0)
          break;
      }
      v11 = v133;
      if ((v12 & 0x80000000) != 0)
        goto LABEL_29;
LABEL_49:
      v35 = v4[1];
      if (v35 <= (int)v12)
        goto LABEL_29;
      v36 = *v4;
      v37 = *v4 + 12 * (int)v12;
      v38 = *(__int16 *)(v37 + 4);
      if ((_DWORD)v11 != -1 && *(_DWORD *)(v37 + 8) != (_DWORD)v11
        || (v39 = v3[17] + 32,
            v40 = *(_QWORD *)(v39 + 8 * *(int *)(v36 + 12 * (int)v12)),
            v41 = *(_QWORD *)(v40 + 48),
            (v42 = *(_QWORD *)(v41 + 16)) == 0))
      {
LABEL_73:
        v65 = *v4;
        if ((_DWORD)v11 == -1 || *(_DWORD *)(v65 + 12 * (int)v12 + 8) == (_DWORD)v11)
        {
          v66 = *(_QWORD *)(*(_QWORD *)(v3[10] + 8 * *(__int16 *)(v65 + 12 * (int)v12 + 6) + 32) + 16);
          v67 = *(_QWORD *)(v66 + 128);
          if (*(_QWORD *)(v67 + 16) && (v68 = sub_1B1DC3AC8((uint64_t)&type metadata for PointOfView), (v69 & 1) != 0))
          {
            v70 = *(ValueMetadata **)(*(_QWORD *)(v66 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v67 + 56) + 8 * v68) + 32);
            v129 = (float32x4_t)xmmword_1B2244DD0;
            v131 = (float32x4_t)xmmword_1B2244DB0;
            *(_QWORD *)&v13 = 0;
            v125 = (float32x4_t)xmmword_1B2244E20;
            v127 = (float32x4_t)xmmword_1B2244D90;
            v11 = v133;
            if (v70 == &type metadata for PointOfView)
              goto LABEL_61;
          }
          else
          {
            v11 = v133;
          }
        }
LABEL_29:
        v16 = (_QWORD *)v3[22];
        swift_retain();
        os_unfair_recursive_lock_lock_with_options();
        v17 = v16[6];
        v18 = *(_QWORD *)(v17 + 16);
        if (!v18)
          goto LABEL_60;
        v19 = 0;
        v20 = (_QWORD *)(v17 + 56);
        v21 = 24;
        while ((ValueMetadata *)*(v20 - 3) != &type metadata for WorldFromScene)
        {
          ++v19;
          v21 += 32;
          v20 += 5;
          if (v18 == v19)
            goto LABEL_60;
        }
        if (v19 < 0x40 && ((v16[15] >> v19) & 1) != 0)
        {
          v44 = v11;
          v45 = (float32x4_t *)(v16[2] + *v20);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v16[4] + v21));
          os_unfair_recursive_lock_unlock();
          v129 = v45[1];
          v131 = *v45;
          v125 = v45[3];
          v127 = v45[2];
          v11 = v44;
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16[4] + v21));
          swift_release();
        }
        else
        {
LABEL_60:
          os_unfair_recursive_lock_unlock();
          swift_release();
          v129 = (float32x4_t)xmmword_1B2244DD0;
          v131 = (float32x4_t)xmmword_1B2244DB0;
          *(_QWORD *)&v13 = 0;
          v125 = (float32x4_t)xmmword_1B2244E20;
          v127 = (float32x4_t)xmmword_1B2244D90;
        }
        goto LABEL_61;
      }
      v43 = (_QWORD *)(v41 + 56);
      while ((ValueMetadata *)*(v43 - 3) != &type metadata for Parent)
      {
        v43 += 5;
        if (!--v42)
          goto LABEL_73;
      }
      v85 = (int *)(*(_QWORD *)(v40 + 128) + *v43 + 8 * v38);
      v86 = v85[1];
      v87 = *v85;
      v88 = (_DWORD)v87 == -1 && (_DWORD)v86 == 0;
      if (v88
        || (v87 & 0x80000000) != 0
        || v35 <= v87
        || ((_DWORD)v86 != -1 ? (v89 = *(_DWORD *)(v36 + 12 * (int)v87 + 8) == (_DWORD)v86) : (v89 = 1),
            !v89
         || (sub_1B1D1E81C(*(_QWORD *)(v39 + 8 * *(int *)(v36 + 12 * (int)v87)), *(_DWORD *)(v36 + 12 * (int)v87), *(_WORD *)(v36 + 12 * (int)v87 + 4), 64, (uint64_t)v3, (uint64_t)v147), sub_1B1A18378((uint64_t)v147, (uint64_t)v151, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform), (v153 & 1) != 0)))
      {
        v90 = v3;
        sub_1B1E85B04(v87 | (unint64_t)(v86 << 32), 0, 0, 1, 0, 0, 1, 0, (uint64_t)v148, *(int32x2_t *)&v13, 0, 1);
        v91 = v148[0];
        v92 = v148[1];
        v93 = v148[2];
        v94 = v148[3];
        v95 = v148[4];
        v96 = v148[5];
        v97 = v148[6];
        v126 = v148[7];
        sub_1B1AE09AC((uint64_t)v148, (uint64_t)v150);
        if ((v150[64] & 1) != 0)
        {
          v129 = (float32x4_t)xmmword_1B2244DD0;
          v131 = (float32x4_t)xmmword_1B2244DB0;
          v127 = (float32x4_t)xmmword_1B2244D90;
          v13 = xmmword_1B2244E20;
        }
        else
        {
          v104.i64[0] = v91;
          v104.i64[1] = v92;
          v131 = v104;
          v104.i64[0] = v93;
          v104.i64[1] = v94;
          v129 = v104;
          v104.i64[0] = v95;
          v104.i64[1] = v96;
          v127 = v104;
          *(_QWORD *)&v13 = v97;
          *((_QWORD *)&v13 + 1) = v126;
        }
        v125 = (float32x4_t)v13;
        v3 = v90;
      }
      else
      {
        v129 = v151[1];
        v131 = v151[0];
        *(_QWORD *)&v13 = v152.i64[0];
        v125 = v152;
        v127 = v151[2];
      }
      v11 = v133;
LABEL_61:
      v124 = v12 | (v11 << 32);
      v46 = v3;
      sub_1B1E85B04(v124, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v146, *(int32x2_t *)&v13, 0, 1);
      v47 = v146[0];
      v48 = v146[1];
      v50 = v146[2];
      v49 = v146[3];
      v51 = v146[4];
      v52 = v146[5];
      v54 = v146[6];
      v53 = v146[7];
      sub_1B1AE09AC((uint64_t)v146, (uint64_t)v149);
      v55 = xmmword_1B2244DB0;
      v56 = xmmword_1B2244DD0;
      v57 = xmmword_1B2244D90;
      v58 = xmmword_1B2244E20;
      if ((v149[64] & 1) == 0)
      {
        *(_QWORD *)&v55 = v47;
        *((_QWORD *)&v55 + 1) = v48;
        *(_QWORD *)&v56 = v50;
        *((_QWORD *)&v56 + 1) = v49;
        *(_QWORD *)&v57 = v51;
        *((_QWORD *)&v57 + 1) = v52;
        *(_QWORD *)&v58 = v54;
        *((_QWORD *)&v58 + 1) = v53;
      }
      v142 = (simd_float4)xmmword_1B2244DB0;
      v143 = (simd_float4)xmmword_1B2244DD0;
      v144 = (simd_float4)xmmword_1B2244D90;
      v145 = (simd_float4)xmmword_1B2244E20;
      v59 = v141;
      if ((v138 & 1) != 0)
      {
        v3 = v46;
        v5 = v135;
        v2 = v136;
        v4 = v134;
      }
      else
      {
        v3 = v46;
        v5 = v135;
        v2 = v136;
        if ((v137 & 0x80000000) != 0)
        {
          v4 = v134;
          goto LABEL_4;
        }
        v4 = v134;
        if (v134[1] <= v137)
          goto LABEL_4;
        v60 = *v134;
        if ((_DWORD)v133 != -1 && *(_DWORD *)(v60 + 12 * (int)v137 + 8) != (_DWORD)v133)
          goto LABEL_4;
        v61 = *(_QWORD *)(*(_QWORD *)(v3[10] + 8 * *(__int16 *)(v60 + 12 * (int)v137 + 6) + 32) + 16);
        v62 = *(_QWORD *)(v61 + 128);
        if (!*(_QWORD *)(v62 + 16))
          goto LABEL_4;
        v121 = (float32x4_t)v58;
        v122 = (float32x4_t)v57;
        v123 = (float32x4_t)v56;
        v139 = (float32x4_t)v55;
        v63 = sub_1B1DC3AC8((uint64_t)&type metadata for WorldTransform);
        if ((v64 & 1) == 0
          || *(ValueMetadata **)(*(_QWORD *)(v61 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8 * v63) + 32) != &type metadata for WorldTransform)
        {
          goto LABEL_71;
        }
        sub_1B1FD5880(v124, (uint64_t)v3, (float32x4_t *)&v142, v131, v129, v127, v125, v139, v123, v122, v121);
        v105 = v134[1];
        if (v105 <= v137)
        {
          v59 = v141;
          v108 = v133;
        }
        else
        {
          v106 = *v134 + 12 * (int)v137;
          v107 = *(__int16 *)(v106 + 4);
          v108 = v133;
          v59 = v141;
          if ((_DWORD)v133 == -1 || *(_DWORD *)(v106 + 8) == (_DWORD)v133)
          {
            v109 = *(_QWORD *)(v3[17] + 8 * *(int *)(*v134 + 12 * (int)v137) + 32);
            v110 = *(_QWORD *)(v109 + 48);
            v111 = *(_QWORD *)(v110 + 16);
            if (v111)
            {
              v112 = (_QWORD *)(v110 + 56);
              while ((ValueMetadata *)*(v112 - 3) != &type metadata for InverseWorldTransform)
              {
                v112 += 5;
                if (!--v111)
                  goto LABEL_127;
              }
              v120 = (simd_float4x4 *)(*(_QWORD *)(v109 + 128) + *v112 + (v107 << 6));
              v154.columns[2] = v144;
              v154.columns[3] = v145;
              v154.columns[0] = v142;
              v154.columns[1] = v143;
              v155 = __invert_f4(v154);
              v59 = v141;
              *v120 = v155;
              v108 = v133;
              if (v134[1] <= v137)
                goto LABEL_4;
LABEL_128:
              v113 = *v134 + 12 * (int)v137;
              v114 = *(__int16 *)(v113 + 4);
              if (v108 == -1 || *(_DWORD *)(v113 + 8) == v108)
              {
                v115 = *(_QWORD *)(v3[17] + 8 * *(int *)(*v134 + 12 * (int)v137) + 32);
                v116 = *(_QWORD *)(v115 + 48);
                v117 = *(_QWORD *)(v116 + 16);
                if (v117)
                {
                  v118 = (_QWORD *)(v116 + 56);
                  while ((ValueMetadata *)*(v118 - 3) != &type metadata for Children)
                  {
                    v118 += 5;
                    if (!--v117)
                      goto LABEL_4;
                  }
                  sub_1B1E86C78((uint64_t *)(*(_QWORD *)(v115 + 128) + *v118 + 8 * v114), (uint64_t)v3, (float32x4_t *)&v142);
                  v59 = v141;
                }
              }
              goto LABEL_4;
            }
          }
        }
LABEL_127:
        if (v105 > v137)
          goto LABEL_128;
      }
LABEL_4:
      sub_1B1A05610(v59);
LABEL_5:
      if (++v6 == v2)
        return swift_bridgeObjectRelease();
    }
    v34 = *(ValueMetadata **)(*(_QWORD *)(v30 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v31 + 56) + 8 * v32) + 32);
    v129 = (float32x4_t)xmmword_1B2244DD0;
    v131 = (float32x4_t)xmmword_1B2244DB0;
    *(_QWORD *)&v13 = 0;
    v125 = (float32x4_t)xmmword_1B2244E20;
    v127 = (float32x4_t)xmmword_1B2244D90;
    v11 = v133;
    if (v34 == &type metadata for NotInHierarchy)
      goto LABEL_61;
LABEL_48:
    if ((v12 & 0x80000000) != 0)
      goto LABEL_29;
    goto LABEL_49;
  }
  return result;
}

uint64_t type metadata accessor for CPUScriptRunnerSystem(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for CPUScriptRunnerSystem);
}

uint64_t sub_1B1B10740(_QWORD *a1, uint64_t a2)
{
  return sub_1B1B1D194(a1, *(_QWORD *)(a2 + 80));
}

const char *sub_1B1B10750()
{
  return "CPUScriptRunnerSystem";
}

uint64_t sub_1B1B10764@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for AudioFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E637DFB0;
  *(_QWORD *)(inited + 48) = &type metadata for AudioController;
  *(_QWORD *)(inited + 56) = &off_1E6383500;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B10990@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t inited;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  __int16 v31;
  char v32;

  v4 = v3;
  v8 = type metadata accessor for AudioPlayerComponent(0);
  v9 = *v4;
  v10 = *v4 + 41;
  v11 = *(unsigned __int16 *)(*v4 + 16);
  v12 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = &off_1E639B160;
  *(_QWORD *)(inited + 48) = &type metadata for AudioController;
  *(_QWORD *)(inited + 56) = &off_1E6383500;
  if (v12 > 0xF)
  {
    v30 = sub_1B1DC8944((char *)(v10 + v11), v12 >> 4);
    sub_1B19F4A48(inited);
    inited = v30;
  }
  v14 = *(unsigned __int16 *)(v9 + 20);
  v15 = *(unsigned __int16 *)(v9 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v16 + 32) = a1;
  *(_BYTE *)(v16 + 33) = a2;
  if (v15)
  {
    v30 = sub_1B1DC8810((char *)(v10 + v14), v15);
    sub_1B19F499C(v16);
    v16 = v30;
    v17 = *(_QWORD *)(v30 + 16);
  }
  else
  {
    v17 = 2;
  }
  v18 = *v4 + 41;
  v19 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 24));
  v20 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v21 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 28));
  v22 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v23 = *((_DWORD *)v4 + 2);
  v24 = *((_BYTE *)v4 + 12);
  v25 = v4[4];
  v26 = v4[2];
  v27 = *((_BYTE *)v4 + 24);
  v28 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v16 + 32), v17, v19, v20, v21, v22);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v28;
  *(_DWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 12) = v24;
  *(_WORD *)(a3 + 13) = v31;
  *(_BYTE *)(a3 + 15) = v32;
  *(_QWORD *)(a3 + 16) = v26;
  *(_BYTE *)(a3 + 24) = v27;
  *(_DWORD *)(a3 + 25) = v30;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v30 + 3);
  *(_QWORD *)(a3 + 32) = v25;
  return result;
}

uint64_t sub_1B1B10BC0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t inited;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  __int16 v31;
  char v32;

  v4 = v3;
  v8 = type metadata accessor for AudioPlayerComponent(0);
  v9 = *v4;
  v10 = *v4 + 41;
  v11 = *(unsigned __int16 *)(*v4 + 16);
  v12 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = &off_1E639B160;
  *(_QWORD *)(inited + 48) = &type metadata for AudioAnalyzer;
  *(_QWORD *)(inited + 56) = &off_1E6379190;
  if (v12 > 0xF)
  {
    v30 = sub_1B1DC8944((char *)(v10 + v11), v12 >> 4);
    sub_1B19F4A48(inited);
    inited = v30;
  }
  v14 = *(unsigned __int16 *)(v9 + 20);
  v15 = *(unsigned __int16 *)(v9 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v16 + 32) = a1;
  *(_BYTE *)(v16 + 33) = a2;
  if (v15)
  {
    v30 = sub_1B1DC8810((char *)(v10 + v14), v15);
    sub_1B19F499C(v16);
    v16 = v30;
    v17 = *(_QWORD *)(v30 + 16);
  }
  else
  {
    v17 = 2;
  }
  v18 = *v4 + 41;
  v19 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 24));
  v20 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v21 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 28));
  v22 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v23 = *((_DWORD *)v4 + 2);
  v24 = *((_BYTE *)v4 + 12);
  v25 = v4[4];
  v26 = v4[2];
  v27 = *((_BYTE *)v4 + 24);
  v28 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v16 + 32), v17, v19, v20, v21, v22);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v28;
  *(_DWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 12) = v24;
  *(_WORD *)(a3 + 13) = v31;
  *(_BYTE *)(a3 + 15) = v32;
  *(_QWORD *)(a3 + 16) = v26;
  *(_BYTE *)(a3 + 24) = v27;
  *(_DWORD *)(a3 + 25) = v30;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v30 + 3);
  *(_QWORD *)(a3 + 32) = v25;
  return result;
}

uint64_t sub_1B1B10DF0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for CurveComponent;
  *(_QWORD *)(inited + 40) = &off_1E637EB68;
  *(_QWORD *)(inited + 48) = &type metadata for CurveRuntime;
  *(_QWORD *)(inited + 56) = &off_1E6374B70;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B1101C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t inited;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  __int16 v31;
  char v32;

  v4 = v3;
  v8 = type metadata accessor for MovieRuntime(0);
  v9 = *v4;
  v10 = *v4 + 41;
  v11 = *(unsigned __int16 *)(*v4 + 16);
  v12 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for MovieFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E637FDE0;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = &off_1E6375E68;
  if (v12 > 0xF)
  {
    v30 = sub_1B1DC8944((char *)(v10 + v11), v12 >> 4);
    sub_1B19F4A48(inited);
    inited = v30;
  }
  v14 = *(unsigned __int16 *)(v9 + 20);
  v15 = *(unsigned __int16 *)(v9 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v16 + 32) = a1;
  *(_BYTE *)(v16 + 33) = a2;
  if (v15)
  {
    v30 = sub_1B1DC8810((char *)(v10 + v14), v15);
    sub_1B19F499C(v16);
    v16 = v30;
    v17 = *(_QWORD *)(v30 + 16);
  }
  else
  {
    v17 = 2;
  }
  v18 = *v4 + 41;
  v19 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 24));
  v20 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v21 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 28));
  v22 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v23 = *((_DWORD *)v4 + 2);
  v24 = *((_BYTE *)v4 + 12);
  v25 = v4[4];
  v26 = v4[2];
  v27 = *((_BYTE *)v4 + 24);
  v28 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v16 + 32), v17, v19, v20, v21, v22);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v28;
  *(_DWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 12) = v24;
  *(_WORD *)(a3 + 13) = v31;
  *(_BYTE *)(a3 + 15) = v32;
  *(_QWORD *)(a3 + 16) = v26;
  *(_BYTE *)(a3 + 24) = v27;
  *(_DWORD *)(a3 + 25) = v30;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v30 + 3);
  *(_QWORD *)(a3 + 32) = v25;
  return result;
}

uint64_t sub_1B1B1124C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for OrthographicCamera;
  *(_QWORD *)(inited + 40) = &off_1E6393C48;
  *(_QWORD *)(inited + 48) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(inited + 56) = &off_1E638A420;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B11478@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for PerspectiveCamera;
  *(_QWORD *)(inited + 40) = &off_1E638EE48;
  *(_QWORD *)(inited + 48) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(inited + 56) = &off_1E638A420;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B116A4@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for EmitterDescription;
  *(_QWORD *)(inited + 40) = &off_1E6391B38;
  *(_QWORD *)(inited + 48) = &type metadata for EmitterRuntime;
  *(_QWORD *)(inited + 56) = &off_1E637F470;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B118D0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for TextureFileAsset;
  *(_QWORD *)(inited + 40) = &off_1E638AE10;
  *(_QWORD *)(inited + 48) = &type metadata for TextureCPURuntime;
  *(_QWORD *)(inited + 56) = &off_1E638FF50;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B11AFC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for TextureShaderAsset;
  *(_QWORD *)(inited + 40) = &off_1E63966E8;
  *(_QWORD *)(inited + 48) = &type metadata for TextureGPURuntime;
  *(_QWORD *)(inited + 56) = &off_1E6390090;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B11D28@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for TextureCPURuntime;
  *(_QWORD *)(inited + 40) = &off_1E638FF50;
  *(_QWORD *)(inited + 48) = &type metadata for TextureRequireGPURepresentation;
  *(_QWORD *)(inited + 56) = &off_1E63B6458;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B11F54@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Material;
  *(_QWORD *)(inited + 40) = &off_1E63C1B48;
  *(_QWORD *)(inited + 48) = &type metadata for MaterialRuntime;
  *(_QWORD *)(inited + 56) = &off_1E6384378;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B12180@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Material;
  *(_QWORD *)(inited + 40) = &off_1E63C1B48;
  *(_QWORD *)(inited + 48) = &type metadata for VertexLayoutCollection;
  *(_QWORD *)(inited + 56) = &off_1E63A9BC8;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B123AC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ColorRampComponent;
  *(_QWORD *)(inited + 40) = &off_1E6391000;
  *(_QWORD *)(inited + 48) = &type metadata for ColorRampRuntime;
  *(_QWORD *)(inited + 56) = &off_1E6386CA8;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B125D8@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E6382C78;
  *(_QWORD *)(inited + 48) = &type metadata for InverseWorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E63A3348;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B12804@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Parent;
  *(_QWORD *)(inited + 40) = &off_1E63BB960;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B12A30@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Skybox;
  *(_QWORD *)(inited + 40) = &off_1E63BD0F0;
  *(_QWORD *)(inited + 48) = &type metadata for IBLGenerator;
  *(_QWORD *)(inited + 56) = &off_1E6375B10;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B12C5C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ProjectionMatrix;
  *(_QWORD *)(inited + 40) = &off_1E638A420;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B12E88@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t inited;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  __int16 v31;
  char v32;

  v4 = v3;
  v8 = type metadata accessor for SceneKitRenderer(0);
  v9 = *v4;
  v10 = *v4 + 41;
  v11 = *(unsigned __int16 *)(*v4 + 16);
  v12 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for SceneKitAssetInstance;
  *(_QWORD *)(inited + 40) = &off_1E63A6140;
  *(_QWORD *)(inited + 48) = v8;
  *(_QWORD *)(inited + 56) = &off_1E638A8C0;
  if (v12 > 0xF)
  {
    v30 = sub_1B1DC8944((char *)(v10 + v11), v12 >> 4);
    sub_1B19F4A48(inited);
    inited = v30;
  }
  v14 = *(unsigned __int16 *)(v9 + 20);
  v15 = *(unsigned __int16 *)(v9 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v16 + 32) = a1;
  *(_BYTE *)(v16 + 33) = a2;
  if (v15)
  {
    v30 = sub_1B1DC8810((char *)(v10 + v14), v15);
    sub_1B19F499C(v16);
    v16 = v30;
    v17 = *(_QWORD *)(v30 + 16);
  }
  else
  {
    v17 = 2;
  }
  v18 = *v4 + 41;
  v19 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 24));
  v20 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v21 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 28));
  v22 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v23 = *((_DWORD *)v4 + 2);
  v24 = *((_BYTE *)v4 + 12);
  v25 = v4[4];
  v26 = v4[2];
  v27 = *((_BYTE *)v4 + 24);
  v28 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v16 + 32), v17, v19, v20, v21, v22);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v28;
  *(_DWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 12) = v24;
  *(_WORD *)(a3 + 13) = v31;
  *(_BYTE *)(a3 + 15) = v32;
  *(_QWORD *)(a3 + 16) = v26;
  *(_BYTE *)(a3 + 24) = v27;
  *(_DWORD *)(a3 + 25) = v30;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v30 + 3);
  *(_QWORD *)(a3 + 32) = v25;
  return result;
}

uint64_t sub_1B1B130B8@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for TriggerScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E637DAB0;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B13310@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  updated = type metadata accessor for ParticleUpdateScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = updated;
  *(_QWORD *)(inited + 40) = &off_1E639E500;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B13568@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  inited = type metadata accessor for ParticleInitScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v14 + 32) = inited;
  *(_QWORD *)(v14 + 40) = &off_1E6394BF0;
  *(_QWORD *)(v14 + 48) = v9;
  *(_QWORD *)(v14 + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(v14);
    v14 = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(v14 + 32), *(_QWORD *)(v14 + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B137C0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for ShaderScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6377528;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B13A18@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for MetalFunctionScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4BB270, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6398318;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B13C70@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for SimpleScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9660, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E63777E8;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B13EC8@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for GraphScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4B9648, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6370B28;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B14120@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for EmitterScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4B9670, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E637A168;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E639EBC8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B14378@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for TextureGPURuntime;
  *(_QWORD *)(inited + 40) = &off_1E6390090;
  *(_QWORD *)(inited + 48) = &type metadata for TextureRequireCPURepresentation;
  *(_QWORD *)(inited + 56) = &off_1E63B6380;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B145A4@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for DrawCallComponent;
  *(_QWORD *)(inited + 40) = &off_1E638BED8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 56) = &off_1E63C6040;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B147D0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSubSpawn;
  *(_QWORD *)(inited + 40) = &off_1E638A010;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleSubSpawn.State;
  *(_QWORD *)(inited + 56) = &off_1E6389E38;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B149FC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  __int16 v32;
  char v33;

  v4 = v3;
  sub_1B1A1B6FC(0, (unint64_t *)&qword_1ED4BB240, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)(inited + 40) = &off_1E637D0D8;
  *(_QWORD *)(inited + 48) = &type metadata for MetalScriptReflection;
  *(_QWORD *)(inited + 56) = &off_1E63A35B8;
  if (v13 > 0xF)
  {
    v31 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v31;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v31 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v31;
    v18 = *(_QWORD *)(v31 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v32;
  *(_BYTE *)(a3 + 15) = v33;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v31;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B14C4C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for GraphScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6370B28;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B14EA4@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for SimpleScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E63777E8;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B150FC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for TriggerScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E637DAB0;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E637D0D8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B15354@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 40) = &off_1E6382C78;
  *(_QWORD *)(inited + 48) = &type metadata for ModelRenderer;
  *(_QWORD *)(inited + 56) = &off_1E637B7C8;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B15580@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Name;
  *(_QWORD *)(inited + 40) = &off_1E63B9B60;
  *(_QWORD *)(inited + 48) = &type metadata for Bindings;
  *(_QWORD *)(inited + 56) = &off_1E63BE9F0;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B157AC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for TriggerScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4BB3C0, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E637DAB0;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B15A04@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t updated;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  updated = type metadata accessor for ParticleUpdateScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9910, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = updated;
  *(_QWORD *)(inited + 40) = &off_1E639E500;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B15C5C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t inited;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  inited = type metadata accessor for ParticleInitScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9900, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v14 = swift_initStackObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v14 + 32) = inited;
  *(_QWORD *)(v14 + 40) = &off_1E6394BF0;
  *(_QWORD *)(v14 + 48) = v9;
  *(_QWORD *)(v14 + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(v14);
    v14 = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(v14 + 32), *(_QWORD *)(v14 + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B15EB4@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for EmitterScript(0);
  sub_1B1A1B6FC(0, &qword_1ED4B9950, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E637A168;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B1610C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for ShaderScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9930, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6377528;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B16364@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for MetalFunctionScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4BB3B0, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6398318;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B165BC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for SimpleScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9940, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E63777E8;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B16814@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t inited;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v32;
  __int16 v33;
  char v34;

  v4 = v3;
  v7 = type metadata accessor for GraphScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9920, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v9 = v8;
  v10 = *v4;
  v11 = *v4 + 41;
  v12 = *(unsigned __int16 *)(*v4 + 16);
  v13 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = &off_1E6370B28;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = &off_1E63A95F8;
  if (v13 > 0xF)
  {
    v32 = sub_1B1DC8944((char *)(v11 + v12), v13 >> 4);
    sub_1B19F4A48(inited);
    inited = v32;
  }
  v15 = *(unsigned __int16 *)(v10 + 20);
  v16 = *(unsigned __int16 *)(v10 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 33) = a2;
  if (v16)
  {
    v32 = sub_1B1DC8810((char *)(v11 + v15), v16);
    sub_1B19F499C(v17);
    v17 = v32;
    v18 = *(_QWORD *)(v32 + 16);
  }
  else
  {
    v18 = 2;
  }
  v19 = *v4 + 41;
  v20 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 24));
  v21 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v22 = (char *)(v19 + *(unsigned __int16 *)(*v4 + 28));
  v23 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v24 = *((_DWORD *)v4 + 2);
  v25 = *((_BYTE *)v4 + 12);
  v26 = v4[4];
  v27 = v4[2];
  v28 = *((_BYTE *)v4 + 24);
  v29 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v29;
  *(_DWORD *)(a3 + 8) = v24;
  *(_BYTE *)(a3 + 12) = v25;
  *(_WORD *)(a3 + 13) = v33;
  *(_BYTE *)(a3 + 15) = v34;
  *(_QWORD *)(a3 + 16) = v27;
  *(_BYTE *)(a3 + 24) = v28;
  *(_DWORD *)(a3 + 25) = v32;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v32 + 3);
  *(_QWORD *)(a3 + 32) = v26;
  return result;
}

uint64_t sub_1B1B16A6C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t inited;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  __int16 v31;
  char v32;

  v4 = v3;
  v8 = type metadata accessor for VFXObjectTag();
  v9 = *v4;
  v10 = *v4 + 41;
  v11 = *(unsigned __int16 *)(*v4 + 16);
  v12 = *(unsigned __int16 *)(*v4 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v8;
  *(_QWORD *)(inited + 40) = &off_1E63786D0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v12 > 0xF)
  {
    v30 = sub_1B1DC8944((char *)(v10 + v11), v12 >> 4);
    sub_1B19F4A48(inited);
    inited = v30;
  }
  v14 = *(unsigned __int16 *)(v9 + 20);
  v15 = *(unsigned __int16 *)(v9 + 22);
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v16 + 32) = a1;
  *(_BYTE *)(v16 + 33) = a2;
  if (v15)
  {
    v30 = sub_1B1DC8810((char *)(v10 + v14), v15);
    sub_1B19F499C(v16);
    v16 = v30;
    v17 = *(_QWORD *)(v30 + 16);
  }
  else
  {
    v17 = 2;
  }
  v18 = *v4 + 41;
  v19 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 24));
  v20 = (unint64_t)*(unsigned __int16 *)(*v4 + 26) >> 4;
  v21 = (char *)(v18 + *(unsigned __int16 *)(*v4 + 28));
  v22 = *(unsigned __int16 *)(*v4 + 30) / 0x18u;
  v23 = *((_DWORD *)v4 + 2);
  v24 = *((_BYTE *)v4 + 12);
  v25 = v4[4];
  v26 = v4[2];
  v27 = *((_BYTE *)v4 + 24);
  v28 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v16 + 32), v17, v19, v20, v21, v22);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v28;
  *(_DWORD *)(a3 + 8) = v23;
  *(_BYTE *)(a3 + 12) = v24;
  *(_WORD *)(a3 + 13) = v31;
  *(_BYTE *)(a3 + 15) = v32;
  *(_QWORD *)(a3 + 16) = v26;
  *(_BYTE *)(a3 + 24) = v27;
  *(_DWORD *)(a3 + 25) = v30;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v30 + 3);
  *(_QWORD *)(a3 + 32) = v25;
  return result;
}

uint64_t sub_1B1B16C9C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticlePlaneCollider;
  *(_QWORD *)(inited + 40) = &off_1E63A4AE0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B16EC8@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleAge;
  *(_QWORD *)(inited + 56) = &off_1E6371840;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B170F4@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for ParticleRibbonLength;
  *(_QWORD *)(inited + 56) = &off_1E639D4B0;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B17320@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for VFXDrawCallHandler;
  *(_QWORD *)(inited + 40) = &off_1E63969E0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldAABB;
  *(_QWORD *)(inited + 56) = &off_1E63C6040;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B1754C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for KillShape;
  *(_QWORD *)(inited + 40) = &off_1E63C3EA0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B17778@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for EmitterShape;
  *(_QWORD *)(inited + 40) = &off_1E63753A8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B179A4@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Skeleton;
  *(_QWORD *)(inited + 40) = &off_1E63C2C48;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B17BD0@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ForceField;
  *(_QWORD *)(inited + 40) = &off_1E636DAC8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B17DFC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for SubEntity;
  *(_QWORD *)(inited + 40) = &off_1E63C54D8;
  *(_QWORD *)(inited + 48) = &type metadata for Parent;
  *(_QWORD *)(inited + 56) = &off_1E63BB960;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B18028@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Material;
  *(_QWORD *)(inited + 40) = &off_1E63C1B48;
  *(_QWORD *)(inited + 48) = &type metadata for MaterialParameters;
  *(_QWORD *)(inited + 56) = &off_1E6392578;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B18254@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for VFXAssetTag;
  *(_QWORD *)(inited + 40) = &off_1E6374040;
  *(_QWORD *)(inited + 48) = &type metadata for Name;
  *(_QWORD *)(inited + 56) = &off_1E63B9B60;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B18480@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for EmitterShape;
  *(_QWORD *)(inited + 40) = &off_1E63753A8;
  *(_QWORD *)(inited + 48) = &type metadata for Scale;
  *(_QWORD *)(inited + 56) = &off_1E63BAA30;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B186AC@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticlePlaneCollider;
  *(_QWORD *)(inited + 40) = &off_1E63A4AE0;
  *(_QWORD *)(inited + 48) = &type metadata for Scale;
  *(_QWORD *)(inited + 56) = &off_1E63BAA30;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B188D8@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSphereCollider;
  *(_QWORD *)(inited + 40) = &off_1E63A8E48;
  *(_QWORD *)(inited + 48) = &type metadata for Scale;
  *(_QWORD *)(inited + 56) = &off_1E63BAA30;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B18B04@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleBoxCollider;
  *(_QWORD *)(inited + 40) = &off_1E6398868;
  *(_QWORD *)(inited + 48) = &type metadata for Scale;
  *(_QWORD *)(inited + 56) = &off_1E63BAA30;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B18D30@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleCylinderCollider;
  *(_QWORD *)(inited + 40) = &off_1E63AE100;
  *(_QWORD *)(inited + 48) = &type metadata for Scale;
  *(_QWORD *)(inited + 56) = &off_1E63BAA30;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B18F5C@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int16 **v3;
  unsigned __int16 **v4;
  unsigned __int16 *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  unsigned __int16 *v24;
  unsigned __int16 *v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v4 = v3;
  v8 = *v3;
  v9 = (uint64_t)*v3 + 41;
  v10 = (*v3)[8];
  v11 = v8[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleMeshRenderer;
  *(_QWORD *)(inited + 40) = &off_1E639CE20;
  *(_QWORD *)(inited + 48) = &type metadata for Scale;
  *(_QWORD *)(inited + 56) = &off_1E63BAA30;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = v8[10];
  v14 = v8[11];
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD00, (uint64_t)&type metadata for AccessControl, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v15 = swift_initStackObject();
  *(_OWORD *)(v15 + 16) = xmmword_1B226CD10;
  *(_BYTE *)(v15 + 32) = a1;
  *(_BYTE *)(v15 + 33) = a2;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v15);
    v15 = v29;
    v16 = *(_QWORD *)(v29 + 16);
  }
  else
  {
    v16 = 2;
  }
  v17 = (uint64_t)*v4 + 41;
  v18 = (char *)(v17 + (*v4)[12]);
  v19 = (unint64_t)(*v4)[13] >> 4;
  v20 = (char *)(v17 + (*v4)[14]);
  v21 = (*v4)[15] / 0x18u;
  v22 = *((_DWORD *)v4 + 2);
  v23 = *((_BYTE *)v4 + 12);
  v24 = v4[4];
  v25 = v4[2];
  v26 = *((_BYTE *)v4 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v15 + 32), v16, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B19188(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  uint64_t v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  _QWORD v21[5];
  _QWORD v22[6];
  int v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v2 = v1;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v28 = qword_1ED4D09F8;
  v29 = 0;
  v30 = 2;
  v31 = 0;
  v32 = 2;
  v33 = 0;
  swift_retain();
  sub_1B1B14EA4(1, 1, (uint64_t)v21);
  swift_release();
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = v21[0];
  v7 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain();
  os_unfair_lock_lock(v7);
  sub_1B1E8F784(a1, v6);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v6);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  sub_1B19ED720((uint64_t)v21);
  sub_1B19ED720((uint64_t)v21);
  v22[5] = qword_1ED4D09F8;
  v23 = 0;
  v24 = 2;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  swift_retain();
  sub_1B1B14C4C(1, 1, (uint64_t)v22);
  swift_release();
  swift_getObjectType();
  v8 = sub_1B204D6E4();
  v9 = v22[0];
  v10 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain();
  os_unfair_lock_lock(v10);
  sub_1B1E8F784(a1, v9);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v8, v9);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  sub_1B19ED720((uint64_t)v22);
  sub_1B19ED720((uint64_t)v22);
  v11 = v2[3];
  swift_getObjectType();
  v12 = sub_1B204D6E4();
  v13 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v13);
  sub_1B1E8F784(a1, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v12, v11);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  v14 = v2[8];
  swift_getObjectType();
  v15 = sub_1B204D6E4();
  v16 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v16);
  sub_1B1E8F784(a1, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v15, v14);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  v17 = v2[13];
  swift_getObjectType();
  v18 = sub_1B204D6E4();
  v19 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v19);
  sub_1B1E8F784(a1, v17);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v18, v17);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  swift_release_n();
  swift_getObjectType();
  return sub_1B204D6E4();
}

void sub_1B1B19554(uint64_t a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35;
  unint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  char v40;
  uint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int *v70;
  unsigned int v71;
  unsigned int v72;
  ValueMetadata *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  BOOL v78;
  uint64_t v79;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  char v86;
  BOOL v87;
  uint64_t v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t DynamicType;
  uint64_t v114;
  uint64_t v115;
  unsigned int *v116;
  uint64_t v117;
  uint64_t v118;
  ValueMetadata *v119;
  uint64_t v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v125;
  uint64_t v126;
  BOOL v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  char v132;
  uint64_t v134;
  uint64_t v135;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  __int128 v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t KeyPath;
  uint64_t v152;
  uint64_t v153;
  simd_float4 v154;
  simd_float4 v155;
  simd_float4 v156;
  simd_float4 v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  simd_float4 v171;
  simd_float4 v172;
  simd_float4 v173;
  simd_float4 v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  int32x2_t v182;
  char v183;
  unsigned int *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  simd_float4x4 *v202;
  uint64_t v203;
  _QWORD v204[3];
  char *v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  float32x4_t v222;
  simd_float4x4 v223;
  uint64_t v224;
  unint64_t v225;
  __int128 v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  int *v231;
  uint64_t v232;
  simd_float4 v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  simd_float4 v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  _OWORD v247[2];
  simd_float4x4 v248;
  _OWORD v249[2];
  uint64_t v250[12];
  _BYTE v251[80];
  _QWORD v252[10];
  _BYTE v253[80];
  _BYTE v254[80];
  _OWORD v255[4];
  char v256;
  __n128 v257;
  __n128 v258;
  __n128 v259;
  __n128 v260;
  char v261;
  _OWORD v262[2];
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;
  _OWORD v272[2];
  uint64_t v273;
  _BYTE v274[40];
  _OWORD v275[2];
  uint64_t v276;
  simd_float4x4 v277;

  sub_1B1B1F358();
  v231 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v230 = (char *)v204 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1B222820C();
  v228 = *(_QWORD *)(v6 - 8);
  v229 = v6;
  MEMORY[0x1E0C80A78](v6, v7);
  v227 = (char *)v204 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 96) == 1
    && (*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 99) & 1) == 0)
  {
    v234 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
    v9 = *(_OWORD *)(v1 + 120);
    v275[0] = *(_OWORD *)(v1 + 104);
    v275[1] = v9;
    v276 = *(_QWORD *)(v1 + 136);
    sub_1B1E8FCE4(a1, (uint64_t)v275, 0x200000000, v250);
    sub_1B1A18378((uint64_t)v250, (uint64_t)v262, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v224 = a1;
    if (*(_QWORD *)&v262[0])
    {
      v269 = v262[0];
      v270 = v262[1];
      v271 = v263;
      if (v268 >= 1 && (v241 = v265) != 0)
      {
        v240 = v264;
        v10 = v267[4];
        LODWORD(v244) = *(unsigned __int8 *)(v266 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v245 = v267;
        v237 = v267 + 8;
        v238 = v267 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        v11 = 0;
        v12 = 0;
        v210 = (char *)MEMORY[0x1E0DEE9D8];
        v239 = v10;
        do
        {
          v233.i64[0] = v12;
          v13 = (unsigned int *)(v240 + 48 * v11);
          v15 = *v13;
          v14 = v13[1];
          v17 = (uint64_t *)*((_QWORD *)v13 + 2);
          v16 = *((_QWORD *)v13 + 3);
          v18 = *((_QWORD *)v13 + 4);
          v19 = *((_QWORD *)v13 + 5);
          v243 = v11;
          v242.i64[0] = v16;
          if ((_DWORD)v244)
          {
            v20 = *(os_unfair_lock_s **)(v19 + 376);
            swift_retain();
            os_unfair_lock_lock(v20);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v10);
          sub_1B1A18378((uint64_t)v238, (uint64_t)v274, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v21 = v245;
          v22 = v245[4];
          v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v19 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v21[6] = ecs_stack_allocator_allocate(v22, 48 * v23, 8);
          v21[7] = v23;
          v24 = v237;
          v237[1] = 0;
          v24[2] = 0;
          *v24 = 0;
          swift_release();
          v25 = sub_1B1A12038((uint64_t)&type metadata for Bindings, (uint64_t)&off_1E63BE948, v17, v242.i64[0], v18, (uint64_t)v21);
          if (v17)
          {
            if (v18)
            {
              v26 = (_BYTE *)(v25 + 8);
              do
              {
                v30 = *v17++;
                v29 = v30;
                if (*v26 == 1)
                {
                  *v26 = 0;
                  v31 = *(_BYTE *)(v19 + 184);
                  v32 = swift_retain();
                  if ((v31 & 1) != 0)
                    goto LABEL_259;
                  v33 = *(_DWORD *)(*(_QWORD *)(v19 + 168) + 4 * v29);
                  v34 = *(_DWORD *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v33 + 8);
                  swift_release();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v210 = sub_1B1C63D98(0, *((_QWORD *)v210 + 2) + 1, 1, v210);
                  v36 = *((_QWORD *)v210 + 2);
                  v35 = *((_QWORD *)v210 + 3);
                  if (v36 >= v35 >> 1)
                    v210 = sub_1B1C63D98(v35 > 1, v36 + 1, 1, v210);
                  v27 = v210;
                  *((_QWORD *)v210 + 2) = v36 + 1;
                  v28 = &v27[8 * v36];
                  *((_DWORD *)v28 + 8) = v33;
                  *((_DWORD *)v28 + 9) = v34;
                }
                v26 += 24;
                --v18;
              }
              while (v18);
            }
          }
          else if ((_DWORD)v15 != (_DWORD)v14)
          {
            v37 = (_BYTE *)(v25 + 24 * v15 + 8);
            do
            {
              if (*v37 == 1)
              {
                *v37 = 0;
                v40 = *(_BYTE *)(v19 + 184);
                v41 = swift_retain();
                if ((v40 & 1) != 0)
                {
LABEL_259:
                  sub_1B2229688();
                  __break(1u);
                  return;
                }
                v42 = *(_DWORD *)(*(_QWORD *)(v19 + 168) + 4 * v15);
                v43 = *(_DWORD *)(*(_QWORD *)(v41 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v42 + 8);
                swift_release();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v210 = sub_1B1C63D98(0, *((_QWORD *)v210 + 2) + 1, 1, v210);
                v45 = *((_QWORD *)v210 + 2);
                v44 = *((_QWORD *)v210 + 3);
                if (v45 >= v44 >> 1)
                  v210 = sub_1B1C63D98(v44 > 1, v45 + 1, 1, v210);
                v38 = v210;
                *((_QWORD *)v210 + 2) = v45 + 1;
                v39 = &v38[8 * v45];
                *((_DWORD *)v39 + 8) = v42;
                *((_DWORD *)v39 + 9) = v43;
              }
              ++v15;
              v37 += 24;
            }
            while (v14 != v15);
          }
          v272[0] = v269;
          v272[1] = v270;
          v273 = v271;
          v12 = v233.i64[0];
          sub_1B1F05D48(v245, (unsigned __int16 **)v272, (uint64_t)v274);
          sub_1B1F03804((char *)v19);
          v10 = v239;
          ecs_stack_allocator_pop_snapshot(v239);
          if ((v244 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
          }
          swift_release();
          v11 = v243 + 1;
        }
        while (v243 + 1 != v241);
        sub_1B19ED748(v250);
        a1 = v224;
      }
      else
      {
        v12 = 0;
        v210 = (char *)MEMORY[0x1E0DEE9D8];
      }
      v233.i64[0] = v12;
      sub_1B19ED748(v250);
    }
    else
    {
      v233.i64[0] = 0;
      v210 = (char *)MEMORY[0x1E0DEE9D8];
    }
    v244 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_mainGraphScriptGroup);
    v204[0] = *(_QWORD *)(*(_QWORD *)(v244 + 16) + 16);
    if (v204[0])
    {
      v46 = 0;
      v47 = (_QWORD *)(v224 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      v205 = v210 + 36;
      v223.columns[3] = (simd_float4)xmmword_1B2244E20;
      v223.columns[2] = (simd_float4)xmmword_1B2244D90;
      v223.columns[1] = (simd_float4)xmmword_1B2244DD0;
      v223.columns[0] = (simd_float4)xmmword_1B2244DB0;
      v206 = 0x80000001B232EA50;
      v207 = 0x80000001B232EA30;
      v226 = xmmword_1B226D240;
      v225 = 0x80000001B232EA00;
      v208 = MEMORY[0x1E0DEE9B8] + 8;
      v235 = (_QWORD *)(v224 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      while (1)
      {
        v209 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v244 + 16) + 32 * v46 + 32) + 16);
        if (v209)
          break;
LABEL_40:
        if (++v46 == v204[0])
          goto LABEL_257;
      }
      v48 = 0;
      v238 = (_QWORD *)v46;
      while (1)
      {
        v51 = *(_QWORD *)(*(_QWORD *)(v244 + 16) + 32 * v46 + 32);
        v239 = 40 * v48;
        v52 = v51 + 40 * v48;
        v53 = *(unsigned int *)(v52 + 44);
        v54 = *(int *)(v52 + 40);
        if ((_DWORD)v54 != -1 || (_DWORD)v53 != 0)
        {
          v211 = v48;
          v56 = *(unsigned int *)(v52 + 36);
          v57 = *(int *)(v52 + 32);
          v58 = (_DWORD)v57 == -1 && (_DWORD)v56 == 0;
          if (!v58
            && (v57 & 0x80000000) == 0
            && v47[1] > v57
            && ((_DWORD)v56 != -1 ? (v59 = *(_DWORD *)(*v47 + 12 * (int)v57 + 8) == (_DWORD)v56) : (v59 = 1),
                v59
             && (v60 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v224 + 80)
                                             + 8 * *(__int16 *)(*v47 + 12 * (int)v57 + 6)
                                             + 32)
                                 + 16),
                 v61 = *(_QWORD *)(v60 + 128),
                 *(_QWORD *)(v61 + 16))
             && (v62 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), v47 = v235, (v63 & 1) != 0)
             && *(ValueMetadata **)(*(_QWORD *)(v60 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v61 + 56) + 8 * v62) + 32) == &type metadata for Tombstone))
          {
LABEL_236:
            v48 = v211;
          }
          else
          {
            v64 = type metadata accessor for GraphScript(0);
            v65 = *(_QWORD *)(v64 - 8);
            if (*(_QWORD *)(v65 + 64))
              v66 = *(_QWORD *)(v65 + 72);
            else
              v66 = 0;
            v47 = v235;
            v48 = v211;
            if ((v54 & 0x80000000) == 0 && v235[1] > v54)
            {
              v188 = *v235 + 12 * (int)v54;
              if ((_DWORD)v53 == -1 || *(_DWORD *)(v188 + 8) == (_DWORD)v53)
              {
                v190 = *(_QWORD *)(*(_QWORD *)(v224 + 136) + 8 * *(int *)(*v235 + 12 * (int)v54) + 32);
                v191 = *(_QWORD *)(v190 + 48);
                v192 = *(_QWORD *)(v191 + 16);
                if (v192)
                {
                  v193 = v57;
                  v194 = (_QWORD *)*(__int16 *)(v188 + 4);
                  v195 = (_QWORD *)(v191 + 56);
                  v196 = (uint64_t *)(v191 + 56);
                  v197 = *(_QWORD *)(v191 + 16);
                  while (*(v196 - 3) != v64)
                  {
                    v196 += 5;
                    if (!--v197)
                      goto LABEL_44;
                  }
                  v245 = v194;
                  v243 = *v196;
                  v198 = *(_QWORD *)(v190 + 128);
                  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
                  v200 = *(_QWORD *)(v199 - 8);
                  if (*(_QWORD *)(v200 + 64))
                    v201 = *(_QWORD *)(v200 + 72);
                  else
                    v201 = 0;
                  v47 = v235;
                  v48 = v211;
                  while (*(v195 - 3) != v199)
                  {
                    v195 += 5;
                    if (!--v192)
                      goto LABEL_44;
                  }
                  v49 = v46;
                  v50 = v233.i64[0];
                  sub_1B1B1AE2C(v198 + *v195 + v201 * (_QWORD)v245, v198 + v243 + v66 * (_QWORD)v245, v224, v54 | (unint64_t)(v53 << 32), v193 | (v56 << 32), v244, v49, v211);
                  v48 = v211;
                  v47 = v235;
                  v233.i64[0] = v50;
                  v46 = (uint64_t)v238;
                }
              }
            }
          }
          goto LABEL_44;
        }
        v67 = *(_QWORD *)(v52 + 48);
        if (v67)
        {
          v237 = *(_QWORD **)(v67 + 16);
          if (v237)
            break;
        }
LABEL_44:
        if (++v48 == v209)
          goto LABEL_40;
      }
      v211 = v48;
      v236 = v67 + 32;
      v204[2] = v67;
      swift_bridgeObjectRetain();
      v68 = 0;
      v69 = v234;
LABEL_68:
      v70 = (unsigned int *)(v236 + 56 * v68);
      v71 = *v70;
      v72 = v70[1];
      v73 = (ValueMetadata *)*((_QWORD *)v70 + 1);
      v242 = *((simd_float4 *)v70 + 1);
      v75 = *((_QWORD *)v70 + 4);
      v74 = *((_QWORD *)v70 + 5);
      v76 = (_QWORD *)*((_QWORD *)v70 + 6);
      v77 = *(_QWORD **)(v244 + 16);
      v78 = *(_QWORD *)(v69 + 8) == 1 && *(_QWORD *)(v69 + 16) == 0;
      v241 = v68;
      if (!v78)
      {
        v79 = v77[4 * v46 + 4] + v239;
        if ((*(_BYTE *)(v79 + 66) & 1) == 0 && *(_BYTE *)(v79 + 65) == 1 && v73 == &type metadata for Bindings)
        {
          v106 = *((_QWORD *)v210 + 2);
          v107 = v205;
          if (!v106)
            goto LABEL_105;
          while (*((_DWORD *)v107 - 1) != v71 || *(_DWORD *)v107 != v72)
          {
            v107 += 8;
            if (!--v106)
              goto LABEL_105;
          }
        }
      }
      swift_retain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v244 + 16) = v77;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v77 = sub_1B1FFEE1C(v77);
        *(_QWORD *)(v244 + 16) = v77;
      }
      v82 = &v77[4 * v46];
      v85 = (_QWORD *)v82[4];
      v84 = v82 + 4;
      v83 = v85;
      v86 = swift_isUniquelyReferenced_nonNull_native();
      *v84 = v85;
      if ((v86 & 1) == 0)
      {
        v83 = sub_1B1FFEE08(v83);
        *v84 = v83;
      }
      *((_BYTE *)v83 + v239 + 66) = 0;
      v87 = v71 == -1 && v72 == 0;
      v243 = v74;
      v245 = v76;
      if (v87
        || (v71 & 0x80000000) != 0
        || v235[1] <= (int)v71
        || ((v88 = *v235 + 12 * (int)v71, v72 != -1) ? (v89 = *(_DWORD *)(v88 + 8) == v72) : (v89 = 1),
            !v89
         || (v90 = *(_QWORD *)(*(_QWORD *)(v224 + 136) + 8 * *(int *)(*v235 + 12 * (int)v71) + 32),
             v91 = *(_QWORD *)(v90 + 48),
             (v92 = *(_QWORD *)(v91 + 16)) == 0)))
      {
LABEL_96:
        memset(&v248, 0, 32);
LABEL_97:
        sub_1B1B1F3E4((uint64_t)&v248, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
        if (qword_1ED4BF430 != -1)
          swift_once();
        v248.columns[0].i64[0] = 0;
        v248.columns[0].i64[1] = 0xE000000000000000;
        v240 = qword_1ED4D0FB0;
        swift_retain();
        sub_1B2229430();
        v249[0] = v248.columns[0];
        sub_1B2228890();
        v248.columns[0].i64[0] = __PAIR64__(v72, v71);
        v248.columns[0].i64[1] = (uint64_t)v73;
        v248.columns[1] = v242;
        v248.columns[2].i64[0] = v75;
        v248.columns[2].i64[1] = v74;
        v248.columns[3].i64[0] = (uint64_t)v76;
        sub_1B22295EC();
        v95 = v249[0];
        v96 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v97 = qword_1ED4D0FD0;
        v98 = qword_1ED4BF688;
        swift_retain();
        if (v98 != -1)
          swift_once();
        sub_1B1B1F428(0, (unint64_t *)&qword_1ED4BF700, (uint64_t)&qword_1ED4BF440, MEMORY[0x1E0DEE208], (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1A025A0);
        v99 = swift_allocObject();
        *(_OWORD *)(v99 + 16) = v226;
        *(_QWORD *)(v99 + 56) = MEMORY[0x1E0DEA968];
        *(_QWORD *)(v99 + 64) = sub_1B1B1F47C();
        *(_OWORD *)(v99 + 32) = v95;
        swift_bridgeObjectRetain();
        sub_1B222835C();
        swift_bridgeObjectRelease();
        swift_retain();
        v100 = v227;
        sub_1B2228200();
        v101 = v231[12];
        v102 = v231[16];
        v103 = v231[20];
        v104 = (uint64_t)v230;
        v242.i64[0] = v97;
        v105 = &v230[v103];
        (*(void (**)(char *, char *, uint64_t))(v228 + 32))(v230, v100, v229);
        *(_BYTE *)(v104 + v101) = v96;
        *(_QWORD *)(v104 + v102) = 0;
        *(_OWORD *)v105 = v95;
        swift_bridgeObjectRetain();
        sub_1B2228428();
        swift_release();
        sub_1B1A04628(v104, (uint64_t (*)(_QWORD))sub_1B1B1F358);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v69 = v234;
        v46 = (uint64_t)v238;
        goto LABEL_104;
      }
      v93 = *(__int16 *)(v88 + 4);
      v94 = v91 + 56;
      while (*(ValueMetadata **)(v94 - 24) != v73)
      {
        v94 += 40;
        if (!--v92)
          goto LABEL_96;
      }
      v111 = v94 - 8;
      v110 = *(_QWORD *)(v94 - 8);
      v109 = *(_QWORD *)(v111 + 8);
      if (v110 <= 1)
        v110 = 1;
      v112 = *(_QWORD *)(v90 + 128) + v109 + v110 * v93;
      swift_retain();
      sub_1B1E1AA44(v112, (uint64_t)v76, (uint64_t)v73);
      swift_release();
      if (!v248.columns[1].i64[1])
        goto LABEL_97;
      sub_1B1A0DDAC(&v248, v249);
      sub_1B1A02864((uint64_t)v249, (uint64_t)&v248);
      sub_1B19FA070(&v248, v248.columns[1].i64[1]);
      DynamicType = swift_getDynamicType();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v248);
      v114 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v244 + 16) + 32 * v46 + 32) + v239 + 56);
      v221 = *(_QWORD *)(v114 + 16);
      if (!v221)
        goto LABEL_235;
      v219 = v114 + 32;
      v204[1] = v114;
      swift_bridgeObjectRetain();
      v115 = 0;
      v220 = DynamicType;
      while (1)
      {
        v240 = v115;
        v116 = (unsigned int *)(v219 + 56 * v115);
        v117 = *v116;
        v118 = v116[1];
        v119 = (ValueMetadata *)*((_QWORD *)v116 + 1);
        v222.i64[0] = *((_QWORD *)v116 + 2);
        v120 = *((_QWORD *)v116 + 6);
        v232 = *((_QWORD *)v116 + 5);
        swift_bridgeObjectRetain();
        v242.i64[0] = v120;
        swift_retain();
        sub_1B2229304();
        if (DynamicType != v121)
        {
          v122 = v121 == MEMORY[0x1E0DEDC60] && DynamicType == MEMORY[0x1E0DEB418];
          if (!v122 && v121 != MEMORY[0x1E0DEE9B8] + 8)
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v248.columns[0].i64[0] = 0;
            v248.columns[0].i64[1] = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            v247[0] = v248.columns[0];
            sub_1B2228890();
            sub_1B1A02864((uint64_t)v249, (uint64_t)&v248);
            sub_1B19FA070(&v248, v248.columns[1].i64[1]);
            swift_getDynamicType();
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v248);
            sub_1B222A210();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            sub_1B2229304();
            sub_1B222A210();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v142 = v247[0];
            v143 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v248.columns[0].i64[0] = 0;
            swift_retain();
            sub_1B1F1AD70(v143, (uint64_t *)&v248, v142, *((uint64_t *)&v142 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            goto LABEL_121;
          }
        }
        if (DynamicType == MEMORY[0x1E0DEB418] && v121 == MEMORY[0x1E0DEDC60])
        {
          sub_1B1A02864((uint64_t)v249, (uint64_t)v247);
          swift_dynamicCast();
          v248.columns[1].i64[1] = MEMORY[0x1E0DEDC60];
          v248.columns[0].i64[0] = v246;
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v249);
          sub_1B1A0DDAC(&v248, v249);
        }
        v125 = (int)v117;
        v126 = v233.i64[0];
        if (v119 == &type metadata for Scale3
          && ((_DWORD)v117 == -1 ? (v127 = (_DWORD)v118 == 0) : (v127 = 0),
              !v127
           && (v117 & 0x80000000) == 0
           && v235[1] > (int)v117
           && ((_DWORD)v118 != -1 ? (v128 = *(_DWORD *)(*v235 + 12 * (int)v117 + 8) == (_DWORD)v118) : (v128 = 1),
               v128
            && (v129 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v224 + 80)
                                             + 8 * *(__int16 *)(*v235 + 12 * (int)v117 + 6)
                                             + 32)
                                 + 16),
                v130 = *(_QWORD *)(v129 + 128),
                *(_QWORD *)(v130 + 16))
            && (v131 = sub_1B1DC3AC8((uint64_t)&type metadata for HalfSizeLegacyPatch), (v132 & 1) != 0)
            && *(ValueMetadata **)(*(_QWORD *)(v129 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v130 + 56) + 8 * v131) + 32) == &type metadata for HalfSizeLegacyPatch)))
        {
          sub_1B1A02864((uint64_t)v249, (uint64_t)&v248);
          KeyPath = swift_getKeyPath();
          if (v235[1] <= (int)v117)
          {
            swift_release();
          }
          else
          {
            v152 = *v235;
            v134 = v224;
            if ((_DWORD)v118 != -1 && *(_DWORD *)(*v235 + 12 * (int)v117 + 8) != (_DWORD)v118
              || (v218.i64[0] = KeyPath,
                  v184 = (unsigned int *)(v152 + 12 * (int)v117),
                  sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v224 + 136) + 8 * (int)*v184 + 32), (uint64_t)&type metadata for Scale3, *v184 | ((unint64_t)*((unsigned __int16 *)v184 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v184 + 2) << 32), v224, v247), !*(_QWORD *)&v247[0])|| (v185 = sub_1B1E1B868((uint64_t)&v248, *(uint64_t *)&v247[0], v218.i64[0], (uint64_t)&type metadata for Scale3), (v185 & 1) != 0))
            {
              swift_release();
              goto LABEL_184;
            }
            v233.i64[0] = (uint64_t)v204;
            MEMORY[0x1E0C80A78](v185, v186);
            v187 = v222.i64[0];
            v204[-4] = &type metadata for Scale3;
            v204[-3] = v187;
            v202 = &v248;
            v203 = v218.i64[0];
            sub_1B1FE298C((uint64_t)&type metadata for Scale3, v187, v117 | (v118 << 32), (void (*)(uint64_t))sub_1B1B21584);
            swift_release();
          }
        }
        else
        {
          sub_1B1A02864((uint64_t)v249, (uint64_t)&v248);
          if ((_DWORD)v117 != -1 || (_DWORD)v118 != 0)
          {
            v134 = v224;
            if ((v117 & 0x80000000) == 0 && v235[1] > (int)v117)
            {
              v135 = *v235 + 12 * (int)v117;
              if ((_DWORD)v118 == -1 || *(_DWORD *)(v135 + 8) == (_DWORD)v118)
              {
                v137 = *(_QWORD *)(*(_QWORD *)(v224 + 136) + 8 * *(int *)(*v235 + 12 * (int)v117) + 32);
                v138 = *(_QWORD *)(v137 + 48);
                v139 = *(_QWORD *)(v138 + 16);
                if (v139)
                {
                  v140 = *(__int16 *)(v135 + 4);
                  v141 = v138 + 56;
                  while (*(ValueMetadata **)(v141 - 24) != v119)
                  {
                    v141 += 40;
                    if (!--v139)
                      goto LABEL_184;
                  }
                  v233.i64[0] = (int)v117;
                  v146 = v141 - 8;
                  v145 = *(_QWORD *)(v141 - 8);
                  v144 = *(_QWORD *)(v146 + 8);
                  if (v145 <= 1)
                    v145 = 1;
                  v147 = v242.i64[0];
                  v148 = sub_1B1E1B868((uint64_t)&v248, *(_QWORD *)(v137 + 128) + v144 + v145 * v140, v242.i64[0], (uint64_t)v119);
                  if ((v148 & 1) == 0)
                  {
                    MEMORY[0x1E0C80A78](v148, v149);
                    v150 = v222.i64[0];
                    v204[-4] = v119;
                    v204[-3] = v150;
                    v202 = &v248;
                    v203 = v147;
                    sub_1B1FE298C((uint64_t)v119, v150, v117 | (v118 << 32), (void (*)(uint64_t))sub_1B1B1F4C0);
                    v134 = v224;
                  }
                  v125 = v233.i64[0];
                }
              }
            }
            goto LABEL_184;
          }
        }
        v134 = v224;
LABEL_184:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v248);
        if (swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype())
        {
          if ((_DWORD)v117 == -1 && !(_DWORD)v118)
            goto LABEL_194;
          v158 = v235;
          v159 = v235[1];
          if ((v117 & 0x80000000) != 0
            || v159 <= v125
            || (v160 = *v235, (_DWORD)v118 != -1) && *(_DWORD *)(v160 + 12 * (int)v125 + 8) != (_DWORD)v118)
          {
            if ((v117 & 0x80000000) == 0)
            {
LABEL_201:
              if (v159 > v125)
              {
                v161 = *v158;
                if ((_DWORD)v118 == -1 || *(_DWORD *)(v161 + 12 * (int)v125 + 8) == (_DWORD)v118)
                {
                  sub_1B1A10AA4(*(_QWORD *)(*(_QWORD *)(v134 + 80) + 8 * *(__int16 *)(v161 + 12 * (int)v125 + 6) + 32), (uint64_t)&type metadata for NotInHierarchy, &v248);
                  if ((v248.columns[0].i8[0] & 1) == 0)
                  {
                    v158 = v235;
                    v159 = v235[1];
                    goto LABEL_213;
                  }
LABEL_195:
                  v154 = v223.columns[0];
                  v155 = v223.columns[1];
                  v156 = v223.columns[2];
                  v157 = v223.columns[3];
                  goto LABEL_207;
                }
              }
            }
LABEL_213:
            if ((v117 & 0x80000000) == 0
              && v159 > v125
              && ((v179 = *v158, (_DWORD)v118 == -1) || *(_DWORD *)(v179 + 12 * (int)v125 + 8) == (_DWORD)v118))
            {
              v181 = sub_1B1D1E964(*(_QWORD *)(*(_QWORD *)(v134 + 136) + 8 * *(int *)(v179 + 12 * (int)v125) + 32), *(_DWORD *)(v179 + 12 * (int)v125), *(_WORD *)(v179 + 12 * (int)v125 + 4), 8, v134);
              if ((v183 & 1) == 0)
              {
                *(double *)v154.i64 = sub_1B1E85968(v181, v182);
                goto LABEL_207;
              }
              v158 = v235;
              v159 = v235[1];
              if ((v117 & 0x80000000) == 0)
              {
LABEL_218:
                if (v159 > v125)
                {
                  v180 = *v158;
                  if ((_DWORD)v118 == -1 || *(_DWORD *)(v180 + 12 * (int)v125 + 8) == (_DWORD)v118)
                  {
                    sub_1B1A10AA4(*(_QWORD *)(*(_QWORD *)(v134 + 80) + 8 * *(__int16 *)(v180 + 12 * (int)v125 + 6) + 32), (uint64_t)&type metadata for PointOfView, &v248);
                    v154 = v223.columns[0];
                    v155 = v223.columns[1];
                    v156 = v223.columns[2];
                    v157 = v223.columns[3];
                    if ((v248.columns[0].i8[0] & 1) != 0)
                      goto LABEL_207;
                  }
                }
              }
            }
            else if ((v117 & 0x80000000) == 0)
            {
              goto LABEL_218;
            }
LABEL_194:
            v153 = swift_retain();
            sub_1B1F213C0(v153, (uint64_t)v253);
            swift_release();
            sub_1B1AE09AC((uint64_t)v253, (uint64_t)v255);
            if ((v256 & 1) != 0)
              goto LABEL_195;
            v154 = (simd_float4)v255[0];
            v155 = (simd_float4)v255[1];
            v156 = (simd_float4)v255[2];
            v157 = (simd_float4)v255[3];
LABEL_207:
            v216 = (float32x4_t)v157;
            v217 = (float32x4_t)v156;
            v218 = (float32x4_t)v155;
            v222 = (float32x4_t)v154;
            v233.i64[0] = v126;
            v162 = v125 | ((unint64_t)v118 << 32);
            sub_1B1E85B04(v162, 0, 0, 1, 0, 0, 1, 0, (uint64_t)v252, *(int32x2_t *)v154.f32, 0, 1);
            v163 = v252[0];
            v164 = v252[1];
            v165 = v252[2];
            v166 = v252[3];
            v167 = v252[4];
            v168 = v252[5];
            v169 = v252[6];
            v170 = v252[7];
            sub_1B1AE09AC((uint64_t)v252, (uint64_t)v254);
            v171 = v223.columns[0];
            v172 = v223.columns[1];
            v173 = v223.columns[2];
            v174 = v223.columns[3];
            if ((v254[64] & 1) == 0)
            {
              v171.i64[0] = v163;
              v171.i64[1] = v164;
              v172.i64[0] = v165;
              v172.i64[1] = v166;
              v173.i64[0] = v167;
              v173.i64[1] = v168;
              v174.i64[0] = v169;
              v174.i64[1] = v170;
            }
            v212 = (float32x4_t)v174;
            v213 = (float32x4_t)v173;
            v214 = (float32x4_t)v172;
            v215 = (float32x4_t)v171;
            v248 = v223;
            v175 = v162;
            v176 = v224;
            if (sub_1B1FD568C((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C78, v162))
            {
              v177 = v162;
              v178 = v233.i64[0];
              sub_1B1FD5880(v177, v176, (float32x4_t *)&v248, v222, v218, v217, v216, v215, v214, v213, v212);
              sub_1B1FE0174(v175, v176, &v248);
              swift_retain();
              sub_1B1FF24A0(v175, v176, v176, (float32x4_t *)&v248);
              v233.i64[0] = v178;
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
            v46 = (uint64_t)v238;
            goto LABEL_121;
          }
          sub_1B1FF3028(*(_QWORD *)(*(_QWORD *)(v134 + 136) + 8 * *(int *)(v160 + 12 * (int)v125) + 32), *(_WORD *)(v160 + 12 * (int)v125 + 4), 40, (uint64_t)v251);
          sub_1B1AE09AC((uint64_t)v251, (uint64_t)&v257);
          if (v261 == 1)
          {
            v158 = v235;
            v159 = v235[1];
            if ((v117 & 0x80000000) == 0)
              goto LABEL_201;
            goto LABEL_213;
          }
          v233 = (simd_float4)v257;
          v222 = (float32x4_t)v258;
          v217 = (float32x4_t)v259;
          v218 = (float32x4_t)v260;
          sub_1B1FE0000(v117 | (v118 << 32), v134, v257, v258, v259, v260);
          v277.columns[0] = v233;
          v277.columns[1] = (simd_float4)v222;
          v277.columns[2] = (simd_float4)v217;
          v277.columns[3] = (simd_float4)v218;
          sub_1B1FE00D8(v117 | (v118 << 32), v134, v277);
          v233.i64[0] = v126;
        }
        else
        {
          v233.i64[0] = v126;
        }
        swift_release();
        swift_bridgeObjectRelease();
        v46 = (uint64_t)v238;
LABEL_121:
        DynamicType = v220;
        v115 = v240 + 1;
        if (v240 + 1 == v221)
        {
          swift_bridgeObjectRelease();
LABEL_235:
          swift_release();
          swift_bridgeObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v249);
          v69 = v234;
LABEL_104:
          v68 = v241;
LABEL_105:
          if ((_QWORD *)++v68 == v237)
          {
            swift_bridgeObjectRelease();
            v47 = v235;
            goto LABEL_236;
          }
          goto LABEL_68;
        }
      }
    }
LABEL_257:
    swift_bridgeObjectRelease();
  }
}

void sub_1B1B1AE2C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a8;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v16 = v15;
  MEMORY[0x1E0C80A78](v15, v17);
  v19 = (char *)&v30 - v18;
  if (*(_BYTE *)(a2 + 24) != 1)
  {
    v31 = a6;
    v32 = a2;
    v30 = a4;
    v20 = a7;
    v21 = v33;
    v22 = *(_QWORD *)(a1 + v16[10]);
    v23 = a1;
    sub_1B1B1F2FC(a1, (uint64_t)v19, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
    if (v22)
    {
      sub_1B1B1DCE0((uint64_t)v19, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
      v24 = v21;
      v25 = a5;
      v26 = v30;
      v27 = v32;
    }
    else
    {
      v28 = *(_QWORD *)&v19[v16[11]];
      swift_bridgeObjectRetain();
      sub_1B1B1DCE0((uint64_t)v19, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
      v27 = v32;
      if (!v28)
        return;
      swift_bridgeObjectRelease();
      v24 = v21;
      v25 = a5;
      v26 = v30;
    }
    if (*(_BYTE *)(a3 + 48) == 1 && (*(_BYTE *)(v23 + v16[13]) != 1 || !*(_BYTE *)(v27 + 40)))
      sub_1B1FE054C(v26, a3);
    sub_1B1B7F538(MEMORY[0x1E0DEE9D8]);
    sub_1B1CAA37C(v23, a3, v26, v25);
    swift_bridgeObjectRelease();
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v31 + 16) + 32 * v20 + 32) + 40 * v24 + 64) == 1)
    {
      v29 = swift_bridgeObjectRetain();
      sub_1B1B0FBE0(v29);
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_1B1B1B068()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for GraphScriptRunner()
{
  return objc_opt_self();
}

uint64_t sub_1B1B1B0BC()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B1B1B0F0()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  int v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  *(_BYTE *)(v0 + 16) = 0;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v31 = qword_1ED4D09F8;
  v32 = 0;
  v33 = 2;
  v34 = 0;
  v35 = 2;
  v36 = 0;
  swift_retain();
  sub_1B1E3C5B8(1, (uint64_t)v9);
  swift_release();
  v1 = v9[1];
  *(_OWORD *)(v0 + 24) = v9[0];
  *(_OWORD *)(v0 + 40) = v1;
  *(_QWORD *)(v0 + 56) = v10;
  v25 = qword_1ED4D09F8;
  v26 = 0;
  v27 = 2;
  v28 = 0;
  v29 = 2;
  v30 = 0;
  swift_retain();
  sub_1B1E3C60C(1, (uint64_t)v11);
  swift_release();
  v2 = v11[1];
  *(_OWORD *)(v0 + 64) = v11[0];
  *(_OWORD *)(v0 + 80) = v2;
  *(_QWORD *)(v0 + 96) = v12;
  v19 = qword_1ED4D09F8;
  v20 = 0;
  v21 = 2;
  v22 = 0;
  v23 = 2;
  v24 = 0;
  swift_retain();
  sub_1B1E3C804(3, (uint64_t)&v13);
  swift_release();
  v3 = v14;
  v4 = v15;
  v5 = v17;
  v6 = v18;
  v7 = v16 | 1;
  *(_QWORD *)(v0 + 104) = v13;
  *(_DWORD *)(v0 + 112) = v3;
  *(_BYTE *)(v0 + 116) = v4;
  *(_QWORD *)(v0 + 120) = v7;
  *(_BYTE *)(v0 + 128) = v5;
  *(_QWORD *)(v0 + 136) = v6;
  return v0;
}

uint64_t *sub_1B1B1B26C(uint64_t *a1)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 16) == 1)
  {
    sub_1B1C14F64((uint64_t)a1);
    *(_BYTE *)(v1 + 16) = 0;
  }
  sub_1B1B19554((uint64_t)a1);
  sub_1B1B1DD54((uint64_t)a1);
  return sub_1B1B1E880(a1);
}

uint64_t sub_1B1B1B2B4()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1B1B0F0();
  return v0;
}

const char *sub_1B1B1B2E8()
{
  return "GraphScriptRunner";
}

void sub_1B1B1B300()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 16) = 1;
}

uint64_t sub_1B1B1B30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  int *v15;
  uint64_t v16;
  __int16 v17;
  char v18;
  uint64_t result;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_DWORD *)(a1 + 52);
  v11 = *(int *)(a1 + 48);
  swift_retain();
  if ((_DWORD)v11 == -1 && v10 == 0)
  {
    sub_1B1B1FC34(a1);
    sub_1B1B1FC88(a1);
  }
  else if ((v11 & 0x80000000) == 0 && *(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v11)
  {
    v13 = *(_QWORD *)(v9 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v10 == -1 || *(_DWORD *)(v13 + 12 * (int)v11 + 8) == v10)
    {
      v15 = (int *)(v13 + 12 * (int)v11);
      v16 = *(_QWORD *)(*(_QWORD *)(v9 + 136) + 8 * *v15 + 32);
      v17 = *((_WORD *)v15 + 2);
      sub_1B1B1FC34(a1);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v18 = sub_1B1FE6E78(v16, v17, 656, v8 == 0, 0, a1, a2, a3, a4);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      sub_1B1B1FC88(a1);
      if ((v18 & 1) != 0)
        return swift_release();
    }
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1BC3C70();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t type metadata accessor for GPUScriptRunner(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GPUScriptRunner);
}

uint64_t sub_1B1B1B560(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B1F4D4(a1, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), a4);
}

const char *sub_1B1B1B56C()
{
  return "GPUScriptRunner";
}

_QWORD *sub_1B1B1B580@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;

  swift_unknownObjectWeakInit();
  v2 = MEMORY[0x1E0DEE9D8];
  v3 = MEMORY[0x1E0DEE9E8];
  a1[1] = MEMORY[0x1E0DEE9D8];
  a1[2] = v3;
  result = sub_1B1B95978(v2);
  a1[3] = result;
  return result;
}

void sub_1B1B1B5C4(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B1B1B5D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  id v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD v13[4];

  v8 = (id)sub_1B187AA20(a1, a2, a3, a4, a5, a6, a7, a8);
  v9 = *(_QWORD *)((char *)(id)sub_1B181FEE0((uint64_t)v8)
                 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v10 = *(_QWORD **)(v9 + 176);
  swift_retain();
  swift_retain();
  sub_1B1F22938((uint64_t)&type metadata for TriggerListComponent, (uint64_t)&off_1E639F9C0, v10, v13);
  swift_release();
  swift_unknownObjectWeakAssign();
  v11 = *(_QWORD **)(v9 + 176);
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for TriggerListComponent, (uint64_t)&off_1E639F9C0, v11, (void (*)(uint64_t))sub_1B1B21570);
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  return sub_1B1B20AD4((uint64_t)v13);
}

uint64_t sub_1B1B1B734(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  id v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[5];
  uint64_t v24;
  _QWORD *v25;

  v12 = (id)sub_1B187AA20(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  v13 = *(_QWORD *)((char *)(id)sub_1B181FEE0((uint64_t)v12)
                  + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  v14 = *(_QWORD **)(v13 + 176);
  swift_retain();
  swift_retain();
  sub_1B1F22938((uint64_t)&type metadata for TriggerListComponent, (uint64_t)&off_1E639F9C0, v14, &v24);
  swift_release();
  v23[0] = sub_1B2228728();
  v23[1] = a4;
  swift_unknownObjectWeakInit();
  *(double *)&v23[3] = a10;
  v15 = v25;
  v16 = a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v15 = sub_1B1C64EDC(0, v15[2] + 1, 1, (unint64_t)v15);
  v18 = v15[2];
  v17 = v15[3];
  if (v18 >= v17 >> 1)
    v15 = sub_1B1C64EDC(v17 > 1, v18 + 1, 1, (unint64_t)v15);
  v15[2] = v18 + 1;
  v19 = sub_1B1B20D5C(v23, &v15[4 * v18 + 4]);
  v25 = v15;
  v20 = *(_QWORD **)(v13 + 176);
  MEMORY[0x1E0C80A78](v19, v21);
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for TriggerListComponent, (uint64_t)&off_1E639F9C0, v20, (void (*)(uint64_t))sub_1B1B21570);
  swift_unknownObjectRelease();

  swift_release();
  swift_release();
  return sub_1B1B20AD4((uint64_t)&v24);
}

uint64_t sub_1B1B1B9A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  __int128 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  id v26;
  void *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  int *v38;
  int v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  uint64_t v49[5];
  _QWORD v50[2];
  int v51;
  char v52;
  uint64_t (*v53)(uint64_t);
  _UNKNOWN **v54;
  unsigned int v55;
  unsigned int v56;

  v9 = *(_QWORD *)(a1 + 32);
  swift_retain();
  swift_retain();
  v45 = v9;
  v10 = sub_1B1A101F0(v9);
  swift_release();
  v11 = sub_1B2020528(v10, (uint64_t)&type metadata for IsSubEntityOf);
  v13 = v12;
  swift_release();
  if ((v13 & 1) != 0 || (result = sub_1B1DA5684(v11), (result & 1) != 0))
  {
    v15 = swift_allocObject();
    *(_QWORD *)(v15 + 16) = a3;
    *(_QWORD *)(v15 + 24) = a4;
    v16 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v15 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v15 + 48) = v16;
    *(_QWORD *)(v15 + 64) = *(_QWORD *)(a1 + 32);
    v47 = (int *)type metadata accessor for TriggerScript(0);
    v46 = v47[11];
    v17 = *(void **)(a2 + v46);
    v18 = *a5;
    v19 = *(_QWORD *)(*a5 + 16);
    swift_retain();
    if (v19)
    {
      v20 = v17;
      v21 = sub_1B1DC4238(v20);
      if ((v22 & 1) != 0)
      {
        v23 = *(_QWORD **)(*(_QWORD *)(v18 + 56) + 8 * v21);
        swift_bridgeObjectRetain();

        v24 = v11;
        if ((v13 & 1) == 0)
        {
LABEL_10:
          v25 = *(void **)(a2 + v47[12]);
          if (v25)
          {
            v26 = objc_msgSend(v25, sel_behaviorGraph);
            v44 = (uint64_t)v23;
            if (v26
              && (v27 = v26,
                  v28 = (char *)objc_msgSend(v26, sel_entityObject),
                  v27,
                  v28))
            {
              v29 = *(_DWORD *)&v28[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
              v30 = *(unsigned int *)&v28[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4];

            }
            else
            {
              v30 = 0;
              v29 = -1;
            }
          }
          else
          {
            v31 = *(_QWORD *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
            if (!v31 || !*(_QWORD *)(v31 + 24))
            {
              swift_release();
              return swift_bridgeObjectRelease();
            }
            v44 = (uint64_t)v23;
            v53 = (uint64_t (*)(uint64_t))&type metadata for Entity;
            v54 = &off_1E63BB108;
            v50[0] = v24;
            v32 = sub_1B19FA070(v50, (uint64_t)&type metadata for Entity);
            v49[3] = (uint64_t)&type metadata for Entity;
            v49[4] = (uint64_t)&off_1E63BB108;
            v33 = sub_1B1A137F4(v49);
            v34 = *v32;
            swift_unknownObjectRetain();
            *v33 = sub_1B1E33C2C(v34);
            sub_1B1A025A0(0, (unint64_t *)&qword_1EEF5AB10);
            swift_dynamicCast();
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v50);
            v29 = v55;
            v30 = v56;
            swift_unknownObjectRelease();
          }
          v35 = *(void **)(a2 + v46);
          if ((v13 & 1) != 0)
          {
            swift_retain();
            v37 = v35;
            v11 = sub_1B1A101F0(v45);
            swift_release();
          }
          else
          {
            v36 = v35;
          }
          v38 = (int *)(a2 + v47[13]);
          v39 = *v38;
          LOBYTE(v38) = *((_BYTE *)v38 + 4);
          v50[0] = v35;
          v50[1] = v11;
          v51 = v39;
          v52 = (char)v38;
          v53 = sub_1B1B20BB8;
          v54 = (_UNKNOWN **)v15;
          swift_retain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v49[0] = v44;
          sub_1B1B860F8((uint64_t)v50, v29 | (unint64_t)(v30 << 32), isUniquelyReferenced_nonNull_native);
          v41 = v49[0];
          swift_bridgeObjectRelease();
          v42 = *(id *)(a2 + v46);
          v43 = swift_isUniquelyReferenced_nonNull_native();
          v49[0] = *a5;
          *a5 = 0x8000000000000000;
          sub_1B1B85FE8(v41, v42, v43);
          *a5 = v49[0];
          swift_release();

          return swift_bridgeObjectRelease();
        }
LABEL_9:
        swift_retain();
        v24 = sub_1B1A101F0(v45);
        swift_release();
        goto LABEL_10;
      }

    }
    v23 = sub_1B1B96E1C(MEMORY[0x1E0DEE9D8]);
    v24 = v11;
    if ((v13 & 1) == 0)
      goto LABEL_10;
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1B1B1BD80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = *(_QWORD *)(a4 + 32);
  swift_retain();
  v8 = sub_1B1A101F0(v7);
  swift_release();
  swift_retain();
  v9 = sub_1B1A101F0(v7);
  swift_release();
  return sub_1B1CAAB9C(a2, a3, v8, v9, a1);
}

uint64_t sub_1B1B1BE08(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  __int128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  _QWORD *v49;
  id v50[2];
  _QWORD v51[4];
  uint64_t v52[8];
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _OWORD v60[2];
  uint64_t v61;
  _OWORD v62[2];
  uint64_t v63;
  _BYTE v64[48];

  v6 = 0;
  v7 = MEMORY[0x1B5E240CC]();
  if (v7)
  {
    v8 = (void *)v7;
    v51[0] = MEMORY[0x1E0DEE9E8];
    v9 = *(_OWORD *)(a3 + 16);
    v62[0] = *(_OWORD *)a3;
    v62[1] = v9;
    v63 = *(_QWORD *)(a3 + 32);
    sub_1B1E8FCE4(a2, (uint64_t)v62, 0x200000000, v52);
    sub_1B1A18378((uint64_t)v52, (uint64_t)v53, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v53[0])
    {
      if (v59 >= 1)
      {
        v43 = v56;
        if (v56)
        {
          v35 = v8;
          v36 = a1;
          v37 = a2;
          v42 = v55;
          v10 = v58;
          v11 = v58[4];
          v48 = *(unsigned __int8 *)(v57 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v12 = type metadata accessor for TriggerScript(0);
          sub_1B1A1B6FC(0, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
          v60[0] = v53[0];
          v60[1] = v53[1];
          v61 = v54;
          v39 = (uint64_t)(v10 + 6);
          v40 = v13;
          v49 = v10;
          v38 = v10 + 8;
          swift_retain();
          swift_retain();
          swift_retain();
          v14 = 0;
          v41 = v11;
          while (1)
          {
            v15 = (unsigned int *)(v42 + 48 * v14);
            v45 = *v15;
            v46 = v6;
            v44 = v15[1];
            v16 = (uint64_t *)*((_QWORD *)v15 + 2);
            v47 = *((_QWORD *)v15 + 3);
            v18 = *((_QWORD *)v15 + 4);
            v17 = *((_QWORD *)v15 + 5);
            if (v48)
            {
              v19 = *(os_unfair_lock_s **)(v17 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v19);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v11);
            sub_1B1A18378(v39, (uint64_t)v64, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v20 = v49[4];
            v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v49[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
            v49[7] = v21;
            v38[1] = 0;
            v38[2] = 0;
            *v38 = 0;
            swift_release();
            v22 = sub_1B1A12038(v12, (uint64_t)&off_1E637DA80, v16, v47, v18, (uint64_t)v49);
            sub_1B1A12038(v40, (uint64_t)&off_1E637D0A8, v16, v47, v18, (uint64_t)v49);
            if (v16)
            {
              if (v18)
              {
                v23 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72);
                v6 = v46;
                do
                {
                  sub_1B1B8B140(v50, *(id *)(v22 + *(int *)(v12 + 44)));

                  v22 += v23;
                  --v18;
                }
                while (v18);
                goto LABEL_19;
              }
            }
            else if ((_DWORD)v45 != (_DWORD)v44)
            {
              v24 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72);
              v25 = v44 - v45;
              v26 = v22 + v24 * v45;
              v6 = v46;
              do
              {
                sub_1B1B8B140(v50, *(id *)(v26 + *(int *)(v12 + 44)));

                v26 += v24;
                --v25;
              }
              while (v25);
              goto LABEL_19;
            }
            v6 = v46;
LABEL_19:
            sub_1B1F05D48(v49, (unsigned __int16 **)v60, (uint64_t)v64);
            sub_1B1F03804((char *)v17);
            v11 = v41;
            ecs_stack_allocator_pop_snapshot(v41);
            if ((v48 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
            }
            swift_release();
            if (++v14 == v43)
            {
              sub_1B19ED748(v52);
              v27 = v51[0];
              a1 = v36;
              a2 = v37;
              v8 = v35;
              goto LABEL_24;
            }
          }
        }
      }
      v27 = MEMORY[0x1E0DEE9E8];
LABEL_24:
      v28 = a1[2];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v29 = sub_1B1B1C394(v27, v28);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v29 & 1) != 0)
      {

        sub_1B19ED748(v52);
        swift_bridgeObjectRelease();
      }
      else
      {
        a1[2] = v27;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRelease();
        type metadata accessor for VFXTriggerType(0);
        sub_1B19E52CC(&qword_1EEF58070, (uint64_t (*)(uint64_t))type metadata accessor for VFXTriggerType, (uint64_t)&unk_1B2269BC0);
        v30 = (void *)sub_1B2228CB0();
        swift_bridgeObjectRelease();
        objc_msgSend(v8, sel_enableTriggerTypes_, v30);

        sub_1B19ED748(v52);
        swift_bridgeObjectRelease();

      }
    }
    else
    {

    }
  }
  a1[1] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v31 = sub_1B1B20BC4(a1, v51);
  v32 = *(_QWORD **)(a2 + 176);
  MEMORY[0x1E0C80A78](v31, v33);
  swift_retain();
  sub_1B1F21F8C((uint64_t)&type metadata for TriggerListComponent, (uint64_t)&off_1E639F9C0, v32, (void (*)(uint64_t))sub_1B1B20BF8);
  swift_release();
  return sub_1B1B20AD4((uint64_t)v51);
}

uint64_t type metadata accessor for TriggerScriptRunnerSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for IncommingTickedEventsComponent()
{
  return &type metadata for IncommingTickedEventsComponent;
}

const char *sub_1B1B1C380()
{
  return "TriggerScriptRunnerSystem";
}

uint64_t sub_1B1B1C394(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v30;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v3 = 0;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v37 = a2 + 56;
  v33 = a1 + 56;
  v34 = (unint64_t)(v4 + 63) >> 6;
  v32 = a1 + 104;
  while (1)
  {
    if (v6)
    {
      v35 = (v6 - 1) & v6;
      v36 = v3;
      v7 = __clz(__rbit64(v6)) | (v3 << 6);
      goto LABEL_25;
    }
    v8 = v3 + 1;
    if (v3 + 1 >= v34)
      return 1;
    v9 = *(_QWORD *)(v33 + 8 * v8);
    if (!v9)
    {
      v8 = v3 + 2;
      if (v3 + 2 >= v34)
        return 1;
      v9 = *(_QWORD *)(v33 + 8 * v8);
      if (!v9)
      {
        v8 = v3 + 3;
        if (v3 + 3 >= v34)
          return 1;
        v9 = *(_QWORD *)(v33 + 8 * v8);
        if (!v9)
        {
          v8 = v3 + 4;
          if (v3 + 4 >= v34)
            return 1;
          v9 = *(_QWORD *)(v33 + 8 * v8);
          if (!v9)
          {
            v8 = v3 + 5;
            if (v3 + 5 >= v34)
              return 1;
            v9 = *(_QWORD *)(v33 + 8 * v8);
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_24:
    v35 = (v9 - 1) & v9;
    v36 = v8;
    v7 = __clz(__rbit64(v9)) + (v8 << 6);
LABEL_25:
    v10 = a1;
    v11 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v7);
    sub_1B222874C();
    sub_1B222A06C();
    v12 = v11;
    sub_1B2228824();
    v13 = sub_1B222A0C0();
    swift_bridgeObjectRelease();
    v14 = -1 << *(_BYTE *)(a2 + 32);
    v15 = v13 & ~v14;
    if (((*(_QWORD *)(v37 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
      goto LABEL_40;
    v16 = sub_1B222874C();
    v18 = v17;
    if (v16 == sub_1B222874C() && v18 == v19)
    {
LABEL_7:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      v21 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        v22 = ~v14;
        for (i = v15 + 1; ; i = v24 + 1)
        {
          v24 = i & v22;
          if (((*(_QWORD *)(v37 + (((i & v22) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v22)) & 1) == 0)
            break;
          v25 = sub_1B222874C();
          v27 = v26;
          if (v25 == sub_1B222874C() && v27 == v28)
            goto LABEL_7;
          v30 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v30 & 1) != 0)
            goto LABEL_8;
        }
LABEL_40:

        return 0;
      }
    }
LABEL_8:

    a1 = v10;
    v6 = v35;
    v3 = v36;
  }
  while (v34 - 6 != v3)
  {
    v9 = *(_QWORD *)(v32 + 8 * v3++);
    if (v9)
    {
      v8 = v3 + 5;
      goto LABEL_24;
    }
  }
  return 1;
}

uint64_t sub_1B1B1C6B8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 1;
}

_QWORD *sub_1B1B1C6C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1791524(0, &qword_1ED4BAF60, (uint64_t (*)(uint64_t))type metadata accessor for vfx_memory_entry_t, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 24);
  return v4;
}

_QWORD *sub_1B1B1C75C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, &qword_1ED4BACA0, (uint64_t)&type metadata for ChunksStorage, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  return v4;
}

_QWORD *sub_1B1B1C7F0(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1C8B8(a1, a2, (unint64_t *)&unk_1ED4BAF70, MEMORY[0x1E0DEDBC8]);
}

_QWORD *sub_1B1B1C808(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 72);
  return v4;
}

_QWORD *sub_1B1B1C8A4(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1C8B8(a1, a2, (unint64_t *)&unk_1ED4BAF10, MEMORY[0x1E0DEB188]);
}

_QWORD *sub_1B1B1C8B8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v8;

  if (a2 <= a1)
    v4 = a1;
  else
    v4 = a2;
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = (_QWORD *)swift_allocObject();
  v7 = j__malloc_size(v6);
  v8 = v7 - 32;
  if (v7 < 32)
    v8 = v7 - 29;
  v6[2] = a1;
  v6[3] = 2 * (v8 >> 2);
  return v6;
}

_QWORD *sub_1B1B1C93C(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1C8B8(a1, a2, (unint64_t *)&unk_1EEF5AB20, MEMORY[0x1E0DEE0F8]);
}

_QWORD *sub_1B1B1C950(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CA00(a1, a2, (unint64_t *)&unk_1ED4BF6F0, (uint64_t)&type metadata for RenderVariantDescriptor);
}

_QWORD *sub_1B1B1C964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE30, (uint64_t)&type metadata for Entity, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 3);
  return v4;
}

_QWORD *sub_1B1B1C9EC(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CA00(a1, a2, (unint64_t *)&unk_1ED4BAE60, (uint64_t)&type metadata for Scheduler.Job);
}

_QWORD *sub_1B1B1CA00(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v6;
  size_t v7;

  if (a2 <= a1)
    v4 = a1;
  else
    v4 = a2;
  if (!v4)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, a3, a4, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = (_QWORD *)swift_allocObject();
  v7 = j__malloc_size(v6);
  v6[2] = a1;
  v6[3] = 2 * ((uint64_t)(v7 - 32) / 96);
  return v6;
}

_QWORD *sub_1B1B1CA94(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CB7C(a1, a2, (unint64_t *)&qword_1ED4BAF90, (uint64_t)&qword_1ED4BB0E0, (uint64_t)MEMORY[0x1E0DEDDA8]);
}

_QWORD *sub_1B1B1CAB0(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CAD0(a1, a2, (uint64_t)&unk_1EEF5AB30, (uint64_t)type metadata accessor for simd_quatf, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))sub_1B1791524);
}

_QWORD *sub_1B1B1CAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))
{
  uint64_t v5;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;

  if (a2 <= a1)
    v5 = a1;
  else
    v5 = a2;
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  a5(0, a3, a4, MEMORY[0x1E0DED1E8]);
  v7 = (_QWORD *)swift_allocObject();
  v8 = j__malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 17;
  v7[2] = a1;
  v7[3] = 2 * (v9 >> 4);
  return v7;
}

_QWORD *sub_1B1B1CB60(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CB7C(a1, a2, (unint64_t *)&qword_1EEF5CB50, (uint64_t)&qword_1ED4BB0A0, (uint64_t)MEMORY[0x1E0DEDD50]);
}

_QWORD *sub_1B1B1CB7C(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  int64_t v8;
  uint64_t v9;

  if (a2 <= a1)
    v5 = a1;
  else
    v5 = a2;
  if (!v5)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1B1F428(0, a3, a4, a5, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1A19D70);
  v7 = (_QWORD *)swift_allocObject();
  v8 = j__malloc_size(v7);
  v9 = v8 - 32;
  if (v8 < 32)
    v9 = v8 - 17;
  v7[2] = a1;
  v7[3] = 2 * (v9 >> 4);
  return v7;
}

_QWORD *sub_1B1B1CC04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = a1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  return v4;
}

_QWORD *sub_1B1B1CC94(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CCDC(a1, a2, (unint64_t *)&qword_1EEF5CC30, (uint64_t)&unk_1EEF5AB80, (uint64_t)&type metadata for SamplerArgument, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1B20CB0);
}

_QWORD *sub_1B1B1CCB8(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CCDC(a1, a2, (unint64_t *)&qword_1EEF5CC40, (uint64_t)&qword_1EEF5AB90, (uint64_t)&type metadata for TextureArgument, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1B20CB0);
}

_QWORD *sub_1B1B1CCDC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  _QWORD *v8;
  size_t v9;

  if (a2 <= a1)
    v6 = a1;
  else
    v6 = a2;
  if (!v6)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1B1F428(0, a3, a4, a5, a6);
  v8 = (_QWORD *)swift_allocObject();
  v9 = j__malloc_size(v8);
  v8[2] = a1;
  v8[3] = 2 * ((uint64_t)(v9 - 32) / 40);
  return v8;
}

_QWORD *sub_1B1B1CD68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1B1F428(0, (unint64_t *)&qword_1ED4BAD20, (uint64_t)&qword_1ED4B89B0, (uint64_t)&type metadata for BufferArgument, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1B20CB0);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 48);
  return v4;
}

_QWORD *sub_1B1B1CE08(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CAD0(a1, a2, (uint64_t)&unk_1EEF5AB70, (uint64_t)&type metadata for ParticleFlockingSolverData.Cell, (void (*)(_QWORD, uint64_t, uint64_t, uint64_t (*)(void)))sub_1B1A02758);
}

_QWORD *sub_1B1B1CE28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5AB40, (uint64_t)&type metadata for FlockingParticle, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 112);
  return v4;
}

_QWORD *sub_1B1B1CEC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1A02758(0, &qword_1EEF5AB68, (uint64_t)&type metadata for Scheduler.Event, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 104);
  return v4;
}

_QWORD *sub_1B1B1CF60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1791524(0, &qword_1EEF5AB50, (uint64_t (*)(uint64_t))sub_1B1B20C38, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = (_QWORD *)swift_allocObject();
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 1;
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 5);
  return v4;
}

_QWORD *sub_1B1B1CFE8(uint64_t a1, uint64_t a2)
{
  return sub_1B1B1CCDC(a1, a2, &qword_1ED4BAD78, (uint64_t)&qword_1ED4B8C70, (uint64_t)&protocol descriptor for EntityComponent, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B1A025A0);
}

void *sub_1B1B1D00C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v14;

  if (!(a1 >> 62))
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  v6 = sub_1B22296AC();
  if (!v6)
    goto LABEL_17;
LABEL_3:
  v7 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v8 = (void *)MEMORY[0x1B5E21018](v7, a1);
    }
    else
    {
      v8 = *(void **)(a1 + 8 * v7 + 32);
      swift_unknownObjectRetain();
    }
    v9 = objc_msgSend(v8, sel_name);
    v10 = sub_1B222874C();
    v12 = v11;

    if (v10 == a2 && v12 == a3)
      break;
    v14 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v14 & 1) != 0)
      goto LABEL_15;
    swift_unknownObjectRelease();
    if (v6 == ++v7)
      goto LABEL_17;
  }
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1B1D194(_QWORD *a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t updated;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unint64_t v39;
  _BYTE *v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  __int128 v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  unint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  unsigned __int16 *v102[5];
  uint64_t v103[12];
  uint64_t v104;
  unint64_t v105;
  _OWORD v106[2];
  uint64_t v107;

  v100 = a2;
  v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940];
  sub_1B1791524(0, &qword_1ED4B7D80, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v4, v5);
  v97 = (uint64_t)&v92 - v6;
  v7 = type metadata accessor for GraphScript(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v99 = (unint64_t)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8578, type metadata accessor for EmitterScript, v3);
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)&v92 - v13;
  v15 = type metadata accessor for EmitterScript(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15, v17);
  v98 = (char *)&v92 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1A1B6FC(0, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v96 = v19;
  MEMORY[0x1E0C80A78](v19, v20);
  v93 = (uint64_t)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22, v23);
  v94 = (uint64_t)&v92 - v24;
  MEMORY[0x1E0C80A78](v25, v26);
  v28 = (char *)&v92 - v27;
  updated = type metadata accessor for ParticleUpdateScript(0);
  MEMORY[0x1E0C80A78](updated, v30);
  v95 = (uint64_t)&v92 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = a1;
  v32 = *a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  v33 = *(unsigned __int8 *)(v32 + 96);
  v34 = swift_retain();
  if (v33 != 1)
    return swift_release();
  v35 = v34;
  if ((*(_BYTE *)(v32 + 99) & 1) != 0)
    return swift_release();
  if (!swift_dynamicCastMetatype())
  {
    if (swift_dynamicCastMetatype())
    {
      v39 = v101[1];
      swift_retain();
      sub_1B1D15B0C(v39, (uint64_t)v14);
      swift_release();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      {
        v40 = v98;
        *v98 = 0;
        v40[32] = 0;
        v41 = &v40[*(int *)(v15 + 32)];
        v42 = type metadata accessor for ScriptIndex();
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 1, 1, v42);
        *((_QWORD *)v40 + 1) = 0xD0000000000000C0;
        *((_QWORD *)v40 + 2) = 0x80000001B232DE80;
        *((_QWORD *)v40 + 3) = &unk_1E639FD28;
        sub_1B1B1DC9C((uint64_t)v14, (unint64_t *)&unk_1ED4B8578, type metadata accessor for EmitterScript);
      }
      else
      {
        v40 = v98;
        sub_1B1A025EC((uint64_t)v14, (uint64_t)v98, type metadata accessor for EmitterScript);
      }
      sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88E0, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
      v54 = sub_1B1FDFE64(v53, (uint64_t)&off_1E637D0A8, v39);
      if (v54)
      {
        v55 = v54;
        v56 = v101[4];
        sub_1B1B7F538(MEMORY[0x1E0DEE9D8]);
        sub_1B1CAA0D8(v55, v35, v39, v56);
        swift_bridgeObjectRelease();
        v57 = swift_bridgeObjectRetain();
        sub_1B1B0FBE0(v57);
        swift_bridgeObjectRelease();
        swift_release();
        v58 = type metadata accessor for EmitterScript;
        v59 = (uint64_t)v40;
        return sub_1B1A04628(v59, v58);
      }
      v60 = type metadata accessor for EmitterScript;
      v61 = (uint64_t)v40;
    }
    else
    {
      if (!swift_dynamicCastMetatype())
        goto LABEL_54;
      v48 = v101[1];
      swift_retain();
      v49 = v97;
      sub_1B1D15B00(v48, v97);
      swift_release();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v49, 1, v7) == 1)
      {
        v50 = v99;
        *(_QWORD *)v99 = MEMORY[0x1E0DEE9D8];
        *(_QWORD *)(v50 + 8) = 0;
        *(_QWORD *)(v50 + 16) = 0xE000000000000000;
        *(_BYTE *)(v50 + 24) = 2;
        *(_QWORD *)(v50 + 32) = &unk_1E639FCF8;
        *(_WORD *)(v50 + 40) = 0;
        v51 = v50 + *(int *)(v7 + 40);
        v52 = type metadata accessor for ScriptIndex();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v51, 1, 1, v52);
        sub_1B1B1DC9C(v49, &qword_1ED4B7D80, type metadata accessor for GraphScript);
      }
      else
      {
        sub_1B1A025EC(v49, v99, type metadata accessor for GraphScript);
      }
      if (*(_BYTE *)(v99 + 41) == 1)
      {
        sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
        v63 = sub_1B1FDFE64(v62, (uint64_t)&off_1E637D0A8, v48);
        if (v63)
        {
          v64 = v63;
          v65 = v101[4];
          sub_1B1B7F538(MEMORY[0x1E0DEE9D8]);
          sub_1B1CAA37C(v64, v35, v48, v65);
          swift_bridgeObjectRelease();
          v66 = swift_bridgeObjectRetain();
          sub_1B1B0FBE0(v66);
          swift_bridgeObjectRelease();
          swift_release();
          v58 = type metadata accessor for GraphScript;
          v59 = v99;
          return sub_1B1A04628(v59, v58);
        }
      }
      v60 = type metadata accessor for GraphScript;
      v61 = v99;
    }
    sub_1B1A04628(v61, v60);
    return swift_release();
  }
  v36 = *((unsigned int *)v101 + 3);
  v37 = *((int *)v101 + 2);
  if (__PAIR64__(v36, v37) == 0xFFFFFFFF)
    return swift_release();
  v43 = v35;
  if ((v37 & 0x80000000) != 0)
    return swift_release();
  if (*(_QWORD *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v37)
    return swift_release();
  v44 = *(_QWORD *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if ((_DWORD)v36 != -1 && *(_DWORD *)(v44 + 12 * (int)v37 + 8) != (_DWORD)v36)
    return swift_release();
  v45 = (unsigned int *)(v44 + 12 * (int)v37);
  sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v35 + 136) + 8 * (int)*v45 + 32), v96, *v45 | ((unint64_t)*((unsigned __int16 *)v45 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v45 + 2) << 32), v35, &v104);
  v46 = v104;
  if (!v104)
    return swift_release();
  v99 = 0;
  sub_1B1B1F2FC(v104, (uint64_t)v28, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
  v47 = v95;
  sub_1B1792810((uint64_t)v28, v95, type metadata accessor for ParticleUpdateScript);
  sub_1B1B1DCE0((uint64_t)v28, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
  if (*(_BYTE *)(v47 + 24) == 1)
  {
LABEL_15:
    sub_1B1A04628(v47, type metadata accessor for ParticleUpdateScript);
    return swift_release();
  }
  v100 = v46;
  v67 = v94;
  sub_1B1B1F2FC(v46, v94, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
  v68 = v96;
  v69 = *(_QWORD *)(v67 + *(int *)(v96 + 40));
  v70 = v67;
  v71 = v93;
  sub_1B1B1F2FC(v70, v93, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
  if (v69)
  {
    sub_1B1B1DCE0(v71, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
    v72 = v68;
  }
  else
  {
    v73 = v71;
    v74 = *(_QWORD *)(v71 + *(int *)(v68 + 44));
    swift_bridgeObjectRetain();
    sub_1B1B1DCE0(v73, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
    if (!v74)
    {
      sub_1B1B1DCE0(v94, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
      v47 = v95;
      goto LABEL_15;
    }
    v72 = v68;
    swift_bridgeObjectRelease();
  }
  sub_1B1B1DCE0(v94, &qword_1ED4B88A0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280);
  v75 = v37;
  v76 = v37 | (unint64_t)(v36 << 32);
  if ((*(_BYTE *)(v35 + 48) & 1) != 0)
    sub_1B1FE054C(v37 | (unint64_t)(v36 << 32), v35);
  v77 = *(_QWORD *)(v100 + *(int *)(v72 + 60));
  v78 = *(_QWORD *)(v77 + 16);
  if (!v78)
  {
    v79 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_48:
    v89 = v101;
    v90 = *(_OWORD *)(v101 + 13);
    v106[0] = *(_OWORD *)(v101 + 11);
    v106[1] = v90;
    v107 = v101[15];
    swift_retain();
    sub_1B1B0FA64((uint64_t)v79, (uint64_t)v102);
    swift_bridgeObjectRelease();
    sub_1B19ED720((uint64_t)v106);
    sub_1B1E8FCE4(v43, (uint64_t)v102, 0x200000000, v103);
    sub_1B1A18378((uint64_t)v103, (uint64_t)&v104, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v91 = v89[4];
    if (!v104)
      sub_1B1B0EC8C(v89[4], (uint64_t)v102);
    sub_1B1CA9AD8(v102, (uint64_t)v103, v76, v91, v100, v43);
    sub_1B19ED748(v103);
    sub_1B19ED720((uint64_t)v102);
    swift_release();
    v58 = type metadata accessor for ParticleUpdateScript;
    v59 = v95;
    return sub_1B1A04628(v59, v58);
  }
  v99 = v75 | (v36 << 32);
  swift_bridgeObjectRetain();
  v79 = (char *)MEMORY[0x1E0DEE9D8];
  v80 = 32;
  while (1)
  {
    v83 = *(_QWORD *)(v77 + v80);
    if (v83 >> 60 == 9)
      break;
LABEL_39:
    v80 += 32;
    if (!--v78)
    {
      swift_bridgeObjectRelease();
      v43 = v35;
      v76 = v99;
      goto LABEL_48;
    }
  }
  swift_retain();
  v84 = sub_1B2229304();
  sub_1B1A05610(v83);
  v85 = swift_conformsToProtocol2();
  if (v85)
  {
    v86 = v85;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v79 = sub_1B1C63160(0, *((_QWORD *)v79 + 2) + 1, 1, v79);
    v88 = *((_QWORD *)v79 + 2);
    v87 = *((_QWORD *)v79 + 3);
    if (v88 >= v87 >> 1)
      v79 = sub_1B1C63160(v87 > 1, v88 + 1, 1, v79);
    v81 = *(_QWORD *)(v86 + 8);
    *((_QWORD *)v79 + 2) = v88 + 1;
    v82 = &v79[16 * v88];
    *((_QWORD *)v82 + 4) = v84;
    *((_QWORD *)v82 + 5) = v81;
    goto LABEL_39;
  }
  __break(1u);
LABEL_54:
  v104 = 0;
  v105 = 0xE000000000000000;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v104 = 0xD000000000000011;
  v105 = 0x80000001B232E970;
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1B1DC9C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1B1791524(0, a2, a3, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1B1B1DCE0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5;

  sub_1B1A1B6FC(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

unint64_t sub_1B1B1DD24(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
    case 9uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xCuLL:
    case 0xDuLL:
    case 0xEuLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B1B1DD54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  char v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v60;
  _QWORD *v61;
  size_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  int *v78;
  char v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _OWORD v123[2];
  uint64_t v124;
  uint64_t v125[12];
  _OWORD v126[2];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  _OWORD v136[2];
  uint64_t v137;
  _OWORD v138[2];
  uint64_t v139;
  _BYTE v140[40];
  uint64_t v141;
  int v142;
  char v143;
  uint64_t v144;
  char v145;
  uint64_t v146;

  v109 = type metadata accessor for GraphScript(0);
  v107 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109, v2);
  v117 = (uint64_t *)((char *)&v97 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88B0, v4, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v108 = v5;
  v106 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v6);
  v116 = (uint64_t)&v97 - v7;
  v118 = a1;
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 96) != 1
    || (*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 99) & 1) != 0)
  {
    return;
  }
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v141 = qword_1ED4D09F8;
  v142 = 0;
  v143 = 2;
  v144 = 0;
  v145 = 2;
  v146 = 0;
  swift_retain();
  sub_1B1B14C4C(1, 1, (uint64_t)v123);
  swift_release();
  v138[0] = v123[0];
  v138[1] = v123[1];
  v139 = v124;
  sub_1B1E8FCE4(v118, (uint64_t)v138, 0x200000000, v125);
  sub_1B1A18378((uint64_t)v125, (uint64_t)v126, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v126[0])
  {
    sub_1B19ED720((uint64_t)v123);
    return;
  }
  v133 = v126[0];
  v134 = v126[1];
  v135 = v127;
  if (v132 <= 0 || (v105 = v129) == 0)
  {
    sub_1B19ED720((uint64_t)v123);
    goto LABEL_91;
  }
  v104 = v128;
  v8 = v131;
  v122 = v130;
  v9 = v131[4];
  v112 = *(unsigned __int8 *)(v130 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v10 = &qword_1ED4B8000;
  v98 = (uint64_t *)(v118 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v99 = v131 + 13;
  v100 = v131 + 8;
  v101 = v131 + 6;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v12 = 0;
  v102 = v9;
  v103 = v8;
  do
  {
    v110 = v12;
    v111 = v11;
    v13 = (unsigned int *)(v104 + 48 * v11);
    v14 = *v13;
    v121 = v13[1];
    v15 = *((_QWORD *)v13 + 3);
    v16 = *((_QWORD *)v13 + 4);
    v17 = *((_QWORD *)v13 + 5);
    v114 = (uint64_t *)*((_QWORD *)v13 + 2);
    v115 = v16;
    if (v112)
    {
      v18 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378((uint64_t)v101, (uint64_t)v140, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = v8[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v8[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v8[7] = v20;
    v21 = v100;
    v100[1] = 0;
    v21[2] = 0;
    *v21 = 0;
    swift_release();
    v22 = v114;
    v23 = v115;
    v24 = sub_1B1A12038(v109, (uint64_t)&off_1E6370AB0, v114, v15, v115, (uint64_t)v8);
    v119 = sub_1B1A12038(v108, (uint64_t)&off_1E637D0A8, v22, v15, v23, (uint64_t)v8);
    if (!v22)
    {
      if ((_DWORD)v14 == (_DWORD)v121)
        goto LABEL_45;
      v120 = *(_QWORD *)(v107 + 72);
      v66 = *(_QWORD *)(v106 + 72);
      v67 = (uint64_t *)(v24 + 41);
      v114 = v67;
      v115 = v66;
      while (1)
      {
        if (*((_BYTE *)v67 + v120 * v14) != 1)
          goto LABEL_55;
        v68 = *(_QWORD *)(v17 + 16);
        v69 = *(_BYTE *)(v17 + 184);
        swift_retain();
        v70 = v122;
        if ((v69 & 1) != 0)
          goto LABEL_93;
        v71 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v14);
        v72 = *(_DWORD *)(*(_QWORD *)(v68 + v10[192]) + 12 * v71 + 8);
        swift_retain();
        swift_release();
        v73 = *(_QWORD *)(v70 + 208);
        if (*(_QWORD *)(v73 + 16) && (v74 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf), (v75 & 1) != 0))
        {
          v76 = *(_QWORD *)(*(_QWORD *)(v73 + 56) + 24 * v74);
          v77 = *(_QWORD *)(v76 + 16);
          swift_bridgeObjectRetain();
          if (v77)
          {
            v78 = (int *)(v76 + 44);
            while (*(v78 - 3) != v71 || *(v78 - 2) != v72)
            {
              v78 += 4;
              if (!--v77)
                goto LABEL_67;
            }
            v93 = *(v78 - 1);
            v94 = *v78;
            swift_release();
            swift_bridgeObjectRelease();
            if ((_DWORD)v93 != -1 || v94 != 0)
            {
              v10 = &qword_1ED4B8000;
              if ((v93 & 0x80000000) == 0 && v98[1] > v93)
              {
                v96 = *v98;
                if ((v94 == -1 || *(_DWORD *)(v96 + 12 * (int)v93 + 8) == v94)
                  && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v118 + 136) + 8 * *(int *)(v96 + 12 * (int)v93) + 32) + 120) != 1)
                {
                  goto LABEL_55;
                }
              }
              goto LABEL_70;
            }
          }
          else
          {
LABEL_67:
            swift_release();
            swift_bridgeObjectRelease();
          }
          v10 = &qword_1ED4B8000;
        }
        else
        {
          swift_release();
        }
LABEL_70:
        v80 = *(_BYTE *)(v17 + 184);
        v81 = swift_retain();
        if ((v80 & 1) != 0
          || (v82 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v14),
              v83 = *(unsigned int *)(*(_QWORD *)(v81 + v10[192]) + 12 * (int)v82 + 8),
              swift_release(),
              v84 = *(_BYTE *)(v17 + 184),
              v85 = swift_retain(),
              (v84 & 1) != 0))
        {
LABEL_93:
          sub_1B2229688();
          __break(1u);
          return;
        }
        v86 = v10;
        v87 = v119 + v115 * v14;
        v88 = *(unsigned int *)(*(_QWORD *)(v17 + 168) + 4 * v14);
        v89 = *(unsigned int *)(*(_QWORD *)(v85 + v86[192]) + 12 * (int)v88 + 8);
        swift_release();
        sub_1B1CAA37C(v87, v118, v82 | (unint64_t)(v83 << 32), v88 | (v89 << 32));
        v90 = v116;
        sub_1B1B1F2FC(v87, v116, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
        v91 = v117;
        sub_1B1792810(v90, (uint64_t)v117, type metadata accessor for GraphScript);
        sub_1B1B1DCE0(v90, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
        v92 = *v91;
        swift_bridgeObjectRetain();
        sub_1B1A04628((uint64_t)v91, type metadata accessor for GraphScript);
        sub_1B1B0FBE0(v92);
        swift_bridgeObjectRelease();
        v10 = v86;
        v67 = v114;
LABEL_55:
        if (++v14 == v121)
          goto LABEL_45;
      }
    }
    if (v23)
    {
      v25 = 0;
      v26 = *(_QWORD *)(v107 + 72);
      v113 = *(_QWORD *)(v106 + 72);
      v120 = v24 + 41;
      v121 = v26;
      v27 = v115;
      do
      {
        if (*(_BYTE *)(v120 + v121 * v25) != 1)
          goto LABEL_16;
        v28 = v114[v25];
        v29 = *(_QWORD *)(v17 + 16);
        v30 = *(_BYTE *)(v17 + 184);
        swift_retain();
        if ((v30 & 1) != 0)
          goto LABEL_93;
        v31 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v28);
        v32 = *(_DWORD *)(*(_QWORD *)(v29 + v10[192]) + 12 * v31 + 8);
        v33 = v122;
        swift_retain();
        swift_release();
        v34 = *(_QWORD *)(v33 + 208);
        if (*(_QWORD *)(v34 + 16) && (v35 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf), (v36 & 1) != 0))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(v34 + 56) + 24 * v35);
          v38 = *(_QWORD *)(v37 + 16);
          swift_bridgeObjectRetain();
          if (v38)
          {
            v39 = (int *)(v37 + 44);
            while (*(v39 - 3) != v31 || *(v39 - 2) != v32)
            {
              v39 += 4;
              if (!--v38)
                goto LABEL_28;
            }
            v54 = *(v39 - 1);
            v55 = *v39;
            swift_release();
            swift_bridgeObjectRelease();
            v10 = &qword_1ED4B8000;
            if (((_DWORD)v54 != -1 || v55 != 0) && (v54 & 0x80000000) == 0 && v98[1] > v54)
            {
              v57 = *v98;
              if ((v55 == -1 || *(_DWORD *)(v57 + 12 * (int)v54 + 8) == v55)
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v118 + 136) + 8 * *(int *)(v57 + 12 * (int)v54) + 32) + 120) != 1)
              {
                goto LABEL_16;
              }
            }
            goto LABEL_31;
          }
LABEL_28:
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_release();
        }
        v10 = &qword_1ED4B8000;
LABEL_31:
        v41 = *(_BYTE *)(v17 + 184);
        v42 = swift_retain();
        if ((v41 & 1) != 0)
          goto LABEL_93;
        v43 = *(_DWORD *)(*(_QWORD *)(v17 + 168) + 4 * v28);
        v44 = *(unsigned int *)(*(_QWORD *)(v42 + v10[192]) + 12 * (int)v43 + 8);
        swift_release();
        v45 = *(_BYTE *)(v17 + 184);
        v46 = swift_retain();
        if ((v45 & 1) != 0)
          goto LABEL_93;
        v47 = v119 + v113 * v25;
        v48 = *(unsigned int *)(*(_QWORD *)(v17 + 168) + 4 * v28);
        v49 = *(unsigned int *)(*(_QWORD *)(v46 + v10[192]) + 12 * (int)v48 + 8);
        swift_release();
        v50 = v48 | (v49 << 32);
        v10 = &qword_1ED4B8000;
        sub_1B1CAA37C(v47, v118, v43 | (unint64_t)(v44 << 32), v50);
        v51 = v116;
        sub_1B1B1F2FC(v47, v116, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
        v52 = v117;
        sub_1B1792810(v51, (uint64_t)v117, type metadata accessor for GraphScript);
        sub_1B1B1DCE0(v51, (unint64_t *)&unk_1ED4B88B0, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80);
        v53 = *v52;
        swift_bridgeObjectRetain();
        sub_1B1A04628((uint64_t)v52, type metadata accessor for GraphScript);
        sub_1B1B0FBE0(v53);
        swift_bridgeObjectRelease();
        v27 = v115;
LABEL_16:
        ++v25;
      }
      while (v25 != v27);
    }
LABEL_45:
    v136[0] = v133;
    v136[1] = v134;
    v137 = v135;
    v8 = v103;
    v12 = v110;
    sub_1B1F05D48(v103, (unsigned __int16 **)v136, (uint64_t)v140);
    v9 = v102;
    if (*(_QWORD *)(v8[13] + 16))
    {
      v58 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v58, v17);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v60 = v8[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v60 + 16));
      }
      else
      {
        v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v60 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v61 = (_QWORD *)swift_allocObject();
          v62 = j__malloc_size(v61);
          v61[2] = 0;
          v61[3] = 2 * ((uint64_t)(v62 - 32) / 72);
        }
        *v99 = v61;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v8[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v63 = *(char **)(v17 + 232);
        v64 = *(char **)(v17 + 256);
        if (v63 == v64)
        {
          v65 = *(char **)(v17 + 240);
        }
        else
        {
          sub_1B1A1059C(v64, v63);
          v64 = *(char **)(v17 + 232);
          v65 = *(char **)(v17 + 240);
          if (v65 == v64)
          {
            v65 = 0;
            v64 = 0;
            *(_QWORD *)(v17 + 232) = 0;
            *(_QWORD *)(v17 + 240) = 0;
          }
        }
        *(_QWORD *)(v17 + 248) = v65;
        *(_QWORD *)(v17 + 256) = v64;
      }
    }
    ecs_stack_allocator_pop_snapshot(v9);
    if ((v112 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 376));
    }
    swift_release();
    v11 = v111 + 1;
  }
  while (v111 + 1 != v105);
  sub_1B19ED720((uint64_t)v123);
  sub_1B19ED748(v125);
LABEL_91:
  sub_1B19ED748(v125);
}

uint64_t *sub_1B1B1E880(uint64_t *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  char v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  _QWORD *v45;
  size_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  char v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v74;
  _QWORD *v75;
  uint64_t *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _OWORD v94[2];
  uint64_t v95;
  uint64_t v96[8];
  _OWORD v97[2];
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _OWORD v107[2];
  uint64_t v108;
  _OWORD v109[2];
  uint64_t v110;
  _BYTE v111[40];
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;

  v91 = (uint64_t)result;
  if (*((_BYTE *)result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 96) != 1
    || (*((_BYTE *)result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 99) & 1) != 0)
  {
    return result;
  }
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v112 = qword_1ED4D09F8;
  v113 = 0;
  v114 = 2;
  v115 = 0;
  v116 = 2;
  v117 = 0;
  swift_retain();
  sub_1B1B14EA4(1, 1, (uint64_t)v94);
  swift_release();
  v109[0] = v94[0];
  v109[1] = v94[1];
  v110 = v95;
  sub_1B1E8FCE4(v91, (uint64_t)v109, 0x200000000, v96);
  sub_1B1A18378((uint64_t)v96, (uint64_t)v97, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v97[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v94);
  v104 = v97[0];
  v105 = v97[1];
  v106 = v98;
  if (v103 <= 0 || (v82 = v100) == 0)
  {
    sub_1B19ED720((uint64_t)v94);
    return sub_1B19ED748(v96);
  }
  v81 = v99;
  v1 = v102;
  v2 = v102[4];
  v90 = v101;
  v85 = *(unsigned __int8 *)(v101 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v79 = (uint64_t)(v102 + 6);
  v78 = type metadata accessor for SimpleScript(0);
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B88D0, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  v93 = v3;
  v76 = (uint64_t *)(v91 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v75 = v1 + 13;
  v86 = v1;
  v77 = v1 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v4 = 0;
  v5 = 0;
  v80 = v2;
  do
  {
    v83 = v5;
    v84 = v4;
    v6 = (unsigned int *)(v81 + 48 * v4);
    v7 = *v6;
    v8 = *((_QWORD *)v6 + 3);
    v87 = v6[1];
    v89 = (uint64_t *)*((_QWORD *)v6 + 2);
    v9 = *((_QWORD *)v6 + 4);
    v10 = *((_QWORD *)v6 + 5);
    if (v85)
    {
      v11 = *(os_unfair_lock_s **)(v10 + 376);
      swift_retain();
      os_unfair_lock_lock(v11);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v2);
    sub_1B1A18378(v79, (uint64_t)v111, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v12 = v86[4];
    v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v86[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
    v86[7] = v13;
    v77[1] = 0;
    v77[2] = 0;
    *v77 = 0;
    swift_release();
    sub_1B1A12038(v78, (uint64_t)&off_1E63777B8, v89, v8, v9, (uint64_t)v86);
    v92 = sub_1B1A12038(v93, (uint64_t)&off_1E637D0A8, v89, v8, v9, (uint64_t)v86);
    if (!v89)
    {
      v41 = &qword_1ED4B8000;
      if ((_DWORD)v7 == (_DWORD)v87)
        goto LABEL_44;
      v50 = *(_QWORD *)(*(_QWORD *)(v93 - 8) + 72);
      while (1)
      {
        v51 = *(_QWORD *)(v10 + 16);
        swift_retain();
        if ((*(_BYTE *)(v10 + 184) & 1) != 0)
        {
LABEL_91:
          result = (uint64_t *)sub_1B2229688();
          __break(1u);
          return result;
        }
        v52 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v7);
        v53 = *(_DWORD *)(*(_QWORD *)(v51 + v41[192]) + 12 * v52 + 8);
        swift_retain();
        swift_release();
        v54 = *(_QWORD *)(v90 + 208);
        if (*(_QWORD *)(v54 + 16) && (v55 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf), (v56 & 1) != 0))
        {
          v57 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 24 * v55);
          v58 = *(_QWORD *)(v57 + 16);
          swift_bridgeObjectRetain();
          if (v58)
          {
            v59 = (int *)(v57 + 44);
            while (*(v59 - 3) != v52 || *(v59 - 2) != v53)
            {
              v59 += 4;
              if (!--v58)
                goto LABEL_64;
            }
            v71 = *(v59 - 1);
            v72 = *v59;
            swift_release();
            swift_bridgeObjectRelease();
            if (((_DWORD)v71 != -1 || v72 != 0) && (v71 & 0x80000000) == 0 && v76[1] > v71)
            {
              v74 = *v76;
              if ((v72 == -1 || *(_DWORD *)(v74 + 12 * (int)v71 + 8) == v72)
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v91 + 136) + 8 * *(int *)(v74 + 12 * (int)v71) + 32) + 120) != 1)
              {
                goto LABEL_69;
              }
            }
          }
          else
          {
LABEL_64:
            swift_release();
            swift_bridgeObjectRelease();
          }
        }
        else
        {
          swift_release();
        }
        v61 = *(_BYTE *)(v10 + 184);
        v62 = swift_retain();
        if ((v61 & 1) != 0)
          goto LABEL_91;
        v63 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v7);
        v64 = *(unsigned int *)(*(_QWORD *)(v62 + v41[192]) + 12 * (int)v63 + 8);
        swift_release();
        v65 = *(_BYTE *)(v10 + 184);
        v66 = swift_retain();
        if ((v65 & 1) != 0)
          goto LABEL_91;
        v67 = *(unsigned int *)(*(_QWORD *)(v10 + 168) + 4 * v7);
        v68 = *(unsigned int *)(*(_QWORD *)(v66 + v41[192]) + 12 * (int)v67 + 8);
        swift_release();
        v69 = v67 | (v68 << 32);
        v41 = &qword_1ED4B8000;
        sub_1B1CAA78C(v92 + v50 * v7, v91, v63 | (unint64_t)(v64 << 32), v69);
        v70 = swift_bridgeObjectRetain();
        sub_1B1B0FBE0(v70);
        swift_bridgeObjectRelease();
LABEL_69:
        if (++v7 == v87)
          goto LABEL_44;
      }
    }
    v14 = &qword_1ED4B8000;
    if (v9)
    {
      v15 = 0;
      v88 = *(_QWORD *)(*(_QWORD *)(v93 - 8) + 72);
      do
      {
        v16 = v89[v15];
        v17 = *(_QWORD *)(v10 + 16);
        swift_retain();
        if ((*(_BYTE *)(v10 + 184) & 1) != 0)
          goto LABEL_91;
        v18 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v16);
        v19 = *(_DWORD *)(*(_QWORD *)(v17 + v14[192]) + 12 * v18 + 8);
        swift_retain();
        swift_release();
        v20 = *(_QWORD *)(v90 + 208);
        if (*(_QWORD *)(v20 + 16) && (v21 = sub_1B1DC3AC8((uint64_t)&type metadata for IsSubEntityOf), (v22 & 1) != 0))
        {
          v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 24 * v21);
          v24 = *(_QWORD *)(v23 + 16);
          swift_bridgeObjectRetain();
          if (v24)
          {
            v25 = (int *)(v23 + 44);
            while (*(v25 - 3) != v18 || *(v25 - 2) != v19)
            {
              v25 += 4;
              if (!--v24)
                goto LABEL_26;
            }
            v37 = *(v25 - 1);
            v38 = *v25;
            swift_release();
            swift_bridgeObjectRelease();
            v14 = &qword_1ED4B8000;
            if (((_DWORD)v37 != -1 || v38 != 0) && (v37 & 0x80000000) == 0 && v76[1] > v37)
            {
              v40 = *v76;
              if ((v38 == -1 || *(_DWORD *)(v40 + 12 * (int)v37 + 8) == v38)
                && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v91 + 136) + 8 * *(int *)(v40 + 12 * (int)v37) + 32) + 120) != 1)
              {
                goto LABEL_31;
              }
            }
          }
          else
          {
LABEL_26:
            swift_release();
            swift_bridgeObjectRelease();
            v14 = &qword_1ED4B8000;
          }
        }
        else
        {
          swift_release();
        }
        v27 = *(_BYTE *)(v10 + 184);
        v28 = swift_retain();
        if ((v27 & 1) != 0)
          goto LABEL_91;
        v29 = *(_DWORD *)(*(_QWORD *)(v10 + 168) + 4 * v16);
        v30 = *(unsigned int *)(*(_QWORD *)(v28 + v14[192]) + 12 * (int)v29 + 8);
        swift_release();
        v31 = *(_BYTE *)(v10 + 184);
        v32 = swift_retain();
        if ((v31 & 1) != 0)
          goto LABEL_91;
        v33 = *(unsigned int *)(*(_QWORD *)(v10 + 168) + 4 * v16);
        v34 = *(unsigned int *)(*(_QWORD *)(v32 + v14[192]) + 12 * (int)v33 + 8);
        swift_release();
        v35 = v33 | (v34 << 32);
        v14 = &qword_1ED4B8000;
        sub_1B1CAA78C(v92 + v88 * v15, v91, v29 | (unint64_t)(v30 << 32), v35);
        v36 = swift_bridgeObjectRetain();
        sub_1B1B0FBE0(v36);
        swift_bridgeObjectRelease();
LABEL_31:
        ++v15;
      }
      while (v15 != v9);
    }
LABEL_44:
    v107[0] = v104;
    v107[1] = v105;
    v108 = v106;
    v5 = v83;
    sub_1B1F05D48(v86, (unsigned __int16 **)v107, (uint64_t)v111);
    v2 = v80;
    if (*(_QWORD *)(v86[13] + 16))
    {
      v42 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v42, v10);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v44 = v86[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v44 + 16));
      }
      else
      {
        v45 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v44 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v45 = (_QWORD *)swift_allocObject();
          v46 = j__malloc_size(v45);
          v45[2] = 0;
          v45[3] = 2 * ((uint64_t)(v46 - 32) / 72);
        }
        *v75 = v45;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v86[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v47 = *(char **)(v10 + 232);
        v48 = *(char **)(v10 + 256);
        if (v47 == v48)
        {
          v49 = *(char **)(v10 + 240);
        }
        else
        {
          sub_1B1A1059C(v48, v47);
          v48 = *(char **)(v10 + 232);
          v49 = *(char **)(v10 + 240);
          if (v49 == v48)
          {
            v49 = 0;
            v48 = 0;
            *(_QWORD *)(v10 + 232) = 0;
            *(_QWORD *)(v10 + 240) = 0;
          }
        }
        *(_QWORD *)(v10 + 248) = v49;
        *(_QWORD *)(v10 + 256) = v48;
      }
    }
    ecs_stack_allocator_pop_snapshot(v80);
    if ((v85 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
    }
    swift_release();
    v4 = v84 + 1;
  }
  while (v84 + 1 != v82);
  sub_1B19ED720((uint64_t)v94);
  sub_1B19ED748(v96);
  return sub_1B19ED748(v96);
}

void sub_1B1B1F228()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4B9390)
  {
    sub_1B1B1F290();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4B9390);
  }
}

void sub_1B1B1F290()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7F30)
  {
    sub_1B1A02758(255, (unint64_t *)&unk_1ED4B7F20, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for UnsafeArray);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7F30);
  }
}

uint64_t sub_1B1B1F2FC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;

  sub_1B1A1B6FC(0, a3, a4, a5, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void sub_1B1B1F358()
{
  unint64_t TupleTypeMetadata;
  uint64_t v1;

  if (!qword_1ED4BF3D0)
  {
    sub_1B222820C();
    type metadata accessor for OSLogType(255);
    TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1)
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1ED4BF3D0);
  }
}

uint64_t sub_1B1B1F3E4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v4;

  sub_1B1A02758(0, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void sub_1B1B1F428(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    a5(255, a3, a4);
    v6 = sub_1B2229A18();
    if (!v7)
      atomic_store(v6, a2);
  }
}

unint64_t sub_1B1B1F47C()
{
  unint64_t result;

  result = qword_1ED4BF270;
  if (!qword_1ED4BF270)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB1A70], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&qword_1ED4BF270);
  }
  return result;
}

uint64_t sub_1B1B1F4C0(uint64_t a1)
{
  uint64_t *v1;

  return sub_1B1E1D784(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1B1B1F4D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, int *);
  void (*v27)(char *, int *);
  char v28;
  uint64_t v29;
  unint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  char *v48;
  id v49;
  unint64_t v50;
  void *v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[7];
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;

  v7 = (int *)type metadata accessor for ScriptRuntime(0, a2, a3, a4);
  v8 = *((_QWORD *)v7 - 1);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v59 - v10;
  v68 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_OWORD *)(a1 + 96);
  v74 = *(_OWORD *)(a1 + 80);
  v75 = v16;
  v17 = *(_OWORD *)(a1 + 128);
  v76 = *(_OWORD *)(a1 + 112);
  v77 = v17;
  v18 = *(_OWORD *)(a1 + 32);
  v70 = *(_OWORD *)(a1 + 16);
  v71 = v18;
  v19 = *(_OWORD *)(a1 + 64);
  v72 = *(_OWORD *)(a1 + 48);
  v73 = v19;
  v20 = v70;
  v21 = HIDWORD(v70);
  v22 = SDWORD2(v70);
  swift_retain();
  if ((_DWORD)v22 == -1 && !v21)
    return swift_release();
  if ((v22 & 0x80000000) != 0)
    return swift_release();
  if (*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v22)
    return swift_release();
  v23 = *(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  if (v21 != -1 && *(_DWORD *)(v23 + 12 * (int)v22 + 8) != v21)
    return swift_release();
  v24 = (unsigned int *)(v23 + 12 * (int)v22);
  sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v20 + 136) + 8 * (int)*v24 + 32), (uint64_t)v7, *v24 | ((unint64_t)*((unsigned __int16 *)v24 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v24 + 2) << 32), v20, v69);
  v25 = v69[0];
  if (!v69[0])
    return swift_release();
  v66 = 0;
  v26 = *(void (**)(char *, uint64_t, int *))(v8 + 16);
  v26(v11, v69[0], v7);
  v67 = v25;
  sub_1B20EF140((uint64_t)v7, (uint64_t)v15);
  v27 = *(void (**)(char *, int *))(v8 + 8);
  v27(v11, v7);
  if ((*(unsigned __int8 (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3) != 1
    || (v26(v11, v67, v7), v28 = sub_1B20EF158((uint64_t)v7), v27(v11, v7), (v28 & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v68 + 8))(v15, a2);
    return swift_release();
  }
  v61 = (char *)(v67 + v7[15]);
  v29 = *(_QWORD *)v61;
  v30 = *(_QWORD *)(v67 + v7[11]);
  if (v30 >> 62)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v31 = (void *)sub_1B22296AC();
  }
  else
  {
    v31 = *(void **)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  v64 = v29;
  if (v31)
  {
    if ((v30 & 0xC000000000000001) != 0)
    {
      v31 = (void *)MEMORY[0x1B5E21018](0, v30);
    }
    else
    {
      v31 = *(void **)(v30 + 32);
      swift_unknownObjectRetain();
    }
  }
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v31, sel_name);
  swift_unknownObjectRelease();
  v62 = sub_1B222874C();
  v34 = v33;

  v35 = v67;
  v36 = *(_QWORD *)(v67 + v7[9]);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 72);
    swift_unknownObjectRetain();
  }
  else
  {
    v37 = 0;
  }
  v65 = v34;
  v39 = v7[12];
  v40 = *(char **)(v35 + v39);
  v63 = v37;
  if (v40)
  {
    v41 = v40;
  }
  else
  {
    v60 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 232);
    v42 = sub_1B1E52670();
    v43 = *(_QWORD *)a1 == 0;
    swift_unknownObjectRetain();
    v44 = v65;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1E2738C(v62, v44, v37, v42, v69);
    swift_unknownObjectRelease();
    sub_1B1B3947C((uint64_t)v69, 1, v43);
    v46 = v45;
    sub_1B1B1FB80((uint64_t)v69);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    if (!v46)
    {
      (*(void (**)(char *, uint64_t))(v68 + 8))(v15, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return swift_unknownObjectRelease();
    }
    v47 = *(void **)(v67 + v39);
    *(_QWORD *)(v67 + v39) = v46;
    v41 = v46;

    v40 = 0;
  }
  v48 = v40;
  v49 = objc_msgSend(v41, sel_bindings);
  sub_1B1B1FBE0();
  v50 = sub_1B2228AB8();

  v51 = sub_1B1B1D00C(v50, 0x61765F7475706E69, 0xEC0000007365756CLL);
  swift_bridgeObjectRelease();
  if (v51)
  {
    v66 = v72;
    v53 = v67 + v7[14];
    v67 = *(_QWORD *)v53;
    LODWORD(v60) = *(unsigned __int8 *)(v53 + 8);
    v54 = *(_QWORD *)(*(_QWORD *)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(_QWORD *)thread_worker_index(v52)
                    + 8);
    v55 = *(_QWORD *)a1;
    v59 = *(_QWORD *)(a1 + 8);
    v56 = (uint64_t *)(v61 + 8);
    v57 = v63;
    swift_unknownObjectRetain();
    v61 = v41;
    v58 = v65;
    swift_bridgeObjectRetain();
    sub_1B1B1FC34(a1);
    sub_1B1E6E484(v64, v56, (uint64_t)v51, v66, v67, v60, v54, v59, v55, v20, a1, v62, v58, v57);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    sub_1B1B1FC88(a1);

    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v15, a2);
}

uint64_t sub_1B1B1FB80(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t sub_1B1B1FBE0()
{
  unint64_t result;

  result = qword_1ED4B7980;
  if (!qword_1ED4B7980)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4B7980);
  }
  return result;
}

uint64_t sub_1B1B1FC34(uint64_t a1)
{
  swift_unknownObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t sub_1B1B1FC88(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  return a1;
}

void sub_1B1B1FCD8(void *a1, id a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  _QWORD aBlock[6];

  v3 = objc_msgSend(a2, sel_worldRef);
  if (v3)
  {
    v15 = v3;
    if (sub_1B187B004((uint64_t)v3, 1, v4, v5, v6, v7, v8, v9))
    {
      v10 = (void *)objc_opt_self();
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v15;
      *(_QWORD *)(v11 + 24) = a1;
      aBlock[4] = sub_1B1B20DC8;
      aBlock[5] = v11;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1B1D199FC;
      aBlock[3] = &unk_1E63E85C0;
      v12 = _Block_copy(aBlock);
      v13 = v15;
      v14 = a1;
      swift_release();
      objc_msgSend(v10, sel_postCommandWithContext_object_applyBlock_, v13, 0, v12);
      _Block_release(v12);

    }
    else
    {

    }
  }
}

void sub_1B1B1FE14(uint64_t a1, uint64_t a2, void *a3, void *a4, id a5)
{
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  float v17;
  float Width;
  double v19;
  float v20;
  float Height;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  void *v25;
  id v26;
  id v27;
  id v28;
  float v29;
  uint64_t v30;
  id v31;
  _QWORD aBlock[6];
  CGRect v33;
  CGRect v34;

  v9 = objc_msgSend(a5, sel_worldRef);
  if (v9)
  {
    v31 = v9;
    if (sub_1B187B004((uint64_t)v9, 1, v10, v11, v12, v13, v14, v15))
    {
      objc_msgSend(a3, sel_locationInView_, a4);
      v17 = v16;
      objc_msgSend(a4, sel_frame);
      Width = CGRectGetWidth(v33);
      v29 = v17 / Width;
      objc_msgSend(a3, sel_locationInView_, a4);
      v20 = v19;
      objc_msgSend(a4, sel_frame);
      Height = CGRectGetHeight(v34);
      *(float *)&v22 = v29;
      *((float *)&v22 + 1) = 1.0 - (float)(v20 / Height);
      v30 = v22;
      v23 = (void *)objc_opt_self();
      v24 = (_QWORD *)swift_allocObject();
      v24[2] = v31;
      v24[3] = a1;
      v24[4] = a2;
      v24[5] = a3;
      v24[6] = a4;
      v24[7] = v30;
      aBlock[4] = sub_1B1B20D48;
      aBlock[5] = v24;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1B1D199FC;
      aBlock[3] = &unk_1E63D46D8;
      v25 = _Block_copy(aBlock);
      v26 = v31;
      swift_bridgeObjectRetain();
      v27 = a3;
      v28 = a4;
      swift_release();
      objc_msgSend(v23, sel_postCommandWithContext_object_applyBlock_, v26, 0, v25);
      _Block_release(v25);

    }
    else
    {

    }
  }
}

uint64_t sub_1B1B20004(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  int v42;
  double v43;
  id v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  __CFString *v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD);
  id v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96[2];
  uint64_t v97;
  uint64_t v98;
  _OWORD v99[2];
  uint64_t v100;
  uint64_t v101[12];
  _OWORD v102[2];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  _OWORD v112[2];
  uint64_t v113;
  _QWORD v114[6];
  _OWORD v115[2];
  uint64_t v116;
  _BYTE v117[40];
  _QWORD v118[5];
  _QWORD v119[6];
  int v120;
  char v121;
  uint64_t v122;
  char v123;
  uint64_t v124;

  v1 = result + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  if (*(_BYTE *)(result + OBJC_IVAR____TtC3VFX13EntityManager_clock + 96) == 1 && (*(_BYTE *)(v1 + 99) & 1) == 0)
  {
    v2 = result;
    v3 = *(_QWORD **)(result + 176);
    swift_retain();
    sub_1B1F22938((uint64_t)&type metadata for TriggerListComponent, (uint64_t)&off_1E639F9C0, v3, &v97);
    swift_release();
    v4 = *(_QWORD **)(v2 + 176);
    swift_retain();
    v5 = sub_1B1F22B64((uint64_t)&type metadata for IncommingTickedEventsComponent, (uint64_t)&off_1E63B55F8, v4);
    swift_release();
    v6 = *(_QWORD **)(v2 + 176);
    swift_retain();
    v73 = sub_1B1F22B64((uint64_t)&type metadata for TickedEventsComponent, (uint64_t)&off_1E63A71B8, v6);
    swift_release();
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v119[5] = qword_1ED4D09F8;
    v120 = 0;
    v121 = 2;
    v122 = 0;
    v123 = 2;
    v124 = 0;
    swift_retain();
    sub_1B1B150FC(1, 1, (uint64_t)v99);
    swift_release();
    v96[0] = (uint64_t)sub_1B1B7F63C(MEMORY[0x1E0DEE9D8]);
    v115[0] = v99[0];
    v115[1] = v99[1];
    v116 = v100;
    sub_1B1E8FCE4(v2, (uint64_t)v115, 0x200000000, v101);
    sub_1B1A18378((uint64_t)v101, (uint64_t)v102, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (*(_QWORD *)&v102[0])
    {
      v109 = v102[0];
      v110 = v102[1];
      v111 = v103;
      v74 = v1;
      v93 = v2;
      if (v108 >= 1)
      {
        v80 = v105;
        if (v105)
        {
          v72 = v5;
          v78 = v104;
          v7 = v107;
          v8 = v107[4];
          v91 = v106;
          v9 = *(unsigned __int8 *)(v106 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v84 = type metadata accessor for TriggerScript(0);
          sub_1B1A1B6FC(0, &qword_1ED4BB250, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
          v83 = v10;
          v94 = v7;
          v75 = v7 + 8;
          v76 = (uint64_t)(v7 + 6);
          swift_retain();
          swift_retain();
          swift_retain();
          v11 = 0;
          v77 = v9;
          v79 = v8;
          do
          {
            v88 = v11;
            v12 = (unsigned int *)(v78 + 48 * v11);
            v13 = *v12;
            v81 = (void *)v12[1];
            v14 = v12[2];
            v15 = (uint64_t *)*((_QWORD *)v12 + 2);
            v89 = *((_QWORD *)v12 + 3);
            v17 = *((_QWORD *)v12 + 4);
            v16 = *((_QWORD *)v12 + 5);
            if (v9)
            {
              v18 = *(os_unfair_lock_s **)(v16 + 376);
              swift_retain();
              os_unfair_lock_lock(v18);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v8);
            sub_1B1A18378(v76, (uint64_t)v117, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v86 = v94[4];
            v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v94[6] = ecs_stack_allocator_allocate(v86, 48 * v19, 8);
            v94[7] = v19;
            v75[1] = 0;
            v75[2] = 0;
            *v75 = 0;
            swift_release();
            v20 = sub_1B1A12038(v84, (uint64_t)&off_1E637DA80, v15, v89, v17, (uint64_t)v94);
            v21 = sub_1B1A12038(v83, (uint64_t)&off_1E637D0A8, v15, v89, v17, (uint64_t)v94);
            v22 = v21;
            if (v15)
            {
              if (v17)
              {
                v23 = *(_QWORD *)(*(_QWORD *)(v84 - 8) + 72);
                v24 = *(_QWORD *)(*(_QWORD *)(v83 - 8) + 72);
                do
                {
                  v25 = *v15++;
                  v118[0] = v91;
                  v118[1] = v16;
                  v118[2] = v94;
                  v118[3] = v14;
                  v118[4] = v25;
                  sub_1B1B1B9A0((uint64_t)v118, v20, v22, v93, v96);
                  ++v14;
                  v22 += v24;
                  v20 += v23;
                  --v17;
                }
                while (v17);
              }
            }
            else if ((_DWORD)v13 != (_DWORD)v81)
            {
              v26 = *(_QWORD *)(*(_QWORD *)(v84 - 8) + 72);
              v27 = *(_QWORD *)(*(_QWORD *)(v83 - 8) + 72);
              v28 = v21 + v27 * v13;
              v29 = v20 + v26 * v13;
              do
              {
                v119[0] = v91;
                v119[1] = v16;
                v119[2] = v94;
                v119[3] = v14;
                v119[4] = v13;
                sub_1B1B1B9A0((uint64_t)v119, v29, v28, v93, v96);
                ++v13;
                ++v14;
                v28 += v27;
                v29 += v26;
              }
              while (v81 != (void *)v13);
            }
            v112[0] = v109;
            v112[1] = v110;
            v113 = v111;
            sub_1B1F05D48(v94, (unsigned __int16 **)v112, (uint64_t)v117);
            sub_1B1F03804((char *)v16);
            v8 = v79;
            ecs_stack_allocator_pop_snapshot(v79);
            v9 = v77;
            if ((v77 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
            }
            swift_release();
            v11 = v88 + 1;
          }
          while (v88 + 1 != v80);
          sub_1B19ED748(v101);
          v2 = v93;
          v1 = v74;
          v5 = v72;
        }
      }
      v30 = *(void **)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_world);
      v31 = v30;
      if (v30)
      {
        v82 = v31;
        v114[0] = v73;
        swift_bridgeObjectRetain();
        v32 = sub_1B19F4D6C(v5);
        v33 = v114[0];
        v114[0] = MEMORY[0x1E0DEE9D8];
        v34 = *(_QWORD **)(v2 + 176);
        MEMORY[0x1E0C80A78](v32, v35);
        swift_retain();
        sub_1B1F22244((uint64_t)&type metadata for IncommingTickedEventsComponent, (uint64_t)&off_1E63B55F8, v34, (void (*)(uint64_t))sub_1B1B20B00);
        swift_release();
        v36 = *(_QWORD *)(v33 + 16);
        if (v36)
        {
          v37 = 0;
          v38 = v33 + 32;
          v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v85 = v38;
          v87 = v36;
          while (1)
          {
            v40 = v38 + 24 * v37;
            v41 = *(void **)v40;
            v42 = *(_DWORD *)(v40 + 8);
            v43 = *(double *)(v40 + 16);
            if (v43 > *(double *)(v1 + 48))
            {
              v44 = v41;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v39 = sub_1B1C65008(0, v39[2] + 1, 1, v39);
              v46 = v39[2];
              v45 = v39[3];
              if (v46 >= v45 >> 1)
                v39 = sub_1B1C65008(v45 > 1, v46 + 1, 1, v39);
              v39[2] = v46 + 1;
              v47 = &v39[3 * v46];
              v47[4] = v44;
              *((_DWORD *)v47 + 10) = v42;
              *((double *)v47 + 6) = v43;

              goto LABEL_29;
            }
            v48 = v96[0];
            v49 = *(_QWORD *)(v96[0] + 16);
            v95 = v39;
            v90 = v41;
            v92 = v37;
            if (!v49)
              goto LABEL_40;
            v50 = CFSTR("VFXTriggerTypeTicked");
            v51 = sub_1B1DC4238(v50);
            if ((v52 & 1) == 0)
              break;
            v53 = *(_QWORD **)(*(_QWORD *)(v48 + 56) + 8 * v51);
            swift_bridgeObjectRetain();

LABEL_41:
            v54 = 0;
            v55 = v53 + 8;
            v56 = 1 << *((_BYTE *)v53 + 32);
            if (v56 < 64)
              v57 = ~(-1 << v56);
            else
              v57 = -1;
            v58 = v57 & v53[8];
            v59 = (unint64_t)(v56 + 63) >> 6;
            while (1)
            {
              if (v58)
              {
                v60 = __clz(__rbit64(v58));
                v58 &= v58 - 1;
                v61 = v60 | (v54 << 6);
                goto LABEL_61;
              }
              v62 = v54 + 1;
              if (v54 + 1 >= v59)
                goto LABEL_28;
              v63 = v55[v62];
              if (!v63)
              {
                v62 = v54 + 2;
                if (v54 + 2 >= v59)
                  goto LABEL_28;
                v63 = v55[v62];
                if (!v63)
                {
                  v62 = v54 + 3;
                  if (v54 + 3 >= v59)
                    goto LABEL_28;
                  v63 = v55[v62];
                  if (!v63)
                  {
                    v62 = v54 + 4;
                    if (v54 + 4 >= v59)
                      goto LABEL_28;
                    v63 = v55[v62];
                    if (!v63)
                    {
                      v62 = v54 + 5;
                      if (v54 + 5 >= v59)
                        goto LABEL_28;
                      v63 = v55[v62];
                      if (!v63)
                        break;
                    }
                  }
                }
              }
LABEL_60:
              v58 = (v63 - 1) & v63;
              v61 = __clz(__rbit64(v63)) + (v62 << 6);
              v54 = v62;
LABEL_61:
              v64 = v53[7];
              v65 = v64 + 40 * v61;
              if ((*(_BYTE *)(v65 + 20) & 1) == 0 && *(_DWORD *)(v65 + 16) == v42)
              {
                v66 = v64 + 40 * v61;
                v67 = *(void (**)(_QWORD))(v66 + 24);
                v68 = *(id *)v66;
                swift_retain();
                v67(MEMORY[0x1E0DEE9E0]);
                swift_release();

              }
            }
            while (v59 - 6 != v54)
            {
              v63 = v53[v54++ + 14];
              if (v63)
              {
                v62 = v54 + 5;
                goto LABEL_60;
              }
            }
LABEL_28:

            swift_release();
            v1 = v74;
            v39 = v95;
            v38 = v85;
            v36 = v87;
            v37 = v92;
LABEL_29:
            if (++v37 == v36)
            {
              swift_bridgeObjectRelease();
              goto LABEL_67;
            }
          }

LABEL_40:
          v53 = sub_1B1B96E1C(MEMORY[0x1E0DEE9D8]);
          goto LABEL_41;
        }
        swift_bridgeObjectRelease();
        v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_67:
        swift_bridgeObjectRetain();
        v69 = swift_bridgeObjectRelease();
        v114[0] = v39;
        v70 = *(_QWORD **)(v93 + 176);
        MEMORY[0x1E0C80A78](v69, v71);
        swift_retain();
        sub_1B1F22244((uint64_t)&type metadata for TickedEventsComponent, (uint64_t)&off_1E63A71B8, v70, (void (*)(uint64_t))sub_1B1B20B18);
        swift_bridgeObjectRelease();
        swift_release();
        if (*(_QWORD *)(v98 + 16))
        {
          sub_1B1B20B60(v98 + 32, v114);
          swift_bridgeObjectRetain();
          sub_1B1B1F3E4((uint64_t)v114, (unint64_t *)&unk_1EEF5AB00, (uint64_t)&type metadata for TriggerOSEvent);
          result = sub_1B2229688();
          __break(1u);
          return result;
        }

        sub_1B1B1BE08(&v97, v93, (uint64_t)v99);
        sub_1B19ED720((uint64_t)v99);
        sub_1B19ED748(v101);
        sub_1B1B20AD4((uint64_t)&v97);
      }
      else
      {
        sub_1B1B1BE08(&v97, v2, (uint64_t)v99);
        sub_1B19ED720((uint64_t)v99);
        sub_1B19ED748(v101);
        sub_1B1B20AD4((uint64_t)&v97);
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B20AD4((uint64_t)&v97);
      sub_1B19ED720((uint64_t)v99);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1B20AD4(uint64_t a1)
{
  destroy for TriggerListComponent();
  return a1;
}

uint64_t sub_1B1B20B00(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B2031998(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_1B1B20B18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = **(_QWORD **)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

_QWORD *sub_1B1B20B60(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for TriggerOSEvent(a2, a1);
  return a2;
}

uint64_t sub_1B1B20B94()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B20BB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1B1BD80(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32);
}

_QWORD *sub_1B1B20BC4(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for TriggerListComponent(a2, a1);
  return a2;
}

_QWORD *sub_1B1B20BF8(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = *(_QWORD **)(v1 + 16);
  sub_1B1B20AD4((uint64_t)a1);
  return sub_1B1B20BC4(v3, a1);
}

void sub_1B1B20C38()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF5AB58)
  {
    sub_1B1A19D70(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF5AB58);
  }
}

void sub_1B1B20CB0(uint64_t a1, unint64_t *a2)
{
  unint64_t TupleTypeMetadata2;
  uint64_t v4;

  if (!*a2)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4)
      atomic_store(TupleTypeMetadata2, a2);
  }
}

uint64_t sub_1B1B20D0C()
{
  id *v0;

  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B20D48(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  return sub_1B1B1B734(*(_QWORD *)(v9 + 16), *(_QWORD *)(v9 + 24), *(_QWORD *)(v9 + 32), *(void **)(v9 + 40), *(_QWORD *)(v9 + 48), a7, a8, a9, a1, *(double *)(v9 + 56));
}

_QWORD *sub_1B1B20D5C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a1[1];
  *a2 = *a1;
  a2[1] = v4;
  swift_unknownObjectWeakTakeInit();
  a2[3] = a1[3];
  return a2;
}

uint64_t sub_1B1B20D9C()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1B1B20DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  return sub_1B1B1B5D4(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24), a3, a4, a5, a6, a7, a8);
}

uint64_t destroy for TriggerScriptRunnerSystem.TriggerParam(id *a1)
{

  return swift_release();
}

uint64_t initializeWithCopy for TriggerScriptRunnerSystem.TriggerParam(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = v3;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for TriggerScriptRunnerSystem.TriggerParam(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  uint64_t v8;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  v7 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TriggerScriptRunnerSystem.TriggerParam(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Query(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Query(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TriggerScriptRunnerSystem.TriggerParam()
{
  return &type metadata for TriggerScriptRunnerSystem.TriggerParam;
}

uint64_t destroy for TriggerOSEvent(id *a1)
{

  return swift_unknownObjectWeakDestroy();
}

_QWORD *initializeWithCopy for TriggerOSEvent(_QWORD *a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;

  v4 = *(void **)a2;
  v5 = *(void **)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v5;
  v6 = v4;
  v7 = v5;
  swift_unknownObjectWeakCopyInit();
  a1[3] = *(_QWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for TriggerOSEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  v7 = *(void **)(a1 + 8);
  v8 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  v9 = v8;

  swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  return a1;
}

_QWORD *initializeWithTake for TriggerOSEvent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_unknownObjectWeakTakeInit();
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for TriggerOSEvent(uint64_t a1, _QWORD *a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[1];

  swift_unknownObjectWeakTakeAssign();
  *(_QWORD *)(a1 + 24) = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphScriptGroup(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphScriptGroup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TriggerOSEvent()
{
  return &type metadata for TriggerOSEvent;
}

ValueMetadata *type metadata accessor for TickedEventsComponent()
{
  return &type metadata for TickedEventsComponent;
}

uint64_t destroy for TriggerListComponent()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for TriggerListComponent(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for TriggerListComponent(_QWORD *a1, _QWORD *a2)
{
  swift_unknownObjectWeakCopyAssign();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for TriggerListComponent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  v3 = swift_unknownObjectWeakTakeInit();
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8) = result;
  *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
  return result;
}

_QWORD *assignWithTake for TriggerListComponent(_QWORD *a1, _QWORD *a2)
{
  swift_unknownObjectWeakTakeAssign();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s17CodeSourceSnippetC9ParameterVwet(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t _s17CodeSourceSnippetC9ParameterVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TriggerListComponent()
{
  return &type metadata for TriggerListComponent;
}

uint64_t initializeBufferWithCopyOfBuffer for TickedEvent(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for TickedEvent(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for TickedEvent(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for QueryManager.QueryInfo(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QueryManager.QueryInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TickedEvent()
{
  return &type metadata for TickedEvent;
}

_QWORD *sub_1B1B21570(_QWORD *a1)
{
  return sub_1B1B20BF8(a1);
}

uint64_t sub_1B1B21598(uint64_t result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43[5];
  uint64_t v44[5];

  v2 = (_QWORD *)v1[17];
  if (v2)
  {
    v3 = result;
    v4 = MEMORY[0x1E0DEE9D8];
    if (v2[20])
      v5 = v2[20];
    else
      v5 = MEMORY[0x1E0DEE9D8];
    v1[8] = v5;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v1[9] = v4;
    swift_bridgeObjectRelease();
    v6 = v2[21];
    v42 = v1;
    if (v6)
    {
      v7 = *(_QWORD *)(v6 + 16);
      if (v7)
      {
        v37 = v3;
        v39 = v2;
        v8 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
        do
        {
          v10 = *(v8 - 1);
          v9 = *v8;
          swift_bridgeObjectRetain_n();
          sub_1B1E0E85C(v10, v9, v43);
          v11 = v43[0];
          v12 = v43[1];
          v13 = v43[2];
          v14 = v43[3];
          v15 = v43[4];
          v16 = (_QWORD *)v1[9];
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v1[9] = v16;
          v40 = v11;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v16 = sub_1B1C65128(0, v16[2] + 1, 1, v16);
            v1[9] = v16;
          }
          v19 = v16[2];
          v18 = v16[3];
          if (v19 >= v18 >> 1)
          {
            v16 = sub_1B1C65128(v18 > 1, v19 + 1, 1, v16);
            v42[9] = v16;
          }
          v8 += 2;
          v16[2] = v19 + 1;
          v20 = &v16[5 * v19];
          v20[4] = v40;
          v20[5] = v12;
          v20[6] = v13;
          v20[7] = v14;
          v20[8] = v15;
          swift_bridgeObjectRelease();
          --v7;
          v1 = v42;
        }
        while (v7);
        swift_bridgeObjectRelease();
        v3 = v37;
        v2 = v39;
        v4 = MEMORY[0x1E0DEE9D8];
      }
    }
    if (v2[25])
      v21 = v2[25];
    else
      v21 = v4;
    v1[13] = v21;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v1[14] = v4;
    swift_bridgeObjectRelease();
    v22 = v2[26];
    if (v22)
    {
      v23 = *(_QWORD *)(v22 + 16);
      if (v23)
      {
        v38 = v3;
        v24 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
        do
        {
          v26 = *(v24 - 1);
          v25 = *v24;
          swift_bridgeObjectRetain_n();
          sub_1B1E0E85C(v26, v25, v44);
          v27 = v44[0];
          v28 = v44[1];
          v29 = v44[2];
          v30 = v44[3];
          v31 = v44[4];
          v32 = (_QWORD *)v1[14];
          v33 = swift_isUniquelyReferenced_nonNull_native();
          v1[14] = v32;
          v41 = v29;
          if ((v33 & 1) == 0)
          {
            v32 = sub_1B1C65128(0, v32[2] + 1, 1, v32);
            v1[14] = v32;
          }
          v35 = v32[2];
          v34 = v32[3];
          if (v35 >= v34 >> 1)
          {
            v32 = sub_1B1C65128(v34 > 1, v35 + 1, 1, v32);
            v42[14] = v32;
          }
          v24 += 2;
          v32[2] = v35 + 1;
          v36 = &v32[5 * v35];
          v36[4] = v27;
          v36[5] = v28;
          v36[6] = v41;
          v36[7] = v30;
          v36[8] = v31;
          swift_bridgeObjectRelease();
          --v23;
          v1 = v42;
        }
        while (v23);
        swift_bridgeObjectRelease();
        v3 = v38;
      }
    }
    sub_1B1FB5B18(v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1B21898()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  char v12;

  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v1 + 296);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 288);
    v4 = *(_QWORD **)(v0 + 64);
    if (v4[2])
      return sub_1B1DB99B0(v3, v2, v4);
    else
      return sub_1B1DB99B0(v3, v2, *(_QWORD **)(v0 + 40));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 72);
    if (*(_QWORD *)(v6 + 16) && (v7 = *(_QWORD **)(v0 + 112), v7[2] == 1))
    {
      v8 = v7[4];
      v9 = v7[5];
      sub_1B19FA2B4(v8, v9);
      swift_bridgeObjectRetain();
      sub_1B1A20350(v8, v9);
      v10 = sub_1B1B254AC(v6);
      v12 = v11;
      sub_1B1A20360(v8, v9);
      swift_bridgeObjectRelease();
      sub_1B1A20360(v8, v9);
      if ((v12 & 1) != 0)
        return -1;
      else
        return v10;
    }
    else
    {
      return -1;
    }
  }
}

_QWORD *sub_1B1B219CC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  int64_t v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  _QWORD v84[3];
  _QWORD *v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  int64_t v94;
  __int128 v95;
  uint64_t v96;
  _OWORD v97[2];
  _QWORD v98[5];
  __int128 v99;
  _QWORD *v100;
  uint64_t v101;
  int64_t v102;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v11, v12);
  v87 = (char *)v84 - v13;
  v89 = sub_1B2228110();
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x1E0C80A78](v89, v14);
  v86 = (char *)v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v5 + 136) = a1;
  swift_retain();
  v16 = sub_1B1FB9EE8(a2, a3, a4);
  v17 = a1[2];
  v18 = a1[3];
  v19 = MEMORY[0x1E0DEA968];
  v101 = MEMORY[0x1E0DEA968];
  *(_QWORD *)&v99 = v17;
  *((_QWORD *)&v99 + 1) = v18;
  swift_retain_n();
  swift_bridgeObjectRetain();
  sub_1B1E02AF4(1701667182, 0xE400000000000000, (uint64_t)&v99);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v99);
  swift_release();
  if (a1[23])
    v20 = a1[23];
  else
    v20 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v20 + 16))
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v101 = v21;
    *(_QWORD *)&v99 = v20;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1E02AF4(0xD00000000000001CLL, 0x80000001B2329400, (uint64_t)&v99);
    v22 = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v99);
  }
  else
  {
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v22 = sub_1B1E029F8(0xD00000000000001CLL, 0x80000001B2329400);
  }
  (*(void (**)(uint64_t))(*v16 + 1408))(v22);
  swift_release();
  v23 = a1[24];
  if (v23 && *(_QWORD *)(v23 + 16))
  {
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v101 = v24;
    *(_QWORD *)&v99 = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1E02AF4(0xD000000000000015, 0x80000001B2329420, (uint64_t)&v99);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v99);
    swift_release();
  }
  sub_1B1B21598(a5);
  v25 = v16[17];
  if (v25)
  {
    v26 = *(_QWORD *)(v25 + 328);
    if (v26)
    {
      if (*(_QWORD *)(v26 + 16))
      {
        swift_retain();
        swift_retain();
        v27 = swift_bridgeObjectRetain();
        v28 = sub_1B1B25110(v27, (uint64_t)v16);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        v16[15] = v28;
        swift_bridgeObjectRelease();
        v29 = a1[5];
        if (!v29)
          goto LABEL_22;
LABEL_16:
        v30 = a1[4];
        v31 = v16[2];
        if (v31 && *(_QWORD *)(v31 + 16))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          sub_1B1DC3B00(0x6C6562616CLL, 0xE500000000000000);
          v33 = v32;
          swift_release();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            goto LABEL_22;
          }
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v101 = v19;
        *(_QWORD *)&v99 = v30;
        *((_QWORD *)&v99 + 1) = v29;
        swift_retain();
        sub_1B1E02AF4(0x6C6562616CLL, 0xE500000000000000, (uint64_t)&v99);
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v99);
        goto LABEL_22;
      }
    }
  }
  v29 = a1[5];
  if (v29)
    goto LABEL_16;
LABEL_22:
  v34 = v16[17];
  v35 = *(unsigned __int8 *)(v34 + 80);
  if (v35 != 2)
  {
    if ((v35 & 1) != 0)
      goto LABEL_47;
    goto LABEL_76;
  }
  v84[1] = 0;
  v92 = v16;
  v91 = a1;
  v90 = a5;
  v85 = v84;
  v36 = *(_QWORD *)(v34 + 216);
  v37 = v36 + 64;
  v38 = 1 << *(_BYTE *)(v36 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & *(_QWORD *)(v36 + 64);
  v41 = (unint64_t)(v38 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  v84[2] = v34;
  swift_retain();
  v42 = 0;
  v43 = 0;
  v94 = v41 - 6;
  v93 = v36 + 112;
  while (v40)
  {
    v44 = __clz(__rbit64(v40));
    v40 &= v40 - 1;
    v45 = v44 | (v43 << 6);
LABEL_27:
    v46 = (uint64_t *)(*(_QWORD *)(v36 + 56) + 16 * v45);
    v48 = *v46;
    v47 = v46[1];
    *(_QWORD *)&v99 = v48;
    *((_QWORD *)&v99 + 1) = v47;
    v98[0] = 0x65756C617640;
    v98[1] = 0xE600000000000000;
    sub_1B1A06460();
    if ((sub_1B2229274() & 1) != 0)
      v42 = 1;
  }
  v49 = v43 + 1;
  if (v43 + 1 >= v41)
    goto LABEL_46;
  v50 = *(_QWORD *)(v37 + 8 * v49);
  if (v50)
    goto LABEL_43;
  v49 = v43 + 2;
  if (v43 + 2 >= v41)
    goto LABEL_46;
  v50 = *(_QWORD *)(v37 + 8 * v49);
  if (v50)
    goto LABEL_43;
  v49 = v43 + 3;
  if (v43 + 3 >= v41)
    goto LABEL_46;
  v50 = *(_QWORD *)(v37 + 8 * v49);
  if (v50)
    goto LABEL_43;
  v49 = v43 + 4;
  if (v43 + 4 >= v41)
    goto LABEL_46;
  v50 = *(_QWORD *)(v37 + 8 * v49);
  if (v50)
    goto LABEL_43;
  v49 = v43 + 5;
  if (v43 + 5 >= v41)
    goto LABEL_46;
  v50 = *(_QWORD *)(v37 + 8 * v49);
  if (v50)
  {
LABEL_43:
    v40 = (v50 - 1) & v50;
    v45 = __clz(__rbit64(v50)) + (v49 << 6);
    v43 = v49;
    goto LABEL_27;
  }
  while (v94 != v43)
  {
    v50 = *(_QWORD *)(v93 + 8 * v43++);
    if (v50)
    {
      v49 = v43 + 5;
      goto LABEL_43;
    }
  }
LABEL_46:
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  a5 = v90;
  a1 = v91;
  v16 = v92;
  if ((v42 & 1) != 0)
  {
LABEL_47:
    if (*(_QWORD *)(v16[11] + 16) == 1)
    {
      swift_retain();
      sub_1B1E02C04(0x65756C6176, 0xE500000000000000, &v99);
      swift_release();
      if (v101)
      {
        v91 = a1;
        v90 = a5;
        sub_1B1A0DDAC(&v99, v97);
        v92 = v16;
        v51 = (_QWORD *)v16[17];
        v52 = v51[31];
        v53 = v51[32];
        v54 = v52;
        v55 = v53;
        v56 = (_QWORD *)v51[33];
        v57 = v51[34];
        v58 = v51[35];
        if (v53 == 59)
        {
          v59 = (_QWORD *)v92[11];
          v54 = v59[4];
          v55 = v59[5];
          v60 = (_QWORD *)v59[6];
          v57 = v59[7];
          v61 = v59[8];
          sub_1B19FA2B4(v54, v55);
          v56 = v60;
          v58 = v61;
        }
        *(_QWORD *)&v99 = v54;
        *((_QWORD *)&v99 + 1) = v55;
        v85 = v56;
        v100 = v56;
        v101 = v57;
        v93 = v57;
        v94 = v58;
        v102 = v58;
        sub_1B1A20350(v52, v53);
        sub_1B1E0E5B0(v97, v98);
        if (sub_1B1E03DBC() == 5001813 && v62 == 0xE300000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_56;
        }
        v63 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v63 & 1) != 0)
        {
LABEL_56:
          sub_1B19F9FEC(v54, v55);
          sub_1B19F8C58(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          sub_1B1A02864((uint64_t)v97, (uint64_t)&v95);
          v64 = (uint64_t)v87;
          v65 = v89;
          v66 = swift_dynamicCast();
          v67 = v88;
          v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v88 + 56);
          v16 = v92;
          if (v66)
          {
            v68(v64, 0, 1, v65);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v64, 1, v65) != 1)
            {
              v69 = v86;
              (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v86, v64, v65);
              swift_retain();
              v70 = sub_1B222802C();
              v96 = MEMORY[0x1E0DEA968];
              *(_QWORD *)&v95 = v70;
              *((_QWORD *)&v95 + 1) = v71;
              swift_bridgeObjectRetain();
              sub_1B1E02AF4(0x65756C6176, 0xE500000000000000, (uint64_t)&v95);
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v95);
              swift_bridgeObjectRelease();
              swift_release();
              (*(void (**)(char *, uint64_t))(v67 + 8))(v69, v65);
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
              goto LABEL_76;
            }
          }
          else
          {
            v68(v64, 1, 1, v65);
          }
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
          sub_1B1B25B94(v64, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
          goto LABEL_76;
        }
        v72 = sub_1B1E03DBC();
        v16 = v92;
        if (v72 == 0x6156686374697753 && v73 == 0xEB0000000065756CLL)
        {
          swift_bridgeObjectRelease();
LABEL_65:
          sub_1B19F9FEC(v54, v55);
          if (sub_1B1E03DBC() == 7630409 && v75 == 0xE300000000000000)
          {
            swift_bridgeObjectRelease();
            sub_1B19F8C58(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
LABEL_75:
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v97);
            goto LABEL_76;
          }
          v76 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          sub_1B19F8C58(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          if ((v76 & 1) != 0)
            goto LABEL_75;
        }
        else
        {
          v74 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v74 & 1) != 0)
            goto LABEL_65;
          v77 = sub_1B1E03DBC();
          v79 = v78;
          if (v77 == sub_1B1E03DBC() && v79 == v80)
          {
            swift_bridgeObjectRelease_n();
            sub_1B19F8C58(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
            sub_1B19F9FEC(v54, v55);
            goto LABEL_75;
          }
          v81 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B19F8C58(v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
          sub_1B19F9FEC(v54, v55);
          if ((v81 & 1) != 0)
            goto LABEL_75;
        }
        v95 = xmmword_1EEF5ECE0;
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        v82 = v95;
        v96 = MEMORY[0x1E0DEB418];
        *(_QWORD *)&v95 = 1;
        sub_1B1E02AF4(v82, *((uint64_t *)&v95 + 1), (uint64_t)&v95);
        swift_bridgeObjectRelease();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v95);
        swift_release();
        goto LABEL_75;
      }
      sub_1B1B1F3E4((uint64_t)&v99, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
    }
  }
LABEL_76:
  sub_1B1B22588();
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

uint64_t sub_1B1B22588()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  char v31;
  char *v32;
  ValueMetadata *DynamicType;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v64;
  char v65;
  unint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t result;
  uint64_t v78;
  int v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  _OWORD *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  _QWORD v105[5];
  _QWORD v106[5];
  _QWORD v107[6];

  v1 = v0;
  sub_1B1792854(0, (unint64_t *)&qword_1EEF5DA60, (void (*)(uint64_t))MEMORY[0x1E0DEDFC8]);
  MEMORY[0x1E0C80A78](v2, v3);
  v82 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v78 - v7;
  v9 = sub_1B222A108();
  v85 = *(_QWORD *)(v9 - 8);
  v86 = v9;
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v0[17];
  if (*(_QWORD *)(v13 + 160))
    v14 = *(_QWORD *)(v13 + 160);
  else
    v14 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v13 + 168))
    v15 = *(_QWORD *)(v13 + 168);
  else
    v15 = MEMORY[0x1E0DEE9D8];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16 = sub_1B1ED6BEC(v14, v15);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(v16 + 16);
  swift_bridgeObjectRelease();
  if (!v17)
    return sub_1B1FB69EC();
  v18 = *(_QWORD *)(v1[17] + 176);
  if (!v18 || (v19 = *(_QWORD *)(v18 + 16)) == 0)
  {
LABEL_47:
    v54 = v1[7];
    if (v54 >> 62)
    {
      swift_bridgeObjectRetain_n();
      v55 = sub_1B22296AC();
      if (v55)
        goto LABEL_49;
    }
    else
    {
      v55 = *(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n();
      if (v55)
      {
LABEL_49:
        v56 = 0;
        v89 = (char *)v54;
        v90 = v54 & 0xC000000000000001;
        v88 = v55;
        do
        {
          if (v90)
          {
            v57 = MEMORY[0x1B5E21018](v56, v54);
          }
          else
          {
            v57 = *(_QWORD *)(v54 + 8 * v56 + 32);
            swift_retain();
          }
          v58 = *(_QWORD *)(v57 + 32);
          *(_QWORD *)&v99 = *(_QWORD *)(v57 + 24);
          *((_QWORD *)&v99 + 1) = v58;
          swift_bridgeObjectRetain_n();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v59 = v99;
          v60 = v1[2];
          if (v60
            && *(_QWORD *)(v60 + 16)
            && (swift_bridgeObjectRetain(),
                sub_1B1DC3B00(v59, *((uint64_t *)&v59 + 1)),
                v62 = v61,
                swift_bridgeObjectRelease(),
                (v62 & 1) != 0))
          {
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_1B19FA278(v57 + 56, (uint64_t)v107);
            sub_1B19F8C58(v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
            sub_1B1E02E1C(v107, 1, (uint64_t)&v93);
            sub_1B19F8C58(v107, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
            if (*((_QWORD *)&v93 + 1))
            {
              v101 = v95;
              v102 = v96;
              v103 = v97;
              v104 = v98;
              v99 = v93;
              v100 = v94;
              if (!v1[2])
              {
                v1[2] = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
                swift_bridgeObjectRelease();
              }
              sub_1B19F8F0C((uint64_t)&v99, (uint64_t)&v93);
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v91 = v1[2];
              v64 = v91;
              v1[2] = 0x8000000000000000;
              v66 = sub_1B1DC3B00(v59, *((uint64_t *)&v59 + 1));
              v67 = v65;
              v68 = *(_QWORD *)(v64 + 16) + ((v65 & 1) == 0);
              if (*(_QWORD *)(v64 + 24) >= v68)
              {
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  v71 = (_QWORD *)v91;
                  if ((v65 & 1) == 0)
                    goto LABEL_70;
                }
                else
                {
                  sub_1B1EA805C();
                  v71 = (_QWORD *)v91;
                  if ((v67 & 1) == 0)
                    goto LABEL_70;
                }
              }
              else
              {
                sub_1B1E90CBC(v68, isUniquelyReferenced_nonNull_native);
                v69 = sub_1B1DC3B00(v59, *((uint64_t *)&v59 + 1));
                if ((v67 & 1) != (v70 & 1))
                  goto LABEL_75;
                v66 = v69;
                v71 = (_QWORD *)v91;
                if ((v67 & 1) == 0)
                {
LABEL_70:
                  v71[(v66 >> 6) + 8] |= 1 << v66;
                  *(_OWORD *)(v71[6] + 16 * v66) = v59;
                  v72 = v71[7] + 88 * v66;
                  v73 = v94;
                  *(_OWORD *)v72 = v93;
                  *(_OWORD *)(v72 + 16) = v73;
                  v74 = v95;
                  v75 = v96;
                  v76 = v97;
                  *(_QWORD *)(v72 + 80) = v98;
                  *(_OWORD *)(v72 + 48) = v75;
                  *(_OWORD *)(v72 + 64) = v76;
                  *(_OWORD *)(v72 + 32) = v74;
                  ++v71[2];
                  swift_bridgeObjectRetain();
                  goto LABEL_71;
                }
              }
              sub_1B1B25BD8((uint64_t)&v93, v71[7] + 88 * v66);
LABEL_71:
              v1[2] = v71;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1B1A203C4((uint64_t)&v99);
              swift_release();
              v55 = v88;
              v54 = (unint64_t)v89;
              goto LABEL_51;
            }
            swift_bridgeObjectRelease();
            sub_1B1B1F3E4((uint64_t)&v93, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
            swift_release();
          }
LABEL_51:
          ++v56;
        }
        while (v55 != v56);
      }
    }
    swift_bridgeObjectRelease_n();
    return sub_1B1FB69EC();
  }
  v87 = v12;
  v20 = (__int128 *)((char *)&v102 + 8);
  v81 = *MEMORY[0x1E0DEDFB8];
  v80 = *MEMORY[0x1E0DEDFB0];
  v79 = *MEMORY[0x1E0DEDFA8];
  v78 = swift_bridgeObjectRetain();
  v21 = v78 + 88;
  v83 = MEMORY[0x1E0DEE9B8] + 8;
  v84 = (__int128 *)((char *)&v102 + 8);
  v89 = v8;
  while (1)
  {
    v27 = *(_QWORD *)(v21 - 48);
    *(_QWORD *)&v99 = *(_QWORD *)(v21 - 56);
    *((_QWORD *)&v99 + 1) = v27;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    v28 = v99;
    v29 = v1[2];
    if (v29)
    {
      if (*(_QWORD *)(v29 + 16))
      {
        swift_bridgeObjectRetain();
        sub_1B1DC3B00(v28, *((uint64_t *)&v28 + 1));
        v31 = v30;
        swift_bridgeObjectRelease();
        if ((v31 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          goto LABEL_13;
        }
      }
    }
    v88 = v19;
    sub_1B1A0DCD4(v21, (uint64_t)v107);
    if (!v1[2])
    {
      v1[2] = sub_1B1B7DB30(MEMORY[0x1E0DEE9D8]);
      swift_bridgeObjectRelease();
    }
    sub_1B1A02864((uint64_t)v107, (uint64_t)&v91);
    *v20 = 0u;
    v20[1] = 0u;
    v90 = v28;
    v99 = v28;
    sub_1B1A02864((uint64_t)&v91, (uint64_t)&v93);
    swift_bridgeObjectRetain_n();
    v32 = v87;
    sub_1B222A0D8();
    sub_1B19FA070(&v91, v92);
    DynamicType = (ValueMetadata *)swift_getDynamicType();
    sub_1B222A0F0();
    v34 = sub_1B222A0E4();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v8, 1, v34) == 1)
      goto LABEL_21;
    v41 = v82;
    sub_1B1B25C14((uint64_t)v8, v82);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 88))(v41, v34);
    if (v42 == v81)
    {
      if (DynamicType == &type metadata for Entity)
      {
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        v36 = 42;
      }
      else
      {
        sub_1B1E0D3EC((uint64_t)DynamicType, (uint64_t)v105);
        v37 = v105[0];
        v36 = v105[1];
        v38 = v105[2];
        v39 = v105[3];
        v40 = v105[4];
      }
      (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v86);
    }
    else if (v42 == v80)
    {
      (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v86);
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v36 = 42;
    }
    else
    {
      if (v42 != v79)
      {
        (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v82, v34);
        v32 = v87;
LABEL_21:
        sub_1B1E0D3EC((uint64_t)DynamicType, (uint64_t)v106);
        v37 = v106[0];
        v36 = v106[1];
        v38 = v106[2];
        v39 = v106[3];
        v40 = v106[4];
        (*(void (**)(char *, uint64_t))(v85 + 8))(v32, v86);
        goto LABEL_36;
      }
      (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v86);
      sub_1B19FA070(&v91, v92);
      v43 = swift_getDynamicType();
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = 0;
      v44 = swift_conformsToProtocol2() ? v43 : 0;
      v36 = v44 ? 41 : 42;
    }
LABEL_36:
    sub_1B1B25B94((uint64_t)v89, (unint64_t *)&qword_1EEF5DA60, (void (*)(uint64_t))MEMORY[0x1E0DEDFC8]);
    *(_QWORD *)&v100 = v37;
    *((_QWORD *)&v100 + 1) = v36;
    *(_QWORD *)&v101 = v38;
    *((_QWORD *)&v101 + 1) = v39;
    *(_QWORD *)&v102 = v40;
    v20 = v84;
    sub_1B1B1F3E4((uint64_t)v84, (unint64_t *)&qword_1ED4BB150, v83);
    sub_1B1A0DDAC(&v91, v20);
    v95 = v101;
    v96 = v102;
    v97 = v103;
    v98 = v104;
    v93 = v99;
    v94 = v100;
    v45 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v99 = v1[2];
    v46 = v99;
    v1[2] = 0x8000000000000000;
    v48 = sub_1B1DC3B00(v28, *((uint64_t *)&v28 + 1));
    v49 = v47;
    v50 = *(_QWORD *)(v46 + 16) + ((v47 & 1) == 0);
    if (*(_QWORD *)(v46 + 24) < v50)
      break;
    if ((v45 & 1) != 0)
    {
      v53 = (_QWORD *)v99;
      if ((v47 & 1) != 0)
        goto LABEL_42;
    }
    else
    {
      sub_1B1EA805C();
      v53 = (_QWORD *)v99;
      if ((v49 & 1) != 0)
      {
LABEL_42:
        sub_1B1B25BD8((uint64_t)&v93, v53[7] + 88 * v48);
        goto LABEL_12;
      }
    }
LABEL_11:
    v53[(v48 >> 6) + 8] |= 1 << v48;
    *(_OWORD *)(v53[6] + 16 * v48) = v28;
    v22 = v53[7] + 88 * v48;
    v23 = v94;
    *(_OWORD *)v22 = v93;
    *(_OWORD *)(v22 + 16) = v23;
    v24 = v95;
    v25 = v96;
    v26 = v97;
    *(_QWORD *)(v22 + 80) = v98;
    *(_OWORD *)(v22 + 48) = v25;
    *(_OWORD *)(v22 + 64) = v26;
    *(_OWORD *)(v22 + 32) = v24;
    ++v53[2];
    swift_bridgeObjectRetain();
LABEL_12:
    v1[2] = v53;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v107);
    v19 = v88;
    v8 = v89;
LABEL_13:
    v21 += 88;
    if (!--v19)
    {
      swift_bridgeObjectRelease();
      goto LABEL_47;
    }
  }
  sub_1B1E90CBC(v50, v45);
  v51 = sub_1B1DC3B00(v28, *((uint64_t *)&v28 + 1));
  if ((v49 & 1) == (v52 & 1))
  {
    v48 = v51;
    v53 = (_QWORD *)v99;
    if ((v49 & 1) != 0)
      goto LABEL_42;
    goto LABEL_11;
  }
LABEL_75:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1B22F2C()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;

  v0[7] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v1 = (_QWORD *)v0[5];
  v2 = v0[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DF6860(v1, v2, (void (*)(uint64_t, uint64_t, _QWORD *))sub_1B1B25BD0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return sub_1B1B22588();
}

uint64_t sub_1B1B22FA8(uint64_t a1)
{
  uint64_t v2;
  char v4[40];

  *(_QWORD *)(swift_allocObject() + 136) = 0;
  sub_1B19FA198(a1, (uint64_t)v4);
  v2 = sub_1B1FB9F2C(v4);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  return v2;
}

unint64_t sub_1B1B23020()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_retain();
  sub_1B1ED7610();
  sub_1B2228890();
  swift_release();
  swift_bridgeObjectRelease();
  return 0xD000000000000011;
}

uint64_t sub_1B1B23100(uint64_t *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  _QWORD *v74;
  char v75;
  unint64_t v76;
  unint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __int128 v106;
  _QWORD *v107;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  _QWORD *v134;
  char v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  __int128 v139;
  _QWORD *v140;
  char v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t *v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  BOOL v154;
  char v155;
  unint64_t v156;
  unint64_t v157;
  BOOL v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v170;
  int v171;
  char v172;
  char v173;
  __int128 v174;
  __int128 v175;
  uint64_t v176;
  unint64_t v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  _OWORD v184[2];

  v2 = v1;
  LODWORD(v3) = *(unsigned __int8 *)(*a1 + 24);
  if ((sub_1B1FB4544() & 1) == 0)
  {
    swift_retain();
    v17 = sub_1B1ED6A88(v3);
    v19 = v18;
    swift_release();
    if (!v19)
    {
      v41 = v1[4];
      v170 = v1[3];
      *((_QWORD *)&v179 + 1) = MEMORY[0x1E0DEA968];
      *(_QWORD *)&v178 = 0;
      *((_QWORD *)&v178 + 1) = 0xE000000000000000;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B1E02D58(1701667182, 0xE400000000000000, (uint64_t)&v178, v184);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v178);
      sub_1B1A0DDAC(v184, &v178);
      swift_dynamicCast();
      v164 = v174;
      v168 = sub_1B1FB4768();
      v43 = v42;
      *(_QWORD *)&v178 = 0;
      *((_QWORD *)&v178 + 1) = 0xE000000000000000;
      sub_1B2229430();
      v184[0] = v178;
      swift_bridgeObjectRetain();
      sub_1B1B5A1CC();
      swift_bridgeObjectRelease();
      v87 = sub_1B222916C();
      v89 = v88;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v90 = sub_1B1DCD8E8();
      v92 = v91;
      v94 = v93;
      v96 = v95;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v174 = v87;
      *((_QWORD *)&v174 + 1) = v89;
      *(_QWORD *)&v178 = v90;
      *((_QWORD *)&v178 + 1) = v92;
      *(_QWORD *)&v179 = v94;
      *((_QWORD *)&v179 + 1) = v96;
      sub_1B1B25B50();
      swift_bridgeObjectRetain();
      sub_1B2228878();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      *(_QWORD *)&v178 = v170;
      *((_QWORD *)&v178 + 1) = v41;
      v179 = v164;
      *(_QWORD *)&v180 = v168;
      *((_QWORD *)&v180 + 1) = v43;
      v181 = v184[0];
      sub_1B1E8E08C(&v178);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_release();
    }
    v20 = v1[17];
    v21 = *(_QWORD *)(v20 + 160);
    v171 = v3;
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + 16);
      if (v22)
      {
        v23 = swift_bridgeObjectRetain() + 40;
        do
        {
          *(_QWORD *)&v178 = v17;
          *((_QWORD *)&v178 + 1) = v19;
          *(_QWORD *)&v184[0] = 36;
          *((_QWORD *)&v184[0] + 1) = 0xE100000000000000;
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v24 = sub_1B1FC0A9C();
          v26 = v25;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v174 = v24;
          *((_QWORD *)&v174 + 1) = v26;
          sub_1B1A06460();
          v17 = sub_1B222922C();
          v28 = v27;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v19 = v28;
          v23 += 16;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease();
        v20 = v2[17];
      }
    }
    v29 = *(_QWORD *)(v20 + 200);
    if (v29)
    {
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v31 = swift_bridgeObjectRetain() + 40;
        do
        {
          *(_QWORD *)&v178 = v17;
          *((_QWORD *)&v178 + 1) = v19;
          *(_QWORD *)&v184[0] = 36;
          *((_QWORD *)&v184[0] + 1) = 0xE100000000000000;
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRetain();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 = sub_1B1FC0A9C();
          v34 = v33;
          swift_bridgeObjectRelease();
          *(_QWORD *)&v174 = v32;
          *((_QWORD *)&v174 + 1) = v34;
          sub_1B1A06460();
          v17 = sub_1B222922C();
          v36 = v35;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v19 = v36;
          v31 += 16;
          --v30;
        }
        while (v30);
        swift_bridgeObjectRelease();
      }
    }
    *(_QWORD *)&v178 = v17;
    *((_QWORD *)&v178 + 1) = v19;
    strcpy((char *)v184, "@valueAsString");
    HIBYTE(v184[0]) = -18;
    sub_1B1A06460();
    if ((sub_1B2229274() & 1) == 0)
    {
LABEL_46:
      v78 = v171;
      *(_QWORD *)&v178 = v17;
      *((_QWORD *)&v178 + 1) = v19;
      *(_QWORD *)&v184[0] = 0x65756C617640;
      *((_QWORD *)&v184[0] + 1) = 0xE600000000000000;
      if ((sub_1B2229274() & 1) != 0)
      {
        v79 = v2[2];
        swift_bridgeObjectRetain();
        v80 = sub_1B1DC3B00(0x65756C6176, 0xE500000000000000);
        if ((v81 & 1) != 0)
        {
          sub_1B19F8F0C(*(_QWORD *)(v79 + 56) + 88 * v80, (uint64_t)&v178);
        }
        else
        {
          v183 = 0;
          v181 = 0u;
          v182 = 0u;
          v179 = 0u;
          v180 = 0u;
          v178 = 0u;
        }
        swift_bridgeObjectRelease();
        v82 = *a1;
        if (*(_QWORD *)(v2[10] + 16))
        {
          v83 = v2[12];
          swift_retain();
          if ((v83 & 0xC000000000000001) != 0)
          {
            swift_bridgeObjectRetain();
            MEMORY[0x1B5E21018](0, v83);
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_retain();
          }
          swift_bridgeObjectRetain();
          v84 = sub_1B1FC0A9C();
          v86 = v85;
          swift_release();
          swift_bridgeObjectRelease();
          v78 = v171;
        }
        else
        {
          swift_retain();
          v84 = 0;
          v86 = 0;
        }
        if (v78)
        {
          if (v78 == 1)
            v98 = sub_1B1C46B4C((uint64_t)&v178, v82);
          else
            v98 = sub_1B1C3B344(&v178, v82, v84, v86, 2);
        }
        else
        {
          v98 = sub_1B1C3F84C(&v178, v82, v84, v86, 0);
        }
        v166 = v98;
        v102 = v99;
        v103 = v100;
        v104 = v101;
        swift_release();
        swift_bridgeObjectRelease();
        sub_1B1A203C4((uint64_t)&v178);
        if (v104)
        {
          v105 = *a1;
          *(_QWORD *)&v178 = 8201;
          *((_QWORD *)&v178 + 1) = 0xE200000000000000;
          *(_QWORD *)&v184[0] = v103;
          *((_QWORD *)&v184[0] + 1) = v104;
          *(_QWORD *)&v174 = 10;
          *((_QWORD *)&v174 + 1) = 0xE100000000000000;
          v176 = 2314;
          v177 = 0xE200000000000000;
          swift_retain();
          sub_1B222922C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v106 = v178;
          v107 = *(_QWORD **)(v105 + 128);
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v105 + 128) = v107;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v107 = sub_1B1C63044(0, v107[2] + 1, 1, v107);
            *(_QWORD *)(v105 + 128) = v107;
          }
          v110 = v107[2];
          v109 = v107[3];
          if (v110 >= v109 >> 1)
          {
            v107 = sub_1B1C63044(v109 > 1, v110 + 1, 1, v107);
            *(_QWORD *)(v105 + 128) = v107;
          }
          v107[2] = v110 + 1;
          *(_OWORD *)&v107[2 * v110 + 4] = v106;
          swift_release();
          swift_bridgeObjectRelease();
        }
        *(_QWORD *)&v178 = v17;
        *((_QWORD *)&v178 + 1) = v19;
        *(_QWORD *)&v184[0] = 0x65756C617640;
        *((_QWORD *)&v184[0] + 1) = 0xE600000000000000;
        *(_QWORD *)&v174 = v166;
        *((_QWORD *)&v174 + 1) = v102;
        v17 = sub_1B222922C();
        v112 = v111;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = v112;
      }
      *(_QWORD *)&v178 = v17;
      *((_QWORD *)&v178 + 1) = v19;
      *(_QWORD *)&v184[0] = 0x23504D455423;
      *((_QWORD *)&v184[0] + 1) = 0xE600000000000000;
      if ((sub_1B2229274() & 1) != 0)
      {
        *(_QWORD *)&v178 = v17;
        *((_QWORD *)&v178 + 1) = v19;
        *(_QWORD *)&v184[0] = 0x23504D455423;
        *((_QWORD *)&v184[0] + 1) = 0xE600000000000000;
        v113 = v2[4];
        *(_QWORD *)&v174 = v2[3];
        *((_QWORD *)&v174 + 1) = v113;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v114 = sub_1B1FC0A9C();
        v116 = v115;
        swift_bridgeObjectRelease();
        *(_QWORD *)&v174 = v114;
        *((_QWORD *)&v174 + 1) = v116;
        v17 = sub_1B222922C();
        v118 = v117;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v19 = v118;
      }
      *(_QWORD *)&v178 = v17;
      *((_QWORD *)&v178 + 1) = v19;
      *(_QWORD *)&v184[0] = 10;
      *((_QWORD *)&v184[0] + 1) = 0xE100000000000000;
      *(_QWORD *)&v174 = 2099466;
      *((_QWORD *)&v174 + 1) = 0xE300000000000000;
      v119 = sub_1B222922C();
      v121 = v120;
      swift_bridgeObjectRelease();
      if (*(_BYTE *)(v2[17] + 240) == 1)
      {
        *(_QWORD *)&v178 = v119;
        *((_QWORD *)&v178 + 1) = v121;
        *(_QWORD *)&v184[0] = 0xD000000000000011;
        *((_QWORD *)&v184[0] + 1) = 0x80000001B232EBF0;
        *(_QWORD *)&v174 = sub_1B1FB4FB0();
        *((_QWORD *)&v174 + 1) = v122;
        v119 = sub_1B222922C();
        v124 = v123;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v121 = v124;
      }
      *(_QWORD *)&v178 = v119;
      *((_QWORD *)&v178 + 1) = v121;
      *(_QWORD *)&v184[0] = 0x2344495523;
      *((_QWORD *)&v184[0] + 1) = 0xE500000000000000;
      v125 = v2[4];
      *(_QWORD *)&v174 = v2[3];
      *((_QWORD *)&v174 + 1) = v125;
      v126 = sub_1B222922C();
      v128 = v127;
      swift_bridgeObjectRelease();
      *(_QWORD *)&v178 = v126;
      *((_QWORD *)&v178 + 1) = v128;
      *(_QWORD *)&v184[0] = 8251;
      *((_QWORD *)&v184[0] + 1) = 0xE200000000000000;
      v129 = sub_1B2229214();
      if (*(_QWORD *)(v129 + 16) < 2uLL)
      {
        swift_bridgeObjectRelease();
        v138 = *a1;
        *(_QWORD *)&v178 = 8201;
        *((_QWORD *)&v178 + 1) = 0xE200000000000000;
        swift_retain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v139 = v178;
        v140 = *(_QWORD **)(v138 + 128);
        swift_bridgeObjectRetain();
        v141 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v138 + 128) = v140;
        if ((v141 & 1) == 0)
        {
          v140 = sub_1B1C63044(0, v140[2] + 1, 1, v140);
          *(_QWORD *)(v138 + 128) = v140;
        }
        v143 = v140[2];
        v142 = v140[3];
        if (v143 >= v142 >> 1)
        {
          v140 = sub_1B1C63044(v142 > 1, v143 + 1, 1, v140);
          *(_QWORD *)(v138 + 128) = v140;
        }
        v140[2] = v143 + 1;
        *(_OWORD *)&v140[2 * v143 + 4] = v139;
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        v130 = *(_QWORD *)(v129 + 16);
        if (v130)
        {
          v131 = *a1;
          swift_bridgeObjectRetain();
          v132 = v129 + 40;
          do
          {
            *(_QWORD *)&v178 = 8201;
            *((_QWORD *)&v178 + 1) = 0xE200000000000000;
            swift_bridgeObjectRetain();
            swift_retain();
            sub_1B2228890();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v133 = v178;
            v134 = *(_QWORD **)(v131 + 128);
            swift_bridgeObjectRetain();
            v135 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)(v131 + 128) = v134;
            if ((v135 & 1) == 0)
            {
              v134 = sub_1B1C63044(0, v134[2] + 1, 1, v134);
              *(_QWORD *)(v131 + 128) = v134;
            }
            v137 = v134[2];
            v136 = v134[3];
            if (v137 >= v136 >> 1)
            {
              v134 = sub_1B1C63044(v136 > 1, v137 + 1, 1, v134);
              *(_QWORD *)(v131 + 128) = v134;
            }
            v132 += 16;
            v134[2] = v137 + 1;
            *(_OWORD *)&v134[2 * v137 + 4] = v133;
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            --v130;
          }
          while (v130);
          result = swift_bridgeObjectRelease_n();
          goto LABEL_86;
        }
      }
      result = swift_bridgeObjectRelease();
LABEL_86:
      v144 = *(_QWORD *)(v2[17] + 88);
      if (!v144)
        return result;
      v145 = *(_QWORD *)(v144 + 16);
      if (!v145)
        return result;
      v146 = *a1;
      swift_bridgeObjectRetain_n();
      v147 = 0;
      while (1)
      {
        v149 = (uint64_t *)(v144 + 32 + 16 * v147);
        v151 = *v149;
        v150 = v149[1];
        v152 = *(_QWORD **)(v146 + 104);
        v153 = v152[2];
        if (!v153)
          goto LABEL_98;
        v154 = v152[4] == v151 && v152[5] == v150;
        if (!v154 && (sub_1B2229D24() & 1) == 0)
        {
          if (v153 == 1)
            goto LABEL_98;
          v158 = v152[6] == v151 && v152[7] == v150;
          if (!v158 && (sub_1B2229D24() & 1) == 0)
          {
            v159 = v153 - 2;
            if (!v159)
              goto LABEL_98;
            if ((v152[8] != v151 || v152[9] != v150) && (sub_1B2229D24() & 1) == 0)
              break;
          }
        }
LABEL_90:
        if (++v147 == v145)
          return swift_bridgeObjectRelease_n();
      }
      v160 = v152 + 11;
      while (--v159)
      {
        if (*(v160 - 1) != v151 || *v160 != v150)
        {
          v160 += 2;
          if ((sub_1B2229D24() & 1) == 0)
            continue;
        }
        goto LABEL_90;
      }
LABEL_98:
      swift_bridgeObjectRetain_n();
      swift_retain();
      v155 = swift_isUniquelyReferenced_nonNull_native();
      *(_QWORD *)(v146 + 104) = v152;
      if ((v155 & 1) == 0)
      {
        v152 = sub_1B1C63044(0, v152[2] + 1, 1, v152);
        *(_QWORD *)(v146 + 104) = v152;
      }
      v157 = v152[2];
      v156 = v152[3];
      if (v157 >= v156 >> 1)
      {
        v152 = sub_1B1C63044(v156 > 1, v157 + 1, 1, v152);
        *(_QWORD *)(v146 + 104) = v152;
      }
      v152[2] = v157 + 1;
      v148 = &v152[2 * v157];
      v148[4] = v151;
      v148[5] = v150;
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_90;
    }
    v37 = v2[2];
    v38 = MEMORY[0x1E0DEE9B8];
    if (v37 && *(_QWORD *)(v37 + 16))
    {
      swift_bridgeObjectRetain();
      v39 = sub_1B1DC3B00(0x65756C6176, 0xE500000000000000);
      if ((v40 & 1) != 0)
      {
        sub_1B19F8F0C(*(_QWORD *)(v37 + 56) + 88 * v39, (uint64_t)&v178);
      }
      else
      {
        v183 = 0;
        v181 = 0u;
        v182 = 0u;
        v179 = 0u;
        v180 = 0u;
        v178 = 0u;
      }
      swift_bridgeObjectRelease();
      if (*((_QWORD *)&v178 + 1))
      {
        sub_1B1A0DCD4((uint64_t)&v181 + 8, (uint64_t)&v174);
        sub_1B1A203C4((uint64_t)&v178);
        if (*((_QWORD *)&v175 + 1))
        {
          sub_1B1A0DDAC(&v174, v184);
          sub_1B1A02864((uint64_t)v184, (uint64_t)&v178);
          sub_1B22287AC();
          *(_QWORD *)&v178 = v17;
          *((_QWORD *)&v178 + 1) = v19;
          strcpy((char *)&v174, "@valueAsString");
          HIBYTE(v174) = -18;
          v176 = 34;
          v177 = 0xE100000000000000;
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v17 = sub_1B222922C();
          v163 = v162;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v184);
          v19 = v163;
          goto LABEL_46;
        }
LABEL_45:
        sub_1B1B1F3E4((uint64_t)&v174, (unint64_t *)&qword_1ED4BB150, v38 + 8);
        goto LABEL_46;
      }
    }
    else
    {
      v183 = 0;
      v181 = 0u;
      v182 = 0u;
      v179 = 0u;
      v180 = 0u;
      v178 = 0u;
    }
    sub_1B1B1F3E4((uint64_t)&v178, (unint64_t *)&unk_1ED4BB3A0, (uint64_t)&_s8MetadataVN);
    v174 = 0u;
    v175 = 0u;
    goto LABEL_45;
  }
  v4 = sub_1B1B21898();
  v5 = v1[8] + 16 * v4;
  v8 = *(_QWORD *)(v5 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  v7 = (uint64_t *)(v5 + 32);
  v9 = v1;
  v10 = v1[5] + 16 * v4;
  v11 = *(_QWORD *)(v10 + 32);
  v12 = *(_QWORD *)(v10 + 40);
  v13 = (uint64_t *)(v10 + 32);
  if (v8 == v11 && v6 == v12)
    goto LABEL_8;
  v15 = v4;
  if ((sub_1B2229D24() & 1) != 0)
  {
    v8 = *v13;
    v6 = v13[1];
LABEL_8:
    swift_bridgeObjectRetain();
    v16 = v9;
    sub_1B1FB71E0(v8, v6);
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v44 = *v7;
  v45 = v7[1];
  v16 = v9;
  v46 = (_QWORD *)(v9[9] + 40 * v15);
  v47 = v46[4];
  v48 = v46[5];
  v172 = v3;
  v3 = v46[6];
  v49 = v46[7];
  v167 = v46[8];
  v50 = v16[4];
  *(_QWORD *)&v178 = v16[3];
  *((_QWORD *)&v178 + 1) = v50;
  swift_bridgeObjectRetain();
  sub_1B19FA2B4(v47, v48);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v51 = v178;
  _s11ParameterInCMa();
  v52 = swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v52 + 24) = v44;
  *(_QWORD *)(v52 + 32) = v45;
  *(_OWORD *)(v52 + 40) = v51;
  *(_QWORD *)(v52 + 56) = v47;
  *(_QWORD *)(v52 + 64) = v48;
  *(_QWORD *)(v52 + 72) = v3;
  *(_QWORD *)(v52 + 80) = v49;
  LOBYTE(v3) = v172;
  *(_QWORD *)(v52 + 88) = v167;
LABEL_27:
  if (*(_QWORD *)(v16[10] + 16))
  {
    v53 = v16[12];
    if ((v53 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain();
      MEMORY[0x1B5E21018](0, v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
    }
  }
  if (!swift_weakLoadStrong())
  {
    swift_release();
LABEL_34:
    if (*(_QWORD *)(v16[10] + 16))
    {
      v68 = v16[12];
      if ((v68 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        v67 = MEMORY[0x1B5E21018](0, v68);
        swift_bridgeObjectRelease();
      }
      else
      {
        v67 = *(_QWORD *)(v68 + 32);
        swift_retain();
      }
    }
    else
    {
      v67 = 0;
    }
    goto LABEL_38;
  }
  v54 = sub_1B201D1B8();
  v56 = sub_1B1FB9C0C(v54, v55);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v56 & 1) == 0)
    goto LABEL_34;
  v57 = v16[13];
  v58 = (_QWORD *)v16[14];
  v59 = *(_QWORD *)(v57 + 32);
  v60 = *(_QWORD *)(v57 + 40);
  v61 = v58[4];
  v62 = v58[5];
  v165 = v62;
  v63 = v58[6];
  v64 = v58[7];
  v173 = v3;
  v3 = v58[8];
  v65 = v16[4];
  *(_QWORD *)&v178 = v16[3];
  *((_QWORD *)&v178 + 1) = v65;
  swift_bridgeObjectRetain();
  sub_1B19FA2B4(v61, v62);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v66 = v178;
  _s12ParameterOutCMa();
  v67 = swift_allocObject();
  swift_weakInit();
  swift_weakAssign();
  swift_bridgeObjectRelease();
  *(_QWORD *)(v67 + 24) = v59;
  *(_QWORD *)(v67 + 32) = v60;
  *(_OWORD *)(v67 + 40) = v66;
  *(_QWORD *)(v67 + 56) = v61;
  *(_QWORD *)(v67 + 64) = v165;
  *(_QWORD *)(v67 + 72) = v63;
  *(_QWORD *)(v67 + 80) = v64;
  *(_QWORD *)(v67 + 88) = v3;
  LOBYTE(v3) = v173;
LABEL_38:
  sub_1B19FA278(v67 + 56, (uint64_t)&v178);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B19F8C58(&v178, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
  v69 = sub_1B1FC0A9C();
  v71 = v70;
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1C39E78((uint64_t)&v178, v69, v71, 0, v3);
  swift_bridgeObjectRelease();
  sub_1B19F8C58(&v178, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  v72 = *a1;
  *(_QWORD *)&v184[0] = 8201;
  *((_QWORD *)&v184[0] + 1) = 0xE200000000000000;
  swift_retain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1FC0A9C();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v73 = v184[0];
  v74 = *(_QWORD **)(v72 + 128);
  swift_bridgeObjectRetain();
  v75 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v72 + 128) = v74;
  if ((v75 & 1) == 0)
  {
    v74 = sub_1B1C63044(0, v74[2] + 1, 1, v74);
    *(_QWORD *)(v72 + 128) = v74;
  }
  v77 = v74[2];
  v76 = v74[3];
  if (v77 >= v76 >> 1)
  {
    v74 = sub_1B1C63044(v76 > 1, v77 + 1, 1, v74);
    *(_QWORD *)(v72 + 128) = v74;
  }
  v74[2] = v77 + 1;
  *(_OWORD *)&v74[2 * v77 + 4] = v73;
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B24710(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 136) + 224);
  if (!v3)
    return 0;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6C6174656DLL;
    else
      v4 = 0x7466697773;
    v5 = 0xE500000000000000;
    if (!*(_QWORD *)(v3 + 16))
      goto LABEL_23;
  }
  else
  {
    v5 = 0xE100000000000000;
    v4 = 99;
    if (!*(_QWORD *)(v3 + 16))
    {
LABEL_23:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  swift_retain();
  sub_1B1DC3B00(v4, v5);
  if ((v7 & 1) == 0)
  {
    swift_release();
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  swift_release();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v2 + 136);
  v9 = *(_QWORD *)(v8 + 160);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 16);
    if (v10)
    {
      v11 = swift_bridgeObjectRetain() + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1FC0A9C();
        swift_bridgeObjectRelease();
        sub_1B1A06460();
        sub_1B222922C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v11 += 16;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      v8 = *(_QWORD *)(v2 + 136);
    }
  }
  v12 = *(_QWORD *)(v8 + 200);
  if (v12)
  {
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = swift_bridgeObjectRetain() + 40;
      do
      {
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B1FC0A9C();
        swift_bridgeObjectRelease();
        sub_1B1A06460();
        sub_1B222922C();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v14 += 16;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
    }
  }
  sub_1B1A06460();
  v6 = sub_1B222922C();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B1B24AF0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[16];
  char v13[8];
  _BYTE v14[8];

  v3 = v1;
  sub_1B1B259EC(0, &qword_1EEF5ABA8, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B25900();
  sub_1B222A180();
  v13[0] = 0;
  sub_1B2229910();
  if (!v2)
  {
    v13[0] = 1;
    sub_1B2229910();
    v13[0] = 2;
    sub_1B2229910();
    sub_1B1B25A48(v3 + 48, (uint64_t)v14);
    sub_1B1B25A48((uint64_t)v14, (uint64_t)v13);
    v12[15] = 3;
    sub_1B1B25944();
    sub_1B1B25A9C(&qword_1EEF5ABB0, (uint64_t (*)(void))sub_1B1B25B0C, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEA0B8]);
    sub_1B2229904();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_1B1B24CAC(char *a1)
{
  sub_1B1F95744(*a1);
}

uint64_t sub_1B1B24CB8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B24CF0 + 4 * byte_1B227A460[*v0]))(0x4E7972617262696CLL, 0xEB00000000656D61);
}

uint64_t sub_1B1B24CF0()
{
  return 0x4E74657070696E73;
}

unint64_t sub_1B1B24D04()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1B24D20()
{
  return 0x617461646174656DLL;
}

uint64_t sub_1B1B24D40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1B252B8(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B1B24D64(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_1B1B24D70()
{
  sub_1B1B25900();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B24D98()
{
  sub_1B1B25900();
  return sub_1B222A1E0();
}

double sub_1B1B24DC0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  uint64_t v8;

  sub_1B1B255E4(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_QWORD *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_1B1B24E0C(_QWORD *a1)
{
  return sub_1B1B24AF0(a1);
}

uint64_t sub_1B1B24E4C()
{
  return swift_release();
}

uint64_t sub_1B1B24E54()
{
  sub_1B1FBAA08();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t _s11CodeSnippetCMa()
{
  return objc_opt_self();
}

uint64_t _s11CodeSnippetC17SerializationInfoVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *_s11CodeSnippetC17SerializationInfoVwcp(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s11CodeSnippetC17SerializationInfoVwca(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s11CodeSnippetC17SerializationInfoVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ComputePipelineDescriptor(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ComputePipelineDescriptor(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *_s11CodeSnippetC17SerializationInfoVMa()
{
  return &_s11CodeSnippetC17SerializationInfoVN;
}

unint64_t sub_1B1B250F0()
{
  return sub_1B1B23020();
}

uint64_t sub_1B1B25110(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  v3 = *(_QWORD *)(a1 + 16);
  result = MEMORY[0x1E0DEE9D8];
  if (v3)
  {
    v20 = MEMORY[0x1E0DEE9D8];
    sub_1B2229550();
    v12 = a2;
    v6 = (uint64_t *)(a1 + 56);
    do
    {
      v7 = *(v6 - 2);
      v9 = *(v6 - 1);
      v8 = *v6;
      v15 = *(v6 - 3);
      v16 = *(_QWORD *)(v12 + 24);
      v17 = *(_QWORD *)(v12 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1B1E0E85C(v9, v8, (uint64_t *)v18);
      v13 = v18[1];
      v14 = v18[0];
      v10 = v19;
      _s12ParameterOutCMa();
      v11 = swift_allocObject();
      swift_weakInit();
      swift_weakAssign();
      *(_QWORD *)(v11 + 24) = v15;
      *(_QWORD *)(v11 + 32) = v7;
      *(_QWORD *)(v11 + 40) = v16;
      *(_QWORD *)(v11 + 48) = v17;
      *(_OWORD *)(v11 + 56) = v14;
      *(_OWORD *)(v11 + 72) = v13;
      *(_QWORD *)(v11 + 88) = v10;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      v6 += 4;
      --v3;
    }
    while (v3);
    return v20;
  }
  return result;
}

uint64_t sub_1B1B252B8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x4E7972617262696CLL && a2 == 0xEB00000000656D61;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4E74657070696E73 && a2 == 0xEB00000000656D61 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B232EC10 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x617461646174656DLL && a2 == 0xEC00000074636944)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B1B254AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD v10[5];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = 0;
  for (i = a1 + 32; ; i += 40)
  {
    sub_1B19FA278(i, (uint64_t)v10);
    sub_1B19F8C58(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19FA2B4);
    v4 = sub_1B1E03DBC();
    v6 = v5;
    if (v4 == sub_1B1E03DBC() && v6 == v7)
      break;
    v8 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B19F8C58(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
    if ((v8 & 1) != 0)
      return v2;
    if (v1 == ++v2)
      return 0;
  }
  swift_bridgeObjectRelease_n();
  sub_1B19F8C58(v10, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19F9FEC);
  return v2;
}

uint64_t sub_1B1B255E4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  char v30;

  sub_1B1B259EC(0, &qword_1EEF5AB98, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v21 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B25900();
  sub_1B222A150();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v30 = 0;
    v11 = sub_1B22297CC();
    v13 = v12;
    v24 = v11;
    v29 = 1;
    swift_bridgeObjectRetain();
    v14 = sub_1B22297CC();
    v25 = v15;
    v22 = v14;
    v28 = 2;
    swift_bridgeObjectRetain();
    v23 = 0;
    v21 = sub_1B22297CC();
    v17 = v16;
    sub_1B1B25944();
    v27 = 3;
    sub_1B1B25A9C(&qword_1ED4BB3D0, (uint64_t (*)(void))sub_1B1B259A8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEA0D8]);
    swift_bridgeObjectRetain();
    sub_1B22297B4();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v18 = v26;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v19 = v25;
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    *a2 = v24;
    a2[1] = v13;
    a2[2] = v22;
    a2[3] = v19;
    a2[4] = v21;
    a2[5] = v17;
    a2[6] = v18;
  }
  return result;
}

unint64_t sub_1B1B25900()
{
  unint64_t result;

  result = qword_1EEF5ABA0;
  if (!qword_1EEF5ABA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A5E0, &_s11CodeSnippetC17SerializationInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5ABA0);
  }
  return result;
}

void sub_1B1B25944()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BB3C8)
  {
    v0 = sub_1B22285A8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BB3C8);
  }
}

unint64_t sub_1B1B259A8()
{
  unint64_t result;

  result = qword_1ED4BB398;
  if (!qword_1ED4BB398)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229635C, &_s8MetadataVN);
    atomic_store(result, (unint64_t *)&qword_1ED4BB398);
  }
  return result;
}

void sub_1B1B259EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1B25900();
    v7 = a3(a1, &_s11CodeSnippetC17SerializationInfoV10CodingKeysON, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B1B25A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BB3D8, (void (*)(uint64_t))sub_1B1B25944);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1B25A9C(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];

  result = *a1;
  if (!result)
  {
    sub_1B1B25944();
    v10 = v9;
    v11[0] = a3;
    v11[1] = a2();
    result = MEMORY[0x1B5E23E74](a4, v10, v11);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1B25B0C()
{
  unint64_t result;

  result = qword_1EEF5ABB8;
  if (!qword_1EEF5ABB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2296334, &_s8MetadataVN);
    atomic_store(result, (unint64_t *)&qword_1EEF5ABB8);
  }
  return result;
}

unint64_t sub_1B1B25B50()
{
  unint64_t result;

  result = qword_1ED4BA258;
  if (!qword_1ED4BA258)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&qword_1ED4BA258);
  }
  return result;
}

uint64_t sub_1B1B25B94(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t v4;

  sub_1B1792854(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1B1B25BD0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;

  return sub_1B1FBB2C4(a1, a2, a3, v3);
}

uint64_t sub_1B1B25BD8(uint64_t a1, uint64_t a2)
{
  _s8MetadataVwta(a2, a1);
  return a2;
}

uint64_t sub_1B1B25C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, (unint64_t *)&qword_1EEF5DA60, (void (*)(uint64_t))MEMORY[0x1E0DEDFC8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for AnyType.AssetReferenceKind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s11CodeSnippetC17SerializationInfoV10CodingKeysOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1B25D44 + 4 * byte_1B227A469[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1B25D78 + 4 * byte_1B227A464[v4]))();
}

uint64_t sub_1B1B25D78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B25D80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B25D88);
  return result;
}

uint64_t sub_1B1B25D94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B25D9CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1B25DA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B25DA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s11CodeSnippetC17SerializationInfoV10CodingKeysOMa()
{
  return &_s11CodeSnippetC17SerializationInfoV10CodingKeysON;
}

unint64_t sub_1B1B25DC8()
{
  unint64_t result;

  result = qword_1EEF5ABC0;
  if (!qword_1EEF5ABC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A5B8, &_s11CodeSnippetC17SerializationInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5ABC0);
  }
  return result;
}

unint64_t sub_1B1B25E10()
{
  unint64_t result;

  result = qword_1EEF5ABC8;
  if (!qword_1EEF5ABC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A528, &_s11CodeSnippetC17SerializationInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5ABC8);
  }
  return result;
}

unint64_t sub_1B1B25E58()
{
  unint64_t result;

  result = qword_1EEF5ABD0;
  if (!qword_1EEF5ABD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A550, &_s11CodeSnippetC17SerializationInfoV10CodingKeysON);
    atomic_store(result, (unint64_t *)&qword_1EEF5ABD0);
  }
  return result;
}

uint64_t sub_1B1B25E9C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;

  v2 = v1;
  sub_1B1B28F74();
  MEMORY[0x1E0C80A78](v4, v5);
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8, v9);
  v11 = (char *)&v28 - v10;
  v12 = sub_1B222826C();
  v13 = *(_QWORD *)(v12 - 8);
  v15 = MEMORY[0x1E0C80A78](v12, v14);
  v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
    (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, v2 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID, v12, v15);
  else
    sub_1B2228260();
  v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph);
  swift_retain();
  swift_retain();
  v19 = sub_1B1BCE288(1);
  swift_release();
  v20 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v11, v17, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  *(_QWORD *)(swift_allocObject() + OBJC_IVAR____TtC3VFX21AuthoringSubGraphNode_graph) = v18;
  sub_1B1B28FC8((uint64_t)v11, (uint64_t)v7);
  swift_bridgeObjectRetain();
  v21 = sub_1B20E4E94(v19, v20, (uint64_t)v7, 0, 0xF000000000000000);
  swift_release();
  sub_1B1B2900C((uint64_t)v11);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
  v24 = (uint64_t *)(v21 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v25 = *(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData);
  v26 = *(_QWORD *)(v21 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8);
  *v24 = v22;
  v24[1] = v23;
  sub_1B1AEB720(v22, v23);
  sub_1B1A0DAC8(v25, v26);
  return v21;
}

uint64_t sub_1B1B260C0()
{
  return swift_release();
}

uint64_t sub_1B1B260D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1A0DAC8(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData), *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX13AuthoringNode_userInfoData + 8));
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1B26174()
{
  return type metadata accessor for AuthoringSubGraphNode(0);
}

uint64_t type metadata accessor for AuthoringSubGraphNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5ABD8);
}

uint64_t sub_1B1B26190()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1B261D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX12SubGraphNode_name);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_1B1B2620C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v18[10];
  uint64_t v19[2];
  uint64_t v20;
  uint64_t v21;

  if (*(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph))
  {
    v20 = 0;
    v21 = 0;
    MEMORY[0x1E0C80A78](a1, a2);
    v18[6] = &v21;
    v18[7] = &v20;
    MEMORY[0x1E0C80A78](v5, v6);
    v18[2] = sub_1B1B28F44;
    v18[3] = v7;
    swift_retain();
    v8 = MEMORY[0x1E0DEE9D8];
    v19[0] = sub_1B1C6D068(MEMORY[0x1E0DEE9D8]);
    v19[1] = v9;
    sub_1B1C5CC00((uint64_t)sub_1B1B28F5C, (uint64_t)v18, 1, 0x1000000000000000uLL, 0, v8, v19);
    swift_release();
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    v12 = v20;
    v11 = v21;
    v13 = MEMORY[0x1E0DEE9D8];
    v14 = &unk_1E6377C70;
    v15 = MEMORY[0x1E0DEE9D8];
    v16 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v17 = (_QWORD *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature);
    v11 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature);
    v12 = v17[1];
    v14 = (void *)v17[2];
    v13 = v17[3];
    v15 = v17[4];
    v16 = v17[5];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = swift_bridgeObjectRetain();
  }
  *a3 = v11;
  a3[1] = v12;
  a3[2] = v14;
  a3[3] = v13;
  a3[4] = v15;
  a3[5] = v16;
  return result;
}

uint64_t sub_1B1B263A8(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  __objc2_class **v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!*(_QWORD *)(*(_QWORD *)(result + 16) + 16))
  {
    v3 = *(__objc2_class ***)(result + 8);
    if (*v3 == _TtC3VFX17SubGraphEnterNode)
    {
      v5 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 8);
      v6 = *(_QWORD *)(v5 + 16);
      sub_1B2229E44();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain_n();
      v7 = swift_dynamicCastClass();
      if (!v7)
      {
        swift_bridgeObjectRelease();
        v7 = MEMORY[0x1E0DEE9D8];
      }
      v8 = *(_QWORD *)(v7 + 16);
      swift_release();
      if (v8 == v6 - (v6 != 0))
      {
        v9 = swift_dynamicCastClass();
        if (!v9)
        {
          swift_bridgeObjectRelease();
          v9 = MEMORY[0x1E0DEE9D8];
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        v9 = sub_1B1DC8F50(v5, v5 + 32, v6 != 0, (2 * v6) | 1);
      }
      swift_bridgeObjectRelease();
      *a2 = v9;
    }
    else
    {
      if (*v3 != _TtC3VFX18SubGraphReturnNode)
        return result;
      *a3 = *(__objc2_class **)((char *)v3 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
      swift_bridgeObjectRetain();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

_QWORD *sub_1B1B26504(_QWORD *a1)
{
  swift_allocObject();
  return sub_1B1B2653C(a1);
}

_QWORD *sub_1B1B2653C(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12SubGraphNode_name);
  *v3 = 0x6870617247627553;
  v3[1] = 0xE800000000000000;
  v4 = OBJC_IVAR____TtC3VFX12SubGraphNode_graph;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph) = 0;
  v5 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode_name + 8);
  *v3 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode_name);
  v3[1] = v5;
  *(_QWORD *)(v1 + v4) = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode_graph);
  v6 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature + 8);
  v7 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature + 16);
  v8 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature + 24);
  v9 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature + 32);
  v10 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature + 40);
  v11 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature);
  *v11 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature);
  v11[1] = v6;
  v11[2] = v7;
  v11[3] = v8;
  v11[4] = v9;
  v11[5] = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B1BCE388(a1);
}

void sub_1B1B2662C(char *a1)
{
  sub_1B1F8EFBC(*a1);
}

void sub_1B1B26638()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1B2667C()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1B26720()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1B26754()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1B267E4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1B26824()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B268C8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B28608();
  *a1 = result;
  return result;
}

uint64_t sub_1B1B268F4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1B2691C + 4 * byte_1B227A63F[*v0]))();
}

void sub_1B1B2691C(_QWORD *a1@<X8>)
{
  *a1 = 0x756F437475706E69;
  a1[1] = 0xEA0000000000746ELL;
}

void sub_1B1B26940(_QWORD *a1@<X8>)
{
  *a1 = 0x6F4374757074756FLL;
  a1[1] = 0xEB00000000746E75;
}

void sub_1B1B26964(_QWORD *a1@<X8>)
{
  *a1 = 0x6D614E7475706E69;
  a1[1] = 0xEA00000000007365;
}

void sub_1B1B26984(_QWORD *a1@<X8>)
{
  *a1 = 0x614E74757074756FLL;
  a1[1] = 0xEB0000000073656DLL;
}

uint64_t sub_1B1B269A8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B269D0 + 4 * byte_1B227A644[*v0]))(1701667182, 0xE400000000000000);
}

uint64_t sub_1B1B269D0()
{
  return 0x756F437475706E69;
}

uint64_t sub_1B1B269F0()
{
  return 0x6F4374757074756FLL;
}

uint64_t sub_1B1B26A10()
{
  return 0x6D614E7475706E69;
}

uint64_t sub_1B1B26A2C()
{
  return 0x614E74757074756FLL;
}

uint64_t sub_1B1B26A4C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B28608();
  *a1 = result;
  return result;
}

void sub_1B1B26A70(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_1B1B26A7C()
{
  sub_1B1B28444();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B26AA4()
{
  sub_1B1B28444();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B26ACC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  __int128 v12;
  _BYTE v13[16];
  _OWORD v14[2];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v3 = v1;
  sub_1B1B28BE8(0, &qword_1EEF5AC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v13[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B28444();
  sub_1B222A180();
  v13[15] = 0;
  swift_bridgeObjectRetain();
  sub_1B2229910();
  if (v2)
  {
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
    return swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v12 = *(_OWORD *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature + 16);
    v14[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature);
    v14[1] = v12;
    v15 = *(_OWORD *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature + 32);
    v16 = v14[0];
    v17 = v12;
    v18 = v15;
    sub_1B1B28C44((uint64_t)&v16);
    sub_1B1B28C44((uint64_t)&v16 + 8);
    sub_1B1B28C44((uint64_t)&v17);
    sub_1B1B28C44((uint64_t)&v17 + 8);
    sub_1B1B28C44((uint64_t)&v18);
    sub_1B1B28C44((uint64_t)&v18 + 8);
    sub_1B1B28650((uint64_t *)v14);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
    sub_1B1B28C6C((uint64_t)&v16);
    sub_1B1B28C6C((uint64_t)&v16 + 8);
    sub_1B1B28C6C((uint64_t)&v17);
    sub_1B1B28C6C((uint64_t)&v17 + 8);
    sub_1B1B28C6C((uint64_t)&v18);
    return sub_1B1B28C6C((uint64_t)&v18 + 8);
  }
}

uint64_t sub_1B1B26CAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _OWORD *v15;
  __int128 v16;
  _BYTE v17[16];
  _OWORD v18[3];

  v3 = v1;
  sub_1B1B28BE8(0, &qword_1EEF5AC28, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v17[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B28444();
  result = sub_1B222A150();
  if (!v2)
  {
    v17[15] = 0;
    v12 = sub_1B22297CC();
    v13 = (uint64_t *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode_name);
    *v13 = v12;
    v13[1] = v14;
    swift_bridgeObjectRelease();
    sub_1B1B288D8((uint64_t *)v18);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
    v15 = (_OWORD *)(v3 + OBJC_IVAR____TtC3VFX12SubGraphNode__signature);
    v16 = v18[1];
    *v15 = v18[0];
    v15[1] = v16;
    v15[2] = v18[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1B26E48(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38[2];
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;

  v36 = *v1;
  v3 = v1[4];
  v41 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  sub_1B2029FFC(0, 0, 0);
  v4 = v3;
  v5 = v41;
  v6 = *(_QWORD *)(v3 + 16);
  swift_bridgeObjectRetain();
  v34 = v6;
  if (v6)
  {
    v7 = 0;
    v8 = a1 & 1;
    do
    {
      v9 = *(_QWORD *)(v4 + 32 + 8 * v7);
      v39 = v7;
      v40 = v9;
      sub_1B1B2725C(&v39, v8, v36, v38);
      v10 = v38[0];
      v11 = v38[1];
      v41 = v5;
      v13 = *(_QWORD *)(v5 + 16);
      v12 = *(_QWORD *)(v5 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B2029FFC(v12 > 1, v13 + 1, 1);
        v5 = v41;
      }
      ++v7;
      *(_QWORD *)(v5 + 16) = v13 + 1;
      v14 = v5 + 16 * v13;
      *(_QWORD *)(v14 + 32) = v10;
      *(_QWORD *)(v14 + 40) = v11;
    }
    while (v34 != v7);
  }
  swift_bridgeObjectRelease_n();
  v39 = v5;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  v35 = sub_1B2228644();
  v37 = v15;
  swift_release();
  v16 = *(_QWORD *)(*(_QWORD *)(v33 + 24) + 16);
  v17 = MEMORY[0x1E0DEE9D8];
  if (v16)
  {
    v38[0] = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v16, 0);
    v18 = 0;
    v17 = v38[0];
    do
    {
      v39 = 37;
      v40 = 0xE100000000000000;
      v41 = v18;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v19 = v39;
      v20 = v40;
      v38[0] = v17;
      v22 = *(_QWORD *)(v17 + 16);
      v21 = *(_QWORD *)(v17 + 24);
      if (v22 >= v21 >> 1)
      {
        sub_1B2029FFC(v21 > 1, v22 + 1, 1);
        v17 = v38[0];
      }
      ++v18;
      *(_QWORD *)(v17 + 16) = v22 + 1;
      v23 = v17 + 16 * v22;
      *(_QWORD *)(v23 + 32) = v19;
      *(_QWORD *)(v23 + 40) = v20;
    }
    while (v16 != v18);
  }
  v24 = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 16);
  v25 = MEMORY[0x1E0DEE9D8];
  if (v24)
  {
    v38[0] = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v24, 0);
    v26 = 0;
    v25 = v38[0];
    do
    {
      v39 = 29221;
      v40 = 0xE200000000000000;
      v41 = v26;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v28 = v39;
      v27 = v40;
      v38[0] = v25;
      v30 = *(_QWORD *)(v25 + 16);
      v29 = *(_QWORD *)(v25 + 24);
      if (v30 >= v29 >> 1)
      {
        sub_1B2029FFC(v29 > 1, v30 + 1, 1);
        v25 = v38[0];
      }
      ++v26;
      *(_QWORD *)(v25 + 16) = v30 + 1;
      v31 = v25 + 16 * v30;
      *(_QWORD *)(v31 + 32) = v28;
      *(_QWORD *)(v31 + 40) = v27;
    }
    while (v24 != v26);
  }
  v39 = v17;
  sub_1B19F48F0(v25);
  sub_1B2228644();
  swift_bridgeObjectRelease();
  v39 = 0xD000000000000011;
  v40 = 0x80000001B232ECF0;
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v39 = v35;
  v40 = v37;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v39;
}

uint64_t sub_1B1B2725C@<X0>(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  _QWORD v11[4];
  uint64_t v12;
  uint64_t v13;

  v6 = a2 & 1;
  v7 = *a1;
  v8 = a1[1];
  v12 = 0x7225206F747561;
  v11[0] = v7;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1D750D8(v8, (uint64_t)v11, 0.0);
  sub_1B1FF3F6C(v8, (uint64_t)v11, v6, a3, (uint64_t)&off_1E6377CA0);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2228890();
  v10 = v13;
  *a4 = v12;
  a4[1] = v10;
  return result;
}

void sub_1B1B27378()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1B273A4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B27430()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1B27500()
{
  return sub_1B1B27818((void (*)(void))sub_1B1B27430);
}

uint64_t sub_1B1B2750C()
{
  return type metadata accessor for SubGraphNode(0);
}

uint64_t type metadata accessor for SubGraphNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5ABE8);
}

uint64_t sub_1B1B27528()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1B2757C(_QWORD *a1)
{
  return sub_1B1B26ACC(a1);
}

uint64_t sub_1B1B27590(_QWORD *a1)
{
  return sub_1B1B26CAC(a1);
}

uint64_t sub_1B1B275A4()
{
  return 3;
}

uint64_t sub_1B1B275AC(char a1)
{
  return sub_1B1B26E48(a1 & 1);
}

uint64_t sub_1B1B275B4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (_QWORD *)(v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 8);
  v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 16);
  v6 = v2[3];
  v7 = v2[4];
  v8 = v2[5];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRetain();
}

_QWORD *sub_1B1B27628(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 8);
  v4 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 16);
  v5 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 24);
  v6 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 32);
  v7 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 40);
  v8 = (_QWORD *)(v2 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
  *v8 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
  v8[1] = v3;
  v8[2] = v4;
  v8[3] = v5;
  v8[4] = v6;
  v8[5] = v7;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return sub_1B1BCE388(a1);
}

void sub_1B1B276CC()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1B276F8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B27760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1B2780C()
{
  return sub_1B1B27818((void (*)(void))sub_1B1B27760);
}

uint64_t sub_1B1B27818(void (*a1)(void))
{
  a1();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1B2783C()
{
  return type metadata accessor for SubGraphEndpointNode(0);
}

uint64_t type metadata accessor for SubGraphEndpointNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5ABF8);
}

uint64_t sub_1B1B27858()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1B27898()
{
  return 0x7265746E45;
}

_QWORD *sub_1B1B278AC(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = a1[3];
  v4 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v3 + 16))
  {
    swift_bridgeObjectRetain();
    v5 = v3;
  }
  else
  {
    v23 = *a1;
    v6 = *(_QWORD *)(v23 + 16);
    v5 = MEMORY[0x1E0DEE9D8];
    if (v6)
    {
      v22 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRetain();
      sub_1B202A2F4(0, v6, 0);
      v5 = v22;
      v7 = *(_QWORD *)(v22 + 16);
      v8 = 16 * v7 + 32;
      do
      {
        v22 = v5;
        v9 = *(_QWORD *)(v5 + 24);
        v10 = v7 + 1;
        if (v7 >= v9 >> 1)
        {
          sub_1B202A2F4(v9 > 1, v7 + 1, 1);
          v5 = v22;
        }
        *(_QWORD *)(v5 + 16) = v10;
        v11 = (_QWORD *)(v5 + v8);
        *v11 = 0;
        v11[1] = 0;
        v8 += 16;
        v7 = v10;
        --v6;
      }
      while (v6);
      sub_1B1B28C6C((uint64_t)&v23);
    }
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = 0x8000000000000008;
  *(_QWORD *)(v12 + 32) = v13 | 0x6000000000000000;
  v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
  v15 = swift_allocObject();
  *(_QWORD *)(v15 + 16) = 0x8000000000000008;
  *(_QWORD *)(v14 + 32) = v15 | 0x6000000000000000;
  v16 = *a1;
  v22 = v14;
  swift_bridgeObjectRetain();
  sub_1B19F4E38(v16);
  v22 = a1[1];
  sub_1B1B28C6C((uint64_t)&v22);
  v21 = a1[2];
  sub_1B1B28C6C((uint64_t)&v21);
  swift_bridgeObjectRelease();
  v20 = a1[4];
  sub_1B1B28C6C((uint64_t)&v20);
  v19 = a1[5];
  sub_1B1B28C6C((uint64_t)&v19);
  swift_bridgeObjectRelease();
  sub_1B19F4E1C(v5);
  v17 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
  *v17 = v12;
  v17[1] = v14;
  v17[2] = (uint64_t)&unk_1E638FDE8;
  v17[3] = v4;
  v17[4] = (uint64_t)&unk_1E638FE18;
  v17[5] = v4;
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = v4;
  sub_1B2228260();
  return v1;
}

uint64_t sub_1B1B27B30@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v3 = v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature;
  v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 8);
  v5 = *(_QWORD *)(v4 + 16);
  sub_1B2229E44();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v6 = swift_dynamicCastClass();
  if (!v6)
  {
    swift_bridgeObjectRelease();
    v6 = MEMORY[0x1E0DEE9D8];
  }
  v7 = *(_QWORD *)(v6 + 16);
  swift_release();
  if (v7 == v5 - (v5 != 0))
  {
    v8 = swift_dynamicCastClass();
    if (!v8)
    {
      swift_bridgeObjectRelease();
      v8 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v8 = sub_1B1DC8F50(v4, v4 + 32, v5 != 0, (2 * v5) | 1);
  }
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(v3 + 32);
  v10 = *(_QWORD *)(v9 + 16);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain_n();
  v11 = swift_dynamicCastClass();
  if (!v11)
  {
    swift_bridgeObjectRelease();
    v11 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(_QWORD *)(v11 + 16);
  swift_release();
  if (v12 == v10 - (v10 != 0))
  {
    v13 = swift_dynamicCastClass();
    if (!v13)
    {
      swift_bridgeObjectRelease();
      v13 = MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = sub_1B1DC8F64(v9, v9 + 32, v10 != 0, (2 * v10) | 1);
  }
  result = swift_bridgeObjectRelease();
  v15 = MEMORY[0x1E0DEE9D8];
  *a1 = v8;
  a1[1] = v15;
  a1[2] = (uint64_t)&unk_1E638FDB8;
  a1[3] = v13;
  a1[4] = v15;
  a1[5] = v15;
  return result;
}

uint64_t sub_1B1B27CE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  sub_1B1B28BE8(0, &qword_1EEF5AC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B28444();
  sub_1B222A180();
  sub_1B1B27B30(&v11);
  sub_1B1B28650(&v11);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v1)
  {
    v28 = v11;
    sub_1B1B28C6C((uint64_t)&v28);
    v27 = v12;
    sub_1B1B28C6C((uint64_t)&v27);
    v26 = v13;
    sub_1B1B28C6C((uint64_t)&v26);
    v25 = v14;
    sub_1B1B28C6C((uint64_t)&v25);
    v24 = v15;
    sub_1B1B28C6C((uint64_t)&v24);
    v23 = v16;
    v9 = &v23;
  }
  else
  {
    v22 = v11;
    sub_1B1B28C6C((uint64_t)&v22);
    v21 = v12;
    sub_1B1B28C6C((uint64_t)&v21);
    v20 = v13;
    sub_1B1B28C6C((uint64_t)&v20);
    v19 = v14;
    sub_1B1B28C6C((uint64_t)&v19);
    v18 = v15;
    sub_1B1B28C6C((uint64_t)&v18);
    v17 = v16;
    v9 = &v17;
  }
  return sub_1B1B28C6C((uint64_t)v9);
}

uint64_t sub_1B1B27EB4()
{
  return type metadata accessor for SubGraphEnterNode(0);
}

uint64_t type metadata accessor for SubGraphEnterNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5AC08);
}

uint64_t sub_1B1B27ED4(_QWORD *a1)
{
  return sub_1B1B27CE8(a1);
}

uint64_t sub_1B1B27EE8(_QWORD *a1)
{
  return sub_1B1B281AC(a1, (void (*)(uint64_t *))sub_1B1B278AC);
}

uint64_t sub_1B1B27F04()
{
  return 0;
}

uint64_t sub_1B1B27F10()
{
  return 0x6E7275746552;
}

_QWORD *sub_1B1B27F24(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = a1[1];
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000008;
  *(_QWORD *)(v4 + 32) = v5 | 0x6000000000000000;
  v6 = a1[4];
  v13 = *a1;
  swift_bridgeObjectRetain();
  sub_1B1B28C6C((uint64_t)&v13);
  v12 = a1[2];
  sub_1B1B28C6C((uint64_t)&v12);
  v11 = a1[3];
  sub_1B1B28C6C((uint64_t)&v11);
  swift_bridgeObjectRelease();
  v10 = a1[5];
  sub_1B1B28C6C((uint64_t)&v10);
  v7 = (_QWORD *)((char *)v1 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
  *v7 = v3;
  v7[1] = v4;
  v7[2] = &unk_1E6395F38;
  v7[3] = v6;
  v8 = MEMORY[0x1E0DEE9D8];
  v7[4] = MEMORY[0x1E0DEE9D8];
  v7[5] = v8;
  v1[2] = v8;
  v1[3] = 0;
  v1[4] = 0;
  sub_1B2228260();
  return v1;
}

uint64_t sub_1B1B2805C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[6];

  v2 = v1;
  sub_1B1B28BE8(0, &qword_1EEF5AC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v14 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B28444();
  sub_1B222A180();
  v10 = v2 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature;
  v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
  v12 = *(_QWORD *)(v10 + 24);
  v14[0] = MEMORY[0x1E0DEE9D8];
  v14[1] = v11;
  v14[2] = (uint64_t)&unk_1E6395F68;
  v14[3] = MEMORY[0x1E0DEE9D8];
  v14[4] = v12;
  v14[5] = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1B28650(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_bridgeObjectRelease();
  swift_arrayDestroy();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B281AC(_QWORD *a1, void (*a2)(uint64_t *))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  void (*v13)(uint64_t *);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25[6];
  void (*v26)(uint64_t *);

  v26 = a2;
  v4 = v2;
  sub_1B1B28BE8(0, &qword_1EEF5AC28, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v23 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B28444();
  result = sub_1B222A150();
  if (!v3)
  {
    v24 = v4;
    v13 = v26;
    sub_1B1B288D8(v25);
    v14 = swift_allocObject();
    v13(v25);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
    v16 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 8);
    v17 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 16);
    v18 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 24);
    v19 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 32);
    v20 = *(_QWORD *)(v14 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_release();
    v21 = (_QWORD *)(v24 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
    v26 = *(void (**)(uint64_t *))(v24 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature);
    v22 = *(_QWORD *)(v24 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 8);
    v23 = *(_QWORD *)(v24 + OBJC_IVAR____TtC3VFX20SubGraphEndpointNode__signature + 16);
    v24 = v22;
    *v21 = v15;
    v21[1] = v16;
    v21[2] = v17;
    v21[3] = v18;
    v21[4] = v19;
    v21[5] = v20;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1B2839C()
{
  sub_1B1B27760();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1B283C0()
{
  return type metadata accessor for SubGraphReturnNode(0);
}

uint64_t type metadata accessor for SubGraphReturnNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF5AC18);
}

uint64_t sub_1B1B283DC()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1B28410(_QWORD *a1)
{
  return sub_1B1B2805C(a1);
}

uint64_t sub_1B1B28424(_QWORD *a1)
{
  return sub_1B1B281AC(a1, (void (*)(uint64_t *))sub_1B1B27F24);
}

unint64_t sub_1B1B28444()
{
  unint64_t result;

  result = qword_1EEF5AC30;
  if (!qword_1EEF5AC30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A880, &type metadata for SubGraphNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC30);
  }
  return result;
}

uint64_t sub_1B1B28488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v3 = MEMORY[0x1E0DEE9D8];
  if (a2 != a1)
  {
    v6 = a1;
    v18 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, (a2 - a1) & ~((a2 - a1) >> 63), 0);
    v3 = v18;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = (_QWORD *)(a3 + 16 * v6 + 40);
    do
    {
      v9 = 0;
      v10 = 0xE000000000000000;
      if ((v6 & 0x8000000000000000) == 0 && v6 < v7)
      {
        if (*v8)
        {
          v11 = v7;
          sub_1B1A06460();
          swift_bridgeObjectRetain();
          v12 = sub_1B2229214();
          v9 = *(_QWORD *)(v12 + 32);
          v10 = *(_QWORD *)(v12 + 40);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v7 = v11;
        }
        else
        {
          v9 = 0;
        }
      }
      v19 = v3;
      v14 = *(_QWORD *)(v3 + 16);
      v13 = *(_QWORD *)(v3 + 24);
      if (v14 >= v13 >> 1)
      {
        v16 = v7;
        sub_1B2029FFC(v13 > 1, v14 + 1, 1);
        v7 = v16;
        v3 = v19;
      }
      *(_QWORD *)(v3 + 16) = v14 + 1;
      v15 = v3 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v9;
      *(_QWORD *)(v15 + 40) = v10;
      ++v6;
      v8 += 2;
    }
    while (a2 != v6);
  }
  return v3;
}

uint64_t sub_1B1B28608()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 5)
    return 5;
  else
    return v0;
}

uint64_t sub_1B1B28650(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[1];
  v14 = *a1;
  v3 = *(_QWORD *)(v14 + 16);
  v4 = a1[3];
  v12 = a1[2];
  v13 = v2;
  v5 = a1[5];
  v10 = a1[4];
  v6 = v10;
  v11 = v4;
  v9 = v5;
  sub_1B1B28C44((uint64_t)&v14);
  sub_1B1B28C44((uint64_t)&v13);
  sub_1B1B28C44((uint64_t)&v12);
  sub_1B1B28C44((uint64_t)&v11);
  sub_1B1B28C44((uint64_t)&v10);
  sub_1B1B28C44((uint64_t)&v9);
  sub_1B1B28488(0, v3, v4);
  sub_1B1B28C6C((uint64_t)&v14);
  sub_1B1B28C6C((uint64_t)&v13);
  sub_1B1B28C6C((uint64_t)&v12);
  sub_1B1B28C6C((uint64_t)&v11);
  sub_1B1B28C6C((uint64_t)&v10);
  sub_1B1B28C6C((uint64_t)&v9);
  v7 = *(_QWORD *)(v2 + 16);
  sub_1B1B28C44((uint64_t)&v14);
  sub_1B1B28C44((uint64_t)&v13);
  sub_1B1B28C44((uint64_t)&v12);
  sub_1B1B28C44((uint64_t)&v11);
  sub_1B1B28C44((uint64_t)&v10);
  sub_1B1B28C44((uint64_t)&v9);
  sub_1B1B28488(0, v7, v6);
  sub_1B1B28C6C((uint64_t)&v14);
  sub_1B1B28C6C((uint64_t)&v13);
  sub_1B1B28C6C((uint64_t)&v12);
  sub_1B1B28C6C((uint64_t)&v11);
  sub_1B1B28C6C((uint64_t)&v10);
  sub_1B1B28C6C((uint64_t)&v9);
  sub_1B1B28BE8(0, &qword_1EEF5AC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  sub_1B2229940();
  if (v1)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B2229940();
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B28C94((unint64_t *)&qword_1EEF5AC40, MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    sub_1B2229958();
    swift_bridgeObjectRelease();
    sub_1B2229958();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B288D8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1B1B28BE8(0, &qword_1EEF5AC28, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  result = sub_1B22297FC();
  if (!v1)
  {
    v4 = result;
    LOBYTE(v29) = 2;
    v5 = sub_1B22297FC();
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1B28C94((unint64_t *)&qword_1ED4BA4A8, MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    sub_1B2229814();
    v6 = v29;
    sub_1B2229814();
    v27 = a1;
    v7 = v29;
    v26 = sub_1B19F3C4C(0x8000000000000000, v4);
    v25 = sub_1B19F3C4C(0x8000000000000000, v5);
    v8 = *(_QWORD *)(v29 + 16);
    v9 = MEMORY[0x1E0DEE9D8];
    v28 = v29;
    if (v8)
    {
      v30 = MEMORY[0x1E0DEE9D8];
      sub_1B202A2F4(0, v8, 0);
      v10 = v30;
      v11 = (uint64_t *)(v6 + 40);
      do
      {
        v12 = *(v11 - 1);
        v13 = *v11;
        v14 = *(_QWORD *)(v30 + 16);
        v15 = *(_QWORD *)(v30 + 24);
        swift_bridgeObjectRetain();
        if (v14 >= v15 >> 1)
          sub_1B202A2F4(v15 > 1, v14 + 1, 1);
        v11 += 2;
        *(_QWORD *)(v30 + 16) = v14 + 1;
        v16 = v30 + 16 * v14;
        *(_QWORD *)(v16 + 32) = v12;
        *(_QWORD *)(v16 + 40) = v13;
        --v8;
      }
      while (v8);
      swift_bridgeObjectRelease();
      v9 = MEMORY[0x1E0DEE9D8];
      v7 = v28;
    }
    else
    {
      swift_bridgeObjectRelease();
      v10 = MEMORY[0x1E0DEE9D8];
    }
    v17 = *(_QWORD *)(v7 + 16);
    if (v17)
    {
      sub_1B202A2F4(0, v17, 0);
      v18 = v9;
      v19 = (uint64_t *)(v7 + 40);
      do
      {
        v21 = *(v19 - 1);
        v20 = *v19;
        v22 = *(_QWORD *)(v18 + 16);
        v23 = *(_QWORD *)(v18 + 24);
        swift_bridgeObjectRetain();
        if (v22 >= v23 >> 1)
          sub_1B202A2F4(v23 > 1, v22 + 1, 1);
        v19 += 2;
        *(_QWORD *)(v18 + 16) = v22 + 1;
        v24 = v18 + 16 * v22;
        *(_QWORD *)(v24 + 32) = v21;
        *(_QWORD *)(v24 + 40) = v20;
        --v17;
      }
      while (v17);
      result = swift_bridgeObjectRelease();
      v9 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      result = swift_bridgeObjectRelease();
      v18 = MEMORY[0x1E0DEE9D8];
    }
    *v27 = v26;
    v27[1] = v25;
    v27[2] = (uint64_t)&unk_1E6377C38;
    v27[3] = v10;
    v27[4] = v18;
    v27[5] = v9;
  }
  return result;
}

void sub_1B1B28BE8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1B28444();
    v7 = a3(a1, &type metadata for SubGraphNode.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_1B1B28C44(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1B28C6C(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1B28C94(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1B28D08()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

unint64_t sub_1B1B28D2C(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B1B28D5C()
{
  uint64_t v0;
  int64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 16);
  if (v1)
  {
    v8 = MEMORY[0x1E0DEE9D8];
    sub_1B2029FFC(0, v1, 0);
    v2 = 0;
    do
    {
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v4 = *(_QWORD *)(v8 + 16);
      v3 = *(_QWORD *)(v8 + 24);
      if (v4 >= v3 >> 1)
        sub_1B2029FFC(v3 > 1, v4 + 1, 1);
      ++v2;
      *(_QWORD *)(v8 + 16) = v4 + 1;
      v5 = v8 + 16 * v4;
      *(_QWORD *)(v5 + 32) = 0x74756F627573;
      *(_QWORD *)(v5 + 40) = 0xE600000000000000;
    }
    while (v1 != v2);
  }
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  v6 = sub_1B2228644();
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t sub_1B1B28F18(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B1B28F44(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1B263A8(a1, *(uint64_t **)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_1B1B28F5C(_OWORD *a1)
{
  uint64_t v1;

  return sub_1B1C6BE64(a1, *(uint64_t (**)(_OWORD *))(v1 + 16));
}

void sub_1B1B28F74()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4B7B50)
  {
    sub_1B222826C();
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4B7B50);
  }
}

uint64_t sub_1B1B28FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B28F74();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1B2900C(uint64_t a1)
{
  uint64_t v2;

  sub_1B1B28F74();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t getEnumTagSinglePayload for EntityManager.State(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SubGraphNode.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1B29124 + 4 * byte_1B227A656[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1B29158 + 4 * byte_1B227A651[v4]))();
}

uint64_t sub_1B1B29158(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B29160(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B29168);
  return result;
}

uint64_t sub_1B1B29174(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B2917CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1B29180(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B29188(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SubGraphNode.CodingKeys()
{
  return &type metadata for SubGraphNode.CodingKeys;
}

unint64_t sub_1B1B291A8()
{
  unint64_t result;

  result = qword_1EEF5AC48;
  if (!qword_1EEF5AC48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A858, &type metadata for SubGraphNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC48);
  }
  return result;
}

unint64_t sub_1B1B291F0()
{
  unint64_t result;

  result = qword_1EEF5AC50;
  if (!qword_1EEF5AC50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A790, &type metadata for SubGraphNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC50);
  }
  return result;
}

unint64_t sub_1B1B29238()
{
  unint64_t result;

  result = qword_1EEF5AC58;
  if (!qword_1EEF5AC58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A7B8, &type metadata for SubGraphNode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC58);
  }
  return result;
}

uint64_t sub_1B1B2927C(uint64_t a1, _QWORD *a2)
{
  uint64_t result;
  _BYTE v4[80];

  result = sub_1B1B2A86C(a1, (uint64_t)v4);
  *a2 = qword_1B227AAF0[v4[64]];
  return result;
}

uint64_t sub_1B1B292BC()
{
  uint64_t v0;
  _BYTE v2[80];

  sub_1B1B2A86C(v0, (uint64_t)v2);
  return qword_1B227AB70[v2[64]];
}

void sub_1B1B292F0()
{
  uint64_t v0;
  _BYTE v1[80];

  sub_1B1B2A86C(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1B1B2932C()
{
  sub_1B2228C98();
  return 0;
}

void sub_1B1B29638()
{
  uint64_t v0;
  _BYTE v1[80];

  sub_1B1B2A86C(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_1B1B29678()
{
  uint64_t v0;
  int v1;

  *(_QWORD *)(v0 + 24) = MEMORY[0x1E0DEB188];
  *(_DWORD *)v0 = v1;
}

void sub_1B1B29888()
{
  uint64_t v0;
  _BYTE v1[80];

  sub_1B1B2A86C(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

uint64_t sub_1B1B298D0()
{
  sub_1B222A078();
  return sub_1B222A09C();
}

void sub_1B1B29B38()
{
  uint64_t v0;
  _BYTE v1[80];

  sub_1B1B2A86C(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_1B1B29B74()
{
  _QWORD *v0;
  uint64_t v1;
  unsigned int v2;

  v1 = (*v0 << 6) + (*v0 >> 2) - 0x61C8864680B583EBLL;
  *v0 ^= (v2 - 0x61C8864680B583EBLL + ((v1 ^ *v0) << 6) + (((unint64_t)v1 ^ *v0) >> 2)) ^ v1;
}

BOOL sub_1B1B2A144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v4[80];
  _BYTE v5[40];
  _BYTE v6[8];
  uint64_t v7;
  char v8;

  sub_1B1B2A894(a1 + 24, (uint64_t)v5);
  sub_1B1B2A894((uint64_t)v5, (uint64_t)v6);
  if ((v8 & 1) != 0)
    return 0;
  v3 = v7;
  sub_1B1B2A86C(v1, (uint64_t)v4);
  return v3 == qword_1B227AB70[v4[64]];
}

uint64_t sub_1B1B2A1B4()
{
  uint64_t v0;
  _BYTE v2[80];

  sub_1B1B2A86C(v0, (uint64_t)v2);
  sub_1B222A06C();
  sub_1B1B29888();
  return sub_1B222A0C0();
}

void sub_1B1B2A200()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B1B2A86C(v0, (uint64_t)&v1);
  sub_1B1B29888();
}

uint64_t sub_1B1B2A23C()
{
  uint64_t v0;
  _BYTE v2[80];

  sub_1B1B2A86C(v0, (uint64_t)v2);
  sub_1B222A06C();
  sub_1B1B29888();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B2A28C(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE v5[80];
  _BYTE v6[80];

  sub_1B1B2A86C(a1, (uint64_t)v5);
  sub_1B1B2A86C(a2, (uint64_t)v6);
  sub_1B1B2A920((uint64_t)v5);
  return v3 & 1;
}

uint64_t sub_1B1B2A2D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  __int128 v6;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B1B292BC();
  sub_1B19FC264((uint64_t)v4, v5);
  type metadata accessor for MTLDataType(0);
  sub_1B1B2BC08(&qword_1EEF616B0, (uint64_t)&protocol conformance descriptor for MTLDataType);
  sub_1B2229BA4();
  if (!v2)
  {
    sub_1B1B2A86C(v1, (uint64_t)&v6);
    __asm { BR              X10 }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

void sub_1B1B2A70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_1B19FC264((uint64_t)&a18, a21);
  sub_1B2229B74();
  JUMPOUT(0x1B1B2A6DCLL);
}

void sub_1B1B2A740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_1B19FC264((uint64_t)&a18, a21);
  sub_1B2229BB0();
  JUMPOUT(0x1B1B2A6DCLL);
}

void sub_1B1B2A774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  sub_1B19FC264((uint64_t)&a18, a21);
  sub_1B2229BC8();
  JUMPOUT(0x1B1B2A6DCLL);
}

uint64_t sub_1B1B2A7A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[80];

  result = sub_1B1B2B304(a1, (uint64_t)v5);
  if (!v2)
    return sub_1B1B2A86C((uint64_t)v5, a2);
  return result;
}

uint64_t sub_1B1B2A7EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v4;

  sub_1B1B2A86C(v1, (uint64_t)&v4);
  return sub_1B1B2A2D4(a1);
}

void sub_1B1B2A838()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B1B2A86C(v0, (uint64_t)&v1);
  sub_1B1B292F0();
}

uint64_t sub_1B1B2A86C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  v2 = *(_OWORD *)(a1 + 16);
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a1 + 48);
  *(_BYTE *)(a2 + 64) = *(_BYTE *)(a1 + 64);
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  return a2;
}

uint64_t sub_1B1B2A894(uint64_t a1, uint64_t a2)
{
  initializeWithTake for MeshBuffer(a2, a1);
  return a2;
}

uint64_t sub_1B1B2A8D0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1B2A8E0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1B2A8F0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1B2A900()
{
  return swift_deallocObject();
}

uint64_t sub_1B1B2A910()
{
  return swift_deallocObject();
}

void sub_1B1B2A920(uint64_t a1)
{
  _BYTE v1[80];

  sub_1B1B2A86C(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

BOOL sub_1B1B2A964()
{
  uint64_t v0;
  uint64_t v1;
  float v2;
  float v5;
  char v6;

  v2 = *(float *)(v1 - 144);
  sub_1B1B2A86C(v0, (uint64_t)&v5);
  return !v6 && v2 == v5;
}

uint64_t sub_1B1B2AE34@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v2 = 0uLL;
  v3 = 0;
  v4 = 0;
  v5 = 0;
  v6 = 0;
  switch(result)
  {
    case 3:
      break;
    case 4:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 1;
      break;
    case 5:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 2;
      break;
    case 6:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 3;
      break;
    case 7:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v2 = xmmword_1B2244E40;
      v6 = 4;
      break;
    case 8:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 5;
      break;
    case 9:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 6;
      break;
    case 10:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 7;
      break;
    case 11:
      v5 = 0;
      v2 = xmmword_1B2244DB0;
      v6 = 8;
      v3 = 0x3F80000000000000;
      v4 = 1065353216;
      break;
    case 12:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 9;
      break;
    case 13:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 10;
      break;
    case 14:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 11;
      break;
    case 15:
      v2 = xmmword_1B2244DB0;
      v6 = 12;
      v3 = 0x3F80000000000000;
      v4 = 1065353216;
      v5 = 0x3F80000000000000;
      break;
    case 29:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 14;
      break;
    case 33:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 15;
      break;
    case 53:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = 13;
      break;
    default:
      v3 = 0;
      v4 = 0;
      v5 = 0;
      v6 = -1;
      break;
  }
  *(_OWORD *)a2 = v2;
  *(_QWORD *)(a2 + 16) = v3;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = v4;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 64) = v6;
  return result;
}

void sub_1B1B2AFD8(uint64_t a1)
{
  _BYTE v1[72];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_1B1B2A86C(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

_OWORD *sub_1B1B2B02C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, __int128 a9, __int128 a10, __int128 a11, __int128 a12, __int128 a13, __int128 a14, __int128 a15, __int128 a16, __int128 a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  void *v27;
  uint64_t v28;
  _OWORD *result;
  __int128 v30;
  __int128 v31;

  result = objc_msgSend(v27, sel_constantDataAtIndex_, *(_QWORD *)(v28 + 16));
  *result = v30;
  result[1] = v31;
  return result;
}

void sub_1B1B2B1FC(uint64_t a1)
{
  _BYTE v1[72];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  sub_1B1B2A86C(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

void sub_1B1B2B248()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;

  *(_OWORD *)(v1 + v0) = v2;
}

uint64_t sub_1B1B2B304@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unsigned int v13;
  uint64_t (*v14)(uint64_t, _QWORD, unint64_t);
  uint64_t (*v15)(void);
  uint64_t (*v16)(void);
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE v31[24];
  uint64_t v32;
  uint64_t v33;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  type metadata accessor for MTLDataType(0);
  sub_1B19FC264((uint64_t)v31, v32);
  sub_1B1B2BC08(&qword_1ED4BA640, (uint64_t)&protocol conformance descriptor for MTLDataType);
  sub_1B2229AA8();
  v6 = v21;
  switch(v21)
  {
    case 3:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B2229A84();
      v7 = 0;
      v8 = 0;
      v18 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v19 = v13;
      v20 = 0;
      break;
    case 4:
      v14 = (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD20];
      sub_1B1A19D70(0, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1A19C00((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v14, MEMORY[0x1E0DEDD40]);
      sub_1B2229AA8();
      v7 = 0;
      v8 = 0;
      v18 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v19 = v21;
      v20 = 0;
      v12 = 1;
      break;
    case 5:
      v15 = MEMORY[0x1E0DEDD50];
      sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDD50]);
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1A19C00((unint64_t *)&qword_1ED4B7310, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v15, MEMORY[0x1E0DEDD70]);
      sub_1B2229AA8();
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v18 = 0;
      v19 = v21;
      v20 = v22;
      v12 = 2;
      break;
    case 6:
      v16 = MEMORY[0x1E0DEDDA8];
      sub_1B1A19D70(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))MEMORY[0x1E0DEDDA8]);
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1A19C00((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, _QWORD, unint64_t))v16, MEMORY[0x1E0DEDDC8]);
      sub_1B2229AA8();
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v18 = 0;
      v19 = v21;
      v20 = v22;
      v12 = 3;
      break;
    case 7:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BE68();
      sub_1B2229AA8();
      v7 = 0;
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v18 = 0;
      v19 = v21;
      v20 = v22;
      v12 = 4;
      break;
    case 8:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BE24();
      sub_1B2229AA8();
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v18 = 0;
      v19 = v21;
      v20 = v22;
      v12 = 5;
      goto LABEL_17;
    case 9:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BDE0();
      sub_1B2229AA8();
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v18 = 0;
      v19 = v21;
      v20 = v22;
      v12 = 6;
      goto LABEL_17;
    case 10:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BD9C();
      sub_1B2229AA8();
      v8 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v18 = 0;
      v19 = v21;
      v7 = v23;
      v20 = v22;
      v12 = 7;
      break;
    case 11:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BD58();
      sub_1B2229AA8();
      v10 = 0;
      v11 = 0;
      v7 = v23;
      v19 = v21;
      v20 = v22;
      v8 = v24;
      v12 = 8;
      goto LABEL_15;
    case 12:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BD14();
      sub_1B2229AA8();
      v10 = 0;
      v11 = 0;
      v7 = v23;
      v19 = v21;
      v20 = v22;
      v8 = v24;
      v12 = 9;
LABEL_15:
      v9 = v26;
      v18 = v25;
      break;
    case 13:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BCD0();
      sub_1B2229AA8();
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v18 = 0;
      v19 = v21;
      v20 = v22;
      v12 = 10;
LABEL_17:
      v7 = v23;
      v8 = v24;
      break;
    case 14:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BC8C();
      sub_1B2229AA8();
      v7 = v23;
      v19 = v21;
      v20 = v22;
      v8 = v24;
      v18 = v25;
      v9 = v26;
      v12 = 11;
      goto LABEL_20;
    case 15:
      sub_1B19FC264((uint64_t)v31, v32);
      sub_1B1B2BC48();
      sub_1B2229AA8();
      v7 = v23;
      v19 = v21;
      v20 = v22;
      v8 = v24;
      v18 = v25;
      v9 = v26;
      v12 = 12;
LABEL_20:
      v10 = v27;
      v11 = v28;
      break;
    case 29:
      sub_1B19FC264((uint64_t)v31, v32);
      v17 = sub_1B2229AB4();
      v20 = 0;
      v7 = 0;
      v8 = 0;
      v18 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 14;
      goto LABEL_24;
    case 33:
      sub_1B19FC264((uint64_t)v31, v32);
      v17 = sub_1B2229AC0();
      v20 = 0;
      v7 = 0;
      v8 = 0;
      v18 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 15;
LABEL_24:
      v19 = v17;
      break;
    case 53:
      sub_1B19FC264((uint64_t)v31, v32);
      v7 = 0;
      v8 = 0;
      v18 = 0;
      v9 = 0;
      v10 = 0;
      v11 = 0;
      v19 = sub_1B2229A6C() & 1;
      v20 = 0;
      v12 = 13;
      break;
    default:
      sub_1B19FA198((uint64_t)v31, (uint64_t)&v21);
      v29 = 0;
      v30 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      v33 = v6;
      sub_1B22295EC();
      sub_1B22294CC();
      swift_allocError();
      sub_1B222949C();
      swift_bridgeObjectRelease();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v21);
      swift_willThrow();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v19;
  *(_QWORD *)(a2 + 8) = v20;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)(a2 + 24) = v8;
  *(_QWORD *)(a2 + 32) = v18;
  *(_QWORD *)(a2 + 40) = v9;
  *(_QWORD *)(a2 + 48) = v10;
  *(_QWORD *)(a2 + 56) = v11;
  *(_BYTE *)(a2 + 64) = v12;
  return result;
}

uint64_t sub_1B1B2BC08(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for MTLDataType(255);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1B2BC48()
{
  unint64_t result;

  result = qword_1ED4B8720;
  if (!qword_1ED4B8720)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22855E4, &type metadata for Float4x4Coder);
    atomic_store(result, (unint64_t *)&qword_1ED4B8720);
  }
  return result;
}

unint64_t sub_1B1B2BC8C()
{
  unint64_t result;

  result = qword_1EEF5AC78;
  if (!qword_1EEF5AC78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22855BC, &type metadata for Float4x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC78);
  }
  return result;
}

unint64_t sub_1B1B2BCD0()
{
  unint64_t result;

  result = qword_1EEF5AC80;
  if (!qword_1EEF5AC80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285594, &type metadata for Float4x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC80);
  }
  return result;
}

unint64_t sub_1B1B2BD14()
{
  unint64_t result;

  result = qword_1EEF5AC88;
  if (!qword_1EEF5AC88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228556C, &type metadata for Float3x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC88);
  }
  return result;
}

unint64_t sub_1B1B2BD58()
{
  unint64_t result;

  result = qword_1EEF5AC90;
  if (!qword_1EEF5AC90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285544, &type metadata for Float3x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC90);
  }
  return result;
}

unint64_t sub_1B1B2BD9C()
{
  unint64_t result;

  result = qword_1EEF5AC98;
  if (!qword_1EEF5AC98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228551C, &type metadata for Float3x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5AC98);
  }
  return result;
}

unint64_t sub_1B1B2BDE0()
{
  unint64_t result;

  result = qword_1EEF5ACA0;
  if (!qword_1EEF5ACA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22854F4, &type metadata for Float2x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACA0);
  }
  return result;
}

unint64_t sub_1B1B2BE24()
{
  unint64_t result;

  result = qword_1EEF5ACA8;
  if (!qword_1EEF5ACA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22854CC, &type metadata for Float2x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACA8);
  }
  return result;
}

unint64_t sub_1B1B2BE68()
{
  unint64_t result;

  result = qword_1EEF5ACB0;
  if (!qword_1EEF5ACB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22854A4, &type metadata for Float2x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACB0);
  }
  return result;
}

unint64_t sub_1B1B2BEAC()
{
  unint64_t result;

  result = qword_1EEF5ACB8;
  if (!qword_1EEF5ACB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228547C, &type metadata for Float4x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACB8);
  }
  return result;
}

unint64_t sub_1B1B2BEF0()
{
  unint64_t result;

  result = qword_1EEF5ACC0;
  if (!qword_1EEF5ACC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285454, &type metadata for Float4x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACC0);
  }
  return result;
}

unint64_t sub_1B1B2BF34()
{
  unint64_t result;

  result = qword_1EEF5ACC8;
  if (!qword_1EEF5ACC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228542C, &type metadata for Float4x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACC8);
  }
  return result;
}

unint64_t sub_1B1B2BF78()
{
  unint64_t result;

  result = qword_1EEF5ACD0;
  if (!qword_1EEF5ACD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285404, &type metadata for Float3x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACD0);
  }
  return result;
}

unint64_t sub_1B1B2BFBC()
{
  unint64_t result;

  result = qword_1EEF5ACD8;
  if (!qword_1EEF5ACD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22853DC, &type metadata for Float3x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACD8);
  }
  return result;
}

unint64_t sub_1B1B2C000()
{
  unint64_t result;

  result = qword_1EEF5ACE0;
  if (!qword_1EEF5ACE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22853B4, &type metadata for Float3x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACE0);
  }
  return result;
}

unint64_t sub_1B1B2C044()
{
  unint64_t result;

  result = qword_1EEF5ACE8;
  if (!qword_1EEF5ACE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228538C, &type metadata for Float2x4Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACE8);
  }
  return result;
}

unint64_t sub_1B1B2C088()
{
  unint64_t result;

  result = qword_1EEF5ACF0;
  if (!qword_1EEF5ACF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2285364, &type metadata for Float2x3Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACF0);
  }
  return result;
}

unint64_t sub_1B1B2C0CC()
{
  unint64_t result;

  result = qword_1EEF5ACF8;
  if (!qword_1EEF5ACF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228533C, &type metadata for Float2x2Coder);
    atomic_store(result, (unint64_t *)&qword_1EEF5ACF8);
  }
  return result;
}

__n128 initializeWithCopy for DataValue(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for DataValue(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF1 && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 241);
  v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 <= 0xF)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DataValue(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 241;
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF1)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
      *(_BYTE *)(result + 64) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1B2C1D4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DataValue()
{
  return &type metadata for DataValue;
}

unint64_t sub_1B1B2C1F0()
{
  unint64_t result;

  result = qword_1EEF5AD00;
  if (!qword_1EEF5AD00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227AA84, &type metadata for DataValue);
    atomic_store(result, (unint64_t *)&qword_1EEF5AD00);
  }
  return result;
}

_QWORD *sub_1B1B2C234(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  const void *v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  int64_t v41;
  __int128 v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _BYTE v58[832];
  _BYTE v59[840];
  uint64_t v60;

  sub_1B1B1F358();
  v48 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v47 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1B222820C();
  v45 = *(_QWORD *)(v5 - 8);
  v46 = v5;
  MEMORY[0x1E0C80A78](v5, v6);
  v44 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 64);
  v40 = a1 + 64;
  v9 = 1 << *(_BYTE *)(a1 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  v13 = 0;
  v41 = v12;
  v38 = v12 - 6;
  v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v49 = a1;
  v37 = a1 + 112;
  v43 = 0x80000001B232F790;
  v42 = xmmword_1B226D240;
  while (v11)
  {
    v14 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v15 = v14 | (v13 << 6);
LABEL_20:
    sub_1B1B41294(*(_QWORD *)(v49 + 56) + 832 * v15, (uint64_t)v58, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    sub_1B1B41294((uint64_t)v58, (uint64_t)v59, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    v18 = sub_1B1B41574((uint64_t)v59);
    sub_1B1B429E8(v58, sub_1B1B4157C);
    if (v18 == 1)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v39 = sub_1B1C6549C(0, v39[2] + 1, 1, v39);
      v32 = v39[2];
      v31 = v39[3];
      if (v32 >= v31 >> 1)
        v39 = sub_1B1C6549C(v31 > 1, v32 + 1, 1, v39);
      sub_1B1B41294((uint64_t)v58, (uint64_t)&v54, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
      nullsub_16(&v54);
      v33 = v39;
      v39[2] = v32 + 1;
      memcpy(&v33[103 * v32 + 4], v34, 0x338uLL);
    }
    else
    {
      v53 = v11;
      if (qword_1ED4BF430 != -1)
        swift_once();
      v54 = 0;
      v55 = 0xE000000000000000;
      v52 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      v56 = v54;
      v57 = v55;
      sub_1B2228890();
      sub_1B1B41294((uint64_t)v58, (uint64_t)&v54, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
      sub_1B1A02758(0, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
      sub_1B22295EC();
      v19 = v56;
      v20 = v57;
      v21 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v60 = v13;
      v22 = qword_1ED4D0FD0;
      v23 = qword_1ED4BF688;
      swift_retain();
      if (v23 != -1)
        swift_once();
      sub_1B1B42948();
      v24 = swift_allocObject();
      *(_OWORD *)(v24 + 16) = v42;
      *(_QWORD *)(v24 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v24 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v24 + 32) = v19;
      *(_QWORD *)(v24 + 40) = v20;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v50 = v19;
      v51 = v22;
      v25 = v44;
      sub_1B2228200();
      v26 = v48[12];
      v27 = v48[16];
      v28 = v20;
      v29 = (uint64_t)v47;
      v30 = &v47[v48[20]];
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v47, v25, v46);
      *(_BYTE *)(v29 + v26) = v21;
      *(_QWORD *)(v29 + v27) = 0;
      *(_QWORD *)v30 = v50;
      *((_QWORD *)v30 + 1) = v28;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1B429AC(v29);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B1B429E8(v58, sub_1B1B41D0C);
      v13 = v60;
      v11 = v53;
    }
  }
  v16 = v13 + 1;
  if (v13 + 1 >= v41)
    goto LABEL_33;
  v17 = *(_QWORD *)(v40 + 8 * v16);
  if (v17)
    goto LABEL_19;
  v16 = v13 + 2;
  if (v13 + 2 >= v41)
    goto LABEL_33;
  v17 = *(_QWORD *)(v40 + 8 * v16);
  if (v17)
    goto LABEL_19;
  v16 = v13 + 3;
  if (v13 + 3 >= v41)
    goto LABEL_33;
  v17 = *(_QWORD *)(v40 + 8 * v16);
  if (v17)
    goto LABEL_19;
  v16 = v13 + 4;
  if (v13 + 4 >= v41)
    goto LABEL_33;
  v17 = *(_QWORD *)(v40 + 8 * v16);
  if (v17)
    goto LABEL_19;
  v16 = v13 + 5;
  if (v13 + 5 >= v41)
    goto LABEL_33;
  v17 = *(_QWORD *)(v40 + 8 * v16);
  if (v17)
  {
LABEL_19:
    v11 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v13 = v16;
    goto LABEL_20;
  }
  while (v38 != v13)
  {
    v17 = *(_QWORD *)(v37 + 8 * v13++);
    if (v17)
    {
      v16 = v13 + 5;
      goto LABEL_19;
    }
  }
LABEL_33:
  swift_release();
  return v39;
}

_QWORD *sub_1B1B2C7FC(uint64_t a1)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  __int128 v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  char v84;
  void *v85;
  unint64_t v86;
  void *v87;

  sub_1B1B1F358();
  v60 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v59 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_1B222820C();
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58, v5);
  v56 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v52 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain();
  v12 = 0;
  v53 = v11;
  v50 = v11 - 6;
  v61 = a1;
  v49 = a1 + 112;
  v51 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v55 = 0x80000001B232F760;
  v54 = xmmword_1B226D240;
  while (v10)
  {
    v71 = (v10 - 1) & v10;
    v13 = __clz(__rbit64(v10)) | (v12 << 6);
LABEL_20:
    v16 = *(_QWORD *)(v61 + 56) + 80 * v13;
    v18 = *(void **)v16;
    v17 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v20 = *(_QWORD *)(v16 + 24);
    v22 = *(_QWORD *)(v16 + 32);
    v21 = *(_QWORD *)(v16 + 40);
    v24 = *(_QWORD *)(v16 + 48);
    v23 = *(_QWORD *)(v16 + 56);
    v25 = *(void **)(v16 + 64);
    v26 = *(unsigned __int8 *)(v16 + 72);
    v72 = v17;
    v73 = v19;
    v87 = v25;
    if (v26 == 1)
    {
      v40 = v21;
      sub_1B1B3FCA8(v18, v17, v19, v20, v22, v21, v24, v23, v25, 1);
      v41 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v51 = sub_1B1C655C4(0, v51[2] + 1, 1, v51);
      v43 = v51[2];
      v42 = v51[3];
      if (v43 >= v42 >> 1)
        v51 = sub_1B1C655C4(v42 > 1, v43 + 1, 1, v51);
      v44 = v51;
      v51[2] = v43 + 1;
      v45 = &v44[9 * v43];
      v10 = v71;
      v46 = v72;
      v45[4] = v18;
      v45[5] = v46;
      v45[6] = v73;
      v45[7] = v20;
      v45[8] = v22;
      v45[9] = v40;
      v45[10] = v24;
      v45[11] = v41;
      v45[12] = v87;
    }
    else
    {
      v70 = v12;
      v27 = v19;
      v28 = v17;
      v74 = v21;
      sub_1B1B3FCA8(v18, v17, v19, v20, v22, v21, v24, v23, v25, v26);
      if (qword_1ED4BF430 != -1)
        swift_once();
      v75 = 0;
      v76 = 0xE000000000000000;
      v63 = qword_1ED4D0FB0;
      swift_retain();
      sub_1B2229430();
      v85 = v75;
      v86 = v76;
      sub_1B2228890();
      v65 = v18;
      v75 = v18;
      v76 = v28;
      v77 = v27;
      v78 = v20;
      v66 = v20;
      v67 = v22;
      v79 = v22;
      v80 = v74;
      v81 = v24;
      v82 = v23;
      v83 = v87;
      v64 = v26;
      v84 = v26;
      sub_1B1A02758(0, (unint64_t *)&unk_1EEF5AE70, (uint64_t)&type metadata for ShaderCache.ComputePipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
      sub_1B22295EC();
      v30 = v85;
      v29 = v86;
      v31 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v68 = v24;
      v69 = v23;
      v32 = qword_1ED4D0FD0;
      v33 = qword_1ED4BF688;
      swift_retain();
      if (v33 != -1)
        swift_once();
      sub_1B1B42948();
      v34 = swift_allocObject();
      *(_OWORD *)(v34 + 16) = v54;
      *(_QWORD *)(v34 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v34 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v34 + 32) = v30;
      *(_QWORD *)(v34 + 40) = v29;
      swift_bridgeObjectRetain();
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v35 = v56;
      sub_1B2228200();
      v36 = v60[12];
      v62 = v32;
      v37 = v60[16];
      v38 = (uint64_t)v59;
      v39 = &v59[v60[20]];
      (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v59, v35, v58);
      *(_BYTE *)(v38 + v36) = v31;
      *(_QWORD *)(v38 + v37) = 0;
      *(_QWORD *)v39 = v30;
      *((_QWORD *)v39 + 1) = v29;
      swift_bridgeObjectRetain();
      sub_1B2228428();
      swift_release();
      sub_1B1B429AC(v38);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B1B3FDA4(v65, v72, v73, v66, v67, v74, v68, v69, v87, v64);
      v12 = v70;
      v10 = v71;
    }
  }
  v14 = v12 + 1;
  if (v12 + 1 >= v53)
    goto LABEL_33;
  v15 = *(_QWORD *)(v52 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v14 = v12 + 2;
  if (v12 + 2 >= v53)
    goto LABEL_33;
  v15 = *(_QWORD *)(v52 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v14 = v12 + 3;
  if (v12 + 3 >= v53)
    goto LABEL_33;
  v15 = *(_QWORD *)(v52 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v14 = v12 + 4;
  if (v12 + 4 >= v53)
    goto LABEL_33;
  v15 = *(_QWORD *)(v52 + 8 * v14);
  if (v15)
    goto LABEL_19;
  v14 = v12 + 5;
  if (v12 + 5 >= v53)
    goto LABEL_33;
  v15 = *(_QWORD *)(v52 + 8 * v14);
  if (v15)
  {
LABEL_19:
    v71 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v12 = v14;
    goto LABEL_20;
  }
  while (v50 != v12)
  {
    v15 = *(_QWORD *)(v49 + 8 * v12++);
    if (v15)
    {
      v14 = v12 + 5;
      goto LABEL_19;
    }
  }
LABEL_33:
  swift_release();
  return v51;
}

uint64_t sub_1B1B2CED8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  _BYTE v15[832];
  _BYTE v16[840];
  uint64_t v17;

  v17 = MEMORY[0x1E0DEE9D8];
  v13 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v5 = 0;
  v14 = (unint64_t)(v2 + 63) >> 6;
  v12 = swift_bridgeObjectRetain() + 112;
  while (v4)
  {
    v6 = __clz(__rbit64(v4));
    v4 &= v4 - 1;
    v7 = v6 | (v5 << 6);
LABEL_20:
    sub_1B1B41294(*(_QWORD *)(a1 + 56) + 832 * v7, (uint64_t)v15, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    sub_1B1B41294((uint64_t)v15, (uint64_t)v16, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    if (!sub_1B1B41574((uint64_t)v16))
    {
      nullsub_16(v16);
      v10 = sub_1B1B429E8(v15, sub_1B1B4157C);
      MEMORY[0x1B5E2064C](v10);
      if (*(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
  }
  v8 = v5 + 1;
  if (v5 + 1 >= v14)
    goto LABEL_24;
  v9 = *(_QWORD *)(v13 + 8 * v8);
  if (v9)
    goto LABEL_19;
  v8 = v5 + 2;
  if (v5 + 2 >= v14)
    goto LABEL_24;
  v9 = *(_QWORD *)(v13 + 8 * v8);
  if (v9)
    goto LABEL_19;
  v8 = v5 + 3;
  if (v5 + 3 >= v14)
    goto LABEL_24;
  v9 = *(_QWORD *)(v13 + 8 * v8);
  if (v9)
    goto LABEL_19;
  v8 = v5 + 4;
  if (v5 + 4 >= v14)
    goto LABEL_24;
  v9 = *(_QWORD *)(v13 + 8 * v8);
  if (v9)
    goto LABEL_19;
  v8 = v5 + 5;
  if (v5 + 5 >= v14)
    goto LABEL_24;
  v9 = *(_QWORD *)(v13 + 8 * v8);
  if (v9)
  {
LABEL_19:
    v4 = (v9 - 1) & v9;
    v7 = __clz(__rbit64(v9)) + (v8 << 6);
    v5 = v8;
    goto LABEL_20;
  }
  while (v14 - 6 != v5)
  {
    v9 = *(_QWORD *)(v12 + 8 * v5++);
    if (v9)
    {
      v8 = v5 + 5;
      goto LABEL_19;
    }
  }
LABEL_24:
  swift_release();
  return v17;
}

uint64_t sub_1B1B2D12C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v15;
  uint64_t v16;

  v16 = MEMORY[0x1E0DEE9D8];
  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  v7 = 0;
  v15 = swift_bridgeObjectRetain() + 112;
  while (v5)
  {
    v8 = __clz(__rbit64(v5));
    v5 &= v5 - 1;
    v9 = v8 | (v7 << 6);
LABEL_20:
    v12 = *(_QWORD *)(a1 + 56) + 80 * v9;
    if (!*(_BYTE *)(v12 + 72))
    {
      v13 = sub_1B1B3FCA8(*(id *)v12, *(_QWORD *)(v12 + 8), *(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24), *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), *(_QWORD *)(v12 + 48), *(_QWORD *)(v12 + 56), *(void **)(v12 + 64), 0);
      MEMORY[0x1B5E2064C](v13);
      if (*(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v16 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        sub_1B2228AF4();
      sub_1B2228B30();
      sub_1B2228AD0();
    }
  }
  v10 = v7 + 1;
  if (v7 + 1 >= v6)
    goto LABEL_24;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  if (v11)
    goto LABEL_19;
  v10 = v7 + 2;
  if (v7 + 2 >= v6)
    goto LABEL_24;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  if (v11)
    goto LABEL_19;
  v10 = v7 + 3;
  if (v7 + 3 >= v6)
    goto LABEL_24;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  if (v11)
    goto LABEL_19;
  v10 = v7 + 4;
  if (v7 + 4 >= v6)
    goto LABEL_24;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  if (v11)
    goto LABEL_19;
  v10 = v7 + 5;
  if (v7 + 5 >= v6)
    goto LABEL_24;
  v11 = *(_QWORD *)(v2 + 8 * v10);
  if (v11)
  {
LABEL_19:
    v5 = (v11 - 1) & v11;
    v9 = __clz(__rbit64(v11)) + (v10 << 6);
    v7 = v10;
    goto LABEL_20;
  }
  while (v6 - 6 != v7)
  {
    v11 = *(_QWORD *)(v15 + 8 * v7++);
    if (v11)
    {
      v10 = v7 + 5;
      goto LABEL_19;
    }
  }
LABEL_24:
  swift_release();
  return v16;
}

void sub_1B1B2D314()
{
  id v0;
  void *v1;
  unsigned __int8 v2;

  v0 = objc_msgSend((id)objc_opt_self(), sel_standardUserDefaults);
  v1 = (void *)sub_1B2228728();
  v2 = objc_msgSend(v0, sel_BOOLForKey_, v1);

  byte_1ED4BF710 = v2;
}

void sub_1B1B2D3BC()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  id v16;
  unint64_t v17;
  uint64_t v18;

  v1 = v0;
  v18 = *MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A30]), sel_init);
  v3 = (void *)sub_1B2228074();
  objc_msgSend(v2, sel_setUrl_, v3);

  v4 = *(void **)(v1 + 16);
  v16 = 0;
  v5 = objc_msgSend(v4, sel_newBinaryArchiveWithDescriptor_error_, v2, &v16);
  v6 = v16;
  if (v5)
  {
    v7 = swift_unknownObjectRetain();
    MEMORY[0x1B5E2064C](v7);
    if (*(_QWORD *)((*(_QWORD *)(v1 + 152) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v1 + 152) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    if (qword_1ED4BF430 != -1)
      swift_once();
    v16 = 0;
    v17 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v16 = (id)0xD00000000000001FLL;
    v17 = 0x80000001B232F740;
    sub_1B2228110();
    sub_1B1B42658();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v8 = (uint64_t)v16;
    v9 = v17;
    v10 = sub_1B2228EA8();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v16 = 0;
    swift_retain();
    sub_1B1F1AD70(v10, (uint64_t *)&v16, v8, v9);

    swift_release();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
  }
  else
  {
    v11 = v6;
    v12 = (void *)sub_1B2227FB4();

    swift_willThrow();
    if (qword_1ED4BF430 != -1)
      swift_once();
    v16 = 0;
    v17 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228110();
    sub_1B1B42658();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    sub_1B22295EC();
    v13 = (uint64_t)v16;
    v14 = v17;
    v15 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v16 = 0;
    swift_retain();
    sub_1B1F1AD70(v15, (uint64_t *)&v16, v13, v14);
    swift_release();
    swift_bridgeObjectRelease();

    swift_release();
  }
}

id sub_1B1B2D7A8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB38E0]), sel_init);
  qword_1ED4BF3D8 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1B2D7D8()
{
  _QWORD *result;

  result = sub_1B1B96F2C(MEMORY[0x1E0DEE9D8]);
  off_1ED4BF460 = result;
  return result;
}

uint64_t sub_1B1B2D7FC(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  _DWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void (*v33)(uint64_t);
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  void *v36;
  unsigned int v37;
  id v38;
  id v39;
  id v40;
  void *v41;
  unsigned __int8 v42;
  void *v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  char *v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  uint64_t v51;
  id v52;
  id v53;
  char *v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t (**v57)();
  id v58;
  int64_t v59;
  uint64_t v60;
  int v61;
  int v62;
  int v63;
  void *v64;
  id v65;
  id v66;
  char *v67;
  uint64_t result;
  void *v69;
  _QWORD v70[2];
  void (*v71)(char *, uint64_t, uint64_t, uint64_t);
  char *v72;
  char *v73;
  id v74;
  id v75;
  char *v76;
  id v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;

  v2 = v1;
  v77 = a1;
  v80 = *MEMORY[0x1E0C80C00];
  v70[1] = *v1;
  v3 = sub_1B2228110();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v72 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = (char *)v70 - v9;
  MEMORY[0x1E0C80A78](v11, v12);
  v14 = (char *)v70 - v13;
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, v15);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (char *)v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (char *)v70 - v22;
  v24 = MEMORY[0x1E0DEE9D8];
  v2[4] = MEMORY[0x1E0DEE9D8];
  v2[5] = sub_1B1B9703C(v24);
  v2[6] = sub_1B1B97158(v24);
  v2[7] = sub_1B1B9728C(v24);
  v2[8] = sub_1B1B973A8(v24);
  v2[9] = sub_1B1B9747C(v24);
  v2[10] = sub_1B1B9747C(v24);
  *((_BYTE *)v2 + 88) = 0;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  v2[18] = 0;
  v2[19] = v24;
  v25 = (uint64_t)v2 + OBJC_IVAR____TtC3VFX11ShaderCache_urlToSaveBinaryArchiveTo;
  v71 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v71((char *)v2 + OBJC_IVAR____TtC3VFX11ShaderCache_urlToSaveBinaryArchiveTo, 1, 1, v3);
  v26 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
  *v26 = 0;
  v26[1] = 0;
  v27 = (char *)v2 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
  v28 = (_DWORD *)swift_slowAlloc();
  *v28 = 0;
  *(_QWORD *)v27 = "lock ShaderCache";
  *((_QWORD *)v27 + 1) = 16;
  v27[16] = 2;
  *((_QWORD *)v27 + 3) = v28;
  v29 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC3VFX11ShaderCache_reloadCallback);
  *v29 = nullsub_16;
  v29[1] = 0;
  if (qword_1ED4BF680 != -1)
    swift_once();
  if (byte_1ED4BF710 == 1)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v30 = sub_1B2228EA8();
    v78 = 1;
    sub_1B1F1AAF0(v30, 0xD000000000000027, 0x80000001B232F6E0, (uint64_t *)&v78);
    swift_release();
  }
  v73 = v14;
  v76 = v10;
  v2[2] = v77;
  v31 = (void *)objc_opt_self();
  swift_unknownObjectRetain();
  v32 = objc_msgSend(v31, sel_standardUserDefaults);
  v33 = (void (*)(uint64_t))MEMORY[0x1E0CAFFF8];
  v70[0] = v25;
  sub_1B1B425E0(v25, (uint64_t)v23, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48);
  v35 = v34(v23, 1, v3);
  sub_1B1B25B94((uint64_t)v23, (unint64_t *)&qword_1ED4BF720, v33);
  if (v35 != 1
    || (v36 = (void *)sub_1B2228728(),
        v37 = objc_msgSend(v32, sel_BOOLForKey_, v36),
        v36,
        v37))
  {
    v38 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A30]), sel_init);
    v78 = 0;
    v39 = objc_msgSend(v77, sel_newBinaryArchiveWithDescriptor_error_, v38, &v78);
    v40 = (id)v78;
    if (!v39)
    {
LABEL_25:
      v69 = v40;
      sub_1B2227FB4();

      swift_willThrow();
      result = swift_unexpectedError();
      __break(1u);
      return result;
    }

    v2[18] = v39;
    swift_unknownObjectRelease();
  }
  v41 = (void *)sub_1B2228728();
  v75 = v32;
  v42 = objc_msgSend(v32, sel_BOOLForKey_, v41);

  *((_BYTE *)v2 + OBJC_IVAR____TtC3VFX11ShaderCache_recordMetalPipelinesScript) = v42;
  v43 = (void *)sub_1B2228728();
  v44 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v43);

  v45 = (void *)sub_1B2228728();
  v46 = (void *)sub_1B2228728();
  v74 = v44;
  v47 = objc_msgSend(v44, sel_URLForResource_withExtension_, v45, v46);

  if (!v47)
  {
    v40 = (id)((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v71)(v19, 1, 1, v3);
    __break(1u);
    goto LABEL_25;
  }
  v48 = v76;
  sub_1B22280C8();

  v49 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
  v49(v19, v48, v3);
  v71(v19, 0, 1, v3);
  v34(v19, 1, v3);
  v50 = v73;
  v49(v73, v19, v3);
  v51 = (uint64_t)v72;
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v72, v50, v3);
  v52 = objc_allocWithZone((Class)type metadata accessor for ShaderLibrary());
  v53 = v77;
  swift_unknownObjectRetain();
  v54 = (char *)sub_1B1B66940(v51, v53, 0, 0x616665642D786676, 0xEB00000000746C75);
  v55 = *(void (**)(char *, uint64_t))(v4 + 8);
  v55(v50, v3);
  v2[3] = v54;
  v56 = swift_allocObject();
  swift_weakInit();
  v57 = (uint64_t (**)())&v54[OBJC_IVAR____TtC3VFX13ShaderLibrary_reloadedNotificationBlock];
  *v57 = sub_1B1B42650;
  v57[1] = (uint64_t (*)())v56;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v78 = 0;
  v79 = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v78 = 0xD000000000000012;
  v79 = 0x80000001B232F630;
  v58 = (id)MTLGetShaderCachePath();
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  v59 = v78;
  v60 = v79;
  v61 = sub_1B2228EA8();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v78 = 0;
  swift_retain();
  sub_1B1F1AD70(v61, (uint64_t *)&v78, v59, v60);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (v2[18])
  {
    swift_retain();
    v62 = sub_1B2228EA8();
    v78 = 0;
    swift_retain();
    sub_1B1F1AD70(v62, (uint64_t *)&v78, 0xD00000000000001ELL, 0x80000001B232F6A0);
    swift_release();
    swift_release();
  }
  if (*((_BYTE *)v2 + OBJC_IVAR____TtC3VFX11ShaderCache_recordMetalPipelinesScript) == 1)
  {
    swift_retain();
    v63 = sub_1B2228EA8();
    v78 = 0;
    swift_retain();
    sub_1B1F1AD70(v63, (uint64_t *)&v78, 0xD000000000000020, 0x80000001B232F670);
    swift_release();
    swift_release();
  }
  v64 = (void *)sub_1B2228728();
  v65 = v75;
  v66 = objc_msgSend(v75, sel_stringForKey_, v64);

  if (v66)
  {
    sub_1B222874C();

    v67 = v76;
    sub_1B2228050();
    swift_bridgeObjectRelease();
    sub_1B1B2D3BC();
    swift_unknownObjectRelease();

    v55(v67, v3);
  }
  else
  {

    swift_unknownObjectRelease();
  }
  return (uint64_t)v2;
}

uint64_t sub_1B1B2E370()
{
  uint64_t result;

  result = swift_weakLoadStrong();
  if (result)
  {
    sub_1B1B2E5D8();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1B2E3AC()
{
  uint64_t v0;

  MEMORY[0x1B5E23F88](*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24), -1, -1);
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B25B94(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_urlToSaveBinaryArchiveTo, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  sub_1B1B3FB0C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation));
  swift_release();
  return v0;
}

uint64_t sub_1B1B2E47C()
{
  sub_1B1B2E3AC();
  return swift_deallocClassInstance();
}

uint64_t sub_1B1B2E4A0()
{
  return type metadata accessor for ShaderCache();
}

uint64_t type metadata accessor for ShaderCache()
{
  uint64_t result;

  result = qword_1ED4BF490;
  if (!qword_1ED4BF490)
    return swift_getSingletonMetadata();
  return result;
}

void sub_1B1B2E4E4()
{
  unint64_t v0;

  sub_1B1792854(319, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t sub_1B1B2E5D8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t);
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  _BOOL8 v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _BOOL8 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v27;
  _QWORD __dst[104];
  _BYTE v29[816];

  v1 = v0;
  v2 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_reloadCallback);
  v3 = swift_retain();
  v2(v3);
  swift_release();
  *(_BYTE *)(v0 + 88) = 1;
  v4 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v4);
  v5 = swift_bridgeObjectRetain();
  v6 = sub_1B1B2C234(v5);
  swift_bridgeObjectRelease();
  v7 = swift_bridgeObjectRetain();
  v8 = sub_1B1B2C7FC(v7);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v4);
  sub_1B1B3BAB8();
  v9 = v6[2];
  if (v9)
  {
    swift_bridgeObjectRetain();
    v10 = v9 - 1;
    for (i = 4; ; i += 103)
    {
      memcpy(__dst, &v6[i], 0x338uLL);
      v12 = __dst[102] != 0;
      memcpy(v29, &__dst[1], 0x328uLL);
      sub_1B1B426A0(__dst);
      v13 = sub_1B1B32B58((uint64_t)v29, v12);
      sub_1B1B427DC(v13, v14);
      sub_1B1B4280C(__dst);
      if (!v10)
        break;
      --v10;
    }
    swift_bridgeObjectRelease();
  }
  v15 = v8[2];
  if (v15)
  {
    swift_bridgeObjectRetain();
    v16 = v8 + 6;
    do
    {
      v17 = *v16;
      v18 = v16[1];
      v19 = v16[2];
      v20 = v16[3];
      v21 = (void *)v16[6];
      v22 = v21 != 0;
      __dst[0] = *(v16 - 1);
      __dst[1] = v17;
      __dst[2] = v18;
      __dst[3] = v19;
      __dst[4] = v20;
      *(_OWORD *)&__dst[5] = *((_OWORD *)v16 + 2);
      v27 = v21;
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1B3947C((uint64_t)__dst, v22, 0);
      v23 = v1;
      v25 = v24;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();

      v1 = v23;
      v16 += 9;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
  }
  *(_BYTE *)(v1 + 88) = 0;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_1B1B2E854(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  void *v7;
  id v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  uint64_t v18;
  unint64_t v19;

  if (a3)
  {
    swift_unknownObjectRetain();
    v7 = (void *)sub_1B2228728();
    v8 = objc_msgSend(a3, sel_newFunctionWithName_, v7);

    if (!v8)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v19 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B19F8F48(0, (unint64_t *)&qword_1ED4BA5D0);
      sub_1B22295EC();
      v9 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v10 = qword_1ED4D0FD0;
      v18 = 0;
      swift_retain();
      v8 = (id)v10;
      sub_1B1F1AD70(v9, &v18, 0, 0xE000000000000000);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B1B40E84();
      swift_allocError();
      *(_QWORD *)v11 = a1;
      *(_QWORD *)(v11 + 8) = a2;
      *(_QWORD *)(v11 + 16) = a3;
      *(_BYTE *)(v11 + 24) = 0;
LABEL_15:
      swift_bridgeObjectRetain();
      swift_willThrow();
    }
  }
  else
  {
    v12 = v3;
    v13 = *(void **)(*(_QWORD *)(v3 + 24) + OBJC_IVAR____TtC3VFX13ShaderLibrary_library);
    swift_unknownObjectRetain();
    v14 = (void *)sub_1B2228728();
    v8 = objc_msgSend(v13, sel_newFunctionWithName_, v14);

    swift_unknownObjectRelease();
    if (!v8)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v19 = 0x80000001B232F1B0;
      sub_1B2228890();
      sub_1B2228890();
      v15 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v18 = 0;
      swift_retain();
      sub_1B1F1AD70(v15, &v18, 0xD000000000000011, 0x80000001B232F1B0);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      v8 = *(id *)(*(_QWORD *)(v12 + 24) + OBJC_IVAR____TtC3VFX13ShaderLibrary_library);
      sub_1B1B40E84();
      swift_allocError();
      *(_QWORD *)v16 = a1;
      *(_QWORD *)(v16 + 8) = a2;
      *(_QWORD *)(v16 + 16) = v8;
      *(_BYTE *)(v16 + 24) = 0;
      swift_unknownObjectRetain();
      goto LABEL_15;
    }
    swift_unknownObjectRetain();
  }
  return v8;
}

id sub_1B1B2EC54(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  id v21;
  void *v22;
  void *v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void (*v42)(__int128 *);
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  os_unfair_lock_s *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  id v51;
  id v52;
  void *v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  char isUniquelyReferenced_nonNull_native;
  os_unfair_lock_s *v57;
  void *v58;
  uint64_t v59;
  os_unfair_lock_s *v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  os_unfair_lock_s *v70;
  char *v71;
  _OWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  NSObject *v75;
  NSObject *v76;
  unint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  int v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t);
  uint64_t v87;
  _QWORD *v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unsigned __int8 v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unsigned __int8 v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  unint64_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  id v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  _BYTE v131[64];
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135[5];
  __int128 v136;
  __int128 v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  char v142[8];
  char v143[8];
  char v144;
  char v145;
  char v146[8];
  char v147[8];
  _QWORD v148[6];
  char v149;
  uint64_t v150;

  v7 = v6;
  v8 = v5;
  v128 = a4;
  v150 = *MEMORY[0x1E0C80C00];
  sub_1B1792854(0, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v110 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v110 - v19;
  v21 = sub_1B1B2E854(a1, a2, a3);
  if (!v6)
  {
    v24 = v22;
    v120 = a1;
    v121 = (unint64_t)v20;
    v118 = a2;
    v119 = v16;
    LODWORD(v124) = a5;
    v25 = v21;
    swift_unknownObjectRetain();
    sub_1B1BD3420(v25, (uint64_t)v24, v128, v135);
    swift_unknownObjectRelease();
    sub_1B1B41294((uint64_t)v135, (uint64_t)&v136, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    if (!*((_QWORD *)&v136 + 1))
    {
      swift_unknownObjectRelease();
      return v25;
    }
    v117 = (_QWORD *)*((_QWORD *)&v136 + 1);
    v122 = v25;
    v127 = v24;
    v128 = 0;
    v139 = v136;
    v140 = v137;
    v26 = v138;
    v141 = v138;
    v116 = v137;
    v114 = v136;
    v115 = *((_QWORD *)&v137 + 1);
    v130 = v138;
    v27 = v136;
    v125 = *((_QWORD *)&v137 + 1);
    v126 = *((_QWORD *)&v136 + 1);
    v28 = sub_1B1BD36A8(v136, *((uint64_t *)&v136 + 1), *((uint64_t *)&v137 + 1), v138);
    v29 = v8;
    v123 = v8 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
    v30 = *(os_unfair_lock_s **)(v8 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
    os_unfair_lock_lock(v30);
    v31 = *(_QWORD *)(v8 + 56);
    if (*(_QWORD *)(v31 + 16) && (v32 = sub_1B1DC3AC8(v28), (v33 & 1) != 0))
    {
      v34 = *(_QWORD *)(v31 + 56) + 56 * v32;
      v7 = *(id *)v34;
      v35 = *(_QWORD *)(v34 + 8);
      v36 = *(_QWORD *)(v34 + 16);
      v37 = *(_QWORD *)(v34 + 24);
      v39 = *(_QWORD *)(v34 + 32);
      v38 = *(_QWORD *)(v34 + 40);
      v40 = *(unsigned __int8 *)(v34 + 48);
      sub_1B1B3C554(*(_QWORD *)v34, v35, v36, v37, v39, v38, *(_BYTE *)(v34 + 48));
      os_unfair_lock_unlock(v30);
      if (v40 == 1)
      {
        swift_bridgeObjectRelease();
        sub_1B1B40080((uint64_t)&v140, (uint64_t)v142);
        sub_1B1B40274((uint64_t)v142);
        swift_unknownObjectRelease();
        sub_1B1B28C6C((uint64_t)&v130);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        v41 = swift_unknownObjectRetain();
        sub_1B1B4029C(v41, v35, v36, v37, v39, v38, 1u);
        return v7;
      }
      type metadata accessor for ShaderCache.FunctionWrapper();
      v72 = (_OWORD *)swift_allocObject();
      v73 = v38;
      v124 = v38;
      v74 = v72;
      v72[1] = 0u;
      v112 = (uint64_t *)(v72 + 1);
      v72[2] = 0u;
      v72[3] = 0u;
      sub_1B1B3C554((uint64_t)v7, v35, v36, v37, v39, v73, 0);
      sub_1B1B3C554((uint64_t)v7, v35, v36, v37, v39, v73, 0);
      v75 = dispatch_group_create();
      v123 = v39;
      v76 = v75;
      dispatch_group_enter(v75);
      v77 = v121;
      sub_1B2228BF0();
      v78 = sub_1B2228C08();
      (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v77, 0, 1, v78);
      v79 = (_QWORD *)swift_allocObject();
      v79[2] = v76;
      v79[3] = v74;
      v111 = v79;
      v79[4] = v7;
      v114 = v35;
      v115 = v36;
      v116 = v37;
      sub_1B1B42CA8((uint64_t)v7, v35, v36, v37, v123, v124, v40);
      v80 = qword_1ED4BF430;
      v81 = v40;
      v82 = v76;
      v117 = v74;
      swift_retain();
      if (v80 != -1)
        swift_once();
      v113 = v81;
      v83 = qword_1ED4BF658;
      swift_retain();
      v84 = (uint64_t)v119;
      if (v83 != -1)
        swift_once();
      v85 = qword_1ED4D0FD0;
      swift_retain();
      swift_release();
      v86 = (void (*)(uint64_t))MEMORY[0x1E0DF0750];
      v87 = v121;
      sub_1B1B425E0(v121, v84, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
      v88 = (_QWORD *)swift_allocObject();
      v88[2] = 0;
      v88[3] = 0;
      v88[4] = v85;
      v88[5] = &unk_1EEF5AE88;
      v88[6] = v111;
      sub_1B1B3EBD0(v84, (uint64_t)&unk_1EEF5AE98, (uint64_t)v88);
      swift_release();
      sub_1B1B25B94(v87, (unint64_t *)&unk_1ED4BA530, v86);
      v89 = (uint64_t *)v82;
      sub_1B2228EFC();
      v90 = *v112;
      if (*v112)
      {
        v91 = v117[6];
        v92 = v117[7];
        v93 = (char *)v117[4];
        v120 = v117[5];
        v121 = v91;
        v118 = v92;
        v119 = v93;
        sub_1B1B42D70(v90);
        v95 = v114;
        v94 = v115;
        v96 = v116;
        v97 = v123;
        v98 = v124;
        v112 = v89;
        v99 = v113;
        sub_1B1B4029C((uint64_t)v7, v114, v115, v116, v123, v124, v113);
        swift_bridgeObjectRelease();
        sub_1B1B40080((uint64_t)&v140, (uint64_t)v143);
        sub_1B1B40274((uint64_t)v143);
        swift_unknownObjectRelease();
        sub_1B1B28C6C((uint64_t)&v130);

        swift_unknownObjectRelease();
        sub_1B1B4029C((uint64_t)v7, v95, v94, v96, v97, v98, v99);
        swift_release();
        swift_unknownObjectRelease();
        sub_1B1B4029C((uint64_t)v7, v95, v94, v96, v97, v98, v99);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return (id)v90;
      }
      *(_QWORD *)&v132 = 0;
      *((_QWORD *)&v132 + 1) = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v132 = 0xD000000000000011;
      *((_QWORD *)&v132 + 1) = 0x80000001B232F7C0;
      sub_1B2228890();
      v101 = *((_QWORD *)&v132 + 1);
      v100 = v132;
      sub_1B1B40E84();
      v102 = swift_allocError();
      *(_OWORD *)v103 = __PAIR128__(v101, v100);
      *(_QWORD *)(v103 + 16) = 0;
      *(_BYTE *)(v103 + 24) = 1;
      v128 = v102;
      swift_willThrow();
      swift_release();

      v105 = v114;
      v104 = v115;
      v106 = v116;
      v108 = v123;
      v107 = v124;
      v109 = v113;
      sub_1B1B4029C((uint64_t)v7, v114, v115, v116, v123, v124, v113);
      sub_1B1B4029C((uint64_t)v7, v105, v104, v106, v108, v107, v109);
      sub_1B1B3C5D8((uint64_t)v7, v105, v104, v106, v108, v107, 0);
      v71 = &v144;
    }
    else
    {
      v121 = v27;
      os_unfair_lock_unlock(v30);
      v42 = *(void (**)(__int128 *))(v8 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
      v43 = v126;
      if (v42)
      {
        if (v42 == (void (*)(__int128 *))1)
        {
          v44 = v26;
          if (qword_1ED4BF430 != -1)
            swift_once();
          *(_QWORD *)&v132 = 0;
          *((_QWORD *)&v132 + 1) = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          v129 = v132;
          sub_1B2228890();
          v132 = v139;
          v133 = v140;
          v134 = v141;
          sub_1B22295EC();
          v45 = v129;
          v46 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          *(_QWORD *)&v132 = 0;
          swift_retain();
          sub_1B1F1AD70(v46, (uint64_t *)&v132, v45, *((uint64_t *)&v45 + 1));
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          v43 = v126;
          v26 = v44;
        }
        else
        {
          v47 = *(os_unfair_lock_s **)(v123 + 24);
          swift_retain();
          os_unfair_lock_lock(v47);
          *((_QWORD *)&v133 + 1) = &type metadata for FunctionDescriptor;
          v48 = swift_allocObject();
          *(_QWORD *)&v132 = v48;
          v49 = v140;
          *(_OWORD *)(v48 + 16) = v139;
          *(_OWORD *)(v48 + 32) = v49;
          *(_QWORD *)(v48 + 48) = v141;
          sub_1B1B40080((uint64_t)&v140, (uint64_t)v146);
          swift_bridgeObjectRetain();
          sub_1B1B40D5C((uint64_t)v146);
          swift_unknownObjectRetain();
          sub_1B1B28C44((uint64_t)&v130);
          v42(&v132);
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v132);
          os_unfair_lock_unlock(v47);
          sub_1B1B3FB0C((unint64_t)v42);
        }
      }
      *(_QWORD *)&v132 = sub_1B1BD24F0();
      *((_QWORD *)&v132 + 1) = v50;
      sub_1B2228890();
      *(_QWORD *)&v129 = v28;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B1B3F748("makeFunction", 12, 2u, v132, *((unint64_t *)&v132 + 1), v28, (uint64_t)v131);
      v51 = sub_1B1B402B4(v121, v43, v26, v124 & 1);
      *(_QWORD *)&v132 = 0;
      v7 = objc_msgSend(v127, sel_newFunctionWithDescriptor_error_, v51, &v132);

      v52 = (id)v132;
      if (v7)
      {
        sub_1B1BD24F0();
        v53 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        objc_msgSend(v7, sel_setLabel_, v53);

        v54 = v123;
        v55 = *(os_unfair_lock_s **)(v123 + 24);
        os_unfair_lock_lock(v55);
        sub_1B1B40080((uint64_t)&v140, (uint64_t)v147);
        v148[0] = v7;
        v148[1] = v114;
        v148[2] = v117;
        v148[3] = v116;
        v148[4] = v115;
        v148[5] = v26;
        v149 = 1;
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B1B28C44((uint64_t)&v130);
        swift_unknownObjectRetain();
        sub_1B1B40D5C((uint64_t)v147);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v132 = *(_QWORD *)(v29 + 56);
        *(_QWORD *)(v29 + 56) = 0x8000000000000000;
        sub_1B1B85CC4((uint64_t)v148, v28, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v29 + 56) = v132;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v55);
        v57 = *(os_unfair_lock_s **)(v54 + 24);
        os_unfair_lock_lock(v57);
        sub_1B1B3BCD8(v29 + 128);
        os_unfair_lock_unlock(v57);
        sub_1B1B3FB20((uint64_t)v131);
        swift_bridgeObjectRelease();
        sub_1B1B40274((uint64_t)v147);
        swift_unknownObjectRelease();
        sub_1B1B28C6C((uint64_t)&v130);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        return v7;
      }
      v58 = v52;
      v59 = sub_1B2227FB4();

      v128 = v59;
      swift_willThrow();
      v60 = *(os_unfair_lock_s **)(v123 + 24);
      os_unfair_lock_lock(v60);
      v61 = sub_1B1DC3AC8(v28);
      if ((v62 & 1) != 0)
      {
        v63 = v61;
        v64 = swift_isUniquelyReferenced_nonNull_native();
        v65 = *(_QWORD *)(v29 + 56);
        *(_QWORD *)&v132 = v65;
        *(_QWORD *)(v29 + 56) = 0x8000000000000000;
        if ((v64 & 1) == 0)
        {
          sub_1B1EAAB90();
          v65 = v132;
        }
        v66 = *(_QWORD *)(v65 + 56) + 56 * v63;
        v67 = *(_QWORD *)v66;
        v68 = *(_QWORD *)(v66 + 8);
        v69 = *(_QWORD *)(v66 + 16);
        v7 = *(id *)(v66 + 24);
        v124 = *(_QWORD *)(v66 + 32);
        v121 = *(_QWORD *)(v66 + 40);
        LODWORD(v120) = *(unsigned __int8 *)(v66 + 48);
        sub_1B1EA5B44(v63, v65);
        *(_QWORD *)(v29 + 56) = v65;
        swift_bridgeObjectRelease();
        sub_1B1B3C5D8(v67, v68, v69, (uint64_t)v7, v124, v121, v120);
      }
      os_unfair_lock_unlock(v60);
      swift_willThrow();
      v70 = *(os_unfair_lock_s **)(v123 + 24);
      os_unfair_lock_lock(v70);
      sub_1B1B3BCD8(v29 + 128);
      os_unfair_lock_unlock(v70);
      sub_1B1B3FB20((uint64_t)v131);
      v71 = &v145;
    }
    swift_bridgeObjectRelease();
    sub_1B1B40080((uint64_t)&v140, (uint64_t)v71);
    sub_1B1B40274((uint64_t)v71);
    swift_unknownObjectRelease();
    sub_1B1B28C6C((uint64_t)&v130);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  return v7;
}

uint64_t sub_1B1B2F900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;

  v3[8] = a2;
  v3[9] = a3;
  v4 = (_QWORD *)swift_task_alloc();
  v3[10] = v4;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  *v4 = v3;
  v4[1] = sub_1B1B2F994;
  return sub_1B2228C14();
}

uint64_t sub_1B1B2F994()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 88) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B1B2F9F8()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *(NSObject **)(v0 + 64);
  v1 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 56);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v1 + 16) = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 24) = v3;
  *(_QWORD *)(v1 + 32) = v4;
  *(_OWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 56) = v5;
  sub_1B1B42BB0(v6);
  dispatch_group_leave(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B2FA60()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B2FA94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)(v6 + 504) = a4;
  *(_QWORD *)(v6 + 512) = v5;
  *(_BYTE *)(v6 + 65) = a5;
  *(_QWORD *)(v6 + 488) = a2;
  *(_QWORD *)(v6 + 496) = a3;
  *(_QWORD *)(v6 + 480) = a1;
  sub_1B1792854(0, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  *(_QWORD *)(v6 + 520) = swift_task_alloc();
  *(_QWORD *)(v6 + 528) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1B1B2FB18()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  _QWORD *v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  os_unfair_lock_s *v37;
  uint64_t v38;
  __int128 v39;
  os_unfair_lock_s *v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  _QWORD *v53;
  uint64_t v54;
  os_unfair_lock_s *v55;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];

  v1 = sub_1B1B2E854(*(_QWORD *)(v0 + 480), *(_QWORD *)(v0 + 488), *(void **)(v0 + 496));
  *(_QWORD *)(v0 + 536) = v1;
  *(_QWORD *)(v0 + 544) = v2;
  v3 = v1;
  v4 = v2;
  v5 = *(_QWORD *)(v0 + 504);
  swift_unknownObjectRetain();
  sub_1B1BD3420(v3, v4, v5, (uint64_t *)(v0 + 264));
  swift_unknownObjectRelease();
  sub_1B1B41294(v0 + 264, v0 + 344, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  if (!*(_QWORD *)(v0 + 352))
  {
    swift_unknownObjectRelease();
    goto LABEL_14;
  }
  v6 = (_OWORD *)(v0 + 224);
  v7 = *(_QWORD *)(v0 + 512);
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 376);
  v8 = *(_OWORD *)(v0 + 360);
  *(_OWORD *)(v0 + 224) = *(_OWORD *)(v0 + 344);
  *(_OWORD *)(v0 + 240) = v8;
  v9 = *(_QWORD *)(v0 + 248);
  v10 = *(_QWORD *)(v0 + 256);
  *(_QWORD *)(v0 + 448) = v10;
  *(_QWORD *)(v0 + 552) = v9;
  v11 = *(_QWORD *)(v0 + 224);
  v12 = *(_QWORD *)(v0 + 232);
  *(_QWORD *)(v0 + 560) = v12;
  v63 = v0 + 448;
  v13 = sub_1B1BD36A8(v11, v12, v9, v10);
  *(_QWORD *)(v0 + 568) = v13;
  v14 = OBJC_IVAR____TtC3VFX11ShaderCache_lock;
  *(_QWORD *)(v0 + 576) = OBJC_IVAR____TtC3VFX11ShaderCache_lock;
  v15 = v7 + v14;
  v16 = *(os_unfair_lock_s **)(v7 + v14 + 24);
  os_unfair_lock_lock(v16);
  v17 = *(_QWORD *)(v7 + 56);
  if (*(_QWORD *)(v17 + 16) && (v18 = sub_1B1DC3AC8(v13), (v19 & 1) != 0))
  {
    v20 = *(_QWORD *)(v17 + 56) + 56 * v18;
    v21 = *(_QWORD *)v20;
    *(_QWORD *)(v0 + 584) = *(_QWORD *)v20;
    v22 = *(_QWORD *)(v20 + 8);
    *(_QWORD *)(v0 + 592) = v22;
    v23 = *(_QWORD *)(v20 + 16);
    *(_QWORD *)(v0 + 600) = v23;
    v24 = *(_QWORD *)(v20 + 24);
    *(_QWORD *)(v0 + 608) = v24;
    v25 = *(_QWORD *)(v20 + 32);
    *(_QWORD *)(v0 + 616) = v25;
    v26 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v0 + 624) = v26;
    v27 = *(unsigned __int8 *)(v20 + 48);
    *(_BYTE *)(v0 + 66) = v27;
    v61 = v21;
    sub_1B1B3C554(v21, v22, v23, v24, v25, v26, v27);
    os_unfair_lock_unlock(v16);
    if (v27 == 1)
    {
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B1B40080(v0 + 240, v0 + 456);
      sub_1B1B40274(v0 + 456);
      swift_unknownObjectRelease();
      sub_1B1B28C6C(v63);
      swift_unknownObjectRelease();
      v3 = (void *)v61;
      v28 = swift_unknownObjectRetain();
      sub_1B1B4029C(v28, v22, v23, v24, v25, v26, 1u);
LABEL_14:
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void *))(v0 + 8))(v3);
    }
    sub_1B1B3C554(v61, v22, v23, v24, v25, v26, 0);
    sub_1B1B3C554(v61, v22, v23, v24, v25, v26, 0);
    v58 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 632) = v58;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    *v58 = v0;
    v58[1] = sub_1B1B302F4;
  }
  else
  {
    v60 = v15;
    v62 = v13;
    v59 = v0 + 432;
    v29 = *(_QWORD *)(v0 + 512);
    os_unfair_lock_unlock(v16);
    v30 = *(void (**)(uint64_t))(v29 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
    v31 = &unk_1ED4BF000;
    if (v30)
    {
      if (v30 == (void (*)(uint64_t))1)
      {
        if (qword_1ED4BF430 != -1)
          swift_once();
        v64[0] = 0;
        v64[1] = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        *(_QWORD *)(v0 + 416) = 0;
        *(_QWORD *)(v0 + 424) = 0xE000000000000000;
        sub_1B2228890();
        v32 = *(_OWORD *)(v0 + 240);
        *(_OWORD *)(v0 + 304) = *v6;
        *(_OWORD *)(v0 + 320) = v32;
        *(_QWORD *)(v0 + 336) = *(_QWORD *)(v0 + 256);
        sub_1B22295EC();
        v33 = *(_QWORD *)(v0 + 416);
        v34 = *(_QWORD *)(v0 + 424);
        v35 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v64[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v35, v64, v33, v34);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v31 = (_QWORD *)&unk_1ED4BF000;
      }
      else
      {
        v37 = *(os_unfair_lock_s **)(v15 + 24);
        swift_retain();
        os_unfair_lock_lock(v37);
        *(_QWORD *)(v0 + 408) = &type metadata for FunctionDescriptor;
        v38 = swift_allocObject();
        *(_QWORD *)(v0 + 384) = v38;
        v39 = *(_OWORD *)(v0 + 240);
        *(_OWORD *)(v38 + 16) = *v6;
        *(_OWORD *)(v38 + 32) = v39;
        *(_QWORD *)(v38 + 48) = *(_QWORD *)(v0 + 256);
        sub_1B1B40080(v0 + 240, v0 + 472);
        swift_bridgeObjectRetain();
        sub_1B1B40D5C(v0 + 472);
        swift_unknownObjectRetain();
        sub_1B1B28C44(v63);
        v30(v0 + 384);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 384);
        v40 = v37;
        v31 = &unk_1ED4BF000;
        os_unfair_lock_unlock(v40);
        sub_1B1B3FB0C((unint64_t)v30);
      }
    }
    v41 = *(_QWORD *)(v0 + 528);
    v42 = *(_QWORD *)(v0 + 512);
    v43 = *(_BYTE *)(v0 + 65);
    sub_1B2228BF0();
    v44 = sub_1B2228C08();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v41, 0, 1, v44);
    sub_1B1B40080(v0 + 240, v59);
    v45 = swift_allocObject();
    v46 = *(_OWORD *)(v0 + 240);
    *(_OWORD *)(v45 + 16) = *v6;
    *(_OWORD *)(v45 + 32) = v46;
    *(_QWORD *)(v45 + 48) = *(_QWORD *)(v0 + 256);
    *(_QWORD *)(v45 + 56) = v62;
    *(_QWORD *)(v45 + 64) = v42;
    *(_BYTE *)(v45 + 72) = v43;
    *(_QWORD *)(v45 + 80) = v4;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B1B28C44(v63);
    sub_1B1B40D5C(v59);
    v47 = qword_1ED4BF430;
    swift_retain();
    if (v47 != -1)
      swift_once();
    v48 = v31[203];
    swift_retain();
    if (v48 != -1)
      swift_once();
    v49 = *(_QWORD *)(v0 + 528);
    v50 = *(_QWORD *)(v0 + 520);
    v51 = qword_1ED4D0FD0;
    swift_retain();
    swift_release();
    v52 = (void (*)(uint64_t))MEMORY[0x1E0DF0750];
    sub_1B1B425E0(v49, v50, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
    v53 = (_QWORD *)swift_allocObject();
    v53[2] = 0;
    v53[3] = 0;
    v53[4] = v51;
    v53[5] = &unk_1EEF5AD78;
    v53[6] = v45;
    v54 = sub_1B1B3EBD0(v50, (uint64_t)&unk_1EEF5AD88, (uint64_t)v53);
    *(_QWORD *)(v0 + 648) = v54;
    sub_1B1B25B94(v49, (unint64_t *)&unk_1ED4BA530, v52);
    v55 = *(os_unfair_lock_s **)(v60 + 24);
    os_unfair_lock_lock(v55);
    *(_QWORD *)(v0 + 16) = v54;
    *(_OWORD *)(v0 + 24) = 0u;
    *(_OWORD *)(v0 + 40) = 0u;
    *(_OWORD *)(v0 + 49) = 0u;
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v64[0] = *(_QWORD *)(v7 + 56);
    *(_QWORD *)(v7 + 56) = 0x8000000000000000;
    sub_1B1B85CC4(v0 + 16, v62, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v7 + 56) = v64[0];
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(v55);
    v57 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 656) = v57;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    *v57 = v0;
    v57[1] = sub_1B1B304B4;
  }
  return sub_1B2228C14();
}

uint64_t sub_1B1B302F4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 640) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B1B30358()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_BYTE *)(v0 + 66);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 592);
  v7 = *(_QWORD *)(v0 + 584);
  swift_unknownObjectRelease();
  sub_1B1B4029C(v7, v6, v5, v4, v3, v2, v1);
  swift_bridgeObjectRelease();
  sub_1B1B40080(v0 + 240, v0 + 464);
  sub_1B1B40274(v0 + 464);
  swift_unknownObjectRelease();
  sub_1B1B28C6C(v0 + 448);
  swift_unknownObjectRelease();
  sub_1B1B4029C(v7, v6, v5, v4, v3, v2, v1);
  sub_1B1B4029C(v7, v6, v5, v4, v3, v2, v1);
  v8 = *(_QWORD *)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v8);
}

uint64_t sub_1B1B304B4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 664) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B1B30518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  os_unfair_lock_s *v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v13 = *(_QWORD *)(v0 + 568);
  v1 = *(_QWORD *)(v0 + 512);
  v2 = v1 + *(_QWORD *)(v0 + 576);
  v3 = *(void **)(v0 + 176);
  v12 = *(_QWORD *)(v0 + 184);
  v5 = *(_QWORD *)(v0 + 192);
  v4 = *(_QWORD *)(v0 + 200);
  v7 = *(_QWORD *)(v0 + 208);
  v6 = *(_QWORD *)(v0 + 216);
  swift_unknownObjectRetain();
  sub_1B1BD24F0();
  v8 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v3, sel_setLabel_, v8);

  swift_unknownObjectRelease();
  v9 = *(os_unfair_lock_s **)(v2 + 24);
  os_unfair_lock_lock(v9);
  *(_QWORD *)(v0 + 72) = v3;
  *(_QWORD *)(v0 + 80) = v12;
  *(_QWORD *)(v0 + 88) = v5;
  *(_QWORD *)(v0 + 96) = v4;
  *(_QWORD *)(v0 + 104) = v7;
  *(_QWORD *)(v0 + 112) = v6;
  *(_BYTE *)(v0 + 120) = 1;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = 0x8000000000000000;
  sub_1B1B85CC4(v0 + 72, v13, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v1 + 56) = v14;
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v9);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1B40274(v0 + 432);
  swift_unknownObjectRelease();
  sub_1B1B28C6C(v0 + 448);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void *))(v0 + 8))(v3);
}

uint64_t sub_1B1B30700()
{
  uint64_t v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_BYTE *)(v0 + 66);
  v2 = *(_QWORD *)(v0 + 624);
  v3 = *(_QWORD *)(v0 + 616);
  v4 = *(_QWORD *)(v0 + 608);
  v5 = *(_QWORD *)(v0 + 600);
  v6 = *(_QWORD *)(v0 + 592);
  v7 = *(_QWORD *)(v0 + 584);
  swift_unknownObjectRelease();
  sub_1B1B4029C(v7, v6, v5, v4, v3, v2, v1);
  swift_bridgeObjectRelease();
  sub_1B1B40080(v0 + 240, v0 + 440);
  sub_1B1B40274(v0 + 440);
  swift_unknownObjectRelease();
  sub_1B1B28C6C(v0 + 448);
  swift_unknownObjectRelease();
  sub_1B1B4029C(v7, v6, v5, v4, v3, v2, v1);
  sub_1B1B4029C(v7, v6, v5, v4, v3, v2, v1);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B30834()
{
  uint64_t v0;
  uint64_t v1;
  os_unfair_lock_s *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 568);
  v2 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 512) + *(_QWORD *)(v0 + 576) + 24);
  os_unfair_lock_lock(v2);
  v3 = sub_1B1DC3AC8(v1);
  if ((v4 & 1) != 0)
  {
    v5 = v3;
    v6 = *(_QWORD *)(v0 + 512);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v8 = *(_QWORD *)(v6 + 56);
    *(_QWORD *)(v6 + 56) = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_1B1EAAB90();
    v9 = *(_QWORD *)(v0 + 512);
    v10 = *(_QWORD *)(v8 + 56) + 56 * v5;
    v11 = *(_QWORD *)(v10 + 8);
    v18 = *(_QWORD *)v10;
    v12 = *(_QWORD *)(v10 + 16);
    v13 = *(_QWORD *)(v10 + 24);
    v14 = *(_QWORD *)(v10 + 32);
    v15 = *(_QWORD *)(v10 + 40);
    v17 = *(_BYTE *)(v10 + 48);
    sub_1B1EA5B44(v5, v8);
    *(_QWORD *)(v9 + 56) = v8;
    swift_bridgeObjectRelease();
    sub_1B1B3C5D8(v18, v11, v12, v13, v14, v15, v17);
  }
  os_unfair_lock_unlock(v2);
  swift_willThrow();
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1B40274(v0 + 432);
  swift_unknownObjectRelease();
  sub_1B1B28C6C(v0 + 448);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B309B8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v6 + 328) = a5;
  *(_QWORD *)(v6 + 248) = a3;
  *(_QWORD *)(v6 + 256) = a4;
  *(_QWORD *)(v6 + 232) = a1;
  *(_QWORD *)(v6 + 240) = a2;
  v7 = *a2;
  v8 = a2[1];
  *(_QWORD *)(v6 + 264) = a6;
  *(_QWORD *)(v6 + 272) = v7;
  *(_QWORD *)(v6 + 280) = v8;
  *(_OWORD *)(v6 + 288) = *((_OWORD *)a2 + 1);
  *(_QWORD *)(v6 + 304) = a2[4];
  return swift_task_switch();
}

uint64_t sub_1B1B309F4()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  id v6;
  id v8;
  uint64_t v9;
  unint64_t v10;

  v1 = *(_BYTE *)(v0 + 328);
  v8 = *(id *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 240);
  v2 = *(_QWORD *)(v0 + 248);
  v9 = sub_1B1BD24F0();
  v10 = v4;
  sub_1B2228890();
  *(_QWORD *)(v0 + 144) = v2;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1B3F748("asyncMakeFunction", 17, 2u, v9, v10, v2, v0 + 80);
  v5 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(v0 + 224) = v5;
  *(_OWORD *)(v0 + 184) = *(_OWORD *)v3;
  v6 = sub_1B1B402B4(*(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 192), v5, v1);
  *(_QWORD *)(v0 + 312) = v6;
  *(_QWORD *)(v0 + 56) = v0 + 216;
  *(_QWORD *)(v0 + 16) = v0;
  *(_QWORD *)(v0 + 24) = sub_1B1B30B60;
  *(_QWORD *)(v0 + 176) = swift_continuation_init();
  *(_QWORD *)(v0 + 144) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 152) = 0x40000000;
  *(_QWORD *)(v0 + 160) = sub_1B1B30D48;
  *(_QWORD *)(v0 + 168) = &unk_1E63E8AE0;
  objc_msgSend(v8, sel_newFunctionWithDescriptor_completionHandler_, v6, v0 + 144);
  return swift_continuation_await();
}

uint64_t sub_1B1B30B60()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 320) = *(_QWORD *)(*(_QWORD *)v0 + 48);
  return swift_task_switch();
}

uint64_t sub_1B1B30BC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  __int128 v10;
  __int128 v11;

  v1 = *(_QWORD *)(v0 + 304);
  v10 = *(_OWORD *)(v0 + 272);
  v11 = *(_OWORD *)(v0 + 288);
  v2 = *(_QWORD *)(v0 + 256);
  v3 = *(_QWORD *)(v0 + 232);
  v4 = *(_QWORD *)(v0 + 240);

  v5 = v4 + 24;
  v6 = v4 + 16;
  v7 = *(_QWORD *)(v0 + 216);
  sub_1B1B40080(v6, v0 + 208);
  sub_1B1B40C98(v5, v0 + 200);
  *(_QWORD *)v3 = v7;
  *(_OWORD *)(v3 + 8) = v10;
  *(_OWORD *)(v3 + 24) = v11;
  *(_QWORD *)(v3 + 40) = v1;
  v8 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  sub_1B1AE7408(v0 + 184);
  sub_1B1B40D5C(v0 + 208);
  sub_1B1B40D5C(v0 + 200);
  sub_1B1B28C44(v0 + 224);
  os_unfair_lock_lock(v8);
  sub_1B1B3BCD8(v2 + 128);
  os_unfair_lock_unlock(v8);
  sub_1B1B3FB20(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B30CC8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(void **)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 256);
  swift_willThrow();

  v3 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v3);
  sub_1B1B3BCD8(v2 + 128);
  os_unfair_lock_unlock(v3);
  sub_1B1B3FB20(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B30D48(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v4;
  id v5;

  if (a3)
  {
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    swift_allocError();
    *v4 = a3;
    v5 = a3;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
    swift_unknownObjectRetain();
    return swift_continuation_throwingResume();
  }
}

uint64_t sub_1B1B30DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)(v7 + 200) = a7;
  *(_QWORD *)(v7 + 128) = a5;
  *(_QWORD *)(v7 + 136) = a6;
  *(_QWORD *)(v7 + 112) = a3;
  *(_QWORD *)(v7 + 120) = a4;
  *(_QWORD *)(v7 + 96) = a1;
  *(_QWORD *)(v7 + 104) = a2;
  sub_1B1792854(0, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  *(_QWORD *)(v7 + 144) = swift_task_alloc();
  *(_QWORD *)(v7 + 152) = swift_task_alloc();
  sub_1B1B423B8();
  *(_QWORD *)(v7 + 160) = v8;
  *(_QWORD *)(v7 + 168) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v7 + 176) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t sub_1B1B30E88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  char v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v22 = *(_BYTE *)(v0 + 200);
    v23 = sub_1B2228C08();
    v24 = *(_QWORD *)(v23 - 8);
    v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
    swift_bridgeObjectRetain();
    v3 = (_QWORD *)(v1 + 40);
    v4 = (void (*)(uint64_t))MEMORY[0x1E0DF0750];
    while (1)
    {
      v26 = v2;
      v7 = *(_QWORD *)(v0 + 144);
      v6 = *(_QWORD *)(v0 + 152);
      v28 = *(_QWORD *)(v0 + 136);
      v8 = *(_QWORD *)(v0 + 120);
      v27 = *(_QWORD *)(v0 + 128);
      v10 = *(v3 - 1);
      v9 = *v3;
      v25 = v3;
      v21(v6, 1, 1, v23);
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      v12 = (_QWORD *)(v11 + 16);
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = v8;
      *(_QWORD *)(v11 + 40) = v10;
      *(_QWORD *)(v11 + 48) = v9;
      *(_QWORD *)(v11 + 56) = v27;
      *(_QWORD *)(v11 + 64) = v28;
      *(_BYTE *)(v11 + 72) = v22;
      sub_1B1B425E0(v6, v7, (unint64_t *)&unk_1ED4BA530, v4);
      LODWORD(v7) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v7, 1, v23);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v13 = *(_QWORD *)(v0 + 144);
      if ((_DWORD)v7 == 1)
      {
        sub_1B1B25B94(*(_QWORD *)(v0 + 144), (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
        if (!*v12)
          goto LABEL_8;
      }
      else
      {
        sub_1B2228BFC();
        (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v13, v23);
        if (!*v12)
        {
LABEL_8:
          v14 = 0;
          v16 = 0;
          goto LABEL_9;
        }
      }
      swift_getObjectType();
      swift_unknownObjectRetain();
      v14 = sub_1B2228BCC();
      v16 = v15;
      swift_unknownObjectRelease();
LABEL_9:
      v17 = **(_QWORD **)(v0 + 104);
      sub_1B19F8F48(0, (unint64_t *)&unk_1ED4BA650);
      v18 = v16 | v14;
      if (v16 | v14)
      {
        v18 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v14;
        *(_QWORD *)(v0 + 40) = v16;
      }
      v5 = *(_QWORD *)(v0 + 152);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v18;
      *(_QWORD *)(v0 + 64) = v17;
      swift_task_create();
      swift_release();
      v4 = (void (*)(uint64_t))MEMORY[0x1E0DF0750];
      sub_1B1B25B94(v5, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
      v3 = v25 + 2;
      v2 = v26 - 1;
      if (v26 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  *(_QWORD *)(v0 + 72) = MEMORY[0x1E0DEE9D8];
  sub_1B19F8F48(0, (unint64_t *)&unk_1ED4BA650);
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B2228C38();
  v19 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 184) = v19;
  *v19 = v0;
  v19[1] = sub_1B1B311DC;
  return sub_1B2228C44();
}

uint64_t sub_1B1B311DC()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1B1B31244()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v4;

  if (*(_QWORD *)(v0 + 80))
  {
    v1 = swift_unknownObjectRetain();
    MEMORY[0x1B5E2064C](v1);
    if (*(_QWORD *)((*(_QWORD *)(v0 + 72) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v0 + 72) & 0xFFFFFFFFFFFFFF8)
                                                                                       + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    swift_unknownObjectRelease();
    v2 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 192) = v2;
    *v2 = v0;
    v2[1] = sub_1B1B31378;
    return sub_1B2228C44();
  }
  else
  {
    v4 = *(_QWORD **)(v0 + 96);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
    *v4 = *(_QWORD *)(v0 + 72);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1B1B31378()
{
  uint64_t v0;

  swift_task_dealloc();
  if (v0)
    swift_bridgeObjectRelease();
  return swift_task_switch();
}

uint64_t sub_1B1B313E0()
{
  uint64_t v0;

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 8))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 160));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B31444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v13;
  char v15;

  *(_QWORD *)(v8 + 16) = a1;
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v8 + 24) = v13;
  *v13 = v8;
  v13[1] = sub_1B1B314D0;
  return sub_1B1B2FA94(a5, a6, a7, a8, v15);
}

uint64_t sub_1B1B314D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B3154C()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1B1B31564()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  void *v14;
  void *v15;
  id v16;
  os_unfair_lock_s *v17;
  id v18;
  id v19;
  uint64_t v20;
  id v21[2];

  v2 = v1;
  v3 = v0;
  v21[1] = *(id *)MEMORY[0x1E0C80C00];
  v20 = v0 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
  v4 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v4);
  v5 = *(_QWORD *)(v0 + 32);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain_n();
    v7 = v5 + 64;
    while (1)
    {
      v8 = *(_QWORD *)(v7 - 32);
      v9 = *(_QWORD *)(v7 - 24);
      v10 = *(_QWORD *)(v7 - 16);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 == sub_1B22280D4() && v10 == v11)
      {
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      v13 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      v7 += 40;
      if (!--v6)
      {
        swift_bridgeObjectRelease_n();
        v3 = v0;
        v2 = v1;
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease_n();
LABEL_13:
    os_unfair_lock_unlock(v4);
    v3 = v0;
    v2 = v1;
    if (v8)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
LABEL_10:
    os_unfair_lock_unlock(v4);
  }
  v14 = *(void **)(v3 + 16);
  v15 = (void *)sub_1B2228074();
  v21[0] = 0;
  v16 = objc_msgSend(v14, sel_newLibraryWithURL_error_, v15, v21);

  if (v16)
  {
    v17 = *(os_unfair_lock_s **)(v20 + 24);
    v18 = v21[0];
    os_unfair_lock_lock(v17);
    sub_1B1B317B0(v3, v16);
    os_unfair_lock_unlock(v17);
    if (v2)
      __break(1u);
  }
  else
  {
    v19 = v21[0];
    sub_1B2227FB4();

    swift_willThrow();
  }
}

uint64_t sub_1B1B317B0(uint64_t a1, void *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v4 = (void *)sub_1B2228728();
  objc_msgSend(a2, sel_setLabel_, v4);

  swift_unknownObjectRetain();
  v5 = sub_1B22280D4();
  v7 = v6;
  v8 = *(_QWORD **)(a1 + 32);
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 32) = v8;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C656E8(0, v8[2] + 1, 1, v8);
    v8 = (_QWORD *)result;
    *(_QWORD *)(a1 + 32) = result;
  }
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
  {
    result = (uint64_t)sub_1B1C656E8(v10 > 1, v11 + 1, 1, v8);
    v8 = (_QWORD *)result;
    *(_QWORD *)(a1 + 32) = result;
  }
  v8[2] = v11 + 1;
  v12 = &v8[5 * v11];
  v12[4] = a2;
  v12[5] = v5;
  v12[6] = v7;
  v12[7] = 0x7972617262694CLL;
  v12[8] = v13;
  return result;
}

id sub_1B1B31918(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  int64x2_t v49;
  int64x2_t v50;
  BOOL v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t (*v57)(void);
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  void *v66;
  unint64_t v67;
  void *v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD v83[56];
  _BYTE v84[48];
  _QWORD __dst[56];
  _BYTE v86[8];
  _BYTE v87[8];
  uint64_t v88;
  uint64_t v89;

  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B68]), sel_init);
  v77 = a1;
  objc_msgSend(v9, sel_setInputPrimitiveTopology_, *(_QWORD *)(a1 + 736));
  if (a2)
  {
    v10 = objc_msgSend((id)swift_unknownObjectRetain(), sel_functionConstantsDictionary);
    sub_1B1B42540();
    v11 = sub_1B2228530();

    v12 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRelease();
    if (v12
      && (sub_1B1B412E4(v77 + 176, (uint64_t)v87, &qword_1EEF5AE58, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant), sub_1B1B412E4((uint64_t)v87, (uint64_t)&v88, &qword_1EEF5AE58, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant), v88))
    {
      __dst[0] = sub_1B1C7C49C(v88);
      sub_1B1B40D84();
      sub_1B2228944();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  if (a3)
  {
    v13 = objc_msgSend((id)swift_unknownObjectRetain(), sel_functionConstantsDictionary);
    sub_1B1B42540();
    v14 = sub_1B2228530();

    v15 = *(_QWORD *)(v14 + 16);
    swift_bridgeObjectRelease();
    if (v15
      && (sub_1B1B412E4(v77 + 176, (uint64_t)v86, &qword_1EEF5AE58, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant), sub_1B1B412E4((uint64_t)v86, (uint64_t)&v89, &qword_1EEF5AE58, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant), v89))
    {
      __dst[0] = sub_1B1C7C49C(v89);
      sub_1B1B40D84();
      sub_1B2228944();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  objc_msgSend(v9, sel_setVertexFunction_, a2);
  objc_msgSend(v9, sel_setFragmentFunction_, a3);
  v16 = objc_msgSend(v9, sel_fragmentLinkedFunctions);
  v75 = a3;
  v76 = v4;
  v74 = a2;
  if (a4)
  {
    sub_1B19F8F48(0, (unint64_t *)&unk_1ED4BA650);
    v17 = (void *)sub_1B2228AAC();
  }
  else
  {
    v17 = 0;
  }
  objc_msgSend(v16, sel_setPrivateFunctions_, v17);

  v19 = *(_QWORD *)(v77 + 184);
  v18 = *(_QWORD *)(v77 + 192);
  v21 = *(_QWORD *)(v77 + 200);
  v20 = *(_QWORD *)(v77 + 208);
  v71 = *(_QWORD *)(v77 + 216);
  v72 = *(_QWORD *)(v77 + 224);
  v73 = *(_QWORD *)(v77 + 232);
  v78 = *(_QWORD *)(v77 + 240);
  v79 = *(_QWORD *)(v77 + 248);
  v81 = *(_QWORD *)(v77 + 256);
  objc_msgSend(v9, sel_setRasterSampleCount_, *(_QWORD *)(v77 + 264));
  v22 = objc_msgSend(v9, sel_colorAttachments);
  v80 = v9;
  v23 = objc_msgSend(v22, sel_objectAtIndexedSubscript_, 0);

  objc_msgSend(v23, sel_setPixelFormat_, v19);
  v24 = v80;
  v25 = objc_msgSend(v80, sel_colorAttachments);
  v26 = objc_msgSend(v25, sel_objectAtIndexedSubscript_, 1);

  objc_msgSend(v26, sel_setPixelFormat_, v18);
  v27 = objc_msgSend(v80, sel_colorAttachments);
  v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 2);

  objc_msgSend(v28, sel_setPixelFormat_, v21);
  v29 = objc_msgSend(v80, sel_colorAttachments);
  v30 = objc_msgSend(v29, sel_objectAtIndexedSubscript_, 3);

  objc_msgSend(v30, sel_setPixelFormat_, v20);
  v31 = objc_msgSend(v80, sel_colorAttachments);
  v32 = objc_msgSend(v31, sel_objectAtIndexedSubscript_, 4);

  objc_msgSend(v32, sel_setPixelFormat_, v71);
  v33 = objc_msgSend(v80, sel_colorAttachments);
  v34 = objc_msgSend(v33, sel_objectAtIndexedSubscript_, 5);

  objc_msgSend(v34, sel_setPixelFormat_, v72);
  v35 = objc_msgSend(v80, sel_colorAttachments);
  v36 = objc_msgSend(v35, sel_objectAtIndexedSubscript_, 6);

  objc_msgSend(v36, sel_setPixelFormat_, v73);
  v37 = objc_msgSend(v80, sel_colorAttachments);
  v38 = objc_msgSend(v37, sel_objectAtIndexedSubscript_, 7);

  objc_msgSend(v38, sel_setPixelFormat_, v78);
  objc_msgSend(v80, sel_setDepthAttachmentPixelFormat_, v79);
  objc_msgSend(v80, sel_setStencilAttachmentPixelFormat_, v81);
  memcpy(__dst, (const void *)(v77 + 272), 0x1B9uLL);
  v39 = 0;
  v40 = &v83[3];
  do
  {
    memcpy(v83, __dst, 0x1B9uLL);
    v42 = *(v40 - 3);
    v41 = *(v40 - 2);
    v44 = *(v40 - 1);
    v43 = *v40;
    v46 = v40[1];
    v45 = v40[2];
    v82 = *((unsigned __int8 *)v40 + 24);
    v47 = objc_msgSend(v24, sel_colorAttachments);
    v48 = objc_msgSend(v47, sel_objectAtIndexedSubscript_, v39);

    if (v44 == 1
      && ((v49.i64[0] = v42,
           v49.i64[1] = v41,
           v50.i64[0] = v46,
           v50.i64[1] = v45,
           (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1B2245E50, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v50, (int64x2_t)xmmword_1B2246910), (int32x4_t)vceqzq_s64(v49)))) & 0xF) == 0)? (v51 = v43 == 0): (v51 = 0), v51))
    {
      objc_msgSend(v48, sel_setBlendingEnabled_, 0);
    }
    else
    {
      objc_msgSend(v48, sel_setBlendingEnabled_, 1);
      objc_msgSend(v48, sel_setSourceRGBBlendFactor_, v44);
      objc_msgSend(v48, sel_setDestinationRGBBlendFactor_, v43);
      objc_msgSend(v48, sel_setSourceAlphaBlendFactor_, v46);
      objc_msgSend(v48, sel_setDestinationAlphaBlendFactor_, v45);
      objc_msgSend(v48, sel_setRgbBlendOperation_, v42);
      objc_msgSend(v48, sel_setAlphaBlendOperation_, v41);
    }
    ++v39;
    v40 += 7;
    objc_msgSend(v48, sel_setWriteMask_, v82);

    v24 = v80;
  }
  while (v39 != 8);
  objc_msgSend(v80, sel_setRasterizationEnabled_, *(unsigned __int8 *)(v77 + 792));
  v52 = *(unsigned __int8 *)(v77 + 793);
  if (v52 >= 2
    && objc_msgSend(*(id *)(v76 + 16), sel_supportsVertexAmplificationCount_, *(unsigned __int8 *)(v77 + 793)))
  {
    objc_msgSend(v80, sel_setMaxVertexAmplificationCount_, v52);
  }
  v53 = *(_QWORD *)(v77 + 728);
  if (v53)
  {
    v54 = *(_QWORD *)(v77 + 720);
    v55 = objc_allocWithZone(MEMORY[0x1E0CC6BD8]);
    swift_retain();
    v56 = objc_msgSend(v55, sel_init);
    sub_1B1E1D7CC(v56, v54, v53);
    objc_msgSend(v80, sel_setVertexDescriptor_, v56);
    swift_release();

  }
  v57 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(v77 + 744, (uint64_t)v84, &qword_1ED4B9858, (uint64_t)&type metadata for TesselationDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294((uint64_t)v84, (uint64_t)v83, &qword_1ED4B9858, (uint64_t)&type metadata for TesselationDescriptor, (uint64_t (*)(_QWORD, uint64_t))v57);
  v58 = v83[2];
  if (LOBYTE(v83[2]) != 2)
  {
    v59 = v83[0];
    v60 = v83[1];
    v61 = v83[3];
    v62 = v83[4];
    v63 = v83[5];
    objc_msgSend(v80, sel_setTessellationFactorFormat_, 0);
    objc_msgSend(v80, sel_setTessellationPartitionMode_, v59);
    objc_msgSend(v80, sel_setMaxTessellationFactor_, v60);
    objc_msgSend(v80, sel_setTessellationFactorScaleEnabled_, v58 & 1);
    objc_msgSend(v80, sel_setTessellationControlPointIndexType_, v61);
    objc_msgSend(v80, sel_setTessellationFactorStepFunction_, v62);
    objc_msgSend(v80, sel_setTessellationOutputWindingOrder_, v63);
  }
  v64 = objc_msgSend(v74, sel_name);
  sub_1B222874C();

  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (v75)
  {
    v65 = objc_msgSend(v75, sel_name);
    sub_1B222874C();

  }
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v66 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v80, sel_setLabel_, v66);

  v67 = *(_QWORD *)(v76 + 152);
  if (v67 >> 62)
  {
    swift_bridgeObjectRetain();
    v70 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (!v70)
      return v80;
    goto LABEL_35;
  }
  if (*(_QWORD *)((v67 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_35:
    sub_1B19F8F48(0, &qword_1EEF5ADB0);
    swift_bridgeObjectRetain();
    v68 = (void *)sub_1B2228AAC();
    swift_bridgeObjectRelease();
    objc_msgSend(v80, sel_setBinaryArchives_, v68);

  }
  return v80;
}

id sub_1B1B323CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  id v40;
  int64x2_t v41;
  int64x2_t v42;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  void *v53;
  unint64_t v54;
  void *v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  void *__src;
  id v66;
  uint64_t v67;
  uint64_t v68;
  _OWORD __dst[29];

  v66 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B28]), sel_init);
  objc_msgSend(v66, sel_setFragmentFunction_, a4);
  objc_msgSend(v66, sel_setObjectFunction_, a2);
  objc_msgSend(v66, sel_setMeshFunction_, a3);
  v10 = objc_msgSend(v66, sel_fragmentLinkedFunctions);
  v61 = v5;
  if (a5)
  {
    sub_1B19F8F48(0, (unint64_t *)&unk_1ED4BA650);
    a5 = (void *)sub_1B2228AAC();
  }
  objc_msgSend(v10, sel_setPrivateFunctions_, a5);

  v11 = *(_QWORD *)(a1 + 184);
  v12 = *(_QWORD *)(a1 + 192);
  v13 = *(_QWORD *)(a1 + 200);
  v58 = *(_QWORD *)(a1 + 208);
  v59 = *(_QWORD *)(a1 + 216);
  v60 = *(_QWORD *)(a1 + 224);
  v63 = *(_QWORD *)(a1 + 232);
  v64 = *(_QWORD *)(a1 + 240);
  __src = *(void **)(a1 + 248);
  v67 = *(_QWORD *)(a1 + 256);
  v14 = v66;
  objc_msgSend(v66, sel_setRasterSampleCount_, *(_QWORD *)(a1 + 264));
  v15 = objc_msgSend(v66, sel_colorAttachments);
  v16 = objc_msgSend(v15, sel_objectAtIndexedSubscript_, 0);

  objc_msgSend(v16, sel_setPixelFormat_, v11);
  v17 = objc_msgSend(v66, sel_colorAttachments);
  v18 = objc_msgSend(v17, sel_objectAtIndexedSubscript_, 1);

  objc_msgSend(v18, sel_setPixelFormat_, v12);
  v19 = objc_msgSend(v66, sel_colorAttachments);
  v20 = objc_msgSend(v19, sel_objectAtIndexedSubscript_, 2);

  objc_msgSend(v20, sel_setPixelFormat_, v13);
  v21 = objc_msgSend(v66, sel_colorAttachments);
  v22 = objc_msgSend(v21, sel_objectAtIndexedSubscript_, 3);

  objc_msgSend(v22, sel_setPixelFormat_, v58);
  v23 = objc_msgSend(v66, sel_colorAttachments);
  v24 = objc_msgSend(v23, sel_objectAtIndexedSubscript_, 4);

  objc_msgSend(v24, sel_setPixelFormat_, v59);
  v25 = objc_msgSend(v66, sel_colorAttachments);
  v26 = objc_msgSend(v25, sel_objectAtIndexedSubscript_, 5);

  objc_msgSend(v26, sel_setPixelFormat_, v60);
  v27 = objc_msgSend(v66, sel_colorAttachments);
  v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, 6);

  objc_msgSend(v28, sel_setPixelFormat_, v63);
  v29 = objc_msgSend(v66, sel_colorAttachments);
  v30 = objc_msgSend(v29, sel_objectAtIndexedSubscript_, 7);

  objc_msgSend(v30, sel_setPixelFormat_, v64);
  objc_msgSend(v66, sel_setDepthAttachmentPixelFormat_, __src);
  objc_msgSend(v66, sel_setStencilAttachmentPixelFormat_, v67);
  v31 = 0;
  v32 = (char *)&__dst[1] + 8;
  memcpy(__dst, (const void *)(a1 + 272), 0x1B9uLL);
  while (1)
  {
    v34 = *((_QWORD *)v32 - 3);
    v33 = *((_QWORD *)v32 - 2);
    v35 = *((_QWORD *)v32 - 1);
    v36 = *(_QWORD *)v32;
    v38 = *((_QWORD *)v32 + 1);
    v37 = *((_QWORD *)v32 + 2);
    v68 = v32[24];
    v39 = objc_msgSend(v14, sel_colorAttachments);
    v40 = objc_msgSend(v39, sel_objectAtIndexedSubscript_, v31);

    if (v35 != 1)
      goto LABEL_4;
    v41.i64[0] = v34;
    v41.i64[1] = v33;
    v42.i64[0] = v38;
    v42.i64[1] = v37;
    if ((vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_1B2245E50, (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_s64(v42, (int64x2_t)xmmword_1B2246910), (int32x4_t)vceqzq_s64(v41)))) & 0xF) == 0&& v36 == 0)
    {
      objc_msgSend(v40, sel_setBlendingEnabled_, 0);
    }
    else
    {
LABEL_4:
      objc_msgSend(v40, sel_setBlendingEnabled_, 1);
      objc_msgSend(v40, sel_setSourceRGBBlendFactor_, v35);
      objc_msgSend(v40, sel_setDestinationRGBBlendFactor_, v36);
      objc_msgSend(v40, sel_setSourceAlphaBlendFactor_, v38);
      objc_msgSend(v40, sel_setDestinationAlphaBlendFactor_, v37);
      objc_msgSend(v40, sel_setRgbBlendOperation_, v34);
      objc_msgSend(v40, sel_setAlphaBlendOperation_, v33);
    }
    ++v31;
    v32 += 56;
    objc_msgSend(v40, sel_setWriteMask_, v68);

    v14 = v66;
    if (v31 == 8)
      break;
    memcpy(__dst, (const void *)(a1 + 272), 0x1B9uLL);
  }
  objc_msgSend(v66, sel_setRasterizationEnabled_, *(unsigned __int8 *)(a1 + 792));
  v44 = *(unsigned __int8 *)(a1 + 793);
  if (v44 >= 2 && objc_msgSend(*(id *)(v61 + 16), sel_supportsVertexAmplificationCount_, v44))
    objc_msgSend(v66, sel_setMaxVertexAmplificationCount_, v44);
  v45 = *(_OWORD *)(a1 + 128);
  v46 = *(_OWORD *)(a1 + 144);
  v47 = *(_OWORD *)(a1 + 96);
  __dst[7] = *(_OWORD *)(a1 + 112);
  __dst[8] = v45;
  v48 = *(_OWORD *)(a1 + 160);
  __dst[9] = v46;
  __dst[10] = v48;
  v49 = *(_OWORD *)(a1 + 64);
  v50 = *(_OWORD *)(a1 + 80);
  v51 = *(_OWORD *)(a1 + 32);
  __dst[3] = *(_OWORD *)(a1 + 48);
  __dst[4] = v49;
  __dst[5] = v50;
  __dst[6] = v47;
  v52 = *(_OWORD *)(a1 + 16);
  __dst[0] = *(_OWORD *)a1;
  __dst[1] = v52;
  __dst[2] = v51;
  sub_1B2034800();
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A0C0();
  sub_1B1B40D84();
  sub_1B2228944();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v53 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  objc_msgSend(v66, sel_setLabel_, v53);

  v54 = *(_QWORD *)(v61 + 152);
  if (v54 >> 62)
  {
    swift_bridgeObjectRetain();
    v57 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (!v57)
      return v66;
    goto LABEL_19;
  }
  if (*(_QWORD *)((v54 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    sub_1B19F8F48(0, &qword_1EEF5ADB0);
    swift_bridgeObjectRetain();
    v55 = (void *)sub_1B2228AAC();
    swift_bridgeObjectRelease();
    objc_msgSend(v66, sel_setBinaryArchives_, v55);

  }
  return v66;
}

uint64_t sub_1B1B32B58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t (*v22)(void);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  int v38;
  id v39;
  uint64_t (*v40)(void);
  uint64_t v41;
  uint64_t v42;
  int v43;
  os_unfair_lock_s *v44;
  id v45;
  char isUniquelyReferenced_nonNull_native;
  char v47;
  int v48;
  id *v49;
  id v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  os_unfair_lock_s *v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  _BYTE *v58;
  NSObject *v59;
  os_unfair_lock_s *v60;
  NSObject *v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t);
  uint64_t v70;
  _QWORD *v71;
  id *v72;
  id *v73;
  id v74;
  uint64_t (*v75)(void);
  _QWORD *v77;
  id v78;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  const char *v83;
  uint64_t v84;
  void (*v85)(uint64_t *);
  uint64_t v86;
  uint64_t v87;
  int v88;
  os_unfair_lock_s *v89;
  void *v90;
  id v91;
  void *v92;
  void *v93;
  id v94;
  id v95;
  void *v96;
  void *v97;
  uint64_t v98;
  os_unfair_lock_s *v99;
  uint64_t v100;
  id v101;
  os_unfair_lock_s *v102;
  uint64_t v103;
  void *v104;
  void *v105;
  id v106;
  os_unfair_lock_s *v107;
  uint64_t v108;
  os_unfair_lock_s *v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  __int128 v114;
  void *v115;
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[104];
  char v121[8];
  uint64_t v122;
  _QWORD v123[104];
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[832];
  _BYTE v127[832];
  _OWORD v128[2];
  _OWORD v129[3];
  _OWORD v130[2];
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  _BYTE v135[40];
  _QWORD v136[5];
  _QWORD v137[5];
  uint64_t v138;
  _QWORD v139[5];
  _BYTE v140[40];
  _QWORD v141[5];
  uint64_t v142[104];
  char v143[8];
  uint64_t v144;
  uint64_t v145;
  char v146[8];
  uint64_t v147;
  uint64_t v148;
  char v149[8];
  uint64_t v150;
  uint64_t v151;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v151 = *MEMORY[0x1E0C80C00];
  sub_1B1792854(0, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v118 = (uint64_t)&v110 - v16;
  v17 = *(_OWORD *)(v9 + 144);
  v132 = *(_OWORD *)(v9 + 128);
  v133 = v17;
  v134 = *(_OWORD *)(v9 + 160);
  v18 = *(_OWORD *)(v9 + 80);
  v129[2] = *(_OWORD *)(v9 + 64);
  v130[0] = v18;
  v19 = *(_OWORD *)(v9 + 96);
  v131 = *(_OWORD *)(v9 + 112);
  v130[1] = v19;
  v20 = *(_OWORD *)(v9 + 16);
  v128[0] = *(_OWORD *)v9;
  v128[1] = v20;
  v21 = *(_OWORD *)(v9 + 32);
  v129[1] = *(_OWORD *)(v9 + 48);
  v129[0] = v21;
  v22 = MEMORY[0x1E0DEB940];
  sub_1B1B41294((uint64_t)v128, (uint64_t)v141, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294((uint64_t)v141, (uint64_t)v146, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v22);
  if (!v147)
  {
    sub_1B1B41294((uint64_t)&v131 + 8, (uint64_t)v135, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v22);
    sub_1B1B41294((uint64_t)v135, (uint64_t)v149, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v22);
    if (!v150)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v51 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v142[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v51, v142, 0xD000000000000048, 0x80000001B232F420);
      swift_release();
      swift_release();
      return 1;
    }
  }
  v23 = (void *)swift_unknownObjectRetain();
  v24 = sub_1B1FD0280(v23);
  swift_unknownObjectRelease();
  v25 = v24 ^ v7 & 1;
  v26 = v2 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24));
  if ((*(_BYTE *)(v2 + 88) & 1) != 0)
  {
    sub_1B1B40EE0(v142);
    if ((v7 & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    v27 = *(_QWORD *)(v2 + 40);
    if (*(_QWORD *)(v27 + 16) && (v28 = sub_1B1DC3AC8(v24 ^ v7 & 1), (v29 & 1) != 0))
    {
      sub_1B1B41294(*(_QWORD *)(v27 + 56) + 832 * v28, (uint64_t)v126, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
      sub_1B1B41294((uint64_t)v126, (uint64_t)v142, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
      nullsub_16(v142);
      sub_1B1B429E8(v126, sub_1B1B4157C);
    }
    else
    {
      sub_1B1B40EE0(v142);
      if ((v7 & 1) == 0)
      {
        v31 = *(_QWORD *)(v3 + 40);
        if (*(_QWORD *)(v31 + 16))
        {
          v32 = sub_1B1DC3AC8(v24 ^ 1);
          if ((v33 & 1) != 0)
          {
            sub_1B1B41294(*(_QWORD *)(v31 + 56) + 832 * v32, (uint64_t)v123, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
            v25 = v24 ^ v7 & 1;
            sub_1B1B41294((uint64_t)v123, (uint64_t)&v124, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
            nullsub_16(&v124);
            sub_1B1B429E8(v123, sub_1B1B4157C);
            v34 = &v124;
LABEL_15:
            sub_1B1B40F0C((uint64_t)v34, (uint64_t)v126);
            v30 = (uint64_t *)v126;
            goto LABEL_16;
          }
        }
LABEL_14:
        v34 = v142;
        goto LABEL_15;
      }
    }
  }
  v30 = v142;
LABEL_16:
  sub_1B1B40F0C((uint64_t)v30, (uint64_t)v127);
  v35 = *(_QWORD *)(v3 + 64);
  if (*(_QWORD *)(v35 + 16) && (v36 = sub_1B1DC3AC8(v25), (v37 & 1) != 0))
    v38 = *(unsigned __int8 *)(*(_QWORD *)(v35 + 56) + v36);
  else
    v38 = 0;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v26 + 24));
  if ((*(_BYTE *)(v3 + 88) & 1) != 0 || !v38)
  {
    sub_1B1B40F0C((uint64_t)v127, (uint64_t)v126);
    if (sub_1B1B40FC8((uint64_t)v126) == 1)
    {
      v117 = v7;
      if ((v5 & 1) == 0)
        goto LABEL_29;
      if (qword_1ED4BF680 != -1)
        swift_once();
      if ((byte_1ED4BF710 & 1) != 0
        || (v40 = MEMORY[0x1E0DEB940],
            sub_1B1B41294((uint64_t)&v131 + 8, (uint64_t)v140, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]), sub_1B1B41294((uint64_t)v140, (uint64_t)v120, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v40), v120[1]))
      {
LABEL_29:
        sub_1B1B41294((uint64_t)v129 + 8, (uint64_t)v139, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        swift_retain();
        sub_1B1B40FDC((uint64_t *)v9);
        sub_1B19F8C58(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
        v116 = sub_1B1B40798((uint64_t)v139, v3, v9);
        v118 = v26;
        sub_1B1B41134((uint64_t *)v9);
        swift_release();
        sub_1B19F8C58(v139, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
        v52 = MEMORY[0x1E0DEA968];
        sub_1B1B412E4((uint64_t)&v134, (uint64_t)&v138, (unint64_t *)&qword_1ED4BA4B8, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968]);
        sub_1B1B412E4((uint64_t)&v138, (uint64_t)&v148, (unint64_t *)&qword_1ED4BA4B8, (unint64_t *)&qword_1ED4BA490, v52);
        v53 = v148;
        if (v148)
        {
          swift_retain();
          sub_1B1B40FDC((uint64_t *)v9);
          sub_1B1B28C44((uint64_t)&v138);
          v115 = (void *)sub_1B1B40524(v53, v3, v9);
          sub_1B1B41134((uint64_t *)v9);
          swift_release();
          sub_1B1B28C6C((uint64_t)&v138);
        }
        else
        {
          v115 = 0;
        }
        v75 = MEMORY[0x1E0DEB940];
        sub_1B1B41294((uint64_t)&v131 + 8, (uint64_t)v137, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
        v114 = v132;
        v113 = *((_QWORD *)&v133 + 1);
        sub_1B1B41294((uint64_t)v137, (uint64_t)v121, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v75);
        if (v122)
        {
          sub_1B1B41294((uint64_t)v130, (uint64_t)v136, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          swift_retain();
          sub_1B1B40FDC((uint64_t *)v9);
          sub_1B19F8C58(v136, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
          v111 = sub_1B1B408F0((uint64_t)v136, v3, v9);
          sub_1B1B41134((uint64_t *)v9);
          swift_release();
          sub_1B19F8C58(v136, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
          swift_retain();
          sub_1B1B40FDC((uint64_t *)v9);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_unknownObjectRetain();
          v77 = &unk_1ED4BF000;
          v79 = sub_1B1B408F0((uint64_t)v137, v3, v9);
          sub_1B1B41134((uint64_t *)v9);
          swift_release();
          sub_1B19F8C58(v137, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
          *((_QWORD *)&v114 + 1) = sub_1B1B323CC(v9, (uint64_t)v111, (uint64_t)v79, (uint64_t)v116, v115);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v114 = 0;
        }
        else
        {
          swift_retain();
          sub_1B1B40FDC((uint64_t *)v9);
          sub_1B19F8C58(v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
          v77 = (_QWORD *)&unk_1ED4BF000;
          v78 = sub_1B1B408F0((uint64_t)v141, v3, v9);
          sub_1B1B41134((uint64_t *)v9);
          swift_release();
          sub_1B19F8C58(v141, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B41238);
          *(_QWORD *)&v114 = sub_1B1B31918(v9, v78, v116, (uint64_t)v115);
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          *((_QWORD *)&v114 + 1) = 0;
        }
        v80 = sub_1B1FD0880();
        v82 = v81;
        if ((v117 & 1) != 0)
          v83 = "makeRenderPipelineRefl";
        else
          v83 = "makeRenderPipeline";
        if ((v117 & 1) != 0)
          v84 = 22;
        else
          v84 = 18;
        sub_1B1B3F748(v83, v84, 2u, v80, v82, v25, (uint64_t)v123);
        v85 = *(void (**)(uint64_t *))(v3 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
        v112 = v25;
        if (v85)
        {
          if (v85 == (void (*)(uint64_t *))1)
          {
            if (v77[134] != -1)
              swift_once();
            v142[0] = 0;
            v142[1] = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            v124 = v142[0];
            v125 = v142[1];
            sub_1B2228890();
            memcpy(v142, (const void *)v9, 0x328uLL);
            sub_1B22295EC();
            v86 = v124;
            v87 = v125;
            v88 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v142[0] = 0;
            swift_retain();
            sub_1B1F1AD70(v88, v142, v86, v87);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            v25 = v112;
          }
          else
          {
            v89 = *(os_unfair_lock_s **)(v118 + 24);
            swift_retain();
            os_unfair_lock_lock(v89);
            v142[3] = (uint64_t)&type metadata for RenderPipelineDescriptor;
            v142[0] = swift_allocObject();
            memcpy((void *)(v142[0] + 16), (const void *)v9, 0x328uLL);
            sub_1B1B40FDC((uint64_t *)v9);
            v85(v142);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v142);
            os_unfair_lock_unlock(v89);
            sub_1B1B3FB0C((unint64_t)v85);
          }
        }
        v90 = (void *)*((_QWORD *)&v114 + 1);
        if (*((_QWORD *)&v114 + 1))
        {
          swift_getObjectType();
          v91 = v90;
          v39 = (id)sub_1B222904C();
          v97 = v96;

          v98 = v118;
LABEL_90:
          v99 = *(os_unfair_lock_s **)(v98 + 24);
          v100 = v98;
          v101 = v97;
          os_unfair_lock_lock(v99);
          sub_1B1B341C8(v97, v3, v112, (uint64_t)v39, (void *)v9);
          os_unfair_lock_unlock(v99);

          v102 = *(os_unfair_lock_s **)(v100 + 24);
          os_unfair_lock_lock(v102);
          sub_1B1B3BCD8(v3 + 96);
          os_unfair_lock_unlock(v102);

          sub_1B1B3FB20((uint64_t)v123);
          swift_unknownObjectRelease();
          return (uint64_t)v39;
        }
        if ((_QWORD)v114)
        {
          v92 = *(void **)(v3 + 16);
          v142[0] = 0;
          v124 = 0;
          v117 = (id)v114;
          v39 = objc_msgSend(v92, sel_newRenderPipelineStateWithDescriptor_options_reflection_error_);
          v93 = (void *)v124;
          v97 = (void *)v142[0];
          v94 = (id)v142[0];
          v95 = v93;
          v98 = v118;
          if (v39)
          {
            sub_1B1B393BC((uint64_t)v117, (SEL *)&selRef_addRenderPipelineFunctionsWithDescriptor_error_);

            goto LABEL_90;
          }
          v104 = v95;
          v105 = (void *)sub_1B2227FB4();

          swift_willThrow();
          v106 = v117;

          v107 = *(os_unfair_lock_s **)(v98 + 24);
          os_unfair_lock_lock(v107);
          sub_1B1B3BCD8(v3 + 96);
          os_unfair_lock_unlock(v107);

          sub_1B1B3FB20((uint64_t)v123);
          swift_unknownObjectRelease();
          v25 = v112;
        }
        else
        {
          sub_1B1B41294((uint64_t)v141, (uint64_t)v143, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
          v98 = v118;
          if (v144)
          {
            v103 = v145;
            swift_unknownObjectRetain();
          }
          else
          {
            v103 = 0;
          }
          sub_1B1B40E84();
          v105 = (void *)swift_allocError();
          *(_QWORD *)v108 = 0xD000000000000015;
          *(_QWORD *)(v108 + 8) = 0x80000001B232F4D0;
          *(_QWORD *)(v108 + 16) = v103;
          *(_BYTE *)(v108 + 24) = 0;
          swift_willThrow();
          v109 = *(os_unfair_lock_s **)(v98 + 24);
          os_unfair_lock_lock(v109);
          sub_1B1B3BCD8(v3 + 96);
          os_unfair_lock_unlock(v109);
          sub_1B1B3FB20((uint64_t)v123);
          swift_unknownObjectRelease();
        }
        if (qword_1ED4BF430 != -1)
          swift_once();
        v142[0] = 0;
        v142[1] = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        v124 = (uint64_t)v105;
        sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
        sub_1B22295EC();
        v41 = v142[0];
        v42 = v142[1];
        v43 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        v142[0] = 0;
        swift_retain();
        sub_1B1F1AD70(v43, v142, v41, v42);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v44 = *(os_unfair_lock_s **)(v98 + 24);
        os_unfair_lock_lock(v44);
        v124 = (uint64_t)v105;
        sub_1B1B41288((uint64_t)&v124);
        sub_1B1B41294((uint64_t)&v124, (uint64_t)v142, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
        v45 = v105;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v119 = *(_QWORD *)(v3 + 40);
        *(_QWORD *)(v3 + 40) = 0x8000000000000000;
        sub_1B1B86318((uint64_t)v142, v25, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v3 + 40) = v119;
        swift_bridgeObjectRelease();
        v47 = swift_isUniquelyReferenced_nonNull_native();
        v119 = *(_QWORD *)(v3 + 64);
        *(_QWORD *)(v3 + 64) = 0x8000000000000000;
        sub_1B1B85DC8(0, v25, v47);
        *(_QWORD *)(v3 + 64) = v119;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v44);

        return 1;
      }
      v59 = dispatch_group_create();
      dispatch_group_enter(v59);
      v60 = *(os_unfair_lock_s **)(v26 + 24);
      os_unfair_lock_lock(v60);
      v124 = (uint64_t)v59;
      sub_1B1B4140C((uint64_t)&v124);
      sub_1B1B41294((uint64_t)&v124, (uint64_t)v142, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
      v61 = v59;
      v62 = swift_isUniquelyReferenced_nonNull_native();
      v123[0] = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v3 + 40) = 0x8000000000000000;
      sub_1B1B86318((uint64_t)v142, v25, v62);
      *(_QWORD *)(v3 + 40) = v123[0];
      swift_bridgeObjectRelease();
      os_unfair_lock_unlock(v60);
      v63 = v118;
      sub_1B2228BF0();
      v64 = sub_1B2228C08();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 56))(v63, 0, 1, v64);
      v65 = swift_allocObject();
      *(_QWORD *)(v65 + 16) = v61;
      *(_QWORD *)(v65 + 24) = v3;
      memcpy((void *)(v65 + 32), (const void *)v9, 0x328uLL);
      *(_BYTE *)(v65 + 840) = v117 & 1;
      *(_QWORD *)(v65 + 848) = v25;
      v66 = v61;
      swift_retain();
      sub_1B1B40FDC((uint64_t *)v9);
      if (qword_1ED4BF430 != -1)
        swift_once();
      v67 = qword_1ED4BF658;
      swift_retain();
      if (v67 != -1)
        swift_once();
      v68 = qword_1ED4D0FD0;
      swift_retain();
      swift_release();
      v69 = (void (*)(uint64_t))MEMORY[0x1E0DF0750];
      v70 = v118;
      sub_1B1B425E0(v118, (uint64_t)v13, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
      v71 = (_QWORD *)swift_allocObject();
      v71[2] = 0;
      v71[3] = 0;
      v71[4] = v68;
      v71[5] = &unk_1EEF5ADD0;
      v71[6] = v65;
      sub_1B1B3E81C((uint64_t)v13, (uint64_t)&unk_1EEF5ADD8, (uint64_t)v71);

      swift_release();
      sub_1B1B25B94(v70, (unint64_t *)&unk_1ED4BA530, v69);
      return 0;
    }
    sub_1B1B41294((uint64_t)v126, (uint64_t)v142, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    v48 = sub_1B1B41574((uint64_t)v142);
    if (v48)
    {
      if (v48 == 1)
      {
        nullsub_16(v142);
        v39 = *v49;
        v50 = v49[102];
        swift_unknownObjectRetain();
        sub_1B1B429E8(v127, sub_1B1B41748);
        return (uint64_t)v39;
      }
      nullsub_16(v142);
    }
    else
    {
      nullsub_16(v142);
      if ((v5 & 1) != 0)
      {
        sub_1B1B429E8(v127, sub_1B1B41748);
        return 0;
      }
      sub_1B1B40F0C((uint64_t)v127, (uint64_t)&v124);
      sub_1B1B429E8(&v124, sub_1B1B4157C);
      CACurrentMediaTime();
      sub_1B2228EFC();
      v54 = *(os_unfair_lock_s **)(v26 + 24);
      os_unfair_lock_lock(v54);
      v55 = *(_QWORD *)(v3 + 40);
      if (*(_QWORD *)(v55 + 16) && (v56 = sub_1B1DC3AC8(v25), (v57 & 1) != 0))
      {
        sub_1B1B41294(*(_QWORD *)(v55 + 56) + 832 * v56, (uint64_t)v120, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
        sub_1B1B41294((uint64_t)v120, (uint64_t)v121, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
        nullsub_16(v121);
        sub_1B1B429E8(v120, sub_1B1B4157C);
      }
      else
      {
        sub_1B1B40EE0(v121);
      }
      sub_1B1B40F0C((uint64_t)v121, (uint64_t)v123);
      os_unfair_lock_unlock(v54);
      sub_1B1B40F0C((uint64_t)v123, (uint64_t)v121);
      if (sub_1B1B40FC8((uint64_t)v121) == 1)
      {
        v58 = v127;
      }
      else
      {
        sub_1B1B41294((uint64_t)v121, (uint64_t)v120, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
        if (sub_1B1B41574((uint64_t)v120) == 1)
        {
          nullsub_16(v120);
          v73 = v72;
          sub_1B1B429E8(v127, sub_1B1B41748);
          sub_1B1B429E8(v127, sub_1B1B41748);
          v39 = *v73;
          v74 = v73[102];
          swift_unknownObjectRetain();
          sub_1B1B429E8(v123, sub_1B1B41748);
          return (uint64_t)v39;
        }
        nullsub_16(v120);
        sub_1B1B429E8(v127, sub_1B1B41748);
        v58 = v123;
      }
      sub_1B1B429E8(v58, sub_1B1B41748);
    }
    sub_1B1B429E8(v127, sub_1B1B41748);
    return 1;
  }
  sub_1B1B429E8(v127, sub_1B1B41748);
  return 2;
}

uint64_t sub_1B1B341C8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *__src)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[808];
  void *v27;
  _BYTE v28[832];
  _BYTE __dst[808];
  uint64_t v30;

  memcpy(__dst, __src, sizeof(__dst));
  v6 = 0;
  v24 = a2;
  v7 = *(_QWORD *)(a2 + 40);
  v8 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v7 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  while (v11)
  {
    v13 = __clz(__rbit64(v11));
    v11 &= v11 - 1;
    v14 = v13 | (v6 << 6);
LABEL_20:
    sub_1B1B41294(*(_QWORD *)(v7 + 56) + 832 * v14, (uint64_t)&v25, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    sub_1B1B41294((uint64_t)&v25, (uint64_t)v28, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
    if (sub_1B1B41574((uint64_t)v28) == 1)
      nullsub_16(v28);
  }
  v15 = v6 + 1;
  if (v6 + 1 >= v12)
    goto LABEL_22;
  v16 = *(_QWORD *)(v8 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v15 = v6 + 2;
  if (v6 + 2 >= v12)
    goto LABEL_22;
  v16 = *(_QWORD *)(v8 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v15 = v6 + 3;
  if (v6 + 3 >= v12)
    goto LABEL_22;
  v16 = *(_QWORD *)(v8 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v15 = v6 + 4;
  if (v6 + 4 >= v12)
    goto LABEL_22;
  v16 = *(_QWORD *)(v8 + 8 * v15);
  if (v16)
    goto LABEL_19;
  v15 = v6 + 5;
  if (v6 + 5 >= v12)
    goto LABEL_22;
  v16 = *(_QWORD *)(v8 + 8 * v15);
  if (v16)
  {
LABEL_19:
    v11 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v6 = v15;
    goto LABEL_20;
  }
  while (v12 - 6 != v6)
  {
    v16 = *(_QWORD *)(v7 + 112 + 8 * v6++);
    if (v16)
    {
      v15 = v6 + 5;
      goto LABEL_19;
    }
  }
LABEL_22:
  memcpy(v26, __dst, sizeof(v26));
  v25 = a4;
  v27 = a1;
  sub_1B1B42534((uint64_t)&v25);
  sub_1B1B41294((uint64_t)&v25, (uint64_t)v28, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  swift_unknownObjectRetain();
  sub_1B1B40FDC((uint64_t *)__src);
  v17 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v30 = *(_QWORD *)(v24 + 40);
  *(_QWORD *)(v24 + 40) = 0x8000000000000000;
  sub_1B1B86318((uint64_t)v28, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v24 + 40) = v30;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B3443C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 4856) = a6;
  *(_BYTE *)(v6 + 3569) = a5;
  *(_QWORD *)(v6 + 4848) = a4;
  *(_QWORD *)(v6 + 4840) = a3;
  *(_QWORD *)(v6 + 4832) = a2;
  return swift_task_switch();
}

uint64_t sub_1B1B34464()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(void);
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = *(__int128 **)(v0 + 4848);
  v2 = *(_QWORD *)(v0 + 4840);
  v3 = swift_allocObject();
  *(_QWORD *)(v0 + 4864) = v3;
  *(_QWORD *)(v3 + 16) = v2;
  memcpy((void *)(v3 + 24), v1, 0x328uLL);
  swift_retain();
  swift_retain();
  sub_1B1B40FDC((uint64_t *)v1);
  v4 = MEMORY[0x1E0DEB940];
  sub_1B1B40CFC(255, (unint64_t *)&unk_1ED4BA660, (unint64_t *)&unk_1ED4BA650, (uint64_t)&protocolRef_MTLFunction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  swift_asyncLet_begin();
  v5 = swift_allocObject();
  *(_QWORD *)(v0 + 4872) = v5;
  memcpy((void *)(v5 + 16), v1, 0x328uLL);
  *(_QWORD *)(v5 + 824) = v2;
  swift_retain();
  sub_1B1B40FDC((uint64_t *)v1);
  swift_retain();
  sub_1B1B42078();
  swift_asyncLet_begin();
  v6 = *v1;
  v7 = v1[2];
  *(_OWORD *)(v0 + 4424) = v1[1];
  *(_OWORD *)(v0 + 4440) = v7;
  *(_OWORD *)(v0 + 4408) = v6;
  v8 = v1[3];
  v9 = v1[4];
  v10 = v1[6];
  *(_OWORD *)(v0 + 4488) = v1[5];
  *(_OWORD *)(v0 + 4504) = v10;
  *(_OWORD *)(v0 + 4456) = v8;
  *(_OWORD *)(v0 + 4472) = v9;
  v11 = v1[7];
  v12 = v1[8];
  v13 = v1[10];
  *(_OWORD *)(v0 + 4552) = v1[9];
  *(_OWORD *)(v0 + 4568) = v13;
  *(_OWORD *)(v0 + 4520) = v11;
  *(_OWORD *)(v0 + 4536) = v12;
  sub_1B1B41294(v0 + 4528, v0 + 4688, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v4);
  sub_1B1B41294(v0 + 4688, v0 + 4728, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v4);
  v14 = *(void **)(v0 + 4848);
  v15 = *(_QWORD *)(v0 + 4840);
  if (*(_QWORD *)(v0 + 4736))
  {
    v16 = swift_allocObject();
    *(_QWORD *)(v0 + 4880) = v16;
    *(_QWORD *)(v16 + 16) = v15;
    memcpy((void *)(v16 + 24), v14, 0x328uLL);
    swift_retain();
    sub_1B1B40FDC((uint64_t *)v14);
    swift_retain();
    swift_asyncLet_begin();
    v17 = swift_allocObject();
    *(_QWORD *)(v0 + 4888) = v17;
  }
  else
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v0 + 4960) = v17;
  }
  *(_QWORD *)(v17 + 16) = v15;
  memcpy((void *)(v17 + 24), v14, 0x328uLL);
  swift_retain();
  sub_1B1B40FDC((uint64_t *)v14);
  swift_retain();
  swift_asyncLet_begin();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1B1B34808()
{
  uint64_t v0;
  _QWORD *v1;

  v1[612] = v0;
  if (v0)
    return swift_asyncLet_finish();
  v1[613] = v1[343];
  swift_unknownObjectRetain();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1B1B34894()
{
  uint64_t v0;
  _QWORD *v1;

  v1[614] = v0;
  if (v0)
    return swift_task_switch();
  v1[615] = v1[602];
  swift_unknownObjectRetain();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1B1B3491C()
{
  uint64_t v0;
  _QWORD *v1;

  v1[616] = v0;
  if (v0)
    return swift_task_switch();
  v1[617] = v1[601];
  swift_unknownObjectRetain();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1B1B349A4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 4944) = v0;
  return swift_task_switch();
}

uint64_t sub_1B1B349CC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = v0[617];
  v2 = v0[615];
  v3 = v0[613];
  v4 = v0[606];
  v5 = (void *)v0[603];
  swift_bridgeObjectRetain();
  v0[619] = sub_1B1B323CC(v4, v3, v2, v1, v5);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B34A90()
{
  return swift_task_switch();
}

uint64_t sub_1B1B34AA4()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B34AF8()
{
  return swift_task_switch();
}

uint64_t sub_1B1B34B0C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void (*v12)(uint64_t);
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  void *v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t (*v23)(void);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_unfair_lock_s *v27;
  uint64_t v28[3];

  swift_release();
  v1 = *(void **)(v0 + 4952);
  v2 = *(_QWORD *)(v0 + 4944);
  v3 = *(_QWORD *)(v0 + 4888);
  v4 = *(_QWORD *)(v0 + 4880);
  *(_QWORD *)(v0 + 5080) = 0;
  *(_QWORD *)(v0 + 5072) = v1;
  *(_OWORD *)(v0 + 5056) = 0u;
  *(_QWORD *)(v0 + 5048) = v3;
  *(_QWORD *)(v0 + 5040) = &unk_1EEF5AE28;
  *(_QWORD *)(v0 + 5032) = v4;
  *(_QWORD *)(v0 + 5024) = &unk_1EEF5AE18;
  *(_QWORD *)(v0 + 5016) = v2;
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(unsigned __int8 *)(v0 + 3569);
  if (*(_BYTE *)(v0 + 3569))
    v7 = "asyncMakeRenderPipelineRefl";
  else
    v7 = "asyncMakeRenderPipeline";
  if (*(_BYTE *)(v0 + 3569))
    v8 = 27;
  else
    v8 = 23;
  v9 = *(_QWORD *)(v0 + 4840);
  v10 = sub_1B1FD0880();
  sub_1B1B3F748(v7, v8, 2u, v10, v11, v5, v0 + 4584);
  v12 = *(void (**)(uint64_t))(v9 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
  if (v12)
  {
    if (v12 != (void (*)(uint64_t))1)
    {
      v20 = *(void **)(v0 + 4848);
      v21 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 4840) + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
      swift_retain();
      os_unfair_lock_lock(v21);
      *(_QWORD *)(v0 + 2768) = &type metadata for RenderPipelineDescriptor;
      v22 = swift_allocObject();
      *(_QWORD *)(v0 + 2744) = v22;
      memcpy((void *)(v22 + 16), v20, 0x328uLL);
      sub_1B1B40FDC((uint64_t *)v20);
      v12(v0 + 2744);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 2744);
      os_unfair_lock_unlock(v21);
      sub_1B1B3FB0C((unint64_t)v12);
      if (v1)
        goto LABEL_15;
      goto LABEL_20;
    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    v13 = *(const void **)(v0 + 4848);
    v28[0] = 0;
    v28[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    sub_1B2228890();
    memcpy((void *)(v0 + 2744), v13, 0x328uLL);
    sub_1B22295EC();
    v14 = *(_QWORD *)(v0 + 16);
    v15 = *(_QWORD *)(v0 + 24);
    v16 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v28[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v16, v28, v14, v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  if (v1)
  {
LABEL_15:
    if (v6)
      v17 = 3;
    else
      v17 = 0;
    v18 = *(void **)(*(_QWORD *)(v0 + 4840) + 16);
    *(_QWORD *)(v0 + 2576) = v0;
    *(_QWORD *)(v0 + 2616) = v0 + 16;
    *(_QWORD *)(v0 + 2584) = sub_1B1B3564C;
    *(_QWORD *)(v0 + 2776) = swift_continuation_init();
    *(_QWORD *)(v0 + 2744) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 2752) = 0x40000000;
    *(_QWORD *)(v0 + 2760) = sub_1B1B39220;
    *(_QWORD *)(v0 + 2768) = &unk_1E63E8C00;
    objc_msgSend(v18, sel_newRenderPipelineStateWithMeshDescriptor_options_completionHandler_, v1, v17, v0 + 2744);
    return swift_continuation_await();
  }
LABEL_20:
  v23 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(v0 + 4408, v0 + 4648, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294(v0 + 4648, v0 + 4768, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v23);
  if (*(_QWORD *)(v0 + 4776))
  {
    v24 = *(_QWORD *)(v0 + 4792);
    swift_unknownObjectRetain();
  }
  else
  {
    v24 = 0;
  }
  v25 = *(_QWORD *)(v0 + 4840);
  sub_1B1B40E84();
  *(_QWORD *)(v0 + 5112) = swift_allocError();
  *(_QWORD *)v26 = 0xD000000000000015;
  *(_QWORD *)(v26 + 8) = 0x80000001B232F4D0;
  *(_QWORD *)(v26 + 16) = v24;
  *(_BYTE *)(v26 + 24) = 0;
  swift_willThrow();
  v27 = *(os_unfair_lock_s **)(v25 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v27);
  sub_1B1B3BCD8(v25 + 96);
  os_unfair_lock_unlock(v27);
  sub_1B1B3FB20(v0 + 4584);
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B34FB8()
{
  uint64_t v0;
  _QWORD *v1;

  v1[621] = v0;
  if (v0)
    return swift_asyncLet_finish();
  v1[622] = v1[343];
  swift_unknownObjectRetain();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1B1B35044()
{
  uint64_t v0;
  _QWORD *v1;

  v1[623] = v0;
  if (v0)
    return swift_task_switch();
  v1[624] = v1[601];
  swift_unknownObjectRetain();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1B1B350CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 5000) = v0;
  return swift_task_switch();
}

uint64_t sub_1B1B350F4()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (void *)v0[624];
  v2 = (void *)v0[622];
  v3 = v0[606];
  v4 = v0[603];
  swift_bridgeObjectRetain();
  v0[626] = sub_1B1B31918(v3, v2, v1, v4);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B3519C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B351B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void (*v11)(uint64_t);
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  void *v17;
  void *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t (*v22)(void);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27[3];

  swift_release();
  v1 = *(void **)(v0 + 5008);
  v2 = *(_QWORD *)(v0 + 5000);
  v3 = *(_QWORD *)(v0 + 4960);
  *(_QWORD *)(v0 + 5080) = v1;
  *(_QWORD *)(v0 + 5072) = 0;
  *(_QWORD *)(v0 + 5064) = v3;
  *(_QWORD *)(v0 + 5056) = &unk_1EEF5AE08;
  *(_OWORD *)(v0 + 5024) = 0u;
  *(_OWORD *)(v0 + 5040) = 0u;
  *(_QWORD *)(v0 + 5016) = v2;
  v4 = *(_QWORD *)(v0 + 4856);
  v5 = *(unsigned __int8 *)(v0 + 3569);
  if (*(_BYTE *)(v0 + 3569))
    v6 = "asyncMakeRenderPipelineRefl";
  else
    v6 = "asyncMakeRenderPipeline";
  if (*(_BYTE *)(v0 + 3569))
    v7 = 27;
  else
    v7 = 23;
  v8 = *(_QWORD *)(v0 + 4840);
  v9 = sub_1B1FD0880();
  sub_1B1B3F748(v6, v7, 2u, v9, v10, v4, v0 + 4584);
  v11 = *(void (**)(uint64_t))(v8 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
  if (v11)
  {
    if (v11 != (void (*)(uint64_t))1)
    {
      v19 = *(void **)(v0 + 4848);
      v20 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 4840) + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
      swift_retain();
      os_unfair_lock_lock(v20);
      *(_QWORD *)(v0 + 2768) = &type metadata for RenderPipelineDescriptor;
      v21 = swift_allocObject();
      *(_QWORD *)(v0 + 2744) = v21;
      memcpy((void *)(v21 + 16), v19, 0x328uLL);
      sub_1B1B40FDC((uint64_t *)v19);
      v11(v0 + 2744);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 2744);
      os_unfair_lock_unlock(v20);
      sub_1B1B3FB0C((unint64_t)v11);
      if (v1)
        goto LABEL_15;
      goto LABEL_20;
    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    v12 = *(const void **)(v0 + 4848);
    v27[0] = 0;
    v27[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    *(_QWORD *)(v0 + 16) = 0;
    *(_QWORD *)(v0 + 24) = 0xE000000000000000;
    sub_1B2228890();
    memcpy((void *)(v0 + 2744), v12, 0x328uLL);
    sub_1B22295EC();
    v13 = *(_QWORD *)(v0 + 16);
    v14 = *(_QWORD *)(v0 + 24);
    v15 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v27[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v15, v27, v13, v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  if (v1)
  {
LABEL_15:
    if (v5)
      v16 = 3;
    else
      v16 = 0;
    v17 = *(void **)(*(_QWORD *)(v0 + 4840) + 16);
    *(_QWORD *)(v0 + 2640) = v0;
    *(_QWORD *)(v0 + 2680) = v0 + 16;
    *(_QWORD *)(v0 + 2648) = sub_1B1B356AC;
    *(_QWORD *)(v0 + 2776) = swift_continuation_init();
    *(_QWORD *)(v0 + 2744) = MEMORY[0x1E0C809B0];
    *(_QWORD *)(v0 + 2752) = 0x40000000;
    *(_QWORD *)(v0 + 2760) = sub_1B1B39220;
    *(_QWORD *)(v0 + 2768) = &unk_1E63E8BE8;
    objc_msgSend(v17, sel_newRenderPipelineStateWithDescriptor_options_completionHandler_, v1, v16, v0 + 2744);
    return swift_continuation_await();
  }
LABEL_20:
  v22 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(v0 + 4408, v0 + 4648, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294(v0 + 4648, v0 + 4768, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v22);
  if (*(_QWORD *)(v0 + 4776))
  {
    v23 = *(_QWORD *)(v0 + 4792);
    swift_unknownObjectRetain();
  }
  else
  {
    v23 = 0;
  }
  v24 = *(_QWORD *)(v0 + 4840);
  sub_1B1B40E84();
  *(_QWORD *)(v0 + 5112) = swift_allocError();
  *(_QWORD *)v25 = 0xD000000000000015;
  *(_QWORD *)(v25 + 8) = 0x80000001B232F4D0;
  *(_QWORD *)(v25 + 16) = v23;
  *(_BYTE *)(v25 + 24) = 0;
  swift_willThrow();
  v26 = *(os_unfair_lock_s **)(v24 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v26);
  sub_1B1B3BCD8(v24 + 96);
  os_unfair_lock_unlock(v26);
  sub_1B1B3FB20(v0 + 4584);
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B3564C()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 5088) = *(_QWORD *)(*(_QWORD *)v0 + 2608);
  return swift_task_switch();
}

uint64_t sub_1B1B356AC()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 5096) = *(_QWORD *)(*(_QWORD *)v0 + 2672);
  return swift_task_switch();
}

void sub_1B1B3570C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  os_unfair_lock_s *v12;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(void **)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 5016);
  v4 = *(_QWORD *)(v0 + 4856);
  v5 = *(void **)(v0 + 4848);
  v6 = *(_QWORD *)(v0 + 4840);
  v7 = v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
  v8 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v8);
  sub_1B1B341C8(v1, v6, v4, v2, v5);
  os_unfair_lock_unlock(v8);
  if (!v3)
  {
    v9 = *(void **)(v0 + 5080);
    v10 = *(void **)(v0 + 5072);
    v11 = *(_QWORD *)(v0 + 4840);
    swift_unknownObjectRelease();

    v12 = *(os_unfair_lock_s **)(v7 + 24);
    os_unfair_lock_lock(v12);
    sub_1B1B3BCD8(v11 + 96);
    os_unfair_lock_unlock(v12);

    sub_1B1B3FB20(v0 + 4584);
    swift_asyncLet_finish();
  }
}

uint64_t sub_1B1B35840()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  os_unfair_lock_s *v12;
  void *v13;
  uint64_t v14;
  os_unfair_lock_s *v15;

  v1 = v0[2];
  v2 = v0[627];
  v3 = (void *)v0[3];
  sub_1B1B393BC(v0[635], (SEL *)&selRef_addRenderPipelineFunctionsWithDescriptor_error_);
  v0[638] = v2;
  v4 = (void *)v0[635];
  if (v2)
  {
    v5 = v0[605];
    swift_unknownObjectRelease();

    v6 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
    os_unfair_lock_lock(v6);
    sub_1B1B3BCD8(v5 + 96);
    os_unfair_lock_unlock(v6);
  }
  else
  {

    v8 = v0[607];
    v9 = (void *)v0[606];
    v10 = v0[605];
    v11 = v10 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
    v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
    os_unfair_lock_lock(v12);
    sub_1B1B341C8(v3, v10, v8, v1, v9);
    os_unfair_lock_unlock(v12);
    v4 = (void *)v0[635];
    v13 = (void *)v0[634];
    v14 = v0[605];
    swift_unknownObjectRelease();

    v15 = *(os_unfair_lock_s **)(v11 + 24);
    os_unfair_lock_lock(v15);
    sub_1B1B3BCD8(v14 + 96);
    os_unfair_lock_unlock(v15);

  }
  sub_1B1B3FB20((uint64_t)(v0 + 573));
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B359F4()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35A08()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B35A60()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35A74()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];

  v1 = *(void **)(v0 + 5112);
  v15 = *(_QWORD *)(v0 + 5056);
  v14 = *(_QWORD *)(v0 + 5040);
  v12 = v0 + 2744;
  v13 = *(_QWORD *)(v0 + 5024);
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v16[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v16, v3, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v16[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v16[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(v13);
  sub_1B19E5A18(v14);
  sub_1B19E5A18(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B35D3C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35D50()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B35DA8()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35DBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release();
  v1 = *(_QWORD *)(v0 + 5056);
  v2 = *(_QWORD *)(v0 + 5040);
  v3 = *(_QWORD *)(v0 + 5024);
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(v3);
  sub_1B19E5A18(v2);
  sub_1B19E5A18(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B35E60()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35E74()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B35EC8()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35EDC()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B35F34()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35F48()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B35FA0()
{
  return swift_task_switch();
}

uint64_t sub_1B1B35FB4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(void **)(v0 + 4896);
  v12 = v0 + 2744;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v13[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v13, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v13[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v13[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE18);
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE28);
  sub_1B19E5A18(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B36278()
{
  swift_unknownObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B362D0()
{
  return swift_task_switch();
}

uint64_t sub_1B1B362E4()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B36338()
{
  return swift_task_switch();
}

uint64_t sub_1B1B3634C()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B363A4()
{
  return swift_task_switch();
}

uint64_t sub_1B1B363B8()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B36410()
{
  return swift_task_switch();
}

uint64_t sub_1B1B36424()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(void **)(v0 + 4912);
  v12 = v0 + 2744;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v13[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v13, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v13[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v13[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE18);
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE28);
  sub_1B19E5A18(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B366E8()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B3674C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B36760()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B367B4()
{
  return swift_task_switch();
}

uint64_t sub_1B1B367C8()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B36820()
{
  return swift_task_switch();
}

uint64_t sub_1B1B36834()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B3688C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B368A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(void **)(v0 + 4928);
  v12 = v0 + 2744;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v13[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v13, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v13[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v13[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE18);
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE28);
  sub_1B19E5A18(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B36B64()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B36BDC()
{
  return swift_task_switch();
}

uint64_t sub_1B1B36BF0()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B36C44()
{
  return swift_task_switch();
}

uint64_t sub_1B1B36C58()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B36CB0()
{
  return swift_task_switch();
}

uint64_t sub_1B1B36CC4()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B36D1C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B36D30()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(void **)(v0 + 4944);
  v12 = v0 + 2744;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v13[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v13, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v13[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v13[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE18);
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE28);
  sub_1B19E5A18(0);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B36FF4()
{
  return swift_task_switch();
}

uint64_t sub_1B1B37008()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B37060()
{
  return swift_task_switch();
}

uint64_t sub_1B1B37074()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B370CC()
{
  return swift_task_switch();
}

uint64_t sub_1B1B370E0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(void **)(v0 + 4968);
  v12 = v0 + 2744;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v13[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v13, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v13[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v13[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(0);
  sub_1B19E5A18(0);
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE08);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B37398()
{
  swift_unknownObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B373EC()
{
  return swift_task_switch();
}

uint64_t sub_1B1B37400()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B37458()
{
  return swift_task_switch();
}

uint64_t sub_1B1B3746C()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B374C4()
{
  return swift_task_switch();
}

uint64_t sub_1B1B374D8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(void **)(v0 + 4984);
  v12 = v0 + 2744;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v13[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v13, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v13[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v13[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(0);
  sub_1B19E5A18(0);
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE08);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B37790()
{
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B377F0()
{
  return swift_task_switch();
}

uint64_t sub_1B1B37804()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B3785C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B37870()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B378C8()
{
  return swift_task_switch();
}

uint64_t sub_1B1B378DC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13[2];

  v1 = *(void **)(v0 + 5000);
  v12 = v0 + 2744;
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v13[0] = 0;
  v13[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v13[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v13, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v13[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v13[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v13[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(0);
  sub_1B19E5A18(0);
  sub_1B19E5A18((uint64_t)&unk_1EEF5AE08);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B37B94()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;

  v1 = (void *)v0[635];
  v2 = (void *)v0[634];
  v3 = v0[605];
  swift_willThrow();

  v4 = *(os_unfair_lock_s **)(v3 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v4);
  sub_1B1B3BCD8(v3 + 96);
  os_unfair_lock_unlock(v4);

  sub_1B1B3FB20((uint64_t)(v0 + 573));
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B37C54()
{
  return swift_task_switch();
}

uint64_t sub_1B1B37C68()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B37CC0()
{
  return swift_task_switch();
}

uint64_t sub_1B1B37CD4()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];

  v1 = *(void **)(v0 + 5088);
  v15 = *(_QWORD *)(v0 + 5056);
  v14 = *(_QWORD *)(v0 + 5040);
  v12 = v0 + 2744;
  v13 = *(_QWORD *)(v0 + 5024);
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v16[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v16, v3, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v16[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v16[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(v13);
  sub_1B19E5A18(v14);
  sub_1B19E5A18(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B37F9C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(void **)(v0 + 5080);
  v2 = *(_QWORD *)(v0 + 4840);
  swift_willThrow();

  v3 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v3);
  sub_1B1B3BCD8(v2 + 96);
  os_unfair_lock_unlock(v3);

  sub_1B1B3FB20(v0 + 4584);
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B3804C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B38060()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B380B8()
{
  return swift_task_switch();
}

uint64_t sub_1B1B380CC()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];

  v1 = *(void **)(v0 + 5096);
  v15 = *(_QWORD *)(v0 + 5056);
  v14 = *(_QWORD *)(v0 + 5040);
  v12 = v0 + 2744;
  v13 = *(_QWORD *)(v0 + 5024);
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v16[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v16, v3, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v16[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v16[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(v13);
  sub_1B19E5A18(v14);
  sub_1B19E5A18(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B38394()
{
  return swift_task_switch();
}

uint64_t sub_1B1B383A8()
{
  swift_release();
  return swift_asyncLet_finish();
}

uint64_t sub_1B1B38400()
{
  return swift_task_switch();
}

uint64_t sub_1B1B38414()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16[2];

  v1 = *(void **)(v0 + 5104);
  v15 = *(_QWORD *)(v0 + 5056);
  v14 = *(_QWORD *)(v0 + 5040);
  v12 = v0 + 2744;
  v13 = *(_QWORD *)(v0 + 5024);
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v16[0] = 0;
  v16[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 656) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v3 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 4856);
  v6 = *(_QWORD *)(v0 + 4840);
  v16[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v16, v3, v2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 2744) = v1;
  sub_1B1B41288(v12);
  sub_1B1B41294(v12, v0 + 3576, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = 0x8000000000000000;
  sub_1B1B86318(v0 + 3576, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 40) = v16[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v16[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v16[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 4832));
  swift_release();
  swift_release();
  sub_1B19E5A18(v13);
  sub_1B19E5A18(v14);
  sub_1B19E5A18(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B386DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[44] = a2;
  v3[45] = a3;
  v3[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B386F8()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;

  v1 = *(__int128 **)(v0 + 360);
  v2 = *((_QWORD *)v1 + 22);
  *(_QWORD *)(v0 + 368) = v2;
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[10];
  *(_OWORD *)(v0 + 160) = v1[9];
  *(_OWORD *)(v0 + 176) = v5;
  *(_OWORD *)(v0 + 128) = v3;
  *(_OWORD *)(v0 + 144) = v4;
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[6];
  *(_OWORD *)(v0 + 96) = v1[5];
  *(_OWORD *)(v0 + 112) = v8;
  *(_OWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 80) = v7;
  v9 = *v1;
  v10 = v1[2];
  *(_OWORD *)(v0 + 32) = v1[1];
  *(_OWORD *)(v0 + 48) = v10;
  *(_OWORD *)(v0 + 16) = v9;
  v11 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(v0 + 56, v0 + 272, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294(v0 + 272, v0 + 232, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v11);
  if (*(_QWORD *)(v0 + 240))
  {
    if (v2)
      v12 = v2;
    else
      v12 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 264);
    v13 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 208) = v13;
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 376) = v15;
    *(_QWORD *)(v0 + 384) = v16;
    swift_bridgeObjectRetain();
    sub_1B19F8C58((_QWORD *)(v0 + 272), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v17;
    *v17 = v0;
    v17[1] = sub_1B1B3888C;
    return sub_1B1B2FA94(v14, v15, v16, v12, 0);
  }
  else
  {
    v19 = *(_QWORD **)(v0 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v19 = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1B1B3888C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 400) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 408) = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B38900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[4] = a2;
  v3[5] = a3;
  v3[3] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B3891C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v1 = *(_QWORD **)(v0 + 32);
  v2 = v1[20];
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 40);
    v5 = v1[21];
    v4 = v1[22];
    *(_QWORD *)(v0 + 48) = v4;
    if (v4)
      v6 = v4;
    else
      v6 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B19F8F48(0, (unint64_t *)&unk_1ED4BA650);
    v7 = swift_task_alloc();
    *(_QWORD *)(v0 + 56) = v7;
    *(_QWORD *)(v7 + 16) = v2;
    *(_QWORD *)(v7 + 24) = v3;
    *(_QWORD *)(v7 + 32) = v5;
    *(_QWORD *)(v7 + 40) = v6;
    *(_BYTE *)(v7 + 48) = 1;
    sub_1B1B40CFC(0, &qword_1ED4BA4E8, (unint64_t *)&unk_1ED4BA650, (uint64_t)&protocolRef_MTLFunction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v8 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 64) = v8;
    *v8 = v0;
    v8[1] = sub_1B1B38A78;
    return sub_1B222973C();
  }
  else
  {
    **(_QWORD **)(v0 + 24) = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1B1B38A78()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B1B38AE4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  **(_QWORD **)(v0 + 24) = *(_QWORD *)(v0 + 16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B38B30()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B38B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[44] = a2;
  v3[45] = a3;
  v3[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B38B98()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;

  v1 = *(__int128 **)(v0 + 360);
  v2 = *((_QWORD *)v1 + 22);
  *(_QWORD *)(v0 + 368) = v2;
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[10];
  *(_OWORD *)(v0 + 160) = v1[9];
  *(_OWORD *)(v0 + 176) = v5;
  *(_OWORD *)(v0 + 128) = v3;
  *(_OWORD *)(v0 + 144) = v4;
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[6];
  *(_OWORD *)(v0 + 96) = v1[5];
  *(_OWORD *)(v0 + 112) = v8;
  *(_OWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 80) = v7;
  v9 = *v1;
  v10 = v1[2];
  *(_OWORD *)(v0 + 32) = v1[1];
  *(_OWORD *)(v0 + 48) = v10;
  *(_OWORD *)(v0 + 16) = v9;
  v11 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(v0 + 96, v0 + 272, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294(v0 + 272, v0 + 232, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v11);
  if (*(_QWORD *)(v0 + 240))
  {
    if (v2)
      v12 = v2;
    else
      v12 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 264);
    v13 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 208) = v13;
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 376) = v15;
    *(_QWORD *)(v0 + 384) = v16;
    swift_bridgeObjectRetain();
    sub_1B19F8C58((_QWORD *)(v0 + 272), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v17;
    *v17 = v0;
    v17[1] = sub_1B1B38D2C;
    return sub_1B1B2FA94(v14, v15, v16, v12, 0);
  }
  else
  {
    v19 = *(_QWORD **)(v0 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v19 = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1B1B38D2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 400) = v1;
  swift_task_dealloc();
  if (!v1)
    *(_QWORD *)(v4 + 408) = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B38DA0()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + 408);
  swift_bridgeObjectRelease();
  sub_1B1B40080(v0 + 208, v0 + 320);
  sub_1B1B40274(v0 + 320);
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 312) = *(_QWORD *)(v0 + 224);
  sub_1B1B28C6C(v0 + 312);
  v2 = *(_QWORD **)(v0 + 344);
  swift_bridgeObjectRelease();
  *v2 = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B38E34()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  sub_1B1B40080(v0 + 208, v0 + 328);
  sub_1B1B40274(v0 + 328);
  swift_unknownObjectRelease();
  *(_QWORD *)(v0 + 336) = *(_QWORD *)(v0 + 224);
  sub_1B1B28C6C(v0 + 336);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B38EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[44] = a2;
  v3[45] = a3;
  v3[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B38EDC()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;

  v1 = *(__int128 **)(v0 + 360);
  v2 = *((_QWORD *)v1 + 22);
  *(_QWORD *)(v0 + 368) = v2;
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[10];
  *(_OWORD *)(v0 + 160) = v1[9];
  *(_OWORD *)(v0 + 176) = v5;
  *(_OWORD *)(v0 + 128) = v3;
  *(_OWORD *)(v0 + 144) = v4;
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[6];
  *(_OWORD *)(v0 + 96) = v1[5];
  *(_OWORD *)(v0 + 112) = v8;
  *(_OWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 80) = v7;
  v9 = *v1;
  v10 = v1[2];
  *(_OWORD *)(v0 + 32) = v1[1];
  *(_OWORD *)(v0 + 48) = v10;
  *(_OWORD *)(v0 + 16) = v9;
  v11 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(v0 + 136, v0 + 272, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294(v0 + 272, v0 + 232, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v11);
  if (*(_QWORD *)(v0 + 240))
  {
    if (v2)
      v12 = v2;
    else
      v12 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 264);
    v13 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 208) = v13;
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 376) = v15;
    *(_QWORD *)(v0 + 384) = v16;
    swift_bridgeObjectRetain();
    sub_1B19F8C58((_QWORD *)(v0 + 272), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v17;
    *v17 = v0;
    v17[1] = sub_1B1B3888C;
    return sub_1B1B2FA94(v14, v15, v16, v12, 0);
  }
  else
  {
    v19 = *(_QWORD **)(v0 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v19 = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1B1B39070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[44] = a2;
  v3[45] = a3;
  v3[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B3908C()
{
  uint64_t v0;
  __int128 *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t (*v11)(void);
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;

  v1 = *(__int128 **)(v0 + 360);
  v2 = *((_QWORD *)v1 + 22);
  *(_QWORD *)(v0 + 368) = v2;
  v3 = v1[7];
  v4 = v1[8];
  v5 = v1[10];
  *(_OWORD *)(v0 + 160) = v1[9];
  *(_OWORD *)(v0 + 176) = v5;
  *(_OWORD *)(v0 + 128) = v3;
  *(_OWORD *)(v0 + 144) = v4;
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[6];
  *(_OWORD *)(v0 + 96) = v1[5];
  *(_OWORD *)(v0 + 112) = v8;
  *(_OWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 80) = v7;
  v9 = *v1;
  v10 = v1[2];
  *(_OWORD *)(v0 + 32) = v1[1];
  *(_OWORD *)(v0 + 48) = v10;
  *(_OWORD *)(v0 + 16) = v9;
  v11 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(v0 + 16, v0 + 272, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  sub_1B1B41294(v0 + 272, v0 + 232, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v11);
  if (*(_QWORD *)(v0 + 240))
  {
    if (v2)
      v12 = v2;
    else
      v12 = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)(v0 + 224) = *(_QWORD *)(v0 + 264);
    v13 = *(_OWORD *)(v0 + 248);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 232);
    *(_OWORD *)(v0 + 208) = v13;
    v14 = *(_QWORD *)(v0 + 192);
    v15 = *(_QWORD *)(v0 + 200);
    v16 = *(_QWORD *)(v0 + 216);
    *(_QWORD *)(v0 + 376) = v15;
    *(_QWORD *)(v0 + 384) = v16;
    swift_bridgeObjectRetain();
    sub_1B19F8C58((_QWORD *)(v0 + 272), (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1B410E4);
    v17 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 392) = v17;
    *v17 = v0;
    v17[1] = sub_1B1B3888C;
    return sub_1B1B2FA94(v14, v15, v16, v12, 0);
  }
  else
  {
    v19 = *(_QWORD **)(v0 + 344);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v19 = 0;
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

id sub_1B1B39224(void *a1)
{
  uint64_t v1;
  id v3;
  id v4;
  unint64_t v5;
  void *v6;
  id v7;
  uint64_t v9;

  v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6A80]), sel_init);
  objc_msgSend(v3, sel_setComputeFunction_, a1);
  v4 = objc_msgSend(a1, sel_name);
  if (!v4)
  {
    sub_1B222874C();
    v4 = (id)sub_1B2228728();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v3, sel_setLabel_, v4);

  v5 = *(_QWORD *)(v1 + 152);
  if (!(v5 >> 62))
  {
    if (!*(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_6;
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  v9 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (v9)
  {
LABEL_5:
    sub_1B19F8F48(0, &qword_1EEF5ADB0);
    swift_bridgeObjectRetain();
    v6 = (void *)sub_1B2228AAC();
    swift_bridgeObjectRelease();
    objc_msgSend(v3, sel_setBinaryArchives_, v6);

  }
LABEL_6:
  v7 = objc_msgSend(a1, sel_name);
  if (!v7)
  {
    sub_1B222874C();
    v7 = (id)sub_1B2228728();
    swift_bridgeObjectRelease();
  }
  objc_msgSend(v3, sel_setLabel_, v7);

  return v3;
}

uint64_t sub_1B1B393BC(uint64_t result, SEL *a2)
{
  uint64_t v2;
  id v3;
  id v4;
  id v5[2];

  v5[1] = *(id *)MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(v2 + 144))
  {
    v5[0] = 0;
    if (objc_msgSend((id)swift_unknownObjectRetain(), *a2, result, v5))
    {
      v3 = v5[0];
    }
    else
    {
      v4 = v5[0];
      sub_1B2227FB4();

      swift_willThrow();
    }
    return swift_unknownObjectRelease();
  }
  return result;
}

id sub_1B1B3947C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  int v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_unfair_lock_s *v46;
  uint64_t v47;
  unint64_t v48;
  char v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  int v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(_BYTE *);
  __int128 v84;
  __int128 v85;
  int v86;
  NSObject *v87;
  os_unfair_lock_s *v88;
  NSObject *v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  NSObject *v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  os_unfair_lock_s *v103;
  uint64_t v104;
  __int128 v105;
  void *v106;
  void *v107;
  void *v108;
  id v109;
  id v110;
  void *v111;
  void *v112;
  os_unfair_lock_s *v113;
  __int128 v114;
  int v115;
  os_unfair_lock_s *v116;
  id v117;
  char v118;
  uint64_t v119;
  char v120;
  BOOL v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  os_unfair_lock_s *v129;
  id v130;
  os_unfair_lock_s *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  void *v140;
  char v141;
  unsigned __int8 v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  __int128 v159;
  _QWORD v160[8];
  _BYTE v161[56];
  __int128 v162;
  char v163;
  uint64_t v164;

  v4 = (_QWORD *)v3;
  v164 = *MEMORY[0x1E0C80C00];
  sub_1B1792854(0, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  MEMORY[0x1E0C80A78](v8, v9);
  MEMORY[0x1E0C80A78](v10, v11);
  v151 = (uint64_t)&v144 - v13;
  v14 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(a1 + 8);
  v16 = HIBYTE(v15) & 0xF;
  if ((v15 & 0x2000000000000000) == 0)
    v16 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFLL;
  if (!v16)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v42 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)v161 = 0;
    swift_retain();
    sub_1B1F1AD70(v42, (uint64_t *)v161, 0xD000000000000030, 0x80000001B232F060);
    swift_release();
    swift_release();
    return 0;
  }
  v147 = v12;
  v149 = *(void **)(a1 + 24);
  v17 = (void *)swift_unknownObjectRetain();
  v18 = sub_1B1E26BD8(v17);
  swift_unknownObjectRelease();
  v157 = v18 ^ a2 & 1;
  v158 = v3 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24));
  v19 = *(_BYTE *)(v3 + 88);
  v148 = a2;
  LODWORD(v150) = a3;
  if ((v19 & 1) == 0
    && ((v20 = *(_QWORD *)(v3 + 48), *(_QWORD *)(v20 + 16)) && (v21 = sub_1B1DC3AC8(v157), (v22 & 1) != 0)
     || (a2 & 1) == 0 && (v20 = v4[6], *(_QWORD *)(v20 + 16)) && (v21 = sub_1B1DC3AC8(v18 ^ 1), (v23 & 1) != 0)))
  {
    v24 = *(_QWORD *)(v20 + 56) + 80 * v21;
    v25 = *(id *)v24;
    v26 = *(_QWORD *)(v24 + 16);
    v27 = *(_QWORD *)(v24 + 24);
    v28 = *(_QWORD *)(v24 + 32);
    v29 = *(_QWORD *)(v24 + 40);
    v30 = *(_QWORD *)(v24 + 48);
    v31 = *(_QWORD *)(v24 + 56);
    v32 = *(void **)(v24 + 64);
    v33 = *(unsigned __int8 *)(v24 + 72);
    v141 = *(_BYTE *)(v24 + 72);
    v34 = *(id *)v24;
    v153 = *(_QWORD *)(v24 + 8);
    v35 = v26;
    v154 = v27;
    v36 = v28;
    v155 = v29;
    v156 = v30;
    v152 = v31;
    sub_1B1B3FCA8(v34, v153, v26, v27, v28, v29, v30, v31, v32, v141);
  }
  else
  {
    v25 = 0;
    v153 = 0;
    v35 = 0;
    v154 = 0;
    v36 = 0;
    v155 = 0;
    v156 = 0;
    v152 = 0;
    v32 = 0;
    v33 = 255;
  }
  v37 = v4[8];
  if (*(_QWORD *)(v37 + 16) && (v38 = sub_1B1DC3AC8(v157), (v39 & 1) != 0))
  {
    v40 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 56) + v38);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v158 + 24));
    if (v40 == 1)
    {
      v142 = v33;
LABEL_28:
      sub_1B1B3FD84(v25, v153, v35, v154, v36, v155, v156, v152, v32, v142);
      return 0;
    }
  }
  else
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v158 + 24));
  }
  if (v33 > 1)
  {
    if (v33 != 2)
    {
      if ((v150 & 1) == 0)
        goto LABEL_84;
      if (qword_1ED4BF680 != -1)
        swift_once();
      if ((byte_1ED4BF710 & 1) == 0)
      {
        v87 = dispatch_group_create();
        dispatch_group_enter(v87);
        v88 = *(os_unfair_lock_s **)(v158 + 24);
        os_unfair_lock_lock(v88);
        *(_QWORD *)v161 = v87;
        memset(&v161[8], 0, 48);
        v162 = 0u;
        v163 = 0;
        v89 = v87;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v160[0] = v4[6];
        v4[6] = 0x8000000000000000;
        v91 = v157;
        sub_1B1B85EC8((uint64_t)v161, v157, isUniquelyReferenced_nonNull_native);
        v4[6] = v160[0];
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v88);
        v92 = v151;
        sub_1B2228BF0();
        v93 = sub_1B2228C08();
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v92, 0, 1, v93);
        v94 = swift_allocObject();
        *(_QWORD *)(v94 + 16) = v89;
        *(_QWORD *)(v94 + 24) = v4;
        v95 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)(v94 + 32) = *(_OWORD *)a1;
        *(_OWORD *)(v94 + 48) = v95;
        *(_OWORD *)(v94 + 64) = *(_OWORD *)(a1 + 32);
        *(_QWORD *)(v94 + 80) = *(_QWORD *)(a1 + 48);
        *(_BYTE *)(v94 + 88) = v148 & 1;
        *(_QWORD *)(v94 + 96) = v91;
        v96 = v89;
        swift_retain();
        sub_1B1B3FAAC(a1);
        if (qword_1ED4BF430 != -1)
          swift_once();
        v97 = qword_1ED4BF658;
        swift_retain();
        if (v97 != -1)
          swift_once();
        v98 = qword_1ED4D0FD0;
        swift_retain();
        swift_release();
        v99 = (void (*)(uint64_t))MEMORY[0x1E0DF0750];
        v100 = v151;
        v101 = v147;
        sub_1B1B425E0(v151, v147, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
        v102 = (_QWORD *)swift_allocObject();
        v102[2] = 0;
        v102[3] = 0;
        v102[4] = v98;
        v102[5] = &unk_1EEF5AD18;
        v102[6] = v94;
        sub_1B1B3E81C(v101, (uint64_t)&unk_1EEF5AD28, (uint64_t)v102);

        swift_release();
        sub_1B1B25B94(v100, (unint64_t *)&unk_1ED4BA530, v99);
      }
      else
      {
LABEL_84:
        if (*(_QWORD *)(a1 + 40))
          v44 = *(_QWORD *)(a1 + 40);
        else
          v44 = MEMORY[0x1E0DEE9D8];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v75 = sub_1B1B2EC54(v14, v15, v149, v44, 0);
        swift_bridgeObjectRelease_n();
        v156 = (uint64_t)v75;
        v76 = sub_1B1B39224(v75);
        v77 = sub_1B1E26F40();
        v79 = v78;
        if ((v148 & 1) != 0)
          v80 = "makeComputePipelineRefl";
        else
          v80 = "makeComputePipeline";
        if ((v148 & 1) != 0)
          v81 = 23;
        else
          v81 = 19;
        if ((v148 & 1) != 0)
          v82 = 3;
        else
          v82 = 0;
        sub_1B1B3F748(v80, v81, 2u, v77, v79, v157, (uint64_t)v160);
        v83 = *(void (**)(_BYTE *))((char *)v4 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
        if (v83)
        {
          if (v83 == (void (*)(_BYTE *))1)
          {
            v155 = v82;
            if (qword_1ED4BF430 != -1)
              swift_once();
            *(_QWORD *)v161 = 0;
            *(_QWORD *)&v161[8] = 0xE000000000000000;
            swift_retain();
            sub_1B2229430();
            v159 = *(_OWORD *)v161;
            sub_1B2228890();
            v84 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)v161 = *(_OWORD *)a1;
            *(_OWORD *)&v161[16] = v84;
            *(_OWORD *)&v161[32] = *(_OWORD *)(a1 + 32);
            *(_QWORD *)&v161[48] = *(_QWORD *)(a1 + 48);
            sub_1B22295EC();
            v85 = v159;
            v86 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            *(_QWORD *)v161 = 0;
            swift_retain();
            sub_1B1F1AD70(v86, (uint64_t *)v161, v85, *((uint64_t *)&v85 + 1));
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            v82 = v155;
          }
          else
          {
            v103 = *(os_unfair_lock_s **)(v158 + 24);
            swift_retain();
            os_unfair_lock_lock(v103);
            *(_QWORD *)&v161[24] = &type metadata for ComputePipelineDescriptor;
            v104 = swift_allocObject();
            *(_QWORD *)v161 = v104;
            v105 = *(_OWORD *)(a1 + 16);
            *(_OWORD *)(v104 + 16) = *(_OWORD *)a1;
            *(_OWORD *)(v104 + 32) = v105;
            *(_OWORD *)(v104 + 48) = *(_OWORD *)(a1 + 32);
            *(_QWORD *)(v104 + 64) = *(_QWORD *)(a1 + 48);
            sub_1B1B3FAAC(a1);
            v83(v161);
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v161);
            os_unfair_lock_unlock(v103);
            sub_1B1B3FB0C((unint64_t)v83);
          }
        }
        v106 = (void *)v4[2];
        *(_QWORD *)v161 = 0;
        *(_QWORD *)&v159 = 0;
        v25 = objc_msgSend(v106, sel_newComputePipelineStateWithDescriptor_options_reflection_error_, v76, v82, v161, &v159);
        v107 = (void *)v159;
        v108 = *(void **)v161;
        v109 = *(id *)v161;
        v110 = v107;
        if (v25)
        {
          sub_1B1B393BC((uint64_t)v76, (SEL *)&selRef_addComputePipelineFunctionsWithDescriptor_error_);
          v128 = v158;
          v129 = *(os_unfair_lock_s **)(v158 + 24);
          v130 = v109;
          os_unfair_lock_lock(v129);
          sub_1B1B3A694(v108, (uint64_t)v4, v157, (uint64_t)v25, a1);
          os_unfair_lock_unlock(v129);

          v131 = *(os_unfair_lock_s **)(v128 + 24);
          os_unfair_lock_lock(v131);
          sub_1B1B3BCD8((uint64_t)(v4 + 14));
          os_unfair_lock_unlock(v131);
          sub_1B1B3FB20((uint64_t)v160);
          swift_unknownObjectRelease();

          return v25;
        }
        v111 = v110;
        v112 = (void *)sub_1B2227FB4();

        swift_willThrow();
        v113 = *(os_unfair_lock_s **)(v158 + 24);
        os_unfair_lock_lock(v113);
        sub_1B1B3BCD8((uint64_t)(v4 + 14));
        os_unfair_lock_unlock(v113);
        sub_1B1B3FB20((uint64_t)v160);
        swift_unknownObjectRelease();

        if (qword_1ED4BF430 != -1)
          swift_once();
        *(_QWORD *)v161 = 0;
        *(_QWORD *)&v161[8] = 0xE000000000000000;
        swift_retain();
        sub_1B2229430();
        sub_1B2228890();
        *(_QWORD *)&v159 = v112;
        sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
        sub_1B22295EC();
        v114 = *(_OWORD *)v161;
        v115 = sub_1B2228E90();
        if (qword_1ED4BF658 != -1)
          swift_once();
        *(_QWORD *)v161 = 0;
        swift_retain();
        sub_1B1F1AD70(v115, (uint64_t *)v161, v114, *((uint64_t *)&v114 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        v116 = *(os_unfair_lock_s **)(v158 + 24);
        os_unfair_lock_lock(v116);
        *(_QWORD *)v161 = v112;
        memset(&v161[8], 0, 48);
        v162 = 0u;
        v163 = 2;
        v117 = v112;
        v118 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v159 = v4[6];
        v4[6] = 0x8000000000000000;
        v119 = v157;
        sub_1B1B85EC8((uint64_t)v161, v157, v118);
        v4[6] = v159;
        swift_bridgeObjectRelease();
        v120 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)&v159 = v4[8];
        v4[8] = 0x8000000000000000;
        sub_1B1B85DC8(0, v119, v120);
        v4[8] = v159;
        swift_bridgeObjectRelease();
        os_unfair_lock_unlock(v116);

      }
      return 0;
    }
    v142 = 2;
    goto LABEL_28;
  }
  if (!v33)
  {
    v41 = v152;
    if ((v150 & 1) != 0)
    {
      sub_1B1B3FD84(v25, v153, v35, v154, v36, v155, v156, v152, v32, 0);
    }
    else
    {
      v45 = v35;
      sub_1B1B3FCA8(v25, v153, v35, v154, v36, v155, v156, v152, v32, 0);
      CACurrentMediaTime();
      sub_1B2228EFC();
      v46 = *(os_unfair_lock_s **)(v158 + 24);
      os_unfair_lock_lock(v46);
      v47 = v4[6];
      if (*(_QWORD *)(v47 + 16) && (v48 = sub_1B1DC3AC8(v157), (v49 & 1) != 0))
      {
        v50 = *(_QWORD *)(v47 + 56) + 80 * v48;
        v51 = *(void **)v50;
        v52 = *(_QWORD *)(v50 + 8);
        v53 = *(_QWORD *)(v50 + 24);
        v54 = *(_QWORD *)(v50 + 32);
        v55 = *(_QWORD *)(v50 + 40);
        v57 = *(_QWORD *)(v50 + 48);
        v56 = *(_QWORD *)(v50 + 56);
        v58 = *(void **)(v50 + 64);
        v59 = *(unsigned __int8 *)(v50 + 72);
        v143 = *(_BYTE *)(v50 + 72);
        v60 = *(void **)v50;
        v149 = *(void **)(v50 + 16);
        v150 = v53;
        v151 = v54;
        v157 = v55;
        v158 = v56;
        sub_1B1B3FCA8(v60, v52, (uint64_t)v149, v53, v54, v55, v57, v56, v58, v143);
        os_unfair_lock_unlock(v46);
        if (v59 <= 1)
        {
          v148 = v57;
          v146 = v36;
          v145 = v45;
          if (v59)
          {
            v132 = v153;
            v133 = v45;
            v134 = v154;
            v135 = v36;
            v136 = v155;
            v137 = v156;
            v138 = v152;
            sub_1B1B3FD84(v25, v153, v133, v154, v135, v155, v156, v152, v32, 0);
            sub_1B1B3FD84(v25, v132, v145, v134, v146, v136, v137, v138, v32, 0);
            v139 = v58;
            v140 = (void *)swift_unknownObjectRetain();
            sub_1B1B3FD84(v140, v52, (uint64_t)v149, v150, v151, v157, v148, v158, v58, 1u);
            return v51;
          }
          v61 = v153;
          v62 = v45;
          v63 = v154;
          v64 = v36;
          v65 = v155;
          v66 = v156;
          v67 = v152;
          sub_1B1B3FD84(v25, v153, v62, v154, v64, v155, v156, v152, v32, 0);
          sub_1B1B3FD84(v51, v52, (uint64_t)v149, v150, v151, v157, v148, v158, v58, 0);
          sub_1B1B3FD84(v25, v61, v145, v63, v146, v65, v66, v67, v32, 0);
          return 0;
        }
        v121 = v59 == 2;
        v41 = v152;
        if (v121)
        {
          v148 = v57;
          v122 = v153;
          v123 = v45;
          v145 = v45;
          v124 = v154;
          v125 = v36;
          v146 = v36;
          v126 = v155;
          v127 = v156;
          sub_1B1B3FD84(v25, v153, v123, v154, v125, v155, v156, v152, v32, 0);
          sub_1B1B3FD84(v51, v52, (uint64_t)v149, v150, v151, v157, v148, v158, v58, 2u);
          sub_1B1B3FD84(v25, v122, v145, v124, v146, v126, v127, v41, v32, 0);
          return 0;
        }
      }
      else
      {
        os_unfair_lock_unlock(v46);
      }
      v70 = v153;
      v71 = v154;
      v72 = v155;
      v73 = v156;
      sub_1B1B3FD84(v25, v153, v45, v154, v36, v155, v156, v41, v32, 0);
      sub_1B1B3FD84(v25, v70, v45, v71, v36, v72, v73, v41, v32, 0);
    }
    return 0;
  }
  v43 = v152;
  if ((v150 & 1) != 0)
  {
    sub_1B1B3FD84(v25, v153, v35, v154, v36, v155, v156, v152, v32, 1u);
    return 0;
  }
  v68 = v32;
  v69 = (void *)swift_unknownObjectRetain();
  sub_1B1B3FD84(v69, v153, v35, v154, v36, v155, v156, v43, v32, 1u);
  return v25;
}

uint64_t sub_1B1B3A694(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  void *v20;
  char v21;
  uint64_t v22;

  v9 = *(_QWORD *)a5;
  v10 = *(_QWORD *)(a5 + 8);
  v11 = *(_QWORD *)(a5 + 32);
  v16[0] = a4;
  v16[1] = v9;
  v16[2] = v10;
  v17 = *(_OWORD *)(a5 + 16);
  v18 = v11;
  v19 = *(_OWORD *)(a5 + 40);
  v20 = a1;
  v21 = 1;
  swift_unknownObjectRetain();
  sub_1B1B3FAAC(a5);
  v12 = a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = 0x8000000000000000;
  sub_1B1B85EC8((uint64_t)v16, a3, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(a2 + 48) = v22;
  swift_bridgeObjectRelease();
  v14 = swift_isUniquelyReferenced_nonNull_native();
  v22 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, a3, v14);
  *(_QWORD *)(a2 + 64) = v22;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B3A790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 992) = a6;
  *(_BYTE *)(v6 + 833) = a5;
  *(_QWORD *)(v6 + 984) = a4;
  *(_QWORD *)(v6 + 976) = a3;
  *(_QWORD *)(v6 + 968) = a2;
  return swift_task_switch();
}

uint64_t sub_1B1B3A7B8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v1 = v0[123];
  v2 = v0[122];
  v3 = swift_allocObject();
  v0[125] = v3;
  *(_QWORD *)(v3 + 16) = v2;
  v4 = *(_OWORD *)v1;
  v5 = *(_OWORD *)(v1 + 16);
  v6 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v3 + 72) = *(_QWORD *)(v1 + 48);
  *(_OWORD *)(v3 + 56) = v6;
  *(_OWORD *)(v3 + 40) = v5;
  *(_OWORD *)(v3 + 24) = v4;
  swift_retain();
  sub_1B1B3FAAC(v1);
  swift_retain();
  sub_1B19F8F48(255, (unint64_t *)&unk_1ED4BA650);
  swift_asyncLet_begin();
  return swift_asyncLet_get_throwing();
}

uint64_t sub_1B1B3A8A0()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 1008) = v0;
  if (v0)
    return swift_asyncLet_finish();
  else
    return swift_task_switch();
}

uint64_t sub_1B1B3A8D4()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  void (*v9)(uint64_t);
  __int128 *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void *v24;
  int v26;
  id v27;
  uint64_t v28[2];

  v1 = *(_QWORD *)(v0 + 992);
  v2 = *(unsigned __int8 *)(v0 + 833);
  v3 = *(_QWORD *)(v0 + 976);
  v4 = (void *)swift_unknownObjectRetain();
  v27 = sub_1B1B39224(v4);
  *(_QWORD *)(v0 + 1016) = v27;
  swift_unknownObjectRelease();
  v26 = v2;
  if (v2)
    v5 = "asyncMakeComputePipelineRef";
  else
    v5 = "asyncMakeComputePipeline";
  if (v2)
    v6 = 27;
  else
    v6 = 24;
  v7 = sub_1B1E26F40();
  sub_1B1B3F748(v5, v6, 2u, v7, v8, v1, v0 + 840);
  v9 = *(void (**)(uint64_t))(v3 + OBJC_IVAR____TtC3VFX11ShaderCache_onShaderCompilation);
  if (v9)
  {
    if (v9 == (void (*)(uint64_t))1)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v10 = *(__int128 **)(v0 + 984);
      v28[0] = 0;
      v28[1] = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      *(_QWORD *)(v0 + 720) = 0;
      *(_QWORD *)(v0 + 728) = 0xE000000000000000;
      sub_1B2228890();
      v11 = *v10;
      v12 = v10[1];
      v13 = v10[2];
      *(_QWORD *)(v0 + 952) = *((_QWORD *)v10 + 6);
      *(_OWORD *)(v0 + 920) = v12;
      *(_OWORD *)(v0 + 936) = v13;
      *(_OWORD *)(v0 + 904) = v11;
      sub_1B22295EC();
      v14 = *(_QWORD *)(v0 + 720);
      v15 = *(_QWORD *)(v0 + 728);
      v16 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v28[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v16, v28, v14, v15);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    else
    {
      v17 = *(_QWORD *)(v0 + 984);
      v18 = *(os_unfair_lock_s **)(*(_QWORD *)(v0 + 976) + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
      swift_retain();
      os_unfair_lock_lock(v18);
      *(_QWORD *)(v0 + 928) = &type metadata for ComputePipelineDescriptor;
      v19 = swift_allocObject();
      *(_QWORD *)(v0 + 904) = v19;
      v21 = *(_OWORD *)(v17 + 16);
      v20 = *(_OWORD *)(v17 + 32);
      v22 = *(_OWORD *)v17;
      *(_QWORD *)(v19 + 64) = *(_QWORD *)(v17 + 48);
      *(_OWORD *)(v19 + 32) = v21;
      *(_OWORD *)(v19 + 48) = v20;
      *(_OWORD *)(v19 + 16) = v22;
      sub_1B1B3FAAC(v17);
      v9(v0 + 904);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v0 + 904);
      os_unfair_lock_unlock(v18);
      sub_1B1B3FB0C((unint64_t)v9);
    }
  }
  if (v26)
    v23 = 3;
  else
    v23 = 0;
  v24 = *(void **)(*(_QWORD *)(v0 + 976) + 16);
  *(_QWORD *)(v0 + 656) = v0;
  *(_QWORD *)(v0 + 696) = v0 + 720;
  *(_QWORD *)(v0 + 664) = sub_1B1B3AC24;
  *(_QWORD *)(v0 + 936) = swift_continuation_init();
  *(_QWORD *)(v0 + 904) = MEMORY[0x1E0C809B0];
  *(_QWORD *)(v0 + 912) = 0x40000000;
  *(_QWORD *)(v0 + 920) = sub_1B1B39220;
  *(_QWORD *)(v0 + 928) = &unk_1E63D4700;
  objc_msgSend(v24, sel_newComputePipelineStateWithDescriptor_options_completionHandler_, v27, v23, v0 + 904);
  return swift_continuation_await();
}

uint64_t sub_1B1B3AC24()
{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)v0 + 1024) = *(_QWORD *)(*(_QWORD *)v0 + 688);
  return swift_task_switch();
}

void sub_1B1B3AC84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;

  v1 = v0[126];
  v2 = v0[90];
  v3 = (void *)v0[91];
  sub_1B1B393BC(v0[127], (SEL *)&selRef_addComputePipelineFunctionsWithDescriptor_error_);
  v0[129] = v1;
  if (v1)
  {
    v4 = (void *)v0[127];
    v5 = v0[122];
    swift_unknownObjectRelease();

    v6 = *(os_unfair_lock_s **)(v5 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  }
  else
  {
    v7 = v0[124];
    v8 = v0[123];
    v9 = v0[122];
    v10 = v9 + OBJC_IVAR____TtC3VFX11ShaderCache_lock;
    v11 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
    os_unfair_lock_lock(v11);
    sub_1B1B3A694(v3, v9, v7, v2, v8);
    os_unfair_lock_unlock(v11);
    v4 = (void *)v0[127];
    v5 = v0[122];
    swift_unknownObjectRelease();

    v6 = *(os_unfair_lock_s **)(v10 + 24);
  }
  os_unfair_lock_lock(v6);
  sub_1B1B3BCD8(v5 + 112);
  os_unfair_lock_unlock(v6);
  sub_1B1B3FB20((uint64_t)(v0 + 105));

  swift_asyncLet_finish();
}

uint64_t sub_1B1B3AE24()
{
  return swift_task_switch();
}

uint64_t sub_1B1B3AE38()
{
  uint64_t v0;

  swift_release();
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 968));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3AE7C()
{
  return swift_task_switch();
}

uint64_t sub_1B1B3AE90()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12[2];

  v1 = *(void **)(v0 + 1008);
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 904) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 992);
  v6 = *(_QWORD *)(v0 + 976);
  v12[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v12, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 760) = v1;
  *(_OWORD *)(v0 + 768) = 0u;
  *(_OWORD *)(v0 + 784) = 0u;
  *(_OWORD *)(v0 + 800) = 0u;
  *(_OWORD *)(v0 + 816) = 0u;
  *(_BYTE *)(v0 + 832) = 2;
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12[0] = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v6 + 48) = 0x8000000000000000;
  sub_1B1B85EC8(v0 + 760, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 48) = v12[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v12[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v12[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 968));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3B0F0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  v1 = *(void **)(v0 + 1016);
  v2 = *(_QWORD *)(v0 + 976);
  swift_willThrow();
  v3 = *(os_unfair_lock_s **)(v2 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v3);
  sub_1B1B3BCD8(v2 + 112);
  os_unfair_lock_unlock(v3);
  sub_1B1B3FB20(v0 + 840);

  return swift_asyncLet_finish();
}

uint64_t sub_1B1B3B194()
{
  return swift_task_switch();
}

uint64_t sub_1B1B3B1A8()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12[2];

  v1 = *(void **)(v0 + 1024);
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 904) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 992);
  v6 = *(_QWORD *)(v0 + 976);
  v12[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v12, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 760) = v1;
  *(_OWORD *)(v0 + 768) = 0u;
  *(_OWORD *)(v0 + 784) = 0u;
  *(_OWORD *)(v0 + 800) = 0u;
  *(_OWORD *)(v0 + 816) = 0u;
  *(_BYTE *)(v0 + 832) = 2;
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12[0] = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v6 + 48) = 0x8000000000000000;
  sub_1B1B85EC8(v0 + 760, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 48) = v12[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v12[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v12[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 968));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3B408()
{
  return swift_task_switch();
}

uint64_t sub_1B1B3B41C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_unfair_lock_s *v7;
  id v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  uint64_t v12[2];

  v1 = *(void **)(v0 + 1032);
  swift_release();
  if (qword_1ED4BF430 != -1)
    swift_once();
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  swift_retain();
  sub_1B2229430();
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0xE000000000000000;
  sub_1B2228890();
  *(_QWORD *)(v0 + 904) = v1;
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
  sub_1B22295EC();
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v5 = *(_QWORD *)(v0 + 992);
  v6 = *(_QWORD *)(v0 + 976);
  v12[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v4, v12, v2, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  v7 = *(os_unfair_lock_s **)(v6 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v7);
  *(_QWORD *)(v0 + 760) = v1;
  *(_OWORD *)(v0 + 768) = 0u;
  *(_OWORD *)(v0 + 784) = 0u;
  *(_OWORD *)(v0 + 800) = 0u;
  *(_OWORD *)(v0 + 816) = 0u;
  *(_BYTE *)(v0 + 832) = 2;
  v8 = v1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v12[0] = *(_QWORD *)(v6 + 48);
  *(_QWORD *)(v6 + 48) = 0x8000000000000000;
  sub_1B1B85EC8(v0 + 760, v5, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v6 + 48) = v12[0];
  swift_bridgeObjectRelease();
  v10 = swift_isUniquelyReferenced_nonNull_native();
  v12[0] = *(_QWORD *)(v6 + 64);
  *(_QWORD *)(v6 + 64) = 0x8000000000000000;
  sub_1B1B85DC8(0, v5, v10);
  *(_QWORD *)(v6 + 64) = v12[0];
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v7);

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 968));
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3B67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B3B698()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v1 = (uint64_t *)v0[4];
  v2 = v1[5];
  v0[5] = v2;
  if (v2)
    v3 = v2;
  else
    v3 = MEMORY[0x1E0DEE9D8];
  v4 = *v1;
  v5 = v1[1];
  v6 = v1[3];
  swift_bridgeObjectRetain();
  v7 = (_QWORD *)swift_task_alloc();
  v0[6] = v7;
  *v7 = v0;
  v7[1] = sub_1B1B3B730;
  return sub_1B1B2FA94(v4, v5, v6, v3, 0);
}

uint64_t sub_1B1B3B730(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *(_QWORD *)(*v2 + 56) = v1;
  swift_task_dealloc();
  if (!v1)
  {
    swift_bridgeObjectRelease();
    *(_QWORD *)(v4 + 64) = a1;
  }
  return swift_task_switch();
}

uint64_t sub_1B1B3B7BC()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3B7D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3B818(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  _QWORD *v5;
  id v6;
  _QWORD *v9;
  id v10;

  if (a4)
  {
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    swift_allocError();
    *v5 = a4;
    v6 = a4;
    return swift_continuation_throwingResumeWithError();
  }
  else
  {
    v9 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40);
    *v9 = a2;
    v9[1] = a3;
    swift_unknownObjectRetain();
    v10 = a3;
    return swift_continuation_throwingResume();
  }
}

id sub_1B1B3B8B4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  void *v13;
  unint64_t v14;
  id v15[2];

  v15[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = *(void **)(v1 + 16);
  v13 = 0;
  v15[0] = 0;
  v4 = objc_msgSend(v3, sel_newComputePipelineStateWithFunction_options_reflection_error_, a1, 3, &v13, v15);
  v5 = v13;
  v6 = v15[0];
  v7 = v5;
  if (!v4)
  {
    v8 = (void *)sub_1B2227FB4();

    swift_willThrow();
    if (qword_1ED4BF430 != -1)
      swift_once();
    v13 = 0;
    v14 = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B2228890();
    v15[0] = v8;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    sub_1B22295EC();
    v9 = (uint64_t)v13;
    v10 = v14;
    v11 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v13 = 0;
    swift_retain();
    sub_1B1F1AD70(v11, (uint64_t *)&v13, v9, v10);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();

  }
  return v4;
}

void sub_1B1B3BAB8()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v1);
  swift_bridgeObjectRelease();
  v2 = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v0 + 56) = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 40) = v2;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 48) = v2;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  os_unfair_lock_unlock(v1);
}

uint64_t sub_1B1B3BB2C()
{
  uint64_t v0;
  os_unfair_lock_s *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t j;
  id v12;
  void *v13;

  v1 = *(os_unfair_lock_s **)(v0 + OBJC_IVAR____TtC3VFX11ShaderCache_lock + 24);
  os_unfair_lock_lock(v1);
  v2 = swift_bridgeObjectRetain();
  v3 = sub_1B1B2CED8(v2);
  swift_bridgeObjectRelease();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1B1B2D12C(v4);
  swift_bridgeObjectRelease();
  os_unfair_lock_unlock(v1);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = sub_1B22296AC();
    if (!v6)
      goto LABEL_9;
  }
  else
  {
    v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v6)
      goto LABEL_9;
  }
  for (i = 0; i != v6; ++i)
  {
    if ((v3 & 0xC000000000000001) != 0)
      v8 = (id)MEMORY[0x1B5E21018](i, v3);
    else
      v8 = *(id *)(v3 + 8 * i + 32);
    v9 = v8;
    sub_1B2228EFC();

  }
LABEL_9:
  swift_bridgeObjectRelease();
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v10 = sub_1B22296AC();
    if (!v10)
      goto LABEL_17;
  }
  else
  {
    v10 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v10)
      goto LABEL_17;
  }
  for (j = 0; j != v10; ++j)
  {
    if ((v5 & 0xC000000000000001) != 0)
      v12 = (id)MEMORY[0x1B5E21018](j, v5);
    else
      v12 = *(id *)(v5 + 8 * j + 32);
    v13 = v12;
    sub_1B2228EFC();

  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B3BCD8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  NSObject *v18;
  const char *v19;
  const char *v21;
  uint64_t v22;
  uint8_t *v23;
  os_signpost_id_t v24;
  void (*v25)(_BYTE *, uint64_t);
  _BYTE v26[12];
  int v27;
  uint64_t v28;
  char v29;

  v2 = v1;
  v4 = sub_1B22283BC();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_1B2228380();
  v28 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v26[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = &v26[-v15];
  *(double *)a1 = *(double *)a1 + CACurrentMediaTime() - *(double *)(v2 + 8);
  ++*(_QWORD *)(a1 + 8);
  if (qword_1ED4BA0E0 != -1)
    swift_once();
  v17 = sub_1B22283B0();
  sub_1B1B40EC8(v17, (uint64_t)qword_1ED4D0E48);
  v18 = sub_1B2228398();
  sub_1B22283C8();
  v27 = sub_1B2228F98();
  if ((sub_1B2229094() & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 32) & 1) != 0)
      v19 = &v29;
    else
      v19 = *(const char **)(v2 + 16);
    swift_retain();
    sub_1B22283EC();
    swift_release();
    if ((*(unsigned int (**)(_BYTE *, uint64_t))(v5 + 88))(v8, v4) == *MEMORY[0x1E0DF2190])
    {
      v21 = "[Error] Interval already ended";
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
      v21 = "";
    }
    v22 = v28;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v28 + 16))(v12, v16, v9);
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    v24 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v18, (os_signpost_type_t)v27, v24, v19, v21, v23, 2u);
    MEMORY[0x1B5E23F88](v23, -1, -1);

    v25 = *(void (**)(_BYTE *, uint64_t))(v22 + 8);
    v25(v16, v9);
    return ((uint64_t (*)(_BYTE *, uint64_t))v25)(v12, v9);
  }
  else
  {

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v28 + 8))(v16, v9);
  }
}

uint64_t sub_1B1B3BF60()
{
  uint64_t v0;

  sub_1B1B42BB0(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ShaderCache.FunctionWrapper()
{
  return objc_opt_self();
}

uint64_t destroy for ShaderCache.SpecializedFunction()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ShaderCache.SpecializedFunction(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ShaderCache.SpecializedFunction(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ShaderCache.SpecializedFunction(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderCache.SpecializedFunction(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderCache.SpecializedFunction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderCache.SpecializedFunction()
{
  return &type metadata for ShaderCache.SpecializedFunction;
}

_QWORD *destroy for ShaderCache.ShaderCompilationTrigger(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFuLL)
    return (_QWORD *)swift_release();
  return result;
}

uint64_t _s3VFX11ShaderCacheC24ShaderCompilationTriggerOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  if (*(_QWORD *)a2 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v3 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_retain();
  }
  return a1;
}

unint64_t *assignWithCopy for ShaderCache.ShaderCompilationTrigger(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_retain();
  swift_release();
  return a1;
}

unint64_t *assignWithTake for ShaderCache.ShaderCompilationTrigger(unint64_t *a1, unint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a2;
  if (*a1 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      v6 = a2[1];
      *a1 = v4;
      a1[1] = v6;
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = a2[1];
  *a1 = v4;
  a1[1] = v5;
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderCache.ShaderCompilationTrigger(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ShaderCache.ShaderCompilationTrigger(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_1B1B3C438(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_1B1B3C450(_QWORD *result, int a2)
{
  uint64_t v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else
  {
    if (!a2)
      return result;
    v2 = (a2 - 1);
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for ShaderCache.ShaderCompilationTrigger()
{
  return &type metadata for ShaderCache.ShaderCompilationTrigger;
}

ValueMetadata *type metadata accessor for ShaderCache.Stats()
{
  return &type metadata for ShaderCache.Stats;
}

__n128 initializeWithCopy for PipelineStatistics(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for PipelineStatistics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 164))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PipelineStatistics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 160) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 164) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PipelineStatistics()
{
  return &type metadata for PipelineStatistics;
}

uint64_t sub_1B1B3C554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    return swift_retain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return swift_unknownObjectRetain();
}

uint64_t destroy for ShaderCache.CacheEntry(uint64_t a1)
{
  return sub_1B1B3C5D8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t sub_1B1B3C5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) == 0)
    return swift_release();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ShaderCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1B1B3C554(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for ShaderCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_1B1B3C554(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  v16 = *(_BYTE *)(a1 + 48);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  sub_1B1B3C5D8(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

__n128 initializeWithCopy for BlendingStates(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ShaderCache.CacheEntry(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_BYTE *)(a1 + 48);
  v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = v3;
  sub_1B1B3C5D8(v4, v6, v5, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderCache.CacheEntry(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderCache.CacheEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1B3C840(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 48);
}

uint64_t sub_1B1B3C848(uint64_t result, char a2)
{
  *(_BYTE *)(result + 48) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderCache.CacheEntry()
{
  return &type metadata for ShaderCache.CacheEntry;
}

void destroy for ShaderCache.ComputePipeline(uint64_t a1)
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for ShaderCache.ComputePipeline(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = (void *)a2[8];
  a1[8] = v7;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v8 = v7;
  return a1;
}

_QWORD *assignWithCopy for ShaderCache.ComputePipeline(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  v4 = (void *)a1[8];
  v5 = (void *)a2[8];
  a1[8] = v5;
  v6 = v5;

  return a1;
}

__n128 initializeWithTake for ShaderCache.ComputePipeline(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for ShaderCache.ComputePipeline(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 64);
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;

  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderCache.ComputePipeline(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderCache.ComputePipeline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderCache.ComputePipeline()
{
  return &type metadata for ShaderCache.ComputePipeline;
}

void destroy for ShaderCache.RenderPipeline(uint64_t a1)
{
  swift_unknownObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 56))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 96))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(a1 + 136))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

}

uint64_t initializeWithCopy for ShaderCache.RenderPipeline(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  id v22;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRetain();
  if (v5)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v5;
    v6 = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    v7 = *(_QWORD *)(a2 + 56);
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v13 = *(_OWORD *)(a2 + 24);
    *v4 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v13;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    v7 = *(_QWORD *)(a2 + 56);
    if (v7)
    {
LABEL_3:
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v7;
      v8 = *(_QWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 72) = v8;
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      v9 = *(_QWORD *)(a2 + 96);
      if (v9)
        goto LABEL_4;
LABEL_8:
      v15 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v15;
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      v11 = *(_QWORD *)(a2 + 136);
      if (v11)
        goto LABEL_5;
LABEL_9:
      v16 = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = v16;
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      goto LABEL_10;
    }
  }
  v14 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  v9 = *(_QWORD *)(a2 + 96);
  if (!v9)
    goto LABEL_8;
LABEL_4:
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v9;
  v10 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v10;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v11 = *(_QWORD *)(a2 + 136);
  if (!v11)
    goto LABEL_9;
LABEL_5:
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v11;
  v12 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v12;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  v17 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v17;
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  v18 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v18;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  v19 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v19;
  memcpy((void *)(a1 + 280), (const void *)(a2 + 280), 0x1B9uLL);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  v20 = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 768) = v20;
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_WORD *)(a1 + 800) = *(_WORD *)(a2 + 800);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  v21 = *(void **)(a2 + 816);
  *(_QWORD *)(a1 + 816) = v21;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v22 = v21;
  return a1;
}

uint64_t assignWithCopy for ShaderCache.RenderPipeline(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD *v11;
  _OWORD *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34;
  void *v35;
  id v36;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16))
  {
    if (v6)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1 + 8);
      v7 = *(_QWORD *)(a2 + 40);
      v8 = *(_OWORD *)(a2 + 24);
      *v4 = *v5;
      *(_OWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 40) = v7;
    }
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v9 = *v5;
    v10 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *v4 = v9;
    *(_OWORD *)(a1 + 24) = v10;
  }
  v11 = (_OWORD *)(a1 + 48);
  v12 = (_OWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  if (*(_QWORD *)(a1 + 56))
  {
    if (v13)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1 + 48);
      v14 = *(_QWORD *)(a2 + 80);
      v15 = *(_OWORD *)(a2 + 64);
      *v11 = *v12;
      *(_OWORD *)(a1 + 64) = v15;
      *(_QWORD *)(a1 + 80) = v14;
    }
  }
  else if (v13)
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v16 = *v12;
    v17 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *v11 = v16;
    *(_OWORD *)(a1 + 64) = v17;
  }
  v18 = (_OWORD *)(a1 + 88);
  v19 = (_OWORD *)(a2 + 88);
  v20 = *(_QWORD *)(a2 + 96);
  if (*(_QWORD *)(a1 + 96))
  {
    if (v20)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1 + 88);
      v21 = *(_QWORD *)(a2 + 120);
      v22 = *(_OWORD *)(a2 + 104);
      *v18 = *v19;
      *(_OWORD *)(a1 + 104) = v22;
      *(_QWORD *)(a1 + 120) = v21;
    }
  }
  else if (v20)
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v23 = *v19;
    v24 = *(_OWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *v18 = v23;
    *(_OWORD *)(a1 + 104) = v24;
  }
  v25 = (_OWORD *)(a1 + 128);
  v26 = (_OWORD *)(a2 + 128);
  v27 = *(_QWORD *)(a2 + 136);
  if (*(_QWORD *)(a1 + 136))
  {
    if (v27)
    {
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B1B3D598(a1 + 128);
      v28 = *(_QWORD *)(a2 + 160);
      v29 = *(_OWORD *)(a2 + 144);
      *v25 = *v26;
      *(_OWORD *)(a1 + 144) = v29;
      *(_QWORD *)(a1 + 160) = v28;
    }
  }
  else if (v27)
  {
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v30 = *v26;
    v31 = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *v25 = v30;
    *(_OWORD *)(a1 + 144) = v31;
  }
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 344) = *(_QWORD *)(a2 + 344);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 360) = *(_QWORD *)(a2 + 360);
  *(_QWORD *)(a1 + 368) = *(_QWORD *)(a2 + 368);
  *(_QWORD *)(a1 + 376) = *(_QWORD *)(a2 + 376);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  *(_QWORD *)(a1 + 400) = *(_QWORD *)(a2 + 400);
  *(_QWORD *)(a1 + 408) = *(_QWORD *)(a2 + 408);
  *(_QWORD *)(a1 + 416) = *(_QWORD *)(a2 + 416);
  *(_QWORD *)(a1 + 424) = *(_QWORD *)(a2 + 424);
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a2 + 448);
  *(_QWORD *)(a1 + 456) = *(_QWORD *)(a2 + 456);
  *(_QWORD *)(a1 + 464) = *(_QWORD *)(a2 + 464);
  *(_QWORD *)(a1 + 472) = *(_QWORD *)(a2 + 472);
  *(_QWORD *)(a1 + 480) = *(_QWORD *)(a2 + 480);
  *(_QWORD *)(a1 + 488) = *(_QWORD *)(a2 + 488);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  *(_QWORD *)(a1 + 512) = *(_QWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 520) = *(_QWORD *)(a2 + 520);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)(a2 + 528);
  *(_QWORD *)(a1 + 536) = *(_QWORD *)(a2 + 536);
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  *(_QWORD *)(a1 + 560) = *(_QWORD *)(a2 + 560);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 568);
  *(_QWORD *)(a1 + 576) = *(_QWORD *)(a2 + 576);
  *(_QWORD *)(a1 + 584) = *(_QWORD *)(a2 + 584);
  *(_QWORD *)(a1 + 592) = *(_QWORD *)(a2 + 592);
  *(_QWORD *)(a1 + 600) = *(_QWORD *)(a2 + 600);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  *(_QWORD *)(a1 + 624) = *(_QWORD *)(a2 + 624);
  *(_QWORD *)(a1 + 632) = *(_QWORD *)(a2 + 632);
  *(_QWORD *)(a1 + 640) = *(_QWORD *)(a2 + 640);
  *(_QWORD *)(a1 + 648) = *(_QWORD *)(a2 + 648);
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  *(_QWORD *)(a1 + 672) = *(_QWORD *)(a2 + 672);
  *(_QWORD *)(a1 + 680) = *(_QWORD *)(a2 + 680);
  *(_QWORD *)(a1 + 688) = *(_QWORD *)(a2 + 688);
  *(_QWORD *)(a1 + 696) = *(_QWORD *)(a2 + 696);
  *(_QWORD *)(a1 + 704) = *(_QWORD *)(a2 + 704);
  *(_QWORD *)(a1 + 712) = *(_QWORD *)(a2 + 712);
  *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  v32 = *(_OWORD *)(a2 + 752);
  v33 = *(_OWORD *)(a2 + 784);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 784) = v33;
  *(_OWORD *)(a1 + 752) = v32;
  *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
  *(_BYTE *)(a1 + 801) = *(_BYTE *)(a2 + 801);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  v34 = *(void **)(a1 + 816);
  v35 = *(void **)(a2 + 816);
  *(_QWORD *)(a1 + 816) = v35;
  v36 = v35;

  return a1;
}

uint64_t sub_1B1B3D598(uint64_t a1)
{
  destroy for FunctionDescriptor();
  return a1;
}

void *initializeWithTake for ShaderCache.RenderPipeline(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x338uLL);
}

uint64_t assignWithTake for ShaderCache.RenderPipeline(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRelease();
  if (*(_QWORD *)(a1 + 16))
  {
    v4 = *(_QWORD *)(a2 + 16);
    if (v4)
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 16) = v4;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1B1B3D598(a1 + 8);
  }
  v5 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
LABEL_6:
  if (*(_QWORD *)(a1 + 56))
  {
    v6 = *(_QWORD *)(a2 + 56);
    if (v6)
    {
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v6;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1B1B3D598(a1 + 48);
  }
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
LABEL_11:
  if (*(_QWORD *)(a1 + 96))
  {
    v8 = *(_QWORD *)(a2 + 96);
    if (v8)
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_QWORD *)(a1 + 96) = v8;
      swift_bridgeObjectRelease();
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
      swift_unknownObjectRelease();
      *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1B1B3D598(a1 + 88);
  }
  v9 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
LABEL_16:
  if (!*(_QWORD *)(a1 + 136))
  {
LABEL_20:
    v11 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v11;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    goto LABEL_21;
  }
  v10 = *(_QWORD *)(a2 + 136);
  if (!v10)
  {
    sub_1B1B3D598(a1 + 128);
    goto LABEL_20;
  }
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = v10;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  swift_bridgeObjectRelease();
LABEL_21:
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  swift_bridgeObjectRelease();
  v12 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v12;
  v13 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 240) = v13;
  v14 = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(_OWORD *)(a1 + 272) = v14;
  v15 = *(_OWORD *)(a2 + 304);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 304) = v15;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  *(_BYTE *)(a1 + 328) = *(_BYTE *)(a2 + 328);
  v16 = *(_OWORD *)(a2 + 352);
  *(_OWORD *)(a1 + 336) = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 352) = v16;
  *(_OWORD *)(a1 + 368) = *(_OWORD *)(a2 + 368);
  *(_BYTE *)(a1 + 384) = *(_BYTE *)(a2 + 384);
  *(_QWORD *)(a1 + 392) = *(_QWORD *)(a2 + 392);
  v17 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v17;
  *(_QWORD *)(a1 + 432) = *(_QWORD *)(a2 + 432);
  *(_BYTE *)(a1 + 440) = *(_BYTE *)(a2 + 440);
  v18 = *(_OWORD *)(a2 + 464);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 464) = v18;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(_BYTE *)(a1 + 496) = *(_BYTE *)(a2 + 496);
  *(_QWORD *)(a1 + 504) = *(_QWORD *)(a2 + 504);
  v19 = *(_OWORD *)(a2 + 528);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a2 + 512);
  *(_OWORD *)(a1 + 528) = v19;
  *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 544);
  *(_BYTE *)(a1 + 552) = *(_BYTE *)(a2 + 552);
  v20 = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 576) = v20;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
  *(_BYTE *)(a1 + 608) = *(_BYTE *)(a2 + 608);
  *(_QWORD *)(a1 + 616) = *(_QWORD *)(a2 + 616);
  v21 = *(_OWORD *)(a2 + 640);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 640) = v21;
  *(_QWORD *)(a1 + 656) = *(_QWORD *)(a2 + 656);
  *(_BYTE *)(a1 + 664) = *(_BYTE *)(a2 + 664);
  v22 = *(_OWORD *)(a2 + 688);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 672);
  *(_OWORD *)(a1 + 688) = v22;
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 704);
  *(_BYTE *)(a1 + 720) = *(_BYTE *)(a2 + 720);
  *(_QWORD *)(a1 + 728) = *(_QWORD *)(a2 + 728);
  *(_QWORD *)(a1 + 736) = *(_QWORD *)(a2 + 736);
  swift_release();
  *(_QWORD *)(a1 + 744) = *(_QWORD *)(a2 + 744);
  v23 = *(_OWORD *)(a2 + 768);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 752);
  *(_OWORD *)(a1 + 768) = v23;
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 784);
  *(_BYTE *)(a1 + 800) = *(_BYTE *)(a2 + 800);
  *(_BYTE *)(a1 + 801) = *(_BYTE *)(a2 + 801);
  *(_QWORD *)(a1 + 808) = *(_QWORD *)(a2 + 808);
  v24 = *(void **)(a1 + 816);
  *(_QWORD *)(a1 + 816) = *(_QWORD *)(a2 + 816);

  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderCache.RenderPipeline(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 824))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderCache.RenderPipeline(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 824) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 824) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderCache.RenderPipeline()
{
  return &type metadata for ShaderCache.RenderPipeline;
}

uint64_t sub_1B1B3DAB8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id *sub_1B1B3DB38(id *a1, id *a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = (char *)*a2;
    *v3 = *a2;
    v3 = (id *)&v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 3)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X13 }
    }
    if (v9 == 2)
    {
      v11 = *a2;
      v12 = *a2;
      *v3 = v11;
      *((_BYTE *)v3 + v5) = 2;
    }
    else if (v9 == 1)
    {
      (*(void (**)(id *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      v13 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v5) = 0;
      v14 = v13;
    }
  }
  return v3;
}

void sub_1B1B3DC7C(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 3)
  {
    if (v4 == 1)
      (*(void (**)(void))(v2 + 8))();
    else

  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_1B1B3DCC4 + 4 * byte_1B227AC05[v5]))();
  }
}

id *sub_1B1B3DD2C(id *a1, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  id v9;
  id v10;
  id v11;
  id v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    v9 = *a2;
    v10 = *a2;
    *a1 = v9;
    v8 = 2;
  }
  else
  {
    if (v6 != 1)
    {
      v11 = *a2;
      *a1 = *a2;
      *((_BYTE *)a1 + v5) = 0;
      v12 = v11;
      return a1;
    }
    (*(void (**)(id *))(v4 + 16))(a1);
    v8 = 1;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_1B1B3DE2C(id *a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;
  void *v13;
  id v14;
  void *v15;
  id v16;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else

    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      v13 = *a2;
      v14 = v13;
      *a1 = v13;
      v12 = 2;
    }
    else
    {
      if (v10 != 1)
      {
        v15 = *a2;
        *a1 = *a2;
        *((_BYTE *)a1 + v7) = 0;
        v16 = v15;
        return a1;
      }
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(a1, a2, v5);
      v12 = 1;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

_QWORD *sub_1B1B3DFF0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  char v8;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 3)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 2)
  {
    *a1 = *a2;
    v8 = 2;
  }
  else if (v6 == 1)
  {
    (*(void (**)(_QWORD *))(v4 + 32))(a1);
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *a1 = *a2;
  }
  *((_BYTE *)a1 + v5) = v8;
  return a1;
}

id *sub_1B1B3E0DC(id *a1, id *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  char v12;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)a1 + v7);
    if (v8 >= 3)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)
      (*(void (**)(id *, _QWORD))(v6 + 8))(a1, *(_QWORD *)(a3 + 16));
    else

    v10 = *((unsigned __int8 *)a2 + v7);
    if (v10 >= 3)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 2)
    {
      *a1 = *a2;
      v12 = 2;
    }
    else if (v10 == 1)
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(a1, a2, v5);
      v12 = 1;
    }
    else
    {
      v12 = 0;
      *a1 = *a2;
    }
    *((_BYTE *)a1 + v7) = v12;
  }
  return a1;
}

uint64_t sub_1B1B3E294(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1B3E358 + 4 * byte_1B227AC28[(v4 - 1)]))();
}

void sub_1B1B3E3A4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1B1B3E54C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 3u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1B3E594 + 4 * byte_1B227AC36[v3]))();
}

void sub_1B1B3E5DC(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 2)
  {
    v5 = a2 - 3;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 3;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 3;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for ShaderCache.Status(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ShaderCache.Status);
}

uint64_t destroy for ShaderCache.Library()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for ShaderCache.Library(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for ShaderCache.Library(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for ShaderCache.Library(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  swift_unknownObjectRelease();
  v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ShaderCache.Library()
{
  return &type metadata for ShaderCache.Library;
}

uint64_t sub_1B1B3E81C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = sub_1B2228C08();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    sub_1B2228BFC();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  sub_1B1B25B94(a1, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B2228BCC();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t sub_1B1B3E970(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a1;
  v6[4] = a4;
  return swift_task_switch();
}

uint64_t sub_1B1B3E98C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_1ED4BB280 != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_1B1B3EA90;
  return sub_1B222A204();
}

uint64_t sub_1B1B3EA90()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B1B3EB18()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3EB24(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1B1B3EB88;
  return v6(a1);
}

uint64_t sub_1B1B3EB88()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B1B3EBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_1B2228C08();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    sub_1B2228BFC();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  sub_1B1B25B94(a1, (unint64_t *)&unk_1ED4BA530, (void (*)(uint64_t))MEMORY[0x1E0DF0750]);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B2228BCC();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

uint64_t sub_1B1B3ED08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6[5] = a5;
  v6[6] = a6;
  v6[3] = a1;
  v6[4] = a4;
  return swift_task_switch();
}

uint64_t sub_1B1B3ED24()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_1ED4BB280 != -1)
    swift_once();
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_1B1B3EE28;
  return sub_1B222A204();
}

uint64_t sub_1B1B3EE28()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_release();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B1B3EE7C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1B1B3EEE0;
  return v6(a1);
}

uint64_t sub_1B1B3EEE0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B1B3EF2C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1B1B430DC;
  return v6(a1);
}

uint64_t sub_1B1B3EF90(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_1B1B3F060(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_1B1A02864((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_1B1A02864((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
  return v7;
}

uint64_t sub_1B1B3F060(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_1B22291FC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_1B1B3F218(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_1B22294FC();
  if (!v8)
  {
    sub_1B222967C();
    __break(1u);
LABEL_17:
    result = sub_1B2229700();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_1B1B3F218(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_1B1B3F2AC(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_1B1B3F420(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_1B1B3F420(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_1B1B3F2AC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_1B1DCCC58(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_1B222943C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_1B222967C();
      __break(1u);
LABEL_10:
      v2 = sub_1B22288CC();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    sub_1B2229700();
    __break(1u);
LABEL_14:
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

uint64_t sub_1B1B3F420(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2)
      v8 = a2;
    if (v7 < a2)
      a2 = v8;
    else
      a2 = v7;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (a2 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = a2;
  if (v10)
  {
    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAFA0, MEMORY[0x1E0DEDE70], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v11 = (char *)swift_allocObject();
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v9;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v9])
      memmove(v13, v14, v9);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v9] && v13 < &v14[v9])
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, v9);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v11;
}

uint64_t sub_1B1B3F568(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v10;

  *(_QWORD *)(v6 + 64) = a1;
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 72) = v10;
  *v10 = v6;
  v10[1] = sub_1B1B3F5E4;
  v10[11] = a5;
  v10[12] = a6;
  v10[9] = v6 + 16;
  v10[10] = a4;
  return swift_task_switch();
}

uint64_t sub_1B1B3F5E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  __int128 v5;
  __int128 v6;

  v2 = *v1;
  v3 = *v1;
  swift_task_dealloc();
  if (!v0)
  {
    v4 = *(_OWORD **)(v2 + 64);
    v5 = *(_OWORD *)(v2 + 16);
    v6 = *(_OWORD *)(v2 + 48);
    v4[1] = *(_OWORD *)(v2 + 32);
    v4[2] = v6;
    *v4 = v5;
  }
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1B1B3F644(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 64) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 72) = v3;
  *v3 = v2;
  v3[1] = sub_1B1B3F6AC;
  return v5(v2 + 16);
}

uint64_t sub_1B1B3F6AC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_1B1B3F710()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v1 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 56);
  v2 = *(_QWORD *)(v0 + 64);
  v4 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)v2 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v4;
  *(_QWORD *)(v2 + 40) = v3;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3F73C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B3F748@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  CFTimeInterval v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  int v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_signpost_id_t v28;
  uint64_t v29;
  const char *v30;
  char v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  _BYTE v35[4];
  int v36;
  const char *v37;
  uint64_t v38;
  void (*v39)(_BYTE *, _BYTE *, uint64_t);
  int v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;

  v43 = a6;
  v44 = a4;
  v41 = a2;
  v42 = a1;
  v9 = a3;
  v10 = sub_1B2228380();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = &v35[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v15, v16);
  v18 = &v35[-v17];
  v19 = CACurrentMediaTime();
  v20 = qword_1ED4BA0E0;
  swift_bridgeObjectRetain();
  if (v20 != -1)
    swift_once();
  v21 = sub_1B22283B0();
  sub_1B1B40EC8(v21, (uint64_t)qword_1ED4D0E48);
  sub_1B2228398();
  sub_1B2228368();
  swift_bridgeObjectRetain();
  v22 = sub_1B2228398();
  v23 = sub_1B2228FA4();
  if ((sub_1B2229094() & 1) != 0)
  {
    v24 = &v47;
    v40 = v9;
    if ((v9 & 1) == 0)
      v24 = v42;
    v37 = v24;
    v38 = v11;
    v39 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16);
    v39(v14, v18, v10);
    v25 = swift_slowAlloc();
    v36 = v23;
    v26 = v25;
    v27 = swift_slowAlloc();
    *(_DWORD *)v26 = 134218242;
    v45 = v43;
    v46 = v27;
    sub_1B22291D8();
    *(_WORD *)(v26 + 12) = 2080;
    swift_bridgeObjectRetain();
    v45 = sub_1B1B3EF90(v44, a5, &v46);
    sub_1B22291D8();
    swift_bridgeObjectRelease_n();
    v28 = sub_1B2228374();
    _os_signpost_emit_with_name_impl(&dword_1B178D000, v22, (os_signpost_type_t)v36, v28, v37, "%ld %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    v29 = v27;
    v30 = v42;
    MEMORY[0x1B5E23F88](v29, -1, -1);
    MEMORY[0x1B5E23F88](v26, -1, -1);

    v31 = v40;
    v11 = v38;
    (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v14, v10);
    v39(v14, v18, v10);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    v31 = v9;
    v30 = v42;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v14, v18, v10);
  }
  sub_1B22283E0();
  swift_allocObject();
  v32 = sub_1B22283D4();
  result = (*(uint64_t (**)(_BYTE *, uint64_t))(v11 + 8))(v18, v10);
  *(_QWORD *)a7 = v32;
  *(CFTimeInterval *)(a7 + 8) = v19;
  v34 = v41;
  *(_QWORD *)(a7 + 16) = v30;
  *(_QWORD *)(a7 + 24) = v34;
  *(_BYTE *)(a7 + 32) = v31;
  *(_QWORD *)(a7 + 40) = v44;
  *(_QWORD *)(a7 + 48) = a5;
  *(_QWORD *)(a7 + 56) = v43;
  return result;
}

uint64_t sub_1B1B3FA68()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B3FAAC(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t sub_1B1B3FB0C(unint64_t result)
{
  if (result >= 2)
    return swift_release();
  return result;
}

uint64_t sub_1B1B3FB20(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B1B3FB54()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B3FBA8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_BYTE *)(v0 + 88);
  v3 = *(_QWORD *)(v0 + 96);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1B1B430D8;
  *(_QWORD *)(v4 + 992) = v3;
  *(_BYTE *)(v4 + 833) = v2;
  *(_QWORD *)(v4 + 984) = v0 + 32;
  *(_OWORD *)(v4 + 968) = v5;
  return swift_task_switch();
}

uint64_t sub_1B1B3FC30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_1B1B430D8;
  *(_QWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 24) = a1;
  return swift_task_switch();
}

id sub_1B1B3FCA8(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  id v10;

  if (a10 == 2)
    return result;
  if (a10 != 1)
  {
    if (a10)
      return result;
    return result;
  }
  v10 = a9;
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return (id)swift_bridgeObjectRetain();
}

void sub_1B1B3FD84(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, unsigned __int8 a10)
{
  if (a10 != 255)
    sub_1B1B3FDA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1B1B3FDA4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, char a10)
{
  switch(a10)
  {
    case 2:
      goto LABEL_5;
    case 1:
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      a1 = a9;
      goto LABEL_5;
    case 0:
LABEL_5:

      break;
  }
}

uint64_t sub_1B1B3FE68()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B3FE8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EEF5AD30 + dword_1EEF5AD30))(a1, v4);
}

uint64_t sub_1B1B3FEFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1B1B3EEE0;
  return v8(a1);
}

uint64_t sub_1B1B3FF84()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B3FFD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  v5[3] = v4;
  v5[4] = v1 + 24;
  v5[2] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B40044()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B40080(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B40CFC(0, (unint64_t *)&unk_1ED4BA660, (unint64_t *)&unk_1ED4BA650, (uint64_t)&protocolRef_MTLFunction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1B400E4()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B40130(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;

  v10 = *(_OWORD *)(v1 + 56);
  v4 = *(_BYTE *)(v1 + 72);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1B1B430D8;
  *(_BYTE *)(v6 + 328) = v4;
  *(_OWORD *)(v6 + 248) = v10;
  v8 = *(_QWORD *)(v1 + 16);
  v7 = v1 + 16;
  *(_QWORD *)(v6 + 232) = a1;
  *(_QWORD *)(v6 + 240) = v7;
  *(_QWORD *)(v6 + 264) = v5;
  *(_QWORD *)(v6 + 272) = v8;
  *(_QWORD *)(v6 + 280) = *(_QWORD *)(v7 + 8);
  *(_OWORD *)(v6 + 288) = *(_OWORD *)(v7 + 16);
  *(_QWORD *)(v6 + 304) = *(_QWORD *)(v7 + 32);
  return swift_task_switch();
}

uint64_t sub_1B1B401E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B1B430D8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1EEF5AD80
                                                                                       + dword_1EEF5AD80))(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1B1B40274(uint64_t a1)
{
  swift_unknownObjectRelease();
  return a1;
}

uint64_t sub_1B1B4029C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 != 255)
    return sub_1B1B3C5D8(result, a2, a3, a4, a5, a6, a7 & 1);
  return result;
}

id sub_1B1B402B4(unint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  __n128 v17;
  __n128 v18;
  __n128 v19;
  unint64_t v20;
  void *v21;
  uint64_t v23;
  __n128 v24[6];
  char v25;
  __n128 v26;

  v5 = v4;
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6AB0]), sel_init);
  v11 = (void *)sub_1B2228728();
  objc_msgSend(v10, sel_setName_, v11);

  if ((a4 & 1) == 0)
  {
    sub_1B1C7C49C(a3);
    sub_1B1B40D84();
    sub_1B2228944();
    v24[0].n128_u64[0] = a1;
    v24[0].n128_u64[1] = a2;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v12 = (void *)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setSpecializedName_, v12, *(_OWORD *)v24);

  }
  v13 = *(_QWORD *)(a3 + 16);
  if (v13)
  {
    v14 = objc_allocWithZone(MEMORY[0x1E0CC6AA0]);
    swift_bridgeObjectRetain();
    v15 = objc_msgSend(v14, sel_init);
    swift_bridgeObjectRetain();
    v16 = 32;
    do
    {
      v17 = *(__n128 *)(a3 + v16 + 80);
      v24[4] = *(__n128 *)(a3 + v16 + 64);
      v24[5] = v17;
      v25 = *(_BYTE *)(a3 + v16 + 96);
      v18 = *(__n128 *)(a3 + v16 + 16);
      v24[0] = *(__n128 *)(a3 + v16);
      v24[1] = v18;
      v19 = *(__n128 *)(a3 + v16 + 48);
      v24[2] = *(__n128 *)(a3 + v16 + 32);
      v24[3] = v19;
      sub_1B1B40DC8(v24, &v26);
      sub_1B1B40E04((uint64_t)&v26);
      sub_1B1C7C774(v24);
      sub_1B1B40E44((uint64_t)v24);
      v16 += 112;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease_n();
    objc_msgSend(v10, sel_setConstantValues_, v15);

  }
  v20 = *(_QWORD *)(v5 + 152);
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (!v23)
      return v10;
    goto LABEL_9;
  }
  if (*(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    sub_1B19F8F48(0, &qword_1EEF5ADB0);
    swift_bridgeObjectRetain();
    v21 = (void *)sub_1B2228AAC();
    swift_bridgeObjectRelease();
    objc_msgSend(v10, sel_setBinaryArchives_, v21);

  }
  return v10;
}

uint64_t sub_1B1B40524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = v3;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = MEMORY[0x1E0DEE9D8];
  if (v5)
  {
    v16 = MEMORY[0x1E0DEE9D8];
    sub_1B2229550();
    v11 = a3 + 168;
    v10 = *(void **)(a3 + 168);
    v9 = *(_QWORD *)(v11 + 8);
    if (v9)
      v6 = v9;
    v12 = (uint64_t *)(a1 + 40);
    while (1)
    {
      v13 = *(v12 - 1);
      v14 = *v12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1B2EC54(v13, v14, v10, v6, 1);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v4)
        break;
      v12 += 2;
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
      if (!--v5)
        return v16;
    }
    swift_release();
  }
  return v6;
}

uint64_t sub_1B1B40648(uint64_t a1)
{
  char v2;
  uint64_t Strong;
  void *v4;
  uint64_t v6;
  char v7;

  if (qword_1ED4BF3E8 != -1)
    swift_once();
  objc_msgSend((id)qword_1ED4BF3D8, sel_lock);
  if (qword_1ED4BF470 != -1)
    swift_once();
  if (!*((_QWORD *)off_1ED4BF460 + 2) || (sub_1B1DC3AC8(a1), (v2 & 1) == 0))
  {
    v6 = 0;
    v7 = 1;
    sub_1B1B4257C((uint64_t)&v6);
LABEL_10:
    type metadata accessor for ShaderCache();
    swift_allocObject();
    v4 = (void *)swift_unknownObjectRetain();
    Strong = sub_1B1B2D7FC(v4);
    swift_weakInit();
    v7 = 0;
    sub_1B20E11BC((uint64_t)&v6, a1);
    goto LABEL_11;
  }
  sub_1B1B425D0();
  v7 = 0;
  Strong = swift_weakLoadStrong();
  sub_1B1B4257C((uint64_t)&v6);
  if (!Strong)
    goto LABEL_10;
LABEL_11:
  objc_msgSend((id)qword_1ED4BF3D8, sel_unlock);
  return Strong;
}

id sub_1B1B40798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v12;
  _QWORD v13[5];
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  v16 = a2;
  v5 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(a1, (uint64_t)v13, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v13[1];
  v7 = (void *)v13[3];
  v12 = v13[0];
  v8 = v13[4];
  sub_1B1B41294(a1, (uint64_t)v14, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v5);
  if (!v15)
    return 0;
  if (*(_QWORD *)(a3 + 176))
  {
    v9 = *(_QWORD *)(a3 + 176);
  }
  else
  {
    swift_bridgeObjectRetain();
    v9 = v8;
  }
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v10 = sub_1B1B2EC54(v12, v6, v7, v9, 0);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10;
}

id sub_1B1B408F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t (*v5)(void);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  _QWORD v12[4];
  _BYTE v13[8];
  uint64_t v14;
  uint64_t v15;

  v15 = a2;
  v5 = MEMORY[0x1E0DEB940];
  sub_1B1B41294(a1, (uint64_t)v12, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  v6 = v12[1];
  v7 = (void *)v12[3];
  v11 = v12[0];
  sub_1B1B41294(a1, (uint64_t)v13, (unint64_t *)&qword_1ED4B7880, (uint64_t)&type metadata for FunctionDescriptor, (uint64_t (*)(_QWORD, uint64_t))v5);
  if (!v14)
    return 0;
  if (*(_QWORD *)(a3 + 176))
    v8 = *(_QWORD *)(a3 + 176);
  else
    v8 = MEMORY[0x1E0DEE9D8];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  v9 = sub_1B1B2EC54(v11, v6, v7, v8, 0);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  return v9;
}

uint64_t sub_1B1B40A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[11] = a3;
  v4[12] = a4;
  v4[9] = a1;
  v4[10] = a2;
  return swift_task_switch();
}

uint64_t sub_1B1B40A68()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_1ED4BB280 != -1)
    swift_once();
  *(_QWORD *)(v0 + 64) = *(_QWORD *)(v0 + 80);
  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 88);
  swift_retain();
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v2;
  *v2 = v0;
  v2[1] = sub_1B1B40B6C;
  return sub_1B222A204();
}

uint64_t sub_1B1B40B6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v2 = *v1;
  *(_QWORD *)(v2 + 120) = v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  v4 = *(_QWORD *)(v2 + 72);
  v5 = *(_QWORD *)(v2 + 32);
  v6 = *(_QWORD *)(v2 + 56);
  v7 = *(_OWORD *)(v2 + 40);
  *(_OWORD *)v4 = *(_OWORD *)(v2 + 16);
  *(_QWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 24) = v7;
  *(_QWORD *)(v4 + 40) = v6;
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1B1B40C1C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1B1B40C28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1EEF5AD98 + dword_1EEF5AD98))(a1, v4);
}

uint64_t sub_1B1B40C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B40CFC(0, (unint64_t *)&qword_1ED4BA5E0, (unint64_t *)&qword_1ED4BA5D0, (uint64_t)&protocolRef_MTLLibrary, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1B40CFC(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = sub_1B19F8F48(255, a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1B1B40D5C(uint64_t a1)
{
  swift_unknownObjectRetain();
  return a1;
}

unint64_t sub_1B1B40D84()
{
  unint64_t result;

  result = qword_1ED4B7A90;
  if (!qword_1ED4B7A90)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEE1C8], MEMORY[0x1E0DEE190]);
    atomic_store(result, (unint64_t *)&qword_1ED4B7A90);
  }
  return result;
}

__n128 *sub_1B1B40DC8(__n128 *a1, __n128 *a2)
{
  initializeWithTake for FunctionConstant.Key(a2, a1);
  return a2;
}

uint64_t sub_1B1B40E04(uint64_t a1)
{
  sub_1B1B40E34(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1B1B40E34(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t sub_1B1B40E44(uint64_t a1)
{
  sub_1B1B40E74(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  return a1;
}

uint64_t sub_1B1B40E74(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

unint64_t sub_1B1B40E84()
{
  unint64_t result;

  result = qword_1EEF5ADB8;
  if (!qword_1EEF5ADB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227AEB0, &type metadata for ShaderError);
    atomic_store(result, (unint64_t *)&qword_1EEF5ADB8);
  }
  return result;
}

uint64_t sub_1B1B40EC8(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

void sub_1B1B40EE0(_BYTE *a1)
{
  bzero(a1, 0x338uLL);
  a1[824] = -1;
}

uint64_t sub_1B1B40F0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1B40F70(0, qword_1ED4B7E98, &qword_1ED4B7E90, (uint64_t)&type metadata for ShaderCache.RenderPipeline, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for ShaderCache.Status);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B1B40F70(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    sub_1B1A02758(255, a3, a4, a5);
    v6 = sub_1B2229124();
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1B1B40FC8(uint64_t a1)
{
  unsigned int v1;

  v1 = *(unsigned __int8 *)(a1 + 824);
  if (v1 > 2)
    return (v1 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t *sub_1B1B40FDC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[10];
  v5 = a1[11];
  v7 = a1[16];
  v8 = a1[15];
  sub_1B1B410E4(*a1, a1[1]);
  sub_1B1B410E4(v2, v3);
  sub_1B1B410E4(v4, v5);
  sub_1B1B410E4(v8, v7);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1B410E4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t *sub_1B1B41134(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[10];
  v5 = a1[11];
  v7 = a1[16];
  v8 = a1[15];
  sub_1B1B41238(*a1, a1[1]);
  sub_1B1B41238(v2, v3);
  sub_1B1B41238(v4, v5);
  sub_1B1B41238(v8, v7);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return a1;
}

uint64_t sub_1B1B41238(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1B41288(uint64_t result)
{
  *(_BYTE *)(result + 824) = 2;
  return result;
}

uint64_t sub_1B1B41294(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t))
{
  uint64_t v7;

  sub_1B1A02758(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_1B1B412E4(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5)
{
  uint64_t v7;

  sub_1B1B40F70(0, a3, a4, a5, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

uint64_t sub_1B1B41340()
{
  _QWORD *v0;

  if (v0[3])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[13])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[18])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B4140C(uint64_t result)
{
  *(_BYTE *)(result + 824) = 0;
  return result;
}

uint64_t sub_1B1B41414()
{
  uint64_t v0;

  swift_release();
  if (*(_QWORD *)(v0 + 40))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 80))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 120))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (*(_QWORD *)(v0 + 160))
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B414F0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_BYTE *)(v0 + 840);
  v3 = *(_QWORD *)(v0 + 848);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 16);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = sub_1B1B3EB88;
  *(_QWORD *)(v4 + 4856) = v3;
  *(_BYTE *)(v4 + 3569) = v2;
  *(_QWORD *)(v4 + 4848) = v0 + 32;
  *(_OWORD *)(v4 + 4832) = v5;
  return swift_task_switch();
}

uint64_t sub_1B1B41574(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 824);
}

id sub_1B1B4157C(id result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  id v23;
  void *v24;

  v18 = LOBYTE(STACK[0x3D8]);
  if (v18 == 2)
    return result;
  if (v18 != 1)
  {
    if (LOBYTE(STACK[0x3D8]))
      return result;
    return result;
  }
  v24 = (void *)STACK[0x3D0];
  swift_unknownObjectRetain();
  sub_1B1B410E4(a2, a3);
  sub_1B1B410E4(a7, a8);
  sub_1B1B410E4(a12, a13);
  sub_1B1B410E4(a17, a18);
  v23 = v24;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  return (id)swift_retain();
}

void sub_1B1B41748(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;

  v18 = LOBYTE(STACK[0x5C8]);
  if (v18 != 255)
  {
    v48 = STACK[0x5C0];
    v19 = STACK[0x5B8];
    v20 = STACK[0x5B0];
    v21 = STACK[0x5A8];
    v22 = STACK[0x5A0];
    v23 = STACK[0x598];
    v24 = STACK[0x590];
    v25 = STACK[0x588];
    v26 = STACK[0x580];
    v27 = STACK[0x578];
    v28 = STACK[0x570];
    v29 = STACK[0x568];
    v30 = STACK[0x560];
    v31 = STACK[0x558];
    v32 = STACK[0x550];
    v33 = STACK[0x548];
    v34 = STACK[0x540];
    v35 = STACK[0x538];
    v36 = STACK[0x530];
    v37 = STACK[0x528];
    v38 = STACK[0x520];
    v39 = STACK[0x518];
    v40 = STACK[0x510];
    v41 = STACK[0x508];
    v42 = STACK[0x500];
    v43 = STACK[0x4F8];
    v44 = STACK[0x4F0];
    v45 = STACK[0x4E8];
    v49 = STACK[0x4E0];
    v46 = STACK[0x4D8];
    v47 = STACK[0x4D0];
    LOBYTE(STACK[0x5C8]) = v18;
    STACK[0x5C0] = v48;
    STACK[0x5B8] = v19;
    STACK[0x5B0] = v20;
    STACK[0x5A8] = v21;
    STACK[0x5A0] = v22;
    STACK[0x598] = v23;
    STACK[0x590] = v24;
    STACK[0x588] = v25;
    STACK[0x580] = v26;
    STACK[0x578] = v27;
    STACK[0x570] = v28;
    STACK[0x568] = v29;
    STACK[0x560] = v30;
    STACK[0x558] = v31;
    STACK[0x550] = v32;
    STACK[0x548] = v33;
    STACK[0x540] = v34;
    STACK[0x538] = v35;
    STACK[0x530] = v36;
    STACK[0x528] = v37;
    STACK[0x520] = v38;
    STACK[0x518] = v39;
    STACK[0x510] = v40;
    STACK[0x508] = v41;
    STACK[0x500] = v42;
    STACK[0x4F8] = v43;
    STACK[0x4F0] = v44;
    STACK[0x4E8] = v45;
    STACK[0x4E0] = v49;
    STACK[0x4D8] = v46;
    STACK[0x4D0] = v47;
    sub_1B1B41D0C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  }
}

void sub_1B1B41D0C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  int v18;
  unint64_t v23;

  v18 = LOBYTE(STACK[0x3D8]);
  if (v18 == 2)
    goto LABEL_5;
  if (v18 == 1)
  {
    v23 = STACK[0x3D0];
    swift_unknownObjectRelease();
    sub_1B1B41238(a2, a3);
    sub_1B1B41238(a7, a8);
    sub_1B1B41238(a12, a13);
    sub_1B1B41238(a17, a18);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    a1 = (void *)v23;
    goto LABEL_5;
  }
  if (!LOBYTE(STACK[0x3D8]))
LABEL_5:

}

uint64_t sub_1B1B41EBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  v5[44] = v4;
  v5[45] = v1 + 24;
  v5[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B41F30()
{
  _QWORD *v0;

  if (v0[3])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[8])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[13])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[18])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B42004(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = v1 + 16;
  v5 = *(_QWORD *)(v1 + 824);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1B1B430D8;
  v6[4] = v4;
  v6[5] = v5;
  v6[3] = a1;
  return swift_task_switch();
}

void sub_1B1B42078()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA4F0)
  {
    sub_1B1B40CFC(255, &qword_1ED4BA4E8, (unint64_t *)&unk_1ED4BA650, (uint64_t)&protocolRef_MTLFunction, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA4F0);
  }
}

uint64_t sub_1B1B420F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  v5[44] = v4;
  v5[45] = v1 + 24;
  v5[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B42168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  v5[44] = v4;
  v5[45] = v1 + 24;
  v5[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B421E0()
{
  _QWORD *v0;

  swift_release();
  if (v0[4])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[9])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[14])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (v0[19])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B422B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  v5[44] = v4;
  v5[45] = v1 + 24;
  v5[43] = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B42328(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _QWORD *v11;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_QWORD *)(v2 + 32);
  v9 = *(_QWORD *)(v2 + 40);
  v10 = *(_BYTE *)(v2 + 48);
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v11;
  *v11 = v3;
  v11[1] = sub_1B1B430D8;
  return sub_1B1B30DDC(a1, a2, v6, v7, v8, v9, v10);
}

void sub_1B1B423B8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA540)
  {
    sub_1B19F8F48(255, (unint64_t *)&unk_1ED4BA650);
    sub_1B1A025A0(255, (unint64_t *)&qword_1ED4BB030);
    v0 = sub_1B2228C50();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA540);
  }
}

uint64_t sub_1B1B42444()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B42488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;
  _QWORD *v10;

  v4 = *(_QWORD *)(v1 + 40);
  v5 = *(_QWORD *)(v1 + 48);
  v6 = *(_QWORD *)(v1 + 56);
  v7 = *(_QWORD *)(v1 + 64);
  v8 = *(_BYTE *)(v1 + 72);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1B1B430D8;
  v9[2] = a1;
  v10 = (_QWORD *)swift_task_alloc();
  v9[3] = v10;
  *v10 = v9;
  v10[1] = sub_1B1B314D0;
  return sub_1B1B2FA94(v4, v5, v6, v7, v8);
}

uint64_t sub_1B1B42534(uint64_t result)
{
  *(_BYTE *)(result + 824) = 1;
  return result;
}

unint64_t sub_1B1B42540()
{
  unint64_t result;

  result = qword_1ED4BA7B0;
  if (!qword_1ED4BA7B0)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BA7B0);
  }
  return result;
}

uint64_t sub_1B1B4257C(uint64_t a1)
{
  uint64_t v2;

  sub_1B1A02758(0, &qword_1ED4BF478, (uint64_t)&type metadata for ShaderCache.ShaderCacheWeakReference, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1B425D0()
{
  return swift_weakCopyInit();
}

uint64_t sub_1B1B425E0(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1792854(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B1B4262C()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1B42650()
{
  return sub_1B1B2E370();
}

unint64_t sub_1B1B42658()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5AE60;
  if (!qword_1EEF5AE60)
  {
    v1 = sub_1B2228110();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB0048], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5AE60);
  }
  return result;
}

_QWORD *sub_1B1B426A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[6];
  v5 = a1[7];
  v8 = a1[12];
  v9 = a1[11];
  v10 = a1[17];
  v11 = a1[16];
  v12 = (void *)a1[102];
  swift_unknownObjectRetain();
  sub_1B1B410E4(v2, v3);
  sub_1B1B410E4(v4, v5);
  sub_1B1B410E4(v9, v8);
  sub_1B1B410E4(v11, v10);
  v6 = v12;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

void sub_1B1B427DC(unint64_t a1, void *a2)
{
  if (a1 >= 3)
  {
    swift_unknownObjectRelease();

  }
}

_QWORD *sub_1B1B4280C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a1[6];
  v5 = a1[7];
  v7 = a1[12];
  v8 = a1[11];
  v9 = a1[17];
  v10 = a1[16];
  v11 = (void *)a1[102];
  swift_unknownObjectRelease();
  sub_1B1B41238(v2, v3);
  sub_1B1B41238(v4, v5);
  sub_1B1B41238(v8, v7);
  sub_1B1B41238(v10, v9);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return a1;
}

void sub_1B1B42948()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF700)
  {
    sub_1B1A025A0(255, (unint64_t *)&qword_1ED4BF440);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF700);
  }
}

uint64_t sub_1B1B429AC(uint64_t a1)
{
  uint64_t v2;

  sub_1B1B1F358();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

#error "1B1B42B88: call analysis failed (funcsize=114)"

uint64_t sub_1B1B42BB0(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1B42C08()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B42C3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v6;
  *v6 = v2;
  v6[1] = sub_1B1B3EB88;
  return sub_1B1B2F900(a1, v4, v5);
}

uint64_t sub_1B1B42CA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 a7)
{
  if (a7 != 255)
    return sub_1B1B3C554(result, a2, a3, a4, a5, a6, a7 & 1);
  return result;
}

uint64_t sub_1B1B42CC4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1B42CF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 48);
  v5 = swift_task_alloc();
  v6 = *(_OWORD *)(v1 + 32);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_1B1B430D8;
  *(_QWORD *)(v5 + 48) = v4;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 24) = a1;
  return swift_task_switch();
}

uint64_t sub_1B1B42D70(uint64_t result)
{
  if (result)
  {
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    return swift_unknownObjectRetain();
  }
  return result;
}

uint64_t sub_1B1B42DCC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1B1B430D8;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc();
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1B1B3EB88;
  return v8(a1);
}

ValueMetadata *type metadata accessor for ShaderCache.ShaderCacheWeakReference()
{
  return &type metadata for ShaderCache.ShaderCacheWeakReference;
}

uint64_t sub_1B1B42E78(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)
    swift_unknownObjectRetain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ShaderError(uint64_t a1)
{
  return sub_1B1B42EB8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t sub_1B1B42EB8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  if ((a4 & 1) == 0)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t initializeWithCopy for ShaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B1B42E78(*(_QWORD *)a2, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithCopy for ShaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_BYTE *)(a2 + 24);
  sub_1B1B42E78(*(_QWORD *)a2, v4, v5, v6);
  v7 = *(_QWORD *)a1;
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  sub_1B1B42EB8(v7, v8, v9, v10);
  return a1;
}

__n128 initializeWithTake for TextureArgument(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for ShaderError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_BYTE *)(a1 + 24);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  sub_1B1B42EB8(v5, v7, v6, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for SamplerArgument(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SamplerArgument(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1B430AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t sub_1B1B430B4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 24) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderError()
{
  return &type metadata for ShaderError;
}

uint64_t sub_1B1B430E4()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 32);
}

uint64_t sub_1B1B430EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2 + 132, 0, ObjectType, a2);
}

double sub_1B1B43134@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 1;
  *(_BYTE *)(a1 + 8) = 1;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 12) = _D0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 24) = xmmword_1B227AEF0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 1;
  *(_DWORD *)(a1 + 64) = 1065353216;
  *(_OWORD *)(a1 + 80) = xmmword_1B2244F70;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0x3F80000000000000;
  *(_WORD *)(a1 + 128) = 1;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 132) = 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_1B1B43194()
{
  return sub_1B222A084();
}

uint64_t sub_1B1B431C0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B1B494FC(*a1);
  *a2 = result;
  return result;
}

void sub_1B1B431E8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638C508;
}

uint64_t sub_1B1B431F8()
{
  sub_1B1B4E134();
  return sub_1B2228A70();
}

uint64_t sub_1B1B43254()
{
  sub_1B1B4E134();
  return sub_1B22289F8();
}

uint64_t sub_1B1B432A0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B432CC + 4 * byte_1B227AF60[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1B432CC()
{
  return 0x6874676E65727473;
}

uint64_t sub_1B1B432E4()
{
  return 0x6E696E65706D6164;
}

uint64_t sub_1B1B43304()
{
  return 2003790950;
}

uint64_t sub_1B1B43310()
{
  return 0x6F6D416573696F6ELL;
}

uint64_t sub_1B1B43330()
{
  return 0x6565536573696F6ELL;
}

uint64_t sub_1B1B4334C()
{
  return 0x5073746365666661;
}

unint64_t sub_1B1B43370()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1B43390()
{
  return 0x73726579616CLL;
}

uint64_t sub_1B1B433A4()
{
  return 0x6F69746365726964;
}

uint64_t sub_1B1B433C8()
{
  return 0x66664F6C6C6166;
}

uint64_t sub_1B1B433E0()
{
  return 0x5066664F6C6C6166;
}

uint64_t sub_1B1B43400()
{
  return 0x5266664F6C6C6166;
}

unint64_t sub_1B1B43434()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1B43450()
{
  return 0x65727574786574;
}

uint64_t sub_1B1B43468(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B43494 + 4 * byte_1B227AF70[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1B43494()
{
  return 0x6874676E65727473;
}

uint64_t sub_1B1B434AC()
{
  return 0x6E696E65706D6164;
}

uint64_t sub_1B1B434CC()
{
  return 2003790950;
}

uint64_t sub_1B1B434D8()
{
  return 0x6F6D416573696F6ELL;
}

uint64_t sub_1B1B434F8()
{
  return 0x6565536573696F6ELL;
}

uint64_t sub_1B1B43514()
{
  return 0x5073746365666661;
}

unint64_t sub_1B1B43538()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1B43558()
{
  return 0x73726579616CLL;
}

uint64_t sub_1B1B4356C()
{
  return 0x6F69746365726964;
}

uint64_t sub_1B1B43590()
{
  return 0x66664F6C6C6166;
}

uint64_t sub_1B1B435A8()
{
  return 0x5066664F6C6C6166;
}

uint64_t sub_1B1B435C8()
{
  return 0x5266664F6C6C6166;
}

unint64_t sub_1B1B435FC()
{
  return 0xD000000000000011;
}

uint64_t sub_1B1B43618()
{
  return 0x65727574786574;
}

uint64_t sub_1B1B43630@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B1B49510(*a1);
  *a2 = result;
  return result;
}

void sub_1B1B43658(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638C650;
}

uint64_t sub_1B1B43668()
{
  sub_1B1B4E1BC();
  return sub_1B2228A70();
}

uint64_t sub_1B1B436C4()
{
  sub_1B1B4E1BC();
  return sub_1B22289F8();
}

uint64_t sub_1B1B43710()
{
  sub_1B222A06C();
  sub_1B222A084();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B43754()
{
  sub_1B222A06C();
  sub_1B222A084();
  return sub_1B222A0C0();
}

unsigned __int8 *sub_1B1B43794@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

void sub_1B1B437AC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638C708;
}

uint64_t sub_1B1B437BC()
{
  sub_1B1B4E178();
  return sub_1B2228A70();
}

uint64_t sub_1B1B43818()
{
  sub_1B1B4E178();
  return sub_1B22289F8();
}

uint64_t sub_1B1B43864(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B453F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B1B43468);
}

uint64_t sub_1B1B43870(uint64_t a1, uint64_t a2)
{
  return sub_1B1B45488(a1, a2, (void (*)(uint64_t))sub_1B1B432A0);
}

uint64_t sub_1B1B4387C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B454F8(a1, a2, a3, (void (*)(_QWORD))sub_1B1B432A0);
}

uint64_t sub_1B1B43888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B45544(a1, a2, a3, (void (*)(uint64_t))sub_1B1B432A0);
}

uint64_t sub_1B1B43894@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B4946C();
  *a1 = result;
  return result;
}

uint64_t sub_1B1B438C0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1B432A0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1B438E8()
{
  unsigned __int8 *v0;

  return sub_1B1B43468(*v0);
}

uint64_t sub_1B1B438F0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B4946C();
  *a1 = result;
  return result;
}

void sub_1B1B43914(_BYTE *a1@<X8>)
{
  *a1 = 16;
}

uint64_t sub_1B1B43920()
{
  sub_1B1B4D814();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B43948()
{
  sub_1B1B4D814();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B43970(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B4399C + 4 * byte_1B227AF80[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1B4399C()
{
  return 0x6874676E65727473;
}

uint64_t sub_1B1B439B4()
{
  return 0x6E696E65706D6164;
}

uint64_t sub_1B1B439D4()
{
  return 0x6F6D416573696F6ELL;
}

uint64_t sub_1B1B439F4()
{
  return 0x6565536573696F6ELL;
}

uint64_t sub_1B1B43A10()
{
  return 0x79726F6765746163;
}

uint64_t sub_1B1B43A34()
{
  return 0x4566666F6C6C6166;
}

uint64_t sub_1B1B43A58()
{
  return 0x65727574786574;
}

uint64_t sub_1B1B43A70()
{
  return 0x6465657073;
}

uint64_t sub_1B1B43A84()
{
  return 0x746E65747865;
}

uint64_t sub_1B1B43A98()
{
  return 0x657669746361;
}

uint64_t sub_1B1B43AAC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B43AD8 + 4 * byte_1B227AF8B[a1]))(1684957547, 0xE400000000000000);
}

uint64_t sub_1B1B43AD8()
{
  return 0x6874676E65727473;
}

uint64_t sub_1B1B43AF0()
{
  return 0x6E696E65706D6164;
}

uint64_t sub_1B1B43B10()
{
  return 0x6F6D416573696F6ELL;
}

uint64_t sub_1B1B43B30()
{
  return 0x6565536573696F6ELL;
}

uint64_t sub_1B1B43B4C()
{
  return 0x79726F6765746163;
}

uint64_t sub_1B1B43B70()
{
  return 0x4566666F6C6C6166;
}

uint64_t sub_1B1B43B94()
{
  return 0x65727574786574;
}

uint64_t sub_1B1B43BAC()
{
  return 0x6465657073;
}

uint64_t sub_1B1B43BC0()
{
  return 0x746E65747865;
}

uint64_t sub_1B1B43BD4()
{
  return 0x657669746361;
}

__n128 sub_1B1B43BE8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1B1B49524(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B1B43C30(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B453F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B1B43AAC);
}

uint64_t sub_1B1B43C3C(uint64_t a1, uint64_t a2)
{
  return sub_1B1B45488(a1, a2, (void (*)(uint64_t))sub_1B1B43970);
}

uint64_t sub_1B1B43C48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B454F8(a1, a2, a3, (void (*)(_QWORD))sub_1B1B43970);
}

uint64_t sub_1B1B43C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B45544(a1, a2, a3, (void (*)(uint64_t))sub_1B1B43970);
}

uint64_t sub_1B1B43C60@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B49424();
  *a1 = result;
  return result;
}

uint64_t sub_1B1B43C8C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1B43970(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1B43CB4()
{
  unsigned __int8 *v0;

  return sub_1B1B43AAC(*v0);
}

uint64_t sub_1B1B43CBC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B49424();
  *a1 = result;
  return result;
}

void sub_1B1B43CE0(_BYTE *a1@<X8>)
{
  *a1 = 11;
}

uint64_t sub_1B1B43CEC()
{
  sub_1B1B49F54();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B43D14()
{
  sub_1B1B49F54();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B43D3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __int128 v12;
  __int128 v13;
  char v14;
  char v15;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5AEC8, (uint64_t (*)(void))sub_1B1B49F54, (uint64_t)&type metadata for ForceField.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B49F54();
  sub_1B222A180();
  v15 = *(_BYTE *)(v3 + 8);
  v12 = *(_OWORD *)(v3 + 80);
  LOBYTE(v13) = 0;
  sub_1B2229940();
  if (!v2)
  {
    LOBYTE(v13) = 1;
    sub_1B2229934();
    LOBYTE(v13) = 2;
    sub_1B2229934();
    LOBYTE(v13) = 3;
    sub_1B2229934();
    LOBYTE(v13) = 4;
    sub_1B22299B8();
    LOBYTE(v13) = 5;
    sub_1B22299B8();
    LOBYTE(v13) = 6;
    sub_1B2229934();
    *(_QWORD *)&v13 = *(_QWORD *)(v3 + 132);
    v14 = 7;
    sub_1B1A0895C();
    sub_1B2229958();
    LOBYTE(v13) = 8;
    sub_1B222991C();
    LOBYTE(v13) = 9;
    sub_1B2229934();
    v13 = v12;
    v14 = 10;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

__n128 sub_1B1B4407C@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _OWORD v8[7];
  _OWORD v9[2];

  sub_1B1B49A70(a1, (uint64_t)v8);
  if (!v2)
  {
    v5 = v9[0];
    *(_OWORD *)(a2 + 96) = v8[6];
    *(_OWORD *)(a2 + 112) = v5;
    *(_OWORD *)(a2 + 124) = *(_OWORD *)((char *)v9 + 12);
    v6 = v8[3];
    *(_OWORD *)(a2 + 32) = v8[2];
    *(_OWORD *)(a2 + 48) = v6;
    v7 = v8[5];
    *(_OWORD *)(a2 + 64) = v8[4];
    *(_OWORD *)(a2 + 80) = v7;
    result = (__n128)v8[1];
    *(_OWORD *)a2 = v8[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B1B440D4(_QWORD *a1)
{
  return sub_1B1B43D3C(a1);
}

uint64_t sub_1B1B440E8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_1B1B493A0();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  return result;
}

double sub_1B1B44114@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v3 = v2;
  v4 = a1;
  v6 = *(_QWORD *)v2;
  v7 = *(unsigned __int16 *)(*(_QWORD *)v2 + 26);
  if (v7 > 0xF)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = sub_1B1DC8944((char *)(v6 + *(unsigned __int16 *)(v6 + 24) + 41), v7 >> 4);
    if (v8)
    {
      *(_QWORD *)&v13[0] = v9;
      v10 = swift_bridgeObjectRetain();
      sub_1B19F4A48(v10);
      v4 = *(_QWORD *)&v13[0];
    }
    else
    {
      v4 = v9;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_1B1B492F0((char *)(v4 + 32), *(_QWORD *)(v4 + 16), v3, (uint64_t)v13);
  swift_bridgeObjectRelease();
  result = *(double *)v13;
  v12 = v13[1];
  *(_OWORD *)a2 = v13[0];
  *(_OWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 32) = v14;
  return result;
}

double sub_1B1B441D4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  _OWORD v13[2];
  uint64_t v14;

  v3 = v2;
  v4 = a1;
  v6 = *(_QWORD *)v2;
  v7 = *(unsigned __int16 *)(*(_QWORD *)v2 + 26);
  if (v7 > 0xF)
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = sub_1B1DC8944((char *)(v6 + *(unsigned __int16 *)(v6 + 24) + 41), v7 >> 4);
    if (v8)
    {
      *(_QWORD *)&v13[0] = v9;
      v10 = swift_bridgeObjectRetain();
      sub_1B19F4A48(v10);
      v4 = *(_QWORD *)&v13[0];
    }
    else
    {
      v4 = v9;
    }
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  sub_1B1B4924C((char *)(v4 + 32), *(_QWORD *)(v4 + 16), v3, (uint64_t)v13);
  swift_bridgeObjectRelease();
  result = *(double *)v13;
  v12 = v13[1];
  *(_OWORD *)a2 = v13[0];
  *(_OWORD *)(a2 + 16) = v12;
  *(_QWORD *)(a2 + 32) = v14;
  return result;
}

uint64_t sub_1B1B44294(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t type metadata accessor for ForceFieldSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1B4437C()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  _BYTE v4[40];
  _OWORD v5[2];
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v7 = qword_1ED4D09F8;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  v11 = 2;
  v12 = 0;
  swift_retain();
  sub_1B1E3BFD0(1, (uint64_t)v4);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ForceFieldRuntime;
  *(_QWORD *)(inited + 40) = &off_1E638C1D0;
  sub_1B1B44114(inited, (uint64_t)v5);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v4);
  v2 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v6;
  return v0;
}

uint64_t *sub_1B1B444C0(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *result;
  uint64_t v4[12];
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[2];
  uint64_t v28;

  v2 = *(_OWORD *)(v1 + 32);
  v27[0] = *(_OWORD *)(v1 + 16);
  v27[1] = v2;
  v28 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v27, 0x200000000, v4);
  result = (uint64_t *)sub_1B1A18378((uint64_t)v4, (uint64_t)&v5, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (v5)
  {
    v16 = v5;
    v17 = v6;
    v18 = v7;
    v19 = v8;
    v20 = v9;
    v21 = v10;
    v22 = v11;
    v23 = v12;
    v24 = v13;
    v25 = v14;
    v26 = v15;
    sub_1B21870B0((uint64_t)&v16);
    return sub_1B19ED748(v4);
  }
  return result;
}

uint64_t sub_1B1B44590()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1B4437C();
  return v0;
}

const char *sub_1B1B445C4()
{
  return "ForceField";
}

uint64_t sub_1B1B445DC(float32x4_t *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;
  float v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  int64x2_t v15;
  int64x2_t v16;
  int v17;
  float32x4_t v18;
  char v19;
  uint64_t v20;
  _BOOL4 v21;
  _BOOL4 v22;
  float v23;
  float v24;
  float32x4_t v25;
  float32x4_t v26;
  int64x2_t v27;
  float32x4_t v28;
  float32x4_t v29;
  unint64_t v30;
  __int128 *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  char v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  __int128 *v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __int128 *v54;
  float32x4_t v55;
  unint64_t v56;
  __int128 *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  float32x4_t v61;
  float32x4_t v62;
  __n128 v63;
  __n128 v64;
  __n128 v65;
  __n128 v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  float32x4_t v75;
  float v76;
  float32x4_t v77;
  float v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _OWORD v87[4];
  char v88;
  __n128 v89[4];
  char v90;
  __n128 v91[4];
  char v92;
  __n128 v93[4];
  char v94;
  __n128 v95[4];
  char v96;
  __n128 v97[4];
  char v98;
  _BYTE v99[80];
  __n128 v100[4];
  char v101;
  __n128 v102[4];
  char v103;
  float32x4_t v104[2];
  uint64_t v105;
  __int128 v106;
  __int128 v107;
  _BYTE v108[25];
  float32x4_t v109[2];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  _BYTE v113[25];
  float32x4_t v114[2];
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  _BYTE v118[25];
  float32x4_t v119[2];
  uint64_t v120;
  __int128 v121;
  __int128 v122;
  _BYTE v123[25];
  __n128 v124;
  __n128 v125;
  _OWORD v126[5];
  float32x4_t v127;
  _OWORD v128[6];
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  char v136;
  __n128 v137;
  __n128 v138;
  _BYTE v139[64];
  char v140;
  int8x16_t v141;
  float32x4_t v142;
  _QWORD v143[8];
  char v144;

  sub_1B1B4D278(a2, (uint64_t)&v79, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
  v10 = a1->i64[0];
  v11 = a1->f32[3];
  v12 = a1[2].i64[1];
  v13 = a1[3].i64[1];
  if ((a1->i8[8] & 1) != 0)
  {
    if ((a3 & 1) == 0)
    {
      result = sub_1B1B4D2D0(102, 204, 255);
      v17 = result;
      goto LABEL_9;
    }
    v75 = a1[6];
    v77 = a1[5];
    v67 = v79;
    v68 = v81;
    v69 = v80;
    v70 = v83;
    v71 = v82;
    v72 = v85;
    v73 = v84;
    v74 = v86;
    result = sub_1B1B4D2D0(255, 111, 207);
    v17 = result;
  }
  else
  {
    v75 = a1[6];
    v77 = a1[5];
    v67 = v79;
    v68 = v81;
    v69 = v80;
    v70 = v83;
    v71 = v82;
    v72 = v85;
    v73 = v84;
    v74 = v86;
    result = sub_1B1B4D2D0(128, 128, 128);
    v17 = result;
    if ((a3 & 1) == 0)
    {
LABEL_9:
      v20 = a4;
LABEL_10:
      switch(v10)
      {
        case 0uLL:
          goto LABEL_57;
        case 1uLL:
        case 5uLL:
          v21 = v11 > 0.0;
          v22 = v10 == 1;
          v23 = 0.4;
          if (v21 && v22)
            v24 = 0.4;
          else
            v24 = 0.15;
          if (v21 && v22)
            v23 = 0.15;
          v76 = v23;
          v78 = v24;
          v25 = vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, v23);
          v26 = vsubq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DB0, v24), v25);
          v25.i32[3] = 1.0;
          v26.i32[3] = 0;
          v127 = v25;
          v128[0] = v26;
          *(_QWORD *)&v128[1] = 2;
          memset((char *)&v128[1] + 8, 0, 57);
          sub_1B1B4D278(a2, (uint64_t)v97, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          v124.n128_u8[0] = 1;
          if ((v98 & 1) != 0)
            sub_1B217F570(a5, 0x100000000uLL, v20, (__int128 *)&v127, v17);
          else
            sub_1B217F2CC(a5, 0x100000000uLL, v20, (__int128 *)&v127, v17, v97[0], v97[1], v97[2], v97[3]);
          v39 = vmulq_n_f32((float32x4_t)xmmword_1B2244DC0, v76);
          v40 = vsubq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DC0, v78), v39);
          v39.i32[3] = 1.0;
          v40.i32[3] = 0;
          v124 = (__n128)v39;
          v125 = (__n128)v40;
          *(_QWORD *)&v126[0] = 2;
          memset((char *)v126 + 8, 0, 32);
          memset((char *)&v126[2] + 8, 0, 25);
          sub_1B1B4D278(a2, (uint64_t)v95, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          v119[0].i8[0] = 1;
          if ((v96 & 1) != 0)
            sub_1B217F570(a5, 0x100000000uLL, v20, (__int128 *)&v124, v17);
          else
            sub_1B217F2CC(a5, 0x100000000uLL, v20, (__int128 *)&v124, v17, v95[0], v95[1], v95[2], v95[3]);
          v41 = vmulq_n_f32((float32x4_t)xmmword_1B2244DD0, v76);
          v42 = vsubq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DD0, v78), v41);
          v41.i32[3] = 1.0;
          v42.i32[3] = 0;
          v119[0] = v41;
          v119[1] = v42;
          v120 = 2;
          v121 = 0u;
          v122 = 0u;
          memset(v123, 0, sizeof(v123));
          sub_1B1B4D278(a2, (uint64_t)v93, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          v114[0].i8[0] = 1;
          if ((v94 & 1) != 0)
            sub_1B217F570(a5, 0x100000000uLL, v20, (__int128 *)v119, v17);
          else
            sub_1B217F2CC(a5, 0x100000000uLL, v20, (__int128 *)v119, v17, v93[0], v93[1], v93[2], v93[3]);
          v43 = vmulq_n_f32((float32x4_t)xmmword_1B2244DE0, v76);
          v44 = vsubq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DE0, v78), v43);
          v43.i32[3] = 1.0;
          v44.i32[3] = 0;
          v114[0] = v43;
          v114[1] = v44;
          v115 = 2;
          v116 = 0u;
          v117 = 0u;
          memset(v118, 0, sizeof(v118));
          sub_1B1B4D278(a2, (uint64_t)v91, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          v109[0].i8[0] = 1;
          if ((v92 & 1) != 0)
            sub_1B217F570(a5, 0x100000000uLL, v20, (__int128 *)v114, v17);
          else
            sub_1B217F2CC(a5, 0x100000000uLL, v20, (__int128 *)v114, v17, v91[0], v91[1], v91[2], v91[3]);
          v45 = vmulq_n_f32((float32x4_t)xmmword_1B2244D90, v76);
          v46 = vsubq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244D90, v78), v45);
          v45.i32[3] = 1.0;
          v46.i32[3] = 0;
          v109[0] = v45;
          v109[1] = v46;
          v110 = 2;
          v111 = 0u;
          v112 = 0u;
          memset(v113, 0, sizeof(v113));
          sub_1B1B4D278(a2, (uint64_t)v89, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          v104[0].i8[0] = 1;
          if ((v90 & 1) != 0)
            sub_1B217F570(a5, 0x100000000uLL, v20, (__int128 *)v109, v17);
          else
            sub_1B217F2CC(a5, 0x100000000uLL, v20, (__int128 *)v109, v17, v89[0], v89[1], v89[2], v89[3]);
          v47 = vmulq_n_f32((float32x4_t)xmmword_1B2244DF0, v76);
          v48 = vsubq_f32(vmulq_n_f32((float32x4_t)xmmword_1B2244DF0, v78), v47);
          v47.i32[3] = 1.0;
          v48.i32[3] = 0;
          v104[0] = v47;
          v104[1] = v48;
          v105 = 2;
          v106 = 0u;
          v107 = 0u;
          memset(v108, 0, sizeof(v108));
          sub_1B1B4D278(a2, (uint64_t)v87, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          if ((v88 & 1) != 0)
          {
            v49 = (__int128 *)v104;
            return sub_1B217F570(a5, 0x100000000uLL, v20, v49, v17);
          }
          v50 = (__n128)v87[0];
          v51 = (__n128)v87[1];
          v52 = (__n128)v87[2];
          v53 = (__n128)v87[3];
          v54 = (__int128 *)v104;
          break;
        case 2uLL:
          v127 = 0uLL;
          *(_QWORD *)&v128[0] = 0x400000003F000000;
          memset((char *)v128 + 8, 0, 72);
          v38 = 5;
          goto LABEL_61;
        case 6uLL:
          goto LABEL_60;
        case 7uLL:
          v127 = (float32x4_t)xmmword_1B227AF10;
          v128[0] = xmmword_1B227AF20;
          *(_QWORD *)&v128[1] = 0x3F00000040000000;
          memset((char *)&v128[1] + 8, 0, 56);
          v38 = 4;
          goto LABEL_61;
        case 8uLL:
        case 9uLL:
          goto LABEL_59;
        default:
          return result;
      }
      return sub_1B217F2CC(a5, 0x100000000uLL, v20, v54, v17, v50, v51, v52, v53);
    }
  }
  switch(v12)
  {
    case 1:
      v18 = v77;
      v18.i32[3] = 0;
      v141 = (int8x16_t)xmmword_1B2244E20;
      v142 = v18;
      memset(v143, 0, sizeof(v143));
      v19 = 6;
      goto LABEL_20;
    case 2:
      v141 = vextq_s8((int8x16_t)vdupq_lane_s32(0, 0), (int8x16_t)v77, 4uLL);
      v142 = 0u;
      memset(v143, 0, sizeof(v143));
      v19 = 3;
LABEL_20:
      v144 = v19;
      sub_1B1B4D278(a2, (uint64_t)&v137, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
      if ((v139[32] & 1) != 0)
      {
        LOBYTE(v129) = 1;
        goto LABEL_26;
      }
      v34 = v137;
      v35 = v138;
      v36 = *(__n128 *)v139;
      v37 = *(__n128 *)&v139[16];
      LOBYTE(v129) = 1;
      goto LABEL_49;
    case 3:
      if (v13 == 2)
      {
        v20 = a4;
      }
      else
      {
        v55 = vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B2244D90, v77, 2), (float32x4_t)0);
        v55.i32[3] = v77.i32[0];
        v141 = 0uLL;
        v142 = v55;
        v143[0] = 4;
        memset(&v143[1], 0, 56);
        v144 = 7;
        sub_1B1B4D278(a2, (uint64_t)v102, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
        v137.n128_u8[0] = 1;
        if ((v103 & 1) != 0)
          result = sub_1B217F570(a5, 0x100000000uLL, a4, (__int128 *)v141.i8, v17);
        else
          result = sub_1B217F2CC(a5, 0x100000000uLL, a4, (__int128 *)v141.i8, v17, v102[0], v102[1], v102[2], v102[3]);
        v60 = v13 == 1;
        v20 = a4;
        if (v60)
          goto LABEL_56;
      }
      v61 = vaddq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B2244DF0, v77, 2), (float32x4_t)0);
      v61.i32[3] = v77.i32[0];
      v137 = 0uLL;
      v138 = (__n128)v61;
      *(_QWORD *)v139 = 4;
      memset(&v139[8], 0, 56);
      v140 = 7;
      sub_1B1B4D278(a2, (uint64_t)v100, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
      if ((v101 & 1) != 0)
      {
        LOBYTE(v129) = 1;
        v30 = 0x100000000;
        v31 = (__int128 *)&v137;
        v32 = a5;
        v33 = v20;
        goto LABEL_55;
      }
      v34 = v100[0];
      v35 = v100[1];
      v36 = v100[2];
      v37 = v100[3];
      LOBYTE(v129) = 1;
      v56 = 0x100000000;
      v57 = (__int128 *)&v137;
      v58 = a5;
      v59 = v20;
      goto LABEL_50;
    case 4:
      v15.i64[0] = 1;
      v16.i64[0] = v13;
      v27.i64[1] = 3212836864;
      v27.i64[0] = 2;
      v28 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v16, v15).i64[0], 0), (int8x16_t)0, (int8x16_t)xmmword_1B2244DF0), v77.f32[0]);
      v29 = vmulq_n_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v16, v27).i64[0], 0), (int8x16_t)0, (int8x16_t)xmmword_1B2244D90), v77.f32[0]);
      v28.i32[3] = v77.i32[0];
      v29.i32[3] = v77.i32[0];
      v141 = (int8x16_t)v28;
      v142 = v29;
      v143[0] = 4;
      memset(&v143[1], 0, 56);
      v144 = 7;
      sub_1B1B4D278(a2, (uint64_t)&v137, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
      if ((v139[32] & 1) != 0)
      {
        LOBYTE(v129) = 1;
LABEL_26:
        v30 = (unint64_t)v129 << 32;
        v31 = (__int128 *)&v141;
        v32 = a5;
        v20 = a4;
        v33 = a4;
LABEL_55:
        result = sub_1B217F570(v32, v30, v33, v31, v17);
      }
      else
      {
        v34 = v137;
        v35 = v138;
        v36 = *(__n128 *)v139;
        v37 = *(__n128 *)&v139[16];
        LOBYTE(v129) = 1;
LABEL_49:
        v56 = (unint64_t)v129 << 32;
        v57 = (__int128 *)&v141;
        v58 = a5;
        v20 = a4;
        v59 = a4;
LABEL_50:
        result = sub_1B217F2CC(v58, v56, v59, v57, v17, v34, v35, v36, v37);
      }
LABEL_56:
      switch(v10)
      {
        case 0uLL:
LABEL_57:
          v127 = (float32x4_t)xmmword_1B2244E20;
          v128[0] = xmmword_1B227AF40;
          *(_QWORD *)&v128[1] = 2;
          memset((char *)&v128[1] + 8, 0, 57);
          sub_1B1B4D278(a2, (uint64_t)&v124, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          if ((v126[2] & 1) != 0)
            goto LABEL_62;
          v50 = v124;
          v51 = v125;
          v52 = (__n128)v126[0];
          v53 = (__n128)v126[1];
          goto LABEL_65;
        case 3uLL:
        case 4uLL:
          return result;
        case 6uLL:
LABEL_60:
          v127 = 0uLL;
          v128[0] = xmmword_1B2244DD0;
          v128[1] = xmmword_1B227AF30;
          *(_QWORD *)&v128[2] = 4;
          memset((char *)&v128[2] + 8, 0, 40);
          v38 = 9;
          goto LABEL_61;
        case 8uLL:
LABEL_59:
          v127 = (float32x4_t)xmmword_1B2244E20;
          v128[0] = xmmword_1B227AF00;
          memset(&v128[1], 0, 64);
          v38 = 6;
LABEL_61:
          LOBYTE(v128[5]) = v38;
          sub_1B1B4D278(a2, (uint64_t)&v124, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          if ((v126[2] & 1) != 0)
          {
LABEL_62:
            v119[0].i8[0] = 1;
            v49 = (__int128 *)&v127;
            return sub_1B217F570(a5, 0x100000000uLL, v20, v49, v17);
          }
          v50 = v124;
          v51 = v125;
          v52 = (__n128)v126[0];
          v53 = (__n128)v126[1];
LABEL_65:
          v119[0].i8[0] = 1;
          v54 = (__int128 *)&v127;
          break;
        default:
          sub_1B1B4D278(a2, (uint64_t)v99, (unint64_t *)&qword_1ED4B79B0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
          if ((v99[64] & 1) != 0)
          {
            v62 = (float32x4_t)xmmword_1B2244E20;
            v63 = (__n128)xmmword_1B2244D90;
            v64 = (__n128)xmmword_1B2244DD0;
            v65 = (__n128)xmmword_1B2244DB0;
          }
          else
          {
            v65.n128_u64[0] = v67;
            v64.n128_u64[0] = v68;
            v65.n128_u64[1] = v69;
            v64.n128_u64[1] = v71;
            v63.n128_u64[0] = v70;
            v63.n128_u64[1] = v73;
            v62.i64[0] = v72;
            v62.i64[1] = v74;
          }
          v66 = (__n128)vaddq_f32(v75, v62);
          v66.n128_u32[3] = v62.u32[3];
          v129 = 1028443341;
          v130 = 0u;
          v131 = 0u;
          v132 = 0u;
          v133 = 0u;
          v134 = 0u;
          v135 = 0;
          v136 = 2;
          v127.i8[0] = 1;
          result = sub_1B217F2CC(a5, 0x100000000uLL, v20, (__int128 *)&v129, v17, v65, v64, v63, v66);
          if (v10 <= 9)
            goto LABEL_10;
          return result;
      }
      break;
    default:
      v20 = a4;
      goto LABEL_56;
  }
  return sub_1B217F2CC(a5, 0x100000000uLL, v20, v54, v17, v50, v51, v52, v53);
}

uint64_t sub_1B1B4519C()
{
  return type metadata accessor for ParticleForceField.CPUSystem();
}

uint64_t sub_1B1B451B8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B451E8 + 4 * byte_1B227AFB8[a1]))(0x6C6169646172, 0xE600000000000000);
}

uint64_t sub_1B1B451E8()
{
  return 1684957559;
}

uint64_t sub_1B1B451F8()
{
  return 0x786574726F76;
}

uint64_t sub_1B1B45208()
{
  return 0x636974656E67616DLL;
}

uint64_t sub_1B1B45220()
{
  return 0x63696E6F6D726168;
}

uint64_t sub_1B1B45238()
{
  return 1734439524;
}

uint64_t sub_1B1B45248()
{
  return 0x73726579616CLL;
}

uint64_t sub_1B1B45258()
{
  return 0x65727574786574;
}

uint64_t sub_1B1B45270()
{
  return 0x7261656E696CLL;
}

uint64_t sub_1B1B45280()
{
  return 0x6573696F6ELL;
}

uint64_t sub_1B1B45294()
{
  return 0x6E656C7562727574;
}

uint64_t sub_1B1B452B0()
{
  return 0x676E69727073;
}

uint64_t sub_1B1B452C0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B452F0 + 4 * byte_1B227AFC4[a1]))(0x6C6169646172, 0xE600000000000000);
}

uint64_t sub_1B1B452F0()
{
  return 1684957559;
}

uint64_t sub_1B1B45300()
{
  return 0x786574726F76;
}

uint64_t sub_1B1B45310()
{
  return 0x636974656E67616DLL;
}

uint64_t sub_1B1B45328()
{
  return 0x63696E6F6D726168;
}

uint64_t sub_1B1B45340()
{
  return 1734439524;
}

uint64_t sub_1B1B45350()
{
  return 0x73726579616CLL;
}

uint64_t sub_1B1B45360()
{
  return 0x65727574786574;
}

uint64_t sub_1B1B45378()
{
  return 0x7261656E696CLL;
}

uint64_t sub_1B1B45388()
{
  return 0x6573696F6ELL;
}

uint64_t sub_1B1B4539C()
{
  return 0x6E656C7562727574;
}

uint64_t sub_1B1B453B8()
{
  return 0x676E69727073;
}

double sub_1B1B453C8@<D0>(uint64_t a1@<X8>)
{
  double result;

  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)a1 = _Q0;
  *(_OWORD *)(a1 + 16) = _Q0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 32) = result;
  *(_DWORD *)(a1 + 40) = 255;
  return result;
}

uint64_t sub_1B1B453E4(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B453F0(a1, a2, a3, a4, (uint64_t (*)(uint64_t))sub_1B1B452C0);
}

uint64_t sub_1B1B453F0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

uint64_t sub_1B1B4547C(uint64_t a1, uint64_t a2)
{
  return sub_1B1B45488(a1, a2, (void (*)(uint64_t))sub_1B1B451B8);
}

uint64_t sub_1B1B45488(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  sub_1B222A06C();
  a3(v5);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B454EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B454F8(a1, a2, a3, (void (*)(_QWORD))sub_1B1B451B8);
}

uint64_t sub_1B1B454F8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B45538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B45544(a1, a2, a3, (void (*)(uint64_t))sub_1B1B451B8);
}

uint64_t sub_1B1B45544(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  sub_1B222A06C();
  a4(v6);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B455A4@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B494B4();
  *a1 = result;
  return result;
}

uint64_t sub_1B1B455D0@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1B451B8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1B455F8()
{
  unsigned __int8 *v0;

  return sub_1B1B452C0(*v0);
}

uint64_t sub_1B1B45600@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B494B4();
  *a1 = result;
  return result;
}

void sub_1B1B45624(_BYTE *a1@<X8>)
{
  *a1 = 12;
}

uint64_t sub_1B1B45630()
{
  sub_1B1B4A448();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B45658()
{
  sub_1B1B4A448();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B45680(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[12];
  int v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5AEE8, (uint64_t (*)(void))sub_1B1B4A448, (uint64_t)&type metadata for ParticleForceField.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B4A448();
  sub_1B222A180();
  v21 = 0;
  sub_1B2229934();
  if (!v2)
  {
    v20 = 2;
    sub_1B2229934();
    v19 = 3;
    sub_1B2229934();
    v18 = 4;
    sub_1B2229934();
    v17 = 5;
    sub_1B2229934();
    v13 = *(_DWORD *)(v3 + 40);
    v16 = 6;
    sub_1B1B4A4D0();
    sub_1B2229958();
    v15 = 7;
    sub_1B2229934();
    v14 = 8;
    sub_1B2229934();
    v12[11] = 9;
    sub_1B2229934();
    v12[10] = 10;
    sub_1B2229934();
    v12[9] = 11;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B1B45934@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[28];

  sub_1B1B4A03C(a1, (float *)&v6);
  if (!v2)
  {
    v5 = *(_OWORD *)v7;
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)&v7[12];
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)&v7[12];
  }
  return result;
}

uint64_t sub_1B1B45978(_QWORD *a1)
{
  return sub_1B1B45680(a1);
}

void sub_1B1B4598C(uint64_t a1, __n128 a2)
{
  unint64_t v2;
  float v3;
  uint64_t v4;
  float v5;
  __int128 v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x2_t v17;
  float32x2_t v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v2 = a2.n128_u64[0];
  v3 = a2.n128_f32[2];
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(float *)(a1 + 64);
  v6 = *(_OWORD *)(a1 + 80);
  if ((v4 != 1 || a2.n128_f32[2] >= 0.0) && (v4 != 2 || a2.n128_f32[2] <= 0.0))
  {
    switch(*(_QWORD *)(a1 + 40))
    {
      case 0:
        return;
      case 1:
        v10 = fabsf(a2.n128_f32[0]);
        v21 = *(_OWORD *)(a1 + 80);
        if (*(float *)&v6 >= v10)
        {
          v19 = HIDWORD(v2);
          powf(v10 / *(float *)&v6, v5);
          HIDWORD(v2) = v19;
          v6 = v21;
        }
        v11 = fabsf(*((float *)&v2 + 1));
        if (*((float *)&v6 + 1) >= v11)
        {
          powf(v11 / *((float *)&v6 + 1), v5);
          DWORD2(v6) = DWORD2(v21);
        }
        v12 = fabsf(v3);
        if (*((float *)&v6 + 2) >= v12)
          powf(v12 / *((float *)&v6 + 2), v5);
        break;
      case 2:
        v9 = sqrtf((float)(a2.n128_f32[2] * a2.n128_f32[2])+ vaddv_f32(vmul_f32((float32x2_t)a2.n128_u64[0], (float32x2_t)a2.n128_u64[0])));
        if (*((float *)&v6 + 2) >= v9)
          powf(v9 / *((float *)&v6 + 2), *(float *)(a1 + 64));
        break;
      case 3:
        v13 = fabsf(a2.n128_f32[2]);
        LODWORD(v14) = *(_QWORD *)(a1 + 88);
        if (*((float *)&v6 + 2) >= v13)
        {
          v18 = (float32x2_t)a2.n128_u64[0];
          v22 = *(_OWORD *)(a1 + 80);
          if ((float)(1.0 - powf(v13 / *((float *)&v6 + 2), v5)) != 0.0)
          {
            v15 = (float)(v13 * *(float *)&v22) / fmaxf(v14, 0.001);
            v16 = sqrtf(vaddv_f32(vmul_f32(v18, v18)));
            if (v15 >= v16)
              powf(v16 / v15, v5);
          }
        }
        break;
      case 4:
        v7 = fabsf(a2.n128_f32[2]);
        if (*((float *)&v6 + 2) >= v7)
        {
          v17 = (float32x2_t)v2;
          v20 = *(_OWORD *)(a1 + 80);
          if ((float)(1.0 - powf(v7 / *((float *)&v6 + 2), v5)) != 0.0)
          {
            v8 = sqrtf(vaddv_f32(vmul_f32(v17, v17)));
            if (*(float *)&v20 >= v8)
              powf(v8 / *(float *)&v20, v5);
          }
        }
        break;
      default:
        sub_1B2229688();
        __break(1u);
        break;
    }
  }
}

uint64_t sub_1B1B45C58@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Orientation;
  *(_QWORD *)(inited + 56) = &off_1E63715B8;
  *(_QWORD *)(inited + 64) = &type metadata for LookAt;
  *(_QWORD *)(inited + 72) = &off_1E63BB560;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B45E74@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for DirectionalLight;
  *(_QWORD *)(inited + 40) = &off_1E6387110;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for Color;
  *(_QWORD *)(inited + 72) = &off_1E63BA208;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B46090@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for PointLight;
  *(_QWORD *)(inited + 40) = &off_1E636EBB8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for Color;
  *(_QWORD *)(inited + 72) = &off_1E63BA208;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B462AC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for SpotLight;
  *(_QWORD *)(inited + 40) = &off_1E63C5208;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for Color;
  *(_QWORD *)(inited + 72) = &off_1E63BA208;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B464C8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ForceField;
  *(_QWORD *)(inited + 40) = &off_1E636DAC8;
  *(_QWORD *)(inited + 48) = &type metadata for ForceFieldRuntime;
  *(_QWORD *)(inited + 56) = &off_1E638C1D0;
  *(_QWORD *)(inited + 64) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E6382C78;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B466E4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for Rect2D;
  *(_QWORD *)(inited + 40) = &off_1E63BC198;
  *(_QWORD *)(inited + 48) = &type metadata for Color;
  *(_QWORD *)(inited + 56) = &off_1E63BA208;
  *(_QWORD *)(inited + 64) = &type metadata for DiscShape;
  *(_QWORD *)(inited + 72) = &off_1E63C3A20;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B46900@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for Rect2D;
  *(_QWORD *)(inited + 40) = &off_1E63BC198;
  *(_QWORD *)(inited + 48) = &type metadata for Color;
  *(_QWORD *)(inited + 56) = &off_1E63BA208;
  *(_QWORD *)(inited + 64) = &type metadata for RoundedRectShape;
  *(_QWORD *)(inited + 72) = &off_1E638A778;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B46B1C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleBoxCollider;
  *(_QWORD *)(inited + 40) = &off_1E6398868;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E63AA9D8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B46D38@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleCylinderCollider;
  *(_QWORD *)(inited + 40) = &off_1E63AE100;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E63AA9D8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B46F54@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleSDFCollider;
  *(_QWORD *)(inited + 40) = &off_1E63993D0;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  *(_QWORD *)(inited + 64) = &type metadata for LastFrameWorldTransform;
  *(_QWORD *)(inited + 72) = &off_1E63AA9D8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B47170@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = &type metadata for ClampBox;
  *(_QWORD *)(inited + 40) = &off_1E63BEFC8;
  *(_QWORD *)(inited + 48) = &type metadata for Position;
  *(_QWORD *)(inited + 56) = &off_1E63C2410;
  *(_QWORD *)(inited + 64) = &type metadata for Velocity;
  *(_QWORD *)(inited + 72) = &off_1E63C3148;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 3;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 3;
  *(_WORD *)(v12 + 32) = 771;
  *(_BYTE *)(v12 + 34) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

void sub_1B1B4738C(_QWORD *a1, __int128 *a2, _QWORD *a3, uint64_t a4, float a5, float a6, int32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float32x4_t a11, float32x4_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float32x4_t a17, float a18, float a19)
{
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  __int32 v32;
  unsigned __int32 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  float32x4_t v38;
  __int32 *v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  unsigned __int32 v46;
  unsigned __int32 v47;
  float32x4_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  float32x4_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  float v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  __n128 v64;
  float v65;
  float v66;
  float v67;
  float v68;
  int32x2_t v69;
  float v70;
  float32x4_t v71;
  float v72;
  float v73;
  float v74;
  float v75;
  float v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float v80;
  double (*v81)(__n128);
  float32x4_t v82;
  __n128 v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float v88;
  float32x4_t v89;
  int32x4_t v90;
  float32x4_t v91;
  float v92;
  float v93;
  float v94;
  float v95;
  unsigned __int32 v96;
  __int32 v97;
  float32x4_t v98;
  __int32 v99;
  __int32 v100;
  __int32 v101;
  __int32 v102;
  __int32 v103;
  __int32 v104;
  float32x4_t v106;
  __int32 v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v114;
  float v115;
  float v116;
  float32x4_t v117;
  uint64_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  unsigned __int32 v123;
  float32x4_t v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  _OWORD v134[2];
  uint64_t v135;

  v135 = *MEMORY[0x1E0C80C00];
  v24 = (uint64_t *)a1[11];
  v25 = a1[12];
  v26 = a1[13];
  v27 = a1[2];
  v28 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v24, v25, v26, v27);
  v29 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v24, v25, v26, v27);
  v30 = sub_1B1B47A48();
  v34 = a1[6];
  v35 = a1[7];
  v36 = v35 - v34;
  if (v35 != v34)
  {
    v37 = v31;
    v109 = vaddq_f32(a8, a9);
    v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a7, a7), (int8x16_t)a7, 0xCuLL);
    v38 = vnegq_f32((float32x4_t)a7);
    v98 = v38;
    v39 = (__int32 *)(v30 + 4 * v34);
    v40 = 16 * v34;
    v41 = (float32x4_t *)(v29 + v40);
    v42 = (float32x4_t *)(v28 + v40);
    do
    {
      v49 = a2[7];
      v133 = a2[6];
      v134[0] = v49;
      *(_OWORD *)((char *)v134 + 12) = *(__int128 *)((char *)a2 + 124);
      v50 = a2[3];
      v129 = a2[2];
      v130 = v50;
      v51 = a2[5];
      v131 = a2[4];
      v132 = v51;
      v52 = a2[1];
      v127 = *a2;
      v128 = v52;
      v38.i32[0] = 1.0;
      if ((v37 & 1) == 0)
        v38.i32[0] = *v39;
      v118 = v38.i64[0];
      v53 = *v42;
      v117 = *v41;
      v54 = v127;
      v55 = *((float *)&v127 + 3);
      v56 = *((float *)&v128 + 1);
      v57 = *(_QWORD *)&v134[0];
      v58 = *((float *)&v127 + 3);
      if (*((float *)&v128 + 1) > 0.0)
      {
        v59 = a3[1];
        v60 = a3[2] ^ *a3;
        v61 = a3[3] ^ v59;
        *a3 ^= v61;
        a3[1] = v60 ^ v59;
        a3[2] = v60 ^ (v59 << 17);
        a3[3] = __ROR8__(v61, 19);
        v62 = (9 * ((((unint64_t)(5 * v59) >> 32) >> 25) | (640 * (_DWORD)v59))) & 0xFFFFFFLL;
        v58 = v55
            + (float)(v56
                    * (float)((float)((float)((float)(unint64_t)v62 * 0.000000059605)
                                    + (float)((float)(unint64_t)v62 * 0.000000059605))
                            + -1.0));
      }
      v63 = v53;
      v63.i32[3] = v32;
      v122 = v63;
      v114 = v53;
      v64 = (__n128)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a17, a12, v53, 2), a11, *(float32x2_t *)v53.f32, 1), a10, v53.f32[0]);
      v110 = (float32x4_t)v64;
      v64.n128_u32[3] = v33;
      v65 = v58 * a5;
      v123 = v33;
      sub_1B1B4598C((uint64_t)&v127, v64);
      v67 = v65 * v66;
      v45 = 0uLL;
      if (fabs(v65 * v66))
      {
        v68 = v67 * a19;
        v69.i32[1] = HIDWORD(v118);
        v70 = *(float *)&v118 * (float)(v67 * a19);
        v71 = v109;
        v71.i32[3] = v119.i32[3];
        switch(v54)
        {
          case 0:
            v45 = vmulq_n_f32((float32x4_t)a7, v70);
            v45.i32[3] = v100;
            goto LABEL_20;
          case 1:
            v32 = v122.i32[3];
            v85 = vsubq_f32(v122, v71);
            v86 = vmulq_f32(v85, v85);
            v45 = vmulq_n_f32(v85, v70 / fmaxf(sqrtf(v86.f32[2] + vaddv_f32(*(float32x2_t *)v86.f32)), 0.00001));
            v45.i32[3] = v99;
            goto LABEL_5;
          case 2:
            v32 = v122.i32[3];
            v43 = vsubq_f32(v122, v71);
            v44 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v43, (int32x4_t)v43), (int8x16_t)v43, 0xCuLL), v98), v43, v106);
            v45 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL), v68);
            v45.i32[3] = v101;
            goto LABEL_5;
          case 3:
          case 4:
            v120 = v71;
            if (*(float *)&v57 < 0.0)
              v72 = 14.0;
            else
              v72 = (float)(1.25 / (float)(*(float *)&v57 + 0.083333)) + -1.0;
            v126 = 0uLL;
            v73 = v72 * v114.f32[0];
            v74 = vmuls_lane_f32(v72, *(float32x2_t *)v114.f32, 1);
            v75 = vmuls_lane_f32(v72, v114, 2);
            v115 = v68;
            v76 = srdnoise3(&v126, v73, v74, v75, *((float *)&v57 + 1) * a18);
            v77 = vmulq_n_f32(vmulq_n_f32(v126, v76), v115);
            v78 = v77;
            v78.i32[3] = v108;
            v45 = v78;
            if (v54 == 4)
            {
              v79 = vmulq_f32(v117, v117);
              v80 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0])* *(float *)&v118;
              *(float32x2_t *)v45.f32 = vmul_n_f32(*(float32x2_t *)v77.f32, v80);
              v45.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v80, v77, 2));
            }
            v47 = a8.u32[3];
            v46 = a9.u32[3];
            v32 = v122.i32[3];
            v33 = v123;
            v71 = v120;
            break;
          case 5:
            v32 = v122.i32[3];
            v87 = vsubq_f32(v122, v71);
            v88 = sqrtf(vmuls_lane_f32(v87.f32[2], v87, 2) + vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v87, v87)));
            *(float32x2_t *)v87.f32 = vsub_f32(0, *(float32x2_t *)v87.f32);
            v87.f32[2] = 0.0 - v87.f32[2];
            v45 = vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(v87, v88), *(float *)&v118), v68);
            v45.i32[3] = v104;
            goto LABEL_5;
          case 6:
            v32 = v122.i32[3];
            v89 = vsubq_f32(v122, v71);
            v90 = (int32x4_t)vmlaq_f32(vmulq_f32(v106, vnegq_f32(v117)), (float32x4_t)a7, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), (int8x16_t)v117, 0xCuLL));
            v91 = vmulq_f32(v89, v89);
            v45 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL), (float)(1.0 / sqrtf(v91.f32[2] + vaddv_f32(*(float32x2_t *)v91.f32))) * v68);
            v45.i32[3] = v102;
            goto LABEL_5;
          case 7:
            v32 = v122.i32[3];
            v45 = vaddq_f32(vmulq_n_f32(v117, (float)(a6 * -2.0) * sqrtf(fabsf(v55))), vmulq_n_f32(vsubq_f32(v122, v71), -v68));
            v45.i32[3] = v103;
LABEL_5:
            v47 = a8.u32[3];
            v46 = a9.u32[3];
            v33 = v123;
            break;
          case 8:
            v92 = 2.0;
            if (v55 <= 2.0)
            {
              v93 = v55 * a19;
              v33 = v123;
              if (a6 > 2.0)
                goto LABEL_33;
            }
            else
            {
              v93 = a19 + a19;
              v33 = v123;
              if (a6 > 2.0)
                goto LABEL_33;
            }
            v92 = a6;
LABEL_33:
            v94 = sqrtf(vmuls_lane_f32(v117.f32[2], v117, 2) + vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v117, v117)));
            *(float *)v69.i32 = fmaxf(v94, 0.00001);
            v95 = (float)-(float)(v66 * v94) * (float)(v92 + (float)(v94 * v93));
            *(float32x2_t *)v45.f32 = vmul_n_f32(vdiv_f32(*(float32x2_t *)v117.f32, (float32x2_t)vdup_lane_s32(v69, 0)), v95);
            v45.f32[2] = (float)(v117.f32[2] / *(float *)v69.i32) * v95;
            v45.i32[3] = 0;
            v47 = a8.u32[3];
            v46 = a9.u32[3];
            v32 = v122.i32[3];
            break;
          case 9:
            v81 = *(double (**)(__n128))(a4 + 72);
            if (v81 != (double (*)(__n128))1)
            {
              v82.i64[0] = 0x3F0000003F000000;
              v82.i64[1] = 0x3F0000003F000000;
              v83 = (__n128)vaddq_f32(vmulq_f32(v110, v82), v82);
              v83.n128_u32[3] = v96;
              v121 = v71;
              v116 = v68;
              *(double *)v84.i64 = v81(v83);
              v45 = vmulq_n_f32(v84, v116);
              v45.i32[3] = v97;
              v71 = v121;
            }
            goto LABEL_20;
          default:
            sub_1B2229688();
            __break(1u);
            return;
        }
      }
      else
      {
        v71 = v119;
LABEL_20:
        v47 = a8.u32[3];
        v46 = a9.u32[3];
        v32 = v122.i32[3];
        v33 = v123;
      }
      v38 = *v41;
      v48 = vaddq_f32(v45, *v41);
      a8.i32[3] = v47;
      v48.i32[3] = 0;
      *v41++ = v48;
      ++v39;
      ++v42;
      v119 = v71;
      a9.i32[3] = v46;
      --v36;
    }
    while (v36);
  }
}

uint64_t sub_1B1B47A48()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Mass, (uint64_t)&off_1E63B9850, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47AB8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for AngularFactor, (uint64_t)&off_1E6378E90, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47B28()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47B98()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Scale, (uint64_t)&off_1E63BA9B8, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47C08()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47C78()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for ParticleParentID, (uint64_t)&off_1E63895A0, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47CE8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47D58()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47DC8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Scale2, (uint64_t)&off_1E63BC3F0, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47E38()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47EA8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47F18()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for ParticleID, (uint64_t)&off_1E636E760, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47F88()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B47FF8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for NeighborCount, (uint64_t)&off_1E637B9A0, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B48068()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for LinearFactor, (uint64_t)&off_1E6375C90, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t sub_1B1B480D8()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;

  v1 = sub_1B1A12038((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1E63717C8, *(uint64_t **)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 16));
  if (v1)
    v3 = v1;
  else
    v3 = 0;
  if ((v2 & 1) != 0)
    return 0;
  else
    return v3;
}

uint64_t type metadata accessor for ParticleForceField.CPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1B4816C()
{
  return "ParticleForceField.CPU";
}

uint64_t sub_1B1B48180()
{
  return qword_1EEF5DE18;
}

uint64_t sub_1B1B4818C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  unsigned int *v7;
  uint64_t result;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  uint64_t v40;
  unsigned int *v41;
  float v42;
  float32x4_t *v43;
  float32x4_t v44;
  float32x4_t v45;
  int32x4_t v46;
  float32x2_t v47;
  float32x2_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  __int128 v54;
  unsigned int v55;
  unsigned int v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  float32x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t ObjectType;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  float32x4_t v82;
  unsigned int *v83;
  float v84;
  float32x4_t *v85;
  float32x4_t v86;
  float32x4_t v87;
  int32x4_t v88;
  float32x2_t v89;
  float32x2_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  __int128 v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  BOOL v100;
  uint64_t v101;
  float32x2_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  float v132;
  float v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  _QWORD *v137;
  uint64_t v138;
  __int32 v139;
  __int32 v140;
  uint64_t v141;
  uint64_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  unsigned int v147;
  float v148;
  float v149;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  uint64_t v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _OWORD v161[2];
  uint64_t v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  _OWORD v171[2];
  uint64_t v172;
  float32x4_t v173;
  float32x4_t v174;
  simd_float4x4 v175;
  float32x4_t v176;
  __int128 v177;
  unsigned int v178;
  float32x2_t v179;
  float v180;
  unsigned int v181;
  uint64_t v182;
  unsigned int v183;
  BOOL v184;
  char v185;
  char v186;
  uint64_t v187[8];
  _OWORD v188[2];
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  _BYTE v195[40];
  uint64_t v196;
  simd_float4x4 v197;
  simd_float4x4 v198;
  simd_float4x4 v199;
  simd_float4x4 v200;

  v196 = *MEMORY[0x1E0C80C00];
  v2 = *(_OWORD *)(a1 + 96);
  v167 = *(_OWORD *)(a1 + 80);
  v168 = v2;
  v3 = *(_OWORD *)(a1 + 128);
  v169 = *(_OWORD *)(a1 + 112);
  v170 = v3;
  v4 = *(_OWORD *)(a1 + 32);
  v163 = *(_OWORD *)(a1 + 16);
  v164 = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v165 = *(_OWORD *)(a1 + 48);
  v166 = v5;
  v157 = v163;
  swift_retain();
  if (*((_QWORD *)&v163 + 1) == 0xFFFFFFFFLL
    || (DWORD2(v163) & 0x80000000) != 0
    || *(_QWORD *)(v163 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= SDWORD2(v163)
    || (v6 = *(_QWORD *)(v163 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(v163) != -1)
    && *(_DWORD *)(v6 + 12 * SDWORD2(v163) + 8) != HIDWORD(v163))
  {
    swift_release();
    goto LABEL_10;
  }
  v7 = (unsigned int *)(v6 + 12 * SDWORD2(v163));
  sub_1B1D1C7A8(*(_QWORD *)(*(_QWORD *)(v163 + 136) + 8 * (int)*v7 + 32), *v7 | ((unint64_t)*((unsigned __int16 *)v7 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v7 + 2) << 32), 44, v163, (uint64_t)&v173);
  result = swift_release();
  if (v175.columns[0].u8[12] == 1)
  {
LABEL_10:
    v132 = 1.0;
    v133 = 1.0;
    v16 = 1.0;
    v14 = 1.0;
    v15 = 1.0;
    v12 = 1.0;
    v13 = 1.0;
    v10 = 1.0;
    v11 = 1.0;
    v9 = 1.0;
    goto LABEL_11;
  }
  if (!v175.columns[0].i32[2])
    return result;
  v9 = v173.f32[1];
  v10 = v173.f32[3];
  v11 = v173.f32[2];
  v12 = v174.f32[1];
  v13 = v174.f32[0];
  v14 = v174.f32[3];
  v15 = v174.f32[2];
  v16 = v175.columns[0].f32[0];
  v132 = v173.f32[0];
  v133 = v175.columns[0].f32[1];
LABEL_11:
  v147 = *(_DWORD *)(v163 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
  swift_retain();
  *(double *)v17.i64 = sub_1B1E52854();
  v145 = v18;
  v146 = v17;
  v143 = v20;
  v144 = v19;
  v21 = *(_OWORD *)(v1 + 32);
  v171[0] = *(_OWORD *)(v1 + 16);
  v171[1] = v21;
  v172 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(v163, (uint64_t)v171, 0x200000000, v187);
  sub_1B1A18378((uint64_t)v187, (uint64_t)v188, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v188[0])
  {
    v158 = v188[0];
    v159 = v188[1];
    v160 = v189;
    if (v194 > 0)
    {
      v131 = v191;
      if (v191)
      {
        v130 = v190;
        v22 = v193[4];
        v136 = *(unsigned __int8 *)(v192 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v137 = v193;
        v128 = v193 + 8;
        v129 = (uint64_t)(v193 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v23 = 0;
        v127 = v22;
        do
        {
          v135 = v23;
          v24 = (unsigned int *)(v130 + 48 * v23);
          v25 = *v24;
          v138 = v24[1];
          v26 = (uint64_t *)*((_QWORD *)v24 + 2);
          v27 = *((_QWORD *)v24 + 3);
          v28 = *((_QWORD *)v24 + 5);
          v141 = *((_QWORD *)v24 + 4);
          if (v136)
          {
            v29 = *(os_unfair_lock_s **)(v28 + 376);
            swift_retain();
            os_unfair_lock_lock(v29);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v22);
          sub_1B1A18378(v129, (uint64_t)v195, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v30 = v137[4];
          v31 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v28 + 40) + 16) + 32) + 16) + 1;
          v32 = v28;
          swift_retain();
          v137[6] = ecs_stack_allocator_allocate(v30, 48 * v31, 8);
          v137[7] = v31;
          v128[1] = 0;
          v128[2] = 0;
          *v128 = 0;
          swift_release();
          v33 = v141;
          v34 = sub_1B1A12038((uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, v26, v27, v141, (uint64_t)v137);
          sub_1B1A12038((uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1E638C1A0, v26, v27, v141, (uint64_t)v137);
          v134 = v32;
          v35 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v26, v27, v141, (uint64_t)v137);
          v36 = v35;
          if (v26)
          {
            v38 = v125;
            v37 = v126;
            v39 = v124;
            if (v141)
            {
              v40 = 0;
              do
              {
                v41 = (unsigned int *)(v34 + 144 * v40);
                v42 = v9;
                switch(*(_QWORD *)v41)
                {
                  case 0:
                    v42 = v132;
                    if (v132 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 1:
                    goto LABEL_40;
                  case 2:
                    v42 = v11;
                    if (v11 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 3:
                    v42 = v14;
                    if (v14 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 4:
                    v42 = v16;
                    if (v16 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 5:
                    v42 = v133;
                    if (v133 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 6:
                    v42 = v10;
LABEL_40:
                    if (v42 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 7:
                    v42 = v13;
                    if (v13 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 8:
                    v42 = v12;
                    if (v12 != 0.0)
                      goto LABEL_41;
                    goto LABEL_23;
                  case 9:
                    v42 = v15;
                    if (v15 == 0.0)
                      goto LABEL_23;
LABEL_41:
                    v43 = (float32x4_t *)(v36 + (v40 << 6));
                    v44 = v43[2];
                    v45 = v43[3];
                    v46 = (int32x4_t)vmulq_f32(v44, v44);
                    v46.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v46, 2), vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1))).u32[0];
                    v47 = vrsqrte_f32((float32x2_t)v46.u32[0]);
                    v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v47, v47)));
                    v49 = vmulq_n_f32(v44, vmul_f32(v48, vrsqrts_f32((float32x2_t)v46.u32[0], vmul_f32(v48, v48))).f32[0]);
                    v50 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v144, v49, 2), v145, *(float32x2_t *)v49.f32, 1), v146, v49.f32[0]);
                    v148 = v42;
                    v51 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v143, v144, v45, 2), v145, *(float32x2_t *)v45.f32, 1), v146, v45.f32[0]);
                    v52 = v43[1];
                    v53 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v44, *((float32x4_t *)v41 + 6), 2), v52, *(float32x2_t *)(v41 + 24), 1), *v43, COERCE_FLOAT(*((_OWORD *)v41 + 6)));
                    v197.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, COERCE_FLOAT(*v43)), v145, *(float32x2_t *)v43->f32, 1), v144, *v43, 2), v143, *v43, 3);
                    v197.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v52.f32[0]), v145, *(float32x2_t *)v52.f32, 1), v144, v52, 2), v143, v52, 3);
                    v197.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v44.f32[0]), v145, *(float32x2_t *)v44.f32, 1), v144, v44, 2), v143, v44, 3);
                    v197.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v45.f32[0]), v145, *(float32x2_t *)v45.f32, 1), v144, v45, 2), v143, v45, 3);
                    v50.i32[3] = v39.i32[3];
                    v51.i32[3] = v38.i32[3];
                    v153 = v51;
                    v155 = v50;
                    v53.i32[3] = v37.i32[3];
                    v151 = v53;
                    v198 = __invert_f4(v197);
                    v54 = *((_OWORD *)v41 + 5);
                    DWORD2(v54) = fmaxf(COERCE_FLOAT(*((_QWORD *)v41 + 11)), 0.001);
                    v55 = v41[5];
                    v56 = v41[16];
                    v57 = *((_QWORD *)v41 + 5);
                    v58 = *((_QWORD *)v41 + 6) == 1;
                    v59 = *((_QWORD *)v41 + 7);
                    v60 = vmul_f32((float32x2_t)__PAIR64__(v147, LODWORD(v148)), *(float32x2_t *)(v41 + 3));
                    v61 = *((_QWORD *)v41 + 14);
                    v173 = v153;
                    v174 = v155;
                    v175 = v198;
                    v176 = v151;
                    v177 = v54;
                    v179 = v60;
                    v178 = v147;
                    v180 = v148;
                    v182 = v61;
                    v181 = v55;
                    v183 = v56;
                    v184 = v58;
                    v185 = v59;
                    v186 = v57;
                    v62 = *(_QWORD *)a1;
                    if (*(_QWORD *)a1)
                    {
                      ObjectType = swift_getObjectType();
                      type metadata accessor for particle_force_field_uniforms(0);
                      sub_1B1F40E1C((uint64_t)&v173, 1, ObjectType, v64, v65, v66, v67, v68);
                    }
                    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                    v69 = swift_allocObject();
                    *(_OWORD *)(v69 + 16) = xmmword_1B226D240;
                    v70 = *v41;
                    *(_OWORD *)(v69 + 32) = xmmword_1B227AF50;
                    *(_BYTE *)(v69 + 48) = 0;
                    *(_QWORD *)(v69 + 64) = v70;
                    *(_QWORD *)(v69 + 120) = 0;
                    *(_OWORD *)(v69 + 104) = 0u;
                    *(_OWORD *)(v69 + 88) = 0u;
                    *(_OWORD *)(v69 + 72) = 0u;
                    *(_BYTE *)(v69 + 128) = 14;
                    v71 = (int)v165;
                    v72 = DWORD1(v165);
                    swift_retain();
                    if ((_DWORD)v71 == -1 && !v72)
                      goto LABEL_102;
                    if ((v71 & 0x80000000) != 0)
                      goto LABEL_102;
                    v73 = (uint64_t *)(v157 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                    if (*(_QWORD *)(v157 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v71)
                      goto LABEL_102;
                    v74 = *v73;
                    v75 = *v73 + 12 * (int)v71;
                    v76 = *(__int16 *)(v75 + 4);
                    if (v72 != -1 && *(_DWORD *)(v75 + 8) != v72)
                      goto LABEL_102;
                    v77 = *(_QWORD *)(*(_QWORD *)(v157 + 136) + 8 * *(int *)(v74 + 12 * (int)v71) + 32);
                    v78 = *(_QWORD *)(v77 + 48);
                    v79 = *(_QWORD *)(v78 + 16);
                    if (!v79)
                      goto LABEL_102;
                    v80 = (_QWORD *)(v78 + 56);
                    break;
                  default:
                    goto LABEL_103;
                }
                while ((ValueMetadata *)*(v80 - 3) != &type metadata for EmitterRuntime)
                {
                  v80 += 5;
                  if (!--v79)
                    goto LABEL_102;
                }
                sub_1B1E53BF4(*(_QWORD *)(v77 + 128) + *v80 + 656 * v76, v62 == 0, v69, a1, 0xD000000000000014, 0x80000001B232F8D0, 0);
                swift_release();
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
                v37 = v151;
                v38 = v153;
                v39 = v155;
                v33 = v141;
LABEL_23:
                ++v40;
              }
              while (v40 != v33);
              v124 = v39;
              v125 = v38;
              v126 = v37;
              v22 = v127;
            }
            else
            {
              v22 = v127;
            }
          }
          else
          {
            v81 = v138;
            v22 = v127;
            if ((_DWORD)v25 != (_DWORD)v138)
            {
              v142 = v35;
              v82 = v123;
              do
              {
                v83 = (unsigned int *)(v34 + 144 * v25);
                v84 = v9;
                switch(*(_QWORD *)v83)
                {
                  case 0:
                    v84 = v132;
                    if (v132 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 1:
                    goto LABEL_77;
                  case 2:
                    v84 = v11;
                    if (v11 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 3:
                    v84 = v14;
                    if (v14 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 4:
                    v84 = v16;
                    if (v16 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 5:
                    v84 = v133;
                    if (v133 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 6:
                    v84 = v10;
                    if (v10 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 7:
                    v84 = v13;
LABEL_77:
                    if (v84 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 8:
                    v84 = v12;
                    if (v12 != 0.0)
                      goto LABEL_78;
                    goto LABEL_60;
                  case 9:
                    v84 = v15;
                    if (v15 == 0.0)
                      goto LABEL_60;
LABEL_78:
                    v85 = (float32x4_t *)(v142 + (v25 << 6));
                    v86 = v85[2];
                    v87 = v85[3];
                    v88 = (int32x4_t)vmulq_f32(v86, v86);
                    v88.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v88, 2), vadd_f32(*(float32x2_t *)v88.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.i8, 1))).u32[0];
                    v89 = vrsqrte_f32((float32x2_t)v88.u32[0]);
                    v90 = vmul_f32(v89, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v89, v89)));
                    v91 = vmulq_n_f32(v86, vmul_f32(v90, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v90, v90))).f32[0]);
                    v92 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v144, v91, 2), v145, *(float32x2_t *)v91.f32, 1), v146, v91.f32[0]);
                    v149 = v84;
                    v93 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v143, v144, v87, 2), v145, *(float32x2_t *)v87.f32, 1), v146, v87.f32[0]);
                    v94 = v85[1];
                    v95 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v86, *((float32x4_t *)v83 + 6), 2), v94, *(float32x2_t *)(v83 + 24), 1), *v85, COERCE_FLOAT(*((_OWORD *)v83 + 6)));
                    v199.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, COERCE_FLOAT(*v85)), v145, *(float32x2_t *)v85->f32, 1), v144, *v85, 2), v143, *v85, 3);
                    v199.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v94.f32[0]), v145, *(float32x2_t *)v94.f32, 1), v144, v94, 2), v143, v94, 3);
                    v199.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v86.f32[0]), v145, *(float32x2_t *)v86.f32, 1), v144, v86, 2), v143, v86, 3);
                    v199.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v87.f32[0]), v145, *(float32x2_t *)v87.f32, 1), v144, v87, 2), v143, v87, 3);
                    v92.i32[3] = v82.i32[3];
                    v93.i32[3] = v139;
                    v154 = v93;
                    v156 = v92;
                    v95.i32[3] = v140;
                    v152 = v95;
                    v200 = __invert_f4(v199);
                    v96 = *((_OWORD *)v83 + 5);
                    DWORD2(v96) = fmaxf(COERCE_FLOAT(*((_QWORD *)v83 + 11)), 0.001);
                    v97 = v83[5];
                    v98 = v83[16];
                    v99 = *((_QWORD *)v83 + 5);
                    v100 = *((_QWORD *)v83 + 6) == 1;
                    v101 = *((_QWORD *)v83 + 7);
                    v102 = vmul_f32((float32x2_t)__PAIR64__(v147, LODWORD(v149)), *(float32x2_t *)(v83 + 3));
                    v103 = *((_QWORD *)v83 + 14);
                    v173 = v154;
                    v174 = v156;
                    v175 = v200;
                    v176 = v152;
                    v177 = v96;
                    v179 = v102;
                    v178 = v147;
                    v180 = v149;
                    v182 = v103;
                    v181 = v97;
                    v183 = v98;
                    v184 = v100;
                    v185 = v101;
                    v186 = v99;
                    v104 = *(_QWORD *)a1;
                    if (*(_QWORD *)a1)
                    {
                      v105 = swift_getObjectType();
                      type metadata accessor for particle_force_field_uniforms(0);
                      sub_1B1F40E1C((uint64_t)&v173, 1, v105, v106, v107, v108, v109, v110);
                    }
                    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                    v111 = swift_allocObject();
                    *(_OWORD *)(v111 + 16) = xmmword_1B226D240;
                    v112 = *v83;
                    *(_OWORD *)(v111 + 32) = xmmword_1B227AF50;
                    *(_BYTE *)(v111 + 48) = 0;
                    *(_QWORD *)(v111 + 64) = v112;
                    *(_QWORD *)(v111 + 120) = 0;
                    *(_OWORD *)(v111 + 104) = 0u;
                    *(_OWORD *)(v111 + 88) = 0u;
                    *(_OWORD *)(v111 + 72) = 0u;
                    *(_BYTE *)(v111 + 128) = 14;
                    v113 = (int)v165;
                    v114 = DWORD1(v165);
                    swift_retain();
                    if ((_DWORD)v113 == -1 && !v114)
                      goto LABEL_102;
                    if ((v113 & 0x80000000) != 0)
                      goto LABEL_102;
                    v115 = (uint64_t *)(v157 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
                    if (*(_QWORD *)(v157 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v113)
                      goto LABEL_102;
                    v116 = *v115;
                    v117 = *v115 + 12 * (int)v113;
                    v118 = *(__int16 *)(v117 + 4);
                    if (v114 != -1 && *(_DWORD *)(v117 + 8) != v114)
                      goto LABEL_102;
                    v119 = *(_QWORD *)(*(_QWORD *)(v157 + 136) + 8 * *(int *)(v116 + 12 * (int)v113) + 32);
                    v120 = *(_QWORD *)(v119 + 48);
                    v121 = *(_QWORD *)(v120 + 16);
                    if (!v121)
                      goto LABEL_102;
                    v122 = (_QWORD *)(v120 + 56);
                    break;
                  default:
                    goto LABEL_103;
                }
                while ((ValueMetadata *)*(v122 - 3) != &type metadata for EmitterRuntime)
                {
                  v122 += 5;
                  if (!--v121)
                  {
LABEL_102:
                    v173.i64[0] = 0;
                    v173.i64[1] = 0xE000000000000000;
                    sub_1B2229430();
                    sub_1B2228890();
                    sub_1B1BC3C70();
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    sub_1B2228890();
                    sub_1B2228890();
                    sub_1B2228890();
                    while (1)
                    {
LABEL_103:
                      sub_1B2229688();
                      __break(1u);
                    }
                  }
                }
                sub_1B1E53BF4(*(_QWORD *)(v119 + 128) + *v122 + 656 * v118, v104 == 0, v111, a1, 0xD000000000000014, 0x80000001B232F8D0, 0);
                swift_release();
                swift_setDeallocating();
                swift_arrayDestroy();
                swift_deallocClassInstance();
                v82 = v156;
                v139 = v154.i32[3];
                v140 = v152.i32[3];
                v81 = v138;
LABEL_60:
                ++v25;
              }
              while (v25 != v81);
              v123 = v82;
            }
          }
          v161[0] = v158;
          v161[1] = v159;
          v162 = v160;
          sub_1B1F05D48(v137, (unsigned __int16 **)v161, (uint64_t)v195);
          sub_1B1F03804((char *)v134);
          ecs_stack_allocator_pop_snapshot(v22);
          if ((v136 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v134 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v134 + 376));
          }
          swift_release();
          v23 = v135 + 1;
        }
        while (v135 + 1 != v131);
        sub_1B19ED748(v187);
      }
    }
    sub_1B19ED748(v187);
  }
  return swift_release();
}

uint64_t type metadata accessor for ParticleForceField.GPUSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for ForceFieldRuntime()
{
  return &type metadata for ForceFieldRuntime;
}

__n128 initializeWithCopy for ForceField(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 124) = *(_OWORD *)(a2 + 124);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ForceField(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 140))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceField(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 136) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 140) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 140) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ForceField()
{
  return &type metadata for ForceField;
}

uint64_t sub_1B1B49164()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1B464C8((uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B1B4921C()
{
  return "ParticleForceField.GPU";
}

uint64_t sub_1B1B49230()
{
  return type metadata accessor for ParticleForceField.GPUSystem();
}

uint64_t sub_1B1B4924C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  result = sub_1B1CC8DA4((char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 16)), (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a3 + 18) >> 4, (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 20)), *(unsigned __int16 *)(*(_QWORD *)a3 + 22), a1, a2, (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 28)), *(unsigned __int16 *)(*(_QWORD *)a3 + 30) / 0x18u);
  v7 = *(_DWORD *)(a3 + 8);
  v8 = *(_BYTE *)(a3 + 12);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_BYTE *)(a3 + 24);
  v11 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 12) = v8;
  *(_QWORD *)(a4 + 16) = v9;
  *(_BYTE *)(a4 + 24) = v10;
  *(_QWORD *)(a4 + 32) = v11;
  return result;
}

uint64_t sub_1B1B492F0@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t result;

  v5 = *(_DWORD *)(a3 + 8);
  v6 = *(_BYTE *)(a3 + 12);
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_BYTE *)(a3 + 24);
  v9 = *(_QWORD *)(a3 + 32);
  result = sub_1B1CC8DA4((char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 16)), (unint64_t)*(unsigned __int16 *)(*(_QWORD *)a3 + 18) >> 4, (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 20)), *(unsigned __int16 *)(*(_QWORD *)a3 + 22), a1, a2, (char *)(*(_QWORD *)a3 + 41 + *(unsigned __int16 *)(*(_QWORD *)a3 + 28)), *(unsigned __int16 *)(*(_QWORD *)a3 + 30) / 0x18u);
  *(_QWORD *)a4 = result;
  *(_DWORD *)(a4 + 8) = v5;
  *(_BYTE *)(a4 + 12) = v6;
  *(_QWORD *)(a4 + 16) = v7;
  *(_BYTE *)(a4 + 24) = v8;
  *(_QWORD *)(a4 + 32) = v9;
  return result;
}

uint64_t sub_1B1B493A0()
{
  uint64_t v0;
  uint64_t v2;

  v2 = 0;
  MEMORY[0x1B5E23FA0](&v2, 8);
  v0 = v2;
  v2 = 0;
  MEMORY[0x1B5E23FA0](&v2, 8);
  v2 = 0;
  MEMORY[0x1B5E23FA0](&v2, 8);
  v2 = 0;
  MEMORY[0x1B5E23FA0](&v2, 8);
  return v0;
}

uint64_t sub_1B1B49424()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xB)
    return 11;
  else
    return v0;
}

uint64_t sub_1B1B4946C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0x10)
    return 16;
  else
    return v0;
}

uint64_t sub_1B1B494B4()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 0xC)
    return 12;
  else
    return v0;
}

uint64_t sub_1B1B494FC(uint64_t result)
{
  if (result >= 7u)
    return 7;
  else
    return result;
}

uint64_t sub_1B1B49510(uint64_t result)
{
  if ((result & 0xFC) != 0)
    return 4;
  else
    return result;
}

uint64_t sub_1B1B49524@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  int v28;
  int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  _QWORD *v43;
  unint64_t v44;
  int v45;
  char v46;

  sub_1B19F8E54(0, &qword_1EEF5AF30, (uint64_t (*)(void))sub_1B1B4D814, (uint64_t)&type metadata for ForceField_LEGACY.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v37 - v9;
  v11 = a1[3];
  v43 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1B4D814();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
  v12 = v7;
  v46 = 0;
  sub_1B1B4D858();
  sub_1B2229814();
  v13 = v6;
  v14 = v44;
  LOBYTE(v44) = 1;
  sub_1B22297F0();
  v16 = v15;
  LOBYTE(v44) = 2;
  sub_1B22297F0();
  v18 = v17;
  LOBYTE(v44) = 3;
  sub_1B22297F0();
  v20 = v19;
  LOBYTE(v44) = 4;
  sub_1B22297F0();
  v22 = v21;
  LOBYTE(v44) = 5;
  v24 = sub_1B2229874();
  LOBYTE(v44) = 6;
  v25 = sub_1B22297D8();
  LOBYTE(v44) = 7;
  v26 = sub_1B22297D8();
  v42 = v25;
  v45 = v26;
  v46 = 8;
  sub_1B1B4A48C();
  sub_1B2229814();
  v41 = v44;
  v46 = 9;
  sub_1B1B4D89C();
  v27 = v13;
  sub_1B2229814();
  v40 = v44;
  v46 = 10;
  sub_1B1B4D8E0();
  sub_1B2229814();
  v39 = v44;
  LOBYTE(v44) = 11;
  sub_1B22297F0();
  v29 = v28;
  sub_1B1B4D924();
  v46 = 12;
  v38 = sub_1B1B4D980();
  sub_1B2229814();
  v30 = v44;
  v46 = 13;
  sub_1B2229814();
  v31 = v44;
  v46 = 14;
  sub_1B2229814();
  v38 = v44;
  v32 = v43[3];
  v33 = v43[4];
  sub_1B19FA070(v43, v32);
  if (sub_1B2067BAC(1097, v32, v33))
  {
    v46 = 15;
    sub_1B1A08878();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v27);
    v34 = v44;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v27);
    v34 = 0xFFFFFFFFLL;
  }
  v35 = v42 & 1;
  v36 = v45 & 1;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
  *(_BYTE *)a2 = v14;
  *(_DWORD *)(a2 + 4) = v16;
  *(_DWORD *)(a2 + 8) = v18;
  *(_DWORD *)(a2 + 12) = v20;
  *(_DWORD *)(a2 + 16) = v22;
  *(_QWORD *)(a2 + 24) = v24;
  *(_BYTE *)(a2 + 32) = v35;
  *(_BYTE *)(a2 + 33) = v36;
  *(_DWORD *)(a2 + 36) = v41;
  *(_BYTE *)(a2 + 40) = v40;
  *(_BYTE *)(a2 + 41) = v39;
  *(_DWORD *)(a2 + 44) = v29;
  *(_QWORD *)(a2 + 48) = v30;
  *(_QWORD *)(a2 + 56) = v31;
  *(_QWORD *)(a2 + 64) = v38;
  *(_QWORD *)(a2 + 72) = v34;
  return result;
}

uint64_t sub_1B1B49A70@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t result;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  unsigned __int8 v39;
  char v40;
  int v41;
  unsigned int v42;
  int v43;
  uint64_t v44;
  _QWORD v45[4];
  char v46;

  sub_1B19F8E54(0, &qword_1EEF5AEB0, (uint64_t (*)(void))sub_1B1B49F54, (uint64_t)&type metadata for ForceField.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v32 - v9;
  v46 = 0;
  v11 = a1[3];
  v12 = a1[4];
  sub_1B19FA070(a1, v11);
  if (!sub_1B2067BAC(2025, v11, v12))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v2)
    {
      sub_1B19FA070(v45, v45[3]);
      sub_1B1B49F98();
      sub_1B2229D6C();
      v17 = DWORD2(v35);
      v15 = DWORD1(v35);
      v19 = v36;
      v31 = v37;
      v20 = v38;
      v22 = v41;
      v29 = v44;
      LODWORD(v26) = v43;
      DWORD1(v26) = v43;
      *((_QWORD *)&v26 + 1) = v42;
      v34 = v26;
      v13 = qword_1B227BB38[(char)v35];
      v28 = 2 - v39;
      v27 = qword_1B227BB70[v40];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v45);
      v24 = 0;
      v30 = 1;
      goto LABEL_7;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B49F54();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  LOBYTE(v35) = 0;
  v13 = sub_1B22297FC();
  LOBYTE(v35) = 1;
  sub_1B22297F0();
  v15 = v14;
  LOBYTE(v35) = 8;
  v46 = sub_1B22297D8() & 1;
  LOBYTE(v35) = 2;
  sub_1B22297F0();
  v17 = v16;
  LOBYTE(v35) = 3;
  sub_1B22297F0();
  v19 = v18;
  LOBYTE(v35) = 4;
  v33 = sub_1B2229874();
  LOBYTE(v35) = 5;
  v20 = sub_1B2229874();
  LOBYTE(v35) = 6;
  sub_1B22297F0();
  v22 = v21;
  LOBYTE(v35) = 9;
  sub_1B22297F0();
  v24 = v23;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  LOBYTE(v45[0]) = 10;
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
  sub_1B2229814();
  v34 = v35;
  LOBYTE(v45[0]) = 7;
  sub_1B1A08878();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v27 = 0;
  v28 = 0;
  v29 = v35;
  v30 = v46;
  v31 = v33;
LABEL_7:
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v13;
  *(_BYTE *)(a2 + 8) = v30;
  *(_DWORD *)(a2 + 12) = v15;
  *(_DWORD *)(a2 + 16) = v17;
  *(_DWORD *)(a2 + 20) = v19;
  *(_QWORD *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v27;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = v28;
  *(_DWORD *)(a2 + 64) = v22;
  *(_OWORD *)(a2 + 80) = v34;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_DWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a2 + 116) = v24;
  *(_WORD *)(a2 + 128) = 1;
  *(_QWORD *)(a2 + 132) = v29;
  return result;
}

unint64_t sub_1B1B49F54()
{
  unint64_t result;

  result = qword_1EEF5AEB8;
  if (!qword_1EEF5AEB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B5F4, &type metadata for ForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AEB8);
  }
  return result;
}

unint64_t sub_1B1B49F98()
{
  unint64_t result;

  result = qword_1EEF5AEC0;
  if (!qword_1EEF5AEC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B5CC, &type metadata for ForceField_LEGACY);
    atomic_store(result, (unint64_t *)&qword_1EEF5AEC0);
  }
  return result;
}

uint64_t sub_1B1B49FDC(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B19F8E54(255, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1B4A03C@<X0>(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  uint64_t result;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  float v40;
  int v41;
  float v42;
  int v43;
  float *v44;
  char v45;
  int v46;

  v44 = a2;
  sub_1B19F8E54(0, &qword_1EEF5AED0, (uint64_t (*)(void))sub_1B1B4A448, (uint64_t)&type metadata for ParticleForceField.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v42 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B4A448();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  v11 = v44;
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  if (sub_1B2067BAC(2025, v12, v13))
  {
    LOBYTE(v46) = 8;
    v14 = v5;
    v15 = v9;
    sub_1B22297F0();
    v17 = v16;
    LOBYTE(v46) = 9;
    sub_1B22297F0();
    v19 = v18;
    LOBYTE(v46) = 10;
    sub_1B22297F0();
    v21 = v20;
    LOBYTE(v46) = 11;
    sub_1B22297F0();
    v23 = v22;
  }
  else
  {
    LOBYTE(v46) = 1;
    v14 = v5;
    v15 = v9;
    sub_1B22297F0();
    v17 = v24;
    v23 = 1.0;
    v21 = 1.0;
    v19 = 1.0;
  }
  LOBYTE(v46) = 0;
  sub_1B22297F0();
  v26 = v25;
  LOBYTE(v46) = 2;
  sub_1B22297F0();
  v28 = v27;
  LOBYTE(v46) = 3;
  sub_1B22297F0();
  v30 = v29;
  LOBYTE(v46) = 4;
  sub_1B22297F0();
  v32 = v31;
  LOBYTE(v46) = 5;
  sub_1B22297F0();
  v43 = v33;
  v45 = 6;
  sub_1B1B4A48C();
  sub_1B2229814();
  v35 = a1;
  v36 = v46;
  v37 = v35[3];
  v38 = v35[4];
  v39 = (uint64_t)v35;
  sub_1B19FA070(v35, v37);
  if (sub_1B2067BAC(1097, v37, v38))
  {
    LOBYTE(v46) = 7;
    sub_1B22297F0();
    v42 = v40;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v14);
    v42 = 1.0;
  }
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v39);
  *(_DWORD *)v11 = v17;
  *((_DWORD *)v11 + 1) = v26;
  *((_DWORD *)v11 + 2) = v28;
  *((_DWORD *)v11 + 3) = v30;
  v41 = v43;
  *((_DWORD *)v11 + 4) = v32;
  *((_DWORD *)v11 + 5) = v41;
  v11[6] = v42;
  v11[7] = v19;
  v11[8] = v21;
  v11[9] = v23;
  *((_DWORD *)v11 + 10) = v36;
  return result;
}

unint64_t sub_1B1B4A448()
{
  unint64_t result;

  result = qword_1EEF5AED8;
  if (!qword_1EEF5AED8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B57C, &type metadata for ParticleForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AED8);
  }
  return result;
}

unint64_t sub_1B1B4A48C()
{
  unint64_t result;

  result = qword_1EEF5AEE0;
  if (!qword_1EEF5AEE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1DA8, &type metadata for CollisionLayerSet);
    atomic_store(result, (unint64_t *)&qword_1EEF5AEE0);
  }
  return result;
}

unint64_t sub_1B1B4A4D0()
{
  unint64_t result;

  result = qword_1EEF5AEF0;
  if (!qword_1EEF5AEF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22B1D80, &type metadata for CollisionLayerSet);
    atomic_store(result, (unint64_t *)&qword_1EEF5AEF0);
  }
  return result;
}

uint64_t *sub_1B1B4A514(uint64_t a1, int a2, float32x4_t a3, float32x4_t a4, double a5, float a6, float a7)
{
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float32x4_t v39;
  float32x4_t v40;
  __n128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  int v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  simd_float4x4 v50;
  float32x4_t v51;
  uint64_t *v52;
  void *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  float32x4_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  float32x4_t *v78;
  uint64_t *v79;
  id v80;
  id v81;
  int32x4_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  float v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  float v94;
  float v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  __n128 v102;
  float v103;
  float32x4_t v104;
  float32x4_t v105;
  int32x4_t v106;
  float32x2_t v107;
  float32x2_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float32x4_t v115;
  float32x4_t v116;
  int32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int32x4_t v125;
  float32x4_t v126;
  float v127;
  float v128;
  float v129;
  float32x4_t v130;
  __n128 v131;
  float32x4_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  int v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  uint64_t *v147;
  BOOL v148;
  void *v149;
  uint64_t v150;
  unsigned int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  char *v164;
  float32x4_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  float32x4_t *v173;
  uint64_t *v174;
  id v175;
  id v176;
  int32x4_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  float v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  uint64_t v188;
  float v189;
  float v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  uint64_t v196;
  __n128 v197;
  float v198;
  float32x4_t v199;
  float32x4_t v200;
  int32x4_t v201;
  float32x2_t v202;
  float32x2_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float v206;
  float v207;
  float v208;
  float v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float v218;
  float32x4_t v219;
  int32x4_t v220;
  float32x4_t v221;
  float v222;
  float v223;
  float v224;
  float32x4_t v225;
  __n128 v226;
  float32x4_t v227;
  char *v228;
  uint64_t *result;
  uint64_t v230;
  uint64_t v231;
  float32x4_t v232;
  float32x4_t v233;
  unint64_t v234;
  uint64_t v235;
  uint64_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float v250;
  float32x2_t v251;
  float32x4_t v252;
  float v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32_t v266;
  float32_t v267;
  _QWORD *v268;
  _QWORD *v269;
  int v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  float32x4_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  char *v283;
  int *v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  double v291;
  float32x4_t v292;
  uint64_t v293;
  char *v294;
  int v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  uint64_t *v307;
  float32x4_t v308;
  float32x4_t v309;
  __n128 v310;
  __n128 v311;
  __n128 v312;
  float32x4_t v313;
  float32x4_t v314;
  simd_float4 v315;
  _OWORD v316[2];
  uint64_t v317;
  __int128 v318;
  __int128 v319;
  uint64_t v320;
  _OWORD v321[2];
  uint64_t v322;
  _OWORD v323[2];
  uint64_t v324;
  uint64_t v325;
  int v326;
  char v327;
  uint64_t v328;
  char v329;
  uint64_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347[12];
  int64x2_t v348[7];
  int64x2_t v349[7];
  _QWORD v350[4];
  unsigned __int16 v351;
  unsigned __int16 v352;
  unsigned __int16 v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  _QWORD v357[4];
  unsigned __int16 v358;
  unsigned __int16 v359;
  unsigned __int16 v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  _OWORD v364[2];
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  _QWORD *v369;
  uint64_t v370;
  _BYTE v371[40];
  _OWORD v372[7];
  _OWORD v373[2];
  _OWORD v374[7];
  _OWORD v375[2];
  uint64_t v376;
  simd_float4x4 v377;
  simd_float4x4 v378;
  simd_float4x4 v379;

  v291 = a5;
  v265 = a4;
  v276 = a3;
  v376 = *MEMORY[0x1E0C80C00];
  sub_1B1B1F358();
  v284 = v11;
  MEMORY[0x1E0C80A78](v11, v12);
  v283 = (char *)&v230 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = sub_1B222820C();
  v281 = *(_QWORD *)(v282 - 8);
  MEMORY[0x1E0C80A78](v282, v14);
  v280 = (char *)&v230 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v325 = qword_1ED4D09F8;
  v326 = 0;
  v327 = 2;
  v328 = 0;
  v329 = 2;
  v330 = 0;
  swift_retain();
  sub_1B1B464C8((uint64_t)v316);
  swift_release();
  v323[0] = v316[0];
  v323[1] = v316[1];
  v324 = v317;
  v293 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v323, 0x200000000, v347);
  sub_1B1A18378((uint64_t)v347, (uint64_t)v364, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v364[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v316);
  v318 = v364[0];
  v319 = v364[1];
  v320 = v365;
  if (v370 <= 0 || (v273 = v367) == 0)
  {
    sub_1B19ED720((uint64_t)v316);
    return sub_1B19ED748(v347);
  }
  v272 = v366;
  v16 = v369[4];
  v17 = *(unsigned __int8 *)(v368 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v269 = v369 + 6;
  v279 = v369;
  v268 = v369 + 8;
  v307 = &v345;
  v297 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v276.f32, 1);
  v298 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v276.f32, 0);
  v296 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v276, 2);
  v266 = v276.f32[2];
  v267 = v276.f32[1];
  v18 = v265;
  v19 = vmulq_f32(v18, v18);
  v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1)));
  v253 = sqrtf(vmuls_lane_f32(v265.f32[2], v265, 2) + vaddv_f32(*(float32x2_t *)v19.f32));
  v19.f32[0] = fmaxf(v253, 0.00001);
  v20.f32[0] = sqrtf(v20.f32[0]) * *(float *)&v291;
  v252 = v20;
  v251 = vdiv_f32(*(float32x2_t *)v265.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v19.f32, 0));
  v250 = v265.f32[2] / v19.f32[0];
  v248 = vnegq_f32(v265);
  v249 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL);
  swift_retain();
  swift_retain();
  swift_retain();
  v21 = 0;
  v22 = 0;
  v275 = (unint64_t)"VFX/ForceField.swift";
  v274 = 0x80000001B232F890;
  v234 = (unint64_t)"ParticleForceField.GPU";
  v231 = 0x80000001B232F910;
  v308 = 0u;
  v270 = v17;
  v295 = a2;
  v271 = v16;
  while (2)
  {
    v277 = v22;
    v23 = (unsigned int *)(v272 + 48 * v21);
    v25 = *v23;
    v24 = v23[1];
    v26 = (uint64_t *)*((_QWORD *)v23 + 2);
    v27 = *((_QWORD *)v23 + 3);
    v29 = *((_QWORD *)v23 + 4);
    v28 = (char *)*((_QWORD *)v23 + 5);
    v294 = v28;
    v278 = v21;
    v315.i64[0] = v24;
    if (v17)
    {
      v30 = (os_unfair_lock_s *)*((_QWORD *)v294 + 47);
      swift_retain();
      v31 = v30;
      v28 = v294;
      os_unfair_lock_lock(v31);
      os_unfair_lock_lock(*((os_unfair_lock_t *)v28 + 43));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v16);
    sub_1B1A18378((uint64_t)v269, (uint64_t)v371, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v32 = v279;
    v33 = v279[4];
    v34 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)v28 + 5) + 16) + 32) + 16) + 1;
    swift_retain();
    v32[6] = ecs_stack_allocator_allocate(v33, 48 * v34, 8);
    v32[7] = v34;
    v35 = v268;
    v268[1] = 0;
    v35[2] = 0;
    *v35 = 0;
    swift_release();
    v36 = sub_1B1A12038((uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, v26, v27, v29, (uint64_t)v32);
    v37 = sub_1B1A12038((uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1E638C1A0, v26, v27, v29, (uint64_t)v32);
    v38 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v26, v27, v29, (uint64_t)v32);
    if (v26)
    {
      v39 = v314;
      v40 = v313;
      v41 = v312;
      if (!v29)
        goto LABEL_170;
      v42 = v29;
      v43 = v38 + 32;
      v44 = (uint64_t *)(v37 + 16);
      v45 = v295;
      while (1)
      {
        if ((*(_DWORD *)(v36 + 32) & v45) != 0 && *(_BYTE *)(v36 + 8) == 1)
        {
          v312 = v41;
          v377.columns[1] = *(simd_float4 *)(v43 - 16);
          v311 = *(__n128 *)(v43 - 32);
          v377.columns[0] = (simd_float4)v311;
          v310 = (__n128)v377.columns[1];
          v377.columns[3] = *(simd_float4 *)(v43 + 16);
          v315 = *(simd_float4 *)v43;
          v377.columns[2] = v315;
          v309 = (float32x4_t)v377.columns[3];
          v313 = v40;
          v314 = v39;
          v50 = __invert_f4(v377);
          v49 = (float32x4_t)v50.columns[0];
          v304 = (float32x4_t)xmmword_1B2244D90;
          v305 = (float32x4_t)xmmword_1B2244DD0;
          v306 = (float32x4_t)xmmword_1B2244DB0;
          v50.columns[0] = (simd_float4)vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)0, (float32x4_t)xmmword_1B2244D90, v309, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v309.f32, 1), (float32x4_t)xmmword_1B2244DB0, v309.f32[0]);
          v50.columns[0].i32[3] = v314.i32[3];
          v314 = (float32x4_t)v50.columns[0];
          v51 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)v315, *(float32x4_t *)(v36 + 96), 2), (float32x4_t)v310, *(float32x2_t *)(v36 + 96), 1), (float32x4_t)v311, COERCE_FLOAT(*(_OWORD *)(v36 + 96)));
          v51.i32[3] = v313.i32[3];
          v313 = v51;
          v342 = 0u;
          v341 = 0u;
          v340 = 0u;
          v339 = 0u;
          v343 = 0;
          v344 = 1;
          v52 = v307;
          *v307 = 0;
          v52[1] = 0;
          if (*(_QWORD *)v36 == 9)
          {
            v289 = (float32x4_t)v50.columns[2];
            v290 = (float32x4_t)v50.columns[1];
            v309 = v49;
            v311 = (__n128)v50.columns[3];
            sub_1B20F03D8(*(_QWORD *)(v36 + 132), v348);
            sub_1B1A18378((uint64_t)v348, (uint64_t)v350, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
            if (!v356)
              goto LABEL_28;
            if (v355 != 7)
            {
              sub_1B1A08614(v348[0].i64);
LABEL_28:
              if (qword_1ED4BF430 != -1)
                swift_once();
              v315.i64[0] = qword_1ED4D0FB0;
              swift_retain();
              v59 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v311.n128_u64[0] = (unint64_t)v44;
              v310.n128_u64[0] = v42;
              v60 = qword_1ED4D0FD0;
              v61 = qword_1ED4BF688;
              swift_retain();
              if (v61 != -1)
                swift_once();
              sub_1B1B42948();
              v62 = swift_allocObject();
              *(_OWORD *)(v62 + 16) = xmmword_1B226D240;
              *(_QWORD *)(v62 + 56) = MEMORY[0x1E0DEA968];
              *(_QWORD *)(v62 + 64) = sub_1B1B1F47C();
              v63 = v275 | 0x8000000000000000;
              v309.i64[0] = v275 | 0x8000000000000000;
              *(_QWORD *)(v62 + 32) = 0xD00000000000001ELL;
              *(_QWORD *)(v62 + 40) = v63;
              sub_1B222835C();
              swift_bridgeObjectRelease();
              swift_retain();
              v64 = v59;
              v65 = v280;
              sub_1B2228200();
              v66 = v284[12];
              v306.i64[0] = v60;
              v67 = v284[16];
              v68 = (uint64_t)v283;
              v69 = &v283[v284[20]];
              (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v283, v65, v282);
              *(_BYTE *)(v68 + v66) = v64;
              *(_QWORD *)(v68 + v67) = 0;
              *(_QWORD *)v69 = 0xD00000000000001ELL;
              *((_QWORD *)v69 + 1) = v309.i64[0];
              sub_1B2228428();
              swift_release();
              sub_1B1B429AC(v68);
              swift_release();
              swift_release();
              v41 = v312;
              v45 = v295;
              v39 = v314;
              v40 = v313;
              v42 = v310.n128_u64[0];
              v44 = (uint64_t *)v311.n128_u64[0];
              goto LABEL_17;
            }
            v53 = (void *)v350[0];
            v54 = v350[1];
            v55 = v351;
            v56 = v354;
            v57 = 0;
            switch(v354)
            {
              case 10:
                v57 = 4;
                if (v350[0])
                  goto LABEL_58;
                goto LABEL_60;
              case 11:
                v57 = 5;
                if (!v350[0])
                  goto LABEL_60;
                goto LABEL_58;
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
                goto LABEL_39;
              case 25:
                goto LABEL_57;
              case 55:
                v57 = 1;
                if (!v350[0])
                  goto LABEL_60;
                goto LABEL_58;
              case 70:
                v57 = 6;
                if (!v350[0])
                  goto LABEL_60;
                goto LABEL_58;
              case 71:
                v57 = 7;
                if (!v350[0])
                  goto LABEL_60;
                goto LABEL_58;
              case 80:
                v57 = 8;
                if (!v350[0])
                  goto LABEL_60;
                goto LABEL_58;
              case 81:
                v57 = 9;
LABEL_57:
                if (v350[0])
                  goto LABEL_58;
                goto LABEL_60;
              default:
                if (v354 == 115)
                {
                  v57 = 2;
                  if (!v350[0])
                    goto LABEL_60;
                }
                else
                {
                  if (v354 != 125)
                  {
LABEL_39:
                    if (qword_1ED4BF430 != -1)
                      swift_once();
                    v331.i64[0] = 0;
                    v331.i64[1] = 0xE000000000000000;
                    v263.i64[0] = qword_1ED4D0FB0;
                    swift_retain();
                    sub_1B2229430();
                    swift_bridgeObjectRelease();
                    v331.i64[0] = 0xD00000000000001ALL;
                    v331.i64[1] = v234 | 0x8000000000000000;
                    sub_1B1F9A724(v56);
                    sub_1B2228890();
                    swift_bridgeObjectRelease();
                    v70 = v331;
                    v288.i32[0] = sub_1B2228E90();
                    if (qword_1ED4BF658 != -1)
                      swift_once();
                    v310.n128_u64[0] = v42;
                    v71 = qword_1ED4D0FD0;
                    v72 = qword_1ED4BF688;
                    swift_retain();
                    if (v72 != -1)
                      swift_once();
                    sub_1B1B42948();
                    v73 = swift_allocObject();
                    *(_OWORD *)(v73 + 16) = xmmword_1B226D240;
                    *(_QWORD *)(v73 + 56) = MEMORY[0x1E0DEA968];
                    *(_QWORD *)(v73 + 64) = sub_1B1B1F47C();
                    *(float32x4_t *)(v73 + 32) = v70;
                    swift_bridgeObjectRetain();
                    sub_1B222835C();
                    swift_bridgeObjectRelease();
                    swift_retain();
                    v74 = v280;
                    sub_1B2228200();
                    v75 = v284[12];
                    v235 = v284[16];
                    v236 = v75;
                    v76 = v284[20];
                    v262.i64[0] = v71;
                    v77 = (uint64_t)v283;
                    v78 = (float32x4_t *)&v283[v76];
                    (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v283, v74, v282);
                    *(_BYTE *)(v77 + v236) = v288.i8[0];
                    *(_QWORD *)(v77 + v235) = 0;
                    *v78 = v70;
                    swift_bridgeObjectRetain();
                    sub_1B2228428();
                    swift_release();
                    sub_1B1B429AC(v77);
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_release();
                    v42 = v310.n128_u64[0];
                    goto LABEL_60;
                  }
                  v57 = 3;
                  if (!v350[0])
                    goto LABEL_60;
                }
LABEL_58:
                v288.i32[0] = v352;
                v310.n128_u32[0] = v353;
                if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
                {
                  swift_unknownObjectRelease();
LABEL_60:
                  sub_1B1A08614(v348[0].i64);
                  v339 = 0u;
                  v340 = 0u;
                  v341 = 0u;
                  v342 = 0u;
                  v343 = 0;
                  v344 = 1;
                  v58 = 1;
                  v79 = v307;
                  *v307 = 0;
                  v79[1] = 0;
                  goto LABEL_62;
                }
                v80 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                v81 = v53;
                swift_unknownObjectRelease();
                v82.i64[0] = __PAIR64__(v288.u32[0], v55);
                v82.i64[1] = __PAIR64__(v264.u32[3], v310.n128_u32[0]);
                v310 = (__n128)v82;
                vfx_sampler3d_make((uint64_t)v80 + v54, v57, 2, 1, (uint64_t)&v331, v82);
                v288 = v331;
                v263 = v333;
                v264 = v332;
                v262 = v334;
                v83 = v335;
                v58 = v336;
                v84 = v338;
                v85 = v337;
                sub_1B1A08614(v348[0].i64);
                v339 = v288;
                v340 = v264;
                v341 = v263;
                v342 = v262;
                v343 = v83;
                v344 = v58;
                v264 = (float32x4_t)v310;
                v345 = v85;
                v346 = v84;
LABEL_62:
                v45 = v295;
                v50.columns[3] = (simd_float4)v311;
                v49 = v309;
                v50.columns[2] = (simd_float4)v289;
                v50.columns[1] = (simd_float4)v290;
                break;
            }
          }
          else
          {
            v58 = 1;
          }
          v86 = *(float *)(v36 + 16);
          v87 = *(_OWORD *)(v36 + 80);
          v88 = *(_OWORD *)(v36 + 112);
          v372[6] = *(_OWORD *)(v36 + 96);
          v373[0] = v88;
          *(_OWORD *)((char *)v373 + 12) = *(_OWORD *)(v36 + 124);
          v89 = *(_OWORD *)(v36 + 16);
          v91 = *(_OWORD *)(v36 + 48);
          v90 = *(_OWORD *)(v36 + 64);
          v372[2] = *(_OWORD *)(v36 + 32);
          v372[3] = v91;
          v372[5] = v87;
          v372[4] = v90;
          v92 = *(_OWORD *)v36;
          v372[1] = v89;
          v372[0] = v92;
          v93 = v92;
          v94 = *((float *)&v92 + 3);
          v95 = *((float *)&v92 + 3);
          v96 = *(_QWORD *)&v373[0];
          if (*((float *)&v89 + 1) > 0.0)
          {
            v98 = *(v44 - 2);
            v97 = *(v44 - 1);
            v99 = 9 * ((((unint64_t)(5 * v97) >> 32) >> 25) | (640 * v97));
            v100 = *v44 ^ v98;
            v101 = v44[1] ^ v97;
            *(v44 - 2) = v101 ^ v98;
            *(v44 - 1) = v100 ^ v97;
            *v44 = v100 ^ (v97 << 17);
            v44[1] = __ROR8__(v101, 19);
            v95 = *((float *)&v92 + 3)
                + (float)(*((float *)&v89 + 1)
                        * (float)((float)((float)((float)(*(_QWORD *)&v99 & 0xFFFFFFLL) * 0.000000059605)
                                        + (float)((float)(*(_QWORD *)&v99 & 0xFFFFFFLL) * 0.000000059605))
                                + -1.0));
          }
          v311 = (__n128)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v50.columns[3], (float32x4_t)v50.columns[2], v296), (float32x4_t)v50.columns[1], v297), v49, v298);
          v102 = v311;
          v102.n128_u32[3] = v312.n128_u32[3];
          v312 = v102;
          sub_1B1B4598C((uint64_t)v372, v102);
          v105 = 0uLL;
          if (fabs(v95 * v103))
          {
            v106 = (int32x4_t)vmulq_f32((float32x4_t)v315, (float32x4_t)v315);
            v106.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v106, 2), vadd_f32(*(float32x2_t *)v106.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.i8, 1))).u32[0];
            v107 = vrsqrte_f32((float32x2_t)v106.u32[0]);
            v108 = vmul_f32(v107, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v107, v107)));
            v109 = vmulq_n_f32((float32x4_t)v315, vmul_f32(v108, vrsqrts_f32((float32x2_t)v106.u32[0], vmul_f32(v108, v108))).f32[0]);
            v110 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v304, v109, 2), v305, *(float32x2_t *)v109.f32, 1), v306, v109.f32[0]);
            v111 = v86 * a7;
            v104.f32[0] = (float)(v95 * v103) * a7;
            v112 = v104.f32[0] * *(float *)&v291;
            v39 = v314;
            v40 = v313;
            v47 = vaddq_f32(v314, v313);
            v47.i32[3] = v302.i32[3];
            switch(v93)
            {
              case 0:
                v105 = vmulq_n_f32(v110, v112);
                v105.i32[3] = v255.i32[3];
                v46 = v301;
                v255 = v105;
                goto LABEL_15;
              case 1:
                v118 = vsubq_f32(v276, v47);
                v119 = vmulq_f32(v118, v118);
                v105 = vmulq_n_f32(v118, v112 / fmaxf(sqrtf(v119.f32[2] + vaddv_f32(*(float32x2_t *)v119.f32)), 0.00001));
                v105.i32[3] = v254.i32[3];
                v46 = v301;
                v254 = v105;
                goto LABEL_15;
              case 2:
                v116 = vsubq_f32(v276, v47);
                v117 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v116, (int32x4_t)v116), (int8x16_t)v116, 0xCuLL), vnegq_f32(v110)), v116, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL));
                v105 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v117, v117), (int8x16_t)v117, 0xCuLL), v104.f32[0]);
                v105.i32[3] = v256.i32[3];
                v46 = v301;
                v256 = v105;
                goto LABEL_15;
              case 3:
              case 4:
                v315 = (simd_float4)v47;
                if (*(float *)&v96 < 0.0)
                  v113 = 14.0;
                else
                  v113 = (float)(1.25 / (float)(*(float *)&v96 + 0.083333)) + -1.0;
                v331 = 0uLL;
                v311 = (__n128)v104;
                v114 = srdnoise3(&v331, v276.f32[0] * v113, v267 * v113, v266 * v113, *((float *)&v96 + 1) * a6);
                v115 = vmulq_n_f32(vmulq_n_f32(v331, v114), v311.n128_f32[0]);
                v46 = v115;
                v46.i32[3] = v301.i32[3];
                v105 = v46;
                if (v93 == 4)
                {
                  *(float32x2_t *)v105.f32 = vmul_n_f32(*(float32x2_t *)v115.f32, v252.f32[0]);
                  v105.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v252.f32[0], v115, 2));
                }
                v39 = v314;
                v40 = v313;
                v41 = v312;
                v47 = (float32x4_t)v315;
                goto LABEL_16;
              case 5:
                v120 = vsubq_f32(v276, v47);
                v121 = sqrtf(vmuls_lane_f32(v120.f32[2], v120, 2)+ vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v120, v120)));
                *(float32x2_t *)v120.f32 = vsub_f32(0, *(float32x2_t *)v120.f32);
                v120.f32[2] = 0.0 - v120.f32[2];
                v105 = vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(v120, v121), *(float *)&v291), v104.f32[0]);
                v105.i32[3] = v261.i32[3];
                v261 = v105;
                v46 = v301;
                goto LABEL_15;
              case 6:
                v124 = vsubq_f32(v276, v47);
                v125 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL), v248), v110, v249);
                v126 = vmulq_f32(v124, v124);
                v105 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v125, v125), (int8x16_t)v125, 0xCuLL), (float)(1.0 / sqrtf(v126.f32[2] + vaddv_f32(*(float32x2_t *)v126.f32))) * v104.f32[0]);
                v105.i32[3] = v258.i32[3];
                v46 = v301;
                v258 = v105;
                goto LABEL_15;
              case 7:
                v122 = vmulq_n_f32(vsubq_f32(v276, v47), -v104.f32[0]);
                v123 = vmulq_n_f32(v265, (float)(v111 * -2.0) * sqrtf(fabsf(v94)));
                v105 = vaddq_f32(v123, v122);
                v123.i32[3] = v257.i32[3];
                v122.i32[3] = v260.i32[3];
                v105.i32[3] = v259.i32[3];
                v46 = v301;
                v259 = v105;
                v260 = v122;
                v257 = v123;
                goto LABEL_15;
              case 8:
                v127 = 2.0;
                if (v111 <= 2.0)
                  v128 = v86 * a7;
                else
                  v128 = 2.0;
                if (v94 <= 2.0)
                  v127 = v94;
                v129 = (float)(v128 + (float)(v253 * (float)(v127 * a7))) * (float)-(float)(v103 * v253);
                *(float32x2_t *)v105.f32 = vmul_n_f32(v251, v129);
                v105.f32[2] = v250 * v129;
                v105.i32[3] = 0;
                v46 = v301;
                goto LABEL_15;
              case 9:
                if (v58 == 1)
                {
                  v46 = v301;
                }
                else
                {
                  v130.i64[0] = 0x3F0000003F000000;
                  v130.i64[1] = 0x3F0000003F000000;
                  v131 = (__n128)vaddq_f32(vmulq_f32((float32x4_t)v311, v130), v130);
                  v131.n128_u32[3] = v245.u32[3];
                  v310 = v131;
                  v315 = (simd_float4)v47;
                  v311 = (__n128)v104;
                  *(double *)v132.i64 = ((double (*)(float32x4_t *, __n128))v344)(&v339, v131);
                  v47 = (float32x4_t)v315;
                  v40 = v313;
                  v39 = v314;
                  v105 = vmulq_n_f32(v132, v311.n128_f32[0]);
                  v105.i32[3] = v246.i32[3];
                  v46 = v301;
                  v245 = (float32x4_t)v310;
                  v246 = v105;
                }
                goto LABEL_15;
              default:
                goto LABEL_175;
            }
          }
          v46 = v301;
          v47 = v302;
          v39 = v314;
          v40 = v313;
LABEL_15:
          v41 = v312;
LABEL_16:
          v48 = vaddq_f32(v308, v105);
          v48.i32[3] = v303.i32[3];
          v302 = v47;
          v303 = v48;
          v308 = v48;
          v301 = v46;
        }
LABEL_17:
        v36 += 144;
        v43 += 64;
        v44 += 4;
        if (!--v42)
        {
          v312 = v41;
          v313 = v40;
          v314 = v39;
          goto LABEL_170;
        }
      }
    }
    if ((_DWORD)v25 == v315.i32[0])
      goto LABEL_170;
    v133 = v315.i64[0] - v25;
    v134 = v36 + 144 * v25;
    v135 = v38 + (v25 << 6) + 32;
    v136 = (uint64_t *)(v37 + 32 * v25 + 16);
    v137 = v295;
    v139 = v299;
    v138 = v300;
    v140 = v292;
    do
    {
      if ((*(_DWORD *)(v134 + 32) & v137) == 0 || *(_BYTE *)(v134 + 8) != 1)
        goto LABEL_96;
      v311 = (__n128)v140;
      v378.columns[1] = *(simd_float4 *)(v135 - 16);
      v309 = *(float32x4_t *)(v135 - 32);
      v378.columns[0] = (simd_float4)v309;
      v305 = v138;
      v306 = (float32x4_t)v378.columns[1];
      v378.columns[3] = *(simd_float4 *)(v135 + 16);
      v315 = *(simd_float4 *)v135;
      v378.columns[2] = v315;
      v304 = (float32x4_t)v378.columns[3];
      v310 = (__n128)v139;
      v379 = __invert_f4(v378);
      v144 = (float32x4_t)v379.columns[0];
      v288 = (float32x4_t)xmmword_1B2244D90;
      v289 = (float32x4_t)xmmword_1B2244DD0;
      v290 = (float32x4_t)xmmword_1B2244DB0;
      v145 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)0, (float32x4_t)xmmword_1B2244D90, v304, 2), (float32x4_t)xmmword_1B2244DD0, *(float32x2_t *)v304.f32, 1), (float32x4_t)xmmword_1B2244DB0, v304.f32[0]);
      v145.i32[3] = v305.i32[3];
      v146 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32((float32x4_t)v315, *(float32x4_t *)(v134 + 96), 2), v306, *(float32x2_t *)(v134 + 96), 1), v309, COERCE_FLOAT(*(_OWORD *)(v134 + 96)));
      v146.i32[3] = v310.n128_i32[3];
      v342 = 0u;
      v341 = 0u;
      v340 = 0u;
      v339 = 0u;
      v343 = 0;
      v344 = 1;
      v147 = v307;
      *v307 = 0;
      v147[1] = 0;
      v148 = *(_QWORD *)v134 == 9;
      v299 = v146;
      v300 = v145;
      if (!v148)
      {
        v154 = 1;
LABEL_142:
        v181 = *(float *)(v134 + 16);
        v182 = *(_OWORD *)(v134 + 80);
        v183 = *(_OWORD *)(v134 + 112);
        v374[6] = *(_OWORD *)(v134 + 96);
        v375[0] = v183;
        *(_OWORD *)((char *)v375 + 12) = *(_OWORD *)(v134 + 124);
        v184 = *(_OWORD *)(v134 + 16);
        v186 = *(_OWORD *)(v134 + 48);
        v185 = *(_OWORD *)(v134 + 64);
        v374[2] = *(_OWORD *)(v134 + 32);
        v374[3] = v186;
        v374[5] = v182;
        v374[4] = v185;
        v187 = *(_OWORD *)v134;
        v374[1] = v184;
        v374[0] = v187;
        v188 = v187;
        v189 = *((float *)&v187 + 3);
        v190 = *((float *)&v187 + 3);
        v191 = *(_QWORD *)&v375[0];
        if (*((float *)&v184 + 1) > 0.0)
        {
          v193 = *(v136 - 2);
          v192 = *(v136 - 1);
          v194 = 9 * ((((unint64_t)(5 * v192) >> 32) >> 25) | (640 * v192));
          v195 = *v136 ^ v193;
          v196 = v136[1] ^ v192;
          *(v136 - 2) = v196 ^ v193;
          *(v136 - 1) = v195 ^ v192;
          *v136 = v195 ^ (v192 << 17);
          v136[1] = __ROR8__(v196, 19);
          v190 = *((float *)&v187 + 3)
               + (float)(*((float *)&v184 + 1)
                       * (float)((float)((float)((float)(*(_QWORD *)&v194 & 0xFFFFFFLL) * 0.000000059605)
                                       + (float)((float)(*(_QWORD *)&v194 & 0xFFFFFFLL) * 0.000000059605))
                               + -1.0));
        }
        v310 = (__n128)vmlaq_f32(vmlaq_f32(vmlaq_f32((float32x4_t)v379.columns[3], (float32x4_t)v379.columns[2], v296), (float32x4_t)v379.columns[1], v297), v144, v298);
        v197 = v310;
        v197.n128_u32[3] = v311.n128_u32[3];
        v292 = (float32x4_t)v197;
        sub_1B1B4598C((uint64_t)v374, v197);
        v200 = 0uLL;
        if (fabs(v190 * v198))
        {
          v139 = v299;
          v201 = (int32x4_t)vmulq_f32((float32x4_t)v315, (float32x4_t)v315);
          v201.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v201, 2), vadd_f32(*(float32x2_t *)v201.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v201.i8, 1))).u32[0];
          v202 = vrsqrte_f32((float32x2_t)v201.u32[0]);
          v203 = vmul_f32(v202, vrsqrts_f32((float32x2_t)v201.u32[0], vmul_f32(v202, v202)));
          v204 = vmulq_n_f32((float32x4_t)v315, vmul_f32(v203, vrsqrts_f32((float32x2_t)v201.u32[0], vmul_f32(v203, v203))).f32[0]);
          v205 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v288, v204, 2), v289, *(float32x2_t *)v204.f32, 1), v290, v204.f32[0]);
          v206 = v181 * a7;
          v199.f32[0] = (float)(v190 * v198) * a7;
          v207 = v199.f32[0] * *(float *)&v291;
          v138 = v300;
          v142 = vaddq_f32(v300, v299);
          v142.i32[3] = v285.i32[3];
          switch(v188)
          {
            case 0:
              v200 = vmulq_n_f32(v205, v207);
              v200.i32[3] = v241.i32[3];
              v241 = v200;
              v141 = v286;
              goto LABEL_94;
            case 1:
              v211 = vsubq_f32(v276, v142);
              v212 = vmulq_f32(v211, v211);
              v200 = vmulq_n_f32(v211, v207 / fmaxf(sqrtf(v212.f32[2] + vaddv_f32(*(float32x2_t *)v212.f32)), 0.00001));
              v200.i32[3] = v240.i32[3];
              v240 = v200;
              v141 = v286;
              goto LABEL_94;
            case 2:
              v213 = vsubq_f32(v276, v142);
              v214 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v213, (int32x4_t)v213), (int8x16_t)v213, 0xCuLL), vnegq_f32(v205)), v213, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v205, (int32x4_t)v205), (int8x16_t)v205, 0xCuLL));
              v200 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v214, v214), (int8x16_t)v214, 0xCuLL), v199.f32[0]);
              v200.i32[3] = v242.i32[3];
              v242 = v200;
              v141 = v286;
              goto LABEL_94;
            case 3:
            case 4:
              v315 = (simd_float4)v142;
              if (*(float *)&v191 < 0.0)
                v208 = 14.0;
              else
                v208 = (float)(1.25 / (float)(*(float *)&v191 + 0.083333)) + -1.0;
              v331 = 0uLL;
              v311 = (__n128)v199;
              v209 = srdnoise3(&v331, v276.f32[0] * v208, v267 * v208, v266 * v208, *((float *)&v191 + 1) * a6);
              v210 = vmulq_n_f32(vmulq_n_f32(v331, v209), v311.n128_f32[0]);
              v141 = v210;
              v141.i32[3] = v286.i32[3];
              v200 = v141;
              if (v188 == 4)
              {
                *(float32x2_t *)v200.f32 = vmul_n_f32(*(float32x2_t *)v210.f32, v252.f32[0]);
                v200.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v252.f32[0], v210, 2));
              }
              v139 = v299;
              v138 = v300;
              v140 = v292;
              v142 = (float32x4_t)v315;
              goto LABEL_95;
            case 5:
              v217 = vsubq_f32(v276, v142);
              v218 = sqrtf(vmuls_lane_f32(v217.f32[2], v217, 2) + vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v217, v217)));
              *(float32x2_t *)v217.f32 = vsub_f32(0, *(float32x2_t *)v217.f32);
              v217.f32[2] = 0.0 - v217.f32[2];
              v200 = vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(v217, v218), *(float *)&v291), v199.f32[0]);
              v200.i32[3] = v237.i32[3];
              v141 = v286;
              v237 = v200;
              goto LABEL_94;
            case 6:
              v219 = vsubq_f32(v276, v142);
              v220 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v205, (int32x4_t)v205), (int8x16_t)v205, 0xCuLL), v248), v205, v249);
              v221 = vmulq_f32(v219, v219);
              v200 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v220, v220), (int8x16_t)v220, 0xCuLL), (float)(1.0 / sqrtf(v221.f32[2] + vaddv_f32(*(float32x2_t *)v221.f32))) * v199.f32[0]);
              v200.i32[3] = v243.i32[3];
              v243 = v200;
              v141 = v286;
              goto LABEL_94;
            case 7:
              v215 = vmulq_n_f32(vsubq_f32(v276, v142), -v199.f32[0]);
              v216 = vmulq_n_f32(v265, (float)(v206 * -2.0) * sqrtf(fabsf(v189)));
              v200 = vaddq_f32(v216, v215);
              v216.i32[3] = v239.i32[3];
              v215.i32[3] = v238.i32[3];
              v200.i32[3] = v244.i32[3];
              v244 = v200;
              v238 = v215;
              v239 = v216;
              v141 = v286;
              goto LABEL_94;
            case 8:
              v222 = 2.0;
              if (v206 <= 2.0)
                v223 = v181 * a7;
              else
                v223 = 2.0;
              if (v189 <= 2.0)
                v222 = v189;
              v224 = (float)(v223 + (float)(v253 * (float)(v222 * a7))) * (float)-(float)(v198 * v253);
              *(float32x2_t *)v200.f32 = vmul_n_f32(v251, v224);
              v200.f32[2] = v250 * v224;
              v200.i32[3] = 0;
              v141 = v286;
              goto LABEL_94;
            case 9:
              if (v154 != 1)
              {
                v225.i64[0] = 0x3F0000003F000000;
                v225.i64[1] = 0x3F0000003F000000;
                v226 = (__n128)vaddq_f32(vmulq_f32((float32x4_t)v310, v225), v225);
                v226.n128_u32[3] = v232.u32[3];
                v310 = v226;
                v315 = (simd_float4)v142;
                v311 = (__n128)v199;
                *(double *)v227.i64 = ((double (*)(float32x4_t *, __n128))v344)(&v339, v226);
                v142 = (float32x4_t)v315;
                v139 = v299;
                v138 = v300;
                v200 = vmulq_n_f32(v227, v311.n128_f32[0]);
                v200.i32[3] = v233.i32[3];
                v232 = (float32x4_t)v310;
                v233 = v200;
              }
              v141 = v286;
              goto LABEL_94;
            default:
LABEL_175:
              result = (uint64_t *)sub_1B2229688();
              __break(1u);
              return result;
          }
        }
        v142 = v285;
        v141 = v286;
        v139 = v299;
        v138 = v300;
LABEL_94:
        v140 = v292;
LABEL_95:
        v143 = vaddq_f32(v308, v200);
        v143.i32[3] = v287.i32[3];
        v286 = v141;
        v287 = v143;
        v308 = v143;
        v285 = v142;
        goto LABEL_96;
      }
      v304 = (float32x4_t)v379.columns[2];
      v305 = (float32x4_t)v379.columns[1];
      v306 = (float32x4_t)v379.columns[0];
      v310 = (__n128)v379.columns[3];
      sub_1B20F03D8(*(_QWORD *)(v134 + 132), v349);
      sub_1B1A18378((uint64_t)v349, (uint64_t)v357, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
      if (v363)
      {
        if (v362 == 7)
        {
          v149 = (void *)v357[0];
          v150 = v357[1];
          v151 = v358;
          v152 = v361;
          v153 = 0;
          switch(v361)
          {
            case 10:
              v153 = 4;
              if (v357[0])
                goto LABEL_137;
              goto LABEL_139;
            case 11:
              v153 = 5;
              if (!v357[0])
                goto LABEL_139;
              goto LABEL_137;
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 18:
            case 19:
            case 20:
            case 21:
            case 22:
            case 23:
            case 24:
            case 26:
            case 27:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
            case 44:
            case 45:
            case 46:
            case 47:
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 56:
            case 57:
            case 58:
            case 59:
            case 60:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
              goto LABEL_118;
            case 25:
              goto LABEL_136;
            case 55:
              v153 = 1;
              if (!v357[0])
                goto LABEL_139;
              goto LABEL_137;
            case 70:
              v153 = 6;
              if (!v357[0])
                goto LABEL_139;
              goto LABEL_137;
            case 71:
              v153 = 7;
              if (!v357[0])
                goto LABEL_139;
              goto LABEL_137;
            case 80:
              v153 = 8;
              if (!v357[0])
                goto LABEL_139;
              goto LABEL_137;
            case 81:
              v153 = 9;
LABEL_136:
              if (v357[0])
                goto LABEL_137;
              goto LABEL_139;
            default:
              if (v361 == 115)
              {
                v153 = 2;
                if (!v357[0])
                  goto LABEL_139;
              }
              else
              {
                if (v361 != 125)
                {
LABEL_118:
                  if (qword_1ED4BF430 != -1)
                    swift_once();
                  v331.i64[0] = 0;
                  v331.i64[1] = 0xE000000000000000;
                  v263.i64[0] = qword_1ED4D0FB0;
                  swift_retain();
                  sub_1B2229430();
                  swift_bridgeObjectRelease();
                  v331.i64[0] = 0xD00000000000001ALL;
                  v331.i64[1] = v231;
                  sub_1B1F9A724(v152);
                  sub_1B2228890();
                  swift_bridgeObjectRelease();
                  v165 = v331;
                  v292.i32[0] = sub_1B2228E90();
                  if (qword_1ED4BF658 != -1)
                    swift_once();
                  v309.i64[0] = v133;
                  v166 = qword_1ED4D0FD0;
                  v167 = qword_1ED4BF688;
                  swift_retain();
                  if (v167 != -1)
                    swift_once();
                  sub_1B1B42948();
                  v168 = swift_allocObject();
                  *(_OWORD *)(v168 + 16) = xmmword_1B226D240;
                  *(_QWORD *)(v168 + 56) = MEMORY[0x1E0DEA968];
                  *(_QWORD *)(v168 + 64) = sub_1B1B1F47C();
                  *(float32x4_t *)(v168 + 32) = v165;
                  swift_bridgeObjectRetain();
                  sub_1B222835C();
                  swift_bridgeObjectRelease();
                  swift_retain();
                  v169 = v280;
                  sub_1B2228200();
                  v170 = v284[12];
                  v235 = v284[16];
                  v236 = v170;
                  v171 = v284[20];
                  v172 = (uint64_t)v283;
                  v262.i64[0] = v166;
                  v173 = (float32x4_t *)&v283[v171];
                  (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v283, v169, v282);
                  *(_BYTE *)(v172 + v236) = v292.i8[0];
                  *(_QWORD *)(v172 + v235) = 0;
                  *v173 = v165;
                  swift_bridgeObjectRetain();
                  sub_1B2228428();
                  swift_release();
                  sub_1B1B429AC(v172);
                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                  v133 = v309.i64[0];
                  goto LABEL_139;
                }
                v153 = 3;
                if (!v357[0])
                  goto LABEL_139;
              }
LABEL_137:
              v292.i32[0] = v359;
              v309.i32[0] = v360;
              if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
              {
                swift_unknownObjectRelease();
LABEL_139:
                sub_1B1A08614(v349[0].i64);
                v339 = 0u;
                v340 = 0u;
                v341 = 0u;
                v342 = 0u;
                v343 = 0;
                v344 = 1;
                v154 = 1;
                v174 = v307;
                *v307 = 0;
                v174[1] = 0;
                goto LABEL_141;
              }
              v175 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
              v176 = v149;
              swift_unknownObjectRelease();
              v177.i64[0] = __PAIR64__(v292.u32[0], v151);
              v177.i64[1] = __PAIR64__(v247.u32[3], v309.u32[0]);
              v309 = (float32x4_t)v177;
              vfx_sampler3d_make((uint64_t)v175 + v150, v153, 2, 1, (uint64_t)&v331, v177);
              v292 = v331;
              v262 = v333;
              v263 = v332;
              v247 = v334;
              v178 = v335;
              v154 = v336;
              v179 = v338;
              v180 = v337;
              sub_1B1A08614(v349[0].i64);
              v339 = v292;
              v340 = v263;
              v341 = v262;
              v342 = v247;
              v343 = v178;
              v344 = v154;
              v247 = v309;
              v345 = v180;
              v346 = v179;
LABEL_141:
              v137 = v295;
              v379.columns[3] = (simd_float4)v310;
              v379.columns[1] = (simd_float4)v305;
              v144 = v306;
              v379.columns[2] = (simd_float4)v304;
              break;
          }
          goto LABEL_142;
        }
        sub_1B1A08614(v349[0].i64);
      }
      if (qword_1ED4BF430 != -1)
        swift_once();
      v315.i64[0] = qword_1ED4D0FB0;
      swift_retain();
      v155 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v310.n128_u64[0] = (unint64_t)v136;
      v309.i64[0] = v133;
      v156 = qword_1ED4D0FD0;
      v157 = qword_1ED4BF688;
      swift_retain();
      if (v157 != -1)
        swift_once();
      sub_1B1B42948();
      v158 = swift_allocObject();
      *(_OWORD *)(v158 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v158 + 56) = MEMORY[0x1E0DEA968];
      *(_QWORD *)(v158 + 64) = sub_1B1B1F47C();
      *(_QWORD *)(v158 + 32) = 0xD00000000000001ELL;
      *(_QWORD *)(v158 + 40) = v274;
      sub_1B222835C();
      swift_bridgeObjectRelease();
      swift_retain();
      v159 = v280;
      sub_1B2228200();
      v160 = v284[12];
      v161 = v284[16];
      v162 = v284[20];
      v163 = (uint64_t)v283;
      v306.i64[0] = v156;
      v164 = &v283[v162];
      (*(void (**)(char *, char *, uint64_t))(v281 + 32))(v283, v159, v282);
      *(_BYTE *)(v163 + v160) = v155;
      *(_QWORD *)(v163 + v161) = 0;
      *(_QWORD *)v164 = 0xD00000000000001ELL;
      *((_QWORD *)v164 + 1) = v274;
      sub_1B2228428();
      swift_release();
      sub_1B1B429AC(v163);
      swift_release();
      swift_release();
      v140 = (float32x4_t)v311;
      v137 = v295;
      v139 = v299;
      v138 = v300;
      v133 = v309.i64[0];
      v136 = (uint64_t *)v310.n128_u64[0];
LABEL_96:
      v134 += 144;
      v135 += 64;
      v136 += 4;
      --v133;
    }
    while (v133);
    v292 = v140;
    v299 = v139;
    v300 = v138;
LABEL_170:
    v321[0] = v318;
    v321[1] = v319;
    v322 = v320;
    v22 = v277;
    sub_1B1F05D48(v279, (unsigned __int16 **)v321, (uint64_t)v371);
    v228 = v294;
    sub_1B1F03804(v294);
    v16 = v271;
    ecs_stack_allocator_pop_snapshot(v271);
    v17 = v270;
    if ((v270 & 1) != 0)
    {
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v228 + 43));
      os_unfair_lock_unlock(*((os_unfair_lock_t *)v228 + 47));
    }
    swift_release();
    v21 = v278 + 1;
    if (v278 + 1 != v273)
      continue;
    break;
  }
  sub_1B19ED720((uint64_t)v316);
  sub_1B19ED748(v347);
  return sub_1B19ED748(v347);
}

void sub_1B1B4C3C4(uint64_t a1, _QWORD *a2, float32x2_t *a3, float *a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float a11, float a12)
{
  float *v15;
  int v23;
  float v24;
  float v25;
  __int128 v26;
  uint64_t v27;
  int32x4_t v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x4_t v31;
  float v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_unfair_lock_s *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t i;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  BOOL v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  int v65;
  uint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  int v72;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int32x4_t v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  float32x4_t v99;
  uint64_t v100;
  float32x4_t v101;
  uint64_t v102;
  float32x4_t v103;
  int v104;
  float32x4_t v105;
  uint64_t v106;
  float32x4_t v107;
  unsigned __int16 *v108;
  float32x4_t v109;
  uint64_t v110;
  uint64_t v111;
  float32x4_t v112;
  _QWORD *v113;
  _OWORD v114[2];
  uint64_t v115;
  _OWORD v116[4];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int64x2_t v121[7];
  _BYTE v122[104];
  uint64_t v123[12];
  _QWORD v124[7];
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  _OWORD v129[3];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  _OWORD v135[7];
  uint64_t v136;
  uint64_t v137[10];
  char v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  simd_float4x4 v143;
  simd_float4x4 v144;

  v142 = *MEMORY[0x1E0C80C00];
  if (((_DWORD)a4[10] & *(_DWORD *)(a1 + 32)) == 0 || *(_BYTE *)(a1 + 8) != 1)
    return;
  v15 = a4;
  v107 = *(float32x4_t *)a3[2].f32;
  v109 = *(float32x4_t *)a3->f32;
  v143.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, COERCE_FLOAT(*(_OWORD *)a3->f32)), a8, *a3, 1), a9, *(float32x4_t *)a3->f32, 2), a10, *(float32x4_t *)a3->f32, 3);
  v143.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v107.f32[0]), a8, *(float32x2_t *)v107.f32, 1), a9, v107, 2), a10, v107, 3);
  v112 = *(float32x4_t *)a3[4].f32;
  v143.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v112.f32[0]), a8, a3[4], 1), a9, v112, 2), a10, v112, 3);
  v103 = a8;
  v105 = a7;
  v99 = *(float32x4_t *)a3[6].f32;
  v101 = a9;
  v91 = a10;
  v143.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, v99.f32[0]), a8, a3[6], 1), a9, v99, 2), a10, v99, 3);
  v144 = __invert_f4(v143);
  v89 = (float32x4_t)v144.columns[1];
  v90 = (float32x4_t)v144.columns[0];
  v87 = (float32x4_t)v144.columns[3];
  v88 = (float32x4_t)v144.columns[2];
  memset(v116, 0, sizeof(v116));
  v117 = 0;
  v118 = 1;
  v119 = 0;
  v120 = 0;
  if (*(_QWORD *)a1 != 9)
  {
    v86 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v112, *(float32x4_t *)(a1 + 96), 2), v107, *(float32x2_t *)(a1 + 96), 1), v109, COERCE_FLOAT(*(_OWORD *)(a1 + 96)));
    switch(*(_QWORD *)a1)
    {
      case 0:
        goto LABEL_22;
      case 1:
        ++v15;
        goto LABEL_22;
      case 2:
        v15 += 2;
        goto LABEL_22;
      case 3:
        v15 += 7;
        goto LABEL_22;
      case 4:
        v15 += 8;
        goto LABEL_22;
      case 5:
        v15 += 9;
        goto LABEL_22;
      case 6:
        v15 += 3;
        goto LABEL_22;
      case 7:
        v15 += 4;
        goto LABEL_22;
      case 8:
        v15 += 5;
        goto LABEL_22;
      default:
        sub_1B2229688();
        __break(1u);
        break;
    }
    return;
  }
  sub_1B20F03D8(*(_QWORD *)(a1 + 132), v121);
  sub_1B1A18378((uint64_t)v121, (uint64_t)v129, (unint64_t *)&unk_1ED4B9160, (uint64_t)&type metadata for TextureCPURuntime);
  if (!v134)
  {
LABEL_10:
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    v23 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v137[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v23, v137, 0xD00000000000001ELL, 0x80000001B232F890);
    swift_release();
    swift_release();
    return;
  }
  v135[4] = v131;
  v135[5] = v132;
  v135[6] = v133;
  v136 = v134;
  v135[0] = v129[0];
  v135[1] = v129[1];
  v135[3] = v130;
  v135[2] = v129[2];
  if (*((_QWORD *)&v130 + 1) != 7)
  {
    sub_1B1A08614(v121[0].i64);
    goto LABEL_10;
  }
  sub_1B1EDFF30((uint64_t)v135, 2, 1, (uint64_t)v122);
  sub_1B1A08614(v121[0].i64);
  sub_1B1B4D278((uint64_t)v122, (uint64_t)v116, &qword_1EEF5AEF8, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler3d);
  v86 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v112, *(float32x4_t *)(a1 + 96), 2), v107, *(float32x2_t *)(a1 + 96), 1), v109, COERCE_FLOAT(*(_OWORD *)(a1 + 96)));
  v15 += 6;
LABEL_22:
  v24 = *v15;
  if (*v15 != 0.0)
  {
    v25 = *(float *)(a1 + 16);
    v26 = *(_OWORD *)(a6 + 104);
    v114[0] = *(_OWORD *)(a6 + 88);
    v114[1] = v26;
    v115 = *(_QWORD *)(a6 + 120);
    sub_1B1E8FCE4(a5, (uint64_t)v114, 0x200000000, v123);
    sub_1B1A18378((uint64_t)v123, (uint64_t)v124, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    v108 = (unsigned __int16 *)v124[0];
    if (v124[0])
    {
      v84 = v128;
      v85 = (__int128 *)a1;
      if (v128 >= 1)
      {
        v83 = v125;
        if (v125)
        {
          v27 = 0;
          v28 = (int32x4_t)vmulq_f32(v112, v112);
          v28.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v28, 2), vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v28.i8, 1))).u32[0];
          v29 = vrsqrte_f32((float32x2_t)v28.u32[0]);
          v30 = vmul_f32(v29, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v29, v29)));
          v31 = vmulq_n_f32(v112, vmul_f32(v30, vrsqrts_f32((float32x2_t)v28.u32[0], vmul_f32(v30, v30))).f32[0]);
          v81 = (int32x4_t)vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v101, v31, 2), v103, *(float32x2_t *)v31.f32, 1), v105, v31.f32[0]);
          v92 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v91, v101, v99, 2), v103, *(float32x2_t *)v99.f32, 1), v105, v99.f32[0]);
          v32 = v25 * a11;
          v80 = v124[5];
          v104 = *(unsigned __int8 *)(v126 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v102 = v127[4];
          v78 = v127 + 8;
          v79 = v126;
          v106 = v124[0] + 41;
          v82 = a2;
          v113 = v127;
          do
          {
            v33 = (unsigned int *)(v80 + 48 * v27);
            v34 = *v33;
            v35 = v33[1];
            v36 = v33[2];
            v37 = *((_QWORD *)v33 + 2);
            v38 = *((_QWORD *)v33 + 3);
            v39 = *((_QWORD *)v33 + 5);
            v100 = v27;
            v110 = *((_QWORD *)v33 + 4);
            if (v104)
            {
              v40 = *(os_unfair_lock_s **)(v39 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v40);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v39 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v102);
            v41 = v113;
            v96 = v113[7];
            v97 = v113[6];
            v94 = v113[9];
            v95 = v113[8];
            v93 = v113[10];
            v42 = v113[4];
            v43 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v39 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v113[6] = ecs_stack_allocator_allocate(v42, 48 * v43, 8);
            v113[7] = v43;
            v78[1] = 0;
            v78[2] = 0;
            *v78 = 0;
            swift_release();
            v137[0] = v79;
            v137[1] = v39;
            v98 = v39;
            v137[2] = (uint64_t)v113;
            v137[3] = v36;
            v137[4] = (v35 - v34 + v36);
            v137[5] = v84;
            v137[6] = v34;
            v137[7] = v35;
            v137[8] = 0;
            v137[9] = 0;
            v138 = 1;
            v139 = v37;
            v140 = v38;
            v141 = v110;
            sub_1B1B4738C(v137, v85, v82, (uint64_t)v116, v24, v32, v81, v92, v86, v90, v89, v88, v44, v45, v46, v47, v87, a12, a11);
            v48 = v113[6];
            v111 = v113[8];
            if (!v111)
            {
              v75 = v113[7];
              v76 = (_QWORD *)v113[4];
              goto LABEL_68;
            }
            for (i = 0; i != v111; ++i)
            {
              v51 = v48;
              v52 = (uint64_t *)(v48 + 48 * i);
              v53 = *v52;
              v54 = (void (*)(uint64_t))v52[4];
              v55 = v41[9];
              if (v55)
                v56 = v53 == v55;
              else
                v56 = 0;
              if (v56 || !v108[11])
                goto LABEL_33;
              v57 = v108[9];
              v58 = (_QWORD *)(v106 + v108[8]);
              v59 = v52[2];
              v60 = v58;
              v61 = v57 >> 4;
              v62 = v106;
              if (v57 >= 0x10)
              {
                while (*v60 != v53)
                {
                  ++v62;
                  v60 += 2;
                  if (!--v61)
                    goto LABEL_48;
                }
                v63 = *(unsigned __int8 *)(v62 + v108[10]);
                v64 = v63 > 5;
                v65 = (1 << v63) & 0x23;
                if (v64 || v65 == 0)
                {
LABEL_33:
                  v50 = swift_retain();
                  v54(v50);
                  swift_release();
                  goto LABEL_34;
                }
              }
LABEL_48:
              if (swift_conformsToProtocol2())
                v67 = v59;
              else
                v67 = 0;
              if (v67)
              {
                if (v57 < 0x10)
                  goto LABEL_33;
                v68 = v58;
                v69 = v57 >> 4;
                v70 = v106;
                while (*v68 != v67)
                {
                  ++v70;
                  v68 += 2;
                  if (!--v69)
                    goto LABEL_61;
                }
                v71 = *(unsigned __int8 *)(v70 + v108[10]);
                v64 = v71 > 5;
                v72 = (1 << v71) & 0x23;
                if (v64 || v72 == 0)
                  goto LABEL_33;
LABEL_61:
                v74 = 16 * (v57 >> 4);
                while (*v58 != v67)
                {
                  v58 += 2;
                  v74 -= 16;
                  if (!v74)
                    goto LABEL_33;
                }
              }
LABEL_34:
              v41 = v113;
              v48 = v51;
            }
            v75 = v113[7];
            v48 = v113[6];
            v76 = (_QWORD *)v113[4];
            if ((uint64_t)v113[8] >= 1)
            {
              v77 = v113[6];
              swift_arrayDestroy();
              v48 = v77;
            }
LABEL_68:
            ecs_stack_allocator_deallocate(v76, v48, 48 * v75);
            v41[6] = v97;
            v41[7] = v96;
            v41[8] = v95;
            v41[9] = v94;
            v41[10] = v93;
            sub_1B1F03804((char *)v98);
            ecs_stack_allocator_pop_snapshot(v102);
            if ((v104 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v98 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v98 + 376));
            }
            swift_release();
            v27 = v100 + 1;
          }
          while (v100 + 1 != v83);
        }
      }
      sub_1B19ED748(v123);
    }
  }
}

uint64_t sub_1B1B4CC60(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  uint64_t result;
  float v18;
  float v19;
  double v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  float32x2_t *v39;
  uint64_t v40;
  float32x2_t *v41;
  uint64_t v42;
  _QWORD *v43;
  unsigned int *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  _QWORD *v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  _OWORD v59[2];
  uint64_t v60;
  uint64_t v61[8];
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  _OWORD v75[2];
  uint64_t v76;
  _BYTE v77[44];
  float v78[11];
  uint64_t v79;
  int v80;
  char v81;
  uint64_t v82;
  char v83;
  uint64_t v84;

  v2 = *(_QWORD *)a1;
  v3 = *(_DWORD *)(a1 + 12);
  v4 = *(int *)(a1 + 8);
  swift_retain();
  v5 = (_DWORD)v4 == -1 && v3 == 0;
  if (v5
    || (v4 & 0x80000000) != 0
    || *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= v4
    || (v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v3 != -1)
    && *(_DWORD *)(v6 + 12 * (int)v4 + 8) != v3)
  {
    swift_release();
LABEL_10:
    v7 = 255;
    v8 = 1.0;
    v9 = 1.0;
    v10 = 1.0;
    v11 = 1.0;
    v12 = 1.0;
    v13 = 1.0;
    v14 = 1.0;
    v15 = 1.0;
    v16 = 1.0;
    result = 1065353216;
    goto LABEL_11;
  }
  v44 = (unsigned int *)(v6 + 12 * (int)v4);
  sub_1B1D1C7A8(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v44 + 32), *v44 | ((unint64_t)*((unsigned __int16 *)v44 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v44 + 2) << 32), 44, v2, (uint64_t)&v62);
  swift_release();
  if ((v65 & 0x100000000) != 0)
    goto LABEL_10;
  v7 = v65;
  v16 = *(float *)&v64;
  result = HIDWORD(v64);
  v14 = *((float *)&v63 + 2);
  v15 = *((float *)&v63 + 3);
  v12 = *(float *)&v63;
  v13 = *((float *)&v63 + 1);
  v10 = *((float *)&v62 + 2);
  v11 = *((float *)&v62 + 3);
  v8 = *(float *)&v62;
  v9 = *((float *)&v62 + 1);
LABEL_11:
  v78[0] = v8;
  v78[1] = v9;
  v78[2] = v10;
  v78[3] = v11;
  v78[4] = v12;
  v78[5] = v13;
  v78[6] = v14;
  v78[7] = v15;
  v78[8] = v16;
  LODWORD(v78[9]) = result;
  LODWORD(v78[10]) = v7;
  if (v7)
  {
    swift_retain();
    sub_1B1E5267C();
    v19 = v18;
    v20 = *(double *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
    *(double *)v21.i64 = sub_1B1E52854();
    v57 = v22;
    v58 = v21;
    v55 = v24;
    v56 = v23;
    if (qword_1ED4B7DB8 != -1)
      swift_once();
    v79 = qword_1ED4D09F8;
    v80 = 0;
    v81 = 2;
    v82 = 0;
    v83 = 2;
    v84 = 0;
    swift_retain();
    sub_1B1B464C8((uint64_t)v59);
    swift_release();
    v75[0] = v59[0];
    v75[1] = v59[1];
    v76 = v60;
    sub_1B1E8FCE4(v2, (uint64_t)v75, 0x200000000, v61);
    sub_1B1A18378((uint64_t)v61, (uint64_t)&v62, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if ((_QWORD)v62)
    {
      v70 = v62;
      v71 = v63;
      v72 = v64;
      if (v69 > 0 && (v49 = v66) != 0)
      {
        v25 = v20;
        v47 = v65;
        v26 = v68[4];
        v53 = *(_BYTE *)(v67 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v54 = v68;
        v45 = v68 + 8;
        v46 = (uint64_t)(v68 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v27 = 0;
        v48 = v26;
        do
        {
          v28 = (unsigned int *)(v47 + 48 * v27);
          v30 = (uint64_t *)*((_QWORD *)v28 + 2);
          v29 = *((_QWORD *)v28 + 3);
          v32 = *((_QWORD *)v28 + 4);
          v31 = *((_QWORD *)v28 + 5);
          v51 = *v28;
          v52 = v27;
          v50 = v28[1];
          if ((v53 & 1) != 0)
          {
            v33 = *(os_unfair_lock_s **)(v31 + 376);
            swift_retain();
            os_unfair_lock_lock(v33);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v31 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v26);
          sub_1B1A18378(v46, (uint64_t)v77, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v34 = v54[4];
          v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v31 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v54[6] = ecs_stack_allocator_allocate(v34, 48 * v35, 8);
          v54[7] = v35;
          v45[1] = 0;
          v45[2] = 0;
          *v45 = 0;
          swift_release();
          v36 = sub_1B1A12038((uint64_t)&type metadata for ForceField, (uint64_t)&off_1E636DA50, v30, v29, v32, (uint64_t)v54);
          v37 = (_QWORD *)sub_1B1A12038((uint64_t)&type metadata for ForceFieldRuntime, (uint64_t)&off_1E638C1A0, v30, v29, v32, (uint64_t)v54);
          v38 = sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v30, v29, v32, (uint64_t)v54);
          v39 = (float32x2_t *)v38;
          if (v30)
          {
            for (; v32; --v32)
            {
              sub_1B1B4C3C4(v36, v37, v39, v78, v2, a1, v58, v57, v56, v55, v19, v25);
              v39 += 8;
              v37 += 4;
              v36 += 144;
            }
          }
          else if ((_DWORD)v51 != (_DWORD)v50)
          {
            v40 = v50 - v51;
            v41 = (float32x2_t *)(v38 + (v51 << 6));
            v42 = v36 + 144 * v51;
            v43 = &v37[4 * v51];
            do
            {
              sub_1B1B4C3C4(v42, v43, v41, v78, v2, a1, v58, v57, v56, v55, v19, v25);
              v41 += 8;
              v43 += 4;
              v42 += 144;
              --v40;
            }
            while (v40);
          }
          v73[0] = v70;
          v73[1] = v71;
          v74 = v72;
          sub_1B1F05D48(v54, (unsigned __int16 **)v73, (uint64_t)v77);
          sub_1B1F03804((char *)v31);
          v26 = v48;
          ecs_stack_allocator_pop_snapshot(v48);
          if ((v53 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 376));
          }
          swift_release();
          v27 = v52 + 1;
        }
        while (v52 + 1 != v49);
      }
      else
      {
        swift_retain();
        swift_retain();
        swift_retain();
      }
      swift_release();
      sub_1B19ED720((uint64_t)v59);
      sub_1B19ED748(v61);
      return (uint64_t)sub_1B19ED748(v61);
    }
    else
    {
      sub_1B19ED720((uint64_t)v59);
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1B4D278(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;

  sub_1B1791524(0, a3, a4, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B1B4D2D0(int a1, int a2, int a3)
{
  return a1 | (a2 << 8) | (a3 << 16) | 0xFF000000;
}

uint64_t getEnumTagSinglePayload for ParticleForceField.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleForceField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_1B1B4D3BC + 4 * byte_1B227B0F8[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_1B1B4D3F0 + 4 * byte_1B227B0F3[v4]))();
}

uint64_t sub_1B1B4D3F0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4D3F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B4D400);
  return result;
}

uint64_t sub_1B1B4D40C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B4D414);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_1B1B4D418(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4D420(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleForceField.CodingKeys()
{
  return &type metadata for ParticleForceField.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ForceField_LEGACY(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceField_LEGACY(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ForceField_LEGACY()
{
  return &type metadata for ForceField_LEGACY;
}

uint64_t getEnumTagSinglePayload for ArgumentScope(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceField.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1B1B4D5D4 + 4 * byte_1B227B102[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1B1B4D608 + 4 * byte_1B227B0FD[v4]))();
}

uint64_t sub_1B1B4D608(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4D610(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B4D618);
  return result;
}

uint64_t sub_1B1B4D624(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B4D62CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1B1B4D630(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4D638(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForceField.CodingKeys()
{
  return &type metadata for ForceField.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleForceField()
{
  return &type metadata for ParticleForceField;
}

unint64_t sub_1B1B4D668()
{
  unint64_t result;

  result = qword_1EEF5AF00;
  if (!qword_1EEF5AF00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B43C, &type metadata for ForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF00);
  }
  return result;
}

unint64_t sub_1B1B4D6B0()
{
  unint64_t result;

  result = qword_1EEF5AF08;
  if (!qword_1EEF5AF08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B554, &type metadata for ParticleForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF08);
  }
  return result;
}

unint64_t sub_1B1B4D6F8()
{
  unint64_t result;

  result = qword_1EEF5AF10;
  if (!qword_1EEF5AF10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B48C, &type metadata for ParticleForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF10);
  }
  return result;
}

unint64_t sub_1B1B4D740()
{
  unint64_t result;

  result = qword_1EEF5AF18;
  if (!qword_1EEF5AF18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B4B4, &type metadata for ParticleForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF18);
  }
  return result;
}

unint64_t sub_1B1B4D788()
{
  unint64_t result;

  result = qword_1EEF5AF20;
  if (!qword_1EEF5AF20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B374, &type metadata for ForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF20);
  }
  return result;
}

unint64_t sub_1B1B4D7D0()
{
  unint64_t result;

  result = qword_1EEF5AF28;
  if (!qword_1EEF5AF28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B39C, &type metadata for ForceField.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF28);
  }
  return result;
}

unint64_t sub_1B1B4D814()
{
  unint64_t result;

  result = qword_1EEF5AF38;
  if (!qword_1EEF5AF38)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BAE4, &type metadata for ForceField_LEGACY.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF38);
  }
  return result;
}

unint64_t sub_1B1B4D858()
{
  unint64_t result;

  result = qword_1EEF5AF40;
  if (!qword_1EEF5AF40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BABC, &type metadata for ForceField_LEGACY.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF40);
  }
  return result;
}

unint64_t sub_1B1B4D89C()
{
  unint64_t result;

  result = qword_1EEF5AF48;
  if (!qword_1EEF5AF48)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BA94, &type metadata for ForceField_LEGACY.Direction);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF48);
  }
  return result;
}

unint64_t sub_1B1B4D8E0()
{
  unint64_t result;

  result = qword_1EEF5AF50;
  if (!qword_1EEF5AF50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BA6C, &type metadata for ForceField_LEGACY.FallOff);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF50);
  }
  return result;
}

void sub_1B1B4D924()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA5A8)
  {
    v0 = sub_1B2228E48();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA5A8);
  }
}

unint64_t sub_1B1B4D980()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_1ED4BA5B0;
  if (!qword_1ED4BA5B0)
  {
    sub_1B1B4D924();
    v2 = MEMORY[0x1E0DEB1C0];
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB8B0], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1ED4BA5B0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ForceField_LEGACY.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF1)
    goto LABEL_17;
  if (a2 + 15 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 15) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 15;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 15;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 15;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x10;
  v8 = v6 - 16;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceField_LEGACY.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 15 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 15) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF1)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF0)
    return ((uint64_t (*)(void))((char *)&loc_1B1B4DAB4 + 4 * byte_1B227B10C[v4]))();
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1B1B4DAE8 + 4 * byte_1B227B107[v4]))();
}

uint64_t sub_1B1B4DAE8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DAF0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B4DAF8);
  return result;
}

uint64_t sub_1B1B4DB04(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B4DB0CLL);
  *(_BYTE *)result = a2 + 15;
  return result;
}

uint64_t sub_1B1B4DB10(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DB18(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForceField_LEGACY.CodingKeys()
{
  return &type metadata for ForceField_LEGACY.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ForceField_LEGACY.FallOff(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1B4DB80 + 4 * byte_1B227B116[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1B4DBB4 + 4 * byte_1B227B111[v4]))();
}

uint64_t sub_1B1B4DBB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DBBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B4DBC4);
  return result;
}

uint64_t sub_1B1B4DBD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B4DBD8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1B4DBDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DBE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForceField_LEGACY.FallOff()
{
  return &type metadata for ForceField_LEGACY.FallOff;
}

uint64_t getEnumTagSinglePayload for DirtyReadPolicy(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceField_LEGACY.Direction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1B4DCDC + 4 * byte_1B227B120[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1B4DD10 + 4 * byte_1B227B11B[v4]))();
}

uint64_t sub_1B1B4DD10(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DD18(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B4DD20);
  return result;
}

uint64_t sub_1B1B4DD2C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B4DD34);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1B4DD38(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DD40(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForceField_LEGACY.Direction()
{
  return &type metadata for ForceField_LEGACY.Direction;
}

uint64_t getEnumTagSinglePayload for ForceField_LEGACY.Kind(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ForceField_LEGACY.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B1B4DE38 + 4 * byte_1B227B12A[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B1B4DE6C + 4 * byte_1B227B125[v4]))();
}

uint64_t sub_1B1B4DE6C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DE74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B4DE7CLL);
  return result;
}

uint64_t sub_1B1B4DE88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B4DE90);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B1B4DE94(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B4DE9C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ForceField_LEGACY.Kind()
{
  return &type metadata for ForceField_LEGACY.Kind;
}

uint64_t sub_1B1B4DEB8()
{
  return sub_1B1B4DEE4(&qword_1EEF5AF58, &qword_1EEF5AF60, (uint64_t)&type metadata for ForceField_LEGACY.Kind);
}

uint64_t sub_1B1B4DEE4(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, a2, a3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v5);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1B4DF30()
{
  unint64_t result;

  result = qword_1EEF5AF68;
  if (!qword_1EEF5AF68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B754, &type metadata for ForceField_LEGACY.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF68);
  }
  return result;
}

uint64_t sub_1B1B4DF74()
{
  return sub_1B1B4DEE4(&qword_1EEF5AF70, &qword_1EEF5AF78, (uint64_t)&type metadata for ForceField_LEGACY.Direction);
}

unint64_t sub_1B1B4DFA4()
{
  unint64_t result;

  result = qword_1EEF5AF80;
  if (!qword_1EEF5AF80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B854, &type metadata for ForceField_LEGACY.Direction);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF80);
  }
  return result;
}

uint64_t sub_1B1B4DFE8()
{
  return sub_1B1B4DEE4(&qword_1EEF5AF88, &qword_1EEF5AF90, (uint64_t)&type metadata for ForceField_LEGACY.FallOff);
}

unint64_t sub_1B1B4E018()
{
  unint64_t result;

  result = qword_1EEF5AF98;
  if (!qword_1EEF5AF98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B954, &type metadata for ForceField_LEGACY.FallOff);
    atomic_store(result, (unint64_t *)&qword_1EEF5AF98);
  }
  return result;
}

unint64_t sub_1B1B4E060()
{
  unint64_t result;

  result = qword_1EEF5AFA0;
  if (!qword_1EEF5AFA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BA44, &type metadata for ForceField_LEGACY.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFA0);
  }
  return result;
}

unint64_t sub_1B1B4E0A8()
{
  unint64_t result;

  result = qword_1EEF5AFA8;
  if (!qword_1EEF5AFA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B97C, &type metadata for ForceField_LEGACY.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFA8);
  }
  return result;
}

unint64_t sub_1B1B4E0F0()
{
  unint64_t result;

  result = qword_1EEF5AFB0;
  if (!qword_1EEF5AFB0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B9A4, &type metadata for ForceField_LEGACY.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFB0);
  }
  return result;
}

unint64_t sub_1B1B4E134()
{
  unint64_t result;

  result = qword_1EEF5AFB8;
  if (!qword_1EEF5AFB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B6DC, &type metadata for ForceField_LEGACY.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFB8);
  }
  return result;
}

unint64_t sub_1B1B4E178()
{
  unint64_t result;

  result = qword_1EEF5AFC0;
  if (!qword_1EEF5AFC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B7DC, &type metadata for ForceField_LEGACY.Direction);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFC0);
  }
  return result;
}

unint64_t sub_1B1B4E1BC()
{
  unint64_t result;

  result = qword_1EEF5AFC8;
  if (!qword_1EEF5AFC8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227B8DC, &type metadata for ForceField_LEGACY.FallOff);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for Orientation()
{
  return &type metadata for Orientation;
}

uint64_t sub_1B1B4E220()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B4E26C()
{
  return sub_1B2228824();
}

uint64_t sub_1B1B4E280()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B4E2C8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B1B4E318(_QWORD *a1@<X8>)
{
  *a1 = 0x65756C6176;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1B1B4E330()
{
  return 0x65756C6176;
}

uint64_t sub_1B1B4E344@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B1B4E398()
{
  sub_1B1B4E6FC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B4E3C0()
{
  sub_1B1B4E6FC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B4E3E8@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B1B4E4B4(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1B4E410(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B1B4E784();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B1B4E4B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  __int128 v13;
  uint64_t v14;

  sub_1B1B4E6A4();
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1B19FA070(a1, v9);
  if (sub_1B2067BAC(2000, v9, v10))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v1)
    {
      sub_1B19FA070(&v13, v14);
      sub_1B1B4E740();
      sub_1B2229D6C();
      v12[0] = v12[1];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v13);
    }
  }
  else
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1B4E6FC();
    sub_1B222A150();
    if (!v1)
    {
      sub_1B1B4E740();
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v12[0] = v13;
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

void sub_1B1B4E6A4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAA58)
  {
    sub_1B1B4E6FC();
    v0 = sub_1B2229898();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAA58);
  }
}

unint64_t sub_1B1B4E6FC()
{
  unint64_t result;

  result = qword_1ED4B7D88;
  if (!qword_1ED4B7D88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BD24, &type metadata for Orientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D88);
  }
  return result;
}

unint64_t sub_1B1B4E740()
{
  unint64_t result;

  result = qword_1ED4B8E88;
  if (!qword_1ED4B8E88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A0AC, &type metadata for QuaternionFCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4B8E88);
  }
  return result;
}

unint64_t sub_1B1B4E784()
{
  unint64_t result;

  result = qword_1EEF5AFD0;
  if (!qword_1EEF5AFD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227A084, &type metadata for QuaternionFCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFD0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for Orientation.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1B4E808 + 4 * byte_1B227BB90[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1B4E828 + 4 * byte_1B227BB95[v4]))();
}

_BYTE *sub_1B1B4E808(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1B4E828(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1B4E830(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1B4E838(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1B4E840(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1B4E848(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Orientation.CodingKeys()
{
  return &type metadata for Orientation.CodingKeys;
}

unint64_t sub_1B1B4E868()
{
  unint64_t result;

  result = qword_1EEF5AFD8;
  if (!qword_1EEF5AFD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BCFC, &type metadata for Orientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFD8);
  }
  return result;
}

unint64_t sub_1B1B4E8B0()
{
  unint64_t result;

  result = qword_1ED4B7D98;
  if (!qword_1ED4B7D98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BC34, &type metadata for Orientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D98);
  }
  return result;
}

unint64_t sub_1B1B4E8F8()
{
  unint64_t result;

  result = qword_1ED4B7D90;
  if (!qword_1ED4B7D90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227BC5C, &type metadata for Orientation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B7D90);
  }
  return result;
}

uint64_t *sub_1B1B4E93C()
{
  uint64_t v0;
  float v1;
  float v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  float v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t i;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  void (*v28)(uint64_t);
  uint64_t v29;
  BOOL v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  char *v36;
  unsigned int v37;
  BOOL v38;
  int v39;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;
  char *v44;
  unsigned int v45;
  int v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int16 *v69;
  uint64_t v70[8];
  _QWORD v71[12];
  _QWORD v72[10];
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;

  sub_1B1E5267C();
  v2 = v1;
  v3 = *(_OWORD *)(v0 + 32);
  v77[0] = *(_OWORD *)(v0 + 16);
  v77[1] = v3;
  v78 = *(_QWORD *)(v0 + 48);
  v4 = swift_retain();
  sub_1B1E8FCE4(v4, (uint64_t)v77, 0x200000000, v70);
  sub_1B19ED688((uint64_t)v70, (uint64_t)v71);
  v69 = (unsigned __int16 *)v71[0];
  if (!v71[0])
    return (uint64_t *)swift_release();
  v5 = v71[7];
  v59 = v71[5];
  v60 = v71[8];
  v6 = (_QWORD *)v71[9];
  v7 = v71[10];
  swift_release();
  v58 = v7;
  if (v7 > 0 && v5)
  {
    v8 = v2 * 0.5;
    v9 = v6[4];
    v10 = *(unsigned __int8 *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    swift_retain();
    swift_retain();
    swift_retain();
    v11 = 0;
    v57 = v10;
    v55 = v9;
    v56 = v5;
    while (1)
    {
      v12 = (unsigned int *)(v59 + 48 * v11);
      v13 = *v12;
      v14 = v12[1];
      v15 = v12[2];
      v16 = *((_QWORD *)v12 + 3);
      v64 = v11;
      v65 = *((_QWORD *)v12 + 2);
      v18 = *((_QWORD *)v12 + 4);
      v17 = *((_QWORD *)v12 + 5);
      if (v10)
      {
        v19 = *(os_unfair_lock_s **)(v17 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v19);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v9);
      v61 = v6[6];
      v63 = v6[7];
      v67 = v6[9];
      v68 = v6[8];
      v66 = v6[10];
      v20 = v6[4];
      v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v17 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v6[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
      v6[7] = v21;
      v6[9] = 0;
      v6[10] = 0;
      v6[8] = 0;
      swift_release();
      v72[0] = v60;
      v72[1] = v17;
      v62 = v17;
      v72[2] = v6;
      v72[3] = v15;
      v72[4] = (v14 - v13 + v15);
      v72[5] = v58;
      v72[6] = v13;
      v72[7] = v14;
      v72[8] = 0;
      v72[9] = 0;
      v73 = 1;
      v74 = v65;
      v75 = v16;
      v76 = v18;
      sub_1B1B4EDE0(v72, v8);
      v22 = v6[6];
      v23 = v6[8];
      if (!v23)
      {
        v49 = v6[7];
        v50 = (_QWORD *)v6[4];
        v9 = v55;
        v51 = v56;
        v53 = v63;
        v52 = v64;
        goto LABEL_46;
      }
      for (i = 0; i != v23; ++i)
      {
        v26 = (uint64_t *)(v22 + 48 * i);
        v27 = *v26;
        v28 = (void (*)(uint64_t))v26[4];
        v29 = v6[9];
        if (v29)
          v30 = v27 == v29;
        else
          v30 = 0;
        if (v30 || !v69[11])
          goto LABEL_11;
        v31 = v69[9];
        v32 = (_QWORD *)((char *)v69 + v69[8] + 41);
        v33 = v26[2];
        v34 = v32;
        v35 = v31 >> 4;
        v36 = (char *)v69 + 41;
        if (v31 >= 0x10)
        {
          while (*v34 != v27)
          {
            ++v36;
            v34 += 2;
            if (!--v35)
              goto LABEL_26;
          }
          v37 = v36[v69[10]];
          v38 = v37 > 5;
          v39 = (1 << v37) & 0x23;
          if (v38 || v39 == 0)
          {
LABEL_11:
            v25 = swift_retain();
            v28(v25);
            swift_release();
            continue;
          }
        }
LABEL_26:
        if (swift_conformsToProtocol2())
          v41 = v33;
        else
          v41 = 0;
        if (v41)
        {
          if (v31 < 0x10)
            goto LABEL_11;
          v42 = v32;
          v43 = v31 >> 4;
          v44 = (char *)v69 + 41;
          while (*v42 != v41)
          {
            ++v44;
            v42 += 2;
            if (!--v43)
              goto LABEL_39;
          }
          v45 = v44[v69[10]];
          v38 = v45 > 5;
          v46 = (1 << v45) & 0x23;
          if (v38 || v46 == 0)
            goto LABEL_11;
LABEL_39:
          v48 = 16 * (v31 >> 4);
          while (*v32 != v41)
          {
            v32 += 2;
            v48 -= 16;
            if (!v48)
              goto LABEL_11;
          }
        }
      }
      v49 = v6[7];
      v22 = v6[6];
      v50 = (_QWORD *)v6[4];
      v9 = v55;
      v51 = v56;
      v53 = v63;
      v52 = v64;
      if ((uint64_t)v6[8] >= 1)
        swift_arrayDestroy();
LABEL_46:
      ecs_stack_allocator_deallocate(v50, v22, 48 * v49);
      v6[6] = v61;
      v6[7] = v53;
      v6[8] = v68;
      v6[9] = v67;
      v6[10] = v66;
      sub_1B1F03804((char *)v62);
      ecs_stack_allocator_pop_snapshot(v9);
      v10 = v57;
      if ((v57 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
      }
      swift_release();
      v11 = v52 + 1;
      if (v11 == v51)
      {
        sub_1B19ED748(v70);
        return sub_1B19ED748(v70);
      }
    }
  }
  return sub_1B19ED748(v70);
}

void sub_1B1B4EDE0(_QWORD *a1, float a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  float32x4_t *v16;
  float32x4_t *v17;
  float32x4_t *v18;
  int32x4_t v21;
  float32x4_t v27;
  int8x16_t v28;
  int32x2_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float v34;
  float v35;
  float v36;
  unsigned __int32 v37;
  float32x2_t v38;
  float32x2_t v39;
  uint64_t v40;
  float32x4_t *v41;
  float32x4_t *v42;
  int32x4_t v45;
  float32x4_t v47;
  int8x16_t v48;
  int32x2_t v49;
  float32x4_t v50;
  float v51;
  float32x4_t v52;
  float32x4_t v53;
  float v54;
  float v55;
  unsigned __int32 v56;
  float32x2_t v57;
  float32x2_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x2_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float v64;
  float32x4_t v65;
  __int32 v66;
  __int32 v67;

  v4 = (uint64_t *)a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[2];
  v8 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v4, v5, v6, v7);
  v9 = sub_1B1A12038((uint64_t)&type metadata for AngularVelocity, (uint64_t)&off_1E63831C0, v4, v5, v6, v7);
  v10 = sub_1B1B47AB8();
  v11 = a1[6];
  v12 = a1[7];
  v13 = v12 - v11;
  if ((v14 & 1) != 0)
  {
    if (v12 != v11)
    {
      v40 = 16 * v11;
      v41 = (float32x4_t *)(v9 + v40);
      v42 = (float32x4_t *)(v8 + v40);
      do
      {
        v51 = vmuls_lane_f32(a2, *v41, 3);
        v52 = vmulq_n_f32(*v41, v51);
        v53 = v52;
        v53.i32[3] = v67;
        v65 = *v42;
        if (v51 > 0.0001)
        {
          v64 = v51;
          v59 = v52;
          v54 = sinf(v51);
          v51 = v64;
          v55 = v54 / v64;
          *(float32x2_t *)v53.f32 = vmul_n_f32(*(float32x2_t *)v59.f32, v55);
          v53.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(v55, v59, 2));
        }
        v63 = v53;
        _S0 = cosf(v51);
        _Q5 = (int32x4_t)v65;
        v45 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q5, _Q5), (int8x16_t)v65, 0xCuLL), vnegq_f32(v63)), v65, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), (int8x16_t)v63, 0xCuLL));
        v47 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v63, v65, 3), v65, _S0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v45, v45), (int8x16_t)v45, 0xCuLL));
        __asm { FMLA            S2, S0, V5.S[3] }
        v47.i32[3] = _S2;
        v48 = (int8x16_t)vmulq_f32(v47, v47);
        v49 = (int32x2_t)vadd_f32(*(float32x2_t *)v48.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v48, v48, 8uLL));
        v50 = (float32x4_t)xmmword_1B2244E20;
        if (vaddv_f32((float32x2_t)v49) != 0.0)
        {
          v56 = vadd_f32((float32x2_t)v49, (float32x2_t)vdup_lane_s32(v49, 1)).u32[0];
          v57 = vrsqrte_f32((float32x2_t)v56);
          v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)v56, vmul_f32(v57, v57)));
          v50 = vmulq_n_f32(v47, vmul_f32(v58, vrsqrts_f32((float32x2_t)v56, vmul_f32(v58, v58))).f32[0]);
        }
        *v42++ = v50;
        ++v41;
        --v13;
      }
      while (v13);
    }
  }
  else if (v12 != v11)
  {
    v15 = 16 * v11;
    v16 = (float32x4_t *)(v10 + v15);
    v17 = (float32x4_t *)(v9 + v15);
    v18 = (float32x4_t *)(v8 + v15);
    do
    {
      v31 = vmulq_n_f32(*v17, vmuls_lane_f32(a2, *v17, 3));
      v31.i32[3] = v67;
      v32 = vmulq_f32(*v16, v31);
      v33 = v32;
      v33.i32[3] = v66;
      v34 = v32.f32[2];
      v35 = sqrtf(vmuls_lane_f32(v32.f32[2], v32, 2) + vaddv_f32((float32x2_t)*(_OWORD *)&vmulq_f32(v32, v32)));
      v62 = *v18;
      if (v35 > 0.0001)
      {
        v61 = *(float32x2_t *)v32.f32;
        v36 = sinf(v35) / v35;
        *(float32x2_t *)v33.f32 = vmul_n_f32(v61, v36);
        v33.f32[2] = v34 * v36;
        v33.i32[3] = 0;
      }
      v60 = v33;
      _S0 = cosf(v35);
      _Q5 = (int32x4_t)v62;
      v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q5, _Q5), (int8x16_t)v62, 0xCuLL), vnegq_f32(v60)), v62, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL));
      v27 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(v60, v62, 3), v62, _S0), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL));
      __asm { FMLA            S2, S0, V5.S[3] }
      v27.i32[3] = _S2;
      v28 = (int8x16_t)vmulq_f32(v27, v27);
      v29 = (int32x2_t)vadd_f32(*(float32x2_t *)v28.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL));
      v30 = (float32x4_t)xmmword_1B2244E20;
      if (vaddv_f32((float32x2_t)v29) != 0.0)
      {
        v37 = vadd_f32((float32x2_t)v29, (float32x2_t)vdup_lane_s32(v29, 1)).u32[0];
        v38 = vrsqrte_f32((float32x2_t)v37);
        v39 = vmul_f32(v38, vrsqrts_f32((float32x2_t)v37, vmul_f32(v38, v38)));
        v30 = vmulq_n_f32(v27, vmul_f32(v39, vrsqrts_f32((float32x2_t)v37, vmul_f32(v39, v39))).f32[0]);
      }
      *v18++ = v30;
      ++v16;
      ++v17;
      --v13;
    }
    while (v13);
  }
}

uint64_t type metadata accessor for ParticleIntegrateOrientation.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1B4F168(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 104);
  v8 = *(_OWORD *)(a1 + 88);
  v9 = v3;
  v10 = *(_QWORD *)(a1 + 120);
  sub_1B19EF994((uint64_t)v6);
  sub_1B1B4F21C(a1);
  v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B1B4F1EC()
{
  return "ParticleIntegrateOrientation.CPU";
}

uint64_t sub_1B1B4F200()
{
  return type metadata accessor for ParticleIntegrateOrientation.System();
}

uint64_t sub_1B1B4F21C(uint64_t a1)
{
  swift_release();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for ParticleIntegrateOrientation()
{
  return &type metadata for ParticleIntegrateOrientation;
}

uint64_t sub_1B1B4F260()
{
  return sub_1B22295EC();
}

uint64_t sub_1B1B4F2A0(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unsigned int (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  int v40;
  int v41;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD v78[2];
  uint64_t v79;
  unint64_t v80;

  v74 = a6;
  v75 = a7;
  v72 = a3;
  v73 = a4;
  v70 = a1;
  v71 = a2;
  v10 = sub_1B222826C();
  v67 = *(_QWORD *)(v10 - 8);
  v68 = v10;
  MEMORY[0x1E0C80A78](v10, v11);
  v66 = (char *)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v66 - v19;
  v21 = type metadata accessor for ScriptIndex();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21, v23);
  v25 = (_DWORD *)((char *)&v66 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v26, v27);
  v29 = (char *)&v66 - v28;
  MEMORY[0x1E0C80A78](v30, v31);
  v33 = (int *)((char *)&v66 - v32);
  MEMORY[0x1E0C80A78](v34, v35);
  v37 = (char *)&v66 - v36;
  sub_1B1B59664(a8, (uint64_t)v20);
  v38 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v38(v20, 1, v21) == 1)
  {
    sub_1B1B596C0((uint64_t)v20);
  }
  else
  {
    sub_1B1B59714((uint64_t)v20, (uint64_t)v37);
    sub_1B1792810((uint64_t)v37, (uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      sub_1B1A04628((uint64_t)v33, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
      v39 = (uint64_t)v37;
    }
    else
    {
      v40 = *v33;
      v41 = v33[1];
      if (v40 != -1 || v41 != 0)
      {
        LODWORD(v78[0]) = v40;
        v79 = sub_1B2229A0C();
        v80 = v43;
        sub_1B2228890();
        LODWORD(v78[0]) = v41;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v44 = v80;
        v69 = v79;
        sub_1B1A04628((uint64_t)v37, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
        goto LABEL_13;
      }
      v39 = (uint64_t)v37;
    }
    sub_1B1A04628(v39, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
  }
  LODWORD(v78[0]) = a5;
  v79 = sub_1B2229A0C();
  v80 = v45;
  sub_1B2228890();
  LODWORD(v78[0]) = HIDWORD(a5);
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v44 = v80;
  v69 = v79;
LABEL_13:
  sub_1B1B59664(a8, (uint64_t)v16);
  if (v38(v16, 1, v21) == 1)
  {
    sub_1B1B596C0((uint64_t)v16);
    v46 = 0;
    v47 = 0xE000000000000000;
  }
  else
  {
    sub_1B1B59714((uint64_t)v16, (uint64_t)v29);
    sub_1B1792810((uint64_t)v29, (uint64_t)v25, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v49 = v66;
      v48 = v67;
      v50 = v68;
      (*(void (**)(char *, _DWORD *, uint64_t))(v67 + 32))(v66, v25, v68);
      v79 = sub_1B2228224();
      v80 = v51;
      v78[0] = 45;
      v78[1] = 0xE100000000000000;
      v76 = 95;
      v77 = 0xE100000000000000;
      sub_1B1A06460();
      v46 = sub_1B222922C();
      v47 = v52;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v48 + 8))(v49, v50);
    }
    else
    {
      LODWORD(v79) = *v25;
      v46 = sub_1B2229A0C();
      v47 = v53;
    }
    sub_1B1A04628((uint64_t)v29, (uint64_t (*)(_QWORD))type metadata accessor for ScriptIndex);
  }
  v79 = v70;
  v80 = v71;
  strcpy((char *)v78, "%SCRIPT_ID%");
  HIDWORD(v78[1]) = -352321536;
  v76 = 0xD00000000000001ELL;
  v77 = 0x80000001B232FA70;
  sub_1B1A06460();
  v79 = sub_1B222922C();
  v80 = v54;
  strcpy((char *)v78, "%PROJECT%");
  WORD1(v78[1]) = 0;
  HIDWORD(v78[1]) = -385875968;
  v76 = v72;
  v77 = v73;
  v55 = sub_1B222922C();
  v57 = v56;
  swift_bridgeObjectRelease();
  v79 = v55;
  v80 = v57;
  v78[0] = 0x25444E494B25;
  v78[1] = 0xE600000000000000;
  v76 = v74;
  v77 = v75;
  v58 = sub_1B222922C();
  v60 = v59;
  swift_bridgeObjectRelease();
  v79 = v58;
  v80 = v60;
  strcpy((char *)v78, "%ENTITY%");
  BYTE1(v78[1]) = 0;
  WORD1(v78[1]) = 0;
  HIDWORD(v78[1]) = -402653184;
  v76 = v69;
  v77 = v44;
  v61 = sub_1B222922C();
  v63 = v62;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v79 = v61;
  v80 = v63;
  strcpy((char *)v78, "%ORIG_ENTITY%");
  HIWORD(v78[1]) = -4864;
  v76 = v46;
  v77 = v47;
  v64 = sub_1B222922C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v64;
}

uint64_t sub_1B1B4F95C(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  if (a2 == 2)
    return sub_1B207A300();
  if (swift_dynamicCastMetatype())
    return 1819242338;
  if (swift_dynamicCastMetatype())
    return 0x745F38746E6975;
  if (swift_dynamicCastMetatype())
    return 0x745F3631746E6975;
  if (swift_dynamicCastMetatype())
    return 0x745F3233746E6975;
  if (swift_dynamicCastMetatype())
    return 0x745F3436746E6975;
  v2 = 0x745F3436746E69;
  if (swift_dynamicCastMetatype())
    return v2;
  if (swift_dynamicCastMetatype())
    return 0x745F38746E69;
  if (swift_dynamicCastMetatype())
    return 0x745F3631746E69;
  if (swift_dynamicCastMetatype())
    return 0x745F3233746E69;
  if (swift_dynamicCastMetatype())
    return v2;
  v2 = 0x6E69755F646D6973;
  sub_1B19F8E54(0, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]);
  if (swift_dynamicCastMetatype())
    return v2;
  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  if (swift_dynamicCastMetatype())
    return v2;
  sub_1B19F8E54(0, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  if (swift_dynamicCastMetatype())
    return v2;
  if (swift_dynamicCastMetatype())
    return 0x656C62756F64;
  if (swift_dynamicCastMetatype())
    return 0x74616F6C66;
  v2 = 0x6F6C665F646D6973;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  if (swift_dynamicCastMetatype())
    return v2;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  if (swift_dynamicCastMetatype())
    return v2;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  if (swift_dynamicCastMetatype())
    return v2;
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5A8, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEB1B0], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  if (swift_dynamicCastMetatype())
    return 0x616F6C665F786676;
  sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4BA5B8, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB430], (uint64_t (*)(_QWORD, uint64_t, uint64_t))MEMORY[0x1E0DEB848]);
  if (swift_dynamicCastMetatype())
    return 0x5F746E695F786676;
  type metadata accessor for simd_quatf(0);
  if (swift_dynamicCastMetatype())
  {
    if (a2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v5 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v5 & 1) == 0)
        return 0x6175715F646D6973;
    }
    return v2;
  }
  type metadata accessor for simd_float2x2(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float2x3(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float2x4(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float3x2(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float3x3(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float3x4(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float4x2(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float4x3(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for simd_float4x4(0);
  if (swift_dynamicCastMetatype())
    return v2;
  v2 = 0x6F762074736E6F63;
  if (swift_dynamicCastMetatype())
    return v2;
  if (swift_dynamicCastMetatype())
    return 0x2A64696F76;
  if (swift_dynamicCastMetatype())
    return v2;
  v2 = 0x706D61735F786676;
  type metadata accessor for __vfx_sampler1d(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for __vfx_sampler2d(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for __vfx_sampler3d(0);
  if (swift_dynamicCastMetatype())
    return v2;
  type metadata accessor for frame_constants(0);
  if (swift_dynamicCastMetatype())
    return 0x6F635F656D617266;
  if (swift_dynamicCastMetatype())
    return 0x656C636974726170;
  if (swift_dynamicCastMetatype())
    return 1718378856;
  if (swift_dynamicCastMetatype())
    return 0x32666C6168;
  if (swift_dynamicCastMetatype())
    return 0x33666C6168;
  if (swift_dynamicCastMetatype())
    return 0x34666C6168;
  type metadata accessor for pbr_lighting_parameters(0);
  if (swift_dynamicCastMetatype())
    return 0xD000000000000017;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA4C0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  if (swift_dynamicCastMetatype())
    return 0x2A2074616F6C66;
  if (!swift_dynamicCastMetatype())
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1B50368()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1B503C0()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v1 = sub_1B2228890();
  (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 104))(v1);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0x202F2F0A2F2FLL;
}

void sub_1B1B504D8()
{
  sub_1B2229688();
  __break(1u);
}

_QWORD *sub_1B1B50530(char a1, void (*a2)(uint64_t *__return_ptr, uint64_t), void (*a3)(uint64_t *), uint64_t (*a4)(_QWORD), uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  char *v34;
  char *v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v53;
  int v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59[8];
  _OWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _OWORD v70[2];
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  _BYTE v74[40];
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  char v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  _QWORD *v87;

  v10 = v7;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v81 = qword_1ED4D09F8;
  v82 = 0;
  v83 = 2;
  v84 = 0;
  v85 = 2;
  v86 = 0;
  swift_retain();
  a2(&v53, 1);
  swift_release();
  v75 = v53;
  v76 = v54;
  v77 = v55;
  v78 = v56 | 1;
  v79 = v57;
  v80 = v58;
  v87 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1E8FCE4(*(_QWORD *)(v6 + 16), (uint64_t)&v75, 0x200000000, v59);
  sub_1B1A18378((uint64_t)v59, (uint64_t)v60, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v60[0])
  {
    a3(&v53);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v67 = v60[0];
  v68 = v60[1];
  v69 = v61;
  if (v66 <= 0)
  {
    a3(&v53);
    sub_1B19ED748(v59);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v40 = v63;
  if (!v63)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    a3(&v53);
    sub_1B19ED748(v59);
    v37 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_42:
    sub_1B19ED748(v59);
    return v37;
  }
  v42 = v6;
  v44 = v62;
  v11 = v65;
  v49 = v65[4];
  v12 = *(unsigned __int8 *)(v64 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v43 = (uint64_t)(v65 + 6);
  v39 = v65 + 13;
  v46 = a4(0);
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = 0;
  v41 = v12;
  while (1)
  {
    v45 = v13;
    v14 = (unsigned int *)(v44 + 48 * v13);
    v16 = *v14;
    v15 = v14[1];
    v17 = (uint64_t *)*((_QWORD *)v14 + 2);
    v47 = *((_QWORD *)v14 + 3);
    v19 = *((_QWORD *)v14 + 4);
    v18 = *((_QWORD *)v14 + 5);
    if (v12)
    {
      v20 = *(os_unfair_lock_s **)(v18 + 376);
      swift_retain();
      os_unfair_lock_lock(v20);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v49);
    sub_1B1A18378(v43, (uint64_t)v74, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v21 = v11[4];
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v11[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
    v11[7] = v22;
    v11[9] = 0;
    v11[10] = 0;
    v11[8] = 0;
    swift_release();
    v23 = sub_1B1A12038(v46, a5, v17, v47, v19, (uint64_t)v11);
    v24 = v23;
    if (!v17)
      break;
    if (v19)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 72);
      do
      {
        v26 = *v17++;
        a6(v18, v26, v24, v42, a1 & 1, &v87);
        if (v10)
          goto LABEL_38;
        v24 += v25;
      }
      while (--v19);
    }
LABEL_21:
    v70[0] = v67;
    v70[1] = v68;
    v71 = v69;
    sub_1B1F05D48(v11, (unsigned __int16 **)v70, (uint64_t)v74);
    v12 = v41;
    if (*(_QWORD *)(v11[13] + 16))
    {
      v29 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v29, v18);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v31 = v11[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v31 + 16));
      }
      else
      {
        v32 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v31 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v32 = (_QWORD *)swift_allocObject();
          v33 = j__malloc_size(v32);
          v32[2] = 0;
          v32[3] = 2 * ((uint64_t)(v33 - 32) / 72);
        }
        *v39 = v32;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v11[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v34 = *(char **)(v18 + 232);
        v35 = *(char **)(v18 + 256);
        if (v34 == v35)
        {
          v36 = *(char **)(v18 + 240);
        }
        else
        {
          sub_1B1A1059C(v35, v34);
          v35 = *(char **)(v18 + 232);
          v36 = *(char **)(v18 + 240);
          if (v36 == v35)
          {
            v36 = 0;
            v35 = 0;
            *(_QWORD *)(v18 + 232) = 0;
            *(_QWORD *)(v18 + 240) = 0;
          }
        }
        *(_QWORD *)(v18 + 248) = v36;
        *(_QWORD *)(v18 + 256) = v35;
      }
    }
    ecs_stack_allocator_pop_snapshot(v49);
    if (v41)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
    }
    swift_release();
    v13 = v45 + 1;
    if (v45 + 1 == v40)
    {
      a3(&v53);
      sub_1B19ED748(v59);
      v37 = v87;
      goto LABEL_42;
    }
  }
  if ((_DWORD)v16 == (_DWORD)v15)
    goto LABEL_21;
  v27 = *(_QWORD *)(*(_QWORD *)(v46 - 8) + 72);
  v28 = v23 + v27 * v16;
  while (1)
  {
    a6(v18, v16, v28, v42, a1 & 1, &v87);
    if (v10)
      break;
    ++v16;
    v28 += v27;
    if (v15 == v16)
      goto LABEL_21;
  }
LABEL_38:
  v72[0] = v67;
  v72[1] = v68;
  v73 = v69;
  v37 = v11;
  sub_1B1F05D48(v11, (unsigned __int16 **)v72, (uint64_t)v74);
  sub_1B1F03804((char *)v18);
  ecs_stack_allocator_pop_snapshot(v49);
  if ((v41 & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
  }
  a3(&v53);
  sub_1B19ED748(v59);
  sub_1B19ED748(v59);
  swift_release();
  swift_bridgeObjectRelease();
  return v37;
}

_QWORD *sub_1B1B50B7C(char a1, void (*a2)(uint64_t *__return_ptr, uint64_t), void (*a3)(uint64_t *), uint64_t (*a4)(_QWORD), uint64_t a5, void (*a6)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_unfair_lock_s *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t *);
  uint64_t v27;
  _QWORD *v28;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v30;
  _QWORD *v31;
  size_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(uint64_t *);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61[8];
  _OWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  _BYTE v76[40];
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  _QWORD *v89;

  v11 = v7;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v83 = qword_1ED4D09F8;
  v84 = 0;
  v85 = 2;
  v86 = 0;
  v87 = 2;
  v88 = 0;
  swift_retain();
  a2(&v55, 1);
  swift_release();
  v77 = v55;
  v78 = v56;
  v79 = v57;
  v80 = v58 | 1;
  v81 = v59;
  v82 = v60;
  v89 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  sub_1B1E8FCE4(*(_QWORD *)(v6 + 16), (uint64_t)&v77, 0x200000000, v61);
  sub_1B1A18378((uint64_t)v61, (uint64_t)v62, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v62[0])
  {
    a3(&v55);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v69 = v62[0];
  v70 = v62[1];
  v71 = v63;
  if (v68 <= 0)
  {
    a3(&v55);
    sub_1B19ED748(v61);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v41 = v65;
  if (!v65)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    a3(&v55);
    sub_1B19ED748(v61);
    v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_44:
    sub_1B19ED748(v61);
    return v38;
  }
  v52 = v6;
  v45 = v64;
  v12 = v67;
  v43 = v66;
  v50 = v67[4];
  v51 = *(unsigned __int8 *)(v66 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v44 = (uint64_t)(v67 + 6);
  v40 = v67 + 13;
  v47 = a4(0);
  swift_retain();
  swift_retain();
  swift_retain();
  v13 = 0;
  v42 = a3;
  while (1)
  {
    v46 = v13;
    v14 = (unsigned int *)(v45 + 48 * v13);
    v15 = *v14;
    v16 = v14[1];
    v17 = (uint64_t *)*((_QWORD *)v14 + 2);
    v48 = *((_QWORD *)v14 + 3);
    v19 = *((_QWORD *)v14 + 4);
    v18 = *((_QWORD *)v14 + 5);
    if (v51)
    {
      v20 = *(os_unfair_lock_s **)(v18 + 376);
      swift_retain();
      os_unfair_lock_lock(v20);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v50);
    sub_1B1A18378(v44, (uint64_t)v76, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v21 = v12[4];
    v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v12[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
    v12[7] = v22;
    v12[9] = 0;
    v12[10] = 0;
    v12[8] = 0;
    swift_release();
    v23 = sub_1B1A12038(v47, a5, v17, v48, v19, (uint64_t)v12);
    v24 = v23;
    if (!v17)
      break;
    if (v19)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v47 - 8) + 72);
      v26 = v42;
      while (1)
      {
        v27 = *v17++;
        a6(v43, v18, v27, v24, v52, a1 & 1, &v89);
        if (v11)
          goto LABEL_40;
        v24 += v25;
        if (!--v19)
          goto LABEL_19;
      }
    }
LABEL_18:
    v26 = v42;
LABEL_19:
    v72[0] = v69;
    v72[1] = v70;
    v73 = v71;
    sub_1B1F05D48(v12, (unsigned __int16 **)v72, (uint64_t)v76);
    if (*(_QWORD *)(v12[13] + 16))
    {
      v28 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v28, v18);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v30 = v12[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v30 + 16));
      }
      else
      {
        v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v30 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v31 = (_QWORD *)swift_allocObject();
          v32 = j__malloc_size(v31);
          v31[2] = 0;
          v31[3] = 2 * ((uint64_t)(v32 - 32) / 72);
        }
        *v40 = v31;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v12[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v33 = *(char **)(v18 + 232);
        v34 = *(char **)(v18 + 256);
        if (v33 == v34)
        {
          v35 = *(char **)(v18 + 240);
        }
        else
        {
          sub_1B1A1059C(v34, v33);
          v34 = *(char **)(v18 + 232);
          v35 = *(char **)(v18 + 240);
          if (v35 == v34)
          {
            v35 = 0;
            v34 = 0;
            *(_QWORD *)(v18 + 232) = 0;
            *(_QWORD *)(v18 + 240) = 0;
          }
        }
        *(_QWORD *)(v18 + 248) = v35;
        *(_QWORD *)(v18 + 256) = v34;
      }
    }
    ecs_stack_allocator_pop_snapshot(v50);
    if (v51)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
    }
    swift_release();
    v13 = v46 + 1;
    if (v46 + 1 == v41)
    {
      v26(&v55);
      sub_1B19ED748(v61);
      v38 = v89;
      goto LABEL_44;
    }
  }
  if ((_DWORD)v15 == (_DWORD)v16)
    goto LABEL_18;
  v36 = *(_QWORD *)(*(_QWORD *)(v47 - 8) + 72);
  v37 = v23 + v36 * v15;
  v26 = v42;
  while (1)
  {
    a6(v43, v18, v15, v37, v52, a1 & 1, &v89);
    if (v11)
      break;
    ++v15;
    v37 += v36;
    if (v16 == v15)
      goto LABEL_19;
  }
LABEL_40:
  v74[0] = v69;
  v74[1] = v70;
  v75 = v71;
  v38 = v12;
  sub_1B1F05D48(v12, (unsigned __int16 **)v74, (uint64_t)v76);
  sub_1B1F03804((char *)v18);
  ecs_stack_allocator_pop_snapshot(v50);
  if ((v51 & 1) != 0)
  {
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
  }
  v26(&v55);
  sub_1B19ED748(v61);
  sub_1B19ED748(v61);
  swift_release();
  swift_bridgeObjectRelease();
  return v38;
}

uint64_t sub_1B1B511D8(char a1)
{
  uint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;

  v12 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1B50B7C(a1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3C5B8, (void (*)(uint64_t *))sub_1B19ED720, type metadata accessor for GraphScript, (uint64_t)&off_1E6370AB0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5B20C);
  if (v1)
  {
    swift_bridgeObjectRelease();
    return swift_willThrow();
  }
  else
  {
    sub_1B19F4EF8((uint64_t)v3);
    v4 = sub_1B1B50B7C(a1 & 1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E3D0, (void (*)(uint64_t *))sub_1B1A1B75C, type metadata accessor for SimpleScript, (uint64_t)&off_1E63777B8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5B784);
    sub_1B19F4EF8((uint64_t)v4);
    v5 = sub_1B1B50530(a1 & 1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E320, (void (*)(uint64_t *))sub_1B1A1B75C, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1E63982A0, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5BCFC);
    sub_1B19F4EF8((uint64_t)v5);
    v6 = sub_1B1B50530(a1 & 1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E270, (void (*)(uint64_t *))sub_1B1A1B75C, type metadata accessor for ShaderScript, (uint64_t)&off_1E63774F8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5C5B8);
    sub_1B19F4EF8((uint64_t)v6);
    v7 = sub_1B1B50B7C(a1 & 1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E480, (void (*)(uint64_t *))sub_1B1A1B75C, type metadata accessor for EmitterScript, (uint64_t)&off_1E637A0A8, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5CB44);
    sub_1B19F4EF8((uint64_t)v7);
    v8 = sub_1B1B50B7C(a1 & 1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E118, (void (*)(uint64_t *))sub_1B1A1B75C, type metadata accessor for TriggerScript, (uint64_t)&off_1E637DA80, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5D0C0);
    sub_1B19F4EF8((uint64_t)v8);
    v9 = sub_1B1B50B7C(a1 & 1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E1C0, (void (*)(uint64_t *))sub_1B1A1B75C, type metadata accessor for ParticleInitScript, (uint64_t)&off_1E6394B78, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5D640);
    sub_1B19F4EF8((uint64_t)v9);
    v10 = sub_1B1B50B7C(a1 & 1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B1E3E16C, (void (*)(uint64_t *))sub_1B1A1B75C, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1E639E488, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, _QWORD **))sub_1B1B5DBCC);
    sub_1B19F4EF8((uint64_t)v10);
    return v12;
  }
}

uint64_t sub_1B1B51470()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScriptCodeGen()
{
  return objc_opt_self();
}

uint64_t sub_1B1B514C4()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1B1B514E4();
  qword_1EEFD5340 = result;
  *(_QWORD *)algn_1EEFD5348 = v1;
  return result;
}

uint64_t sub_1B1B514E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  void *v13;
  id v14;
  void *v15;
  void *v16;
  id v17;
  void (*v18)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v19;
  uint64_t result;
  _BYTE v21[16];

  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v0, v1);
  v3 = &v21[-v2];
  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = &v21[-v11];
  v13 = (void *)sub_1B2228728();
  v14 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v13);

  v15 = (void *)sub_1B2228728();
  v16 = (void *)sub_1B2228728();
  v17 = objc_msgSend(v14, sel_URLForResource_withExtension_, v15, v16);

  if (v17)
  {
    sub_1B22280C8();

    v18 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v5 + 32);
    v18(v3, v8, v4);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v3, 0, 1, v4);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4);
    v18(v12, v3, v4);
    v19 = sub_1B2228710();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v12, v4);
    return v19;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v5 + 56))(v3, 1, 1, v4);
    __break(1u);
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1B51748(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F2FFBC(*a1, *a2);
}

uint64_t sub_1B1B51754()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B517F0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B51868()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B51900@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B5E160();
  *a1 = result;
  return result;
}

void sub_1B1B5192C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE600000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x746E656D67617266;
  if (v2 != 1)
  {
    v5 = 0x657475706D6F63;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x786574726576;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B1B51988()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E656D67617266;
  if (*v0 != 1)
    v1 = 0x657475706D6F63;
  if (*v0)
    return v1;
  else
    return 0x786574726576;
}

_QWORD *sub_1B1B519E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t inited;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v66;
  _QWORD v67[2];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (_BYTE *)(swift_bridgeObjectRetain() + 40);
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v66 = v1;
    while (2)
    {
      v6 = *((_QWORD *)v3 - 1);
      switch(v6 >> 60)
      {
        case 0uLL:
        case 7uLL:
        case 8uLL:
        case 9uLL:
        case 0xDuLL:
          sub_1B1B1DD24(*((_QWORD *)v3 - 1));
          swift_retain();
          v7 = sub_1B1C65D70(0, 0, 1, v4);
          sub_1B1A05610(v6);
          goto LABEL_40;
        case 3uLL:
        case 4uLL:
          v8 = *v3;
          sub_1B1B1DD24(*((_QWORD *)v3 - 1));
          sub_1B1C96CF0(v6);
          if ((sub_1B1E68FB0(v9, 1u) & 1) != 0)
          {
            if ((v8 & 2) != 0)
              v10 = MEMORY[0x1E0DEBC10];
            else
              v10 = MEMORY[0x1E0DEABD0];
          }
          else
          {
            sub_1B1C96CF0(v6);
          }
          v67[0] = sub_1B1B4F95C(v10, 1);
          v67[1] = v21;
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v22 = v67[0];
          v23 = v67[1];
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v24 = swift_allocObject();
          *(_OWORD *)(v24 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v24 + 32) = v22;
          v25 = v24 + 32;
          *(_QWORD *)(v24 + 40) = v23;
          sub_1B1B63150();
          *(_QWORD *)(v24 + 48) = 0;
          *(_QWORD *)(v24 + 56) = 0;
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1B226D240;
          *(_QWORD *)(inited + 32) = v24;
          v27 = *(_QWORD *)(v24 + 16);
          swift_bridgeObjectRetain();
          v28 = sub_1B1C65D70(0, v27, 1, MEMORY[0x1E0DEE9D8]);
          v7 = v28;
          if (!*(_QWORD *)(v24 + 16))
            goto LABEL_29;
          v29 = (unint64_t)&v28[4 * v28[2] + 4];
          if (v25 < v29 + 32 * v27 && v29 < v25 + 32 * v27)
            goto LABEL_84;
          swift_arrayInitWithCopy();
          if (v27)
            v7[2] += v27;
LABEL_29:
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          goto LABEL_39;
        case 0xBuLL:
          sub_1B1B1DD24(v6);
          swift_retain();
          sub_1B2229430();
          swift_bridgeObjectRelease();
          strcpy((char *)v67, "uint32_t value");
          HIBYTE(v67[1]) = -18;
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v11 = v67[0];
          v12 = v67[1];
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v13 = swift_allocObject();
          *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v13 + 32) = v11;
          v14 = v13 + 32;
          *(_QWORD *)(v13 + 40) = v12;
          sub_1B1B63150();
          *(_QWORD *)(v13 + 48) = 0;
          *(_QWORD *)(v13 + 56) = 0;
          v15 = v4;
          v16 = swift_initStackObject();
          *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v16 + 32) = v13;
          v17 = *(_QWORD *)(v13 + 16);
          swift_bridgeObjectRetain();
          v18 = sub_1B1C65D70(0, v17, 1, v15);
          v7 = v18;
          if (!*(_QWORD *)(v13 + 16))
            goto LABEL_38;
          v19 = (unint64_t)&v18[4 * v18[2] + 4];
          if (v14 < v19 + 32 * v17 && v19 < v14 + 32 * v17)
            goto LABEL_84;
          swift_arrayInitWithCopy();
          if (v17)
            v7[2] += v17;
          goto LABEL_38;
        case 0xCuLL:
          sub_1B1B1DD24(v6);
          swift_retain();
          sub_1B2229430();
          swift_bridgeObjectRelease();
          strcpy((char *)v67, "uint32_t value");
          HIBYTE(v67[1]) = -18;
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v31 = v67[0];
          v32 = v67[1];
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v33 = swift_allocObject();
          *(_OWORD *)(v33 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v33 + 32) = v31;
          v34 = v33 + 32;
          *(_QWORD *)(v33 + 40) = v32;
          sub_1B1B63150();
          *(_QWORD *)(v33 + 48) = 0;
          *(_QWORD *)(v33 + 56) = 0;
          v35 = swift_initStackObject();
          *(_OWORD *)(v35 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v35 + 32) = v33;
          v36 = *(_QWORD *)(v33 + 16);
          swift_bridgeObjectRetain();
          v37 = sub_1B1C65D70(0, v36, 1, v4);
          v7 = v37;
          if (!*(_QWORD *)(v33 + 16))
            goto LABEL_38;
          v38 = (unint64_t)&v37[4 * v37[2] + 4];
          if (v34 < v38 + 32 * v36 && v38 < v34 + 32 * v36)
            goto LABEL_84;
          swift_arrayInitWithCopy();
          if (v36)
            v7[2] += v36;
LABEL_38:
          swift_bridgeObjectRelease();
          sub_1B1A05610(v6);
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
LABEL_39:
          swift_arrayDestroy();
          v1 = v66;
          v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_40:
          sub_1B1B63150();
          v40 = swift_initStackObject();
          *(_OWORD *)(v40 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v40 + 32) = v7;
          v41 = v7[2];
          swift_bridgeObjectRetain();
          v42 = sub_1B1C65D70(0, v41, 1, v4);
          v43 = v42;
          if (!v7[2])
            goto LABEL_48;
          v44 = (unint64_t)&v42[4 * v42[2] + 4];
          if ((unint64_t)(v7 + 4) < v44 + 32 * v41 && v44 < (unint64_t)&v7[4 * v41 + 4])
            goto LABEL_84;
          swift_arrayInitWithCopy();
          if (v41)
            v43[2] += v41;
LABEL_48:
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v5 = sub_1B1C65E78(0, v5[2] + 1, 1, v5);
          v47 = v5[2];
          v46 = v5[3];
          if (v47 >= v46 >> 1)
            v5 = sub_1B1C65E78(v46 > 1, v47 + 1, 1, v5);
          ++v2;
          v3 += 32;
          v5[2] = v47 + 1;
          v5[v47 + 4] = v43;
          sub_1B1A05610(v6);
          v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (v1 != v2)
            continue;
          swift_bridgeObjectRelease();
          v48 = v5[2];
          if (v48)
            goto LABEL_54;
          goto LABEL_73;
        case 0xFuLL:
          if (v6 != 0xF000000000000000)
            goto LABEL_83;
          v7 = sub_1B1C65D70(0, 0, 1, v4);
          goto LABEL_40;
        default:
LABEL_83:
          v67[0] = 0;
          v67[1] = 0xE000000000000000;
          sub_1B1B1DD24(v6);
          sub_1B1B1DD24(v6);
          sub_1B2229430();
          sub_1B22295EC();
          sub_1B2228890();
          sub_1B2229688();
          __break(1u);
          goto LABEL_84;
      }
    }
  }
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v48 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (v48)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    v49 = 0;
    v50 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v51 = v5[v49 + 4];
      v52 = *(_QWORD *)(v51 + 16);
      v53 = v50[2];
      v54 = v53 + v52;
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v54 <= v50[3] >> 1)
      {
        if (*(_QWORD *)(v51 + 16))
          goto LABEL_64;
      }
      else
      {
        if (v53 <= v54)
          v56 = v53 + v52;
        else
          v56 = v53;
        v50 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v56, 1, v50);
        if (*(_QWORD *)(v51 + 16))
        {
LABEL_64:
          v57 = (unint64_t)&v50[4 * v50[2] + 4];
          if (v51 + 32 < v57 + 32 * v52 && v57 < v51 + 32 + 32 * v52)
            goto LABEL_85;
          swift_arrayInitWithCopy();
          if (v52)
            v50[2] += v52;
        }
      }
      swift_bridgeObjectRelease();
      if (v48 == ++v49)
      {
        swift_bridgeObjectRelease();
        goto LABEL_74;
      }
    }
  }
LABEL_73:
  v50 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_74:
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v59 = swift_initStackObject();
  *(_OWORD *)(v59 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v59 + 32) = v50;
  v60 = v50[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v61 = sub_1B1C65D70(0, v60, 1, MEMORY[0x1E0DEE9D8]);
  v62 = v61;
  if (v50[2])
  {
    v63 = (unint64_t)&v61[4 * v61[2] + 4];
    if ((unint64_t)(v50 + 4) < v63 + 32 * v60 && v63 < (unint64_t)&v50[4 * v60 + 4])
    {
      while (1)
      {
LABEL_85:
        sub_1B2229700();
        __break(1u);
LABEL_84:
        swift_release();
      }
    }
    swift_arrayInitWithCopy();
    if (v60)
      v62[2] += v60;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return v62;
}

_QWORD *sub_1B1B52490(uint64_t a1)
{
  uint64_t v1;
  _OWORD *v2;
  _BYTE *v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t inited;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  unint64_t v55;
  unint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = &unk_1B226D000;
  if (v1)
  {
    v3 = (_BYTE *)(swift_bridgeObjectRetain() + 40);
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v6 = *((_QWORD *)v3 - 1);
      if (v6 >> 60 != 13)
        goto LABEL_15;
      v8 = *(_QWORD *)(v6 + 16);
      v7 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(v6 + 32);
      v9 = *(_QWORD *)(v6 + 40);
      v11 = *(unsigned __int8 *)(v6 + 48);
      if (v11 == 3)
      {
        v28 = *v3;
        sub_1B1B1DD24(*((_QWORD *)v3 - 1));
        sub_1B1B1DD24(v6);
        sub_1B1B6326C(v8, v7, v10, v9, 3);
        sub_1B1C96CF0(v6);
        v60 = v5;
        v58 = v10;
        v59 = v9;
        if ((sub_1B1E68FB0(v29, 1u) & 1) != 0)
        {
          if ((v28 & 2) != 0)
            v30 = MEMORY[0x1E0DEBC10];
          else
            v30 = MEMORY[0x1E0DEABD0];
        }
        else
        {
          sub_1B1C96CF0(v6);
        }
        v62 = sub_1B1B4F95C(v30, 1);
        v63 = v31;
        sub_1B2228890();
        swift_bridgeObjectRetain();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v32 = swift_allocObject();
        *(_OWORD *)(v32 + 16) = xmmword_1B226D240;
        *(_QWORD *)(v32 + 32) = v62;
        v33 = v32 + 32;
        *(_QWORD *)(v32 + 40) = v63;
        sub_1B1B63150();
        *(_QWORD *)(v32 + 48) = 0;
        *(_QWORD *)(v32 + 56) = 0;
        inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1B226D240;
        *(_QWORD *)(inited + 32) = v32;
        v35 = *(_QWORD *)(v32 + 16);
        swift_bridgeObjectRetain();
        v36 = sub_1B1C65D70(0, v35, 1, MEMORY[0x1E0DEE9D8]);
        v17 = v36;
        if (*(_QWORD *)(v32 + 16))
        {
          v37 = (unint64_t)&v36[4 * v36[2] + 4];
          if (v33 < v37 + 32 * v35 && v37 < v33 + 32 * v35)
          {
            while (1)
            {
LABEL_73:
              swift_release();
LABEL_74:
              sub_1B2229700();
              __break(1u);
            }
          }
          swift_arrayInitWithCopy();
          if (v35)
            v17[2] += v35;
        }
        swift_bridgeObjectRelease();
        sub_1B1B631E8(v8, v7, v58, v59, 3);
        swift_setDeallocating();
        sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        swift_arrayDestroy();
        sub_1B1A05610(v6);
        v5 = v60;
        v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_16;
      }
      if (v11 == 4)
      {
        v61 = *(_QWORD *)(v6 + 32);
        sub_1B1B1DD24(v6);
        sub_1B1B1DD24(v6);
        swift_bridgeObjectRetain();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_1B226D240;
        *(_QWORD *)(v12 + 32) = v61;
        v13 = v12 + 32;
        *(_QWORD *)(v12 + 40) = v9;
        sub_1B1B63150();
        *(_QWORD *)(v12 + 48) = 0;
        *(_QWORD *)(v12 + 56) = 0;
        v14 = swift_initStackObject();
        *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
        *(_QWORD *)(v14 + 32) = v12;
        v15 = *(_QWORD *)(v12 + 16);
        swift_bridgeObjectRetain();
        v16 = sub_1B1C65D70(0, v15, 1, v4);
        v17 = v16;
        if (*(_QWORD *)(v12 + 16))
        {
          v18 = (unint64_t)&v16[4 * v16[2] + 4];
          if (v13 < v18 + 32 * v15 && v18 < v13 + 32 * v15)
            goto LABEL_73;
          swift_arrayInitWithCopy();
          if (v15)
            v17[2] += v15;
        }
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B1A05610(v6);
      }
      else
      {
LABEL_15:
        sub_1B1B1DD24(*((_QWORD *)v3 - 1));
        v17 = sub_1B1C65D70(0, 0, 1, v4);
      }
LABEL_16:
      sub_1B1B63150();
      v20 = swift_initStackObject();
      *(_OWORD *)(v20 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v20 + 32) = v17;
      v21 = v17[2];
      swift_bridgeObjectRetain();
      v22 = sub_1B1C65D70(0, v21, 1, v4);
      v23 = v22;
      if (v17[2])
      {
        v24 = (unint64_t)&v22[4 * v22[2] + 4];
        if ((unint64_t)(v17 + 4) < v24 + 32 * v21 && v24 < (unint64_t)&v17[4 * v21 + 4])
          goto LABEL_73;
        swift_arrayInitWithCopy();
        if (v21)
          v23[2] += v21;
      }
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = sub_1B1C65E78(0, v5[2] + 1, 1, v5);
      v27 = v5[2];
      v26 = v5[3];
      if (v27 >= v26 >> 1)
        v5 = sub_1B1C65E78(v26 > 1, v27 + 1, 1, v5);
      v3 += 32;
      v5[2] = v27 + 1;
      v5[v27 + 4] = v23;
      sub_1B1A05610(v6);
      if (!--v1)
      {
        swift_bridgeObjectRelease();
        v2 = (_OWORD *)&unk_1B226D000;
        v39 = v5[2];
        if (v39)
          goto LABEL_45;
LABEL_63:
        v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        goto LABEL_64;
      }
    }
  }
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v39 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
  if (!v39)
    goto LABEL_63;
LABEL_45:
  swift_bridgeObjectRetain();
  v40 = 0;
  v41 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v42 = v5;
    v43 = v5[v40 + 4];
    v44 = *(_QWORD *)(v43 + 16);
    v45 = v41[2];
    v46 = v45 + v44;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (!isUniquelyReferenced_nonNull_native || v46 > v41[3] >> 1)
    {
      if (v45 <= v46)
        v48 = v45 + v44;
      else
        v48 = v45;
      v41 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v48, 1, v41);
    }
    v5 = v42;
    if (*(_QWORD *)(v43 + 16))
    {
      v49 = (unint64_t)&v41[4 * v41[2] + 4];
      if (v43 + 32 < v49 + 32 * v44 && v49 < v43 + 32 + 32 * v44)
        goto LABEL_74;
      swift_arrayInitWithCopy();
      if (v44)
        v41[2] += v44;
    }
    swift_bridgeObjectRelease();
    ++v40;
  }
  while (v39 != v40);
  swift_bridgeObjectRelease();
LABEL_64:
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v51 = swift_initStackObject();
  *(_OWORD *)(v51 + 16) = v2[36];
  *(_QWORD *)(v51 + 32) = v41;
  v52 = v41[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v53 = sub_1B1C65D70(0, v52, 1, MEMORY[0x1E0DEE9D8]);
  v54 = v53;
  if (v41[2])
  {
    v55 = (unint64_t)&v53[4 * v53[2] + 4];
    if ((unint64_t)(v41 + 4) < v55 + 32 * v52 && v55 < (unint64_t)&v41[4 * v52 + 4])
      goto LABEL_74;
    swift_arrayInitWithCopy();
    if (v52)
      v54[2] += v52;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return v54;
}

_QWORD *sub_1B1B52C40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t inited;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v44;
  unint64_t v45;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    v3 = swift_bridgeObjectRetain();
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v5 = 32;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v66 = v3;
    do
    {
      v7 = *(_QWORD *)(v2 + v5);
      if (v7 >> 60 == 13 && *(_BYTE *)(v7 + 48) == 1)
      {
        v9 = *(_QWORD *)(v7 + 16);
        v8 = *(_QWORD *)(v7 + 24);
        v10 = *(_QWORD *)(v7 + 32);
        v11 = *(_QWORD *)(v7 + 40);
        v68 = v8;
        v69 = v10;
        v67 = v11;
        if (v8 >= 9)
        {
          sub_1B1B1DD24(v7);
          sub_1B1B1DD24(v7);
          sub_1B1B6326C(v9, v8, v10, v11, 1);
          sub_1B1B632F0(v10);
          v70 = sub_1B1D759B8(1, v10);
          v71 = v15;
          sub_1B2228890();
          v65 = v9;
          sub_1B2228890();
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v16 = swift_allocObject();
          *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v16 + 32) = v70;
          v17 = v16 + 32;
          *(_QWORD *)(v16 + 40) = v71;
          sub_1B1B63150();
          *(_QWORD *)(v16 + 48) = 0;
          *(_QWORD *)(v16 + 56) = 0;
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1B226D240;
          *(_QWORD *)(inited + 32) = v16;
          v19 = *(_QWORD *)(v16 + 16);
          swift_bridgeObjectRetain();
          v20 = sub_1B1C65D70(0, v19, 1, MEMORY[0x1E0DEE9D8]);
          v13 = v20;
          if (*(_QWORD *)(v16 + 16))
          {
            v21 = (unint64_t)&v20[4 * v20[2] + 4];
            if (v17 < v21 + 32 * v19 && v21 < v17 + 32 * v19)
            {
              while (1)
              {
LABEL_94:
                swift_release();
LABEL_95:
                sub_1B2229700();
                __break(1u);
              }
            }
            swift_arrayInitWithCopy();
            if (v19)
              v13[2] += v19;
          }
          swift_bridgeObjectRelease();
          sub_1B1B28D2C(v10);
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          v12 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v9 = v65;
        }
        else
        {
          sub_1B1B1DD24(v7);
          sub_1B1B1DD24(v7);
          sub_1B1B6326C(v9, v8, v10, v11, 1);
          v12 = v4;
          v13 = sub_1B1C65D70(0, 0, 1, v4);
        }
        sub_1B1B63150();
        v23 = swift_initStackObject();
        *(_OWORD *)(v23 + 16) = xmmword_1B226D240;
        *(_QWORD *)(v23 + 32) = v13;
        v24 = v13[2];
        swift_bridgeObjectRetain();
        v25 = sub_1B1C65D70(0, v24, 1, v12);
        v14 = v25;
        if (v13[2])
        {
          v26 = (unint64_t)&v25[4 * v25[2] + 4];
          if ((unint64_t)(v13 + 4) < v26 + 32 * v24 && v26 < (unint64_t)&v13[4 * v24 + 4])
            goto LABEL_94;
          swift_arrayInitWithCopy();
          if (v24)
            v14[2] += v24;
        }
        swift_bridgeObjectRelease();
        sub_1B1B631E8(v9, v68, v69, v67, 1);
        swift_setDeallocating();
        sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        swift_arrayDestroy();
        sub_1B1A05610(v7);
        v2 = v66;
        v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      }
      else
      {
        sub_1B1B1DD24(*(_QWORD *)(v2 + v5));
        v14 = sub_1B1C65D70(0, 0, 1, v4);
      }
      sub_1B1B63150();
      v28 = swift_initStackObject();
      *(_OWORD *)(v28 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v28 + 32) = v14;
      v29 = v14[2];
      swift_bridgeObjectRetain();
      v30 = sub_1B1C65D70(0, v29, 1, v4);
      v31 = v30;
      if (v14[2])
      {
        v32 = (unint64_t)&v30[4 * v30[2] + 4];
        if ((unint64_t)(v14 + 4) < v32 + 32 * v29 && v32 < (unint64_t)&v14[4 * v29 + 4])
          goto LABEL_94;
        swift_arrayInitWithCopy();
        if (v29)
          v31[2] += v29;
      }
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v6 = sub_1B1C65E78(0, v6[2] + 1, 1, v6);
      v35 = v6[2];
      v34 = v6[3];
      if (v35 >= v34 >> 1)
        v6 = sub_1B1C65E78(v34 > 1, v35 + 1, 1, v6);
      v6[2] = v35 + 1;
      v6[v35 + 4] = v31;
      sub_1B1A05610(v7);
      v5 += 32;
      --v1;
      v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    while (v1);
    swift_bridgeObjectRelease();
    v36 = v6[2];
    if (v36)
      goto LABEL_40;
  }
  else
  {
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v36 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v36)
    {
LABEL_40:
      swift_bridgeObjectRetain();
      v37 = 0;
      v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v39 = v6[v37 + 4];
        v40 = *(_QWORD *)(v39 + 16);
        v41 = v38[2];
        v42 = v41 + v40;
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if (isUniquelyReferenced_nonNull_native && v42 <= v38[3] >> 1)
        {
          if (*(_QWORD *)(v39 + 16))
            goto LABEL_50;
        }
        else
        {
          if (v41 <= v42)
            v44 = v41 + v40;
          else
            v44 = v41;
          v38 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v44, 1, v38);
          if (*(_QWORD *)(v39 + 16))
          {
LABEL_50:
            v45 = (unint64_t)&v38[4 * v38[2] + 4];
            if (v39 + 32 < v45 + 32 * v40 && v45 < v39 + 32 + 32 * v40)
              goto LABEL_95;
            swift_arrayInitWithCopy();
            if (v40)
              v38[2] += v40;
          }
        }
        swift_bridgeObjectRelease();
        if (v36 == ++v37)
        {
          swift_bridgeObjectRelease();
          goto LABEL_60;
        }
      }
    }
  }
  v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_60:
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v47 = swift_initStackObject();
  *(_QWORD *)(v47 + 32) = &unk_1E6393780;
  *(_OWORD *)(v47 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v47 + 40) = &unk_1E6393740;
  *(_QWORD *)(v47 + 48) = v38;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v48 = sub_1B1C65D70(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  if (&v48[4 * v48[2] + 8] > qword_1E63937A0 && &v48[4 * v48[2] + 4] < &off_1E63937C0)
    goto LABEL_95;
  swift_arrayInitWithCopy();
  ++v48[2];
  swift_bridgeObjectRelease();
  v50 = *(_QWORD *)(v47 + 40);
  v51 = *(_QWORD *)(v50 + 16);
  v52 = v48[2];
  v53 = v48[3];
  swift_bridgeObjectRetain();
  if (v52 + v51 > (uint64_t)(v53 >> 1))
  {
    if (v52 <= v52 + v51)
      v63 = v52 + v51;
    else
      v63 = v52;
    v48 = sub_1B1C65D70(1, v63, 1, v48);
    if (!*(_QWORD *)(v50 + 16))
      goto LABEL_74;
  }
  else if (!v51)
  {
    goto LABEL_74;
  }
  v54 = (unint64_t)&v48[4 * v48[2] + 4];
  if (v50 + 32 < v54 + 32 * v51 && v54 < v50 + 32 + 32 * v51)
    goto LABEL_95;
  swift_arrayInitWithCopy();
  if (v51)
    v48[2] += v51;
LABEL_74:
  swift_bridgeObjectRelease();
  v56 = *(_QWORD *)(v47 + 48);
  v57 = *(_QWORD *)(v56 + 16);
  v58 = v48[2];
  v59 = v48[3];
  swift_bridgeObjectRetain();
  if (v58 + v57 > (uint64_t)(v59 >> 1))
  {
    if (v58 <= v58 + v57)
      v64 = v58 + v57;
    else
      v64 = v58;
    v48 = sub_1B1C65D70(1, v64, 1, v48);
    if (!*(_QWORD *)(v56 + 16))
      goto LABEL_83;
  }
  else if (!v57)
  {
    goto LABEL_83;
  }
  v60 = (unint64_t)&v48[4 * v48[2] + 4];
  if (v56 + 32 < v60 + 32 * v57 && v60 < v56 + 32 + 32 * v57)
    goto LABEL_95;
  swift_arrayInitWithCopy();
  if (v57)
    v48[2] += v57;
LABEL_83:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return v48;
}

uint64_t sub_1B1B5351C()
{
  uint64_t inited;
  _QWORD *v1;
  uint64_t result;

  sub_1B1B63150();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &unk_1E63936C8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v1 = sub_1B1C65D70(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  if (&v1[4 * v1[2] + 8] <= qword_1E63936E8 || &v1[4 * v1[2] + 4] >= qword_1E6393708)
  {
    swift_arrayInitWithCopy();
    ++v1[2];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v1;
  }
  else
  {
    result = sub_1B2229700();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1B536A0(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  int64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v40;
  unint64_t v41;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  int64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  int64_t v126;

  if (a1)
  {
    if (a1 != 1)
    {
      sub_1B1B63150();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B226D240;
      *(_QWORD *)(inited + 32) = &unk_1E6392A08;
      v17 = sub_1B1B5A040(inited);
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
      goto LABEL_10;
    }
    sub_1B2229430();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_1B226D240;
    *(_QWORD *)(v13 + 32) = a2;
    *(_QWORD *)(v13 + 40) = a3;
    *(_QWORD *)(v13 + 48) = 0;
    *(_QWORD *)(v13 + 56) = 0;
    if ((a4 & 1) != 0)
    {
      sub_1B1B63150();
      v14 = swift_initStackObject();
      *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v14 + 32) = &unk_1E6392CC8;
      v15 = sub_1B1B5A040(v14);
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
    }
    else
    {
      v15 = MEMORY[0x1E0DEE9D8];
    }
    sub_1B1B63150();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1B227BE20;
    *(_QWORD *)(v19 + 32) = v13;
    *(_QWORD *)(v19 + 40) = v15;
    *(_QWORD *)(v19 + 48) = &unk_1E63929C8;
    *(_QWORD *)(v19 + 56) = &unk_1E6392A88;
    *(_QWORD *)(v19 + 64) = &unk_1E6392AC8;
    *(_QWORD *)(v19 + 72) = &unk_1E6392B08;
    *(_QWORD *)(v19 + 80) = &unk_1E6392B48;
    v20 = sub_1B1B5A040(v19);
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v17 = v20;
    swift_arrayDestroy();
  }
  else
  {
    sub_1B1B63150();
    v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_1B226CAD0;
    *(_QWORD *)(v16 + 32) = &unk_1E6392B88;
    *(_QWORD *)(v16 + 40) = &unk_1E6392BC8;
    *(_QWORD *)(v16 + 48) = &unk_1E6392C08;
    *(_QWORD *)(v16 + 56) = &unk_1E6392C48;
    *(_QWORD *)(v16 + 64) = &unk_1E6392C88;
    v17 = sub_1B1B5A040(v16);
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
  }
  swift_deallocClassInstance();
LABEL_10:
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v21 + 32) = 0x746E6174736E6F63;
  *(_QWORD *)(v21 + 40) = 0xE900000000000020;
  *(_QWORD *)(v21 + 48) = 0;
  *(_QWORD *)(v21 + 56) = 0;
  if (a1)
  {
    v22 = 0;
    if (a1 == 1)
    {
      v23 = a8;
LABEL_19:
      swift_bridgeObjectRelease();
LABEL_20:
      sub_1B2229430();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      v25 = 0;
      v28 = swift_allocObject();
      *(_OWORD *)(v28 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v28 + 32) = 0;
      *(_QWORD *)(v28 + 40) = 0xE000000000000000;
      sub_1B1B63150();
      *(_QWORD *)(v28 + 48) = 0;
      *(_QWORD *)(v28 + 56) = 0;
      v29 = swift_initStackObject();
      *(_OWORD *)(v29 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v29 + 32) = v28;
      v26 = sub_1B1B5A040(v29);
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
      if ((v23 & 1) != 0)
        goto LABEL_21;
LABEL_18:
      v27 = MEMORY[0x1E0DEE9D8];
      goto LABEL_22;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = a8;
  v24 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
    goto LABEL_20;
  if (!a1)
    goto LABEL_19;
  v25 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v25 & 1) != 0)
    goto LABEL_20;
  v26 = MEMORY[0x1E0DEE9D8];
  if ((a8 & 1) == 0)
    goto LABEL_18;
LABEL_21:
  sub_1B1B63150();
  v30 = swift_initStackObject();
  *(_OWORD *)(v30 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v30 + 32) = &unk_1E6392A48;
  v27 = sub_1B1B5A040(v30);
  swift_setDeallocating();
  v25 = *(_QWORD *)(v30 + 16);
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
LABEL_22:
  v31 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v123 = *(_QWORD *)(a9 + 16);
  if (v123)
  {
    v117 = v27;
    v118 = v26;
    v119 = v21;
    v120 = v17;
    v32 = swift_bridgeObjectRetain();
    v121 = 0;
    v33 = 0;
    v122 = 7;
    v34 = 32;
    while (1)
    {
      v35 = *(_QWORD *)(v32 + v34);
      v126 = v34;
      v124 = v31;
      switch(v35 >> 60)
      {
        case 3uLL:
        case 4uLL:
        case 0xBuLL:
        case 0xCuLL:
          sub_1B1B63150();
          v34 = swift_initStackObject();
          *(_OWORD *)(v34 + 16) = xmmword_1B226D240;
          v36 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v34 + 32) = MEMORY[0x1E0DEE9D8];
          v25 = v34 + 32;
          sub_1B1B1DD24(v35);
          v27 = *(_QWORD *)(v34 + 32);
          v26 = *(_QWORD *)(v27 + 16);
          v37 = v36[2];
          v38 = v37 + v26;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if (!isUniquelyReferenced_nonNull_native || (v22 = (unint64_t)v36, v38 > v36[3] >> 1))
          {
            if (v37 <= v38)
              v40 = v37 + v26;
            else
              v40 = v37;
            v22 = (unint64_t)sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v40, 1, v36);
          }
          if (!*(_QWORD *)(v27 + 16))
            goto LABEL_39;
          v41 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
          if (v27 + 32 < v41 + 32 * v26 && v41 < v27 + 32 + 32 * v26)
            goto LABEL_207;
          swift_arrayInitWithCopy();
          if (v26)
            *(_QWORD *)(v22 + 16) += v26;
LABEL_39:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          goto LABEL_187;
        case 7uLL:
          v77 = sub_1B1B5EC20(v35);
          v79 = v78;
          sub_1B1B1DD24(v35);
          sub_1B1B1DD24(v35);
          sub_1B2229430();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v34 = swift_allocObject();
          *(_OWORD *)(v34 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v34 + 32) = v77;
          v27 = v34 + 32;
          *(_QWORD *)(v34 + 40) = v79;
          sub_1B1B63150();
          *(_QWORD *)(v34 + 48) = 0;
          *(_QWORD *)(v34 + 56) = 0;
          v25 = swift_initStackObject();
          *(_OWORD *)(v25 + 16) = xmmword_1B226CD10;
          *(_QWORD *)(v25 + 32) = v34;
          v80 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v25 + 40) = MEMORY[0x1E0DEE9D8];
          v26 = *(_QWORD *)(v34 + 16);
          v81 = v80[2];
          v82 = v81 + v26;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v83 = swift_isUniquelyReferenced_nonNull_native();
          if ((v83 & 1) == 0 || (v22 = (unint64_t)v80, v82 > v80[3] >> 1))
          {
            if (v81 <= v82)
              v84 = v81 + v26;
            else
              v84 = v81;
            v22 = (unint64_t)sub_1B1C65D70(v83, v84, 1, v80);
          }
          if (!*(_QWORD *)(v34 + 16))
            goto LABEL_124;
          v85 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
          if (v27 < v85 + 32 * v26 && v85 < v27 + 32 * v26)
            goto LABEL_207;
          swift_arrayInitWithCopy();
          if (v26)
            *(_QWORD *)(v22 + 16) += v26;
LABEL_124:
          swift_bridgeObjectRelease();
          v34 = *(_QWORD *)(v25 + 40);
          v27 = *(_QWORD *)(v34 + 16);
          v86 = *(_QWORD *)(v22 + 16);
          v26 = v86 + v27;
          swift_bridgeObjectRetain();
          v87 = swift_isUniquelyReferenced_nonNull_native();
          if (v87 && v26 <= *(_QWORD *)(v22 + 24) >> 1)
          {
            if (!*(_QWORD *)(v34 + 16))
              goto LABEL_148;
          }
          else
          {
            if (v86 <= v26)
              v91 = v86 + v27;
            else
              v91 = v86;
            v22 = (unint64_t)sub_1B1C65D70(v87, v91, 1, (_QWORD *)v22);
            if (!*(_QWORD *)(v34 + 16))
              goto LABEL_148;
          }
          v92 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
          if (v34 + 32 < v92 + 32 * v27 && v92 < v34 + 32 + 32 * v27)
            goto LABEL_207;
          swift_arrayInitWithCopy();
          if (v27)
            *(_QWORD *)(v22 + 16) += v27;
LABEL_148:
          ++v121;
          goto LABEL_184;
        case 8uLL:
          if (*(unsigned __int8 *)(v35 + 32) >= 2u)
          {
            sub_1B1B63150();
            v22 = swift_initStackObject();
            *(_OWORD *)(v22 + 16) = xmmword_1B226D240;
            v96 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            *(_QWORD *)(v22 + 32) = MEMORY[0x1E0DEE9D8];
            sub_1B1B1DD24(v35);
            sub_1B1B1DD24(v35);
            v26 = *(_QWORD *)(v22 + 32);
            v34 = *(_QWORD *)(v26 + 16);
            v97 = v96[2];
            v25 = v97 + v34;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v98 = swift_isUniquelyReferenced_nonNull_native();
            if (v98 && (v27 = (unint64_t)v96, v25 <= v96[3] >> 1))
            {
              if (!*(_QWORD *)(v26 + 16))
                goto LABEL_173;
            }
            else
            {
              if (v97 <= v25)
                v99 = v97 + v34;
              else
                v99 = v97;
              v27 = (unint64_t)sub_1B1C65D70(v98, v99, 1, v96);
              if (!*(_QWORD *)(v26 + 16))
                goto LABEL_173;
            }
            v100 = v27 + 32 * *(_QWORD *)(v27 + 16) + 32;
            if (v26 + 32 < v100 + 32 * v34 && v100 < v26 + 32 + 32 * v34)
              goto LABEL_207;
            goto LABEL_171;
          }
          sub_1B1B1DD24(v35);
          sub_1B1B1DD24(v35);
          sub_1B2229430();
          swift_bridgeObjectRelease();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v34 = swift_allocObject();
          *(_OWORD *)(v34 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v34 + 32) = 0xD000000000000019;
          v26 = v34 + 32;
          *(_QWORD *)(v34 + 40) = 0x80000001B23305C0;
          sub_1B1B63150();
          *(_QWORD *)(v34 + 48) = 0;
          *(_QWORD *)(v34 + 56) = 0;
          v22 = swift_initStackObject();
          *(_OWORD *)(v22 + 16) = xmmword_1B226CD10;
          *(_QWORD *)(v22 + 32) = v34;
          v56 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v22 + 40) = MEMORY[0x1E0DEE9D8];
          v57 = *(_QWORD *)(v34 + 16);
          v25 = v56[2];
          v58 = v25 + v57;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v59 = swift_isUniquelyReferenced_nonNull_native();
          if (!v59 || (v27 = (unint64_t)v56, v58 > v56[3] >> 1))
          {
            if (v25 <= v58)
              v60 = v25 + v57;
            else
              v60 = v25;
            v27 = (unint64_t)sub_1B1C65D70(v59, v60, 1, v56);
          }
          if (*(_QWORD *)(v34 + 16))
          {
            v61 = v27 + 32 * *(_QWORD *)(v27 + 16) + 32;
            if (v26 < v61 + 32 * v57 && v61 < v26 + 32 * v57)
              goto LABEL_207;
            swift_arrayInitWithCopy();
            if (v57)
              *(_QWORD *)(v27 + 16) += v57;
          }
          swift_bridgeObjectRelease();
          v26 = *(_QWORD *)(v22 + 40);
          v34 = *(_QWORD *)(v26 + 16);
          v25 = *(_QWORD *)(v27 + 16);
          v62 = v25 + v34;
          swift_bridgeObjectRetain();
          v63 = swift_isUniquelyReferenced_nonNull_native();
          if (!v63 || v62 > *(_QWORD *)(v27 + 24) >> 1)
          {
            if (v25 <= v62)
              v64 = v25 + v34;
            else
              v64 = v25;
            v27 = (unint64_t)sub_1B1C65D70(v63, v64, 1, (_QWORD *)v27);
          }
          v122 += 2;
          if (*(_QWORD *)(v26 + 16))
          {
            v65 = v27 + 32 * *(_QWORD *)(v27 + 16) + 32;
            if (v26 + 32 < v65 + 32 * v34 && v65 < v26 + 32 + 32 * v34)
              goto LABEL_207;
LABEL_171:
            swift_arrayInitWithCopy();
            if (v34)
              *(_QWORD *)(v27 + 16) += v34;
          }
LABEL_173:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          sub_1B1B63150();
          v25 = swift_initStackObject();
          *(_OWORD *)(v25 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v25 + 32) = v27;
          v34 = *(_QWORD *)(v27 + 16);
          v102 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v26 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          v103 = v26 + v34;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v104 = swift_isUniquelyReferenced_nonNull_native();
          if (!v104 || (v22 = (unint64_t)v102, v103 > v102[3] >> 1))
          {
            if (v26 <= v103)
              v105 = v26 + v34;
            else
              v105 = v26;
            v22 = (unint64_t)sub_1B1C65D70(v104, v105, 1, v102);
          }
          if (*(_QWORD *)(v27 + 16))
          {
            v106 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
            if (v27 + 32 < v106 + 32 * v34 && v106 < v27 + 32 + 32 * v34)
              goto LABEL_207;
            swift_arrayInitWithCopy();
            if (v34)
              *(_QWORD *)(v22 + 16) += v34;
          }
LABEL_184:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
LABEL_185:
          v95 = v35;
LABEL_186:
          sub_1B1A05610(v95);
LABEL_187:
          sub_1B1B63150();
          v34 = swift_initStackObject();
          *(_OWORD *)(v34 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v34 + 32) = v22;
          v27 = *(_QWORD *)(v22 + 16);
          v107 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v26 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
          v108 = v26 + v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v109 = swift_isUniquelyReferenced_nonNull_native();
          if ((v109 & 1) == 0 || (v25 = (uint64_t)v107, v108 > v107[3] >> 1))
          {
            if (v26 <= v108)
              v110 = v26 + v27;
            else
              v110 = v26;
            v25 = (uint64_t)sub_1B1C65D70(v109, v110, 1, v107);
          }
          v31 = v124;
          if (*(_QWORD *)(v22 + 16))
          {
            v111 = v25 + 32 * *(_QWORD *)(v25 + 16) + 32;
            if (v22 + 32 < v111 + 32 * v27 && v111 < v22 + 32 + 32 * v27)
              goto LABEL_207;
            swift_arrayInitWithCopy();
            if (v27)
              *(_QWORD *)(v25 + 16) += v27;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v31 = sub_1B1C65E78(0, v124[2] + 1, 1, v124);
          v22 = v31[2];
          v112 = v31[3];
          if (v22 >= v112 >> 1)
            v31 = sub_1B1C65E78(v112 > 1, v22 + 1, 1, v31);
          ++v33;
          v31[2] = v22 + 1;
          v31[v22 + 4] = v25;
          sub_1B1A05610(v35);
          v34 = v126 + 32;
          v32 = a9;
          if (v123 == v33)
          {
            swift_bridgeObjectRelease();
            v17 = v120;
            v26 = v118;
            v21 = v119;
            v27 = v117;
            goto LABEL_204;
          }
          break;
        case 9uLL:
          sub_1B1B63150();
          v25 = swift_initStackObject();
          *(_OWORD *)(v25 + 16) = xmmword_1B226D240;
          v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v25 + 32) = MEMORY[0x1E0DEE9D8];
          sub_1B1B1DD24(v35);
          sub_1B1B1DD24(v35);
          v34 = *(_QWORD *)(v25 + 32);
          v27 = *(_QWORD *)(v34 + 16);
          v26 = v66[2];
          v67 = v26 + v27;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v68 = swift_isUniquelyReferenced_nonNull_native();
          if ((v68 & 1) != 0 && (v22 = (unint64_t)v66, v67 <= v66[3] >> 1))
          {
            if (!*(_QWORD *)(v34 + 16))
              goto LABEL_184;
          }
          else
          {
            if (v26 <= v67)
              v88 = v26 + v27;
            else
              v88 = v26;
            v22 = (unint64_t)sub_1B1C65D70(v68, v88, 1, v66);
            if (!*(_QWORD *)(v34 + 16))
              goto LABEL_184;
          }
          v89 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
          if (v34 + 32 < v89 + 32 * v27 && v89 < v34 + 32 + 32 * v27)
          {
            while (1)
            {
LABEL_207:
              sub_1B2229700();
              __break(1u);
LABEL_208:
              sub_1B1B1DD24(v35);
              sub_1B1B1DD24(v35);
              sub_1B1B6326C(v25, v22, v34, v27, v26);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              sub_1B2229430();
              sub_1B22295EC();
              sub_1B2228890();
LABEL_206:
              sub_1B2229688();
              __break(1u);
            }
          }
          swift_arrayInitWithCopy();
          if (v27)
            *(_QWORD *)(v22 + 16) += v27;
          goto LABEL_184;
        case 0xDuLL:
          v25 = *(_QWORD *)(v35 + 16);
          v22 = *(_QWORD *)(v35 + 24);
          v34 = *(_QWORD *)(v35 + 32);
          v27 = *(_QWORD *)(v35 + 40);
          LODWORD(v26) = *(unsigned __int8 *)(v35 + 48);
          if ((_DWORD)v26 != 6 || (v22 | v25 | v34 | v27) != 0)
            goto LABEL_208;
          sub_1B1B63150();
          v34 = swift_initStackObject();
          *(_OWORD *)(v34 + 16) = xmmword_1B226D240;
          v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v34 + 32) = MEMORY[0x1E0DEE9D8];
          v22 = v34 + 32;
          sub_1B1B1DD24(v35);
          sub_1B1B1DD24(v35);
          v27 = *(_QWORD *)(v34 + 32);
          v26 = *(_QWORD *)(v27 + 16);
          v45 = v44[2];
          v46 = v45 + v26;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v47 = swift_isUniquelyReferenced_nonNull_native();
          if (!v47 || (v25 = (uint64_t)v44, v46 > v44[3] >> 1))
          {
            if (v45 <= v46)
              v48 = v45 + v26;
            else
              v48 = v45;
            v25 = (uint64_t)sub_1B1C65D70(v47, v48, 1, v44);
          }
          if (!*(_QWORD *)(v27 + 16))
            goto LABEL_59;
          v49 = v25 + 32 * *(_QWORD *)(v25 + 16) + 32;
          if (v27 + 32 < v49 + 32 * v26 && v49 < v27 + 32 + 32 * v26)
            goto LABEL_207;
          swift_arrayInitWithCopy();
          if (v26)
            *(_QWORD *)(v25 + 16) += v26;
LABEL_59:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          v27 = swift_initStackObject();
          *(_OWORD *)(v27 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v27 + 32) = v25;
          LOBYTE(v26) = v27 + 32;
          v51 = *(_QWORD *)(v25 + 16);
          v34 = v44[2];
          v52 = v34 + v51;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v53 = swift_isUniquelyReferenced_nonNull_native();
          if ((v53 & 1) == 0 || (v22 = (unint64_t)v44, v52 > v44[3] >> 1))
          {
            if (v34 <= v52)
              v54 = v34 + v51;
            else
              v54 = v34;
            v22 = (unint64_t)sub_1B1C65D70(v53, v54, 1, v44);
          }
          if (!*(_QWORD *)(v25 + 16))
            goto LABEL_70;
          v55 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
          if (v25 + 32 < v55 + 32 * v51 && v55 < v25 + 32 + 32 * v51)
            goto LABEL_207;
          swift_arrayInitWithCopy();
          if (v51)
            *(_QWORD *)(v22 + 16) += v51;
LABEL_70:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B1B631E8(0, 0, 0, 0, 6);
          swift_setDeallocating();
          swift_arrayDestroy();
          goto LABEL_185;
        case 0xFuLL:
          if (v35 != 0xF000000000000000)
            goto LABEL_205;
          sub_1B1B1DD24(0xF000000000000000);
          sub_1B2229430();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v34 = swift_allocObject();
          *(_OWORD *)(v34 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v34 + 32) = 0;
          v27 = v34 + 32;
          *(_QWORD *)(v34 + 40) = 0xE000000000000000;
          sub_1B1B63150();
          *(_QWORD *)(v34 + 48) = 0;
          *(_QWORD *)(v34 + 56) = 0;
          v25 = swift_initStackObject();
          *(_OWORD *)(v25 + 16) = xmmword_1B226CD10;
          *(_QWORD *)(v25 + 32) = v34;
          v69 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          *(_QWORD *)(v25 + 40) = MEMORY[0x1E0DEE9D8];
          v26 = *(_QWORD *)(v34 + 16);
          v70 = v69[2];
          v71 = v70 + v26;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          v72 = swift_isUniquelyReferenced_nonNull_native();
          if (!v72 || (v22 = (unint64_t)v69, v71 > v69[3] >> 1))
          {
            if (v70 <= v71)
              v73 = v70 + v26;
            else
              v73 = v70;
            v22 = (unint64_t)sub_1B1C65D70(v72, v73, 1, v69);
          }
          if (!*(_QWORD *)(v34 + 16))
            goto LABEL_109;
          v74 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
          if (v27 < v74 + 32 * v26 && v74 < v27 + 32 * v26)
            goto LABEL_207;
          swift_arrayInitWithCopy();
          if (v26)
            *(_QWORD *)(v22 + 16) += v26;
LABEL_109:
          swift_bridgeObjectRelease();
          v34 = *(_QWORD *)(v25 + 40);
          v27 = *(_QWORD *)(v34 + 16);
          v75 = *(_QWORD *)(v22 + 16);
          v26 = v75 + v27;
          swift_bridgeObjectRetain();
          v76 = swift_isUniquelyReferenced_nonNull_native();
          if (v76 && v26 <= *(_QWORD *)(v22 + 24) >> 1)
          {
            if (!*(_QWORD *)(v34 + 16))
              goto LABEL_157;
          }
          else
          {
            if (v75 <= v26)
              v93 = v75 + v27;
            else
              v93 = v75;
            v22 = (unint64_t)sub_1B1C65D70(v76, v93, 1, (_QWORD *)v22);
            if (!*(_QWORD *)(v34 + 16))
              goto LABEL_157;
          }
          v94 = v22 + 32 * *(_QWORD *)(v22 + 16) + 32;
          if (v34 + 32 < v94 + 32 * v27 && v94 < v34 + 32 + 32 * v27)
            goto LABEL_207;
          swift_arrayInitWithCopy();
          if (v27)
            *(_QWORD *)(v22 + 16) += v27;
LABEL_157:
          ++v122;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          v95 = 0xF000000000000000;
          goto LABEL_186;
        default:
LABEL_205:
          sub_1B1B1DD24(v35);
          sub_1B1B1DD24(v35);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          sub_1B2229430();
          sub_1B22295EC();
          sub_1B2228890();
          goto LABEL_206;
      }
    }
  }
LABEL_204:
  v113 = sub_1B1B5A040((uint64_t)v31);
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v114 = swift_initStackObject();
  *(_OWORD *)(v114 + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(v114 + 32) = v17;
  *(_QWORD *)(v114 + 40) = v21;
  *(_QWORD *)(v114 + 48) = v26;
  *(_QWORD *)(v114 + 56) = v27;
  *(_QWORD *)(v114 + 64) = v113;
  v115 = sub_1B1B5A040(v114);
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return v115;
}

uint64_t sub_1B1B5510C(unsigned __int8 a1)
{
  uint64_t result;

  if (a1 < 3u)
    return a1 + 25649;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1B551D8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *a1;
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_BYTE *)(v2 + 48) = 1;
  sub_1B1CA8B88(v1);
  LOBYTE(v1) = v3;
  swift_release();
  return v1 & 1;
}

double sub_1B1B5524C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W5>, uint64_t a6@<X6>, char a7@<W7>, uint64_t a8@<X8>)
{
  double result;
  __int128 v10;
  _OWORD v11[2];
  uint64_t v12;

  sub_1B1B5A7BC(a1, a2, a3, a4, a5, a6, a6, 2, (uint64_t *)v11, a7);
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a8 = v11[0];
  *(_OWORD *)(a8 + 16) = v10;
  *(_QWORD *)(a8 + 32) = v12;
  return result;
}

uint64_t sub_1B1B5529C@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *a1;
  v5 = a1[1];
  result = sub_1B1B511D8(1);
  if (!v2)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 16);
    v13 = sub_1B1B503C0();
    v14 = v9;
    if (qword_1EEF572C8 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1B63324(v7);
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    if (v8)
    {
      v10 = v13;
      LOBYTE(v13) = v4;
      BYTE1(v13) = v5;
      sub_1B1B55420(v10, v14, (__int16 *)&v13);
      swift_bridgeObjectRelease();
      v11 = sub_1B2228110();
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a2, 0, 1, v11);
    }
    else
    {
      v12 = sub_1B2228110();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1B55420(uint64_t a1, unint64_t a2, __int16 *a3)
{
  uint64_t v3;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  __int16 v14;

  v6 = *a3;
  type metadata accessor for MetalToolchainCodeLoader();
  swift_allocObject();
  sub_1B203D774();
  v8 = v7;
  v14 = v6;
  type metadata accessor for XcodeCommandBuilder();
  swift_allocObject();
  v9 = sub_1B1BD4F68((unsigned __int8 *)&v14);
  if (v9)
  {
    *(_QWORD *)(v8 + 80) = v9;
    swift_release();
    v10 = sub_1B203B918(a1, a2, 0x657475706D6F63, 0xE700000000000000);
    if (!v3)
    {
      sub_1B203D79C((uint64_t)v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1B2228050();
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    sub_1B1B63B64();
    swift_allocError();
    *v12 = 0;
    v12[1] = 0;
    swift_willThrow();
  }
  return swift_release();
}

uint64_t type metadata accessor for MetalScriptCodeGen()
{
  return objc_opt_self();
}

uint64_t sub_1B1B555C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X6>, unsigned __int8 a7@<W7>, _QWORD *a8@<X8>)
{
  int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  __int16 *v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v10 = a7;
  sub_1B1B5A32C(a1, a2, a3, a4, 1, 1);
  if (!v10)
  {
    if (qword_1EEF572C8 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
  {
    sub_1B1B567DC(4);
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  v62 = a6;
  v63 = *(_QWORD *)(a6 + 16);
  v60 = a5;
  if (v63)
  {
    sub_1B1B567DC(4);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = (_BYTE *)(a6 + 40);
    do
    {
      v18 = *((_QWORD *)v12 - 1);
      if (v18 >> 60 == 14)
      {
        v13 = *(_QWORD *)(v18 + 32);
        swift_retain_n();
        sub_1B1A0B30C(v13, v14, v15, v16);
        sub_1B1B4F95C(v17, 0);
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B1B567DC(4);
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1A05610(v18);
        swift_bridgeObjectRelease();
        sub_1B1A05610(v18);
      }
      else if (v18 >> 60 != 15 || v18 != 0xF000000000000000)
      {
        v20 = *v12;
        sub_1B1B1DD24(*((_QWORD *)v12 - 1));
        sub_1B1C96CF0(v18);
        if ((sub_1B1E68FB0(v21, 0) & 1) != 0)
        {
          if ((v20 & 2) != 0)
            v22 = MEMORY[0x1E0DEBC10];
          else
            v22 = MEMORY[0x1E0DEABD0];
        }
        else
        {
          sub_1B1C96CF0(v18);
        }
        sub_1B1B4F95C(v22, 0);
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1B567DC(4);
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1A05610(v18);
        swift_bridgeObjectRelease();
      }
      ++v11;
      v12 += 32;
    }
    while (v63 != v11);
    a6 = v62;
    swift_bridgeObjectRelease();
    a5 = v60;
    if ((v60 & 1) != 0)
      goto LABEL_23;
LABEL_25:
    v23 = 4;
    goto LABEL_26;
  }
  sub_1B2228890();
  if ((a5 & 1) == 0)
    goto LABEL_25;
LABEL_23:
  sub_1B1B567DC(4);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v23 = 8;
LABEL_26:
  sub_1B2228890();
  sub_1B1B567DC(v23);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (!v63)
  {
    sub_1B1B567DC(v23);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v56 = a8;
    if ((a5 & 1) != 0)
      goto LABEL_106;
    goto LABEL_107;
  }
  v61 = v23;
  swift_bridgeObjectRetain();
  v24 = a6;
  v25 = 0;
  v26 = (_BYTE *)(v24 + 40);
  do
  {
    v27 = *((_QWORD *)v26 - 1);
    v28 = *v26;
    v29 = v27 >> 60;
    if (v27 == 0xF000000000000000 && (_DWORD)v29 == 15)
    {
      sub_1B2228890();
      goto LABEL_29;
    }
    if ((_DWORD)v29 == 9)
    {
      swift_retain_n();
      v31 = sub_1B1C95AC4(v27);
      sub_1B1A05610(v27);
      if ((v31 & 1) == 0)
      {
        swift_retain();
        v32 = sub_1B2229304();
        result = swift_conformsToProtocol2();
        if (!result)
        {
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
          return result;
        }
        sub_1B1F24AA4(v32);
        sub_1B1A05610(v27);
        sub_1B1C96CF0(v27);
        if ((sub_1B1E68FB0(v34, 0) & 1) != 0)
        {
          if ((v28 & 2) != 0)
            v35 = MEMORY[0x1E0DEBC10];
          else
            v35 = MEMORY[0x1E0DEABD0];
        }
        else
        {
          sub_1B1C96CF0(v27);
        }
        sub_1B1B4F95C(v35, 0);
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
    }
    else
    {
      sub_1B1B1DD24(v27);
    }
    sub_1B1B1DD24(v27);
    v36 = sub_1B1C95AC4(v27);
    sub_1B1A05610(v27);
    if ((v36 & 1) == 0)
    {
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
LABEL_47:
    sub_1B2228890();
LABEL_48:
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1C96CF0(v27);
    if ((sub_1B1E68FB0(v37, 0) & 1) != 0)
    {
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
LABEL_29:
    v26 += 32;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1B567DC(v23 + 4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1A05610(v27);
    swift_bridgeObjectRelease();
    ++v25;
  }
  while (v63 != v25);
  v38 = v62;
  swift_bridgeObjectRelease();
  sub_1B1B567DC(v23);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v39 = 0;
  v40 = 32;
  v57 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v41 = *(_QWORD *)(v38 + v40);
    v42 = v41 >> 60;
    if (v41 >> 60 != 3 && (_DWORD)v42 != 4)
    {
      if ((_DWORD)v42 == 9)
      {
        v43 = (__int16 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 58);
        goto LABEL_59;
      }
      goto LABEL_53;
    }
    v43 = (__int16 *)((v41 & 0xFFFFFFFFFFFFFFFLL) + 66);
LABEL_59:
    v44 = *v43;
    if ((*v43 & 3) != 0)
    {
      sub_1B1B1DD24(*(_QWORD *)(v38 + v40));
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1C96CF0(v41);
      v46 = v45;
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for frame_constants(0);
        if (swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype()
          || swift_dynamicCastMetatype())
        {
          goto LABEL_67;
        }
        if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
        {
          sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve);
          if (!swift_dynamicCastMetatype())
          {
            if (swift_dynamicCastMetatype())
            {
              if ((sub_1B2229D24() & 1) != 0)
                goto LABEL_67;
            }
            else if (v46 != v57)
            {
              if (swift_dynamicCastMetatype()
                || (type metadata accessor for __vfx_sampler1d(0), swift_dynamicCastMetatype())
                || (type metadata accessor for __vfx_sampler2d(0), swift_dynamicCastMetatype())
                || (type metadata accessor for __vfx_sampler3d(0), swift_dynamicCastMetatype())
                || (swift_conformsToProtocol2() ? (v55 = v46) : (v55 = 0), !v55))
              {
LABEL_67:
                sub_1B1C96CF0(v41);
              }
            }
          }
        }
      }
      if ((_DWORD)v42 == 9)
      {
        if ((*(_WORD *)(v41 + 58) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v41 + 56) & 1) == 0)
            goto LABEL_81;
        }
        else
        {
          if ((*(_BYTE *)(v41 + 56) & 1) == 0)
            goto LABEL_81;
          v58 = *(_QWORD *)(v41 + 40);
          sub_1B1B1DD24(v41);
          swift_retain();
          swift_bridgeObjectRetain();
          v47 = sub_1B2229304();
          if (swift_conformsToProtocol2())
            v48 = v47;
          else
            v48 = 0;
          if (!v48)
            goto LABEL_83;
          v49 = sub_1B2229304();
          result = swift_conformsToProtocol2();
          if (!result)
            goto LABEL_112;
          if (sub_1B1F24B94(v49))
          {
            v50 = sub_1B2229304();
            result = swift_conformsToProtocol2();
            if (!result)
              goto LABEL_113;
            v51 = sub_1B1F24AA4(v50);
            sub_1B1B69BE0(v58, v58);
            v53 = v52;
            swift_release();
            swift_bridgeObjectRelease();
            sub_1B1A05610(v41);
            if (v51 == v53)
            {
LABEL_81:
              swift_retain();
              v54 = sub_1B2229304();
              result = swift_conformsToProtocol2();
              if (!result)
              {
                __break(1u);
                goto LABEL_111;
              }
              sub_1B1F24AA4(v54);
              sub_1B1A05610(v41);
              sub_1B2229430();
              sub_1B2228890();
              sub_1B2229A0C();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              sub_1B2229A0C();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              goto LABEL_85;
            }
          }
          else
          {
LABEL_83:
            swift_release();
            swift_bridgeObjectRelease();
            sub_1B1A05610(v41);
          }
        }
      }
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
LABEL_85:
      v38 = v62;
      if ((v44 & 1) != 0 || (v44 & 2) != 0)
      {
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1B567DC(v61);
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1A05610(v41);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1B1A05610(v41);
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
LABEL_53:
    ++v39;
    v40 += 32;
    if (v63 != v39)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v56 = a8;
  v23 = v61;
  if ((v60 & 1) == 0)
    goto LABEL_107;
LABEL_106:
  sub_1B1B567DC(v23 - 4);
  sub_1B2228890();
  swift_bridgeObjectRelease();
LABEL_107:
  result = sub_1B2228890();
  *v56 = &unk_1E637E5E8;
  v56[1] = 0;
  v56[2] = 0xE000000000000000;
  v56[3] = 11565;
  v56[4] = 0xE200000000000000;
  return result;
}

uint64_t sub_1B1B567DC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;

  sub_1B1A06460();
  v2 = *(_QWORD *)(sub_1B2229214() + 16);
  if (v2)
  {
    v3 = 0;
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      swift_bridgeObjectRetain_n();
      v8 = sub_1B22288C0();
      if (!v9)
      {
LABEL_12:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v4 = sub_1B1C63044(0, v4[2] + 1, 1, v4);
        v14 = v4[2];
        v13 = v4[3];
        if (v14 >= v13 >> 1)
          v4 = sub_1B1C63044(v13 > 1, v14 + 1, 1, v4);
        v4[2] = v14 + 1;
        v5 = &v4[2 * v14];
        v5[4] = 0;
        v6 = v5 + 4;
        v7 = 0xE000000000000000;
        goto LABEL_4;
      }
      v10 = v9;
      while (1)
      {
        if (v8 == 32 && v10 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_8;
        }
        v11 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v11 & 1) == 0)
          break;
LABEL_8:
        v8 = sub_1B22288C0();
        v10 = v12;
        if (!v12)
          goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      v21 = MEMORY[0x1B5E204E4](32, 0xE100000000000000, a1);
      v22 = v15;
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v7 = v22;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_1B1C63044(0, v4[2] + 1, 1, v4);
      v17 = v4[2];
      v16 = v4[3];
      if (v17 >= v16 >> 1)
        v4 = sub_1B1C63044(v16 > 1, v17 + 1, 1, v4);
      v4[2] = v17 + 1;
      v18 = &v4[2 * v17];
      v18[4] = v21;
      v6 = v18 + 4;
LABEL_4:
      ++v3;
      v6[1] = v7;
    }
    while (v3 != v2);
  }
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B19FA230();
  v19 = sub_1B2228644();
  swift_bridgeObjectRelease();
  return v19;
}

_QWORD *sub_1B1B56AC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;

  swift_bridgeObjectRetain();
  v1 = swift_bridgeObjectRetain();
  sub_1B19F4EF8(v1);
  v55 = *(_QWORD *)(a1 + 16);
  if (v55)
  {
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v56 = v2;
      v57 = v3;
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32 + 40 * v2) + 16);
      if (v4)
      {
        v5 = swift_bridgeObjectRetain() + 40;
        v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          swift_bridgeObjectRetain();
          sub_1B2229430();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v7 = swift_allocObject();
          *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v7 + 32) = 0xD000000000000010;
          v8 = v7 + 32;
          *(_QWORD *)(v7 + 40) = 0x80000001B2331010;
          sub_1B1B63150();
          *(_QWORD *)(v7 + 48) = 0;
          *(_QWORD *)(v7 + 56) = 0;
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1B226D240;
          *(_QWORD *)(inited + 32) = v7;
          v10 = *(_QWORD *)(v7 + 16);
          swift_bridgeObjectRetain();
          v11 = sub_1B1C65D70(0, v10, 1, MEMORY[0x1E0DEE9D8]);
          v12 = v11;
          if (*(_QWORD *)(v7 + 16))
          {
            v13 = (unint64_t)&v11[4 * v11[2] + 4];
            if (v8 < v13 + 32 * v10 && v13 < v8 + 32 * v10)
              goto LABEL_82;
            swift_arrayInitWithCopy();
            if (v10)
              v12[2] += v10;
          }
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_1B1C65E78(0, v6[2] + 1, 1, v6);
          v16 = v6[2];
          v15 = v6[3];
          if (v16 >= v15 >> 1)
            v6 = sub_1B1C65E78(v15 > 1, v16 + 1, 1, v6);
          v5 += 16;
          v6[2] = v16 + 1;
          v6[v16 + 4] = v12;
          --v4;
        }
        while (v4);
        swift_bridgeObjectRelease();
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v18 = v6[2];
        if (v18)
        {
LABEL_19:
          swift_bridgeObjectRetain();
          v19 = 0;
          v20 = v17;
          while (1)
          {
            v21 = v6[v19 + 4];
            v22 = *(_QWORD *)(v21 + 16);
            v23 = v20[2];
            v24 = v23 + v22;
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && v24 <= v20[3] >> 1)
            {
              if (*(_QWORD *)(v21 + 16))
                goto LABEL_29;
            }
            else
            {
              if (v23 <= v24)
                v26 = v23 + v22;
              else
                v26 = v23;
              v20 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v26, 1, v20);
              if (*(_QWORD *)(v21 + 16))
              {
LABEL_29:
                v27 = (unint64_t)&v20[4 * v20[2] + 4];
                if (v21 + 32 < v27 + 32 * v22 && v27 < v21 + 32 + 32 * v22)
                  goto LABEL_83;
                swift_arrayInitWithCopy();
                if (v22)
                  v20[2] += v22;
              }
            }
            swift_bridgeObjectRelease();
            if (v18 == ++v19)
            {
              swift_bridgeObjectRelease();
              goto LABEL_39;
            }
          }
        }
      }
      else
      {
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v18 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        if (v18)
          goto LABEL_19;
      }
      v20 = v17;
LABEL_39:
      swift_bridgeObjectRelease();
      sub_1B1B63150();
      v29 = swift_initStackObject();
      *(_OWORD *)(v29 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v29 + 32) = v20;
      v30 = v20[2];
      swift_bridgeObjectRetain();
      v31 = sub_1B1C65D70(0, v30, 1, v17);
      v32 = v31;
      if (v20[2])
      {
        v33 = (unint64_t)&v31[4 * v31[2] + 4];
        if ((unint64_t)(v20 + 4) < v33 + 32 * v30 && v33 < (unint64_t)&v20[4 * v30 + 4])
        {
          while (1)
          {
LABEL_82:
            swift_release();
LABEL_83:
            sub_1B2229700();
            __break(1u);
          }
        }
        swift_arrayInitWithCopy();
        if (v30)
          v32[2] += v30;
      }
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
      v3 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B1C65E78(0, v57[2] + 1, 1, v57);
      v36 = v3[2];
      v35 = v3[3];
      if (v36 >= v35 >> 1)
        v3 = sub_1B1C65E78(v35 > 1, v36 + 1, 1, v3);
      v2 = v56 + 1;
      v3[2] = v36 + 1;
      v3[v36 + 4] = v32;
    }
    while (v56 + 1 != v55);
    swift_bridgeObjectRelease();
    v37 = v3[2];
    if (v37)
      goto LABEL_53;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v37 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v37)
    {
LABEL_53:
      swift_bridgeObjectRetain();
      v38 = 0;
      v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v40 = v3[v38 + 4];
        v41 = *(_QWORD *)(v40 + 16);
        v42 = v39[2];
        v43 = v42 + v41;
        swift_bridgeObjectRetain();
        v44 = swift_isUniquelyReferenced_nonNull_native();
        if (v44 && v43 <= v39[3] >> 1)
        {
          if (*(_QWORD *)(v40 + 16))
            goto LABEL_63;
        }
        else
        {
          if (v42 <= v43)
            v45 = v42 + v41;
          else
            v45 = v42;
          v39 = sub_1B1C65D70(v44, v45, 1, v39);
          if (*(_QWORD *)(v40 + 16))
          {
LABEL_63:
            v46 = (unint64_t)&v39[4 * v39[2] + 4];
            if (v40 + 32 < v46 + 32 * v41 && v46 < v40 + 32 + 32 * v41)
              goto LABEL_83;
            swift_arrayInitWithCopy();
            if (v41)
              v39[2] += v41;
          }
        }
        swift_bridgeObjectRelease();
        if (v37 == ++v38)
        {
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
      }
    }
  }
  v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_73:
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v48 = swift_initStackObject();
  *(_OWORD *)(v48 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v48 + 32) = v39;
  v49 = v39[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = sub_1B1C65D70(0, v49, 1, MEMORY[0x1E0DEE9D8]);
  v51 = v50;
  if (v39[2])
  {
    v52 = (unint64_t)&v50[4 * v50[2] + 4];
    if ((unint64_t)(v39 + 4) < v52 + 32 * v49 && v52 < (unint64_t)&v39[4 * v49 + 4])
      goto LABEL_83;
    swift_arrayInitWithCopy();
    if (v49)
      v51[2] += v49;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return v51;
}

uint64_t sub_1B1B57268()
{
  uint64_t inited;
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  uint64_t v10;

  sub_1B1B63150();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &unk_1E637E4A8;
  *(_QWORD *)(inited + 40) = &unk_1E637E468;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v1 = sub_1B1C65D70(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  if (&v1[4 * v1[2] + 8] <= qword_1E637E4C8 || &v1[4 * v1[2] + 4] >= qword_1E637E4E8)
  {
    swift_arrayInitWithCopy();
    ++v1[2];
    swift_bridgeObjectRelease();
    v3 = *(_QWORD *)(inited + 40);
    v4 = *(_QWORD *)(v3 + 16);
    v5 = v1[2];
    v6 = v1[3];
    swift_bridgeObjectRetain();
    if (v5 + v4 > (uint64_t)(v6 >> 1))
    {
      if (v5 <= v5 + v4)
        v10 = v5 + v4;
      else
        v10 = v5;
      v1 = sub_1B1C65D70(1, v10, 1, v1);
      if (!*(_QWORD *)(v3 + 16))
        goto LABEL_15;
    }
    else if (!v4)
    {
      goto LABEL_15;
    }
    v7 = (unint64_t)&v1[4 * v1[2] + 4];
    if (v3 + 32 < v7 + 32 * v4 && v7 < v3 + 32 + 32 * v4)
      goto LABEL_21;
    swift_arrayInitWithCopy();
    if (v4)
      v1[2] += v4;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v1;
  }
LABEL_21:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1B574A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B214F4BC(a1, a2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = sub_1B1B567DC(4);
  v6 = v5;
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v7 + 32) = v4;
  *(_QWORD *)(v7 + 40) = v6;
  sub_1B1B63150();
  *(_QWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 56) = 0;
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B227BE30;
  *(_QWORD *)(inited + 32) = &unk_1E637E5A8;
  *(_QWORD *)(inited + 40) = &unk_1E637E528;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 56) = &unk_1E637E568;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = sub_1B1C65D70(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  if (&v9[4 * v9[2] + 8] > qword_1E637E5C8 && &v9[4 * v9[2] + 4] < qword_1E637E5E8)
    goto LABEL_40;
  swift_arrayInitWithCopy();
  ++v9[2];
  swift_bridgeObjectRelease();
  v11 = *(_QWORD *)(inited + 40);
  v12 = *(_QWORD *)(v11 + 16);
  v13 = v9[2];
  v14 = v9[3];
  swift_bridgeObjectRetain();
  if (v13 + v12 > (uint64_t)(v14 >> 1))
  {
    if (v13 <= v13 + v12)
      v27 = v13 + v12;
    else
      v27 = v13;
    v9 = sub_1B1C65D70(1, v27, 1, v9);
    if (!*(_QWORD *)(v11 + 16))
      goto LABEL_12;
  }
  else if (!v12)
  {
    goto LABEL_12;
  }
  v15 = (unint64_t)&v9[4 * v9[2] + 4];
  if (v11 + 32 < v15 + 32 * v12 && v15 < v11 + 32 + 32 * v12)
    goto LABEL_40;
  swift_arrayInitWithCopy();
  if (v12)
    v9[2] += v12;
LABEL_12:
  swift_bridgeObjectRelease();
  v16 = *(_QWORD *)(inited + 48);
  v17 = *(_QWORD *)(v16 + 16);
  v18 = v9[2];
  v19 = v9[3];
  swift_bridgeObjectRetain();
  if (v18 + v17 > (uint64_t)(v19 >> 1))
  {
    if (v18 <= v18 + v17)
      v28 = v18 + v17;
    else
      v28 = v18;
    v9 = sub_1B1C65D70(1, v28, 1, v9);
    if (!*(_QWORD *)(v16 + 16))
      goto LABEL_18;
  }
  else if (!v17)
  {
    goto LABEL_18;
  }
  v20 = (unint64_t)&v9[4 * v9[2] + 4];
  if (v16 + 32 < v20 + 32 * v17 && v20 < v16 + 32 + 32 * v17)
    goto LABEL_40;
  swift_arrayInitWithCopy();
  if (v17)
    v9[2] += v17;
LABEL_18:
  swift_bridgeObjectRelease();
  v21 = *(_QWORD *)(inited + 56);
  v22 = *(_QWORD *)(v21 + 16);
  v23 = v9[2];
  v24 = v9[3];
  swift_bridgeObjectRetain();
  if (v23 + v22 > (uint64_t)(v24 >> 1))
  {
    if (v23 <= v23 + v22)
      v29 = v23 + v22;
    else
      v29 = v23;
    v9 = sub_1B1C65D70(1, v29, 1, v9);
    if (!*(_QWORD *)(v21 + 16))
      goto LABEL_24;
  }
  else if (!v22)
  {
LABEL_24:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v9;
  }
  v25 = (unint64_t)&v9[4 * v9[2] + 4];
  if (v21 + 32 >= v25 + 32 * v22 || v25 >= v21 + 32 + 32 * v22)
  {
    swift_arrayInitWithCopy();
    if (v22)
      v9[2] += v22;
    goto LABEL_24;
  }
LABEL_40:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

_QWORD *sub_1B1B578CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t inited;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;

  swift_bridgeObjectRetain();
  v1 = swift_bridgeObjectRetain();
  sub_1B19F4EF8(v1);
  v62 = *(_QWORD *)(a1 + 16);
  if (v62)
  {
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v63 = v2;
      v64 = v3;
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32 + 40 * v2) + 16);
      if (v4)
      {
        v5 = swift_bridgeObjectRetain() + 40;
        v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          swift_bridgeObjectRetain();
          sub_1B2229430();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2228890();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v7 = swift_allocObject();
          *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
          *(_QWORD *)(v7 + 32) = 2236539;
          v8 = v7 + 32;
          *(_QWORD *)(v7 + 40) = 0xE300000000000000;
          sub_1B1B63150();
          *(_QWORD *)(v7 + 48) = 0;
          *(_QWORD *)(v7 + 56) = 0;
          inited = swift_initStackObject();
          *(_OWORD *)(inited + 16) = xmmword_1B226D240;
          *(_QWORD *)(inited + 32) = v7;
          v10 = *(_QWORD *)(v7 + 16);
          swift_bridgeObjectRetain();
          v11 = sub_1B1C65D70(0, v10, 1, MEMORY[0x1E0DEE9D8]);
          v12 = v11;
          if (*(_QWORD *)(v7 + 16))
          {
            v13 = (unint64_t)&v11[4 * v11[2] + 4];
            if (v8 < v13 + 32 * v10 && v13 < v8 + 32 * v10)
              goto LABEL_96;
            swift_arrayInitWithCopy();
            if (v10)
              v12[2] += v10;
          }
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          swift_arrayDestroy();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v6 = sub_1B1C65E78(0, v6[2] + 1, 1, v6);
          v16 = v6[2];
          v15 = v6[3];
          if (v16 >= v15 >> 1)
            v6 = sub_1B1C65E78(v15 > 1, v16 + 1, 1, v6);
          v5 += 16;
          v6[2] = v16 + 1;
          v6[v16 + 4] = v12;
          --v4;
        }
        while (v4);
        swift_bridgeObjectRelease();
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v18 = v6[2];
        if (v18)
        {
LABEL_19:
          swift_bridgeObjectRetain();
          v19 = 0;
          v20 = v17;
          while (1)
          {
            v21 = v6[v19 + 4];
            v22 = *(_QWORD *)(v21 + 16);
            v23 = v20[2];
            v24 = v23 + v22;
            swift_bridgeObjectRetain();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && v24 <= v20[3] >> 1)
            {
              if (*(_QWORD *)(v21 + 16))
                goto LABEL_29;
            }
            else
            {
              if (v23 <= v24)
                v26 = v23 + v22;
              else
                v26 = v23;
              v20 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v26, 1, v20);
              if (*(_QWORD *)(v21 + 16))
              {
LABEL_29:
                v27 = (unint64_t)&v20[4 * v20[2] + 4];
                if (v21 + 32 < v27 + 32 * v22 && v27 < v21 + 32 + 32 * v22)
                  goto LABEL_97;
                swift_arrayInitWithCopy();
                if (v22)
                  v20[2] += v22;
              }
            }
            swift_bridgeObjectRelease();
            if (v18 == ++v19)
            {
              swift_bridgeObjectRelease();
              goto LABEL_39;
            }
          }
        }
      }
      else
      {
        v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v18 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
        if (v18)
          goto LABEL_19;
      }
      v20 = v17;
LABEL_39:
      swift_bridgeObjectRelease();
      sub_1B1B63150();
      v29 = swift_initStackObject();
      *(_OWORD *)(v29 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v29 + 32) = v20;
      v30 = v20[2];
      swift_bridgeObjectRetain();
      v31 = sub_1B1C65D70(0, v30, 1, v17);
      v32 = v31;
      if (v20[2])
      {
        v33 = (unint64_t)&v31[4 * v31[2] + 4];
        if ((unint64_t)(v20 + 4) < v33 + 32 * v30 && v33 < (unint64_t)&v20[4 * v30 + 4])
        {
          while (1)
          {
LABEL_96:
            swift_release();
LABEL_97:
            sub_1B2229700();
            __break(1u);
          }
        }
        swift_arrayInitWithCopy();
        if (v30)
          v32[2] += v30;
      }
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
      v3 = v64;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B1C65E78(0, v64[2] + 1, 1, v64);
      v36 = v3[2];
      v35 = v3[3];
      if (v36 >= v35 >> 1)
        v3 = sub_1B1C65E78(v35 > 1, v36 + 1, 1, v3);
      v2 = v63 + 1;
      v3[2] = v36 + 1;
      v3[v36 + 4] = v32;
    }
    while (v63 + 1 != v62);
    swift_bridgeObjectRelease();
    v37 = v3[2];
    if (v37)
      goto LABEL_53;
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v37 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (v37)
    {
LABEL_53:
      swift_bridgeObjectRetain();
      v38 = 0;
      v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      while (1)
      {
        v40 = v3[v38 + 4];
        v41 = *(_QWORD *)(v40 + 16);
        v42 = v39[2];
        v43 = v42 + v41;
        swift_bridgeObjectRetain();
        v44 = swift_isUniquelyReferenced_nonNull_native();
        if (v44 && v43 <= v39[3] >> 1)
        {
          if (*(_QWORD *)(v40 + 16))
            goto LABEL_63;
        }
        else
        {
          if (v42 <= v43)
            v45 = v42 + v41;
          else
            v45 = v42;
          v39 = sub_1B1C65D70(v44, v45, 1, v39);
          if (*(_QWORD *)(v40 + 16))
          {
LABEL_63:
            v46 = (unint64_t)&v39[4 * v39[2] + 4];
            if (v40 + 32 < v46 + 32 * v41 && v46 < v40 + 32 + 32 * v41)
              goto LABEL_97;
            swift_arrayInitWithCopy();
            if (v41)
              v39[2] += v41;
          }
        }
        swift_bridgeObjectRelease();
        if (v37 == ++v38)
        {
          swift_bridgeObjectRelease();
          goto LABEL_73;
        }
      }
    }
  }
  v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_73:
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v48 = swift_initStackObject();
  *(_OWORD *)(v48 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v48 + 32) = v39;
  *(_QWORD *)(v48 + 40) = qword_1E637E4E8;
  v49 = v39[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v50 = sub_1B1C65D70(0, v49, 1, MEMORY[0x1E0DEE9D8]);
  v51 = v50;
  if (v39[2])
  {
    v52 = (unint64_t)&v50[4 * v50[2] + 4];
    if ((unint64_t)(v39 + 4) < v52 + 32 * v49 && v52 < (unint64_t)&v39[4 * v49 + 4])
      goto LABEL_97;
    swift_arrayInitWithCopy();
    if (v49)
      v51[2] += v49;
  }
  swift_bridgeObjectRelease();
  v54 = *(_QWORD *)(v48 + 40);
  v55 = *(_QWORD *)(v54 + 16);
  v56 = v51[2];
  v57 = v51[3];
  swift_bridgeObjectRetain();
  if (v56 + v55 > (uint64_t)(v57 >> 1))
  {
    if (v56 <= v56 + v55)
      v61 = v56 + v55;
    else
      v61 = v56;
    v51 = sub_1B1C65D70(1, v61, 1, v51);
    if (!*(_QWORD *)(v54 + 16))
      goto LABEL_90;
  }
  else if (!v55)
  {
    goto LABEL_90;
  }
  v58 = (unint64_t)&v51[4 * v51[2] + 4];
  if (v54 + 32 < v58 + 32 * v55 && v58 < v54 + 32 + 32 * v55)
    goto LABEL_97;
  swift_arrayInitWithCopy();
  if (v55)
    v51[2] += v55;
LABEL_90:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  swift_arrayDestroy();
  return v51;
}

uint64_t sub_1B1B5812C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v4 = v1;
  v6 = sub_1B1B511D8(a1);
  if (!v2)
  {
    v7 = v6;
    v3 = *(_QWORD *)(v6 + 16);
    sub_1B1B503C0();
    if (qword_1EEF572C8 != -1)
      swift_once();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v9 = *(_QWORD *)(v1 + 16);
    v8 = *(_QWORD **)(v1 + 24);
    v10 = *(_QWORD *)(v4 + 32);
    type metadata accessor for SwiftScriptCodeGen();
    swift_initStackObject();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1B5A24C(v9, v8, v10);
    swift_release();
    swift_bridgeObjectRelease();
    v12 = sub_1B1B511D8(a1 & 1);
    swift_release();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B214F4B0(v7, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B214EFA0(0x72746E655F786676, 0xEB00000000745F79);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B214F4C8(v7, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v13 = swift_retain();
    sub_1B214F4D4(v13);
    swift_release();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B63324(v7);
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t type metadata accessor for CScriptCodeGen()
{
  return objc_opt_self();
}

uint64_t sub_1B1B5841C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X6>, unsigned __int8 a7@<W7>, _QWORD *a8@<X8>)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int16 *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v51;
  uint64_t v52;
  uint64_t v54;

  v9 = a7;
  sub_1B1B5AF00(a1, a2, a3, a4);
  if (!v9)
  {
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
  }
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1B567DC(4);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if ((a5 & 1) != 0)
  {
    sub_1B1B567DC(4);
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  v10 = a6;
  v54 = *(_QWORD *)(a6 + 16);
  v51 = a5;
  if (v54)
  {
    sub_1B1B567DC(4);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRetain();
    v11 = 0;
    v12 = a6 + 40;
    do
    {
      v13 = *(_QWORD *)(v12 - 8);
      if (v13 != 0xF000000000000000)
      {
        sub_1B1B1DD24(v13);
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1C96CF0(v13);
        if ((sub_1B1E68FB0(v14, 2u) & 1) == 0)
          sub_1B1C96CF0(v13);
        sub_1B222A210();
        swift_bridgeObjectRetain();
        v15 = sub_1B2228914();
        swift_bridgeObjectRelease();
        if ((v15 & 1) != 0)
        {
          sub_1B2228854();
          sub_1B22287E8();
        }
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1B567DC(4);
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1A05610(v13);
        swift_bridgeObjectRelease();
      }
      ++v11;
      v12 += 32;
    }
    while (v54 != v11);
    v10 = a6;
    swift_bridgeObjectRelease();
    if ((a5 & 1) != 0)
      goto LABEL_15;
LABEL_17:
    v16 = 4;
    goto LABEL_18;
  }
  sub_1B2228890();
  if ((a5 & 1) == 0)
    goto LABEL_17;
LABEL_15:
  sub_1B1B567DC(4);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v16 = 8;
LABEL_18:
  sub_1B2228890();
  sub_1B1B567DC(v16);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if (!v54)
  {
    sub_1B1B567DC(v16);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    if ((a5 & 1) != 0)
      goto LABEL_92;
    goto LABEL_93;
  }
  v52 = v16;
  v17 = v16 + 4;
  swift_bridgeObjectRetain();
  v18 = 0;
  v19 = (_BYTE *)(v10 + 40);
  do
  {
    v20 = *((_QWORD *)v19 - 1);
    v21 = *v19;
    v22 = v20 >> 60;
    if (v20 == 0xF000000000000000 && (_DWORD)v22 == 15)
    {
      sub_1B2228890();
      goto LABEL_21;
    }
    if ((_DWORD)v22 == 9)
    {
      swift_retain_n();
      v24 = sub_1B1C95AC4(v20);
      sub_1B1A05610(v20);
      if ((v24 & 1) == 0)
      {
        swift_retain();
        v25 = sub_1B2229304();
        result = swift_conformsToProtocol2();
        if (!result)
        {
LABEL_97:
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          __break(1u);
          return result;
        }
        sub_1B1F24AA4(v25);
        sub_1B1A05610(v20);
        sub_1B2229430();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1C96CF0(v20);
        if ((sub_1B1E68FB0(v27, 2u) & 1) == 0)
          sub_1B1C96CF0(v20);
        v17 = v16 + 4;
        sub_1B207A300();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        goto LABEL_35;
      }
    }
    else
    {
      sub_1B1B1DD24(v20);
    }
    sub_1B1B1DD24(v20);
    sub_1B1C95AC4(v20);
    sub_1B1A05610(v20);
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
LABEL_35:
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1C96CF0(v20);
    if ((sub_1B1E68FB0(v28, 2u) & 1) != 0 || (v21 & 2) == 0)
    {
      sub_1B1C96CF0(v20);
      sub_1B1E68FB0(v29, 2u);
    }
LABEL_21:
    v19 += 32;
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1B567DC(v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1A05610(v20);
    swift_bridgeObjectRelease();
    ++v18;
  }
  while (v54 != v18);
  v30 = a6;
  swift_bridgeObjectRelease();
  sub_1B1B567DC(v16);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v31 = 0;
  v32 = 32;
  v48 = MEMORY[0x1E0DEE9B8] + 8;
  while (2)
  {
    v33 = *(_QWORD *)(v30 + v32);
    v34 = v33 >> 60;
    if (v33 >> 60 != 3 && (_DWORD)v34 != 4)
    {
      if ((_DWORD)v34 == 9)
      {
        v35 = (__int16 *)((v33 & 0xFFFFFFFFFFFFFFFLL) + 58);
        goto LABEL_47;
      }
      goto LABEL_41;
    }
    v35 = (__int16 *)((v33 & 0xFFFFFFFFFFFFFFFLL) + 66);
LABEL_47:
    v36 = *v35;
    if ((*v35 & 3) != 0)
    {
      sub_1B1B1DD24(*(_QWORD *)(v30 + v32));
      swift_bridgeObjectRetain();
      swift_retain();
      sub_1B1C96CF0(v33);
      v38 = v37;
      if (!swift_dynamicCastMetatype())
      {
        type metadata accessor for frame_constants(0);
        if (!swift_dynamicCastMetatype())
        {
          if (swift_dynamicCastMetatype()
            || swift_dynamicCastMetatype()
            || swift_dynamicCastMetatype()
            || swift_dynamicCastMetatype()
            || swift_dynamicCastMetatype()
            || !swift_dynamicCastMetatype()
            && !swift_dynamicCastMetatype()
            && (sub_1B1AED5E4(0, (unint64_t *)&qword_1ED4B9F38, MEMORY[0x1E0DEB188], (uint64_t)&off_1E63C66D8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))type metadata accessor for Curve), !swift_dynamicCastMetatype())&& (swift_dynamicCastMetatype()|| v38 != v48&& !swift_dynamicCastMetatype()&& (type metadata accessor for __vfx_sampler1d(0), !swift_dynamicCastMetatype())&& (type metadata accessor for __vfx_sampler2d(0), !swift_dynamicCastMetatype())&& (type metadata accessor for __vfx_sampler3d(0), !swift_dynamicCastMetatype())&& (swift_conformsToProtocol2() ? (v47 = v38) : (v47 = 0), !v47)))
          {
            sub_1B1C96CF0(v33);
          }
        }
      }
      if ((_DWORD)v34 == 9)
      {
        if ((*(_WORD *)(v33 + 58) & 0x80) != 0)
        {
          if ((*(_BYTE *)(v33 + 56) & 1) == 0)
            goto LABEL_69;
        }
        else
        {
          if ((*(_BYTE *)(v33 + 56) & 1) == 0)
            goto LABEL_69;
          v49 = *(_QWORD *)(v33 + 40);
          sub_1B1B1DD24(v33);
          swift_retain();
          swift_bridgeObjectRetain();
          v39 = sub_1B2229304();
          if (swift_conformsToProtocol2())
            v40 = v39;
          else
            v40 = 0;
          if (!v40)
            goto LABEL_71;
          v41 = sub_1B2229304();
          result = swift_conformsToProtocol2();
          if (!result)
            goto LABEL_98;
          if (sub_1B1F24B94(v41))
          {
            v42 = sub_1B2229304();
            result = swift_conformsToProtocol2();
            if (!result)
              goto LABEL_99;
            v43 = sub_1B1F24AA4(v42);
            sub_1B1B69BE0(v49, v49);
            v45 = v44;
            swift_release();
            swift_bridgeObjectRelease();
            sub_1B1A05610(v33);
            if (v43 == v45)
            {
LABEL_69:
              swift_retain();
              v46 = sub_1B2229304();
              result = swift_conformsToProtocol2();
              if (!result)
              {
                __break(1u);
                goto LABEL_97;
              }
              sub_1B1F24AA4(v46);
              sub_1B1A05610(v33);
              sub_1B2229430();
              sub_1B2228890();
              sub_1B2229A0C();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              sub_1B2229A0C();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              goto LABEL_73;
            }
          }
          else
          {
LABEL_71:
            swift_release();
            swift_bridgeObjectRelease();
            sub_1B1A05610(v33);
          }
        }
      }
      sub_1B2229430();
      sub_1B2228890();
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
LABEL_73:
      sub_1B2228890();
      v30 = a6;
      if ((v36 & 1) != 0 || (v36 & 2) != 0)
      {
        sub_1B2228890();
        sub_1B1B567DC(v52);
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1A05610(v33);
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRelease();
        sub_1B1A05610(v33);
      }
      swift_release();
      swift_bridgeObjectRelease();
    }
LABEL_41:
    ++v31;
    v32 += 32;
    if (v54 != v31)
      continue;
    break;
  }
  swift_bridgeObjectRelease();
  v16 = v52;
  if ((v51 & 1) == 0)
    goto LABEL_93;
LABEL_92:
  v16 -= 4;
  sub_1B1B567DC(v16);
  sub_1B2228890();
  swift_bridgeObjectRelease();
LABEL_93:
  sub_1B1B567DC(v16 - 4);
  sub_1B2228890();
  result = swift_bridgeObjectRelease();
  *a8 = &unk_1E6395FD8;
  a8[1] = 0;
  a8[2] = 0xE000000000000000;
  a8[3] = 11565;
  a8[4] = 0xE200000000000000;
  return result;
}

uint64_t sub_1B1B59590(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1B1B511D8(a1);
  if (!v2)
  {
    v4 = v3;
    sub_1B1B503C0();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1B637E4(v4);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v1 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t type metadata accessor for SwiftScriptCodeGen()
{
  return objc_opt_self();
}

uint64_t sub_1B1B59664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1B596C0(uint64_t a1)
{
  uint64_t v2;

  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B1B59714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ScriptIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1B59758(int a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t);
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  int64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t *v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  char v103;
  char v104;
  char v105;
  unint64_t v106;
  char *v108;
  int v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  _QWORD *v116;
  void (*v117)(char *, uint64_t);
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  _QWORD *v125;

  v109 = a1;
  v5 = sub_1B2227DA4();
  v6 = *(_QWORD **)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v115 = (char *)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v108 - v11;
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v108 - v15;
  MEMORY[0x1E0C80A78](v17, v18);
  v20 = (char *)&v108 - v19;
  sub_1B2227D5C();
  sub_1B2227D38();
  sub_1B2227D68();
  v116 = v6;
  v21 = (void (*)(char *, uint64_t))v6[1];
  v112 = v12;
  v21(v12, v5);
  v114 = v16;
  v117 = v21;
  v118 = v5;
  v21(v16, v5);
  v119 = a2;
  v120 = a3;
  v22 = sub_1B1A06460();
  v108 = v20;
  v113 = v22;
  v23 = sub_1B2229208();
  v24 = *(_QWORD *)(v23 + 16);
  v25 = MEMORY[0x1E0DEE9D8];
  if (v24)
  {
    v26 = (uint64_t *)(v23 + 40);
    v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v32 = *(v26 - 1);
      v31 = *v26;
      v33 = HIBYTE(*v26) & 0xF;
      if ((*v26 & 0x2000000000000000) == 0)
        v33 = v32 & 0xFFFFFFFFFFFFLL;
      if (v33)
      {
        swift_bridgeObjectRetain();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v119 = v27;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1B2029FFC(0, v27[2] + 1, 1);
          v27 = v119;
        }
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
        {
          sub_1B2029FFC(v28 > 1, v29 + 1, 1);
          v27 = v119;
        }
        v27[2] = v29 + 1;
        v30 = &v27[2 * v29];
        v30[4] = v32;
        v30[5] = v31;
      }
      v26 += 2;
      --v24;
    }
    while (v24);
  }
  else
  {
    v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v35 = v27[2];
  if (!v35)
    goto LABEL_24;
  v36 = v27[5];
  v37 = v27[4] & 0xFFFFFFFFFFFFLL;
  if ((v36 & 0x2000000000000000) != 0)
    v37 = HIBYTE(v36) & 0xF;
  if (v37)
  {
    v123 = v25;
    sub_1B2029FFC(0, v35, 0);
    v38 = v27 + 5;
    v39 = MEMORY[0x1E0DEA968];
    do
    {
      v40 = *v38;
      v119 = (_QWORD *)*(v38 - 1);
      v120 = v40;
      swift_bridgeObjectRetain();
      v41 = v112;
      sub_1B2227D98();
      v42 = v115;
      sub_1B2227D50();
      sub_1B2227D8C();
      v43 = v42;
      v45 = v117;
      v44 = v118;
      v117(v43, v118);
      sub_1B2227D74();
      v46 = v114;
      ((void (*)(char *, char *, uint64_t))v116[4])(v114, v41, v44);
      v47 = sub_1B2229208();
      v45(v46, v44);
      v119 = (_QWORD *)v47;
      sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, v39, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v49 = v48;
      v110 = sub_1B19FA230();
      v111 = v49;
      v50 = sub_1B2228644();
      v52 = v51;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v53 = (_QWORD *)v123;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B2029FFC(0, v53[2] + 1, 1);
        v53 = (_QWORD *)v123;
      }
      v55 = v53[2];
      v54 = v53[3];
      if (v55 >= v54 >> 1)
      {
        sub_1B2029FFC(v54 > 1, v55 + 1, 1);
        v53 = (_QWORD *)v123;
      }
      v38 += 2;
      v53[2] = v55 + 1;
      v56 = &v53[2 * v55];
      v56[4] = v50;
      v56[5] = v52;
      --v35;
    }
    while (v35);
    swift_release();
    v58 = v53[2];
    v59 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v58)
    {
      v60 = v53 + 5;
      v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        v66 = *(v60 - 1);
        v65 = *v60;
        v67 = HIBYTE(*v60) & 0xF;
        if ((*v60 & 0x2000000000000000) == 0)
          v67 = v66 & 0xFFFFFFFFFFFFLL;
        if (v67)
        {
          swift_bridgeObjectRetain();
          v68 = swift_isUniquelyReferenced_nonNull_native();
          v119 = v61;
          if ((v68 & 1) == 0)
          {
            sub_1B2029FFC(0, v61[2] + 1, 1);
            v61 = v119;
          }
          v63 = v61[2];
          v62 = v61[3];
          if (v63 >= v62 >> 1)
          {
            sub_1B2029FFC(v62 > 1, v63 + 1, 1);
            v61 = v119;
          }
          v61[2] = v63 + 1;
          v64 = &v61[2 * v63];
          v64[4] = v66;
          v64[5] = v65;
        }
        v60 += 2;
        --v58;
      }
      while (v58);
    }
    else
    {
      v61 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    swift_release();
    v125 = v59;
    sub_1B2029FFC(0, 0, 0);
    v69 = v125;
    v70 = v61[2];
    if (v70)
    {
      swift_retain();
      v71 = 0;
      v116 = v61;
      do
      {
        v73 = v61[v71 + 4];
        v72 = v61[v71 + 5];
        if ((v109 & 1) != 0 || v71 * 8)
        {
          swift_bridgeObjectRetain();
          sub_1B2228854();
          sub_1B2228974();
          v74 = sub_1B222916C();
          v76 = v75;
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          v77 = sub_1B1DCD8E8();
          v79 = v78;
          v81 = v80;
          v83 = v82;
          swift_bridgeObjectRelease();
          v123 = v74;
          v124 = v76;
          v119 = (_QWORD *)v77;
          v120 = v79;
          v121 = v81;
          v122 = v83;
          sub_1B1B25B50();
          swift_bridgeObjectRetain();
          sub_1B2228878();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v73 = v123;
          v72 = v124;
        }
        else
        {
          swift_bridgeObjectRetain();
        }
        v125 = v69;
        v85 = v69[2];
        v84 = v69[3];
        if (v85 >= v84 >> 1)
        {
          sub_1B2029FFC(v84 > 1, v85 + 1, 1);
          v69 = v125;
        }
        v69[2] = v85 + 1;
        v86 = &v69[2 * v85];
        v86[4] = v73;
        v86[5] = v72;
        v71 += 2;
        --v70;
        v61 = v116;
      }
      while (v70);
      swift_release();
    }
    swift_release();
    v119 = v69;
    v87 = sub_1B2228644();
    v89 = v88;
    swift_release();
    v90 = HIBYTE(v89) & 0xF;
    if ((v89 & 0x2000000000000000) == 0)
      v90 = v87 & 0xFFFFFFFFFFFFLL;
    if (v90)
    {
      swift_bridgeObjectRetain();
      v57 = v87;
      v91 = v89;
      if ((v109 & 1) != 0)
      {
        sub_1B1B5A1CC();
        swift_bridgeObjectRelease();
        v92 = sub_1B2229160();
        v94 = v93;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        v95 = sub_1B1DCD8E8();
        v97 = v96;
        v99 = v98;
        v101 = v100;
        swift_bridgeObjectRelease();
        v123 = v92;
        v124 = v94;
        v119 = (_QWORD *)v95;
        v120 = v97;
        v121 = v99;
        v122 = v101;
        sub_1B1B25B50();
        swift_bridgeObjectRetain();
        sub_1B2228878();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v57 = v123;
        v91 = v124;
      }
      sub_1B2228950();
      v102 = sub_1B2228608();
      swift_bridgeObjectRelease();
      if ((v102 & 1) != 0)
      {
        v103 = sub_1B1DB8EB4(v87, v89, qword_1E63C6308);
        swift_arrayDestroy();
        swift_bridgeObjectRelease();
        if ((v103 & 1) == 0)
        {
          sub_1B2228950();
          v104 = sub_1B2228608();
          swift_bridgeObjectRelease();
          if ((v104 & 1) != 0)
          {
            v105 = sub_1B1DB8EB4(v57, v91, qword_1E63C6308);
            swift_arrayDestroy();
            if ((v105 & 1) == 0)
            {
              v117(v108, v118);
              return v57;
            }
          }
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v119 = (_QWORD *)v57;
      v120 = v91;
      v123 = 95;
      v124 = 0xE100000000000000;
      v123 = sub_1B2228968();
      v124 = v106;
      sub_1B2228878();
      v57 = v123;
      v117(v108, v118);
      swift_bridgeObjectRelease();
      return v57;
    }
    v117(v108, v118);
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_24:
    v117(v108, v118);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B1B5A040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRetain();
  v3 = 0;
  v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v5 = *(_QWORD *)(a1 + 8 * v3 + 32);
    v6 = *(_QWORD *)(v5 + 16);
    v7 = v4[2];
    v8 = v7 + v6;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v8 <= v4[3] >> 1)
    {
      if (!*(_QWORD *)(v5 + 16))
        goto LABEL_3;
    }
    else
    {
      if (v7 <= v8)
        v10 = v7 + v6;
      else
        v10 = v7;
      v4 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v10, 1, v4);
      if (!*(_QWORD *)(v5 + 16))
        goto LABEL_3;
    }
    v11 = (unint64_t)&v4[4 * v4[2] + 4];
    if (v5 + 32 < v11 + 32 * v6 && v11 < v5 + 32 + 32 * v6)
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v6)
      v4[2] += v6;
LABEL_3:
    swift_bridgeObjectRelease();
    ++v3;
  }
  while (v1 != v3);
  swift_bridgeObjectRelease();
  return (uint64_t)v4;
}

uint64_t sub_1B1B5A1CC()
{
  sub_1B2228854();
  return sub_1B2228974();
}

uint64_t sub_1B1B5A24C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = sub_1B1B59758(0, a2, a3);
  if (v7)
  {
    v3[5] = v6;
    v3[6] = v7;
    return (uint64_t)v3;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1B5A32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6)
{
  if ((a5 & 1) != 0)
  {
    sub_1B1A06460();
    if ((sub_1B2229274() & 1) == 0)
    {
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B222922C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B222922C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B222922C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((a6 & 1) == 0)
        return a1;
      goto LABEL_4;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if ((a6 & 1) != 0)
  {
LABEL_4:
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B1A06460();
    sub_1B222922C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1B1B5A7BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, int a8@<W7>, uint64_t *a9@<X8>, char a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t result;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD v56[3];
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  v61 = a7;
  v68 = a3;
  v69 = a4;
  swift_bridgeObjectRetain();
  sub_1B2228890();
  if ((_BYTE)a8)
  {
    if (a8 == 1)
      v16 = 0x746E656D67617266;
    else
      v16 = 0x5F657475706D6F63;
    if (a8 == 1)
      v17 = 0xEF737475706E695FLL;
    else
      v17 = 0xEE00737475706E69;
  }
  else
  {
    v17 = 0xED0000737475706ELL;
    v16 = 0x695F786574726576;
  }
  swift_bridgeObjectRetain();
  v56[2] = v16;
  v62 = v17;
  sub_1B214E9CC(v16, v17, a6);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v60 = a9;
  v57 = a1;
  v58 = a2;
  v59 = a5;
  if ((_BYTE)a8)
  {
    if (a8 != 1)
    {
      v63 = 0xE400000000000000;
      v18 = 1684631414;
      goto LABEL_19;
    }
    v63 = 0xEC00000074756F5FLL;
    sub_1B214E9D8(0x746E656D67617266, 0xEC00000074756F5FLL);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v18 = 0x746E656D67617266;
  }
  else
  {
    v63 = 0xE200000000000000;
    v18 = 28521;
  }
  v19 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v19 & 1) != 0)
  {
LABEL_16:
    v22 = 1;
    v23 = v61;
    goto LABEL_20;
  }
  if (!(_BYTE)a8)
  {
LABEL_19:
    v23 = v61;
    swift_bridgeObjectRelease();
    v22 = 1;
    goto LABEL_20;
  }
  v21 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v21 & 1) != 0)
    goto LABEL_16;
  v23 = v61;
  v51 = *(_QWORD *)(v61 + 16);
  if (v51)
  {
    v52 = (unint64_t *)(v61 + 32);
    v22 = 1;
    while (2)
    {
      v54 = *v52;
      v52 += 4;
      v53 = v54;
      switch(v54 >> 60)
      {
        case 8uLL:
          if (*(_BYTE *)(v53 + 32) != 2
            || *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 0x10) | *(_QWORD *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 0x18))
          {
            goto LABEL_60;
          }
          goto LABEL_70;
        case 9uLL:
          break;
        case 0xDuLL:
          if (*(_BYTE *)(v53 + 48) != 5 || *(_BYTE *)(v53 + 16) != 9)
            goto LABEL_60;
          goto LABEL_70;
        case 0xFuLL:
          if (v53 != 0xF000000000000008)
            goto LABEL_60;
LABEL_70:
          v22 = 1;
          break;
        default:
LABEL_60:
          if (--v51)
            continue;
          v22 = 0;
          break;
      }
      break;
    }
  }
  else
  {
    v22 = 0;
  }
LABEL_20:
  v24 = *(_QWORD *)(v23 + 16);
  if (v24)
  {
    v25 = (unint64_t *)(v23 + 32);
    do
    {
      v27 = *v25;
      v25 += 4;
      v26 = v27;
      if (v27 >> 60 == 13)
      {
        v28 = *(_QWORD *)(v26 + 16);
        v29 = *(unsigned __int8 *)(v26 + 48);
        v30 = ((1 << v29) & 0x3B) == 0 && v29 == 2;
        if (v30 && v28 == 0)
          break;
      }
      --v24;
    }
    while (v24);
  }
  if ((_BYTE)a8)
  {
    if (a8 == 1)
      v32 = 0xEC000000746E656DLL;
    else
      v32 = 0xEB00000000657475;
    if (a8 == 1)
      v33 = 0x676172665F786676;
    else
      v33 = 0x706D6F635F786676;
    if (a8 == 1)
      v34 = 0xE800000000000000;
    else
      v34 = 0xE600000000000000;
  }
  else
  {
    v34 = 0xE600000000000000;
    v32 = 0xEA00000000007865;
    v33 = 0x747265765F786676;
  }
  v56[1] = v56;
  if (a10)
    v35 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  else
    v35 = qword_1E6393708;
  MEMORY[0x1E0C80A78](v33, v20);
  v36 = v63;
  v66 = sub_1B214E9E4(v37, v32, v18, v63, v38, v34, (uint64_t)v35, (uint64_t (*)(uint64_t))sub_1B1B5C57C);
  v67 = v39;
  sub_1B2228890();
  v64 = 0;
  v65 = 0xE000000000000000;
  v40 = v59 & 1;
  v59 = a8;
  v41 = sub_1B1B60EE0(v22, a8, v40, v61, (_QWORD *)v18, v36, v57, v58);
  v42 = *(_QWORD *)(v41 + 16);
  if (v42)
  {
    v43 = v41 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v44 = sub_1B2228920();
      swift_bridgeObjectRelease();
      if ((v44 & 1) == 0)
        sub_1B2228890();
      v43 += 32;
      --v42;
    }
    while (v42);
  }
  swift_bridgeObjectRelease();
  sub_1B1B567DC(4);
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1B226D240;
  if ((_BYTE)v59)
  {
    v46 = v60;
    if (v59 == 1)
    {
      v47 = 0x676172665F786676;
      v48 = 0xEC000000746E656DLL;
    }
    else
    {
      v47 = 0x706D6F635F786676;
      v48 = 0xEB00000000657475;
    }
  }
  else
  {
    v48 = 0xEA00000000007865;
    v46 = v60;
    v47 = 0x747265765F786676;
  }
  *(_QWORD *)(result + 32) = v47;
  *(_QWORD *)(result + 40) = v48;
  v49 = v68;
  v50 = v69;
  *v46 = result;
  v46[1] = v49;
  v46[2] = v50;
  v46[3] = 11565;
  v46[4] = 0xE200000000000000;
  return result;
}

uint64_t sub_1B1B5AF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  sub_1B1A06460();
  swift_bridgeObjectRetain();
  if ((sub_1B2229274() & 1) != 0)
  {
    swift_bridgeObjectRetain();
    if (!a4)
      return a1;
    v6 = a1;
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  sub_1B2228890();
  v6 = a1;
  if (a4)
  {
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B222922C();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_6:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B222922C();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return v6;
}

void sub_1B1B5B20C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, _QWORD **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _UNKNOWN **v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD **v72;
  uint64_t v73;
  uint64_t *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77[4];
  _UNKNOWN **v78;
  uint64_t v79;
  uint64_t v80;

  v71 = a1;
  v72 = a7;
  LODWORD(v73) = a6;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v63 - v16);
  v18 = type metadata accessor for GraphScript(0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v76 = (uint64_t)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(unsigned __int8 *)(a4 + 24);
  v23 = (*(uint64_t (**)(double))(*a5 + 104))(v20);
  v24 = 0x6C6174656DLL;
  if (v22 != 1)
    v24 = 0x7466697773;
  if (v22)
    v25 = v24;
  else
    v25 = 99;
  if (v22)
    v26 = 0xE500000000000000;
  else
    v26 = 0xE100000000000000;
  v74 = v17;
  if (v23)
  {
    v27 = 0xE500000000000000;
    if (v23 == 1)
      v28 = 0x6C6174656DLL;
    else
      v28 = 0x7466697773;
  }
  else
  {
    v27 = 0xE100000000000000;
    v28 = 99;
  }
  if (v25 == v28 && v26 == v27)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return;
  }
  sub_1B1792810(a4, v76, type metadata accessor for GraphScript);
  v30 = a5[5];
  v69 = a5[6];
  v70 = v30;
  swift_retain();
  v31 = sub_1B1A101F0(a3);
  swift_release();
  sub_1B1B59664(a4 + *(int *)(v18 + 40), (uint64_t)v13);
  v32 = type metadata accessor for ScriptIndex();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v32) == 1)
  {
    swift_retain();
    v34 = sub_1B1A101F0(a3);
    swift_release();
    v35 = v74;
    *v74 = v34;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v13);
  }
  else
  {
    v35 = v74;
    sub_1B1B59714((uint64_t)v13, (uint64_t)v74);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
  v37 = v75;
  v36 = v76;
  v38 = sub_1B1C9B398(1, v77);
  if (v37)
  {
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v36, type metadata accessor for GraphScript);
    if ((v73 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v73 = a3;
    v65 = &v63;
    v40 = v77[0];
    v64 = v77[1];
    v41 = v77[2];
    v66 = v79;
    v67 = v80;
    v68 = v78;
    MEMORY[0x1E0C80A78](v38, v39);
    v42 = v69;
    v43 = v70;
    *(&v63 - 6) = v70;
    *(&v63 - 5) = v42;
    *((_DWORD *)&v63 - 8) = v31;
    *((_DWORD *)&v63 - 7) = v44;
    *(&v63 - 3) = 0x6870617267;
    *(&v63 - 2) = 0xE500000000000000;
    *(&v63 - 1) = (uint64_t)v35;
    swift_bridgeObjectRetain();
    v45 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)(&v63 - 8), v40);
    v75 = 0;
    swift_bridgeObjectRelease();
    v46 = sub_1B1B4F2A0(v64, v41, v43, v42, v31, 0x6870617267uLL, 0xE500000000000000, (uint64_t)v35);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v76, type metadata accessor for GraphScript);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    v49 = sub_1B1A101F0(v73);
    swift_release();
    v77[3] = (uint64_t)&type metadata for GraphScript.Info;
    v78 = &off_1E63709B0;
    v50 = sub_1B1A137F4(v77);
    *v50 = sub_1B1CAAFA8(v49);
    v50[1] = v51;
    v50[2] = v52;
    v50[3] = v53;
    v54 = sub_1B1CA0F60();
    v56 = v55;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v77);
    v57 = v72;
    v58 = *v72;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v57 = v58;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v58 = sub_1B1C65C54(0, v58[2] + 1, 1, v58);
      *v57 = v58;
    }
    v61 = v58[2];
    v60 = v58[3];
    if (v61 >= v60 >> 1)
    {
      v58 = sub_1B1C65C54(v60 > 1, v61 + 1, 1, v58);
      *v57 = v58;
    }
    v58[2] = v61 + 1;
    v62 = &v58[5 * v61];
    v62[4] = v45;
    v62[5] = v46;
    v62[6] = v48;
    v62[7] = v54;
    v62[8] = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1B1B5B784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, _QWORD **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _UNKNOWN **v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD **v72;
  uint64_t v73;
  uint64_t *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77[4];
  _UNKNOWN **v78;
  uint64_t v79;
  uint64_t v80;

  v71 = a1;
  v72 = a7;
  LODWORD(v73) = a6;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v63 - v16);
  v18 = type metadata accessor for SimpleScript(0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v76 = (uint64_t)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(unsigned __int8 *)(a4 + 32);
  v23 = (*(uint64_t (**)(double))(*a5 + 104))(v20);
  v24 = 0x6C6174656DLL;
  if (v22 != 1)
    v24 = 0x7466697773;
  if (v22)
    v25 = v24;
  else
    v25 = 99;
  if (v22)
    v26 = 0xE500000000000000;
  else
    v26 = 0xE100000000000000;
  v74 = v17;
  if (v23)
  {
    v27 = 0xE500000000000000;
    if (v23 == 1)
      v28 = 0x6C6174656DLL;
    else
      v28 = 0x7466697773;
  }
  else
  {
    v27 = 0xE100000000000000;
    v28 = 99;
  }
  if (v25 == v28 && v26 == v27)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return;
  }
  sub_1B1792810(a4, v76, type metadata accessor for SimpleScript);
  v30 = a5[5];
  v69 = a5[6];
  v70 = v30;
  swift_retain();
  v31 = sub_1B1A101F0(a3);
  swift_release();
  sub_1B1B59664(a4 + *(int *)(v18 + 36), (uint64_t)v13);
  v32 = type metadata accessor for ScriptIndex();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v32) == 1)
  {
    swift_retain();
    v34 = sub_1B1A101F0(a3);
    swift_release();
    v35 = v74;
    *v74 = v34;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v13);
  }
  else
  {
    v35 = v74;
    sub_1B1B59714((uint64_t)v13, (uint64_t)v74);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
  v37 = v75;
  v36 = v76;
  v38 = sub_1B1C9CF70(1, v77);
  if (v37)
  {
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v36, type metadata accessor for SimpleScript);
    if ((v73 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v73 = a3;
    v65 = &v63;
    v40 = v77[0];
    v64 = v77[1];
    v41 = v77[2];
    v66 = v79;
    v67 = v80;
    v68 = v78;
    MEMORY[0x1E0C80A78](v38, v39);
    v42 = v69;
    v43 = v70;
    *(&v63 - 6) = v70;
    *(&v63 - 5) = v42;
    *((_DWORD *)&v63 - 8) = v31;
    *((_DWORD *)&v63 - 7) = v44;
    *(&v63 - 3) = 0x656C706D6973;
    *(&v63 - 2) = 0xE600000000000000;
    *(&v63 - 1) = (uint64_t)v35;
    swift_bridgeObjectRetain();
    v45 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)(&v63 - 8), v40);
    v75 = 0;
    swift_bridgeObjectRelease();
    v46 = sub_1B1B4F2A0(v64, v41, v43, v42, v31, 0x656C706D6973uLL, 0xE600000000000000, (uint64_t)v35);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v76, type metadata accessor for SimpleScript);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    v49 = sub_1B1A101F0(v73);
    swift_release();
    v77[3] = (uint64_t)&type metadata for GraphScript.Info;
    v78 = &off_1E63709B0;
    v50 = sub_1B1A137F4(v77);
    *v50 = sub_1B1CAAFA8(v49);
    v50[1] = v51;
    v50[2] = v52;
    v50[3] = v53;
    v54 = sub_1B1CA0F60();
    v56 = v55;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v77);
    v57 = v72;
    v58 = *v72;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v57 = v58;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v58 = sub_1B1C65C54(0, v58[2] + 1, 1, v58);
      *v57 = v58;
    }
    v61 = v58[2];
    v60 = v58[3];
    if (v61 >= v60 >> 1)
    {
      v58 = sub_1B1C65C54(v60 > 1, v61 + 1, 1, v58);
      *v57 = v58;
    }
    v58[2] = v61 + 1;
    v62 = &v58[5 * v61];
    v62[4] = v45;
    v62[5] = v46;
    v62[6] = v48;
    v62[7] = v54;
    v62[8] = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1B1B5BCFC(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, _QWORD **a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  _UNKNOWN **v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD **v64;
  uint64_t v65;
  uint64_t *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69[4];
  _UNKNOWN **v70;

  v64 = a6;
  LODWORD(v65) = a5;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (uint64_t *)((char *)&v60 - v15);
  v17 = type metadata accessor for MetalFunctionScript(0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v68 = (uint64_t)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(unsigned __int8 *)(a3 + 16);
  v22 = (*(uint64_t (**)(double))(*a4 + 104))(v19);
  v23 = 0x6C6174656DLL;
  if (v21 != 1)
    v23 = 0x7466697773;
  if (v21)
    v24 = v23;
  else
    v24 = 99;
  if (v21)
    v25 = 0xE500000000000000;
  else
    v25 = 0xE100000000000000;
  v66 = v16;
  if (v22)
  {
    v26 = 0xE500000000000000;
    if (v22 == 1)
      v27 = 0x6C6174656DLL;
    else
      v27 = 0x7466697773;
  }
  else
  {
    v26 = 0xE100000000000000;
    v27 = 99;
  }
  v28 = a2;
  if (v24 == v27 && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return;
  }
  sub_1B1792810(a3, v68, type metadata accessor for MetalFunctionScript);
  v30 = a4[5];
  v62 = a4[6];
  v63 = v30;
  swift_retain();
  v31 = sub_1B1A101F0(v28);
  swift_release();
  sub_1B1B59664(a3 + *(int *)(v17 + 24), (uint64_t)v12);
  v32 = type metadata accessor for ScriptIndex();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v12, 1, v32) == 1)
  {
    swift_retain();
    v34 = sub_1B1A101F0(v28);
    swift_release();
    v35 = v66;
    *v66 = v34;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v12);
  }
  else
  {
    v35 = v66;
    sub_1B1B59714((uint64_t)v12, (uint64_t)v66);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
  v37 = v67;
  v36 = v68;
  v38 = sub_1B1C9DE8C(1, v69);
  if (v37)
  {
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v36, type metadata accessor for MetalFunctionScript);
    if ((v65 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v65 = (uint64_t)&v60;
    v41 = v69[0];
    v40 = v69[1];
    v42 = v69[2];
    v60 = v70;
    v61 = v28;
    MEMORY[0x1E0C80A78](v38, v39);
    v44 = v62;
    v43 = v63;
    *(&v60 - 6) = (_UNKNOWN **)v63;
    *(&v60 - 5) = (_UNKNOWN **)v44;
    *((_DWORD *)&v60 - 8) = v31;
    *((_DWORD *)&v60 - 7) = v45;
    *(&v60 - 3) = (_UNKNOWN **)0x6C656E72656BLL;
    *(&v60 - 2) = (_UNKNOWN **)0xE600000000000000;
    *(&v60 - 1) = (_UNKNOWN **)v35;
    swift_bridgeObjectRetain();
    v46 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)(&v60 - 8), v41);
    v67 = 0;
    swift_bridgeObjectRelease();
    v65 = sub_1B1B4F2A0(v40, v42, v43, v44, v31, 0x6C656E72656BuLL, 0xE600000000000000, (uint64_t)v35);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v68, type metadata accessor for MetalFunctionScript);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1B1A101F0(v61);
    swift_release();
    v69[3] = (uint64_t)&type metadata for MetalFunctionScript.Info;
    v70 = &off_1E6398188;
    v49 = sub_1B1A137F4(v69);
    strcpy((char *)v49, "Kernel Script");
    *((_WORD *)v49 + 7) = -4864;
    v49[2] = 0xD00000000000001CLL;
    v49[3] = 0x80000001B2331030;
    strcpy((char *)v49 + 32, "Kernel Script");
    *((_WORD *)v49 + 23) = -4864;
    v50 = sub_1B1C9EABC();
    v52 = v51;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v69);
    v53 = v64;
    v54 = *v64;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v53 = v54;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v54 = sub_1B1C65C54(0, v54[2] + 1, 1, v54);
      *v53 = v54;
    }
    v57 = v54[2];
    v56 = v54[3];
    if (v57 >= v56 >> 1)
    {
      v54 = sub_1B1C65C54(v56 > 1, v57 + 1, 1, v54);
      *v53 = v54;
    }
    v54[2] = v57 + 1;
    v58 = &v54[5 * v57];
    v59 = v65;
    v58[4] = v46;
    v58[5] = v59;
    v58[6] = v48;
    v58[7] = v50;
    v58[8] = v52;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B1B5C280@<X0>(uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;

  v4 = *(_QWORD **)a1;
  if (a2)
  {
    if (a2 == 1)
      v5 = 0xD00000000000001DLL;
    else
      v5 = 0xD000000000000017;
    if (a2 == 1)
      v6 = 0x80000001B232FB40;
    else
      v6 = 0x80000001B232FBA0;
  }
  else
  {
    v6 = 0x80000001B232FB40;
    v5 = 0xD00000000000001DLL;
  }
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8 = 0x63617073656D616ELL;
  v7 = 0xEA00000000002065;
  v9 = v4[2];
  if (v9)
  {
    v10 = 0;
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_1B1FFED7C(v4);
      v11 = &v4[v10];
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v11[4] = v5;
      v11[5] = v6;
      v10 += 2;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  if ((a3 & 1) != 0)
  {
    if (qword_1EEF572C8 != -1)
      swift_once();
    v17 = qword_1EEFD5340;
    v18 = *(_QWORD *)algn_1EEFD5348;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v8 = v17;
    v7 = v18;
  }
  *a4 = v4;
  a4[1] = v8;
  a4[2] = v7;
  a4[3] = v14;
  a4[4] = v15;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1B5C57C()
{
  uint64_t v0;

  return sub_1B1B536A0(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_BYTE *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

void sub_1B1B5C5B8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, int a5, _QWORD **a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59[4];
  unint64_t v60;
  uint64_t v61;
  _QWORD **v62;
  uint64_t v63;
  uint64_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67[4];
  _UNKNOWN **v68;
  uint64_t v69;
  uint64_t v70;

  v62 = a6;
  LODWORD(v63) = a5;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v12 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (uint64_t *)((char *)v59 - v15);
  v17 = type metadata accessor for ShaderScript(0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v66 = (uint64_t)v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(unsigned __int8 *)(a3 + 16);
  v22 = (*(uint64_t (**)(double))(*a4 + 104))(v19);
  v23 = 0x6C6174656DLL;
  if (v21 != 1)
    v23 = 0x7466697773;
  if (v21)
    v24 = v23;
  else
    v24 = 99;
  if (v21)
    v25 = 0xE500000000000000;
  else
    v25 = 0xE100000000000000;
  v64 = v16;
  if (v22)
  {
    v26 = 0xE500000000000000;
    if (v22 == 1)
      v27 = 0x6C6174656DLL;
    else
      v27 = 0x7466697773;
  }
  else
  {
    v26 = 0xE100000000000000;
    v27 = 99;
  }
  if (v24 == v27 && v25 == v26)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v28 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
      return;
  }
  sub_1B1792810(a3, v66, type metadata accessor for ShaderScript);
  v29 = a4[5];
  v60 = a4[6];
  v61 = v29;
  swift_retain();
  v30 = sub_1B1A101F0(a2);
  swift_release();
  sub_1B1B59664(a3 + *(int *)(v17 + 24), (uint64_t)v12);
  v31 = type metadata accessor for ScriptIndex();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v12, 1, v31) == 1)
  {
    swift_retain();
    v33 = sub_1B1A101F0(a2);
    swift_release();
    v34 = v64;
    *v64 = v33;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v12);
  }
  else
  {
    v34 = v64;
    sub_1B1B59714((uint64_t)v12, (uint64_t)v64);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v34, 0, 1, v31);
  v36 = v65;
  v35 = v66;
  v37 = sub_1B1C9EC44(1, v67);
  if (v36)
  {
    sub_1B1B596C0((uint64_t)v34);
    sub_1B1A04628(v35, type metadata accessor for ShaderScript);
    if ((v63 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v63 = (uint64_t)v59;
    v39 = v67[0];
    v40 = v67[2];
    v59[2] = v69;
    v59[3] = (uint64_t)v68;
    v59[0] = v67[1];
    v59[1] = v70;
    MEMORY[0x1E0C80A78](v37, v38);
    v42 = v60;
    v41 = v61;
    v59[-6] = v61;
    v59[-5] = v42;
    LODWORD(v59[-4]) = v30;
    HIDWORD(v59[-4]) = v43;
    v59[-3] = 0x726564616873;
    v59[-2] = 0xE600000000000000;
    v59[-1] = (uint64_t)v34;
    swift_bridgeObjectRetain();
    v44 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)&v59[-8], v39);
    v65 = 0;
    swift_bridgeObjectRelease();
    v63 = sub_1B1B4F2A0(v59[0], v40, v41, v42, v30, 0x726564616873uLL, 0xE600000000000000, (uint64_t)v34);
    v46 = v45;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v34);
    sub_1B1A04628(v66, type metadata accessor for ShaderScript);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1B1A101F0(a2);
    swift_release();
    v67[3] = (uint64_t)&type metadata for ShaderScript.Info;
    v68 = &off_1E6377430;
    v47 = sub_1B1A137F4(v67);
    *v47 = sub_1B1CA0C28();
    v47[1] = v48;
    strcpy((char *)v47 + 16, "Shader Script");
    *((_WORD *)v47 + 15) = -4864;
    v49 = sub_1B1CB173C();
    v51 = v50;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v67);
    v52 = v62;
    v53 = *v62;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v52 = v53;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v53 = sub_1B1C65C54(0, v53[2] + 1, 1, v53);
      *v52 = v53;
    }
    v56 = v53[2];
    v55 = v53[3];
    if (v56 >= v55 >> 1)
    {
      v53 = sub_1B1C65C54(v55 > 1, v56 + 1, 1, v53);
      *v52 = v53;
    }
    v53[2] = v56 + 1;
    v57 = &v53[5 * v56];
    v58 = v63;
    v57[4] = v44;
    v57[5] = v58;
    v57[6] = v46;
    v57[7] = v49;
    v57[8] = v51;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1B1B5CB44(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, _QWORD *a5, int a6, _QWORD **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _UNKNOWN **v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD **v70;
  uint64_t v71;
  uint64_t *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75[4];
  _UNKNOWN **v76;
  uint64_t v77;
  uint64_t v78;

  v69 = a1;
  v70 = a7;
  LODWORD(v71) = a6;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v61 - v16);
  v18 = type metadata accessor for EmitterScript(0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v74 = (uint64_t)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a4;
  v23 = (*(uint64_t (**)(double))(*a5 + 104))(v20);
  v24 = 0x6C6174656DLL;
  if (v22 != 1)
    v24 = 0x7466697773;
  if (v22)
    v25 = v24;
  else
    v25 = 99;
  if (v22)
    v26 = 0xE500000000000000;
  else
    v26 = 0xE100000000000000;
  v72 = v17;
  if (v23)
  {
    v27 = 0xE500000000000000;
    if (v23 == 1)
      v28 = 0x6C6174656DLL;
    else
      v28 = 0x7466697773;
  }
  else
  {
    v27 = 0xE100000000000000;
    v28 = 99;
  }
  if (v25 == v28 && v26 == v27)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return;
  }
  sub_1B1792810((uint64_t)a4, v74, type metadata accessor for EmitterScript);
  v30 = a5[5];
  v67 = a5[6];
  v68 = v30;
  swift_retain();
  v31 = sub_1B1A101F0(a3);
  swift_release();
  sub_1B1B59664((uint64_t)&a4[*(int *)(v18 + 32)], (uint64_t)v13);
  v32 = type metadata accessor for ScriptIndex();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v32) == 1)
  {
    swift_retain();
    v34 = sub_1B1A101F0(a3);
    swift_release();
    v35 = v72;
    *v72 = v34;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v13);
  }
  else
  {
    v35 = v72;
    sub_1B1B59714((uint64_t)v13, (uint64_t)v72);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
  v37 = v73;
  v36 = v74;
  v38 = sub_1B1C9BF0C(1, v75);
  if (v37)
  {
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v36, type metadata accessor for EmitterScript);
    if ((v71 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v71 = a3;
    v63 = &v61;
    v40 = v75[0];
    v62 = v75[1];
    v41 = v75[2];
    v64 = v77;
    v65 = v78;
    v66 = v76;
    MEMORY[0x1E0C80A78](v38, v39);
    v42 = v67;
    v43 = v68;
    *(&v61 - 6) = v68;
    *(&v61 - 5) = v42;
    *((_DWORD *)&v61 - 8) = v31;
    *((_DWORD *)&v61 - 7) = v44;
    *(&v61 - 3) = 0x72657474696D65;
    *(&v61 - 2) = 0xE700000000000000;
    *(&v61 - 1) = (uint64_t)v35;
    swift_bridgeObjectRetain();
    v45 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)(&v61 - 8), v40);
    v73 = 0;
    swift_bridgeObjectRelease();
    v46 = sub_1B1B4F2A0(v62, v41, v43, v42, v31, 0x72657474696D65uLL, 0xE700000000000000, (uint64_t)v35);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v74, type metadata accessor for EmitterScript);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    v49 = sub_1B1A101F0(v71);
    swift_release();
    v75[3] = (uint64_t)&type metadata for EmitterScript.Info;
    v76 = &off_1E6379F98;
    v50 = sub_1B1A137F4(v75);
    *v50 = sub_1B1CAC354(v49);
    v50[1] = v51;
    v52 = sub_1B1CA01DC();
    v54 = v53;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v75);
    v55 = v70;
    v56 = *v70;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v55 = v56;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v56 = sub_1B1C65C54(0, v56[2] + 1, 1, v56);
      *v55 = v56;
    }
    v59 = v56[2];
    v58 = v56[3];
    if (v59 >= v58 >> 1)
    {
      v56 = sub_1B1C65C54(v58 > 1, v59 + 1, 1, v56);
      *v55 = v56;
    }
    v56[2] = v59 + 1;
    v60 = &v56[5 * v59];
    v60[4] = v45;
    v60[5] = v46;
    v60[6] = v48;
    v60[7] = v52;
    v60[8] = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1B1B5D0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, _QWORD **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  _UNKNOWN **v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD **v72;
  uint64_t v73;
  uint64_t *v74;
  void *v75;
  uint64_t v76;
  uint64_t v77[4];
  _UNKNOWN **v78;
  uint64_t v79;
  uint64_t v80;

  v71 = a1;
  v72 = a7;
  LODWORD(v73) = a6;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v63 - v16);
  v18 = type metadata accessor for TriggerScript(0);
  v20 = MEMORY[0x1E0C80A78](v18, v19);
  v76 = (uint64_t)&v63 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(unsigned __int8 *)(a4 + 24);
  v23 = (*(uint64_t (**)(double))(*a5 + 104))(v20);
  v24 = 0x6C6174656DLL;
  if (v22 != 1)
    v24 = 0x7466697773;
  if (v22)
    v25 = v24;
  else
    v25 = 99;
  if (v22)
    v26 = 0xE500000000000000;
  else
    v26 = 0xE100000000000000;
  v74 = v17;
  if (v23)
  {
    v27 = 0xE500000000000000;
    if (v23 == 1)
      v28 = 0x6C6174656DLL;
    else
      v28 = 0x7466697773;
  }
  else
  {
    v27 = 0xE100000000000000;
    v28 = 99;
  }
  if (v25 == v28 && v26 == v27)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return;
  }
  sub_1B1792810(a4, v76, type metadata accessor for TriggerScript);
  v30 = a5[5];
  v69 = a5[6];
  v70 = v30;
  swift_retain();
  v31 = sub_1B1A101F0(a3);
  swift_release();
  sub_1B1B59664(a4 + *(int *)(v18 + 40), (uint64_t)v13);
  v32 = type metadata accessor for ScriptIndex();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v32) == 1)
  {
    swift_retain();
    v34 = sub_1B1A101F0(a3);
    swift_release();
    v35 = v74;
    *v74 = v34;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v13);
  }
  else
  {
    v35 = v74;
    sub_1B1B59714((uint64_t)v13, (uint64_t)v74);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
  v37 = v75;
  v36 = v76;
  v38 = sub_1B1C9B398(1, v77);
  if (v37)
  {
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v36, type metadata accessor for TriggerScript);
    if ((v73 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v73 = a3;
    v65 = &v63;
    v40 = v77[0];
    v64 = v77[1];
    v41 = v77[2];
    v66 = v79;
    v67 = v80;
    v68 = v78;
    MEMORY[0x1E0C80A78](v38, v39);
    v42 = v69;
    v43 = v70;
    *(&v63 - 6) = v70;
    *(&v63 - 5) = v42;
    *((_DWORD *)&v63 - 8) = v31;
    *((_DWORD *)&v63 - 7) = v44;
    *(&v63 - 3) = 0x72656767697274;
    *(&v63 - 2) = 0xE700000000000000;
    *(&v63 - 1) = (uint64_t)v35;
    swift_bridgeObjectRetain();
    v45 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)(&v63 - 8), v40);
    v75 = 0;
    swift_bridgeObjectRelease();
    v46 = sub_1B1B4F2A0(v64, v41, v43, v42, v31, 0x72656767697274uLL, 0xE700000000000000, (uint64_t)v35);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v76, type metadata accessor for TriggerScript);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    v49 = sub_1B1A101F0(v73);
    swift_release();
    v77[3] = (uint64_t)&type metadata for TriggerScript.Info;
    v78 = &off_1E637D978;
    v50 = sub_1B1A137F4(v77);
    *v50 = sub_1B1CAC460(v49);
    v50[1] = v51;
    v50[2] = v52;
    v50[3] = v53;
    v54 = sub_1B1CB173C();
    v56 = v55;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v77);
    v57 = v72;
    v58 = *v72;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v57 = v58;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v58 = sub_1B1C65C54(0, v58[2] + 1, 1, v58);
      *v57 = v58;
    }
    v61 = v58[2];
    v60 = v58[3];
    if (v61 >= v60 >> 1)
    {
      v58 = sub_1B1C65C54(v60 > 1, v61 + 1, 1, v58);
      *v57 = v58;
    }
    v58[2] = v61 + 1;
    v62 = &v58[5 * v61];
    v62[4] = v45;
    v62[5] = v46;
    v62[6] = v48;
    v62[7] = v54;
    v62[8] = v56;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1B1B5D640(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 *a4, _QWORD *a5, int a6, _QWORD **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t inited;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _UNKNOWN **v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD **v70;
  uint64_t v71;
  uint64_t *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75[4];
  _UNKNOWN **v76;
  uint64_t v77;
  uint64_t v78;

  v69 = a1;
  v70 = a7;
  LODWORD(v71) = a6;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v61 - v16);
  inited = type metadata accessor for ParticleInitScript(0);
  v20 = MEMORY[0x1E0C80A78](inited, v19);
  v74 = (uint64_t)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a4;
  v23 = (*(uint64_t (**)(double))(*a5 + 104))(v20);
  v24 = 0x6C6174656DLL;
  if (v22 != 1)
    v24 = 0x7466697773;
  if (v22)
    v25 = v24;
  else
    v25 = 99;
  if (v22)
    v26 = 0xE500000000000000;
  else
    v26 = 0xE100000000000000;
  v72 = v17;
  if (v23)
  {
    v27 = 0xE500000000000000;
    if (v23 == 1)
      v28 = 0x6C6174656DLL;
    else
      v28 = 0x7466697773;
  }
  else
  {
    v27 = 0xE100000000000000;
    v28 = 99;
  }
  if (v25 == v28 && v26 == v27)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return;
  }
  sub_1B1792810((uint64_t)a4, v74, type metadata accessor for ParticleInitScript);
  v30 = a5[5];
  v67 = a5[6];
  v68 = v30;
  swift_retain();
  v31 = sub_1B1A101F0(a3);
  swift_release();
  sub_1B1B59664((uint64_t)&a4[*(int *)(inited + 36)], (uint64_t)v13);
  v32 = type metadata accessor for ScriptIndex();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v32) == 1)
  {
    swift_retain();
    v34 = sub_1B1A101F0(a3);
    swift_release();
    v35 = v72;
    *v72 = v34;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v13);
  }
  else
  {
    v35 = v72;
    sub_1B1B59714((uint64_t)v13, (uint64_t)v72);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
  v37 = v73;
  v36 = v74;
  v38 = sub_1B1C993B8(1u, v75);
  if (v37)
  {
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v36, type metadata accessor for ParticleInitScript);
    if ((v71 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v71 = a3;
    v63 = &v61;
    v40 = v75[0];
    v62 = v75[1];
    v41 = v75[2];
    v64 = v77;
    v65 = v78;
    v66 = v76;
    MEMORY[0x1E0C80A78](v38, v39);
    v42 = v67;
    v43 = v68;
    *(&v61 - 6) = v68;
    *(&v61 - 5) = v42;
    *((_DWORD *)&v61 - 8) = v31;
    *((_DWORD *)&v61 - 7) = v44;
    strcpy((char *)&v61 - 24, "particleInit");
    *((_BYTE *)&v61 - 11) = 0;
    *((_WORD *)&v61 - 5) = -5120;
    *(&v61 - 1) = (uint64_t)v35;
    swift_bridgeObjectRetain();
    v45 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)(&v61 - 8), v40);
    v73 = 0;
    swift_bridgeObjectRelease();
    v46 = sub_1B1B4F2A0(v62, v41, v43, v42, v31, 0x656C636974726170uLL, 0xEC00000074696E49, (uint64_t)v35);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v74, type metadata accessor for ParticleInitScript);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    v49 = sub_1B1A101F0(v71);
    swift_release();
    v75[3] = (uint64_t)&type metadata for ParticleInitScript.Info;
    v76 = &off_1E63949B8;
    v50 = sub_1B1A137F4(v75);
    *v50 = sub_1B1CAC57C(v49);
    v50[1] = v51;
    v52 = sub_1B1CB1720();
    v54 = v53;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v75);
    v55 = v70;
    v56 = *v70;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v55 = v56;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v56 = sub_1B1C65C54(0, v56[2] + 1, 1, v56);
      *v55 = v56;
    }
    v59 = v56[2];
    v58 = v56[3];
    if (v59 >= v58 >> 1)
    {
      v56 = sub_1B1C65C54(v58 > 1, v59 + 1, 1, v56);
      *v55 = v56;
    }
    v56[2] = v59 + 1;
    v60 = &v56[5 * v59];
    v60[4] = v45;
    v60[5] = v46;
    v60[6] = v48;
    v60[7] = v52;
    v60[8] = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void sub_1B1B5DBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, int a6, _QWORD **a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t updated;
  uint64_t v19;
  double v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  _UNKNOWN **v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD **v70;
  uint64_t v71;
  uint64_t *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75[4];
  _UNKNOWN **v76;
  uint64_t v77;
  uint64_t v78;

  v69 = a1;
  v70 = a7;
  LODWORD(v71) = a6;
  sub_1B1791524(0, qword_1ED4B7E00, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v10, v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14, v15);
  v17 = (uint64_t *)((char *)&v61 - v16);
  updated = type metadata accessor for ParticleUpdateScript(0);
  v20 = MEMORY[0x1E0C80A78](updated, v19);
  v74 = (uint64_t)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(unsigned __int8 *)(a4 + 24);
  v23 = (*(uint64_t (**)(double))(*a5 + 104))(v20);
  v24 = 0x6C6174656DLL;
  if (v22 != 1)
    v24 = 0x7466697773;
  if (v22)
    v25 = v24;
  else
    v25 = 99;
  if (v22)
    v26 = 0xE500000000000000;
  else
    v26 = 0xE100000000000000;
  v72 = v17;
  if (v23)
  {
    v27 = 0xE500000000000000;
    if (v23 == 1)
      v28 = 0x6C6174656DLL;
    else
      v28 = 0x7466697773;
  }
  else
  {
    v27 = 0xE100000000000000;
    v28 = 99;
  }
  if (v25 == v28 && v26 == v27)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v29 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v29 & 1) == 0)
      return;
  }
  sub_1B1792810(a4, v74, type metadata accessor for ParticleUpdateScript);
  v30 = a5[5];
  v67 = a5[6];
  v68 = v30;
  swift_retain();
  v31 = sub_1B1A101F0(a3);
  swift_release();
  sub_1B1B59664(a4 + *(int *)(updated + 36), (uint64_t)v13);
  v32 = type metadata accessor for ScriptIndex();
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v13, 1, v32) == 1)
  {
    swift_retain();
    v34 = sub_1B1A101F0(a3);
    swift_release();
    v35 = v72;
    *v72 = v34;
    swift_storeEnumTagMultiPayload();
    sub_1B1B596C0((uint64_t)v13);
  }
  else
  {
    v35 = v72;
    sub_1B1B59714((uint64_t)v13, (uint64_t)v72);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v35, 0, 1, v32);
  v37 = v73;
  v36 = v74;
  v38 = sub_1B1C99D7C(1u, v75);
  if (v37)
  {
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v36, type metadata accessor for ParticleUpdateScript);
    if ((v71 & 1) != 0)
      swift_willThrow();
    else

  }
  else
  {
    v71 = a3;
    v63 = &v61;
    v40 = v75[0];
    v62 = v75[1];
    v41 = v75[2];
    v64 = v77;
    v65 = v78;
    v66 = v76;
    MEMORY[0x1E0C80A78](v38, v39);
    v42 = v67;
    v43 = v68;
    *(&v61 - 6) = v68;
    *(&v61 - 5) = v42;
    *((_DWORD *)&v61 - 8) = v31;
    *((_DWORD *)&v61 - 7) = v44;
    strcpy((char *)&v61 - 24, "particleUpdate");
    *((_BYTE *)&v61 - 9) = -18;
    *(&v61 - 1) = (uint64_t)v35;
    swift_bridgeObjectRetain();
    v45 = sub_1B1BA8A28((void (*)(_QWORD *__return_ptr, _QWORD *))sub_1B1B63BA8, (uint64_t)(&v61 - 8), v40);
    v73 = 0;
    swift_bridgeObjectRelease();
    v46 = sub_1B1B4F2A0(v62, v41, v43, v42, v31, 0x656C636974726170uLL, 0xEE00657461647055, (uint64_t)v35);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B1B596C0((uint64_t)v35);
    sub_1B1A04628(v74, type metadata accessor for ParticleUpdateScript);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_retain();
    v49 = sub_1B1A101F0(v71);
    swift_release();
    v75[3] = (uint64_t)&type metadata for ParticleUpdateScript.Info;
    v76 = &off_1E639E2E8;
    v50 = sub_1B1A137F4(v75);
    *v50 = sub_1B1CAC688(v49);
    v50[1] = v51;
    v52 = sub_1B1CB1720();
    v54 = v53;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v75);
    v55 = v70;
    v56 = *v70;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v55 = v56;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v56 = sub_1B1C65C54(0, v56[2] + 1, 1, v56);
      *v55 = v56;
    }
    v59 = v56[2];
    v58 = v56[3];
    if (v59 >= v58 >> 1)
    {
      v56 = sub_1B1C65C54(v58 > 1, v59 + 1, 1, v56);
      *v55 = v56;
    }
    v56[2] = v59 + 1;
    v60 = &v56[5 * v59];
    v60[4] = v45;
    v60[5] = v46;
    v60[6] = v48;
    v60[7] = v52;
    v60[8] = v54;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B1B5E160()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

void sub_1B1B5E1A8(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1B5E1E0()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  return v0;
}

void sub_1B1B5E2AC()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B1B5E2FC(uint64_t a1, uint64_t a2, char a3)
{
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  __asm { BR              X10 }
}

uint64_t sub_1B1B5E444()
{
  uint64_t v0;

  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1B1B5E51C()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B1B5E56C(uint64_t a1, uint64_t a2, char a3)
{
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  __asm { BR              X10 }
}

uint64_t sub_1B1B5E6B8()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

void sub_1B1B5E768()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B1B5E7B8(uint64_t a1, uint64_t a2, char a3)
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  __asm { BR              X10 }
}

uint64_t sub_1B1B5E9D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

void sub_1B1B5EAA8()
{
  sub_1B2229688();
  __break(1u);
}

void sub_1B1B5EAF8(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1B5EB44(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

void sub_1B1B5EBD0()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1B5EC20(unint64_t a1)
{
  uint64_t result;

  if (a1 >> 60 == 7)
    __asm { BR              X10 }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1B5ED50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t inited;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t *v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t result;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  _QWORD v182[2];
  uint64_t v183;

  v2 = MEMORY[0x1E0DEE9D8];
  v183 = MEMORY[0x1E0DEE9D8];
  v179 = sub_1B1C7A1C4(a1);
  if (v179)
  {
    swift_bridgeObjectRetain();
    v3 = 0;
    v4 = (_BYTE *)(a1 + 56);
    while (2)
    {
      v9 = *((_QWORD *)v4 - 3);
      if (*v4)
        v10 = v3;
      else
        v10 = *((_QWORD *)v4 - 1);
      switch(v9 >> 60)
      {
        case 0uLL:
          v64 = *(unsigned __int8 *)(v9 + 16);
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v65 = swift_allocObject();
          v66 = sub_1B19F6778(v65, 1);
          v68 = 0xD000000000000014;
          if (!v64)
            v68 = 0xD000000000000012;
          v69 = 0x80000001B2330470;
          if (v64)
            v69 = 0x80000001B2330450;
          *v67 = v68;
          v67[1] = v69;
          v67[2] = 0;
          v67[3] = 0;
          nullsub_16(v66);
          v71 = v70;
          sub_1B1B63150();
          v72 = swift_allocObject();
          v73 = sub_1B19F909C(v72, 1);
          *v74 = v71;
          nullsub_16(v73);
          v76 = v75;
          swift_retain_n();
          v77 = sub_1B1B5A040(v76);
          swift_bridgeObjectRelease();
          v78 = swift_allocObject();
          v79 = sub_1B19F909C(v78, 1);
          *v80 = v77;
          nullsub_16(v79);
          v157 = sub_1B1B5A040(v156);
          swift_bridgeObjectRelease();
          sub_1B1A05610(v9);
          goto LABEL_92;
        case 3uLL:
        case 4uLL:
          v181 = v10;
          v182[0] = 0xD000000000000012;
          v182[1] = 0x80000001B2330490;
          sub_1B1B1DD24(v9);
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v11 = v182[0];
          v12 = v182[1];
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v13 = swift_allocObject();
          v14 = sub_1B19F6778(v13, 1);
          *v15 = v11;
          v15[1] = v12;
          v15[2] = 0;
          v15[3] = 0;
          nullsub_16(v14);
          v17 = v16;
          sub_1B1B63150();
          v18 = swift_allocObject();
          v19 = sub_1B19F909C(v18, 1);
          *v20 = v17;
          nullsub_16(v19);
          v22 = v21;
          v23 = (_QWORD *)sub_1B1D1E44C(0);
          v182[0] = v23;
          v24 = *(_QWORD *)(v22 + 32);
          swift_bridgeObjectRetain();
          v181 = v24;
          sub_1B214E3CC(&v181, &v180);
          v25 = v180;
          v26 = sub_1B181FEE0(v180);
          v27 = sub_1B181FEE0((uint64_t)v23) + v26;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v182[0] = v23;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v27 > v23[3] >> 1)
          {
            if (v23[2] <= v27)
              v29 = v27;
            else
              v29 = v23[2];
            v23 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v29, 1, v23);
            v182[0] = v23;
          }
          v30 = v23[2];
          if (!sub_1B1C7A1C4(v25))
            goto LABEL_20;
          if (v26 < 0)
            goto LABEL_107;
          v31 = (unint64_t)&v23[4 * v30 + 4];
          if (v25 + 32 < v31 + 32 * v26 && v31 < v25 + 32 + 32 * v26)
            goto LABEL_107;
          swift_arrayInitWithCopy();
          if (v26)
            v23[2] += v26;
LABEL_20:
          v32 = swift_bridgeObjectRelease();
          nullsub_16(v32);
          swift_bridgeObjectRelease_n();
          goto LABEL_91;
        case 7uLL:
          v110 = *(unsigned __int8 *)(v9 + 34);
          v111 = *(_BYTE *)(v9 + 33);
          sub_1B1B1DD24(*((_QWORD *)v4 - 3));
          swift_retain();
          sub_1B1B5510C(v111);
          v182[0] = 0;
          v182[1] = 0xE000000000000000;
          sub_1B2229430();
          swift_bridgeObjectRelease();
          strcpy((char *)v182, "vfx_sampler");
          HIDWORD(v182[1]) = -352321536;
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          v181 = v10;
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          __asm { BR              X8 }
          return result;
        case 8uLL:
          if (*(unsigned __int8 *)(v9 + 32) >= 2u)
          {
            sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v132 = swift_allocObject();
            v133 = sub_1B19F6778(v132, 1);
            *v134 = 0x656C636974726170;
            v134[1] = 0xE900000000000073;
            v134[2] = 0;
            v134[3] = 0;
            nullsub_16(v133);
            v136 = v135;
            sub_1B1B63150();
            v137 = swift_allocObject();
            v138 = sub_1B19F909C(v137, 1);
            *v139 = v136;
            nullsub_16(v138);
            v141 = v140;
            swift_retain_n();
            v87 = sub_1B1B5A040(v141);
            swift_bridgeObjectRelease();
          }
          else
          {
            v182[0] = 0;
            v182[1] = 0xE000000000000000;
            sub_1B1B1DD24(v9);
            swift_retain();
            sub_1B2229430();
            swift_bridgeObjectRelease();
            v181 = v10;
            strcpy((char *)v182, "emitter_");
            BYTE1(v182[1]) = 0;
            WORD1(v182[1]) = 0;
            HIDWORD(v182[1]) = -402653184;
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
            v88 = v182[0];
            v89 = v182[1];
            sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v90 = swift_allocObject();
            v91 = sub_1B19F6778(v90, 1);
            *v92 = v88;
            v92[1] = v89;
            v92[2] = 0;
            v92[3] = 0;
            nullsub_16(v91);
            v94 = v93;
            sub_1B1B63150();
            v95 = swift_allocObject();
            v96 = sub_1B19F909C(v95, 1);
            *v97 = v94;
            nullsub_16(v96);
            v99 = v98;
            v100 = (_QWORD *)sub_1B1D1E44C(0);
            v182[0] = v100;
            v101 = *(_QWORD *)(v99 + 32);
            swift_bridgeObjectRetain();
            v181 = v101;
            sub_1B214E3CC(&v181, &v180);
            v102 = v180;
            v103 = sub_1B181FEE0(v180);
            v104 = sub_1B181FEE0((uint64_t)v100) + v103;
            v105 = swift_isUniquelyReferenced_nonNull_native();
            v182[0] = v100;
            if ((v105 & 1) == 0 || v104 > v100[3] >> 1)
            {
              if (v100[2] <= v104)
                v106 = v104;
              else
                v106 = v100[2];
              v100 = sub_1B1C65D70(v105, v106, 1, v100);
              v182[0] = v100;
            }
            v107 = v100[2];
            if (sub_1B1C7A1C4(v102))
            {
              if (v103 < 0)
                goto LABEL_107;
              v108 = (unint64_t)&v100[4 * v107 + 4];
              if (v102 + 32 < v108 + 32 * v103 && v108 < v102 + 32 + 32 * v103)
                goto LABEL_107;
              swift_arrayInitWithCopy();
              if (v103)
                v100[2] += v103;
            }
            v109 = swift_bridgeObjectRelease();
            nullsub_16(v109);
            swift_bridgeObjectRelease_n();
            v87 = v182[0];
          }
          sub_1B1B63150();
LABEL_76:
          v142 = swift_allocObject();
          v143 = sub_1B19F909C(v142, 1);
          *v144 = v87;
          nullsub_16(v143);
          v63 = v145;
LABEL_77:
          v146 = (_QWORD *)sub_1B1D1E44C(0);
          v182[0] = v146;
          v147 = *(_QWORD *)(v63 + 32);
          swift_bridgeObjectRetain();
          v181 = v147;
          sub_1B214E3CC(&v181, &v180);
          v148 = v180;
          v149 = sub_1B181FEE0(v180);
          v150 = sub_1B181FEE0((uint64_t)v146) + v149;
          v151 = swift_isUniquelyReferenced_nonNull_native();
          v182[0] = v146;
          if ((v151 & 1) == 0 || v150 > v146[3] >> 1)
          {
            if (v146[2] <= v150)
              v152 = v150;
            else
              v152 = v146[2];
            v146 = sub_1B1C65D70(v151, v152, 1, v146);
            v182[0] = v146;
          }
          v153 = v146[2];
          if (sub_1B1C7A1C4(v148))
          {
            if (v149 < 0)
              goto LABEL_107;
            v154 = (unint64_t)&v146[4 * v153 + 4];
            if (v148 + 32 < v154 + 32 * v149 && v154 < v148 + 32 + 32 * v149)
              goto LABEL_107;
            swift_arrayInitWithCopy();
            if (v149)
              v146[2] += v149;
          }
          v155 = swift_bridgeObjectRelease();
          nullsub_16(v155);
          swift_bridgeObjectRelease_n();
          v53 = v9;
          goto LABEL_90;
        case 9uLL:
          v182[0] = 0;
          v182[1] = 0xE000000000000000;
          sub_1B1B1DD24(v9);
          swift_retain();
          sub_1B2229430();
          swift_bridgeObjectRelease();
          v181 = v10;
          strcpy((char *)v182, "particle_data_");
          HIBYTE(v182[1]) = -18;
          goto LABEL_43;
        case 0xBuLL:
          v182[0] = 0xD000000000000012;
          v182[1] = 0x80000001B2330490;
          v181 = v10;
          sub_1B1B1DD24(v9);
          swift_retain();
LABEL_43:
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          v81 = v182[0];
          v82 = v182[1];
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v83 = swift_allocObject();
          v84 = sub_1B19F6778(v83, 1);
          *v85 = v81;
          v85[1] = v82;
          v85[2] = 0;
          v85[3] = 0;
          nullsub_16(v84);
          v87 = v86;
          sub_1B1B63150();
          goto LABEL_76;
        case 0xCuLL:
          sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
          v54 = swift_allocObject();
          v55 = sub_1B19F6778(v54, 1);
          *v56 = 0x735F6D6F646E6172;
          v56[1] = 0xEB00000000646565;
          v56[2] = 0;
          v56[3] = 0;
          nullsub_16(v55);
          v58 = v57;
          sub_1B1B63150();
          v59 = swift_allocObject();
          v60 = sub_1B19F909C(v59, 1);
          *v61 = v58;
          nullsub_16(v60);
          v63 = v62;
          swift_retain_n();
          goto LABEL_77;
        case 0xDuLL:
          __asm { BR              X8 }
          return result;
        case 0xFuLL:
          if (v9 == 0xF000000000000000)
          {
            sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v33 = swift_allocObject();
            v34 = sub_1B19F6778(v33, 1);
            strcpy(v35, "script_context");
            v35[15] = -18;
            *((_QWORD *)v35 + 2) = 0;
            *((_QWORD *)v35 + 3) = 0;
            nullsub_16(v34);
            v37 = v36;
            sub_1B1B63150();
            v38 = swift_allocObject();
            v39 = sub_1B19F909C(v38, 1);
            *v40 = v37;
            nullsub_16(v39);
            v42 = v41;
            v43 = (_QWORD *)sub_1B1D1E44C(0);
            v182[0] = v43;
            v44 = *(_QWORD *)(v42 + 32);
            swift_bridgeObjectRetain();
            v181 = v44;
            sub_1B214E3CC(&v181, &v180);
            v45 = v180;
            v46 = sub_1B181FEE0(v180);
            v47 = sub_1B181FEE0((uint64_t)v43) + v46;
            v48 = swift_isUniquelyReferenced_nonNull_native();
            v182[0] = v43;
            if ((v48 & 1) == 0 || v47 > v43[3] >> 1)
            {
              if (v43[2] <= v47)
                v49 = v47;
              else
                v49 = v43[2];
              v43 = sub_1B1C65D70(v48, v49, 1, v43);
              v182[0] = v43;
            }
            v50 = v43[2];
            if (sub_1B1C7A1C4(v45))
            {
              if (v46 < 0)
                goto LABEL_107;
              v51 = (unint64_t)&v43[4 * v50 + 4];
              if (v45 + 32 < v51 + 32 * v46 && v51 < v45 + 32 + 32 * v46)
                goto LABEL_107;
              swift_arrayInitWithCopy();
              if (v46)
                v43[2] += v46;
            }
            v52 = swift_bridgeObjectRelease();
            nullsub_16(v52);
            swift_bridgeObjectRelease_n();
            v53 = 0xF000000000000000;
          }
          else
          {
            if (v9 != 0xF000000000000008)
            {
LABEL_106:
              v182[0] = 0;
              v182[1] = 0xE000000000000000;
              sub_1B1B1DD24(v9);
              sub_1B1B1DD24(v9);
              sub_1B2229430();
              v181 = v9;
              sub_1B22295EC();
              sub_1B2228890();
              sub_1B2229688();
              __break(1u);
LABEL_107:
              sub_1B2229700();
              __break(1u);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __break(1u);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              __break(1u);
              JUMPOUT(0x1B1B60EB4);
            }
            sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v112 = swift_allocObject();
            v113 = sub_1B19F6778(v112, 1);
            *v114 = 6580592;
            v114[1] = 0xE300000000000000;
            v114[2] = 0;
            v114[3] = 0;
            nullsub_16(v113);
            v116 = v115;
            sub_1B1B63150();
            v117 = swift_allocObject();
            v118 = sub_1B19F909C(v117, 1);
            *v119 = v116;
            nullsub_16(v118);
            v121 = v120;
            v122 = (_QWORD *)sub_1B1D1E44C(0);
            v182[0] = v122;
            v123 = *(_QWORD *)(v121 + 32);
            swift_bridgeObjectRetain();
            v181 = v123;
            sub_1B214E3CC(&v181, &v180);
            v124 = v180;
            v125 = sub_1B181FEE0(v180);
            v126 = sub_1B181FEE0((uint64_t)v122) + v125;
            v127 = swift_isUniquelyReferenced_nonNull_native();
            v182[0] = v122;
            if ((v127 & 1) == 0 || v126 > v122[3] >> 1)
            {
              if (v122[2] <= v126)
                v128 = v126;
              else
                v128 = v122[2];
              v122 = sub_1B1C65D70(v127, v128, 1, v122);
              v182[0] = v122;
            }
            v129 = v122[2];
            if (sub_1B1C7A1C4(v124))
            {
              if (v125 < 0)
                goto LABEL_107;
              v130 = (unint64_t)&v122[4 * v129 + 4];
              if (v124 + 32 < v130 + 32 * v125 && v130 < v124 + 32 + 32 * v125)
                goto LABEL_107;
              swift_arrayInitWithCopy();
              if (v125)
                v122[2] += v125;
            }
            v131 = swift_bridgeObjectRelease();
            nullsub_16(v131);
            swift_bridgeObjectRelease_n();
            v53 = 0xF000000000000008;
          }
LABEL_90:
          sub_1B1A05610(v53);
LABEL_91:
          v157 = v182[0];
LABEL_92:
          sub_1B1B63150();
          inited = swift_initStackObject();
          v159 = sub_1B19F909C(inited, 1);
          *v160 = v157;
          nullsub_16(v159);
          v162 = v161;
          v163 = (_QWORD *)sub_1B1D1E44C(0);
          v182[0] = v163;
          v164 = *(_QWORD *)(v162 + 32);
          swift_bridgeObjectRetain();
          v181 = v164;
          sub_1B214E3CC(&v181, &v180);
          v165 = v180;
          v166 = sub_1B181FEE0(v180);
          v167 = sub_1B181FEE0((uint64_t)v163) + v166;
          v168 = swift_isUniquelyReferenced_nonNull_native();
          v182[0] = v163;
          if ((v168 & 1) == 0 || v167 > v163[3] >> 1)
          {
            if (v163[2] <= v167)
              v169 = v167;
            else
              v169 = v163[2];
            v163 = sub_1B1C65D70(v168, v169, 1, v163);
            v182[0] = v163;
          }
          v170 = v163[2];
          if (sub_1B1C7A1C4(v165))
          {
            if (v166 < 0)
              goto LABEL_107;
            v171 = (unint64_t)&v163[4 * v170 + 4];
            if (v165 + 32 < v171 + 32 * v166 && v171 < v165 + 32 + 32 * v166)
              goto LABEL_107;
            swift_arrayInitWithCopy();
            if (v166)
              v163[2] += v166;
          }
          ++v3;
          v5 = swift_bridgeObjectRelease();
          nullsub_16(v5);
          swift_bridgeObjectRelease_n();
          v6 = v182[0];
          sub_1B1DC9A7C();
          v7 = *(_QWORD *)(v183 + 16);
          sub_1B1DC9B18(v7);
          v8 = sub_1B1DC9BE4(v7, v6);
          nullsub_16(v8);
          sub_1B1A05610(v9);
          v4 += 32;
          if (v179 != v3)
            continue;
          swift_bridgeObjectRelease();
          v2 = v183;
          break;
        default:
          goto LABEL_106;
      }
      break;
    }
  }
  v172 = sub_1B1B5A040(v2);
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v173 = swift_initStackObject();
  v174 = sub_1B19F909C(v173, 1);
  *v175 = v172;
  nullsub_16(v174);
  v177 = sub_1B1B5A040(v176);
  swift_bridgeObjectRelease();
  return v177;
}

uint64_t sub_1B1B60EE0(char a1, unsigned __int8 a2, char a3, uint64_t a4, _QWORD *a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t inited;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  char v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  char v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  _QWORD *v200;
  uint64_t v201;
  int v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unsigned __int8 v222;
  char v223;
  uint64_t v224;
  uint64_t v225;
  _QWORD *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  _QWORD *v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t *v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  char v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t v266;
  _QWORD *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  _QWORD *v277;
  uint64_t v278;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v280;
  uint64_t v281;
  unint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  _QWORD *v286;
  uint64_t v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  unint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  _QWORD *v295;
  uint64_t v296;
  _QWORD *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  _QWORD *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  char v309;
  uint64_t v310;
  uint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  char v324;
  uint64_t v325;
  uint64_t v326;
  unint64_t v327;
  uint64_t v328;
  uint64_t v329;
  char v330;
  uint64_t v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  _BYTE *v337;
  char v338;
  uint64_t v339;
  char v340;
  uint64_t v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  _QWORD *v359;
  uint64_t v360;
  char v361;
  _QWORD *v362;
  unint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t *v367;
  uint64_t v368;
  uint64_t v369;
  int v370;
  uint64_t v371;
  uint64_t v372;
  void *v373;
  uint64_t v374;
  _QWORD *v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  uint64_t *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t result;
  uint64_t v386;
  uint64_t v389;
  uint64_t v391;
  uint64_t v392;
  unsigned __int8 v393;
  uint64_t v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  unint64_t v402;
  uint64_t v403;
  char v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;

  if ((a1 & 1) != 0)
  {
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v13 = swift_allocObject();
    v14 = sub_1B19F6778(v13, 1);
    *v15 = 0xD000000000000038;
    v15[1] = 0x80000001B232FFD0;
    v15[2] = 0;
    v15[3] = 0;
    nullsub_16(v14);
    v17 = v16;
    sub_1B1B63150();
    v18 = swift_allocObject();
    v19 = sub_1B19F909C(v18, 1);
    *v20 = v17;
    nullsub_16(v19);
    v22 = sub_1B1B5A040(v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    v22 = sub_1B1D1E44C(0);
  }
  v389 = v22;
  v393 = a2;
  if (!a2)
  {
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v39 = swift_allocObject();
    v40 = sub_1B19F6778(v39, 1);
    *v41 = 0xD00000000000003ELL;
    v41[1] = 0x80000001B232FED0;
    v41[2] = 0;
    v41[3] = 0;
    v42 = swift_allocObject();
    v43 = sub_1B19F6778(v42, 1);
    *v44 = 0xD000000000000013;
    v44[1] = 0x80000001B232FC30;
    v44[2] = 0;
    v44[3] = 0;
    if ((a1 & 1) != 0)
    {
      v45 = swift_allocObject();
      v46 = sub_1B19F6778(v45, 1);
      *v47 = 0xD00000000000004CLL;
      v47[1] = 0x80000001B232FF10;
      v47[2] = 0;
      v47[3] = 0;
      nullsub_16(v46);
      v49 = v48;
      sub_1B1B63150();
      v50 = swift_allocObject();
      v51 = sub_1B19F909C(v50, 1);
      *v52 = v49;
      nullsub_16(v51);
      v38 = sub_1B1B5A040(v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = sub_1B1D1E44C(0);
    }
    nullsub_16(v40);
    v75 = v79;
    nullsub_16(v43);
    v77 = v80;
    sub_1B1B63150();
    inited = swift_allocObject();
    goto LABEL_19;
  }
  if (a2 == 1)
  {
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v23 = swift_allocObject();
    v24 = sub_1B19F6778(v23, 1);
    *v25 = 0xD000000000000044;
    v25[1] = 0x80000001B232FBE0;
    v25[2] = 0;
    v25[3] = 0;
    v26 = swift_allocObject();
    v27 = sub_1B19F6778(v26, 1);
    *v28 = 0xD000000000000013;
    v28[1] = 0x80000001B232FC30;
    v28[2] = 0;
    v28[3] = 0;
    if ((a1 & 1) != 0)
    {
      v29 = swift_allocObject();
      v30 = sub_1B19F6778(v29, 1);
      *v31 = 0xD00000000000002ALL;
      v31[1] = 0x80000001B232FEA0;
      v31[2] = 0;
      v31[3] = 0;
      nullsub_16(v30);
      v33 = v32;
      sub_1B1B63150();
      v34 = swift_allocObject();
      v35 = sub_1B19F909C(v34, 1);
      *v36 = v33;
      nullsub_16(v35);
      v38 = sub_1B1B5A040(v37);
      swift_bridgeObjectRelease();
    }
    else
    {
      v38 = sub_1B1D1E44C(0);
    }
    nullsub_16(v24);
    v75 = v74;
    nullsub_16(v27);
    v77 = v76;
    sub_1B1B63150();
    inited = swift_initStackObject();
LABEL_19:
    v72 = sub_1B19F909C(inited, 3);
    *v81 = v75;
    v81[1] = v77;
    v81[2] = v38;
    goto LABEL_20;
  }
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v54 = swift_allocObject();
  v55 = sub_1B19F6778(v54, 1);
  v57 = 0xD000000000000026;
  if ((a3 & 1) != 0)
    v57 = 0xD000000000000035;
  v58 = 0x80000001B232FF60;
  if ((a3 & 1) != 0)
    v58 = 0x80000001B232FF90;
  *v56 = v57;
  v56[1] = v58;
  v56[2] = 0;
  v56[3] = 0;
  nullsub_16(v55);
  v60 = v59;
  sub_1B1B63150();
  v61 = swift_allocObject();
  v62 = sub_1B19F909C(v61, 1);
  *v63 = v60;
  nullsub_16(v62);
  v65 = sub_1B1B5A040(v64);
  swift_bridgeObjectRelease();
  v66 = swift_allocObject();
  v67 = sub_1B19F6778(v66, 1);
  *v68 = 0;
  v68[1] = 0xE000000000000000;
  v68[2] = 0;
  v68[3] = 0;
  nullsub_16(v67);
  v70 = v69;
  v71 = swift_allocObject();
  v72 = sub_1B19F909C(v71, 2);
  *v73 = v65;
  v73[1] = v70;
LABEL_20:
  nullsub_16(v72);
  v391 = sub_1B1B5A040(v82);
  swift_bridgeObjectRelease();
  v83 = sub_1B1D1E4E8(0);
  v407 = v83;
  v400 = sub_1B1C7A1C4(a4);
  v392 = a4;
  if (!v400)
  {
LABEL_142:
    v221 = sub_1B1B5A040(v83);
    swift_bridgeObjectRelease();
    v222 = v393;
    v399 = v221;
    if (v393 == 1)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v223 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v223 & 1) == 0)
      {
        if (v393)
        {
          v232 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v232 & 1) == 0)
          {
            v397 = sub_1B1D1E44C(0);
            goto LABEL_152;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v233 = swift_allocObject();
        v234 = sub_1B19F6778(v233, 1);
        *v235 = 0xD000000000000018;
        v235[1] = 0x80000001B232FE00;
        v235[2] = 0;
        v235[3] = 0;
        nullsub_16(v234);
        v237 = v236;
        v238 = swift_allocObject();
        v239 = sub_1B19F6778(v238, 1);
        *v240 = 0xD000000000000018;
        v240[1] = 0x80000001B232FE20;
        v240[2] = 0;
        v240[3] = 0;
        nullsub_16(v239);
        v242 = v241;
        v401 = a5;
        v402 = a6;
        swift_bridgeObjectRetain();
        sub_1B2228890();
        v243 = swift_allocObject();
        v244 = sub_1B19F6778(v243, 1);
        *v245 = a5;
        v245[1] = a6;
        v245[2] = 0;
        v245[3] = 0;
        nullsub_16(v244);
        v247 = v246;
        sub_1B1B63150();
        v248 = swift_allocObject();
        v230 = sub_1B19F909C(v248, 3);
        *v249 = v237;
        v249[1] = v242;
        v249[2] = v247;
LABEL_151:
        nullsub_16(v230);
        v397 = sub_1B1B5A040(v250);
        swift_bridgeObjectRelease();
LABEL_152:
        swift_bridgeObjectRetain();
        sub_1B214F11C(a7, a8, a4);
        v252 = v251;
        swift_bridgeObjectRelease();
        sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v253 = swift_allocObject();
        v254 = sub_1B19F6778(v253, 1);
        *v255 = a7;
        v255[1] = v252;
        v255[2] = 0;
        v255[3] = 0;
        v256 = sub_1B1D1E4E8(0);
        v407 = v256;
        if (v400)
        {
          v395 = v254;
          swift_bridgeObjectRetain();
          v257 = 0;
          v258 = (_BYTE *)(a4 + 40);
          do
          {
            v262 = *((_QWORD *)v258 - 1);
            if (v262 >> 60 == 9)
            {
              v263 = *v258;
              swift_retain_n();
              v264 = (_QWORD *)sub_1B1D1E44C(0);
              if ((v263 & 2) != 0)
              {
                sub_1B2229430();
                swift_bridgeObjectRelease();
                v402 = 0xEA00000000002E73;
                swift_retain();
                sub_1B1C95978(v262);
                sub_1B1A05610(v262);
                swift_bridgeObjectRelease();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                v406 = v257;
                sub_1B2229A0C();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                v265 = swift_allocObject();
                v266 = sub_1B19F6778(v265, 1);
                *v267 = 0x656C636974726170;
                v267[1] = 0xEA00000000002E73;
                v267[2] = 0;
                v267[3] = 0;
                nullsub_16(v266);
                v269 = v268;
                sub_1B1B63150();
                v270 = swift_allocObject();
                v271 = sub_1B19F909C(v270, 2);
                *v272 = v264;
                v272[1] = v269;
                nullsub_16(v271);
                v274 = v273;
                v401 = (_QWORD *)sub_1B1D1E44C(0);
                swift_bridgeObjectRetain();
                v406 = *(_QWORD *)(v274 + 32);
                sub_1B214E3CC(&v406, &v405);
                v275 = v405;
                v276 = sub_1B181FEE0(v405);
                v277 = v401;
                v278 = sub_1B181FEE0((uint64_t)v401) + v276;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v278 > v401[3] >> 1)
                {
                  if (v401[2] <= v278)
                    v280 = v278;
                  else
                    v280 = v401[2];
                  v277 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v280, 1, v401);
                  v401 = v277;
                }
                v281 = v277[2];
                if (sub_1B1C7A1C4(v275))
                {
                  if (v276 < 0)
                    goto LABEL_236;
                  v282 = (unint64_t)&v277[4 * v281 + 4];
                  if (v275 + 32 < v282 + 32 * v276 && v282 < v275 + 32 + 32 * v276)
                    goto LABEL_236;
                  swift_arrayInitWithCopy();
                  if (v276)
                    v277[2] += v276;
                }
                v283 = swift_bridgeObjectRelease();
                nullsub_16(v283);
                v406 = *(_QWORD *)(v274 + 40);
                sub_1B214E3CC(&v406, &v405);
                v284 = v405;
                v285 = sub_1B181FEE0(v405);
                v286 = v401;
                v287 = sub_1B181FEE0((uint64_t)v401) + v285;
                v288 = swift_isUniquelyReferenced_nonNull_native();
                if (!v288 || v287 > v401[3] >> 1)
                {
                  if (v401[2] <= v287)
                    v289 = v287;
                  else
                    v289 = v401[2];
                  v286 = sub_1B1C65D70(v288, v289, 1, v401);
                  v401 = v286;
                }
                v290 = v286[2];
                if (sub_1B1C7A1C4(v284))
                {
                  if (v285 < 0)
                    goto LABEL_236;
                  v291 = (unint64_t)&v286[4 * v290 + 4];
                  if (v284 + 32 < v291 + 32 * v285 && v291 < v284 + 32 + 32 * v285)
                    goto LABEL_236;
                  swift_arrayInitWithCopy();
                  if (v285)
                    v286[2] += v285;
                }
                v292 = swift_bridgeObjectRelease();
                nullsub_16(v292);
                swift_bridgeObjectRelease_n();
                v264 = v401;
              }
              sub_1B1B63150();
              v293 = swift_allocObject();
              v294 = sub_1B19F909C(v293, 1);
              *v295 = v264;
              nullsub_16(v294);
              v297 = (_QWORD *)sub_1B1B5A040(v296);
              sub_1B1A05610(v262);
              swift_bridgeObjectRelease();
            }
            else
            {
              sub_1B1B1DD24(*((_QWORD *)v258 - 1));
              v298 = sub_1B1D1E44C(0);
              sub_1B1B63150();
              v299 = swift_initStackObject();
              v300 = sub_1B19F909C(v299, 1);
              *v301 = v298;
              nullsub_16(v300);
              v303 = v302;
              v304 = (_QWORD *)sub_1B1D1E44C(0);
              v401 = v304;
              v305 = *(_QWORD *)(v303 + 32);
              swift_bridgeObjectRetain();
              v406 = v305;
              sub_1B214E3CC(&v406, &v405);
              v306 = v405;
              v307 = sub_1B181FEE0(v405);
              v308 = sub_1B181FEE0((uint64_t)v304) + v307;
              v309 = swift_isUniquelyReferenced_nonNull_native();
              v401 = v304;
              if ((v309 & 1) == 0 || v308 > v304[3] >> 1)
              {
                if (v304[2] <= v308)
                  v310 = v308;
                else
                  v310 = v304[2];
                v304 = sub_1B1C65D70(v309, v310, 1, v304);
                v401 = v304;
              }
              v311 = v304[2];
              if (sub_1B1C7A1C4(v306))
              {
                if (v307 < 0)
                  goto LABEL_236;
                v312 = (unint64_t)&v304[4 * v311 + 4];
                if (v306 + 32 < v312 + 32 * v307 && v312 < v306 + 32 + 32 * v307)
                  goto LABEL_236;
                swift_arrayInitWithCopy();
                if (v307)
                  v304[2] += v307;
              }
              v313 = swift_bridgeObjectRelease();
              nullsub_16(v313);
              swift_bridgeObjectRelease_n();
              v297 = v401;
            }
            sub_1B1B63150();
            v314 = swift_initStackObject();
            v315 = sub_1B19F909C(v314, 1);
            *v316 = v297;
            nullsub_16(v315);
            v318 = v317;
            v319 = (_QWORD *)sub_1B1D1E44C(0);
            v401 = v319;
            v320 = *(_QWORD *)(v318 + 32);
            swift_bridgeObjectRetain();
            v406 = v320;
            sub_1B214E3CC(&v406, &v405);
            v321 = v405;
            v322 = sub_1B181FEE0(v405);
            v323 = sub_1B181FEE0((uint64_t)v319) + v322;
            v324 = swift_isUniquelyReferenced_nonNull_native();
            v401 = v319;
            if ((v324 & 1) == 0 || v323 > v319[3] >> 1)
            {
              if (v319[2] <= v323)
                v325 = v323;
              else
                v325 = v319[2];
              v319 = sub_1B1C65D70(v324, v325, 1, v319);
              v401 = v319;
            }
            v326 = v319[2];
            if (sub_1B1C7A1C4(v321))
            {
              if (v322 < 0)
                goto LABEL_236;
              v327 = (unint64_t)&v319[4 * v326 + 4];
              if (v321 + 32 < v327 + 32 * v322 && v327 < v321 + 32 + 32 * v322)
                goto LABEL_236;
              swift_arrayInitWithCopy();
              if (v322)
                v319[2] += v322;
            }
            ++v257;
            v259 = swift_bridgeObjectRelease();
            nullsub_16(v259);
            swift_bridgeObjectRelease_n();
            sub_1B1DC9A7C();
            v260 = *(_QWORD *)(v407 + 16);
            sub_1B1DC9B18(v260);
            v261 = sub_1B1DC9BE4(v260, (uint64_t)v401);
            nullsub_16(v261);
            sub_1B1A05610(v262);
            v258 += 32;
          }
          while (v400 != v257);
          a4 = v392;
          swift_bridgeObjectRelease();
          v328 = v407;
          v222 = v393;
          v254 = v395;
        }
        else
        {
          v328 = v256;
        }
        v329 = sub_1B1B5A040(v328);
        swift_bridgeObjectRelease();
        if (v222)
        {
          v330 = sub_1B2229D24();
          swift_bridgeObjectRelease();
          if ((v330 & 1) == 0)
          {
            v346 = sub_1B1D1E44C(0);
            v347 = v222;
            if (!v222)
              goto LABEL_226;
LABEL_224:
            if (v347 == 1)
            {
              swift_bridgeObjectRelease();
              goto LABEL_227;
            }
LABEL_226:
            v361 = sub_1B2229D24();
            swift_bridgeObjectRelease();
            if ((v361 & 1) == 0)
            {
              v369 = MEMORY[0x1E0DEE9D8];
              goto LABEL_229;
            }
LABEL_227:
            v401 = 0;
            v402 = 0xE000000000000000;
            sub_1B2229430();
            sub_1B2229CE8();
            sub_1B1A0E3F8();
            sub_1B2229CE8();
            v362 = v401;
            v363 = v402;
            v364 = swift_allocObject();
            *(_OWORD *)(v364 + 16) = xmmword_1B226D240;
            *(_QWORD *)(v364 + 32) = v362;
            *(_QWORD *)(v364 + 40) = v363;
            sub_1B1B63150();
            *(_QWORD *)(v364 + 48) = 0;
            *(_QWORD *)(v364 + 56) = 0;
            v365 = swift_initStackObject();
            v366 = sub_1B19F909C(v365, 3);
            *v367 = v364;
            v367[1] = (uint64_t)&unk_1E6393588;
            v367[2] = (uint64_t)&unk_1E63935C8;
            nullsub_16(v366);
            v369 = sub_1B214EE1C(v368);
            swift_bridgeObjectRelease();
LABEL_229:
            v370 = v222;
            if (v222)
            {
              v371 = v397;
              if (v370 == 1)
              {
                sub_1B1B63150();
                v372 = swift_initStackObject();
                v373 = &unk_1E6393648;
              }
              else
              {
                sub_1B1B63150();
                v372 = swift_initStackObject();
                v373 = (void *)MEMORY[0x1E0DEE9D8];
              }
            }
            else
            {
              sub_1B1B63150();
              v372 = swift_initStackObject();
              v373 = &unk_1E6393608;
              v371 = v397;
            }
            v374 = sub_1B19F909C(v372, 1);
            *v375 = v373;
            nullsub_16(v374);
            v377 = sub_1B214EE1C(v376);
            swift_bridgeObjectRelease();
            nullsub_16(v254);
            v379 = v378;
            sub_1B1B63150();
            v380 = swift_initStackObject();
            v381 = sub_1B19F909C(v380, 9);
            *v382 = v389;
            v382[1] = v391;
            v382[2] = v399;
            v382[3] = v371;
            v382[4] = v379;
            v382[5] = v329;
            v382[6] = v346;
            v382[7] = v369;
            v382[8] = v377;
            nullsub_16(v381);
            v384 = sub_1B214EE1C(v383);
            swift_bridgeObjectRelease();
            return v384;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v331 = swift_allocObject();
        v332 = sub_1B19F6778(v331, 1);
        *v333 = 0xD000000000000022;
        v333[1] = 0x80000001B232FD20;
        v333[2] = 0;
        v333[3] = 0;
        v334 = swift_allocObject();
        v335 = sub_1B19F6778(v334, 1);
        *v336 = 0xD000000000000029;
        v336[1] = 0x80000001B232FD50;
        v336[2] = 0;
        v336[3] = 0;
        if (v400)
        {
          swift_bridgeObjectRetain();
          v337 = (_BYTE *)(a4 + 56);
          while (1)
          {
            v338 = *(v337 - 16);
            v339 = *((_QWORD *)v337 - 1);
            v340 = *v337;
            v401 = (_QWORD *)*((_QWORD *)v337 - 3);
            LOBYTE(v402) = v338;
            v403 = v339;
            v404 = v340;
            if ((sub_1B1B551D8((uint64_t *)&v401) & 1) != 0)
              break;
            v337 += 32;
            if (!--v400)
            {
              swift_bridgeObjectRelease();
              goto LABEL_219;
            }
          }
          swift_bridgeObjectRelease();
          v345 = sub_1B1D1E44C(0);
        }
        else
        {
LABEL_219:
          sub_1B1B63150();
          v341 = swift_initStackObject();
          v342 = sub_1B19F909C(v341, 1);
          *v343 = &unk_1E6393688;
          nullsub_16(v342);
          v345 = sub_1B214EE1C(v344);
          swift_bridgeObjectRelease();
        }
        nullsub_16(v332);
        v349 = v348;
        nullsub_16(v335);
        v351 = v350;
        v352 = swift_allocObject();
        v353 = sub_1B19F6778(v352, 1);
        *v354 = 0xD000000000000052;
        v354[1] = 0x80000001B232FD80;
        v354[2] = 0;
        v354[3] = 0;
        nullsub_16(v353);
        v356 = v355;
        sub_1B1B63150();
        v357 = swift_allocObject();
        v358 = sub_1B19F909C(v357, 4);
        *v359 = v349;
        v359[1] = v351;
        v359[2] = v345;
        v359[3] = v356;
        nullsub_16(v358);
        v346 = sub_1B1B5A040(v360);
        swift_bridgeObjectRelease();
        v347 = v222;
        if (!v222)
          goto LABEL_226;
        goto LABEL_224;
      }
    }
    v401 = a5;
    v402 = a6;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v224 = swift_allocObject();
    v225 = sub_1B19F6778(v224, 1);
    *v226 = a5;
    v226[1] = a6;
    v226[2] = 0;
    v226[3] = 0;
    nullsub_16(v225);
    v228 = v227;
    sub_1B1B63150();
    v229 = swift_allocObject();
    v230 = sub_1B19F909C(v229, 1);
    *v231 = v228;
    goto LABEL_151;
  }
  v386 = a8;
  swift_bridgeObjectRetain();
  v84 = 0;
  v85 = (_BYTE *)(a4 + 56);
  while (1)
  {
    v89 = *((_QWORD *)v85 - 3);
    if (*v85)
      v90 = v84;
    else
      v90 = *((_QWORD *)v85 - 1);
    if (v89 >> 60 != 9)
    {
      if (v89 >> 60 == 12)
      {
        sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v91 = swift_allocObject();
        v92 = sub_1B19F6778(v91, 1);
        *v93 = 0xD00000000000003ALL;
        v93[1] = 0x80000001B232FE60;
        v93[2] = 0;
        v93[3] = 0;
        nullsub_16(v92);
        v95 = v94;
        sub_1B1B63150();
        v96 = swift_allocObject();
        v97 = sub_1B19F909C(v96, 1);
        *v98 = v95;
        nullsub_16(v97);
        v100 = v99;
        swift_retain_n();
        v101 = (_QWORD *)sub_1B1D1E44C(0);
        v401 = v101;
        v102 = *(_QWORD *)(v100 + 32);
        swift_bridgeObjectRetain();
        v406 = v102;
        sub_1B214E3CC(&v406, &v405);
        v103 = v405;
        v104 = sub_1B181FEE0(v405);
        v105 = sub_1B181FEE0((uint64_t)v101) + v104;
        v106 = swift_isUniquelyReferenced_nonNull_native();
        v401 = v101;
        if ((v106 & 1) == 0 || v105 > v101[3] >> 1)
        {
          if (v101[2] <= v105)
            v107 = v105;
          else
            v107 = v101[2];
          v101 = sub_1B1C65D70(v106, v107, 1, v101);
          v401 = v101;
        }
        v108 = v101[2];
        if (sub_1B1C7A1C4(v103))
        {
          if (v104 < 0)
            goto LABEL_236;
          v109 = (unint64_t)&v101[4 * v108 + 4];
          if (v103 + 32 < v109 + 32 * v104 && v109 < v103 + 32 + 32 * v104)
            goto LABEL_236;
          swift_arrayInitWithCopy();
          if (v104)
            v101[2] += v104;
        }
        v110 = swift_bridgeObjectRelease();
        nullsub_16(v110);
        swift_bridgeObjectRelease_n();
        sub_1B1A05610(v89);
      }
      else
      {
        sub_1B1B1DD24(*((_QWORD *)v85 - 3));
        v115 = sub_1B1D1E44C(0);
        sub_1B1B63150();
        v116 = swift_initStackObject();
        v117 = sub_1B19F909C(v116, 1);
        *v118 = v115;
        nullsub_16(v117);
        v120 = v119;
        v121 = (_QWORD *)sub_1B1D1E44C(0);
        v401 = v121;
        v122 = *(_QWORD *)(v120 + 32);
        swift_bridgeObjectRetain();
        v406 = v122;
        sub_1B214E3CC(&v406, &v405);
        v123 = v405;
        v124 = sub_1B181FEE0(v405);
        v125 = sub_1B181FEE0((uint64_t)v121) + v124;
        v126 = swift_isUniquelyReferenced_nonNull_native();
        v401 = v121;
        if ((v126 & 1) == 0 || v125 > v121[3] >> 1)
        {
          if (v121[2] <= v125)
            v127 = v125;
          else
            v127 = v121[2];
          v121 = sub_1B1C65D70(v126, v127, 1, v121);
          v401 = v121;
        }
        v128 = v121[2];
        if (sub_1B1C7A1C4(v123))
        {
          if (v124 < 0)
            goto LABEL_236;
          v129 = (unint64_t)&v121[4 * v128 + 4];
          if (v123 + 32 < v129 + 32 * v124 && v129 < v123 + 32 + 32 * v124)
            goto LABEL_236;
          swift_arrayInitWithCopy();
          if (v124)
            v121[2] += v124;
        }
        v130 = swift_bridgeObjectRelease();
        nullsub_16(v130);
        swift_bridgeObjectRelease_n();
      }
      v131 = v401;
      goto LABEL_127;
    }
    v111 = *(v85 - 16);
    v112 = *(unsigned __int8 *)(v89 + 60);
    sub_1B1B1DD24(*((_QWORD *)v85 - 3));
    sub_1B1B1DD24(v89);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B1C96CF0(v89);
    v394 = v90;
    if ((sub_1B1E68FB0(v113, 1u) & 1) != 0)
      v114 = (v111 & 2) != 0 ? MEMORY[0x1E0DEBC10] : MEMORY[0x1E0DEABD0];
    else
      sub_1B1C96CF0(v89);
    v132 = sub_1B1B4F95C(v114, 1);
    v396 = v133;
    v398 = v132;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v402 = 0xEA00000000002E73;
    swift_retain();
    sub_1B1C95978(v89);
    sub_1B1A05610(v89);
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    if (v112 != 5)
      break;
    v134 = (_QWORD *)sub_1B1D1E44C(0);
    v135 = v90;
LABEL_102:
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v402 = v396;
    sub_1B2228890();
    v406 = v135;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v179 = swift_allocObject();
    v180 = sub_1B19F6778(v179, 1);
    *v181 = v398;
    v181[1] = v396;
    v181[2] = 0;
    v181[3] = 0;
    nullsub_16(v180);
    v183 = v182;
    sub_1B1B63150();
    v184 = swift_allocObject();
    v185 = sub_1B19F909C(v184, 2);
    *v186 = v134;
    v186[1] = v183;
    nullsub_16(v185);
    v188 = v187;
    v401 = (_QWORD *)sub_1B1D1E44C(0);
    swift_bridgeObjectRetain();
    v406 = *(_QWORD *)(v188 + 32);
    sub_1B214E3CC(&v406, &v405);
    v189 = v405;
    v190 = sub_1B181FEE0(v405);
    v191 = v401;
    v192 = sub_1B181FEE0((uint64_t)v401) + v190;
    v193 = swift_isUniquelyReferenced_nonNull_native();
    if ((v193 & 1) == 0 || v192 > v401[3] >> 1)
    {
      if (v401[2] <= v192)
        v194 = v192;
      else
        v194 = v401[2];
      v191 = sub_1B1C65D70(v193, v194, 1, v401);
      v401 = v191;
    }
    v195 = v191[2];
    if (sub_1B1C7A1C4(v189))
    {
      if (v190 < 0)
        goto LABEL_236;
      v196 = (unint64_t)&v191[4 * v195 + 4];
      if (v189 + 32 < v196 + 32 * v190 && v196 < v189 + 32 + 32 * v190)
        goto LABEL_236;
      swift_arrayInitWithCopy();
      if (v190)
        v191[2] += v190;
    }
    v197 = swift_bridgeObjectRelease();
    nullsub_16(v197);
    v406 = *(_QWORD *)(v188 + 40);
    sub_1B214E3CC(&v406, &v405);
    v198 = v405;
    v199 = sub_1B181FEE0(v405);
    v200 = v401;
    v201 = sub_1B181FEE0((uint64_t)v401) + v199;
    v202 = swift_isUniquelyReferenced_nonNull_native();
    if (!v202 || v201 > v401[3] >> 1)
    {
      if (v401[2] <= v201)
        v203 = v201;
      else
        v203 = v401[2];
      v200 = sub_1B1C65D70(v202, v203, 1, v401);
      v401 = v200;
    }
    v204 = v200[2];
    if (sub_1B1C7A1C4(v198))
    {
      if (v199 < 0)
        goto LABEL_236;
      v205 = (unint64_t)&v200[4 * v204 + 4];
      if (v198 + 32 < v205 + 32 * v199 && v205 < v198 + 32 + 32 * v199)
        goto LABEL_236;
      swift_arrayInitWithCopy();
      if (v199)
        v200[2] += v199;
    }
    v206 = swift_bridgeObjectRelease();
    nullsub_16(v206);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    v131 = v401;
    sub_1B1A05610(v89);
LABEL_127:
    sub_1B1B63150();
    v207 = swift_initStackObject();
    v208 = sub_1B19F909C(v207, 1);
    *v209 = v131;
    nullsub_16(v208);
    v211 = v210;
    v212 = (_QWORD *)sub_1B1D1E44C(0);
    v401 = v212;
    v213 = *(_QWORD *)(v211 + 32);
    swift_bridgeObjectRetain();
    v406 = v213;
    sub_1B214E3CC(&v406, &v405);
    v214 = v405;
    v215 = sub_1B181FEE0(v405);
    v216 = sub_1B181FEE0((uint64_t)v212) + v215;
    v217 = swift_isUniquelyReferenced_nonNull_native();
    v401 = v212;
    if ((v217 & 1) == 0 || v216 > v212[3] >> 1)
    {
      if (v212[2] <= v216)
        v218 = v216;
      else
        v218 = v212[2];
      v212 = sub_1B1C65D70(v217, v218, 1, v212);
      v401 = v212;
    }
    v219 = v212[2];
    if (sub_1B1C7A1C4(v214))
    {
      if (v215 < 0)
        goto LABEL_236;
      v220 = (unint64_t)&v212[4 * v219 + 4];
      if (v214 + 32 < v220 + 32 * v215 && v220 < v214 + 32 + 32 * v215)
        goto LABEL_236;
      swift_arrayInitWithCopy();
      if (v215)
        v212[2] += v215;
    }
    ++v84;
    v86 = swift_bridgeObjectRelease();
    nullsub_16(v86);
    swift_bridgeObjectRelease_n();
    sub_1B1DC9A7C();
    v87 = *(_QWORD *)(v407 + 16);
    sub_1B1DC9B18(v87);
    v88 = sub_1B1DC9BE4(v87, (uint64_t)v401);
    nullsub_16(v88);
    sub_1B1A05610(v89);
    v85 += 32;
    if (v400 == v84)
    {
      a4 = v392;
      swift_bridgeObjectRelease();
      v83 = v407;
      a8 = v386;
      goto LABEL_142;
    }
  }
  sub_1B2229304();
  if (swift_conformsToProtocol2())
  {
    if (swift_dynamicCastMetatype())
    {
      sub_1B1B5E2FC(0x656C636974726170, 0xEA00000000002E73, v112);
      swift_bridgeObjectRelease();
      v136 = sub_1B1D1E44C(0);
      sub_1B1B63150();
      v137 = swift_allocObject();
      v138 = sub_1B19F909C(v137, 1);
      *v139 = v136;
      nullsub_16(v138);
      v141 = v140;
      v142 = (_QWORD *)sub_1B1D1E44C(0);
      v401 = v142;
      v143 = *(_QWORD *)(v141 + 32);
      swift_bridgeObjectRetain();
      v406 = v143;
      sub_1B214E3CC(&v406, &v405);
      v144 = v405;
      v145 = sub_1B181FEE0(v405);
      v146 = sub_1B181FEE0((uint64_t)v142) + v145;
      v147 = swift_isUniquelyReferenced_nonNull_native();
      v401 = v142;
      if ((v147 & 1) == 0 || v146 > v142[3] >> 1)
      {
        if (v142[2] <= v146)
          v148 = v146;
        else
          v148 = v142[2];
        v142 = sub_1B1C65D70(v147, v148, 1, v142);
        v401 = v142;
      }
      v149 = v142[2];
      if (sub_1B1C7A1C4(v144))
      {
        if (v145 < 0)
          goto LABEL_236;
        v150 = (unint64_t)&v142[4 * v149 + 4];
        if (v144 + 32 < v150 + 32 * v145 && v150 < v144 + 32 + 32 * v145)
          goto LABEL_236;
        swift_arrayInitWithCopy();
        if (v145)
          v142[2] += v145;
      }
      v151 = swift_bridgeObjectRelease();
      nullsub_16(v151);
      swift_bridgeObjectRelease_n();
      v152 = v401;
      goto LABEL_89;
    }
    if (swift_dynamicCastMetatype())
    {
      sub_1B1B5E56C(0x656C636974726170, 0xEA00000000002E73, v112);
      swift_bridgeObjectRelease();
      v153 = sub_1B1D1E44C(0);
      sub_1B1B63150();
      v154 = swift_allocObject();
      v155 = sub_1B19F909C(v154, 1);
      *v156 = v153;
      nullsub_16(v155);
      v158 = sub_1B1B5A040(v157);
LABEL_88:
      v152 = (_QWORD *)v158;
      swift_bridgeObjectRelease();
LABEL_89:
      sub_1B1B63150();
      v164 = swift_allocObject();
      v165 = sub_1B19F909C(v164, 1);
      *v166 = v152;
      nullsub_16(v165);
      v168 = v167;
      v169 = (_QWORD *)sub_1B1D1E44C(0);
      v401 = v169;
      v170 = *(_QWORD *)(v168 + 32);
      swift_bridgeObjectRetain();
      v406 = v170;
      sub_1B214E3CC(&v406, &v405);
      v171 = v405;
      v172 = sub_1B181FEE0(v405);
      v173 = sub_1B181FEE0((uint64_t)v169) + v172;
      v174 = swift_isUniquelyReferenced_nonNull_native();
      v401 = v169;
      if ((v174 & 1) == 0 || v173 > v169[3] >> 1)
      {
        if (v169[2] <= v173)
          v175 = v173;
        else
          v175 = v169[2];
        v169 = sub_1B1C65D70(v174, v175, 1, v169);
        v401 = v169;
      }
      v176 = v169[2];
      if (sub_1B1C7A1C4(v171))
      {
        if (v172 < 0)
          goto LABEL_236;
        v177 = (unint64_t)&v169[4 * v176 + 4];
        if (v171 + 32 < v177 + 32 * v172 && v177 < v171 + 32 + 32 * v172)
          goto LABEL_236;
        swift_arrayInitWithCopy();
        if (v172)
          v169[2] += v172;
      }
      v178 = swift_bridgeObjectRelease();
      nullsub_16(v178);
      swift_bridgeObjectRelease_n();
      v134 = v401;
      v135 = v394;
      goto LABEL_102;
    }
    if (swift_dynamicCastMetatype())
    {
      v159 = v112;
    }
    else if (swift_dynamicCastMetatype())
    {
      v159 = v112;
    }
    else
    {
      if (!swift_dynamicCastMetatype() && !swift_dynamicCastMetatype())
      {
        if (!swift_dynamicCastMetatype())
          goto LABEL_237;
        sub_1B1B5EAF8(0x656C636974726170, 0xEA00000000002E73, v112);
        goto LABEL_87;
      }
      v159 = v112;
    }
    sub_1B1B5E7B8(0x656C636974726170, 0xEA00000000002E73, v159);
LABEL_87:
    swift_bridgeObjectRelease();
    sub_1B1B63150();
    v160 = swift_allocObject();
    v161 = sub_1B19F909C(v160, 1);
    *v162 = MEMORY[0x1E0DEE9D8];
    nullsub_16(v161);
    v158 = sub_1B214EE1C(v163);
    goto LABEL_88;
  }
  __break(1u);
LABEL_236:
  sub_1B2229700();
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __break(1u);
LABEL_237:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2229430();
  sub_1B2229CE8();
  sub_1B1B4F260();
  sub_1B2229CE8();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1B63150()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5CC10)
  {
    sub_1B1A02758(255, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5CC10);
  }
}

uint64_t sub_1B1B631BC()
{
  uint64_t v0;

  sub_1B1B631E8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

unint64_t sub_1B1B631E8(unint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 4:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 3:
      return swift_release();
    case 1:
      return sub_1B1B63238(result, a2, a3);
  }
  return result;
}

unint64_t sub_1B1B63238(uint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t result;

  if (a2 >= 9)
  {
    swift_bridgeObjectRelease();
    return sub_1B1B28D2C(a3);
  }
  return result;
}

void sub_1B1B6326C(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 4:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    case 3:
      swift_retain();
      break;
    case 1:
      sub_1B1B632BC(a1, a2, a3);
      break;
  }
}

void sub_1B1B632BC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  if (a2 >= 9)
  {
    swift_bridgeObjectRetain();
    sub_1B1B632F0(a3);
  }
}

unint64_t sub_1B1B632F0(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
      result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B1B63324(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  v2 = swift_bridgeObjectRetain() + 64;
  do
  {
    v2 += 40;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B1B63440()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t inited;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;

  sub_1B2229430();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B2228890();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 32) = 0;
  v1 = v0 + 32;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0xE000000000000000;
  sub_1B1B63150();
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = v0;
  *(_QWORD *)(inited + 40) = v2;
  v4 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v5 = sub_1B1C65D70(0, v4, 1, MEMORY[0x1E0DEE9D8]);
  v6 = v5;
  if (*(_QWORD *)(v0 + 16))
  {
    v7 = (unint64_t)&v5[4 * v5[2] + 4];
    if (v1 < v7 + 32 * v4 && v7 < v1 + 32 * v4)
      goto LABEL_18;
    swift_arrayInitWithCopy();
    if (v4)
      v6[2] += v4;
  }
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(inited + 40);
  v9 = *(_QWORD *)(v8 + 16);
  v10 = v6[2];
  v11 = v6[3];
  swift_bridgeObjectRetain();
  if (v10 + v9 > (uint64_t)(v11 >> 1))
  {
    if (v10 <= v10 + v9)
      v14 = v10 + v9;
    else
      v14 = v10;
    v6 = sub_1B1C65D70(1, v14, 1, v6);
    if (!*(_QWORD *)(v8 + 16))
      goto LABEL_12;
  }
  else if (!v9)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v6;
  }
  v12 = (unint64_t)&v6[4 * v6[2] + 4];
  if (v8 + 32 >= v12 + 32 * v9 || v12 >= v8 + 32 + 32 * v9)
  {
    swift_arrayInitWithCopy();
    if (v9)
      v6[2] += v9;
    goto LABEL_12;
  }
LABEL_18:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

unint64_t sub_1B1B637E4(uint64_t a1)
{
  unint64_t result;
  uint64_t v3;
  uint64_t v4;

  result = 0xD00000000000007DLL;
  v3 = *(_QWORD *)(a1 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain();
    v4 = a1 + 64;
    do
    {
      v4 += 40;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B2228890();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return 0xD00000000000007DLL;
  }
  return result;
}

uint64_t sub_1B1B63914(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  sub_1B1B59758(0, a2, a3);
  if (a4 >= 1060)
  {
    if ((unint64_t)a4 >= 0x7D1)
    {
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  sub_1B1A06460();
  if ((sub_1B2229274() & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
  }
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B1B63B64()
{
  unint64_t result;

  result = qword_1ED4B7620;
  if (!qword_1ED4B7620)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228CFCC, &type metadata for ScriptError);
    atomic_store(result, (unint64_t *)&qword_1ED4B7620);
  }
  return result;
}

uint64_t sub_1B1B63BA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1B63BBC(a1, a2);
}

uint64_t sub_1B1B63BBC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1B20EF634(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), a2);
}

uint64_t storeEnumTagSinglePayload for MetalScriptCodeGen.FunctionKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1B63C2C + 4 * byte_1B227BF25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1B63C60 + 4 * byte_1B227BF20[v4]))();
}

uint64_t sub_1B1B63C60(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B63C68(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B63C70);
  return result;
}

uint64_t sub_1B1B63C7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B63C84);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1B63C88(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B63C90(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MetalScriptCodeGen.FunctionKind()
{
  return &type metadata for MetalScriptCodeGen.FunctionKind;
}

unint64_t sub_1B1B63CB0()
{
  unint64_t result;

  result = qword_1EEF5AFE8;
  if (!qword_1EEF5AFE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C010, &type metadata for MetalScriptCodeGen.FunctionKind);
    atomic_store(result, (unint64_t *)&qword_1EEF5AFE8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleSphereRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 29);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleSphereRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 36) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 36) = 0;
    if (a2)
      *(_BYTE *)(result + 29) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSphereRenderer()
{
  return &type metadata for ParticleSphereRenderer;
}

uint64_t sub_1B1B63DA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  sub_1B1F866E4(a1, 4);
  return sub_1B19F66A0((uint64_t)&v4, a2, &qword_1ED4B8CF8);
}

void *sub_1B1B63DEC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unsigned int v12;
  float v13;
  float v14;
  float v15;
  float v16;
  int v17;
  _BYTE v19[80];
  _OWORD v20[4];
  char v21;
  _OWORD v22[4];
  float v23;
  int v24;

  v7 = (_QWORD *)a3[1];
  swift_retain();
  sub_1B1D15764(v7, (uint64_t)v19);
  swift_release();
  sub_1B19F66A0((uint64_t)v19, (uint64_t)v20, qword_1ED4B8BB0);
  if ((v21 & 1) != 0)
  {
    v8 = xmmword_1B2244E20;
    v9 = xmmword_1B2244D90;
    v10 = xmmword_1B2244DD0;
    v11 = xmmword_1B2244DB0;
  }
  else
  {
    v11 = v20[0];
    v10 = v20[1];
    v9 = v20[2];
    v8 = v20[3];
  }
  v12 = *(_DWORD *)(v3 + 24);
  if (v12 - 11 > 0xF4)
  {
    v15 = *(float *)(v3 + 16);
    if (v15 > -1.0)
      v16 = *(float *)(v3 + 16);
    else
      v16 = -1.0;
    if (v15 >= 0.0)
      v13 = v16;
    else
      v13 = -1.0;
  }
  else
  {
    v13 = 1.0 / (float)v12;
    v14 = *(float *)(v3 + 16);
    if (v14 >= 0.0 && v14 > v13)
      v13 = *(float *)(v3 + 16);
  }
  v17 = *(_DWORD *)(v3 + 32);
  v22[0] = v11;
  v22[1] = v10;
  v22[2] = v9;
  v22[3] = v8;
  v23 = v13;
  v24 = v17;
  return sub_1B1D24BB8(v22, a1, a2, a3, v3);
}

uint64_t sub_1B1B63F18()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 30);
}

uint64_t sub_1B1B63F20(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 30) = result;
  return result;
}

uint64_t sub_1B1B63F28()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 31);
}

uint64_t sub_1B1B63F30(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 31) = result;
  return result;
}

uint64_t sub_1B1B63F38(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 8) = result;
  *(_BYTE *)(v1 + 12) = BYTE4(result) & 1;
  return result;
}

double (*sub_1B1B63F48())(_QWORD)
{
  return nullsub_16;
}

void sub_1B1B63F58(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 16) = a1;
}

uint64_t sub_1B1B63F60(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 20) = result;
  return result;
}

double (*sub_1B1B63F68())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1B63F78(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 24) = result;
  return result;
}

uint64_t sub_1B1B63F80()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 28);
}

uint64_t sub_1B1B63F88(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 28) = result;
  return result;
}

double (*sub_1B1B63F90())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1B63FA0()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 29);
}

uint64_t sub_1B1B63FA8(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 29) = result;
  return result;
}

float sub_1B1B63FB0()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

void sub_1B1B63FB8(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 32) = a1;
}

unint64_t sub_1B1B63FC0()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32);
}

float sub_1B1B63FE0()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

uint64_t sub_1B1B63FE8()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 20);
}

uint64_t sub_1B1B63FF0()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(7);
  *(_QWORD *)(v0 + 88) = sub_1B1B63DA0;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

uint64_t sub_1B1B64044(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = 4;
  *(_QWORD *)(a2 + 32) = 14;
  return result;
}

void *sub_1B1B64058(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1B1B63DEC(a1, a2, a3);
}

double sub_1B1B64090@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = -1082130432;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 256;
  *(_QWORD *)&result = 16843008;
  *(_QWORD *)(a1 + 28) = 16843008;
  return result;
}

uint64_t sub_1B1B640CC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int v11;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  sub_1B222A180();
  v6 = *(_DWORD *)(v2 + 28);
  v5 = *(_DWORD *)(v2 + 32);
  v10 = __PAIR64__(v5, v6);
  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  sub_1B1A0895C();
  sub_1B2229958();
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
  if (v6 == -1 && !v5)
  {
    v10 = *(_QWORD *)(v2 + 36);
    sub_1B2229958();
  }
  sub_1B222991C();
  LOBYTE(v10) = 2;
  sub_1B222991C();
  sub_1B1AE6738((int *)v2, (uint64_t)&v11);
  sub_1B1AE6738(&v11, (uint64_t)&v10);
  sub_1B1A72118();
  sub_1B2229958();
  LOBYTE(v10) = 4;
  sub_1B2229934();
  LOBYTE(v10) = 8;
  sub_1B2229934();
  LOBYTE(v10) = *(_BYTE *)(v2 + 24);
  sub_1B1A719C8();
  sub_1B2229958();
  LOBYTE(v10) = 6;
  sub_1B22299AC();
  LOBYTE(v10) = *(_BYTE *)(v2 + 68);
  sub_1B1A716BC();
  sub_1B2229958();
  LOBYTE(v10) = 9;
  return sub_1B222991C();
}

uint64_t sub_1B1B643C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  sub_1B222A180();
  v8 = 0xFFFFFFFFLL;
  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  sub_1B1A0895C();
  sub_1B2229958();
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  v8 = *(_QWORD *)v2;
  sub_1B2229958();
  sub_1B222991C();
  LOBYTE(v8) = 2;
  sub_1B222991C();
  sub_1B1AE6738((int *)(v2 + 8), (uint64_t)&v9);
  sub_1B1AE6738(&v9, (uint64_t)&v8);
  sub_1B1A72118();
  sub_1B2229958();
  LOBYTE(v8) = 4;
  sub_1B2229934();
  LOBYTE(v8) = 8;
  sub_1B2229934();
  LOBYTE(v8) = *(_BYTE *)(v2 + 22);
  sub_1B1A719C8();
  sub_1B2229958();
  LOBYTE(v8) = 6;
  sub_1B22299AC();
  LOBYTE(v8) = *(_BYTE *)(v2 + 28);
  sub_1B1A716BC();
  sub_1B2229958();
  LOBYTE(v8) = 9;
  return sub_1B222991C();
}

uint64_t sub_1B1B646A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1B646B4(a1, a2);
}

uint64_t sub_1B1B646B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  sub_1B222A180();
  v8 = 0xFFFFFFFFLL;
  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  sub_1B1A0895C();
  sub_1B2229958();
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  v8 = *(_QWORD *)v2;
  sub_1B2229958();
  sub_1B222991C();
  LOBYTE(v8) = 2;
  sub_1B222991C();
  sub_1B1AE6738((int *)(v2 + 8), (uint64_t)&v9);
  sub_1B1AE6738(&v9, (uint64_t)&v8);
  sub_1B1A72118();
  sub_1B2229958();
  LOBYTE(v8) = 4;
  sub_1B2229934();
  LOBYTE(v8) = 8;
  sub_1B2229934();
  LOBYTE(v8) = *(_BYTE *)(v2 + 20);
  sub_1B1A719C8();
  sub_1B2229958();
  LOBYTE(v8) = 6;
  sub_1B22299AC();
  LOBYTE(v8) = *(_BYTE *)(v2 + 28);
  sub_1B1A716BC();
  sub_1B2229958();
  LOBYTE(v8) = 9;
  return sub_1B222991C();
}

uint64_t sub_1B1B64994@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  int v9;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  sub_1B222A180();
  v8 = 0xFFFFFFFFLL;
  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  sub_1B1A0895C();
  sub_1B2229958();
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  v8 = *(_QWORD *)(v2 + 36);
  sub_1B2229958();
  sub_1B222991C();
  LOBYTE(v8) = 2;
  sub_1B222991C();
  sub_1B1AE6738((int *)v2, (uint64_t)&v9);
  sub_1B1AE6738(&v9, (uint64_t)&v8);
  sub_1B1A72118();
  sub_1B2229958();
  LOBYTE(v8) = 4;
  sub_1B2229934();
  LOBYTE(v8) = 8;
  sub_1B2229934();
  LOBYTE(v8) = *(_BYTE *)(v2 + 12);
  sub_1B1A719C8();
  sub_1B2229958();
  LOBYTE(v8) = 6;
  sub_1B22299AC();
  LOBYTE(v8) = *(_BYTE *)(v2 + 20);
  sub_1B1A716BC();
  sub_1B2229958();
  LOBYTE(v8) = 9;
  return sub_1B222991C();
}

uint64_t sub_1B1B64C74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v9;
  int v10;

  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  sub_1B222A180();
  v9 = 0xFFFFFFFFLL;
  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  sub_1B1A0895C();
  sub_1B2229958();
  if (v3)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  v9 = *(_QWORD *)v2;
  sub_1B2229958();
  sub_1B222991C();
  LOBYTE(v9) = 2;
  sub_1B222991C();
  sub_1B1AE6738((int *)(v2 + 8), (uint64_t)&v10);
  sub_1B1AE6738(&v10, (uint64_t)&v9);
  sub_1B1A72118();
  sub_1B2229958();
  LOBYTE(v9) = 4;
  sub_1B2229934();
  LOBYTE(v9) = 8;
  sub_1B2229934();
  v7 = 5;
  if (*(uint64_t *)(v2 + 96) <= 1)
  {
    if (*(_QWORD *)(v2 + 88))
      v7 = 5;
    else
      v7 = *(_BYTE *)(v2 + 20);
  }
  LOBYTE(v9) = v7;
  sub_1B1A719C8();
  sub_1B2229958();
  LOBYTE(v9) = 6;
  sub_1B22299AC();
  LOBYTE(v9) = *(_BYTE *)(v2 + 28);
  sub_1B1A716BC();
  sub_1B2229958();
  LOBYTE(v9) = 9;
  return sub_1B222991C();
}

uint64_t sub_1B1B64F74(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  int v25;
  char v26;

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  result = sub_1B222A150();
  if (v2)
    return result;
  v6 = a1[3];
  v7 = a1[4];
  sub_1B19FA070(a1, v6);
  if (sub_1B2067B64(2022, v6, v7))
  {
    *(_QWORD *)(v3 + 28) = 0xFFFFFFFFLL;
LABEL_4:
    sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
    sub_1B1A08878();
    sub_1B22297B4();
    v8 = v24;
    if (v26)
    {
      v8 = -1;
      v9 = 0;
    }
    else
    {
      v9 = v25;
    }
    goto LABEL_7;
  }
  sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  sub_1B1A08878();
  sub_1B2229814();
  v9 = 0;
  *(_DWORD *)(v3 + 28) = v24;
  *(_DWORD *)(v3 + 32) = v25;
  v8 = -1;
  if (v24 == -1 && !v25)
    goto LABEL_4;
LABEL_7:
  *(_DWORD *)(v3 + 36) = v8;
  *(_DWORD *)(v3 + 40) = v9;
  LOBYTE(v24) = 1;
  sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  *(_BYTE *)(v3 + 44) = sub_1B22297D8() & 1;
  v10 = a1[3];
  v11 = a1[4];
  sub_1B19FA070(a1, v10);
  if (sub_1B2067B64(1075, v10, v11))
  {
    v12 = 1;
  }
  else
  {
    LOBYTE(v24) = 2;
    v12 = sub_1B22297D8() & 1;
  }
  *(_BYTE *)(v3 + 45) = v12;
  sub_1B1A720D4();
  sub_1B2229814();
  *(_DWORD *)v3 = v24;
  *(_BYTE *)(v3 + 4) = v25;
  v13 = a1[3];
  v14 = a1[4];
  sub_1B19FA070(a1, v13);
  if (sub_1B2067B64(2047, v13, v14))
  {
    if ((v25 & 1) != 0)
    {
      *(_DWORD *)(v3 + 8) = -1082130432;
    }
    else
    {
      *(_DWORD *)(v3 + 8) = v24;
      *(_DWORD *)v3 = 0;
      *(_BYTE *)(v3 + 4) = 1;
    }
  }
  else
  {
    LOBYTE(v24) = 4;
    sub_1B22297F0();
    *(_DWORD *)(v3 + 8) = v15;
  }
  sub_1B1A71984();
  sub_1B22297B4();
  if (v24 == 7)
    v16 = 0;
  else
    v16 = v24;
  *(_BYTE *)(v3 + 24) = v16;
  v17 = a1[3];
  v18 = a1[4];
  sub_1B19FA070(a1, v17);
  if (sub_1B2067B64(2023, v17, v18))
  {
    if (((v16 - 3) & 0xFC) != 0)
      v19 = v16;
    else
      v19 = 0x5060304u >> (8 * (v16 - 3));
    *(_BYTE *)(v3 + 24) = v19;
  }
  *(_DWORD *)(v3 + 64) = sub_1B2229868();
  sub_1B1A71678();
  sub_1B2229814();
  *(_BYTE *)(v3 + 68) = 6;
  v20 = a1[3];
  v21 = a1[4];
  sub_1B19FA070(a1, v20);
  if (sub_1B2067B64(1079, v20, v21))
    v22 = 1;
  else
    v22 = sub_1B22297D8() & 1;
  *(_BYTE *)(v3 + 69) = v22;
  result = sub_1B22297F0();
  *(_DWORD *)(v3 + 72) = v23;
  return result;
}

uint64_t sub_1B1B65430(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  int v25;
  char v26;

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  result = sub_1B222A150();
  if (!v2)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1B19FA070(a1, v6);
    if (!sub_1B2067B64(2022, v6, v7))
    {
      sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
      sub_1B1A08878();
      sub_1B2229814();
    }
    sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
    sub_1B1A08878();
    sub_1B22297B4();
    v8 = v25;
    if (v26)
      v9 = -1;
    else
      v9 = v24;
    if (v26)
      v8 = 0;
    *(_DWORD *)v3 = v9;
    *(_DWORD *)(v3 + 4) = v8;
    LOBYTE(v24) = 1;
    *(_BYTE *)(v3 + 20) = sub_1B22297D8() & 1;
    v10 = a1[3];
    v11 = a1[4];
    sub_1B19FA070(a1, v10);
    if (sub_1B2067B64(1075, v10, v11))
    {
      v12 = 1;
    }
    else
    {
      LOBYTE(v24) = 2;
      v12 = sub_1B22297D8() & 1;
    }
    *(_BYTE *)(v3 + 21) = v12;
    sub_1B1A720D4();
    sub_1B2229814();
    *(_DWORD *)(v3 + 8) = v24;
    *(_BYTE *)(v3 + 12) = v25;
    v13 = a1[3];
    v14 = a1[4];
    sub_1B19FA070(a1, v13);
    if (sub_1B2067B64(2047, v13, v14))
    {
      if ((v25 & 1) != 0)
      {
        *(_DWORD *)(v3 + 16) = -1082130432;
      }
      else
      {
        *(_DWORD *)(v3 + 16) = v24;
        *(_DWORD *)(v3 + 8) = 0;
        *(_BYTE *)(v3 + 12) = 1;
      }
    }
    else
    {
      LOBYTE(v24) = 4;
      sub_1B22297F0();
      *(_DWORD *)(v3 + 16) = v15;
    }
    sub_1B1A71984();
    sub_1B22297B4();
    if (v24 == 7)
      v16 = 0;
    else
      v16 = v24;
    *(_BYTE *)(v3 + 22) = v16;
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067B64(2023, v17, v18))
    {
      if (((v16 - 3) & 0xFC) != 0)
        v19 = v16;
      else
        v19 = 0x5060304u >> (8 * (v16 - 3));
      *(_BYTE *)(v3 + 22) = v19;
    }
    *(_DWORD *)(v3 + 24) = sub_1B2229868();
    sub_1B1A71678();
    sub_1B2229814();
    *(_BYTE *)(v3 + 28) = 6;
    v20 = a1[3];
    v21 = a1[4];
    sub_1B19FA070(a1, v20);
    if (sub_1B2067B64(1079, v20, v21))
      v22 = 1;
    else
      v22 = sub_1B22297D8() & 1;
    *(_BYTE *)(v3 + 29) = v22;
    result = sub_1B22297F0();
    *(_DWORD *)(v3 + 32) = v23;
  }
  return result;
}

uint64_t sub_1B1B658AC(_QWORD *a1)
{
  return sub_1B1B658C0(a1);
}

uint64_t sub_1B1B658C0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  int v25;
  char v26;

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  result = sub_1B222A150();
  if (!v2)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1B19FA070(a1, v6);
    if (!sub_1B2067B64(2022, v6, v7))
    {
      sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
      sub_1B1A08878();
      sub_1B2229814();
    }
    sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
    sub_1B1A08878();
    sub_1B22297B4();
    v8 = v25;
    if (v26)
      v9 = -1;
    else
      v9 = v24;
    if (v26)
      v8 = 0;
    *(_DWORD *)v3 = v9;
    *(_DWORD *)(v3 + 4) = v8;
    LOBYTE(v24) = 1;
    *(_BYTE *)(v3 + 30) = sub_1B22297D8() & 1;
    v10 = a1[3];
    v11 = a1[4];
    sub_1B19FA070(a1, v10);
    if (sub_1B2067B64(1075, v10, v11))
    {
      v12 = 1;
    }
    else
    {
      LOBYTE(v24) = 2;
      v12 = sub_1B22297D8() & 1;
    }
    *(_BYTE *)(v3 + 31) = v12;
    sub_1B1A720D4();
    sub_1B2229814();
    *(_DWORD *)(v3 + 8) = v24;
    *(_BYTE *)(v3 + 12) = v25;
    v13 = a1[3];
    v14 = a1[4];
    sub_1B19FA070(a1, v13);
    if (sub_1B2067B64(2047, v13, v14))
    {
      if ((v25 & 1) != 0)
      {
        *(_DWORD *)(v3 + 16) = -1082130432;
      }
      else
      {
        *(_DWORD *)(v3 + 16) = v24;
        *(_DWORD *)(v3 + 8) = 0;
        *(_BYTE *)(v3 + 12) = 1;
      }
    }
    else
    {
      LOBYTE(v24) = 4;
      sub_1B22297F0();
      *(_DWORD *)(v3 + 16) = v15;
    }
    sub_1B1A71984();
    sub_1B22297B4();
    if (v24 == 7)
      v16 = 0;
    else
      v16 = v24;
    *(_BYTE *)(v3 + 20) = v16;
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067B64(2023, v17, v18))
    {
      if (((v16 - 3) & 0xFC) != 0)
        v19 = v16;
      else
        v19 = 0x5060304u >> (8 * (v16 - 3));
      *(_BYTE *)(v3 + 20) = v19;
    }
    *(_DWORD *)(v3 + 24) = sub_1B2229868();
    sub_1B1A71678();
    sub_1B2229814();
    *(_BYTE *)(v3 + 28) = 6;
    v20 = a1[3];
    v21 = a1[4];
    sub_1B19FA070(a1, v20);
    if (sub_1B2067B64(1079, v20, v21))
      v22 = 1;
    else
      v22 = sub_1B22297D8() & 1;
    *(_BYTE *)(v3 + 29) = v22;
    result = sub_1B22297F0();
    *(_DWORD *)(v3 + 32) = v23;
  }
  return result;
}

uint64_t sub_1B1B65D3C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  int v24;
  int v25;
  char v26;

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  result = sub_1B222A150();
  if (!v2)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1B19FA070(a1, v6);
    if (!sub_1B2067B64(2022, v6, v7))
    {
      sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
      sub_1B1A08878();
      sub_1B2229814();
    }
    sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
    sub_1B1A08878();
    sub_1B22297B4();
    v8 = v25;
    if (v26)
      v9 = -1;
    else
      v9 = v24;
    if (v26)
      v8 = 0;
    *(_DWORD *)(v3 + 36) = v9;
    *(_DWORD *)(v3 + 40) = v8;
    LOBYTE(v24) = 1;
    *(_BYTE *)(v3 + 32) = sub_1B22297D8() & 1;
    v10 = a1[3];
    v11 = a1[4];
    sub_1B19FA070(a1, v10);
    if (sub_1B2067B64(1075, v10, v11))
    {
      v12 = 1;
    }
    else
    {
      LOBYTE(v24) = 2;
      v12 = sub_1B22297D8() & 1;
    }
    *(_BYTE *)(v3 + 33) = v12;
    sub_1B1A720D4();
    sub_1B2229814();
    *(_DWORD *)v3 = v24;
    *(_BYTE *)(v3 + 4) = v25;
    v13 = a1[3];
    v14 = a1[4];
    sub_1B19FA070(a1, v13);
    if (sub_1B2067B64(2047, v13, v14))
    {
      if ((v25 & 1) != 0)
      {
        *(_DWORD *)(v3 + 8) = -1082130432;
      }
      else
      {
        *(_DWORD *)(v3 + 8) = v24;
        *(_DWORD *)v3 = 0;
        *(_BYTE *)(v3 + 4) = 1;
      }
    }
    else
    {
      LOBYTE(v24) = 4;
      sub_1B22297F0();
      *(_DWORD *)(v3 + 8) = v15;
    }
    sub_1B1A71984();
    sub_1B22297B4();
    if (v24 == 7)
      v16 = 0;
    else
      v16 = v24;
    *(_BYTE *)(v3 + 12) = v16;
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067B64(2023, v17, v18))
    {
      if (((v16 - 3) & 0xFC) != 0)
        v19 = v16;
      else
        v19 = 0x5060304u >> (8 * (v16 - 3));
      *(_BYTE *)(v3 + 12) = v19;
    }
    *(_DWORD *)(v3 + 16) = sub_1B2229868();
    sub_1B1A71678();
    sub_1B2229814();
    *(_BYTE *)(v3 + 20) = 6;
    v20 = a1[3];
    v21 = a1[4];
    sub_1B19FA070(a1, v20);
    if (sub_1B2067B64(1079, v20, v21))
      v22 = 1;
    else
      v22 = sub_1B22297D8() & 1;
    *(_BYTE *)(v3 + 21) = v22;
    result = sub_1B22297F0();
    *(_DWORD *)(v3 + 24) = v23;
  }
  return result;
}

uint64_t sub_1B1B661B8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  int v24;
  int v25;
  int v26;
  char v27;

  v3 = v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B668A0();
  result = sub_1B222A150();
  if (!v2)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1B19FA070(a1, v6);
    if (!sub_1B2067B64(2022, v6, v7))
    {
      sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
      sub_1B1A08878();
      sub_1B2229814();
    }
    sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
    sub_1B1A08878();
    sub_1B22297B4();
    v8 = v26;
    if (v27)
      v9 = -1;
    else
      v9 = v25;
    if (v27)
      v8 = 0;
    *(_DWORD *)v3 = v9;
    *(_DWORD *)(v3 + 4) = v8;
    LOBYTE(v25) = 1;
    *(_BYTE *)(v3 + 37) = sub_1B22297D8() & 1;
    v10 = a1[3];
    v11 = a1[4];
    sub_1B19FA070(a1, v10);
    if (sub_1B2067B64(1075, v10, v11))
    {
      v12 = 1;
    }
    else
    {
      LOBYTE(v25) = 2;
      v12 = sub_1B22297D8() & 1;
    }
    *(_BYTE *)(v3 + 38) = v12;
    sub_1B1A720D4();
    sub_1B2229814();
    *(_DWORD *)(v3 + 8) = v25;
    *(_BYTE *)(v3 + 12) = v26;
    v13 = a1[3];
    v14 = a1[4];
    sub_1B19FA070(a1, v13);
    if (sub_1B2067B64(2047, v13, v14))
    {
      if ((v26 & 1) != 0)
      {
        *(_DWORD *)(v3 + 16) = -1082130432;
      }
      else
      {
        *(_DWORD *)(v3 + 16) = v25;
        *(_DWORD *)(v3 + 8) = 0;
        *(_BYTE *)(v3 + 12) = 1;
      }
    }
    else
    {
      LOBYTE(v25) = 4;
      sub_1B22297F0();
      *(_DWORD *)(v3 + 16) = v15;
    }
    sub_1B1A71984();
    sub_1B22297B4();
    if (v25 == 7)
      v16 = 0;
    else
      v16 = v25;
    *(_BYTE *)(v3 + 20) = v16;
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067B64(2023, v17, v18))
    {
      LOBYTE(v19) = 6;
      if (*(uint64_t *)(v3 + 96) <= 1 && !*(_QWORD *)(v3 + 88))
      {
        v20 = (v16 - 3);
        LOBYTE(v19) = v16;
        if (v20 <= 3)
          v19 = 0x5060304u >> (8 * v20);
      }
      *(_BYTE *)(v3 + 20) = v19;
    }
    *(_DWORD *)(v3 + 24) = sub_1B2229868();
    sub_1B1A71678();
    sub_1B2229814();
    *(_BYTE *)(v3 + 28) = 6;
    v21 = a1[3];
    v22 = a1[4];
    sub_1B19FA070(a1, v21);
    if (sub_1B2067B64(1079, v21, v22))
      v23 = 1;
    else
      v23 = sub_1B22297D8() & 1;
    *(_BYTE *)(v3 + 29) = v23;
    result = sub_1B22297F0();
    *(_DWORD *)(v3 + 32) = v24;
  }
  return result;
}

double sub_1B1B66650@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  int v7;

  *(float *)&result = sub_1B1B66750(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B1B66694(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v10;
  uint64_t result;
  _OWORD v12[2];
  int v13;

  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  v10 = *(_OWORD *)(v1 + 16);
  v12[0] = *(_OWORD *)v1;
  v12[1] = v10;
  v13 = *(_DWORD *)(v1 + 32);
  result = sub_1B1B646B4(a1, (uint64_t)v12 - v8);
  if (!v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  return result;
}

float sub_1B1B66750@<S0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  float result;
  int v12;
  char v13;
  char v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  float v25;
  char v26;
  int v27;
  uint64_t v28;

  sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v21 - v9;
  v22 = 0xFFFFFFFFLL;
  v23 = 0;
  v24 = 1;
  v25 = -1.0;
  v26 = 0;
  v27 = 256;
  v28 = 16843008;
  sub_1B1B658C0(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v12 = v23;
    v13 = v24;
    result = v25;
    v14 = v26;
    v15 = v27;
    v16 = v28;
    v17 = BYTE1(v28);
    v18 = BYTE2(v28);
    v19 = BYTE3(v28);
    v20 = HIDWORD(v28);
    *(_QWORD *)a2 = v22;
    *(_DWORD *)(a2 + 8) = v12;
    *(_BYTE *)(a2 + 12) = v13;
    *(float *)(a2 + 16) = result;
    *(_BYTE *)(a2 + 20) = v14;
    *(_DWORD *)(a2 + 24) = v15;
    *(_BYTE *)(a2 + 28) = v16;
    *(_BYTE *)(a2 + 29) = v17;
    *(_BYTE *)(a2 + 30) = v18;
    *(_BYTE *)(a2 + 31) = v19;
    *(_DWORD *)(a2 + 32) = v20;
  }
  return result;
}

unint64_t sub_1B1B668A0()
{
  unint64_t result;

  result = qword_1ED4B9D20;
  if (!qword_1ED4B9D20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B228DDB0, &type metadata for ParticleDefaultRendererableCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B9D20);
  }
  return result;
}

void sub_1B1B668E4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1B668A0();
    v7 = a3(a1, &type metadata for ParticleDefaultRendererableCodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

id sub_1B1B66940(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v6;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  void (*v22)(uint64_t, uint64_t);
  id v23;
  char *v25;
  char *v26;
  objc_class *ObjectType;
  objc_super v30;
  id v31[2];

  v6 = v5;
  v31[1] = *(id *)MEMORY[0x1E0C80C00];
  ObjectType = (objc_class *)swift_getObjectType();
  v10 = &v6[OBJC_IVAR____TtC3VFX13ShaderLibrary_reloadedNotificationBlock];
  *(_QWORD *)v10 = nullsub_16;
  *((_QWORD *)v10 + 1) = 0;
  v26 = v10;
  *(_QWORD *)&v6[OBJC_IVAR____TtC3VFX13ShaderLibrary_device] = a2;
  v11 = &v6[OBJC_IVAR____TtC3VFX13ShaderLibrary_libraryURL];
  v12 = sub_1B2228110();
  v13 = *(_QWORD *)(v12 - 8);
  v25 = v11;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v11, a1, v12);
  v14 = v6;
  swift_unknownObjectRetain();
  v15 = (void *)sub_1B2228074();
  v31[0] = 0;
  v16 = objc_msgSend(a2, sel_newLibraryWithURL_error_, v15, v31);

  v17 = v31[0];
  if (v16)
  {
    *(_QWORD *)&v14[OBJC_IVAR____TtC3VFX13ShaderLibrary_library] = v16;
    v18 = &v14[OBJC_IVAR____TtC3VFX13ShaderLibrary_label];
    *(_QWORD *)v18 = a4;
    *((_QWORD *)v18 + 1) = a5;
    v19 = v17;
    swift_unknownObjectRetain();
    if (a5)
    {
      swift_bridgeObjectRetain();
      v20 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
    }
    else
    {
      v20 = 0;
    }
    objc_msgSend(v16, sel_setLabel_, v20);
    swift_unknownObjectRelease();

    v30.receiver = v14;
    v30.super_class = ObjectType;
    v23 = objc_msgSendSuper2(&v30, sel_init);
    swift_unknownObjectRelease();

    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
  }
  else
  {
    v21 = v31[0];
    swift_bridgeObjectRelease();
    sub_1B2227FB4();

    swift_willThrow();
    swift_unknownObjectRelease();

    v22 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v22(a1, v12);
    swift_unknownObjectRelease();
    v22((uint64_t)v25, v12);
    v23 = (id)*((_QWORD *)v26 + 1);

    swift_release();
    swift_deallocPartialClassInstance();
  }
  return v23;
}

id sub_1B1B66BF4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B1B66CF4()
{
  return type metadata accessor for ShaderLibrary();
}

uint64_t type metadata accessor for ShaderLibrary()
{
  uint64_t result;

  result = qword_1ED4BF410;
  if (!qword_1ED4BF410)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_1B1B66D64()
{
  uint64_t result;
  unint64_t v1;

  result = sub_1B2228110();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

float sub_1B1B66DF4(uint64_t a1)
{
  sub_1B1F24AF8(a1);
  return 1.0;
}

uint64_t sub_1B1B66E20(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    v4 = 0;
  }
  else
  {
    v3 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    v4 = v3 ^ 1;
  }
  return v4 & 1;
}

uint64_t sub_1B1B66E9C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5, float a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;
  float v17;
  float v18;

  v9 = type metadata accessor for ParticleFloatInit.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1B5E23E74](&unk_1B227C3A0, v9);
  v10 = sub_1B22299C4();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v16 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A180();
  v17 = a5;
  v18 = a6;
  sub_1B1B4D924();
  sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

float sub_1B1B66FDC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  float v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  float v15;

  v7 = type metadata accessor for ParticleFloatInit.CodingKeys(255, a2, a3, a4);
  MEMORY[0x1B5E23E74](&unk_1B227C3A0, v7);
  v8 = sub_1B2229898();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v14 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A150();
  if (!v4)
  {
    sub_1B1B4D924();
    sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v5 = v15;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v5;
}

uint64_t sub_1B1B67158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x1B5E23E74](&unk_1B227C3A0, a3);
  return sub_1B1F1DDE8();
}

uint64_t sub_1B1B671A4()
{
  return 0x65676E6172;
}

uint64_t sub_1B1B671B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1B66E20(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1B1B671E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B179FDD8();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B1B67214(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B227C3A0, a1);
  return sub_1B222A1D4();
}

uint64_t sub_1B1B67248(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B227C3A0, a1);
  return sub_1B222A1E0();
}

void sub_1B1B6727C(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  float v6;
  int v7;

  v6 = sub_1B1B66FDC(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
  if (!v4)
  {
    *(float *)a4 = v6;
    *(_DWORD *)(a4 + 4) = v7;
  }
}

uint64_t sub_1B1B672AC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float *v4;

  return sub_1B1B66E9C(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a4, *v4, v4[1]);
}

double sub_1B1B672CC@<D0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  double result;

  sub_1B1B66DF4(*(_QWORD *)(a1 + 16));
  __asm { FMOV            V0.2S, #1.0 }
  *a2 = result;
  return result;
}

uint64_t sub_1B1B672FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return type metadata accessor for ParticleFloatInit.System(0, a1, a2, a4);
}

uint64_t type metadata accessor for ParticleFloatInit.System(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParticleFloatInit.System);
}

uint64_t sub_1B1B67330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B67404(a1, *(_QWORD *)(a2 + 80), *(_QWORD *)(a2 + 88), a4);
}

const char *sub_1B1B6733C()
{
  return sub_1B1B6736C();
}

uint64_t sub_1B1B67348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B672FC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a3, a4);
}

const char *sub_1B1B6736C()
{
  if (swift_dynamicCastMetatype())
    return "SetParticleAngle.CPU";
  if (swift_dynamicCastMetatype())
    return "SetParticleAngleVelocity.CPU";
  if (swift_dynamicCastMetatype())
    return "SetParticleTextureFrame.CPU";
  return "Unsupported";
}

uint64_t sub_1B1B67404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  int v6;

  v4 = type metadata accessor for ParticleFloatInit(0, a2, a3, a4);
  sub_1B1E52568(v4, (uint64_t)&off_1E638E248, (uint64_t)&v6);
  return sub_1B1E52994();
}

uint64_t type metadata accessor for ParticleFloatInit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParticleFloatInit);
}

uint64_t type metadata accessor for ParticleFloatInit.CodingKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParticleFloatInit.CodingKeys);
}

uint64_t sub_1B1B67480(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    sub_1B1B4D924();
    v8 = a2;
    result = MEMORY[0x1B5E23E74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1B674DC(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1B6751C + 4 * byte_1B227C1A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1B6753C + 4 * byte_1B227C1A5[v4]))();
}

_BYTE *sub_1B1B6751C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1B6753C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1B67544(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1B6754C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1B67554(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1B6755C(_DWORD *result)
{
  *result = 0;
  return result;
}

void sub_1B1B67568()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1B67578()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1B67588()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1B675B8()
{
  JUMPOUT(0x1B5E240CCLL);
}

uint64_t sub_1B1B67628()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX24VFXRemotePreviewEndpoint_name);
  swift_bridgeObjectRetain();
  return v1;
}

id VFXRemotePreviewEndpoint.__allocating_init(name:)(uint64_t a1, uint64_t a2)
{
  objc_class *v2;
  char *v5;
  char *v6;
  objc_super v8;

  v5 = (char *)objc_allocWithZone(v2);
  swift_unknownObjectWeakInit();
  v6 = &v5[OBJC_IVAR____TtC3VFX24VFXRemotePreviewEndpoint_name];
  *(_QWORD *)v6 = a1;
  *((_QWORD *)v6 + 1) = a2;
  v8.receiver = v5;
  v8.super_class = v2;
  return objc_msgSendSuper2(&v8, sel_init);
}

id VFXRemotePreviewEndpoint.init(name:)(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v5;
  objc_super v7;

  swift_unknownObjectWeakInit();
  v5 = &v2[OBJC_IVAR____TtC3VFX24VFXRemotePreviewEndpoint_name];
  *(_QWORD *)v5 = a1;
  *((_QWORD *)v5 + 1) = a2;
  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for VFXRemotePreviewEndpoint();
  return objc_msgSendSuper2(&v7, sel_init);
}

uint64_t type metadata accessor for VFXRemotePreviewEndpoint()
{
  return objc_opt_self();
}

id VFXRemotePreviewEndpoint.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

void VFXRemotePreviewEndpoint.init()()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

id VFXRemotePreviewEndpoint.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXRemotePreviewEndpoint();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B1B678BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = MEMORY[0x1B5E240CC](*a1 + OBJC_IVAR____TtC3VFX24VFXRemotePreviewEndpoint_world);
  *a2 = result;
  return result;
}

uint64_t sub_1B1B678F0()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B1B6790C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX24VFXRemotePreviewEndpoint_name);
  v3 = v2[1];
  *a2 = *v2;
  a2[1] = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1B67928(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v3 = *a1;
  v2 = a1[1];
  v4 = (_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX24VFXRemotePreviewEndpoint_name);
  *v4 = v3;
  v4[1] = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t method lookup function for VFXRemotePreviewEndpoint()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXRemotePreviewEndpoint.world.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of VFXRemotePreviewEndpoint.name.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of VFXRemotePreviewEndpoint.__allocating_init(name:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

void sub_1B1B679EC(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x1E0DEE9E8];
}

uint64_t sub_1B1B679FC(_QWORD *a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *a1 = a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1B67A2C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _DWORD v14[4];

  v8 = *(_QWORD *)(a3 + 16);
  swift_bridgeObjectRetain();
  v9 = sub_1B1B0F63C(a1, a2, v8);
  result = swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    sub_1B1B8B7CC((uint64_t)v14, a1, a2);
    v11 = sub_1B1E856CC(a1, a2);
    v12 = *(_QWORD *)(v11 + 16);
    if (v12)
    {
      v13 = (_QWORD *)(v11 + 40);
      do
      {
        sub_1B1B67A2C(*(v13 - 1), *v13, a3, a4);
        v13 += 2;
        --v12;
      }
      while (v12);
    }
    swift_bridgeObjectRelease();
    return sub_1B1B8B00C(v14, a1);
  }
  return result;
}

uint64_t sub_1B1B67B04(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66[8];
  _OWORD v67[2];
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  _BYTE v76[40];
  uint64_t v77;
  int v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  char v85;
  uint64_t v86;
  char v87;
  uint64_t v88;

  v4 = v3;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v83 = qword_1ED4D09F8;
  v84 = 0;
  v85 = 2;
  v86 = 0;
  v87 = 2;
  v88 = 0;
  swift_retain();
  sub_1B1B116A4(3, 3, (uint64_t)&v60);
  swift_release();
  v77 = v60;
  v78 = v61;
  v79 = v62;
  v80 = v63 | 1;
  v81 = v64;
  v82 = v65;
  v8 = MEMORY[0x1E0DEE9E8];
  v59 = MEMORY[0x1E0DEE9E8];
  sub_1B1E8FCE4(v3, (uint64_t)&v77, a1 & 0xFFFFFFFFFFLL, v66);
  sub_1B1A18378((uint64_t)v66, (uint64_t)v67, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v67[0])
    goto LABEL_26;
  if (v73 < 1 || (v51 = v70) == 0)
  {
LABEL_25:
    sub_1B19ED748(v66);
LABEL_26:
    if ((a3 & 1) == 0)
    {
      v43 = swift_allocObject();
      *(_QWORD *)(v43 + 16) = v8;
      swift_retain();
      sub_1B1B68F6C(a2, v4, v43, v4, (uint64_t)&v59);
      swift_release();
      swift_release();
    }
    sub_1B19ED720((uint64_t)&v60);
    return v59;
  }
  v45 = a2;
  v57 = v3;
  v9 = v72[4];
  v10 = *(unsigned __int8 *)(v71 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v74[0] = v67[0];
  v74[1] = v67[1];
  v75 = v68;
  v47 = (uint64_t)(v72 + 6);
  v48 = v69;
  v56 = v72;
  v46 = v72 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  v11 = 0;
  v12 = 0;
  v49 = v10;
  v50 = v9;
  while (1)
  {
    v54 = v12;
    v55 = v11;
    v13 = (unsigned int *)(v48 + 48 * v11);
    v14 = *v13;
    v15 = (uint64_t *)*((_QWORD *)v13 + 2);
    v17 = *((_QWORD *)v13 + 4);
    v16 = *((_QWORD *)v13 + 5);
    v52 = v13[1];
    v53 = *((_QWORD *)v13 + 3);
    if (v10)
    {
      v18 = *(os_unfair_lock_s **)(v16 + 376);
      swift_retain();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v9);
    sub_1B1A18378(v47, (uint64_t)v76, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v19 = v56[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v56[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v56[7] = v20;
    v46[1] = 0;
    v46[2] = 0;
    *v46 = 0;
    swift_release();
    v21 = (_BYTE *)sub_1B1A12038((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1E6391AC0, v15, v53, v17, (uint64_t)v56);
    v22 = sub_1B1A12038((uint64_t)&type metadata for EmitterRuntime, (uint64_t)&off_1E637F3F8, v15, v53, v17, (uint64_t)v56);
    v23 = v22;
    if (!v15)
      break;
    if (v17)
    {
      do
      {
        v25 = *v15++;
        v24 = v25;
        v26 = swift_retain();
        if ((*(_BYTE *)(v16 + 184) & 1) != 0)
          goto LABEL_29;
        v27 = *(unsigned int *)(*(_QWORD *)(v16 + 168) + 4 * v24);
        v28 = *(unsigned int *)(*(_QWORD *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v27 + 8);
        swift_release();
        v29 = *(unsigned int *)(v16 + 28);
        LOBYTE(v58) = *(_BYTE *)(v16 + 32);
        sub_1B1CCA31C(v27 | (v28 << 32), v29 | ((unint64_t)v58 << 32), v21, v23, v57, 1);
        LOBYTE(v27) = *(_BYTE *)(v16 + 184);
        v30 = swift_retain();
        if ((v27 & 1) != 0)
          goto LABEL_29;
        v31 = *(unsigned int *)(*(_QWORD *)(v16 + 168) + 4 * v24);
        v32 = *(unsigned int *)(*(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v31 + 8);
        swift_release();
        sub_1B1B8B944(&v58, v31 | (v32 << 32));
        v23 += 656;
        v21 += 88;
      }
      while (--v17);
    }
LABEL_22:
    v12 = v54;
    sub_1B1F05D48(v56, (unsigned __int16 **)v74, (uint64_t)v76);
    sub_1B1F03804((char *)v16);
    v9 = v50;
    ecs_stack_allocator_pop_snapshot(v50);
    v10 = v49;
    if ((v49 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
    }
    swift_release();
    v11 = v55 + 1;
    if (v55 + 1 == v51)
    {
      sub_1B19ED748(v66);
      v4 = v57;
      a2 = v45;
      v8 = MEMORY[0x1E0DEE9E8];
      goto LABEL_25;
    }
  }
  if ((_DWORD)v14 == (_DWORD)v52)
    goto LABEL_22;
  v33 = v22 + 656 * v14;
  v34 = &v21[88 * v14];
  while (1)
  {
    v35 = swift_retain();
    if ((*(_BYTE *)(v16 + 184) & 1) != 0)
      break;
    v36 = *(unsigned int *)(*(_QWORD *)(v16 + 168) + 4 * v14);
    v37 = *(unsigned int *)(*(_QWORD *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v36 + 8);
    swift_release();
    v38 = *(unsigned int *)(v16 + 28);
    LOBYTE(v58) = *(_BYTE *)(v16 + 32);
    sub_1B1CCA31C(v36 | (v37 << 32), v38 | ((unint64_t)v58 << 32), v34, v33, v57, 1);
    LOBYTE(v36) = *(_BYTE *)(v16 + 184);
    v39 = swift_retain();
    if ((v36 & 1) != 0)
      break;
    v40 = *(unsigned int *)(*(_QWORD *)(v16 + 168) + 4 * v14);
    v41 = v14 + 1;
    v42 = *(unsigned int *)(*(_QWORD *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v40 + 8);
    swift_release();
    sub_1B1B8B944(&v58, v40 | (v42 << 32));
    v33 += 656;
    v34 += 88;
    v14 = v41;
    if (v52 == v41)
      goto LABEL_22;
  }
LABEL_29:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1B680B8(unint64_t a1, unint64_t a2, char a3, char a4)
{
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v45;
  int *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  unsigned int v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  BOOL v66;
  _QWORD *v67;
  size_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t result;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int64_t v77;
  uint64_t v78;
  _QWORD *v80;
  _QWORD v81[5];
  char v82;
  uint64_t v83;
  uint64_t v84[12];
  _OWORD v85[12];
  uint64_t v86;
  int v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;

  v6 = HIDWORD(a1) & 1;
  v7 = a3 & 1;
  if (!(_DWORD)a1)
    LODWORD(v6) = 1;
  if ((_DWORD)v6)
    v8 = 0x200000000;
  else
    v8 = a1;
  sub_1B1B67B04(v8, a2, a3 & 1);
  swift_bridgeObjectRelease();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v86 = qword_1ED4D09F8;
  v87 = 0;
  v88 = 2;
  v89 = 1;
  v90 = 2;
  v91 = 0;
  swift_retain();
  v78 = v4;
  sub_1B1E8FCE4(v4, (uint64_t)&v86, v8, v84);
  sub_1B1A18378((uint64_t)v84, (uint64_t)v85, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v85[0])
  {
    v85[8] = v85[2];
    v85[9] = v85[3];
    v85[10] = v85[4];
    v85[11] = v85[5];
    v85[6] = v85[0];
    v85[7] = v85[1];
    v9 = sub_1B1BEA85C();
    sub_1B19ED748(v84);
  }
  else
  {
    v9 = MEMORY[0x1E0DEE9D8];
  }
  sub_1B1B68ED0();
  v10 = sub_1B2228CD4();
  v81[0] = v10;
  v11 = *(_QWORD *)(v9 + 16);
  if (v11)
  {
    v12 = v9 + 36;
    do
    {
      sub_1B1B8B00C(&v83, *(_QWORD *)(v12 - 4));
      v12 += 8;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
    v13 = v81[0];
    v83 = v81[0];
    if (v7)
      goto LABEL_16;
  }
  else
  {
    v13 = v10;
    swift_bridgeObjectRelease();
    v83 = v13;
    if (v7)
      goto LABEL_16;
  }
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9E8];
  sub_1B1B67A2C(a2, v4, v14, (uint64_t)&v83);
  swift_release();
  v13 = v83;
LABEL_16:
  v76 = v13 + 56;
  v15 = 1 << *(_BYTE *)(v13 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & *(_QWORD *)(v13 + 56);
  v80 = (_QWORD *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  v75 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
  v18 = (unint64_t)(v15 + 63) >> 6;
  swift_bridgeObjectRetain();
  v20 = 0;
  v77 = v18;
  v73 = v18 - 5;
  while (1)
  {
    while (1)
    {
      do
      {
        while (1)
        {
          if (v17)
          {
            v21 = __clz(__rbit64(v17));
            v17 &= v17 - 1;
            v22 = v21 | (v20 << 6);
          }
          else
          {
            v23 = v20 + 1;
            if (v20 + 1 >= v77)
              goto LABEL_96;
            v24 = *(_QWORD *)(v76 + 8 * v23);
            if (!v24)
            {
              v23 = v20 + 2;
              if (v20 + 2 >= v77)
                goto LABEL_96;
              v24 = *(_QWORD *)(v76 + 8 * v23);
              if (!v24)
              {
                v23 = v20 + 3;
                if (v20 + 3 >= v77)
                  goto LABEL_96;
                v24 = *(_QWORD *)(v76 + 8 * v23);
                if (!v24)
                {
                  v23 = v20 + 4;
                  if (v20 + 4 >= v77)
                    goto LABEL_96;
                  v24 = *(_QWORD *)(v76 + 8 * v23);
                  if (!v24)
                  {
                    while (v73 != v20)
                    {
                      v24 = *(_QWORD *)(v13 + 8 * v20++ + 96);
                      if (v24)
                      {
                        v23 = v20 + 4;
                        goto LABEL_32;
                      }
                    }
LABEL_96:
                    swift_release();
                    swift_release();
                    return swift_bridgeObjectRelease();
                  }
                }
              }
            }
LABEL_32:
            v17 = (v24 - 1) & v24;
            v22 = __clz(__rbit64(v24)) + (v23 << 6);
            v20 = v23;
          }
          v25 = (unsigned int *)(*(_QWORD *)(v13 + 48) + 8 * v22);
          v27 = *v25;
          v26 = v25[1];
          v28 = (int)v27;
          if ((a4 & 1) == 0)
            break;
          sub_1B1FE16DC((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1E63C55D8, v27 | (v26 << 32));
          v4 = v78;
LABEL_57:
          if ((_DWORD)v27 != -1 || (_DWORD)v26 != 0)
          {
LABEL_61:
            if ((v27 & 0x80000000) == 0)
              goto LABEL_62;
          }
        }
        v29 = (_DWORD)v27 == -1 && (_DWORD)v26 == 0;
        if (v29 || (v27 & 0x80000000) != 0 || v80[1] <= (int)v27)
          goto LABEL_57;
        if ((_DWORD)v26 != -1 && *(_DWORD *)(*v80 + 12 * (int)v27 + 8) != (_DWORD)v26)
          goto LABEL_61;
        v31 = (int *)(*v80 + 12 * (int)v27);
        v32 = *((__int16 *)v31 + 2);
        v33 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *v31 + 32);
        if (*(_QWORD *)(v33 + 232) > v32 || *(_QWORD *)(v33 + 240) <= v32)
          goto LABEL_61;
        v35 = **(_QWORD **)(v4 + v75);
        v36 = *(os_unfair_lock_s **)(v33 + 344);
        swift_retain();
        os_unfair_lock_lock(v36);
        v74 = v35;
        ecs_stack_allocator_push_snapshot(*(_QWORD *)(v35 + 32));
        v37 = *(_QWORD *)(*(_QWORD *)(v33 + 40) + 16);
        v38 = *(_QWORD *)(v37 + 128);
        if (*(_QWORD *)(v38 + 16)
          && (v39 = sub_1B1DC3AC8((uint64_t)&type metadata for Tombstone), (v40 & 1) != 0)
          && *(ValueMetadata **)(*(_QWORD *)(v37 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v38 + 56) + 8 * v39) + 32) == &type metadata for Tombstone)
        {
          v81[0] = &type metadata for Tombstone;
          v81[1] = &off_1E63C55D8;
          v82 = 1;
          swift_retain();
          v41 = v74;
          sub_1B1F05960((uint64_t *)(v74 + 104), (uint64_t)v81, v32, 0, v33, v74);
          sub_1B1B68F14((uint64_t)v81);
        }
        else
        {
          swift_retain();
          v41 = v74;
        }
        v42 = (_QWORD *)(v41 + 104);
        if (*(_QWORD *)(*(_QWORD *)(v41 + 104) + 16))
        {
          v43 = (_QWORD *)swift_bridgeObjectRetain();
          sub_1B1F05034(v43, v33);
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v45 = *(_QWORD *)(v41 + 104);
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            sub_1B1C92670(0, *(_QWORD *)(v45 + 16));
          }
          else
          {
            v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            if (*(_QWORD *)(v45 + 24) >= 2uLL)
            {
              sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
              v67 = (_QWORD *)swift_allocObject();
              v68 = j__malloc_size(v67);
              v67[2] = 0;
              v67[3] = 2 * ((uint64_t)(v68 - 32) / 72);
            }
            *v42 = v67;
            swift_bridgeObjectRelease();
          }
          v41 = v74;
          if (*(unsigned __int8 *)(*(_QWORD *)(v74 + 16)
                                                + OBJC_IVAR____TtC3VFX13EntityManager_currentState)
             - 1 >= 2)
          {
            v69 = *(char **)(v33 + 256);
            v70 = *(char **)(v33 + 232);
            if (v70 == v69)
            {
              v71 = *(char **)(v33 + 240);
            }
            else
            {
              sub_1B1A1059C(v69, v70);
              v69 = *(char **)(v33 + 232);
              v71 = *(char **)(v33 + 240);
              if (v71 == v69)
              {
                v71 = 0;
                v69 = 0;
                *(_QWORD *)(v33 + 232) = 0;
                *(_QWORD *)(v33 + 240) = 0;
              }
              v41 = v74;
            }
            *(_QWORD *)(v33 + 248) = v71;
            *(_QWORD *)(v33 + 256) = v69;
          }
        }
        swift_release();
        ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v41 + 32));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 344));
        swift_release();
        v4 = v78;
      }
      while ((v28 & 0x80000000) != 0);
LABEL_62:
      if (v80[1] > v28 && ((_DWORD)v26 == -1 || *(_DWORD *)(*v80 + 12 * (int)v28 + 8) == (_DWORD)v26))
      {
        v48 = (int *)(*v80 + 12 * (int)v28);
        v49 = *((__int16 *)v48 + 2);
        v50 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *v48 + 32);
        thread_worker_index(v19);
        v51 = *(_QWORD *)(v50 + 192);
        if (v51)
        {
          v52 = *(_QWORD *)(v50 + 208);
          v53 = 8 * (v49 >> 6);
          *(_QWORD *)(v51 + v53) |= 1 << v49;
          *(_QWORD *)(v52 + v53) &= ~(1 << v49);
        }
        if (*(_BYTE *)(*(_QWORD *)(v50 + 40) + 213) == 1)
          break;
      }
    }
    v54 = *(_QWORD *)(v50 + 48);
    v55 = *(_QWORD *)(v54 + 16);
    if (v55)
    {
      v56 = (uint64_t *)(v54 + 56);
      while ((ValueMetadata *)*(v56 - 3) != &type metadata for PropagateDirtiness)
      {
        v56 += 5;
        if (!--v55)
          goto LABEL_75;
      }
      v57 = *v56;
    }
    else
    {
LABEL_75:
      v57 = 0;
    }
    v58 = *(_QWORD *)(v50 + 128);
    v59 = *(_BYTE *)(v50 + 184);
    v60 = swift_retain();
    if ((v59 & 1) != 0)
      break;
    v61 = *(_DWORD *)(*(_QWORD *)(v50 + 168) + 4 * v49);
    v62 = (unsigned int *)(v58 + v57 + 8 * v49);
    v63 = *(unsigned int *)(*(_QWORD *)(v60 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v61 + 8);
    swift_release();
    v64 = *v62;
    v65 = v62[1];
    v66 = (_DWORD)v64 == -1 && (_DWORD)v65 == 0;
    v4 = v78;
    if (!v66)
    {
      sub_1B1B8A6C8(v81, v61 | (unint64_t)(v63 << 32), v64 | (v65 << 32));
      v4 = v78;
    }
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1B688C8(unint64_t a1, unint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t DynamicType;
  ValueMetadata *v29;
  _UNKNOWN **v30;
  uint64_t v31;
  os_unfair_lock_s *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t i;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  int64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  ValueMetadata *v63;
  _UNKNOWN **v64;
  uint64_t v65[12];
  _OWORD v66[12];
  uint64_t v67;
  int v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;

  v4 = v3;
  v7 = HIDWORD(a1) & 1;
  v8 = a3 & 1;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFFF8], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v9, v10);
  v52 = (char *)&v50 - v11;
  if ((_DWORD)a1)
    v12 = v7;
  else
    v12 = 1;
  v55 = a1;
  v51 = a1;
  if (v12)
    v13 = 0x200000000;
  else
    v13 = a1;
  v59 = sub_1B1B67B04(v13, a2, v8);
  swift_retain();
  v14 = swift_bridgeObjectRetain();
  v15 = sub_1B1B690A8(v14, v13, (uint64_t)v4);
  v53 = 0;
  swift_bridgeObjectRelease();
  swift_release();
  v4[26] = v15;
  swift_bridgeObjectRelease();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v67 = qword_1ED4D09F8;
  v68 = 0;
  v69 = 2;
  v70 = 1;
  v71 = 2;
  v72 = 0;
  v16 = *(_QWORD *)((char *)v4 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  v54 = qword_1ED4D09F8;
  swift_retain();
  v58 = v16;
  sub_1B1E8FCE4((uint64_t)v4, (uint64_t)&v67, v13, v65);
  sub_1B1A18378((uint64_t)v65, (uint64_t)v66, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v66[0])
  {
    v66[8] = v66[2];
    v66[9] = v66[3];
    v66[10] = v66[4];
    v66[11] = v66[5];
    v66[6] = v66[0];
    v66[7] = v66[1];
    sub_1B1BEAAFC(0);
    sub_1B19ED748(v65);
  }
  if (!v8)
  {
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = MEMORY[0x1E0DEE9E8];
    swift_retain();
    sub_1B1B69344(a2, (uint64_t)v4, v17, (uint64_t)v4);
    swift_release();
    swift_release();
  }
  v18 = 0;
  v19 = *(_QWORD *)(v59 + 56);
  v56 = v59 + 56;
  v20 = 1 << *(_BYTE *)(v59 + 32);
  v21 = -1;
  if (v20 < 64)
    v21 = ~(-1 << v20);
  v22 = v21 & v19;
  v57 = (unint64_t)(v20 + 63) >> 6;
  v50 = v57 - 5;
  while (1)
  {
    if (v22)
    {
      v23 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      v24 = v23 | (v18 << 6);
      goto LABEL_32;
    }
    v25 = v18 + 1;
    if (v18 + 1 >= v57)
      goto LABEL_37;
    v26 = *(_QWORD *)(v56 + 8 * v25);
    if (!v26)
    {
      v25 = v18 + 2;
      if (v18 + 2 >= v57)
        goto LABEL_37;
      v26 = *(_QWORD *)(v56 + 8 * v25);
      if (!v26)
      {
        v25 = v18 + 3;
        if (v18 + 3 >= v57)
          goto LABEL_37;
        v26 = *(_QWORD *)(v56 + 8 * v25);
        if (!v26)
        {
          v25 = v18 + 4;
          if (v18 + 4 >= v57)
            goto LABEL_37;
          v26 = *(_QWORD *)(v56 + 8 * v25);
          if (!v26)
            break;
        }
      }
    }
LABEL_31:
    v22 = (v26 - 1) & v26;
    v24 = __clz(__rbit64(v26)) + (v25 << 6);
    v18 = v25;
LABEL_32:
    v27 = *(_QWORD *)(*(_QWORD *)(v59 + 48) + 8 * v24);
    v63 = &type metadata for EmitterReference;
    v64 = &off_1E6387218;
    v62[0] = v27;
    sub_1B19FA070(v62, (uint64_t)&type metadata for EmitterReference);
    DynamicType = swift_getDynamicType();
    v29 = v63;
    v30 = v64;
    sub_1B19FA070(v62, (uint64_t)v63);
    v31 = ((uint64_t (*)(ValueMetadata *, _UNKNOWN **))v30[2])(v29, v30);
    v32 = (os_unfair_lock_s *)v4[16];
    os_unfair_lock_lock(v32);
    v33 = v4[10];
    v34 = *(_QWORD *)(v33 + 16);
    if (v34)
    {
      v60 = v18;
      swift_retain();
      swift_retain();
      for (i = 0; i != v34; ++i)
      {
        if (*(_QWORD *)(v33 + 8 * i + 32))
        {
          v61 = *(_QWORD *)(v33 + 8 * i + 32);
          sub_1B1DA8C80((unint64_t)&v61, DynamicType, v31, v4);
        }
      }
      swift_release();
      swift_release();
      v18 = v60;
    }
    os_unfair_lock_unlock(v32);
    sub_1B1E8EAB0(v62);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v62);
  }
  while (v50 != v18)
  {
    v26 = *(_QWORD *)(v59 + 8 * v18++ + 96);
    if (v26)
    {
      v25 = v18 + 4;
      goto LABEL_31;
    }
  }
LABEL_37:
  swift_release();
  if ((v55 & 0x100000000) != 0)
    return swift_release();
  swift_getKeyPath();
  v37 = v4[22];
  swift_retain();
  v38 = (void *)sub_1B1F22924((uint64_t)&type metadata for AssetManagerInstance, (uint64_t)&off_1E639B010, v37, (void (*)(_QWORD *__return_ptr, uint64_t))sub_1B1B692E4);
  swift_release();
  swift_release();
  if (v38)
  {
    v39 = sub_1B2228110();
    v40 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v52, 1, 1, v39);
    LOBYTE(v62[0]) = 0;
    sub_1B20E12E8(v40, v51);

  }
  v41 = (_QWORD *)v4[22];
  swift_retain();
  v42 = sub_1B1F22B64((uint64_t)&type metadata for EffectsRegistry, (uint64_t)&off_1E6383A70, v41);
  swift_release();
  v62[0] = v42;
  v43 = sub_1B1BA59E0(v55);
  v44 = v62[0];
  MEMORY[0x1E0C80A78](v43, v45);
  *(&v50 - 2) = v44;
  v46 = (_QWORD *)v4[22];
  MEMORY[0x1E0C80A78](v47, v48);
  *(&v50 - 2) = (int64_t)sub_1B1B692FC;
  *(&v50 - 1) = v49;
  swift_retain();
  sub_1B1F22244((uint64_t)&type metadata for EffectsRegistry, (uint64_t)&off_1E6383A70, v46, (void (*)(uint64_t))sub_1B1B6932C);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

unint64_t sub_1B1B68ED0()
{
  unint64_t result;

  result = qword_1ED4B9F50;
  if (!qword_1ED4B9F50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2280674, &type metadata for Entity);
    atomic_store(result, (unint64_t *)&qword_1ED4B9F50);
  }
  return result;
}

uint64_t sub_1B1B68F14(uint64_t a1)
{
  destroy for PrivateCommandQueue.Operation(a1);
  return a1;
}

uint64_t sub_1B1B68F48()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1B68F6C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD v18[4];

  v10 = *(_QWORD *)(a3 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v11 = sub_1B1B0F63C(a1, a2, v10);
  swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
    sub_1B1B8B7CC((uint64_t)v18, a1, a2);
    v12 = sub_1B1E856CC(a1, a2);
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
    {
      v14 = (uint64_t *)(v12 + 40);
      do
      {
        v15 = *(v14 - 1);
        v16 = *v14;
        swift_retain();
        sub_1B1B68F6C(v15, v16, a3, a4, a5);
        swift_release();
        v14 += 2;
        --v13;
      }
      while (v13);
    }
    swift_bridgeObjectRelease();
    swift_retain();
    sub_1B1FE6654(a1, a4, a4, a1, HIDWORD(a1));
    swift_release();
    sub_1B1B8B944(v18, a1);
  }
  return swift_release();
}

_QWORD *sub_1B1B690A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = a3;
  sub_1B1B6943C();
  v6 = sub_1B22296B8();
  v7 = (_QWORD *)v6;
  v8 = 0;
  v27 = a1;
  v9 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 64);
  v28 = a2 & 0xFFFFFFFFFFLL;
  v13 = v6 + 64;
  v25 = v9;
  v26 = (unint64_t)(v10 + 63) >> 6;
  v24 = v9 + 40;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  v15 = v14 | (v8 << 6);
  while (1)
  {
    v18 = *(_QWORD *)(*(_QWORD *)(v27 + 48) + 8 * v15);
    v19 = *(_QWORD *)(v27 + 56) + 24 * v15;
    v20 = *(_QWORD *)(v19 + 16);
    v31 = *(_OWORD *)v19;
    v32 = v20;
    swift_bridgeObjectRetain();
    sub_1B20205BC((uint64_t)&v31, v28, v33, (uint64_t)&v29);
    swift_bridgeObjectRelease();
    if (v3)
    {
      swift_release();
      return v7;
    }
    *(_QWORD *)(v13 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
    *(_QWORD *)(v7[6] + 8 * v15) = v18;
    v21 = v7[7] + 24 * v15;
    v22 = v30;
    *(_OWORD *)v21 = v29;
    *(_QWORD *)(v21 + 16) = v22;
    ++v7[2];
    if (v12)
      goto LABEL_4;
LABEL_5:
    v16 = v8 + 1;
    if (v8 + 1 >= v26)
      return v7;
    v17 = *(_QWORD *)(v25 + 8 * v16);
    if (!v17)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v26)
        return v7;
      v17 = *(_QWORD *)(v25 + 8 * v16);
      if (!v17)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v26)
          return v7;
        v17 = *(_QWORD *)(v25 + 8 * v16);
        if (!v17)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v26)
            return v7;
          v17 = *(_QWORD *)(v25 + 8 * v16);
          if (!v17)
            break;
        }
      }
    }
LABEL_16:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v8 = v16;
  }
  while (v26 - 5 != v8)
  {
    v17 = *(_QWORD *)(v24 + 8 * v8++);
    if (v17)
    {
      v16 = v8 + 4;
      goto LABEL_16;
    }
  }
  return v7;
}

uint64_t sub_1B1B692E4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1B953C4(a1);
}

uint64_t sub_1B1B692FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1B6932C(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1D449F0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1B1B69344(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v8 = *(_QWORD *)(a3 + 16);
  swift_retain();
  swift_bridgeObjectRetain();
  v9 = sub_1B1B0F63C(a1, a2, v8);
  swift_bridgeObjectRelease();
  if ((v9 & 1) == 0)
  {
    sub_1B1B8B7CC((uint64_t)&v16, a1, a2);
    v10 = sub_1B1E856CC(a1, a2);
    v11 = *(_QWORD *)(v10 + 16);
    if (v11)
    {
      v12 = (uint64_t *)(v10 + 40);
      do
      {
        v13 = *(v12 - 1);
        v14 = *v12;
        swift_retain();
        sub_1B1B69344(v13, v14, a3, a4);
        swift_release();
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    swift_bridgeObjectRelease();
    sub_1B1DA4B24(a1);
  }
  return swift_release();
}

void sub_1B1B6943C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA980)
  {
    v0 = sub_1B22296E8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA980);
  }
}

ValueMetadata *type metadata accessor for EffectsRegistry()
{
  return &type metadata for EffectsRegistry;
}

uint64_t sub_1B1B694B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t result;
  int v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;

  v8 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v20 = a5;
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v8 + v10 + 32);
      v12 = *(_QWORD *)(v8 + v10 + 40);
      v21 = *(_OWORD *)(v8 + v10 + 48);
      v13 = *(_QWORD *)(v8 + v10 + 64);
      v14 = *(unsigned __int8 *)(v8 + v10 + 72);
      v15 = *(unsigned __int16 *)(v8 + v10 + 74);
      if (v11 == a1 && v12 == a2)
        break;
      if ((sub_1B2229D24() & 1) != 0)
        goto LABEL_12;
      v10 += 48;
      if (!--v9)
      {
        result = swift_bridgeObjectRelease();
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v18 = 0;
        v19 = 0uLL;
        goto LABEL_13;
      }
    }
    v11 = a1;
    v12 = a2;
LABEL_12:
    swift_bridgeObjectRetain();
    swift_retain();
    result = swift_bridgeObjectRelease();
    v19 = v21;
    v18 = v14 | (v15 << 16);
LABEL_13:
    a5 = v20;
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v18 = 0;
    v19 = 0uLL;
  }
  *(_QWORD *)a5 = v11;
  *(_QWORD *)(a5 + 8) = v12;
  *(_OWORD *)(a5 + 16) = v19;
  *(_QWORD *)(a5 + 32) = v13;
  *(_DWORD *)(a5 + 40) = v18;
  return result;
}

uint64_t sub_1B1B695F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[5];
  int v37;
  _QWORD v38[5];
  int v39;
  char v40[8];
  uint64_t v41;

  v6 = a5;
  v9 = a2;
  sub_1B1B694B0(a1, a2, a4, a5, (uint64_t)v36);
  v11 = v36[2];
  v33 = v36[1];
  v34 = v36[0];
  v13 = v36[3];
  v12 = v36[4];
  LODWORD(v14) = v37;
  result = sub_1B1B6AE8C((uint64_t)v36, (uint64_t)v40);
  if (v41)
  {
    v16 = a6;
    v18 = v33;
    v17 = v34;
  }
  else
  {
    v19 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 40);
    swift_bridgeObjectRetain();
    v20 = v19(a4, v6);
    v14 = *(_QWORD *)(v20 + 16);
    if (v14)
    {
      v32 = 0;
      v21 = (uint64_t *)(v20 + 80);
      v22 = a1;
      do
      {
        v23 = *(v21 - 6);
        if (v23 > a3)
        {
          v35 = v6;
          v24 = *(v21 - 3);
          v25 = *(v21 - 2);
          v6 = *v21;
          v26 = v22 == *(v21 - 5) && v9 == *(v21 - 4);
          if (v26 || (v27 = v9, v28 = v22, v29 = sub_1B2229D24(), v22 = v28, v9 = v27, (v29 & 1) != 0))
          {
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            v32 = v23;
            v22 = v24;
            v9 = v25;
          }
          else
          {
            v6 = v35;
          }
        }
        v21 += 7;
        --v14;
      }
      while (v14);
      v30 = v22;
      swift_bridgeObjectRelease();
      if (v32)
      {
        sub_1B1B695F0(v38, v30, v9);
        v17 = v38[0];
        v18 = v38[1];
        v11 = v38[2];
        v13 = v38[3];
        v12 = v38[4];
        LODWORD(v14) = v39;
        result = swift_bridgeObjectRelease();
      }
      else
      {
        result = swift_bridgeObjectRelease();
        v17 = 0;
        v18 = 0;
        v11 = 0;
        v13 = 0;
        v12 = 0;
        LODWORD(v14) = 0;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      result = swift_bridgeObjectRelease();
      v17 = 0;
      v18 = 0;
      v11 = 0;
      v13 = 0;
      v12 = 0;
    }
    v16 = a6;
  }
  *(_QWORD *)v16 = v17;
  *(_QWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 16) = v11;
  *(_QWORD *)(v16 + 24) = v13;
  *(_QWORD *)(v16 + 32) = v12;
  *(_DWORD *)(v16 + 40) = v14;
  return result;
}

uint64_t sub_1B1B697E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  if (ObjectType == sub_1B2229304())
  {
    swift_retain();
  }
  else if ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a4 + 8))(a2, a3, a4))
  {
    sub_1B2229328();
    a1 = sub_1B2229724();
    swift_release();
  }
  else
  {
    return 0;
  }
  return a1;
}

uint64_t ScriptKeyPathReference.hash(into:)()
{
  uint64_t v0;

  if ((*(_QWORD *)(v0 + 24) & 0x8000000000000000) != 0)
  {
    sub_1B222A078();
    sub_1B2229328();
    swift_retain();
    sub_1B22285E4();
    sub_1B2228824();
    sub_1B222A078();
    return swift_release();
  }
  else
  {
    sub_1B222A078();
    sub_1B2229328();
    return sub_1B22285E4();
  }
}

uint64_t ScriptKeyPathReference.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B2229328();
  if (v1 < 0)
  {
    swift_retain();
    sub_1B22285E4();
    sub_1B2228824();
    sub_1B222A078();
    swift_release();
  }
  else
  {
    sub_1B22285E4();
  }
  return sub_1B222A0C0();
}

uint64_t sub_1B1B69A7C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B2229328();
  if (v1 < 0)
  {
    swift_retain();
    sub_1B22285E4();
    sub_1B2228824();
    sub_1B222A078();
    swift_release();
  }
  else
  {
    sub_1B22285E4();
  }
  return sub_1B222A0C0();
}

uint64_t sub_1B1B69B64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, __int16 a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  v10 = *a3;
  swift_bridgeObjectRetain();
  v11 = sub_1B2229310();
  v12 = *(_QWORD *)(*MEMORY[0x1E0DEE2A8] + v10 + 8);
  *(_QWORD *)a5 = a1;
  *(_QWORD *)(a5 + 8) = a2;
  *(_QWORD *)(a5 + 16) = a3;
  *(_QWORD *)(a5 + 24) = v12;
  *(_QWORD *)(a5 + 32) = v11;
  *(_BYTE *)(a5 + 40) = v13 & 1;
  *(_WORD *)(a5 + 42) = a4;
  return swift_retain();
}

uint64_t sub_1B1B69BE0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64);
}

uint64_t sub_1B1B69BF4()
{
  sub_1B222A06C();
  sub_1B2229304();
  sub_1B222A078();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B69C68()
{
  sub_1B2229304();
  sub_1B222A078();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B69CC0()
{
  sub_1B222A06C();
  sub_1B2229304();
  sub_1B222A078();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B69D30()
{
  uint64_t v1;

  sub_1B2229304();
  v1 = sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRetain();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1B69DA8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = sub_1B2229304();
  if (v6 != sub_1B2229304())
    return 0;
  if (v2 == v4 && v3 == v5)
    return 1;
  else
    return sub_1B2229D24();
}

uint64_t sub_1B1B69E48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B2229B68();
  if (!v2)
  {
    sub_1B2229304();
    sub_1B19FC264((uint64_t)v4, v5);
    sub_1B1B6AEE0();
    sub_1B2229BA4();
    if ((*(_WORD *)(v1 + 42) & 0x400) != 0)
    {
      sub_1B19FC264((uint64_t)v4, v5);
      sub_1B2229BA4();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

double sub_1B1B69F84@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1B1B6A810(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 12);
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)v7 + 12);
  }
  return result;
}

uint64_t sub_1B1B69FC4(_QWORD *a1)
{
  return sub_1B1B69E48(a1);
}

double sub_1B1B69FD8@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)((char *)a1 + 28) = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

BOOL _s3VFX22ScriptKeyPathReferenceO2eeoiySbAC_ACtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  _BOOL8 result;
  char v12;

  v3 = *a1;
  v2 = a1[1];
  v5 = a1[2];
  v4 = a1[3];
  v6 = *a2;
  v7 = a2[1];
  v9 = a2[2];
  v8 = a2[3];
  if ((v4 & 0x8000000000000000) == 0)
  {
    if ((v8 & 0x8000000000000000) == 0)
    {
      sub_1B2229328();
      sub_1B1B6A270(v6, v7, v9, v8);
      sub_1B1B6A270(v3, v2, v5, v4);
      v10 = MEMORY[0x1B5E20EC8](v3, v6);
      sub_1B1B6A2AC(v3, v2, v5, v4);
      sub_1B1B6A2AC(v6, v7, v9, v8);
      return v10 & 1;
    }
    goto LABEL_5;
  }
  if ((v8 & 0x8000000000000000) == 0)
  {
LABEL_5:
    sub_1B1B6A270(*a2, a2[1], v9, v8);
    sub_1B1B6A270(v3, v2, v5, v4);
LABEL_6:
    sub_1B1B6A2AC(v3, v2, v5, v4);
    sub_1B1B6A2AC(v6, v7, v9, v8);
    return 0;
  }
  sub_1B2229328();
  sub_1B1B6A270(v6, v7, v9, v8);
  sub_1B1B6A270(v3, v2, v5, v4);
  swift_retain();
  swift_retain();
  if ((MEMORY[0x1B5E20EC8](v3, v6) & 1) == 0)
  {
    swift_release();
    swift_release();
    goto LABEL_6;
  }
  if (v2 == v7 && v5 == v9)
  {
    swift_release();
    swift_release();
    sub_1B1B6A2AC(v3, v2, v5, v4);
    sub_1B1B6A2AC(v6, v2, v5, v8);
    return (v4 & 0x7FFFFFFFFFFFFFFFLL) == (v8 & 0x7FFFFFFFFFFFFFFFLL);
  }
  v12 = sub_1B2229D24();
  swift_release();
  swift_release();
  sub_1B1B6A2AC(v3, v2, v5, v4);
  sub_1B1B6A2AC(v6, v7, v9, v8);
  result = 0;
  if ((v12 & 1) != 0)
    return (v4 & 0x7FFFFFFFFFFFFFFFLL) == (v8 & 0x7FFFFFFFFFFFFFFFLL);
  return result;
}

unint64_t sub_1B1B6A22C()
{
  unint64_t result;

  result = qword_1EEF5B1A0;
  if (!qword_1EEF5B1A0)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for ScriptKeyPathReference, &type metadata for ScriptKeyPathReference);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1A0);
  }
  return result;
}

uint64_t sub_1B1B6A270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a4 & 0x8000000000000000) == 0)
    return swift_retain();
  swift_retain();
  return swift_bridgeObjectRetain();
}

uint64_t destroy for ScriptKeyPathReference(uint64_t *a1)
{
  return sub_1B1B6A2AC(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_1B1B6A2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  result = swift_release();
  if (a4 < 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t *initializeWithCopy for ScriptKeyPathReference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1B1B6A270(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for ScriptKeyPathReference(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  v5 = a2[2];
  v6 = a2[3];
  sub_1B1B6A270(*a2, v4, v5, v6);
  v7 = *a1;
  v8 = a1[1];
  v9 = a1[2];
  v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1B1B6A2AC(v7, v8, v9, v10);
  return a1;
}

uint64_t *assignWithTake for ScriptKeyPathReference(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v3 = *a1;
  v5 = a1[1];
  v4 = a1[2];
  v6 = a1[3];
  v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1B1B6A2AC(v3, v5, v4, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptKeyPathReference(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x3FFF);
  v3 = (((*(_QWORD *)(a1 + 24) >> 50) >> 13) | (2
                                                            * ((*(_QWORD *)(a1 + 24) >> 50) & 0x1C00 | ((*(_QWORD *)(a1 + 24) & 7) << 7) | (*(_QWORD *)a1 >> 57) & 0x78 | *(_QWORD *)a1 & 7))) ^ 0x3FFF;
  if (v3 >= 0x3FFE)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ScriptKeyPathReference(uint64_t result, unsigned int a2, unsigned int a3)
{
  unint64_t v3;

  if (a2 > 0x3FFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x3FFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x3FFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      v3 = (-a2 >> 1) & 0x1FFF | ((-a2 & 0x3FFF) << 13);
      *(_QWORD *)result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = ((v3 >> 7) | (v3 << 50)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B1B6A4C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24) >> 63;
}

uint64_t sub_1B1B6A4D0(uint64_t result)
{
  *(_QWORD *)(result + 24) &= ~0x8000000000000000;
  return result;
}

_QWORD *sub_1B1B6A4E0(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  v2 = result[3] & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  *result &= 0xFFFFFFFFFFFFFF8uLL;
  result[3] = v2;
  return result;
}

ValueMetadata *type metadata accessor for ScriptKeyPathReference()
{
  return &type metadata for ScriptKeyPathReference;
}

uint64_t destroy for ScriptKeyPath()
{
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t initializeWithCopy for ScriptKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScriptKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  return a1;
}

__n128 initializeWithTake for ScriptKeyPath(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ScriptKeyPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptKeyPath(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 44))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScriptKeyPath(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 44) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScriptKeyPath()
{
  return &type metadata for ScriptKeyPath;
}

unint64_t sub_1B1B6A738()
{
  unint64_t result;

  result = qword_1EEF5B1A8;
  if (!qword_1EEF5B1A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C550, &type metadata for ScriptKeyPath);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1A8);
  }
  return result;
}

uint64_t sub_1B1B6A77C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B1A06460();
  v0 = sub_1B2229214();
  if (*(_QWORD *)(v0 + 16))
  {
    v1 = *(_QWORD *)(v0 + 32);
    swift_bridgeObjectRetain();
  }
  else
  {
    v1 = 0;
  }
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1B6A810@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  _QWORD v49[6];
  _BYTE v50[48];
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  __int16 v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  __int16 v63;
  char v64;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  sub_1B19FC264((uint64_t)v47, v48);
  v5 = sub_1B2229A60();
  v7 = v6;
  sub_1B19FC264((uint64_t)v47, v48);
  sub_1B1B6AE04();
  sub_1B2229AA8();
  v9 = swift_conformsToProtocol2();
  if (v9)
    v10 = v9;
  else
    v10 = 0;
  if (v9)
    v11 = v44;
  else
    v11 = 0;
  v42 = v5;
  if (!v11)
  {
    v19 = swift_conformsToProtocol2();
    if (v19)
      v20 = v19;
    else
      v20 = 0;
    if (v19)
      v21 = v44;
    else
      v21 = 0;
    if (v21)
    {
      *((_QWORD *)&v45 + 1) = v21;
      v46 = v20;
      sub_1B1A137F4((uint64_t *)&v44);
      sub_1B1E2854C(v21, v20);
      v22 = sub_1B1E28574(v5, v7, v21, v20);
      if (v22)
      {
        v23 = v22;
        swift_bridgeObjectRelease();
        v24 = *(_QWORD *)(v23 + 16);
        v14 = *(_QWORD *)(v23 + 24);
        v43 = *(_OWORD *)(v23 + 32);
        v16 = *(_QWORD *)(v23 + 48);
        v17 = *(_BYTE *)(v23 + 56);
        v18 = *(_WORD *)(v23 + 58);
        swift_bridgeObjectRetain();
        swift_retain();
        v15 = v24;
        swift_release();
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v44);
        goto LABEL_21;
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v44);
      *(_QWORD *)&v44 = 0;
      *((_QWORD *)&v44 + 1) = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v33 = 0xD00000000000001DLL;
      v34 = "invalid property identifier: ";
    }
    else
    {
      v25 = swift_conformsToProtocol2();
      if (v25)
        v26 = v25;
      else
        v26 = 0;
      if (v25)
        v27 = v44;
      else
        v27 = 0;
      if (v27)
      {
        v41 = v26;
        sub_1B19FA070(v47, v48);
        v28 = sub_1B2229A54();
        if ((v29 & 1) != 0 || v28 != 3)
        {
          v37 = a1[3];
          v38 = a1[4];
          sub_1B19FA070(a1, v37);
          v39 = sub_1B2067BF4(v37, v38);
          sub_1B1B695F0(v42, v7, v39, v27, v41, (uint64_t)v50);
          sub_1B1B6AE8C((uint64_t)v50, (uint64_t)&v58);
          v14 = v59;
          if (v59)
          {
            v15 = v58;
            v43 = v60;
            v16 = v61;
            v64 = v62;
            v18 = v63;
            swift_bridgeObjectRelease();
            v17 = v64;
            goto LABEL_21;
          }
          sub_1B2229430();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v44 = 0xD00000000000001CLL;
          *((_QWORD *)&v44 + 1) = 0x80000001B2331240;
        }
        else
        {
          sub_1B19FC264((uint64_t)v47, v48);
          sub_1B2229AA8();
          v30 = a1[3];
          v31 = a1[4];
          sub_1B19FA070(a1, v30);
          v32 = sub_1B2067BF4(v30, v31);
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t))(v41 + 24))(v49, v5, v7, v44, v32, 0, v27);
          sub_1B1B6AE8C((uint64_t)v49, (uint64_t)&v51);
          v14 = v52;
          if (v52)
          {
            v15 = v51;
            v43 = v53;
            v16 = v54;
            v57 = v55;
            v18 = v56;
            swift_bridgeObjectRelease();
            v17 = v57;
            goto LABEL_21;
          }
          sub_1B2229430();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v44 = 0xD000000000000023;
          *((_QWORD *)&v44 + 1) = 0x80000001B2331260;
        }
        goto LABEL_36;
      }
      *(_QWORD *)&v44 = 0;
      *((_QWORD *)&v44 + 1) = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v33 = 0xD000000000000022;
      v34 = "invalid ScriptKeyPath identifier: ";
    }
    *(_QWORD *)&v44 = v33;
    *((_QWORD *)&v44 + 1) = (unint64_t)(v34 - 32) | 0x8000000000000000;
LABEL_36:
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v35 = v44;
    sub_1B1B6AE48();
    swift_allocError();
    *(_OWORD *)v36 = v35;
    *(_BYTE *)(v36 + 16) = 32;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v47);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  v40 = v10;
  sub_1B19FC264((uint64_t)v47, v48);
  sub_1B2229AA8();
  v12 = v44;
  v44 = 0u;
  v45 = 0u;
  v13 = sub_1B1A230AC(v5, v7, v12, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, (uint64_t)&v44, 0, v11, v40);
  swift_bridgeObjectRelease();
  sub_1B1A0DD70((uint64_t)&v44);
  v15 = *(_QWORD *)(v13 + 16);
  v14 = *(_QWORD *)(v13 + 24);
  v43 = *(_OWORD *)(v13 + 32);
  v16 = *(_QWORD *)(v13 + 48);
  v17 = *(_BYTE *)(v13 + 56);
  v18 = *(_WORD *)(v13 + 58);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
LABEL_21:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v47);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v14;
  *(_OWORD *)(a2 + 16) = v43;
  *(_QWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = v17;
  *(_WORD *)(a2 + 42) = v18;
  return result;
}

unint64_t sub_1B1B6AE04()
{
  unint64_t result;

  result = qword_1ED4BA1E0;
  if (!qword_1ED4BA1E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1914, &type metadata for TypeCoder);
    atomic_store(result, (unint64_t *)&qword_1ED4BA1E0);
  }
  return result;
}

unint64_t sub_1B1B6AE48()
{
  unint64_t result;

  result = qword_1EEF5B1B0;
  if (!qword_1EEF5B1B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227E42C, &type metadata for SerializationError);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1B0);
  }
  return result;
}

uint64_t sub_1B1B6AE8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B19F900C(0, (unint64_t *)&unk_1ED4B8880);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B1B6AEE0()
{
  unint64_t result;

  result = qword_1EEF5B1B8;
  if (!qword_1EEF5B1B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A18EC, &type metadata for TypeCoder);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1B8);
  }
  return result;
}

uint64_t destroy for ScriptKeyPathMigration()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScriptKeyPathMigration(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  v4 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScriptKeyPathMigration(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ScriptKeyPathMigration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = v4;
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptKeyPathMigration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScriptKeyPathMigration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScriptKeyPathMigration()
{
  return &type metadata for ScriptKeyPathMigration;
}

__n128 _s8MetadataVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for RenderPassFormat(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 88))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for RenderPassFormat(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 88) = v3;
  return result;
}

ValueMetadata *type metadata accessor for RenderPassFormat()
{
  return &type metadata for RenderPassFormat;
}

uint64_t sub_1B1B6B1B8()
{
  sub_1B222A06C();
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B6B23C()
{
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A078();
}

uint64_t sub_1B1B6B2AC()
{
  sub_1B222A06C();
  sub_1B1DC3544();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B1B6B32C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[5];
  uint64_t v8;
  _OWORD v9[5];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v7[4] = *(_OWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 80);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 80);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_1B1B6B640((uint64_t)v7, (uint64_t)v9);
}

unint64_t sub_1B1B6B398()
{
  unint64_t result;

  result = qword_1EEF5B1C0;
  if (!qword_1EEF5B1C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C664, &type metadata for RenderPassFormat);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1C0);
  }
  return result;
}

uint64_t sub_1B1B6B3DC()
{
  __int128 *v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v1 = 0;
  v11 = 0;
  v12 = 0xE000000000000000;
  v2 = v0[1];
  v13 = *v0;
  v14 = v2;
  v3 = v0[3];
  v15 = v0[2];
  v16 = v3;
  do
  {
    v7 = v13;
    v8 = v14;
    v9 = v15;
    v10 = v16;
    if (*((_QWORD *)&v7 + v1))
    {
      *(_QWORD *)&v7 = v1;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v7 = v13;
      v8 = v14;
      v9 = v15;
      v10 = v16;
      sub_1B1F9A724(*((_QWORD *)&v7 + v1));
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B2228890();
      swift_bridgeObjectRelease();
    }
    ++v1;
  }
  while (v1 != 8);
  v4 = *((_QWORD *)v0 + 8);
  if (v4)
  {
    *(_QWORD *)&v7 = 0x3A6874706564;
    *((_QWORD *)&v7 + 1) = 0xE600000000000000;
    sub_1B1F9A724(v4);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  v5 = *((_QWORD *)v0 + 9);
  if (v5)
  {
    *(_QWORD *)&v7 = 0x3A6C69636E657473;
    *((_QWORD *)&v7 + 1) = 0xE800000000000000;
    sub_1B1F9A724(v5);
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  if (*((uint64_t *)v0 + 10) >= 2)
  {
    *(_QWORD *)&v7 = 0x3A4141534DLL;
    *((_QWORD *)&v7 + 1) = 0xE500000000000000;
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  return v11;
}

BOOL sub_1B1B6B640(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  result = 0;
  if ((vminv_u16((uint16x4_t)vcltz_s16(vshl_n_s16(vmovn_s32(vuzp1q_s32((int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 8), *(int64x2_t *)(a2 + 8)), (int32x4_t)vceqq_s64(*(int64x2_t *)(a1 + 24), *(int64x2_t *)(a2 + 24)))), 0xFuLL))) & 1) != 0&& *(_QWORD *)(a1 + 40) == *(_QWORD *)(a2 + 40)&& *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48)&& *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56))
  {
    if (*(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64) && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72))
      return *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80);
    return 0;
  }
  return result;
}

uint64_t sub_1B1B6B6F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  uint64_t v13;

  if (a10 == 260)
    v13 = 260;
  else
    v13 = 0;
  *a9 = result;
  a9[1] = a2;
  if ((a12 & 1) != 0)
    a11 = v13;
  a9[2] = a3;
  a9[3] = a4;
  a9[4] = a5;
  a9[5] = a6;
  a9[6] = a7;
  a9[7] = a8;
  a9[8] = a10;
  a9[9] = a11;
  a9[10] = a13;
  return result;
}

uint64_t sub_1B1B6B730(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  _QWORD *v32;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 96);
  v32 = (_QWORD *)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + 32;
    v8 = *(_QWORD *)(v1 + 16) + 56;
    v30 = *(_QWORD *)(v1 + 16);
    swift_retain();
    v9 = 0;
    do
    {
      v11 = (uint64_t *)(v7 + 40 * v9);
      v12 = *v11;
      v13 = v11[1];
      ++v9;
      v14 = (uint64_t *)v8;
      v15 = v6;
      do
      {
        if (*(v14 - 3) == v12)
        {
          v10 = *v14;
          goto LABEL_4;
        }
        v14 += 5;
        --v15;
      }
      while (v15);
      v10 = 0;
LABEL_4:
      sub_1B1F24B30(v4 + v10, a1, (uint64_t)&off_1E6376550, v12, v13);
    }
    while (v9 != v6);
    v5 = v30;
    swift_release();
  }
  v16 = *(_QWORD *)(a1 + 24);
  v17 = 0xFFFFFFFFLL;
  if (*(_QWORD *)(v16 + 16))
  {
    v18 = sub_1B1DC3CA4(*(_QWORD *)(v2 + 84));
    if ((v19 & 1) != 0)
      v17 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v18);
  }
  v20 = *(_QWORD *)(v2 + 24);
  v21 = *(_QWORD *)(v2 + 32);
  v29 = *(_OWORD *)(v2 + 56);
  v31 = *(_OWORD *)(v2 + 40);
  v22 = *(_QWORD *)(v2 + 72);
  v23 = *(_BYTE *)(v2 + 80);
  v24 = *(_QWORD *)(v2 + 96);
  v25 = *(_QWORD *)(v2 + 104);
  v26 = *(_BYTE *)(v2 + 112);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 84) = v17;
  *(_QWORD *)(v27 + 16) = v5;
  *(_QWORD *)(v27 + 24) = v20;
  *(_QWORD *)(v27 + 32) = v21;
  *(_OWORD *)(v27 + 40) = v31;
  *(_OWORD *)(v27 + 56) = v29;
  *(_QWORD *)(v27 + 72) = v22;
  *(_BYTE *)(v27 + 80) = v23;
  *(_QWORD *)(v27 + 96) = v24;
  *(_QWORD *)(v27 + 104) = v25;
  *(_BYTE *)(v27 + 112) = v26;
  *(_QWORD *)(v2 + 84) = 0xFFFFFFFFLL;
  *v32 = 0;
  v32[1] = 0;
  *(_BYTE *)(v2 + 112) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  return v27;
}

uint64_t sub_1B1B6B8E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t Strong;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41[5];
  _QWORD v42[7];

  v39 = *(_QWORD *)(v1 + 96);
  v33 = (_QWORD *)(v1 + 96);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v37 = v2 + 32;
    v35 = OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed;
    v4 = (uint64_t *)(v2 + 56);
    v32 = *(_QWORD *)(v1 + 16);
    swift_retain();
    v5 = 0;
    do
    {
      v13 = (uint64_t *)(v37 + 40 * v5);
      v14 = *v13;
      v15 = v13[1];
      ++v5;
      v16 = v4;
      v17 = v3;
      while (*(v16 - 3) != v14)
      {
        v16 += 5;
        if (!--v17)
        {
          v18 = 0;
          goto LABEL_12;
        }
      }
      v18 = *v16;
LABEL_12:
      Strong = swift_weakLoadStrong();
      if (Strong)
      {
        v6 = Strong;
        v7 = *(unsigned __int8 *)(a1 + v35);
        v8 = *(void **)(Strong + 16);
        objc_msgSend(v8, sel_lock);
        v9 = 24;
        if (v7)
          v9 = 32;
        v10 = *(_QWORD *)(v6 + v9);
        swift_bridgeObjectRetain();
        objc_msgSend(v8, sel_unlock);
        swift_release();
        v11 = MEMORY[0x1E0DEE9E0];
      }
      else
      {
        v11 = MEMORY[0x1E0DEE9E0];
        v10 = MEMORY[0x1E0DEE9E0];
      }
      type metadata accessor for RemapContext();
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 24) = v10;
      *(_QWORD *)(v12 + 32) = v11;
      *(_BYTE *)(v12 + 16) = 0;
      sub_1B1F24B30(v39 + v18, v12, (uint64_t)&off_1E6376550, v14, v15);
      swift_release();
    }
    while (v5 != v3);
    v2 = v32;
    swift_release();
  }
  v42[3] = &type metadata for Entity;
  v42[4] = &off_1E63BB108;
  v42[0] = *(_QWORD *)(v34 + 84);
  v20 = sub_1B19FA070(v42, (uint64_t)&type metadata for Entity);
  v41[3] = (uint64_t)&type metadata for Entity;
  v41[4] = (uint64_t)&off_1E63BB108;
  v21 = sub_1B1A137F4(v41);
  *v21 = sub_1B1E33C2C(*v20);
  sub_1B1B6C05C();
  swift_dynamicCast();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v42);
  v22 = v42[5];
  v23 = *(_QWORD *)(v34 + 24);
  v24 = *(_QWORD *)(v34 + 32);
  v38 = *(_OWORD *)(v34 + 56);
  v40 = *(_OWORD *)(v34 + 40);
  v25 = *(_QWORD *)(v34 + 72);
  v26 = *(_BYTE *)(v34 + 80);
  v27 = *(_QWORD *)(v34 + 96);
  v28 = *(_QWORD *)(v34 + 104);
  v29 = *(_BYTE *)(v34 + 112);
  v30 = swift_allocObject();
  *(_QWORD *)(v30 + 84) = v22;
  *(_QWORD *)(v30 + 16) = v2;
  *(_QWORD *)(v30 + 24) = v23;
  *(_QWORD *)(v30 + 32) = v24;
  *(_OWORD *)(v30 + 40) = v40;
  *(_OWORD *)(v30 + 56) = v38;
  *(_QWORD *)(v30 + 72) = v25;
  *(_BYTE *)(v30 + 80) = v26;
  *(_QWORD *)(v30 + 96) = v27;
  *(_QWORD *)(v30 + 104) = v28;
  *(_BYTE *)(v30 + 112) = v29;
  *(_QWORD *)(v34 + 84) = 0xFFFFFFFFLL;
  *v33 = 0;
  v33[1] = 0;
  *(_BYTE *)(v34 + 112) = 1;
  swift_retain();
  swift_retain();
  swift_retain();
  return v30;
}

uint64_t sub_1B1B6BBC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((*(_BYTE *)(v0 + 112) & 1) == 0)
  {
    v1 = *(_QWORD *)(v0 + 96);
    v2 = *(_QWORD *)(v0 + 24);
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      v4 = v2 + 32;
      swift_retain();
      swift_retain_n();
      swift_retain();
      do
      {
        sub_1B1F24B64();
        v4 += 40;
        --v3;
      }
      while (v3);
      swift_release();
      swift_release();
      swift_release_n();
    }
    if (v1)
      MEMORY[0x1B5E23F88](v1, -1, -1);
  }
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EntitySnapshot()
{
  return objc_opt_self();
}

uint64_t sub_1B1B6BCD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1B1B6B8E4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B1B6BD00(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  char v14;
  __int128 v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  char v23;

  v1 = sub_1B1DA57B4(a1);
  if ((v2 & 0x100000000) != 0)
  {
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v3 = v1;
    swift_retain();
    v4 = swift_retain();
    v5 = sub_1B1C50E3C(v4);
    swift_release();
    sub_1B216B51C(v5, 0, 256, 0, (uint64_t)&v17);
    v7 = v18;
    v6 = v19;
    v8 = v20;
    v15 = v21;
    v9 = v22;
    v14 = v23;
    v13 = v17;
    v10 = swift_slowAlloc();
    type metadata accessor for EntitySnapshot();
    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 84) = a1;
    *(_OWORD *)(v11 + 16) = v13;
    *(_QWORD *)(v11 + 32) = v7;
    *(_QWORD *)(v11 + 40) = v6;
    *(_QWORD *)(v11 + 48) = v8;
    *(_OWORD *)(v11 + 56) = v15;
    *(_QWORD *)(v11 + 72) = v9;
    *(_BYTE *)(v11 + 80) = v14;
    *(_QWORD *)(v11 + 96) = v10;
    *(_QWORD *)(v11 + 104) = v10 + v6;
    *(_BYTE *)(v11 + 112) = 0;
    swift_retain();
    sub_1B1A11380(v11, v3 << 16 >> 48);
    swift_release();
    swift_release();
    return v11;
  }
  return result;
}

uint64_t sub_1B1B6BEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  unsigned int *v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v3 = a1;
  if (!a2)
  {
    v8 = (unsigned int *)(a1 + 84);
    v9 = (unsigned int *)(a1 + 88);
    goto LABEL_6;
  }
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = sub_1B1DC3CA4(*(_QWORD *)(a1 + 84));
    if ((v7 & 1) != 0)
    {
      v8 = (unsigned int *)(*(_QWORD *)(v4 + 56) + 8 * v6);
      v9 = v8 + 1;
LABEL_6:
      v10 = *v8;
      v5 = (unint64_t)*v9 << 32;
      goto LABEL_9;
    }
    v5 = 0;
  }
  v10 = 0xFFFFFFFFLL;
LABEL_9:
  v11 = sub_1B1DA57B4(v5 | v10);
  if ((v12 & 0x100000000) != 0)
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  else
  {
    v13 = v11 << 16 >> 48;
    swift_retain();
    if (a2)
    {
      v14 = swift_retain();
      v3 = sub_1B1B6B730(v14);
      sub_1B1A114D4(v13, v3);
      swift_release();
    }
    else
    {
      sub_1B1A114D4(v13, v3);
      swift_retain();
    }
    swift_release();
    return v3;
  }
  return result;
}

unint64_t sub_1B1B6C05C()
{
  unint64_t result;

  result = qword_1EEF5AB10;
  if (!qword_1EEF5AB10)
  {
    result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF5AB10);
  }
  return result;
}

uint64_t sub_1B1B6C0B0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for OrthographicCamera;
  *(_QWORD *)(inited + 40) = &off_1E6393C48;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6C2A0@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for PerspectiveCamera;
  *(_QWORD *)(inited + 40) = &off_1E638EE48;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6C490@<X0>(uint64_t a1@<X8>)
{
  return sub_1B1B6C728((uint64_t (*)(_QWORD))type metadata accessor for SDFFileAsset, (uint64_t)&off_1E6376910, a1);
}

uint64_t sub_1B1B6C4E4@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for TextureRenderTarget;
  *(_QWORD *)(inited + 40) = &off_1E639AA20;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6C6D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1B1B6C728(type metadata accessor for SceneKitRenderer, (uint64_t)&off_1E638A8C0, a1);
}

uint64_t sub_1B1B6C728@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t inited;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  __int16 v30;
  char v31;

  v5 = v3;
  v7 = a1(0);
  v8 = *v5;
  v9 = *v5 + 41;
  v10 = *(unsigned __int16 *)(*v5 + 16);
  v11 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v7;
  *(_QWORD *)(inited + 40) = a2;
  if (v11 > 0xF)
  {
    v29 = sub_1B1DC8944((char *)(v9 + v10), v11 >> 4);
    sub_1B19F4A48(inited);
    inited = v29;
  }
  v13 = *(unsigned __int16 *)(v8 + 20);
  v14 = *(unsigned __int16 *)(v8 + 22);
  v15 = 1;
  v16 = sub_1B2228B0C();
  *(_QWORD *)(v16 + 16) = 1;
  *(_BYTE *)(v16 + 32) = 3;
  if (v14)
  {
    v29 = sub_1B1DC8810((char *)(v9 + v13), v14);
    sub_1B19F499C(v16);
    v16 = v29;
    v15 = *(_QWORD *)(v29 + 16);
  }
  v17 = *v5 + 41;
  v18 = (char *)(v17 + *(unsigned __int16 *)(*v5 + 24));
  v19 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  v20 = (char *)(v17 + *(unsigned __int16 *)(*v5 + 28));
  v21 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  v22 = *((_DWORD *)v5 + 2);
  v23 = *((_BYTE *)v5 + 12);
  v24 = v5[4];
  v25 = v5[2];
  v26 = *((_BYTE *)v5 + 24);
  v27 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v16 + 32), v15, v18, v19, v20, v21);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a3 = v27;
  *(_DWORD *)(a3 + 8) = v22;
  *(_BYTE *)(a3 + 12) = v23;
  *(_WORD *)(a3 + 13) = v30;
  *(_BYTE *)(a3 + 15) = v31;
  *(_QWORD *)(a3 + 16) = v25;
  *(_BYTE *)(a3 + 24) = v26;
  *(_DWORD *)(a3 + 25) = v29;
  *(_DWORD *)(a3 + 28) = *(_DWORD *)((char *)&v29 + 3);
  *(_QWORD *)(a3 + 32) = v24;
  return result;
}

uint64_t sub_1B1B6C91C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for IBLRuntime;
  *(_QWORD *)(inited + 40) = &off_1E636DF70;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6CB0C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Static;
  *(_QWORD *)(inited + 40) = &off_1E63BD278;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6CCFC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, &qword_1ED4BB3C0, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6CF10@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, &qword_1ED4BB350, type metadata accessor for TriggerScript, (uint64_t)&off_1ED4BEFD8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6D124@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9910, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6D338@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, &qword_1ED4B9640, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1ED4BD280, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6D54C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9900, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6D760@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9630, type metadata accessor for ParticleInitScript, (uint64_t)&off_1ED4BCD90, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6D974@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9930, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6DB88@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9650, type metadata accessor for ShaderScript, (uint64_t)&off_1ED4BC090, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6DD9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4BB3B0, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6DFB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4BB270, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1ED4BF0F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6E1C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9940, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6E3D8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9660, type metadata accessor for SimpleScript, (uint64_t)&off_1ED4BC1D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6E5EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, (unint64_t *)&unk_1ED4B9920, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6E800@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, &qword_1ED4B9648, type metadata accessor for GraphScript, (uint64_t)&off_1ED4BBD80, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6EA14@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, &qword_1ED4B9950, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptStateRestoration);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E63A95F8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6EC28@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t inited;
  uint64_t v11;
  int64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  __int16 v28;
  char v29;

  v2 = v1;
  sub_1B1A1B6FC(0, &qword_1ED4B9670, type metadata accessor for EmitterScript, (uint64_t)&off_1ED4BC418, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  v5 = v4;
  v6 = *v2;
  v7 = *v2 + 41;
  v8 = *(unsigned __int16 *)(*v2 + 16);
  v9 = *(unsigned __int16 *)(*v2 + 18);
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = v5;
  *(_QWORD *)(inited + 40) = &off_1E639EBC8;
  if (v9 > 0xF)
  {
    v27 = sub_1B1DC8944((char *)(v7 + v8), v9 >> 4);
    sub_1B19F4A48(inited);
    inited = v27;
  }
  v11 = *(unsigned __int16 *)(v6 + 20);
  v12 = *(unsigned __int16 *)(v6 + 22);
  v13 = 1;
  v14 = sub_1B2228B0C();
  *(_QWORD *)(v14 + 16) = 1;
  *(_BYTE *)(v14 + 32) = 3;
  if (v12)
  {
    v27 = sub_1B1DC8810((char *)(v7 + v11), v12);
    sub_1B19F499C(v14);
    v14 = v27;
    v13 = *(_QWORD *)(v27 + 16);
  }
  v15 = *v2 + 41;
  v16 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 24));
  v17 = (unint64_t)*(unsigned __int16 *)(*v2 + 26) >> 4;
  v18 = (char *)(v15 + *(unsigned __int16 *)(*v2 + 28));
  v19 = *(unsigned __int16 *)(*v2 + 30) / 0x18u;
  v20 = *((_DWORD *)v2 + 2);
  v21 = *((_BYTE *)v2 + 12);
  v22 = v2[4];
  v23 = v2[2];
  v24 = *((_BYTE *)v2 + 24);
  v25 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v14 + 32), v13, v16, v17, v18, v19);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v20;
  *(_BYTE *)(a1 + 12) = v21;
  *(_WORD *)(a1 + 13) = v28;
  *(_BYTE *)(a1 + 15) = v29;
  *(_QWORD *)(a1 + 16) = v23;
  *(_BYTE *)(a1 + 24) = v24;
  *(_DWORD *)(a1 + 25) = v27;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v27 + 3);
  *(_QWORD *)(a1 + 32) = v22;
  return result;
}

uint64_t sub_1B1B6EE3C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for EmitterRuntime;
  *(_QWORD *)(inited + 40) = &off_1E637F470;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6F02C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleFluidSolver2DEmitter;
  *(_QWORD *)(inited + 40) = &off_1E63B4770;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6F21C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for LODRenderer;
  *(_QWORD *)(inited + 40) = &off_1E6370DE8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6F40C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6F5FC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for GraphScriptingConfig;
  *(_QWORD *)(inited + 40) = &off_1E639BD58;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6F7EC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for CodeGenerationInitialized;
  *(_QWORD *)(inited + 40) = &off_1E63AF818;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6F9DC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for CodeGenerationComponent;
  *(_QWORD *)(inited + 40) = &off_1E63AA1B0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6FBCC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for DoNotExport;
  *(_QWORD *)(inited + 40) = &off_1E6370218;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6FDBC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for DoNotSave;
  *(_QWORD *)(inited + 40) = &off_1E63C3B10;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B6FFAC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Bindings;
  *(_QWORD *)(inited + 40) = &off_1E63BE9F0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B7019C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Particle;
  *(_QWORD *)(inited + 40) = &off_1E63C21B0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B7038C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Velocity;
  *(_QWORD *)(inited + 40) = &off_1E63C3148;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B7057C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleID;
  *(_QWORD *)(inited + 40) = &off_1E636E7D8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B7076C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleLifetime;
  *(_QWORD *)(inited + 40) = &off_1E6389198;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B7095C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleTextureFrame;
  *(_QWORD *)(inited + 40) = &off_1E639E0F8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B70B4C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for DebugInfoWireframePrimitive;
  *(_QWORD *)(inited + 40) = &off_1E63B29C0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B70D3C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for ParticleAngle;
  *(_QWORD *)(inited + 40) = &off_1E637BE00;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B70F2C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Color;
  *(_QWORD *)(inited + 40) = &off_1E63BA208;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B7111C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for Children;
  *(_QWORD *)(inited + 40) = &off_1E63BEDD0;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1B7130C@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = &type metadata for SubEntity;
  *(_QWORD *)(inited + 40) = &off_1E63C54D8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 1;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 1;
  *(_BYTE *)(v12 + 32) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t type metadata accessor for ParticlePositionOverTexture.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1B7151C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5B1D8, (uint64_t (*)(void))sub_1B1B727F8, (uint64_t)&type metadata for ParticlePositionOverTexture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B727F8();
  sub_1B222A180();
  v14 = *v3;
  v13 = 0;
  sub_1B1A0895C();
  sub_1B2229958();
  if (!v2)
  {
    LOBYTE(v14) = *((_BYTE *)v3 + 8);
    v13 = 1;
    sub_1B1A70ED0();
    sub_1B2229958();
    LOBYTE(v14) = *((_BYTE *)v3 + 9);
    v13 = 2;
    sub_1B1A71D70();
    sub_1B2229958();
    v14 = *(uint64_t *)((char *)v3 + 12);
    v13 = 3;
    sub_1B1B4D924();
    sub_1B1B67480(qword_1EEF5B108, MEMORY[0x1E0DEB198], MEMORY[0x1E0DEB880]);
    sub_1B2229958();
    v14 = v3[3];
    v13 = 4;
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1B7283C((unint64_t *)&qword_1ED4B72D8, MEMORY[0x1E0DEDD30]);
    sub_1B2229958();
    v14 = v3[4];
    v13 = 5;
    sub_1B2229958();
    LOBYTE(v14) = 6;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B1B71800()
{
  return "ParticlePositionOverTexture";
}

void sub_1B1B71814(char *a1)
{
  sub_1B1F97FF0(*a1);
}

uint64_t sub_1B1B71820()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B71850 + 4 * byte_1B227C740[*v0]))(0x65727574786574, 0xE700000000000000);
}

uint64_t sub_1B1B71850()
{
  return 0x6C656E6E616863;
}

uint64_t sub_1B1B71864()
{
  return 0x4D73736572646461;
}

uint64_t sub_1B1B71884()
{
  return 0x65676E6172;
}

uint64_t sub_1B1B71898()
{
  return 0x656C616373;
}

uint64_t sub_1B1B718AC()
{
  return 1935763810;
}

uint64_t sub_1B1B718BC()
{
  return 0x656C676E61;
}

uint64_t sub_1B1B718D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1B719F0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B1B718F4(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_1B1B71900()
{
  sub_1B1B727F8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B71928()
{
  sub_1B1B727F8();
  return sub_1B222A1E0();
}

double sub_1B1B71950@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1B1B72490(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 12);
    *(_OWORD *)((char *)a2 + 28) = *(_OWORD *)((char *)v7 + 12);
  }
  return result;
}

uint64_t sub_1B1B71990(_QWORD *a1)
{
  return sub_1B1B7151C(a1);
}

uint64_t sub_1B1B719A4()
{
  return type metadata accessor for ParticlePositionOverTexture.System();
}

double sub_1B1B719C0@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_WORD *)(a1 + 8) = 512;
  *(_QWORD *)(a1 + 12) = 0x3F80000000000000;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1B1B719F0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x65727574786574 && a2 == 0xE700000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4D73736572646461 && a2 == 0xEB0000000065646FLL || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x656C616373 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 1935763810 && a2 == 0xE400000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x656C676E61 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

_QWORD *sub_1B1B71CC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  double v6;
  uint64_t v12;
  unsigned int v13;
  float v14;
  __int128 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  float32x4_t *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  float32x2_t v39;
  float32x2_t v40;
  float32x2_t v41;
  uint64_t v42;
  float32x4_t v43;
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  _OWORD v55[2];
  __int128 v56;
  uint64_t v57;
  int64x2_t v58[7];
  _BYTE v59[49];
  uint64_t v60;
  _OWORD v61[2];
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _OWORD v68[2];
  __int128 v69;
  uint64_t v70;
  _OWORD v71[7];
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[40];
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)a1;
  swift_retain();
  v3 = *(_QWORD *)(a1 + 8);
  swift_retain();
  sub_1B1D15C4C(v3, (uint64_t)&v73);
  swift_release();
  v4 = BYTE8(v73);
  if ((WORD4(v73) & 0xFF00) == 0x400)
  {
    v5 = 0;
    v4 = 0;
    v6 = 0.0;
    __asm { FMOV            V9.2S, #1.0 }
    LOBYTE(v12) = 2;
    v13 = -1;
    v14 = 0.0;
  }
  else
  {
    v14 = *((float *)&v75 + 2);
    v6 = *(double *)&v75;
    _D9 = *((double *)&v74 + 1);
    v13 = v73;
    v5 = DWORD1(v73);
    v12 = *((_QWORD *)&v73 + 1) >> 8;
    if ((_DWORD)v73 != -1)
      goto LABEL_6;
  }
  if (!(_DWORD)v5)
    return (_QWORD *)swift_release();
LABEL_6:
  sub_1B20F03D8(v13 | (unint64_t)(v5 << 32), v58);
  sub_1B19F66A0((uint64_t)v58, (uint64_t)v71, (unint64_t *)&unk_1ED4B9160);
  if (!v72)
    return (_QWORD *)swift_release();
  v77 = v71[4];
  v78 = v71[5];
  v79 = v71[6];
  v80 = v72;
  v73 = v71[0];
  v74 = v71[1];
  v75 = v71[2];
  v76 = v71[3];
  sub_1B1EDFCF8((uint64_t)&v73, v12, 1, (uint64_t)v59);
  sub_1B1A0857C((uint64_t)v59, (uint64_t)v68);
  if (*((_QWORD *)&v69 + 1) == 1)
  {
    sub_1B1A08614(v58[0].i64);
    return (_QWORD *)swift_release();
  }
  v55[0] = v68[0];
  v55[1] = v68[1];
  v56 = v69;
  v57 = v70;
  v16 = *(_OWORD *)(a1 + 104);
  v52 = *(_OWORD *)(a1 + 88);
  v53 = v16;
  v54 = *(_QWORD *)(a1 + 120);
  sub_1B1B6F40C((uint64_t)v46);
  sub_1B1C31BBC(&v43, _D9, v14, v6);
  v50[0] = v46[0];
  v50[1] = v46[1];
  v51 = v47;
  sub_1B1E8FCE4(v2, (uint64_t)v50, 0x200000000, &v60);
  sub_1B19F66A0((uint64_t)&v60, (uint64_t)v61, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v61[0])
  {
    sub_1B1A08614(v58[0].i64);
    sub_1B19ED720((uint64_t)v46);
    return (_QWORD *)swift_release();
  }
  if (v67 > 0 && (v35 = v64) != 0)
  {
    v17 = v66[4];
    v18 = *(_BYTE *)(v65 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v48[0] = v61[0];
    v48[1] = v61[1];
    v49 = v62;
    v31 = (uint64_t)(v66 + 6);
    v32 = v63;
    v38 = v66;
    v30 = v66 + 8;
    v40 = (float32x2_t)v44;
    v41 = *(float32x2_t *)v43.f32;
    v39 = (float32x2_t)v45;
    swift_retain();
    swift_retain();
    swift_retain();
    v19 = 0;
    v20 = 0;
    v34 = v18;
    v33 = v17;
    do
    {
      v21 = (unsigned int *)(v32 + 48 * v19);
      v37 = *v21;
      v36 = v21[1];
      v23 = (uint64_t *)*((_QWORD *)v21 + 2);
      v22 = *((_QWORD *)v21 + 3);
      v25 = *((_QWORD *)v21 + 4);
      v24 = *((_QWORD *)v21 + 5);
      v42 = v20;
      if ((v18 & 1) != 0)
      {
        v26 = *(os_unfair_lock_s **)(v24 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v26);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v17);
      sub_1B19F66A0(v31, (uint64_t)v81, &qword_1ED4B7FB0);
      v27 = v38[4];
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v38[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
      v38[7] = v28;
      v30[1] = 0;
      v30[2] = 0;
      *v30 = 0;
      swift_release();
      v29 = (float32x4_t *)sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v23, v22, v25, (uint64_t)v38);
      if (v23)
      {
        v18 = v34;
        v20 = v42;
        if (v25)
        {
          (*((void (**)(_OWORD *, double))&v56 + 1))(v55, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v40, *v29, 2), vadd_f32(v39, vmul_n_f32(v41, COERCE_FLOAT(*v29))))));
          __asm { BR              X8 }
        }
      }
      else
      {
        v18 = v34;
        v20 = v42;
        if ((_DWORD)v37 != v36)
        {
          (*((void (**)(_OWORD *, double))&v56 + 1))(v55, COERCE_DOUBLE(vadd_f32(vmul_laneq_f32(v40, v29[v37], 2), vadd_f32(v39, vmul_n_f32(v41, COERCE_FLOAT(*(_OWORD *)&v29[v37]))))));
          __asm { BR              X8 }
        }
      }
      v17 = v33;
      sub_1B1F05D48(v38, (unsigned __int16 **)v48, (uint64_t)v81);
      sub_1B1F03804((char *)v24);
      ecs_stack_allocator_pop_snapshot(v33);
      if ((v18 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v24 + 376));
      }
      swift_release();
      ++v19;
    }
    while (v19 != v35);
  }
  else
  {
    sub_1B1A086DC(&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  }
  sub_1B1A08614(v58[0].i64);
  sub_1B19ED720((uint64_t)v46);
  swift_release();
  sub_1B1A086DC(&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  return sub_1B1A086DC(&v60, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

uint64_t getEnumTagSinglePayload for ParticlePositionOverTexture(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 9);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticlePositionOverTexture(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 44) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 44) = 0;
    if (a2)
      *(_BYTE *)(result + 9) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticlePositionOverTexture()
{
  return &type metadata for ParticlePositionOverTexture;
}

uint64_t sub_1B1B72490@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;

  sub_1B19F8E54(0, &qword_1EEF5B1C8, (uint64_t (*)(void))sub_1B1B727F8, (uint64_t)&type metadata for ParticlePositionOverTexture.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v23 - v9;
  v11 = a1[3];
  v24 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1B727F8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v24);
  v12 = v7;
  v25 = 0;
  sub_1B1A08878();
  v13 = v6;
  sub_1B2229814();
  v14 = v26;
  v25 = 1;
  sub_1B1A70E8C();
  sub_1B2229814();
  v15 = v26;
  v25 = 2;
  sub_1B1A71D2C();
  sub_1B2229814();
  v16 = v26;
  sub_1B1B4D924();
  v25 = 3;
  sub_1B1B67480((unint64_t *)&qword_1ED4BA5B0, MEMORY[0x1E0DEB1C0], MEMORY[0x1E0DEB8B0]);
  sub_1B2229814();
  HIDWORD(v23) = v16;
  v17 = v26;
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  v25 = 4;
  sub_1B1B7283C((unint64_t *)&qword_1ED4B72F0, MEMORY[0x1E0DEDD40]);
  sub_1B2229814();
  v18 = v26;
  v25 = 5;
  sub_1B2229814();
  v19 = v26;
  LOBYTE(v26) = 6;
  sub_1B22297F0();
  v21 = v20;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v13);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v24);
  *(_QWORD *)a2 = v14;
  *(_BYTE *)(a2 + 8) = v15;
  *(_BYTE *)(a2 + 9) = BYTE4(v23);
  *(_QWORD *)(a2 + 12) = v17;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v19;
  *(_DWORD *)(a2 + 40) = v21;
  return result;
}

unint64_t sub_1B1B727F8()
{
  unint64_t result;

  result = qword_1EEF5B1D0;
  if (!qword_1EEF5B1D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C910, &type metadata for ParticlePositionOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1D0);
  }
  return result;
}

uint64_t sub_1B1B7283C(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    sub_1B19F8E54(255, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    result = MEMORY[0x1B5E23E74](a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticlePositionOverTexture.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B1B728E8 + 4 * byte_1B227C756[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B1B7291C + 4 * asc_1B227C751[v4]))();
}

uint64_t sub_1B1B7291C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B72924(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B7292CLL);
  return result;
}

uint64_t sub_1B1B72938(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B72940);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B1B72944(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B7294C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticlePositionOverTexture.CodingKeys()
{
  return &type metadata for ParticlePositionOverTexture.CodingKeys;
}

unint64_t sub_1B1B7296C()
{
  unint64_t result;

  result = qword_1EEF5B1E0;
  if (!qword_1EEF5B1E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C8E8, &type metadata for ParticlePositionOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1E0);
  }
  return result;
}

unint64_t sub_1B1B729B4()
{
  unint64_t result;

  result = qword_1EEF5B1E8;
  if (!qword_1EEF5B1E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C858, &type metadata for ParticlePositionOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1E8);
  }
  return result;
}

unint64_t sub_1B1B729FC()
{
  unint64_t result;

  result = qword_1EEF5B1F0;
  if (!qword_1EEF5B1F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227C880, &type metadata for ParticlePositionOverTexture.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B1F0);
  }
  return result;
}

uint64_t sub_1B1B72A40()
{
  return 0x200000000;
}

uint64_t sub_1B1B72A4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  __int128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[12];
  uint64_t v17;
  unsigned int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[2];
  uint64_t v29;

  v5 = *(_OWORD *)(a1 + 16);
  v28[0] = *(_OWORD *)a1;
  v28[1] = v5;
  v29 = *(_QWORD *)(a1 + 32);
  sub_1B1E8FCE4(v3, (uint64_t)v28, a2 & 0xFFFFFFFFFFLL, v16);
  result = sub_1B19F66A0((uint64_t)v16, (uint64_t)&v17, (unint64_t *)&qword_1ED4B7DE0);
  if (v17)
  {
    v7 = v20;
    v8 = v21;
    v9 = v22;
    v10 = v23;
    v11 = v24;
    v12 = v25;
    v13 = v26;
    v14 = v27;
    v15 = v18 | ((unint64_t)v19 << 32);
  }
  else
  {
    v15 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v13 = 0;
    v14 = 0;
    v11 = 0uLL;
    v12 = 0uLL;
  }
  *(_QWORD *)a3 = v17;
  *(_QWORD *)(a3 + 8) = v15;
  *(_QWORD *)(a3 + 16) = v7;
  *(_QWORD *)(a3 + 24) = v8;
  *(_QWORD *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 40) = v10;
  *(_OWORD *)(a3 + 48) = v11;
  *(_OWORD *)(a3 + 64) = v12;
  *(_QWORD *)(a3 + 80) = v13;
  *(_QWORD *)(a3 + 88) = v14;
  return result;
}

uint64_t sub_1B1B72B30@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v7;
  uint64_t result;
  int v9;
  int v10;
  char v15;
  char v16;
  unsigned int *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  int v38;
  int v39;
  int v40;
  char v41;

  v3 = *(_QWORD *)v1;
  v5 = *(_DWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 12);
  swift_retain();
  _ZF = v5 == -1 && v4 == 0;
  if (!_ZF
    && (v5 & 0x80000000) == 0
    && *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5
    && ((v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 == -1)
     || *(_DWORD *)(v7 + 12 * v5 + 8) == v4))
  {
    v17 = (unsigned int *)(v7 + 12 * v5);
    sub_1B1D1C970(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * (int)*v17 + 32), *v17 | ((unint64_t)*((unsigned __int16 *)v17 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v17 + 2) << 32), 96, v3, (uint64_t)&v30);
    result = swift_release();
    if (v30 != 1)
    {
      v10 = v40;
      v18 = v37;
      v9 = v38;
      v20 = v35;
      v19 = v36;
      v22 = v31;
      v21 = v32;
      result = v31 >> 16;
      v23 = v31 >> 24;
      v24 = HIDWORD(v31);
      v25 = HIDWORD(v32);
      v26 = v33;
      v27 = v34;
      v28 = HIDWORD(v35);
      v29 = HIDWORD(v36);
      v15 = v39 & 1;
      v16 = v41 & 1;
      *(_QWORD *)a1 = v30;
      *(_BYTE *)(a1 + 8) = v22 & 1;
      *(_BYTE *)(a1 + 9) = HIBYTE(v22) & 1;
      *(_BYTE *)(a1 + 10) = result;
      *(_BYTE *)(a1 + 11) = v23;
      *(_DWORD *)(a1 + 12) = v24;
      *(_DWORD *)(a1 + 16) = v21;
      *(_DWORD *)(a1 + 20) = v25;
      *(_QWORD *)(a1 + 32) = v26;
      *(_QWORD *)(a1 + 40) = v27;
      *(_DWORD *)(a1 + 48) = v20;
      *(_DWORD *)(a1 + 52) = v28;
      *(_DWORD *)(a1 + 56) = v19;
      *(_DWORD *)(a1 + 60) = v29;
      *(_BYTE *)(a1 + 64) = v18 & 1;
      *(_BYTE *)(a1 + 65) = BYTE1(v18) & 1;
      *(_BYTE *)(a1 + 66) = BYTE2(v18) & 1;
      goto LABEL_11;
    }
  }
  else
  {
    result = swift_release();
  }
  v9 = 0;
  v10 = 0;
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 65793;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 12) = _D0;
  *(_DWORD *)(a1 + 20) = 0;
  *(_OWORD *)(a1 + 32) = xmmword_1B227C980;
  *(_OWORD *)(a1 + 48) = xmmword_1B2244D70;
  v15 = 1;
  *(_WORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 66) = 0;
  v16 = 1;
LABEL_11:
  *(_DWORD *)(a1 + 68) = v9;
  *(_BYTE *)(a1 + 72) = v15;
  *(_DWORD *)(a1 + 76) = v10;
  *(_BYTE *)(a1 + 80) = v16;
  return result;
}

char *sub_1B1B72CEC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)v0;
  v3 = *(_DWORD *)(v0 + 8);
  v2 = *(_DWORD *)(v0 + 12);
  swift_retain();
  v4 = v3 == -1 && v2 == 0;
  if (!v4
    && (v3 & 0x80000000) == 0
    && *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v3
    && ((v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v2 == -1)
     || *(_DWORD *)(v5 + 12 * v3 + 8) == v2))
  {
    v6 = sub_1B1D1FB5C(*(_QWORD *)(*(_QWORD *)(v1 + 136) + 8 * *(int *)(v5 + 12 * v3) + 32), *(_DWORD *)(v5 + 12 * v3), *(_WORD *)(v5 + 12 * v3 + 4), 32, v1);
    swift_release();
    if (v6)
      return (char *)v6;
  }
  else
  {
    swift_release();
  }
  return sub_1B21451EC((uint64_t)&unk_1E63B6830);
}

double sub_1B1B72DF8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  double result;
  unsigned int *v9;
  __int16 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;
  char v21;

  v3 = *(_QWORD *)v1;
  v5 = *(_DWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 12);
  swift_retain();
  v6 = v5 == -1 && v4 == 0;
  if (!v6
    && (v5 & 0x80000000) == 0
    && *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5
    && ((v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 == -1)
     || *(_DWORD *)(v7 + 12 * v5 + 8) == v4))
  {
    v9 = (unsigned int *)(v7 + 12 * v5);
    sub_1B1D1DDBC(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * (int)*v9 + 32), *v9 | ((unint64_t)*((unsigned __int16 *)v9 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v9 + 2) << 32), 112, v3, (uint64_t)&v13);
    swift_release();
    if (v13 != 1)
    {
      v10 = v20;
      v11 = v21;
      v12 = v19;
      *(_QWORD *)a1 = v13;
      *(_OWORD *)(a1 + 8) = v14;
      *(_OWORD *)(a1 + 24) = v15;
      *(_OWORD *)(a1 + 40) = v16;
      *(_OWORD *)(a1 + 56) = v17;
      result = *(double *)&v18;
      *(_OWORD *)(a1 + 72) = v18;
      *(_QWORD *)(a1 + 88) = v12;
      *(_BYTE *)(a1 + 98) = v11;
      *(_WORD *)(a1 + 96) = v10;
      return result;
    }
  }
  else
  {
    swift_release();
  }
  *(_QWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_1B227C990;
  *(_QWORD *)(a1 + 24) = 8;
  *(_BYTE *)(a1 + 32) = 2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_OWORD *)(a1 + 68) = xmmword_1B227C9A0;
  result = 4294968350.0;
  *(_QWORD *)(a1 + 84) = 0x41F0000041A00000;
  *(_DWORD *)(a1 + 92) = 1065353216;
  *(_WORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 98) = 0;
  return result;
}

uint64_t sub_1B1B72F78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  float v14;
  unint64_t v15;
  _QWORD v16[4];
  float v17;
  _QWORD v18[5];

  v3 = *(_QWORD *)v1;
  v5 = *(_DWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 12);
  swift_retain();
  v6 = v5 == -1 && v4 == 0;
  if (!v6
    && (v5 & 0x80000000) == 0
    && *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5
    && ((v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 == -1)
     || *(_DWORD *)(v7 + 12 * v5 + 8) == v4))
  {
    sub_1B1D20888(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v7 + 12 * v5) + 32), *(_DWORD *)(v7 + 12 * v5), *(_WORD *)(v7 + 12 * v5 + 4), 40, v3, (uint64_t)v16);
    v9 = v16[0];
    v11 = v16[1];
    v12 = v16[2];
    v15 = v16[3];
    v14 = v17;
    swift_release();
    result = sub_1B19F66A0((uint64_t)v16, (uint64_t)v18, &qword_1EEF5B200);
    if (v18[0])
    {
      v13 = HIDWORD(v15);
      goto LABEL_11;
    }
  }
  else
  {
    swift_release();
  }
  result = (uint64_t)sub_1B21451EC((uint64_t)&unk_1E63B68B0);
  v9 = result;
  v11 = v10;
  v12 = 0;
  LODWORD(v13) = 0;
  v14 = 1.0;
  LOBYTE(v15) = 1;
LABEL_11:
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v12;
  *(_BYTE *)(a1 + 24) = v15;
  *(_DWORD *)(a1 + 28) = v13;
  *(float *)(a1 + 32) = v14;
  return result;
}

uint64_t sub_1B1B730C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22[16];
  uint64_t v23;

  v3 = *(_QWORD *)v1;
  v5 = *(_DWORD *)(v1 + 8);
  v4 = *(_DWORD *)(v1 + 12);
  swift_retain();
  v6 = v5 == -1 && v4 == 0;
  if (!v6
    && (v5 & 0x80000000) == 0
    && *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5
    && ((v7 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v4 == -1)
     || *(_DWORD *)(v7 + 12 * v5 + 8) == v4))
  {
    sub_1B1D20A40(*(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(v7 + 12 * v5) + 32), *(_DWORD *)(v7 + 12 * v5), *(_WORD *)(v7 + 12 * v5 + 4), 48, v3, (uint64_t)&v16);
    v12 = v16;
    v15 = v17;
    v9 = v18;
    v11 = v19;
    v13 = v20;
    v14 = v21;
    swift_release();
    result = sub_1B19F66A0((uint64_t)&v16, (uint64_t)v22, &qword_1EEF5B208);
    if (v23)
      goto LABEL_11;
  }
  else
  {
    swift_release();
  }
  result = (uint64_t)sub_1B21451EC((uint64_t)&unk_1E63B6870);
  v9 = result;
  v11 = v10;
  v12 = 0;
  v13 = 0;
  v14 = 1;
  v15 = 2;
LABEL_11:
  *(_QWORD *)a1 = v12;
  *(_BYTE *)(a1 + 8) = v15;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v13;
  *(_BYTE *)(a1 + 40) = v14;
  return result;
}

uint64_t sub_1B1B73208()
{
  sub_1B1B7D20C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B73230()
{
  sub_1B1B7D20C();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B73258(uint64_t a1)
{
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
}

uint64_t sub_1B1B7327C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5B290, (uint64_t (*)(void))sub_1B1B7D20C, (uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter.CodingKeys);
}

uint64_t sub_1B1B732A8()
{
  sub_1B1B7D1C8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B732D0()
{
  sub_1B1B7D1C8();
  return sub_1B222A1E0();
}

double sub_1B1B732F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B73B88(a1, a2, a3, a4, (uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter, (uint64_t)&off_1E63B94F8);
}

uint64_t sub_1B1B7330C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5B280, (uint64_t (*)(void))sub_1B1B7D1C8, (uint64_t)&type metadata for ParticleGlobalFluidSolver2DEmitter.CodingKeys);
}

uint64_t sub_1B1B73338(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  sub_1B19F8E54(0, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v15 - v12;
  sub_1B19FA070(a1, a1[3]);
  a5();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_1B1B73418(char *a1)
{
  sub_1B1F98388(*a1);
}

void sub_1B1B73424()
{
  char *v0;

  sub_1B1DB4E20(0, *v0);
}

void sub_1B1B73430()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1B73464()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1B73510(uint64_t a1)
{
  char *v1;

  sub_1B1DB4E20(a1, *v1);
}

uint64_t sub_1B1B73518@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B7A0F4();
  *a1 = result;
  return result;
}

uint64_t sub_1B1B73544()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1B7356C + 4 * byte_1B227CBE7[*v0]))();
}

void sub_1B1B7356C(_QWORD *a1@<X8>)
{
  *a1 = 0x656372756F73;
  a1[1] = 0xE600000000000000;
}

void sub_1B1B73584(_QWORD *a1@<X8>)
{
  *a1 = 0x737569646172;
  a1[1] = 0xE600000000000000;
}

void sub_1B1B7359C(_QWORD *a1@<X8>)
{
  *a1 = 0x797469736E6564;
  a1[1] = 0xE700000000000000;
}

void sub_1B1B735B8(_QWORD *a1@<X8>)
{
  *a1 = 0x797469636F6C6576;
  a1[1] = 0xE800000000000000;
}

void sub_1B1B735D4(_QWORD *a1@<X8>)
{
  *a1 = 0x74696D45776F6873;
  a1[1] = 0xEB00000000726574;
}

void sub_1B1B735F8(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "showVelocity");
  *(_BYTE *)(a1 + 13) = 0;
  *(_WORD *)(a1 + 14) = -5120;
}

uint64_t sub_1B1B7361C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B73644 + 4 * byte_1B227CBEE[*v0]))(1953066341, 0xE400000000000000);
}

uint64_t sub_1B1B73644()
{
  return 0x656372756F73;
}

uint64_t sub_1B1B73658()
{
  return 0x737569646172;
}

uint64_t sub_1B1B7366C()
{
  return 0x797469736E6564;
}

uint64_t sub_1B1B73684()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B1B7369C()
{
  return 0x74696D45776F6873;
}

uint64_t sub_1B1B736BC()
{
  return 0x6F6C6556776F6873;
}

uint64_t sub_1B1B736DC@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B7A0F4();
  *a1 = result;
  return result;
}

uint64_t sub_1B1B73700()
{
  sub_1B1B7CD28();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B73728()
{
  sub_1B1B7CD28();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B73750(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD v12[2];
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5B238, (uint64_t (*)(void))sub_1B1B7CD28, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B7CD28();
  sub_1B222A180();
  v19 = 0;
  sub_1B222991C();
  if (!v2)
  {
    v12[1] = *(_QWORD *)(v3 + 4);
    v18 = 1;
    sub_1B1A0895C();
    sub_1B2229958();
    v17 = 2;
    sub_1B2229934();
    v16 = 3;
    sub_1B2229934();
    v15 = 4;
    sub_1B2229934();
    v14 = 5;
    sub_1B222991C();
    v13 = 6;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1B73964()
{
  return type metadata accessor for ParticleFluidSolver2DEmitterSystem();
}

double sub_1B1B73980@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  _BYTE v5[26];

  sub_1B1B7A13C(a1, (uint64_t)v5);
  if (!v2)
  {
    *a2 = *(_OWORD *)v5;
    result = *(double *)&v5[10];
    *(_OWORD *)((char *)a2 + 10) = *(_OWORD *)&v5[10];
  }
  return result;
}

uint64_t sub_1B1B739C0(_QWORD *a1)
{
  return sub_1B1B73750(a1);
}

uint64_t sub_1B1B739D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(a2 + 8))(v2 + 4, 0, ObjectType, a2);
}

double sub_1B1B73A1C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 4) = 0xFFFFFFFFLL;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 12) = result;
  *(_DWORD *)(a1 + 20) = 1065353216;
  *(_WORD *)(a1 + 24) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleFluidSolver2DEmitterSystem()
{
  return objc_opt_self();
}

const char *sub_1B1B73A68()
{
  return "ParticleFluidSolver2DEmitter";
}

uint64_t sub_1B1B73A7C()
{
  sub_1B1B7D250();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B73AA4()
{
  sub_1B1B7D250();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B73ACC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5B2A0, (uint64_t (*)(void))sub_1B1B7D250, (uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DSolver.CodingKeys);
}

uint64_t sub_1B1B73AF8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

uint64_t sub_1B1B73B24()
{
  sub_1B1B7D184();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B73B4C()
{
  sub_1B1B7D184();
  return sub_1B222A1E0();
}

double sub_1B1B73B74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1B73B88(a1, a2, a3, a4, (uint64_t)&type metadata for ParticleAffectedByGlobalFluidSolver2DSolver, (uint64_t)&off_1E63B9408);
}

double sub_1B1B73B88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  double result;

  sub_1B1B7C554(0, (unint64_t *)&qword_1ED4BAD80, 255, (uint64_t (*)(uint64_t))sub_1B19ED84C, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v8 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v8 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v8 + 32) = a5;
  *(_QWORD *)(v8 + 40) = a6;
  return result;
}

uint64_t sub_1B1B73BE8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1B73338(a1, a2, a3, &qword_1EEF5B270, (uint64_t (*)(void))sub_1B1B7D184, (uint64_t)&type metadata for ParticleGlobalFluidSolver2DSolver.CodingKeys);
}

uint64_t sub_1B1B73C14()
{
  uint64_t v0;

  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_QWORD *)(v0 + 16) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  *(_QWORD *)(v0 + 24) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  *(_QWORD *)(v0 + 32) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  *(_QWORD *)(v0 + 40) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  *(_QWORD *)(v0 + 48) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  *(_QWORD *)(v0 + 56) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  *(_QWORD *)(v0 + 64) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  *(_QWORD *)(v0 + 72) = sub_1B21A3D5C(0.0, 0.0, 0.0);
  return v0;
}

_QWORD **sub_1B1B73CD4()
{
  _QWORD **v0;

  sub_1B21A3DAC(v0[2]);
  sub_1B21A3DAC(v0[3]);
  sub_1B21A3DAC(v0[4]);
  sub_1B21A3DAC(v0[5]);
  sub_1B21A3DAC(v0[6]);
  sub_1B21A3DAC(v0[7]);
  sub_1B21A3DAC(v0[8]);
  sub_1B21A3DAC(v0[9]);
  return v0;
}

uint64_t sub_1B1B73D28()
{
  sub_1B1B73CD4();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleFluidSolver2DSolverData()
{
  return objc_opt_self();
}

void sub_1B1B73D68(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1B74898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float32x4_t a31,int8x16_t a32)
{
  float **v32;
  unsigned __int8 v33;
  uint64_t v34;
  float v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  float v45;
  double *v46;
  __n128 *v47;
  unint64_t v48;
  unint64_t v49;
  int64_t v50;
  unint64_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int8x16_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  int32x4_t v64;
  int8x16_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  uint64_t v69;
  float v70;
  float32x4_t v71;
  int32x4_t v72;
  int8x16_t v73;
  float32x4_t v74;
  float32x4_t v75;
  unint64_t v76;
  unint64_t v77;
  float32x4_t v78;
  int32x4_t v79;
  int8x16_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t *v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  uint64_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  unint64_t v92;
  unint64_t v93;
  __n128 *v94;
  __n128 *v95;
  __n128 *v96;
  float32x4_t *v97;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  char *v103;
  char *v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;

  v36 = sub_1B1C64878(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v38 = *((_QWORD *)v36 + 2);
  v37 = *((_QWORD *)v36 + 3);
  v39 = v37 >> 1;
  v40 = v38 + 1;
  if (v37 >> 1 <= v38)
  {
    v36 = sub_1B1C64878(v37 > 1, v38 + 1, 1, v36);
    v37 = *((_QWORD *)v36 + 3);
    v39 = v37 >> 1;
  }
  *((_QWORD *)v36 + 2) = v40;
  v41 = a32;
  *(_QWORD *)&v36[8 * v38 + 32] = a32.i64[0];
  if (v39 < (uint64_t)(v38 + 2))
  {
    v99 = sub_1B1C64878(v37 > 1, v38 + 2, 1, v36);
    v41 = a32;
    v36 = v99;
  }
  HIDWORD(v42) = v41.i32[1];
  LODWORD(v42) = vextq_s8(v41, v41, 8uLL).u32[0];
  *((_QWORD *)v36 + 2) = v38 + 2;
  *(_QWORD *)&v36[8 * v40 + 32] = v42;
  v44 = *((_QWORD *)v36 + 2);
  v43 = *((_QWORD *)v36 + 3);
  if (v44 >= v43 >> 1)
  {
    v100 = sub_1B1C64878(v43 > 1, v44 + 1, 1, v36);
    v41 = a32;
    v36 = v100;
  }
  v45 = *(float *)&v41.i32[2];
  *((_QWORD *)v36 + 2) = v44 + 1;
  v46 = (double *)(v36 + 32);
  *(_QWORD *)&v36[8 * v44 + 32] = v41.i64[0];
  v47 = (__n128 *)sub_1B1C636E0(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v49 = v47[1].n128_u64[0];
  v48 = v47[1].n128_u64[1];
  v50 = v48 >> 1;
  v51 = v49 + 1;
  if (v48 >> 1 <= v49)
  {
    v47 = (__n128 *)sub_1B1C636E0(v48 > 1, v49 + 1, 1, (char *)v47);
    v48 = v47[1].n128_u64[1];
    v50 = v48 >> 1;
  }
  v52 = 0.5;
  v53 = a31;
  v54 = vmulq_f32(a31, (float32x4_t)xmmword_1B2244F80);
  v55 = (int32x4_t)vnegq_f32(v54);
  v56 = (int8x16_t)vtrn2q_s32((int32x4_t)v54, vtrn1q_s32((int32x4_t)v54, v55));
  v57 = (float32x4_t)vextq_s8(v56, v56, 8uLL);
  v58 = 0uLL;
  v59 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v54, (int8x16_t)v55, 8uLL), (float32x4_t)0);
  v61 = (float32x4_t)vrev64q_s32((int32x4_t)v54);
  v61.i32[0] = v55.i32[1];
  v60 = vmlaq_f32(v59, (float32x4_t)0, v57);
  v61.i32[3] = v55.i32[2];
  v62 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a31.f32, 0);
  v63 = vmlaq_n_f32(v60, v61, v45 * 0.5);
  v64 = (int32x4_t)vnegq_f32(v63);
  v65 = (int8x16_t)vtrn2q_s32((int32x4_t)v63, vtrn1q_s32((int32x4_t)v63, v64));
  v66 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a31, 2);
  v67 = (float32x4_t)vrev64q_s32((int32x4_t)v63);
  v67.i32[0] = v64.i32[1];
  v67.i32[3] = v64.i32[2];
  v68 = vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v63, a31, 3), v67, a31, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v63, (int8x16_t)v64, 8uLL), *(float32x2_t *)a31.f32, 1), (float32x4_t)vextq_s8(v65, v65, 8uLL), a31.f32[0])), *(float32x4_t *)(v34 - 192));
  v47[1].n128_u64[0] = v51;
  v47[v49 + 2] = (__n128)v68;
  v69 = v49 + 2;
  v70 = *(float *)a32.i32;
  v111 = v66;
  v112 = v62;
  if (v50 < v69)
  {
    v109 = v60;
    v106 = v59;
    v107 = v61;
    v105 = v57;
    v101 = sub_1B1C636E0(v48 > 1, v69, 1, (char *)v47);
    v58 = 0uLL;
    v57 = v105;
    v59 = v106;
    v61 = v107;
    v60 = v109;
    v66 = v111;
    v62 = v112;
    v53 = a31;
    v70 = *(float *)a32.i32;
    v52 = 0.5;
    v47 = (__n128 *)v101;
  }
  v71 = vmlaq_f32(vmlaq_n_f32(v59, v57, v70 * v52), v58, v61);
  v72 = (int32x4_t)vnegq_f32(v71);
  v73 = (int8x16_t)vtrn2q_s32((int32x4_t)v71, vtrn1q_s32((int32x4_t)v71, v72));
  v74 = (float32x4_t)vrev64q_s32((int32x4_t)v71);
  v74.i32[0] = v72.i32[1];
  v74.i32[3] = v72.i32[2];
  v75 = vaddq_f32(vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v71, v53, 3), v74, v66), vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v71, (int8x16_t)v72, 8uLL), *(float32x2_t *)v53.f32, 1), (float32x4_t)vextq_s8(v73, v73, 8uLL), v62)), *(float32x4_t *)(v34 - 192));
  v47[1].n128_u64[0] = v69;
  v47[v51 + 2] = (__n128)v75;
  v77 = v47[1].n128_u64[0];
  v76 = v47[1].n128_u64[1];
  if (v77 >= v76 >> 1)
  {
    v110 = v60;
    v108 = v61;
    v102 = sub_1B1C636E0(v76 > 1, v77 + 1, 1, (char *)v47);
    v61 = v108;
    v60 = v110;
    v66 = v111;
    v62 = v112;
    v53 = a31;
    v47 = (__n128 *)v102;
  }
  v78 = vmlaq_n_f32(v60, v61, v45 * -0.5);
  v79 = (int32x4_t)vnegq_f32(v78);
  v80 = (int8x16_t)vtrn2q_s32((int32x4_t)v78, vtrn1q_s32((int32x4_t)v78, v79));
  v81 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v78, (int8x16_t)v79, 8uLL), *(float32x2_t *)v53.f32, 1), (float32x4_t)vextq_s8(v80, v80, 8uLL), v62);
  v82 = (float32x4_t)vrev64q_s32((int32x4_t)v78);
  v82.i32[0] = v79.i32[1];
  v82.i32[3] = v79.i32[2];
  v83 = vaddq_f32(vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v78, v53, 3), v82, v66), v81), *(float32x4_t *)(v34 - 192));
  v47[1].n128_u64[0] = v77 + 1;
  v47[v77 + 2] = (__n128)v83;
  v84 = (float32x4_t *)sub_1B1C66198(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v86 = v84[1].u64[0];
  v85 = v84[1].u64[1];
  v87 = v85 >> 1;
  v88 = v86 + 1;
  if (v85 >> 1 <= v86)
  {
    v84 = (float32x4_t *)sub_1B1C66198(v85 > 1, v86 + 1, 1, (char *)v84);
    v85 = v84[1].u64[1];
    v87 = v85 >> 1;
  }
  v90 = v112;
  v89 = a31;
  v91 = v111;
  v84[1].i64[0] = v88;
  v84[v86 + 2] = vaddq_f32(vmlaq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227C9B0, *(float32x2_t *)a31.f32, 1), (float32x4_t)xmmword_1B227C9C0, v112), vmlaq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B2244E20, a31, 3), (float32x4_t)xmmword_1B227C9D0, v111));
  if (v87 < (uint64_t)(v86 + 2))
  {
    v103 = sub_1B1C66198(v85 > 1, v86 + 2, 1, (char *)v84);
    v91 = v111;
    v90 = v112;
    v89 = a31;
    v84 = (float32x4_t *)v103;
  }
  v84[1].i64[0] = v86 + 2;
  v84[v88 + 2] = vaddq_f32(vmlaq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227C9E0, *(float32x2_t *)v89.f32, 1), (float32x4_t)xmmword_1B227C9F0, v90), vmlaq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B227CA00, v89, 3), (float32x4_t)xmmword_1B227CA10, v91));
  v93 = v84[1].u64[0];
  v92 = v84[1].u64[1];
  if (v93 >= v92 >> 1)
  {
    v104 = sub_1B1C66198(v92 > 1, v93 + 1, 1, (char *)v84);
    v91 = v111;
    v90 = v112;
    v89 = a31;
    v84 = (float32x4_t *)v104;
  }
  v84[1].i64[0] = v93 + 1;
  v84[v93 + 2] = vaddq_f32(vmlaq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227CA20, *(float32x2_t *)v89.f32, 1), (float32x4_t)xmmword_1B227CA30, v90), vmlaq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B227CA40, v89, 3), (float32x4_t)xmmword_1B227CA50, v91));
  v94 = (__n128 *)v32[2];
  if (!v94)
    goto LABEL_32;
  if (sub_1B21A3DD8(v32[2], COERCE_FLOAT(*(_QWORD *)v46), COERCE_FLOAT(HIDWORD(*(_QWORD *)v46)), v35))
    sub_1B21A3DDC(v94, *v46, COERCE_FLOAT(HIDWORD(*(_QWORD *)v46)), v35);
  sub_1B21A3EA4(v94, v47[2]);
  sub_1B21A3EA8((float32x4_t *)v94, v84[2]);
  v95 = (__n128 *)v32[3];
  if (!v95)
    goto LABEL_32;
  if (sub_1B21A3DD8(v32[3], COERCE_FLOAT(*((_QWORD *)v36 + 5)), COERCE_FLOAT(HIDWORD(*((_QWORD *)v36 + 5))), v35))
    sub_1B21A3DDC(v95, *((double *)v36 + 5), COERCE_FLOAT(HIDWORD(*((_QWORD *)v36 + 5))), v35);
  sub_1B21A3EA4(v95, v47[3]);
  sub_1B21A3EA8((float32x4_t *)v95, v84[3]);
  v96 = (__n128 *)v32[4];
  if (!v96)
    goto LABEL_32;
  if (sub_1B21A3DD8(v32[4], COERCE_FLOAT(*((_QWORD *)v36 + 6)), COERCE_FLOAT(HIDWORD(*((_QWORD *)v36 + 6))), v35))
    sub_1B21A3DDC(v96, *((double *)v36 + 6), COERCE_FLOAT(HIDWORD(*((_QWORD *)v36 + 6))), v35);
  sub_1B21A3EA4(v96, v47[4]);
  v97 = sub_1B21A3EA8((float32x4_t *)v96, v84[4]);
  if (!v32[2] || !v32[3] || !v32[4])
  {
LABEL_32:
    while (1)
    {
      sub_1B2229688();
      __break(1u);
    }
  }
  return ((uint64_t (*)(float32x4_t *))((char *)sub_1B1B74CE8 + 4 * word_1B227CC06[v33]))(v97);
}

uint64_t sub_1B1B74CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B21A3DF8(v2, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 1, v1, 1, 0);
  sub_1B21A3DF8(v1, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, v2, 3, 0);
  sub_1B21A3DF8(v1, 3, 1, v0, 1, 0);
  sub_1B21A3DF8(v0, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 1, v1, 3, 0);
  sub_1B21A3DF8(v0, 3, 1, 0, 0, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B74DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,float32x4_t a31,int8x16_t a32)
{
  uint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  float v35;
  char *v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int8x16_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  float v47;
  char *v48;
  char *v49;
  unint64_t v50;
  unint64_t v51;
  int64_t v52;
  unint64_t v53;
  float v54;
  float32x4_t v55;
  float32x4_t v56;
  int32x4_t v57;
  int8x16_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int32x4_t v66;
  int8x16_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  unint64_t v71;
  float v72;
  float32x4_t v73;
  int32x4_t v74;
  int8x16_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  unint64_t v79;
  unint64_t v80;
  float v81;
  float32x4_t v82;
  int32x4_t v83;
  int8x16_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  unint64_t v88;
  float32x4_t v89;
  int32x4_t v90;
  int8x16_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  int64_t v98;
  unint64_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  unint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  float32x4_t *v111;
  __int128 v112;
  __int128 v113;
  __n128 *v114;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  unsigned __int8 v136;
  float32x4_t v137;
  float32x4_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;

  v36 = sub_1B1C64878(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v38 = *((_QWORD *)v36 + 2);
  v37 = *((_QWORD *)v36 + 3);
  v141 = v36;
  v39 = v37 >> 1;
  v40 = v38 + 1;
  if (v37 >> 1 <= v38)
  {
    v141 = sub_1B1C64878(v37 > 1, v38 + 1, 1, v36);
    v37 = *((_QWORD *)v141 + 3);
    v39 = v37 >> 1;
  }
  *((_QWORD *)v141 + 2) = v40;
  v41 = a32;
  *(_QWORD *)&v141[8 * v38 + 32] = a32.i64[0];
  v42 = v38 + 2;
  if (v39 < (uint64_t)(v38 + 2))
  {
    v116 = sub_1B1C64878(v37 > 1, v38 + 2, 1, v141);
    v41 = a32;
    v141 = v116;
  }
  HIDWORD(v43) = v41.i32[1];
  LODWORD(v43) = vextq_s8(v41, v41, 8uLL).u32[0];
  *((_QWORD *)v141 + 2) = v42;
  *(_QWORD *)&v141[8 * v40 + 32] = v43;
  v44 = *((_QWORD *)v141 + 3);
  v45 = v38 + 3;
  if ((uint64_t)(v38 + 3) > (uint64_t)(v44 >> 1))
  {
    v139 = v43;
    v117 = sub_1B1C64878(v44 > 1, v38 + 3, 1, v141);
    v43 = v139;
    v41 = a32;
    v141 = v117;
  }
  *((_QWORD *)v141 + 2) = v45;
  *(_QWORD *)&v141[8 * v42 + 32] = v41.i64[0];
  v46 = *((_QWORD *)v141 + 3);
  if ((uint64_t)(v38 + 4) > (uint64_t)(v46 >> 1))
  {
    v140 = v43;
    v118 = sub_1B1C64878(v46 > 1, v38 + 4, 1, v141);
    v43 = v140;
    v41.i32[2] = a32.i32[2];
    v141 = v118;
  }
  v47 = *(float *)&v41.i32[2];
  v48 = v141 + 32;
  *((_QWORD *)v141 + 2) = v38 + 4;
  *(_QWORD *)&v141[8 * v45 + 32] = v43;
  v49 = sub_1B1C636E0(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v51 = *((_QWORD *)v49 + 2);
  v50 = *((_QWORD *)v49 + 3);
  v52 = v50 >> 1;
  v53 = v51 + 1;
  if (v50 >> 1 <= v51)
  {
    v49 = sub_1B1C636E0(v50 > 1, v51 + 1, 1, v49);
    v50 = *((_QWORD *)v49 + 3);
    v52 = v50 >> 1;
  }
  v54 = 0.5;
  v55 = a31;
  v56 = vmulq_f32(a31, (float32x4_t)xmmword_1B2244F80);
  v57 = (int32x4_t)vnegq_f32(v56);
  v58 = (int8x16_t)vtrn2q_s32((int32x4_t)v56, vtrn1q_s32((int32x4_t)v56, v57));
  v59 = (float32x4_t)vextq_s8(v58, v58, 8uLL);
  v60 = 0uLL;
  v61 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v57, 8uLL), (float32x4_t)0);
  v63 = (float32x4_t)vrev64q_s32((int32x4_t)v56);
  v63.i32[0] = v57.i32[1];
  v62 = vmlaq_f32(v61, (float32x4_t)0, v59);
  v63.i32[3] = v57.i32[2];
  v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a31.f32, 0);
  v65 = vmlaq_n_f32(v62, v63, v47 * 0.5);
  v66 = (int32x4_t)vnegq_f32(v65);
  v67 = (int8x16_t)vtrn2q_s32((int32x4_t)v65, vtrn1q_s32((int32x4_t)v65, v66));
  v68 = (float32x4_t)vdupq_laneq_s32((int32x4_t)a31, 2);
  v69 = (float32x4_t)vrev64q_s32((int32x4_t)v65);
  v69.i32[0] = v66.i32[1];
  v69.i32[3] = v66.i32[2];
  v70 = vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v65, a31, 3), v69, a31, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v65, (int8x16_t)v66, 8uLL), *(float32x2_t *)a31.f32, 1), (float32x4_t)vextq_s8(v67, v67, 8uLL), a31.f32[0])), *(float32x4_t *)(v34 - 192));
  *((_QWORD *)v49 + 2) = v53;
  *(float32x4_t *)&v49[16 * v51 + 32] = v70;
  v71 = v51 + 2;
  v72 = *(float *)a32.i32;
  v137 = v68;
  v138 = v64;
  if (v52 < (uint64_t)(v51 + 2))
  {
    v130 = v59;
    v133 = v61;
    v125 = v62;
    v127 = v63;
    v119 = sub_1B1C636E0(v50 > 1, v51 + 2, 1, v49);
    v60 = 0uLL;
    v62 = v125;
    v63 = v127;
    v59 = v130;
    v61 = v133;
    v68 = v137;
    v64 = v138;
    v55 = a31;
    v72 = *(float *)a32.i32;
    v54 = 0.5;
    v49 = v119;
  }
  v73 = vmlaq_f32(vmlaq_n_f32(v61, v59, v72 * v54), v60, v63);
  v74 = (int32x4_t)vnegq_f32(v73);
  v75 = (int8x16_t)vtrn2q_s32((int32x4_t)v73, vtrn1q_s32((int32x4_t)v73, v74));
  v76 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v73, (int8x16_t)v74, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v75, v75, 8uLL), v64);
  v77 = (float32x4_t)vrev64q_s32((int32x4_t)v73);
  v77.i32[0] = v74.i32[1];
  v77.i32[3] = v74.i32[2];
  v78 = vaddq_f32(vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v73, v55, 3), v77, v68), v76), *(float32x4_t *)(v34 - 192));
  *((_QWORD *)v49 + 2) = v71;
  *(float32x4_t *)&v49[16 * v53 + 32] = v78;
  v79 = *((_QWORD *)v49 + 3);
  v80 = v51 + 3;
  if ((uint64_t)(v51 + 3) > (uint64_t)(v79 >> 1))
  {
    v131 = v59;
    v134 = v61;
    v126 = v62;
    v128 = v63;
    v120 = sub_1B1C636E0(v79 > 1, v51 + 3, 1, v49);
    v62 = v126;
    v63 = v128;
    v59 = v131;
    v61 = v134;
    v68 = v137;
    v64 = v138;
    v55 = a31;
    v72 = *(float *)a32.i32;
    v49 = v120;
  }
  v81 = -0.5;
  v82 = vmlaq_n_f32(v62, v63, v47 * -0.5);
  v83 = (int32x4_t)vnegq_f32(v82);
  v84 = (int8x16_t)vtrn2q_s32((int32x4_t)v82, vtrn1q_s32((int32x4_t)v82, v83));
  v85 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v82, (int8x16_t)v83, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v84, v84, 8uLL), v64);
  v86 = (float32x4_t)vrev64q_s32((int32x4_t)v82);
  v86.i32[0] = v83.i32[1];
  v86.i32[3] = v83.i32[2];
  v87 = vaddq_f32(vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v82, v55, 3), v86, v68), v85), *(float32x4_t *)(v34 - 192));
  *((_QWORD *)v49 + 2) = v80;
  *(float32x4_t *)&v49[16 * v71 + 32] = v87;
  v88 = *((_QWORD *)v49 + 3);
  v136 = v33;
  if ((uint64_t)(v51 + 4) > (uint64_t)(v88 >> 1))
  {
    v132 = v59;
    v135 = v61;
    v129 = v63;
    v121 = sub_1B1C636E0(v88 > 1, v51 + 4, 1, v49);
    v63 = v129;
    v59 = v132;
    v61 = v135;
    v68 = v137;
    v64 = v138;
    v55 = a31;
    v72 = *(float *)a32.i32;
    v81 = -0.5;
    v49 = v121;
  }
  v89 = vmlaq_f32(vmlaq_n_f32(v61, v59, v72 * v81), (float32x4_t)0, v63);
  v90 = (int32x4_t)vnegq_f32(v89);
  v91 = (int8x16_t)vtrn2q_s32((int32x4_t)v89, vtrn1q_s32((int32x4_t)v89, v90));
  v92 = vmlaq_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v89, (int8x16_t)v90, 8uLL), *(float32x2_t *)v55.f32, 1), (float32x4_t)vextq_s8(v91, v91, 8uLL), v64);
  v93 = (float32x4_t)vrev64q_s32((int32x4_t)v89);
  v93.i32[0] = v90.i32[1];
  v93.i32[3] = v90.i32[2];
  v94 = vaddq_f32(vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v89, v55, 3), v93, v68), v92), *(float32x4_t *)(v34 - 192));
  *((_QWORD *)v49 + 2) = v51 + 4;
  *(float32x4_t *)&v49[16 * v80 + 32] = v94;
  v95 = sub_1B1C66198(0, 1, 1, MEMORY[0x1E0DEE9D8]);
  v97 = *((_QWORD *)v95 + 2);
  v96 = *((_QWORD *)v95 + 3);
  v98 = v96 >> 1;
  v99 = v97 + 1;
  if (v96 >> 1 <= v97)
  {
    v95 = sub_1B1C66198(v96 > 1, v97 + 1, 1, v95);
    v96 = *((_QWORD *)v95 + 3);
    v98 = v96 >> 1;
  }
  v100 = a31;
  v102 = v137;
  v101 = v138;
  *((_QWORD *)v95 + 2) = v99;
  *(float32x4_t *)&v95[16 * v97 + 32] = vaddq_f32(vmlaq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227C9B0, *(float32x2_t *)a31.f32, 1), (float32x4_t)xmmword_1B227C9C0, v138), vmlaq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B2244E20, a31, 3), (float32x4_t)xmmword_1B227C9D0, v137));
  v103 = v97 + 2;
  if (v98 < (uint64_t)(v97 + 2))
  {
    v122 = sub_1B1C66198(v96 > 1, v97 + 2, 1, v95);
    v102 = v137;
    v101 = v138;
    v100 = a31;
    v95 = v122;
  }
  *((_QWORD *)v95 + 2) = v103;
  *(float32x4_t *)&v95[16 * v99 + 32] = vaddq_f32(vmlaq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227C9E0, *(float32x2_t *)v100.f32, 1), (float32x4_t)xmmword_1B227C9F0, v101), vmlaq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B227CA00, v100, 3), (float32x4_t)xmmword_1B227CA10, v102));
  v104 = *((_QWORD *)v95 + 3);
  v105 = v97 + 3;
  if ((uint64_t)(v97 + 3) > (uint64_t)(v104 >> 1))
  {
    v123 = sub_1B1C66198(v104 > 1, v97 + 3, 1, v95);
    v102 = v137;
    v101 = v138;
    v100 = a31;
    v95 = v123;
  }
  *((_QWORD *)v95 + 2) = v105;
  *(float32x4_t *)&v95[16 * v103 + 32] = vaddq_f32(vmlaq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227CA20, *(float32x2_t *)v100.f32, 1), (float32x4_t)xmmword_1B227CA30, v101), vmlaq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B227CA40, v100, 3), (float32x4_t)xmmword_1B227CA50, v102));
  v106 = *((_QWORD *)v95 + 3);
  v107 = v97 + 4;
  if ((uint64_t)(v97 + 4) > (uint64_t)(v106 >> 1))
  {
    v124 = sub_1B1C66198(v106 > 1, v97 + 4, 1, v95);
    v102 = v137;
    v101 = v138;
    v100 = a31;
    v95 = v124;
  }
  v108 = 0;
  *((_QWORD *)v95 + 2) = v107;
  *(float32x4_t *)&v95[16 * v105 + 32] = vaddq_f32(vmlaq_f32(vmulq_lane_f32((float32x4_t)xmmword_1B227CA60, *(float32x2_t *)v100.f32, 1), (float32x4_t)xmmword_1B227CA70, v101), vmlaq_f32(vmulq_laneq_f32((float32x4_t)xmmword_1B227CA80, v100, 3), (float32x4_t)xmmword_1B227CA90, v102));
  do
  {
    v112 = *(_OWORD *)(v32 + 32);
    *(_OWORD *)(v34 - 176) = *(_OWORD *)(v32 + 16);
    *(_OWORD *)(v34 - 160) = v112;
    v113 = *(_OWORD *)(v32 + 64);
    *(_OWORD *)(v34 - 144) = *(_OWORD *)(v32 + 48);
    *(_OWORD *)(v34 - 128) = v113;
    v114 = *(__n128 **)(v34 - 176 + 8 * v108);
    if (!v114)
      goto LABEL_35;
    if (sub_1B21A3DD8(*(float **)(v34 - 176 + 8 * v108), COERCE_FLOAT(*(_QWORD *)&v48[8 * v108]), COERCE_FLOAT(HIDWORD(*(_QWORD *)&v48[8 * v108])), v35))
    {
      sub_1B21A3DDC(v114, *(double *)&v48[8 * v108], COERCE_FLOAT(HIDWORD(*(_QWORD *)&v48[8 * v108])), v35);
    }
    v109 = v108 + 1;
    v110 = 16 * v108;
    sub_1B21A3EA4(v114, *(__n128 *)&v49[v110 + 32]);
    v111 = sub_1B21A3EA8((float32x4_t *)v114, *(float32x4_t *)&v95[v110 + 32]);
    v108 = v109;
  }
  while (v109 != 4);
  if (!*(_QWORD *)(v32 + 16) || !*(_QWORD *)(v32 + 24) || !*(_QWORD *)(v32 + 32) || !*(_QWORD *)(v32 + 40))
  {
LABEL_35:
    sub_1B2229688();
    __break(1u);
    JUMPOUT(0x1B1B77FC0);
  }
  return ((uint64_t (*)(float32x4_t *))((char *)sub_1B1B75954 + 4 * word_1B227CC22[v136]))(v111);
}

void sub_1B1B75954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21A3DF8(v2, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 1, v0, 3, 0);
  sub_1B21A3DF8(v2, 3, 1, v3, 1, 0);
  sub_1B21A3DF8(v3, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v3, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v3, 1, 1, v2, 3, 0);
  sub_1B21A3DF8(v3, 3, 1, v1, 1, 0);
  sub_1B21A3DF8(v1, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, v3, 3, 0);
  sub_1B21A3DF8(v1, 3, 1, v0, 1, 0);
  sub_1B21A3DF8(v0, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 1, v1, 3, 0);
  sub_1B21A3DF8(v0, 3, 1, v2, 1, 0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  JUMPOUT(0x1B1B76D60);
}

uint64_t sub_1B1B75B24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1B21A3DF8(v5, 0, 1, v1, 2, 0);
  sub_1B21A3DF8(v5, 2, 1, v0, 0, 0);
  sub_1B21A3DF8(v5, 1, 1, v2, 3, 0);
  sub_1B21A3DF8(v5, 3, 1, v4, 1, 0);
  sub_1B21A3DF8(v4, 0, 1, v1, 3, 0);
  sub_1B21A3DF8(v4, 2, 1, v0, 3, 1);
  sub_1B21A3DF8(v4, 1, 1, v5, 3, 0);
  sub_1B21A3DF8(v4, 3, 1, v3, 1, 0);
  sub_1B21A3DF8(v3, 0, 1, v1, 0, 1);
  sub_1B21A3DF8(v3, 2, 1, v0, 2, 1);
  sub_1B21A3DF8(v3, 1, 1, v4, 3, 0);
  sub_1B21A3DF8(v3, 3, 1, v2, 1, 0);
  sub_1B21A3DF8(v2, 0, 1, v1, 1, 1);
  sub_1B21A3DF8(v2, 2, 1, v0, 1, 0);
  sub_1B21A3DF8(v2, 1, 1, v3, 3, 0);
  sub_1B21A3DF8(v2, 3, 1, v5, 1, 0);
  sub_1B21A3DF8(v1, 0, 1, v3, 0, 1);
  sub_1B21A3DF8(v1, 2, 1, v5, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, v2, 0, 1);
  sub_1B21A3DF8(v1, 3, 1, v4, 0, 0);
  sub_1B21A3DF8(v0, 0, 1, v5, 2, 0);
  sub_1B21A3DF8(v0, 2, 1, v3, 2, 1);
  sub_1B21A3DF8(v0, 1, 1, v2, 2, 0);
  sub_1B21A3DF8(v0, 3, 1, v4, 2, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1B1B75EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B21A3DF8(v2, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 3, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 1, 0, 0, 0);
  JUMPOUT(0x1B1B764B0);
}

void sub_1B1B75FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B21A3DF8(v2, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 0, 0, 0, 0);
  JUMPOUT(0x1B1B764B8);
}

void sub_1B1B7624C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B21A3DF8(v2, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 1, v1, 1, 0);
  sub_1B21A3DF8(v1, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, v2, 3, 0);
  sub_1B21A3DF8(v1, 3, 1, v0, 1, 0);
  sub_1B21A3DF8(v0, 0, 2, 0, 0, 0);
  JUMPOUT(0x1B1B76358);
}

void sub_1B1B76380()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_1B21A3DF8(v2, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 3, 2, 0, 0, 0);
  sub_1B21A3DF8(v0, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 2, 0, 0, 0);
  JUMPOUT(0x1B1B764A8);
}

void sub_1B1B764EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21A3DF8(v2, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 1, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 1, 0, 0, 0);
  sub_1B21A3DF8(v3, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v3, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v3, 1, 1, 0, 0, 0);
  sub_1B21A3DF8(v3, 3, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, 0, 0, 0);
  sub_1B21A3DF8(v1, 3, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 0, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 1, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 1, 0, 0, 0);
  JUMPOUT(0x1B1B76D44);
}

void sub_1B1B766A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21A3DF8(v2, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 0, 0, 0, 0);
  JUMPOUT(0x1B1B76D44);
}

void sub_1B1B76854()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21A3DF8(v2, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 1, v0, 3, 0);
  sub_1B21A3DF8(v2, 3, 1, v3, 1, 0);
  sub_1B21A3DF8(v3, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 1, 1, v2, 3, 0);
  sub_1B21A3DF8(v3, 3, 1, v1, 1, 0);
  sub_1B21A3DF8(v1, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, v3, 3, 0);
  sub_1B21A3DF8(v1, 3, 1, v0, 1, 0);
  sub_1B21A3DF8(v0, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 1, v1, 3, 0);
  JUMPOUT(0x1B1B76D44);
}

void sub_1B1B769D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21A3DF8(v2, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 1, v0, 3, 0);
  sub_1B21A3DF8(v2, 3, 1, v3, 1, 0);
  sub_1B21A3DF8(v3, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v3, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v3, 1, 1, v2, 3, 0);
  sub_1B21A3DF8(v3, 3, 1, v1, 1, 0);
  sub_1B21A3DF8(v1, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 1, v3, 3, 0);
  sub_1B21A3DF8(v1, 3, 1, v0, 1, 0);
  sub_1B21A3DF8(v0, 0, 2, 0, 0, 0);
  JUMPOUT(0x1B1B76B48);
}

void sub_1B1B76B8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_1B21A3DF8(v2, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 2, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 2, 0, 0, 0);
  sub_1B21A3DF8(v3, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v3, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v3, 1, 2, 0, 0, 0);
  sub_1B21A3DF8(v3, 3, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 2, 0, 0, 0);
  sub_1B21A3DF8(v1, 3, 2, 0, 0, 0);
  sub_1B21A3DF8(v0, 0, 2, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 2, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 2, 0, 0, 0);
  JUMPOUT(0x1B1B76D3CLL);
}

void sub_1B1B76D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1B21A3DF8(v5, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v5, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v5, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v5, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v4, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v4, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v4, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v4, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v3, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v2, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 1, 0, 0, 0, 0);
  sub_1B21A3DF8(v1, 3, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 0, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 2, 0, 0, 0, 0);
  sub_1B21A3DF8(v0, 1, 0, 0, 0, 0);
  JUMPOUT(0x1B1B77548);
}

uint64_t sub_1B1B78080(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B780B8 + 4 * byte_1B227CC30[a1]))(0x766C6F5370657473, 0xEA00000000007265);
}

uint64_t sub_1B1B780B8()
{
  return 0x6150746365766461;
}

uint64_t sub_1B1B780DC()
{
  return 0x7075746573;
}

uint64_t sub_1B1B780F0()
{
  return 0x726564726F62;
}

uint64_t sub_1B1B78104()
{
  return 0x636E65756C666E69;
}

uint64_t sub_1B1B78124()
{
  return 0x70537265766C6F73;
}

uint64_t sub_1B1B78144()
{
  return 0x66666F6C6C6166;
}

uint64_t sub_1B1B7815C()
{
  return 0x746E65747865;
}

uint64_t sub_1B1B78170()
{
  return 0x657A69536C6C6563;
}

uint64_t sub_1B1B78188()
{
  return 0x7469736F63736976;
}

uint64_t sub_1B1B781B4()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B1B781D8()
{
  return 0x64697247776F6873;
}

uint64_t sub_1B1B781F8()
{
  return 0x6F6C6556776F6873;
}

uint64_t sub_1B1B7821C()
{
  return 0x736E6544776F6873;
}

unint64_t sub_1B1B78240()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1B7825C()
{
  return 0x49797469736E6564;
}

uint64_t sub_1B1B78280(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1B782B8 + 4 * byte_1B227CC41[a1]))(0x766C6F5370657473, 0xEA00000000007265);
}

uint64_t sub_1B1B782B8()
{
  return 0x6150746365766461;
}

uint64_t sub_1B1B782DC()
{
  return 0x7075746573;
}

uint64_t sub_1B1B782F0()
{
  return 0x726564726F62;
}

uint64_t sub_1B1B78304()
{
  return 0x636E65756C666E69;
}

uint64_t sub_1B1B78324()
{
  return 0x70537265766C6F73;
}

uint64_t sub_1B1B78344()
{
  return 0x66666F6C6C6166;
}

uint64_t sub_1B1B7835C()
{
  return 0x746E65747865;
}

uint64_t sub_1B1B78370()
{
  return 0x657A69536C6C6563;
}

uint64_t sub_1B1B78388()
{
  return 0x7469736F63736976;
}

uint64_t sub_1B1B783B4()
{
  return 0x797469636F6C6576;
}

uint64_t sub_1B1B783D8()
{
  return 0x64697247776F6873;
}

uint64_t sub_1B1B783F8()
{
  return 0x6F6C6556776F6873;
}

uint64_t sub_1B1B7841C()
{
  return 0x736E6544776F6873;
}

unint64_t sub_1B1B78440()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1B7845C()
{
  return 0x49797469736E6564;
}

uint64_t sub_1B1B78480(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = sub_1B1B78280(*a1);
  v5 = v4;
  if (v3 == sub_1B1B78280(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1B78508()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1B78080(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B78568()
{
  unsigned __int8 *v0;

  sub_1B1B78080(*v0);
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1B785A8()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  sub_1B222A06C();
  sub_1B1B78080(v1);
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1B78604@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B7A0A4();
  *a1 = result;
  return result;
}

uint64_t sub_1B1B78630@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_1B1B78080(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B1B78658()
{
  unsigned __int8 *v0;

  return sub_1B1B78280(*v0);
}

uint64_t sub_1B1B78660@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1B7A0A4();
  *a1 = result;
  return result;
}

void sub_1B1B78684(_BYTE *a1@<X8>)
{
  *a1 = 17;
}

uint64_t sub_1B1B78690()
{
  sub_1B1B7CCE4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1B786B8()
{
  sub_1B1B7CCE4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1B786E0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  __int128 v14;
  char v15;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF5B220, (uint64_t (*)(void))sub_1B1B7CCE4, (uint64_t)&type metadata for ParticleFluidSolver2DSolver.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v14 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B7CCE4();
  sub_1B222A180();
  LOBYTE(v14) = 0;
  sub_1B222991C();
  if (!v2)
  {
    LOBYTE(v14) = 1;
    sub_1B222991C();
    LOBYTE(v14) = *(_BYTE *)(v3 + 10);
    v15 = 2;
    sub_1B1A71278();
    sub_1B2229958();
    LOBYTE(v14) = *(_BYTE *)(v3 + 11);
    v15 = 3;
    sub_1B1A711DC();
    sub_1B2229958();
    LOBYTE(v14) = 4;
    sub_1B2229934();
    LOBYTE(v14) = 5;
    sub_1B2229934();
    LOBYTE(v14) = 6;
    sub_1B2229934();
    v14 = *(_OWORD *)(v3 + 32);
    v15 = 7;
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
    sub_1B2229958();
    LOBYTE(v14) = 8;
    sub_1B2229934();
    LOBYTE(v14) = 9;
    sub_1B2229934();
    LOBYTE(v14) = 10;
    sub_1B2229934();
    LOBYTE(v14) = 11;
    sub_1B2229934();
    LOBYTE(v14) = 12;
    sub_1B222991C();
    LOBYTE(v14) = 13;
    sub_1B222991C();
    LOBYTE(v14) = 14;
    sub_1B222991C();
    v11 = *(_BYTE *)(v3 + 72);
    LOBYTE(v14) = 15;
    v15 = v11;
    sub_1B22298EC();
    v12 = *(_BYTE *)(v3 + 80);
    LOBYTE(v14) = 16;
    v15 = v12;
    sub_1B22298EC();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1B78B0C()
{
  return type metadata accessor for ParticleFluidSolver2DSolverSystem();
}

double sub_1B1B78B28@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[5];
  char v8;

  sub_1B1B7AA8C(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_BYTE *)(a2 + 80) = v8;
    result = *(double *)v7;
    v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B1B78B78(_QWORD *a1)
{
  return sub_1B1B786E0(a1);
}

double sub_1B1B78B8C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 65793;
  __asm { FMOV            V0.2S, #1.0 }
  *(_QWORD *)(a1 + 12) = _D0;
  *(_DWORD *)(a1 + 20) = 0;
  result = 33554440.2;
  *(_OWORD *)(a1 + 32) = xmmword_1B227C980;
  *(_OWORD *)(a1 + 48) = xmmword_1B2244D70;
  *(_WORD *)(a1 + 64) = 1;
  *(_BYTE *)(a1 + 66) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 76) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  return result;
}

uint64_t sub_1B1B78BDC()
{
  uint64_t v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  _OWORD v9[2];
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v23 = qword_1ED4D09F8;
  v24 = 0;
  v25 = 2;
  v26 = 0;
  v27 = 2;
  v28 = 0;
  swift_retain();
  sub_1B1B6F02C((uint64_t)v5);
  swift_release();
  v1 = v5[1];
  *(_OWORD *)(v0 + 16) = v5[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v6;
  v17 = qword_1ED4D09F8;
  v18 = 0;
  v19 = 2;
  v20 = 0;
  v21 = 2;
  v22 = 0;
  swift_retain();
  sub_1B19EF388((uint64_t)v7);
  swift_release();
  v2 = v7[1];
  *(_OWORD *)(v0 + 56) = v7[0];
  *(_OWORD *)(v0 + 72) = v2;
  *(_QWORD *)(v0 + 88) = v8;
  v11 = qword_1ED4D09F8;
  v12 = 0;
  v13 = 2;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  swift_retain();
  sub_1B19EF58C((uint64_t)v9);
  swift_release();
  v3 = v9[1];
  *(_OWORD *)(v0 + 96) = v9[0];
  *(_OWORD *)(v0 + 112) = v3;
  *(_QWORD *)(v0 + 128) = v10;
  return v0;
}

uint64_t sub_1B1B78D24(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *a1;
  swift_retain();
  sub_1B1B72B30((uint64_t)&v17);
  v3 = (_QWORD *)a1[1];
  v16 = v2;
  sub_1B1D15764(v3, (uint64_t)&v19);
  sub_1B19F66A0((uint64_t)&v19, (uint64_t)&v20, qword_1ED4B8BB0);
  v4 = v17;
  if (v17 || (sub_1B1FD662C((uint64_t)v3, v16, (uint64_t)&v17), (v4 = v17) != 0))
  {
    if (*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8) != 1
      || *(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 16) != 0)
    {
      v6 = v18;
      swift_retain();
      sub_1B1B73D68(v6);
      __asm { BR              X9 }
    }
    v7 = v4[2];
    swift_retain();
    sub_1B21A3DE8(v7);
    sub_1B21A3DEC(v7);
    v8 = v4[3];
    sub_1B21A3DE8(v8);
    sub_1B21A3DEC(v8);
    v9 = v4[4];
    sub_1B21A3DE8(v9);
    sub_1B21A3DEC(v9);
    v10 = v4[5];
    sub_1B21A3DE8(v10);
    sub_1B21A3DEC(v10);
    v11 = v4[6];
    sub_1B21A3DE8(v11);
    sub_1B21A3DEC(v11);
    v12 = v4[7];
    sub_1B21A3DE8(v12);
    sub_1B21A3DEC(v12);
    v13 = v4[8];
    sub_1B21A3DE8(v13);
    sub_1B21A3DEC(v13);
    v14 = v4[9];
    sub_1B21A3DE8(v14);
    sub_1B21A3DEC(v14);
    swift_release();
  }
  swift_release();
  return swift_release();
}

uint64_t sub_1B1B79740(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  __int16 v7;
  int v8;
  char v9;
  char v10;
  char v11;
  int v12;
  char v13;
  int v14;
  char v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;

  type metadata accessor for ParticleFluidSolver2DSolverData();
  v4 = swift_allocObject();
  sub_1B1B73C14();
  swift_release();
  *(_QWORD *)a1 = v4;
  v5 = *(_BYTE *)(a1 + 8);
  v6 = *(_BYTE *)(a1 + 9);
  v7 = *(_WORD *)(a1 + 10);
  v8 = *(_DWORD *)(a1 + 20);
  v9 = *(_BYTE *)(a1 + 64);
  v10 = *(_BYTE *)(a1 + 65);
  v11 = *(_BYTE *)(a1 + 66);
  v12 = *(_DWORD *)(a1 + 68);
  v13 = *(_BYTE *)(a1 + 72);
  v14 = *(_DWORD *)(a1 + 76);
  v15 = *(_BYTE *)(a1 + 80);
  v16 = *(_QWORD *)(a1 + 12);
  v17 = *(_OWORD *)(a1 + 32);
  v18 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)a2 = v4;
  *(_BYTE *)(a2 + 8) = v5;
  *(_BYTE *)(a2 + 9) = v6;
  *(_WORD *)(a2 + 10) = v7;
  *(_QWORD *)(a2 + 12) = v16;
  *(_DWORD *)(a2 + 20) = v8;
  *(_OWORD *)(a2 + 32) = v17;
  *(_OWORD *)(a2 + 48) = v18;
  *(_BYTE *)(a2 + 64) = v9;
  *(_BYTE *)(a2 + 65) = v10;
  *(_BYTE *)(a2 + 66) = v11;
  *(_DWORD *)(a2 + 68) = v12;
  *(_BYTE *)(a2 + 72) = v13;
  *(_DWORD *)(a2 + 76) = v14;
  *(_BYTE *)(a2 + 80) = v15;
  swift_retain();
  return swift_release();
}

uint64_t sub_1B1B79814(uint64_t result, uint64_t a2, uint64_t a3, _OWORD *a4, float a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  _OWORD v16[4];
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v9 = a2 * result;
  if (a2 * result < a3)
  {
    v17 = v8;
    v18 = v7;
    v19 = v5;
    v20 = v6;
    if (a2 + a2 * result >= a3)
      v10 = a3;
    else
      v10 = a2 + a2 * result;
    if (v9 != v10)
    {
      do
      {
        v13 = v9 + 1;
        v14 = a4[2];
        v16[0] = a4[1];
        v16[1] = v14;
        v15 = a4[4];
        v16[2] = a4[3];
        v16[3] = v15;
        result = sub_1B21A3DE4(*((_QWORD *)v16 + v9), 0, 0, 0, 0, 0, a5);
        v9 = v13;
      }
      while (v10 != v13);
    }
  }
  return result;
}

uint64_t *sub_1B1B798B0(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  _QWORD *v39;
  uint64_t v40[8];
  _OWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _BYTE v50[40];
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[5];
  char v54;
  _OWORD v55[2];
  uint64_t v56;
  _OWORD v57[5];
  char v58;
  _OWORD v59[2];
  uint64_t v60;

  v3 = *(_OWORD *)(v1 + 72);
  v59[0] = *(_OWORD *)(v1 + 56);
  v59[1] = v3;
  v60 = *(_QWORD *)(v1 + 88);
  sub_1B1E8FCE4(a1, (uint64_t)v59, 0x200000000, v40);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v41[0])
  {
    if (v47 >= 1)
    {
      v33 = v44;
      if (v44)
      {
        v5 = v46[4];
        v38 = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v48[0] = v41[0];
        v48[1] = v41[1];
        v49 = v42;
        v31 = (uint64_t)(v46 + 6);
        v32 = v43;
        v28 = v1 + 96;
        v39 = v46;
        v30 = v46 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v6 = 0;
        v7 = 0;
        v29 = v5;
        while (1)
        {
          v36 = v7;
          v37 = v6;
          v8 = (unsigned int *)(v32 + 48 * v6);
          v9 = (uint64_t *)*((_QWORD *)v8 + 2);
          v10 = *((_QWORD *)v8 + 3);
          v12 = *((_QWORD *)v8 + 4);
          v11 = *((_QWORD *)v8 + 5);
          v34 = v8[1];
          v35 = *v8;
          if (v38)
          {
            v13 = *(os_unfair_lock_s **)(v11 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v13);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v5);
          sub_1B19F66A0(v31, (uint64_t)v50, &qword_1ED4B7FB0);
          v14 = v39[4];
          v15 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v39[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
          v39[7] = v15;
          v30[1] = 0;
          v30[2] = 0;
          *v30 = 0;
          swift_release();
          v16 = sub_1B1A12038((uint64_t)&type metadata for ParticleFluidSolver2DSolver, (uint64_t)&off_1E63B31F8, v9, v10, v12, (uint64_t)v39);
          sub_1B1A12038((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00, v9, v10, v12, (uint64_t)v39);
          if (v9)
          {
            if (!v12)
              goto LABEL_15;
            v5 = v29;
            v17 = *(_OWORD *)(v28 + 16);
            v51[0] = *(_OWORD *)v28;
            v51[1] = v17;
            v52 = *(_QWORD *)(v28 + 32);
            v7 = v36;
            v18 = v37;
            do
            {
              v19 = *(_OWORD *)(v16 + 48);
              v53[2] = *(_OWORD *)(v16 + 32);
              v53[3] = v19;
              v53[4] = *(_OWORD *)(v16 + 64);
              v54 = *(_BYTE *)(v16 + 80);
              v20 = *(_OWORD *)v16;
              v21 = *(_OWORD *)(v16 + 16);
              v16 += 96;
              v53[0] = v20;
              v53[1] = v21;
              sub_1B1B7B320((uint64_t)v51, a1, (uint64_t)v53);
              --v12;
            }
            while (v12);
          }
          else
          {
            if ((_DWORD)v35 == (_DWORD)v34)
            {
LABEL_15:
              v5 = v29;
              v7 = v36;
              v18 = v37;
              goto LABEL_18;
            }
            v5 = v29;
            v22 = *(_OWORD *)(v28 + 16);
            v55[0] = *(_OWORD *)v28;
            v55[1] = v22;
            v56 = *(_QWORD *)(v28 + 32);
            v23 = v34 - v35;
            v24 = v16 + 96 * v35;
            v7 = v36;
            v18 = v37;
            do
            {
              v25 = *(_OWORD *)(v24 + 48);
              v57[2] = *(_OWORD *)(v24 + 32);
              v57[3] = v25;
              v57[4] = *(_OWORD *)(v24 + 64);
              v58 = *(_BYTE *)(v24 + 80);
              v26 = *(_OWORD *)v24;
              v27 = *(_OWORD *)(v24 + 16);
              v24 += 96;
              v57[0] = v26;
              v57[1] = v27;
              sub_1B1B7B320((uint64_t)v55, a1, (uint64_t)v57);
              --v23;
            }
            while (v23);
          }
LABEL_18:
          sub_1B1F05D48(v39, (unsigned __int16 **)v48, (uint64_t)v50);
          sub_1B1F03804((char *)v11);
          ecs_stack_allocator_pop_snapshot(v5);
          if ((v38 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 376));
          }
          swift_release();
          v6 = v18 + 1;
          if (v6 == v33)
          {
            sub_1B19ED748(v40);
            return sub_1B19ED748(v40);
          }
        }
      }
    }
    return sub_1B19ED748(v40);
  }
  return result;
}

uint64_t sub_1B1B79C48()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleFluidSolver2DSolverSystem()
{
  return objc_opt_self();
}

uint64_t destroy for Query()
{
  return swift_release();
}

uint64_t initializeWithCopy for ParticleFluidSolver2DSolver(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  int v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_WORD *)(a1 + 65) = *(_WORD *)(a2 + 65);
  v4 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v4;
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ParticleFluidSolver2DSolver(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  v4 = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 68) = v4;
  v5 = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_DWORD *)(a1 + 76) = v5;
  return a1;
}

__n128 initializeWithTake for ParticleFluidSolver2DSolver(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for ParticleFluidSolver2DSolver(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_release();
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  *(_BYTE *)(a1 + 66) = *(_BYTE *)(a2 + 66);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleFluidSolver2DSolver(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 81))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFluidSolver2DSolver(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 81) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFluidSolver2DSolver()
{
  return &type metadata for ParticleFluidSolver2DSolver;
}

__n128 initializeWithCopy for ParticleFluidSolver2DEmitter(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 10) = *(_OWORD *)(a2 + 10);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleFluidSolver2DEmitter(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[26])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFluidSolver2DEmitter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 26) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleFluidSolver2DEmitter()
{
  return &type metadata for ParticleFluidSolver2DEmitter;
}

uint64_t sub_1B1B7A05C()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1B78BDC();
  return v0;
}

const char *sub_1B1B7A090()
{
  return "ParticleFluidSolver2DSolver";
}

uint64_t sub_1B1B7A0A4()
{
  unint64_t v0;

  v0 = sub_1B2229F64();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11)
    return 17;
  else
    return v0;
}

uint64_t sub_1B1B7A0F4()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 7)
    return 7;
  else
    return v0;
}

uint64_t sub_1B1B7A13C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  uint64_t result;
  _QWORD v24[2];
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;

  v24[0] = a2;
  sub_1B19F8E54(0, &qword_1EEF5B228, (uint64_t (*)(void))sub_1B1B7CD28, (uint64_t)&type metadata for ParticleFluidSolver2DEmitter.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v24 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1B7CD28();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  v11 = v24[0];
  v31 = 0;
  v12 = v5;
  v13 = sub_1B22297D8();
  v30 = 1;
  sub_1B1A08878();
  sub_1B2229814();
  v14 = v24[1];
  v29 = 2;
  sub_1B22297F0();
  v16 = v15;
  v28 = 3;
  sub_1B22297F0();
  v18 = v17;
  v27 = 4;
  sub_1B22297F0();
  v20 = v19;
  v26 = 5;
  v21 = sub_1B22297D8();
  v25 = 6;
  v22 = sub_1B22297D8();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v12);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_BYTE *)v11 = v13 & 1;
  *(_QWORD *)(v11 + 4) = v14;
  *(_DWORD *)(v11 + 12) = v16;
  *(_DWORD *)(v11 + 16) = v18;
  *(_DWORD *)(v11 + 20) = v20;
  *(_BYTE *)(v11 + 24) = v21 & 1;
  *(_BYTE *)(v11 + 25) = v22 & 1;
  return result;
}

uint64_t *sub_1B1B7A3C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  uint64_t v6;
  BOOL v7;
  unsigned int *v8;
  int v9;
  unint64_t v10;
  uint64_t inited;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_unfair_lock_s *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE v30[40];
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _OWORD v42[2];
  uint64_t v43;
  _OWORD v44[2];
  uint64_t v45;
  _BYTE v46[56];

  v2 = *(_QWORD *)a1;
  swift_retain();
  v4 = *(_DWORD *)(a1 + 8);
  v3 = *(unsigned int *)(a1 + 12);
  swift_retain();
  v5 = v4 == -1 && (_DWORD)v3 == 0;
  if (v5
    || (v4 & 0x80000000) != 0
    || *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) <= (int)v4
    || ((v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), (_DWORD)v3 != -1)
      ? (v7 = *(_DWORD *)(v6 + 12 * (int)v4 + 8) == (_DWORD)v3)
      : (v7 = 1),
        !v7))
  {
    swift_release();
    goto LABEL_17;
  }
  v8 = (unsigned int *)(v6 + 12 * (int)v4);
  sub_1B1D1C8D0(*(_QWORD *)(*(_QWORD *)(v2 + 136) + 8 * (int)*v8 + 32), *v8 | ((unint64_t)*((unsigned __int16 *)v8 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v8 + 2) << 32), 28, v2, (uint64_t)&v34);
  swift_release();
  if (v34 == 2)
  {
LABEL_17:
    v9 = 0;
    LODWORD(v10) = -1;
    goto LABEL_18;
  }
  if ((v34 & 1) == 0 || (WORD4(v35) & 0x101) == 0)
    return (uint64_t *)swift_release();
  v9 = DWORD2(v34);
  v10 = DWORD1(v34);
LABEL_18:
  if ((_DWORD)v10 == -1 && !v9)
  {
    sub_1B1D15764((_QWORD *)(v4 | (unint64_t)(v3 << 32)), (uint64_t)&v33);
    sub_1B19F66A0((uint64_t)&v33, (uint64_t)&v34, qword_1ED4B8BB0);
    sub_1B1C2F99C((float32x4_t)xmmword_1B2244F70);
    return (uint64_t *)swift_release();
  }
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  swift_retain();
  sub_1B1A156C8(1, 1, 1, (uint64_t)v30);
  swift_release();
  sub_1B1B7AA28();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 56) = &type metadata for EmitterReference;
  *(_QWORD *)(inited + 64) = &off_1E6387218;
  *(_DWORD *)(inited + 32) = v10;
  *(_DWORD *)(inited + 36) = v9;
  sub_1B1E6892C(v31);
  swift_setDeallocating();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  swift_arrayDestroy();
  sub_1B19ED720((uint64_t)v30);
  v44[0] = v31[0];
  v44[1] = v31[1];
  v45 = v32;
  sub_1B1E8FCE4(v2, (uint64_t)v44, 0x200000000, &v33);
  sub_1B19F66A0((uint64_t)&v33, (uint64_t)&v34, (unint64_t *)&qword_1ED4B7DE0);
  if (!(_QWORD)v34)
  {
    sub_1B19ED720((uint64_t)v31);
    return (uint64_t *)swift_release();
  }
  if (v41 > 0 && (v12 = v38) != 0)
  {
    v13 = v40;
    v29 = v40[4];
    v14 = *(unsigned __int8 *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v42[0] = v34;
    v42[1] = v35;
    v15 = v37;
    v43 = v36;
    v25 = v40 + 8;
    v26 = (uint64_t)(v40 + 6);
    swift_retain();
    swift_retain();
    swift_retain();
    v16 = (uint64_t *)(v15 + 40);
    v27 = v14;
    do
    {
      v17 = (uint64_t *)*(v16 - 3);
      v18 = *(v16 - 2);
      v19 = *(v16 - 1);
      v20 = *v16;
      v28 = v12;
      if ((v14 & 1) != 0)
      {
        v21 = *(os_unfair_lock_s **)(v20 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v21);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v29);
      sub_1B19F66A0(v26, (uint64_t)v46, &qword_1ED4B7FB0);
      v22 = v13[4];
      v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v20 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v13[6] = ecs_stack_allocator_allocate(v22, 48 * v23, 8);
      v13[7] = v23;
      v25[1] = 0;
      v25[2] = 0;
      *v25 = 0;
      swift_release();
      sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v17, v18, v19, (uint64_t)v13);
      sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, v17, v18, v19, (uint64_t)v13);
      sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v17, v18, v19, (uint64_t)v13);
      sub_1B1F05D48(v13, (unsigned __int16 **)v42, (uint64_t)v46);
      sub_1B1F03804((char *)v20);
      ecs_stack_allocator_pop_snapshot(v29);
      LOBYTE(v14) = v27;
      if (v27)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 376));
      }
      swift_release();
      v16 += 6;
      v12 = v28 - 1;
    }
    while (v28 != 1);
    sub_1B19ED720((uint64_t)v31);
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B19ED720((uint64_t)v31);
  }
  swift_release();
  sub_1B19ED748(&v33);
  return sub_1B19ED748(&v33);
}

void sub_1B1B7AA28()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BAD30)
  {
    sub_1B1A025A0(255, (unint64_t *)&qword_1ED4B89D0);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BAD30);
  }
}

uint64_t sub_1B1B7AA8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  int v16;
  int v17;
  uint64_t v18;
  float v19;
  int v20;
  int v21;
  uint64_t result;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  __int128 v42;
  _QWORD *v43;
  __int128 v44;
  char v45;
  unsigned __int8 v46;
  unsigned __int8 v47;
  __int16 v48;
  char v49;
  char v50;
  char v51;

  sub_1B19F8E54(0, &qword_1EEF5B210, (uint64_t (*)(void))sub_1B1B7CCE4, (uint64_t)&type metadata for ParticleFluidSolver2DSolver.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v37 - v9;
  v51 = 1;
  v50 = 1;
  v49 = 1;
  v48 = 0;
  v47 = 1;
  v46 = 1;
  v11 = a1[3];
  v43 = a1;
  sub_1B19FA070(a1, v11);
  sub_1B1B7CCE4();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
  v12 = v7;
  LOBYTE(v44) = 0;
  v13 = v6;
  v51 = sub_1B22297D8() & 1;
  LOBYTE(v44) = 1;
  v50 = sub_1B22297D8() & 1;
  v45 = 2;
  sub_1B1A71234();
  sub_1B2229814();
  v14 = v44;
  v45 = 3;
  sub_1B1A71198();
  sub_1B2229814();
  v15 = v44;
  LOBYTE(v44) = 4;
  sub_1B22297F0();
  v17 = v16;
  LOBYTE(v44) = 5;
  v18 = sub_1B222979C();
  if ((v18 & 0x100000000) != 0)
    v19 = 1.0;
  else
    v19 = *(float *)&v18;
  LOBYTE(v44) = 6;
  sub_1B22297F0();
  v21 = v20;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v45 = 7;
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
  sub_1B2229814();
  v42 = v44;
  LOBYTE(v44) = 8;
  sub_1B22297F0();
  v24 = v23;
  LOBYTE(v44) = 9;
  sub_1B22297F0();
  v26 = v25;
  LOBYTE(v44) = 10;
  sub_1B22297F0();
  v28 = v27;
  LOBYTE(v44) = 11;
  sub_1B22297F0();
  v30 = v29;
  LOBYTE(v44) = 12;
  v49 = sub_1B22297D8() & 1;
  LOBYTE(v44) = 13;
  HIBYTE(v48) = sub_1B22297D8() & 1;
  LOBYTE(v44) = 14;
  LOBYTE(v48) = sub_1B22297D8() & 1;
  v47 = 1;
  LOBYTE(v44) = 15;
  v41 = sub_1B222979C();
  if ((v41 & 0x100000000) != 0)
    v41 = 0;
  else
    v47 = 0;
  v46 = 1;
  LOBYTE(v44) = 16;
  v31 = sub_1B222979C();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v13);
  v32 = ((v31 & 0x100000000uLL) >> 32) & v46;
  if ((v31 & 0x100000000) != 0)
    v33 = 0;
  else
    v33 = v31;
  v34 = v51;
  v35 = v50;
  v36 = v49;
  v39 = HIBYTE(v48);
  v38 = v48;
  v40 = v47;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v43);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = v34;
  *(_BYTE *)(a2 + 9) = v35;
  *(_BYTE *)(a2 + 10) = v14;
  *(_BYTE *)(a2 + 11) = v15;
  *(_DWORD *)(a2 + 12) = v17;
  *(float *)(a2 + 16) = v19;
  *(_DWORD *)(a2 + 20) = v21;
  *(_OWORD *)(a2 + 32) = v42;
  *(_DWORD *)(a2 + 48) = v24;
  *(_DWORD *)(a2 + 52) = v26;
  *(_DWORD *)(a2 + 56) = v28;
  *(_DWORD *)(a2 + 60) = v30;
  *(_BYTE *)(a2 + 64) = v36;
  *(_BYTE *)(a2 + 65) = v39;
  *(_BYTE *)(a2 + 66) = v38;
  *(_DWORD *)(a2 + 68) = v41;
  *(_BYTE *)(a2 + 72) = v40;
  *(_DWORD *)(a2 + 76) = v33;
  *(_BYTE *)(a2 + 80) = v32 & 1;
  return result;
}

float32x4_t sub_1B1B7B01C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7, uint64_t *a8, float32x4_t result, __n128 a10, double a11, float32x4_t a12, __n128 a13)
{
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 *v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  __n128 *v32;
  float32x4_t *v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 *v45;
  float32x4_t *v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  uint64_t v51;
  uint64_t i;
  float32x4_t v54;
  float32x4_t v55;
  unsigned __int32 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  float32x4_t v60;
  unsigned __int32 v61;
  float32x4_t v62;
  float32x4_t *v63;
  float32x4_t v64;
  float32x4_t v65;
  __int32 v66;
  float32x4_t v67;
  __int32 v68;
  __int32 v69;
  unsigned __int32 v70;
  float v71;
  float32x4_t v72;
  unsigned __int32 v73;
  float32x4_t v74;
  unsigned __int32 v75;
  unsigned __int32 v76;
  unsigned __int32 v77;
  float32x4_t v78;
  __int32 v79;

  v17 = result.f32[0] / (float)a4;
  v71 = v17;
  switch(a4)
  {
    case 3:
      v27 = *(_QWORD *)(a1 + 48);
      v28 = *(_QWORD *)(a1 + 56);
      v29 = v28 - v27;
      if (v28 != v27)
      {
        v31 = 16 * v27;
        v32 = (__n128 *)(a3 + v31);
        v33 = (float32x4_t *)(a2 + v31);
        do
        {
          v34 = *v33;
          v34.i32[3] = a10.n128_i32[3];
          v73 = a10.n128_u32[3];
          *(double *)v35.i64 = sub_1B21A3EAC(a5, v34);
          v35.i32[3] = v78.i32[3];
          v78 = v35;
          v36 = *v33;
          v36.i32[3] = v68;
          *(double *)v37.i64 = sub_1B21A3EAC(a6, v36);
          v38 = v37;
          v38.i32[3] = v66;
          v65 = vaddq_f32(v78, v38);
          v39 = *v33++;
          v40 = v39;
          v40.i32[3] = v69;
          *(double *)result.i64 = sub_1B21A3EAC(a7, v40);
          a10 = (__n128)vmulq_n_f32(vaddq_f32(v65, result), v71);
          a10.n128_u32[3] = 0;
          *v32++ = a10;
          a10.n128_u32[3] = v73;
          result.i32[3] = v76;
          --v29;
        }
        while (v29);
      }
      break;
    case 2:
      v41 = *(_QWORD *)(a1 + 48);
      v42 = *(_QWORD *)(a1 + 56);
      v43 = v42 - v41;
      if (v42 != v41)
      {
        v44 = 16 * v41;
        v45 = (__n128 *)(a3 + v44);
        v46 = (float32x4_t *)(a2 + v44);
        do
        {
          v47 = *v46;
          v47.i32[3] = a10.n128_i32[3];
          v75 = a10.n128_u32[3];
          *(double *)v48.i64 = sub_1B21A3EAC(a5, v47);
          v67 = v48;
          v49 = *v46++;
          v50 = v49;
          v50.i32[3] = v69;
          *(double *)result.i64 = sub_1B21A3EAC(a6, v50);
          a10 = (__n128)vmulq_n_f32(vaddq_f32(v67, result), v71);
          a10.n128_u32[3] = 0;
          *v45++ = a10;
          a10.n128_u32[3] = v75;
          result.i32[3] = v78.i32[3];
          --v43;
        }
        while (v43);
      }
      break;
    case 1:
      v18 = *(_QWORD *)(a1 + 48);
      v19 = *(_QWORD *)(a1 + 56);
      v20 = v19 - v18;
      if (v19 != v18)
      {
        v21 = 16 * v18;
        v22 = (__n128 *)(a3 + v21);
        v23 = (float32x4_t *)(a2 + v21);
        do
        {
          v24 = *v23++;
          v25 = v24;
          v25.i32[3] = a10.n128_i32[3];
          v77 = a10.n128_u32[3];
          *(double *)v26.i64 = sub_1B21A3EAC(a5, v25);
          result = vmulq_n_f32(v26, v71);
          result.i32[3] = 0;
          *v22++ = (__n128)result;
          a10.n128_u32[3] = v77;
          --v20;
        }
        while (v20);
      }
      break;
    default:
      v51 = *(_QWORD *)(a1 + 48);
      for (i = *(_QWORD *)(a1 + 56); v51 != i; ++v51)
      {
        v56 = a12.u32[3];
        a12 = *(float32x4_t *)(a2 + 16 * v51);
        a12.i32[3] = v56;
        v57 = *a8;
        v58 = *(_QWORD *)(*a8 + 16);
        if (v58)
        {
          v70 = a13.n128_u32[3];
          v72 = a12;
          swift_bridgeObjectRetain();
          v59 = 0;
          v60 = 0uLL;
          v61 = v76;
          v62.i32[3] = v78.i32[3];
          do
          {
            v74 = v60;
            v76 = v61;
            v79 = v62.i32[3];
            v63 = *(float32x4_t **)(v57 + 8 * v59++ + 32);
            *(double *)v64.i64 = sub_1B21A3EAC(v63, v72);
            v62 = vaddq_f32(v74, v64);
            v61 = v76;
            v62.i32[3] = v79;
            v60 = v62;
          }
          while (v58 != v59);
          v78 = v62;
          swift_bridgeObjectRelease();
          v54 = v78;
          v17 = v71;
          a12.i32[3] = v72.i32[3];
          a13.n128_u32[3] = v70;
        }
        else
        {
          v54 = 0uLL;
        }
        result = vmulq_n_f32(v54, v17);
        result.i32[3] = a13.n128_i32[3];
        v55 = result;
        v55.i32[3] = 0;
        *(float32x4_t *)(a3 + 16 * v51) = v55;
      }
      break;
  }
  return result;
}

uint64_t sub_1B1B7B320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t result;
  _BYTE v6[8];
  uint64_t v7;

  sub_1B1B7C4F8(a3, (uint64_t)v6, a3);
  result = sub_1B1B7C4F8((uint64_t)v6, (uint64_t)&v7, v4);
  if (v7)
    __asm { BR              X9 }
  return result;
}

uint64_t sub_1B1B7C4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  sub_1B1B7C554(0, &qword_1EEF5B1F8, a3, (uint64_t (*)(uint64_t))type metadata accessor for ParticleFluidSolver2DSolverData, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1B1B7C554(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v8 = a4(a3);
    v9 = a5(a1, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1B1B7C5AC(uint64_t a1)
{
  swift_retain();
  return a1;
}

uint64_t sub_1B1B7C5D4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1B79814(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_OWORD **)(v1 + 32), *(float *)(v1 + 40));
}

uint64_t sub_1B1B7C5E4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1DBA928(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

void sub_1B1B7C5F0(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _OWORD *a7)
{
  uint64_t v7;
  uint64_t v8;
  int v12;
  int v13;
  uint64_t inited;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unsigned int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  float32x4_t v32;
  uint64_t v33;
  float v34;
  const float *v35;
  unsigned __int32 v36;
  __int32 v37;
  uint64_t v38;
  float v39;
  float v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v46;
  char v47;
  float32x4_t *v48;
  float32x4_t v49;
  float32x4_t v50;
  __int128 v51;
  float32x4_t v52;
  int32x4_t v53;
  float32x2_t v54;
  float32x2_t v55;
  float32x4_t v56;
  int32x4_t v57;
  float32x2_t v58;
  float32x2_t v59;
  float32x4_t v60;
  int32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  float v64;
  float v65;
  uint64_t v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v83;
  float32x4_t v84;
  __n128 v85;
  __n128 v86;
  __n128 v87;
  float32x4_t v88;
  __n128 v89;
  __n128 v90;
  _OWORD v91[4];
  _BYTE v92[40];
  _OWORD v93[2];
  uint64_t v94;
  _OWORD v95[4];
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  __int128 v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _OWORD v103[2];
  uint64_t v104;
  _OWORD v105[2];
  uint64_t v106;
  _BYTE v107[40];
  uint64_t v108;
  int v109;
  char v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  uint64_t v114;

  v8 = v7;
  if (*(_BYTE *)a4 == 1)
  {
    v12 = *(_DWORD *)(a4 + 4);
    v13 = *(_DWORD *)(a4 + 8);
    if (v12 == -1 && v13 == 0)
    {
      v46 = sub_1B1A11FDC((uint64_t)&type metadata for WorldTransform);
      if ((v47 & 1) != 0)
      {
        v51 = xmmword_1B2244E20;
        v52 = (float32x4_t)xmmword_1B2244D90;
        v49 = (float32x4_t)xmmword_1B2244DD0;
        v50 = (float32x4_t)xmmword_1B2244DB0;
      }
      else
      {
        v48 = (float32x4_t *)(v46 + (a3 << 6));
        v50 = *v48;
        v49 = v48[1];
        v52 = v48[2];
        v51 = (__int128)v48[3];
      }
      v53 = (int32x4_t)vmulq_f32(v50, v50);
      v53.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v53, 2), vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.i8, 1))).u32[0];
      v54 = vrsqrte_f32((float32x2_t)v53.u32[0]);
      v55 = vmul_f32(v54, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v54, v54)));
      v56 = vmulq_n_f32(v50, vmul_f32(v55, vrsqrts_f32((float32x2_t)v53.u32[0], vmul_f32(v55, v55))).f32[0]);
      v56.i32[3] = v50.i32[3];
      v57 = (int32x4_t)vmulq_f32(v49, v49);
      v57.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v57, 2), vadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v57.i8, 1))).u32[0];
      v58 = vrsqrte_f32((float32x2_t)v57.u32[0]);
      v59 = vmul_f32(v58, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(v58, v58)));
      v60 = vmulq_n_f32(v49, vmul_f32(v59, vrsqrts_f32((float32x2_t)v57.u32[0], vmul_f32(v59, v59))).f32[0]);
      v60.i32[3] = v49.i32[3];
      v96 = v56;
      v97 = v60;
      v61 = (int32x4_t)vmulq_f32(v52, v52);
      v61.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1))).u32[0];
      *(float32x2_t *)v60.f32 = vrsqrte_f32((float32x2_t)v61.u32[0]);
      *(float32x2_t *)v60.f32 = vmul_f32(*(float32x2_t *)v60.f32, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32)));
      v62 = vmulq_n_f32(v52, vmul_f32(*(float32x2_t *)v60.f32, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(*(float32x2_t *)v60.f32, *(float32x2_t *)v60.f32))).f32[0]);
      v62.i32[3] = v52.i32[3];
      v98 = v62;
      v99 = v51;
      sub_1B1C2F99C((float32x4_t)xmmword_1B2244F70);
      if (a6)
      {
        v63 = 0;
        v64 = *(float *)(a4 + 16);
        v87 = (__n128)vmlaq_f32(vmlaq_n_f32(vmulq_f32(v98, (float32x4_t)0), v97, *(float *)(a4 + 20)), (float32x4_t)0, v96);
        v90 = (__n128)v99;
        v65 = *(float *)(a4 + 12);
        do
        {
          v66 = v63 + 1;
          v67 = a7[2];
          v95[0] = a7[1];
          v95[1] = v67;
          v68 = a7[4];
          v95[2] = a7[3];
          v95[3] = v68;
          v69 = *((_QWORD *)v95 + v63);
          sub_1B21A3DF0(v69, 1, v90, v65, v87, a1);
          sub_1B21A3DF4(v69, 1, v90, v65, v64, a1);
          v63 = v66;
        }
        while (a6 != v66);
      }
    }
    else
    {
      if (qword_1ED4B7DB8 != -1)
        swift_once();
      v108 = qword_1ED4D09F8;
      v109 = 0;
      v110 = 2;
      v111 = 0;
      v112 = 2;
      v113 = 0;
      swift_retain();
      sub_1B1A156C8(1, 1, 1, (uint64_t)v92);
      swift_release();
      sub_1B1B7AA28();
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B226D240;
      *(_QWORD *)(inited + 56) = &type metadata for EmitterReference;
      *(_QWORD *)(inited + 64) = &off_1E6387218;
      *(_DWORD *)(inited + 32) = v12;
      *(_DWORD *)(inited + 36) = v13;
      sub_1B1E6892C(v93);
      swift_setDeallocating();
      sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
      swift_arrayDestroy();
      sub_1B19ED720((uint64_t)v92);
      v105[0] = v93[0];
      v105[1] = v93[1];
      v106 = v94;
      sub_1B1E8FCE4(a5, (uint64_t)v105, 0x200000000, v95);
      sub_1B19F66A0((uint64_t)v95, (uint64_t)&v96, (unint64_t *)&qword_1ED4B7DE0);
      if (v96.i64[0])
      {
        if (v102 > 0 && (v75 = *((_QWORD *)&v99 + 1)) != 0)
        {
          v17 = v101;
          v18 = v101[4];
          v81 = *(unsigned __int8 *)(v100 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v103[0] = v96;
          v103[1] = v97;
          v71 = v98.i64[1];
          v72 = (uint64_t)(v101 + 6);
          v104 = v98.i64[0];
          v70 = v101 + 8;
          swift_retain();
          swift_retain();
          swift_retain();
          v19 = 0;
          v73 = v18;
          v74 = v17;
          do
          {
            v20 = v17;
            v79 = v19;
            v80 = v8;
            v21 = (unsigned int *)(v71 + 48 * v19);
            v22 = *v21;
            v114 = v21[1];
            v23 = *((_QWORD *)v21 + 3);
            v77 = (uint64_t *)*((_QWORD *)v21 + 2);
            v24 = *((_QWORD *)v21 + 5);
            v83 = *((_QWORD *)v21 + 4);
            if (v81)
            {
              v25 = *(os_unfair_lock_s **)(v24 + 376);
              swift_retain();
              os_unfair_lock_lock(v25);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v18);
            sub_1B19F66A0(v72, (uint64_t)v107, &qword_1ED4B7FB0);
            v26 = v20[4];
            v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v24 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v20[6] = ecs_stack_allocator_allocate(v26, 48 * v27, 8);
            v20[7] = v27;
            v70[1] = 0;
            v70[2] = 0;
            *v70 = 0;
            swift_release();
            v28 = v77;
            v29 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v77, v23, v83, (uint64_t)v20);
            v76 = sub_1B1A12038((uint64_t)&type metadata for Scale1, (uint64_t)&off_1E63BC288, v77, v23, v83, (uint64_t)v20);
            v78 = v24;
            v30 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v28, v23, v83, (uint64_t)v20);
            if ((_DWORD)v22 == (_DWORD)v114)
            {
              v31 = v85;
              v32 = v88;
            }
            else
            {
              v33 = v30;
              v34 = *(float *)(a4 + 12);
              v35 = (const float *)(a4 + 20);
              v31 = (__n128)vld1q_dup_f32(v35);
              v84 = (float32x4_t)v31;
              v31.n128_u32[3] = v85.n128_u32[3];
              v32.i32[3] = v88.i32[3];
              do
              {
                v36 = v31.n128_u32[3];
                v31 = *(__n128 *)(v29 + 16 * v22);
                v31.n128_u32[3] = v36;
                v37 = v32.i32[3];
                v32 = vmulq_f32(v84, *(float32x4_t *)(v33 + 16 * v22));
                v32.i32[3] = v37;
                if (a6)
                {
                  v38 = 0;
                  v39 = v34 * *(float *)(v76 + 4 * v22);
                  v40 = *(float *)(a4 + 16);
                  v86 = v31;
                  v89 = (__n128)v32;
                  do
                  {
                    v41 = v38 + 1;
                    v42 = a7[2];
                    v91[0] = a7[1];
                    v91[1] = v42;
                    v43 = a7[4];
                    v91[2] = a7[3];
                    v91[3] = v43;
                    v44 = *((_QWORD *)v91 + v38);
                    sub_1B21A3DF0(v44, 1, v31, v39, v89, a1);
                    sub_1B21A3DF4(v44, 1, v86, v39, v40, a1);
                    v31 = v86;
                    v32 = (float32x4_t)v89;
                    v38 = v41;
                  }
                  while (a6 != v41);
                }
                ++v22;
              }
              while (v22 != v114);
            }
            v85 = v31;
            v88 = v32;
            v17 = v74;
            sub_1B1F05D48(v74, (unsigned __int16 **)v103, (uint64_t)v107);
            v8 = v80;
            sub_1B1F03804((char *)v78);
            v18 = v73;
            ecs_stack_allocator_pop_snapshot(v73);
            if ((v81 & 1) != 0)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v78 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v78 + 376));
            }
            swift_release();
            v19 = v79 + 1;
          }
          while (v79 + 1 != v75);
          sub_1B19ED720((uint64_t)v93);
          sub_1B19ED748((uint64_t *)v95);
        }
        else
        {
          sub_1B19ED720((uint64_t)v93);
        }
        sub_1B19ED748((uint64_t *)v95);
      }
      else
      {
        sub_1B19ED720((uint64_t)v93);
      }
    }
  }
}

unint64_t sub_1B1B7CCE4()
{
  unint64_t result;

  result = qword_1EEF5B218;
  if (!qword_1EEF5B218)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D3EC, &type metadata for ParticleFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B218);
  }
  return result;
}

unint64_t sub_1B1B7CD28()
{
  unint64_t result;

  result = qword_1EEF5B230;
  if (!qword_1EEF5B230)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D39C, &type metadata for ParticleFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B230);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGlobalFluidSolver2DSolver()
{
  return &type metadata for ParticleGlobalFluidSolver2DSolver;
}

ValueMetadata *type metadata accessor for ParticleGlobalFluidSolver2DEmitter()
{
  return &type metadata for ParticleGlobalFluidSolver2DEmitter;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGlobalFluidSolver2DEmitter()
{
  return &type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter;
}

uint64_t storeEnumTagSinglePayload for ParticleFluidSolver2DEmitter.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B1B7CDE8 + 4 * byte_1B227CC77[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B1B7CE1C + 4 * byte_1B227CC72[v4]))();
}

uint64_t sub_1B1B7CE1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B7CE24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B7CE2CLL);
  return result;
}

uint64_t sub_1B1B7CE38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B7CE40);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B1B7CE44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B7CE4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFluidSolver2DEmitter.CodingKeys()
{
  return &type metadata for ParticleFluidSolver2DEmitter.CodingKeys;
}

uint64_t getEnumTagSinglePayload for ParticleFluidSolver2DSolver.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleFluidSolver2DSolver.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1B1B7CF44 + 4 * byte_1B227CC81[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1B1B7CF78 + 4 * byte_1B227CC7C[v4]))();
}

uint64_t sub_1B1B7CF78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B7CF80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1B7CF88);
  return result;
}

uint64_t sub_1B1B7CF94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1B7CF9CLL);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1B1B7CFA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1B7CFA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleFluidSolver2DSolver.CodingKeys()
{
  return &type metadata for ParticleFluidSolver2DSolver.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGlobalFluidSolver2DSolver()
{
  return &type metadata for ParticleAffectedByGlobalFluidSolver2DSolver;
}

unint64_t sub_1B1B7CFD8()
{
  unint64_t result;

  result = qword_1EEF5B240;
  if (!qword_1EEF5B240)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D0E4, &type metadata for ParticleFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B240);
  }
  return result;
}

unint64_t sub_1B1B7D020()
{
  unint64_t result;

  result = qword_1EEF5B248;
  if (!qword_1EEF5B248)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D1D4, &type metadata for ParticleFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B248);
  }
  return result;
}

unint64_t sub_1B1B7D068()
{
  unint64_t result;

  result = qword_1EEF5B250;
  if (!qword_1EEF5B250)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D10C, &type metadata for ParticleFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B250);
  }
  return result;
}

unint64_t sub_1B1B7D0B0()
{
  unint64_t result;

  result = qword_1EEF5B258;
  if (!qword_1EEF5B258)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D134, &type metadata for ParticleFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B258);
  }
  return result;
}

unint64_t sub_1B1B7D0F8()
{
  unint64_t result;

  result = qword_1EEF5B260;
  if (!qword_1EEF5B260)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D01C, &type metadata for ParticleFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B260);
  }
  return result;
}

unint64_t sub_1B1B7D140()
{
  unint64_t result;

  result = qword_1EEF5B268;
  if (!qword_1EEF5B268)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D044, &type metadata for ParticleFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B268);
  }
  return result;
}

unint64_t sub_1B1B7D184()
{
  unint64_t result;

  result = qword_1EEF5B278;
  if (!qword_1EEF5B278)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D67C, &type metadata for ParticleGlobalFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B278);
  }
  return result;
}

unint64_t sub_1B1B7D1C8()
{
  unint64_t result;

  result = qword_1EEF5B288;
  if (!qword_1EEF5B288)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D62C, &type metadata for ParticleGlobalFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B288);
  }
  return result;
}

unint64_t sub_1B1B7D20C()
{
  unint64_t result;

  result = qword_1EEF5B298;
  if (!qword_1EEF5B298)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D5DC, &type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B298);
  }
  return result;
}

unint64_t sub_1B1B7D250()
{
  unint64_t result;

  result = qword_1EEF5B2A8;
  if (!qword_1EEF5B2A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D58C, &type metadata for ParticleAffectedByGlobalFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2A8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGlobalFluidSolver2DSolver.CodingKeys()
{
  return &type metadata for ParticleAffectedByGlobalFluidSolver2DSolver.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleAffectedByGlobalFluidSolver2DEmitter.CodingKeys()
{
  return &type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleGlobalFluidSolver2DEmitter.CodingKeys()
{
  return &type metadata for ParticleGlobalFluidSolver2DEmitter.CodingKeys;
}

ValueMetadata *type metadata accessor for ParticleGlobalFluidSolver2DSolver.CodingKeys()
{
  return &type metadata for ParticleGlobalFluidSolver2DSolver.CodingKeys;
}

unint64_t sub_1B1B7D2D8()
{
  unint64_t result;

  result = qword_1EEF5B2B0;
  if (!qword_1EEF5B2B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D53C, &type metadata for ParticleAffectedByGlobalFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2B0);
  }
  return result;
}

unint64_t sub_1B1B7D320()
{
  unint64_t result;

  result = qword_1EEF5B2B8;
  if (!qword_1EEF5B2B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D564, &type metadata for ParticleAffectedByGlobalFluidSolver2DSolver.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2B8);
  }
  return result;
}

unint64_t sub_1B1B7D368()
{
  unint64_t result;

  result = qword_1EEF5B2C0;
  if (!qword_1EEF5B2C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B227D4EC, &type metadata for ParticleAffectedByGlobalFluidSolver2DEmitter.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF5B2C0);
  }
  return result;
}

