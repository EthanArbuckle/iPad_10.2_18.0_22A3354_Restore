uint64_t sub_1B1F0F274(uint64_t result, uint64_t a2, int a3, unint64_t a4, Swift::Int a5, uint64_t a6, uint64_t a7, __n128 a8, __n128 a9)
{
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  char **v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v45;
  char *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  os_unfair_lock_s *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  __n128 *v72;
  __n128 v73;
  uint64_t v74;
  _QWORD *v75;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v77;
  _QWORD *v78;
  size_t v79;
  char *v80;
  char *v81;
  char *v82;
  uint64_t *v83;
  _QWORD *v84;
  int v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  os_unfair_lock_s *v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  __n128 *v97;
  __n128 v98;
  uint64_t v99;
  _QWORD *v100;
  char v101;
  uint64_t v102;
  _QWORD *v103;
  size_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  unint64_t v111;
  int v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t *v117;
  __n128 v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  _BYTE v137[40];
  uint64_t v138;
  int v139;
  char v140;
  uint64_t v141;
  char v142;
  uint64_t v143;
  uint64_t v144;

  v120 = a7;
  v118 = a8;
  v119 = a9;
  if (a5 >= 1)
  {
    v111 = a4;
    v112 = a3;
    LODWORD(v114) = result;
    v144 = v9;
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, a5);
    swift_release();
    swift_release();
    swift_retain();
    v14 = swift_getKeyPath();
    sub_1B1DAC77C(v14, a5);
    swift_release();
    swift_release();
    v15 = *(_QWORD *)(a6 + 32);
    ecs_stack_allocator_push_snapshot(v15);
    v122 = *(int *)(a2 + 204);
    v16 = v15;
    v17 = a5;
    v113 = 4 * a5;
    v18 = ecs_stack_allocator_allocate(v16, 4 * a5, 4);
    v19 = *(_BYTE *)(a2 + 208);
    v121 = a6;
    if ((v19 & 1) == 0)
    {
      v28 = 0;
      v115 = (_QWORD *)v17;
      v116 = a2;
      do
      {
        v32 = *(_QWORD *)(a6 + 16);
        v31 = (uint64_t *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_lock);
        v33 = *(os_unfair_lock_s **)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
        swift_retain();
        os_unfair_lock_lock(v33);
        ++*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
        v34 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
        LODWORD(a6) = *(_DWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
        if ((_DWORD)a6 == -1)
        {
          v117 = v31;
          v35 = (char **)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v36 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
          v37 = *(char **)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          a6 = *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
          v38 = 2 * *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
          *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v38;
          v39 = (char *)swift_slowAlloc();
          *v35 = v39;
          v35[1] = (char *)v38;
          if (a6 < 0)
            goto LABEL_80;
          if (v39 != v37 || v39 >= &v37[12 * a6])
            memmove(v39, v37, 12 * a6);
          if (v37)
            MEMORY[0x1B5E23F88](v37, -1, -1);
          v41 = *(_QWORD *)(v32 + v36);
          v42 = *v35;
          v17 = (uint64_t)v115;
          if ((_DWORD)v41 - 1 != (_DWORD)a6)
          {
            v43 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
            v44 = a6 + 1;
            do
            {
              v45 = *(_DWORD *)(v32 + v43);
              v46 = &v42[12 * v44 - 12];
              *(_DWORD *)v46 = v44;
              *((_DWORD *)v46 + 1) = -1;
              *((_DWORD *)v46 + 2) = v45;
              ++v44;
            }
            while ((_DWORD)v41 != v44);
          }
          v29 = *(_DWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
          v30 = &v42[12 * v41];
          *(_QWORD *)(v30 - 12) = -1;
          *((_DWORD *)v30 - 1) = v29;
          *(_DWORD *)(v32 + v34) = a6;
          a2 = v116;
          v31 = v117;
        }
        *(_DWORD *)(v32 + v34) = *(_DWORD *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)a6);
        os_unfair_lock_unlock((os_unfair_lock_t)v31[3]);
        swift_release();
        *((_DWORD *)v18 + v28++) = a6;
        a6 = v121;
      }
      while (v28 != v17);
    }
    v20 = (4 * v17) >> 2;
    v125 = 0;
    v21 = v17 / *(_QWORD *)(a2 + 64)
        + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 96) + 40 * (int)v122 + 32) + 16)
        + 1;
    v22 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 24 * v21, 8);
    v123[0] = v22;
    v123[1] = v21;
    v124 = 0;
    v23 = *(_QWORD *)(a6 + 16);
    swift_retain();
    *(_QWORD *)&v126 = 0;
    *((_QWORD *)&v126 + 1) = v20;
    *(_QWORD *)&v127 = v18;
    *((_QWORD *)&v127 + 1) = v20;
    if (v113 < 1)
    {
      swift_release();
      v27 = 0;
    }
    else
    {
      v117 = &v108;
      v24 = v111;
      v25 = v111;
      swift_retain();
      v26 = v112 & 1;
      do
      {
        swift_retain();
        sub_1B1C939A8(v122, v25 | ((HIDWORD(v24) & 1) << 32), v26, v23, (uint64_t *)&v126, a2, (uint64_t)v18, v20, &v125, a6, v122, v123);
        swift_release();
      }
      while ((uint64_t)(*((_QWORD *)&v126 + 1) - v126) > 0);
      swift_release();
      swift_release();
      v27 = v124;
      v22 = (_QWORD *)v123[0];
    }
    v47 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 48 * v27, 8);
    v48 = (uint64_t)v47;
    if (v27)
    {
      v49 = 0;
      v50 = v22 + 2;
      v51 = v27;
      v52 = v47;
      while (1)
      {
        v53 = *(v50 - 1);
        v54 = *v50;
        v55 = swift_retain();
        if ((v49 & 0x8000000000000000) != 0)
        {
          swift_release();
          v110 = 0;
          v109 = 3451;
          LOBYTE(v108) = 2;
          goto LABEL_79;
        }
        if (HIDWORD(v49))
          break;
        *((_DWORD *)v52 + 1) = v54;
        *((_DWORD *)v52 + 2) = v49;
        v49 = v49 - v53 + v54;
        *(_DWORD *)v52 = v53;
        v52[2] = 0;
        v52[3] = 0;
        v52[4] = 0;
        v52[5] = v55;
        v52 += 6;
        v50 += 3;
        if (!--v51)
          goto LABEL_30;
      }
      swift_release();
      v110 = 0;
      v109 = 3455;
      LOBYTE(v108) = 2;
LABEL_79:
      sub_1B222967C();
      __break(1u);
LABEL_80:
      v110 = 0;
      v109 = 1046;
      LOBYTE(v108) = 2;
      result = sub_1B2229700();
      __break(1u);
    }
    else
    {
LABEL_30:
      v56 = *(_QWORD *)(a6 + 16);
      v57 = qword_1ED4B7DB8;
      swift_retain();
      if (v57 != -1)
        swift_once();
      v138 = qword_1ED4D09F8;
      v139 = 0;
      v140 = 2;
      v141 = 0;
      v142 = 2;
      v143 = 0;
      swift_retain();
      sub_1B1BEC74C(v56, a6, (uint64_t)&v138, v48, v27, v27, (uint64_t)&v126);
      swift_release();
      swift_release();
      if ((v114 & 1) != 0)
      {
        if (v133 > 0)
        {
          v58 = v130;
          if (v130)
          {
            v59 = v132;
            v60 = *(unsigned __int8 *)(v131 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v122 = v132[4];
            v113 = (uint64_t)(v132 + 13);
            v134 = v126;
            v135 = v127;
            v136 = v128;
            v114 = v132 + 8;
            v115 = v132 + 6;
            v61 = (uint64_t *)(v129 + 24);
            LODWORD(v116) = v60;
            do
            {
              v117 = v58;
              v62 = *((unsigned int *)v61 - 6);
              v64 = (uint64_t *)*(v61 - 1);
              v63 = *v61;
              v65 = v61[1];
              v66 = v61[2];
              if (v60)
              {
                v67 = *(os_unfair_lock_s **)(v66 + 376);
                swift_retain();
                os_unfair_lock_lock(v67);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v66 + 344));
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v122);
              sub_1B1A18378((uint64_t)v115, (uint64_t)v137, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
              v68 = v59[4];
              v69 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v66 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v59[6] = ecs_stack_allocator_allocate(v68, 48 * v69, 8);
              v59[7] = v69;
              v70 = v114;
              v114[1] = 0;
              v70[2] = 0;
              *v70 = 0;
              swift_release();
              v71 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v64, v63, v65, (uint64_t)v59);
              v72 = (__n128 *)(sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v64, v63, v65, (uint64_t)v59)+ 32 * v62);
              v73 = v119;
              *v72 = v118;
              v72[1] = v73;
              *(_QWORD *)(v71 + 8 * v62) = v120;
              swift_retain();
              swift_release();
              v74 = v144;
              sub_1B1F05D48(v59, (unsigned __int16 **)&v134, (uint64_t)v137);
              v144 = v74;
              if (*(_QWORD *)(v59[13] + 16))
              {
                v75 = (_QWORD *)swift_bridgeObjectRetain();
                sub_1B1F05034(v75, v66);
                swift_bridgeObjectRelease();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v77 = v59[13];
                if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                {
                  sub_1B1C92670(0, *(_QWORD *)(v77 + 16));
                }
                else
                {
                  v78 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  if (*(_QWORD *)(v77 + 24) >= 2uLL)
                  {
                    sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                    v78 = (_QWORD *)swift_allocObject();
                    v79 = j__malloc_size(v78);
                    v78[2] = 0;
                    v78[3] = 2 * ((uint64_t)(v79 - 32) / 72);
                  }
                  *(_QWORD *)v113 = v78;
                  swift_bridgeObjectRelease();
                }
                if (*(unsigned __int8 *)(v59[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
                {
                  v80 = *(char **)(v66 + 232);
                  v81 = *(char **)(v66 + 256);
                  if (v80 == v81)
                  {
                    v82 = *(char **)(v66 + 240);
                  }
                  else
                  {
                    sub_1B1A1059C(v81, v80);
                    v81 = *(char **)(v66 + 232);
                    v82 = *(char **)(v66 + 240);
                    if (v82 == v81)
                    {
                      v82 = 0;
                      v81 = 0;
                      *(_QWORD *)(v66 + 232) = 0;
                      *(_QWORD *)(v66 + 240) = 0;
                    }
                  }
                  *(_QWORD *)(v66 + 248) = v82;
                  *(_QWORD *)(v66 + 256) = v81;
                }
              }
              ecs_stack_allocator_pop_snapshot(v122);
              v60 = v116;
              if ((_DWORD)v116)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v66 + 376));
              }
              swift_release();
              v61 += 6;
              v58 = (uint64_t *)((char *)v117 - 1);
            }
            while (v117 != (uint64_t *)1);
          }
        }
      }
      else if (v133 > 0)
      {
        v83 = v130;
        if (v130)
        {
          v84 = v132;
          v85 = *(unsigned __int8 *)(v131 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v122 = v132[4];
          v113 = (uint64_t)(v132 + 13);
          v134 = v126;
          v135 = v127;
          v136 = v128;
          v114 = v132 + 8;
          v115 = v132 + 6;
          v86 = (uint64_t *)(v129 + 24);
          LODWORD(v116) = v85;
          do
          {
            v117 = v83;
            v87 = *((unsigned int *)v86 - 6);
            v88 = (uint64_t *)*(v86 - 1);
            v89 = *v86;
            v90 = v86[1];
            v91 = v86[2];
            if (v85)
            {
              v92 = *(os_unfair_lock_s **)(v91 + 376);
              swift_retain();
              os_unfair_lock_lock(v92);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v91 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v122);
            sub_1B1A18378((uint64_t)v115, (uint64_t)v137, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v93 = v84[4];
            v94 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v91 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v84[6] = ecs_stack_allocator_allocate(v93, 48 * v94, 8);
            v84[7] = v94;
            v95 = v114;
            v114[1] = 0;
            v95[2] = 0;
            *v95 = 0;
            swift_release();
            v96 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v88, v89, v90, (uint64_t)v84);
            v97 = (__n128 *)(sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v88, v89, v90, (uint64_t)v84)+ 32 * v87);
            v98 = v119;
            *v97 = v118;
            v97[1] = v98;
            *(_QWORD *)(v96 + 8 * v87) = v120;
            swift_retain();
            swift_release();
            v99 = v144;
            sub_1B1F05D48(v84, (unsigned __int16 **)&v134, (uint64_t)v137);
            v144 = v99;
            if (*(_QWORD *)(v84[13] + 16))
            {
              v100 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v100, v91);
              swift_bridgeObjectRelease();
              v101 = swift_isUniquelyReferenced_nonNull_native();
              v102 = v84[13];
              if ((v101 & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v102 + 16));
              }
              else
              {
                v103 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v102 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v103 = (_QWORD *)swift_allocObject();
                  v104 = j__malloc_size(v103);
                  v103[2] = 0;
                  v103[3] = 2 * ((uint64_t)(v104 - 32) / 72);
                }
                *(_QWORD *)v113 = v103;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v84[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v105 = *(char **)(v91 + 232);
                v106 = *(char **)(v91 + 256);
                if (v105 == v106)
                {
                  v107 = *(char **)(v91 + 240);
                }
                else
                {
                  sub_1B1A1059C(v106, v105);
                  v106 = *(char **)(v91 + 232);
                  v107 = *(char **)(v91 + 240);
                  if (v107 == v106)
                  {
                    v107 = 0;
                    v106 = 0;
                    *(_QWORD *)(v91 + 232) = 0;
                    *(_QWORD *)(v91 + 240) = 0;
                  }
                }
                *(_QWORD *)(v91 + 248) = v107;
                *(_QWORD *)(v91 + 256) = v106;
              }
            }
            ecs_stack_allocator_pop_snapshot(v122);
            v85 = v116;
            if ((_DWORD)v116)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v91 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v91 + 376));
            }
            swift_release();
            v86 += 6;
            v83 = (uint64_t *)((char *)v117 - 1);
          }
          while (v117 != (uint64_t *)1);
        }
      }
      sub_1B1D66364((uint64_t)&v126);
      return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v121 + 32));
    }
  }
  return result;
}

uint64_t sub_1B1F0FE74(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F10B98(a1, a2, a3, a4, a5, a6, a7, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1B1F09C24);
}

uint64_t sub_1B1F0FE90(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F10B98(a1, a2, a3, a4, a5, a6, a7, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1B1F09CBC);
}

uint64_t sub_1B1F0FEAC(uint64_t result, uint64_t a2, int a3, unint64_t a4, uint64_t a5, uint64_t a6, char **a7, uint64_t a8, _QWORD *a9, _QWORD *a10)
{
  uint64_t v10;
  Swift::Int v12;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  os_unfair_lock_s *v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  char **v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  int v46;
  int v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  int v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  os_unfair_lock_s *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  _BYTE *v77;
  uint64_t v78;
  _QWORD *v79;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v81;
  _QWORD *v82;
  size_t v83;
  char *v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  _QWORD *v88;
  int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  os_unfair_lock_s *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  _BYTE *v102;
  uint64_t v103;
  _QWORD *v104;
  char v105;
  uint64_t v106;
  _QWORD *v107;
  size_t v108;
  char *v109;
  char *v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  _QWORD *v116;
  _BYTE *v117;
  _QWORD *v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  _QWORD *v124;
  char **v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD v136[2];
  uint64_t v137;
  uint64_t v138;
  __int128 v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _OWORD v147[2];
  uint64_t v148;
  _OWORD v149[2];
  uint64_t v150;
  _OWORD v151[2];
  uint64_t v152;
  _BYTE v153[40];
  _QWORD v154[8];
  _BYTE v155[24];
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  _BYTE v159[40];
  _QWORD v160[8];
  _BYTE v161[24];
  _QWORD *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  int v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  uint64_t v171;

  v125 = a7;
  v126 = a8;
  if (a5 >= 1)
  {
    v12 = a5;
    v120 = a4;
    LODWORD(v121) = a3;
    LODWORD(v127) = result;
    v131 = v10;
    swift_retain();
    KeyPath = swift_getKeyPath();
    sub_1B1DAC77C(KeyPath, v12);
    swift_release();
    swift_release();
    swift_retain();
    v15 = swift_getKeyPath();
    sub_1B1DAC77C(v15, v12);
    swift_release();
    swift_release();
    v16 = *(_QWORD *)(a6 + 32);
    ecs_stack_allocator_push_snapshot(v16);
    v171 = *(int *)(a2 + 204);
    v122 = 4 * v12;
    v129 = a6;
    v130 = ecs_stack_allocator_allocate(v16, 4 * v12, 4);
    v123 = (_QWORD *)a2;
    if ((*(_BYTE *)(a2 + 208) & 1) == 0)
    {
      v27 = 0;
      v28 = &qword_1ED4B8000;
      do
      {
        v32 = *(_QWORD *)(a6 + 16);
        v31 = (uint64_t *)(v32 + v28[191]);
        v33 = (os_unfair_lock_s *)v31[3];
        swift_retain();
        os_unfair_lock_lock(v33);
        ++*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount);
        v34 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
        LODWORD(v35) = *(_DWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
        if ((_DWORD)v35 == -1)
        {
          v128 = v31;
          v36 = v12;
          v37 = (char **)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v38 = OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity;
          v39 = *(char **)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          v35 = *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
          v40 = 2 * *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity);
          *(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_entityCapacity) = v40;
          v41 = (char *)swift_slowAlloc();
          *v37 = v41;
          v37[1] = (char *)v40;
          if (v35 < 0)
            goto LABEL_86;
          if (v41 != v39 || v41 >= &v39[12 * v35])
            memmove(v41, v39, 12 * v35);
          if (v39)
            MEMORY[0x1B5E23F88](v39, -1, -1);
          v12 = v36;
          v43 = *(_QWORD *)(v32 + v38);
          v44 = *v37;
          v28 = &qword_1ED4B8000;
          if ((_DWORD)v43 - 1 != (_DWORD)v35)
          {
            v45 = OBJC_IVAR____TtC3VFX13EntityManager_generationSalt;
            v46 = v35 + 1;
            do
            {
              v47 = *(_DWORD *)(v32 + v45);
              v48 = &v44[12 * v46 - 12];
              *(_DWORD *)v48 = v46;
              *((_DWORD *)v48 + 1) = -1;
              *((_DWORD *)v48 + 2) = v47;
              ++v46;
            }
            while ((_DWORD)v43 != v46);
          }
          v29 = *(_DWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager_generationSalt);
          v30 = &v44[12 * v43];
          *(_QWORD *)(v30 - 12) = -1;
          *((_DWORD *)v30 - 1) = v29;
          *(_DWORD *)(v32 + v34) = v35;
          v31 = v128;
          a6 = v129;
        }
        *(_DWORD *)(v32 + v34) = *(_DWORD *)(*(_QWORD *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                           + 12 * (int)v35);
        os_unfair_lock_unlock((os_unfair_lock_t)v31[3]);
        swift_release();
        *((_DWORD *)v130 + v27++) = v35;
      }
      while (v27 != v12);
    }
    v124 = a10;
    v17 = (4 * v12) >> 2;
    v138 = 0;
    v18 = (uint64_t)v123;
    v19 = v12 / v123[8]
        + 2 * *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 16) + 96) + 40 * (int)v171 + 32) + 16)
        + 1;
    v20 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 24 * v19, 8);
    v136[0] = v20;
    v136[1] = v19;
    v137 = 0;
    v21 = *(_QWORD *)(a6 + 16);
    swift_retain();
    v132 = 0;
    v133 = v17;
    v134 = v130;
    v135 = v17;
    if (v122 < 1)
    {
      swift_release();
      v26 = 0;
    }
    else
    {
      v128 = &v113;
      v22 = v120;
      v23 = v120;
      swift_retain();
      v24 = v121 & 1;
      v25 = (uint64_t)v130;
      do
      {
        swift_retain();
        sub_1B1C939A8(v171, v23 | ((HIDWORD(v22) & 1) << 32), v24, v21, &v132, v18, v25, v17, &v138, a6, v171, v136);
        swift_release();
      }
      while (v133 - v132 > 0);
      swift_release();
      swift_release();
      v26 = v137;
      v20 = (_QWORD *)v136[0];
    }
    v49 = ecs_stack_allocator_allocate(*(_QWORD *)(a6 + 32), 48 * v26, 8);
    v50 = (uint64_t)v49;
    if (v26)
    {
      v51 = 0;
      v52 = v20 + 2;
      v53 = v26;
      v54 = v49;
      while (1)
      {
        v55 = *(v52 - 1);
        v56 = *v52;
        v57 = swift_retain();
        if ((v51 & 0x8000000000000000) != 0)
        {
          swift_release();
          swift_bridgeObjectRelease();
          v115 = 0;
          v114 = 3451;
          LOBYTE(v113) = 2;
          goto LABEL_85;
        }
        if (HIDWORD(v51))
          break;
        *((_DWORD *)v54 + 1) = v56;
        *((_DWORD *)v54 + 2) = v51;
        v51 = v51 - v55 + v56;
        *(_DWORD *)v54 = v55;
        v54[2] = 0;
        v54[3] = 0;
        v54[4] = 0;
        v54[5] = v57;
        v54 += 6;
        v52 += 3;
        if (!--v53)
          goto LABEL_30;
      }
      swift_release();
      swift_bridgeObjectRelease();
      v115 = 0;
      v114 = 3455;
      LOBYTE(v113) = 2;
LABEL_85:
      sub_1B222967C();
      __break(1u);
LABEL_86:
      v115 = 0;
      v114 = 1046;
      LOBYTE(v113) = 2;
      sub_1B2229700();
      __break(1u);
      goto LABEL_87;
    }
LABEL_30:
    v123 = a9;
    v58 = v129;
    v59 = *(_QWORD *)(v129 + 16);
    v60 = qword_1ED4B7DB8;
    swift_retain();
    if (v60 != -1)
      swift_once();
    v165 = qword_1ED4D09F8;
    v166 = 0;
    v167 = 2;
    v168 = 0;
    v169 = 2;
    v170 = 0;
    swift_retain();
    sub_1B1BEC74C(v59, v58, (uint64_t)&v165, v50, v26, v26, (uint64_t)&v139);
    swift_release();
    swift_release();
    if ((v127 & 1) != 0)
    {
      if (v146 > 0)
      {
        v61 = v143;
        v62 = v129;
        if (v143)
        {
          v122 = v146;
          v63 = v145;
          v121 = v144;
          v64 = *(unsigned __int8 *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          v171 = v145[4];
          v116 = v145 + 13;
          v118 = v145 + 8;
          v119 = v145 + 6;
          v117 = v155;
          v65 = (uint64_t *)(v142 + 24);
          LODWORD(v120) = v64;
          while (1)
          {
            v130 = v61;
            v67 = *((unsigned int *)v65 - 6);
            v66 = *((unsigned int *)v65 - 5);
            v68 = *((unsigned int *)v65 - 4);
            v69 = (uint64_t *)*(v65 - 1);
            v70 = *v65;
            v71 = v65[2];
            v127 = v65[1];
            v128 = v69;
            if (v64)
            {
              v72 = *(os_unfair_lock_s **)(v71 + 376);
              swift_retain();
              os_unfair_lock_lock(v72);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v71 + 344));
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v171);
            sub_1B1A18378((uint64_t)v119, (uint64_t)v153, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
            v73 = v63[4];
            v74 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v71 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v63[6] = ecs_stack_allocator_allocate(v73, 48 * v74, 8);
            v63[7] = v74;
            v75 = v118;
            v118[1] = 0;
            v75[2] = 0;
            *v75 = 0;
            swift_release();
            v154[0] = v121;
            v154[1] = v71;
            v154[2] = v63;
            v154[3] = v68;
            v154[4] = (v66 - v67 + v68);
            v76 = v123;
            v154[5] = v122;
            v154[6] = v67;
            v154[7] = v66;
            v77 = v117;
            *(_QWORD *)v117 = 0;
            *((_QWORD *)v77 + 1) = 0;
            v155[16] = 1;
            v156 = v128;
            v157 = v70;
            v158 = v127;
            v78 = v131;
            sub_1B206B550(v154, v125, v126, v76, v124);
            if (v78)
              break;
            v147[0] = v139;
            v147[1] = v140;
            v148 = v141;
            sub_1B1F05D48(v63, (unsigned __int16 **)v147, (uint64_t)v153);
            v131 = 0;
            v62 = v129;
            if (*(_QWORD *)(v63[13] + 16))
            {
              v79 = (_QWORD *)swift_bridgeObjectRetain();
              sub_1B1F05034(v79, v71);
              swift_bridgeObjectRelease();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v81 = v63[13];
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
              {
                sub_1B1C92670(0, *(_QWORD *)(v81 + 16));
              }
              else
              {
                v82 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                if (*(_QWORD *)(v81 + 24) >= 2uLL)
                {
                  sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                  v82 = (_QWORD *)swift_allocObject();
                  v83 = j__malloc_size(v82);
                  v82[2] = 0;
                  v82[3] = 2 * ((uint64_t)(v83 - 32) / 72);
                }
                *v116 = v82;
                swift_bridgeObjectRelease();
              }
              if (*(unsigned __int8 *)(v63[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
              {
                v84 = *(char **)(v71 + 232);
                v85 = *(char **)(v71 + 256);
                if (v84 == v85)
                {
                  v86 = *(char **)(v71 + 240);
                }
                else
                {
                  sub_1B1A1059C(v85, v84);
                  v85 = *(char **)(v71 + 232);
                  v86 = *(char **)(v71 + 240);
                  if (v86 == v85)
                  {
                    v86 = 0;
                    v85 = 0;
                    *(_QWORD *)(v71 + 232) = 0;
                    *(_QWORD *)(v71 + 240) = 0;
                  }
                }
                *(_QWORD *)(v71 + 248) = v86;
                *(_QWORD *)(v71 + 256) = v85;
              }
            }
            ecs_stack_allocator_pop_snapshot(v171);
            v64 = v120;
            if ((_DWORD)v120)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v71 + 376));
            }
            swift_release();
            v65 += 6;
            v61 = (_QWORD *)((char *)v130 - 1);
            if (v130 == (_QWORD *)1)
              goto LABEL_78;
          }
LABEL_87:
          result = swift_unexpectedError();
          __break(1u);
          return result;
        }
        goto LABEL_78;
      }
      goto LABEL_77;
    }
    if (v146 <= 0)
    {
LABEL_77:
      v62 = v129;
      goto LABEL_78;
    }
    v87 = v143;
    v62 = v129;
    if (!v143)
    {
LABEL_78:
      sub_1B1D66364((uint64_t)&v139);
      return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v62 + 32));
    }
    v122 = v146;
    v88 = v145;
    v120 = v144;
    v89 = *(unsigned __int8 *)(v144 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v171 = v145[4];
    v116 = v145 + 13;
    v118 = v145 + 8;
    v119 = v145 + 6;
    v117 = v161;
    v90 = (uint64_t *)(v142 + 24);
    LODWORD(v121) = v89;
    while (1)
    {
      v92 = *((unsigned int *)v90 - 6);
      v91 = *((unsigned int *)v90 - 5);
      v93 = *((unsigned int *)v90 - 4);
      v94 = *v90;
      v130 = (_QWORD *)*(v90 - 1);
      v95 = (uint64_t *)v90[1];
      v96 = v90[2];
      v127 = (uint64_t)v87;
      v128 = v95;
      if (v89)
      {
        v97 = *(os_unfair_lock_s **)(v96 + 376);
        swift_retain();
        os_unfair_lock_lock(v97);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v96 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v171);
      sub_1B1A18378((uint64_t)v119, (uint64_t)v159, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v98 = v88[4];
      v99 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v96 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v88[6] = ecs_stack_allocator_allocate(v98, 48 * v99, 8);
      v88[7] = v99;
      v100 = v118;
      v118[1] = 0;
      v100[2] = 0;
      *v100 = 0;
      swift_release();
      v160[0] = v120;
      v160[1] = v96;
      v160[2] = v88;
      v160[3] = v93;
      v160[4] = (v91 - v92 + v93);
      v101 = v123;
      v160[5] = v122;
      v160[6] = v92;
      v160[7] = v91;
      v102 = v117;
      *(_QWORD *)v117 = 0;
      *((_QWORD *)v102 + 1) = 0;
      v161[16] = 1;
      v103 = v131;
      v162 = v130;
      v163 = v94;
      v164 = v128;
      sub_1B206B550(v160, v125, v126, v101, v124);
      if (v103)
        break;
      v149[0] = v139;
      v149[1] = v140;
      v150 = v141;
      sub_1B1F05D48(v88, (unsigned __int16 **)v149, (uint64_t)v159);
      v131 = 0;
      v62 = v129;
      if (*(_QWORD *)(v88[13] + 16))
      {
        v104 = (_QWORD *)swift_bridgeObjectRetain();
        sub_1B1F05034(v104, v96);
        swift_bridgeObjectRelease();
        v105 = swift_isUniquelyReferenced_nonNull_native();
        v106 = v88[13];
        if ((v105 & 1) != 0)
        {
          sub_1B1C92670(0, *(_QWORD *)(v106 + 16));
        }
        else
        {
          v107 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          if (*(_QWORD *)(v106 + 24) >= 2uLL)
          {
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v107 = (_QWORD *)swift_allocObject();
            v108 = j__malloc_size(v107);
            v107[2] = 0;
            v107[3] = 2 * ((uint64_t)(v108 - 32) / 72);
          }
          *v116 = v107;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v88[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          v109 = *(char **)(v96 + 232);
          v110 = *(char **)(v96 + 256);
          if (v109 == v110)
          {
            v111 = *(char **)(v96 + 240);
          }
          else
          {
            sub_1B1A1059C(v110, v109);
            v110 = *(char **)(v96 + 232);
            v111 = *(char **)(v96 + 240);
            if (v111 == v110)
            {
              v111 = 0;
              v110 = 0;
              *(_QWORD *)(v96 + 232) = 0;
              *(_QWORD *)(v96 + 240) = 0;
            }
          }
          *(_QWORD *)(v96 + 248) = v111;
          *(_QWORD *)(v96 + 256) = v110;
        }
      }
      ecs_stack_allocator_pop_snapshot(v171);
      v89 = v121;
      if ((_DWORD)v121)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 376));
      }
      swift_release();
      v90 += 6;
      v87 = (_QWORD *)(v127 - 1);
      if (v127 == 1)
        goto LABEL_78;
    }
    v151[0] = v139;
    v151[1] = v140;
    v152 = v141;
    sub_1B1F05D48(v88, (unsigned __int16 **)v151, (uint64_t)v159);
    sub_1B1F03804((char *)v96);
    ecs_stack_allocator_pop_snapshot(v171);
    v112 = v129;
    if ((v121 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 376));
    }
    sub_1B1D66364((uint64_t)&v139);
    swift_release();
    return ecs_stack_allocator_pop_snapshot(*(_QWORD *)(v112 + 32));
  }
  return result;
}

uint64_t sub_1B1F10B7C(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F10B98(a1, a2, a3, a4, a5, a6, a7, (void (*)(_QWORD *, uint64_t, uint64_t))sub_1B1F09E40);
}

uint64_t sub_1B1F10B98(uint64_t a1, char a2, char a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD *, uint64_t, uint64_t))
{
  uint64_t KeyPath;
  uint64_t v14;
  signed int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v22[3];
  int v23;
  _QWORD v24[3];
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD *, uint64_t, uint64_t);

  v34 = a8;
  swift_retain();
  KeyPath = swift_getKeyPath();
  sub_1B1DAC77C(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  v14 = swift_getKeyPath();
  sub_1B1DAC77C(v14, 1);
  swift_release();
  swift_release();
  v15 = *(_DWORD *)(a1 + 204);
  if ((*(_BYTE *)(a1 + 208) & 1) != 0)
  {
    v16 = 0xFFFFFFFFLL;
  }
  else
  {
    swift_retain();
    v16 = sub_1B1DA8E54();
    swift_release();
  }
  v23 = -1;
  *(_OWORD *)v22 = 0uLL;
  v17 = *(_QWORD *)(a5 + 16);
  swift_retain();
  swift_retain();
  sub_1B1C92338(v15, a4 | ((HIDWORD(a4) & 1) << 32), a2 & 1, v17, v22, v16, &v23, a1, a5, v15, SHIWORD(v15), a3 & 1);
  swift_release();
  swift_release();
  v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a5 + 16) + 136) + 8 * v23 + 32);
  v24[0] = *(_QWORD *)(a5 + 16);
  v24[1] = v18;
  v24[2] = a5;
  v25 = xmmword_1B2244C80;
  v26 = 1;
  v27 = *(_OWORD *)v22;
  v28 = 0;
  v29 = 0;
  v30 = 1;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  swift_retain();
  v34(v24, a6, a7);
  swift_release();
  return v16;
}

void sub_1B1F10D78()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60B48)
  {
    type metadata accessor for ComponentsDataChunk();
    sub_1B1791524(255, (unint64_t *)&unk_1EEF5FF08, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1F10E08();
    v0 = sub_1B2229640();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60B48);
  }
}

unint64_t sub_1B1F10E08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5FF18;
  if (!qword_1EEF5FF18)
  {
    v1 = type metadata accessor for ComponentsDataChunk();
    result = MEMORY[0x1B5E23E74](&unk_1B226DF04, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5FF18);
  }
  return result;
}

uint64_t initializeWithCopy for CommandQueue.IterationContext.ComponentBuffer(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CommandQueue.IterationContext.ComponentBuffer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v3;
  swift_retain();
  swift_release();
  return a1;
}

_OWORD *assignWithTake for CommandQueue.IterationContext.ComponentBuffer(_OWORD *a1, _OWORD *a2)
{
  __int128 v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CommandQueue.IterationContext.ComponentBuffer()
{
  return &type metadata for CommandQueue.IterationContext.ComponentBuffer;
}

BOOL sub_1B1F10F1C(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  __int128 v5;
  char v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  char v29;
  char v30;

  if (sub_1B1F127E8(a1, a2) != 1)
    return 0;
  if (a1 >> 60 != 1)
  {
    if (a1 >> 60 != 8)
      goto LABEL_23;
    *((_QWORD *)&v5 + 1) = a1;
    *(_QWORD *)&v5 = a1 + 0x7FFFFFFFFFFFFFD0;
    v4 = v5 >> 3;
    if (v4 > 5 || v4 == 3)
      goto LABEL_23;
    if (a2 >> 60 == 1 && *(_QWORD *)(a2 + 24) >> 60 != 1)
      return 1;
    if (v4 >= 3)
    {
      if (v4 != 4)
        goto LABEL_23;
    }
    else
    {
      sub_1B1D76C18(a2);
      if ((v7 & 1) != 0)
        return 1;
      sub_1B1D76C18(a2);
      if ((v8 & 1) != 0)
        return 1;
      if (a1 == 0x8000000000000040)
      {
        v16 = swift_allocObject();
        *(_QWORD *)(v16 + 16) = 0x8000000000000040;
LABEL_22:
        sub_1B1D76C18(v16 | 0x2000000000000000);
        v18 = v17;
        swift_release();
        if ((v18 & 1) != 0)
          return 1;
LABEL_23:
        v19 = swift_allocObject();
        *(_OWORD *)(v19 + 16) = xmmword_1B2286450;
        sub_1B1D76C18(v19 | 0x1000000000000000);
        v21 = v20;
        swift_release();
        if ((v21 & 1) != 0)
        {
          v22 = swift_allocObject();
          *(_QWORD *)(v22 + 16) = 0x8000000000000050;
          sub_1B1D76C18(v22 | 0x2000000000000000);
          v24 = v23;
          swift_release();
          if ((v24 & 1) != 0)
            return 1;
        }
        v25 = swift_allocObject();
        *(_QWORD *)(v25 + 16) = 0x8000000000000050;
        sub_1B1D76C18(v25 | 0x2000000000000000);
        v27 = v26;
        swift_release();
        if ((v27 & 1) != 0)
        {
          v28 = swift_allocObject();
          *(_OWORD *)(v28 + 16) = xmmword_1B2286450;
          sub_1B1D76C18(v28 | 0x1000000000000000);
          v30 = v29;
          swift_release();
          return v30 & 1;
        }
        return 0;
      }
      if (a1 != 0x8000000000000050)
        goto LABEL_23;
    }
    v16 = swift_allocObject();
    *(_QWORD *)(v16 + 16) = 0x8000000000000050;
    goto LABEL_22;
  }
  if (a2 >> 60 != 1)
    goto LABEL_23;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
  v12 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_1B1B632F0(v10);
  sub_1B1B632F0(v11);
  sub_1B1D76C18(v10);
  v14 = v13;
  sub_1B1B28D2C(v11);
  sub_1B1B28D2C(v10);
  return (v14 & 1) != 0 && v9 < v12;
}

uint64_t sub_1B1F111D0()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
  sub_1B1B632F0(v1);
  sub_1B1D763B0(v1);
  sub_1B1B28D2C(v1);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  v2 = sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
  sub_1B1B632F0(v3);
  sub_1B1D763B0(v3);
  sub_1B1B28D2C(v3);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  return v2;
}

unint64_t sub_1B1F11440@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v3)(void);
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t result;
  uint64_t v12;

  v3 = MEMORY[0x1E0DED1E8];
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
  v5 = swift_allocObject();
  v6 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
  *(_QWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v4 + 32) = v5 | 0x6000000000000000;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B226D240;
  v8 = swift_allocObject();
  v9 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
  *(_QWORD *)(v8 + 16) = v9;
  *(_QWORD *)(v7 + 32) = v8 | 0x6000000000000000;
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF5C7D0, (uint64_t)&type metadata for AnyValue, (uint64_t (*)(_QWORD, uint64_t))v3);
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 64) = MEMORY[0x1E0DEB418];
  *(_OWORD *)(v10 + 16) = xmmword_1B226D240;
  *(_OWORD *)(v10 + 32) = xmmword_1B22847F0;
  sub_1B1B632F0(v6);
  result = sub_1B1B632F0(v9);
  *a1 = v4;
  a1[1] = v7;
  v12 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E63BECA0;
  a1[3] = v12;
  a1[4] = v12;
  a1[5] = v10;
  return result;
}

_QWORD *sub_1B1F115AC(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v3;
  v4 = *(_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v4;
  sub_1B1B632F0(v3);
  sub_1B1B632F0(v4);
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B1F11618(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[24];
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v3, v4);
  sub_1B1D52A9C();
  sub_1B2229BA4();
  if (!v1)
  {
    sub_1B19FC264((uint64_t)v3, v4);
    sub_1B2229BA4();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B1F11718(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE v7[24];
  uint64_t v8;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B222A12C();
  if (!v2)
  {
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B1D52CD0();
    sub_1B2229AA8();
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8CastNode_srcType) = v6;
    sub_1B1B28D2C(v4);
    sub_1B19FC264((uint64_t)v7, v8);
    sub_1B2229AA8();
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
    *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8CastNode_dstType) = v6;
    sub_1B1B28D2C(v5);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  return result;
}

uint64_t sub_1B1F11840(char a1)
{
  uint64_t v1;
  char v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v2 = a1 & 1;
  v3 = *(_QWORD *)(*(_QWORD *)(v1 + 24) + 32);
  sub_1B1BCCD2C(*(_QWORD *)(v1 + 24));
  sub_1B1B632F0(v3);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + 32);
  sub_1B1BCCD2C(*(_QWORD *)(v1 + 24));
  sub_1B1B632F0(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5 = sub_1B1F118FC(v3, v4, v2);
  sub_1B1B28D2C(v3);
  sub_1B1B28D2C(v4);
  return v5;
}

uint64_t sub_1B1F118FC(unint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  char v27;
  BOOL v28;
  _BOOL4 v29;
  char v30;
  char v31;
  unint64_t v32;
  __int128 v33;
  char v34;
  _BOOL4 v35;
  unint64_t v36;
  __int128 v37;
  unint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t result;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;

  v6 = a3 & 1;
  sub_1B1D76C18(a1);
  v7 = a2 >> 60;
  if (!(a2 >> 60))
  {
    v10 = *(_QWORD *)(a2 + 16);
    sub_1B1B632F0(v10);
    v9 = sub_1B1F118FC(a1, v10, v6);
    sub_1B1B28D2C(v10);
    return v9;
  }
  sub_1B1D76C18(a1);
  if ((v8 & 1) != 0)
    return 12325;
  v11 = a1 >> 60;
  if (a1 >> 60 != 1)
  {
    if ((_DWORD)v11 == 8)
    {
      *((_QWORD *)&v13 + 1) = a1;
      *(_QWORD *)&v13 = a1 + 0x7FFFFFFFFFFFFFD0;
      v12 = v13 >> 3;
      if (v12 <= 5 && v12 != 3)
      {
        if ((_DWORD)v7 != 1)
        {
          if ((_DWORD)v7 == 8)
          {
            *((_QWORD *)&v15 + 1) = a2;
            *(_QWORD *)&v15 = a2 + 0x7FFFFFFFFFFFFFD0;
            v14 = v15 >> 3;
            if (v14 <= 5 && v14 != 3)
              goto LABEL_71;
          }
LABEL_36:
          if ((_DWORD)v11 == 8 && a1 == 0x8000000000000020)
          {
            sub_1B1D76C18(0x8000000000000040);
            if ((v27 & 1) != 0)
              goto LABEL_98;
          }
          goto LABEL_39;
        }
LABEL_33:
        *((_QWORD *)&v26 + 1) = a1;
        *(_QWORD *)&v26 = a1 + 0x7FFFFFFFFFFFFFD0;
        v25 = v26 >> 3;
        if (v25 <= 5 && v25 != 3 && *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18) >> 60 != 1)
        {
          v60 = *(_QWORD *)(a2 + 16);
          if (v60)
          {
            v86 = MEMORY[0x1E0DEE9D8];
            sub_1B2029FFC(0, v60 & ~(v60 >> 63), 0);
            v61 = v86;
            v62 = *(_QWORD *)(v86 + 16);
            v63 = 16 * v62;
            do
            {
              v86 = v61;
              v64 = *(_QWORD *)(v61 + 24);
              v65 = v62 + 1;
              if (v62 >= v64 >> 1)
              {
                sub_1B2029FFC(v64 > 1, v62 + 1, 1);
                v61 = v86;
              }
              *(_QWORD *)(v61 + 16) = v65;
              v66 = v61 + v63;
              *(_QWORD *)(v66 + 32) = 12325;
              *(_QWORD *)(v66 + 40) = 0xE200000000000000;
              v63 += 16;
              v62 = v65;
              --v60;
            }
            while (v60);
          }
          sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
          sub_1B19FA230();
          sub_1B2228644();
          swift_bridgeObjectRelease();
          v86 = sub_1B1D77750(v6, a2);
          v87 = v67;
          sub_1B2228890();
          sub_1B2228890();
          swift_bridgeObjectRelease();
          goto LABEL_78;
        }
        goto LABEL_36;
      }
    }
    goto LABEL_30;
  }
  if ((_DWORD)v7 == 1)
  {
    v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xF000000000000000;
    if (v16 != 0x1000000000000000)
    {
      v17 = *(_QWORD *)(a2 + 24);
      if ((v17 & 0xF000000000000000) != 0x1000000000000000)
      {
        v18 = *(_QWORD *)(a2 + 16);
        v83 = *(_QWORD *)(a1 + 16);
        if (v18 >= v83)
        {
          sub_1B1B632F0(v17);
          sub_1B1D750D8(v17, (uint64_t)&v86, 0.0);
          v82 = sub_1B1FF3F6C(v17, (uint64_t)&v86, v6, v3, (uint64_t)&off_1E63BECD0);
          v70 = v69;
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v86);
          if (!v18)
          {
            swift_bridgeObjectRelease();
            goto LABEL_95;
          }
          v81 = v17;
          v85 = MEMORY[0x1E0DEE9D8];
          sub_1B2029FFC(0, v18 & ~(v18 >> 63), 0);
          v71 = 0;
          v72 = (char *)&unk_1E63BEC00;
          do
          {
            if (v71 >= v83)
            {
              v73 = v70;
              swift_bridgeObjectRetain();
              v74 = v82;
            }
            else
            {
              v86 = 3026981;
              v87 = 0xE300000000000000;
              swift_bridgeObjectRetain();
              swift_arrayDestroy();
              sub_1B2228890();
              swift_bridgeObjectRelease();
              v74 = v86;
              v73 = v87;
            }
            v75 = v85;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1B2029FFC(0, *(_QWORD *)(v85 + 16) + 1, 1);
              v75 = v85;
            }
            v77 = *(_QWORD *)(v75 + 16);
            v76 = *(_QWORD *)(v75 + 24);
            v78 = v77 + 1;
            if (v77 >= v76 >> 1)
            {
              sub_1B2029FFC(v76 > 1, v77 + 1, 1);
              v78 = v77 + 1;
              v75 = v85;
            }
            ++v71;
            *(_QWORD *)(v75 + 16) = v78;
            v79 = v75 + 16 * v77;
            *(_QWORD *)(v79 + 32) = v74;
            *(_QWORD *)(v79 + 40) = v73;
            v72 += 16;
          }
          while (v18 != v71);
          swift_bridgeObjectRelease();
        }
        else
        {
          v19 = 4;
          if (v18 < 4)
            v19 = *(_QWORD *)(a2 + 16);
          if (v18 <= 0)
            v19 = *(_QWORD *)(a2 + 16);
          v20 = v19 & 0x7FFFFFFFFFFFFFFFLL;
          if ((v19 & 0x7FFFFFFFFFFFFFFFLL) == 0)
          {
            sub_1B1B632F0(v17);
            swift_arrayDestroy();
            goto LABEL_95;
          }
          v81 = *(_QWORD *)(a2 + 24);
          sub_1B1B632F0(v17);
          v84 = MEMORY[0x1E0DEE9D8];
          sub_1B2029FFC(0, v20, 0);
          v21 = (char *)&unk_1E63BEC60;
          do
          {
            v86 = 3026981;
            v87 = 0xE300000000000000;
            swift_bridgeObjectRetain();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v23 = *(_QWORD *)(v84 + 16);
            v22 = *(_QWORD *)(v84 + 24);
            if (v23 >= v22 >> 1)
              sub_1B2029FFC(v22 > 1, v23 + 1, 1);
            v21 += 16;
            *(_QWORD *)(v84 + 16) = v23 + 1;
            v24 = v84 + 16 * v23;
            *(_QWORD *)(v24 + 32) = 3026981;
            *(_QWORD *)(v24 + 40) = 0xE300000000000000;
            --v20;
          }
          while (v20);
          swift_arrayDestroy();
        }
        v17 = v81;
LABEL_95:
        v86 = sub_1B1D77750(v6, a2);
        v87 = v80;
        sub_1B2228890();
        sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA490, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
        sub_1B19FA230();
        sub_1B2228644();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        sub_1B2228890();
        sub_1B1B28D2C(v17);
        return v86;
      }
    }
  }
  else
  {
    v16 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18) & 0xF000000000000000;
  }
  if (v16 == 0x1000000000000000)
  {
LABEL_30:
    if ((_DWORD)v7 != 1)
      goto LABEL_36;
    if ((_DWORD)v11 != 1)
    {
      if ((_DWORD)v11 != 8)
        goto LABEL_36;
      goto LABEL_33;
    }
LABEL_59:
    sub_1B1D76C18(a1);
    sub_1B1D76C18(a2);
    v35 = 0;
    goto LABEL_60;
  }
  if ((_DWORD)v7 == 1)
    goto LABEL_59;
  if ((_DWORD)v7 == 8)
  {
    *((_QWORD *)&v39 + 1) = a2;
    *(_QWORD *)&v39 = a2 + 0x7FFFFFFFFFFFFFD0;
    v38 = v39 >> 3;
    if (v38 <= 5 && v38 != 3)
      return 2016292901;
  }
LABEL_39:
  v28 = (_DWORD)v7 == 8;
  v29 = v7 == 8;
  if (v28 && a2 == 0x8000000000000020)
  {
    sub_1B1D76C18(0x8000000000000040);
    if ((v30 & 1) != 0)
      goto LABEL_98;
    v29 = 1;
  }
  sub_1B1D76C18(a1);
  if (v29 && (v31 & 1) != 0)
  {
    *((_QWORD *)&v33 + 1) = a2;
    *(_QWORD *)&v33 = a2 + 0x7FFFFFFFFFFFFFD0;
    v32 = v33 >> 3;
    if (v32 <= 5 && v32 != 3)
      goto LABEL_71;
  }
  sub_1B1D76C18(a2);
  v28 = (_DWORD)v11 == 8;
  v35 = v11 == 8;
  if (v28 && (v34 & 1) != 0)
  {
    *((_QWORD *)&v37 + 1) = a1;
    *(_QWORD *)&v37 = a1 + 0x7FFFFFFFFFFFFFD0;
    v36 = v37 >> 3;
    v35 = 1;
    if (v36 <= 5 && v36 != 3)
      goto LABEL_71;
  }
LABEL_60:
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1B2286450;
  sub_1B1D76C18(v40 | 0x1000000000000000);
  v42 = v41;
  swift_release();
  if ((v42 & 1) != 0)
  {
    v43 = swift_allocObject();
    *(_QWORD *)(v43 + 16) = 0x8000000000000050;
    sub_1B1D76C18(v43 | 0x2000000000000000);
    v45 = v44;
    swift_release();
    if ((v45 & 1) != 0)
      goto LABEL_71;
  }
  v46 = swift_allocObject();
  *(_QWORD *)(v46 + 16) = 0x8000000000000050;
  sub_1B1D76C18(v46 | 0x2000000000000000);
  v48 = v47;
  swift_release();
  if ((v48 & 1) != 0)
  {
    v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_1B2286450;
    sub_1B1D76C18(v49 | 0x1000000000000000);
    v51 = v50;
    swift_release();
    if ((v51 & 1) != 0)
    {
      sub_1B2229430();
      v52 = sub_1B1D77750(v6, a2);
      v54 = v53;
      swift_bridgeObjectRelease();
      v86 = v52;
      v87 = v54;
LABEL_78:
      sub_1B2228890();
      return v86;
    }
  }
  if (!v35)
    goto LABEL_97;
  if (a1 == 0x8000000000000040)
  {
    v55 = swift_allocObject();
    v56 = 0x8000000000000040;
    goto LABEL_70;
  }
  if (a1 == 0x8000000000000050)
  {
    v55 = swift_allocObject();
    v56 = 0x8000000000000050;
LABEL_70:
    *(_QWORD *)(v55 + 16) = v56;
    sub_1B1D76C18(v55 | 0x2000000000000000);
    v58 = v57;
    swift_release();
    if ((v58 & 1) != 0)
    {
LABEL_71:
      v86 = sub_1B1D77750(v6, a2);
      v87 = v59;
      goto LABEL_78;
    }
  }
LABEL_97:
  v86 = 0;
  v87 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B1D763B0(a1);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1D763B0(a2);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
LABEL_98:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1F12394()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

unint64_t sub_1B1F123C0()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8CastNode_srcType));
  return sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8CastNode_dstType));
}

uint64_t sub_1B1F123EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8CastNode_srcType));
  sub_1B1B28D2C(*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8CastNode_dstType));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1F12470()
{
  return type metadata accessor for CastNode(0);
}

uint64_t type metadata accessor for CastNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60B58);
}

uint64_t sub_1B1F1248C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1F124CC(_QWORD *a1)
{
  return sub_1B1F11618(a1);
}

uint64_t sub_1B1F124E0(_QWORD *a1)
{
  return sub_1B1F11718(a1);
}

uint64_t sub_1B1F124F4(char a1)
{
  return sub_1B1F11840(a1 & 1);
}

uint64_t sub_1B1F124FC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX8CastNode_srcType);
  sub_1B1B632F0(v2);
  sub_1B1D763B0(v2);
  sub_1B1B28D2C(v2);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  sub_1B1B25B50();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8CastNode_dstType);
  sub_1B1B632F0(v3);
  sub_1B1D763B0(v3);
  sub_1B1B28D2C(v3);
  swift_bridgeObjectRetain();
  sub_1B1B5A1CC();
  swift_bridgeObjectRelease();
  sub_1B222916C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B1DCD8E8();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B2228878();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 40;
}

uint64_t sub_1B1F12798()
{
  return type metadata accessor for AutoCastNode(0);
}

uint64_t type metadata accessor for AutoCastNode(uint64_t a1)
{
  return sub_1B17925E0(a1, qword_1EEF60B68);
}

uint64_t sub_1B1F127B4()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1F127E8(unint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  unint64_t v9;
  __int128 v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  _BOOL4 v24;
  char v25;
  char v26;
  unint64_t v27;
  __int128 v28;
  char v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  char v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t v48;
  char v49;
  char v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;

  v4 = a2 >> 60;
  if (!(a2 >> 60))
  {
    v13 = *(_QWORD *)(a2 + 16);
    sub_1B1B632F0(v13);
    v14 = sub_1B1F127E8(a1, v13);
    sub_1B1B28D2C(v13);
    return v14;
  }
  v5 = a1 >> 60;
  if (a1 >> 60 != 1)
  {
    if ((_DWORD)v5 != 8)
      goto LABEL_74;
    *((_QWORD *)&v7 + 1) = a1;
    *(_QWORD *)&v7 = a1 + 0x7FFFFFFFFFFFFFD0;
    v6 = v7 >> 3;
    if (v6 > 5 || v6 == 3)
      goto LABEL_74;
    if ((_DWORD)v4 == 8)
    {
      *((_QWORD *)&v10 + 1) = a2;
      *(_QWORD *)&v10 = a2 + 0x7FFFFFFFFFFFFFD0;
      v9 = v10 >> 3;
      if (v9 < 6 && ((0x37u >> v9) & 1) != 0)
        return 1;
    }
    if (v6 > 5 || v6 == 3 || (_DWORD)v4 != 1 || (v11 = *(_QWORD *)(a2 + 24), v11 >> 60 == 1))
    {
LABEL_74:
      if ((_DWORD)v5 == 8 && a1 == 0x8000000000000020)
      {
        sub_1B1D76C18(0x8000000000000040);
        if ((v12 & 1) != 0)
          return 0;
      }
      goto LABEL_29;
    }
    sub_1B1B632F0(*(_QWORD *)(a2 + 24));
    sub_1B1D76C18(a1);
    v23 = v54;
    sub_1B1B28D2C(v11);
LABEL_69:
    if ((v23 & 1) != 0)
      return 1;
    else
      return 2;
  }
  v16 = *(_QWORD *)(a1 + 24);
  if ((_DWORD)v4 == 1 && v16 >> 60 != 1)
  {
    v17 = *(_QWORD *)(a2 + 24);
    v18 = v17 >> 60;
    if (v17 >> 60 != 1)
    {
      v34 = (0x10101u >> (v16 - 48)) & 1;
      if (v16 + 0x7FFFFFFFFFFFFFD0 > 0x10)
        v34 = 0;
      if (v16 >> 60 == 8)
        v35 = v34;
      else
        v35 = 0;
      v36 = v17 + 0x7FFFFFFFFFFFFFD0;
      v37 = v36 > 0x10;
      v38 = (0x10101u >> v36) & 1;
      if (v37)
        v38 = 0;
      if ((_DWORD)v18 == 8)
        v39 = v38;
      else
        v39 = 0;
      if (v35 != v39)
        return 2;
      else
        return 1;
    }
    sub_1B1D76C18(a1);
    sub_1B1D76C18(a2);
    goto LABEL_62;
  }
  if ((_DWORD)v4 == 8 && (v16 & 0xF000000000000000) != 0x1000000000000000)
  {
    *((_QWORD *)&v20 + 1) = a2;
    *(_QWORD *)&v20 = a2 + 0x7FFFFFFFFFFFFFD0;
    v19 = v20 >> 3;
    if (v19 <= 5 && v19 != 3)
    {
      v21 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      sub_1B1B632F0(*(_QWORD *)(a1 + 24));
      sub_1B1D76C18(v16);
      v23 = v22;
      sub_1B1BE2B14(v21, v16);
      goto LABEL_69;
    }
  }
LABEL_29:
  v24 = v4 == 8;
  if (a2 == 0x8000000000000020 && (_DWORD)v4 == 8)
  {
    sub_1B1D76C18(0x8000000000000040);
    if ((v25 & 1) != 0)
      return 0;
    v24 = 1;
  }
  sub_1B1D76C18(a1);
  if (v24 && (v26 & 1) != 0)
  {
    *((_QWORD *)&v28 + 1) = a2;
    *(_QWORD *)&v28 = a2 + 0x7FFFFFFFFFFFFFD0;
    v27 = v28 >> 3;
    if (v27 < 6 && ((0x37u >> v27) & 1) != 0)
      return 0;
  }
  sub_1B1D76C18(a2);
  if ((v29 & 1) != 0)
  {
    if ((_DWORD)v5 != 8)
      goto LABEL_62;
    *((_QWORD *)&v31 + 1) = a1;
    *(_QWORD *)&v31 = a1 + 0x7FFFFFFFFFFFFFD0;
    v30 = v31 >> 3;
    if (v30 < 6 && ((0x37u >> v30) & 1) != 0)
      return 0;
  }
  else if ((_DWORD)v5 != 8)
  {
    goto LABEL_62;
  }
  if (a1 == 0x8000000000000040)
  {
    v32 = swift_allocObject();
    v33 = 0x8000000000000040;
LABEL_60:
    *(_QWORD *)(v32 + 16) = v33;
    sub_1B1D76C18(v32 | 0x2000000000000000);
    v41 = v40;
    swift_release();
    if ((v41 & 1) != 0)
      return 1;
    goto LABEL_62;
  }
  if (a1 == 0x8000000000000050)
  {
    v32 = swift_allocObject();
    v33 = 0x8000000000000050;
    goto LABEL_60;
  }
LABEL_62:
  v42 = swift_allocObject();
  *(_QWORD *)(v42 + 16) = 0x8000000000000050;
  sub_1B1D76C18(v42 | 0x2000000000000000);
  v44 = v43;
  swift_release();
  if ((v44 & 1) != 0)
  {
    v45 = swift_allocObject();
    *(_OWORD *)(v45 + 16) = xmmword_1B2286450;
    sub_1B1D76C18(v45 | 0x1000000000000000);
    v47 = v46;
    swift_release();
    if ((v47 & 1) != 0)
      return 0;
  }
  v48 = swift_allocObject();
  *(_OWORD *)(v48 + 16) = xmmword_1B2286450;
  sub_1B1D76C18(v48 | 0x1000000000000000);
  v50 = v49;
  swift_release();
  if ((v50 & 1) != 0)
  {
    v51 = swift_allocObject();
    *(_QWORD *)(v51 + 16) = 0x8000000000000050;
    sub_1B1D76C18(v51 | 0x2000000000000000);
    v53 = v52;
    swift_release();
    if ((v53 & 1) != 0)
      return 0;
  }
  return 2;
}

uint64_t sub_1B1F12C48()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1F12C6C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B1F12C90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  void *v4;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  id v19;

  v8 = *(_BYTE *)(v3 + 16);
  v9 = *(_BYTE *)(v3 + 17);
  v11 = *(_QWORD *)(v3 + 24);
  v10 = *(_QWORD *)(v3 + 32);
  type metadata accessor for _BinaryEncoder();
  v12 = swift_allocObject();
  *(_BYTE *)(v12 + 48) = 0;
  *(_QWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = 0;
  v13 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + 72) = 0;
  *(_QWORD *)(v12 + 80) = v13;
  *(_BYTE *)(v12 + 16) = v8;
  *(_BYTE *)(v12 + 17) = v9;
  *(_QWORD *)(v12 + 24) = v11;
  *(_QWORD *)(v12 + 32) = v13;
  *(_QWORD *)(v12 + 40) = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  v14 = sub_1B1F13070(a1, a2, a3);
  swift_release();
  if (v4)
  {
    v15 = sub_1B22294F0();
    swift_allocError();
    v17 = v16;
    sub_1B1F1A220();
    v17[3] = a2;
    v18 = sub_1B1A137F4(v17);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(v18, a1, a2);
    v19 = v4;
    sub_1B22294B4();
    (*(void (**)(uint64_t *, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, *MEMORY[0x1E0DEC4B0], v15);
    swift_willThrow();

  }
  return v14;
}

uint64_t sub_1B1F12E34()
{
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BinaryEncoder()
{
  return objc_opt_self();
}

_QWORD *sub_1B1F12E80()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v6;
  uint64_t ObjectType;
  uint64_t v8;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v1 = v0;
  v2 = v0[7];
  if (v2)
  {
    v3 = v0[8];
    v4 = (_QWORD *)v0[10];
    swift_unknownObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v1[10] = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v4 = sub_1B1FFEE5C(v4);
      v1[10] = v4;
    }
    v6 = v4[2] - 1;
    v11 = *(_OWORD *)&v4[2 * v6 + 4];
    v4[2] = v6;
    v1[10] = v4;
    ObjectType = swift_getObjectType();
    v12 = v2;
    MEMORY[0x1E0C80A78](ObjectType, v8);
    v10 = v11;
    (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)(v3 + 8) + 16))(sub_1B1F1A208);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_1B1F12FA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t ObjectType;
  uint64_t result;

  ObjectType = swift_getObjectType();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, ObjectType, a3);
  if (v3)
  {
    result = swift_unexpectedError();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F13018()
{
  sub_1B1F12E80();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryEncoder()
{
  return objc_opt_self();
}

uint64_t sub_1B1F13054()
{
  uint64_t v0;
  uint64_t result;

  if (*(_QWORD *)(v0 + 72))
    return *(_QWORD *)(v0 + 72);
  result = v0;
  *(_QWORD *)(v0 + 72) = v0;
  return result;
}

uint64_t sub_1B1F13070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  v9 = sub_1B1F13054();
  v10 = type metadata accessor for _BinaryEncoder.DataStore();
  v11 = swift_allocObject();
  *(_QWORD *)(v11 + 16) = v9;
  *(_OWORD *)(v11 + 24) = xmmword_1B226DCF0;
  v12 = v11 + 24;
  if (*(_QWORD *)(sub_1B1B3F2AC(0x30316E6962786676, 0xE800000000000000) + 16))
    sub_1B2228164();
  swift_release();
  sub_1B1F13684(*(_QWORD *)(v5 + 72), a1, v11, v10, a2, (uint64_t)&off_1E6383048, a3);
  if (!v4)
  {
    v12 = *(_QWORD *)(v11 + 24);
    sub_1B1A0DC90(v12, *(_QWORD *)(v11 + 32));
  }
  swift_release();
  return v12;
}

uint64_t sub_1B1F1318C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = v4;
  v8 = type metadata accessor for _BinaryEncoder.KeyedStore(0, a2, a3, a4);
  v9 = sub_1B1F13054();
  v10 = swift_allocObject();
  v13 = sub_1B1F13C40(v9, v10, v11, v12);
  sub_1B1F196A4((uint64_t)v13, v5, v8, (uint64_t)&off_1E6382F80);
  v15 = type metadata accessor for _BinaryKeyedEncodingContainer(0, a2, a3, v14);
  swift_bridgeObjectRetain();
  MEMORY[0x1B5E23E74](&unk_1B229F964, v15);
  sub_1B22299D0();
  return swift_release();
}

uint64_t *sub_1B1F13274(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_allocObject();
  return sub_1B1F13C40(a1, v2, v3, v4);
}

uint64_t sub_1B1F132AC@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v3 = sub_1B1F13054();
  v4 = *(_BYTE *)(v1 + 48);
  type metadata accessor for _BinaryEncoder.UnkeyedStore();
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 24) = 0u;
  *(_OWORD *)(v5 + 40) = 0u;
  *(_DWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = MEMORY[0x1E0DEE9D8];
  *(_BYTE *)(v5 + 73) = 0;
  *(_QWORD *)(v5 + 16) = v3;
  *(_BYTE *)(v5 + 72) = v4;
  *(_BYTE *)(v1 + 48) = 0;
  v6 = *(_QWORD **)(v1 + 80);
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v1 + 80) = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v6 = sub_1B1C634B0(0, v6[2] + 1, 1, v6);
    *(_QWORD *)(v1 + 80) = v6;
  }
  v9 = v6[2];
  v8 = v6[3];
  if (v9 >= v8 >> 1)
  {
    v6 = sub_1B1C634B0(v8 > 1, v9 + 1, 1, v6);
    *(_QWORD *)(v1 + 80) = v6;
  }
  v6[2] = v9 + 1;
  v10 = &v6[2 * v9];
  v10[4] = v5;
  v10[5] = &off_1E6382FD0;
  v11 = *(_QWORD *)(v1 + 72);
  v12 = *(_QWORD *)(v1 + 32);
  a1[3] = &type metadata for _BinaryUnkeyedEncodingContainer;
  a1[4] = sub_1B1F1A118();
  swift_bridgeObjectRetain();
  result = swift_release();
  *a1 = v11;
  a1[1] = v5;
  a1[2] = v12;
  return result;
}

uint64_t sub_1B1F133E0@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v3 = sub_1B1F13054();
  type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  v4 = swift_allocObject();
  *(_BYTE *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 16) = v3;
  *(_OWORD *)(v4 + 24) = xmmword_1B226DCF0;
  v5 = (_QWORD *)v1[10];
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[10] = v5;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v5 = sub_1B1C634B0(0, v5[2] + 1, 1, v5);
    v1[10] = v5;
  }
  v8 = v5[2];
  v7 = v5[3];
  if (v8 >= v7 >> 1)
  {
    v5 = sub_1B1C634B0(v7 > 1, v8 + 1, 1, v5);
    v1[10] = v5;
  }
  v5[2] = v8 + 1;
  v9 = &v5[2 * v8];
  v9[4] = v4;
  v9[5] = &off_1E6383048;
  v10 = v1[4];
  v11 = v1[9];
  a1[3] = &type metadata for _BinarySingleValueEncodingContainer;
  a1[4] = sub_1B1F1A0D4();
  swift_bridgeObjectRetain();
  result = swift_release();
  *a1 = v10;
  a1[1] = v4;
  a1[2] = v11;
  return result;
}

uint64_t sub_1B1F134F8()
{
  uint64_t v0;
  char v1;

  swift_getMetatypeMetadata();
  if (sub_1B22287C4() == 0xD00000000000001ALL && v0 == 0x80000001B2344100)
  {
    swift_bridgeObjectRelease();
    v1 = 1;
  }
  else
  {
    v1 = sub_1B2229D24();
    swift_bridgeObjectRelease();
  }
  return v1 & 1;
}

uint64_t sub_1B1F13598()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1F135A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F1318C(a1, a2, a3, a4);
}

uint64_t sub_1B1F135C4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1F132AC(a1);
}

uint64_t sub_1B1F135E4@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B1F133E0(a1);
}

uint64_t sub_1B1F13604(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t *v7;
  uint64_t v9[5];

  v9[4] = a4;
  v9[3] = a3;
  v7 = sub_1B1A137F4(v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))(v7, v4, a3);
  a1(v9);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
}

uint64_t sub_1B1F13684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t result;
  _QWORD *v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  _QWORD v15[5];

  if (*(_QWORD *)(a1 + 24) && sub_1B1F1E31C(a5, a5, a7))
    *(_BYTE *)(a1 + 48) = 1;
  v15[3] = type metadata accessor for _BinaryEncoder();
  v15[4] = sub_1B1F1A168();
  v15[0] = a1;
  swift_retain();
  sub_1B22285CC();
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
  if (!v7)
  {
    v12 = *(_QWORD **)(a1 + 80);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 80) = v12;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B1FFEE5C(v12);
      v12 = (_QWORD *)isUniquelyReferenced_nonNull_native;
      *(_QWORD *)(a1 + 80) = isUniquelyReferenced_nonNull_native;
    }
    --v12[2];
    *(_QWORD *)(a1 + 80) = v12;
    v15[0] = a3;
    MEMORY[0x1E0C80A78](isUniquelyReferenced_nonNull_native, v14);
    (*(void (**)(uint64_t (*)(uint64_t)))(*(_QWORD *)(a6 + 8) + 16))(sub_1B1F1A1B0);
    return swift_unknownObjectRelease();
  }
  return result;
}

void sub_1B1F137F8()
{
  __asm { BR              X12 }
}

uint64_t sub_1B1F13844()
{
  char v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[12];

  sub_1B1EFD960(0, &qword_1EEF60BF8, MEMORY[0x1E0DEC628]);
  v2 = v1;
  v4[3] = v1;
  v4[4] = sub_1B1F1994C();
  LOBYTE(v4[0]) = v0;
  sub_1B19FA070(v4, v2);
  sub_1B2228158();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B1F138E4()
{
  uint64_t v0;

  sub_1B1A0DADC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryEncoder.DataStore()
{
  return objc_opt_self();
}

uint64_t sub_1B1F13928(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[3];
  v3 = a1[4];
  sub_1B19FA070(a1, v2);
  v5 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  sub_1B1A0DC90(v5, v4);
  sub_1B1F19804(v5, v4);
  v7 = v6;
  sub_1B1A0DADC(v5, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v7, v2, v3);
  return swift_release();
}

uint64_t sub_1B1F139C4(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F13604(a1, a2, a3, a4);
}

void sub_1B1F139D8()
{
  sub_1B1F137F8();
}

uint64_t sub_1B1F13A04(uint64_t result)
{
  if (*(_QWORD *)(result + 16))
    return sub_1B2228164();
  return result;
}

uint64_t sub_1B1F13A40()
{
  uint64_t v0;

  sub_1B1A0DADC(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryEncoder.SingleValueDataStore()
{
  return objc_opt_self();
}

uint64_t sub_1B1F13A84()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B1F13B00()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 32))
  {
    v1 = *(_QWORD *)(v0 + 32);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 16);
    type metadata accessor for _BinaryEncoder.DataStore();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = v2;
    *(_OWORD *)(v1 + 24) = xmmword_1B226DCF0;
    *(_QWORD *)(v0 + 32) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1B1F13B6C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  if (!v1)
  {
    v1 = sub_1B1F13B00();
    swift_release();
    *(_QWORD *)(v0 + 40) = v1;
  }
  return v1;
}

uint64_t sub_1B1F13BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 48))
  {
    v1 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 16);
    type metadata accessor for _BinaryEncoder.DataStore();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = v2;
    *(_OWORD *)(v1 + 24) = xmmword_1B226DCF0;
    *(_QWORD *)(v0 + 48) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1B1F13C0C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  if (!v1)
  {
    v1 = sub_1B1F13BA0();
    swift_release();
    *(_QWORD *)(v0 + 56) = v1;
  }
  return v1;
}

uint64_t *sub_1B1F13C40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v6 = *v4;
  *((_DWORD *)v4 + 6) = 0;
  v7 = MEMORY[0x1E0DEE9E0];
  *((_OWORD *)v4 + 2) = 0u;
  *((_OWORD *)v4 + 3) = 0u;
  v4[8] = v7;
  *((_BYTE *)v4 + 72) = 0;
  v4[2] = a1;
  type metadata accessor for _BinaryEncoder.KeyedStore(0, *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), a4);
  v8 = 0;
  if (*(_BYTE *)(a1 + 17) == 1)
  {
    type metadata accessor for _BinaryEncoder();
    v8 = sub_1B1F134F8() ^ 1;
  }
  *((_BYTE *)v4 + 72) = v8 & 1;
  return v4;
}

void sub_1B1F13CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v10 = sub_1B1F13BA0();
  sub_1B1F19FF4(v10);
  v12 = v11;
  v14 = v13;
  swift_release();
  if (!v6)
  {
    v15 = sub_1B1F13B6C();
    sub_1B1F13D94(v15, v5, a1, v14 - v12, a4, a5);
    ++*(_DWORD *)(v5 + 24);
  }
}

void sub_1B1F13D94(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v22[5];

  v11 = *(_QWORD *)(a5 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = (char *)&v22[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v15 + 72) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v14, a3, a5, v12);
    v16 = sub_1B222A1BC();
    if ((v17 & 1) == 0)
    {
      if ((v16 & 0x8000000000000000) != 0 || HIDWORD(v16))
        goto LABEL_21;
      sub_1B1F14158(v16);
      if (!v6)
        goto LABEL_16;
LABEL_15:
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
      return;
    }
    v19 = sub_1B1F1DF58();
    if (v19 > 0xFF || v19 >= 0x10u)
    {
      swift_retain();
      sub_1B1F137F8();
      sub_1B1F15C24(v19);
      swift_release();
      if (v6)
        goto LABEL_15;
    }
    else
    {
      sub_1B1F137F8();
    }
LABEL_16:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a5);
    goto LABEL_17;
  }
  v22[3] = a5;
  v22[4] = a6;
  v18 = sub_1B1A137F4(v22);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v11 + 16))(v18, a3, a5);
  sub_1B1F13FE4(v22);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
  if (v6)
    return;
LABEL_17:
  if ((a4 & 0x8000000000000000) != 0 || HIDWORD(a4))
  {
LABEL_21:
    sub_1B222967C();
    __break(1u);
    return;
  }
  sub_1B1F14158(a4);
}

void sub_1B1F13FE4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[5];

  v2 = v1;
  sub_1B19FA070(a1, a1[3]);
  v4 = sub_1B222A1BC();
  if ((v5 & 1) != 0)
  {
    sub_1B19FA070(a1, a1[3]);
    v6 = sub_1B222A1A4();
    v8 = v7;
    v9[3] = type metadata accessor for _BinaryEncoder.DataStore();
    v9[4] = &off_1E6383020;
    v9[0] = v2;
    swift_retain();
    sub_1B1F1709C(v9, v6, v8);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
    swift_bridgeObjectRelease();
  }
  else if ((v4 & 0x8000000000000000) != 0 || HIDWORD(v4))
  {
    sub_1B222967C();
    __break(1u);
  }
  else
  {
    sub_1B1F14158(v4);
  }
}

void sub_1B1F14158(unsigned int a1)
{
  if (a1 >= 0xFF)
  {
    swift_retain();
    sub_1B1F137F8();
    if (a1 >= 0xFFFF)
      sub_1B1F15C24(a1);
    else
      sub_1B1F15CBC(a1);
  }
  else
  {
    if (a1 < 0x10u)
    {
      sub_1B1F137F8();
      return;
    }
    swift_retain();
    sub_1B1F137F8();
    sub_1B1F15B90(a1);
  }
  swift_release();
}

uint64_t sub_1B1F14234(unsigned int a1, uint64_t a2, uint64_t a3)
{
  if (a1 <= 0xFE)
    return sub_1B1F15A00(a1, a2, a3);
  if (a1 > 0xFFFE)
    return sub_1B1F152AC(a1, a2, a3);
  return sub_1B1F15A7C(a1, a2, a3);
}

uint64_t sub_1B1F14274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  _QWORD v14[3];
  uint64_t v15;

  sub_1B19FA198(a3, (uint64_t)v14);
  sub_1B19FA070(v14, v15);
  v6 = sub_1B222A1A4();
  v8 = v7;
  sub_1B19FA070(v14, v15);
  v9 = sub_1B222A1BC();
  v11 = v10 & 1;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v14[0] = *(_QWORD *)(v3 + 64);
  *(_QWORD *)(v3 + 64) = 0x8000000000000000;
  sub_1B1B89CF8(a1, a2, v6, v8, v9, v11, isUniquelyReferenced_nonNull_native);
  *(_QWORD *)(v3 + 64) = v14[0];
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F1437C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[2];
  int v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v4 = swift_bridgeObjectRetain();
  sub_1B1F19DC8(v4, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1F19A04);
  result = swift_bridgeObjectRelease();
  if (!v2)
  {
    if (*(_BYTE *)(v1 + 72))
      v6 = -32;
    else
      v6 = -64;
    v7 = a1[3];
    v8 = a1[4];
    sub_1B19FA070(a1, v7);
    v27 = *(_DWORD *)(v1 + 24);
    v28 = v6;
    (*(void (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(v8 + 16))(sub_1B1F199A4, v26, v7, v8);
    v9 = sub_1B1F13B6C();
    sub_1B19FA198((uint64_t)a1, (uint64_t)v26);
    v10 = v29;
    v11 = v30;
    sub_1B19FA070(v26, v29);
    v13 = *(_QWORD *)(v9 + 24);
    v12 = *(_QWORD *)(v9 + 32);
    sub_1B1A0DC90(v13, v12);
    sub_1B1F19804(v13, v12);
    v15 = v14;
    sub_1B1A0DADC(v13, v12);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15, v10, v11);
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
    v16 = sub_1B1F13C0C();
    sub_1B19FA198((uint64_t)a1, (uint64_t)v23);
    v17 = v24;
    v18 = v25;
    sub_1B19FA070(v23, v24);
    v20 = *(_QWORD *)(v16 + 24);
    v19 = *(_QWORD *)(v16 + 32);
    sub_1B1A0DC90(v20, v19);
    sub_1B1F19804(v20, v19);
    v22 = v21;
    sub_1B1A0DADC(v20, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v22, v17, v18);
    swift_release();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
  }
  return result;
}

uint64_t sub_1B1F14564(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(_QWORD *, uint64_t, uint64_t);
  _QWORD v12[5];

  ObjectType = swift_getObjectType();
  v8 = swift_getObjectType();
  v9 = *(_QWORD *)(a2 + 8);
  v12[3] = v8;
  v12[4] = v9;
  v12[0] = a1;
  v10 = *(void (**)(_QWORD *, uint64_t, uint64_t))(a4 + 16);
  swift_unknownObjectRetain();
  v10(v12, ObjectType, a4);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
}

void sub_1B1F145F8()
{
  sub_1B1F13C0C();
  sub_1B1F137F8();
}

uint64_t sub_1B1F14634(uint64_t a1)
{
  uint64_t result;

  result = sub_1B1F13C0C();
  if (*(_QWORD *)(a1 + 16))
    return sub_1B2228164();
  return result;
}

uint64_t sub_1B1F1467C()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1F146A8()
{
  sub_1B1F1467C();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryEncoder.KeyedStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BinaryEncoder.KeyedStore);
}

uint64_t sub_1B1F146D0(_QWORD *a1)
{
  return sub_1B1F1437C(a1);
}

uint64_t sub_1B1F146E4()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)v0 + 16);
}

void sub_1B1F146F0()
{
  sub_1B1F145F8();
}

uint64_t sub_1B1F14710(uint64_t a1)
{
  return sub_1B1F14634(a1);
}

uint64_t sub_1B1F14730()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 24))
  {
    v1 = *(_QWORD *)(v0 + 24);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 16);
    type metadata accessor for _BinaryEncoder.DataStore();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = v2;
    *(_OWORD *)(v1 + 24) = xmmword_1B226DCF0;
    *(_QWORD *)(v0 + 24) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1B1F1479C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  if (!v1)
  {
    v1 = sub_1B1F14730();
    swift_release();
    *(_QWORD *)(v0 + 32) = v1;
  }
  return v1;
}

uint64_t sub_1B1F147D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 40))
  {
    v1 = *(_QWORD *)(v0 + 40);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 16);
    type metadata accessor for _BinaryEncoder.DataStore();
    v1 = swift_allocObject();
    *(_QWORD *)(v1 + 16) = v2;
    *(_OWORD *)(v1 + 24) = xmmword_1B226DCF0;
    *(_QWORD *)(v0 + 40) = v1;
    swift_retain();
  }
  swift_retain();
  return v1;
}

uint64_t sub_1B1F1483C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  if (!v1)
  {
    v1 = sub_1B1F147D0();
    swift_release();
    *(_QWORD *)(v0 + 48) = v1;
  }
  return v1;
}

uint64_t sub_1B1F14870(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;

  v4 = v3;
  if (*(_BYTE *)(a1 + 73) == 1)
  {
    v13 = type metadata accessor for _BinaryEncoder.UnkeyedStore();
    v14 = &off_1E6382FF8;
    v11 = a1;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_1B1F1709C(&v11, a2, a3);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v11);
    return swift_bridgeObjectRelease_n();
  }
  *(_BYTE *)(a1 + 73) = 1;
  swift_bridgeObjectRetain();
  v8 = sub_1B1F1479C();
  swift_bridgeObjectRetain();
  sub_1B1F14BBC(v8);
  if (v4)
    return swift_bridgeObjectRelease_n();
  sub_1B1F1483C();
  v9 = v12 - v11;
  if (v12 - v11 >= 0 && !HIDWORD(v9))
  {
    sub_1B1F14158(v9);
    ++*(_DWORD *)(a1 + 56);
    *(_BYTE *)(a1 + 73) = 0;
    return swift_bridgeObjectRelease_n();
  }
  swift_bridgeObjectRelease_n();
  result = sub_1B222967C();
  __break(1u);
  return result;
}

void sub_1B1F14A3C(void (*a1)(uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _UNKNOWN **v9;

  if ((*(_BYTE *)(v1 + 73) & 1) != 0)
  {
    v8 = type metadata accessor for _BinaryEncoder.UnkeyedStore();
    v9 = &off_1E6382FF8;
    v6 = v1;
    swift_retain();
    a1(&v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v6);
  }
  else
  {
    *(_BYTE *)(v1 + 73) = 1;
    v4 = sub_1B1F1479C();
    sub_1B1F14D08(v4);
    if (!v2)
    {
      sub_1B1F1483C();
      v5 = v7 - v6;
      if (v7 - v6 < 0 || HIDWORD(v5))
      {
        sub_1B222967C();
        __break(1u);
      }
      else
      {
        sub_1B1F14158(v5);
        ++*(_DWORD *)(v1 + 56);
        *(_BYTE *)(v1 + 73) = 0;
      }
    }
  }
}

void sub_1B1F14BBC(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1B1F14C14()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[15];

  v6[3] = type metadata accessor for _BinaryEncoder.UnkeyedStore();
  v6[4] = &off_1E6382FF8;
  v6[0] = v4;
  swift_retain();
  sub_1B1F1709C(v6, v3, v0);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
  if (!v1)
    __asm { BR              X10 }
  return swift_bridgeObjectRelease();
}

void sub_1B1F14D08(uint64_t a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1B1F14D60()
{
  uint64_t v1;
  void (*v2)(_QWORD *);
  uint64_t v3;
  uint64_t result;
  _QWORD v5[15];

  v5[3] = type metadata accessor for _BinaryEncoder.UnkeyedStore();
  v5[4] = &off_1E6382FF8;
  v5[0] = v3;
  swift_retain();
  v2(v5);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  if (!v1)
    __asm { BR              X13 }
  return result;
}

uint64_t sub_1B1F14E1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  void (*v22)(_QWORD *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  _UNKNOWN **v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  int v32;
  char v33;
  uint64_t v34;
  _UNKNOWN **v35;
  uint64_t v36;

  v3 = v1;
  v4 = (uint64_t)a1;
  if (*(_BYTE *)(v1 + 72))
    v5 = 0x80;
  else
    v5 = -96;
  v6 = a1[3];
  v7 = a1[4];
  sub_1B19FA070(a1, v6);
  v32 = *(_DWORD *)(v1 + 56);
  v33 = v5;
  result = (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(v7 + 16))(sub_1B1F199A4, v31, v6, v7);
  if (!v2)
  {
    if (*(_BYTE *)(v1 + 72) == 1)
    {
      v9 = sub_1B1F1483C();
      sub_1B19FA198(v4, (uint64_t)v31);
      v10 = v34;
      v11 = v35;
      sub_1B19FA070(v31, v34);
      v13 = *(_QWORD *)(v9 + 24);
      v12 = *(_QWORD *)(v9 + 32);
      sub_1B1A0DC90(v13, v12);
      sub_1B1F19804(v13, v12);
      v15 = v14;
      sub_1B1A0DADC(v13, v12);
      ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v11[4])(v15, v10, v11);
      swift_release();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
    }
    v16 = *(_QWORD *)(v3 + 64);
    v17 = *(_QWORD *)(v16 + 16);
    if (v17)
    {
      v30 = v4;
      swift_bridgeObjectRetain_n();
      v36 = v16;
      v18 = (uint64_t *)(v16 + 40);
      do
      {
        v19 = *v18;
        ObjectType = swift_getObjectType();
        v21 = sub_1B1F14730();
        v34 = type metadata accessor for _BinaryEncoder.DataStore();
        v35 = &off_1E6383020;
        v31[0] = v21;
        v22 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v19 + 16);
        swift_unknownObjectRetain();
        v22(v31, ObjectType, v19);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
        swift_unknownObjectRelease();
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease_n();
      v4 = v30;
    }
    v23 = sub_1B1F1479C();
    sub_1B19FA198(v4, (uint64_t)v31);
    v24 = v34;
    v25 = v35;
    sub_1B19FA070(v31, v34);
    v27 = *(_QWORD *)(v23 + 24);
    v26 = *(_QWORD *)(v23 + 32);
    sub_1B1A0DC90(v27, v26);
    sub_1B1F19804(v27, v26);
    v29 = v28;
    sub_1B1A0DADC(v27, v26);
    ((void (*)(uint64_t, uint64_t, _UNKNOWN **))v25[4])(v29, v24, v25);
    swift_release();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
  }
  return result;
}

uint64_t sub_1B1F150B0()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for _BinaryEncoder.UnkeyedStore()
{
  return objc_opt_self();
}

uint64_t sub_1B1F15108(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for BinaryEncoder.Options(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for BinaryEncoder.Options(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for BinaryEncoder.Options()
{
  return &type metadata for BinaryEncoder.Options;
}

uint64_t sub_1B1F151D4(_QWORD *a1)
{
  return sub_1B1F14E1C(a1);
}

void sub_1B1F151E8(void (*a1)(uint64_t *))
{
  sub_1B1F14A3C(a1);
}

uint64_t sub_1B1F15208()
{
  sub_1B1F1479C();
  return sub_1B2228164();
}

uint64_t sub_1B1F15260(uint64_t a1)
{
  uint64_t result;

  result = sub_1B1F1479C();
  if (*(_QWORD *)(a1 + 16))
    return sub_1B2228164();
  return result;
}

uint64_t sub_1B1F152AC(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  int v8;

  v8 = a1;
  v5 = sub_1B1EFD760();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEE0F8];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F15328()
{
  uint64_t v0;
  char *v2;

  if (*(_BYTE *)(v0 + 73) != 1)
  {
    *(_BYTE *)(v0 + 73) = 1;
    v2 = (char *)&loc_1B1F153C0 + 4 * byte_1B229F5F4[*(_QWORD *)(sub_1B1F1479C() + 32) >> 62];
    __asm { BR              X12 }
  }
  swift_retain();
  sub_1B1F1479C();
  sub_1B2228164();
  return swift_release();
}

uint64_t sub_1B1F15518(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1[3];
  v2 = a1[4];
  sub_1B19FA070(a1, v1);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v2 + 24))(0, v1, v2);
}

uint64_t sub_1B1F15564()
{
  uint64_t v0;
  char *v2;

  if (*(_BYTE *)(v0 + 73) != 1)
  {
    *(_BYTE *)(v0 + 73) = 1;
    v2 = (char *)&loc_1B1F15608 + 4 * byte_1B229F5FC[*(_QWORD *)(sub_1B1F1479C() + 32) >> 62];
    __asm { BR              X12 }
  }
  swift_retain();
  sub_1B1F1479C();
  sub_1B2228164();
  return swift_release();
}

void sub_1B1F15700()
{
  char v0;

  if ((v0 & 1) == 0)
    JUMPOUT(0x1B1F15630);
  JUMPOUT(0x1B1F15620);
}

uint64_t sub_1B1F15794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  uint64_t v8;

  v8 = a1;
  v5 = sub_1B1EFE030();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEDC60];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F15810(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  char v8;

  v8 = a1;
  v5 = sub_1B1EFE0FC();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEDA70];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F1588C(__int16 a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  __int16 v8;

  v8 = a1;
  v5 = sub_1B1EFE0B8();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEDB58];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F15908(int a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  int v8;

  v8 = a1;
  v5 = sub_1B1EFE074();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEDBC8];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F15984(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  uint64_t v8;

  v8 = a1;
  v5 = sub_1B1EFD71C();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEE190];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F15A00(char a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  char v8;

  v8 = a1;
  v5 = sub_1B1EFD7E8();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEDE70];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F15A7C(__int16 a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  _QWORD v7[8];
  __int16 v8;

  v8 = a1;
  v5 = sub_1B1EFD7A4();
  v7[2] = a2;
  v7[3] = MEMORY[0x1E0DEE068];
  v7[4] = a3;
  v7[5] = v5;
  v7[6] = &v8;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a3 + 16))(sub_1B1F199C0, v7, a2, a3);
}

uint64_t sub_1B1F15AF8(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = bswap64(a1);
  if (sub_1B1F19754(&v2, &v3)[2])
    sub_1B2228164();
  return swift_release();
}

uint64_t sub_1B1F15B90(char a1)
{
  char v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  if (sub_1B1F19754(&v2, &v3)[2])
    sub_1B2228164();
  return swift_release();
}

uint64_t sub_1B1F15C24(unsigned int a1)
{
  unsigned int v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = bswap32(a1);
  if (sub_1B1F19754(&v2, &v3)[2])
    sub_1B2228164();
  return swift_release();
}

uint64_t sub_1B1F15CBC(unsigned int a1)
{
  __int16 v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v2 = bswap32(a1) >> 16;
  if (sub_1B1F19754(&v2, &v3)[2])
    sub_1B2228164();
  return swift_release();
}

uint64_t sub_1B1F15D58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v10 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B222961C();
  v18 = a2;
  v19 = a3;
  v20 = a4;
  v21 = a5;
  v22 = v5;
  v13 = sub_1B1A203F8();
  sub_1B1EF311C((uint64_t)v12, (uint64_t)sub_1B1F199E0, (uint64_t)v17, a3, v13, MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDB38], (uint64_t)&v16);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a3);
}

uint64_t sub_1B1F15E88(_BYTE *a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8)
{
  uint64_t v8;
  uint64_t result;

  sub_1B1F19754(a1, a2);
  (*(void (**)(void))(a6 + 32))();
  result = swift_release();
  if (v8)
    *a8 = v8;
  return result;
}

uint64_t sub_1B1F15EFC(_QWORD *a1, unsigned int a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;

  v17 = a2;
  if (a2 <= 0xFF && a2 <= 0xFu)
  {
    v15 = a1[3];
    v16 = a1[4];
    sub_1B19FA070(a1, v15);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v16 + 24))(a2 | 0x20, v15, v16);
  }
  else
  {
    v9 = a1[3];
    v10 = a1[4];
    sub_1B19FA070(a1, v9);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(50, v9, v10);
    if (!v4)
    {
      v12 = a1[3];
      v13 = a1[4];
      sub_1B19FA070(a1, v12);
      v14 = a3();
      return sub_1B1F15D58((uint64_t)&v17, v12, a4, v13, v14);
    }
  }
  return result;
}

uint64_t sub_1B1F16000(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v13 = a2;
  if (a2 <= 0xFF && (v4 = a2, a2 <= 0xFu))
  {
    v11 = a1[3];
    v12 = a1[4];
    sub_1B19FA070(a1, v11);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v12 + 24))(v4 | 0x20u, v11, v12);
  }
  else
  {
    v5 = a1[3];
    v6 = a1[4];
    sub_1B19FA070(a1, v5);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(51, v5, v6);
    if (!v2)
    {
      v8 = a1[3];
      v9 = a1[4];
      sub_1B19FA070(a1, v8);
      v10 = sub_1B1EFE030();
      return sub_1B1F15D58((uint64_t)&v13, v8, MEMORY[0x1E0DEDC60], v9, v10);
    }
  }
  return result;
}

uint64_t sub_1B1F160F8(_QWORD *a1, int a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  __int16 v18;

  v18 = a2;
  if ((unsigned __int16)a2 >= 0x100u || a2 > 0xFu)
  {
    v9 = a1[3];
    v10 = a1[4];
    sub_1B19FA070(a1, v9);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 24))(49, v9, v10);
    if (!v4)
    {
      v11 = a1[3];
      v12 = a1[4];
      sub_1B19FA070(a1, v11);
      v13 = a3();
      return sub_1B1F15D58((uint64_t)&v18, v11, a4, v12, v13);
    }
  }
  else
  {
    v15 = a1[3];
    v16 = a1[4];
    sub_1B19FA070(a1, v15);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v16 + 24))(a2 | 0x20u, v15, v16);
  }
  return result;
}

uint64_t sub_1B1F161FC(_QWORD *a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;

  v13 = a2;
  if (a2 < 0x100 && a2 <= 0xFu)
  {
    v11 = a1[3];
    v12 = a1[4];
    sub_1B19FA070(a1, v11);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v12 + 24))(a2 | 0x20, v11, v12);
  }
  else
  {
    v5 = a1[3];
    v6 = a1[4];
    sub_1B19FA070(a1, v5);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 24))(50, v5, v6);
    if (!v2)
    {
      v8 = a1[3];
      v9 = a1[4];
      sub_1B19FA070(a1, v8);
      v10 = sub_1B1EFD760();
      return sub_1B1F15D58((uint64_t)&v13, v8, MEMORY[0x1E0DEE0F8], v9, v10);
    }
  }
  return result;
}

uint64_t sub_1B1F162F4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  char *v31;
  void (*v32)(char *, uint64_t, uint64_t, double);
  char v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  char *v36;
  uint64_t v37;
  char *v38;
  void (*v39)(char *, uint64_t);
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  char v44;
  uint64_t v45;
  char *v46;
  char v47;
  unsigned int v48;
  char *v49;
  unsigned __int8 v50;
  char *v51;
  char v52;
  unsigned __int8 v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[2];
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  void (*v72)(char *, uint64_t);
  unsigned __int8 v73;

  v70 = a1;
  v63 = a6;
  v8 = *(_QWORD *)(a6 + 8);
  v65 = *(_QWORD *)(*(_QWORD *)(v8 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v67 = (char *)v60 - v11;
  v12 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v61 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16, v17);
  v66 = (char *)v60 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)v60 - v21;
  MEMORY[0x1E0C80A78](v23, v24);
  v26 = (char *)v60 - v25;
  v29 = MEMORY[0x1E0C80A78](v27, v28);
  v31 = (char *)v60 - v30;
  v32 = *(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16);
  v62 = a2;
  v32((char *)v60 - v30, a2, a4, v29);
  v68 = v8;
  LOBYTE(a2) = sub_1B22292C8();
  v71 = v31;
  ((void (*)(char *, char *, uint64_t))v32)(v26, v31, a4);
  v64 = v22;
  v60[1] = AssociatedTypeWitness;
  if ((a2 & 1) != 0)
  {
    swift_getAssociatedConformanceWitness();
    sub_1B2229F88();
    sub_1B2229CC4();
    v33 = sub_1B222865C();
    v34 = v22;
    v35 = *(void (**)(char *, uint64_t))(v12 + 8);
    v35(v34, a4);
    v72 = v35;
    v35(v26, a4);
    v36 = v71;
    if ((v33 & 1) != 0)
      goto LABEL_18;
  }
  else
  {
    v72 = *(void (**)(char *, uint64_t))(v12 + 8);
    v72(v26, a4);
    v36 = v71;
  }
  v37 = sub_1B22292BC();
  v38 = v66;
  ((void (*)(char *, char *, uint64_t))v32)(v66, v36, a4);
  if (v37 <= 7)
  {
    v39 = v72;
    v72(v38, a4);
    goto LABEL_7;
  }
  v73 = -1;
  v44 = sub_1B22292C8();
  v45 = sub_1B22292BC();
  if ((v44 & 1) != 0)
  {
    if (v45 <= 8)
    {
      swift_getAssociatedConformanceWitness();
      sub_1B2229F88();
      v46 = v64;
      sub_1B2229CC4();
      v47 = sub_1B2228650();
      v39 = v72;
      v72(v46, a4);
      v48 = v73;
      v49 = v61;
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v61, v38, a4);
      if ((v47 & 1) != 0)
      {
        v50 = sub_1B22292B0();
        v39(v49, a4);
        v36 = v71;
        if (v48 < v50)
          goto LABEL_18;
      }
      else
      {
        v39(v49, a4);
        v36 = v71;
      }
      goto LABEL_7;
    }
LABEL_15:
    sub_1B1EFDFEC();
    v51 = v64;
    sub_1B222928C();
    v52 = sub_1B222865C();
    v39 = v72;
    v72(v51, a4);
    v39(v38, a4);
    if ((v52 & 1) != 0)
      goto LABEL_18;
    goto LABEL_7;
  }
  if (v45 >= 9)
    goto LABEL_15;
  v53 = sub_1B22292B0();
  v39 = v72;
  v72(v38, a4);
  if (v73 < v53)
  {
LABEL_18:
    v72(v36, a4);
    goto LABEL_19;
  }
LABEL_7:
  v40 = sub_1B22292B0();
  v39(v36, a4);
  if (v40 <= 0xFu)
  {
    v41 = v70[3];
    v42 = v70[4];
    sub_1B19FA070(v70, v41);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v42 + 24))(v40 | 0x20u, v41, v42);
  }
LABEL_19:
  v54 = v70;
  v55 = v70[3];
  v56 = v70[4];
  sub_1B19FA070(v70, v55);
  v57 = v69;
  result = sub_1B1F1E04C(a4);
  if (!v57)
  {
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v56 + 24))(result | 0x30, v55, v56);
    v58 = v54[3];
    v59 = v54[4];
    sub_1B19FA070(v54, v58);
    return sub_1B1F15D58(v62, v58, a4, v59, v63);
  }
  return result;
}

uint64_t sub_1B1F1687C(_QWORD *a1, char a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;

  v8 = a1[3];
  v7 = a1[4];
  sub_1B19FA070(a1, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  if (a3 == 0.0)
    return v9(64, v8, v7);
  if ((a2 & 1) != 0)
    v11 = 83;
  else
    v11 = 66;
  result = v9(v11, v8, v7);
  if (!v3)
  {
    v12 = a1[3];
    v13 = a1[4];
    sub_1B19FA070(a1, v12);
    v15 = a3;
    v14 = sub_1B1EFD760();
    return sub_1B1F15D58((uint64_t)&v15, v12, MEMORY[0x1E0DEE0F8], v13, v14);
  }
  return result;
}

uint64_t sub_1B1F16964(_QWORD *a1, char a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double v15;

  v8 = a1[3];
  v7 = a1[4];
  sub_1B19FA070(a1, v8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  if (a3 == 0.0)
    return v9(64, v8, v7);
  if ((a2 & 1) != 0)
    v11 = 84;
  else
    v11 = 67;
  result = v9(v11, v8, v7);
  if (!v3)
  {
    v12 = a1[3];
    v13 = a1[4];
    sub_1B19FA070(a1, v12);
    v15 = a3;
    v14 = sub_1B1EFD71C();
    return sub_1B1F15D58((uint64_t)&v15, v12, MEMORY[0x1E0DEE190], v13, v14);
  }
  return result;
}

uint64_t sub_1B1F16A4C(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;

  v37 = a1;
  v35 = a3;
  v38 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v33 = AssociatedTypeWitness;
  MEMORY[0x1E0C80A78](AssociatedTypeWitness, v10);
  v34 = (char *)&v32 - v11;
  v12 = *(_QWORD *)(a5 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_getAssociatedTypeWitness();
  MEMORY[0x1E0C80A78](v17, v18);
  swift_getAssociatedConformanceWitness();
  sub_1B2229F7C();
  sub_1B2229CC4();
  v19 = v37;
  v20 = sub_1B22286E0();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, a5);
  v22 = v19[3];
  v21 = v19[4];
  sub_1B19FA070(v19, v22);
  if ((v20 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 24))(64, v22, v21);
  v24 = (uint64_t)v34;
  v25 = v36;
  result = sub_1B1F1E04C(a5);
  if ((v35 & 1) != 0)
  {
    if (v25)
      return result;
    v26 = ((_DWORD)result + 1) | 0x50u;
  }
  else
  {
    if (v25)
      return result;
    v26 = result | 0x40;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 24))(v26, v22, v21);
  v27 = v19;
  v28 = v19[3];
  v29 = v19[4];
  v37 = sub_1B19FA070(v27, v28);
  (*(void (**)(uint64_t, uint64_t))(a7 + 32))(a5, a7);
  v30 = v33;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  sub_1B1F15D58(v24, v28, v30, v29, AssociatedConformanceWitness);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v24, v30);
}

uint64_t sub_1B1F16D10(uint64_t a1, uint64_t a2, float a3)
{
  unint64_t v5;
  _QWORD v7[7];
  char v8;
  float v9;

  v9 = a3;
  v5 = sub_1B1EFE140();
  v7[2] = a1;
  v7[3] = MEMORY[0x1E0DEB188];
  v7[4] = a2;
  v7[5] = v5;
  v7[6] = &v9;
  v8 = 0;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t))(a2 + 16))(sub_1B1F1A360, v7, a1, a2);
}

void sub_1B1F16D90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t *);

  if (*(_BYTE *)(*(_QWORD *)(v2 + 16) + 16) == 1)
  {
    MEMORY[0x1E0C80A78](a1, a2);
    v3 = (void (*)(uint64_t *))sub_1B1F1A940;
  }
  else
  {
    MEMORY[0x1E0C80A78](a1, a2);
    v3 = (void (*)(uint64_t *))sub_1B1F1A534;
  }
  sub_1B1F14A3C(v3);
}

void sub_1B1F16E40(double a1)
{
  uint64_t v1;
  float v3;

  if (*(_BYTE *)(*(_QWORD *)(v1 + 16) + 16) != 1)
  {
    if (a1 != 0.0)
    {
      swift_retain();
      sub_1B1F137F8();
      sub_1B1F15AF8(*(unint64_t *)&a1);
      goto LABEL_7;
    }
LABEL_5:
    sub_1B1F137F8();
    return;
  }
  v3 = a1;
  if (v3 == 0.0)
    goto LABEL_5;
  swift_retain();
  sub_1B1F137F8();
  sub_1B1F15C24(LODWORD(v3));
LABEL_7:
  swift_release();
}

uint64_t sub_1B1F16F00(uint64_t a1, uint64_t a2, double a3)
{
  void (*v6)(void);
  float v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  char v17;
  double v18;

  v6 = *(void (**)(void))(a2 + 8);
  v6();
  if (*(_BYTE *)(((uint64_t (*)(uint64_t, uint64_t))v6)(a1, a2) + 16) == 1)
  {
    v7 = a3;
    *(float *)&v18 = v7;
    v8 = sub_1B1EFE140();
    v12 = a1;
    v13 = MEMORY[0x1E0DEB188];
    v14 = a2;
    v15 = v8;
    v16 = &v18;
    v17 = 1;
  }
  else
  {
    v18 = a3;
    v9 = sub_1B1EFE184();
    v12 = a1;
    v13 = MEMORY[0x1E0DEB070];
    v14 = a2;
    v15 = v9;
    v16 = &v18;
    v17 = 0;
  }
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), uint64_t *, uint64_t, uint64_t))(a2 + 16))(sub_1B1F1A360, &v11, a1, a2);
}

uint64_t sub_1B1F16FD4(_QWORD *a1, unsigned int a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;

  v7 = a1[3];
  v8 = a1[4];
  sub_1B19FA070(a1, v7);
  if (a2 <= 0x1E)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v8 + 24))(a2 | a3, v7, v8);
  result = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v8 + 24))(a3 | 0x1Fu, v7, v8);
  if (!v3)
  {
    v10 = a1[3];
    v11 = a1[4];
    sub_1B19FA070(a1, v10);
    return sub_1B1F14234(a2, v10, v11);
  }
  return result;
}

uint64_t sub_1B1F1709C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  int v16;
  char v17;

  v4 = v3;
  v8 = a1[3];
  v9 = a1[4];
  sub_1B19FA070(a1, v8);
  if ((a3 & 0x1000000000000000) != 0)
  {
    v10 = sub_1B22288CC();
    if ((v10 & 0x8000000000000000) != 0)
    {
LABEL_5:
      sub_1B222967C();
      __break(1u);
      goto LABEL_6;
    }
LABEL_4:
    if (!HIDWORD(v10))
      goto LABEL_7;
    goto LABEL_5;
  }
  if ((a3 & 0x2000000000000000) == 0)
  {
    v10 = a2 & 0xFFFFFFFFFFFFLL;
    goto LABEL_4;
  }
LABEL_6:
  v10 = HIBYTE(a3) & 0xF;
LABEL_7:
  swift_bridgeObjectRetain();
  v16 = v10;
  v17 = 96;
  (*(void (**)(uint64_t (*)(_QWORD *), _BYTE *, uint64_t, uint64_t))(v9 + 16))(sub_1B1F199A4, v15, v8, v9);
  if (v4)
    return swift_bridgeObjectRelease();
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  swift_bridgeObjectRetain();
  v14 = sub_1B1B3F2AC(a2, a3);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v14, v12, v13);
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_1B1F17250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F13CE0(a1, (uint64_t)sub_1B1F17284, 0, *(_QWORD *)(*(_QWORD *)a3 + 80), *(_QWORD *)(*(_QWORD *)a3 + 88));
}

uint64_t sub_1B1F17284(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD, uint64_t))(*(_QWORD *)(a2 + 8) + 16))(sub_1B1F15518, 0, ObjectType);
}

void sub_1B1F172DC(char a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _BYTE v5[32];

  v4 = *a4;
  v5[16] = a1;
  sub_1B1F13CE0(a2, (uint64_t)sub_1B1F1A8F4, (uint64_t)v5, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88));
}

uint64_t sub_1B1F17324(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t ObjectType;
  uint64_t v6;
  _BYTE v8[32];

  ObjectType = swift_getObjectType();
  v6 = *(_QWORD *)(a2 + 8);
  v8[16] = a3;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _BYTE *, uint64_t))(v6 + 16))(sub_1B1F1A384, v8, ObjectType);
}

void sub_1B1F17394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD v9[4];

  v8 = *a4;
  v9[2] = a1;
  sub_1B1F13CE0(a2, a8, (uint64_t)v9, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
}

void sub_1B1F173D4(char a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _BYTE v9[32];

  v8 = *a4;
  v9[16] = a1;
  sub_1B1F13CE0(a2, a8, (uint64_t)v9, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
}

void sub_1B1F17414(__int16 a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _WORD v9[16];

  v8 = *a4;
  v9[8] = a1;
  sub_1B1F13CE0(a2, a8, (uint64_t)v9, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
}

void sub_1B1F17454(int a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _DWORD v9[8];

  v8 = *a4;
  v9[4] = a1;
  sub_1B1F13CE0(a2, a8, (uint64_t)v9, *(_QWORD *)(v8 + 80), *(_QWORD *)(v8 + 88));
}

void sub_1B1F17494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  _QWORD v6[4];

  v6[3] = a2;
  v5 = *a5;
  v6[2] = a1;
  sub_1B1F13CE0(a3, (uint64_t)sub_1B1F1A8DC, (uint64_t)v6, *(_QWORD *)(v5 + 80), *(_QWORD *)(v5 + 88));
}

uint64_t sub_1B1F174DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t ObjectType;
  uint64_t v9;
  _QWORD v11[6];

  ObjectType = swift_getObjectType();
  v11[5] = a1;
  v9 = *(_QWORD *)(a2 + 8);
  v11[2] = a3;
  v11[3] = a4;
  return (*(uint64_t (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t))(v9 + 16))(sub_1B1F1A0BC, v11, ObjectType);
}

void sub_1B1F17558(uint64_t a1, float a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _DWORD v5[8];

  v4 = *a4;
  *(float *)&v5[4] = a2;
  sub_1B1F13CE0(a1, (uint64_t)sub_1B1F1A834, (uint64_t)v5, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88));
}

void sub_1B1F17598(uint64_t a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  _QWORD v5[4];

  v4 = *a4;
  *(double *)&v5[2] = a2;
  sub_1B1F13CE0(a1, (uint64_t)sub_1B1F1A888, (uint64_t)v5, *(_QWORD *)(v4 + 80), *(_QWORD *)(v4 + 88));
}

void sub_1B1F175D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B1F17610(a3, a2, a3, a4, a5, a1, a6, a7, a8, a9);
}

void sub_1B1F17610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, double);
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[16];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v38 = a8;
  v39 = a6;
  v40 = a5;
  v36 = a9;
  v37 = a3;
  v14 = *(_QWORD *)(a7 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17, v18);
  v21 = (char *)&v34 - v20;
  v22 = *(void (**)(char *, double))(v14 + 16);
  v41 = v23;
  v22((char *)&v34 - v20, v19);
  v26 = *(_QWORD **)(a1 + 32);
  v24 = (uint64_t *)(a1 + 32);
  v25 = v26;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *v24 = (uint64_t)v26;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v25 = sub_1B1C676F0(0, v25[2] + 1, 1, v25);
    *v24 = (uint64_t)v25;
  }
  v35 = a10;
  v29 = v25[2];
  v28 = v25[3];
  if (v29 >= v28 >> 1)
    *v24 = (uint64_t)sub_1B1C676F0(v28 > 1, v29 + 1, 1, v25);
  ((void (*)(char *, char *, uint64_t))v22)(v16, v21, a7);
  sub_1B1DACB58(v29, (uint64_t)v16, v24, a7, v36);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v21, a7);
  v30 = *(_QWORD *)(*(_QWORD *)a4 + 88);
  v43 = *(_QWORD *)(*(_QWORD *)a4 + 80);
  v44 = v38;
  v45 = v30;
  v46 = v35;
  v47 = v39;
  v48 = v37;
  v49 = a4;
  v50 = v40;
  sub_1B1F13CE0(v41, (uint64_t)sub_1B1F1A554, (uint64_t)v42, v43, v30);
  if (!v10)
  {
    v31 = (_QWORD *)*v24;
    v32 = swift_isUniquelyReferenced_nonNull_native();
    *v24 = (uint64_t)v31;
    if ((v32 & 1) == 0)
    {
      v31 = sub_1B1FFF07C(v31);
      *v24 = (uint64_t)v31;
    }
    v33 = v31[2] - 1;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v31[5 * v33 + 4]);
    v31[2] = v33;
    *v24 = (uint64_t)v31;
  }
}

uint64_t sub_1B1F17808@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  void (*v18)(char *, double);
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;

  v7 = v6;
  v39 = a4;
  v40 = a5;
  v38[1] = a6;
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)v38 - v16;
  v18 = *(void (**)(char *, double))(v10 + 16);
  v38[0] = v19;
  v18((char *)v38 - v16, v15);
  v20 = v7 + 2;
  v21 = (_QWORD *)v7[2];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v7[2] = (uint64_t)v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v21 = sub_1B1C676F0(0, v21[2] + 1, 1, v21);
    *v20 = v21;
  }
  v24 = v21[2];
  v23 = v21[3];
  if (v24 >= v23 >> 1)
    *v20 = sub_1B1C676F0(v23 > 1, v24 + 1, 1, v21);
  ((void (*)(char *, char *, uint64_t))v18)(v12, v17, v9);
  sub_1B1DACB58(v24, (uint64_t)v12, v7 + 2, v9, *(_QWORD *)(a3 + 24));
  (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  v25 = v7[2];
  v27 = v39;
  v26 = v40;
  type metadata accessor for _BinaryEncoder.KeyedStore(0, v39, v40, v28);
  v29 = *v7;
  swift_allocObject();
  v33 = sub_1B1F13C40(v29, v30, v31, v32);
  v34 = v7[1];
  swift_bridgeObjectRetain();
  sub_1B1F17C84(v34, (uint64_t)v33, v38[0], (uint64_t)&off_1E6382F80);
  v41 = v29;
  v42 = v33;
  v43 = v25;
  v36 = type metadata accessor for _BinaryKeyedEncodingContainer(0, v27, v26, v35);
  MEMORY[0x1B5E23E74](&unk_1B229F964, v36);
  sub_1B22299D0();
  swift_release();
  return sub_1B1F17A20((uint64_t)v7);
}

uint64_t sub_1B1F17A20(uint64_t a1)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 16);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 16) = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v2 = sub_1B1FFF07C(v2);
    *(_QWORD *)(a1 + 16) = v2;
  }
  v4 = v2[2] - 1;
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v2[5 * v4 + 4]);
  v2[2] = v4;
  *(_QWORD *)(a1 + 16) = v2;
  return result;
}

uint64_t sub_1B1F17A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, uint64_t, uint64_t, double);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9, v10);
  v13 = (char *)&v26 - v12;
  v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16);
  v28 = v15;
  v14((char *)&v26 - v12, v15, v5, v11);
  v16 = v3 + 2;
  v17 = (_QWORD *)v3[2];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v3[2] = (uint64_t)v17;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v17 = sub_1B1C676F0(0, v17[2] + 1, 1, v17);
    *v16 = v17;
  }
  v20 = v17[2];
  v19 = v17[3];
  if (v20 >= v19 >> 1)
    *v16 = sub_1B1C676F0(v19 > 1, v20 + 1, 1, v17);
  ((void (*)(char *, char *, uint64_t))v14)(v8, v13, v5);
  sub_1B1DACB58(v20, (uint64_t)v8, v3 + 2, v5, *(_QWORD *)(v27 + 24));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v13, v5);
  v21 = v3[2];
  v22 = *v3;
  type metadata accessor for _BinaryEncoder.UnkeyedStore();
  v23 = swift_allocObject();
  *(_OWORD *)(v23 + 24) = 0u;
  *(_OWORD *)(v23 + 40) = 0u;
  *(_DWORD *)(v23 + 56) = 0;
  *(_QWORD *)(v23 + 64) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v23 + 16) = v22;
  *(_WORD *)(v23 + 72) = 0;
  v24 = v3[1];
  swift_bridgeObjectRetain();
  sub_1B1F17C84(v24, v23, v28, (uint64_t)&off_1E6382FD0);
  a3[3] = &type metadata for _BinaryUnkeyedEncodingContainer;
  a3[4] = sub_1B1F1A118();
  swift_release();
  *a3 = v22;
  a3[1] = v23;
  a3[2] = v21;
  return sub_1B1F17A20((uint64_t)v3);
}

uint64_t sub_1B1F17C84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t v9;
  uint64_t v10[3];
  __int128 v11;

  v11 = *(_OWORD *)(*(_QWORD *)a1 + 80);
  v9 = v11;
  v7 = sub_1B1A137F4(v10);
  (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, a3);
  sub_1B1F14274(a2, a4, (uint64_t)v10);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
}

void sub_1B1F17D18()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1F17D78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;

  v5 = *v2;
  type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = v5;
  *(_OWORD *)(v6 + 24) = xmmword_1B226DCF0;
  *(_BYTE *)(v6 + 40) = 1;
  sub_1B1F17C84(v2[1], v6, a1, (uint64_t)&off_1E6383048);
  sub_1B1F17E14(v5, v6, a2);
  return swift_release();
}

uint64_t sub_1B1F17E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_BYTE *)(a1 + 16);
  v6 = *(_BYTE *)(a1 + 17);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = type metadata accessor for _BinaryEncoder();
  v10 = swift_allocObject();
  *(_BYTE *)(v10 + 48) = 0;
  v11 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v10 + 72) = 0;
  *(_QWORD *)(v10 + 80) = v11;
  *(_BYTE *)(v10 + 16) = v5;
  *(_BYTE *)(v10 + 17) = v6;
  *(_QWORD *)(v10 + 24) = v7;
  *(_QWORD *)(v10 + 32) = v11;
  *(_QWORD *)(v10 + 40) = v8;
  *(_QWORD *)(v10 + 56) = a2;
  *(_QWORD *)(v10 + 64) = &off_1E6383048;
  a3[3] = v9;
  a3[4] = sub_1B1F1A168();
  *a3 = v10;
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

void sub_1B1F17EDC(uint64_t a1)
{
  uint64_t *v1;

  sub_1B1F17250(a1, *v1, v1[1]);
}

void sub_1B1F17F00(char a1, uint64_t a2)
{
  uint64_t v2;

  sub_1B1F172DC(a1, a2, *(_QWORD *)v2, *(uint64_t **)(v2 + 8));
}

void sub_1B1F17F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_1B1F17494(a1, a2, a3, *(_QWORD *)v3, *(uint64_t **)(v3 + 8));
}

void sub_1B1F17F48(uint64_t a1, double a2)
{
  uint64_t v2;

  sub_1B1F17598(a1, a2, *(_QWORD *)v2, *(uint64_t **)(v2 + 8));
}

void sub_1B1F17F6C(uint64_t a1, float a2)
{
  uint64_t v2;

  sub_1B1F17558(a1, a2, *(_QWORD *)v2, *(uint64_t **)(v2 + 8));
}

void sub_1B1F17F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F180FC(a1, a2, a3, a4, (uint64_t)sub_1B1F1A634);
}

void sub_1B1F17FAC(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F1804C(a1, a2, a3, a4, (uint64_t)sub_1B1F1A7B4);
}

void sub_1B1F17FC8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F18090(a1, a2, a3, a4, (uint64_t)sub_1B1F1A734);
}

void sub_1B1F17FE4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F180D4(a1, a2, a3, a4, (uint64_t)sub_1B1F1A6B4);
}

uint64_t sub_1B1F18000()
{
  return sub_1B2229F4C();
}

void sub_1B1F18014(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F180FC(a1, a2, a3, a4, (uint64_t)sub_1B1F1A5C4);
}

void sub_1B1F18030(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F1804C(a1, a2, a3, a4, (uint64_t)sub_1B1F1A618);
}

void sub_1B1F1804C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_1B1F173D4(a1, a2, *(_QWORD *)v5, *(uint64_t **)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a5);
}

void sub_1B1F18074(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F18090(a1, a2, a3, a4, (uint64_t)sub_1B1F1A5FC);
}

void sub_1B1F18090(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_1B1F17414(a1, a2, *(_QWORD *)v5, *(uint64_t **)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a5);
}

void sub_1B1F180B8(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F180D4(a1, a2, a3, a4, (uint64_t)sub_1B1F1A5E0);
}

void sub_1B1F180D4(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_1B1F17454(a1, a2, *(_QWORD *)v5, *(uint64_t **)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a5);
}

void sub_1B1F180FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  sub_1B1F17394(a1, a2, *(_QWORD *)v5, *(uint64_t **)(v5 + 8), *(_QWORD *)(v5 + 16), *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a5);
}

uint64_t sub_1B1F18124()
{
  return sub_1B2229F58();
}

void sub_1B1F18138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  sub_1B1F175D8(a1, a2, *v5, v5[1], v5[2], *(_QWORD *)(a5 + 16), a3, *(_QWORD *)(a5 + 24), a4);
}

uint64_t sub_1B1F18170()
{
  return sub_1B2229F40();
}

uint64_t sub_1B1F18198()
{
  return sub_1B2229ED4();
}

uint64_t sub_1B1F181AC()
{
  return sub_1B2229EC8();
}

uint64_t sub_1B1F181C0()
{
  return sub_1B2229EE0();
}

uint64_t sub_1B1F181D8(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F1833C(a1, a2, a3, a4, MEMORY[0x1E0DED8E8]);
}

uint64_t sub_1B1F181F4()
{
  return sub_1B2229EEC();
}

uint64_t sub_1B1F1820C(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F182C4(a1, a2, a3, a4, MEMORY[0x1E0DED908]);
}

uint64_t sub_1B1F18228(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F18300(a1, a2, a3, a4, MEMORY[0x1E0DED910]);
}

uint64_t sub_1B1F18244(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F1833C(a1, a2, a3, a4, MEMORY[0x1E0DED918]);
}

uint64_t sub_1B1F18260()
{
  return sub_1B2229F10();
}

uint64_t sub_1B1F18278()
{
  return sub_1B2229F1C();
}

uint64_t sub_1B1F18290()
{
  return sub_1B2229EF8();
}

uint64_t sub_1B1F182A8(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F182C4(a1, a2, a3, a4, MEMORY[0x1E0DED928]);
}

uint64_t sub_1B1F182C4(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FF);
}

uint64_t sub_1B1F182E4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F18300(a1, a2, a3, a4, MEMORY[0x1E0DED938]);
}

uint64_t sub_1B1F18300(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  return a5(a1 & 0x1FFFF);
}

uint64_t sub_1B1F18320(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F1833C(a1, a2, a3, a4, MEMORY[0x1E0DED940]);
}

uint64_t sub_1B1F1833C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  return a5(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t sub_1B1F18364()
{
  return sub_1B2229F28();
}

uint64_t sub_1B1F1837C()
{
  return sub_1B2229F34();
}

uint64_t sub_1B1F18394()
{
  return sub_1B2229F04();
}

uint64_t sub_1B1F183BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return sub_1B1F17808(a1, a2, a5, a3, a4, a6);
}

void sub_1B1F183D4()
{
  sub_1B1F17D18();
}

uint64_t sub_1B1F183EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1B1F18410(a2, a2, a3, a4, a1, a5, a6);
}

uint64_t sub_1B1F18410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  _QWORD *v12;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  char v20;
  uint64_t v21;
  uint64_t v25;
  __int128 v26;
  ValueMetadata *v27;
  unint64_t v28;
  uint64_t v29;

  v11 = *(unsigned int *)(a3 + 56);
  *(_QWORD *)&v26 = 0x207865646E49;
  *((_QWORD *)&v26 + 1) = 0xE600000000000000;
  v29 = v11;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  v12 = *(_QWORD **)(a1 + 32);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a1 + 32) = v12;
  v25 = a7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v12 = sub_1B1C676F0(0, v12[2] + 1, 1, v12);
    *(_QWORD *)(a1 + 32) = v12;
  }
  v15 = v12[2];
  v14 = v12[3];
  if (v15 >= v14 >> 1)
  {
    v12 = sub_1B1C676F0(v14 > 1, v15 + 1, 1, v12);
    *(_QWORD *)(a1 + 32) = v12;
  }
  v27 = &type metadata for _BinaryKey;
  v28 = sub_1B1EFDF84();
  v16 = swift_allocObject();
  *(_QWORD *)&v26 = v16;
  *(_QWORD *)(v16 + 16) = 0x207865646E49;
  *(_QWORD *)(v16 + 24) = 0xE600000000000000;
  *(_QWORD *)(v16 + 32) = v11;
  *(_BYTE *)(v16 + 40) = 0;
  v12[2] = v15 + 1;
  sub_1B1A02518(&v26, (uint64_t)&v12[5 * v15 + 4]);
  v17 = type metadata accessor for _BinaryEncoder.UnkeyedStore();
  result = sub_1B1F13684(a2, a5, a3, v17, a6, (uint64_t)&off_1E6382FD0, v25);
  if (!v7)
  {
    v19 = *(_QWORD **)(a1 + 32);
    v20 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(a1 + 32) = v19;
    if ((v20 & 1) == 0)
    {
      v19 = sub_1B1FFF07C(v19);
      *(_QWORD *)(a1 + 32) = v19;
    }
    v21 = v19[2] - 1;
    result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v19[5 * v21 + 4]);
    v19[2] = v21;
    *(_QWORD *)(a1 + 32) = v19;
  }
  return result;
}

uint64_t sub_1B1F185F0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  _QWORD *v26;
  ValueMetadata *v27;
  unint64_t v28;
  uint64_t v29;

  v11 = *(unsigned int *)(a3 + 56);
  *(_QWORD *)&v25 = 0x207865646E49;
  *((_QWORD *)&v25 + 1) = 0xE600000000000000;
  v29 = v11;
  swift_bridgeObjectRetain();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a4 = sub_1B1C676F0(0, a4[2] + 1, 1, a4);
  v13 = a4[2];
  v12 = a4[3];
  if (v13 >= v12 >> 1)
    a4 = sub_1B1C676F0(v12 > 1, v13 + 1, 1, a4);
  v27 = &type metadata for _BinaryKey;
  v28 = sub_1B1EFDF84();
  v14 = swift_allocObject();
  *(_QWORD *)&v25 = v14;
  *(_QWORD *)(v14 + 16) = 0x207865646E49;
  *(_QWORD *)(v14 + 24) = 0xE600000000000000;
  *(_QWORD *)(v14 + 32) = v11;
  *(_BYTE *)(v14 + 40) = 0;
  a4[2] = v13 + 1;
  sub_1B1A02518(&v25, (uint64_t)&a4[5 * v13 + 4]);
  type metadata accessor for _BinaryEncoder.KeyedStore(0, a5, a6, v15);
  swift_allocObject();
  v19 = sub_1B1F13C40(a2, v16, v17, v18);
  v21 = type metadata accessor for _BinaryEncoder.KeyedStore(0, *(_QWORD *)(*v19 + 80), *(_QWORD *)(*v19 + 88), v20);
  swift_bridgeObjectRetain();
  sub_1B1F19A64((uint64_t)v19, a3, v21, (uint64_t)&off_1E6382F80);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v25 = a2;
  *((_QWORD *)&v25 + 1) = v19;
  v26 = a4;
  v23 = type metadata accessor for _BinaryKeyedEncodingContainer(0, a5, a6, v22);
  MEMORY[0x1B5E23E74](&unk_1B229F964, v23);
  sub_1B22299D0();
  return swift_release();
}

uint64_t sub_1B1F187FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t result;
  __int128 v19;
  ValueMetadata *v20;
  unint64_t v21;
  uint64_t v22;

  v8 = *(unsigned int *)(a2 + 56);
  *(_QWORD *)&v19 = 0x207865646E49;
  *((_QWORD *)&v19 + 1) = 0xE600000000000000;
  v22 = v8;
  swift_bridgeObjectRetain();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    a3 = sub_1B1C676F0(0, a3[2] + 1, 1, a3);
  v10 = a3[2];
  v9 = a3[3];
  if (v10 >= v9 >> 1)
    a3 = sub_1B1C676F0(v9 > 1, v10 + 1, 1, a3);
  v20 = &type metadata for _BinaryKey;
  v21 = sub_1B1EFDF84();
  v11 = swift_allocObject();
  *(_QWORD *)&v19 = v11;
  *(_QWORD *)(v11 + 16) = 0x207865646E49;
  *(_QWORD *)(v11 + 24) = 0xE600000000000000;
  *(_QWORD *)(v11 + 32) = v8;
  *(_BYTE *)(v11 + 40) = 0;
  a3[2] = v10 + 1;
  sub_1B1A02518(&v19, (uint64_t)&a3[5 * v10 + 4]);
  type metadata accessor for _BinaryEncoder.UnkeyedStore();
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 24) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_DWORD *)(v12 + 56) = 0;
  *(_QWORD *)(v12 + 64) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v12 + 16) = a1;
  *(_WORD *)(v12 + 72) = 0;
  v13 = *(_QWORD **)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_retain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 64) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v13 = sub_1B1C634B0(0, v13[2] + 1, 1, v13);
    *(_QWORD *)(a2 + 64) = v13;
  }
  v16 = v13[2];
  v15 = v13[3];
  if (v16 >= v15 >> 1)
  {
    v13 = sub_1B1C634B0(v15 > 1, v16 + 1, 1, v13);
    *(_QWORD *)(a2 + 64) = v13;
  }
  v13[2] = v16 + 1;
  v17 = &v13[2 * v16];
  v17[4] = v12;
  v17[5] = &off_1E6382FD0;
  ++*(_DWORD *)(a2 + 56);
  swift_bridgeObjectRelease();
  a4[3] = &type metadata for _BinaryUnkeyedEncodingContainer;
  a4[4] = sub_1B1F1A118();
  result = swift_release();
  *a4 = a1;
  a4[1] = v12;
  a4[2] = a3;
  return result;
}

uint64_t sub_1B1F18A50()
{
  uint64_t v0;

  return *(unsigned int *)(*(_QWORD *)(v0 + 8) + 56);
}

uint64_t sub_1B1F18A5C()
{
  return sub_1B1F15328();
}

uint64_t sub_1B1F18A7C()
{
  return sub_1B1F15564();
}

uint64_t sub_1B1F18A9C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(_QWORD *)(v2 + 8);
  swift_bridgeObjectRetain();
  return sub_1B1F14870(v5, a1, a2);
}

void sub_1B1F18AE0(uint64_t a1, uint64_t a2)
{
  sub_1B1F16D90(a1, a2);
}

void sub_1B1F18B00()
{
  sub_1B1F14A3C((void (*)(uint64_t *))sub_1B1F1A514);
}

void sub_1B1F18B44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18C00(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A92C);
}

void sub_1B1F18B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18C58(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A4FC);
}

void sub_1B1F18B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18CB0(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A4D0);
}

void sub_1B1F18B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18D08(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A4A4);
}

void sub_1B1F18BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18C00(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A488);
}

uint64_t sub_1B1F18BD0()
{
  return sub_1B2229CAC();
}

void sub_1B1F18BE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18C00(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A910);
}

void sub_1B1F18C00(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  sub_1B1F14A3C(a4);
}

void sub_1B1F18C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18C58(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A470);
}

void sub_1B1F18C58(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  sub_1B1F14A3C(a4);
}

void sub_1B1F18C94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18CB0(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A444);
}

void sub_1B1F18CB0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  sub_1B1F14A3C(a4);
}

void sub_1B1F18CEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18D08(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A418);
}

void sub_1B1F18D08(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *))
{
  sub_1B1F14A3C(a4);
}

void sub_1B1F18D44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1F18C00(a1, a2, a3, (void (*)(uint64_t *))sub_1B1F1A400);
}

uint64_t sub_1B1F18D60()
{
  return sub_1B2229CB8();
}

uint64_t sub_1B1F18D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1B1F183EC(a1, *v3, v3[1], v3[2], a2, a3);
}

uint64_t sub_1B1F18D98()
{
  return sub_1B2229BD4();
}

uint64_t sub_1B1F18DC0()
{
  return sub_1B2229BF8();
}

uint64_t sub_1B1F18DE8()
{
  return sub_1B2229BEC();
}

uint64_t sub_1B1F18E10()
{
  return sub_1B2229C04();
}

uint64_t sub_1B1F18E38()
{
  return sub_1B2229C10();
}

uint64_t sub_1B1F18E60()
{
  return sub_1B2229C1C();
}

uint64_t sub_1B1F18E88()
{
  return sub_1B2229C34();
}

uint64_t sub_1B1F18EB0()
{
  return sub_1B2229C40();
}

uint64_t sub_1B1F18ED8()
{
  return sub_1B2229C4C();
}

uint64_t sub_1B1F18F00()
{
  return sub_1B2229C58();
}

uint64_t sub_1B1F18F28()
{
  return sub_1B2229C70();
}

uint64_t sub_1B1F18F50()
{
  return sub_1B2229C28();
}

uint64_t sub_1B1F18F78()
{
  return sub_1B2229C64();
}

uint64_t sub_1B1F18FA0()
{
  return sub_1B2229C7C();
}

uint64_t sub_1B1F18FC8()
{
  return sub_1B2229C88();
}

uint64_t sub_1B1F18FF0()
{
  return sub_1B2229C94();
}

uint64_t sub_1B1F19018()
{
  return sub_1B2229CA0();
}

uint64_t sub_1B1F19040()
{
  return sub_1B2229BE0();
}

uint64_t sub_1B1F19070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1F185F0(a1, *(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD **)(v3 + 16), a2, a3);
}

uint64_t sub_1B1F19084@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_1B1F187FC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16), a1);
}

void sub_1B1F19090()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1F190F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;

  v11 = type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  return sub_1B1F13684(a4, a1, a3, v11, a5, (uint64_t)&off_1E6383048, a6);
}

void sub_1B1F19160()
{
  sub_1B1F137F8();
}

void sub_1B1F19190()
{
  sub_1B1F137F8();
}

uint64_t sub_1B1F191C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD v7[5];

  v5 = *(_QWORD *)(v2 + 8);
  v7[3] = type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  v7[4] = &off_1E6383020;
  v7[0] = v5;
  swift_retain();
  sub_1B1F1709C(v7, a1, a2);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
}

void sub_1B1F1923C(double a1)
{
  sub_1B1F16E40(a1);
}

void sub_1B1F1925C(float a1)
{
  if (a1 == 0.0)
  {
    sub_1B1F137F8();
  }
  else
  {
    swift_retain();
    sub_1B1F137F8();
    sub_1B1F15C24(LODWORD(a1));
    swift_release();
  }
}

uint64_t sub_1B1F192D8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[5];

  v3 = *(_QWORD *)(v1 + 8);
  v5[3] = type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  v5[4] = &off_1E6383020;
  v5[0] = v3;
  swift_retain();
  sub_1B1F16000(v5, a1);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

void sub_1B1F1934C(unsigned __int8 a1)
{
  if (a1 < 0x10u)
  {
    sub_1B1F137F8();
  }
  else
  {
    swift_retain();
    sub_1B1F137F8();
    sub_1B1F15B90(a1);
    swift_release();
  }
}

uint64_t sub_1B1F193C8(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F1952C(a1, a2, a3, (uint64_t (*)(void))sub_1B1EFE0B8, MEMORY[0x1E0DEDB58]);
}

uint64_t sub_1B1F193EC(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[5];

  v3 = *(_QWORD *)(v1 + 8);
  v5[3] = type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  v5[4] = &off_1E6383020;
  v5[0] = v3;
  swift_retain();
  sub_1B1F15EFC(v5, a1, (uint64_t (*)(void))sub_1B1EFE074, MEMORY[0x1E0DEDBC8]);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

uint64_t sub_1B1F19470()
{
  return sub_1B2229E20();
}

void sub_1B1F19484(unint64_t a1)
{
  if (a1 <= 0xFF && a1 < 0x10u)
  {
    sub_1B1F137F8();
  }
  else
  {
    swift_retain();
    sub_1B1F137F8();
    sub_1B1F15AF8(a1);
    swift_release();
  }
}

uint64_t sub_1B1F19508(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F1952C(a1, a2, a3, (uint64_t (*)(void))sub_1B1EFD7A4, MEMORY[0x1E0DEE068]);
}

uint64_t sub_1B1F1952C(int a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  _QWORD v11[5];

  v9 = *(_QWORD *)(v5 + 8);
  v11[3] = type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  v11[4] = &off_1E6383020;
  v11[0] = v9;
  swift_retain();
  sub_1B1F160F8(v11, a1, a4, a5);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
}

uint64_t sub_1B1F195B8(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD v5[5];

  v3 = *(_QWORD *)(v1 + 8);
  v5[3] = type metadata accessor for _BinaryEncoder.SingleValueDataStore();
  v5[4] = &off_1E6383020;
  v5[0] = v3;
  swift_retain();
  sub_1B1F161FC(v5, a1);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

uint64_t sub_1B1F1962C()
{
  return sub_1B2229E2C();
}

uint64_t sub_1B1F19640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_1B1F190F0(a1, *v3, v3[1], v3[2], a2, a3);
}

uint64_t sub_1B1F19664()
{
  return swift_bridgeObjectRetain();
}

double (*sub_1B1F19670())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1F19684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F12C90(a1, a2, a3);
}

uint64_t sub_1B1F196A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = *(_QWORD **)(a2 + 80);
  swift_unknownObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 80) = v7;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C634B0(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
    *(_QWORD *)(a2 + 80) = result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)sub_1B1C634B0(v9 > 1, v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
    *(_QWORD *)(a2 + 80) = result;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = a1;
  v11[5] = a4;
  return result;
}

_QWORD *sub_1B1F19754(_BYTE *a1, _BYTE *a2)
{
  int64_t v4;
  _QWORD *v5;
  size_t v7;

  if (!a1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  v4 = a2 - a1;
  if (a2 == a1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (v4 < 1)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!a2)
      return v5;
  }
  else
  {
    sub_1B1EFD960(0, (unint64_t *)&unk_1ED4BAFA0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
    v5 = (_QWORD *)swift_allocObject();
    v7 = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * v7 - 64;
    if (!a2)
      return v5;
  }
  if (a1 < a2)
    memmove(v5 + 4, a1, v4);
  return v5;
}

void sub_1B1F19804(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1B22281B8();
  MEMORY[0x1E0C80A78](v3, v4);
  __asm { BR              X10 }
}

_QWORD *sub_1B1F19880()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  size_t v6;

  if (BYTE6(v0))
  {
    sub_1B1EFD960(0, (unint64_t *)&unk_1ED4BAFA0, (uint64_t (*)(_QWORD, _QWORD))MEMORY[0x1E0DED1E8]);
    v4 = (_QWORD *)swift_allocObject();
    v6 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v6 - 64;
    sub_1B1A0DC90(v2, v0);
    sub_1B2228140();
    sub_1B1A0DADC(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
  }
  return v4;
}

unint64_t sub_1B1F1994C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF60C00;
  if (!qword_1EEF60C00)
  {
    sub_1B1EFD960(255, &qword_1EEF60BF8, MEMORY[0x1E0DEC628]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0CB25E0], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF60C00);
  }
  return result;
}

uint64_t sub_1B1F199A4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F16FD4(a1, *(_DWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 20));
}

uint64_t sub_1B1F199C0(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1F162F4(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1B1F199E0(_BYTE *a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t *v3;

  return sub_1B1F15E88(a1, a2, v3[6], v3[2], v3[3], v3[4], v3[5], a3);
}

void sub_1B1F19A04(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  _QWORD v7[4];
  _QWORD v8[3];
  char v9;

  v8[0] = a1;
  v8[1] = a2;
  v8[2] = a3;
  v9 = a4 & 1;
  v7[2] = a5;
  v7[3] = a6;
  v6 = sub_1B1EFDF84();
  sub_1B1F13CE0((uint64_t)v8, (uint64_t)sub_1B1F19FDC, (uint64_t)v7, (uint64_t)&type metadata for _BinaryKey, v6);
}

uint64_t sub_1B1F19A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;

  v7 = *(_QWORD **)(a2 + 64);
  swift_unknownObjectRetain();
  result = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(a2 + 64) = v7;
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1B1C634B0(0, v7[2] + 1, 1, v7);
    v7 = (_QWORD *)result;
    *(_QWORD *)(a2 + 64) = result;
  }
  v10 = v7[2];
  v9 = v7[3];
  if (v10 >= v9 >> 1)
  {
    result = (uint64_t)sub_1B1C634B0(v9 > 1, v10 + 1, 1, v7);
    v7 = (_QWORD *)result;
    *(_QWORD *)(a2 + 64) = result;
  }
  v7[2] = v10 + 1;
  v11 = &v7[2 * v10];
  v11[4] = a1;
  v11[5] = a4;
  ++*(_DWORD *)(a2 + 56);
  return result;
}

uint64_t sub_1B1F19B20(_QWORD *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;

  v4 = *a2;
  v14 = v4;
  if (v4 > 0xFF || v4 >= 0x10u)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1B19FA070(a1, v6);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(51, v6, v7);
    if (!v2)
    {
      v8 = a1[3];
      v9 = a1[4];
      sub_1B19FA070(a1, v8);
      v10 = sub_1B1EFD71C();
      return sub_1B1F15D58((uint64_t)&v14, v8, MEMORY[0x1E0DEE190], v9, v10);
    }
  }
  else
  {
    v11 = a1[3];
    v12 = a1[4];
    sub_1B19FA070(a1, v11);
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v12 + 24))(v4 | 0x20, v11, v12);
  }
  return result;
}

uint64_t sub_1B1F19C18(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;

  v10 = *a2;
  v4 = a1[3];
  v5 = a1[4];
  sub_1B19FA070(a1, v4);
  if (v10 < 0x10u)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v5 + 24))(v10 | 0x20u, v4, v5);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(48, v4, v5);
  if (!v2)
  {
    v7 = a1[3];
    v8 = a1[4];
    sub_1B19FA070(a1, v7);
    v9 = sub_1B1EFE0FC();
    return sub_1B1F15D58((uint64_t)&v10, v7, MEMORY[0x1E0DEDA70], v8, v9);
  }
  return result;
}

uint64_t sub_1B1F19CF0(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;

  v10 = *a2;
  v4 = a1[3];
  v5 = a1[4];
  sub_1B19FA070(a1, v4);
  if (v10 < 0x10u)
    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v5 + 24))(v10 | 0x20u, v4, v5);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 24))(48, v4, v5);
  if (!v2)
  {
    v7 = a1[3];
    v8 = a1[4];
    sub_1B19FA070(a1, v7);
    v9 = sub_1B1EFD7E8();
    return sub_1B1F15D58((uint64_t)&v10, v7, MEMORY[0x1E0DEDE70], v8, v9);
  }
  return result;
}

uint64_t sub_1B1F19DC8(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  uint64_t v23;
  int64_t v24;

  v3 = v2;
  v23 = a1 + 64;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  v8 = 0;
  v24 = v7;
  v22 = v7 - 6;
  if (!v6)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  v10 = v9 | (v8 << 6);
  while (1)
  {
    v13 = *(_QWORD *)(a1 + 48) + 32 * v10;
    v14 = *(_QWORD *)v13;
    v15 = *(_QWORD *)(v13 + 8);
    v16 = *(_QWORD *)(v13 + 16);
    v17 = *(unsigned __int8 *)(v13 + 24);
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v10);
    v19 = *v18;
    v20 = v18[1];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    a2(v14, v15, v16, v17, v19, v20);
    if (v3)
    {
      swift_release();
      swift_unknownObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    if (v6)
      goto LABEL_4;
LABEL_5:
    v11 = v8 + 1;
    if (v8 + 1 >= v24)
      return swift_release();
    v12 = *(_QWORD *)(v23 + 8 * v11);
    if (!v12)
    {
      v11 = v8 + 2;
      if (v8 + 2 >= v24)
        return swift_release();
      v12 = *(_QWORD *)(v23 + 8 * v11);
      if (!v12)
      {
        v11 = v8 + 3;
        if (v8 + 3 >= v24)
          return swift_release();
        v12 = *(_QWORD *)(v23 + 8 * v11);
        if (!v12)
        {
          v11 = v8 + 4;
          if (v8 + 4 >= v24)
            return swift_release();
          v12 = *(_QWORD *)(v23 + 8 * v11);
          if (!v12)
          {
            v11 = v8 + 5;
            if (v8 + 5 >= v24)
              return swift_release();
            v12 = *(_QWORD *)(v23 + 8 * v11);
            if (!v12)
            {
              while (v22 != v8)
              {
                v12 = *(_QWORD *)(a1 + 8 * v8++ + 112);
                if (v12)
                {
                  v11 = v8 + 5;
                  goto LABEL_18;
                }
              }
              return swift_release();
            }
          }
        }
      }
    }
LABEL_18:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v11 << 6);
    v8 = v11;
  }
}

uint64_t sub_1B1F19FDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1F14564(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

void sub_1B1F19FF4(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1B1F1A030@<X0>(void (*a1)(uint64_t, _UNKNOWN **)@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v4 = BYTE6(v1);
  a1(v3, &off_1E6383048);
  if (!v2)
    __asm { BR              X12 }
  return v4;
}

void sub_1B1F1A09C()
{
  JUMPOUT(0x1B1F1A064);
}

void sub_1B1F1A0A4()
{
  JUMPOUT(0x1B1F1A064);
}

void sub_1B1F1A0B0()
{
  JUMPOUT(0x1B1F1A064);
}

uint64_t sub_1B1F1A0BC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F1709C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_1B1F1A0D4()
{
  unint64_t result;

  result = qword_1EEF60C08;
  if (!qword_1EEF60C08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229FC44, &type metadata for _BinarySingleValueEncodingContainer);
    atomic_store(result, (unint64_t *)&qword_1EEF60C08);
  }
  return result;
}

unint64_t sub_1B1F1A118()
{
  unint64_t result;

  result = qword_1EEF60C10;
  if (!qword_1EEF60C10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B229FADC, &type metadata for _BinaryUnkeyedEncodingContainer);
    atomic_store(result, (unint64_t *)&qword_1EEF60C10);
  }
  return result;
}

uint64_t type metadata accessor for _BinaryKeyedEncodingContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _BinaryKeyedEncodingContainer);
}

unint64_t sub_1B1F1A168()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF60C18;
  if (!qword_1EEF60C18)
  {
    v1 = type metadata accessor for _BinaryEncoder();
    result = MEMORY[0x1B5E23E74](&unk_1B229F880, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF60C18);
  }
  return result;
}

uint64_t sub_1B1F1A1B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t ObjectType;

  v3 = *(_QWORD *)(v1 + 24);
  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(a1, ObjectType, v3);
}

uint64_t sub_1B1F1A208(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1F12FA4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1B1F1A220()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF60C20[0])
  {
    sub_1B22294E4();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, qword_1EEF60C20);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for Prefab(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithTake for Prefab(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *_s3VFX31_BinaryUnkeyedEncodingContainerVwca_0(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for _BinaryUnkeyedEncodingContainer()
{
  return &type metadata for _BinaryUnkeyedEncodingContainer;
}

ValueMetadata *type metadata accessor for _BinarySingleValueEncodingContainer()
{
  return &type metadata for _BinarySingleValueEncodingContainer;
}

uint64_t sub_1B1F1A360(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F16A4C(a1, *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1B1F1A384(_QWORD *a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(unsigned __int8 *)(v1 + 16);
  v3 = a1[3];
  v4 = a1[4];
  sub_1B19FA070(a1, v3);
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 24))(v2 | 0x10u, v3, v4);
}

uint64_t sub_1B1F1A3DC()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1F1A400(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F19B20(a1, *(unint64_t **)(v1 + 16));
}

uint64_t sub_1B1F1A418(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F15EFC(a1, **(_DWORD **)(v1 + 16), (uint64_t (*)(void))sub_1B1EFD760, MEMORY[0x1E0DEE0F8]);
}

uint64_t sub_1B1F1A444(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F160F8(a1, **(unsigned __int16 **)(v1 + 16), (uint64_t (*)(void))sub_1B1EFD7A4, MEMORY[0x1E0DEE068]);
}

uint64_t sub_1B1F1A470(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F19CF0(a1, *(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_1B1F1A488(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F16000(a1, **(_QWORD **)(v1 + 16));
}

uint64_t sub_1B1F1A4A4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F15EFC(a1, **(_DWORD **)(v1 + 16), (uint64_t (*)(void))sub_1B1EFE074, MEMORY[0x1E0DEDBC8]);
}

uint64_t sub_1B1F1A4D0(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F160F8(a1, **(unsigned __int16 **)(v1 + 16), (uint64_t (*)(void))sub_1B1EFE0B8, MEMORY[0x1E0DEDB58]);
}

uint64_t sub_1B1F1A4FC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F19C18(a1, *(unsigned __int8 **)(v1 + 16));
}

uint64_t sub_1B1F1A514(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F1687C(a1, *(_BYTE *)(v1 + 24), **(float **)(v1 + 16));
}

uint64_t sub_1B1F1A534(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F16964(a1, *(_BYTE *)(v1 + 24), **(double **)(v1 + 16));
}

uint64_t sub_1B1F1A554(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;

  v5 = v2[3];
  v6 = v2[5];
  v7 = v2[6];
  v8 = v2[7];
  ObjectType = swift_getObjectType();
  return sub_1B1F13684(v8, v7, a1, ObjectType, v5, a2, v6);
}

uint64_t sub_1B1F1A5C4(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A650(a1, a2, sub_1B1F15984);
}

uint64_t sub_1B1F1A5E0(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A6D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B1F152AC);
}

uint64_t sub_1B1F1A5FC(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A750(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B1F15A7C);
}

uint64_t sub_1B1F1A618(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A7D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B1F15A00);
}

uint64_t sub_1B1F1A634(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A650(a1, a2, sub_1B1F15794);
}

uint64_t sub_1B1F1A650(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;

  v6 = *(_QWORD *)(v3 + 16);
  ObjectType = swift_getObjectType();
  return a3(v6, ObjectType, *(_QWORD *)(a2 + 8));
}

uint64_t sub_1B1F1A6B4(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A6D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B1F15908);
}

uint64_t sub_1B1F1A6D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;

  v6 = *(unsigned int *)(v3 + 16);
  ObjectType = swift_getObjectType();
  return a3(v6, ObjectType, *(_QWORD *)(a2 + 8));
}

uint64_t sub_1B1F1A734(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A750(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B1F1588C);
}

uint64_t sub_1B1F1A750(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;

  v6 = *(unsigned __int16 *)(v3 + 16);
  ObjectType = swift_getObjectType();
  return a3(v6, ObjectType, *(_QWORD *)(a2 + 8));
}

uint64_t sub_1B1F1A7B4(uint64_t a1, uint64_t a2)
{
  return sub_1B1F1A7D0(a1, a2, (uint64_t (*)(uint64_t, uint64_t, _QWORD))sub_1B1F15810);
}

uint64_t sub_1B1F1A7D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, _QWORD))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t ObjectType;

  v6 = *(unsigned __int8 *)(v3 + 16);
  ObjectType = swift_getObjectType();
  return a3(v6, ObjectType, *(_QWORD *)(a2 + 8));
}

uint64_t sub_1B1F1A834(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v4;
  uint64_t ObjectType;

  v4 = *(float *)(v2 + 16);
  ObjectType = swift_getObjectType();
  return sub_1B1F16D10(ObjectType, *(_QWORD *)(a2 + 8), v4);
}

uint64_t sub_1B1F1A888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v4;
  uint64_t ObjectType;

  v4 = *(double *)(v2 + 16);
  ObjectType = swift_getObjectType();
  return sub_1B1F16F00(ObjectType, *(_QWORD *)(a2 + 8), v4);
}

uint64_t sub_1B1F1A8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1F174DC(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1B1F1A8F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1F17324(a1, a2, *(_BYTE *)(v2 + 16));
}

uint64_t sub_1B1F1A910(_QWORD *a1)
{
  return sub_1B1F1A400(a1);
}

uint64_t sub_1B1F1A92C(_QWORD *a1)
{
  return sub_1B1F1A488(a1);
}

uint64_t sub_1B1F1A940(_QWORD *a1)
{
  return sub_1B1F1A514(a1);
}

void sub_1B1F1A954(unsigned __int8 a1)
{
  sub_1B1F1934C(a1);
}

uint64_t sub_1B1F1A974(uint64_t a1)
{
  return sub_1B1F1A99C(a1, (void (*)(void))type metadata accessor for ThreadLogger, &qword_1ED4D0FB0);
}

uint64_t sub_1B1F1A988(uint64_t a1)
{
  return sub_1B1F1A99C(a1, (void (*)(void))type metadata accessor for OSLogger, &qword_1ED4D0FD0);
}

uint64_t sub_1B1F1A99C(uint64_t a1, void (*a2)(void), uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;

  a2();
  v4 = swift_allocObject();
  sub_1B1F1B2D8();
  swift_allocObject();
  result = sub_1B2228434();
  *(_QWORD *)(v4 + 16) = result;
  *a3 = v4;
  return result;
}

void sub_1B1F1A9F8()
{
  qword_1ED4B8520 = MEMORY[0x1E0DEE9E8];
}

void sub_1B1F1AA0C()
{
  dword_1ED4842F8 = 0;
}

uint64_t LogOptions.rawValue.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

VFX::LogOptions __swiftcall LogOptions.init(rawValue:)(VFX::LogOptions rawValue)
{
  VFX::LogOptions *v1;

  v1->rawValue = rawValue.rawValue;
  return rawValue;
}

void sub_1B1F1AA28()
{
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1F1AA88()
{
  uint64_t result;

  sub_1B1B7C554(0, &qword_1ED4BBC58, 255, (uint64_t (*)(uint64_t))sub_1B1F1B2BC, MEMORY[0x1E0DF0F58]);
  swift_allocObject();
  result = sub_1B222A1F8();
  qword_1ED4D0F30 = result;
  return result;
}

void sub_1B1F1AAF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v11[4];
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v8 = *a4;
  if ((*a4 & 1) != 0)
  {
    sub_1B222A0CC();
    sub_1B222A084();
    sub_1B2228824();
    v15 = v11[2];
    v16 = v11[3];
    v17 = v12;
    v13 = v11[0];
    v14 = v11[1];
    v9 = sub_1B222A0B4();
    if (qword_1ED4B7F58 != -1)
      swift_once();
    os_unfair_lock_lock((os_unfair_lock_t)&dword_1ED4842F8);
    if (qword_1ED4B8530 != -1)
      swift_once();
    if (sub_1B1B0F01C(v9, qword_1ED4B8520))
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&dword_1ED4842F8);
      return;
    }
    sub_1B1B8A534(&v10, v9);
    os_unfair_lock_unlock((os_unfair_lock_t)&dword_1ED4842F8);
  }
  *(_QWORD *)&v11[0] = v8;
  (*(void (**)(uint64_t, _OWORD *, uint64_t, uint64_t))(*(_QWORD *)v4 + 88))(a1, v11, a2, a3);
}

uint64_t sub_1B1F1AC54()
{
  uint64_t result;

  sub_1B1F1B280();
  result = sub_1B22290B8();
  qword_1ED4D0FD8 = result;
  return result;
}

uint64_t sub_1B1F1ACB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_1B22290AC();
  MEMORY[0x1E0C80A78](v0, v1);
  v2 = sub_1B22283B0();
  sub_1B1BCDB6C(v2, qword_1ED4D0E48);
  sub_1B1B40EC8(v2, (uint64_t)qword_1ED4D0E48);
  sub_1B22290A0();
  return sub_1B22283A4();
}

uint64_t sub_1B1F1AD70(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v22;
  uint64_t v23;
  int v24;

  v24 = a1;
  sub_1B1B1F358();
  v8 = v7;
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1B222820C();
  v12 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23, v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *a2;
  if (qword_1ED4BF688 != -1)
    swift_once();
  sub_1B1B7C554(0, (unint64_t *)&qword_1ED4BF700, 255, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v16 + 56) = MEMORY[0x1E0DEA968];
  *(_QWORD *)(v16 + 64) = sub_1B1B1F47C();
  *(_QWORD *)(v16 + 32) = a3;
  *(_QWORD *)(v16 + 40) = a4;
  swift_bridgeObjectRetain();
  v17 = v24;
  sub_1B222835C();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_1B2228200();
  v18 = v8[12];
  v19 = v8[16];
  v20 = &v11[v8[20]];
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v11, v15, v23);
  v11[v18] = v17;
  *(_QWORD *)&v11[v19] = v22;
  *(_QWORD *)v20 = a3;
  *((_QWORD *)v20 + 1) = a4;
  swift_bridgeObjectRetain();
  sub_1B2228428();
  swift_release();
  return sub_1B1B429AC((uint64_t)v11);
}

uint64_t sub_1B1F1AF70(int a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;

  v7 = *a2;
  if (qword_1ED4BF658 != -1)
    swift_once();
  v9 = v7;
  swift_retain();
  sub_1B1F1AD70(a1, &v9, a3, a4);
  return swift_release();
}

uint64_t sub_1B1F1B008(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v2 = sub_1B22288A8();
  v4 = v3;
  if (qword_1ED4BF658 != -1)
    swift_once();
  v6 = 0;
  swift_retain();
  sub_1B1F1AD70(a1, &v6, v2, v4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

unint64_t sub_1B1F1B0F4()
{
  unint64_t result;

  result = qword_1EEF60CA8;
  if (!qword_1EEF60CA8)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for LogOptions, &type metadata for LogOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60CA8);
  }
  return result;
}

unint64_t sub_1B1F1B13C()
{
  unint64_t result;

  result = qword_1EEF60CB0;
  if (!qword_1EEF60CB0)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for LogOptions, &type metadata for LogOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60CB0);
  }
  return result;
}

unint64_t sub_1B1F1B184()
{
  unint64_t result;

  result = qword_1EEF60CB8;
  if (!qword_1EEF60CB8)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for LogOptions, &type metadata for LogOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60CB8);
  }
  return result;
}

unint64_t sub_1B1F1B1CC()
{
  unint64_t result;

  result = qword_1EEF60CC0;
  if (!qword_1EEF60CC0)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for LogOptions, &type metadata for LogOptions);
    atomic_store(result, (unint64_t *)&qword_1EEF60CC0);
  }
  return result;
}

ValueMetadata *type metadata accessor for LogOptions()
{
  return &type metadata for LogOptions;
}

uint64_t type metadata accessor for Logger()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for OSLogger()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for ThreadLogger()
{
  return objc_opt_self();
}

unint64_t sub_1B1F1B280()
{
  unint64_t result;

  result = qword_1ED4BF288;
  if (!qword_1ED4BF288)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1ED4BF288);
  }
  return result;
}

void sub_1B1F1B2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B1B7C554(a1, (unint64_t *)&unk_1ED4BF420, a3, (uint64_t (*)(uint64_t))type metadata accessor for Logger, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
}

void sub_1B1F1B2D8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BF690)
  {
    sub_1B1B1F358();
    v0 = sub_1B2228440();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BF690);
  }
}

uint64_t sub_1B1F1B33C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;

  v3 = v2;
  v7 = v2[4];
  v6 = v2 + 4;
  v5 = v7;
  if (a1 < 1)
  {
    result = swift_unknownObjectRelease();
    *v6 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  else
  {
    if (!v5 || v3[6] != a1)
    {
      v9 = sub_1B1BA2B0C(a1, 32);
      v11 = v10;
      v13 = v12;
      swift_unknownObjectRelease();
      v3[4] = v9;
      v3[5] = v11;
      v3[6] = v13;
    }
    swift_retain();
    v14 = sub_1B1D22DA8(0, a1);
    v16 = v15;
    v18 = v17;
    swift_unknownObjectRetain();
    swift_release();
    result = swift_unknownObjectRelease();
    v3[1] = v14;
    v3[2] = v16;
    v3[3] = v18;
    v3[7] = *(_QWORD *)(*(_QWORD *)(a2 + 288) + 128);
  }
  return result;
}

uint64_t sub_1B1F1B41C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2[1];
  if (!v4)
  {
    v6 = 0;
    v7 = 0;
    v5 = 0;
LABEL_6:
    v8 = 0;
    v9 = 0;
    goto LABEL_7;
  }
  v5 = v2[4];
  if (!v5)
  {
    v4 = 0;
    v6 = 0;
    v7 = 0;
    goto LABEL_6;
  }
  v6 = *v2 + v2[2];
  v7 = v2[3] - *v2;
  v8 = *v2 + v2[5];
  v9 = v2[6] - *v2;
  *v2 += (result + v2[7] - 1) & -v2[7];
  swift_unknownObjectRetain();
  result = swift_unknownObjectRetain();
LABEL_7:
  *a2 = v4;
  a2[1] = v6;
  a2[2] = v7;
  a2[3] = v5;
  a2[4] = v8;
  a2[5] = v9;
  return result;
}

uint64_t destroy for DoubleBufferAllocator()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for DoubleBufferAllocator(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for DoubleBufferAllocator(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  a1[7] = a2[7];
  return a1;
}

uint64_t assignWithTake for DoubleBufferAllocator(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for DoubleBufferAllocator(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DoubleBufferAllocator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DoubleBufferAllocator()
{
  return &type metadata for DoubleBufferAllocator;
}

void sub_1B1F1B710()
{
  sub_1B2229688();
  __break(1u);
}

_QWORD *sub_1B1F1B758(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  v3 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828((_QWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder), (unint64_t *)(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)(v2 + v3) = *(_OWORD *)((char *)a1 + OBJC_IVAR____TtC3VFX12ConstantNode_semantic);
  return sub_1B1BCE388(a1);
}

uint64_t sub_1B1F1B7D0()
{
  return type metadata accessor for PredefinedConstantNode(0);
}

uint64_t type metadata accessor for PredefinedConstantNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60CC8);
}

uint64_t sub_1B1F1B7EC()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1F1B820()
{
  return 26960;
}

uint64_t sub_1B1F1B82C@<X0>(unint64_t *a1@<X8>)
{
  return sub_1B1F1B940(a1, 3.1416);
}

void sub_1B1F1B844()
{
  swift_allocObject();
  sub_1B1F1C198();
}

uint64_t sub_1B1F1B87C()
{
  return type metadata accessor for PiNode(0);
}

uint64_t type metadata accessor for PiNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60CD8);
}

uint64_t sub_1B1F1B898()
{
  return 0x69506F7754;
}

uint64_t sub_1B1F1B8AC@<X0>(unint64_t *a1@<X8>)
{
  return sub_1B1F1B940(a1, 6.2832);
}

uint64_t sub_1B1F1B8BC()
{
  return type metadata accessor for TwoPiNode(0);
}

uint64_t type metadata accessor for TwoPiNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60CE8);
}

uint64_t sub_1B1F1B8D8()
{
  return 0x6950666C6148;
}

uint64_t sub_1B1F1B8EC@<X0>(unint64_t *a1@<X8>)
{
  return sub_1B1F1B940(a1, 1.5708);
}

uint64_t sub_1B1F1B8FC()
{
  return type metadata accessor for HalfPiNode(0);
}

uint64_t type metadata accessor for HalfPiNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60CF8);
}

uint64_t sub_1B1F1B918()
{
  return 0x6E6F6C69737045;
}

uint64_t sub_1B1F1B930@<X0>(unint64_t *a1@<X8>)
{
  return sub_1B1F1B940(a1, 0.0000001);
}

uint64_t sub_1B1F1B940@<X0>(unint64_t *a1@<X8>, float a2@<S0>)
{
  uint64_t DynamicType;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  _QWORD v7[4];

  v7[3] = MEMORY[0x1E0DEB188];
  *(float *)v7 = a2;
  sub_1B19FA070(v7, MEMORY[0x1E0DEB188]);
  DynamicType = swift_getDynamicType();
  v4 = sub_1B1D76F30(DynamicType);
  if ((~v4 & 0xF000000000000007) != 0)
  {
    v5 = v4;
    sub_1B1A02864((uint64_t)v7, (uint64_t)(a1 + 1));
    *a1 = v5;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F1BA54()
{
  return type metadata accessor for EpsilonNode(0);
}

uint64_t type metadata accessor for EpsilonNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60D08);
}

uint64_t sub_1B1F1BA70()
{
  return 0x797469746E656449;
}

uint64_t sub_1B1F1BA90@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t DynamicType;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;
  _QWORD v7[4];

  type metadata accessor for simd_float2x2(0);
  v7[3] = v2;
  v7[0] = 1065353216;
  v7[1] = 0x3F80000000000000;
  sub_1B19FA070(v7, v2);
  DynamicType = swift_getDynamicType();
  v4 = sub_1B1D76F30(DynamicType);
  if ((~v4 & 0xF000000000000007) != 0)
  {
    v5 = v4;
    sub_1B1A02864((uint64_t)v7, (uint64_t)(a1 + 1));
    *a1 = v5;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F1BBB8()
{
  return type metadata accessor for Identity2x2Node(0);
}

uint64_t type metadata accessor for Identity2x2Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60D18);
}

uint64_t sub_1B1F1BBD4()
{
  return 0x797469746E656449;
}

uint64_t sub_1B1F1BBF4@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t DynamicType;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  _QWORD v9[4];

  type metadata accessor for simd_float3x3(0);
  v3 = v2;
  v9[3] = v2;
  v4 = (_OWORD *)swift_allocObject();
  v9[0] = v4;
  v4[1] = xmmword_1B2244DB0;
  v4[2] = xmmword_1B2244DD0;
  v4[3] = xmmword_1B2244D90;
  sub_1B19FA070(v9, v3);
  DynamicType = swift_getDynamicType();
  v6 = sub_1B1D76F30(DynamicType);
  if ((~v6 & 0xF000000000000007) != 0)
  {
    v7 = v6;
    sub_1B1A02864((uint64_t)v9, (uint64_t)(a1 + 1));
    *a1 = v7;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F1BD40()
{
  return type metadata accessor for Identity3x3Node(0);
}

uint64_t type metadata accessor for Identity3x3Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60D28);
}

uint64_t sub_1B1F1BD5C()
{
  return 0x797469746E656449;
}

uint64_t sub_1B1F1BD7C@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _OWORD *v4;
  uint64_t DynamicType;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  _QWORD v9[4];

  type metadata accessor for simd_float4x4(0);
  v3 = v2;
  v9[3] = v2;
  v4 = (_OWORD *)swift_allocObject();
  v9[0] = v4;
  v4[1] = xmmword_1B2244DB0;
  v4[2] = xmmword_1B2244DD0;
  v4[3] = xmmword_1B2244D90;
  v4[4] = xmmword_1B2244E20;
  sub_1B19FA070(v9, v3);
  DynamicType = swift_getDynamicType();
  v6 = sub_1B1D76F30(DynamicType);
  if ((~v6 & 0xF000000000000007) != 0)
  {
    v7 = v6;
    sub_1B1A02864((uint64_t)v9, (uint64_t)(a1 + 1));
    *a1 = v7;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F1BED0()
{
  return type metadata accessor for Identity4x4Node(0);
}

uint64_t type metadata accessor for Identity4x4Node(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60D38);
}

unint64_t sub_1B1F1BEEC()
{
  return 0xD000000000000012;
}

uint64_t sub_1B1F1BF08@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t DynamicType;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  _QWORD v8[4];

  type metadata accessor for simd_quatf(0);
  v3 = v2;
  v8[3] = v2;
  v8[0] = swift_allocObject();
  *(_OWORD *)(v8[0] + 16) = xmmword_1B2244E20;
  sub_1B19FA070(v8, v3);
  DynamicType = swift_getDynamicType();
  v5 = sub_1B1D76F30(DynamicType);
  if ((~v5 & 0xF000000000000007) != 0)
  {
    v6 = v5;
    sub_1B1A02864((uint64_t)v8, (uint64_t)(a1 + 1));
    *a1 = v6;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

_QWORD *sub_1B1F1C040()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v4[5];

  v1 = v0;
  (*(void (**)(unint64_t *__return_ptr))(*v0 + 312))(v4);
  v2 = OBJC_IVAR____TtC3VFX12ConstantNode_semantic;
  sub_1B1A02828(v4, (_QWORD *)((char *)v1 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  *(_OWORD *)((char *)v1 + v2) = xmmword_1B2246910;
  v1[2] = MEMORY[0x1E0DEE9D8];
  v1[3] = 0;
  v1[4] = 0;
  sub_1B2228260();
  sub_1B1A028A0(v4);
  return v1;
}

uint64_t sub_1B1F1C0D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  sub_1B1B28F18(*(_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  v2 = sub_1B222826C();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1B1A028A0((unint64_t *)(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder));
  return swift_deallocClassInstance();
}

uint64_t sub_1B1F1C14C()
{
  return type metadata accessor for IdentityQuaternionNode(0);
}

uint64_t type metadata accessor for IdentityQuaternionNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60D48);
}

uint64_t sub_1B1F1C168()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F1C178()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F1C188()
{
  return swift_deallocObject();
}

void sub_1B1F1C198()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

BOOL sub_1B1F1C23C(char a1)
{
  return a1 == 2;
}

uint64_t sub_1B1F1C24C(unsigned __int8 a1)
{
  return ((uint64_t (*)(__n128))((char *)sub_1B1F1C270 + 4 * byte_1B229FF80[a1]))((__n128)xmmword_1B2244DB0);
}

double sub_1B1F1C270()
{
  return 0.0078125;
}

double sub_1B1F1C27C()
{
  return 0.0;
}

double sub_1B1F1C288()
{
  double result;

  *(_QWORD *)&result = 3212836864;
  return result;
}

double sub_1B1F1C294()
{
  return -0.0078125;
}

double sub_1B1F1C2A0()
{
  return 0.0;
}

uint64_t sub_1B1F1C2AC()
{
  sub_1B1F1D248();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1C308()
{
  sub_1B1F1D248();
  return sub_1B22289F8();
}

uint64_t sub_1B1F1C354()
{
  sub_1B1F1D28C();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1C3B0()
{
  sub_1B1F1D28C();
  return sub_1B22289F8();
}

void sub_1B1F1C3FC(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C49C0;
}

uint64_t sub_1B1F1C40C()
{
  sub_1B1F1D06C();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1C468()
{
  sub_1B1F1D06C();
  return sub_1B22289F8();
}

void sub_1B1F1C4B4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63822C8;
}

uint64_t sub_1B1F1C4C4()
{
  sub_1B1F1D204();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1C520()
{
  sub_1B1F1D204();
  return sub_1B22289F8();
}

void sub_1B1F1C56C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E636FEB0;
}

uint64_t sub_1B1F1C57C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1F1CE20(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1F1C5A4(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229BBC();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B1F1C634()
{
  sub_1B222A06C();
  sub_1B222A084();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F1C698()
{
  return sub_1B1F1C634();
}

uint64_t sub_1B1F1C6A4()
{
  sub_1B222A084();
  return sub_1B222A09C();
}

uint64_t sub_1B1F1C6E4()
{
  sub_1B222A06C();
  sub_1B222A084();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

BOOL sub_1B1F1C740(float *a1, float *a2)
{
  return *(unsigned __int8 *)a1 == *(unsigned __int8 *)a2 && a1[1] == a2[1];
}

void sub_1B1F1C76C(_QWORD *a1, char a2)
{
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A15C();
  __asm { BR              X10 }
}

uint64_t sub_1B1F1C7D0()
{
  uint64_t v0;
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B2229B98();
  if (!v0)
  {
    sub_1B19FC264((uint64_t)v2, v3);
    sub_1B2229B8C();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

void sub_1B1F1C8A8(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  char v4;
  float v5;

  v5 = sub_1B1F1CEEC(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = v4;
    *(float *)(a2 + 4) = v5;
  }
}

void sub_1B1F1C8D4(_QWORD *a1)
{
  char *v1;

  sub_1B1F1C76C(a1, *v1);
}

void sub_1B1F1C8F0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6381E88;
}

uint64_t sub_1B1F1C900()
{
  sub_1B1F1DD90();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1C95C()
{
  sub_1B1F1DD90();
  return sub_1B22289F8();
}

void sub_1B1F1C9A8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6382078;
}

uint64_t sub_1B1F1C9B8()
{
  sub_1B1F1DD4C();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1CA14()
{
  sub_1B1F1DD4C();
  return sub_1B22289F8();
}

void sub_1B1F1CA60(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63C47E0;
}

uint64_t sub_1B1F1CA70()
{
  sub_1B1F1D0B0();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1CACC()
{
  sub_1B1F1D0B0();
  return sub_1B22289F8();
}

uint64_t sub_1B1F1CB18@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1B1F1D058(*a1);
  *a2 = result;
  return result;
}

void sub_1B1F1CB40(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E638C090;
}

uint64_t sub_1B1F1CB50()
{
  sub_1B1F1D0F4();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1CBAC()
{
  sub_1B1F1D0F4();
  return sub_1B22289F8();
}

void sub_1B1F1CBF8(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E6387518;
}

uint64_t sub_1B1F1CC08()
{
  sub_1B1F1D138();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1CC64()
{
  sub_1B1F1D138();
  return sub_1B22289F8();
}

void sub_1B1F1CCB0(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63B3DB0;
}

uint64_t sub_1B1F1CCC0()
{
  sub_1B1F1D17C();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1CD1C()
{
  sub_1B1F1D17C();
  return sub_1B22289F8();
}

void sub_1B1F1CD68(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63B4BC8;
}

uint64_t sub_1B1F1CD78()
{
  sub_1B1F1D1C0();
  return sub_1B2228A70();
}

uint64_t sub_1B1F1CDD4()
{
  sub_1B1F1D1C0();
  return sub_1B22289F8();
}

uint64_t sub_1B1F1CE20(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 v3;
  uint64_t v4;
  _BYTE v6[24];
  uint64_t v7;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return 0;
  }
  else
  {
    sub_1B19FC264((uint64_t)v6, v7);
    v3 = sub_1B2229A90();
    if ((v3 & 0xFC) != 0)
      v4 = 0;
    else
      v4 = v3;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v4;
}

float sub_1B1F1CEEC(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  float v4;
  _BYTE v6[40];
  _BYTE v7[24];
  uint64_t v8;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A12C();
  if (v1)
    goto LABEL_8;
  sub_1B19FC264((uint64_t)v7, v8);
  if ((unint64_t)sub_1B2229A90() >= 4)
  {
    sub_1B19FA198((uint64_t)v7, (uint64_t)v6);
    sub_1B22294CC();
    swift_allocError();
    sub_1B222949C();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
LABEL_8:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v2;
  }
  sub_1B19FC264((uint64_t)v7, v8);
  sub_1B2229A84();
  v2 = v4;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B1F1D058(uint64_t result)
{
  if (result >= 6u)
    return 6;
  else
    return result;
}

unint64_t sub_1B1F1D06C()
{
  unint64_t result;

  result = qword_1ED4BA1D0;
  if (!qword_1ED4BA1D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0D50, &type metadata for ScaleMode);
    atomic_store(result, (unint64_t *)&qword_1ED4BA1D0);
  }
  return result;
}

unint64_t sub_1B1F1D0B0()
{
  unint64_t result;

  result = qword_1ED4BA1C0;
  if (!qword_1ED4BA1C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0D18, &type metadata for NoiseKind);
    atomic_store(result, (unint64_t *)&qword_1ED4BA1C0);
  }
  return result;
}

unint64_t sub_1B1F1D0F4()
{
  unint64_t result;

  result = qword_1EEF60D58;
  if (!qword_1EEF60D58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0CE0, &type metadata for FlockingLocalAxis);
    atomic_store(result, (unint64_t *)&qword_1EEF60D58);
  }
  return result;
}

unint64_t sub_1B1F1D138()
{
  unint64_t result;

  result = qword_1EEF60D60;
  if (!qword_1EEF60D60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0CA8, &type metadata for FlockingSizeMode);
    atomic_store(result, (unint64_t *)&qword_1EEF60D60);
  }
  return result;
}

unint64_t sub_1B1F1D17C()
{
  unint64_t result;

  result = qword_1EEF60D68;
  if (!qword_1EEF60D68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0C70, &type metadata for FluidSolver2DSolverSetupType);
    atomic_store(result, (unint64_t *)&qword_1EEF60D68);
  }
  return result;
}

unint64_t sub_1B1F1D1C0()
{
  unint64_t result;

  result = qword_1EEF60D70;
  if (!qword_1EEF60D70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0C38, &type metadata for FluidSolver2DSolverBorderType);
    atomic_store(result, (unint64_t *)&qword_1EEF60D70);
  }
  return result;
}

unint64_t sub_1B1F1D204()
{
  unint64_t result;

  result = qword_1ED4B8B98;
  if (!qword_1ED4B8B98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0C00, &type metadata for TextureChannel);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B98);
  }
  return result;
}

unint64_t sub_1B1F1D248()
{
  unint64_t result;

  result = qword_1ED4B7C28;
  if (!qword_1ED4B7C28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A976C, &type metadata for AddressMode);
    atomic_store(result, (unint64_t *)&qword_1ED4B7C28);
  }
  return result;
}

unint64_t sub_1B1F1D28C()
{
  unint64_t result;

  result = qword_1EEF60D78;
  if (!qword_1EEF60D78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A9734, &type metadata for FilterMode);
    atomic_store(result, (unint64_t *)&qword_1EEF60D78);
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetDataKind()
{
  return &type metadata for TargetDataKind;
}

ValueMetadata *type metadata accessor for SourceDataKind()
{
  return &type metadata for SourceDataKind;
}

uint64_t storeEnumTagSinglePayload for FlockingLocalAxis(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1B1F1D348 + 4 * byte_1B229FF8F[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1B1F1D37C + 4 * byte_1B229FF8A[v4]))();
}

uint64_t sub_1B1F1D37C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D384(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F1D38CLL);
  return result;
}

uint64_t sub_1B1F1D398(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F1D3A0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1B1F1D3A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D3AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FlockingLocalAxis()
{
  return &type metadata for FlockingLocalAxis;
}

ValueMetadata *type metadata accessor for FlockingSizeMode()
{
  return &type metadata for FlockingSizeMode;
}

uint64_t _s3VFX11CompositionV9OperationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1F1D424 + 4 * byte_1B229FF99[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1F1D458 + 4 * byte_1B229FF94[v4]))();
}

uint64_t sub_1B1F1D458(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D460(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F1D468);
  return result;
}

uint64_t sub_1B1F1D474(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F1D47CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1F1D480(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D488(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Composition.Operation()
{
  return &type metadata for Composition.Operation;
}

uint64_t getEnumTagSinglePayload for Composition(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && a1[8])
    return (*(_DWORD *)a1 + 253);
  v3 = *a1;
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Composition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for Composition()
{
  return &type metadata for Composition;
}

ValueMetadata *type metadata accessor for ScaleMode()
{
  return &type metadata for ScaleMode;
}

uint64_t _s3VFX9NoiseKindOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1F1D598 + 4 * byte_1B229FFA3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1F1D5CC + 4 * byte_1B229FF9E[v4]))();
}

uint64_t sub_1B1F1D5CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D5D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F1D5DCLL);
  return result;
}

uint64_t sub_1B1F1D5E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F1D5F0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1F1D5F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D5FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NoiseKind()
{
  return &type metadata for NoiseKind;
}

uint64_t storeEnumTagSinglePayload for TextureChannel(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1F1D664 + 4 * byte_1B229FFAD[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1F1D698 + 4 * byte_1B229FFA8[v4]))();
}

uint64_t sub_1B1F1D698(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D6A0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F1D6A8);
  return result;
}

uint64_t sub_1B1F1D6B4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F1D6BCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1F1D6C0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D6C8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TextureChannel()
{
  return &type metadata for TextureChannel;
}

uint64_t storeEnumTagSinglePayload for FluidSolver2DSolverBorderType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1B1F1D730 + 4 * byte_1B229FFB7[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1B1F1D764 + 4 * byte_1B229FFB2[v4]))();
}

uint64_t sub_1B1F1D764(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D76C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F1D774);
  return result;
}

uint64_t sub_1B1F1D780(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F1D788);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1B1F1D78C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D794(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FluidSolver2DSolverBorderType()
{
  return &type metadata for FluidSolver2DSolverBorderType;
}

uint64_t _s3VFX28FluidSolver2DSolverSetupTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1B1F1D7FC + 4 * byte_1B229FFC1[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1B1F1D830 + 4 * byte_1B229FFBC[v4]))();
}

uint64_t sub_1B1F1D830(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D838(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F1D840);
  return result;
}

uint64_t sub_1B1F1D84C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F1D854);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1B1F1D858(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F1D860(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FluidSolver2DSolverSetupType()
{
  return &type metadata for FluidSolver2DSolverSetupType;
}

uint64_t sub_1B1F1D87C()
{
  return sub_1B1D5E388(&qword_1EEF60D80, &qword_1EEF60D88);
}

unint64_t sub_1B1F1D8AC()
{
  unint64_t result;

  result = qword_1EEF60D90;
  if (!qword_1EEF60D90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0488, &type metadata for FluidSolver2DSolverSetupType);
    atomic_store(result, (unint64_t *)&qword_1EEF60D90);
  }
  return result;
}

uint64_t sub_1B1F1D8F0()
{
  return sub_1B1D5E388(&qword_1EEF60D98, &qword_1EEF60DA0);
}

unint64_t sub_1B1F1D920()
{
  unint64_t result;

  result = qword_1EEF60DA8;
  if (!qword_1EEF60DA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0528, &type metadata for FluidSolver2DSolverBorderType);
    atomic_store(result, (unint64_t *)&qword_1EEF60DA8);
  }
  return result;
}

uint64_t sub_1B1F1D964()
{
  return sub_1B1D5E388(&qword_1EEF60DB0, &qword_1EEF60DB8);
}

unint64_t sub_1B1F1D994()
{
  unint64_t result;

  result = qword_1EEF60DC0;
  if (!qword_1EEF60DC0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A05C8, &type metadata for TextureChannel);
    atomic_store(result, (unint64_t *)&qword_1EEF60DC0);
  }
  return result;
}

uint64_t sub_1B1F1D9D8()
{
  return sub_1B1D5E388(&qword_1EEF60DC8, &qword_1EEF60DD0);
}

unint64_t sub_1B1F1DA08()
{
  unint64_t result;

  result = qword_1EEF60DD8;
  if (!qword_1EEF60DD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0668, &type metadata for NoiseKind);
    atomic_store(result, (unint64_t *)&qword_1EEF60DD8);
  }
  return result;
}

uint64_t sub_1B1F1DA4C()
{
  return sub_1B1D5E388(&qword_1EEF60DE0, &qword_1EEF60DE8);
}

unint64_t sub_1B1F1DA7C()
{
  unint64_t result;

  result = qword_1EEF60DF0;
  if (!qword_1EEF60DF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0708, &type metadata for ScaleMode);
    atomic_store(result, (unint64_t *)&qword_1EEF60DF0);
  }
  return result;
}

unint64_t sub_1B1F1DAC4()
{
  unint64_t result;

  result = qword_1EEF60DF8;
  if (!qword_1EEF60DF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0730, &type metadata for Composition);
    atomic_store(result, (unint64_t *)&qword_1EEF60DF8);
  }
  return result;
}

uint64_t sub_1B1F1DB08()
{
  return sub_1B1D5E388(&qword_1EEF60E00, &qword_1EEF60E08);
}

unint64_t sub_1B1F1DB38()
{
  unint64_t result;

  result = qword_1EEF60E10;
  if (!qword_1EEF60E10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0848, &type metadata for Composition.Operation);
    atomic_store(result, (unint64_t *)&qword_1EEF60E10);
  }
  return result;
}

uint64_t sub_1B1F1DB7C()
{
  return sub_1B1D5E388(&qword_1EEF60E18, &qword_1EEF60E20);
}

unint64_t sub_1B1F1DBAC()
{
  unint64_t result;

  result = qword_1EEF60E28;
  if (!qword_1EEF60E28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A08E8, &type metadata for FlockingSizeMode);
    atomic_store(result, (unint64_t *)&qword_1EEF60E28);
  }
  return result;
}

uint64_t sub_1B1F1DBF0()
{
  return sub_1B1D5E388(&qword_1EEF60E30, &qword_1EEF60E38);
}

unint64_t sub_1B1F1DC20()
{
  unint64_t result;

  result = qword_1EEF60E40;
  if (!qword_1EEF60E40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0988, &type metadata for FlockingLocalAxis);
    atomic_store(result, (unint64_t *)&qword_1EEF60E40);
  }
  return result;
}

uint64_t sub_1B1F1DC64()
{
  return sub_1B1D5E388(&qword_1EEF60E48, &qword_1EEF60E50);
}

unint64_t sub_1B1F1DC94()
{
  unint64_t result;

  result = qword_1EEF60E58;
  if (!qword_1EEF60E58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0AB0, &type metadata for SourceDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF60E58);
  }
  return result;
}

uint64_t sub_1B1F1DCD8()
{
  return sub_1B1D5E388(&qword_1EEF60E60, &qword_1EEF60E68);
}

unint64_t sub_1B1F1DD08()
{
  unint64_t result;

  result = qword_1EEF60E70;
  if (!qword_1EEF60E70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0BD8, &type metadata for TargetDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF60E70);
  }
  return result;
}

unint64_t sub_1B1F1DD4C()
{
  unint64_t result;

  result = qword_1EEF60E78;
  if (!qword_1EEF60E78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0B60, &type metadata for TargetDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF60E78);
  }
  return result;
}

unint64_t sub_1B1F1DD90()
{
  unint64_t result;

  result = qword_1EEF60E80;
  if (!qword_1EEF60E80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0A38, &type metadata for SourceDataKind);
    atomic_store(result, (unint64_t *)&qword_1EEF60E80);
  }
  return result;
}

uint64_t sub_1B1F1DDE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v0 = sub_1B222A1A4();
  v2 = v1;
  if (v0 == sub_1B222A1A4() && v2 == v3)
    v4 = 1;
  else
    v4 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_1B1F1DE94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  int v4;
  unsigned __int8 *v5;
  uint64_t result;
  char __s[8];
  uint64_t v8;
  unsigned int v9;

  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) != 0)
    {
      *(_QWORD *)__s = a1;
      v8 = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = strlen(__s);
      v5 = (unsigned __int8 *)__s;
      return MurmurHash2(v5, v4, 0);
    }
    if ((a1 & 0x1000000000000000) != 0)
    {
      v3 = (const char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      v4 = strlen(v3);
      v5 = (unsigned __int8 *)v3;
      return MurmurHash2(v5, v4, 0);
    }
  }
  result = sub_1B222940C();
  if (!v2)
    return v9;
  return result;
}

uint64_t sub_1B1F1DF40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 32))(a3, a1);
}

uint64_t sub_1B1F1DF58()
{
  unint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v0 = sub_1B222A1BC();
  if ((v1 & 1) != 0)
  {
    v3 = sub_1B222A1A4();
    v2 = sub_1B1F1DE94(v3, v4);
    swift_bridgeObjectRelease();
    return v2;
  }
  v2 = v0;
  if ((v0 & 0x8000000000000000) == 0 && !HIDWORD(v0))
    return v2;
  result = sub_1B222967C();
  __break(1u);
  return result;
}

uint64_t sub_1B1F1E04C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
  result = 0;
  switch(v1)
  {
    case 1:
      return result;
    case 2:
      result = 1;
      break;
    case 4:
      result = 2;
      break;
    case 8:
      result = 3;
      break;
    case 16:
      result = 4;
      break;
    default:
      sub_1B1EFD0E0();
      swift_allocError();
      *(_QWORD *)v3 = v1;
      *(_QWORD *)(v3 + 8) = 0;
      *(_BYTE *)(v3 + 16) = 0;
      result = swift_willThrow();
      break;
  }
  return result;
}

_QWORD *sub_1B1F1E0EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v9;
  _QWORD v10[7];

  v6 = sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v3)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1B19FA070(v10, v10[3]);
    v7 = sub_1B2228B6C();
    v9 = a3;
    MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v7, &v9);
    sub_1B2229D6C();
    v6 = (_QWORD *)v10[6];
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v6;
}

uint64_t sub_1B1F1E1F4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v9;
  _BYTE v10[24];
  uint64_t v11;
  uint64_t v12;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v12 = a2;
  sub_1B19FC264((uint64_t)v10, v11);
  v7 = sub_1B2228B6C();
  v9 = a5;
  MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v7, &v9);
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
}

_QWORD *sub_1B1F1E2C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  _QWORD *result;

  result = sub_1B1F1E0EC(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24));
  if (!v3)
    *a3 = result;
  return result;
}

uint64_t sub_1B1F1E2F8(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;

  return sub_1B1F1E1F4(a1, *v4, *(_QWORD *)(a2 + 16), a4, *(_QWORD *)(a2 + 32));
}

uint64_t sub_1B1F1E320(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_1B1DC3AC8(a2), (v5 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v3 + 56) + 24 * v4);
  else
    return 0;
}

uint64_t sub_1B1F1E374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v26;
  _QWORD v28[3];
  uint64_t v29;

  v28[1] = a1;
  v28[2] = a2;
  v29 = a5;
  v7 = sub_1B2229124();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v28 - v10;
  v12 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for _KeyBox(0, a3, a4, v17);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18, v20);
  v22 = (char *)v28 - v21;
  sub_1B222A1B0();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, a3) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    v23 = 1;
    v24 = v29;
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    v25(v16, v11, a3);
    v25(v22, v16, a3);
    v26 = v29;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v29, v22, v18);
    v23 = 0;
    v24 = v26;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v24, v23, 1, v18);
}

uint64_t sub_1B1F1E504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v27 = a1;
  v28 = a4;
  v6 = sub_1B2229124();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for _KeyBox(0, a2, a3, v16);
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (char *)&v27 - v20;
  sub_1B222A1C8();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, a2) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v22 = 1;
    v23 = v28;
  }
  else
  {
    v24 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v24(v15, v10, a2);
    v24(v21, v15, a2);
    v25 = v28;
    (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v28, v21, v17);
    v22 = 0;
    v23 = v25;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v23, v22, 1, v17);
}

uint64_t sub_1B1F1E68C()
{
  return sub_1B222A1A4();
}

uint64_t sub_1B1F1E698()
{
  return sub_1B222A1BC();
}

uint64_t sub_1B1F1E6B8()
{
  return sub_1B1F1DDE8() & 1;
}

uint64_t sub_1B1F1E6D0()
{
  sub_1B222A1A4();
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F1E710()
{
  sub_1B222A06C();
  sub_1B1F1E6D0();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F1E758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  return sub_1B1F1E374(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), a4);
}

uint64_t sub_1B1F1E764()
{
  return sub_1B1F1E698();
}

uint64_t sub_1B1F1E77C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B1F1E504(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), a3);
}

uint64_t sub_1B1F1E790()
{
  sub_1B222A06C();
  sub_1B1F1E6D0();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F1E7D0(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22A1020, a1);
  return sub_1B222A1D4();
}

uint64_t sub_1B1F1E804(uint64_t a1)
{
  MEMORY[0x1B5E23E74](&unk_1B22A1020, a1);
  return sub_1B222A1E0();
}

uint64_t sub_1B1F1E838()
{
  return sub_1B1F1E6B8();
}

uint64_t sub_1B1F1E844@<X0>(char *a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  uint64_t result;

  v4 = strlen(a1);
  result = MurmurHash2((unsigned __int8 *)a1, v4, 0);
  *a2 = result;
  return result;
}

uint64_t sub_1B1F1E88C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = a2;
  *(_QWORD *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

uint64_t sub_1B1F1E8A0()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

uint64_t sub_1B1F1E8AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  uint64_t v5;

  result = sub_1B2229A0C();
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v5;
  *(_QWORD *)(a2 + 16) = a1;
  *(_BYTE *)(a2 + 24) = 0;
  return result;
}

uint64_t sub_1B1F1E904()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_1B222A06C();
  sub_1B2228824();
  sub_1B222A084();
  if (v1 != 1)
    sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F1E98C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_1B2228824();
  if (v1 == 1)
    return sub_1B222A084();
  sub_1B222A084();
  return sub_1B222A078();
}

uint64_t sub_1B1F1E9EC()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 24);
  sub_1B222A06C();
  sub_1B2228824();
  sub_1B222A084();
  if (v1 != 1)
    sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F1EA70()
{
  sub_1B1EFDF84();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F1EA98()
{
  sub_1B1EFDF84();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F1EAC0(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_1B2229D24();
}

float sub_1B1F1EAF0@<S0>(float *a1@<X0>, _DWORD *a2@<X8>)
{
  float result;

  result = *a1;
  *a2 = *(_DWORD *)a1;
  return result;
}

unint64_t sub_1B1F1EAFC(uint64_t a1)
{
  unint64_t result;

  result = sub_1B1F1EB20();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B1F1EB20()
{
  unint64_t result;

  result = qword_1ED4BA250;
  if (!qword_1ED4BA250)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB190], MEMORY[0x1E0DEB188]);
    atomic_store(result, (unint64_t *)&qword_1ED4BA250);
  }
  return result;
}

double sub_1B1F1EB68@<D0>(double *a1@<X0>, _QWORD *a2@<X8>)
{
  double result;

  result = *a1;
  *a2 = *(_QWORD *)a1;
  return result;
}

unint64_t sub_1B1F1EB74(uint64_t a1)
{
  unint64_t result;

  result = sub_1B1F1EB98();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B1F1EB98()
{
  unint64_t result;

  result = qword_1EEF60E88;
  if (!qword_1EEF60E88)
  {
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB078], MEMORY[0x1E0DEB070]);
    atomic_store(result, (unint64_t *)&qword_1EEF60E88);
  }
  return result;
}

uint64_t type metadata accessor for BinaryCodingTypeRegistry()
{
  return objc_opt_self();
}

uint64_t initializeWithCopy for _BinaryKey(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _BinaryKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithTake for _BinaryKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for _BinaryKey(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 25))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _BinaryKey(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 25) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _BinaryKey()
{
  return &type metadata for _BinaryKey;
}

unint64_t sub_1B1F1ED78()
{
  unint64_t result;

  result = qword_1EEF60E90;
  if (!qword_1EEF60E90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0E40, &type metadata for _BinaryKey);
    atomic_store(result, (unint64_t *)&qword_1EEF60E90);
  }
  return result;
}

unint64_t sub_1B1F1EDC0()
{
  unint64_t result;

  result = qword_1ED4B7C20;
  if (!qword_1ED4B7C20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0E68, &type metadata for _BinaryKey);
    atomic_store(result, (unint64_t *)&qword_1ED4B7C20);
  }
  return result;
}

unint64_t sub_1B1F1EE08()
{
  unint64_t result;

  result = qword_1ED4B7C18;
  if (!qword_1ED4B7C18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A0E90, &type metadata for _BinaryKey);
    atomic_store(result, (unint64_t *)&qword_1ED4B7C18);
  }
  return result;
}

uint64_t sub_1B1F1EE50(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 < 2 || a3 == 3)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for BinaryCoding.Err(uint64_t a1)
{
  return sub_1B1F1EE88(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_1B1F1EE88(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 - 1 < 2 || a3 == 3)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t _s3VFX12BinaryCodingO3ErrOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1F1EE50(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for BinaryCoding.Err(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1B1F1EE50(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_1B1F1EE88(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for BinaryCoding.Err(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_1B1F1EE88(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BinaryCoding.Err(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFA && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 250);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 6)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BinaryCoding.Err(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 250;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFA)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1F1F01C(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 5u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 6);
}

uint64_t sub_1B1F1F034(uint64_t result, unsigned int a2)
{
  if (a2 >= 6)
  {
    *(_QWORD *)result = a2 - 6;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 6;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for BinaryCoding.Err()
{
  return &type metadata for BinaryCoding.Err;
}

uint64_t type metadata accessor for ParallelCoder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ParallelCoder);
}

uint64_t sub_1B1F1F068(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  char v8;
  int v9;
  unsigned int v10;
  int v11;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v7 = *(_QWORD *)(v4 + 64);
  v8 = 8 * v7;
  if (v7 <= 3)
  {
    v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      v9 = *(_DWORD *)(a1 + v7);
      if (!v9)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(void))(v4 + 48))();
      return 0;
    }
  }
  v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7))
    goto LABEL_18;
LABEL_11:
  v11 = (v9 - 1) << v8;
  if (v7 > 3)
    v11 = 0;
  if (!(_DWORD)v7)
    return v5 + v11 + 1;
  if (v7 > 3)
    LODWORD(v7) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1F1F118 + 4 * byte_1B22A0DA0[(v7 - 1)]))();
}

void sub_1B1F1F168(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  BOOL v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = a3 >= v7;
  v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        v11 = 4u;
      }
      else if (v13 >= 0x100)
      {
        v11 = 2;
      }
      else
      {
        v11 = v13 > 1;
      }
    }
    else
    {
      v11 = 1u;
    }
  }
  else
  {
    v11 = 0u;
  }
  if (v7 < a2)
  {
    v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }
        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }
        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X11 }
}

uint64_t type metadata accessor for _KeyBox(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for _KeyBox);
}

void sub_1B1F1F324()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1F1F334()
{
  JUMPOUT(0x1B5E23E74);
}

void sub_1B1F1F344()
{
  JUMPOUT(0x1B5E23E74);
}

uint64_t sub_1B1F1F354()
{
  return 0x7961727241;
}

uint64_t sub_1B1F1F368@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = 0;
  v4 = OBJC_IVAR____TtC3VFX9ArrayNode_count;
  v5 = sub_1B19F3C4C(v3 | 0x4000000000000000, *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX9ArrayNode_count));
  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = *(_QWORD *)(v1 + v4);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v7 + 24) = result | 0x4000000000000000;
  *(_QWORD *)(v6 + 32) = v7;
  *a1 = v5;
  a1[1] = v6;
  v9 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E63C3338;
  a1[3] = v9;
  a1[4] = v9;
  a1[5] = v9;
  return result;
}

_QWORD *sub_1B1F1F468(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)swift_allocObject();
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC3VFX9ArrayNode_count) = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX9ArrayNode_count);
  v3 = MEMORY[0x1E0DEE9D8];
  v2[3] = 0;
  v2[4] = 0;
  v2[2] = v3;
  sub_1B2228260();
  swift_release();
  return v2;
}

void sub_1B1F1F4D8()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t sub_1B1F1F504()
{
  return type metadata accessor for ArrayNode(0);
}

uint64_t type metadata accessor for ArrayNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60E98);
}

uint64_t sub_1B1F1F520()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B1F1F564(_QWORD *a1)
{
  sub_1B19FA070(a1, a1[3]);
  return sub_1B1FF5998();
}

uint64_t sub_1B1F1F5D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  sub_1B19FA070(a1, a1[3]);
  result = sub_1B1FF5A30();
  if (!v2)
    *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX9ArrayNode_count) = v4;
  return result;
}

uint64_t sub_1B1F1F658()
{
  return 0x7961727241746547;
}

uint64_t sub_1B1F1F678@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226D240;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 16) = v4 | 0x4000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x2000000000000000;
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0x8000000000000030;
  *(_QWORD *)(v5 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  v7 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E63877F0;
  a1[3] = v7;
  a1[4] = v7;
  a1[5] = v7;
  return result;
}

uint64_t sub_1B1F1F788()
{
  return type metadata accessor for GetArraySizeNode(0);
}

uint64_t type metadata accessor for GetArraySizeNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60EA8);
}

uint64_t sub_1B1F1F7A4()
{
  return 0x7961727241746547;
}

uint64_t sub_1B1F1F7C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;

  sub_1B1A02758(0, (unint64_t *)&qword_1EEF5CB90, (uint64_t)&type metadata for TypeConstraint, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  v3 = swift_allocObject();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v3 + 16) = v4 | 0x4000000000000000;
  *(_QWORD *)(v2 + 32) = v3 | 0x2000000000000000;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = 0x8000000000000030;
  *(_QWORD *)(v2 + 40) = v5 | 0x6000000000000000;
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(v6 + 32) = result | 0x4000000000000000;
  *a1 = v2;
  a1[1] = v6;
  v8 = MEMORY[0x1E0DEE9D8];
  a1[2] = (uint64_t)&unk_1E6397DB8;
  a1[3] = v8;
  a1[4] = v8;
  a1[5] = v8;
  return result;
}

uint64_t sub_1B1F1F8F8()
{
  return type metadata accessor for GetArrayElementNode(0);
}

uint64_t type metadata accessor for GetArrayElementNode(uint64_t a1)
{
  return sub_1B17925E0(a1, (uint64_t *)&unk_1EEF60EB8);
}

uint64_t sub_1B1F1F914(uint64_t a1, char a2)
{
  char v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;

  v3 = a2 & 1;
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32);
  sub_1B1BCCD2C(*(_QWORD *)(a1 + 24));
  sub_1B1B632F0(v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1D759B8(v3, v4);
  sub_1B1B28D2C(v4);
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v5 + 32) = 0xD00000000000001CLL;
  v6 = v5 + 32;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 40) = 0x80000001B2344440;
  v7 = swift_retain();
  sub_1B214F4EC(v7);
  swift_release();
  v8 = sub_1B1B567DC(4);
  v10 = v9;
  swift_bridgeObjectRelease();
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v11 + 32) = v8;
  *(_QWORD *)(v11 + 40) = v10;
  sub_1B1B63150();
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 56) = 0;
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = v5;
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 40) = v11;
  *(_QWORD *)(inited + 48) = &unk_1E63C32F8;
  v13 = *(_QWORD *)(v5 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14 = sub_1B1C65D70(0, v13, 1, MEMORY[0x1E0DEE9D8]);
  v15 = v14;
  if (*(_QWORD *)(v5 + 16))
  {
    v16 = (unint64_t)&v14[4 * v14[2] + 4];
    if (v6 < v16 + 32 * v13 && v16 < v6 + 32 * v13)
      goto LABEL_29;
    swift_arrayInitWithCopy();
    if (v13)
      v15[2] += v13;
  }
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(inited + 40);
  v18 = *(_QWORD *)(v17 + 16);
  v19 = v15[2];
  v20 = v15[3];
  swift_bridgeObjectRetain();
  if (v19 + v18 > (uint64_t)(v20 >> 1))
  {
    if (v19 <= v19 + v18)
      v28 = v19 + v18;
    else
      v28 = v19;
    v15 = sub_1B1C65D70(1, v28, 1, v15);
    if (!*(_QWORD *)(v17 + 16))
      goto LABEL_12;
  }
  else if (!v18)
  {
    goto LABEL_12;
  }
  v21 = (unint64_t)&v15[4 * v15[2] + 4];
  if (v17 + 32 < v21 + 32 * v18 && v21 < v17 + 32 + 32 * v18)
    goto LABEL_29;
  swift_arrayInitWithCopy();
  if (v18)
    v15[2] += v18;
LABEL_12:
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(inited + 48);
  v23 = *(_QWORD *)(v22 + 16);
  v24 = v15[2];
  v25 = v15[3];
  swift_bridgeObjectRetain();
  if (v24 + v23 > (uint64_t)(v25 >> 1))
  {
    if (v24 <= v24 + v23)
      v29 = v24 + v23;
    else
      v29 = v24;
    v15 = sub_1B1C65D70(1, v29, 1, v15);
    if (!*(_QWORD *)(v22 + 16))
      goto LABEL_18;
  }
  else if (!v23)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v15;
  }
  v26 = (unint64_t)&v15[4 * v15[2] + 4];
  if (v22 + 32 >= v26 + 32 * v23 || v26 >= v22 + 32 + 32 * v23)
  {
    swift_arrayInitWithCopy();
    if (v23)
      v15[2] += v23;
    goto LABEL_18;
  }
LABEL_29:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1F1FD90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t inited;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      sub_1B1A02758(0, &qword_1EEF5CC20, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v4 = swift_allocObject();
      *(_OWORD *)(v4 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v4 + 32) = 37;
      v5 = v4 + 32;
      *(_QWORD *)(v4 + 40) = 0xE100000000000000;
      sub_1B1B63150();
      *(_QWORD *)(v4 + 48) = 0;
      *(_QWORD *)(v4 + 56) = 0;
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1B226D240;
      *(_QWORD *)(inited + 32) = v4;
      v7 = *(_QWORD *)(v4 + 16);
      swift_bridgeObjectRetain();
      v8 = sub_1B1C65D70(0, v7, 1, MEMORY[0x1E0DEE9D8]);
      v9 = v8;
      if (*(_QWORD *)(v4 + 16))
      {
        v10 = (unint64_t)&v8[4 * v8[2] + 4];
        if (v5 < v10 + 32 * v7 && v10 < v5 + 32 * v7)
        {
          swift_release();
          goto LABEL_45;
        }
        swift_arrayInitWithCopy();
        if (v7)
          v9[2] += v7;
      }
      swift_bridgeObjectRelease();
      swift_setDeallocating();
      sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      swift_arrayDestroy();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v3 = sub_1B1C65E78(0, v3[2] + 1, 1, v3);
      v13 = v3[2];
      v12 = v3[3];
      v14 = v13 + 1;
      if (v13 >= v12 >> 1)
        v3 = sub_1B1C65E78(v12 > 1, v13 + 1, 1, v3);
      ++v2;
      v3[2] = v14;
      v3[v13 + 4] = v9;
    }
    while (v1 != v2);
  }
  else
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v14 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!v14)
      goto LABEL_36;
  }
  swift_bridgeObjectRetain();
  v16 = 0;
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    v17 = v3[v16 + 4];
    v18 = *(_QWORD *)(v17 + 16);
    v19 = v15[2];
    v20 = v19 + v18;
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v20 <= v15[3] >> 1)
    {
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_19;
    }
    else
    {
      if (v19 <= v20)
        v22 = v19 + v18;
      else
        v22 = v19;
      v15 = sub_1B1C65D70(isUniquelyReferenced_nonNull_native, v22, 1, v15);
      if (!*(_QWORD *)(v17 + 16))
        goto LABEL_19;
    }
    v23 = (unint64_t)&v15[4 * v15[2] + 4];
    if (v17 + 32 < v23 + 32 * v18 && v23 < v17 + 32 + 32 * v18)
      goto LABEL_45;
    swift_arrayInitWithCopy();
    if (v18)
      v15[2] += v18;
LABEL_19:
    swift_bridgeObjectRelease();
    ++v16;
  }
  while (v14 != v16);
  swift_bridgeObjectRelease();
LABEL_36:
  swift_bridgeObjectRelease();
  sub_1B1B63150();
  v25 = swift_initStackObject();
  *(_OWORD *)(v25 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v25 + 32) = v15;
  v26 = v15[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v27 = sub_1B1C65D70(0, v26, 1, MEMORY[0x1E0DEE9D8]);
  v28 = v27;
  if (!v15[2])
    goto LABEL_44;
  v29 = (unint64_t)&v27[4 * v27[2] + 4];
  if ((unint64_t)(v15 + 4) >= v29 + 32 * v26 || v29 >= (unint64_t)&v15[4 * v26 + 4])
  {
    swift_arrayInitWithCopy();
    if (v26)
      v28[2] += v26;
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_setDeallocating();
    sub_1B1A02758(0, &qword_1EEF5AFE0, (uint64_t)&type metadata for CodeEmitter.Code, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    swift_arrayDestroy();
    return (uint64_t)v28;
  }
LABEL_45:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1F2021C(char a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;

  v1 = a1 & 1;
  v2 = swift_retain();
  v3 = sub_1B214F5F8(v2, v1);
  swift_release();
  return v3;
}

uint64_t sub_1B1F20268()
{
  return 0x28657A69732E3025;
}

unint64_t sub_1B1F20288()
{
  sub_1B2229430();
  swift_bridgeObjectRelease();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  return 0xD00000000000001ALL;
}

uint64_t sub_1B1F20348()
{
  uint64_t v0;

  sub_1B19F8D00(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1F2036C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F2037C()
{
  uint64_t v0;

  sub_1B1B28D2C(*(_QWORD *)(v0 + 16));
  return swift_deallocObject();
}

uint64_t sub_1B1F203A0()
{
  uint64_t v0;

  sub_1B19F8D00(*(_QWORD *)(v0 + 24));
  return swift_deallocObject();
}

uint64_t sub_1B1F203C4()
{
  sub_1B1F211F0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F203EC()
{
  sub_1B1F211F0();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F20414(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B1F21198();
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F211F0();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1F204D4()
{
  return type metadata accessor for ParticleSetID.System();
}

double sub_1B1F204F0()
{
  uint64_t v0;
  double result;

  sub_1B1BDB5D0();
  v0 = swift_allocObject();
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v0 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v0 + 32) = &type metadata for ParticleID;
  *(_QWORD *)(v0 + 40) = &off_1E636E760;
  return result;
}

uint64_t type metadata accessor for ParticleSetID.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1F20554(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  int v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 48);
  v17 = v3;
  v18 = *(_QWORD *)(a1 + 80);
  sub_1B1B7057C((uint64_t)&v10);
  sub_1B1B4F21C(a1);
  v4 = v11;
  v5 = v12;
  v6 = v14;
  v7 = v15;
  v8 = v13 | 0x10;
  *(_QWORD *)(v2 + 16) = v10;
  *(_DWORD *)(v2 + 24) = v4;
  *(_BYTE *)(v2 + 28) = v5;
  *(_QWORD *)(v2 + 32) = v8;
  *(_BYTE *)(v2 + 40) = v6;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B1F205F4()
{
  return "ParticleSetID.CPU";
}

uint64_t type metadata accessor for ParticleSetID.GPUSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1F20628(_QWORD *a1)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1 == 0;
  v3 = a1[2];
  v4 = a1[6];
  swift_retain();
  sub_1B1B1FC34((uint64_t)a1);
  sub_1B1FE6FB8(v4, v3, v2, 0, (uint64_t)a1, 0x656C636974726170, 0xEF64695F7465735FLL, 0);
  sub_1B1B1FC88((uint64_t)a1);
  return swift_release();
}

const char *sub_1B1F206C4()
{
  return "ParticleSetID.GPU";
}

uint64_t sub_1B1F206D8()
{
  return type metadata accessor for ParticleSetID.GPUSystem();
}

uint64_t *sub_1B1F206F4(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint32x4_t v24;
  uint32x4_t v25;
  uint32x4_t *v26;
  unint64_t v27;
  uint32x4_t v28;
  uint32x4_t v29;
  uint32x4_t v30;
  uint64_t v31;
  unsigned int *v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  unsigned int *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  __int128 v77;
  unsigned int v78;
  uint64_t v79[12];
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  _OWORD v91[2];
  uint64_t v92;
  _OWORD v93[2];
  uint64_t v94;
  _OWORD v95[2];
  uint64_t v96;
  _BYTE v97[40];
  _BYTE v98[48];

  v2 = *(_QWORD *)a1;
  v3 = *(_OWORD *)(a1 + 64);
  v95[0] = *(_OWORD *)(a1 + 48);
  v95[1] = v3;
  v96 = *(_QWORD *)(a1 + 80);
  v4 = swift_retain();
  sub_1B1E8FCE4(v4, (uint64_t)v95, 0x200000000, v79);
  sub_1B19F66A0((uint64_t)v79, (uint64_t)&v80, (unint64_t *)&qword_1ED4B7DE0);
  if (!(_QWORD)v80)
    return (uint64_t *)swift_release();
  v58 = a1;
  v5 = 0;
  v6 = *(double *)&v80;
  v88 = v80;
  v89 = v81;
  v73 = v83;
  v90 = v82;
  v8 = v84;
  v7 = v85;
  v76 = v86;
  v9 = -1;
  v78 = -1;
  v57 = v87;
  v72 = v84;
  v59 = v2;
  v10 = 0;
  if (v87 < 1 || !v84)
    goto LABEL_26;
  v11 = 0;
  v12 = v86[4];
  v56 = v85;
  v13 = *(unsigned __int8 *)(v85 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v93[0] = v80;
  v93[1] = v81;
  v94 = v82;
  v61 = v86 + 8;
  v62 = (uint64_t)(v86 + 6);
  v64 = v13;
  v60 = v12;
  do
  {
    v74 = v5;
    v14 = (unsigned int *)(v73 + 48 * v11);
    v15 = *v14;
    v16 = *((_QWORD *)v14 + 5);
    v68 = *((_QWORD *)v14 + 3);
    v70 = v14[1];
    v66 = *((_QWORD *)v14 + 4);
    if (v13)
    {
      v17 = (uint64_t *)*((_QWORD *)v14 + 2);
      v18 = *(os_unfair_lock_s **)(v16 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
      swift_release();
    }
    else
    {
      v17 = (uint64_t *)*((_QWORD *)v14 + 2);
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v12);
    sub_1B19F66A0(v62, (uint64_t)v98, &qword_1ED4B7FB0);
    v19 = v76[4];
    v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v76[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v76[7] = v20;
    v61[1] = 0;
    v61[2] = 0;
    *v61 = 0;
    swift_release();
    v21 = sub_1B1A12038((uint64_t)&type metadata for ParticleID, (uint64_t)&off_1E636E760, v17, v68, v66, (uint64_t)v76);
    if ((_DWORD)v15 == (_DWORD)v70)
    {
      v5 = v74;
      v8 = v72;
      v12 = v60;
      v13 = v64;
      goto LABEL_22;
    }
    v22 = v70 - v15;
    v8 = v72;
    if ((unint64_t)(v70 - v15) >= 8)
    {
      v23 = (v22 & 0xFFFFFFFFFFFFFFF8) + v15;
      v24 = (uint32x4_t)vdupq_n_s32(v10);
      v25 = (uint32x4_t)vdupq_n_s32(v9);
      v26 = (uint32x4_t *)(v21 + 4 * v15 + 16);
      v27 = v22 & 0xFFFFFFFFFFFFFFF8;
      v28 = v24;
      v29 = v25;
      v12 = v60;
      do
      {
        v30 = v26[-1];
        v25 = vminq_u32(v30, v25);
        v29 = vminq_u32(*v26, v29);
        v24 = vmaxq_u32(v30, v24);
        v28 = vmaxq_u32(*v26, v28);
        v26 += 2;
        v27 -= 8;
      }
      while (v27);
      v9 = vminvq_u32(vminq_u32(v25, v29));
      v10 = vmaxvq_u32(vmaxq_u32(v24, v28));
      v5 = v74;
      v13 = v64;
      if (v22 == (v22 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_22;
    }
    else
    {
      v23 = v15;
      v5 = v74;
      v12 = v60;
      v13 = v64;
    }
    v31 = v70 - v23;
    v32 = (unsigned int *)(v21 + 4 * v23);
    do
    {
      v34 = *v32++;
      v33 = v34;
      if (v34 < v9)
        v9 = v33;
      if (v33 > v10)
        v10 = v33;
      --v31;
    }
    while (v31);
LABEL_22:
    sub_1B1F05D48(v76, (unsigned __int16 **)v93, (uint64_t)v98);
    sub_1B1F03804((char *)v16);
    ecs_stack_allocator_pop_snapshot(v12);
    if ((v13 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
    }
    swift_release();
    ++v11;
  }
  while (v11 != v8);
  v78 = v9;
  v7 = v56;
LABEL_26:
  thread_worker_index(v6);
  v37 = 12 * v36 + 12;
  swift_retain();
  v38 = sub_1B1BC47E4(v37, 4);
  v40 = v39;
  swift_release();
  if (v38)
    v41 = 12 * ((v40 - v38) / 12) / 8;
  else
    v41 = 0;
  *(_QWORD *)&v77 = v38;
  *((_QWORD *)&v77 + 1) = v41;
  if (v57 >= 1 && v8)
  {
    v42 = 0;
    v43 = v76[4];
    v44 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v63 = v44;
    v65 = v43;
    do
    {
      v75 = v5;
      v45 = (unsigned int *)(v73 + 48 * v42);
      v46 = *v45;
      v47 = (uint64_t *)*((_QWORD *)v45 + 2);
      v48 = *((_QWORD *)v45 + 5);
      v69 = *((_QWORD *)v45 + 3);
      v71 = v45[1];
      v67 = *((_QWORD *)v45 + 4);
      if (v44)
      {
        v49 = *(os_unfair_lock_s **)(v48 + 376);
        swift_retain();
        os_unfair_lock_lock(v49);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v48 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v43);
      sub_1B19F66A0((uint64_t)(v76 + 6), (uint64_t)v97, &qword_1ED4B7FB0);
      v50 = v76[4];
      v51 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v76[6] = ecs_stack_allocator_allocate(v50, 48 * v51, 8);
      v76[7] = v51;
      v76[9] = 0;
      v76[10] = 0;
      v76[8] = 0;
      swift_release();
      v52 = sub_1B1A12038((uint64_t)&type metadata for ParticleID, (uint64_t)&off_1E636E760, v47, v69, v67, (uint64_t)v76);
      if ((_DWORD)v46 == (_DWORD)v71)
      {
        v53 = v72;
        v44 = v63;
      }
      else
      {
        v54 = ((unint64_t)*(unsigned int *)(v48 + 188) << 32) | 0x8000000000000000;
        *(_QWORD *)(v38 + 8 * (*(_DWORD *)(v52 + 4 * v46) - v9)) = v54 | v46;
        v53 = v72;
        v44 = v63;
        if (v46 + 1 != v71)
        {
          if ((_DWORD)v46 == -1)
          {
LABEL_44:
            sub_1B222967C();
            __break(1u);
            break;
          }
          while (1)
          {
            v55 = v46 + 1;
            *(_QWORD *)(v38 + 8 * (*(_DWORD *)(v52 + 4 + 4 * v46) - v9)) = (v46 + 1) | v54;
            if (v71 - 2 == v46)
              break;
            ++v46;
            if (v55 == 0xFFFFFFFFLL)
              goto LABEL_44;
          }
        }
      }
      v91[0] = v88;
      v91[1] = v89;
      v92 = v90;
      v5 = v75;
      sub_1B1F05D48(v76, (unsigned __int16 **)v91, (uint64_t)v97);
      sub_1B1F03804((char *)v48);
      v43 = v65;
      ecs_stack_allocator_pop_snapshot(v65);
      if ((v44 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v48 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v48 + 376));
      }
      swift_release();
      ++v42;
    }
    while (v42 != v53);
  }
  sub_1B1FD5F20(*(_QWORD *)(v58 + 32), v59, &v78, &v77);
  swift_release();
  return sub_1B19ED748(v79);
}

uint64_t sub_1B1F20DA4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  os_unfair_lock_s *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[12];
  _OWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _OWORD v48[2];
  uint64_t v49;
  _OWORD v50[2];
  uint64_t v51;
  _BYTE v52[56];

  v1 = (uint64_t)a1;
  v2 = *a1;
  v3 = a1[4];
  swift_retain();
  v4 = 0;
  v27 = sub_1B1FE136C(v3, v2);
  v5 = *(_OWORD *)(v1 + 104);
  v50[0] = *(_OWORD *)(v1 + 88);
  v50[1] = v5;
  v51 = *(_QWORD *)(v1 + 120);
  sub_1B1E8FCE4(v2, (uint64_t)v50, 0x200000000, v37);
  sub_1B19F66A0((uint64_t)v37, (uint64_t)v38, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v38[0])
    goto LABEL_24;
  v24 = v1;
  v45 = v38[0];
  v46 = v38[1];
  v47 = v39;
  v26 = v44;
  if (v44 < 1 || (v32 = v41) == 0)
  {
LABEL_23:
    sub_1B19ED748(v37);
    v1 = v24;
LABEL_24:
    sub_1B1F206F4(v1);
    return swift_release();
  }
  v6 = 0;
  v31 = v40;
  v7 = v43;
  v8 = v43[4];
  v9 = *(unsigned __int8 *)(v42 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v28 = v43 + 8;
  v29 = (uint64_t)(v43 + 6);
  v25 = v27 - v44 + 2;
  v30 = v9;
  while (1)
  {
    v10 = (unsigned int *)(v31 + 48 * v6);
    v11 = *v10;
    v33 = v10[2];
    v12 = (uint64_t *)*((_QWORD *)v10 + 2);
    v13 = *((_QWORD *)v10 + 3);
    v14 = *((_QWORD *)v10 + 5);
    v34 = *((_QWORD *)v10 + 4);
    v35 = v10[1];
    v36 = v4;
    if (v9)
    {
      v15 = *(os_unfair_lock_s **)(v14 + 376);
      swift_retain();
      os_unfair_lock_lock(v15);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v8);
    sub_1B19F66A0(v29, (uint64_t)v52, &qword_1ED4B7FB0);
    v16 = v7[4];
    v17 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v7[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
    v7[7] = v17;
    v28[1] = 0;
    v28[2] = 0;
    *v28 = 0;
    swift_release();
    v18 = sub_1B1A12038((uint64_t)&type metadata for ParticleID, (uint64_t)&off_1E636E760, v12, v13, v34, (uint64_t)v7);
    if ((_DWORD)v11 == (_DWORD)v35)
    {
      v4 = v36;
      v9 = v30;
      goto LABEL_14;
    }
    v19 = v27 - v26 + v33;
    v4 = v36;
    v9 = v30;
    if (v19 < 0 || HIDWORD(v19))
      break;
    *(_DWORD *)(v18 + 4 * v11) = v19;
    if (v11 + 1 != v35)
    {
      v20 = v27 - v26 + v33 + 1;
      if (v20 < 0 || HIDWORD(v20))
        break;
      v21 = (_DWORD *)(v18 + 4 * v11 + 4);
      v22 = v35 - v11 - 2;
      while (1)
      {
        *v21 = v20;
        if (!v22)
          break;
        if (((v25 + v33) & 0x8000000000000000) == 0)
        {
          ++v21;
          ++v20;
          --v22;
          if (!HIDWORD(v20))
            continue;
        }
        goto LABEL_25;
      }
    }
LABEL_14:
    v48[0] = v45;
    v48[1] = v46;
    v49 = v47;
    sub_1B1F05D48(v7, (unsigned __int16 **)v48, (uint64_t)v52);
    sub_1B1F03804((char *)v14);
    ecs_stack_allocator_pop_snapshot(v8);
    if ((v9 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
    }
    swift_release();
    if (++v6 == v32)
      goto LABEL_23;
  }
LABEL_25:
  result = sub_1B222967C();
  __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for ParticleSetID()
{
  return &type metadata for ParticleSetID;
}

void sub_1B1F21198()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF60EC8)
  {
    sub_1B1F211F0();
    v0 = sub_1B22299C4();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF60EC8);
  }
}

unint64_t sub_1B1F211F0()
{
  unint64_t result;

  result = qword_1EEF60ED0;
  if (!qword_1EEF60ED0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1360, &type metadata for ParticleSetID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60ED0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSetID.CodingKeys()
{
  return &type metadata for ParticleSetID.CodingKeys;
}

unint64_t sub_1B1F21248()
{
  unint64_t result;

  result = qword_1EEF60ED8;
  if (!qword_1EEF60ED8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1310, &type metadata for ParticleSetID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60ED8);
  }
  return result;
}

unint64_t sub_1B1F21290()
{
  unint64_t result;

  result = qword_1EEF60EE0;
  if (!qword_1EEF60EE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1338, &type metadata for ParticleSetID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60EE0);
  }
  return result;
}

void sub_1B1F212D4(uint64_t a1@<X0>, simd_float4 *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4x4 *v12;
  uint64_t v13;
  simd_float4 v14;
  simd_float4 v15;
  simd_float4 v16;
  simd_float4 v17;
  simd_float4x4 v18;

  os_unfair_recursive_lock_lock_with_options();
  v4 = sub_1B1F21F0C((uint64_t)&type metadata for WorldFromScene);
  v7 = v6;
  if ((v6 & 1) != 0)
  {
    v12 = (simd_float4x4 *)(*(_QWORD *)(a1 + 16) + v4);
    v13 = 32 * v5;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v5 + 24));
    os_unfair_recursive_lock_unlock();
    v18 = __invert_f4(*v12);
    v16 = v18.columns[1];
    v17 = v18.columns[0];
    v14 = v18.columns[3];
    v15 = v18.columns[2];
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v13 + 24));
    v11 = v14;
    v10 = v15;
    v9 = v16;
    v8 = v17;
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    v8 = 0uLL;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
  }
  *a2 = v8;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v11;
  a2[4].i8[0] = (v7 & 1) == 0;
}

void sub_1B1F213C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  os_unfair_recursive_lock_lock_with_options();
  v4 = sub_1B1F21F0C((uint64_t)&type metadata for WorldFromScene);
  v7 = v6;
  if ((v6 & 1) != 0)
  {
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 16) + v4);
    v17 = 32 * v5;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v5 + 24));
    os_unfair_recursive_lock_unlock();
    v19 = v16[1];
    v20 = *v16;
    v11 = v16[3];
    v18 = v16[2];
    v12 = v16[4];
    v13 = v16[5];
    v14 = v16[6];
    v15 = v16[7];
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v17 + 24));
    v10 = v18;
    v9 = v19;
    v8 = v20;
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v14 = 0;
    v15 = 0;
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v13;
  *(_QWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 56) = v15;
  *(_BYTE *)(a2 + 64) = (v7 & 1) == 0;
}

uint64_t sub_1B1F214E4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_unfair_lock_s *v8;

  os_unfair_recursive_lock_lock_with_options();
  v2 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16) + v2;
    v7 = 32 * v3;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v3 + 24));
    os_unfair_recursive_lock_unlock();
    v5 = *(_QWORD *)(v6 + 24);
    v8 = *(os_unfair_lock_s **)(*(_QWORD *)(a1 + 32) + v7 + 24);
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v8);
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 1;
  }
  return v5;
}

uint64_t sub_1B1F215A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  os_unfair_recursive_lock_lock_with_options();
  v2 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
  if ((v4 & 1) != 0)
  {
    v6 = v2;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = 32 * v3;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v3 + 24));
    os_unfair_recursive_lock_unlock();
    v5 = *(_QWORD *)(v7 + v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v8 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 0;
  }
  return v5;
}

void sub_1B1F2165C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  os_unfair_recursive_lock_lock_with_options();
  v4 = sub_1B1F21F0C((uint64_t)&type metadata for SceneWorldAABB);
  v7 = v6;
  if ((v6 & 1) != 0)
  {
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 16) + v4);
    v13 = 32 * v5;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v5 + 24));
    os_unfair_recursive_lock_unlock();
    v8 = *v12;
    v9 = v12[1];
    v10 = v12[2];
    v11 = v12[3];
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v13 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
  }
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)(a2 + 24) = v11;
  *(_BYTE *)(a2 + 32) = (v7 & 1) == 0;
}

uint64_t sub_1B1F2173C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  os_unfair_recursive_lock_lock_with_options();
  v2 = sub_1B1F21F0C((uint64_t)&type metadata for MainCullGroup);
  if ((v4 & 1) != 0)
  {
    v6 = v2;
    v7 = *(_QWORD *)(a1 + 16);
    v8 = 32 * v3;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v3 + 24));
    os_unfair_recursive_lock_unlock();
    v5 = *(_QWORD *)(v7 + v6);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v8 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 0;
  }
  return v5;
}

void sub_1B1F217F0(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  const void *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD __dst[101];

  os_unfair_recursive_lock_lock_with_options();
  v4 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
  if ((v6 & 1) != 0)
  {
    v7 = (const void *)(*(_QWORD *)(a1 + 16) + v4);
    v8 = 32 * v5;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v5 + 24));
    os_unfair_recursive_lock_unlock();
    memcpy(__dst, v7, 0x64BuLL);
    v15 = __dst[20];
    v16 = __dst[19];
    v13 = __dst[22];
    v14 = __dst[21];
    *(double *)&v9 = sub_1B1E13994();
    *a2 = v9;
    a2[1] = v10;
    a2[2] = v11;
    a2[3] = v12;
    a2[4] = v16;
    a2[5] = v15;
    a2[6] = v14;
    a2[7] = v13;
    sub_1B1F24818((uint64_t)a2);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v8 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    sub_1B1F247F8((uint64_t)__dst);
    sub_1B1E18620((uint64_t)__dst, (uint64_t)a2);
  }
}

uint64_t sub_1B1F21904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  os_unfair_recursive_lock_lock_with_options();
  v2 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
  if ((v4 & 1) != 0)
  {
    v6 = *(_QWORD *)(a1 + 16) + v2;
    v7 = 32 * v3;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v3 + 24));
    os_unfair_recursive_lock_unlock();
    v5 = *(_QWORD *)(v6 + 848);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v7 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 0;
  }
  return v5;
}

unint64_t sub_1B1F219C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  unint64_t v5;
  int32x4_t *v6;
  uint64_t v7;

  os_unfair_recursive_lock_lock_with_options();
  v2 = sub_1B1F21F0C((uint64_t)&type metadata for FrameConstantsStorage);
  if ((v4 & 1) != 0)
  {
    v6 = (int32x4_t *)(*(_QWORD *)(a1 + 16) + v2);
    v7 = 32 * v3;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v3 + 24));
    os_unfair_recursive_lock_unlock();
    v5 = vzip1q_s32(vdupq_laneq_s32(v6[3], 2), vdupq_laneq_s32(v6[4], 2)).u64[0];
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v7 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 0;
  }
  return v5;
}

uint64_t sub_1B1F21A9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char v15;

  v1 = (_QWORD *)swift_slowAlloc();
  *v1 = 0;
  *(_QWORD *)(v0 + 128) = "SceneComponentStorage";
  *(_QWORD *)(v0 + 136) = 21;
  *(_BYTE *)(v0 + 144) = 2;
  *(_QWORD *)(v0 + 152) = v1;
  v2 = swift_slowAlloc();
  *(_QWORD *)(v0 + 16) = v2;
  *(_QWORD *)(v0 + 24) = v2 + 4096;
  v3 = 0;
  *(_QWORD *)(v0 + 32) = swift_slowAlloc();
  *(_QWORD *)(v0 + 40) = 64;
  do
  {
    v4 = *(_QWORD *)(v0 + 32) + v3;
    v5 = (_DWORD *)swift_slowAlloc();
    *v5 = 0;
    *(_QWORD *)v4 = "SceneComponent lock";
    *(_QWORD *)(v4 + 8) = 19;
    *(_BYTE *)(v4 + 16) = 2;
    v3 += 32;
    *(_QWORD *)(v4 + 24) = v5;
  }
  while (v3 != 2048);
  sub_1B216B51C(MEMORY[0x1E0DEE9D8], 0, 256, 0, (uint64_t)&v10);
  v6 = v11;
  v7 = v14;
  v8 = v15;
  *(_OWORD *)(v0 + 48) = v10;
  *(_QWORD *)(v0 + 64) = v6;
  *(_OWORD *)(v0 + 72) = v12;
  *(_OWORD *)(v0 + 88) = v13;
  *(_QWORD *)(v0 + 104) = v7;
  *(_BYTE *)(v0 + 112) = v8;
  *(_QWORD *)(v0 + 120) = 0;
  return v0;
}

uint64_t sub_1B1F21BB4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  char v19;

  v3 = (_QWORD *)swift_slowAlloc();
  *v3 = 0;
  *(_QWORD *)(v1 + 128) = "SceneComponentStorage";
  *(_QWORD *)(v1 + 136) = 21;
  *(_BYTE *)(v1 + 144) = 2;
  *(_QWORD *)(v1 + 152) = v3;
  v4 = sub_1B1C50FA4(a1);
  swift_bridgeObjectRelease();
  v5 = sub_1B216BD08(v4);
  swift_bridgeObjectRelease();
  v6 = swift_slowAlloc();
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = v6 + v5 + 512;
  v7 = 0;
  *(_QWORD *)(v1 + 32) = swift_slowAlloc();
  *(_QWORD *)(v1 + 40) = 64;
  do
  {
    v8 = *(_QWORD *)(v1 + 32) + v7;
    v9 = (_DWORD *)swift_slowAlloc();
    *v9 = 0;
    *(_QWORD *)v8 = "SceneComponent lock";
    *(_QWORD *)(v8 + 8) = 19;
    *(_BYTE *)(v8 + 16) = 2;
    v7 += 32;
    *(_QWORD *)(v8 + 24) = v9;
  }
  while (v7 != 2048);
  sub_1B216B51C(MEMORY[0x1E0DEE9D8], 0, 256, 0, (uint64_t)&v14);
  v10 = v15;
  v11 = v18;
  v12 = v19;
  *(_OWORD *)(v1 + 48) = v14;
  *(_QWORD *)(v1 + 64) = v10;
  *(_OWORD *)(v1 + 72) = v16;
  *(_OWORD *)(v1 + 88) = v17;
  *(_QWORD *)(v1 + 104) = v11;
  *(_BYTE *)(v1 + 112) = v12;
  *(_QWORD *)(v1 + 120) = 0;
  return v1;
}

uint64_t sub_1B1F21D08()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = v0[6];
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    v4 = v0[2];
    v5 = v2 + 32;
    swift_retain();
    v6 = 0;
    while (1)
    {
      v7 = (uint64_t *)(v5 + 40 * v6);
      v8 = *v7;
      v9 = v7[3];
      result = swift_conformsToProtocol2();
      if (!result)
        break;
      v11 = result;
      os_unfair_recursive_lock_lock_with_options();
      v12 = v1[6];
      v13 = *(_QWORD *)(v12 + 16);
      if (v13)
      {
        v14 = 0;
        v15 = v4 + v9;
        v16 = (_QWORD *)(v12 + 32);
        while (*v16 != v8)
        {
          ++v14;
          v16 += 5;
          if (v13 == v14)
            goto LABEL_3;
        }
        v17 = v14 - 65;
        if (v14 >= 0x40)
          v18 = 0;
        else
          v18 = 1 << v14;
        if (v17 < 0xFFFFFFFFFFFFFF7FLL)
          v18 = 0;
        v19 = v1[15] & v18;
        os_unfair_recursive_lock_unlock();
        if (v19)
          sub_1B1F27F3C(v15, 1, v8, v11);
      }
      else
      {
LABEL_3:
        os_unfair_recursive_lock_unlock();
      }
      if (++v6 == v3)
      {
        swift_release();
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_19:
    v20 = v1[5];
    if (v20)
    {
      v21 = 24;
      do
      {
        MEMORY[0x1B5E23F88](*(_QWORD *)(v1[4] + v21), -1, -1);
        v21 += 32;
        --v20;
      }
      while (v20);
    }
    MEMORY[0x1B5E23F88](v1[19], -1, -1);
    v22 = v1[2];
    if (v22)
      MEMORY[0x1B5E23F88](v22, -1, -1);
    v23 = v1[4];
    if (v23)
      MEMORY[0x1B5E23F88](v23, -1, -1);
    swift_release();
    swift_release();
    swift_release();
    return (uint64_t)v1;
  }
  return result;
}

uint64_t sub_1B1F21ECC()
{
  sub_1B1F21D08();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SceneComponentStorage()
{
  return objc_opt_self();
}

uint64_t sub_1B1F21F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  v4 = 0;
  for (i = v2 + 56; *(_QWORD *)(i - 24) != a1; i += 40)
  {
    if (v3 == ++v4)
      return 0;
  }
  return *(_QWORD *)i;
}

void sub_1B1F21F8C(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t))
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  os_unfair_recursive_lock_lock_with_options();
  v8 = sub_1B1F21F0C(a1);
  if (v9 != 2)
  {
    v16 = v10;
    v25 = a4;
    v17 = a3[2];
    v18 = v17 + v8;
    if ((v9 & 1) != 0)
    {
      v24 = a3[4];
      v21 = a3 + 4;
      v23 = v24 + 32 * v10;
    }
    else
    {
      sub_1B1F25D28(v17 + v8, 1, a1);
      v19 = 1 << v16;
      if (v16 >= 0x40)
        v19 = 0;
      v22 = a3[4];
      v21 = a3 + 4;
      v20 = v22;
      if (v16 > 0x40)
        v19 = 0;
      v21[11] |= v19;
      v23 = v20 + 32 * v16;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 24));
    os_unfair_recursive_lock_unlock();
    v25(v18);
    v15 = *v21 + 32 * v16;
    goto LABEL_16;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v26);
  if (v29 + v28 <= 4096)
  {
    v11 = v26;
    v12 = a3[2] + v29;
    sub_1B1F25D28(v12, 1, v27);
    v13 = 1 << v11;
    if (v11 >= 0x40)
      v13 = 0;
    if (v11 > 0x40)
      v13 = 0;
    a3[15] |= v13;
    v14 = 32 * v11;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + v14 + 24));
    os_unfair_recursive_lock_unlock();
    a4(v12);
    v15 = a3[4] + v14;
LABEL_16:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 24));
    return;
  }
  v26 = 0;
  v27 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v30 = 4096;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

void sub_1B1F22244(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t))
{
  sub_1B1F21F8C(a1, a2, a3, a4);
}

void sub_1B1F22258(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  os_unfair_recursive_lock_lock_with_options();
  v6 = sub_1B1F21F0C(a1);
  if (v7 != 2)
  {
    v10 = v8;
    if ((v7 & 1) != 0)
    {
LABEL_11:
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + 32 * v10 + 24));
      os_unfair_recursive_lock_unlock();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3[4] + 32 * v10 + 24));
      return;
    }
    v11 = a3[2] + v6;
    v9 = a1;
LABEL_6:
    sub_1B1F25D28(v11, 1, v9);
    v12 = 1 << v10;
    if (v10 >= 0x40)
      v12 = 0;
    if (v10 > 0x40)
      v12 = 0;
    a3[15] |= v12;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v13);
  if (v16 + v15 <= 4096)
  {
    v10 = v13;
    v9 = v14;
    v11 = a3[2] + v16;
    goto LABEL_6;
  }
  v13 = 0;
  v14 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

void sub_1B1F22464(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  os_unfair_recursive_lock_lock_with_options();
  v6 = sub_1B1F21F0C(a1);
  if (v7 != 2)
  {
    v10 = v8;
    if ((v7 & 1) != 0)
    {
LABEL_11:
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + 32 * v10 + 24));
      os_unfair_recursive_lock_unlock();
      sub_1B1E8959C(5);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3[4] + 32 * v10 + 24));
      return;
    }
    v11 = a3[2] + v6;
    v9 = a1;
LABEL_6:
    sub_1B1F25D28(v11, 1, v9);
    v12 = 1 << v10;
    if (v10 >= 0x40)
      v12 = 0;
    if (v10 > 0x40)
      v12 = 0;
    a3[15] |= v12;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v13);
  if (v16 + v15 <= 4096)
  {
    v10 = v13;
    v9 = v14;
    v11 = a3[2] + v16;
    goto LABEL_6;
  }
  v13 = 0;
  v14 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v17 = 4096;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

void sub_1B1F2268C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  os_unfair_recursive_lock_lock_with_options();
  v6 = sub_1B1F21F0C(a1);
  if (v7 != 2)
  {
    v14 = v8;
    v15 = a3[2];
    v16 = (unint64_t *)(v15 + v6);
    if ((v7 & 1) != 0)
    {
      v22 = a3[4];
      v19 = a3 + 4;
      v21 = v22 + 32 * v8;
    }
    else
    {
      sub_1B1F25D28(v15 + v6, 1, a1);
      v17 = 1 << v14;
      if (v14 >= 0x40)
        v17 = 0;
      v20 = a3[4];
      v19 = a3 + 4;
      v18 = v20;
      if (v14 > 0x40)
        v17 = 0;
      v19[11] |= v17;
      v21 = v18 + 32 * v14;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v21 + 24));
    os_unfair_recursive_lock_unlock();
    sub_1B1C7A788(v16);
    v13 = *v19 + 32 * v14;
    goto LABEL_16;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v23);
  if (v26 + v25 <= 4096)
  {
    v9 = v23;
    v10 = (unint64_t *)(a3[2] + v26);
    sub_1B1F25D28((uint64_t)v10, 1, v24);
    v11 = 1 << v9;
    if (v9 >= 0x40)
      v11 = 0;
    if (v9 > 0x40)
      v11 = 0;
    a3[15] |= v11;
    v12 = 32 * v9;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + v12 + 24));
    os_unfair_recursive_lock_unlock();
    sub_1B1C7A788(v10);
    v13 = a3[4] + v12;
LABEL_16:
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 24));
    return;
  }
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1F22924(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t))
{
  return sub_1B1F23064(a1, a2, a3, a4);
}

void sub_1B1F22938(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  os_unfair_recursive_lock_lock_with_options();
  v8 = sub_1B1F21F0C(a1);
  if (v9 != 2)
  {
    v12 = v10;
    v15 = a3[2];
    v13 = (_QWORD *)(v15 + v8);
    if ((v9 & 1) != 0)
    {
LABEL_11:
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + 32 * v12 + 24));
      os_unfair_recursive_lock_unlock();
      sub_1B1B20BC4(v13, a4);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3[4] + 32 * v12 + 24));
      return;
    }
    v14 = v15 + v8;
    v11 = a1;
LABEL_6:
    sub_1B1F25D28(v14, 1, v11);
    v16 = 1 << v12;
    if (v12 >= 0x40)
      v16 = 0;
    if (v12 > 0x40)
      v16 = 0;
    a3[15] |= v16;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v17);
  if (v20 + v19 <= 4096)
  {
    v12 = v17;
    v11 = v18;
    v13 = (_QWORD *)(a3[2] + v20);
    v14 = (uint64_t)v13;
    goto LABEL_6;
  }
  v17 = 0;
  v18 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1F22B64(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return sub_1B1F22B78(a1, a2, a3);
}

uint64_t sub_1B1F22B78(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  os_unfair_recursive_lock_lock_with_options();
  v6 = sub_1B1F21F0C(a1);
  if (v7 != 2)
  {
    v10 = v8;
    v13 = a3[2];
    v11 = (uint64_t *)(v13 + v6);
    if ((v7 & 1) != 0)
    {
LABEL_11:
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + 32 * v10 + 24));
      os_unfair_recursive_lock_unlock();
      v15 = *v11;
      v16 = *(os_unfair_lock_s **)(a3[4] + 32 * v10 + 24);
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v16);
      return v15;
    }
    v12 = v13 + v6;
    v9 = a1;
LABEL_6:
    sub_1B1F25D28(v12, 1, v9);
    v14 = 1 << v10;
    if (v10 >= 0x40)
      v14 = 0;
    if (v10 > 0x40)
      v14 = 0;
    a3[15] |= v14;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v18);
  if (v21 + v20 <= 4096)
  {
    v10 = v18;
    v9 = v19;
    v11 = (uint64_t *)(a3[2] + v21);
    v12 = (uint64_t)v11;
    goto LABEL_6;
  }
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v22 = 4096;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F22DA8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  void (*v27)(_QWORD *__return_ptr, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  os_unfair_recursive_lock_lock_with_options();
  v9 = sub_1B1F21F0C(a1);
  if (v10 == 2)
  {
    sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v27);
    if (v30 + v29 > 4096)
    {
      v27 = 0;
      v28 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v31 = 4096;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
    v12 = (unint64_t)v27;
    v13 = *(_QWORD *)(a3 + 16) + v30;
    sub_1B1F25D28(v13, 1, v28);
    v14 = 1 << v12;
    if (v12 >= 0x40)
      v14 = 0;
    v17 = *(_QWORD *)(a3 + 32);
    v16 = (_QWORD *)(a3 + 32);
    v15 = v17;
    if (v12 > 0x40)
      v14 = 0;
    v16[11] |= v14;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 32 * v12 + 24));
    os_unfair_recursive_lock_unlock();
    v18 = v13;
  }
  else
  {
    v12 = v11;
    v19 = *(_QWORD *)(a3 + 16);
    v20 = v19 + v9;
    if ((v10 & 1) != 0)
    {
      v25 = *(_QWORD *)(a3 + 32);
      v16 = (_QWORD *)(a3 + 32);
      v24 = v25 + 32 * v11;
    }
    else
    {
      sub_1B1F25D28(v19 + v9, 1, a1);
      v21 = 1 << v12;
      if (v12 >= 0x40)
        v21 = 0;
      v23 = *(_QWORD *)(a3 + 32);
      v16 = (_QWORD *)(a3 + 32);
      v22 = v23;
      if (v12 > 0x40)
        v21 = 0;
      v16[11] |= v21;
      v24 = v22 + 32 * v12;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 24));
    os_unfair_recursive_lock_unlock();
    v18 = v20;
  }
  a4(&v27, v18);
  if (!v4)
    a4 = v27;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*v16 + 32 * v12 + 24));
  return (uint64_t)a4;
}

uint64_t sub_1B1F23064(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *__return_ptr, uint64_t))
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  void (*v27)(_QWORD *__return_ptr, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  os_unfair_recursive_lock_lock_with_options();
  v9 = sub_1B1F21F0C(a1);
  if (v10 == 2)
  {
    sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v27);
    if (v30 + v29 > 4096)
    {
      v27 = 0;
      v28 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v31 = 4096;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
    v12 = (unint64_t)v27;
    v13 = *(_QWORD *)(a3 + 16) + v30;
    sub_1B1F25D28(v13, 1, v28);
    v14 = 1 << v12;
    if (v12 >= 0x40)
      v14 = 0;
    v17 = *(_QWORD *)(a3 + 32);
    v16 = (_QWORD *)(a3 + 32);
    v15 = v17;
    if (v12 > 0x40)
      v14 = 0;
    v16[11] |= v14;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 32 * v12 + 24));
    os_unfair_recursive_lock_unlock();
    v18 = v13;
  }
  else
  {
    v12 = v11;
    v19 = *(_QWORD *)(a3 + 16);
    v20 = v19 + v9;
    if ((v10 & 1) != 0)
    {
      v25 = *(_QWORD *)(a3 + 32);
      v16 = (_QWORD *)(a3 + 32);
      v24 = v25 + 32 * v11;
    }
    else
    {
      sub_1B1F25D28(v19 + v9, 1, a1);
      v21 = 1 << v12;
      if (v12 >= 0x40)
        v21 = 0;
      v23 = *(_QWORD *)(a3 + 32);
      v16 = (_QWORD *)(a3 + 32);
      v22 = v23;
      if (v12 > 0x40)
        v21 = 0;
      v16[11] |= v21;
      v24 = v22 + 32 * v12;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v24 + 24));
    os_unfair_recursive_lock_unlock();
    v18 = v20;
  }
  a4(&v27, v18);
  if (!v4)
    a4 = v27;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*v16 + 32 * v12 + 24));
  return (uint64_t)a4;
}

uint64_t sub_1B1F23314(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  os_unfair_recursive_lock_lock_with_options();
  v6 = sub_1B1F21F0C(a1);
  if (v7 != 2)
  {
    v10 = v8;
    v13 = a3[2];
    v11 = v13 + v6;
    if ((v7 & 1) != 0)
    {
LABEL_11:
      v15 = 32 * v10;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + v15 + 24));
      os_unfair_recursive_lock_unlock();
      v16 = MEMORY[0x1B5E240CC](v11);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3[4] + v15 + 24));
      return v16;
    }
    v12 = v13 + v6;
    v9 = a1;
LABEL_6:
    sub_1B1F25D28(v12, 1, v9);
    v14 = 1 << v10;
    if (v10 >= 0x40)
      v14 = 0;
    if (v10 > 0x40)
      v14 = 0;
    a3[15] |= v14;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v18);
  if (v21 + v20 <= 4096)
  {
    v10 = v18;
    v9 = v19;
    v11 = a3[2] + v21;
    v12 = v11;
    goto LABEL_6;
  }
  v18 = 0;
  v19 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v22 = 4096;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1F23548(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(unint64_t *__return_ptr, uint64_t))
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  os_unfair_recursive_lock_lock_with_options();
  v8 = sub_1B1F21F0C(a1);
  if (v9 != 2)
  {
    v11 = v10;
    v18 = *(_QWORD *)(a3 + 16);
    v19 = v18 + v8;
    if ((v9 & 1) != 0)
    {
      v24 = *(_QWORD *)(a3 + 32);
      v15 = (_QWORD *)(a3 + 32);
      v23 = v24 + 32 * v10;
    }
    else
    {
      sub_1B1F25D28(v18 + v8, 1, a1);
      v20 = 1 << v11;
      if (v11 >= 0x40)
        v20 = 0;
      v22 = *(_QWORD *)(a3 + 32);
      v15 = (_QWORD *)(a3 + 32);
      v21 = v22;
      if (v11 > 0x40)
        v20 = 0;
      v15[11] |= v20;
      v23 = v21 + 32 * v11;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 24));
    os_unfair_recursive_lock_unlock();
    v17 = v19;
    goto LABEL_16;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v25);
  if (v28 + v27 <= 4096)
  {
    v11 = v25;
    v12 = *(_QWORD *)(a3 + 16) + v28;
    sub_1B1F25D28(v12, 1, v26);
    v13 = 1 << v11;
    if (v11 >= 0x40)
      v13 = 0;
    v16 = *(_QWORD *)(a3 + 32);
    v15 = (_QWORD *)(a3 + 32);
    v14 = v16;
    if (v11 > 0x40)
      v13 = 0;
    v15[11] |= v13;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 32 * v11 + 24));
    os_unfair_recursive_lock_unlock();
    v17 = v12;
LABEL_16:
    a4(&v25, v17);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*v15 + 32 * v11 + 24));
    return;
  }
  v25 = 0;
  v26 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v29 = 4096;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1F2381C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = v3;
  os_unfair_recursive_lock_lock_with_options();
  v8 = sub_1B1F21F0C(a1);
  if (v9 == 2)
  {
    sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v26);
    if (v29 + v28 > 4096)
    {
      v26 = 0;
      v27 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v30 = 4096;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      result = sub_1B2229688();
      __break(1u);
      return result;
    }
    v11 = v26;
    v12 = *(_QWORD *)(a3 + 16) + v29;
    sub_1B1F25D28(v12, 1, v27);
    v13 = 1 << v11;
    if (v11 >= 0x40)
      v13 = 0;
    v16 = *(_QWORD *)(a3 + 32);
    v15 = (_QWORD *)(a3 + 32);
    v14 = v16;
    if (v11 > 0x40)
      v13 = 0;
    v15[11] |= v13;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 32 * v11 + 24));
    os_unfair_recursive_lock_unlock();
    v17 = (_QWORD *)v12;
  }
  else
  {
    v11 = v10;
    v18 = *(_QWORD *)(a3 + 16);
    v19 = (_QWORD *)(v18 + v8);
    if ((v9 & 1) != 0)
    {
      v24 = *(_QWORD *)(a3 + 32);
      v15 = (_QWORD *)(a3 + 32);
      v23 = v24 + 32 * v10;
    }
    else
    {
      sub_1B1F25D28(v18 + v8, 1, a1);
      v20 = 1 << v11;
      if (v11 >= 0x40)
        v20 = 0;
      v22 = *(_QWORD *)(a3 + 32);
      v15 = (_QWORD *)(a3 + 32);
      v21 = v22;
      if (v11 > 0x40)
        v20 = 0;
      v15[11] |= v20;
      v23 = v21 + 32 * v11;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 24));
    os_unfair_recursive_lock_unlock();
    v17 = v19;
  }
  sub_1B1D64C5C(v17, (uint64_t *)&v26);
  if (!v3)
    v4 = v26;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*v15 + 32 * v11 + 24));
  return v4;
}

void sub_1B1F23AB8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  os_unfair_recursive_lock_lock_with_options();
  v6 = sub_1B1F21F0C(a1);
  if (v7 != 2)
  {
    v10 = v8;
    if ((v7 & 1) != 0)
    {
LABEL_11:
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + 32 * v10 + 24));
      os_unfair_recursive_lock_unlock();
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3[4] + 32 * v10 + 24));
      return;
    }
    v11 = a3[2] + v6;
    v9 = a1;
LABEL_6:
    sub_1B1F25D28(v11, 1, v9);
    v12 = 1 << v10;
    if (v10 >= 0x40)
      v12 = 0;
    if (v10 > 0x40)
      v12 = 0;
    a3[15] |= v12;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v13);
  if (v16 + v15 <= 4096)
  {
    v10 = v13;
    v9 = v14;
    v11 = a3[2] + v16;
    goto LABEL_6;
  }
  v13 = 0;
  v14 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v17 = 4096;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

void sub_1B1F23CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  float32x4_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  os_unfair_recursive_lock_lock_with_options();
  v7 = sub_1B1F21F0C(a1);
  if (v8 == 2)
  {
    sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v24);
    if ((uint64_t)(v26 + *((_QWORD *)&v25 + 1)) > 4096)
    {
      v24.i64[0] = 0;
      v24.i64[1] = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      sub_1B222A210();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v27 = 4096;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2229688();
      __break(1u);
      return;
    }
    v10 = v24.i64[0];
    v11 = *(_QWORD *)(a3 + 16) + v26;
    sub_1B1F25D28(v11, 1, v24.i64[1]);
    v12 = 1 << v10;
    if (v10 >= 0x40)
      v12 = 0;
    v15 = *(_QWORD *)(a3 + 32);
    v14 = (_QWORD *)(a3 + 32);
    v13 = v15;
    if (v10 > 0x40)
      v12 = 0;
    v14[11] |= v12;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 32 * v10 + 24));
    os_unfair_recursive_lock_unlock();
    v16 = v11;
  }
  else
  {
    v10 = v9;
    v17 = *(_QWORD *)(a3 + 16);
    v18 = v17 + v7;
    if ((v8 & 1) != 0)
    {
      v23 = *(_QWORD *)(a3 + 32);
      v14 = (_QWORD *)(a3 + 32);
      v22 = v23 + 32 * v9;
    }
    else
    {
      sub_1B1F25D28(v17 + v7, 1, a1);
      v19 = 1 << v10;
      if (v10 >= 0x40)
        v19 = 0;
      v21 = *(_QWORD *)(a3 + 32);
      v14 = (_QWORD *)(a3 + 32);
      v20 = v21;
      if (v10 > 0x40)
        v19 = 0;
      v14[11] |= v19;
      v22 = v20 + 32 * v10;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v22 + 24));
    os_unfair_recursive_lock_unlock();
    v16 = v18;
  }
  sub_1B1E16954(v16, &v24);
  if (v3)
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*v14 + 32 * v10 + 24));
  else
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*v14 + 32 * v10 + 24));
}

void sub_1B1F23F90(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  os_unfair_lock_s *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  os_unfair_recursive_lock_lock_with_options();
  v8 = sub_1B1F21F0C(a1);
  if (v9 != 2)
  {
    v12 = v10;
    v15 = a3[2];
    v13 = (_QWORD *)(v15 + v8);
    if ((v9 & 1) != 0)
    {
LABEL_11:
      v17 = 32 * v12;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + 32 * v12 + 24));
      os_unfair_recursive_lock_unlock();
      v19 = v13[4];
      v18 = v13[5];
      v20 = v13[2];
      v21 = v13[3];
      v24 = v13;
      v22 = *v13;
      v23 = v24[1];
      v25 = *(os_unfair_lock_s **)(a3[4] + v17 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_unfair_lock_unlock(v25);
      *a4 = v22;
      a4[1] = v23;
      a4[2] = v20;
      a4[3] = v21;
      a4[4] = v19;
      a4[5] = v18;
      return;
    }
    v14 = v15 + v8;
    v11 = a1;
LABEL_6:
    sub_1B1F25D28(v14, 1, v11);
    v16 = 1 << v12;
    if (v12 >= 0x40)
      v16 = 0;
    if (v12 > 0x40)
      v16 = 0;
    a3[15] |= v16;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v26);
  if (v29 + v28 <= 4096)
  {
    v12 = v26;
    v11 = v27;
    v13 = (_QWORD *)(a3[2] + v29);
    v14 = (uint64_t)v13;
    goto LABEL_6;
  }
  v26 = 0;
  v27 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  v30 = 4096;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

void sub_1B1F24200(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  os_unfair_recursive_lock_lock_with_options();
  v8 = sub_1B1F21F0C(a1);
  if (v9 != 2)
  {
    v12 = v10;
    v15 = a3[2];
    v13 = (_BYTE *)(v15 + v8);
    if ((v9 & 1) != 0)
    {
LABEL_11:
      os_unfair_lock_lock(*(os_unfair_lock_t *)(a3[4] + 32 * v12 + 24));
      os_unfair_recursive_lock_unlock();
      v17 = v13[1];
      v18 = v13[2];
      v19 = v13[3];
      v20 = v13[4];
      v21 = v13[5];
      v22 = v13[6];
      *a4 = *v13;
      a4[1] = v17;
      a4[2] = v18;
      a4[3] = v19;
      a4[4] = v20;
      a4[5] = v21;
      a4[6] = v22;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(a3[4] + 32 * v12 + 24));
      return;
    }
    v14 = v15 + v8;
    v11 = a1;
LABEL_6:
    sub_1B1F25D28(v14, 1, v11);
    v16 = 1 << v12;
    if (v12 >= 0x40)
      v16 = 0;
    if (v12 > 0x40)
      v16 = 0;
    a3[15] |= v16;
    goto LABEL_11;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v23);
  if (v26 + v25 <= 4096)
  {
    v12 = v23;
    v11 = v24;
    v13 = (_BYTE *)(a3[2] + v26);
    v14 = (uint64_t)v13;
    goto LABEL_6;
  }
  v23 = 0;
  v24 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2229688();
  __break(1u);
}

BOOL sub_1B1F24458(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  os_unfair_recursive_lock_lock_with_options();
  sub_1B1F21F0C((uint64_t)&type metadata for DefaultMaterialInstance);
  v6 = v5;
  if ((v5 & 1) != 0)
  {
    v7 = 32 * v4;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + 32 * v4 + 24));
    os_unfair_recursive_lock_unlock();
    swift_getAtKeyPath();
    *(_QWORD *)a2 = v9;
    *(_BYTE *)(a2 + 8) = 0;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(a1 + 32) + v7 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
  }
  return (v6 & 1) == 0;
}

uint64_t sub_1B1F24528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  swift_retain_n();
  os_unfair_recursive_lock_lock_with_options();
  v6 = sub_1B1F21F0C(a1);
  if (v7 != 2)
  {
    v9 = v8;
    if ((v7 & 1) != 0)
    {
      v18 = *(_QWORD *)(a3 + 32);
      v12 = (_QWORD *)(a3 + 32);
      v17 = v18 + 32 * v8;
    }
    else
    {
      sub_1B1F25D28(*(_QWORD *)(a3 + 16) + v6, 1, a1);
      v14 = 1 << v9;
      if (v9 >= 0x40)
        v14 = 0;
      v16 = *(_QWORD *)(a3 + 32);
      v12 = (_QWORD *)(a3 + 32);
      v15 = v16;
      if (v9 > 0x40)
        v14 = 0;
      v12[11] |= v14;
      v17 = v15 + 32 * v9;
    }
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 24));
    os_unfair_recursive_lock_unlock();
    swift_retain();
    goto LABEL_16;
  }
  sub_1B216BDBC(a1, *(_QWORD *)(a2 + 8), (uint64_t)&v21);
  if (v24 + v23 <= 4096)
  {
    v9 = v21;
    sub_1B1F25D28(*(_QWORD *)(a3 + 16) + v24, 1, v22);
    v10 = 1 << v9;
    if (v9 >= 0x40)
      v10 = 0;
    v13 = *(_QWORD *)(a3 + 32);
    v12 = (_QWORD *)(a3 + 32);
    v11 = v13;
    if (v9 > 0x40)
      v10 = 0;
    v12[11] |= v10;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 32 * v9 + 24));
    os_unfair_recursive_lock_unlock();
    swift_retain();
LABEL_16:
    swift_getAtKeyPath();
    swift_release();
    v19 = v21;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*v12 + 32 * v9 + 24));
    swift_release_n();
    return v19;
  }
  v21 = 0;
  v22 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  sub_1B222A210();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_release_n();
  swift_bridgeObjectRelease();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

double sub_1B1F247F8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 128) = 1;
  return result;
}

uint64_t sub_1B1F24818(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

ValueMetadata *type metadata accessor for Tombstone()
{
  return &type metadata for Tombstone;
}

unint64_t sub_1B1F24830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C174(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F24854()
{
  return sub_1B2229100();
}

uint64_t sub_1B1F24870()
{
  return 31759;
}

BOOL sub_1B1F24878(const void *a1, const void *a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a3 - 8);
  return (*(_BYTE *)(v3 + 82) & 1) != 0 || memcmp(a1, a2, *(_QWORD *)(v3 + 64)) != 0;
}

uint64_t sub_1B1F248B0(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[40];
  _BYTE v5[32];

  sub_1B19FC3B8(v1);
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  return sub_1B1A0009C((uint64_t)v4, v1);
}

uint64_t sub_1B1F24920(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  double v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE v10[32];

  v5 = *(_QWORD *)(a2 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(uint64_t, double))(v5 + 8))(v2, v6);
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v2, v8, a2);
}

char *sub_1B1F249D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C218(a1, a3, a4, a6, a7);
}

double sub_1B1F249F4(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  int v4;
  char v5;
  uint64_t v6;
  int v7;
  double v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 12) = v5;
  *(_QWORD *)(v1 + 16) = v6;
  *(_DWORD *)(v1 + 24) = v7;
  result = v8;
  *(double *)(v1 + 28) = v8;
  return result;
}

char *sub_1B1F24A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C3A8(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F24A98(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 64);
}

uint64_t sub_1B1F24AA8()
{
  return sub_1B2229100();
}

uint64_t sub_1B1F24AC4()
{
  return sub_1B2229148();
}

uint64_t sub_1B1F24AF8(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 - 8) + 72);
}

uint64_t sub_1B1F24B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return memswap_pattern4(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 72));
}

uint64_t sub_1B1F24B10()
{
  return sub_1B222910C();
}

uint64_t sub_1B1F24B20()
{
  return sub_1B22290D0();
}

uint64_t sub_1B1F24B30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a5 + 96))(a2, a3, a4, a5);
}

uint64_t sub_1B1F24B64()
{
  return sub_1B22290F4();
}

uint64_t sub_1B1F24B74()
{
  return sub_1B22290E8();
}

uint64_t sub_1B1F24B84(uint64_t a1)
{
  return *(unsigned __int8 *)(*(_QWORD *)(a1 - 8) + 80) + 1;
}

BOOL sub_1B1F24B94(uint64_t a1)
{
  return (*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 1) == 0;
}

uint64_t sub_1B1F24BA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  double v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v23[16];
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;

  v6 = v5;
  v31 = *MEMORY[0x1E0C80C00];
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x1E0C80A78](a1, a2);
  v14 = &v23[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = v15 + *(_QWORD *)(v11 + 72) * v16;
  (*(void (**)(uint64_t, double))(*(_QWORD *)(v18 + 8) + 8))(v19, v12);
  v24 = a4;
  v25 = a5;
  v26 = v6;
  v27 = v17;
  v28 = a2;
  v29 = a3;
  v30 = v14;
  sub_1B1EFFA50((uint64_t)v14, (uint64_t)sub_1B1F2E104, (uint64_t)v23, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], v20);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, a4);
}

uint64_t sub_1B1F24CC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v5 = *(_QWORD *)(a4 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, double))(*(_QWORD *)(v9 + 8) + 8))(v10, v6);
  sub_1B22290DC();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, a4);
}

double sub_1B1F24D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F2A334(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

char *sub_1B1F24D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C2A0(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F24D9C(uint64_t a1)
{
  id *v1;
  uint64_t result;
  void *v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  *v1 = v4;
  return result;
}

unint64_t sub_1B1F24E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D398(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F24E2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  _BYTE v5[32];

  sub_1B1B20AD4(v1);
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  return sub_1B1F2F334((uint64_t)&v4, v1);
}

char *sub_1B1F24EA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D294(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F24EC4(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x8CuLL) != 0;
}

__n128 sub_1B1F24EE4(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[9];
  _OWORD v7[2];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  v2 = v7[0];
  *(_OWORD *)(v1 + 96) = v6[8];
  *(_OWORD *)(v1 + 112) = v2;
  *(_OWORD *)(v1 + 124) = *(_OWORD *)((char *)v7 + 12);
  v3 = v6[5];
  *(_OWORD *)(v1 + 32) = v6[4];
  *(_OWORD *)(v1 + 48) = v3;
  v4 = v6[7];
  *(_OWORD *)(v1 + 64) = v6[6];
  *(_OWORD *)(v1 + 80) = v4;
  result = (__n128)v6[3];
  *(_OWORD *)v1 = v6[2];
  *(__n128 *)(v1 + 16) = result;
  return result;
}

char *sub_1B1F24F58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C748(a1, a3, a4, a6, a7);
}

double sub_1B1F24F7C(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v3;
  __int128 v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = *(double *)&v3;
  *v1 = v3;
  v1[1] = v4;
  return result;
}

char *sub_1B1F24FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CE48(a1, a3, a4, a6, a7);
}

double sub_1B1F24FF4(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  double v5;
  int v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  result = v5;
  *(double *)(v1 + 32) = v5;
  *(_DWORD *)(v1 + 40) = v6;
  return result;
}

double sub_1B1F25058(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v3;
  _BYTE v4[32];

  sub_1B1A02864(a1, (uint64_t)v4);
  swift_dynamicCast();
  result = *(double *)&v3;
  *v1 = v3;
  return result;
}

char *sub_1B1F250AC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, size_t __len)
{
  return sub_1B1F2DA74(a1, a3, a4, a6, __len);
}

double sub_1B1F250D8(uint64_t a1)
{
  return nullsub_16(a1);
}

uint64_t sub_1B1F250EC()
{
  return sub_1B1F24854();
}

BOOL sub_1B1F2510C(const void *a1, const void *a2, uint64_t a3)
{
  return sub_1B1F24878(a1, a2, a3);
}

double sub_1B1F25124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return nullsub_16(a3);
}

char *sub_1B1F25134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DDD8(a1, a3, a4, a6, a7);
}

double sub_1B1F25158(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  __int16 v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  int v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v6;
  *(_QWORD *)v1 = v3;
  *(_WORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 12) = v5;
  *(double *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 32) = v7;
  *(_DWORD *)(v1 + 40) = v8;
  return result;
}

char *sub_1B1F251CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DE5C(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F251F0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
      || *(unsigned __int16 *)(a1 + 24) != (unint64_t)*(unsigned __int16 *)(a2 + 24);
}

float sub_1B1F25220(uint64_t a1)
{
  uint64_t v1;
  float result;
  char v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  char v7;
  char v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v6;
  *(_BYTE *)v1 = v3;
  *(_QWORD *)(v1 + 4) = v4;
  *(_QWORD *)(v1 + 12) = v5;
  *(float *)(v1 + 20) = v6;
  *(_BYTE *)(v1 + 24) = v7;
  *(_BYTE *)(v1 + 25) = v8;
  return result;
}

char *sub_1B1F2529C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DD54(a1, a3, a4, a6, a7);
}

double sub_1B1F252C0(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  char v5;
  char v6;
  __int16 v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  _BYTE v19[32];

  swift_release();
  sub_1B1A02864(a1, (uint64_t)v19);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_BYTE *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 9) = v6;
  *(_WORD *)(v1 + 10) = v7;
  *(_QWORD *)(v1 + 12) = v8;
  *(_DWORD *)(v1 + 20) = v9;
  result = *(double *)&v10;
  *(_OWORD *)(v1 + 32) = v10;
  *(_OWORD *)(v1 + 48) = v11;
  *(_BYTE *)(v1 + 64) = v12;
  *(_BYTE *)(v1 + 65) = v13;
  *(_BYTE *)(v1 + 66) = v14;
  *(_DWORD *)(v1 + 68) = v15;
  *(_BYTE *)(v1 + 72) = v16;
  *(_DWORD *)(v1 + 76) = v17;
  *(_BYTE *)(v1 + 80) = v18;
  return result;
}

char *sub_1B1F25394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D8D4(a1, a3, a4, a6, a7);
}

double sub_1B1F253B8(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  __int16 v4;
  char v5;
  int v6;
  char v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  _BYTE v12[32];

  sub_1B1A02864(a1, (uint64_t)v12);
  swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_WORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 12) = v5;
  *(_DWORD *)(v1 + 16) = v6;
  *(_BYTE *)(v1 + 20) = v7;
  *(_OWORD *)(v1 + 24) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(v1 + 40) = v9;
  *(_QWORD *)(v1 + 56) = v10;
  *(_DWORD *)(v1 + 64) = v11;
  return result;
}

BOOL sub_1B1F2544C(uint64_t a1, uint64_t a2)
{
  return (~(*(unsigned __int16 (**)(void))(a2 + 80))() & 0x6000) == 0;
}

BOOL sub_1B1F25470(uint64_t a1, uint64_t a2)
{
  return (~(*(unsigned __int16 (**)(void))(a2 + 80))() & 0x1C00) == 0;
}

char *sub_1B1F25494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C428(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F254BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[32];

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v9);
  result = swift_dynamicCast();
  *(_BYTE *)v1 = v4;
  *(_BYTE *)(v1 + 1) = v5;
  *(_BYTE *)(v1 + 2) = v6;
  *(_QWORD *)(v1 + 8) = v7;
  *(_QWORD *)(v1 + 16) = v8;
  return result;
}

uint64_t sub_1B1F25540(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[32];

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v10);
  result = swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_BYTE *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 9) = v6;
  *(_BYTE *)(v1 + 10) = v7;
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v9;
  return result;
}

double sub_1B1F255D4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  double result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  char v9;
  char v10;
  char v11;
  _BYTE v12[32];

  v3 = *(void **)(v1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1B1A02864(a1, (uint64_t)v12);
  swift_dynamicCast();
  *(_OWORD *)v1 = v5;
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = v7;
  result = *(double *)&v8;
  *(_OWORD *)(v1 + 32) = v8;
  *(_BYTE *)(v1 + 48) = v9;
  *(_BYTE *)(v1 + 49) = v10;
  *(_BYTE *)(v1 + 50) = v11;
  return result;
}

unint64_t sub_1B1F25680(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for MovieRuntime);
}

uint64_t sub_1B1F256B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for MovieRuntime);
}

unint64_t sub_1B1F256C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for AudioPlayerComponent);
}

uint64_t sub_1B1F256F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for AudioPlayerComponent);
}

uint64_t sub_1B1F256FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v7;
  _BYTE *v8;
  uint64_t (*v9)(_QWORD);
  _BYTE v11[32];

  MEMORY[0x1E0C80A78](a1, a2);
  v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B1A04628(v4, v9);
  sub_1B1A02864(a1, (uint64_t)v11);
  swift_dynamicCast();
  return sub_1B1A025EC((uint64_t)v8, v4, a4);
}

char *sub_1B1F257B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D84C(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F257D4(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 != *a2 || *((unsigned __int8 *)a1 + 2) != *((unsigned __int8 *)a2 + 2);
}

char *sub_1B1F257F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C534(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F2581C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;
  char v3;
  char v4;
  char v5;
  char v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  result = swift_dynamicCast();
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v5;
  v1[3] = v6;
  return result;
}

char *sub_1B1F25888(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DEE0(a1, a3, a4, a6, a7);
}

double sub_1B1F258AC(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  _BYTE v10[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_DWORD *)(v1 + 24) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 32) = v7;
  *(_QWORD *)(v1 + 48) = v8;
  *(_BYTE *)(v1 + 56) = v9;
  return result;
}

char *sub_1B1F25978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D958(a1, a3, a4, a6, a7);
}

double sub_1B1F2599C(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  double v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  result = v4;
  *(double *)(v1 + 16) = v4;
  return result;
}

char *sub_1B1F259FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D6CC(a1, a3, a4, a6, a7);
}

double sub_1B1F25A20(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v4;
  int v5;
  char v6;
  __int128 v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  _BYTE v16[40];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v16);
  swift_dynamicCast();
  *(_BYTE *)v1 = v4;
  *(_DWORD *)(v1 + 4) = v5;
  *(_BYTE *)(v1 + 8) = v6;
  *(_OWORD *)(v1 + 16) = v7;
  *(_QWORD *)(v1 + 32) = v8;
  *(_BYTE *)(v1 + 40) = v9;
  *(_OWORD *)(v1 + 48) = v10;
  *(_QWORD *)(v1 + 64) = v11;
  *(_BYTE *)(v1 + 72) = v12;
  result = *(double *)&v13;
  *(_OWORD *)(v1 + 80) = v13;
  *(_QWORD *)(v1 + 96) = v14;
  *(_BYTE *)(v1 + 104) = v15;
  return result;
}

char *sub_1B1F25B50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D544(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F25B74(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;
  char v3;
  char v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  *v1 = v3;
  v1[1] = v4;
  return result;
}

float sub_1B1F25BD0(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  char v4;
  uint64_t v5;
  float v6;
  char v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  result = v6;
  *(_QWORD *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 12) = v5;
  *(float *)(v1 + 20) = v6;
  *(_BYTE *)(v1 + 24) = v7;
  return result;
}

float sub_1B1F25C44(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  float v7;
  char v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v7;
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_DWORD *)(v1 + 16) = v5;
  *(_BYTE *)(v1 + 20) = v6;
  *(float *)(v1 + 24) = v7;
  *(_BYTE *)(v1 + 28) = v8;
  return result;
}

float sub_1B1F25CB8(uint64_t a1)
{
  uint64_t v1;
  float result;
  char v3;
  float v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = v4;
  *(_BYTE *)v1 = v3;
  *(float *)(v1 + 4) = v4;
  return result;
}

BOOL sub_1B1F25D14(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 != *a2;
}

uint64_t sub_1B1F25D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  double v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1, a2);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, double))(*(_QWORD *)(v8 + 8) + 8))(v9, v5);
  sub_1B22290DC();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, a3);
}

__n128 sub_1B1F25DC4(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  __int128 v4;
  __int128 v5;
  __n128 v6;
  uint64_t v7;
  char v8;
  _BYTE v9[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v6;
  *(_OWORD *)v1 = v4;
  *(_OWORD *)(v1 + 16) = v5;
  *(__n128 *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 48) = v7;
  *(_BYTE *)(v1 + 56) = v8;
  return result;
}

double sub_1B1F25E9C(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v4;
  _BYTE v5[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = *(double *)&v4;
  *v1 = v4;
  return result;
}

uint64_t sub_1B1F25F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F2BF38(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

double sub_1B1F25F1C(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _BYTE v7[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_QWORD *)(v1 + 8) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 16) = v6;
  return result;
}

char *sub_1B1F25FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D4BC(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F25FC4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
      || *(_DWORD *)(a1 + 24) != (unint64_t)*(unsigned int *)(a2 + 24);
}

float sub_1B1F25FF4(uint64_t a1)
{
  uint64_t v1;
  float result;
  char v3;
  char v4;
  char v5;
  __int128 v6;
  float v7;
  int v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v7;
  *(_BYTE *)v1 = v3;
  *(_BYTE *)(v1 + 1) = v4;
  *(_BYTE *)(v1 + 2) = v5;
  *(_OWORD *)(v1 + 4) = v6;
  *(float *)(v1 + 20) = v7;
  *(_DWORD *)(v1 + 24) = v8;
  return result;
}

__n128 sub_1B1F26070(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[9];
  _OWORD v7[2];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  v2 = v7[0];
  *(_OWORD *)(v1 + 96) = v6[8];
  *(_OWORD *)(v1 + 112) = v2;
  *(_OWORD *)(v1 + 123) = *(_OWORD *)((char *)v7 + 11);
  v3 = v6[5];
  *(_OWORD *)(v1 + 32) = v6[4];
  *(_OWORD *)(v1 + 48) = v3;
  v4 = v6[7];
  *(_OWORD *)(v1 + 64) = v6[6];
  *(_OWORD *)(v1 + 80) = v4;
  result = (__n128)v6[3];
  *(_OWORD *)v1 = v6[2];
  *(__n128 *)(v1 + 16) = result;
  return result;
}

double sub_1B1F260E4(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  char v9;
  _BYTE v10[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 24) = v7;
  *(_BYTE *)(v1 + 40) = v8;
  *(_BYTE *)(v1 + 41) = v9;
  return result;
}

char *sub_1B1F2618C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CED0(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F261B0(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x71uLL) != 0;
}

double sub_1B1F261D0(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  int v4;
  __int128 v5;
  __int128 v6;
  int v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  char v11;
  _BYTE v12[32];

  sub_1B1A02864(a1, (uint64_t)v12);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_DWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 48) = v6;
  *(_DWORD *)(v1 + 64) = v7;
  *(_OWORD *)(v1 + 72) = v8;
  result = *(double *)&v9;
  *(_OWORD *)(v1 + 88) = v9;
  *(_QWORD *)(v1 + 104) = v10;
  *(_BYTE *)(v1 + 112) = v11;
  return result;
}

char *sub_1B1F26264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DFFC(a1, a3, a4, a6, a7);
}

float sub_1B1F26288(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;
  char v4;
  char v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v3;
  *(float *)v1 = v3;
  *(_BYTE *)(v1 + 4) = v4;
  *(_BYTE *)(v1 + 5) = v5;
  return result;
}

char *sub_1B1F262F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C9FC(a1, a3, a4, a6, a7);
}

double sub_1B1F26314(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_OWORD *)(v1 + 8) = v5;
  *(_OWORD *)(v1 + 24) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 40) = v7;
  *(_QWORD *)(v1 + 56) = v8;
  return result;
}

char *sub_1B1F263FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CA7C(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F26420(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || *(_QWORD *)((char *)a1 + 13) != *(_QWORD *)((char *)a2 + 13);
}

float sub_1B1F26444(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  float v4;
  char v5;
  char v6;
  char v7;
  char v8;
  int v9;
  char v10;
  _BYTE v11[32];

  sub_1B1A02864(a1, (uint64_t)v11);
  swift_dynamicCast();
  result = v4;
  *(_QWORD *)v1 = v3;
  *(float *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 12) = v5;
  *(_BYTE *)(v1 + 13) = v6;
  *(_BYTE *)(v1 + 14) = v7;
  *(_BYTE *)(v1 + 15) = v8;
  *(_DWORD *)(v1 + 16) = v9;
  *(_BYTE *)(v1 + 20) = v10;
  return result;
}

float sub_1B1F264D0(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  float v6;
  char v7;
  char v8;
  char v9;
  int v10;
  _BYTE v11[32];

  sub_1B1A02864(a1, (uint64_t)v11);
  swift_dynamicCast();
  result = v6;
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 16) = v5;
  *(float *)(v1 + 20) = v6;
  *(_BYTE *)(v1 + 24) = v7;
  *(_BYTE *)(v1 + 25) = v8;
  *(_BYTE *)(v1 + 26) = v9;
  *(_DWORD *)(v1 + 28) = v10;
  return result;
}

uint64_t sub_1B1F2655C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  _BYTE v13[40];

  v8 = *(_QWORD *)(a5 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](a1, a2);
  sub_1B19FA198(v10, (uint64_t)v13);
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BA190);
  swift_dynamicCast();
  memcpy((void *)(a2 + a4), &v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v9);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v8 + 8))(&v13[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a5);
}

uint64_t sub_1B1F2661C(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1E0C80A78](a1, a2);
  sub_1B22291E4();
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4B89D0);
  return swift_dynamicCast();
}

BOOL sub_1B1F266C4(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[6];

  v9[2] = a2;
  v9[3] = a3;
  v6 = sub_1B22286D4();
  sub_1B1EFFA50(v3, (uint64_t)sub_1B19E4FB0, (uint64_t)v9, a2, MEMORY[0x1E0DEDCE8], v6, MEMORY[0x1E0DEDD18], v7);
  return memcmp((const void *)v9[5], a1, *(_QWORD *)(*(_QWORD *)(a2 - 8) + 64)) == 0;
}

unint64_t sub_1B1F26750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for ParticleInitScript);
}

uint64_t sub_1B1F26780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for ParticleInitScript);
}

unint64_t sub_1B1F2678C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for ParticleUpdateScript);
}

uint64_t sub_1B1F267BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for ParticleUpdateScript);
}

unint64_t sub_1B1F267C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for GraphScript);
}

uint64_t sub_1B1F267F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for GraphScript);
}

unint64_t sub_1B1F26804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for EmitterScript);
}

uint64_t sub_1B1F26834(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for EmitterScript);
}

unint64_t sub_1B1F26840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for SimpleScript);
}

uint64_t sub_1B1F26870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for SimpleScript);
}

unint64_t sub_1B1F2687C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for MetalFunctionScript);
}

uint64_t sub_1B1F268AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for MetalFunctionScript);
}

unint64_t sub_1B1F268B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for ShaderScript);
}

uint64_t sub_1B1F268E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for ShaderScript);
}

unint64_t sub_1B1F268F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for TriggerScript);
}

uint64_t sub_1B1F26924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for TriggerScript);
}

uint64_t sub_1B1F26930(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;
  _BYTE v7[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v7);
  result = swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_BYTE *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v6;
  return result;
}

uint64_t sub_1B1F269B4(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2)
    return (*(unsigned __int8 *)(a2 + 4) ^ *(unsigned __int8 *)(a1 + 4)) & 1;
  else
    return 1;
}

uint64_t sub_1B1F269E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  char v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  *(_DWORD *)v1 = v3;
  *(_BYTE *)(v1 + 4) = v4;
  return result;
}

char *sub_1B1F26A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CCA0(a1, a3, a4, a6, a7);
}

float sub_1B1F26A64(uint64_t a1)
{
  uint64_t v1;
  float result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  __int16 v19;
  char v20;
  char v21;
  float v22;
  _BYTE v23[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v23);
  swift_dynamicCast();
  result = v22;
  *(_OWORD *)v1 = v4;
  *(_OWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v6;
  *(_BYTE *)(v1 + 40) = v7;
  *(_BYTE *)(v1 + 41) = v8;
  *(_BYTE *)(v1 + 42) = v9;
  *(_BYTE *)(v1 + 43) = v10;
  *(_BYTE *)(v1 + 44) = v11;
  *(_BYTE *)(v1 + 45) = v12;
  *(_QWORD *)(v1 + 48) = v13;
  *(_BYTE *)(v1 + 56) = v14;
  *(_BYTE *)(v1 + 57) = v15;
  *(_BYTE *)(v1 + 58) = v16;
  *(_QWORD *)(v1 + 64) = v17;
  *(_BYTE *)(v1 + 72) = v18;
  *(_WORD *)(v1 + 74) = v19;
  *(_BYTE *)(v1 + 76) = v20;
  *(_BYTE *)(v1 + 77) = v21;
  *(float *)(v1 + 80) = v22;
  return result;
}

char *sub_1B1F26B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C63C(a1, a3, a4, a6, a7);
}

void *sub_1B1F26BA0(uint64_t a1)
{
  void *v1;
  uint64_t v4;
  _BYTE __dst[656];
  _BYTE __src[656];

  memcpy(__dst, v1, sizeof(__dst));
  sub_1B1CDB618((uint64_t)__dst);
  sub_1B1A02864(a1, (uint64_t)&v4);
  swift_dynamicCast();
  return memcpy(v1, __src, 0x290uLL);
}

unint64_t sub_1B1F26C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, (uint64_t (*)(_QWORD))type metadata accessor for ScriptingConfiguration);
}

uint64_t sub_1B1F26C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for ScriptingConfiguration);
}

char *sub_1B1F26C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2E07C(a1, a3, a4, a6, a7);
}

double sub_1B1F26C88(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  int v8;
  char v9;
  int v10;
  char v11;
  char v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_unknownObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v17);
  swift_dynamicCast();
  *(_BYTE *)v1 = v4;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 16) = v6;
  *(_OWORD *)(v1 + 24) = v7;
  *(_DWORD *)(v1 + 40) = v8;
  *(_BYTE *)(v1 + 44) = v9;
  *(_DWORD *)(v1 + 48) = v10;
  *(_BYTE *)(v1 + 52) = v11;
  *(_BYTE *)(v1 + 53) = v12;
  *(_QWORD *)(v1 + 56) = v13;
  *(_BYTE *)(v1 + 64) = v14;
  *(_OWORD *)(v1 + 72) = v15;
  result = *(double *)&v16;
  *(_OWORD *)(v1 + 88) = v16;
  return result;
}

char *sub_1B1F26D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C5B4(a1, a3, a4, a6, a7);
}

double sub_1B1F26DA0(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  int v4;
  char v5;
  int v6;
  char v7;
  char v8;
  char v9;
  int v10;
  char v11;
  char v12;
  __int128 v13;
  _BYTE v14[32];

  sub_1B1A02864(a1, (uint64_t)v14);
  swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 12) = v5;
  *(_DWORD *)(v1 + 16) = v6;
  *(_BYTE *)(v1 + 20) = v7;
  *(_BYTE *)(v1 + 21) = v8;
  *(_BYTE *)(v1 + 22) = v9;
  *(_DWORD *)(v1 + 24) = v10;
  *(_BYTE *)(v1 + 28) = v11;
  *(_BYTE *)(v1 + 29) = v12;
  result = *(double *)&v13;
  *(_OWORD *)(v1 + 32) = v13;
  return result;
}

char *sub_1B1F26E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DAF4(a1, a3, a4, a6, a7);
}

double sub_1B1F26E68(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v4;
  int v5;
  __int128 v6;
  char v7;
  char v8;
  double v9;
  _BYTE v10[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  *(_BYTE *)v1 = v4;
  *(_DWORD *)(v1 + 4) = v5;
  *(_OWORD *)(v1 + 8) = v6;
  *(_BYTE *)(v1 + 24) = v7;
  *(_BYTE *)(v1 + 25) = v8;
  result = v9;
  *(double *)(v1 + 28) = v9;
  return result;
}

float sub_1B1F26F08(uint64_t a1)
{
  uint64_t v1;
  float result;
  __int128 v3;
  int v4;
  float v5;
  char v6;
  int v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  result = v5;
  *(_OWORD *)v1 = v3;
  *(_DWORD *)(v1 + 16) = v4;
  *(float *)(v1 + 20) = v5;
  *(_BYTE *)(v1 + 24) = v6;
  *(_DWORD *)(v1 + 28) = v7;
  return result;
}

float sub_1B1F26F7C(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  int v4;
  char v5;
  float v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int v13;
  _BYTE v14[32];

  sub_1B1A02864(a1, (uint64_t)v14);
  swift_dynamicCast();
  result = v6;
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 12) = v5;
  *(float *)(v1 + 16) = v6;
  *(_BYTE *)(v1 + 20) = v7;
  *(_DWORD *)(v1 + 24) = v8;
  *(_BYTE *)(v1 + 28) = v9;
  *(_BYTE *)(v1 + 29) = v10;
  *(_BYTE *)(v1 + 30) = v11;
  *(_BYTE *)(v1 + 31) = v12;
  *(_DWORD *)(v1 + 32) = v13;
  return result;
}

float sub_1B1F27020(uint64_t a1)
{
  uint64_t v1;
  float result;
  __int128 v3;
  float v4;
  int v5;
  char v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = v4;
  *(_OWORD *)v1 = v3;
  *(float *)(v1 + 16) = v4;
  *(_DWORD *)(v1 + 20) = v5;
  *(_BYTE *)(v1 + 24) = v6;
  return result;
}

char *sub_1B1F2708C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D16C(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F270B0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a1[6];
  v15 = a2[6];
  v16 = *((unsigned __int16 *)a1 + 28);
  v17 = *((unsigned __int16 *)a2 + 28);
  return v2 != v4 || v3 != v5 || v6 != v8 || v7 != v9 || v10 != v12 || v11 != v13 || v14 != v15 || v16 != v17;
}

double sub_1B1F27100(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  int v4;
  char v5;
  __int16 v6;
  uint64_t v7;
  int v8;
  char v9;
  double v10;
  uint64_t v11;
  char v12;
  char v13;
  _BYTE v14[32];

  sub_1B1A02864(a1, (uint64_t)v14);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_DWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 20) = v5;
  *(_WORD *)(v1 + 21) = v6;
  *(_QWORD *)(v1 + 24) = v7;
  *(_DWORD *)(v1 + 32) = v8;
  *(_BYTE *)(v1 + 36) = v9;
  result = v10;
  *(double *)(v1 + 40) = v10;
  *(_QWORD *)(v1 + 48) = v11;
  *(_BYTE *)(v1 + 56) = v12;
  *(_BYTE *)(v1 + 57) = v13;
  return result;
}

uint64_t sub_1B1F271A4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[32];

  swift_release();
  sub_1B1A02864(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  *v1 = v4;
  return result;
}

char *sub_1B1F27210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C4B0(a1, a3, a4, a6, a7);
}

double sub_1B1F27234(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  double result;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;

  sub_1B1A02864(a1, (uint64_t)&v9);
  swift_dynamicCast();
  v2 = v21;
  *(_OWORD *)(v1 + 160) = v20;
  *(_OWORD *)(v1 + 176) = v2;
  *(_OWORD *)(v1 + 192) = v22;
  *(_BYTE *)(v1 + 208) = v23;
  v3 = v17;
  *(_OWORD *)(v1 + 96) = v16;
  *(_OWORD *)(v1 + 112) = v3;
  v4 = v19;
  *(_OWORD *)(v1 + 128) = v18;
  *(_OWORD *)(v1 + 144) = v4;
  v5 = v13;
  *(_OWORD *)(v1 + 32) = v12;
  *(_OWORD *)(v1 + 48) = v5;
  v6 = v15;
  *(_OWORD *)(v1 + 64) = v14;
  *(_OWORD *)(v1 + 80) = v6;
  result = *(double *)&v10;
  v8 = v11;
  *(_OWORD *)v1 = v10;
  *(_OWORD *)(v1 + 16) = v8;
  return result;
}

float sub_1B1F272C4(uint64_t a1)
{
  uint64_t v1;
  float result;
  char v3;
  float v4;
  char v5;
  __int128 v6;
  char v7;
  int v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v4;
  *(_BYTE *)v1 = v3;
  *(float *)(v1 + 4) = v4;
  *(_BYTE *)(v1 + 8) = v5;
  *(_OWORD *)(v1 + 16) = v6;
  *(_BYTE *)(v1 + 32) = v7;
  *(_DWORD *)(v1 + 36) = v8;
  return result;
}

float sub_1B1F27348(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;
  __int128 v4;
  __int128 v5;
  char v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = v3;
  *(float *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 48) = v6;
  return result;
}

double sub_1B1F273AC(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  double v4;
  char v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  result = v4;
  *(double *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = v5;
  return result;
}

__n128 sub_1B1F27410(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  uint64_t v9;
  _OWORD v10[5];
  _OWORD v11[7];
  _OWORD v12[2];

  v3 = *(_OWORD *)(v1 + 80);
  v10[4] = *(_OWORD *)(v1 + 64);
  v11[0] = v3;
  *(_DWORD *)((char *)v11 + 15) = *(_DWORD *)(v1 + 95);
  v4 = *(_OWORD *)(v1 + 16);
  v10[0] = *(_OWORD *)v1;
  v10[1] = v4;
  v5 = *(_OWORD *)(v1 + 48);
  v10[2] = *(_OWORD *)(v1 + 32);
  v10[3] = v5;
  sub_1B19ED720((uint64_t)v10);
  sub_1B1A02864(a1, (uint64_t)&v9);
  swift_dynamicCast();
  v6 = v12[0];
  *(_OWORD *)(v1 + 64) = v11[6];
  *(_OWORD *)(v1 + 80) = v6;
  *(_DWORD *)(v1 + 95) = *(_DWORD *)((char *)v12 + 15);
  v7 = v11[3];
  *(_OWORD *)v1 = v11[2];
  *(_OWORD *)(v1 + 16) = v7;
  result = (__n128)v11[5];
  *(_OWORD *)(v1 + 32) = v11[4];
  *(__n128 *)(v1 + 48) = result;
  return result;
}

BOOL sub_1B1F274B4(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(unsigned __int8 *)(a1 + 16) != (unint64_t)*(unsigned __int8 *)(a2 + 16);
}

float sub_1B1F274D8(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;
  uint64_t v4;
  char v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v3;
  *(float *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 16) = v5;
  return result;
}

char *sub_1B1F2753C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C6C4(a1, a3, a4, a6, a7);
}

double sub_1B1F27560(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  char v8;
  char v9;
  _BYTE v10[32];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_OWORD *)(v1 + 16) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 32) = v6;
  *(_BYTE *)(v1 + 48) = v7;
  *(_BYTE *)(v1 + 49) = v8;
  *(_BYTE *)(v1 + 50) = v9;
  return result;
}

float sub_1B1F275F8(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;
  __int128 v4;
  int v5;
  char v6;
  uint64_t v7;
  char v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v3;
  *(float *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  *(_DWORD *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 36) = v6;
  *(_QWORD *)(v1 + 40) = v7;
  *(_BYTE *)(v1 + 48) = v8;
  return result;
}

double sub_1B1F27674(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  *v1 = v3;
  v1[1] = v4;
  result = *(double *)&v5;
  v1[2] = v5;
  return result;
}

BOOL sub_1B1F276D0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))() != a1;
}

uint64_t sub_1B1F276FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  double v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13[4];

  v5 = *(_QWORD *)(a3 - 8);
  v6 = MEMORY[0x1E0C80A78](a1, a2);
  v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((v9 & 1) != 0)
  {
    v13[3] = a3;
    v10 = sub_1B1A137F4(v13);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(v10, a1, a3);
    v11 = sub_1B2130FC0(v13);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
  }
  else
  {
    v13[0] = 0;
    v13[1] = 0xE000000000000000;
    (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, a1, a3, v6);
    sub_1B2229CDC();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a3);
    return v13[0];
  }
  return v11;
}

char *sub_1B1F277DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D438(a1, a3, a4, a6, a7);
}

void *sub_1B1F27800(uint64_t a1)
{
  void *v1;
  uint64_t v4;
  _BYTE __dst[1616];
  _BYTE __src[1611];

  memcpy(__dst, v1, 0x64BuLL);
  sub_1B1F2F370((uint64_t)__dst);
  sub_1B1A02864(a1, (uint64_t)&v4);
  swift_dynamicCast();
  return memcpy(v1, __src, 0x64BuLL);
}

BOOL sub_1B1F27884(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a2[4];
  v12 = *((unsigned __int8 *)a1 + 40);
  v13 = *((unsigned __int8 *)a2 + 40);
  return v2 != v4 || v3 != v5 || v6 != v8 || v7 != v9 || v10 != v11 || v12 != v13;
}

double sub_1B1F278C4(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  double v5;
  char v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  result = v5;
  *(double *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 40) = v6;
  return result;
}

double sub_1B1F27928(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  char v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  *(_BYTE *)(v1 + 16) = v5;
  return result;
}

double sub_1B1F279A8(uint64_t a1)
{
  uint64_t v1;
  double result;
  int v3;
  char v4;
  int v5;
  char v6;
  int v7;
  char v8;
  char v9;
  uint64_t v10;
  char v11;
  char v12;
  double v13;
  _BYTE v14[32];

  sub_1B1A02864(a1, (uint64_t)v14);
  swift_dynamicCast();
  *(_DWORD *)v1 = v3;
  *(_BYTE *)(v1 + 4) = v4;
  *(_DWORD *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 12) = v6;
  *(_DWORD *)(v1 + 16) = v7;
  *(_BYTE *)(v1 + 20) = v8;
  *(_BYTE *)(v1 + 21) = v9;
  *(_QWORD *)(v1 + 24) = v10;
  *(_BYTE *)(v1 + 32) = v11;
  *(_BYTE *)(v1 + 33) = v12;
  result = v13;
  *(double *)(v1 + 36) = v13;
  return result;
}

char *sub_1B1F27A4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C850(a1, a3, a4, a6, a7);
}

double sub_1B1F27A70(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[32];

  sub_1B1A02864(a1, (uint64_t)v11);
  swift_dynamicCast();
  result = *(double *)&v3;
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v5;
  v1[3] = v6;
  v1[4] = v7;
  v1[5] = v8;
  v1[6] = v9;
  v1[7] = v10;
  return result;
}

BOOL sub_1B1F27AE0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
      || *(unsigned __int8 *)(a1 + 24) != (unint64_t)*(unsigned __int8 *)(a2 + 24);
}

double sub_1B1F27B10(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  __int16 v4;
  uint64_t v5;
  char v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = v3;
  *(double *)v1 = v3;
  *(_WORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_BYTE *)(v1 + 24) = v6;
  return result;
}

char *sub_1B1F27B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CB90(a1, a3, a4, a6, a7);
}

double sub_1B1F27BA8(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  char v8;
  _BYTE v9[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_BYTE *)v1 = v4;
  *(_QWORD *)(v1 + 4) = v5;
  *(_DWORD *)(v1 + 12) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 16) = v7;
  *(_BYTE *)(v1 + 32) = v8;
  return result;
}

char *sub_1B1F27C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CF50(a1, a3, a4, a6, a7);
}

__n128 sub_1B1F27C60(uint64_t a1)
{
  _OWORD *v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  uint64_t v13;
  _OWORD v14[9];
  _OWORD v15[11];
  _OWORD v16[2];

  v3 = v1[9];
  v14[8] = v1[8];
  v15[0] = v3;
  *(_OWORD *)((char *)v15 + 9) = *(_OWORD *)((char *)v1 + 153);
  v4 = v1[5];
  v14[4] = v1[4];
  v14[5] = v4;
  v5 = v1[7];
  v14[6] = v1[6];
  v14[7] = v5;
  v6 = v1[1];
  v14[0] = *v1;
  v14[1] = v6;
  v7 = v1[3];
  v14[2] = v1[2];
  v14[3] = v7;
  sub_1B1E84958((uint64_t)v14);
  sub_1B1A02864(a1, (uint64_t)&v13);
  swift_dynamicCast();
  v8 = v16[0];
  v1[8] = v15[10];
  v1[9] = v8;
  *(_OWORD *)((char *)v1 + 153) = *(_OWORD *)((char *)v16 + 9);
  v9 = v15[7];
  v1[4] = v15[6];
  v1[5] = v9;
  v10 = v15[9];
  v1[6] = v15[8];
  v1[7] = v10;
  v11 = v15[3];
  *v1 = v15[2];
  v1[1] = v11;
  result = (__n128)v15[5];
  v1[2] = v15[4];
  v1[3] = result;
  return result;
}

BOOL sub_1B1F27D28(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  v15 = a1[6];
  v14 = a1[7];
  v17 = a2[6];
  v16 = a2[7];
  return v2 != v4 || v3 != v5 || v6 != v8 || v7 != v9 || v10 != v12 || v11 != v13 || v15 != v17 || v14 != v16;
}

BOOL sub_1B1F27D74(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 != *a2;
}

double sub_1B1F27D88(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  _BYTE v8[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 40) = v7;
  return result;
}

double sub_1B1F27E2C(uint64_t a1)
{
  uint64_t v1;
  double result;
  int v4;
  __int128 v5;
  uint64_t v6;
  char v7;
  _BYTE v8[32];

  sub_1B1AF76C0(*(_QWORD *)(v1 + 8));
  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  *(_DWORD *)v1 = v4;
  result = *(double *)&v5;
  *(_OWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  *(_BYTE *)(v1 + 32) = v7;
  return result;
}

char *sub_1B1F27EBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D5C4(a1, a3, a4, a6, a7);
}

double sub_1B1F27EE0(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  char v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = v3;
  *(double *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v4;
  return result;
}

uint64_t sub_1B1F27F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);
  void (*v14)(char *, uint64_t, uint64_t, __n128);
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v8 = *(_QWORD *)(a3 - 8);
  v9.n128_f64[0] = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v12)
  {
    v13 = *(void (**)(uint64_t, uint64_t))(a4 + 24);
    v14 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v8 + 16);
    v15 = a1;
    v16 = a2;
    do
    {
      v14(v11, v15, a3, v9);
      v13(a3, a4);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, a3);
      ++v15;
      --v16;
    }
    while (v16);
  }
  return sub_1B22290F4();
}

void sub_1B1F28010(_QWORD *a1@<X8>)
{
  *a1 = 0x4000;
}

uint64_t sub_1B1F2801C()
{
  sub_1B1F2F5B4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F28044()
{
  sub_1B1F2F5B4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F2806C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF60F08, (uint64_t (*)(void))sub_1B1F2F5B4, (uint64_t)&type metadata for NullEntityComponent.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F2F5B4();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1F28148@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_1B1F28160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE v11[40];

  v5 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1B19FA198(v8, (uint64_t)v11);
  sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BA190);
  swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(a2, v7, a3);
}

void sub_1B1F28208(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v9 = *(_QWORD *)(a7 - 8);
  v11 = *(_QWORD *)(v9 + 64);
  v10 = *(_QWORD *)(v9 + 72);
  if (v11 == 16)
  {
    if (v10 == 16)
    {
      v15 = a5 - a4;
      v16 = sub_1B1E8C9B4(a7);
      memset_pattern16_nocache(a3, a1, v16 * v15);
      return;
    }
  }
  else if (v11 == 8)
  {
    if (v10 == 8)
    {
      v17 = a5 - a4;
      v18 = sub_1B1E8C9B4(a7);
      memset_pattern8_nocache((uint64_t)a3, (uint64_t *)a1, v18 * v17);
      return;
    }
  }
  else if (v11 == 4 && v10 == 4)
  {
    v13 = a5 - a4;
    v14 = sub_1B1E8C9B4(a7);
    memset_pattern4_nocache((uint64_t)a3, (int *)a1, v14 * v13);
    return;
  }
  sub_1B22290DC();
}

void sub_1B1F282E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = *(_QWORD *)(a4 - 8);
  v9 = MEMORY[0x1E0C80A78](a1, a2);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v8 - v12 >= 1)
  {
    v13 = *(_QWORD *)(v7 + 72);
    (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v11, a1 + v13 * v8 - v13, a4, v9);
    sub_1B222910C();
    (*(void (**)(uint64_t, char *, uint64_t))(v7 + 40))(a1 + v13 * a2, v11, a4);
  }
}

uint64_t sub_1B1F283A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30[2];
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v28 = a1;
  v29 = a2;
  v27 = a5;
  v7 = *(_QWORD *)(a4 - 8);
  MEMORY[0x1E0C80A78](a1, a2);
  v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1B2229898();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)&v26 - v13;
  v15 = swift_conformsToProtocol2();
  if (v15)
    v16 = v15;
  else
    v16 = 0;
  v17 = a3;
  if (!v15)
    a3 = 0;
  if (a3)
  {
    v26 = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v28, v10);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v29, a4);
    v34 = a3;
    v35 = v16;
    sub_1B1A137F4(&v32);
    v18 = v36;
    sub_1B1E8D38C((uint64_t)v14, (uint64_t)v9, a3, a4);
    if (v18)
      return sub_1B1E0F8A8((uint64_t)&v32);
    sub_1B1A025A0(0, (unint64_t *)&unk_1ED4BA558);
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BA190);
    if ((swift_dynamicCast() & 1) != 0)
      return sub_1B1A02518(v30, v27);
    v31 = 0;
    memset(v30, 0, sizeof(v30));
    sub_1B1A04628((uint64_t)v30, (uint64_t (*)(_QWORD))sub_1B1F2F698);
    v32 = 0;
    v33 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v32 = 0xD000000000000010;
    v33 = 0x80000001B2344630;
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v24 = v32;
    v25 = v33;
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v22 = v24;
    *(_QWORD *)(v22 + 8) = v25;
    v23 = 32;
  }
  else
  {
    v32 = 0;
    v33 = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v32 = 0xD000000000000010;
    v33 = 0x80000001B2344630;
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v20 = v32;
    v21 = v33;
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v22 = v20;
    *(_QWORD *)(v22 + 8) = v21;
    v23 = 64;
  }
  *(_BYTE *)(v22 + 16) = v23;
  return swift_willThrow();
}

uint64_t sub_1B1F286A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16[2];
  uint64_t v17;
  uint64_t v18[5];

  v7 = swift_conformsToProtocol2();
  if (v7)
    v8 = v7;
  else
    v8 = 0;
  if (v7)
    v9 = a2;
  else
    v9 = 0;
  if (v9)
  {
    v18[3] = v9;
    v18[4] = v8;
    sub_1B1A137F4(v18);
    sub_1B1E8D320(a1);
    if (v3)
      return sub_1B1E0F8A8((uint64_t)v18);
    sub_1B1A025A0(0, (unint64_t *)&unk_1ED4BA558);
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BA190);
    if ((swift_dynamicCast() & 1) != 0)
      return sub_1B1A02518(v16, a3);
    v17 = 0;
    memset(v16, 0, sizeof(v16));
    sub_1B1A04628((uint64_t)v16, (uint64_t (*)(_QWORD))sub_1B1F2F698);
    v18[0] = 0;
    v18[1] = 0xE000000000000000;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v18[0] = 0xD000000000000010;
    v18[1] = 0x80000001B2344630;
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v14 = v18[0];
    v15 = v18[1];
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v12 = v14;
    *(_QWORD *)(v12 + 8) = v15;
    v13 = 32;
  }
  else
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    strcpy((char *)v18, "can't decode ");
    HIWORD(v18[1]) = -4864;
    sub_1B222A210();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v11 = v18[1];
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v12 = v18[0];
    *(_QWORD *)(v12 + 8) = v11;
    v13 = 64;
  }
  *(_BYTE *)(v12 + 16) = v13;
  return swift_willThrow();
}

uint64_t sub_1B1F28900(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];
  uint64_t v10;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v4 = a1[3];
  v5 = a1[4];
  sub_1B19FA070(a1, v4);
  LODWORD(v4) = *(unsigned __int8 *)(sub_1B2068140(v4, v5) + 85);
  swift_release();
  if ((_DWORD)v4 == 1)
  {
    v6 = a1[3];
    v7 = a1[4];
    sub_1B19FA070(a1, v6);
    sub_1B2068140(v6, v7);
    sub_1B2069F98(a2);
    swift_release();
    sub_1B19FC264((uint64_t)v9, v10);
    sub_1B2229DFC();
  }
  else
  {
    sub_1B207A300();
    sub_1B19FC264((uint64_t)v9, v10);
    sub_1B2229DB4();
    swift_bridgeObjectRelease();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
}

uint64_t sub_1B1F28A54@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1F2E78C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1F28A7C(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1F28900(a1, *v1);
}

uint64_t sub_1B1F28A94(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_conformsToProtocol2();
  if (result)
  {
    result = swift_conformsToProtocol2();
    if (result)
      return v2 == v3;
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1B1F28AEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1B1F2E588(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1F28B14(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];
  uint64_t v5;
  uint64_t v6;

  v2 = *v1;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  v6 = v2;
  sub_1B19FC264((uint64_t)v4, v5);
  sub_1B1B6AEE0();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

char *sub_1B1F28BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C8D0(a1, a3, a4, a6, a7);
}

double sub_1B1F28BDC(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  double result;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[15];
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v3 = *(_OWORD *)(v1 + 208);
  v19[12] = *(_OWORD *)(v1 + 192);
  v19[13] = v3;
  v19[14] = *(_OWORD *)(v1 + 224);
  v20 = *(_QWORD *)(v1 + 240);
  v4 = *(_OWORD *)(v1 + 144);
  v19[8] = *(_OWORD *)(v1 + 128);
  v19[9] = v4;
  v5 = *(_OWORD *)(v1 + 176);
  v19[10] = *(_OWORD *)(v1 + 160);
  v19[11] = v5;
  v6 = *(_OWORD *)(v1 + 80);
  v19[4] = *(_OWORD *)(v1 + 64);
  v19[5] = v6;
  v7 = *(_OWORD *)(v1 + 112);
  v19[6] = *(_OWORD *)(v1 + 96);
  v19[7] = v7;
  v8 = *(_OWORD *)(v1 + 16);
  v19[0] = *(_OWORD *)v1;
  v19[1] = v8;
  v9 = *(_OWORD *)(v1 + 48);
  v19[2] = *(_OWORD *)(v1 + 32);
  v19[3] = v9;
  sub_1B1BBF28C((uint64_t)v19);
  sub_1B1A02864(a1, (uint64_t)&v18);
  swift_dynamicCast();
  v10 = v34;
  *(_OWORD *)(v1 + 192) = v33;
  *(_OWORD *)(v1 + 208) = v10;
  *(_OWORD *)(v1 + 224) = v35;
  *(_QWORD *)(v1 + 240) = v36;
  v11 = v30;
  *(_OWORD *)(v1 + 128) = v29;
  *(_OWORD *)(v1 + 144) = v11;
  v12 = v32;
  *(_OWORD *)(v1 + 160) = v31;
  *(_OWORD *)(v1 + 176) = v12;
  v13 = v26;
  *(_OWORD *)(v1 + 64) = v25;
  *(_OWORD *)(v1 + 80) = v13;
  v14 = v28;
  *(_OWORD *)(v1 + 96) = v27;
  *(_OWORD *)(v1 + 112) = v14;
  v15 = v22;
  *(_OWORD *)v1 = v21;
  *(_OWORD *)(v1 + 16) = v15;
  result = *(double *)&v23;
  v17 = v24;
  *(_OWORD *)(v1 + 32) = v23;
  *(_OWORD *)(v1 + 48) = v17;
  return result;
}

double sub_1B1F28CD4(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  char v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = *(double *)&v3;
  *(_OWORD *)v1 = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

char *sub_1B1F28D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D0E4(a1, a3, a4, a6, a7);
}

double sub_1B1F28D54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;
  __int128 v5;
  __int128 v6;
  int v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[32];

  v3 = *(_QWORD *)(v1 + 16);
  swift_bridgeObjectRelease();
  sub_1B19E5A18(v3);
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v13);
  swift_dynamicCast();
  result = *(double *)&v5;
  *(_OWORD *)v1 = v5;
  *(_OWORD *)(v1 + 16) = v6;
  *(_DWORD *)(v1 + 32) = v7;
  *(_BYTE *)(v1 + 36) = v8;
  *(_BYTE *)(v1 + 37) = v9;
  *(_BYTE *)(v1 + 38) = v10;
  *(_QWORD *)(v1 + 40) = v11;
  *(_QWORD *)(v1 + 48) = v12;
  return result;
}

unint64_t sub_1B1F28E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D9D8(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F28E3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F28E94(a1, a2, a3, (void (*)(uint64_t))sub_1B1C1F760, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2E3A4);
}

unint64_t sub_1B1F28E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D9D8(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F28E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F28E94(a1, a2, a3, (void (*)(uint64_t))sub_1B1C1F6B0, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2E368);
}

uint64_t sub_1B1F28E94(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t (*a5)(_BYTE *, uint64_t))
{
  uint64_t v5;
  _BYTE v9[40];
  _BYTE v10[32];

  a4(v5);
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  return a5(v9, v5);
}

unint64_t sub_1B1F28F08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D9D8(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F28F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F28E94(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EAE4, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EB18);
}

unint64_t sub_1B1F28F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F28F7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EB54, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EB88);
}

unint64_t sub_1B1F28F90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F28FC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EBC4, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EBF8);
}

unint64_t sub_1B1F28FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29004(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EC34, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EC68);
}

unint64_t sub_1B1F29018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2ECA4, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2ECD8);
}

unint64_t sub_1B1F2905C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F2908C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2ED14, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2ED48);
}

unint64_t sub_1B1F290A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F290D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2ED84, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EDB8);
}

unint64_t sub_1B1F290E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EDF4, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EE28);
}

unint64_t sub_1B1F29128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29158(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EE64, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EE98);
}

unint64_t sub_1B1F2916C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F2919C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EED4, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EF08);
}

unint64_t sub_1B1F291B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F291E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2EF44, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2EF78);
}

unint64_t sub_1B1F291F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DC10(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29218(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[56];
  _BYTE v5[32];

  sub_1B1F2EFB4(v1);
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  return sub_1B1F2EFE8((uint64_t)v4, v1);
}

unint64_t sub_1B1F29288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D9D8(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F292B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F28E94(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2F024, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2F058);
}

unint64_t sub_1B1F292CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DF60(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F292FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29310(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2F094, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2F0C8);
}

uint64_t sub_1B1F29310(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t (*a5)(_BYTE *, uint64_t))
{
  uint64_t v5;
  _BYTE v9[56];
  _BYTE v10[32];

  a4(v5);
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  return a5(v9, v5);
}

unint64_t sub_1B1F29384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D9D8(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F293B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F28E94(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2F104, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2F138);
}

unint64_t sub_1B1F293C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CD24(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F293EC(uint64_t a1)
{
  id *v1;
  uint64_t v4;
  _BYTE v5[32];

  sub_1B1F2E138(v1);
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  return sub_1B1F2E16C((uint64_t)&v4, (uint64_t)v1);
}

unint64_t sub_1B1F2945C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C958(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29480(uint64_t a1)
{
  id *v1;
  uint64_t v4;
  _BYTE v5[32];

  sub_1B1F2E1A8(v1);
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  return sub_1B1F2E1DC((uint64_t)&v4, (uint64_t)v1);
}

unint64_t sub_1B1F294F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DB78(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29600(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2F174, (uint64_t (*)(uint64_t *, uint64_t))sub_1B1F2F1A8);
}

unint64_t sub_1B1F29534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DB78(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29600(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2F1E4, (uint64_t (*)(uint64_t *, uint64_t))sub_1B1F2F218);
}

unint64_t sub_1B1F29578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DB78(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F295A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29600(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2F254, (uint64_t (*)(uint64_t *, uint64_t))sub_1B1F2F288);
}

unint64_t sub_1B1F295BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DB78(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F295EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F29600(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2F2C4, (uint64_t (*)(uint64_t *, uint64_t))sub_1B1F2F2F8);
}

uint64_t sub_1B1F29600(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t (*a5)(uint64_t *, uint64_t))
{
  uint64_t v5;
  uint64_t v9;
  _BYTE v10[32];

  a4(v5);
  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  return a5(&v9, v5);
}

unint64_t sub_1B1F29674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D9D8(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F296A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F28E94(a1, a2, a3, (void (*)(uint64_t))sub_1B1F2E218, (uint64_t (*)(_BYTE *, uint64_t))sub_1B1F2E24C);
}

float sub_1B1F296B8(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  int v4;
  char v5;
  float v6;
  char v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  int v13;
  char v14;
  _BYTE v15[32];

  sub_1B1A02864(a1, (uint64_t)v15);
  swift_dynamicCast();
  result = v6;
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 12) = v5;
  *(float *)(v1 + 16) = v6;
  *(_BYTE *)(v1 + 20) = v7;
  *(_DWORD *)(v1 + 24) = v8;
  *(_BYTE *)(v1 + 28) = v9;
  *(_BYTE *)(v1 + 29) = v10;
  *(_BYTE *)(v1 + 30) = v11;
  *(_BYTE *)(v1 + 31) = v12;
  *(_DWORD *)(v1 + 32) = v13;
  *(_BYTE *)(v1 + 36) = v14;
  return result;
}

double sub_1B1F29764(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  int v4;
  __int128 v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v3;
  *(double *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_OWORD *)(v1 + 16) = v5;
  return result;
}

double sub_1B1F297C8(uint64_t a1)
{
  double *v1;
  double result;
  double v4;
  uint64_t v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v4;
  *v1 = v4;
  *((_QWORD *)v1 + 1) = v5;
  return result;
}

char *sub_1B1F2983C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D318(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F29860(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(unsigned __int16 *)(a1 + 8) != (unint64_t)*(unsigned __int16 *)(a2 + 8);
}

uint64_t sub_1B1F29880(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  char v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  result = swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 9) = v5;
  return result;
}

double sub_1B1F298E4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  double result;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];

  v3 = *(void **)(v1 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1B1A02864(a1, (uint64_t)v11);
  swift_dynamicCast();
  *(_OWORD *)v1 = v5;
  *(_QWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = v7;
  result = *(double *)&v8;
  *(_OWORD *)(v1 + 32) = v8;
  *(_QWORD *)(v1 + 48) = v9;
  *(_QWORD *)(v1 + 56) = v10;
  return result;
}

double sub_1B1F2998C(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  _BYTE v9[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 32) = v7;
  *(_QWORD *)(v1 + 48) = v8;
  return result;
}

double sub_1B1F29A28(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  return result;
}

double sub_1B1F29AA4(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  int v4;
  double v5;
  int v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_DWORD *)(v1 + 16) = v4;
  result = v5;
  *(double *)(v1 + 20) = v5;
  *(_DWORD *)(v1 + 28) = v6;
  return result;
}

double sub_1B1F29B10(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v3;
  int v4;
  double v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE v10[32];

  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  *(_BYTE *)v1 = v3;
  *(_DWORD *)(v1 + 4) = v4;
  result = v5;
  *(double *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 24) = v7;
  *(_QWORD *)(v1 + 32) = v8;
  *(_DWORD *)(v1 + 40) = v9;
  return result;
}

unint64_t sub_1B1F29B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, (uint64_t (*)(_QWORD))type metadata accessor for VFXObjectTag);
}

uint64_t sub_1B1F29BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for VFXObjectTag);
}

double sub_1B1F29BC8(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  return result;
}

char *sub_1B1F29C3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CB00(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29C60(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  _BYTE v10[32];

  sub_1B1A02864(a1, (uint64_t)v10);
  result = swift_dynamicCast();
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v5;
  v1[3] = v6;
  v1[4] = v7;
  v1[5] = v8;
  v1[6] = v9;
  return result;
}

uint64_t sub_1B1F29CE4(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;
  char v3;
  char v4;
  char v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  result = swift_dynamicCast();
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v5;
  return result;
}

BOOL sub_1B1F29D48(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x61uLL) != 0;
}

double sub_1B1F29D68(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;
  _BYTE v10[32];

  sub_1B1A02864(a1, (uint64_t)v10);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 48) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 64) = v7;
  *(_OWORD *)(v1 + 80) = v8;
  *(_BYTE *)(v1 + 96) = v9;
  return result;
}

uint64_t sub_1B1F29DD4(uint64_t a1)
{
  _DWORD *v1;
  uint64_t result;
  int v3;
  _BYTE v4[32];

  sub_1B1A02864(a1, (uint64_t)v4);
  result = swift_dynamicCast();
  *v1 = v3;
  return result;
}

uint64_t sub_1B1F29E28(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  char v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v4;
  return result;
}

unint64_t sub_1B1F29E84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2DCB4(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F29EA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  _BYTE v5[32];

  sub_1B1F2E2F8(v1);
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  return sub_1B1F2E32C((uint64_t)&v4, v1);
}

double sub_1B1F29F18(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int16 v4;
  char v5;
  int v6;
  __int128 v7;
  char v8;
  _BYTE v9[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_WORD *)v1 = v4;
  *(_BYTE *)(v1 + 4) = v5;
  *(_DWORD *)(v1 + 8) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 16) = v7;
  *(_BYTE *)(v1 + 32) = v8;
  return result;
}

double sub_1B1F29FAC(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  char v6;
  double v7;
  _BYTE v8[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_BYTE *)(v1 + 24) = v6;
  result = v7;
  *(double *)(v1 + 28) = v7;
  return result;
}

char *sub_1B1F2A040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D648(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F2A064(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x41uLL) != 0;
}

double sub_1B1F2A084(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  char v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  result = *(double *)&v5;
  *(_OWORD *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 48) = v6;
  *(_BYTE *)(v1 + 64) = v7;
  return result;
}

float sub_1B1F2A0E8(uint64_t a1)
{
  uint64_t v1;
  float result;
  __int128 v3;
  float v4;
  int v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v4;
  *(_OWORD *)v1 = v3;
  *(float *)(v1 + 16) = v4;
  *(_DWORD *)(v1 + 20) = v5;
  return result;
}

float sub_1B1F2A14C(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v4;
  uint64_t v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v4;
  *(float *)v1 = v4;
  *(_QWORD *)(v1 + 8) = v5;
  return result;
}

char *sub_1B1F2A1C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C7C8(a1, a3, a4, a6, a7);
}

double sub_1B1F2A1E4(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[32];

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_OWORD *)(v1 + 8) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 24) = v6;
  return result;
}

char *sub_1B1F2A280(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CFD4(a1, a3, a4, a6, a7);
}

BOOL sub_1B1F2A2A4(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x50uLL) != 0;
}

__n128 sub_1B1F2A2C4(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  uint64_t v3;
  __n128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  result = v4;
  *(_QWORD *)v1 = v3;
  *(__n128 *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  *(_OWORD *)(v1 + 48) = v6;
  *(_OWORD *)(v1 + 64) = v7;
  return result;
}

double sub_1B1F2A328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F2A334(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DEEE30]);
}

double sub_1B1F2A334(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  double *v4;
  double result;
  double v7;
  uint64_t v8;
  _BYTE v9[32];

  a4(*((_QWORD *)v4 + 1));
  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  result = v7;
  *v4 = v7;
  *((_QWORD *)v4 + 1) = v8;
  return result;
}

float sub_1B1F2A3A8(uint64_t a1)
{
  uint64_t v1;
  float result;
  __int128 v3;
  char v4;
  float v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v5;
  *(_OWORD *)v1 = v3;
  *(_BYTE *)(v1 + 16) = v4;
  *(float *)(v1 + 20) = v5;
  return result;
}

double sub_1B1F2A40C(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  _BYTE v9[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_BYTE *)(v1 + 8) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 16) = v6;
  *(_QWORD *)(v1 + 32) = v7;
  *(_BYTE *)(v1 + 40) = v8;
  return result;
}

double sub_1B1F2A4A8(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = *(double *)&v3;
  *(_OWORD *)v1 = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  return result;
}

double sub_1B1F2A50C(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v3;
  __int128 v4;
  double v5;
  int v6;
  uint64_t v7;
  int v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_BYTE *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  result = v5;
  *(double *)(v1 + 32) = v5;
  *(_DWORD *)(v1 + 40) = v6;
  *(_QWORD *)(v1 + 48) = v7;
  *(_DWORD *)(v1 + 56) = v8;
  return result;
}

unint64_t sub_1B1F2A588(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for SceneKitAsset);
}

uint64_t sub_1B1F2A5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for SceneKitAsset);
}

unint64_t sub_1B1F2A5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, type metadata accessor for SceneKitRenderer);
}

uint64_t sub_1B1F2A5F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, type metadata accessor for SceneKitRenderer);
}

double sub_1B1F2A600(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  result = *(double *)&v5;
  *(_OWORD *)(v1 + 16) = v5;
  return result;
}

uint64_t sub_1B1F2A664(uint64_t a1)
{
  _BYTE *v1;
  uint64_t result;
  char v3;
  _BYTE v4[32];

  sub_1B1A02864(a1, (uint64_t)v4);
  result = swift_dynamicCast();
  *v1 = v3;
  return result;
}

double sub_1B1F2A6B8(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[32];

  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = *(double *)&v4;
  *v1 = v4;
  v1[1] = v5;
  return result;
}

BOOL sub_1B1F2A73C(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2] || a1[3] != a2[3];
}

float sub_1B1F2A764(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;
  __int128 v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = v3;
  *(float *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  return result;
}

float sub_1B1F2A7C0(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  float v4;
  __int128 v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v4;
  *(_QWORD *)v1 = v3;
  *(float *)(v1 + 8) = v4;
  *(_OWORD *)(v1 + 16) = v5;
  return result;
}

BOOL sub_1B1F2A824(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2 || *(_DWORD *)(a1 + 8) != (unint64_t)*(unsigned int *)(a2 + 8);
}

float sub_1B1F2A844(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  float v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = v4;
  *(_QWORD *)v1 = v3;
  *(float *)(v1 + 8) = v4;
  return result;
}

double sub_1B1F2A8A0(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  double v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  result = v4;
  *(double *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = v5;
  *(_BYTE *)(v1 + 25) = v6;
  *(_QWORD *)(v1 + 28) = v7;
  *(_BYTE *)(v1 + 36) = v8;
  return result;
}

double sub_1B1F2A91C(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  return result;
}

unint64_t sub_1B1F2A998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D1F0(a1, a3, a4, a6, a7);
}

uint64_t sub_1B1F2A9BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v4;
  _BYTE v5[32];

  sub_1B1F2E288(v1);
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  return sub_1B1F2E2BC((uint64_t)&v4, v1);
}

double sub_1B1F2AA2C(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  uint64_t v4;
  char v5;
  __int16 v6;
  uint64_t v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  result = v3;
  *(double *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 16) = v5;
  *(_WORD *)(v1 + 18) = v6;
  *(_QWORD *)(v1 + 24) = v7;
  return result;
}

double sub_1B1F2AAA0(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  __int128 v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  result = *(double *)&v5;
  *(_OWORD *)(v1 + 8) = v5;
  return result;
}

BOOL sub_1B1F2AB1C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16)
      || *(_QWORD *)(a1 + 24) != *(_QWORD *)(a2 + 24)
      || *(_DWORD *)(a1 + 32) != (unint64_t)*(unsigned int *)(a2 + 32);
}

float sub_1B1F2AB50(uint64_t a1)
{
  uint64_t v1;
  float result;
  __int128 v3;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  float v11;
  _BYTE v12[32];

  sub_1B1A02864(a1, (uint64_t)v12);
  swift_dynamicCast();
  result = v11;
  *(_OWORD *)v1 = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = v5;
  *(_BYTE *)(v1 + 25) = v6;
  *(_BYTE *)(v1 + 26) = v7;
  *(_BYTE *)(v1 + 27) = v8;
  *(_BYTE *)(v1 + 28) = v9;
  *(_BYTE *)(v1 + 29) = v10;
  *(float *)(v1 + 32) = v11;
  return result;
}

double sub_1B1F2ABE4(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  char v4;
  char v5;
  char v6;
  char v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  result = v3;
  *(double *)v1 = v3;
  *(_BYTE *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 9) = v5;
  *(_BYTE *)(v1 + 10) = v6;
  *(_BYTE *)(v1 + 11) = v7;
  return result;
}

BOOL sub_1B1F2AC58(__n128 *a1, __n128 *a2)
{
  return !sub_1B1BF3DFC(*a1, a1[1], *a2, a2[1]);
}

double sub_1B1F2AC7C(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v3;
  int v4;
  char v5;
  __int128 v6;
  __int128 v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  *(_BYTE *)v1 = v3;
  *(_DWORD *)(v1 + 4) = v4;
  *(_BYTE *)(v1 + 8) = v5;
  *(_OWORD *)(v1 + 12) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 28) = v7;
  return result;
}

__n128 sub_1B1F2ACF0(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  __n128 result;
  _OWORD v5[7];
  _OWORD v6[2];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  v2 = v6[0];
  *(_OWORD *)(v1 + 64) = v5[6];
  *(_OWORD *)(v1 + 80) = v2;
  *(_OWORD *)(v1 + 89) = *(_OWORD *)((char *)v6 + 9);
  v3 = v5[3];
  *(_OWORD *)v1 = v5[2];
  *(_OWORD *)(v1 + 16) = v3;
  result = (__n128)v5[5];
  *(_OWORD *)(v1 + 32) = v5[4];
  *(__n128 *)(v1 + 48) = result;
  return result;
}

uint64_t sub_1B1F2AD5C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];

  swift_release();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  result = swift_dynamicCast();
  *v1 = v4;
  v1[1] = v5;
  return result;
}

double sub_1B1F2ADD0(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  __int128 v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  result = *(double *)&v4;
  *(_OWORD *)(v1 + 8) = v4;
  return result;
}

double sub_1B1F2AE2C(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  char v6;
  _BYTE v7[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_BYTE *)(v1 + 24) = v6;
  return result;
}

double sub_1B1F2AEB8(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v4;
  __int128 v5;
  _BYTE v6[32];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = *(double *)&v4;
  *v1 = v4;
  v1[1] = v5;
  return result;
}

double sub_1B1F2AF2C(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v4;
  __int128 v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  *(_BYTE *)v1 = v4;
  result = *(double *)&v5;
  *(_OWORD *)(v1 + 8) = v5;
  return result;
}

double sub_1B1F2AFA8(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  uint64_t v4;
  char v5;
  __int128 v6;
  uint64_t v7;
  __int16 v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 48) = v7;
  *(_WORD *)(v1 + 56) = v8;
  return result;
}

BOOL sub_1B1F2B024(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(unsigned __int8 *)(a1 + 8) != (unint64_t)*(unsigned __int8 *)(a2 + 8);
}

uint64_t sub_1B1F2B044(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  __int16 v3;
  char v4;
  char v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  result = swift_dynamicCast();
  *(_WORD *)v1 = v3;
  *(_BYTE *)(v1 + 2) = v4;
  *(_BYTE *)(v1 + 3) = v5;
  return result;
}

double sub_1B1F2B0A8(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  char v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = *(double *)&v3;
  *(_OWORD *)v1 = v3;
  *(_BYTE *)(v1 + 16) = v4;
  return result;
}

double sub_1B1F2B108(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  uint64_t v4;
  char v5;
  char v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = *(double *)&v3;
  *(_OWORD *)v1 = v3;
  *(_QWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 24) = v5;
  *(_BYTE *)(v1 + 25) = v6;
  return result;
}

double sub_1B1F2B174(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _BYTE v8[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 24) = v6;
  result = *(double *)&v7;
  *(_OWORD *)(v1 + 32) = v7;
  return result;
}

uint64_t sub_1B1F2B200(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[32];

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v5);
  result = swift_dynamicCast();
  *v1 = v4;
  return result;
}

double sub_1B1F2B26C(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  _BYTE v5[32];

  sub_1B1A0DAC8(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  return result;
}

char *sub_1B1F2B2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D05C(a1, a3, a4, a6, a7);
}

__n128 sub_1B1F2B2FC(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __n128 result;
  uint64_t v13;
  _OWORD v14[10];
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v3 = *(_OWORD *)(v1 + 144);
  v14[8] = *(_OWORD *)(v1 + 128);
  v14[9] = v3;
  v15 = *(_QWORD *)(v1 + 160);
  v4 = *(_OWORD *)(v1 + 80);
  v14[4] = *(_OWORD *)(v1 + 64);
  v14[5] = v4;
  v5 = *(_OWORD *)(v1 + 112);
  v14[6] = *(_OWORD *)(v1 + 96);
  v14[7] = v5;
  v6 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  v14[1] = v6;
  v7 = *(_OWORD *)(v1 + 48);
  v14[2] = *(_OWORD *)(v1 + 32);
  v14[3] = v7;
  sub_1B1EC5968((uint64_t)v14);
  sub_1B1A02864(a1, (uint64_t)&v13);
  swift_dynamicCast();
  v8 = v25;
  *(_OWORD *)(v1 + 128) = v24;
  *(_OWORD *)(v1 + 144) = v8;
  *(_QWORD *)(v1 + 160) = v26;
  v9 = v21;
  *(_OWORD *)(v1 + 64) = v20;
  *(_OWORD *)(v1 + 80) = v9;
  v10 = v23;
  *(_OWORD *)(v1 + 96) = v22;
  *(_OWORD *)(v1 + 112) = v10;
  v11 = v17;
  *(_OWORD *)v1 = v16;
  *(_OWORD *)(v1 + 16) = v11;
  result = v19;
  *(_OWORD *)(v1 + 32) = v18;
  *(__n128 *)(v1 + 48) = result;
  return result;
}

double sub_1B1F2B3C4(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  __int16 v4;
  char v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  int v10;
  _BYTE v11[32];

  sub_1B1A02864(a1, (uint64_t)v11);
  swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_WORD *)(v1 + 8) = v4;
  *(_BYTE *)(v1 + 10) = v5;
  *(_OWORD *)(v1 + 16) = v6;
  *(_OWORD *)(v1 + 32) = v7;
  result = *(double *)&v8;
  *(_OWORD *)(v1 + 48) = v8;
  *(_QWORD *)(v1 + 64) = v9;
  *(_DWORD *)(v1 + 72) = v10;
  return result;
}

uint64_t sub_1B1F2B448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F2BF38(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DEEEC0]);
}

char *sub_1B1F2B454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CC18(a1, a3, a4, a6, a7);
}

double sub_1B1F2B478(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int16 v8;
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _BYTE v16[32];

  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v16);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_BYTE *)(v1 + 24) = v6;
  *(_QWORD *)(v1 + 32) = v7;
  *(_WORD *)(v1 + 40) = v8;
  *(_BYTE *)(v1 + 42) = v9;
  *(_OWORD *)(v1 + 48) = v10;
  *(_OWORD *)(v1 + 64) = v11;
  result = *(double *)&v12;
  *(_OWORD *)(v1 + 80) = v12;
  *(_QWORD *)(v1 + 96) = v13;
  *(_DWORD *)(v1 + 104) = v14;
  *(_QWORD *)(v1 + 112) = v15;
  return result;
}

double sub_1B1F2B540(uint64_t a1)
{
  _OWORD *v1;
  double result;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = *(double *)&v3;
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v5;
  v1[3] = v6;
  return result;
}

BOOL sub_1B1F2B59C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  return v2 != v4 || v3 != v5 || v6 != v8 || v7 != v9 || v10 != v12 || v11 != v13;
}

double sub_1B1F2B5D4(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  __int128 v4;
  char v5;
  char v6;
  double v7;
  _BYTE v8[32];

  sub_1B1A02864(a1, (uint64_t)v8);
  swift_dynamicCast();
  result = v7;
  *(_OWORD *)v1 = v3;
  *(_OWORD *)(v1 + 16) = v4;
  *(_BYTE *)(v1 + 32) = v5;
  *(_BYTE *)(v1 + 33) = v6;
  *(double *)(v1 + 40) = v7;
  return result;
}

char *sub_1B1F2B640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2CDC4(a1, a3, a4, a6, a7);
}

double sub_1B1F2B664(uint64_t a1)
{
  uint64_t v1;
  double result;
  int v3;
  char v4;
  double v5;
  char v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  *(_DWORD *)v1 = v3;
  *(_BYTE *)(v1 + 4) = v4;
  result = v5;
  *(double *)(v1 + 8) = v5;
  *(_BYTE *)(v1 + 16) = v6;
  return result;
}

double sub_1B1F2B6D0(uint64_t a1)
{
  double *v1;
  double result;
  double v3;
  _BYTE v4[32];

  sub_1B1A02864(a1, (uint64_t)v4);
  swift_dynamicCast();
  result = v3;
  *v1 = v3;
  return result;
}

BOOL sub_1B1F2B724(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[2];
  v9 = a2[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2[4];
  v13 = a2[5];
  v14 = a1[6];
  v15 = a2[6];
  v16 = *((unsigned __int8 *)a1 + 56);
  v17 = *((unsigned __int8 *)a2 + 56);
  return v2 != v4 || v3 != v5 || v6 != v8 || v7 != v9 || v10 != v12 || v11 != v13 || v14 != v15 || v16 != v17;
}

double sub_1B1F2B774(uint64_t a1)
{
  uint64_t v1;
  double result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  double v7;
  char v8;
  _BYTE v9[32];

  sub_1B1A02864(a1, (uint64_t)v9);
  swift_dynamicCast();
  *(_DWORD *)v1 = v3;
  *(_QWORD *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  *(_OWORD *)(v1 + 32) = v6;
  result = v7;
  *(double *)(v1 + 48) = v7;
  *(_BYTE *)(v1 + 56) = v8;
  return result;
}

float sub_1B1F2B7F0(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;
  char v4;
  uint64_t v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v3;
  *(float *)v1 = v3;
  *(_BYTE *)(v1 + 4) = v4;
  *(_QWORD *)(v1 + 8) = v5;
  return result;
}

BOOL sub_1B1F2B854(const void *a1, const void *a2)
{
  return memcmp(a1, a2, 0x6CuLL) != 0;
}

double sub_1B1F2B874(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v3;
  int v4;
  __int128 v5;
  int v6;
  __int128 v7;
  int v8;
  __int128 v9;
  double v10;
  int v11;
  _BYTE v12[32];

  sub_1B1A02864(a1, (uint64_t)v12);
  swift_dynamicCast();
  *(_QWORD *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  *(_OWORD *)(v1 + 16) = v5;
  *(_DWORD *)(v1 + 32) = v6;
  *(_OWORD *)(v1 + 48) = v7;
  *(_DWORD *)(v1 + 64) = v8;
  *(_OWORD *)(v1 + 80) = v9;
  result = v10;
  *(double *)(v1 + 96) = v10;
  *(_DWORD *)(v1 + 104) = v11;
  return result;
}

BOOL sub_1B1F2B908(_DWORD *a1, _DWORD *a2)
{
  return *a1 != *a2;
}

double sub_1B1F2B91C(uint64_t a1)
{
  uint64_t v1;
  double result;
  uint64_t v4;
  int v5;
  __int128 v6;
  _BYTE v7[32];

  swift_release();
  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  *(_QWORD *)v1 = v4;
  *(_DWORD *)(v1 + 8) = v5;
  result = *(double *)&v6;
  *(_OWORD *)(v1 + 16) = v6;
  return result;
}

BOOL sub_1B1F2B998(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 != *(_QWORD *)a2
      || *(_QWORD *)(a1 + 8) != *(_QWORD *)(a2 + 8)
      || *(_DWORD *)(a1 + 16) != (unint64_t)*(unsigned int *)(a2 + 16);
}

double sub_1B1F2B9BC(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  int v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = *(double *)&v3;
  *(_OWORD *)v1 = v3;
  *(_DWORD *)(v1 + 16) = v4;
  return result;
}

__n128 sub_1B1F2BA18(uint64_t a1)
{
  uint64_t v1;
  __n128 result;
  uint64_t v3;
  __n128 v4;
  __int128 v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v4;
  *(_QWORD *)v1 = v3;
  *(__n128 *)(v1 + 16) = v4;
  *(_OWORD *)(v1 + 32) = v5;
  return result;
}

unint64_t sub_1B1F2BA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2D750(a1, a3, a4, a6, a7, (uint64_t (*)(_QWORD))type metadata accessor for SDFFileAsset);
}

uint64_t sub_1B1F2BAA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F256FC(a1, a2, a3, (uint64_t (*)(_QWORD))type metadata accessor for SDFFileAsset);
}

double sub_1B1F2BAB0(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[32];

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  *(_OWORD *)(v1 + 16) = v5;
  *(_QWORD *)(v1 + 32) = v6;
  return result;
}

BOOL sub_1B1F2BB2C(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2];
}

float sub_1B1F2BB50(uint64_t a1)
{
  uint64_t v1;
  float result;
  uint64_t v3;
  float v4;
  uint64_t v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = v4;
  *(_QWORD *)v1 = v3;
  *(float *)(v1 + 8) = v4;
  *(_QWORD *)(v1 + 16) = v5;
  return result;
}

double sub_1B1F2BBB4(uint64_t a1)
{
  uint64_t v1;
  double result;
  char v4;
  int v5;
  int v6;
  char v7;
  int v8;
  char v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _BYTE v13[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v13);
  swift_dynamicCast();
  *(_BYTE *)v1 = v4;
  *(_DWORD *)(v1 + 4) = v5;
  *(_DWORD *)(v1 + 8) = v6;
  *(_BYTE *)(v1 + 12) = v7;
  *(_DWORD *)(v1 + 16) = v8;
  *(_BYTE *)(v1 + 20) = v9;
  result = *(double *)&v10;
  *(_OWORD *)(v1 + 32) = v10;
  *(_OWORD *)(v1 + 48) = v11;
  *(_BYTE *)(v1 + 64) = v12;
  return result;
}

double sub_1B1F2BC60(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v3;
  char v4;
  __int128 v5;
  _BYTE v6[32];

  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  *(_OWORD *)v1 = v3;
  *(_BYTE *)(v1 + 16) = v4;
  result = *(double *)&v5;
  *(_OWORD *)(v1 + 24) = v5;
  return result;
}

char *sub_1B1F2BCC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_1B1F2C320(a1, a3, a4, a6, a7);
}

double sub_1B1F2BCE8(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  int v7;
  char v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _BYTE v14[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1B1A02864(a1, (uint64_t)v14);
  swift_dynamicCast();
  *(_OWORD *)v1 = v4;
  *(_OWORD *)(v1 + 16) = v5;
  *(_OWORD *)(v1 + 32) = v6;
  *(_DWORD *)(v1 + 48) = v7;
  *(_BYTE *)(v1 + 52) = v8;
  *(_QWORD *)(v1 + 56) = v9;
  *(_BYTE *)(v1 + 64) = v10;
  *(_OWORD *)(v1 + 72) = v11;
  result = *(double *)&v12;
  *(_OWORD *)(v1 + 88) = v12;
  *(_QWORD *)(v1 + 104) = v13;
  return result;
}

float sub_1B1F2BDD8(uint64_t a1)
{
  uint64_t v1;
  float result;
  float v3;
  char v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = v3;
  *(float *)v1 = v3;
  *(_BYTE *)(v1 + 4) = v4;
  return result;
}

uint64_t sub_1B1F2BE34(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  result = swift_dynamicCast();
  *v1 = v4;
  v1[1] = v5;
  return result;
}

double sub_1B1F2BEA0(uint64_t a1)
{
  uint64_t v1;
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[32];

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1A02864(a1, (uint64_t)v6);
  swift_dynamicCast();
  result = *(double *)&v4;
  *(_OWORD *)v1 = v4;
  *(_QWORD *)(v1 + 16) = v5;
  return result;
}

BOOL sub_1B1F2BF24(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2;
}

uint64_t sub_1B1F2BF38(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[32];

  a4(*v4);
  sub_1B1A02864(a1, (uint64_t)v8);
  result = swift_dynamicCast();
  *v4 = v7;
  return result;
}

double sub_1B1F2BFA4(uint64_t a1)
{
  uint64_t v1;
  double result;
  double v3;
  int v4;
  _BYTE v5[32];

  sub_1B1A02864(a1, (uint64_t)v5);
  swift_dynamicCast();
  result = v3;
  *(double *)v1 = v3;
  *(_DWORD *)(v1 + 8) = v4;
  return result;
}

uint64_t sub_1B1F2C000(uint64_t a1)
{
  uint64_t v2;

  sub_1B1A02864(a1, (uint64_t)&v2);
  return swift_dynamicCast();
}

float sub_1B1F2C048(uint64_t a1)
{
  uint64_t v1;
  float result;
  char v3;
  __int128 v4;
  uint64_t v5;
  float v6;
  _BYTE v7[32];

  sub_1B1A02864(a1, (uint64_t)v7);
  swift_dynamicCast();
  result = v6;
  *(_BYTE *)v1 = v3;
  *(_OWORD *)(v1 + 4) = v4;
  *(_QWORD *)(v1 + 20) = v5;
  *(float *)(v1 + 28) = v6;
  return result;
}

uint64_t sub_1B1F2C0B4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[32];

  sub_1B1A02864(a1, (uint64_t)v4);
  result = swift_dynamicCast();
  *v1 = v3;
  return result;
}

float sub_1B1F2C108(uint64_t a1)
{
  float *v1;
  float result;
  float v3;
  _BYTE v4[32];

  sub_1B1A02864(a1, (uint64_t)v4);
  swift_dynamicCast();
  result = v3;
  *v1 = v3;
  return result;
}

BOOL sub_1B1F2C15C(_QWORD *a1, _QWORD *a2)
{
  return *a1 != *a2 || a1[1] != a2[1];
}

unint64_t sub_1B1F2C174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 40 * a2;
    result = a3 + 40 * a4;
    if (result < v5 || result >= v5 + 40 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2C218(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 36 * a2);
    result = (char *)(a3 + 36 * a4);
    if (result != v5 || result >= &v5[36 * a5])
      return (char *)memmove(result, v5, 36 * a5);
  }
  return result;
}

char *sub_1B1F2C2A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 8 * a2);
    result = (char *)(a3 + 8 * a4);
    if (result != v5 || result >= &v5[8 * a5])
      return (char *)memmove(result, v5, 8 * a5);
  }
  return result;
}

char *sub_1B1F2C320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 112 * a2);
    result = (char *)(a3 + 112 * a4);
    if (result != v5 || result >= &v5[112 * a5])
      return (char *)memmove(result, v5, 112 * a5);
  }
  return result;
}

char *sub_1B1F2C3A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 16 * a2);
    result = (char *)(a3 + 16 * a4);
    if (result != v5 || result >= &v5[16 * a5])
      return (char *)memmove(result, v5, 16 * a5);
  }
  return result;
}

char *sub_1B1F2C428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 24 * a2);
    result = (char *)(a3 + 24 * a4);
    if (result != v5 || result >= &v5[24 * a5])
      return (char *)memmove(result, v5, 24 * a5);
  }
  return result;
}

char *sub_1B1F2C4B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 224 * a2);
    result = (char *)(a3 + 224 * a4);
    if (result != v5 || result >= &v5[224 * a5])
      return (char *)memmove(result, v5, 224 * a5);
  }
  return result;
}

char *sub_1B1F2C534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 4 * a2);
    result = (char *)(a3 + 4 * a4);
    if (result != v5 || result >= &v5[4 * a5])
      return (char *)memmove(result, v5, 4 * a5);
  }
  return result;
}

char *sub_1B1F2C5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 48 * a2);
    result = (char *)(a3 + 48 * a4);
    if (result != v5 || result >= &v5[48 * a5])
      return (char *)memmove(result, v5, 48 * a5);
  }
  return result;
}

char *sub_1B1F2C63C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 656 * a2);
    result = (char *)(a3 + 656 * a4);
    if (result != v5 || result >= &v5[656 * a5])
      return (char *)memmove(result, v5, 656 * a5);
  }
  return result;
}

char *sub_1B1F2C6C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 56 * a2);
    result = (char *)(a3 + 56 * a4);
    if (result != v5 || result >= &v5[56 * a5])
      return (char *)memmove(result, v5, 56 * a5);
  }
  return result;
}

char *sub_1B1F2C748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 32 * a2);
    result = (char *)(a3 + 32 * a4);
    if (result != v5 || result >= &v5[32 * a5])
      return (char *)memmove(result, v5, 32 * a5);
  }
  return result;
}

char *sub_1B1F2C7C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 40 * a2);
    result = (char *)(a3 + 40 * a4);
    if (result != v5 || result >= &v5[40 * a5])
      return (char *)memmove(result, v5, 40 * a5);
  }
  return result;
}

char *sub_1B1F2C850(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + (a2 << 7));
    result = (char *)(a3 + (a4 << 7));
    if (result != v5 || result >= &v5[128 * a5])
      return (char *)memmove(result, v5, a5 << 7);
  }
  return result;
}

char *sub_1B1F2C8D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 248 * a2);
    result = (char *)(a3 + 248 * a4);
    if (result != v5 || result >= &v5[248 * a5])
      return (char *)memmove(result, v5, 248 * a5);
  }
  return result;
}

unint64_t sub_1B1F2C958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 48 * a2;
    result = a3 + 48 * a4;
    if (result < v5 || result >= v5 + 48 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2C9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + (a2 << 6));
    result = (char *)(a3 + (a4 << 6));
    if (result != v5 || result >= &v5[64 * a5])
      return (char *)memmove(result, v5, a5 << 6);
  }
  return result;
}

char *sub_1B1F2CA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 24 * a2);
    result = (char *)(a3 + 24 * a4);
    if (result != v5 || result >= &v5[24 * a5])
      return (char *)memmove(result, v5, 24 * a5);
  }
  return result;
}

char *sub_1B1F2CB00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 - a2 + 8 * a2);
    result = (char *)(a3 - a4 + 8 * a4);
    if (result != v5 || result >= &v5[8 * a5 - a5])
      return (char *)memmove(result, v5, 7 * a5);
  }
  return result;
}

char *sub_1B1F2CB90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 12 * a2);
    result = (char *)(a3 + 12 * a4);
    if (result != v5 || result >= &v5[12 * a5])
      return (char *)memmove(result, v5, 12 * a5);
  }
  return result;
}

char *sub_1B1F2CC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 120 * a2);
    result = (char *)(a3 + 120 * a4);
    if (result != v5 || result >= &v5[120 * a5])
      return (char *)memmove(result, v5, 120 * a5);
  }
  return result;
}

char *sub_1B1F2CCA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 88 * a2);
    result = (char *)(a3 + 88 * a4);
    if (result != v5 || result >= &v5[88 * a5])
      return (char *)memmove(result, v5, 88 * a5);
  }
  return result;
}

unint64_t sub_1B1F2CD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + (a2 << 6);
    result = a3 + (a4 << 6);
    if (result < v5 || result >= v5 + (a5 << 6))
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2CDC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 20 * a2);
    result = (char *)(a3 + 20 * a4);
    if (result != v5 || result >= &v5[20 * a5])
      return (char *)memmove(result, v5, 20 * a5);
  }
  return result;
}

char *sub_1B1F2CE48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 44 * a2);
    result = (char *)(a3 + 44 * a4);
    if (result != v5 || result >= &v5[44 * a5])
      return (char *)memmove(result, v5, 44 * a5);
  }
  return result;
}

char *sub_1B1F2CED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;
  size_t v7;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + (a2 << 7));
    result = (char *)(a3 + (a4 << 7));
    v7 = a5 << 7;
    if (result != v5 || result >= &v5[v7])
      return (char *)memmove(result, v5, v7);
  }
  return result;
}

char *sub_1B1F2CF50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 176 * a2);
    result = (char *)(a3 + 176 * a4);
    if (result != v5 || result >= &v5[176 * a5])
      return (char *)memmove(result, v5, 176 * a5);
  }
  return result;
}

char *sub_1B1F2CFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 80 * a2);
    result = (char *)(a3 + 80 * a4);
    if (result != v5 || result >= &v5[80 * a5])
      return (char *)memmove(result, v5, 80 * a5);
  }
  return result;
}

char *sub_1B1F2D05C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 168 * a2);
    result = (char *)(a3 + 168 * a4);
    if (result != v5 || result >= &v5[168 * a5])
      return (char *)memmove(result, v5, 168 * a5);
  }
  return result;
}

char *sub_1B1F2D0E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 56 * a2);
    result = (char *)(a3 + 56 * a4);
    if (result != v5 || result >= &v5[56 * a5])
      return (char *)memmove(result, v5, 56 * a5);
  }
  return result;
}

char *sub_1B1F2D16C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 60 * a2);
    result = (char *)(a3 + 60 * a4);
    if (result != v5 || result >= &v5[60 * a5])
      return (char *)memmove(result, v5, 60 * a5);
  }
  return result;
}

unint64_t sub_1B1F2D1F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 48 * a2;
    result = a3 + 48 * a4;
    if (result < v5 || result >= v5 + 48 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2D294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 144 * a2);
    result = (char *)(a3 + 144 * a4);
    if (result != v5 || result >= &v5[144 * a5])
      return (char *)memmove(result, v5, 144 * a5);
  }
  return result;
}

char *sub_1B1F2D318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;
  size_t v7;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 16 * a2);
    result = (char *)(a3 + 16 * a4);
    v7 = 16 * a5;
    if (result != v5 || result >= &v5[v7])
      return (char *)memmove(result, v5, v7);
  }
  return result;
}

unint64_t sub_1B1F2D398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 32 * a2;
    result = a3 + 32 * a4;
    if (result < v5 || result >= v5 + 32 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2D438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 1616 * a2);
    result = (char *)(a3 + 1616 * a4);
    if (result != v5 || result >= &v5[1616 * a5])
      return (char *)memmove(result, v5, 1616 * a5);
  }
  return result;
}

char *sub_1B1F2D4BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 28 * a2);
    result = (char *)(a3 + 28 * a4);
    if (result != v5 || result >= &v5[28 * a5])
      return (char *)memmove(result, v5, 28 * a5);
  }
  return result;
}

char *sub_1B1F2D544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 2 * a2);
    result = (char *)(a3 + 2 * a4);
    if (result != v5 || result >= &v5[2 * a5])
      return (char *)memmove(result, v5, 2 * a5);
  }
  return result;
}

char *sub_1B1F2D5C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 12 * a2);
    result = (char *)(a3 + 12 * a4);
    if (result != v5 || result >= &v5[12 * a5])
      return (char *)memmove(result, v5, 12 * a5);
  }
  return result;
}

char *sub_1B1F2D648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 80 * a2);
    result = (char *)(a3 + 80 * a4);
    if (result != v5 || result >= &v5[80 * a5])
      return (char *)memmove(result, v5, 80 * a5);
  }
  return result;
}

char *sub_1B1F2D6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 112 * a2);
    result = (char *)(a3 + 112 * a4);
    if (result != v5 || result >= &v5[112 * a5])
      return (char *)memmove(result, v5, 112 * a5);
  }
  return result;
}

unint64_t sub_1B1F2D750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  unint64_t v15;

  v11 = a6(0);
  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v12 = *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72);
    v13 = a1 + v12 * a2;
    result = a3 + v12 * a4;
    v15 = v13 + v12 * a5;
    if (result < v13 || result >= v15)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v13)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2D84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;
  size_t v7;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 3 * a2);
    result = (char *)(a3 + 3 * a4);
    v7 = 3 * a5;
    if (result != v5 || result >= &v5[v7])
      return (char *)memmove(result, v5, v7);
  }
  return result;
}

char *sub_1B1F2D8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 72 * a2);
    result = (char *)(a3 + 72 * a4);
    if (result != v5 || result >= &v5[72 * a5])
      return (char *)memmove(result, v5, 72 * a5);
  }
  return result;
}

char *sub_1B1F2D958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;
  size_t v7;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 32 * a2);
    result = (char *)(a3 + 32 * a4);
    v7 = 32 * a5;
    if (result != v5 || result >= &v5[v7])
      return (char *)memmove(result, v5, v7);
  }
  return result;
}

unint64_t sub_1B1F2D9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 40 * a2;
    result = a3 + 40 * a4;
    if (result < v5 || result >= v5 + 40 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2DA74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, size_t __len)
{
  char *v5;
  char *result;

  if ((__len & 0x8000000000000000) != 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + a2);
    result = (char *)(a3 + a4);
    if ((char *)(a3 + a4) != v5 || result >= &v5[__len])
      return (char *)memmove(result, v5, __len);
  }
  return result;
}

char *sub_1B1F2DAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 40 * a2);
    result = (char *)(a3 + 40 * a4);
    if (result != v5 || result >= &v5[40 * a5])
      return (char *)memmove(result, v5, 40 * a5);
  }
  return result;
}

unint64_t sub_1B1F2DB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 32 * a2;
    result = a3 + 32 * a4;
    if (result < v5 || result >= v5 + 32 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

unint64_t sub_1B1F2DC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 56 * a2;
    result = a3 + 56 * a4;
    if (result < v5 || result >= v5 + 56 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

unint64_t sub_1B1F2DCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 16 * a2;
    result = a3 + 16 * a4;
    if (result < v5 || result >= v5 + 16 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2DD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 96 * a2);
    result = (char *)(a3 + 96 * a4);
    if (result != v5 || result >= &v5[96 * a5])
      return (char *)memmove(result, v5, 96 * a5);
  }
  return result;
}

char *sub_1B1F2DDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 48 * a2);
    result = (char *)(a3 + 48 * a4);
    if (result != v5 || result >= &v5[48 * a5])
      return (char *)memmove(result, v5, 48 * a5);
  }
  return result;
}

char *sub_1B1F2DE5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 28 * a2);
    result = (char *)(a3 + 28 * a4);
    if (result != v5 || result >= &v5[28 * a5])
      return (char *)memmove(result, v5, 28 * a5);
  }
  return result;
}

char *sub_1B1F2DEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;
  size_t v7;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + (a2 << 6));
    result = (char *)(a3 + (a4 << 6));
    v7 = a5 << 6;
    if (result != v5 || result >= &v5[v7])
      return (char *)memmove(result, v5, v7);
  }
  return result;
}

unint64_t sub_1B1F2DF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5;
  unint64_t result;

  if (a5 < 0)
  {
    result = sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = a1 + 56 * a2;
    result = a3 + 56 * a4;
    if (result < v5 || result >= v5 + 56 * a5)
    {
      return swift_arrayInitWithTakeFrontToBack();
    }
    else if (result != v5)
    {
      return swift_arrayInitWithTakeBackToFront();
    }
  }
  return result;
}

char *sub_1B1F2DFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;
  size_t v7;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 8 * a2);
    result = (char *)(a3 + 8 * a4);
    v7 = 8 * a5;
    if (result != v5 || result >= &v5[v7])
      return (char *)memmove(result, v5, v7);
  }
  return result;
}

char *sub_1B1F2E07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *result;

  if (a5 < 0)
  {
    result = (char *)sub_1B2229700();
    __break(1u);
  }
  else
  {
    v5 = (char *)(a1 + 104 * a2);
    result = (char *)(a3 + 104 * a4);
    if (result != v5 || result >= &v5[104 * a5])
      return (char *)memmove(result, v5, 104 * a5);
  }
  return result;
}

void sub_1B1F2E104(void *a1)
{
  uint64_t v1;

  sub_1B1F28208(a1, *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 16));
}

id *sub_1B1F2E138(id *a1)
{
  destroy for MaterialController(a1);
  return a1;
}

uint64_t sub_1B1F2E16C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for MaterialController(a2, a1);
  return a2;
}

id *sub_1B1F2E1A8(id *a1)
{
  destroy for ModelController(a1);
  return a1;
}

uint64_t sub_1B1F2E1DC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for ModelController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2E218(uint64_t a1)
{
  destroy for LightController();
  return a1;
}

uint64_t sub_1B1F2E24C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for LightController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2E288(uint64_t a1)
{
  destroy for PointCacheFromModel();
  return a1;
}

uint64_t sub_1B1F2E2BC(uint64_t a1, uint64_t a2)
{
  initializeWithTake for PointCacheFromModel(a2, a1);
  return a2;
}

uint64_t sub_1B1F2E2F8(uint64_t a1)
{
  destroy for DiagnosticsTrackerInstance();
  return a1;
}

uint64_t sub_1B1F2E32C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for DiagnosticsTrackerInstance(a2, a1);
  return a2;
}

uint64_t sub_1B1F2E368(uint64_t a1, uint64_t a2)
{
  initializeWithTake for NodeVisibilityController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2E3A4(uint64_t a1, uint64_t a2)
{
  initializeWithTake for NodeVisibilityController(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for TypeCoder_pre2035()
{
  return &type metadata for TypeCoder_pre2035;
}

ValueMetadata *type metadata accessor for TypeCoder()
{
  return &type metadata for TypeCoder;
}

ValueMetadata *type metadata accessor for ClassSettings()
{
  return &type metadata for ClassSettings;
}

ValueMetadata *type metadata accessor for MonoChunk()
{
  return &type metadata for MonoChunk;
}

ValueMetadata *type metadata accessor for UnstableOrdering()
{
  return &type metadata for UnstableOrdering;
}

ValueMetadata *type metadata accessor for AnonymousEntity()
{
  return &type metadata for AnonymousEntity;
}

ValueMetadata *type metadata accessor for PropagateDirtiness()
{
  return &type metadata for PropagateDirtiness;
}

ValueMetadata *type metadata accessor for NullEntityComponent()
{
  return &type metadata for NullEntityComponent;
}

unint64_t sub_1B1F2E46C()
{
  unint64_t result;

  result = qword_1EEF60EE8;
  if (!qword_1EEF60EE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1644, &type metadata for AnonymousEntity);
    atomic_store(result, (unint64_t *)&qword_1EEF60EE8);
  }
  return result;
}

unint64_t sub_1B1F2E4B4()
{
  unint64_t result;

  result = qword_1EEF60EF0;
  if (!qword_1EEF60EF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A16BC, &type metadata for UnstableOrdering);
    atomic_store(result, (unint64_t *)&qword_1EEF60EF0);
  }
  return result;
}

unint64_t sub_1B1F2E4FC()
{
  unint64_t result;

  result = qword_1EEF60EF8;
  if (!qword_1EEF60EF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1734, &type metadata for MonoChunk);
    atomic_store(result, (unint64_t *)&qword_1EEF60EF8);
  }
  return result;
}

unint64_t sub_1B1F2E544()
{
  unint64_t result;

  result = qword_1EEF60F00;
  if (!qword_1EEF60F00)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A17AC, &type metadata for ClassSettings);
    atomic_store(result, (unint64_t *)&qword_1EEF60F00);
  }
  return result;
}

uint64_t sub_1B1F2E588(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];

  v3 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
    goto LABEL_9;
  v4 = a1[3];
  v5 = a1[4];
  sub_1B19FA070(a1, v4);
  if (!sub_1B2067B64(2034, v4, v5))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B1B6AE04();
    sub_1B1FF5A30();
    v3 = v12;
    goto LABEL_12;
  }
  sub_1B19FA070(v13, v13[3]);
  v6 = sub_1B2229D30();
  if (off_1ED4B84E0)
  {
    v8 = v6;
    v9 = v7;
    swift_retain();
    v3 = sub_1B1A0608C(v8, v9, 0, 1);
    swift_release();
    if (v3)
    {
      swift_bridgeObjectRelease();
LABEL_12:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      return v3;
    }
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v11 = v8;
    *(_QWORD *)(v11 + 8) = v9;
    *(_BYTE *)(v11 + 16) = 0;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v13);
LABEL_9:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v3;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F2E78C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];
  uint64_t v27;
  int v28;

  v3 = (uint64_t)sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (v1)
    goto LABEL_12;
  v4 = a1[3];
  v5 = a1[4];
  sub_1B19FA070(a1, v4);
  LOBYTE(v4) = sub_1B2067B64(1107, v4, v5);
  sub_1B19FA198((uint64_t)a1, (uint64_t)&v22);
  if ((v4 & 1) != 0)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v22);
  }
  else
  {
    v6 = v24;
    v7 = v25;
    sub_1B19FA070(&v22, v24);
    LOBYTE(v6) = *(_BYTE *)(sub_1B20680A8(v6, v7) + 85);
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v22);
    if ((v6 & 1) != 0)
    {
      sub_1B19FA070(v26, v27);
      v8 = sub_1B2229D78();
      v9 = a1[3];
      v10 = a1[4];
      sub_1B19FA070(a1, v9);
      v11 = sub_1B20680A8(v9, v10);
      if (v8 < 0 || (v12 = *(_QWORD *)(v11 + 128), *(_QWORD *)(v12 + 16) <= v8))
      {
        swift_release();
        v3 = 1;
        goto LABEL_20;
      }
      v3 = *(_QWORD *)(v12 + 8 * v8 + 32);
      swift_release();
      if (v3)
      {
LABEL_20:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
        return v3;
      }
      v22 = 0;
      v23 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v22 = 0xD000000000000015;
      v23 = 0x80000001B2344610;
      v28 = v8;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      v3 = v22;
      v13 = v23;
      sub_1B1B6AE48();
      swift_allocError();
      *(_QWORD *)v14 = v3;
      goto LABEL_18;
    }
  }
  sub_1B19FA070(v26, v27);
  v15 = sub_1B2229D30();
  if (off_1ED4B84E0)
  {
    v18 = v15;
    v13 = v16;
    v19 = a1[3];
    v20 = a1[4];
    sub_1B19FA070(a1, v19);
    swift_retain();
    v21 = sub_1B2067BF4(v19, v20);
    v3 = sub_1B1A0608C(v18, v13, v21, 0);
    swift_release();
    if (v3)
    {
      swift_bridgeObjectRelease();
      goto LABEL_20;
    }
    sub_1B1B6AE48();
    swift_allocError();
    *(_QWORD *)v14 = v18;
LABEL_18:
    *(_QWORD *)(v14 + 8) = v13;
    *(_BYTE *)(v14 + 16) = 0;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
LABEL_12:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v3;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F2EAE4(uint64_t a1)
{
  destroy for LightController();
  return a1;
}

uint64_t sub_1B1F2EB18(uint64_t a1, uint64_t a2)
{
  initializeWithTake for LightController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EB54(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EB88(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EBC4(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EBF8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EC34(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EC68(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2ECA4(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2ECD8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2ED14(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2ED48(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2ED84(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EDB8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EDF4(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EE28(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EE64(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EE98(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EED4(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EF08(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EF44(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2EF78(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2EFB4(uint64_t a1)
{
  destroy for CameraEffectSSAOController();
  return a1;
}

uint64_t sub_1B1F2EFE8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraEffectSSAOController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F024(uint64_t a1)
{
  destroy for LightController();
  return a1;
}

uint64_t sub_1B1F2F058(uint64_t a1, uint64_t a2)
{
  initializeWithTake for LightController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F094(uint64_t a1)
{
  destroy for CameraController();
  return a1;
}

uint64_t sub_1B1F2F0C8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for CameraController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F104(uint64_t a1)
{
  destroy for LightController();
  return a1;
}

uint64_t sub_1B1F2F138(uint64_t a1, uint64_t a2)
{
  initializeWithTake for LightController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F174(uint64_t a1)
{
  destroy for VFXBridgeableReference();
  return a1;
}

uint64_t sub_1B1F2F1A8(uint64_t a1, uint64_t a2)
{
  initializeWithTake for VFXBridgeableReference(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F1E4(uint64_t a1)
{
  destroy for VFXBridgeableReference();
  return a1;
}

uint64_t sub_1B1F2F218(uint64_t a1, uint64_t a2)
{
  initializeWithTake for VFXBridgeableReference(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F254(uint64_t a1)
{
  destroy for VFXBridgeableReference();
  return a1;
}

uint64_t sub_1B1F2F288(uint64_t a1, uint64_t a2)
{
  initializeWithTake for VFXBridgeableReference(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F2C4(uint64_t a1)
{
  destroy for WorldFogController();
  return a1;
}

uint64_t sub_1B1F2F2F8(__n128 *a1, uint64_t a2)
{
  initializeWithTake for WorldFogController(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F334(uint64_t a1, uint64_t a2)
{
  initializeWithTake for TriggerListComponent(a2, a1);
  return a2;
}

uint64_t sub_1B1F2F370(uint64_t a1)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v17 = *(_QWORD *)(a1 + 1336);
  v18 = *(_QWORD *)(a1 + 1328);
  v15 = *(_QWORD *)(a1 + 1352);
  v16 = *(_QWORD *)(a1 + 1344);
  v13 = *(_QWORD *)(a1 + 1368);
  v14 = *(_QWORD *)(a1 + 1360);
  v11 = *(_QWORD *)(a1 + 1384);
  v12 = *(_QWORD *)(a1 + 1376);
  v3 = *(_OWORD *)(a1 + 1408);
  v4 = *(_OWORD *)(a1 + 1392);
  v9 = *(_QWORD *)(a1 + 1440);
  v10 = *(_QWORD *)(a1 + 1432);
  v7 = *(_QWORD *)(a1 + 1456);
  v8 = *(_QWORD *)(a1 + 1448);
  v25 = *(_QWORD *)(a1 + 1496);
  v26 = *(_QWORD *)(a1 + 1488);
  v23 = *(_QWORD *)(a1 + 1512);
  v24 = *(_QWORD *)(a1 + 1504);
  v21 = *(_QWORD *)(a1 + 1528);
  v22 = *(_QWORD *)(a1 + 1520);
  v5 = *(_OWORD *)(a1 + 1568);
  v6 = *(_OWORD *)(a1 + 1552);
  v19 = *(_QWORD *)(a1 + 1536);
  v20 = *(_QWORD *)(a1 + 1544);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B1F2F570(v18, v17, v16, v15, v14, v13, v12, v11, v4, *((uint64_t *)&v4 + 1), v3);
  sub_1B1F2F534(v10, v9, v8, v7);
  sub_1B1F2F570(v26, v25, v24, v23, v22, v21, v19, v20, v6, *((uint64_t *)&v6 + 1), v5);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1F2F534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1F2F570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t result;

  result = a11;
  if (a11)
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

unint64_t sub_1B1F2F5B4()
{
  unint64_t result;

  result = qword_1EEF60F10;
  if (!qword_1EEF60F10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A19E8, &type metadata for NullEntityComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60F10);
  }
  return result;
}

ValueMetadata *type metadata accessor for NullEntityComponent.CodingKeys()
{
  return &type metadata for NullEntityComponent.CodingKeys;
}

unint64_t sub_1B1F2F60C()
{
  unint64_t result;

  result = qword_1EEF60F18;
  if (!qword_1EEF60F18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1998, &type metadata for NullEntityComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60F18);
  }
  return result;
}

unint64_t sub_1B1F2F654()
{
  unint64_t result;

  result = qword_1EEF60F20;
  if (!qword_1EEF60F20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A19C0, &type metadata for NullEntityComponent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60F20);
  }
  return result;
}

void sub_1B1F2F698()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF5E8F8)
  {
    sub_1B1A025A0(255, (unint64_t *)&qword_1ED4BA190);
    v0 = sub_1B2229124();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF5E8F8);
  }
}

uint64_t sub_1B1F2F738(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 0x6C6174656DLL;
    else
      v2 = 0x7466697773;
    v3 = 0xE500000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 0x6C6174656DLL;
      else
        v5 = 0x7466697773;
      v6 = 0xE500000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE100000000000000;
    v2 = 99;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE100000000000000;
  if (v2 != 99)
  {
LABEL_15:
    v7 = sub_1B2229D24();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F2F828(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F2F868(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F2F8C0 + 4 * byte_1B22A1A3C[a2]))(0x534F63616DLL);
}

uint64_t sub_1B1F2F8C0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x534F63616DLL && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F2F95C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F2F9A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F2F9FC + 4 * byte_1B22A1A44[a2]))(0x34366D7261);
}

uint64_t sub_1B1F2F9FC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x34366D7261 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F2FA98(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E69746C697542;
    else
      v3 = 1919251285;
    if (v2 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E69746C697542;
      else
        v6 = 1919251285;
      if (v5 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6C61636F4CLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6C61636F4CLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F2FB98(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F2FBD8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F2FC80 + 4 * byte_1B22A1A4F[a2]))(0x6E77617053);
}

uint64_t sub_1B1F2FC80(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E77617053 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F2FD80(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F2FDD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F2FE94 + 4 * byte_1B22A1A5E[a2]))(0x797469636F6C6576);
}

uint64_t sub_1B1F2FE94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x797469636F6C6576 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1B1F2FFBC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x746E656D67617266;
    else
      v3 = 0x657475706D6F63;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x746E656D67617266;
      else
        v6 = 0x657475706D6F63;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x786574726576;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x786574726576)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F300CC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x676E696E726177;
    else
      v3 = 1702129518;
    if (v2 == 1)
      v4 = 0xE700000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x676E696E726177;
      else
        v6 = 1702129518;
      if (v5 == 1)
        v7 = 0xE700000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x726F727265;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x726F727265)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void static Target.== infix(_:_:)(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F3021C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F30270 + 4 * byte_1B22A1A6A[a1]))(0x534F63616DLL);
}

void sub_1B1F30270(uint64_t a1)
{
  char v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x534F63616DLL && v2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    v3 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v3 & 1) == 0)
      return;
  }
  sub_1B1F2F95C(v1);
}

void sub_1B1F30334(char *a1)
{
  sub_1B1F2F95C(*a1);
}

uint64_t sub_1B1F30340@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1F30374()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1F303A0 + 4 * byte_1B22A1A6E[*v0]))();
}

void sub_1B1F303A0(_QWORD *a1@<X8>)
{
  *a1 = 0x34366D7261;
  a1[1] = 0xE500000000000000;
}

void sub_1B1F303B8(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 0x6534366D7261;
  a1[1] = v1;
}

void sub_1B1F303CC(_QWORD *a1@<X8>)
{
  *a1 = 0x32335F34366D7261;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B1F303E8()
{
  sub_1B1F311D4();
  return sub_1B2228A4C();
}

uint64_t sub_1B1F30444()
{
  sub_1B1F311D4();
  return sub_1B22289D4();
}

void sub_1B1F30490()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F304D8()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1F3053C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F30574()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1F305C4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F30608()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1F3066C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63BD430;
}

void sub_1B1F3067C(char *a1)
{
  sub_1B1F2F828(*a1);
}

uint64_t sub_1B1F30688@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1BB2C74();
  *a1 = result;
  return result;
}

uint64_t sub_1B1F306BC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1B1F306E4 + 4 * byte_1B22A1A7E[*v0]))();
}

void sub_1B1F306E4(_QWORD *a1@<X8>)
{
  *a1 = 0x534F63616DLL;
  a1[1] = 0xE500000000000000;
}

void sub_1B1F306FC(_QWORD *a1@<X8>)
{
  *a1 = 0x534F6863746177;
  a1[1] = 0xE700000000000000;
}

void sub_1B1F30718(_QWORD *a1@<X8>)
{
  *a1 = 1397716596;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1B1F3072C()
{
  sub_1B1F31218();
  return sub_1B2228A4C();
}

uint64_t sub_1B1F30788()
{
  sub_1B1F31218();
  return sub_1B22289D4();
}

void sub_1B1F307D4()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F30818()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1F3087C()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F308B0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1F30900()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F30940()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1F309A4(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63BD578;
}

void Target.hash(into:)()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F309F4()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B2228824();
  v1 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1B1F30A68 + 4 * byte_1B22A1A92[v0]))(v1, 0x34365F363878);
}

uint64_t sub_1B1F30A68()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void Target.hashValue.getter()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F30B0C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B2228824();
  v1 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1B1F30B80 + 4 * byte_1B22A1A9A[v0]))(v1, 0x34365F363878);
}

uint64_t sub_1B1F30B80()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

void sub_1B1F30BEC()
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F30C2C()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B2228824();
  v1 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1B1F30CA0 + 4 * byte_1B22A1AA2[v0]))(v1, 0x34365F363878);
}

uint64_t sub_1B1F30CA0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

void sub_1B1F30CF8()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  sub_1B222A06C();
  __asm { BR              X9 }
}

uint64_t sub_1B1F30D40()
{
  uint64_t v0;
  uint64_t v1;

  sub_1B2228824();
  v1 = swift_bridgeObjectRelease();
  return ((uint64_t (*)(uint64_t, uint64_t))((char *)sub_1B1F30DB4 + 4 * byte_1B22A1AAA[v0]))(v1, 0x34365F363878);
}

uint64_t sub_1B1F30DB4()
{
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

unint64_t sub_1B1F30E20()
{
  unint64_t result;

  result = qword_1EEF60F28;
  if (!qword_1EEF60F28)
  {
    result = MEMORY[0x1B5E23E74](&protocol conformance descriptor for Target, &type metadata for Target);
    atomic_store(result, (unint64_t *)&qword_1EEF60F28);
  }
  return result;
}

void sub_1B1F30E64(char *a1)
{
  char v1;
  char v2;

  v1 = a1[1];
  sub_1B1F2F828(*a1);
  if ((v2 & 1) != 0)
    sub_1B1F2F95C(v1);
}

uint64_t getEnumTagSinglePayload for Target(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 65283 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65283 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65283;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65283;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65283;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Target(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65283 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65283 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1F30F8C + 4 * byte_1B22A1AB3[v4]))();
  *a1 = a2 - 253;
  return ((uint64_t (*)(void))((char *)sub_1B1F30FC0 + 4 * byte_1B22A1AAE[v4]))();
}

uint64_t sub_1B1F30FC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B1F30FC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1B1F30FD0);
  return result;
}

uint64_t sub_1B1F30FDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1B1F30FE4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1F30FE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1B1F30FF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Target()
{
  return &type metadata for Target;
}

ValueMetadata *type metadata accessor for Target.Architecture()
{
  return &type metadata for Target.Architecture;
}

uint64_t _s3VFX6TargetV8PlatformOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1F3106C + 4 * byte_1B22A1ABD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1F310A0 + 4 * byte_1B22A1AB8[v4]))();
}

uint64_t sub_1B1F310A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F310A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F310B0);
  return result;
}

uint64_t sub_1B1F310BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F310C4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1F310C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F310D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Target.Platform()
{
  return &type metadata for Target.Platform;
}

uint64_t sub_1B1F310EC()
{
  return sub_1B1D5E388(&qword_1EEF60F30, &qword_1EEF60F38);
}

unint64_t sub_1B1F3111C()
{
  unint64_t result;

  result = qword_1EEF60F40;
  if (!qword_1EEF60F40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1C50, &type metadata for Target.Platform);
    atomic_store(result, (unint64_t *)&qword_1EEF60F40);
  }
  return result;
}

uint64_t sub_1B1F31160()
{
  return sub_1B1D5E388(&qword_1EEF60F48, &qword_1EEF60F50);
}

unint64_t sub_1B1F31190()
{
  unint64_t result;

  result = qword_1EEF60F58;
  if (!qword_1EEF60F58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1D78, &type metadata for Target.Architecture);
    atomic_store(result, (unint64_t *)&qword_1EEF60F58);
  }
  return result;
}

unint64_t sub_1B1F311D4()
{
  unint64_t result;

  result = qword_1EEF60F60;
  if (!qword_1EEF60F60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1D40, &type metadata for Target.Architecture);
    atomic_store(result, (unint64_t *)&qword_1EEF60F60);
  }
  return result;
}

unint64_t sub_1B1F31218()
{
  unint64_t result;

  result = qword_1EEF60F68;
  if (!qword_1EEF60F68)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1C18, &type metadata for Target.Platform);
    atomic_store(result, (unint64_t *)&qword_1EEF60F68);
  }
  return result;
}

uint64_t type metadata accessor for BloomPassSystem()
{
  return objc_opt_self();
}

const char *sub_1B1F31280()
{
  return "BloomPass";
}

id sub_1B1F31294(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[2];

  v17[1] = *MEMORY[0x1E0C80C00];
  swift_getObjectType();
  objc_msgSend(a1, sel_setRenderPipelineState_, a2);
  if (a4 - 2 == a3)
    v14 = a5;
  else
    v14 = a6;
  objc_msgSend(a1, sel_setFragmentTexture_atIndex_, v14, 0);
  objc_msgSend(a1, sel_setFragmentTexture_atIndex_, a5, 1);
  *(float *)&v15 = (float)(a3 + 1);
  *((float *)&v15 + 1) = (float)a3;
  v17[0] = v15;
  objc_msgSend(a1, sel_setFragmentBytes_length_atIndex_, v17, 8, 0);
  objc_msgSend(a1, sel_setFragmentBytes_length_atIndex_, a7, 48, 1);
  return sub_1B20BFD20(1);
}

void sub_1B1F313B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ObjectType;
  double (*v17)(uint64_t, uint64_t);
  double v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t);
  double v25;
  double v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  void *v36;
  unsigned int v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  void *v60;
  uint64_t i;
  void *v62;
  id v63;
  void *v64;
  id v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  id v72;
  uint64_t v73;
  void *v74;
  void *v75;
  int v76;
  void *v77;
  uint64_t v78;
  __int128 v79;
  int v80;
  int v81;
  int v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[3];
  char v94[88];
  char v95[88];
  float v96[22];
  id v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  uint64_t v102;
  uint64_t v103;
  char v104[4];
  int v105;
  char v106;
  char v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  __int16 v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  __int16 v120;
  __int16 v121;
  int v122;
  char v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  int v131;
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  __int128 v135;
  unint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  unint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  int v158[4];
  __int128 v159;
  int v160;
  int v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  _BYTE v165[24];
  uint64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  _BYTE v174[160];
  uint64_t v175[20];
  _BYTE v176[160];
  uint64_t v177[20];
  _QWORD v178[10];
  _BYTE v179[80];
  uint64_t v180[101];
  uint64_t v181[101];
  uint64_t v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  uint64_t v187;
  int v188;
  _OWORD v189[11];
  _BYTE v190[48];
  __int16 v191;
  _QWORD v192[6];
  _OWORD v193[11];
  _OWORD v194[11];
  uint64_t v195;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v195 = *MEMORY[0x1E0C80C00];
  v4 = swift_retain();
  v5 = sub_1B1F215A8(v4);
  v7 = v6;
  swift_release();
  if ((v7 & 1) == 0)
  {
    sub_1B1D1627C(v5, (uint64_t)&v182);
    v8 = BYTE8(v186);
    if (BYTE8(v186) != 2)
    {
      v9 = v182;
      if (*(float *)&v182 > 0.0)
      {
        v10 = *(_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
        if (v10)
        {
          v11 = v183;
          v12 = v186;
          v13 = DWORD1(v186);
          v14 = v184;
          v79 = v185;
          swift_retain();
          RGTextureDescriptor.init()((uint64_t)v104);
          sub_1B1BA802C(v10 + 624, (uint64_t)v176);
          sub_1B1BA802C((uint64_t)v176, (uint64_t)v177);
          if (sub_1B1B3C438(v177) == 1)
            goto LABEL_63;
          v78 = v11;
          v80 = v13;
          v81 = v12;
          v82 = v9;
          v15 = v177[1];
          ObjectType = swift_getObjectType();
          v17 = *(double (**)(uint64_t, uint64_t))(v15 + 72);
          swift_unknownObjectRetain();
          v18 = v17(ObjectType, v15);
          swift_unknownObjectRelease();
          sub_1B1BA802C(v10 + 624, (uint64_t)v174);
          sub_1B1BA802C((uint64_t)v174, (uint64_t)v175);
          if (sub_1B1B3C438(v175) == 1)
            goto LABEL_63;
          v19 = (uint64_t)v18;
          v20 = v175[1];
          v89 = v109;
          v91 = v110;
          v86 = v108;
          v84 = v107;
          v21 = v106;
          v22 = v105;
          v23 = swift_getObjectType();
          v24 = *(void (**)(uint64_t, uint64_t))(v20 + 72);
          swift_unknownObjectRetain();
          v24(v23, v20);
          v26 = v25;
          swift_unknownObjectRelease();
          v27 = *(_QWORD *)(v10 + 408);
          v120 = v19;
          v121 = (uint64_t)v26;
          v122 = v22;
          v123 = 1;
          v124 = v21;
          v125 = v84;
          v126 = v27;
          v127 = v86;
          v128 = xmmword_1B2245BA0;
          v129 = v89;
          v130 = v91;
          v131 = v111;
          if (sub_1B20F1554() <= 1)
            goto LABEL_29;
          v28 = *(_BYTE *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_isInPrepare);
          v29 = *(_QWORD *)(v10 + 272);
          sub_1B206309C(9u, (uint64_t)v178);
          v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 16) + 264) + 40);
          v31 = *(_QWORD *)(v30 + 16);
          swift_retain();
          swift_retain();
          if (v31)
          {
            v32 = v178[1];
            v33 = v178[0];
            swift_bridgeObjectRetain();
            v34 = sub_1B1DC3B00(v33, v32);
            if ((v35 & 1) != 0)
            {
              v36 = *(void **)(*(_QWORD *)(v30 + 56) + 8 * v34);
              swift_unknownObjectRetain();
              sub_1B1BA80C0((uint64_t)v178);
              swift_release();
              sub_1B1BA80C0((uint64_t)v178);
              swift_release();
              v37 = 0;
LABEL_13:
              sub_1B206309C(0xAu, (uint64_t)v179);
              swift_retain();
              v38 = (void *)sub_1B206318C((uint64_t)v179, 1, 0, 2);
              sub_1B1BA80C0((uint64_t)v179);
              swift_release();
              if (v38)
              {
                v77 = v36;
                v87 = v8 & 1;
                swift_getObjectType();
                v39 = sub_1B1F9CD70() - 3;
                if (v78 < v39)
                  v39 = v78;
                if (v39 <= 2)
                  v39 = 2;
                v90 = v39;
                v40 = *(_QWORD *)(v10 + 264);
                swift_retain();
                RGTextureDescriptorFromMTLTexture(v38, (uint64_t)&v182);
                v112 = v182;
                v113 = v183;
                v114 = BYTE2(v183);
                v115 = v184;
                v116 = v185;
                v117 = v186;
                v118 = v187;
                v119 = v188;
                if (*(_QWORD *)(*(_QWORD *)(v40 + 40) + 16))
                  sub_1B1DC3B00(0x4D545F4D4F4F4C42, 0xE900000000000050);
                v41 = (void *)sub_1B2062B30(0x4D545F4D4F4F4C42, 0xE900000000000050, &v112);
                swift_release();
                v92 = (uint64_t)v41;
                v98 = 0u;
                v99 = 0u;
                v100 = 0u;
                v101 = 0u;
                v97 = objc_msgSend(v41, sel_pixelFormat);
                v102 = 0;
                v103 = 1;
                v159 = v79;
                v158[0] = v82;
                v160 = v81;
                v161 = v80;
                *(_QWORD *)&v162 = 0xD000000000000010;
                *((_QWORD *)&v162 + 1) = 0x80000001B23338F0;
                v42 = MEMORY[0x1E0DEE9D8];
                v164 = 0;
                v163 = 0;
                *(_OWORD *)&v165[8] = xmmword_1B22A1DA0;
                *(_QWORD *)v165 = MEMORY[0x1E0DEE9D8];
                v166 = 0;
                *(_QWORD *)&v167 = 0;
                *((_QWORD *)&v167 + 1) = MEMORY[0x1E0DEE9D8];
                v172 = 0u;
                v173 = 0u;
                v170 = 0u;
                v171 = 0u;
                v168 = 0u;
                v169 = 0u;
                v194[2] = *(_OWORD *)v165;
                v194[1] = 0u;
                v194[0] = v162;
                memset(&v194[5], 0, 96);
                v194[4] = v167;
                v194[3] = 0xEF646C6F68736572;
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                v43 = swift_allocObject();
                *(_OWORD *)(v43 + 16) = xmmword_1B226D240;
                *(_OWORD *)(v43 + 32) = xmmword_1B22A1DB0;
                *(_BYTE *)(v43 + 48) = 0;
                *(_QWORD *)(v43 + 64) = v37;
                *(_OWORD *)(v43 + 72) = 0u;
                *(_OWORD *)(v43 + 88) = 0u;
                *(_OWORD *)(v43 + 104) = 0u;
                *(_QWORD *)(v43 + 120) = 0;
                *(_BYTE *)(v43 + 128) = 13;
                memset(v190, 0, sizeof(v190));
                v191 = 256;
                v192[1] = 0;
                v192[0] = 0;
                v192[2] = 2;
                memset(&v192[3], 0, 24);
                sub_1B1FD1C40((uint64_t *)v194, &v97, 0, 0, v43, (uint64_t)v190, 3, (uint64_t)v192, (uint64_t)v180, 1, 1);
                sub_1B1BDB228((uint64_t *)&v162);
                swift_retain();
                v44 = sub_1B1B32B58((uint64_t)v180, 0);
                v46 = v45;
                v83 = 0;
                if (v44 >= 3)
                {
                  v44 = swift_unknownObjectRetain();
                  v83 = v44;
                }
                sub_1B1B427DC(v44, v46);
                swift_release();
                *(_QWORD *)&v145 = 0xD000000000000010;
                *((_QWORD *)&v145 + 1) = 0x80000001B23338F0;
                v147 = 0;
                v146 = 0;
                *(_QWORD *)&v148 = v42;
                *((_QWORD *)&v148 + 1) = 0xD000000000000011;
                v149 = 0x80000001B2344690;
                v150 = 0;
                *(_QWORD *)&v151 = 0;
                *((_QWORD *)&v151 + 1) = v42;
                v152 = 0u;
                v153 = 0u;
                v154 = 0u;
                v155 = 0u;
                v156 = 0u;
                v157 = 0u;
                v193[2] = v148;
                v193[1] = 0u;
                v193[0] = v145;
                memset(&v193[5], 0, 96);
                v193[4] = v151;
                v193[3] = 0x80000001B2344690;
                v47 = swift_allocObject();
                *(_OWORD *)(v47 + 16) = xmmword_1B226D240;
                *(_OWORD *)(v47 + 32) = xmmword_1B22A1DC0;
                *(_BYTE *)(v47 + 48) = 0;
                *(_QWORD *)(v47 + 64) = v87;
                *(_OWORD *)(v47 + 72) = 0u;
                *(_OWORD *)(v47 + 88) = 0u;
                *(_OWORD *)(v47 + 104) = 0u;
                *(_QWORD *)(v47 + 120) = 0;
                *(_BYTE *)(v47 + 128) = 13;
                sub_1B1FD1C40((uint64_t *)v193, &v97, 0, 0, v47, (uint64_t)v190, 3, (uint64_t)v192, (uint64_t)v181, 1, 1);
                sub_1B1BDB228((uint64_t *)&v145);
                swift_retain();
                v48 = sub_1B1B32B58((uint64_t)v181, 0);
                v50 = v49;
                v85 = 0;
                if (v48 >= 3)
                {
                  v48 = swift_unknownObjectRetain();
                  v85 = v48;
                }
                sub_1B1B427DC(v48, v50);
                swift_release();
                *(_QWORD *)&v132 = 0xD000000000000010;
                *((_QWORD *)&v132 + 1) = 0x80000001B23338F0;
                *(_QWORD *)&v135 = v42;
                *((_QWORD *)&v135 + 1) = 0xD00000000000001DLL;
                v134 = 0;
                v133 = 0;
                v136 = 0x80000001B23446B0;
                v137 = 0;
                *(_QWORD *)&v138 = 0;
                *((_QWORD *)&v138 + 1) = v42;
                v139 = 0u;
                v140 = 0u;
                v141 = 0u;
                v142 = 0u;
                v143 = 0u;
                v144 = 0u;
                v189[2] = v135;
                v189[1] = 0u;
                v189[0] = v132;
                memset(&v189[5], 0, 96);
                v189[4] = v138;
                v189[3] = 0x80000001B23446B0;
                v51 = swift_allocObject();
                *(_OWORD *)(v51 + 16) = xmmword_1B226CD10;
                *(_OWORD *)(v51 + 32) = xmmword_1B22A1DC0;
                *(_BYTE *)(v51 + 48) = 0;
                *(_QWORD *)(v51 + 64) = v87;
                *(_OWORD *)(v51 + 72) = 0u;
                *(_OWORD *)(v51 + 88) = 0u;
                *(_OWORD *)(v51 + 104) = 0u;
                *(_QWORD *)(v51 + 120) = 0;
                *(_BYTE *)(v51 + 128) = 13;
                *(_OWORD *)(v51 + 144) = xmmword_1B22A1DD0;
                *(_BYTE *)(v51 + 160) = 0;
                *(_QWORD *)(v51 + 176) = 1;
                *(_OWORD *)(v51 + 184) = 0u;
                *(_OWORD *)(v51 + 200) = 0u;
                *(_OWORD *)(v51 + 216) = 0u;
                *(_QWORD *)(v51 + 232) = 0;
                *(_BYTE *)(v51 + 240) = 13;
                sub_1B1FD1C40((uint64_t *)v189, &v97, 0, 0, v51, (uint64_t)v190, 3, (uint64_t)v192, (uint64_t)&v182, 1, 1);
                sub_1B1BDB228((uint64_t *)&v132);
                swift_retain();
                v52 = sub_1B1B32B58((uint64_t)&v182, 0);
                v54 = v53;
                v88 = 0;
                if (v52 >= 3)
                {
                  v52 = swift_unknownObjectRetain();
                  v88 = v52;
                }
                sub_1B1B427DC(v52, v54);
                swift_release();
                if ((v28 & 1) != 0)
                {
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
LABEL_56:
                  sub_1B1B41134(&v182);
                  sub_1B1B41134(v181);
                  sub_1B1B41134(v180);
                  swift_retain();
                  v75 = (void *)sub_1B1B83834(0x4D545F4D4F4F4C42, 0xE900000000000050);
                  if (v75)
                  {
                    sub_1B215FACC(v75);
                    swift_unknownObjectRelease();
                    swift_release();
                    swift_release();
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    swift_unknownObjectRelease();
                    return;
                  }
                  if (qword_1ED4BF430 != -1)
                    swift_once();
                  v93[0] = 0;
                  v93[1] = 0xE000000000000000;
                  swift_retain();
                  sub_1B2229430();
                  swift_bridgeObjectRelease();
                  v76 = sub_1B2228E90();
                  if (qword_1ED4BF658 != -1)
                    swift_once();
                  v93[0] = 0;
                  swift_retain();
                  sub_1B1F1AD70(v76, v93, 0xD00000000000001ELL, 0x80000001B2344750);
                  swift_unknownObjectRelease();
                  swift_release();
                  swift_release();
                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();
                  swift_release();
                  goto LABEL_29;
                }
                if (v83 && v85 && v88)
                {
                  v55 = *(void **)(v10 + 368);
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  swift_unknownObjectRetain();
                  if (v55)
                  {
                    swift_unknownObjectRetain();
                    v56 = (void *)sub_1B2228728();
                    objc_msgSend(v55, sel_pushDebugGroup_, v56);

                    swift_unknownObjectRelease();
                  }
                  v57 = swift_unknownObjectRetain();
                  v58 = sub_1B1BA147C(v57, 2, 0, 2, 0, 0);
                  swift_unknownObjectRelease();
                  sub_1B1BA77BC(0x6C6F687365726854, 0xE900000000000064, v58);
                  v59 = sub_1B1BA7B7C(0);
                  if (v59)
                  {
                    v60 = (void *)v59;
                    swift_unknownObjectRetain();
                    sub_1B1F9AEC4((uint64_t)v94);
                    swift_getObjectType();
                    objc_msgSend(v60, sel_setRenderPipelineState_, v83);
                    objc_msgSend(v60, sel_setFragmentTexture_atIndex_, v77, 0);
                    *(_QWORD *)v96 = v14;
                    objc_msgSend(v60, sel_setFragmentBytes_length_atIndex_, v96, 8, 0);
                    sub_1B20BFD20(1);
                    sub_1B1BA2FBC();

                    swift_unknownObjectRelease();
                  }
                  else
                  {

                  }
                  for (i = 1; i != v90; ++i)
                  {
                    swift_unknownObjectRetain_n();
                    v63 = (id)sub_1B1E599C0();
                    if (!v63)
                      v63 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B50]), sel_init);
                    v64 = v63;
                    sub_1B1F9B468();
                    v65 = objc_msgSend(v64, sel_colorAttachments);
                    v66 = objc_msgSend(v65, sel_objectAtIndexedSubscript_, 0);

                    objc_msgSend(v66, sel_setTexture_, v92);
                    objc_msgSend(v66, sel_setLoadAction_, 2);
                    objc_msgSend(v66, sel_setStoreAction_, 1);
                    objc_msgSend(v66, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);
                    objc_msgSend(v66, sel_setLevel_, i);
                    swift_unknownObjectRelease_n();

                    sub_1B1BA77BC(0x706D61536E776F44, 0xEE0072756C42656CLL, v64);
                    v67 = sub_1B1BA7B7C(0);
                    if (v67)
                    {
                      v62 = (void *)v67;
                      swift_unknownObjectRetain();
                      sub_1B1F9AEC4((uint64_t)v95);
                      swift_getObjectType();
                      objc_msgSend(v62, sel_setRenderPipelineState_, v85);
                      objc_msgSend(v62, sel_setFragmentTexture_atIndex_, v92, 0);
                      v96[0] = (float)(i - 1);
                      objc_msgSend(v62, sel_setFragmentBytes_length_atIndex_, v96, 4, 0);
                      sub_1B20BFD20(1);
                      sub_1B1BA2FBC();

                      swift_unknownObjectRelease();
                    }
                    else
                    {

                    }
                  }
                  v68 = v90 - 2;
                  do
                  {
                    swift_unknownObjectRetain_n();
                    v69 = (id)sub_1B1E599C0();
                    if (!v69)
                      v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC6B50]), sel_init);
                    v70 = v69;
                    sub_1B1F9B468();
                    v71 = objc_msgSend(v70, sel_colorAttachments);
                    v72 = objc_msgSend(v71, sel_objectAtIndexedSubscript_, 0);

                    objc_msgSend(v72, sel_setTexture_, v38);
                    objc_msgSend(v72, sel_setLoadAction_, 2);
                    objc_msgSend(v72, sel_setStoreAction_, 1);
                    objc_msgSend(v72, sel_setClearColor_, 0.0, 0.0, 0.0, 0.0);
                    objc_msgSend(v72, sel_setLevel_, v68);
                    swift_unknownObjectRelease_n();

                    sub_1B1BA77BC(0x656C706D61537055, 0xEC00000072756C42, v70);
                    v73 = sub_1B1BA7B7C(0);
                    if (v73)
                    {
                      v74 = (void *)v73;
                      swift_unknownObjectRetain();
                      sub_1B1F9AEC4((uint64_t)v96);
                      sub_1B1F31294(v74, v88, v68, v90, v92, (uint64_t)v38, (uint64_t)v158);
                      sub_1B1BA2FBC();

                      swift_unknownObjectRelease();
                    }
                    else
                    {

                    }
                    --v68;
                  }
                  while (v68 != -1);
                  if (*(_QWORD *)(v10 + 368))
                  {
                    objc_msgSend((id)swift_unknownObjectRetain(), sel_popDebugGroup);
                    swift_unknownObjectRelease();
                  }
                  swift_unknownObjectRelease_n();
                  swift_unknownObjectRelease_n();
                  swift_unknownObjectRelease_n();
                  goto LABEL_56;
                }
                while (1)
                {
LABEL_63:
                  sub_1B2229688();
                  __break(1u);
                }
              }
              swift_unknownObjectRelease();
LABEL_29:
              swift_release();
              return;
            }
            sub_1B1BA80C0((uint64_t)v178);
          }
          swift_release();
          sub_1B1BA80C0((uint64_t)v178);
          swift_release();
          swift_retain();
          v36 = sub_1B2062908();
          swift_release();
          v37 = *(unsigned __int8 *)(v10 + 600);
          goto LABEL_13;
        }
      }
    }
  }
}

uint64_t sub_1B1F32584()
{
  uint64_t v0;
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(v0 + 16);
  v2 = swift_retain();
  v1(v2);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Deleter()
{
  return objc_opt_self();
}

uint64_t sub_1B1F325F4()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B1F32650()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1F32684()
{
  sub_1B1F32650();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TexturePool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TexturePool);
}

uint64_t sub_1B1F326B0(uint64_t a1)
{
  uint64_t ObjectType;
  Swift::Int v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD *v9;
  uint64_t v11;
  _QWORD v12[5];

  v12[4] = *MEMORY[0x1E0C80C00];
  ObjectType = swift_getObjectType();
  v3 = sub_1B1F9CE88();
  KeyPath = swift_getKeyPath();
  sub_1B1BA58B8(KeyPath, 1);
  swift_release();
  v5 = swift_getKeyPath();
  sub_1B1BA58B8(v5, v3);
  swift_release();
  v12[3] = ObjectType;
  v12[0] = a1;
  v6 = swift_allocObject();
  swift_weakInit();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v3;
  v11 = 0;
  swift_unknownObjectRetain();
  swift_retain();
  v8 = (void *)sub_1B2229D0C();
  type metadata accessor for Deleter();
  v9 = (_QWORD *)swift_allocObject();
  v9[2] = sub_1B1F328EC;
  v9[3] = v7;
  swift_retain();
  objc_setAssociatedObject(v8, &v11, v9, (void *)1);
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
}

uint64_t sub_1B1F32840()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1F32864(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = swift_weakLoadStrong();
  if (result)
  {
    v4 = result;
    if (*(_QWORD *)(result + 40))
    {
      vfx_counters.add(_:_:)(*(_DWORD *)(result + 136), -1);
      if (*(_QWORD *)(v4 + 40))
        vfx_counters.add(_:_:)(*(_DWORD *)(v4 + 140), -a2);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1F328C8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1F328EC()
{
  uint64_t v0;

  return sub_1B1F32864(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void *sub_1B1F328F4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v6;
  void *v7;
  void *v8;
  id v9;
  int v10;
  uint64_t v12[2];

  v6 = objc_msgSend(*(id *)(v3 + 16), sel_newTextureWithDescriptor_, a1);
  if (v6)
  {
    v7 = v6;
    sub_1B1F326B0((uint64_t)v6);
    if (a3)
      v8 = (void *)sub_1B2228728();
    else
      v8 = 0;
    objc_msgSend(v7, sel_setLabel_, v8);

  }
  else
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v12[1] = 0x80000001B2344810;
    swift_bridgeObjectRetain();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v9 = objc_msgSend(a1, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    v10 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    v12[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v10, v12, 0xD00000000000001BLL, 0x80000001B2344810);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 0;
  }
  return v7;
}

uint64_t sub_1B1F32B08(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  float v7;

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 - 1 >= a2)
    v4 = a2;
  else
    v4 = v3 - 1;
  v5 = a1 + 32;
  do
  {
    while (1)
    {
      v6 = v4;
      if (*(float *)(v5 + 4 * v4) >= a3)
        break;
      ++v4;
      if (v6 + 1 >= v3)
        return 0;
    }
    --v4;
    v7 = *(float *)(v5 + 4 * ((v6 - 1) & ~((v6 - 1) >> 63)));
  }
  while (v6 - 1 >= 0 && v7 > a3);
  if (v7 > a3)
    return 0;
  else
    return v6;
}

float sub_1B1F32B70(float *a1, float *a2, float *a3, float *a4, float *a5, float a6)
{
  float result;

  result = *a3
         + (float)((float)((float)((float)(*a4 * 0.5) - (float)(*a2 * 0.5)) * a6)
                 + (float)((float)((float)(a6 * a6)
                                 * (float)((float)((float)(*a2 + (float)(*a4 + *a4)) + (float)(*a3 * -2.5))
                                         - (float)(*a5 * 0.5)))
                         + (float)((float)((float)(a6 * a6) * a6)
                                 * (float)((float)((float)(*a3 * 1.5) + (float)((float)(*a5 * 0.5) - (float)(*a4 * 1.5)))
                                         - (float)(*a2 * 0.5)))));
  *a1 = result;
  return result;
}

float32x2_t sub_1B1F32BEC(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t *a5, float a6)
{
  float32x2_t v6;
  float32x2_t v12;
  float32x2_t result;

  v6 = vmul_f32(*a5, (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V6.2S, #1.5 }
  v12 = vmul_f32(*a2, (float32x2_t)0x3F0000003F000000);
  __asm { FMOV            V16.2S, #-2.5 }
  result = vadd_f32(*a3, vadd_f32(vmul_n_f32(vsub_f32(vmul_f32(*a4, (float32x2_t)0x3F0000003F000000), v12), a6), vadd_f32(vmul_n_f32(vsub_f32(vadd_f32(vadd_f32(*a2, vadd_f32(*a4, *a4)), vmul_f32(*a3, _D16)), v6), a6 * a6), vmul_n_f32(vsub_f32(vadd_f32(vmul_f32(*a3, _D6), vsub_f32(v6, vmul_f32(*a4, _D6))), v12), (float)(a6 * a6) * a6))));
  *a1 = result;
  return result;
}

float32x4_t sub_1B1F32C68(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v13;
  float32x4_t result;

  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  v7 = vmulq_f32(*a5, v6);
  __asm { FMOV            V6.4S, #1.5 }
  v13 = vmulq_f32(*a2, v6);
  __asm { FMOV            V16.4S, #-2.5 }
  result = vaddq_f32(*a3, vaddq_f32(vmulq_n_f32(vsubq_f32(vmulq_f32(*a4, v6), v13), a6), vaddq_f32(vmulq_n_f32(vsubq_f32(vaddq_f32(vmulq_f32(*a3, _Q6), vsubq_f32(v7, vmulq_f32(*a4, _Q6))), v13), (float)(a6 * a6) * a6), vmulq_n_f32(vsubq_f32(vaddq_f32(vaddq_f32(*a2, vaddq_f32(*a4, *a4)), vmulq_f32(*a3, _Q16)), v7), a6 * a6))));
  *a1 = result;
  return result;
}

float32x4_t sub_1B1F32CE4(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float a6)
{
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v13;
  float32x4_t result;

  v6.i64[0] = 0x3F0000003F000000;
  v6.i64[1] = 0x3F0000003F000000;
  v7 = vmulq_f32(*a5, v6);
  __asm { FMOV            V6.4S, #1.5 }
  v13 = vmulq_f32(*a2, v6);
  __asm { FMOV            V16.4S, #-2.5 }
  result = vaddq_f32(*a3, vaddq_f32(vmulq_n_f32(vsubq_f32(vmulq_f32(*a4, v6), v13), a6), vaddq_f32(vmulq_n_f32(vsubq_f32(vaddq_f32(vaddq_f32(*a2, vaddq_f32(*a4, *a4)), vmulq_f32(*a3, _Q16)), v7), a6 * a6), vmulq_n_f32(vsubq_f32(vaddq_f32(vmulq_f32(*a3, _Q6), vsubq_f32(v7, vmulq_f32(*a4, _Q6))), v13), (float)(a6 * a6) * a6))));
  *a1 = result;
  return result;
}

float sub_1B1F32D60(float *a1, float *a2, float *a3, float a4)
{
  float result;

  result = *a2 + (float)((float)(*a3 - *a2) * a4);
  *a1 = result;
  return result;
}

float32x2_t sub_1B1F32D7C(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float a4)
{
  float32x2_t result;

  result = vadd_f32(*a2, vmul_n_f32(vsub_f32(*a3, *a2), a4));
  *a1 = result;
  return result;
}

float32x4_t sub_1B1F32D98(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t result;

  result = vaddq_f32(*a2, vmulq_n_f32(vsubq_f32(*a3, *a2), a4));
  *a1 = result;
  return result;
}

float32x4_t sub_1B1F32DB4(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float a4)
{
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;
  float v10;
  float32x4_t v11;
  int8x16_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  float v16;
  float v18;
  float v19;
  float32x2_t v20;
  float32x2_t v21;
  float v22;
  float v23;
  int32x2_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float v27;
  float v28;
  float v29;
  float32x4_t v30;
  float32x4_t v31;
  int8x16_t v32;
  float32x4_t v33;
  int8x16_t v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float32x2_t v39;
  int32x2_t v40;
  float v41;
  float32x4_t v42;
  float v43;
  float v44;
  float v45;
  int8x16_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t result;
  float32x4_t v55;
  float32x4_t v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;

  v6 = *a2;
  v7 = *a3;
  v8 = (int8x16_t)vmulq_f32(*a2, *a3);
  v61 = *a3;
  v63 = *a2;
  v9 = 1.0;
  v10 = 1.0 - a4;
  if (vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL))) >= 0.0)
  {
    v31 = vsubq_f32(v6, v7);
    v32 = (int8x16_t)vmulq_f32(v31, v31);
    v33 = vaddq_f32(v6, v7);
    v34 = (int8x16_t)vmulq_f32(v33, v33);
    v35 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v32.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)))));
    v36 = v35 + v35;
    _ZF = (float)(v35 + v35) == 0.0;
    v37 = 1.0;
    if (!_ZF)
      v37 = sinf(v36) / v36;
    v38 = v37;
    v39 = vrecpe_f32((float32x2_t)LODWORD(v37));
    v40 = (int32x2_t)vmul_f32(v39, vrecps_f32((float32x2_t)LODWORD(v38), v39));
    LODWORD(v41) = vmul_f32((float32x2_t)v40, vrecps_f32((float32x2_t)LODWORD(v38), (float32x2_t)v40)).u32[0];
    if ((float)(v10 * v36) != 0.0)
    {
      v59 = v41;
      *(float *)v40.i32 = sinf(v10 * v36);
      v41 = v59;
      v9 = *(float *)v40.i32 / (float)(v10 * v36);
    }
    *(float *)v40.i32 = v10 * (float)(v41 * v9);
    v42 = (float32x4_t)vdupq_lane_s32(v40, 0);
    v43 = v36 * a4;
    v44 = 1.0;
    if (v43 != 0.0)
    {
      v56 = v42;
      v60 = v41;
      v45 = sinf(v43);
      v42 = v56;
      v41 = v60;
      v44 = v45 / v43;
    }
    v30 = vmlaq_f32(vmulq_n_f32(v61, (float)(v41 * v44) * a4), v63, v42);
  }
  else
  {
    v11 = vaddq_f32(v6, v7);
    v12 = (int8x16_t)vmulq_f32(v11, v11);
    v13 = vsubq_f32(v6, v7);
    v14 = (int8x16_t)vmulq_f32(v13, v13);
    v15 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)))));
    v16 = v15 + v15;
    _ZF = (float)(v15 + v15) == 0.0;
    v18 = 1.0;
    if (!_ZF)
      v18 = sinf(v16) / v16;
    v19 = v18;
    v20 = vrecpe_f32((float32x2_t)LODWORD(v18));
    v21 = vmul_f32(v20, vrecps_f32((float32x2_t)LODWORD(v19), v20));
    LODWORD(v22) = vmul_f32(v21, vrecps_f32((float32x2_t)LODWORD(v19), v21)).u32[0];
    if ((float)(v10 * v16) != 0.0)
    {
      v57 = v22;
      v23 = sinf(v10 * v16);
      v22 = v57;
      v9 = v23 / (float)(v10 * v16);
    }
    v24.i32[1] = v61.i32[1];
    v25 = vnegq_f32(v61);
    *(float *)v24.i32 = v10 * (float)(v22 * v9);
    v26 = (float32x4_t)vdupq_lane_s32(v24, 0);
    v27 = v16 * a4;
    v28 = 1.0;
    if (v27 != 0.0)
    {
      v58 = v22;
      v62 = v25;
      v55 = v26;
      v29 = sinf(v27);
      v26 = v55;
      v22 = v58;
      v25 = v62;
      v28 = v29 / v27;
    }
    v30 = vmlaq_f32(vmulq_n_f32(v25, (float)(v22 * v28) * a4), v63, v26);
  }
  v46 = (int8x16_t)vmulq_f32(v30, v30);
  *(float32x2_t *)v46.i8 = vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v46, v46, 8uLL));
  v47 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v46.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v46.i8, 1)), 0);
  v48 = vrsqrteq_f32(v47);
  v49 = vmulq_f32(v48, vrsqrtsq_f32(v47, vmulq_f32(v48, v48)));
  __asm { FMOV            V3.4S, #1.0 }
  result = vmulq_f32(v30, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v47), _Q3, (int8x16_t)vmulq_f32(v49, vrsqrtsq_f32(v47, vmulq_f32(v49, v49)))));
  *a1 = result;
  return result;
}

char *sub_1B1F33020(uint64_t a1, uint64_t a2, uint64_t a3, char a4, float a5)
{
  uint64_t v10;
  float v11;
  BOOL v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  BOOL v27;
  unint64_t v28;
  unint64_t v29;

  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
    v11 = *(float *)(a2 + 4 * v10 + 28);
  else
    v11 = 0.0;
  v12 = v11 >= 0.0;
  if (a5 > 0.0)
    v12 = v11 <= 0.0;
  if (v12)
  {
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    v14 = (char *)MEMORY[0x1E0DEE9D8];
  }
  else
  {
    v14 = (char *)MEMORY[0x1E0DEE9D8];
    v19 = 1;
    v13 = (char *)MEMORY[0x1E0DEE9D8];
    v20 = 0.0;
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v13 = sub_1B1C635D8(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
      v22 = *((_QWORD *)v13 + 2);
      v21 = *((_QWORD *)v13 + 3);
      if (v22 >= v21 >> 1)
        v13 = sub_1B1C635D8(v21 > 1, v22 + 1, 1, v13);
      *((_QWORD *)v13 + 2) = v22 + 1;
      *(float *)&v13[4 * v22 + 32] = v20;
      sub_1B1FFCF6C(a1, a2, a3, a4, v20);
      v24 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = sub_1B1C635D8(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
      v26 = *((_QWORD *)v14 + 2);
      v25 = *((_QWORD *)v14 + 3);
      if (v26 >= v25 >> 1)
        v14 = sub_1B1C635D8(v25 > 1, v26 + 1, 1, v14);
      v20 = (float)((float)v19 * a5) + 0.0;
      *((_QWORD *)v14 + 2) = v26 + 1;
      *(_DWORD *)&v14[4 * v26 + 32] = v24;
      v27 = v20 <= v11;
      if (a5 > 0.0)
        v27 = v11 <= v20;
      ++v19;
    }
    while (!v27);
  }
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v13 = sub_1B1C635D8(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
  v16 = *((_QWORD *)v13 + 2);
  v15 = *((_QWORD *)v13 + 3);
  if (v16 >= v15 >> 1)
    v13 = sub_1B1C635D8(v15 > 1, v16 + 1, 1, v13);
  *((_QWORD *)v13 + 2) = v16 + 1;
  *(float *)&v13[4 * v16 + 32] = v11;
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
    v18 = *(_DWORD *)(a1 + 4 * v17 + 28);
  else
    v18 = 0;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v14 = sub_1B1C635D8(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
  v29 = *((_QWORD *)v14 + 2);
  v28 = *((_QWORD *)v14 + 3);
  if (v29 >= v28 >> 1)
    v14 = sub_1B1C635D8(v28 > 1, v29 + 1, 1, v14);
  *((_QWORD *)v14 + 2) = v29 + 1;
  *(_DWORD *)&v14[4 * v29 + 32] = v18;
  return v14;
}

uint64_t sub_1B1F332E8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
    MEMORY[0x1B5E23F88](v1, -1, -1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for KeyframeTimelineRuntime()
{
  return objc_opt_self();
}

uint64_t sub_1B1F33350(uint64_t *a1, void *a2, float a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  size_t v18;
  size_t v19;

  v7 = *(_QWORD *)(v3 + 40);
  v8 = sub_1B1F32B08(v7, *a1, a3);
  if ((v10 & 1) != 0)
  {
    v18 = *(_QWORD *)(v3 + 32);
    if ((v18 & 0x8000000000000000) == 0)
    {
      result = (uint64_t)memmove(a2, (const void *)(*(_QWORD *)(v3 + 16) + (*(_QWORD *)(v7 + 16) - 1) * v18), v18);
      v11 = *(_QWORD *)(v7 + 16) - 1;
LABEL_16:
      *a1 = v11;
      return result;
    }
  }
  else
  {
    v11 = v8;
    if (v8)
    {
      v12 = v8 - 1;
      v13 = *(float *)(v7 + 32 + 4 * (v8 - 1));
      v9.n128_f32[0] = (float)(a3 - v13) / (float)(*(float *)(v7 + 32 + 4 * v8) - v13);
      v14 = *(_QWORD *)(v3 + 16);
      if (*(_BYTE *)(v3 + 80) == 1)
      {
        if (v12 <= 0)
          v15 = 0;
        else
          v15 = v8 - 2;
        if (v8 + 1 >= *(_QWORD *)(v7 + 16))
          v16 = v8;
        else
          v16 = v8 + 1;
        result = (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v3 + 64))(a2, v14 + *(_QWORD *)(v3 + 32) * v15, v14 + *(_QWORD *)(v3 + 32) * v12, v14 + *(_QWORD *)(v3 + 32) * v8, v14 + *(_QWORD *)(v3 + 32) * v16, v9);
      }
      else
      {
        result = (*(uint64_t (**)(void *, uint64_t, uint64_t, float))(v3 + 48))(a2, v14 + *(_QWORD *)(v3 + 32) * v12, v14 + *(_QWORD *)(v3 + 32) * v8, v9.n128_f32[0]);
      }
      goto LABEL_16;
    }
    v19 = *(_QWORD *)(v3 + 32);
    if ((v19 & 0x8000000000000000) == 0)
    {
      result = (uint64_t)memmove(a2, *(const void **)(v3 + 16), v19);
      v11 = 0;
      goto LABEL_16;
    }
  }
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1F334D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F91A84(*a1, *a2);
}

uint64_t sub_1B1F334DC()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F33570()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F335E0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F33670@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F33A44();
  *a1 = result;
  return result;
}

void sub_1B1F3369C(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x7365756C6176;
  if (v2 != 1)
  {
    v5 = 0x6576727563;
    v4 = 0xE500000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x73656D6974;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B1F336F0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7365756C6176;
  if (*v0 != 1)
    v1 = 0x6576727563;
  if (*v0)
    return v1;
  else
    return 0x73656D6974;
}

uint64_t sub_1B1F33740@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F33A44();
  *a1 = result;
  return result;
}

uint64_t sub_1B1F33764()
{
  sub_1B1F34778();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F3378C()
{
  sub_1B1F34778();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F337B4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[5];
  char v22;
  int v23;
  char v24;

  v23 = a5;
  sub_1B1F34810(0, &qword_1EEF60F70, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v10 = v9;
  v11 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9, v12);
  v14 = (char *)v21 - v13;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F34778();
  sub_1B222A180();
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v22 = v23;
  v24 = 2;
  sub_1B1A0DBF0(0, v15, v16, v17);
  sub_1B1BC374C((unint64_t *)&qword_1EEF63460, (uint64_t)&unk_1B22B9C6C, v18, v19);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1B1F338F8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;

  result = sub_1B1F3451C(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_1B1F33928(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F337B4(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t sub_1B1F33948(uint64_t a1, uint64_t a2)
{
  return sub_1B1F3396C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(float32x2_t **)(a1 + 16), *(_BYTE *)(a1 + 24), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(float32x2_t **)(a2 + 16), *(_BYTE *)(a2 + 24));
}

uint64_t sub_1B1F3396C(uint64_t a1, uint64_t a2, float32x2_t *a3, char a4, uint64_t a5, uint64_t a6, float32x2_t *a7, char a8)
{
  uint64_t v8;
  BOOL v13;
  uint64_t v14;
  float *v15;
  float *v16;

  v8 = *(_QWORD *)(a1 + 16);
  if (v8 != *(_QWORD *)(a5 + 16))
    return 0;
  if (v8)
    v13 = a1 == a5;
  else
    v13 = 1;
  if (!v13)
  {
    if (*(float *)(a1 + 32) != *(float *)(a5 + 32))
      return 0;
    v14 = v8 - 1;
    if (v14)
    {
      v15 = (float *)(a5 + 36);
      v16 = (float *)(a1 + 36);
      while (*v16 == *v15)
      {
        ++v15;
        ++v16;
        if (!--v14)
          goto LABEL_7;
      }
      return 0;
    }
  }
LABEL_7:
  if (sub_1B1CC94F4(a2, a6))
  {
    if (a3)
    {
      if (!a7 || (sub_1B1CC9F30(a3, a7) & 1) == 0)
        return 0;
    }
    else if (a7)
    {
      return 0;
    }
    if (a4 == a8)
      return 1;
  }
  return 0;
}

uint64_t sub_1B1F33A44()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

char *sub_1B1F33A8C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;

  v4 = a1;
  if (!a3)
    goto LABEL_9;
  v5 = *(_QWORD *)(a3 + 16);
  if (!v5)
  {
LABEL_8:
    swift_bridgeObjectRetain();
LABEL_9:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return (char *)v4;
  }
  if (*(_BYTE *)(a3 + 49) == 1)
  {
    v6 = (unsigned __int8 *)(a3 + 73);
    while (--v5)
    {
      v7 = *v6;
      v6 += 24;
      if (v7 != 1)
        return sub_1B1F33020(a1, a2, a3, a4, 0.033333);
    }
    goto LABEL_8;
  }
  return sub_1B1F33020(a1, a2, a3, a4, 0.033333);
}

char *sub_1B1F33B48(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v50 = *(_QWORD *)(a2 + 16);
  v20 = *(_QWORD *)(a6 + 16);
  v41 = a2 + 32;
  v21 = *(_QWORD *)(a10 + 16);
  v40 = a6 + 32;
  v22 = (char *)MEMORY[0x1E0DEE9D8];
  v23 = (char *)MEMORY[0x1E0DEE9D8];
  v51 = *(_QWORD *)(a14 + 16);
  while (1)
  {
    if (v19 < v50)
    {
      v24 = *(float *)(v41 + 4 * v19);
      goto LABEL_7;
    }
    v24 = 3.4028e38;
    if (v18 >= v20 && v17 >= v21 && v16 >= v51)
      return v22;
LABEL_7:
    if (v18 >= v20)
    {
      v25 = 3.4028e38;
      if (v17 >= v21)
      {
LABEL_9:
        v26 = 3.4028e38;
        goto LABEL_12;
      }
    }
    else
    {
      v25 = *(float *)(v40 + 4 * v18);
      if (v17 >= v21)
        goto LABEL_9;
    }
    v26 = *(float *)(a10 + 32 + 4 * v17);
LABEL_12:
    if (v16 >= v51)
      v27 = 3.4028e38;
    else
      v27 = *(float *)(a14 + 32 + 4 * v16);
    if (v25 >= v24)
      v28 = v24;
    else
      v28 = v25;
    if (v26 < v28)
      v28 = v26;
    if (v27 >= v28)
      v29 = v28;
    else
      v29 = v27;
    sub_1B1FFCF6C(a1, a2, a3, a4, v29);
    v55 = v30;
    sub_1B1FFCF6C(a5, a6, a7, a8, v29);
    v54 = v31;
    sub_1B1FFCF6C(a9, a10, a11, a12, v29);
    v53 = v32;
    sub_1B1FFCF6C(a13, a14, a15, a16, v29);
    v52 = v33;
    if (v24 == v29)
      ++v19;
    if (v25 == v29)
      ++v18;
    if (v26 == v29)
      ++v17;
    if (v27 == v29)
      ++v16;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v23 = sub_1B1C635D8(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
    v35 = *((_QWORD *)v23 + 2);
    v34 = *((_QWORD *)v23 + 3);
    if (v35 >= v34 >> 1)
      v23 = sub_1B1C635D8(v34 > 1, v35 + 1, 1, v23);
    *((_QWORD *)v23 + 2) = v35 + 1;
    *(float *)&v23[4 * v35 + 32] = v29;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v22 = sub_1B1791058(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
    v37 = *((_QWORD *)v22 + 2);
    v36 = *((_QWORD *)v22 + 3);
    if (v37 >= v36 >> 1)
      v22 = sub_1B1791058(v36 > 1, v37 + 1, 1, v22);
    *(_QWORD *)&v38 = __PAIR64__(v54, v55);
    *((_QWORD *)&v38 + 1) = __PAIR64__(v52, v53);
    *((_QWORD *)v22 + 2) = v37 + 1;
    *(_OWORD *)&v22[16 * v37 + 32] = v38;
  }
}

uint64_t sub_1B1F33E68(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  float32x4_t (*v5)(float32x4_t *, float32x4_t *, float32x4_t *, float);
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 + 80) = 1;
  *(_QWORD *)(v3 + 32) = 16;
  *(_QWORD *)(v3 + 64) = sub_1B1F32CE4;
  *(_QWORD *)(v3 + 72) = 0;
  if (a3 == 1)
    v5 = sub_1B1F32DB4;
  else
    v5 = sub_1B1F32D98;
  *(_QWORD *)(v3 + 48) = v5;
  *(_QWORD *)(v3 + 56) = 0;
  if (a3 == 1)
    *(_BYTE *)(v3 + 80) = 0;
  v6 = 16 * *(_QWORD *)(a1 + 16);
  v7 = swift_slowAlloc();
  sub_1B22291D8();
  *(_QWORD *)(v3 + 16) = v7;
  *(_QWORD *)(v3 + 24) = v7 + v6;
  *(_QWORD *)(v3 + 40) = a2;
  return v3;
}

char *sub_1B1F33F18(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  v43 = *(_QWORD *)(a2 + 16);
  v15 = *(_QWORD *)(a6 + 16);
  v16 = *(_QWORD *)(a10 + 16);
  v34 = a2 + 32;
  v33 = a6 + 32;
  v17 = (char *)MEMORY[0x1E0DEE9D8];
  v18 = (char *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v14 < v43)
    {
      v19 = *(float *)(v34 + 4 * v14);
      goto LABEL_6;
    }
    v19 = 3.4028e38;
    if (v13 >= v15 && v12 >= v16)
      return v17;
LABEL_6:
    if (v13 >= v15)
    {
      v20 = 3.4028e38;
      if (v12 >= v16)
      {
LABEL_8:
        v21 = 3.4028e38;
        goto LABEL_11;
      }
    }
    else
    {
      v20 = *(float *)(v33 + 4 * v13);
      if (v12 >= v16)
        goto LABEL_8;
    }
    v21 = *(float *)(a10 + 32 + 4 * v12);
LABEL_11:
    if (v20 >= v19)
      v22 = v19;
    else
      v22 = v20;
    if (v21 >= v22)
      v23 = v22;
    else
      v23 = v21;
    sub_1B1FFCF6C(a1, a2, a3, a4, v23);
    v46 = v24;
    sub_1B1FFCF6C(a5, a6, a7, a8, v23);
    v45 = v25;
    sub_1B1FFCF6C(a9, a10, a11, a12, v23);
    v44 = v26;
    if (v19 == v23)
      ++v14;
    if (v20 == v23)
      ++v13;
    if (v21 == v23)
      ++v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v18 = sub_1B1C635D8(0, *((_QWORD *)v18 + 2) + 1, 1, v18);
    v28 = *((_QWORD *)v18 + 2);
    v27 = *((_QWORD *)v18 + 3);
    if (v28 >= v27 >> 1)
      v18 = sub_1B1C635D8(v27 > 1, v28 + 1, 1, v18);
    *((_QWORD *)v18 + 2) = v28 + 1;
    *(float *)&v18[4 * v28 + 32] = v23;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v17 = sub_1B1C636E0(0, *((_QWORD *)v17 + 2) + 1, 1, v17);
    v30 = *((_QWORD *)v17 + 2);
    v29 = *((_QWORD *)v17 + 3);
    if (v30 >= v29 >> 1)
      v17 = sub_1B1C636E0(v29 > 1, v30 + 1, 1, v17);
    *(_QWORD *)&v31 = __PAIR64__(v45, v46);
    *((_QWORD *)&v31 + 1) = v44;
    *((_QWORD *)v17 + 2) = v30 + 1;
    *(_OWORD *)&v17[16 * v30 + 32] = v31;
  }
}

uint64_t sub_1B1F341B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 32) = 16;
  *(_QWORD *)(v2 + 48) = sub_1B1F32D98;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = sub_1B1F32C68;
  *(_QWORD *)(v2 + 72) = 0;
  v4 = 16 * *(_QWORD *)(a1 + 16);
  v5 = swift_slowAlloc();
  sub_1B22291D8();
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 24) = v5 + v4;
  *(_QWORD *)(v2 + 40) = a2;
  return v2;
}

char *sub_1B1F34244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, __n128 a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  float v15;
  float v16;
  BOOL v17;
  __n128 v18;
  unsigned __int32 v19;
  __n128 v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;

  v7 = 0;
  v8 = 0;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a4 + 16);
  v30 = a4 + 32;
  v31 = a2 + 32;
  v11 = a1 + 32;
  v12 = a3 + 32;
  v13 = (char *)MEMORY[0x1E0DEE9D8];
  v14 = (char *)MEMORY[0x1E0DEE9D8];
  if (v9 <= 0)
    goto LABEL_7;
LABEL_2:
  v15 = *(float *)(v31 + 4 * v8);
  if (v7 >= v10)
  {
    v16 = 3.4028e38;
    v17 = v15 < 3.4028e38;
    if (v15 == 3.4028e38)
      goto LABEL_10;
    goto LABEL_4;
  }
  while (1)
  {
    v16 = *(float *)(v30 + 4 * v7);
    v17 = v15 < v16;
    if (v15 == v16)
    {
LABEL_10:
      a7.n128_u32[0] = *(_DWORD *)(v11 + 4 * v8);
      a7.n128_u32[1] = *(_DWORD *)(v12 + 4 * v7);
      v33 = a7;
      ++v8;
      ++v7;
      goto LABEL_11;
    }
LABEL_4:
    if (v17)
    {
      a7.n128_u32[0] = *(_DWORD *)(v11 + 4 * v8);
      v32 = a7;
      sub_1B1FFCF6C(a3, a4, a5, a6, v15);
      v18 = v32;
      v18.n128_u32[1] = v19;
      v33 = v18;
      ++v8;
    }
    else
    {
      sub_1B1FFCF6C(a3, a4, a5, a6, v16);
      v20.n128_u32[1] = *(_DWORD *)(v11 + 4 * v8);
      v33 = v20;
      ++v7;
      v15 = v16;
    }
LABEL_11:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v14 = sub_1B1C635D8(0, *((_QWORD *)v14 + 2) + 1, 1, v14);
    v22 = *((_QWORD *)v14 + 2);
    v21 = *((_QWORD *)v14 + 3);
    if (v22 >= v21 >> 1)
      v14 = sub_1B1C635D8(v21 > 1, v22 + 1, 1, v14);
    *((_QWORD *)v14 + 2) = v22 + 1;
    *(float *)&v14[4 * v22 + 32] = v15;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v13 = sub_1B1C64878(0, *((_QWORD *)v13 + 2) + 1, 1, v13);
    v24 = *((_QWORD *)v13 + 2);
    v23 = *((_QWORD *)v13 + 3);
    if (v24 >= v23 >> 1)
      v13 = sub_1B1C64878(v23 > 1, v24 + 1, 1, v13);
    *((_QWORD *)v13 + 2) = v24 + 1;
    a7 = v33;
    *(_QWORD *)&v13[8 * v24 + 32] = v33.n128_u64[0];
    if (v8 < v9)
      goto LABEL_2;
LABEL_7:
    if (v7 >= v10)
      return v13;
    v15 = 3.4028e38;
  }
}

uint64_t sub_1B1F34478(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v2 + 80) = 1;
  *(_QWORD *)(v2 + 32) = 8;
  *(_QWORD *)(v2 + 48) = sub_1B1F32D7C;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = sub_1B1F32BEC;
  *(_QWORD *)(v2 + 72) = 0;
  v4 = 8 * *(_QWORD *)(a1 + 16);
  v5 = swift_slowAlloc();
  sub_1B22291D8();
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)(v2 + 24) = v5 + v4;
  *(_QWORD *)(v2 + 40) = a2;
  return v2;
}

ValueMetadata *type metadata accessor for KeyframeTimeline()
{
  return &type metadata for KeyframeTimeline;
}

uint64_t sub_1B1F3451C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;

  sub_1B1F34810(0, &qword_1ED4BAB08, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v18 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B1F34778();
  sub_1B222A150();
  if (!v1)
  {
    v10 = a1[3];
    v11 = a1[4];
    sub_1B19FA070(a1, v10);
    if (sub_1B2067BF4(v10, v11) > 1093)
    {
      sub_1B1A0DBF0(0, v12, v13, v14);
      v19 = 2;
      sub_1B1BC374C((unint64_t *)&qword_1ED4B9F30, (uint64_t)&unk_1B22B9C94, v15, v16);
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v9 = v18;
    }
    else
    {
      sub_1B1F347BC();
      v19 = 1;
      sub_1B1E0F98C();
      sub_1B2229814();
      v9 = v18;
      v19 = 0;
      sub_1B2229814();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B1F34778()
{
  unint64_t result;

  result = qword_1ED4B8DD8;
  if (!qword_1ED4B8DD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A20E8, &type metadata for KeyframeTimeline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8DD8);
  }
  return result;
}

void sub_1B1F347BC()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1ED4BA4C0)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1ED4BA4C0);
  }
}

void sub_1B1F34810(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1F34778();
    v7 = a3(a1, &type metadata for KeyframeTimeline.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for KeyframeTimeline.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1F348B8 + 4 * byte_1B22A1F05[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1F348EC + 4 * byte_1B22A1F00[v4]))();
}

uint64_t sub_1B1F348EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F348F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F348FCLL);
  return result;
}

uint64_t sub_1B1F34908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F34910);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1F34914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F3491C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyframeTimeline.CodingKeys()
{
  return &type metadata for KeyframeTimeline.CodingKeys;
}

unint64_t sub_1B1F3493C()
{
  unint64_t result;

  result = qword_1EEF60F78;
  if (!qword_1EEF60F78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A20C0, &type metadata for KeyframeTimeline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60F78);
  }
  return result;
}

unint64_t sub_1B1F34984()
{
  unint64_t result;

  result = qword_1ED4B8DE8;
  if (!qword_1ED4B8DE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A1FF8, &type metadata for KeyframeTimeline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8DE8);
  }
  return result;
}

unint64_t sub_1B1F349CC()
{
  unint64_t result;

  result = qword_1ED4B8DE0;
  if (!qword_1ED4B8DE0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2020, &type metadata for KeyframeTimeline.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8DE0);
  }
  return result;
}

uint64_t destroy for RenderStates()
{
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for RenderStates(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RenderStates(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  return a1;
}

uint64_t assignWithTake for RenderStates(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  swift_unknownObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  return a1;
}

ValueMetadata *type metadata accessor for RenderStates()
{
  return &type metadata for RenderStates;
}

uint64_t destroy for MaterialRuntime(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for MaterialRuntime(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v7;
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = v11;
  v12 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = v12;
  v13 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = v13;
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  v8 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v9 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MaterialRuntime(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_retain();
  swift_release();
  v4 = *(void **)(a1 + 24);
  v5 = *(void **)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v5;
  v6 = v5;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 128) = *(_WORD *)(a2 + 128);
  *(_WORD *)(a1 + 130) = *(_WORD *)(a2 + 130);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  return a1;
}

__n128 initializeWithTake for MaterialRuntime(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[14];
  *(_QWORD *)(a1 + 240) = *((_QWORD *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for MaterialRuntime(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_release();
  v4 = *(void **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);

  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = v5;
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_BYTE *)(a1 + 225) = *(_BYTE *)(a2 + 225);
  *(_BYTE *)(a1 + 226) = *(_BYTE *)(a2 + 226);
  *(_BYTE *)(a1 + 227) = *(_BYTE *)(a2 + 227);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialRuntime(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 248))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialRuntime(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 248) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 248) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialRuntime()
{
  return &type metadata for MaterialRuntime;
}

void sub_1B1F352F8(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  id v34;
  _OWORD v35[7];
  int64x2_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v5 = a1;
  v6 = *a2;
  v7 = a2[1];
  v8 = a2[2];
  v9 = a2[3];
  v11 = a2[4];
  v10 = a2[5];
  v12 = a2[6];
  v13 = a2[7];
  v14 = a2[8];
  v15 = a2[9];
  v16 = a2[10];
  if (!a4)
  {
    v21 = a1[1];
    if (!*(_QWORD *)(v21 + 16))
      return;
    v36.i32[0] = 0;
    v36.i64[1] = v6;
    goto LABEL_8;
  }
  v17 = *a1;
  if (*(_QWORD *)(*a1 + 16))
  {
    v31 = a2[8];
    v18 = a2[6];
    v30 = *a2;
    v19 = sub_1B1DC3AC8(a3);
    v14 = v31;
    v12 = v18;
    v5 = a1;
    if ((v20 & 1) != 0)
    {
      v21 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v19);
      if (*(_QWORD *)(v21 + 16))
      {
        v36.i32[0] = 0;
        v36.i64[1] = v30;
LABEL_8:
        v37 = v7;
        v38 = v8;
        v39 = v9;
        v40 = v11;
        v41 = v10;
        v42 = v12;
        v43 = v13;
        v44 = v14;
        v45 = v15;
        v46 = v16;
        sub_1B1DC3F84(&v36);
        if ((v23 & 1) != 0)
        {
          v24 = (uint64_t *)(*(_QWORD *)(v21 + 56) + 112 * v22);
          v25 = v24[1];
          v26 = *v24;
          swift_unknownObjectRetain();
          swift_unknownObjectRetain();
          objc_msgSend(v34, sel_setCullMode_, v5[27]);
          objc_msgSend(v34, sel_setFrontFacingWinding_, v5[26]);
          objc_msgSend(v34, sel_setDepthStencilState_, v25);
          objc_msgSend(v34, sel_setRenderPipelineState_, v26);
          v27 = *((_OWORD *)v5 + 7);
          v35[4] = *((_OWORD *)v5 + 6);
          v35[5] = v27;
          v35[6] = *((_OWORD *)v5 + 8);
          v28 = *((_OWORD *)v5 + 3);
          v35[0] = *((_OWORD *)v5 + 2);
          v35[1] = v28;
          v29 = *((_OWORD *)v5 + 5);
          v35[2] = *((_OWORD *)v5 + 4);
          v35[3] = v29;
          sub_1B1D64F30(v35, v34, a5, 3);
          swift_unknownObjectRelease();
          swift_unknownObjectRelease();
        }
      }
    }
  }
}

double sub_1B1F354C0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  double result;

  v2 = MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1B955E4(MEMORY[0x1E0DEE9D8]);
  v4 = sub_1B1B956CC(v2);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = v2;
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)(a1 + 48) = v2;
  *(_QWORD *)(a1 + 56) = v2;
  *(_QWORD *)(a1 + 64) = v2;
  *(_QWORD *)(a1 + 72) = v2;
  *(_QWORD *)(a1 + 80) = v2;
  *(_QWORD *)(a1 + 88) = v2;
  *(_QWORD *)(a1 + 96) = v2;
  *(_QWORD *)(a1 + 104) = v2;
  *(_QWORD *)(a1 + 112) = v2;
  *(_QWORD *)(a1 + 120) = v2;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v2;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 208) = xmmword_1B226D240;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  return result;
}

uint64_t sub_1B1F35548@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[10];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3[0] = 0xD000000000000013;
  v3[1] = 0x80000001B23448A0;
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = MEMORY[0x1E0DEE9D8];
  v3[5] = 0xD000000000000013;
  v3[6] = 0x80000001B23448C0;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = MEMORY[0x1E0DEE9D8];
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  nullsub_16(v3);
  return sub_1B19F66A0((uint64_t)v3, a1, &qword_1ED4B8CF8);
}

uint64_t sub_1B1F355E4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  sub_1B1F35C3C(0, &qword_1EEF60F90, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F35BF8();
  sub_1B222A180();
  v11[1] = a2;
  sub_1B1A0895C();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B1F356E4()
{
  return 0x65727574786574;
}

uint64_t sub_1B1F356FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65727574786574 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1F35790()
{
  sub_1B1F35BF8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F357B8()
{
  sub_1B1F35BF8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F357E0()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(4);
  *(_QWORD *)(v0 + 88) = sub_1B1F35548;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

uint64_t sub_1B1F35834(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t *v3;

  return sub_1B1F35890(a1, a3, *v3);
}

_QWORD *sub_1B1F35840@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B1F35AC0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1F35868(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1F355E4(a1, *v1);
}

ValueMetadata *type metadata accessor for ParticleDecalRenderer()
{
  return &type metadata for ParticleDecalRenderer;
}

uint64_t sub_1B1F35890(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t ObjectType;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  _OWORD v27[4];
  _BYTE v28[80];
  _OWORD v29[4];
  char v30;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3 || !*(_QWORD *)(v3 + 168))
    return 0;
  v7 = *a2;
  v8 = *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v8)
  {
    swift_release();
    return 0;
  }
  v26 = a3;
  ObjectType = swift_getObjectType();
  swift_retain();
  swift_retain();
  v10 = objc_msgSend((id)swift_unknownObjectRetain(), sel_encodedLength);
  v11 = sub_1B1D22DA8(0, (uint64_t)v10);
  v13 = v12;
  v15 = v14;
  swift_unknownObjectRetain();
  swift_release();
  sub_1B1F9C328(v11, v13, v15, 0);
  v16 = (_QWORD *)a2[1];
  swift_retain();
  sub_1B1D15764(v16, (uint64_t)v28);
  swift_release();
  sub_1B19F66A0((uint64_t)v28, (uint64_t)v29, qword_1ED4B8BB0);
  if ((v30 & 1) != 0)
  {
    v17 = xmmword_1B2244E20;
    v18 = xmmword_1B2244D90;
    v19 = xmmword_1B2244DD0;
    v20 = xmmword_1B2244DB0;
  }
  else
  {
    v20 = v29[0];
    v19 = v29[1];
    v18 = v29[2];
    v17 = v29[3];
  }
  v27[0] = v20;
  v27[1] = v19;
  v27[2] = v18;
  v27[3] = v17;
  type metadata accessor for particle_decal_material_constants(0);
  sub_1B1F9C340((uint64_t)v27, 0, ObjectType, v21);
  swift_retain();
  v22 = sub_1B1D28E9C(v8, v7, 1, v26);
  v24 = v23;
  swift_release();
  sub_1B1F9C3D8(v24, 200);
  sub_1B1F9C214(v22, 201, (unint64_t *)(a1 + 136));
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v11;
}

_QWORD *sub_1B1F35AC0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD v11[2];

  sub_1B1F35C3C(0, &qword_1EEF60F80, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1F35BF8();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A08878();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v9 = (_QWORD *)v11[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B1F35BF8()
{
  unint64_t result;

  result = qword_1EEF60F88;
  if (!qword_1EEF60F88)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A232C, &type metadata for ParticleDecalRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60F88);
  }
  return result;
}

void sub_1B1F35C3C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1F35BF8();
    v7 = a3(a1, &type metadata for ParticleDecalRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleDecalRenderer.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1F35CD8 + 4 * byte_1B22A2190[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1F35CF8 + 4 * byte_1B22A2195[v4]))();
}

_BYTE *sub_1B1F35CD8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1F35CF8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1F35D00(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1F35D08(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1F35D10(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1F35D18(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ParticleDecalRenderer.CodingKeys()
{
  return &type metadata for ParticleDecalRenderer.CodingKeys;
}

unint64_t sub_1B1F35D38()
{
  unint64_t result;

  result = qword_1EEF60F98;
  if (!qword_1EEF60F98)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2304, &type metadata for ParticleDecalRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60F98);
  }
  return result;
}

unint64_t sub_1B1F35D80()
{
  unint64_t result;

  result = qword_1EEF60FA0;
  if (!qword_1EEF60FA0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2274, &type metadata for ParticleDecalRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60FA0);
  }
  return result;
}

unint64_t sub_1B1F35DC8()
{
  unint64_t result;

  result = qword_1EEF60FA8;
  if (!qword_1EEF60FA8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A229C, &type metadata for ParticleDecalRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF60FA8);
  }
  return result;
}

uint64_t sub_1B1F35E0C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  double v8;
  unint64_t v9;
  float v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_1B2228ED8();
  v4 = *(_QWORD *)(v3 + 16);
  if (v4)
  {
    v13 = MEMORY[0x1E0DEE9D8];
    sub_1B202B074(0, v4, 0);
    v5 = 0;
    v6 = v13;
    v7 = *(_QWORD *)(v13 + 16);
    do
    {
      v8 = *(double *)(v3 + 8 * v5 + 32);
      v9 = *(_QWORD *)(v13 + 24);
      if (v7 >= v9 >> 1)
        sub_1B202B074(v9 > 1, v7 + 1, 1);
      ++v5;
      v10 = v8;
      *(_QWORD *)(v13 + 16) = v7 + 1;
      *(float *)(v13 + 4 * v7++ + 32) = v10;
    }
    while (v4 != v5);
    v11 = swift_bridgeObjectRelease();
  }
  else
  {
    v11 = swift_bridgeObjectRelease();
    v6 = MEMORY[0x1E0DEE9D8];
  }
  a2(v11);
  return v6;
}

unint64_t sub_1B1F35F28(uint64_t a1, uint64_t a2)
{
  unint64_t v2;

  v2 = 0xD000000000000010;
  if (!a2)
    return 0xD00000000000001ALL;
  if (a2 != 1)
  {
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    return 0xD000000000000021;
  }
  return v2;
}

unint64_t sub_1B1F35FE0()
{
  uint64_t *v0;

  return sub_1B1F35F28(*v0, v0[1]);
}

_QWORD *sub_1B1F35FE8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;

  v3 = v2;
  v6 = MEMORY[0x1E0DEE9D8];
  v3[4] = sub_1B1B80D74(MEMORY[0x1E0DEE9D8]);
  v3[5] = sub_1B1B80E68(v6);
  v3[6] = v6;
  v3[2] = a1;
  type metadata accessor for EntityManager();
  swift_allocObject();
  v7 = sub_1B1DA6CC4(0x726F706D494C444DLL, 0xEB00000000726574, 1, 0);
  v3[3] = v7;
  *(_QWORD *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_renderer) = a2;
  swift_release();
  return v3;
}

uint64_t sub_1B1F3609C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v6 = objc_msgSend(a1, sel_name);
  v7 = sub_1B222874C();
  v9 = v8;

  if (v7 == a3 && v9 == a4)
    v11 = 1;
  else
    v11 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

uint64_t sub_1B1F36134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  uint64_t (*v41)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[2];
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v6, v7);
  v9 = (char *)v45 - v8;
  v10 = sub_1B2227E28();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10, v12);
  v14 = (char *)v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v51 = a1;
  *((_QWORD *)&v51 + 1) = a2;
  sub_1B1A06460();
  v15 = (_QWORD *)sub_1B2229280();
  v16 = v15;
  v17 = v15[2];
  if (v17 < 2)
  {
    swift_bridgeObjectRelease();
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v51 = 0;
    *((_QWORD *)&v51 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)&v51 = 0xD000000000000015;
    *((_QWORD *)&v51 + 1) = 0x80000001B2344AA0;
    sub_1B2228890();
    v32 = v51;
    v33 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v51 = 0;
    swift_retain();
    sub_1B1F1AD70(v33, (uint64_t *)&v51, v32, *((uint64_t *)&v32 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    v34 = sub_1B2228110();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(a3, 1, 1, v34);
  }
  else
  {
    v48 = v11;
    v49 = v10;
    v45[0] = a1;
    v45[1] = a2;
    v50 = a3;
    v18 = v15[4];
    v19 = v15[5];
    v20 = v15[6];
    v21 = v15[7];
    swift_bridgeObjectRetain();
    v47 = MEMORY[0x1B5E20388](v18, v19, v20, v21);
    swift_bridgeObjectRelease();
    v22 = (uint64_t)&v16[4 * v17 + 4];
    v46 = *(_OWORD *)&v16[4 * v17];
    v24 = *(_QWORD *)(v22 - 16);
    v23 = *(_QWORD *)(v22 - 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v51 = v46;
    v52 = v24;
    v53 = v23;
    sub_1B1A06504();
    v25 = sub_1B2229280();
    swift_bridgeObjectRelease();
    v26 = *(_QWORD *)(v25 + 16);
    if (v26)
    {
      v27 = (uint64_t *)(v25 + 32 * v26);
      v29 = *v27;
      v28 = v27[1];
      v31 = v27[2];
      v30 = v27[3];
      swift_bridgeObjectRetain();
    }
    else
    {
      v29 = 0;
      v28 = 0;
      v31 = 0;
      v30 = 0;
    }
    swift_bridgeObjectRelease();
    MEMORY[0x1B5E20388](v29, v28, v31, v30);
    swift_bridgeObjectRelease();
    sub_1B2227E1C();
    sub_1B2227E04();
    sub_1B2227E10();
    sub_1B2227DF8();
    v36 = sub_1B2228110();
    v37 = *(_QWORD *)(v36 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v9, 1, v36) == 1)
    {
      sub_1B19EC9A4((uint64_t)v9);
      v38 = v48;
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v51 = 0;
      *((_QWORD *)&v51 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v51 = 0xD000000000000015;
      *((_QWORD *)&v51 + 1) = 0x80000001B2344AA0;
      sub_1B2228890();
      v39 = v51;
      v40 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v51 = 0;
      swift_retain();
      sub_1B1F1AD70(v40, (uint64_t *)&v51, v39, *((uint64_t *)&v39 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v49);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
      v42 = v50;
      v43 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v48 + 8))(v14, v49);
      v44 = v50;
      (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v50, v9, v36);
      v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
      v42 = v44;
      v43 = 0;
    }
    return v41(v42, v43, 1, v36);
  }
}

unint64_t sub_1B1F3660C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _BYTE *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v46;
  uint64_t v47;
  int v48;
  _BYTE v49[4];
  char v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int16 v58;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v49[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v49[-v9];
  v11 = (_QWORD *)sub_1B2228110();
  v12 = *(v11 - 1);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v49[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = &v49[-v19];
  switch((unint64_t)objc_msgSend(a1, sel_type, v18))
  {
    case 1uLL:
      v21 = objc_msgSend(a1, sel_stringValue);
      v22 = sub_1B222874C();
      v24 = v23;

      sub_1B1F36134(v22, v24, (uint64_t)v10);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(_BYTE *, uint64_t, _QWORD *))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_1B19EC9A4((uint64_t)v10);
        v25 = 0;
        __asm { FMOV            V0.4S, #1.0 }
LABEL_10:
        LODWORD(v38) = -1;
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, _QWORD *))(v12 + 32))(v20, v10, v11);
        v39 = *(_QWORD *)(v1 + 24);
        v52 = 0;
        v53 = 0;
        v51 = 66;
        v54 = -2;
        v56 = 0;
        v57 = 0;
        v55 = 0;
        v58 = 768;
        v40 = **(_QWORD **)(v39 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
        swift_retain();
        v41 = sub_1B20F4600();
        MEMORY[0x1E0C80A78](v41, v42);
        *(_QWORD *)&v49[-32] = v20;
        *(_WORD *)&v49[-24] = 0;
        v47 = (uint64_t)&v51;
        v50 = 1;
        v38 = sub_1B1F4EF68(v43, 0x100000000uLL, (uint64_t)sub_1B1F3BD0C, (uint64_t)&v49[-48], v40);
        swift_release();
        swift_bridgeObjectRelease();
        v25 = v38 & 0xFFFFFFFF00000000;
        (*(void (**)(_BYTE *, _QWORD *))(v12 + 8))(v20, v11);
LABEL_12:
        __asm { FMOV            V0.4S, #1.0 }
      }
      return v38 | v25;
    case 2uLL:
      v31 = *(_QWORD *)(v1 + 24);
      swift_retain();
      v32 = objc_msgSend(a1, sel_URLValue);
      if (!v32)
        goto LABEL_15;
      v33 = v32;
      sub_1B22280C8();

      (*(void (**)(_BYTE *, _BYTE *, _QWORD *))(v12 + 32))(v6, v15, v11);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, _QWORD *))(v12 + 56))(v6, 0, 1, v11);
      (*(void (**)(_BYTE *, uint64_t, _QWORD *))(v12 + 48))(v6, 1, v11);
      v52 = 0;
      v53 = 0;
      v51 = 66;
      v54 = -2;
      v56 = 0;
      v57 = 0;
      v55 = 0;
      v58 = 768;
      v34 = **(_QWORD **)(v31 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      v35 = sub_1B20F4600();
      MEMORY[0x1E0C80A78](v35, v36);
      *(_QWORD *)&v49[-32] = v6;
      *(_WORD *)&v49[-24] = 0;
      v47 = (uint64_t)&v51;
      v50 = 1;
      v38 = sub_1B1F4EF68(v37, 0x100000000uLL, (uint64_t)sub_1B1F3BD0C, (uint64_t)&v49[-48], v34);
      swift_release();
      swift_bridgeObjectRelease();
      v25 = v38 & 0xFFFFFFFF00000000;
      (*(void (**)(_BYTE *, _QWORD *))(v12 + 8))(v6, v11);
      goto LABEL_12;
    case 4uLL:
      sub_1B1BF4070((CGColor *)objc_msgSend(a1, sel_color));
      goto LABEL_9;
    case 7uLL:
      objc_msgSend(a1, sel_float3Value);
      v25 = 0;
      goto LABEL_10;
    case 8uLL:
      objc_msgSend(a1, sel_float4Value);
LABEL_9:
      v25 = 0;
      goto LABEL_10;
    default:
      v51 = 0;
      v52 = 0xE000000000000000;
      sub_1B2229430();
      swift_bridgeObjectRelease();
      v51 = 0xD000000000000023;
      v52 = 0x80000001B2344A70;
      v11 = objc_msgSend(a1, sel_description);
      sub_1B222874C();
      v6 = v46;

      sub_1B2228890();
      swift_bridgeObjectRelease();
      v48 = 0;
      v47 = 201;
      sub_1B2229688();
      __break(1u);
LABEL_15:
      (*(void (**)(_BYTE *, uint64_t, uint64_t, _QWORD *))(v12 + 56))(v6, 1, 1, v11);
      __break(1u);
      JUMPOUT(0x1B1F36B18);
  }
}

unint64_t sub_1B1F36B38(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  _BYTE *v20;
  id v21;
  double v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v46[4];
  char v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;

  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = &v46[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v7, v8);
  v10 = &v46[-v9];
  v11 = sub_1B2228110();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = &v46[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = MEMORY[0x1E0C80A78](v16, v17);
  v20 = &v46[-v19];
  v21 = objc_msgSend(a1, sel_type, v18);
  LODWORD(v22) = 1.0;
  v23 = (unint64_t)v21;
  LODWORD(v24) = -1;
  switch((unint64_t)v21)
  {
    case 0uLL:
      return v24 | v23;
    case 1uLL:
      v32 = objc_msgSend(a1, sel_stringValue, v22);
      v33 = sub_1B222874C();
      v35 = v34;

      sub_1B1F36134(v33, v35, (uint64_t)v10);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_1B19EC9A4((uint64_t)v10);
        goto LABEL_14;
      }
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v20, v10, v11);
      v40 = *(_QWORD *)(v1 + 24);
      v49 = 0;
      v50 = 0;
      v48 = 66;
      v51 = -2;
      v53 = 0;
      v54 = 0;
      v52 = 0;
      v55 = 768;
      v41 = **(_QWORD **)(v40 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      swift_retain();
      v42 = sub_1B20F4600();
      MEMORY[0x1E0C80A78](v42, v43);
      *(_QWORD *)&v46[-32] = v20;
      *(_WORD *)&v46[-24] = 0;
      *(_QWORD *)&v46[-16] = &v48;
      v47 = 1;
      v24 = sub_1B1F4EF68(v44, 0x100000000uLL, (uint64_t)sub_1B1F3BD0C, (uint64_t)&v46[-48], v41);
      swift_release();
      swift_bridgeObjectRelease();
      v23 = v24 & 0xFFFFFFFF00000000;
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v20, v11);
      break;
    case 2uLL:
      v25 = *(_QWORD *)(v1 + 24);
      swift_retain();
      v26 = objc_msgSend(a1, sel_URLValue);
      if (!v26)
      {
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v6, 1, 1, v11);
        __break(1u);
        JUMPOUT(0x1B1F370A4);
      }
      v27 = v26;
      sub_1B22280C8();

      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v6, v15, v11);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v6, 1, v11);
      v49 = 0;
      v50 = 0;
      v48 = 66;
      v51 = -2;
      v53 = 0;
      v54 = 0;
      v52 = 0;
      v55 = 768;
      v28 = **(_QWORD **)(v25 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
      v29 = sub_1B20F4600();
      MEMORY[0x1E0C80A78](v29, v30);
      *(_QWORD *)&v46[-32] = v6;
      *(_WORD *)&v46[-24] = 0;
      *(_QWORD *)&v46[-16] = &v48;
      v47 = 1;
      v24 = sub_1B1F4EF68(v31, 0x100000000uLL, (uint64_t)sub_1B1BDB640, (uint64_t)&v46[-48], v28);
      swift_release();
      swift_bridgeObjectRelease();
      v23 = v24 & 0xFFFFFFFF00000000;
      (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v6, v11);
      break;
    case 4uLL:
      sub_1B1BF4070((CGColor *)objc_msgSend(a1, sel_color, v22));
      goto LABEL_3;
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      objc_msgSend(a1, sel_floatValue, v22);
LABEL_3:
      v23 = 0;
      LODWORD(v24) = -1;
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      v48 = 0;
      v49 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v36 = objc_msgSend(a1, sel_description);
      sub_1B222874C();

      sub_1B2228890();
      swift_bridgeObjectRelease();
      v37 = v48;
      v38 = v49;
      v39 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v48 = 0;
      swift_retain();
      sub_1B1F1AD70(v39, &v48, v37, v38);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_14:
      v23 = 0;
      LODWORD(v24) = -1;
      break;
  }
  return v24 | v23;
}

uint64_t sub_1B1F370C8(void *a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  unint64_t v8;
  __int128 v9;
  unint64_t v10;
  id v11;
  id v12;
  void *v13;
  unint64_t v14;
  int v15;
  int v16;
  id v17;
  void *v18;
  unint64_t v19;
  int v20;
  int v21;
  void *v22;
  id v23;
  unint64_t v24;
  int v25;
  id v26;
  id v27;
  void *v28;
  unint64_t v29;
  __int128 v30;
  unint64_t v31;
  id v32;
  void *v33;
  void *v34;
  id v35;
  unint64_t v36;
  int v37;
  int v38;
  id v39;
  unint64_t v40;
  int v41;
  int v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v52;
  unint64_t v53;
  float v54;
  float v55;
  __int128 v56;
  __int128 v57;

  v3 = objc_msgSend(a1, sel_scatteringFunction);
  type metadata accessor for PBRParameters();
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = 0u;
  *(_QWORD *)(v4 + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 40) = 16777473;
  *(_BYTE *)(v4 + 44) = 1;
  *(_OWORD *)(v4 + 48) = xmmword_1B2244EC0;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 80) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 88) = 16777473;
  *(_BYTE *)(v4 + 92) = 1;
  *(_OWORD *)(v4 + 96) = xmmword_1B2244EC0;
  *(_QWORD *)(v4 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 120) = 16777473;
  *(_BYTE *)(v4 + 124) = 1;
  *(_DWORD *)(v4 + 128) = 0;
  *(_OWORD *)(v4 + 144) = xmmword_1B2244EC0;
  *(_QWORD *)(v4 + 160) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 168) = 16777473;
  *(_BYTE *)(v4 + 172) = 1;
  *(_DWORD *)(v4 + 176) = 0;
  *(_OWORD *)(v4 + 192) = xmmword_1B2244EC0;
  *(_QWORD *)(v4 + 208) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 216) = 16777473;
  *(_BYTE *)(v4 + 220) = 1;
  *(_DWORD *)(v4 + 224) = 1065353216;
  *(_OWORD *)(v4 + 240) = xmmword_1B2244EC0;
  *(_QWORD *)(v4 + 256) = 0xFFFFFFFFLL;
  *(_DWORD *)(v4 + 264) = 16777473;
  *(_BYTE *)(v4 + 268) = 1;
  *(_DWORD *)(v4 + 272) = 1065353216;
  *(_OWORD *)(v4 + 288) = xmmword_1B2244EC0;
  *(_WORD *)(v4 + 304) = 0;
  v5 = objc_msgSend(a1, sel_propertyWithSemantic_, 0);
  if (v5)
    goto LABEL_2;
  v7 = (void *)sub_1B2228728();
  v6 = objc_msgSend(a1, sel_propertyNamed_, v7);

  if (!v6)
  {
    v5 = objc_msgSend(v3, sel_baseColor);
LABEL_2:
    v6 = v5;
    goto LABEL_5;
  }
  v5 = v6;
LABEL_5:
  v8 = sub_1B1F3660C(v5);
  v56 = v9;
  v10 = v8;

  *(_OWORD *)(v4 + 16) = v56;
  *(_QWORD *)(v4 + 32) = v10;
  *(_DWORD *)(v4 + 40) = 16777473;
  *(_BYTE *)(v4 + 44) = 1;
  *(_OWORD *)(v4 + 48) = xmmword_1B2244EC0;
  v11 = objc_msgSend(a1, sel_propertyWithSemantic_, 19);
  if (v11)
  {
LABEL_6:
    v12 = v11;
    goto LABEL_9;
  }
  v13 = (void *)sub_1B2228728();
  v12 = objc_msgSend(a1, sel_propertyNamed_, v13);

  if (!v12)
  {
    v11 = objc_msgSend(v3, sel_normal);
    goto LABEL_6;
  }
  v11 = v12;
LABEL_9:
  v14 = sub_1B1F36B38(v11);
  v16 = v15;

  *(_QWORD *)(v4 + 256) = v14;
  *(_DWORD *)(v4 + 264) = 16777473;
  *(_BYTE *)(v4 + 268) = 1;
  *(_DWORD *)(v4 + 272) = v16;
  *(_OWORD *)(v4 + 288) = xmmword_1B2244EC0;
  v17 = objc_msgSend(a1, sel_propertyWithSemantic_, 22);
  if (v17)
  {
    v18 = v17;
    v19 = sub_1B1F36B38(v17);
    v21 = v20;

    *(_QWORD *)(v4 + 208) = v19;
    *(_DWORD *)(v4 + 216) = 16777473;
    *(_BYTE *)(v4 + 220) = 1;
LABEL_13:
    *(_DWORD *)(v4 + 224) = v21;
    *(_OWORD *)(v4 + 240) = xmmword_1B2244EC0;
    goto LABEL_14;
  }
  v22 = (void *)sub_1B2228728();
  v23 = objc_msgSend(a1, sel_propertyNamed_, v22);

  if (v23)
  {
    v24 = sub_1B1F36B38(v23);
    v21 = v25;

    *(_QWORD *)(v4 + 208) = v24;
    *(_DWORD *)(v4 + 216) = 16777473;
    *(_BYTE *)(v4 + 220) = 1;
    goto LABEL_13;
  }
  v52 = objc_msgSend(v3, sel_ambientOcclusion);
  v53 = sub_1B1F36B38(v52);
  v55 = v54;

  *(_QWORD *)(v4 + 208) = v53;
  *(_DWORD *)(v4 + 216) = 16777473;
  *(_BYTE *)(v4 + 220) = 1;
  *(float *)(v4 + 224) = v55;
  *(_OWORD *)(v4 + 240) = xmmword_1B2244EC0;
  if (v55 == 0.0)
    *(_DWORD *)(v4 + 224) = 1065353216;
LABEL_14:
  v26 = objc_msgSend(a1, sel_propertyWithSemantic_, 13, v56);
  if (v26)
  {
LABEL_15:
    v27 = v26;
    goto LABEL_18;
  }
  v28 = (void *)sub_1B2228728();
  v27 = objc_msgSend(a1, sel_propertyNamed_, v28);

  if (!v27)
  {
    v26 = objc_msgSend(v3, sel_emission);
    goto LABEL_15;
  }
  v26 = v27;
LABEL_18:
  v29 = sub_1B1F3660C(v26);
  v57 = v30;
  v31 = v29;

  *(_OWORD *)(v4 + 64) = v57;
  *(_QWORD *)(v4 + 80) = v31;
  *(_DWORD *)(v4 + 88) = 16777473;
  *(_BYTE *)(v4 + 92) = 1;
  *(_OWORD *)(v4 + 96) = xmmword_1B2244EC0;
  v32 = objc_msgSend(a1, sel_scatteringFunction);
  objc_opt_self();
  v33 = (void *)swift_dynamicCastObjCClass();
  if (v33)
  {
    v34 = v33;
    v35 = objc_msgSend(v33, sel_metallic);
    v36 = sub_1B1F36B38(v35);
    v38 = v37;

    *(_QWORD *)(v4 + 160) = v36;
    *(_DWORD *)(v4 + 168) = 16777473;
    *(_BYTE *)(v4 + 172) = 1;
    *(_DWORD *)(v4 + 176) = v38;
    *(_OWORD *)(v4 + 192) = xmmword_1B2244EC0;
    v39 = objc_msgSend(v34, sel_roughness);
    v40 = sub_1B1F36B38(v39);
    v42 = v41;

    *(_QWORD *)(v4 + 112) = v40;
    *(_DWORD *)(v4 + 120) = 16777473;
    *(_BYTE *)(v4 + 124) = 1;
    *(_DWORD *)(v4 + 128) = v42;
    *(_OWORD *)(v4 + 144) = xmmword_1B2244EC0;
  }
  else
  {

  }
  v43 = *(_QWORD *)(v1 + 24);
  swift_retain();
  v44 = objc_msgSend(a1, sel_name);
  v45 = sub_1B222874C();
  v47 = v46;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v48 = sub_1B20C3C0C(140);
  *(_QWORD *)(v48 + 88) = sub_1B2137D90;
  *(_QWORD *)(v48 + 96) = 0;
  swift_release();
  v49 = **(_QWORD **)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  swift_bridgeObjectRetain();
  v50 = sub_1B2180BAC(0x100000000uLL, v49, 0, v48, 0x100000000uLL, v45, v47, -1.0);
  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  sub_1B1FEC0E4(v50, v43, v4);

  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  return v50;
}

uint64_t sub_1B1F37740(id a1, unint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float32x4_t v8;
  float32x4_t v9;
  _QWORD *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  __int128 v21;
  unint64_t v22;
  void *v23;
  float32x4_t v24;
  char **v25;
  float32x4_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  void *v36;
  id v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  unint64_t v43;
  id v44;
  id v45;
  uint64_t v46;
  void *v47;
  id v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  id v52;
  void *v53;
  id v54;
  char *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  int v61;
  __int16 v62;
  __int16 v63;
  int v64;
  __int16 v65;
  __int16 v66;
  int v67;
  __int16 v68;
  int v69;
  __int16 v70;
  __int16 v71;
  int v72;
  __int16 v73;
  __int16 v74;
  int v75;
  __int16 v76;
  __int16 v77;
  int v78;
  __int16 v79;
  __int16 v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  int v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  const float *v96;
  id v97;
  char *v98;
  id v99;
  float32x4_t v100;
  float32x4_t v101;
  __int128 v102;
  float32x4_t v103;
  uint64_t v104;
  BOOL v105;
  BOOL v106;
  BOOL v107;
  BOOL v108;
  BOOL v109;
  unint64_t v110;
  float *v111;
  unint64_t v112;
  const float *v113;
  const float *v114;
  float *v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  int v127;
  unint64_t v128;
  const __int16 *v129;
  id v130;
  char *v131;
  uint64_t v132;
  BOOL v133;
  BOOL v134;
  BOOL v135;
  BOOL v136;
  BOOL v137;
  unint64_t v138;
  __int16 *v139;
  unint64_t v140;
  const __int16 *v141;
  const __int16 *v142;
  __int16 *v143;
  char *v144;
  char *v145;
  unint64_t v146;
  int v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  int v152;
  _DWORD *v153;
  void *v154;
  id v155;
  unint64_t v156;
  char *v157;
  char *v158;
  int v159;
  __int16 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  int v165;
  _DWORD *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  char *v175;
  __int128 v176;
  id v177;
  char *v178;
  id v179;
  float v180;
  float32x2_t v181;
  float *v182;
  void *v183;
  id v184;
  _QWORD *v185;
  _QWORD *v186;
  char v187;
  unint64_t v188;
  unint64_t v189;
  _QWORD *v190;
  id v191;
  char **v192;
  id v193;
  char *v194;
  uint64_t v195;
  float32x4_t v196;
  float32x4_t v197;
  id v198;
  id v199;
  id v200;
  void *v201;
  id v202;
  id v203;
  void *v204;
  id v205;
  id v206;
  uint64_t v207;
  float32x4_t v208;
  float32x4_t v209;
  int32x2_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  uint64_t v214;
  int v215;
  id v216;
  void *v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  _QWORD *v222;
  char v223;
  uint64_t v224;
  unint64_t v225;
  unint64_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t *v230;
  uint64_t v231;
  id v232;
  uint64_t v233;
  uint64_t v234;
  int v235;
  _QWORD *v236;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  uint64_t v242;
  id v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t result;
  unint64_t v250;
  uint64_t v251;
  float32x4_t v252;
  float32x4_t v253;
  int v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char *v258;
  char *v259;
  float32x4_t v260;
  float32x4_t v261;
  id v262;
  __n128 v263;
  uint64_t v264;
  unint64_t v265;
  _BOOL4 v266;
  id v267;
  void *v268;
  unint64_t v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  char *v273;
  uint64_t v274;
  float32x4_t *v275;
  unint64_t v276;
  __int128 v277;
  unint64_t v278;
  __n128 v279;
  unint64_t v280;
  float32x4_t v281;
  float32x4_t v282;
  uint64_t v283;
  id v284;
  unint64_t v285;
  id v286;
  uint64_t v287;
  id v288;
  __int128 v289;
  float32x4_t v290;
  uint64_t v291;
  float32x4_t v292;
  float32x4_t v293;
  __int128 v294;
  float32x4_t v295;
  _QWORD *v296;
  id v297;
  uint64_t v298;
  unint64_t v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  id v305;
  float32x4x4_t v306;
  int16x8x4_t v307;
  int16x8x4_t v308;

  v254 = a3;
  v255 = a2;
  v257 = sub_1B2227FCC();
  v256 = *(_QWORD *)(v257 - 8);
  MEMORY[0x1E0C80A78](v257, v5);
  v259 = (char *)&v252 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  objc_msgSend(a1, sel_boundingBox);
  v261 = v8;
  objc_msgSend(a1, sel_boundingBox);
  v260 = v9;
  type metadata accessor for Mesh();
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0;
  v10[3] = 0;
  v11 = (char *)MEMORY[0x1E0DEE9D8];
  v10[4] = MEMORY[0x1E0DEE9D8];
  v10[5] = v11;
  v10[7] = 0;
  v10[8] = 0;
  v10[6] = 0;
  v296 = v10;
  v262 = objc_msgSend(a1, sel_vertexDescriptor);
  v287 = v3;
  if ((*(_BYTE *)(v3 + 16) & 2) != 0)
  {
    v12 = sub_1B1C68354(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v14 = *((_QWORD *)v12 + 2);
    v13 = *((_QWORD *)v12 + 3);
    v15 = v12;
    if (v14 >= v13 >> 1)
      v15 = sub_1B1C68354(v13 > 1, v14 + 1, 1, v12);
    *((_QWORD *)v15 + 2) = v14 + 1;
    v11 = v15;
    *(_QWORD *)&v15[8 * v14 + 32] = 4;
  }
  swift_bridgeObjectRetain();
  v16 = sub_1B1F3AFD4(v262, v11);
  v17 = v11;
  v18 = v16;
  v258 = v17;
  swift_bridgeObjectRelease();
  v19 = objc_msgSend(a1, sel_vertexBuffers);
  v290.i64[0] = sub_1B19F8F48(0, &qword_1EEF60FD0);
  v20 = sub_1B2228AB8();

  v22 = v20;
  if (v20 >> 62)
  {
    v250 = v20;
    swift_bridgeObjectRetain();
    v251 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    v23 = (void *)v251;
    v22 = v250;
  }
  else
  {
    v23 = *(void **)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v24 = v261;
  v24.i32[3] = 0;
  v26 = v260;
  v25 = &selRef__removeOwner;
  v26.i32[3] = 0;
  v291 = v7;
  v288 = a1;
  v253 = v24;
  v252 = v26;
  if (!v23)
  {
LABEL_123:
    swift_bridgeObjectRelease();
    v191 = objc_msgSend(a1, sel_submeshes);
    v192 = &selRef_maximumDrawableCount;
    if (v191)
    {
      v193 = v191;
      objc_msgSend(v191, sel_count);
      v194 = v259;
      sub_1B2229004();
      sub_1B2227FC0();
      v195 = MEMORY[0x1E0DEE9D8];
      if (*((_QWORD *)&v301 + 1))
      {
        sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF60FD8);
        v279 = (__n128)vsubq_f32(v252, v253);
        v196 = v261;
        v196.i32[3] = 1.0;
        v197 = v260;
        v278 = HIDWORD(v255);
        v197.i32[3] = 1.0;
        v292 = vaddq_f32(v196, v197);
        v290 = vsubq_f32(v197, v196);
        v277 = xmmword_1B226D240;
        v276 = 0xD000000000000019;
        v275 = (float32x4_t *)0x80000001B2344970;
        v280 = 0x80000001B2344990;
        do
        {
          while ((swift_dynamicCast() & 1) == 0)
          {
            sub_1B2227FC0();
            if (!*((_QWORD *)&v301 + 1))
              goto LABEL_154;
          }
          v297 = v193;
          v198 = (id)v298;
          v199 = objc_msgSend((id)v298, sel_indexBuffer);
          v200 = objc_msgSend(v199, sel_map);
          v201 = *(void **)(v291 + 16);
          v286 = v200;
          v202 = objc_msgSend(v200, sel_bytes);
          v305 = v199;
          v203 = objc_msgSend(v201, sel_newBufferWithBytes_length_options_, v202, objc_msgSend(v199, sel_length), 0);
          if (v203)
          {
            swift_unknownObjectRetain();
            v204 = (void *)sub_1B2228728();
            objc_msgSend(v203, sel_setLabel_, v204);
            swift_unknownObjectRelease();

          }
          swift_unknownObjectRetain();
          v205 = objc_msgSend(v305, sel_length);
          swift_unknownObjectRetain_n();
          v284 = objc_msgSend(v198, sel_indexCount);
          v206 = objc_msgSend(v198, sel_indexType);
          v207 = 2;
          if (v206 == (id)32)
            v207 = 4;
          v283 = v207;
          v208 = v292;
          v209 = v290;
          if ((*(_BYTE *)(v287 + 16) & 1) != 0)
          {
            *(float *)v210.i32 = sub_1B1BBE18C(v279);
            v211 = (float32x4_t)vdupq_lane_s32(v210, 0);
            v212 = vdivq_f32(v261, v211);
            v213 = vdivq_f32(v260, v211);
            v212.i32[3] = 1.0;
            v213.i32[3] = 1.0;
            v208 = vaddq_f32(v213, v212);
            v209 = vsubq_f32(v213, v212);
          }
          v281 = v209;
          v282 = v208;
          *(_QWORD *)&v289 = v198;
          v285 = (unint64_t)v205;
          if ((v254 & 1) != 0)
          {
            v216 = objc_msgSend(v198, sel_material);
            if (!v216)
            {
              if (qword_1ED4BF430 != -1)
                swift_once();
              v298 = 0;
              v299 = 0xE000000000000000;
              v274 = qword_1ED4D0FB0;
              swift_retain();
              sub_1B2229430();
              swift_bridgeObjectRelease();
              v298 = 0x747261506873654DLL;
              v299 = 0xE900000000000020;
              v232 = objc_msgSend(v198, v192[83]);
              sub_1B222874C();

              sub_1B2228890();
              swift_bridgeObjectRelease();
              sub_1B2228890();
              v233 = v298;
              v234 = v299;
              v235 = sub_1B2228E90();
              if (qword_1ED4BF658 != -1)
                swift_once();
              v298 = 0;
              swift_retain();
              sub_1B1F1AD70(v235, &v298, v233, v234);
              swift_release();
              swift_bridgeObjectRelease();
              swift_release();
              swift_bridgeObjectRetain();
              v236 = v296;
              v222 = (_QWORD *)v296[5];
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v214 = 0;
              v224 = 0;
              v236[5] = v222;
              if ((isUniquelyReferenced_nonNull_native & 1) != 0)
                goto LABEL_144;
LABEL_153:
              v222 = sub_1B1C68118(0, v222[2] + 1, 1, v222);
              v296[5] = v222;
              v224 = v214;
              goto LABEL_144;
            }
            v217 = v216;
            v218 = sub_1B1F370C8(v216);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v195 = (uint64_t)sub_1B1C63D98(0, *(_QWORD *)(v195 + 16) + 1, 1, (char *)v195);
            v220 = *(_QWORD *)(v195 + 16);
            v219 = *(_QWORD *)(v195 + 24);
            if (v220 >= v219 >> 1)
              v195 = (uint64_t)sub_1B1C63D98(v219 > 1, v220 + 1, 1, (char *)v195);
            *(_QWORD *)(v195 + 16) = v220 + 1;
            *(_QWORD *)(v195 + 8 * v220 + 32) = v218;

            v214 = *(_QWORD *)(v195 + 16) - 1;
          }
          else
          {
            swift_bridgeObjectRelease();
            sub_1B1C27668(0, (unint64_t *)&qword_1ED4BAE30);
            v195 = swift_allocObject();
            v214 = 0;
            *(_OWORD *)(v195 + 16) = v277;
            v215 = v278;
            *(_DWORD *)(v195 + 32) = v255;
            *(_DWORD *)(v195 + 36) = v215;
          }
          swift_bridgeObjectRetain();
          v221 = v296;
          v222 = (_QWORD *)v296[5];
          v223 = swift_isUniquelyReferenced_nonNull_native();
          v221[5] = v222;
          v224 = v214;
          if ((v223 & 1) == 0)
            goto LABEL_153;
LABEL_144:
          v226 = v222[2];
          v225 = v222[3];
          if (v226 >= v225 >> 1)
          {
            v222 = sub_1B1C68118(v225 > 1, v226 + 1, 1, v222);
            v296[5] = v222;
          }
          v227.i64[0] = 0x3F0000003F000000;
          v227.i64[1] = 0x3F0000003F000000;
          v228 = vmulq_f32(v281, v227);
          v222[2] = v226 + 1;
          v229 = vmulq_f32(v282, v227);
          v230 = (float32x4_t *)&v222[16 * v226];
          v230[2].i64[0] = 3;
          v230[2].i64[1] = 0;
          v230[3].i64[0] = 0;
          v230[3].i64[1] = v224;
          v230[4].i64[0] = (uint64_t)v203;
          v230[4].i64[1] = 0;
          v230[5].i64[0] = v285;
          v230[5].i64[1] = 0;
          v230[6].i8[0] = 1;
          v231 = v283;
          v230[6].i64[1] = (uint64_t)v284;
          v230[7].i64[0] = v231;
          v230[7].i64[1] = MEMORY[0x1E0DEE9D8];
          v230[8] = v229;
          v230[9] = v228;
          swift_bridgeObjectRelease();
          swift_unknownObjectRelease();

          swift_unknownObjectRelease_n();
          v194 = v259;
          sub_1B2227FC0();
          v192 = &selRef_maximumDrawableCount;
          v193 = v297;
        }
        while (*((_QWORD *)&v301 + 1));
      }
LABEL_154:

      (*(void (**)(char *, uint64_t))(v256 + 8))(v194, v257);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v195 = MEMORY[0x1E0DEE9D8];
    }
    v238 = sub_1B1E23AC0((_OWORD *)v18);
    v239 = (uint64_t)v296;
    v296[2] = v238;
    *(_QWORD *)(v239 + 24) = v240;
    swift_release();
    v241 = v288;
    *(_QWORD *)(v239 + 48) = objc_msgSend(v288, sel_vertexCount);
    v242 = *(_QWORD *)(v287 + 24);
    swift_retain();
    v243 = objc_msgSend(v241, v192[83]);
    v244 = sub_1B222874C();
    v246 = v245;

    v247 = **(_QWORD **)(v242 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    LOBYTE(v300) = 1;
    v248 = sub_1B2180EA8(0x100000000uLL, v247, v239, v195, v244, v246);
    swift_release();
    swift_release();

    swift_release();
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    return v248;
  }
  v27 = 0;
  v282.i64[0] = v18 + 16;
  v285 = v22 & 0xC000000000000001;
  v272 = v22;
  v265 = v22 + 32;
  v263 = (__n128)vsubq_f32(v26, v24);
  v292 = (float32x4_t)v263;
  v293 = v26;
  v294 = v21;
  v295 = 0u;
  v271 = 0xD000000000000014;
  v270 = 0x80000001B2344950;
  v264 = MEMORY[0x1E0DEE9B8] + 8;
  v286 = v23;
  while (1)
  {
    if (v285)
    {
      v28 = (id)MEMORY[0x1B5E21018](v27, v272);
    }
    else
    {
      v28 = *(id *)(v265 + 8 * (_QWORD)v27);
      swift_unknownObjectRetain();
    }
    v29 = objc_msgSend(v28, sel_map, v252.i64[0], v252.i64[1], v253.i64[0], v253.i64[1]);
    v30 = v29;
    v31 = v27 == (id)*(unsigned __int16 *)(v18 + 142) && *(_WORD *)(v18 + 140) == 31;
    v305 = v29;
    v297 = v28;
    if (!v31)
      goto LABEL_42;
    v32 = *(unsigned __int16 *)(v18 + 102);
    v279.n128_u64[0] = *(unsigned int *)(v18 + 96);
    v33 = objc_msgSend(a1, sel_vertexBuffers);
    v34 = sub_1B2228AB8();

    if ((v34 & 0xC000000000000001) != 0)
    {
      v35 = (void *)MEMORY[0x1B5E21018](v32, v34);
    }
    else
    {
      v35 = *(void **)(v34 + 8 * v32 + 32);
      swift_unknownObjectRetain();
    }
    swift_bridgeObjectRelease();
    v283 = (uint64_t)v35;
    v36 = a1;
    if (v27 == (id)v32)
    {
      v278 = (unint64_t)objc_msgSend(v305, v25[433]);
    }
    else
    {
      v37 = objc_msgSend(v35, sel_map);
      v278 = (unint64_t)objc_msgSend(v37, v25[433]);

    }
    v38 = *(unsigned __int16 *)(v18 + 110);
    *(_QWORD *)&v277 = *(unsigned int *)(v18 + 104);
    v39 = objc_msgSend(v36, sel_vertexBuffers);
    v40 = sub_1B2228AB8();

    if ((v40 & 0xC000000000000001) != 0)
    {
      *(_QWORD *)&v289 = MEMORY[0x1B5E21018](v38, v40);
    }
    else
    {
      *(_QWORD *)&v289 = *(_QWORD *)(v40 + 8 * v38 + 32);
      swift_unknownObjectRetain();
    }
    swift_bridgeObjectRelease();
    v280 = v38;
    v41 = v305;
    v281.i64[0] = v32;
    if (v27 == (id)v38)
    {
      v275 = (float32x4_t *)objc_msgSend(v305, v25[433]);
    }
    else
    {
      v42 = objc_msgSend((id)v289, sel_map);
      v275 = (float32x4_t *)objc_msgSend(v42, v25[433]);

    }
    v43 = *(unsigned __int16 *)(v18 + 118);
    v274 = *(unsigned int *)(v18 + 112);
    v44 = v36;
    v45 = objc_msgSend(v36, sel_vertexBuffers);
    v46 = sub_1B2228AB8();

    v7 = v291;
    if ((v46 & 0xC000000000000001) != 0)
    {
      v47 = (void *)MEMORY[0x1B5E21018](v43, v46);
    }
    else
    {
      v47 = *(void **)(v46 + 8 * v43 + 32);
      swift_unknownObjectRetain();
    }
    swift_bridgeObjectRelease();
    if (v27 == (id)v43)
    {
      v273 = (char *)objc_msgSend(v41, v25[433]);
    }
    else
    {
      v48 = objc_msgSend(v47, sel_map);
      v273 = (char *)objc_msgSend(v48, v25[433]);

    }
    v49 = (char *)objc_msgSend(v41, v25[433]);
    v50 = *(unsigned int *)(v18 + 136);
    v51 = (unint64_t)objc_msgSend(v44, sel_vertexCount);
    if ((v51 & 0x8000000000000000) != 0)
      break;
    v284 = v27;
    v276 = v51;
    if (HIDWORD(v51))
      break;
    v52 = objc_msgSend(v44, sel_submeshes);
    if (v52)
    {
      v53 = v52;
      v268 = v47;
      v269 = v43;
      objc_msgSend(v52, sel_count);
      v267 = v53;
      v54 = objc_msgSend(v53, sel_objectAtIndexedSubscript_, 0);
      sub_1B22292EC();
      swift_unknownObjectRelease();
      sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF60FD8);
      swift_dynamicCast();
      v55 = (char *)v298;
      v56 = objc_msgSend(objc_msgSend((id)v298, sel_indexBuffer), sel_map);
      swift_unknownObjectRelease();
      v57 = objc_msgSend(v56, v25[433]);

      v58 = (uint64_t)objc_msgSend(v55, sel_indexCount);
      if (v58 <= -3 || v58 >= 0x300000000)
        break;
      v59 = (uint64_t)v57;
      v279.n128_u64[0] += v278;
      v278 = (unint64_t)v275 + v277;
      *(_QWORD *)&v277 = &v273[v274];
      v275 = (float32x4_t *)&v49[v50];
      v274 = v58 / 3;
      v60 = objc_msgSend(v55, sel_indexType);
      v61 = *(_DWORD *)(v18 + 16);
      v266 = v60 == (id)16;
      v62 = *(_WORD *)(v18 + 20);
      v31 = v60 == (id)32;
      v63 = *(_WORD *)(v18 + 22);
      v64 = *(_DWORD *)(v18 + 24);
      v65 = *(_WORD *)(v18 + 28);
      v66 = *(_WORD *)(v18 + 30);
      v67 = *(_DWORD *)(v18 + 32);
      v68 = *(_WORD *)(v18 + 36);
      LOWORD(v60) = *(_WORD *)(v18 + 38);
      v69 = *(_DWORD *)(v18 + 40);
      v70 = *(_WORD *)(v18 + 44);
      v71 = *(_WORD *)(v18 + 46);
      v72 = *(_DWORD *)(v18 + 48);
      v73 = *(_WORD *)(v18 + 52);
      v74 = *(_WORD *)(v18 + 54);
      v75 = *(_DWORD *)(v18 + 56);
      v76 = *(_WORD *)(v18 + 60);
      v77 = *(_WORD *)(v18 + 62);
      v273 = v55;
      v78 = *(_DWORD *)(v18 + 64);
      v79 = *(_WORD *)(v18 + 68);
      v80 = *(_WORD *)(v18 + 70);
      v81 = *(_DWORD *)(v18 + 72);
      v82 = *(_DWORD *)(v18 + 80);
      v83 = *(_DWORD *)(v18 + 88);
      LODWORD(v300) = v61;
      DWORD2(v300) = v64;
      LODWORD(v301) = v67;
      DWORD2(v301) = v69;
      LODWORD(v302) = v72;
      DWORD2(v302) = v75;
      LODWORD(v303) = v78;
      DWORD2(v303) = v81;
      LODWORD(v304) = v82;
      DWORD2(v304) = v83;
      v84 = *((_DWORD *)&v300 + 2 * v281.i64[0]);
      LODWORD(v300) = v61;
      DWORD2(v300) = v64;
      LODWORD(v301) = v67;
      DWORD2(v301) = v69;
      LODWORD(v302) = v72;
      DWORD2(v302) = v75;
      LODWORD(v303) = v78;
      DWORD2(v303) = v81;
      LODWORD(v304) = v82;
      DWORD2(v304) = v83;
      v85 = *((_DWORD *)&v300 + 2 * v280);
      LODWORD(v300) = v61;
      WORD2(v300) = v62;
      WORD3(v300) = v63;
      DWORD2(v300) = v64;
      WORD6(v300) = v65;
      HIWORD(v300) = v66;
      LODWORD(v301) = v67;
      WORD2(v301) = v68;
      WORD3(v301) = (_WORD)v60;
      DWORD2(v301) = v69;
      WORD6(v301) = v70;
      HIWORD(v301) = v71;
      LODWORD(v302) = v72;
      WORD2(v302) = v73;
      WORD3(v302) = v74;
      DWORD2(v302) = v75;
      WORD6(v302) = v76;
      HIWORD(v302) = v77;
      LODWORD(v303) = v78;
      WORD2(v303) = v79;
      WORD3(v303) = v80;
      DWORD2(v303) = v81;
      HIDWORD(v303) = *(_DWORD *)(v18 + 76);
      LODWORD(v304) = v82;
      DWORD1(v304) = *(_DWORD *)(v18 + 84);
      DWORD2(v304) = v83;
      if (v31)
        v86 = 4;
      else
        v86 = 2 * v266;
      computeTangents(v274, v276, v86, v59, v279.n128_i64[0], v84, v278, v85, v275, v277, *((_DWORD *)&v300 + 2 * v269));

      v7 = v291;
      v44 = v288;
      v25 = &selRef__removeOwner;
    }
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    v27 = v284;
    v30 = v305;
    a1 = v44;
    v28 = v297;
LABEL_42:
    if (v27 == (id)*(unsigned __int16 *)(v18 + 166) && *(_WORD *)(v18 + 164) == 30)
    {
      v87 = (uint64_t)objc_msgSend(v28, sel_length);
      v88 = *(_OWORD *)(v18 + 32);
      v89 = *(_OWORD *)(v18 + 48);
      v90 = *(_OWORD *)(v18 + 64);
      v91 = *(_QWORD *)(v18 + 80);
      v92 = *(_DWORD *)(v18 + 88);
      v300 = *(_OWORD *)(v18 + 16);
      v301 = v88;
      v302 = v89;
      v303 = v90;
      *(_QWORD *)&v304 = v91;
      DWORD2(v304) = v92;
      v93 = (char *)v27;
      v94 = 8 * (_QWORD)v27;
      v95 = v87 / *(unsigned int *)((char *)&v300 + v94);
      v96 = (const float *)objc_msgSend(v30, v25[433]);
      v97 = objc_msgSend(*(id *)(v7 + 16), sel_newBufferWithLength_options_, 16 * v95, 0);
      v98 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v99 = v97;
      v100 = v292;
      v101 = v293;
      v102 = v294;
      v103 = v295;
      if (v95)
      {
        if (v95 >= 0x18
          && ((v104 = 16 * (v95 - 1), &v98[v104] >= v98) ? (v105 = &v98[v104 + 4] >= v98 + 4) : (v105 = 0),
              v105 ? (v106 = &v98[v104 + 8] >= v98 + 8) : (v106 = 0),
              v106 ? (v107 = &v98[v104 + 12] >= v98 + 12) : (v107 = 0),
              v107 ? (v108 = (v95 - 1) >> 60 == 0) : (v108 = 0),
              v108 && (v98 < (char *)&v96[3 * v95] ? (v109 = v96 >= (const float *)&v98[16 * v95]) : (v109 = 1), v109)))
        {
          v110 = v95 & 0xFFFFFFFFFFFFFFF8;
          v111 = (float *)(v98 + 64);
          v112 = v95 & 0xFFFFFFFFFFFFFFF8;
          v113 = v96;
          do
          {
            v114 = v113;
            *(float32x4x3_t *)v100.f32 = vld3q_f32(v114);
            v114 += 12;
            *(float32x4x3_t *)v306.val[0].f32 = vld3q_f32(v114);
            v306.val[3] = v103;
            v115 = v111 - 16;
            vst4q_f32(v115, *(float32x4x4_t *)v100.f32);
            vst4q_f32(v111, v306);
            v111 += 32;
            v113 += 24;
            v112 -= 8;
          }
          while (v112);
          if (v95 == v110)
            goto LABEL_98;
        }
        else
        {
          v110 = 0;
        }
        v144 = (char *)&v96[3 * v110 + 2];
        v145 = &v98[16 * v110 + 8];
        v146 = v95 - v110;
        do
        {
          v147 = *(_DWORD *)v144;
          *((_QWORD *)v145 - 1) = *((_QWORD *)v144 - 1);
          *(_DWORD *)v145 = v147;
          *((_DWORD *)v145 + 1) = 0;
          v144 += 12;
          v145 += 16;
          --v146;
        }
        while (v146);
      }
LABEL_98:
      v148 = *(_OWORD *)(v18 + 32);
      v149 = *(_OWORD *)(v18 + 48);
      v150 = *(_OWORD *)(v18 + 64);
      v151 = *(_OWORD *)(v18 + 80);
      v300 = *(_OWORD *)(v18 + 16);
      v301 = v148;
      v302 = v149;
      v303 = v150;
      v304 = v151;
      v152 = *(_DWORD *)((char *)&v300 + v94 + 4);
      v153 = (_DWORD *)(v282.i64[0] + v94);
      *v153 = 16;
      v153[1] = v152;
      *(_WORD *)(v18 + 164) = 31;
LABEL_104:
      a1 = v288;
      goto LABEL_105;
    }
    v116 = *(_OWORD *)(v18 + 32);
    v117 = *(_OWORD *)(v18 + 48);
    v118 = *(_OWORD *)(v18 + 64);
    v119 = *(_QWORD *)(v18 + 80);
    v120 = *(_DWORD *)(v18 + 88);
    v300 = *(_OWORD *)(v18 + 16);
    v301 = v116;
    v302 = v117;
    v303 = v118;
    *(_QWORD *)&v304 = v119;
    DWORD2(v304) = v120;
    v93 = (char *)v27;
    v121 = 8 * (_QWORD)v27;
    if ((*(_DWORD *)((_BYTE *)&v300 + v121) & 3) != 0)
    {
      v122 = (uint64_t)objc_msgSend(v297, sel_length);
      v123 = *(_OWORD *)(v18 + 32);
      v124 = *(_OWORD *)(v18 + 48);
      v125 = *(_OWORD *)(v18 + 64);
      v126 = *(_QWORD *)(v18 + 80);
      v127 = *(_DWORD *)(v18 + 88);
      v300 = *(_OWORD *)(v18 + 16);
      v301 = v123;
      v302 = v124;
      v303 = v125;
      *(_QWORD *)&v304 = v126;
      DWORD2(v304) = v127;
      v128 = v122 / *(unsigned int *)((char *)&v300 + v121);
      v129 = (const __int16 *)objc_msgSend(v30, v25[433]);
      v130 = objc_msgSend(*(id *)(v7 + 16), sel_newBufferWithLength_options_, 8 * v128, 0);
      v131 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v99 = v130;
      v100 = v292;
      v101 = v293;
      v102 = v294;
      v103 = v295;
      if (v128)
      {
        if (v128 < 0x18
          || ((v132 = 8 * (v128 - 1), &v131[v132] >= v131) ? (v133 = &v131[v132 + 2] >= v131 + 2) : (v133 = 0),
              v133 ? (v134 = &v131[v132 + 4] >= v131 + 4) : (v134 = 0),
              v134 ? (v135 = &v131[v132 + 6] >= v131 + 6) : (v135 = 0),
              v135 ? (v136 = (v128 - 1) >> 61 == 0) : (v136 = 0),
              !v136
           || (v131 < (char *)&v129[3 * v128] ? (v137 = v129 >= (const __int16 *)&v131[8 * v128]) : (v137 = 1), !v137)))
        {
          v138 = 0;
          goto LABEL_101;
        }
        v138 = v128 & 0xFFFFFFFFFFFFFFF0;
        v139 = (__int16 *)(v131 + 64);
        v140 = v128 & 0xFFFFFFFFFFFFFFF0;
        v141 = v129;
        do
        {
          v142 = v141;
          *(int16x8x3_t *)v307.val[0].i8 = vld3q_s16(v142);
          v142 += 24;
          v307.val[3] = (int16x8_t)v103;
          *(int16x8x3_t *)v308.val[0].i8 = vld3q_s16(v142);
          v308.val[3] = (int16x8_t)v103;
          v143 = v139 - 32;
          vst4q_s16(v143, v307);
          vst4q_s16(v139, v308);
          v139 += 64;
          v141 += 48;
          v140 -= 16;
        }
        while (v140);
        if (v128 != v138)
        {
LABEL_101:
          v156 = v128 - v138;
          v157 = &v131[8 * v138 + 4];
          v158 = (char *)&v129[3 * v138 + 2];
          do
          {
            v159 = *((_DWORD *)v158 - 1);
            v160 = *(_WORD *)v158;
            v158 += 6;
            *((_DWORD *)v157 - 1) = v159;
            *(_WORD *)v157 = v160;
            *((_WORD *)v157 + 1) = 0;
            v157 += 8;
            --v156;
          }
          while (v156);
        }
      }
      v161 = *(_OWORD *)(v18 + 32);
      v162 = *(_OWORD *)(v18 + 48);
      v163 = *(_OWORD *)(v18 + 64);
      v164 = *(_OWORD *)(v18 + 80);
      v300 = *(_OWORD *)(v18 + 16);
      v301 = v161;
      v302 = v162;
      v303 = v163;
      v304 = v164;
      v165 = *(_DWORD *)((char *)&v300 + v121 + 4);
      v166 = (_DWORD *)(v282.i64[0] + v121);
      *v166 = 8;
      v166[1] = v165;
      *(_WORD *)(v18 + 172) = 18;
      goto LABEL_104;
    }
    v154 = *(void **)(v7 + 16);
    v155 = objc_msgSend(v30, v25[433]);
    v99 = objc_msgSend(v154, sel_newBufferWithBytes_length_options_, v155, objc_msgSend(v297, sel_length), 0);
    v100 = v292;
    v101 = v293;
    v102 = v294;
    v103 = v295;
LABEL_105:
    v292 = v100;
    v293 = v101;
    v294 = v102;
    v295 = v103;
    v167 = v93;
    if ((*(_BYTE *)(v287 + 16) & 1) != 0 && v93 == (char *)*(unsigned __int16 *)(v18 + 102))
    {
      v168 = *(unsigned int *)(v18 + 96);
      v169 = *(_OWORD *)(v18 + 32);
      v170 = *(_OWORD *)(v18 + 48);
      v171 = *(_OWORD *)(v18 + 64);
      v172 = *(_QWORD *)(v18 + 80);
      v173 = *(_DWORD *)(v18 + 88);
      v300 = *(_OWORD *)(v18 + 16);
      v301 = v169;
      v302 = v170;
      v303 = v171;
      *(_QWORD *)&v304 = v172;
      DWORD2(v304) = v173;
      v174 = *((unsigned int *)&v300 + 2 * (_QWORD)v93);
      v175 = (char *)objc_msgSend(a1, sel_vertexCount);
      *(float *)&v176 = sub_1B1BBE18C(v263);
      v177 = v297;
      if (v99)
      {
        v289 = v176;
        v178 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        v179 = v99;
        v180 = *(float *)&v289;
        if (v175)
        {
          v181 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v289, 0);
          v182 = (float *)&v178[v168 + 8];
          do
          {
            *((float32x2_t *)v182 - 1) = vdiv_f32(*(float32x2_t *)(v182 - 2), v181);
            *v182 = *v182 / v180;
            v182 = (float *)((char *)v182 + v174);
            --v175;
          }
          while (v175);
        }
LABEL_113:
        *(_QWORD *)&v300 = 0;
        *((_QWORD *)&v300 + 1) = 0xE000000000000000;
        swift_unknownObjectRetain();
        sub_1B2229430();
        swift_bridgeObjectRelease();
        *(_QWORD *)&v300 = v271;
        *((_QWORD *)&v300 + 1) = v270;
        v298 = (uint64_t)v167;
        sub_1B2229A0C();
        sub_1B2228890();
        swift_bridgeObjectRelease();
        v183 = (void *)sub_1B2228728();
        swift_bridgeObjectRelease();
        objc_msgSend(v99, sel_setLabel_, v183);
        swift_unknownObjectRelease();

      }
    }
    else
    {
      v177 = v297;
      if (v99)
        goto LABEL_113;
    }
    swift_unknownObjectRetain();
    v184 = objc_msgSend(v177, sel_length);
    v185 = v296;
    v186 = (_QWORD *)v296[4];
    v187 = swift_isUniquelyReferenced_nonNull_native();
    v185[4] = v186;
    if ((v187 & 1) == 0)
    {
      v186 = sub_1B1C68220(0, v186[2] + 1, 1, v186);
      v296[4] = v186;
    }
    v189 = v186[2];
    v188 = v186[3];
    if (v189 >= v188 >> 1)
      v186 = sub_1B1C68220(v188 > 1, v189 + 1, 1, v186);
    v27 = v167 + 1;
    v186[2] = v189 + 1;
    v190 = &v186[5 * v189];
    v190[4] = v99;
    v190[5] = 0;
    v190[6] = v184;
    v190[7] = 0;
    *((_BYTE *)v190 + 64) = 1;
    v296[4] = v186;
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();

    v25 = &selRef__removeOwner;
    v7 = v291;
    if (v27 == v286)
      goto LABEL_123;
  }
  result = sub_1B222967C();
  __break(1u);
  return result;
}

void sub_1B1F3921C(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  char v19;
  float64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26;
  float64_t *v27;
  float64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  char isUniquelyReferenced_nonNull_native;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  unint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  __n128 v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  int32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int8x16_t v85;
  float32x4_t v86;
  int32x4_t v87;
  float v88;
  float32x4_t v89;
  float v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v95;
  int8x16_t v96;
  _OWORD *v97;
  float v98;
  float32x2_t v99;
  float32x2_t v100;
  float32x2_t v101;
  uint64_t v102;
  int32x2_t v103;
  float32x4_t v104;
  _OWORD *v105;
  float32x2_t v106;
  float32x2_t v107;
  __n128 v108;
  uint64_t v109;
  void *v110;
  id v111;
  id v112;
  id v113;
  id v114;
  id v115;
  void *v116;
  void *v117;
  void *v118;
  void *v119;
  unint64_t v120;
  unint64_t v121;
  unint64_t v122;
  char *v123;
  char v124;
  unint64_t v125;
  unint64_t v126;
  char *v127;
  id v128;
  void *v129;
  id v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  id v134;
  void *v135;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  __n128 v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  __n128 v148;
  float32x4_t v149;
  __n128 v150;
  _QWORD *v151;
  uint64_t v152;
  float64x2_t v153;
  float64x2_t v154;
  float64x2_t v155;
  __int128 v156;
  float64x2_t v157;
  float64_t v158;
  float64x2_t v159;
  float64x2_t v160;
  float64x2_t v161;
  float64x2_t v162;
  float64x2_t v163;
  float64x2_t v164;
  __int128 v165;
  float64_t v166;
  float64x2_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  char v172[8];
  float64_t v173;
  __int128 v174;
  _QWORD v175[2];

  v5 = **(_QWORD **)(*(_QWORD *)(v3 + 24) + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v6 = a1;
  LOBYTE(v153.f64[0]) = 1;
  v140 = sub_1B2180908(0x100000000uLL, v5, v6);
  v138 = v4;

  v7 = objc_msgSend(v6, sel_components);
  sub_1B19F8F48(0, &qword_1EEF60FC0);
  v8 = sub_1B2228AB8();

  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    v9 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    v139 = v6;
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
    v139 = v6;
    if (v9)
    {
LABEL_3:
      v10 = 0;
      while (1)
      {
        if ((v8 & 0xC000000000000001) != 0)
          MEMORY[0x1B5E21018](v10, v8);
        else
          swift_unknownObjectRetain();
        objc_opt_self();
        v12 = swift_dynamicCastObjCClass();
        if (v12)
        {
          v13 = (void *)v12;
          swift_unknownObjectRetain();
          objc_msgSend(v13, sel_geometryBindTransform);
          v14 = objc_msgSend(v13, sel_skeleton);
          if (v14)
          {
            v15 = v14;
            v16 = v151[5];
            if (!*(_QWORD *)(v16 + 16))
              goto LABEL_18;
            v17 = v14;
            swift_bridgeObjectRetain();
            v18 = sub_1B1DC4BA0((uint64_t)v17);
            if ((v19 & 1) == 0)
            {
              swift_bridgeObjectRelease();

LABEL_18:
              swift_bridgeObjectRelease();
              sub_1B1F3BBA8();
              swift_allocError();
              *v22 = xmmword_1B2244C80;
              swift_willThrow();
              swift_unknownObjectRelease_n();

              return;
            }
            v20 = *(double *)(*(_QWORD *)(v16 + 56) + 8 * v18);

            swift_bridgeObjectRelease();
            v167.f64[0] = v20;
            v168 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v153), v155);
            v169 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v157), v159);
            v170 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v160), v161);
            v171 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v162), v163);
            swift_retain();
            sub_1B1BF7DD0((__int128 *)&v167, v140);
            swift_release();
            sub_1B1C27668(0, &qword_1ED4BAFF0);
            v21 = swift_allocObject();
            *(_OWORD *)(v21 + 16) = xmmword_1B226D240;
            sub_1B2229430();
            sub_1B2228890();
            v157 = (float64x2_t)v169;
            v159 = (float64x2_t)v170;
            v160 = (float64x2_t)v171;
            v153 = v167;
            v155 = (float64x2_t)v168;
            sub_1B22295EC();
            *(_QWORD *)(v21 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v21 + 32) = 0;
            *(_QWORD *)(v21 + 40) = 0xE000000000000000;
            sub_1B222A048();

            swift_bridgeObjectRelease();
          }
          swift_unknownObjectRelease();
        }
        else
        {
          sub_1B1C27668(0, &qword_1ED4BAFF0);
          v11 = swift_allocObject();
          *(_OWORD *)(v11 + 16) = xmmword_1B226D240;
          v153.f64[0] = 0.0;
          v153.f64[1] = -2.68156159e154;
          sub_1B2229430();
          sub_1B2228890();
          sub_1B22295EC();
          *(_QWORD *)(v11 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v11 + 32) = 0;
          *(_QWORD *)(v11 + 40) = 0xE000000000000000;
          sub_1B222A048();
          swift_bridgeObjectRelease();
        }
        ++v10;
        swift_unknownObjectRelease();
        if (v9 == v10)
        {
          swift_bridgeObjectRelease();
          v6 = v139;
          goto LABEL_21;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
LABEL_21:
  objc_opt_self();
  v23 = swift_dynamicCastObjCClass();
  v24 = v4;
  v25 = v151;
  if (v23)
  {
    v26 = (void *)v23;
    type metadata accessor for SkeletonData();
    v27 = (float64_t *)swift_allocObject();
    v28 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)v27 + 2) = MEMORY[0x1E0DEE9D8];
    v27[3] = v28;
    v27[4] = v28;
    v27[5] = v28;
    v27[6] = v28;
    v29 = v139;
    v30 = objc_msgSend(v26, sel_jointPaths);
    v31 = sub_1B2228AB8();

    *((_QWORD *)v27 + 2) = v31;
    v32 = objc_msgSend(v26, sel_jointBindTransforms);
    v33 = sub_1B2228EE4();

    *((_QWORD *)v27 + 3) = v33;
    v34 = objc_msgSend(v26, sel_jointRestTransforms);
    v35 = sub_1B2228EE4();

    *((_QWORD *)v27 + 4) = v35;
    sub_1B20482A0();
    *(_QWORD *)&v154.f64[0] = v27;
    v154.f64[1] = v28;
    *(float64_t *)&v156 = v28;
    *((float64_t *)&v156 + 1) = v28;
    v158 = v28;
    v25 = v151;
    swift_retain();
    sub_1B20481AC();
    v164 = v154;
    v165 = v156;
    v166 = v158;
    sub_1B1F3BBF4((uint64_t)&v164, (uint64_t)v172);
    v173 = v164.f64[1];
    v174 = v165;
    *(float64_t *)v175 = v166;
    swift_retain();
    sub_1B1B7C5AC((uint64_t)v172);
    sub_1B1B28C44((uint64_t)&v173);
    sub_1B1B28C44((uint64_t)&v174);
    sub_1B1B28C44((uint64_t)&v174 + 8);
    sub_1B1B28C44((uint64_t)v175);
    sub_1B1BF7EBC((uint64_t)&v164, v140);
    swift_release();
    sub_1B19ED720((uint64_t)v172);
    sub_1B1B28C6C((uint64_t)&v173);
    sub_1B1B28C6C((uint64_t)&v174);
    sub_1B1B28C6C((uint64_t)&v174 + 8);
    sub_1B1B28C6C((uint64_t)v175);
    v36 = v29;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v152 = v151[5];
    v151[5] = 0x8000000000000000;
    sub_1B1B88504(v140, v26, isUniquelyReferenced_nonNull_native);
    v151[5] = v152;
    v6 = v139;
    swift_release();

    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  v38 = objc_msgSend(v6, sel_name);
  v39 = sub_1B222874C();
  v41 = v40;

  if (v39 == 0x6F6974616D696E41 && v41 == 0xE90000000000006ELL)
  {
    swift_bridgeObjectRelease();
    goto LABEL_27;
  }
  v42 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v42 & 1) != 0)
  {
LABEL_27:
    v43 = v139;
    v44 = objc_msgSend(v139, sel_path);
    sub_1B222874C();

    MEMORY[0x1E0C80A78](v45, v46);
    v47 = swift_bridgeObjectRetain();
    v48 = sub_1B1F3ACD0(v47, (uint64_t (*)(id, void *))sub_1B1F3BBEC);
    v50 = v49;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!v48)
      goto LABEL_34;

    v51 = objc_msgSend(v139, sel_parent);
    if (v51)
    {
      v52 = v51;
      objc_opt_self();
      v53 = swift_dynamicCastObjCClass();
      if (v53)
      {
        v54 = v25[5];
        if (*(_QWORD *)(v54 + 16))
        {
          v55 = v53;
          v56 = v52;
          swift_bridgeObjectRetain();
          v57 = sub_1B1DC4BA0(v55);
          if ((v58 & 1) != 0)
          {
            v59 = *(_QWORD *)(*(_QWORD *)(v54 + 56) + 8 * v57);

            swift_bridgeObjectRelease();
            v60 = **(_QWORD **)(v25[3] + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
            swift_retain();
            sub_1B21806B0(0x100000000uLL, v60, v59, v50);

            swift_release_n();
            goto LABEL_33;
          }

          swift_bridgeObjectRelease();
        }
        sub_1B1F3BBA8();
        swift_allocError();
        *v105 = xmmword_1B2244C80;
        swift_willThrow();
        swift_release();

        return;
      }

    }
    sub_1B1F3BBA8();
    swift_allocError();
    *v97 = xmmword_1B2244C80;
    swift_willThrow();
    swift_release();
    return;
  }
LABEL_33:
  v43 = v139;
LABEL_34:
  v61 = objc_msgSend(v43, sel_transform);
  if (!v61)
    goto LABEL_58;
  objc_msgSend(v61, sel_matrix);
  v142 = v63;
  v143 = v62;
  v141 = v64;
  v65.n128_u32[3] = 1.0;
  v148 = v65;
  swift_retain();
  sub_1B1BF76AC(v140, v148);
  swift_release();
  v66 = (int32x4_t)vmulq_f32(v143, v143);
  v67 = (int32x4_t)vmulq_f32(v142, v142);
  v68 = (int32x4_t)vmulq_f32(v141, v141);
  v69 = (float32x4_t)vzip1q_s32(vzip1q_s32(v66, v68), v67);
  v147 = (float32x4_t)v67;
  v149 = (float32x4_t)v68;
  v145 = (float32x4_t)v66;
  v146 = (float32x4_t)vdupq_laneq_s32(v67, 2);
  v70 = (float32x4_t)vtrn2q_s32(v66, v67);
  v70.i32[2] = v68.i32[1];
  v71 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v66, v68), (int32x4_t)v146), vaddq_f32(v69, v70));
  v72.i64[0] = 0x80000000800000;
  v72.i64[1] = 0x80000000800000;
  v73 = vcgeq_f32(v72, v71);
  v71.i32[3] = 0;
  v74 = vrsqrteq_f32(v71);
  v75 = vmulq_f32(v74, vrsqrtsq_f32(v71, vmulq_f32(v74, v74)));
  v76 = v73;
  v76.i32[3] = 0;
  v77 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v76), (int8x16_t)v71, (int8x16_t)vmulq_f32(v75, vrsqrtsq_f32(v71, vmulq_f32(v75, v75))));
  v78 = vmulq_n_f32(v143, v77.f32[0]);
  v79 = vmulq_lane_f32(v142, *(float32x2_t *)v77.f32, 1);
  v80 = vmulq_laneq_f32(v141, v77, 2);
  v81 = (int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80);
  v82 = (int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79);
  v83 = (int32x4_t)v78;
  if (v73.i32[0])
  {
    v84 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v81, (int8x16_t)v80, 0xCuLL), vnegq_f32(v79)), v80, (float32x4_t)vextq_s8(v82, (int8x16_t)v79, 0xCuLL));
    v83 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v84, v84), (int8x16_t)v84, 0xCuLL);
  }
  v85 = (int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78);
  v86 = v79;
  if (v73.i32[1])
  {
    v87 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v85, (int8x16_t)v78, 0xCuLL), vnegq_f32(v80)), v78, (float32x4_t)vextq_s8(v81, (int8x16_t)v80, 0xCuLL));
    v86 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v87, v87), (int8x16_t)v87, 0xCuLL);
  }
  if (v73.i32[2])
  {
    v73 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v82, (int8x16_t)v79, 0xCuLL), vnegq_f32(v78)), v79, (float32x4_t)vextq_s8(v85, (int8x16_t)v78, 0xCuLL));
    v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v73, v73), (int8x16_t)v73, 0xCuLL);
  }
  v88 = (float)(*(float *)v83.i32 + v86.f32[1]) + v80.f32[2];
  if (v88 > 0.0)
  {
    v89 = (float32x4_t)vzip2q_s32((int32x4_t)v86, vuzp1q_s32((int32x4_t)v86, (int32x4_t)v80));
    v89.i32[2] = v83.i32[1];
    v90 = sqrtf(v88 + 1.0);
    v91 = (float32x4_t)vtrn2q_s32((int32x4_t)v80, vzip2q_s32((int32x4_t)v80, v83));
    v91.i32[2] = v86.i32[0];
    v93 = vsubq_f32(v89, v91);
    v89.f32[3] = v90;
    v91.f32[3] = v90;
    v92 = vmulq_f32(v89, v91);
    v93.i32[3] = v92.i32[3];
LABEL_56:
    v92.f32[0] = 0.5 / v90;
    v104 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 0);
    goto LABEL_57;
  }
  if (*(float *)v83.i32 < v86.f32[1] || *(float *)v83.i32 < v80.f32[2])
  {
    if (v86.f32[1] <= v80.f32[2])
    {
      v90 = sqrtf((float)((float)(v80.f32[2] + 1.0) - *(float *)v83.i32) - v86.f32[1]);
      *(float32x2_t *)v93.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v83, (int32x4_t)v86), *(float32x2_t *)v80.f32);
      v106 = (float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v90));
      v107 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.f32, 0);
      *(float32x2_t *)v92.f32 = vsub_f32(*(float32x2_t *)v83.i8, v107);
      v107.f32[0] = v90;
      v107.i32[0] = vmul_f32(v106, v107).u32[0];
      v107.i32[1] = v92.i32[1];
      *(float32x2_t *)&v93.u32[2] = v107;
      goto LABEL_56;
    }
    v98 = sqrtf((float)((float)(v86.f32[1] + 1.0) - *(float *)v83.i32) - v80.f32[2]);
    *(int32x2_t *)v73.i8 = vdup_laneq_s32((int32x4_t)v86, 2);
    v95 = (int8x16_t)v73;
    *(float *)v95.i32 = v98;
    v95.i32[0] = vmul_f32(*(float32x2_t *)v95.i8, (float32x2_t)__PAIR64__(v80.u32[1], LODWORD(v98))).u32[0];
    v95.i32[1] = vadd_f32(*(float32x2_t *)&v73, *(float32x2_t *)&v80).i32[1];
    v96 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.i8, 1), v86);
    v103 = (int32x2_t)vsubq_f32(v80, (float32x4_t)vdupq_laneq_s32(v83, 2)).u64[0];
    v104 = (float32x4_t)vextq_s8(vextq_s8(v96, v96, 4uLL), v95, 0xCuLL);
    v104.i32[3] = v103.i32[0];
  }
  else
  {
    v98 = sqrtf((float)((float)(*(float *)v83.i32 + 1.0) - v86.f32[1]) - v80.f32[2]);
    v99 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v86.f32, 0);
    v100 = vadd_f32(*(float32x2_t *)v83.i8, v99);
    v99.f32[0] = v98;
    v104.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v98)), v99).u32[0];
    v104.i32[1] = v100.i32[1];
    v101 = (float32x2_t)vzip2q_s32(v83, (int32x4_t)v86).u64[0];
    LODWORD(v102) = vadd_f32(v101, *(float32x2_t *)v80.f32).u32[0];
    v103 = (int32x2_t)vsub_f32(v101, *(float32x2_t *)v80.f32);
    HIDWORD(v102) = v103.i32[1];
    v104.i64[1] = v102;
  }
  *(float *)v103.i32 = 0.5 / v98;
  v93 = (float32x4_t)vdupq_lane_s32(v103, 0);
LABEL_57:
  v144 = (__n128)vmulq_f32(v93, v104);
  swift_retain();
  sub_1B1BF76A0(v140, v144);
  swift_release();
  v108.n128_u64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(vaddq_f32(v146, vaddq_f32(v147, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.f32, 1))).f32[0])), COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v145, 2), vaddq_f32(v145, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v145.f32, 1))).f32[0])));
  v108.n128_u64[1] = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v149, 2), vaddq_f32(v149, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 1))).f32[0]));
  v150 = v108;
  swift_retain();
  sub_1B1BF7FA8(v140, v150);
  swift_unknownObjectRelease();
  swift_release();
LABEL_58:
  if ((a3 & 1) == 0)
  {
    swift_retain();
    sub_1B1BF8088(a2, v140);
    swift_release();
  }
  objc_opt_self();
  v109 = swift_dynamicCastObjCClass();
  if (v109)
  {
    v110 = (void *)v109;
    v111 = v43;
    v112 = objc_msgSend(v110, sel_vertexDescriptor);
    v113 = objc_msgSend(v112, sel_attributeNamed_, *MEMORY[0x1E0CC7770]);

    if (v113)
    {
      v114 = objc_msgSend(v110, sel_vertexDescriptor);
      v115 = objc_msgSend(v114, sel_attributeNamed_, *MEMORY[0x1E0CC7750]);

      if (v115)
      {
        v116 = (void *)sub_1B2228728();
        v117 = (void *)sub_1B2228728();
        v118 = (void *)sub_1B2228728();
        objc_msgSend(v110, sel_addOrthTanBasisForTextureCoordinateAttributeNamed_normalAttributeNamed_tangentAttributeNamed_, v116, v117, v118);

      }
      v119 = (void *)sub_1B2228728();
      objc_msgSend(v110, sel_flipTextureCoordinatesInAttributeNamed_, v119);

    }
    v120 = sub_1B1F37740(v110, 0, 1);
    if (v138)
    {

      return;
    }
    v121 = v120;
    v122 = HIDWORD(v120);
    v123 = (char *)v25[6];
    v124 = swift_isUniquelyReferenced_nonNull_native();
    v25[6] = v123;
    if ((v124 & 1) == 0)
    {
      v123 = sub_1B1C63D98(0, *((_QWORD *)v123 + 2) + 1, 1, v123);
      v25[6] = v123;
    }
    v126 = *((_QWORD *)v123 + 2);
    v125 = *((_QWORD *)v123 + 3);
    if (v126 >= v125 >> 1)
      v123 = sub_1B1C63D98(v125 > 1, v126 + 1, 1, v123);
    *((_QWORD *)v123 + 2) = v126 + 1;
    v127 = &v123[8 * v126];
    *((_DWORD *)v127 + 8) = v121;
    *((_DWORD *)v127 + 9) = v122;
    v25[6] = v123;
    swift_retain();
    sub_1B1BF8094(v121, 0xFFFFFFFFuLL, v140);

    swift_release();
    v43 = v139;
  }
  v128 = objc_msgSend(v43, sel_safe_children);
  if (v128)
  {
    v129 = v128;
    if ((uint64_t)objc_msgSend(v128, sel_count) < 1)
    {
      swift_unknownObjectRelease();
      return;
    }
    v130 = objc_msgSend(v129, sel_objects);
    sub_1B1B9DAD4(0, &qword_1EEF5B4D0);
    v131 = sub_1B2228AB8();

    if (v131 >> 62)
    {
      swift_bridgeObjectRetain();
      v132 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v132)
      {
LABEL_76:
        v133 = 0;
        while (1)
        {
          v134 = (v131 & 0xC000000000000001) != 0
               ? (id)MEMORY[0x1B5E21018](v133, v131)
               : *(id *)(v131 + 8 * v133 + 32);
          v135 = v134;
          sub_1B1F3921C(v134, v140, 0);
          if (v24)
            break;

          if (v132 == ++v133)
            goto LABEL_82;
        }
        swift_unknownObjectRelease();

        goto LABEL_85;
      }
    }
    else
    {
      v132 = *(_QWORD *)((v131 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v132)
        goto LABEL_76;
    }
LABEL_82:
    swift_unknownObjectRelease();
LABEL_85:
    swift_bridgeObjectRelease();
  }
}

void sub_1B1F3A344(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  id v8;
  uint64_t v9;
  char isUniquelyReferenced_nonNull_native;
  id v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  unint64_t v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;

  v2 = v1;
  v3 = objc_msgSend(objc_msgSend(a1, sel_animations), sel_objects);
  swift_unknownObjectRelease();
  sub_1B1B9DAD4(0, &qword_1EEF5B4D0);
  v4 = sub_1B2228AB8();

  if (v4 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
    {
LABEL_3:
      v6 = 0;
      v49 = v4 & 0xC000000000000001;
      v47 = v5;
      v48 = v4;
      v7 = (void (*)(uint64_t))MEMORY[0x1E0DEFC00];
      do
      {
        if (v49)
          v11 = (id)MEMORY[0x1B5E21018](v6, v4);
        else
          v11 = *(id *)(v4 + 8 * v6 + 32);
        v12 = v11;
        objc_opt_self();
        v13 = swift_dynamicCastObjCClass();
        if (!v13)
        {
          swift_bridgeObjectRelease();
          v41 = v12;
          v42 = objc_msgSend(v41, sel_description);
          v43 = sub_1B222874C();
          v45 = v44;

          sub_1B1F3BBA8();
          swift_allocError();
          *v46 = v43;
          v46[1] = v45;
          swift_willThrow();

          return;
        }
        v14 = (void *)v13;
        v15 = *(_QWORD *)(v2 + 32);
        if ((v15 & 0xC000000000000001) != 0)
        {
          v16 = v12;
          swift_bridgeObjectRetain();
          if (!sub_1B2229664())
            goto LABEL_19;
          type metadata accessor for SkeletonAnimation();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          v17 = v50;
          swift_unknownObjectRelease();
        }
        else
        {
          v18 = *(_QWORD *)(v15 + 16);
          v19 = v12;
          if (!v18)
            goto LABEL_20;
          v16 = v19;
          swift_bridgeObjectRetain();
          v20 = sub_1B1DC4BA0((uint64_t)v14);
          if ((v21 & 1) == 0)
          {
LABEL_19:

            swift_bridgeObjectRelease();
LABEL_20:
            type metadata accessor for SkeletonAnimation();
            v22 = (_QWORD *)swift_allocObject();
            v23 = MEMORY[0x1E0DEE9D8];
            v22[2] = MEMORY[0x1E0DEE9D8];
            v22[3] = v23;
            v22[4] = v23;
            v22[5] = v23;
            v22[6] = v23;
            v22[7] = v23;
            v22[8] = v23;
            v24 = objc_msgSend(v14, sel_jointPaths);
            v25 = sub_1B2228AB8();

            v22[2] = v25;
            swift_bridgeObjectRelease();
            v26 = objc_msgSend(v14, sel_translations);
            v27 = sub_1B1F35E0C((uint64_t)v26, v7);
            v29 = v28;

            v22[3] = v27;
            v22[4] = v29;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v30 = objc_msgSend(v14, sel_rotations);
            v31 = sub_1B1F35E0C((uint64_t)v30, MEMORY[0x1E0DEFC08]);
            v33 = v32;

            v22[5] = v31;
            v22[6] = v33;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v34 = objc_msgSend(v14, sel_scales);
            v35 = sub_1B1F35E0C((uint64_t)v34, v7);
            v37 = v36;

            v22[7] = v35;
            v22[8] = v37;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v38 = *(_QWORD *)(v2 + 32);
            if ((v38 & 0xC000000000000001) != 0)
            {
              if (v38 >= 0)
                v38 &= 0xFFFFFFFFFFFFFF8uLL;
              v39 = v12;
              swift_retain();
              v40 = sub_1B22293AC();
              *(_QWORD *)(v2 + 32) = sub_1B1F3AAC0(v38, v40 + 1);
            }
            else
            {
              v8 = v12;
              swift_retain();
            }
            v9 = v47;
            v4 = v48;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v50 = *(_QWORD *)(v2 + 32);
            *(_QWORD *)(v2 + 32) = 0x8000000000000000;
            sub_1B1B882E0((uint64_t)v22, v14, isUniquelyReferenced_nonNull_native);
            *(_QWORD *)(v2 + 32) = v50;
            swift_release();

            swift_bridgeObjectRelease();
            goto LABEL_6;
          }
          v17 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v20);
          swift_retain();
        }

        swift_bridgeObjectRelease();
        if (!v17)
          goto LABEL_20;

        swift_release();
        v9 = v47;
        v4 = v48;
LABEL_6:
        ++v6;
      }
      while (v9 != v6);
    }
  }
  swift_bridgeObjectRelease();
}

void sub_1B1F3A814(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  id v14;
  void *v15;
  id v16;
  _QWORD *v17;
  char *v18;
  char *v19;
  char *i;
  id v21;
  uint64_t v22;
  id v23;

  v3 = v1;
  sub_1B1792854(0, (unint64_t *)&qword_1ED4BF720, (void (*)(uint64_t))MEMORY[0x1E0CAFFF8]);
  MEMORY[0x1E0C80A78](v5, v6);
  v8 = (char *)&v22 - v7;
  v9 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v9)
  {
    v10 = *(void **)(v9 + 520);
    v11 = sub_1B2228110();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v8, a1, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v8, 0, 1, v11);
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v8, 1, v11);
    swift_retain();
    v14 = v10;
    v15 = 0;
    if (v13 != 1)
    {
      v15 = (void *)sub_1B2228074();
      (*(void (**)(char *, uint64_t))(v12 + 8))(v8, v11);
    }
    v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CC7780]), sel_initWithURL_vertexDescriptor_bufferAllocator_, v15, 0, v14);

    sub_1B1F3A344(v16);
    if (v2)
    {
      swift_release();

    }
    else
    {
      v18 = (char *)objc_msgSend(v16, sel_count);
      v23 = v14;
      if (v18)
      {
        v19 = v18;
        for (i = 0; i != v19; ++i)
        {
          v21 = objc_msgSend(v16, sel_objectAtIndex_, i);
          sub_1B1F3921C(v21, 0, 1);

        }
      }

      swift_release();
    }
  }
  else
  {
    sub_1B1F3BBA8();
    swift_allocError();
    *v17 = 0;
    v17[1] = 0;
    swift_willThrow();
  }
}

uint64_t sub_1B1F3AA64()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MDLImporter()
{
  return objc_opt_self();
}

uint64_t sub_1B1F3AAC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (a2)
  {
    sub_1B1B9AB5C();
    v2 = sub_1B22296D0();
    v17 = v2;
    sub_1B222964C();
    v3 = sub_1B2229670();
    if (v3)
    {
      v4 = v3;
      sub_1B1B9DAD4(0, &qword_1EEF5B4D0);
      do
      {
        swift_dynamicCast();
        type metadata accessor for SkeletonAnimation();
        swift_dynamicCast();
        v2 = v17;
        v12 = *(_QWORD *)(v17 + 16);
        if (*(_QWORD *)(v17 + 24) <= v12)
        {
          sub_1B1E9DB40(v12 + 1, 1);
          v2 = v17;
        }
        v5 = sub_1B2229010();
        v6 = v2 + 64;
        v7 = -1 << *(_BYTE *)(v2 + 32);
        v8 = v5 & ~v7;
        v9 = v8 >> 6;
        if (((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6))) != 0)
        {
          v10 = __clz(__rbit64((-1 << v8) & ~*(_QWORD *)(v2 + 64 + 8 * (v8 >> 6)))) | v8 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v13 = (unint64_t)(63 - v7) >> 6;
          do
          {
            if (v9 + 1 == v13)
              v9 = 0;
            else
              ++v9;
            v14 = *(_QWORD *)(v6 + 8 * v9);
          }
          while (v14 == -1);
          v10 = __clz(__rbit64(~v14)) + (v9 << 6);
        }
        *(_QWORD *)(v6 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
        v11 = 8 * v10;
        *(_QWORD *)(*(_QWORD *)(v2 + 48) + v11) = v16;
        *(_QWORD *)(*(_QWORD *)(v2 + 56) + v11) = v4;
        ++*(_QWORD *)(v2 + 16);
        v4 = sub_1B2229670();
      }
      while (v4);
    }
    swift_release();
  }
  else
  {
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9E0];
  }
  return v2;
}

id sub_1B1F3ACD0(unint64_t a1, uint64_t (*a2)(id, void *))
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v19;
  unint64_t v20;
  void *v21;

  if ((a1 & 0xC000000000000001) != 0)
  {
    v20 = 0;
    v3 = 0;
    v4 = 0;
    v5 = sub_1B222964C() | 0x8000000000000000;
  }
  else
  {
    v6 = -1 << *(_BYTE *)(a1 + 32);
    v3 = ~v6;
    v20 = a1 + 64;
    v7 = -v6;
    if (v7 < 64)
      v8 = ~(-1 << v7);
    else
      v8 = -1;
    v4 = v8 & *(_QWORD *)(a1 + 64);
    v5 = a1;
  }
  swift_bridgeObjectRetain();
  v9 = 0;
  v19 = (unint64_t)(v3 + 64) >> 6;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_8:
  if (v4)
  {
    v10 = (v4 - 1) & v4;
    v11 = __clz(__rbit64(v4)) | (v9 << 6);
    v12 = v9;
    goto LABEL_28;
  }
  v12 = v9 + 1;
  if (v9 + 1 >= v19)
    goto LABEL_32;
  v15 = *(_QWORD *)(v20 + 8 * v12);
  if (v15)
    goto LABEL_27;
  v12 = v9 + 2;
  if (v9 + 2 >= v19)
    goto LABEL_32;
  v15 = *(_QWORD *)(v20 + 8 * v12);
  if (v15)
    goto LABEL_27;
  v12 = v9 + 3;
  if (v9 + 3 >= v19)
    goto LABEL_32;
  v15 = *(_QWORD *)(v20 + 8 * v12);
  if (v15)
    goto LABEL_27;
  v12 = v9 + 4;
  if (v9 + 4 >= v19)
    goto LABEL_32;
  v15 = *(_QWORD *)(v20 + 8 * v12);
  if (v15)
    goto LABEL_27;
  v12 = v9 + 5;
  if (v9 + 5 >= v19)
  {
LABEL_32:
    v13 = 0;
    goto LABEL_34;
  }
  v15 = *(_QWORD *)(v20 + 8 * v12);
  if (!v15)
  {
    v16 = v9 + 6;
    while (v19 != v16)
    {
      v15 = *(_QWORD *)(v20 + 8 * v16++);
      if (v15)
      {
        v12 = v16 - 1;
        goto LABEL_27;
      }
    }
    goto LABEL_32;
  }
LABEL_27:
  v10 = (v15 - 1) & v15;
  v11 = __clz(__rbit64(v15)) + (v12 << 6);
LABEL_28:
  v17 = 8 * v11;
  v14 = *(void **)(*(_QWORD *)(v5 + 56) + v17);
  v13 = *(id *)(*(_QWORD *)(v5 + 48) + v17);
  swift_retain();
  if (v13)
  {
    while ((a2(v13, v14) & 1) == 0)
    {
      swift_release();

      v9 = v12;
      v4 = v10;
      if ((v5 & 0x8000000000000000) == 0)
        goto LABEL_8;
LABEL_10:
      if (!sub_1B2229670())
      {
        v13 = 0;
        break;
      }
      sub_1B1B9DAD4(0, &qword_1EEF5B4D0);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v13 = v21;
      swift_unknownObjectRelease();
      type metadata accessor for SkeletonAnimation();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      v14 = v21;
      swift_unknownObjectRelease();
      v12 = v9;
      v10 = v4;
      if (!v21)
        break;
    }
  }
LABEL_34:
  sub_1B19F8D30();
  return v13;
}

uint64_t sub_1B1F3AFD4(void *a1, _QWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  id v28;
  id v29;
  id v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  char *v37;
  __int16 v38;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  char *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int16 *v53;
  _WORD *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  int v69;
  int v70;
  char *v71;
  int v72;
  __int16 v73;
  __int16 v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  int v80;
  int v81;
  char *v82;
  int v83;
  __int16 v84;
  __int16 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  int v90;
  int v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t v100;
  int v101;
  int v102;
  char *v103;
  int v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  int v109;
  int v110;
  char *v111;
  int v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  int v117;
  int v118;
  char *v119;
  int v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  uint64_t v124;
  int v125;
  int v126;
  char *v127;
  int v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  int v133;
  int v134;
  char *v135;
  int v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  int v141;
  int v142;
  char *v143;
  int v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  int v149;
  int v150;
  char *v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  uint64_t v156;
  int v157;
  int v158;
  char *v159;
  int v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  uint64_t v164;
  int v165;
  int v166;
  char *v167;
  int v168;
  id v170;
  uint64_t *v171;
  uint64_t v172;
  void *v173;
  _QWORD *v174;
  _QWORD *v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  uint64_t v180;
  int v181;
  int v182;
  id v183;

  type metadata accessor for VertexLayoutDescriptor();
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = 0x1000100000000;
  *(_QWORD *)(v4 + 24) = 0x1000100000000;
  *(_QWORD *)(v4 + 32) = 0x1000100000000;
  *(_QWORD *)(v4 + 40) = 0x1000100000000;
  *(_QWORD *)(v4 + 48) = 0x1000100000000;
  *(_QWORD *)(v4 + 56) = 0x1000100000000;
  *(_QWORD *)(v4 + 64) = 0x1000100000000;
  *(_QWORD *)(v4 + 72) = 0x1000100000000;
  *(_QWORD *)(v4 + 80) = 0x1000100000000;
  *(_QWORD *)(v4 + 88) = 0x1000100000000;
  *(_OWORD *)(v4 + 96) = 0u;
  v172 = v4 + 96;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  v5 = sub_1B1B80F78((uint64_t)&unk_1E6370F68);
  v6 = objc_msgSend(a1, sel_attributes);
  v7 = (uint64_t)objc_msgSend(v6, sel_count);

  v8 = 0;
  if (v7 <= 8)
    v9 = 8;
  else
    v9 = v7;
  v174 = a2;
  v171 = a2 + 6;
  v10 = v5;
  v175 = v5;
  do
  {
    v11 = objc_msgSend(a1, sel_attributes);
    v12 = objc_msgSend(v11, sel_objectAtIndexedSubscript_, v8);

    sub_1B22292EC();
    swift_unknownObjectRelease();
    sub_1B1B9DAD4(0, &qword_1EEF60FE8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v13 = v183;
      v14 = objc_msgSend(v183, sel_name);
      v15 = sub_1B222874C();
      v17 = v16;

      if (v15 || v17 != 0xE000000000000000)
      {
        v18 = sub_1B2229D24();
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
          goto LABEL_5;
        v19 = objc_msgSend(v13, sel_name);
        v20 = sub_1B222874C();
        v22 = v21;

        if (!v10[2] || (v23 = sub_1B1DC3B00(v20, v22), v10 = v175, (v24 & 1) == 0))
        {
          swift_bridgeObjectRelease();
          *(_QWORD *)&v176 = 0;
          *((_QWORD *)&v176 + 1) = 0xE000000000000000;
          sub_1B2229430();
          swift_bridgeObjectRelease();
          *(_QWORD *)&v176 = 0xD000000000000019;
          *((_QWORD *)&v176 + 1) = 0x80000001B23449D0;
          v170 = objc_msgSend(v13, sel_name);
          sub_1B222874C();

          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          while (1)
          {
LABEL_55:
            sub_1B2229688();
            __break(1u);
          }
        }
        v25 = *(_QWORD *)(v175[7] + 8 * v23);
        swift_bridgeObjectRelease();
        v26 = v174[2];
        if (v26)
        {
          if (v174[4] == v25)
            goto LABEL_5;
          if (v26 != 1)
          {
            if (v174[5] == v25)
              goto LABEL_5;
            v94 = v26 - 2;
            if (v94)
            {
              v95 = v171;
              while (1)
              {
                v96 = *v95++;
                if (v96 == v25)
                  break;
                if (!--v94)
                  goto LABEL_17;
              }
LABEL_5:

              goto LABEL_6;
            }
          }
        }
LABEL_17:
        v27 = objc_msgSend(a1, sel_layouts);
        v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, objc_msgSend(v13, sel_bufferIndex));

        sub_1B22292EC();
        swift_unknownObjectRelease();
        sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF60FF0);
        if (!swift_dynamicCast())
          goto LABEL_55;
        v29 = v183;
        v30 = objc_msgSend(v13, sel_bufferIndex);
        v31 = (unint64_t)objc_msgSend(v29, sel_stride);
        v32 = *(_OWORD *)(v4 + 32);
        v33 = *(_OWORD *)(v4 + 48);
        v34 = *(_OWORD *)(v4 + 64);
        v35 = *(_QWORD *)(v4 + 80);
        v36 = *(_DWORD *)(v4 + 92);
        v176 = *(_OWORD *)(v4 + 16);
        v177 = v32;
        v178 = v33;
        v179 = v34;
        v180 = v35;
        v182 = v36;
        if ((v31 & 0x8000000000000000) != 0)
          goto LABEL_54;
        if (HIDWORD(v31))
          goto LABEL_54;
        v37 = (char *)&v176 + 8 * (_QWORD)v30;
        v38 = *((_WORD *)v37 + 2);
        LOWORD(v37) = *((_WORD *)v37 + 3);
        v39 = v4 + 16 + 8 * (_QWORD)v30;
        *(_DWORD *)v39 = v31;
        *(_WORD *)(v39 + 4) = v38;
        *(_WORD *)(v39 + 6) = (_WORD)v37;
        v40 = (unint64_t)objc_msgSend(v13, sel_bufferIndex);
        v41 = *(_OWORD *)(v4 + 112);
        v42 = *(_OWORD *)(v4 + 128);
        v43 = *(_OWORD *)(v4 + 144);
        v44 = *(_QWORD *)(v4 + 160);
        v45 = *(_DWORD *)(v4 + 168);
        v46 = *(_WORD *)(v4 + 172);
        v176 = *(_OWORD *)(v4 + 96);
        v177 = v41;
        v178 = v42;
        v179 = v43;
        v180 = v44;
        v181 = v45;
        LOWORD(v182) = v46;
        if ((v40 & 0x8000000000000000) != 0)
          goto LABEL_54;
        v173 = v29;
        if (v40 >= 0x10000)
          goto LABEL_54;
        v47 = v9;
        v48 = (char *)&v176 + 8 * v25;
        v49 = *(_DWORD *)v48;
        LOWORD(v48) = *((_WORD *)v48 + 2);
        v50 = v25;
        v51 = 8 * v25;
        v52 = v172 + v51;
        *(_DWORD *)v52 = v49;
        *(_WORD *)(v52 + 4) = (_WORD)v48;
        v53 = (__int16 *)(v172 + v51 + 4);
        *(_WORD *)(v52 + 6) = v40;
        v54 = (_WORD *)(v172 + v51 + 6);
        v55 = (unint64_t)objc_msgSend(v13, sel_offset);
        v56 = *(_OWORD *)(v4 + 112);
        v57 = *(_OWORD *)(v4 + 128);
        v58 = *(_OWORD *)(v4 + 144);
        v59 = *(_QWORD *)(v4 + 160);
        v60 = *(_DWORD *)(v4 + 172);
        v176 = *(_OWORD *)(v4 + 96);
        v177 = v56;
        v178 = v57;
        v179 = v58;
        v180 = v59;
        v182 = v60;
        if ((v55 & 0x8000000000000000) != 0 || HIDWORD(v55))
        {
LABEL_54:
          sub_1B222967C();
          __break(1u);
          goto LABEL_55;
        }
        v61 = *(_WORD *)((char *)&v176 + v51 + 4);
        v62 = *(_WORD *)((char *)&v176 + v51 + 6);
        *(_DWORD *)v52 = v55;
        *v53 = v61;
        *v54 = v62;
        v63 = (uint64_t)objc_msgSend(v13, sel_format);
        if (v63 <= 393216)
        {
          v75 = v50;
          v9 = v47;
          switch(v63)
          {
            case 327681:
              v76 = *(_OWORD *)(v4 + 112);
              v77 = *(_OWORD *)(v4 + 128);
              v78 = *(_OWORD *)(v4 + 144);
              v79 = *(_QWORD *)(v4 + 160);
              v80 = *(_DWORD *)(v4 + 168);
              v81 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v76;
              v178 = v77;
              v179 = v78;
              v180 = v79;
              v181 = v80;
              v182 = v81;
              v82 = (char *)&v176 + 8 * v75;
              v83 = *(_DWORD *)v82;
              v84 = *((_WORD *)v82 + 3);
              *(_DWORD *)v52 = v83;
              v85 = 49;
              goto LABEL_50;
            case 327682:
              v153 = *(_OWORD *)(v4 + 112);
              v154 = *(_OWORD *)(v4 + 128);
              v155 = *(_OWORD *)(v4 + 144);
              v156 = *(_QWORD *)(v4 + 160);
              v157 = *(_DWORD *)(v4 + 168);
              v158 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v153;
              v178 = v154;
              v179 = v155;
              v180 = v156;
              v181 = v157;
              v182 = v158;
              v159 = (char *)&v176 + 8 * v75;
              v160 = *(_DWORD *)v159;
              v84 = *((_WORD *)v159 + 3);
              *(_DWORD *)v52 = v160;
              v85 = 13;
              goto LABEL_50;
            case 327683:
              v113 = *(_OWORD *)(v4 + 112);
              v114 = *(_OWORD *)(v4 + 128);
              v115 = *(_OWORD *)(v4 + 144);
              v116 = *(_QWORD *)(v4 + 160);
              v117 = *(_DWORD *)(v4 + 168);
              v118 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v113;
              v178 = v114;
              v179 = v115;
              v180 = v116;
              v181 = v117;
              v182 = v118;
              v119 = (char *)&v176 + 8 * v75;
              v120 = *(_DWORD *)v119;
              v84 = *((_WORD *)v119 + 3);
              *(_DWORD *)v52 = v120;
              v85 = 14;
              goto LABEL_50;
            case 327684:
              v161 = *(_OWORD *)(v4 + 112);
              v162 = *(_OWORD *)(v4 + 128);
              v163 = *(_OWORD *)(v4 + 144);
              v164 = *(_QWORD *)(v4 + 160);
              v165 = *(_DWORD *)(v4 + 168);
              v166 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v161;
              v178 = v162;
              v179 = v163;
              v180 = v164;
              v181 = v165;
              v182 = v166;
              v167 = (char *)&v176 + 8 * v75;
              v168 = *(_DWORD *)v167;
              v84 = *((_WORD *)v167 + 3);
              *(_DWORD *)v52 = v168;
              v85 = 15;
              goto LABEL_50;
            default:
              if (v63)
                goto LABEL_55;
              v9 = v47;
              break;
          }
        }
        else
        {
          v64 = v50;
          v9 = v47;
          switch(v63)
          {
            case 393217:
              v86 = *(_OWORD *)(v4 + 112);
              v87 = *(_OWORD *)(v4 + 128);
              v88 = *(_OWORD *)(v4 + 144);
              v89 = *(_QWORD *)(v4 + 160);
              v90 = *(_DWORD *)(v4 + 168);
              v91 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v86;
              v178 = v87;
              v179 = v88;
              v180 = v89;
              v181 = v90;
              v182 = v91;
              v92 = (char *)&v176 + 8 * v64;
              v93 = *(_DWORD *)v92;
              v84 = *((_WORD *)v92 + 3);
              *(_DWORD *)v52 = v93;
              v85 = 50;
              break;
            case 393218:
              v121 = *(_OWORD *)(v4 + 112);
              v122 = *(_OWORD *)(v4 + 128);
              v123 = *(_OWORD *)(v4 + 144);
              v124 = *(_QWORD *)(v4 + 160);
              v125 = *(_DWORD *)(v4 + 168);
              v126 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v121;
              v178 = v122;
              v179 = v123;
              v180 = v124;
              v181 = v125;
              v182 = v126;
              v127 = (char *)&v176 + 8 * v64;
              v128 = *(_DWORD *)v127;
              v84 = *((_WORD *)v127 + 3);
              *(_DWORD *)v52 = v128;
              v85 = 16;
              break;
            case 393219:
              v97 = *(_OWORD *)(v4 + 112);
              v98 = *(_OWORD *)(v4 + 128);
              v99 = *(_OWORD *)(v4 + 144);
              v100 = *(_QWORD *)(v4 + 160);
              v101 = *(_DWORD *)(v4 + 168);
              v102 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v97;
              v178 = v98;
              v179 = v99;
              v180 = v100;
              v181 = v101;
              v182 = v102;
              v103 = (char *)&v176 + 8 * v64;
              v104 = *(_DWORD *)v103;
              v84 = *((_WORD *)v103 + 3);
              *(_DWORD *)v52 = v104;
              v85 = 17;
              break;
            case 393220:
              v129 = *(_OWORD *)(v4 + 112);
              v130 = *(_OWORD *)(v4 + 128);
              v131 = *(_OWORD *)(v4 + 144);
              v132 = *(_QWORD *)(v4 + 160);
              v133 = *(_DWORD *)(v4 + 168);
              v134 = *(_DWORD *)(v4 + 172);
              v176 = *(_OWORD *)(v4 + 96);
              v177 = v129;
              v178 = v130;
              v179 = v131;
              v180 = v132;
              v181 = v133;
              v182 = v134;
              v135 = (char *)&v176 + 8 * v64;
              v136 = *(_DWORD *)v135;
              v84 = *((_WORD *)v135 + 3);
              *(_DWORD *)v52 = v136;
              v85 = 18;
              break;
            default:
              v9 = v47;
              switch(v63)
              {
                case 786433:
                  v65 = *(_OWORD *)(v4 + 112);
                  v66 = *(_OWORD *)(v4 + 128);
                  v67 = *(_OWORD *)(v4 + 144);
                  v68 = *(_QWORD *)(v4 + 160);
                  v69 = *(_DWORD *)(v4 + 168);
                  v70 = *(_DWORD *)(v4 + 172);
                  v176 = *(_OWORD *)(v4 + 96);
                  v177 = v65;
                  v178 = v66;
                  v179 = v67;
                  v180 = v68;
                  v181 = v69;
                  v182 = v70;
                  v71 = (char *)&v176 + 8 * v64;
                  v72 = *(_DWORD *)v71;
                  v73 = *((_WORD *)v71 + 3);
                  *(_DWORD *)v52 = v72;
                  v74 = 28;
                  goto LABEL_47;
                case 786434:
                  v137 = *(_OWORD *)(v4 + 112);
                  v138 = *(_OWORD *)(v4 + 128);
                  v139 = *(_OWORD *)(v4 + 144);
                  v140 = *(_QWORD *)(v4 + 160);
                  v141 = *(_DWORD *)(v4 + 168);
                  v142 = *(_DWORD *)(v4 + 172);
                  v176 = *(_OWORD *)(v4 + 96);
                  v177 = v137;
                  v178 = v138;
                  v179 = v139;
                  v180 = v140;
                  v181 = v141;
                  v182 = v142;
                  v143 = (char *)&v176 + 8 * v64;
                  v144 = *(_DWORD *)v143;
                  v73 = *((_WORD *)v143 + 3);
                  *(_DWORD *)v52 = v144;
                  v74 = 29;
                  goto LABEL_47;
                case 786435:
                  v105 = *(_OWORD *)(v4 + 112);
                  v106 = *(_OWORD *)(v4 + 128);
                  v107 = *(_OWORD *)(v4 + 144);
                  v108 = *(_QWORD *)(v4 + 160);
                  v109 = *(_DWORD *)(v4 + 168);
                  v110 = *(_DWORD *)(v4 + 172);
                  v176 = *(_OWORD *)(v4 + 96);
                  v177 = v105;
                  v178 = v106;
                  v179 = v107;
                  v180 = v108;
                  v181 = v109;
                  v182 = v110;
                  v111 = (char *)&v176 + 8 * v64;
                  v112 = *(_DWORD *)v111;
                  v73 = *((_WORD *)v111 + 3);
                  *(_DWORD *)v52 = v112;
                  v74 = 30;
                  goto LABEL_47;
                case 786436:
                  v145 = *(_OWORD *)(v4 + 112);
                  v146 = *(_OWORD *)(v4 + 128);
                  v147 = *(_OWORD *)(v4 + 144);
                  v148 = *(_QWORD *)(v4 + 160);
                  v149 = *(_DWORD *)(v4 + 168);
                  v150 = *(_DWORD *)(v4 + 172);
                  v176 = *(_OWORD *)(v4 + 96);
                  v177 = v145;
                  v178 = v146;
                  v179 = v147;
                  v180 = v148;
                  v181 = v149;
                  v182 = v150;
                  v151 = (char *)&v176 + 8 * v64;
                  v152 = *(_DWORD *)v151;
                  v73 = *((_WORD *)v151 + 3);
                  *(_DWORD *)v52 = v152;
                  v74 = 31;
LABEL_47:
                  *v53 = v74;
                  *v54 = v73;

                  v10 = v175;
                  goto LABEL_6;
                default:
                  goto LABEL_55;
              }
          }
LABEL_50:
          *v53 = v85;
          *v54 = v84;
        }

        v10 = v175;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
LABEL_6:
    ++v8;
  }
  while (v8 != v9);
  swift_bridgeObjectRelease();
  return v4;
}

void sub_1B1F3BA48()
{
  id v0;
  void *v1;
  id v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  id v7;
  uint64_t v8;
  id v9;
  __int128 v10;

  v0 = objc_allocWithZone(MEMORY[0x1E0CC7780]);
  v1 = (void *)sub_1B2228074();
  v2 = objc_msgSend(v0, sel_initWithURL_, v1);

  v3 = (char *)objc_msgSend(v2, sel_count);
  if (v3)
  {
    v4 = v3;
    v5 = 0;
    v10 = xmmword_1B226D240;
    do
    {
      v6 = v5 + 1;
      v7 = objc_msgSend(v2, sel_objectAtIndex_, v10);
      sub_1B1C27668(0, &qword_1ED4BAFF0);
      v8 = swift_allocObject();
      *(_OWORD *)(v8 + 16) = v10;
      *(_QWORD *)(v8 + 56) = sub_1B1B9DAD4(0, &qword_1EEF5B4D0);
      *(_QWORD *)(v8 + 32) = v7;
      v9 = v7;
      sub_1B222A048();

      swift_bridgeObjectRelease();
      v5 = v6;
    }
    while (v4 != v6);
  }

}

unint64_t sub_1B1F3BBA8()
{
  unint64_t result;

  result = qword_1EEF60FB8;
  if (!qword_1EEF60FB8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2408, &type metadata for MDLImporter.Error);
    atomic_store(result, (unint64_t *)&qword_1EEF60FB8);
  }
  return result;
}

uint64_t sub_1B1F3BBEC(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1F3609C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1B1F3BBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1792854(0, &qword_1EEF60FC8, (void (*)(uint64_t))type metadata accessor for SkeletonData);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for MDLImporter.Error(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MDLImporter.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for MDLImporter.Error()
{
  return &type metadata for MDLImporter.Error;
}

double sub_1B1F3BD0C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  return sub_1B1BDB640(a1, a2, a3);
}

uint64_t sub_1B1F3BD20@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v6 = v3 + *(_QWORD *)(*(_QWORD *)v3 + 88);
  v7 = type metadata accessor for FutureStorage(0, v5, a1, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a3, v6, v7);
}

uint64_t sub_1B1F3BD64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v7 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 88);
  v8 = type metadata accessor for FutureStorage(0, v6, a3, a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 40))(v7, a1, v8);
}

uint64_t sub_1B1F3BDA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  _QWORD aBlock[6];

  v5 = v4;
  v27 = a4;
  v26 = sub_1B2229124();
  v9 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26, v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13, v14);
  v17 = (char *)&v26 - v16;
  v18 = *(_QWORD *)(a3 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v18 + 56))((char *)&v26 - v16, 1, 1, a3, v15);
  v19 = *(void **)(v5 + *(_QWORD *)(*(_QWORD *)v5 + 96));
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = a3;
  v20[3] = v5;
  v20[4] = v17;
  v20[5] = a1;
  v20[6] = a2;
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 16) = sub_1B1F3F7B0;
  *(_QWORD *)(v21 + 24) = v20;
  aBlock[4] = sub_1B1CB734C;
  aBlock[5] = v21;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B1CDBFCC;
  aBlock[3] = &unk_1E63D4970;
  v22 = _Block_copy(aBlock);
  v23 = v19;
  swift_retain();
  swift_release();
  dispatch_sync(v23, v22);

  _Block_release(v22);
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v12, v17, v26);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 48))(v12, 1, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(v18 + 32))(v27, v12, a3);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v17, v24);
  return swift_release();
}

uint64_t sub_1B1F3BF90(char *a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, char *, uint64_t, double);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  void (*v32)(char *);
  uint64_t v33;
  uint64_t v34;

  v31 = a4;
  v32 = a3;
  v34 = a2;
  v7 = *(_QWORD *)a1;
  v33 = sub_1B2229124();
  v8 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33, v9);
  v11 = (char *)&v31 - v10;
  v14 = type metadata accessor for FutureStorage(0, *(_QWORD *)(v7 + 80), v12, v13);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14, v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19, v20);
  v23 = (char *)&v31 - v22;
  v24 = *(void (**)(char *, char *, uint64_t, double))(v15 + 16);
  v24((char *)&v31 - v22, &a1[*(_QWORD *)(v7 + 88)], v14, v21);
  v32(v23);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a5 - 8) + 56))(v11, 0, 1, a5);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 40))(v34, v11, v33);
  ((void (*)(char *, char *, uint64_t))v24)(v18, v23, v14);
  v25 = *(_QWORD *)(*(_QWORD *)a1 + 80);
  v26 = &a1[*(_QWORD *)(*(_QWORD *)a1 + 88)];
  v29 = type metadata accessor for FutureStorage(0, v25, v27, v28);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v29 - 8) + 40))(v26, v18, v29);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v23, v14);
}

uint64_t sub_1B1F3C114@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v8 = *(_QWORD *)(*(_QWORD *)v3 + 80);
  v5 = type metadata accessor for FutureState(0, v8, a1, a2);
  return sub_1B1F3BDA8((uint64_t)sub_1B1F3F72C, (uint64_t)&v7, v5, a3);
}

uint64_t sub_1B1F3C164(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t TupleTypeMetadata2;
  uint64_t TupleTypeMetadata3;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  dispatch_group_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject **v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  uint64_t v25;
  char *v26;
  void (*v27)(NSObject **, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  NSObject *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  NSObject *v38;
  dispatch_group_t *v39;
  void (*isa)(char *);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  dispatch_group_t *v47;
  char v48[16];
  uint64_t v49;
  char *v50;
  uint64_t v51;

  v46 = a1;
  v2 = *v1;
  sub_1B1F3F6D4();
  v45 = *(_QWORD *)(v2 + 80);
  v5 = type metadata accessor for FutureResult(255, v45, v3, v4);
  v6 = MEMORY[0x1E0DEE9C0] + 8;
  swift_getFunctionTypeMetadata1();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  sub_1B2228B6C();
  v44 = v5;
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
  v9 = *(_QWORD *)(TupleTypeMetadata3 - 8);
  MEMORY[0x1E0C80A78](TupleTypeMetadata3, v10);
  v12 = (NSObject **)((char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13, v14);
  v16 = (dispatch_group_t *)((char *)&v42 - v15);
  v17 = sub_1B2229124();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17, v19);
  v21 = (NSObject **)((char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v24 = MEMORY[0x1E0C80A78](v22, v23);
  v26 = (char *)&v42 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v9 + 56))((char *)&v42 - v25, 1, 1, TupleTypeMetadata3, v24);
  v49 = v45;
  v50 = v26;
  v51 = v46;
  sub_1B1F3BDA8((uint64_t)sub_1B1F3F710, (uint64_t)v48, v6, v46);
  (*(void (**)(NSObject **, char *, uint64_t))(v18 + 16))(v21, v26, v17);
  if ((*(unsigned int (**)(NSObject **, uint64_t, uint64_t))(v9 + 48))(v21, 1, TupleTypeMetadata3) == 1)
  {
    v27 = *(void (**)(NSObject **, uint64_t))(v18 + 8);
    v27(v21, v17);
    return ((uint64_t (*)(char *, uint64_t))v27)(v26, v17);
  }
  v43 = v18;
  v45 = v9;
  v46 = v17;
  v28 = *(int *)(TupleTypeMetadata3 + 64);
  v29 = (char *)v16 + v28;
  v30 = (char *)v21 + v28;
  v32 = *v21;
  v31 = v21[1];
  *v16 = v32;
  v16[1] = v31;
  v47 = v16;
  v33 = v44;
  v34 = *(_QWORD *)(v44 - 8);
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v29, v30, v44);
  v35 = (char *)v12 + *(int *)(TupleTypeMetadata3 + 64);
  *v12 = v32;
  v12[1] = v31;
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v35, v29, v33);
  v36 = *(void (**)(char *, uint64_t))(v34 + 8);
  swift_bridgeObjectRetain();
  v36(v35, v33);
  if (!MEMORY[0x1B5E20700](v31, TupleTypeMetadata2))
  {
    swift_bridgeObjectRelease();
    v39 = v47;
LABEL_9:
    dispatch_group_leave(*v39);
    (*(void (**)(dispatch_group_t *, uint64_t))(v45 + 8))(v39, TupleTypeMetadata3);
    v27 = *(void (**)(NSObject **, uint64_t))(v43 + 8);
    v17 = v46;
    return ((uint64_t (*)(char *, uint64_t))v27)(v26, v17);
  }
  v37 = 0;
  v38 = v31 + 6;
  v39 = v47;
  while ((sub_1B2228B24() & 1) != 0)
  {
    _swift_isClassOrObjCExistentialType();
    isa = (void (*)(char *))v38[-1].isa;
    ++v37;
    swift_retain();
    isa(v29);
    swift_release();
    v38 += 3;
    if (v37 == MEMORY[0x1B5E20700](v31, TupleTypeMetadata2))
    {
      swift_bridgeObjectRelease();
      goto LABEL_9;
    }
  }
  result = sub_1B2229460();
  __break(1u);
  return result;
}

void sub_1B1F3C4A8(id *a1, id *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id *v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t TupleTypeMetadata3;
  uint64_t v41;
  id *v42;
  char *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t, uint64_t);
  void (*v48)(char *, uint64_t);
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(id *, char *, uint64_t);
  int EnumCaseMultiPayload;
  int v55;
  void (*v56)(id *, uint64_t);
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  id *v62;
  id *v63;
  char *v64;
  uint64_t v65;
  id *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;

  v66 = a2;
  v67 = a3;
  v6 = type metadata accessor for FutureResult(0, a4, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v63 = (id *)((char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v10, v11);
  v64 = (char *)&v61 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v62 = (id *)((char *)&v61 - v15);
  MEMORY[0x1E0C80A78](v16, v17);
  v19 = (id *)((char *)&v61 - v18);
  MEMORY[0x1E0C80A78](v20, v21);
  v23 = (id *)((char *)&v61 - v22);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v61 - v26;
  v30 = type metadata accessor for FutureState(0, a4, v28, v29);
  v31 = *(char **)(v30 - 8);
  MEMORY[0x1E0C80A78](v30, v32);
  v34 = (char *)&v61 - v33;
  v68 = type metadata accessor for FutureStorage(0, a4, v35, v36);
  v37 = a1;
  v38 = (char *)a1 + *(int *)(v68 + 28);
  v39 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v31 + 2);
  v65 = v30;
  v39(v34, v38, v30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v34, 1, v6) == 1)
  {
    sub_1B1F3F6D4();
    swift_getFunctionTypeMetadata1();
    swift_getTupleTypeMetadata2();
    sub_1B2228B6C();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    v41 = sub_1B2229124();
    v42 = v66;
    (*(void (**)(id *, uint64_t))(*(_QWORD *)(v41 - 8) + 8))(v66, v41);
    v43 = (char *)v42 + *(int *)(TupleTypeMetadata3 + 64);
    v44 = *v37;
    *v42 = *v37;
    v42[1] = *(id *)((char *)v37 + *(int *)(v68 + 36));
    v64 = v31;
    v45 = v7;
    v46 = v67;
    v47 = *(void (**)(char *, uint64_t, uint64_t))(v45 + 16);
    v47(v43, v67, v6);
    (*(void (**)(id *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(TupleTypeMetadata3 - 8) + 56))(v42, 0, 1, TupleTypeMetadata3);
    v48 = (void (*)(char *, uint64_t))*((_QWORD *)v64 + 1);
    v49 = v44;
    swift_bridgeObjectRetain();
    v48(v38, v65);
    v47(v38, v46, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v38, 0, 1, v6);
    sub_1B1F3CA08(v68, v50, v51, v52);

    *v37 = 0;
    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v27, v34, v6);
  v53 = *(void (**)(id *, char *, uint64_t))(v7 + 16);
  v53(v23, v27, v6);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1
      || (*v23, v53(v19, (char *)v67, v6), v55 = swift_getEnumCaseMultiPayload(), v55 == 2))
    {
      (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v6);
      return;
    }
    v58 = v7;
    v59 = v67;
    if (v55)

    else
      (*(void (**)(id *, uint64_t))(v58 + 8))(v19, v6);
    v53(v62, (char *)v59, v6);
    v69 = 0;
    v70 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2229CDC();
    sub_1B2228890();
    sub_1B2229CDC();
  }
  else
  {
    v56 = *(void (**)(id *, uint64_t))(v7 + 8);
    v56(v23, v6);
    v53((id *)v64, (char *)v67, v6);
    v57 = swift_getEnumCaseMultiPayload();
    if (v57 == 2)
    {
      v56((id *)v27, v6);
      return;
    }
    v60 = v67;
    if (v57)

    else
      v56((id *)v64, v6);
    v53(v63, (char *)v60, v6);
    v69 = 0;
    v70 = 0xE000000000000000;
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2229CDC();
    sub_1B2228890();
    sub_1B2229CDC();
  }
  sub_1B2229688();
  __break(1u);
}

uint64_t sub_1B1F3CA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for FutureResult(255, *(_QWORD *)(a1 + 16), a3, a4);
  swift_getFunctionTypeMetadata1();
  swift_getTupleTypeMetadata2();
  sub_1B2228B6C();
  return sub_1B2228B60();
}

BOOL sub_1B1F3CA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  void (*v25)(char *, char *, uint64_t);
  uint64_t v27;

  v5 = *(_QWORD *)(*(_QWORD *)v4 + 80);
  v6 = type metadata accessor for FutureState(0, v5, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v10 = (char *)&v27 - v9;
  v13 = type metadata accessor for FutureResult(0, v5, v11, v12);
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13, v15);
  v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18, v19);
  v21 = (char *)&v27 - v20;
  sub_1B1F3C114(v22, v23, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v10, 1, v13) == 1)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return 0;
  }
  else
  {
    v25 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
    v25(v21, v10, v13);
    v25(v17, v21, v13);
    v24 = swift_getEnumCaseMultiPayload() == 2;
    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  return v24;
}

uint64_t sub_1B1F3CBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v5 = type metadata accessor for FutureResult(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v7);
  v9 = (char *)&v11 - v8;
  swift_storeEnumTagMultiPayload();
  sub_1B1F3C164((uint64_t)v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t Future.deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v5 = v4 + *(_QWORD *)(*(_QWORD *)v4 + 88);
  v6 = type metadata accessor for FutureStorage(0, *(_QWORD *)(*(_QWORD *)v4 + 80), a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);

  return v4;
}

uint64_t type metadata accessor for FutureStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FutureStorage);
}

uint64_t Future.__deallocating_deinit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Future.deinit(a1, a2, a3, a4);
  return swift_deallocClassInstance();
}

BOOL sub_1B1F3CCE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F3CA88(a1, a2, a3, a4);
}

uint64_t sub_1B1F3CD0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1F3CBDC(a1, a2, a3, a4);
}

uint64_t sub_1B1F3CD2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FutureStorage(319, *(_QWORD *)(a1 + 80), a3, a4);
  if (v5 <= 0x3F)
  {
    result = swift_initClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for Future(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Future);
}

uint64_t method lookup function for Future()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_1B1F3CDC0()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for Promise(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Promise);
}

uint64_t sub_1B1F3CE10()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

id *sub_1B1F3CE80(id *__dst, id *a2, uint64_t a3)
{
  id *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  id v11;
  id v12;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = (char *)*a2;
    *v3 = *a2;
    v3 = (id *)&v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if (v9 >= 2)
    {
      if (v5 <= 3)
        v10 = v5;
      else
        v10 = 4;
      __asm { BR              X14 }
    }
    if (v9 == 1)
    {
      v11 = *a2;
      v12 = *a2;
      *v3 = v11;
      *((_BYTE *)v3 + v5) = 1;
    }
    else
    {
      (*(void (**)(id *))(v4 + 16))(__dst);
      *((_BYTE *)v3 + v5) = 0;
    }
  }
  return v3;
}

void sub_1B1F3CFB8(id *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = *(_QWORD *)(v2 + 64);
  if (v3 <= 8)
    v3 = 8;
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 < 2)
  {
    if (v4 == 1)

    else
      (*(void (**)(void))(v2 + 8))();
  }
  else
  {
    if (v3 <= 3)
      v5 = v3;
    else
      v5 = 4;
    ((void (*)(void))((char *)&loc_1B1F3D000 + 4 * byte_1B22A2455[v5]))();
  }
}

_BYTE *sub_1B1F3D060(_BYTE *__dst, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v8;
  id v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    v8 = *a2;
    v9 = *a2;
    *(_QWORD *)__dst = v8;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 16))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

id *sub_1B1F3D158(id *__dst, void **__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  void *v12;
  id v13;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)__dst + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)__src + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      v12 = *__src;
      v13 = v12;
      *__dst = v12;
      *((_BYTE *)__dst + v7) = 1;
    }
    else
    {
      (*(void (**)(id *, void **, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((_BYTE *)__dst + v7) = 0;
    }
  }
  return __dst;
}

_BYTE *sub_1B1F3D308(_BYTE *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if (v6 >= 2)
  {
    if (v5 <= 3)
      v7 = v5;
    else
      v7 = 4;
    __asm { BR              X13 }
  }
  if (v6 == 1)
  {
    *(_QWORD *)__dst = *a2;
    __dst[v5] = 1;
  }
  else
  {
    (*(void (**)(_BYTE *))(v4 + 32))(__dst);
    __dst[v5] = 0;
  }
  return __dst;
}

id *sub_1B1F3D3F0(id *__dst, id *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;

  if (__dst != __src)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(v5 - 8);
    if (*(_QWORD *)(v6 + 64) <= 8uLL)
      v7 = 8;
    else
      v7 = *(_QWORD *)(v6 + 64);
    v8 = *((unsigned __int8 *)__dst + v7);
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v10 = *((unsigned __int8 *)__src + v7);
    if (v10 >= 2)
    {
      if (v7 <= 3)
        v11 = v7;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
    {
      *__dst = *__src;
      *((_BYTE *)__dst + v7) = 1;
    }
    else
    {
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *((_BYTE *)__dst + v7) = 0;
    }
  }
  return __dst;
}

uint64_t sub_1B1F3D598(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 253) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 3)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 254);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1F3D65C + 4 * byte_1B22A2478[(v4 - 1)]))();
}

void sub_1B1F3D6A8(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFE)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 253) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFD)
    __asm { BR              X11 }
  v8 = a2 - 254;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1B1F3D850(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64) > 8uLL)
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1F3D898 + 4 * byte_1B22A2486[v3]))();
}

void sub_1B1F3D8E0(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  size_t v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v4 = 8;
  else
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    v5 = a2 - 2;
    if (v4 < 4)
    {
      v6 = v5 >> (8 * v4);
      v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if ((_DWORD)v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if ((_DWORD)v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata accessor for FutureResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FutureResult);
}

uint64_t sub_1B1F3D9B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FutureState(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void **sub_1B1F3DA48(void **a1, void **a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v13;
  id *v14;
  unsigned int v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  id v21;
  id v22;

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6 & 0xF8 | 7;
  v8 = ~v7;
  if (*(_QWORD *)(v5 + 64) <= 8uLL)
    v9 = 8;
  else
    v9 = *(_QWORD *)(v5 + 64);
  v10 = v9 + 8;
  v11 = (char *)*a2;
  *a1 = *a2;
  if ((v6 & 0x1000F8) != 0
    || ((((v9 + 8 + (((v6 & 0xF8) + 15) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    a1 = (void **)&v11[(v7 + 16) & v8];
    swift_retain();
  }
  else
  {
    v13 = (_QWORD *)(((unint64_t)a1 + 15) & v8);
    v14 = (id *)(((unint64_t)a2 + 15) & v8);
    v15 = *((unsigned __int8 *)v14 + v9);
    v16 = v11;
    if ((v15 ^ 0xFF) < 0xFD)
    {
      memcpy(v13, v14, v9 + 1);
    }
    else
    {
      if (v15 >= 2)
      {
        if (v9 <= 3)
          v17 = v9;
        else
          v17 = 4;
        __asm { BR              X11 }
      }
      if (v15 == 1)
      {
        v21 = *v14;
        v22 = *v14;
        *v13 = v21;
        *((_BYTE *)v13 + v9) = 1;
      }
      else
      {
        (*(void (**)(_QWORD *, id *, uint64_t))(v5 + 16))(v13, v14, v4);
        *((_BYTE *)v13 + v9) = 0;
      }
    }
    v18 = (_QWORD *)(((unint64_t)v13 + v10) & 0xFFFFFFFFFFFFF8);
    v19 = (_QWORD *)(((unint64_t)v14 + v10) & 0xFFFFFFFFFFFFFFF8);
    *v18 = *v19;
    *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v19 + 15) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1B1F3DC14(id *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  id *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;

  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8 | 7;
  v6 = (id *)(((unint64_t)a1 + v5 + 8) & ~v5);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v4 + 64);
  v8 = *((unsigned __int8 *)v6 + v7);
  if ((v8 ^ 0xFF) >= 0xFD)
  {
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v9 = v7;
      else
        v9 = 4;
      __asm { BR              X13 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *))(v4 + 8))(v6);
  }
  return swift_bridgeObjectRelease();
}

void **sub_1B1F3DD24(void **a1, void **a2, uint64_t a3)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  id *v12;
  uint64_t v13;
  unsigned int v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  id v20;
  id v21;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 80) & 0xF8;
  v8 = v7 + 15;
  v9 = (unint64_t)a1 + v7 + 15;
  v10 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)(v9 & v10);
  v12 = (id *)(((unint64_t)a2 + v8) & v10);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v13 = 8;
  else
    v13 = *(_QWORD *)(v6 + 64);
  v14 = *((unsigned __int8 *)v12 + v13);
  v15 = v4;
  if ((v14 ^ 0xFF) < 0xFD)
  {
    memcpy(v11, v12, v13 + 1);
  }
  else
  {
    if (v14 >= 2)
    {
      if (v13 <= 3)
        v16 = v13;
      else
        v16 = 4;
      __asm { BR              X11 }
    }
    if (v14 == 1)
    {
      v20 = *v12;
      v21 = *v12;
      *v11 = v20;
      *((_BYTE *)v11 + v13) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, id *, uint64_t))(v6 + 16))(v11, v12, v5);
      *((_BYTE *)v11 + v13) = 0;
    }
  }
  v17 = (_QWORD *)(((unint64_t)v11 + v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  v18 = (_QWORD *)(((unint64_t)v12 + v13 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v17 = *v18;
  *(_QWORD *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

void **sub_1B1F3DEA4(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id *v15;
  id *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unsigned int v26;
  uint64_t v27;
  id v28;
  id v29;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  v8 = v6;

  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 80) & 0xF8;
  v12 = v11 + 15;
  v13 = (unint64_t)a1 + v11 + 15;
  v14 = ~v11 & 0xFFFFFFFFFFFFFFF8;
  v15 = (id *)(v13 & v14);
  v16 = (id *)(((unint64_t)a2 + v12) & v14);
  if (*(_QWORD *)(v10 + 64) <= 8uLL)
    v17 = 8;
  else
    v17 = *(_QWORD *)(v10 + 64);
  v18 = *((unsigned __int8 *)v15 + v17);
  v19 = *((unsigned __int8 *)v16 + v17);
  if ((v18 ^ 0xFF) < 0xFD)
  {
    if ((v19 ^ 0xFF) >= 0xFD)
    {
      if (v19 >= 2)
      {
        if (v17 <= 3)
          v21 = v17;
        else
          v21 = 4;
        __asm { BR              X11 }
      }
      if (v19 == 1)
        goto LABEL_39;
LABEL_24:
      (*(void (**)(id *, id *, uint64_t))(v10 + 16))(v15, v16, v9);
      *((_BYTE *)v15 + v17) = 0;
      goto LABEL_29;
    }
LABEL_28:
    memcpy(v15, v16, v17 + 1);
    goto LABEL_29;
  }
  if (v19 > 2)
  {
    if (v18 >= 2)
    {
      if (v17 <= 3)
        v22 = v17;
      else
        v22 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)

    else
      (*(void (**)(id *, uint64_t))(v10 + 8))(v15, v9);
    goto LABEL_28;
  }
  if (v15 != v16)
  {
    if (v18 >= 2)
    {
      if (v17 <= 3)
        v20 = v17;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v18 == 1)

    else
      (*(void (**)(id *, uint64_t))(v10 + 8))(v15, v9);
    v26 = *((unsigned __int8 *)v16 + v17);
    if (v26 >= 2)
    {
      if (v17 <= 3)
        v27 = v17;
      else
        v27 = 4;
      __asm { BR              X12 }
    }
    if (v26 == 1)
    {
LABEL_39:
      v28 = *v16;
      v29 = *v16;
      *v15 = v28;
      *((_BYTE *)v15 + v17) = 1;
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_29:
  v23 = (_QWORD *)(((unint64_t)v15 + v17 + 8) & 0xFFFFFFFFFFFFFFF8);
  v24 = (_QWORD *)(((unint64_t)v16 + v17 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v23 = *v24;
  *(_QWORD *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *sub_1B1F3E1FC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80) & 0xF8;
  v6 = v5 + 15;
  v7 = (unint64_t)a1 + v5 + 15;
  v8 = ~v5 & 0xFFFFFFFFFFFFFFF8;
  v9 = (_QWORD *)(v7 & v8);
  v10 = (_QWORD *)(((unint64_t)a2 + v6) & v8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v11 = 8;
  else
    v11 = *(_QWORD *)(v4 + 64);
  v12 = *((unsigned __int8 *)v10 + v11);
  if ((v12 ^ 0xFF) < 0xFD)
  {
    memcpy(v9, v10, v11 + 1);
  }
  else
  {
    if (v12 >= 2)
    {
      if (v11 <= 3)
        v13 = v11;
      else
        v13 = 4;
      __asm { BR              X13 }
    }
    if (v12 == 1)
    {
      *v9 = *v10;
      *((_BYTE *)v9 + v11) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *, _QWORD *))(v4 + 32))(v9, v10);
      *((_BYTE *)v9 + v11) = 0;
    }
  }
  v14 = (_QWORD *)(((unint64_t)v9 + v11 + 8) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v10 + v11 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  *(_QWORD *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFF8);
  return a1;
}

void **sub_1B1F3E358(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id *v13;
  id *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v24;
  uint64_t v25;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_DWORD *)(v8 + 80) & 0xF8;
  v10 = v9 + 15;
  v11 = (unint64_t)a1 + v9 + 15;
  v12 = ~v9 & 0xFFFFFFFFFFFFFFF8;
  v13 = (id *)(v11 & v12);
  v14 = (id *)(((unint64_t)a2 + v10) & v12);
  if (*(_QWORD *)(v8 + 64) <= 8uLL)
    v15 = 8;
  else
    v15 = *(_QWORD *)(v8 + 64);
  v16 = *((unsigned __int8 *)v13 + v15);
  v17 = *((unsigned __int8 *)v14 + v15);
  if ((v16 ^ 0xFF) < 0xFD)
  {
    if ((v17 ^ 0xFF) >= 0xFD)
    {
      if (v17 >= 2)
      {
        if (v15 <= 3)
          v19 = v15;
        else
          v19 = 4;
        __asm { BR              X11 }
      }
      if (v17 == 1)
        goto LABEL_39;
LABEL_24:
      (*(void (**)(id *, id *, uint64_t))(v8 + 32))(v13, v14, v7);
      *((_BYTE *)v13 + v15) = 0;
      goto LABEL_29;
    }
LABEL_28:
    memcpy(v13, v14, v15 + 1);
    goto LABEL_29;
  }
  if (v17 > 2)
  {
    if (v16 >= 2)
    {
      if (v15 <= 3)
        v20 = v15;
      else
        v20 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)

    else
      (*(void (**)(id *, uint64_t))(v8 + 8))(v13, v7);
    goto LABEL_28;
  }
  if (v13 != v14)
  {
    if (v16 >= 2)
    {
      if (v15 <= 3)
        v18 = v15;
      else
        v18 = 4;
      __asm { BR              X12 }
    }
    if (v16 == 1)

    else
      (*(void (**)(id *, uint64_t))(v8 + 8))(v13, v7);
    v24 = *((unsigned __int8 *)v14 + v15);
    if (v24 >= 2)
    {
      if (v15 <= 3)
        v25 = v15;
      else
        v25 = 4;
      __asm { BR              X12 }
    }
    if (v24 == 1)
    {
LABEL_39:
      *v13 = *v14;
      *((_BYTE *)v13 + v15) = 1;
      goto LABEL_29;
    }
    goto LABEL_24;
  }
LABEL_29:
  v21 = (_QWORD *)(((unint64_t)v13 + v15 + 8) & 0xFFFFFFFFFFFFFFF8);
  v22 = (_QWORD *)(((unint64_t)v14 + v15 + 8) & 0xFFFFFFFFFFFFFFF8);
  *v21 = *v22;
  *(_QWORD *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1F3E69C(int *a1, int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  v3 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v4 = 8;
  if (*(_QWORD *)(v3 + 64) > 8uLL)
    v4 = *(_QWORD *)(v3 + 64);
  if (!a2)
    return 0;
  v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  v6 = v5 | 7;
  v7 = v4 + 8;
  if ((a2 & 0x80000000) == 0)
    goto LABEL_5;
  v10 = ((((v7 + ((v5 + 15) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  v11 = v10 & 0xFFFFFFF8;
  v12 = a2 - 2147483646;
  if ((v10 & 0xFFFFFFF8) != 0)
    v12 = 2;
  if (v12 >= 0x10000)
    v13 = 4;
  else
    v13 = 2;
  if (v12 < 0x100)
    v14 = 1;
  else
    v14 = v13;
  if (v14 == 4)
  {
    v15 = *(int *)((char *)a1 + v10);
    if (!v15)
      goto LABEL_5;
  }
  else if (v14 == 2)
  {
    v15 = *(unsigned __int16 *)((char *)a1 + v10);
    if (!v15)
      goto LABEL_5;
  }
  else
  {
    v15 = *((unsigned __int8 *)a1 + v10);
    if (!v15)
    {
LABEL_5:
      v8 = *(_QWORD *)((((v7 + (((unint64_t)a1 + v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8);
      if (v8 >= 0xFFFFFFFF)
        LODWORD(v8) = -1;
      return (v8 + 1);
    }
  }
  v16 = v15 - 1;
  if (v11)
  {
    v16 = 0;
    v17 = *a1;
  }
  else
  {
    v17 = 0;
  }
  return (v17 | v16) ^ 0x80000000;
}

void sub_1B1F3E7AC(unsigned int *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  unsigned int v10;
  int v11;
  unsigned int v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  if (v6 <= 8)
    v6 = 8;
  v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  v8 = ((((v6 + 8 + ((v7 + 15) & ~(v7 | 7))) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a3 < 0)
  {
    v10 = a3 - 2147483646;
    if ((_DWORD)v8)
      v10 = 2;
    if (v10 >= 0x10000)
      v11 = 4;
    else
      v11 = 2;
    if (v10 < 0x100)
      v9 = 1;
    else
      v9 = v11;
    if ((a2 & 0x80000000) == 0)
LABEL_5:
      __asm { BR              X13 }
  }
  else
  {
    v9 = 0u;
    if ((a2 & 0x80000000) == 0)
      goto LABEL_5;
  }
  if ((_DWORD)v8)
  {
    v12 = a2 ^ 0x80000000;
    bzero(a1, v8);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_1B1F3E8FC(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (!a2)
    JUMPOUT(0x1B1F3E8E8);
  JUMPOUT(0x1B1F3E8C4);
}

void sub_1B1F3E908()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1F3E8E8);
}

void sub_1B1F3E910()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1F3E8E8);
}

uint64_t type metadata accessor for FutureState(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FutureState);
}

uint64_t sub_1B1F3E928(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  unint64_t v5;

  result = type metadata accessor for FutureResult(319, *(_QWORD *)(a1 + 16), a3, a4);
  if (v5 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

char *sub_1B1F3E980(char *__dst, char **a2, uint64_t a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  char *v12;
  char *v13;

  v3 = __dst;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    v8 = *a2;
    *(_QWORD *)v3 = *a2;
    v3 = &v8[(unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8];
    swift_retain();
  }
  else
  {
    v9 = *((unsigned __int8 *)a2 + v5);
    if ((v9 ^ 0xFF) < 0xFD)
    {
      memcpy(__dst, a2, v5 + 1);
    }
    else
    {
      if (v9 >= 2)
      {
        if (v5 <= 3)
          v10 = v5;
        else
          v10 = 4;
        __asm { BR              X14 }
      }
      if (v9 == 1)
      {
        v12 = *a2;
        v13 = *a2;
        *(_QWORD *)v3 = v12;
        v3[v5] = 1;
      }
      else
      {
        (*(void (**)(char *))(v4 + 16))(__dst);
        v3[v5] = 0;
      }
    }
  }
  return v3;
}

void sub_1B1F3EAC4(id *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v3 = 8;
  if (*(_QWORD *)(v2 + 64) > 8uLL)
    v3 = *(_QWORD *)(v2 + 64);
  v4 = *((unsigned __int8 *)a1 + v3);
  if (v4 <= 2)
  {
    if (v4 == 2)
    {
      if (v3 <= 3)
        v5 = v3;
      else
        v5 = 4;
      ((void (*)(void))((char *)&loc_1B1F3EB10 + 4 * byte_1B22A24D6[v5]))();
    }
    else if (v4 == 1)
    {

    }
    else
    {
      (*(void (**)(void))(v2 + 8))();
    }
  }
}

_QWORD *sub_1B1F3EB74(_QWORD *__dst, id *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  id v9;
  id v10;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if ((v6 ^ 0xFF) < 0xFD)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else
  {
    if (v6 >= 2)
    {
      if (v5 <= 3)
        v7 = v5;
      else
        v7 = 4;
      __asm { BR              X13 }
    }
    if (v6 == 1)
    {
      v9 = *a2;
      v10 = *a2;
      *__dst = v9;
      *((_BYTE *)__dst + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 16))(__dst);
      *((_BYTE *)__dst + v5) = 0;
    }
  }
  return __dst;
}

void **sub_1B1F3EC78(void **__dst, void **__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  id v17;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *((unsigned __int8 *)__dst + v7);
  v9 = *((unsigned __int8 *)__src + v7);
  if ((v8 ^ 0xFF) < 0xFD)
  {
    if ((v9 ^ 0xFF) >= 0xFD)
    {
      if (v9 >= 2)
      {
        if (v7 <= 3)
          v11 = v7;
        else
          v11 = 4;
        __asm { BR              X11 }
      }
      if (v9 == 1)
        goto LABEL_39;
LABEL_24:
      (*(void (**)(void **, void **, uint64_t))(v6 + 16))(__dst, __src, v5);
      *((_BYTE *)__dst + v7) = 0;
      return __dst;
    }
LABEL_28:
    memcpy(__dst, __src, v7 + 1);
    return __dst;
  }
  if (v9 > 2)
  {
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(void **, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    goto LABEL_28;
  }
  if (__dst != __src)
  {
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(void **, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v14 = *((unsigned __int8 *)__src + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 1)
    {
LABEL_39:
      v16 = *__src;
      v17 = v16;
      *__dst = v16;
      *((_BYTE *)__dst + v7) = 1;
      return __dst;
    }
    goto LABEL_24;
  }
  return __dst;
}

_QWORD *sub_1B1F3EF58(_QWORD *__dst, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  if (*(_QWORD *)(v4 + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(v4 + 64);
  v6 = *((unsigned __int8 *)a2 + v5);
  if ((v6 ^ 0xFF) < 0xFD)
  {
    memcpy(__dst, a2, v5 + 1);
  }
  else
  {
    if (v6 >= 2)
    {
      if (v5 <= 3)
        v7 = v5;
      else
        v7 = 4;
      __asm { BR              X13 }
    }
    if (v6 == 1)
    {
      *__dst = *a2;
      *((_BYTE *)__dst + v5) = 1;
    }
    else
    {
      (*(void (**)(_QWORD *))(v4 + 32))(__dst);
      *((_BYTE *)__dst + v5) = 0;
    }
  }
  return __dst;
}

id *sub_1B1F3F04C(id *__dst, id *__src, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if (*(_QWORD *)(v6 + 64) <= 8uLL)
    v7 = 8;
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *((unsigned __int8 *)__dst + v7);
  v9 = *((unsigned __int8 *)__src + v7);
  if ((v8 ^ 0xFF) < 0xFD)
  {
    if ((v9 ^ 0xFF) >= 0xFD)
    {
      if (v9 >= 2)
      {
        if (v7 <= 3)
          v11 = v7;
        else
          v11 = 4;
        __asm { BR              X11 }
      }
      if (v9 == 1)
        goto LABEL_39;
LABEL_24:
      (*(void (**)(id *, id *, uint64_t))(v6 + 32))(__dst, __src, v5);
      *((_BYTE *)__dst + v7) = 0;
      return __dst;
    }
LABEL_28:
    memcpy(__dst, __src, v7 + 1);
    return __dst;
  }
  if (v9 > 2)
  {
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v12 = v7;
      else
        v12 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    goto LABEL_28;
  }
  if (__dst != __src)
  {
    if (v8 >= 2)
    {
      if (v7 <= 3)
        v10 = v7;
      else
        v10 = 4;
      __asm { BR              X12 }
    }
    if (v8 == 1)

    else
      (*(void (**)(id *, _QWORD))(v6 + 8))(__dst, *(_QWORD *)(a3 + 16));
    v14 = *((unsigned __int8 *)__src + v7);
    if (v14 >= 2)
    {
      if (v7 <= 3)
        v15 = v7;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    if (v14 == 1)
    {
LABEL_39:
      *__dst = *__src;
      *((_BYTE *)__dst + v7) = 1;
      return __dst;
    }
    goto LABEL_24;
  }
  return __dst;
}

uint64_t sub_1B1F3F324(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;

  v3 = 8;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) > 8uLL)
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) > 3)
    goto LABEL_6;
  v8 = ((a2 + ~(-1 << v5) - 252) >> v5) + 1;
  if (HIWORD(v8))
  {
    v6 = *(_DWORD *)(a1 + v4);
    if (v6)
      goto LABEL_14;
LABEL_21:
    v10 = *(unsigned __int8 *)(a1 + v3);
    if (v10 >= 3)
      v11 = (v10 ^ 0xFF) + 1;
    else
      v11 = 0;
    if (v11 >= 2)
      return v11 - 1;
    else
      return 0;
  }
  if (v8 > 0xFF)
  {
    v6 = *(unsigned __int16 *)(a1 + v4);
    if (*(_WORD *)(a1 + v4))
      goto LABEL_14;
    goto LABEL_21;
  }
  if (v8 < 2)
    goto LABEL_21;
LABEL_6:
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 253);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_1B1F3F3E8 + 4 * byte_1B22A250D[(v4 - 1)]))();
}

void sub_1B1F3F440(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (v5 <= 8)
    v5 = 8;
  v6 = v5 + 1;
  if (a3 < 0xFD)
  {
    v7 = 0u;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 252) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = 4u;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = 1u;
  }
  if (a2 <= 0xFC)
    __asm { BR              X11 }
  v8 = a2 - 253;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_1B1F3F5E8(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unsigned int v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (v2 <= 8)
    v2 = 8;
  v3 = *(unsigned __int8 *)(a1 + v2);
  if (v3 >= 3)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

void sub_1B1F3F614(_WORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  size_t v6;
  unsigned int v7;
  int v8;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64) <= 8uLL)
    v5 = 8;
  else
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (a2 > 0xFD)
  {
    v6 = (v5 + 1);
    v7 = a2 - 254;
    if (v6 < 4)
    {
      if ((_DWORD)v5 != -1)
      {
        v8 = v7 & ~(-1 << (8 * (v5 + 1)));
        bzero(a1, v6);
        if ((_DWORD)v5 == 2)
        {
          *a1 = v8;
          *((_BYTE *)a1 + 2) = BYTE2(v8);
        }
        else if ((_DWORD)v5 == 1)
        {
          *a1 = v8;
        }
        else
        {
          *(_BYTE *)a1 = v8;
        }
      }
    }
    else
    {
      bzero(a1, v6);
      *(_DWORD *)a1 = v7;
    }
  }
  else if (a2)
  {
    *((_BYTE *)a1 + v5) = -(char)a2;
  }
}

unint64_t sub_1B1F3F6D4()
{
  unint64_t result;

  result = qword_1EEF61290;
  if (!qword_1EEF61290)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EEF61290);
  }
  return result;
}

void sub_1B1F3F710(id *a1)
{
  uint64_t v1;

  sub_1B1F3C4A8(a1, *(id **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B1F3F71C(uint64_t result)
{
  if ((result & 1) != 0)
    return _swift_isClassOrObjCExistentialType();
  return result;
}

uint64_t sub_1B1F3F72C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = *(_QWORD *)(v4 + 16);
  v7 = a1 + *(int *)(type metadata accessor for FutureStorage(0, v6, a2, a3) + 28);
  v10 = type metadata accessor for FutureState(0, v6, v8, v9);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a4, v7, v10);
}

uint64_t sub_1B1F3F78C()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1F3F7B0()
{
  uint64_t v0;

  return sub_1B1F3BF90(*(char **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(char *))(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1B1F3F7C0()
{
  return swift_deallocObject();
}

uint64_t storeEnumTagSinglePayload for Section(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1F3F81C + 4 * byte_1B22A26A9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1F3F850 + 4 * byte_1B22A26A4[v4]))();
}

uint64_t sub_1B1F3F850(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F3F858(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F3F860);
  return result;
}

uint64_t sub_1B1F3F86C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F3F874);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1F3F878(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F3F880(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Section()
{
  return &type metadata for Section;
}

unint64_t sub_1B1F3F8A0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF61298;
  if (!qword_1EEF61298)
  {
    sub_1B1F3F8E8();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF61298);
  }
  return result;
}

void sub_1B1F3F8E8()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF612A0)
  {
    v0 = sub_1B2228B6C();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF612A0);
  }
}

void sub_1B1F3F93C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63BE1D0;
}

unint64_t sub_1B1F3F950()
{
  unint64_t result;

  result = qword_1EEF612A8;
  if (!qword_1EEF612A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2768, &type metadata for Section);
    atomic_store(result, (unint64_t *)&qword_1EEF612A8);
  }
  return result;
}

uint64_t sub_1B1F3F994(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char v9;

  if ((sub_1B1ADE3D8(0x6E77617073, 0xE500000000000000, a1, a2, a3, a4) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if ((sub_1B1ADE3D8(1953066601, 0xE400000000000000, a1, a2, a3, a4) & 1) != 0
         || (sub_1B1ADE3D8(0x696C616974696E69, 0xEA0000000000657ALL, a1, a2, a3, a4) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if ((sub_1B1ADE3D8(0x657461647075, 0xE600000000000000, a1, a2, a3, a4) & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v9 = sub_1B1ADE3D8(0x7265646E6572, 0xE600000000000000, a1, a2, a3, a4);
    swift_bridgeObjectRelease();
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1B1F3FAD4(char *a1, char *a2)
{
  return sub_1B1F8FD14(*a1, *a2);
}

uint64_t sub_1B1F3FAE0()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F3FB4C()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F3FB8C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F3FBF4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1F3FC50(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 0x6563726F66;
  if (*v1)
    v2 = 0x6563617073;
  *a1 = v2;
  a1[1] = 0xE500000000000000;
}

uint64_t sub_1B1F3FC80()
{
  _BYTE *v0;

  if (*v0)
    return 0x6563617073;
  else
    return 0x6563726F66;
}

uint64_t sub_1B1F3FCAC@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1F3FD0C()
{
  sub_1B1F40C04();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F3FD34()
{
  sub_1B1F40C04();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F3FD5C(_QWORD *a1, unsigned __int8 a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v13;
  __n128 v14;
  char v15;

  v13 = a3;
  sub_1B19F8E54(0, &qword_1EEF612C0, (uint64_t (*)(void))sub_1B1F40C04, (uint64_t)&type metadata for ParticleForce.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)&v13 - v10;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F40C04();
  sub_1B222A180();
  v14 = v13;
  v15 = 0;
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  sub_1B1B49FDC((unint64_t *)&qword_1ED4B72F8, MEMORY[0x1E0DEDD60]);
  sub_1B2229958();
  if (!v3)
  {
    v14.n128_u8[0] = a2;
    v15 = 1;
    sub_1B1A71E0C();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

double sub_1B1F3FEF8(uint64_t a1, char a2, float32x4_t a3)
{
  int32x2_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float v9;
  double result;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t v18;
  _BYTE v20[80];
  _OWORD v21[4];
  char v22;

  swift_retain();
  if (a2)
  {
    if (a2 == 1)
    {
      *(double *)v6.i64 = sub_1B1E52854();
      goto LABEL_10;
    }
    if (a2 == 2 && (sub_1B1E53374() & 1) != 0)
    {
      *(double *)v6.i64 = sub_1B1E54340();
LABEL_10:
      a3 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v8, a3, 2), v7, *(float32x2_t *)a3.f32, 1), v6, a3.f32[0]);
    }
  }
  else
  {
    sub_1B1E85B04(*(_QWORD *)(a1 + 8), 0, 0, 1, 0, 0, 1, 0, (uint64_t)v20, v5, 0, 1);
    sub_1B1A025EC((uint64_t)v20, (uint64_t)v21, (uint64_t (*)(_QWORD))sub_1B1C39138);
    if ((v22 & 1) != 0)
    {
      if ((sub_1B1E53374() & 1) == 0)
      {
        *(double *)v6.i64 = sub_1B1E54154();
        goto LABEL_10;
      }
    }
    else
    {
      v15 = (float32x4_t)v21[0];
      v16 = (float32x4_t)v21[1];
      v18 = (float32x4_t)v21[2];
      if ((sub_1B1E53374() & 1) != 0)
      {
        a3 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v18, a3, 2), v16, *(float32x2_t *)a3.f32, 1), v15, a3.f32[0]);
      }
      else
      {
        *(double *)v11.i64 = sub_1B1E54154();
        a3 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, v18.f32[0]), v12, *(float32x2_t *)v18.f32, 1), v13, v18, 2), v14, v18, 3), a3, 2), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, v16.f32[0]), v12, *(float32x2_t *)v16.f32, 1), v13, v16, 2),
                   v14,
                   v16,
                   3),
                 *(float32x2_t *)a3.f32,
                 1),
               vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v11, v15.f32[0]), v12, *(float32x2_t *)v15.f32, 1), v13, v15, 2), v14, v15, 3), a3.f32[0]);
      }
    }
  }
  sub_1B1E5267C();
  v17 = v9;
  swift_release();
  *(_QWORD *)&result = vmulq_n_f32(a3, v17).u64[0];
  return result;
}

uint64_t *sub_1B1F400A4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int32 v9;
  __int32 v10;
  int v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  float32x4_t v15;
  char v16;
  float32x4_t v17;
  __int128 v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_unfair_lock_s *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  uint64_t v42;
  float32x4_t *v43;
  __int32 v44;
  __int32 v45;
  float32x4_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t i;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  BOOL v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  unint64_t v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  int v64;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  float32x4_t *v79;
  float *v80;
  __int32 v81;
  __int32 v82;
  float v83;
  float32x4_t v84;
  float32x4_t v86;
  int v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unsigned __int16 *v106;
  uint64_t v107[12];
  _QWORD v108[7];
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  _OWORD v113[2];
  uint64_t v114;

  v2 = v1;
  v5 = *a1;
  v4 = a1[1];
  swift_retain_n();
  v6 = sub_1B1D17638(v4);
  v8 = v7;
  v10 = v9;
  v11 = v9;
  swift_release();
  v12.i32[0] = v10;
  v13.i32[0] = 5;
  v14 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v12, v13), 0);
  v13.i64[0] = v6;
  v13.i64[1] = v8;
  v15 = (float32x4_t)vbslq_s8(v14, (int8x16_t)xmmword_1B2244DB0, v13);
  if (v11 == 5)
    v16 = 0;
  else
    v16 = v10;
  *(double *)v17.i64 = sub_1B1F3FEF8((uint64_t)a1, v16, v15);
  v86 = v17;
  v18 = *(_OWORD *)(v2 + 32);
  v113[0] = *(_OWORD *)(v2 + 16);
  v113[1] = v18;
  v114 = *(_QWORD *)(v2 + 48);
  sub_1B1E8FCE4(v5, (uint64_t)v113, 0x200000000, v107);
  sub_1B1A025EC((uint64_t)v107, (uint64_t)v108, (uint64_t (*)(_QWORD))sub_1B19ED6CC);
  v106 = (unsigned __int16 *)v108[0];
  if (!v108[0])
    return (uint64_t *)swift_release();
  if (v112 > 0)
  {
    v90 = v109;
    if (v109)
    {
      v19 = 0;
      v89 = v108[5];
      v20 = v111;
      v21 = *(unsigned __int8 *)(v110 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v22 = v111[4];
      v88 = v111 + 8;
      v105 = v108[0] + 41;
      v87 = v21;
      v91 = v22;
      do
      {
        v23 = (unsigned int *)(v89 + 48 * v19);
        v24 = *v23;
        v97 = v23[1];
        v25 = *((_QWORD *)v23 + 3);
        v102 = (uint64_t *)*((_QWORD *)v23 + 2);
        v26 = *((_QWORD *)v23 + 4);
        v27 = *((_QWORD *)v23 + 5);
        if (v21)
        {
          v28 = *(os_unfair_lock_s **)(v27 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v28);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v27 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v22);
        v96 = v20[6];
        v100 = v20[8];
        v101 = v20[7];
        v98 = v20[10];
        v99 = v20[9];
        v29 = v20[4];
        v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v27 + 40) + 16) + 32) + 16) + 1;
        v31 = v27;
        swift_retain();
        v20[6] = ecs_stack_allocator_allocate(v29, 48 * v30, 8);
        v20[7] = v30;
        v88[1] = 0;
        v88[2] = 0;
        *v88 = 0;
        swift_release();
        v32 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v102, v25, v26, (uint64_t)v20);
        v104 = v31;
        v33 = *(_QWORD *)(*(_QWORD *)(v31 + 40) + 16);
        v34 = *(_QWORD *)(v33 + 128);
        if (*(_QWORD *)(v34 + 16)
          && (v35 = sub_1B1DC3AC8((uint64_t)&type metadata for Mass), (v36 & 1) != 0)
          && *(ValueMetadata **)(*(_QWORD *)(v33 + 24) + 16 * *(_QWORD *)(*(_QWORD *)(v34 + 56) + 8 * v35) + 32) == &type metadata for Mass)
        {
          v77 = sub_1B1A12038((uint64_t)&type metadata for Mass, (uint64_t)&off_1E63B9850, v102, v25, v26, (uint64_t)v20);
          if ((_DWORD)v24 != (_DWORD)v97)
          {
            v78 = v97 - v24;
            v79 = (float32x4_t *)(v32 + 16 * v24);
            v80 = (float *)(v77 + 4 * v24);
            v40.i32[3] = v92.i32[3];
            v39.i32[3] = v93.i32[3];
            do
            {
              v81 = v40.i32[3];
              v82 = v39.i32[3];
              v83 = *v80++;
              v39 = *v79;
              v40 = vaddq_f32(*v79, vmulq_n_f32(v86, v83));
              v39.i32[3] = v82;
              v40.i32[3] = v81;
              v84 = v40;
              v84.i32[3] = 0;
              *v79++ = v84;
              --v78;
            }
            while (v78);
            v38 = v94;
            v37 = v95;
            goto LABEL_17;
          }
        }
        else if ((_DWORD)v24 != (_DWORD)v97)
        {
          v42 = v97 - v24;
          v43 = (float32x4_t *)(v32 + 16 * v24);
          v38.i32[3] = v94.i32[3];
          v37.i32[3] = v95.i32[3];
          v40 = v92;
          v39 = v93;
          v22 = v91;
          do
          {
            v44 = v38.i32[3];
            v45 = v37.i32[3];
            v37 = *v43;
            v38 = vaddq_f32(v86, *v43);
            v37.i32[3] = v45;
            v38.i32[3] = v44;
            v46 = v38;
            v46.i32[3] = 0;
            *v43++ = v46;
            --v42;
          }
          while (v42);
          v41 = v104;
          goto LABEL_21;
        }
        v38 = v94;
        v37 = v95;
        v40 = v92;
        v39 = v93;
LABEL_17:
        v41 = v104;
        v22 = v91;
LABEL_21:
        v92 = v40;
        v93 = v39;
        v94 = v38;
        v95 = v37;
        v47 = v20[6];
        v48 = v20[8];
        if (!v48)
        {
          v74 = v20[7];
          v75 = (_QWORD *)v20[4];
          v76 = v96;
          goto LABEL_59;
        }
        v103 = v19;
        for (i = 0; i != v48; ++i)
        {
          v51 = (uint64_t *)(v47 + 48 * i);
          v52 = *v51;
          v53 = (void (*)(uint64_t))v51[4];
          v54 = v20[9];
          if (v54)
            v55 = v52 == v54;
          else
            v55 = 0;
          if (v55 || !v106[11])
            goto LABEL_23;
          v56 = v106[9];
          v57 = (_QWORD *)(v105 + v106[8]);
          v58 = v51[2];
          v59 = v57;
          v60 = v56 >> 4;
          v61 = v105;
          if (v56 >= 0x10)
          {
            while (*v59 != v52)
            {
              ++v61;
              v59 += 2;
              if (!--v60)
                goto LABEL_38;
            }
            v62 = *(unsigned __int8 *)(v61 + v106[10]);
            v63 = v62 > 5;
            v64 = (1 << v62) & 0x23;
            if (v63 || v64 == 0)
            {
LABEL_23:
              v50 = swift_retain();
              v53(v50);
              swift_release();
              continue;
            }
          }
LABEL_38:
          if (swift_conformsToProtocol2())
            v66 = v58;
          else
            v66 = 0;
          if (v66)
          {
            if (v56 < 0x10)
              goto LABEL_23;
            v67 = v57;
            v68 = v56 >> 4;
            v69 = v105;
            while (*v67 != v66)
            {
              ++v69;
              v67 += 2;
              if (!--v68)
                goto LABEL_51;
            }
            v70 = *(unsigned __int8 *)(v69 + v106[10]);
            v63 = v70 > 5;
            v71 = (1 << v70) & 0x23;
            if (v63 || v71 == 0)
              goto LABEL_23;
LABEL_51:
            v73 = 16 * (v56 >> 4);
            while (*v57 != v66)
            {
              v57 += 2;
              v73 -= 16;
              if (!v73)
                goto LABEL_23;
            }
          }
        }
        v74 = v20[7];
        v47 = v20[6];
        v75 = (_QWORD *)v20[4];
        v41 = v104;
        v76 = v96;
        if ((uint64_t)v20[8] >= 1)
          swift_arrayDestroy();
        v19 = v103;
        v21 = v87;
        v22 = v91;
LABEL_59:
        ecs_stack_allocator_deallocate(v75, v47, 48 * v74);
        v20[6] = v76;
        v20[7] = v101;
        v20[8] = v100;
        v20[9] = v99;
        v20[10] = v98;
        sub_1B1F03804((char *)v41);
        ecs_stack_allocator_pop_snapshot(v22);
        if ((v21 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v41 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v41 + 376));
        }
        swift_release();
        ++v19;
      }
      while (v19 != v90);
    }
  }
  swift_release();
  return sub_1B19ED748(v107);
}

uint64_t type metadata accessor for ParticleForce.CPUSystem()
{
  return objc_opt_self();
}

uint64_t sub_1B1F406C8(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  _OWORD v6[2];
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v2 = swift_allocObject();
  v3 = *(_OWORD *)(a1 + 104);
  v8 = *(_OWORD *)(a1 + 88);
  v9 = v3;
  v10 = *(_QWORD *)(a1 + 120);
  sub_1B1B7038C((uint64_t)v6);
  sub_1B1B4F21C(a1);
  v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B1F4074C()
{
  return "ParticleForce";
}

unint64_t sub_1B1F40760@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  __int128 v5;

  result = sub_1B1F40A20(a1);
  if (!v2)
  {
    *(_OWORD *)a2 = v5;
    *(_BYTE *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1B1F4078C(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B1F3FD5C(a1, v1[1].n128_u8[0], *v1);
}

uint64_t sub_1B1F407A8()
{
  return type metadata accessor for ParticleForce.CPUSystem();
}

double sub_1B1F407C4@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)&result = 1065353216;
  *(_OWORD *)a1 = xmmword_1B2244DB0;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t type metadata accessor for ParticleForce.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1F407FC()
{
  return "ParticleForce.GPU";
}

uint64_t sub_1B1F40810()
{
  return type metadata accessor for ParticleForce.GPUSystem();
}

uint64_t sub_1B1F4082C(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int32 v10;
  __int32 v11;
  int v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  uint64_t ObjectType;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v2 = *(_OWORD *)(a1 + 96);
  v32 = *(_OWORD *)(a1 + 80);
  v33 = v2;
  v3 = *(_OWORD *)(a1 + 128);
  v34 = *(_OWORD *)(a1 + 112);
  v35 = v3;
  v4 = *(_OWORD *)(a1 + 32);
  v29[0] = *(_OWORD *)(a1 + 16);
  v29[1] = v4;
  v5 = *(_OWORD *)(a1 + 64);
  v30 = *(_OWORD *)(a1 + 48);
  v31 = v5;
  v6 = *(_QWORD *)&v29[0];
  swift_retain();
  v7 = sub_1B1D17638(*((unint64_t *)&v29[0] + 1));
  v9 = v8;
  v11 = v10;
  v12 = v10;
  swift_release();
  v13.i32[0] = v11;
  v14.i32[0] = 5;
  v15 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v13, v14), 0);
  v14.i64[0] = v7;
  v14.i64[1] = v9;
  v16 = (float32x4_t)vbslq_s8(v15, (int8x16_t)xmmword_1B2244DB0, v14);
  if (v12 == 5)
    v17 = 0;
  else
    v17 = v11;
  *(double *)&v18 = sub_1B1F3FEF8((uint64_t)v29, v17, v16);
  v28 = v18;
  v19 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_force_uniforms(0);
    sub_1B1F40E1C((uint64_t)&v28, 1, ObjectType, v21, v22, v23, v24, v25);
  }
  v26 = v30;
  swift_retain();
  sub_1B1B1FC34(a1);
  sub_1B1FE6FB8(v26, v6, v19 == 0, 0, a1, 0x656C636974726170, 0xEE006563726F665FLL, 0);
  sub_1B1B1FC88(a1);
  return swift_release();
}

uint64_t getEnumTagSinglePayload for ParticleForce(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 252);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 5;
  v5 = v3 - 5;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleForce(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 252;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleForce()
{
  return &type metadata for ParticleForce;
}

unint64_t sub_1B1F40A20(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  char v14;

  sub_1B19F8E54(0, &qword_1EEF612B0, (uint64_t (*)(void))sub_1B1F40C04, (uint64_t)&type metadata for ParticleForce.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v12 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1F40C04();
  v10 = (unint64_t)v9;
  sub_1B222A150();
  if (!v1)
  {
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v14 = 0;
    sub_1B1B49FDC((unint64_t *)&qword_1ED4B7310, MEMORY[0x1E0DEDD70]);
    sub_1B2229814();
    v12 = v13;
    v14 = 1;
    sub_1B1A71DC8();
    sub_1B22297B4();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if (v13 == 5)
      v10 = 0;
    else
      v10 = v13;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10;
}

unint64_t sub_1B1F40C04()
{
  unint64_t result;

  result = qword_1EEF612B8;
  if (!qword_1EEF612B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A29BC, &type metadata for ParticleForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF612B8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticleForce.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1F40C94 + 4 * byte_1B22A2795[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1F40CC8 + 4 * byte_1B22A2790[v4]))();
}

uint64_t sub_1B1F40CC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F40CD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F40CD8);
  return result;
}

uint64_t sub_1B1F40CE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F40CECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1F40CF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F40CF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleForce.CodingKeys()
{
  return &type metadata for ParticleForce.CodingKeys;
}

unint64_t sub_1B1F40D18()
{
  unint64_t result;

  result = qword_1EEF612C8;
  if (!qword_1EEF612C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2994, &type metadata for ParticleForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF612C8);
  }
  return result;
}

unint64_t sub_1B1F40D60()
{
  unint64_t result;

  result = qword_1EEF612D0;
  if (!qword_1EEF612D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A28CC, &type metadata for ParticleForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF612D0);
  }
  return result;
}

unint64_t sub_1B1F40DA8()
{
  unint64_t result;

  result = qword_1EEF612D8;
  if (!qword_1EEF612D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A28F4, &type metadata for ParticleForce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF612D8);
  }
  return result;
}

id sub_1B1F40DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;

  if (a1)
    return objc_msgSend(v4, sel_setBuffer_offset_atIndex_, a1, a4 + a2);
  else
    return objc_msgSend(v4, sel_setBuffer_offset_atIndex_, 0, 0);
}

uint64_t sub_1B1F40E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD v9[8];

  v9[2] = a3;
  v9[3] = a4;
  v9[5] = a2;
  return sub_1B1EF311C(a1, (uint64_t)sub_1B1F41188, (uint64_t)v9, a4, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEE9C0] + 8, MEMORY[0x1E0DEDD18], a8);
}

id sub_1B1F40E74(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v3;
  int64x2_t v4;
  int64x2_t v6;
  int64x2_t v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;

  objc_msgSend(v1, sel_setComputePipelineState_, a1);
  sub_1B1F411C8(&v9);
  v6 = v9;
  v2 = v10;
  sub_1B1F411C8(&v9);
  v3 = v10;
  v4 = v9;
  v9 = v6;
  v10 = v2;
  v7 = v4;
  v8 = v3;
  return objc_msgSend(v1, sel_dispatchThreadgroups_threadsPerThreadgroup_, &v9, &v7);
}

uint64_t sub_1B1F40EF8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  swift_getObjectType();
  v5 = sub_1B1F9CFAC(a3);
  return sub_1B1F410EC(a1, v5);
}

uint64_t sub_1B1F40F48(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];

  v4 = v3;
  swift_getObjectType();
  v7 = sub_1B1F9CFAC(a3);
  v9 = v8;
  v11 = v10;
  objc_msgSend(v4, sel_setComputePipelineState_, a1);
  v13[0] = v7;
  v13[1] = v9;
  v13[2] = v11;
  return RGMTLComputeCommandEncoderDispatchOnGrid2D(v4, a1, (uint64_t)v13, 1);
}

uint64_t sub_1B1F40FDC(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];

  v4 = v3;
  swift_getObjectType();
  v7 = sub_1B1F9CFAC(a3);
  v9 = v8;
  v11 = v10;
  objc_msgSend(v4, sel_setComputePipelineState_, a1);
  v14[0] = v7;
  v14[1] = v9;
  v14[2] = v11;
  return RGMTLComputeCommandEncoderDispatchOnGrid3D(v4, a1, (uint64_t)v14, v12);
}

id sub_1B1F4106C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];

  objc_msgSend(v3, sel_setComputePipelineState_, a1);
  swift_getObjectType();
  v9[0] = sub_1B1F9CF68();
  v9[1] = v6;
  v9[2] = v7;
  return objc_msgSend(v3, sel_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup_, a2, a3, v9);
}

uint64_t sub_1B1F410EC(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t result;

  objc_msgSend(v2, sel_setComputePipelineState_, a1);
  if ((a2 & 0x8000000000000000) == 0)
    return RGMTLComputeCommandEncoderDispatchOnGrid1D(v2, a1, a2, v5);
  result = sub_1B222967C();
  __break(1u);
  return result;
}

id sub_1B1F41188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  return objc_msgSend(*(id *)(v2 + 32), sel_setBytes_length_atIndex_, a1, v3, *(_QWORD *)(v2 + 40));
}

int64x2_t sub_1B1F411C8@<Q0>(int64x2_t *a1@<X8>)
{
  int64x2_t result;

  result = vdupq_n_s64(1uLL);
  *a1 = result;
  a1[1].i64[0] = 1;
  return result;
}

uint64_t sub_1B1F411DC(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];

  v4 = v3;
  swift_getObjectType();
  v7 = sub_1B1F9CFAC(a3);
  v9 = v8;
  objc_msgSend(v4, sel_setComputePipelineState_, a1);
  v12[0] = v7;
  v12[1] = v9;
  v12[2] = 6;
  return RGMTLComputeCommandEncoderDispatchOnGrid3D(v4, a1, (uint64_t)v12, v10);
}

id sub_1B1F41264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void *v7;
  _QWORD v9[3];

  v9[0] = a5;
  v9[1] = a6;
  v9[2] = a7;
  return objc_msgSend(v7, sel_dispatchThreadgroupsWithIndirectBuffer_indirectBufferOffset_threadsPerThreadgroup_, a1, a4 + a2, v9);
}

uint64_t sub_1B1F412A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  sub_1B1F41DE4(0, &qword_1EEF612F0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F41DA0();
  sub_1B222A180();
  v11[1] = a2;
  sub_1B1A0895C();
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B1F413A4()
{
  return 0x746567726174;
}

uint64_t sub_1B1F413B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x746567726174 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1F41444()
{
  sub_1B1F41DA0();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F4146C()
{
  sub_1B1F41DA0();
  return sub_1B222A1E0();
}

_QWORD *sub_1B1F41494@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1B1F41C68(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1B1F414BC(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1F412A4(a1, *v1);
}

uint64_t sub_1B1F414D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_unfair_lock_s *v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  swift_getObjectType();
  v5 = sub_1B204D6E4();
  v6 = *(os_unfair_lock_s **)(v4 + 40);
  swift_retain_n();
  os_unfair_lock_lock(v6);
  sub_1B1E8F784(a1, v3);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1E8FAC0(a1, v5, v3);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v4 + 40));
  return swift_release_n();
}

uint64_t *sub_1B1F4159C(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  uint64_t *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  float32x4_t v30;
  __int128 v31;
  int *v32;
  int v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  float32x4_t v52;
  __int128 v53;
  int *v54;
  int v55;
  int v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  uint64_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  float32x4_t v86;
  uint64_t v87;
  uint64_t v88[8];
  _OWORD v89[2];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  _OWORD v96[2];
  uint64_t v97;
  _BYTE v98[40];
  _OWORD v99[2];
  uint64_t v100;

  v2 = *(_OWORD *)(v1 + 32);
  v99[0] = *(_OWORD *)(v1 + 16);
  v99[1] = v2;
  v100 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(a1, (uint64_t)v99, 0x200000000, v88);
  result = (uint64_t *)sub_1B19F66A0((uint64_t)v88, (uint64_t)v89, (unint64_t *)&qword_1ED4B7DE0);
  if (*(_QWORD *)&v89[0])
  {
    if (v95 >= 1)
    {
      v82 = v92;
      if (v92)
      {
        v4 = v94;
        v71 = v93;
        v5 = v94[4];
        v6 = *(unsigned __int8 *)(v93 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v96[0] = v89[0];
        v96[1] = v89[1];
        v97 = v90;
        v80 = (uint64_t)(v94 + 6);
        v81 = v91;
        v83 = (_QWORD *)(v93 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v79 = v94 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        v7 = 0;
        v8 = 0;
        v78 = v6;
        v77 = v5;
        while (1)
        {
          v85 = v8;
          v87 = v7;
          v9 = (unsigned int *)(v81 + 48 * v7);
          v11 = *v9;
          v10 = v9[1];
          v13 = (uint64_t *)*((_QWORD *)v9 + 2);
          v12 = *((_QWORD *)v9 + 3);
          v14 = *((_QWORD *)v9 + 4);
          v15 = *((_QWORD *)v9 + 5);
          if (v6)
          {
            v16 = *(os_unfair_lock_s **)(v15 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v5);
          sub_1B19F66A0(v80, (uint64_t)v98, &qword_1ED4B7FB0);
          v17 = v4[4];
          v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v4[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v4[7] = v18;
          v79[1] = 0;
          v79[2] = 0;
          *v79 = 0;
          swift_release();
          v84 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v13, v12, v14, (uint64_t)v4);
          v19 = sub_1B1A12038((uint64_t)&type metadata for Orientation, (uint64_t)&off_1E6371540, v13, v12, v14, (uint64_t)v4);
          v20 = sub_1B1A12038((uint64_t)&type metadata for LookAt, (uint64_t)&off_1E63BB4E8, v13, v12, v14, (uint64_t)v4);
          if (v13)
            break;
          if ((_DWORD)v11 != (_DWORD)v10)
          {
            v6 = v78;
            v44 = v83;
            v45 = v67;
            v46 = v69;
            v47 = v65;
            do
            {
              v54 = (int *)(v20 + 8 * v11);
              v55 = *v54;
              v56 = v54[1];
              v57 = v55 == -1 && v56 == 0;
              if (!v57 && (v55 & 0x80000000) == 0 && v44[1] > v55)
              {
                v58 = *v44 + 12 * v55;
                if (v56 == -1 || *(_DWORD *)(v58 + 8) == v56)
                {
                  v60 = *(_QWORD *)(*(_QWORD *)(v71 + 136) + 8 * *(int *)(*v44 + 12 * v55) + 32);
                  v61 = *(_QWORD *)(v60 + 48);
                  v62 = *(_QWORD *)(v61 + 16);
                  if (v62)
                  {
                    v63 = *(__int16 *)(v58 + 4);
                    v64 = (_QWORD *)(v61 + 56);
                    while ((ValueMetadata *)*(v64 - 3) != &type metadata for Position)
                    {
                      v64 += 5;
                      if (!--v62)
                        goto LABEL_35;
                    }
                    v48 = *(float32x4_t *)(*(_QWORD *)(v60 + 128) + *v64 + 16 * v63);
                    v48.i32[3] = v47.i32[3];
                    v49 = *(float32x4_t *)(v84 + 16 * v11);
                    v49.i32[3] = v45.i32[3];
                    v68 = v49;
                    v70 = v48;
                    v50 = vsubq_f32(v48, v49);
                    v51 = (int32x4_t)vmulq_f32(v50, v50);
                    v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
                    *(float32x2_t *)v48.f32 = vrsqrte_f32((float32x2_t)v51.u32[0]);
                    *(float32x2_t *)v48.f32 = vmul_f32(*(float32x2_t *)v48.f32, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32)));
                    v52 = vmulq_n_f32(v50, vmul_f32(*(float32x2_t *)v48.f32, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(*(float32x2_t *)v48.f32, *(float32x2_t *)v48.f32))).f32[0]);
                    v52.i32[3] = v46.i32[3];
                    v66 = v52;
                    *(double *)&v53 = sub_1B19C0644((float32x4_t)xmmword_1B2244DF0, v52);
                    v44 = v83;
                    *(_OWORD *)(v19 + 16 * v11) = v53;
                    v46 = v66;
                    v45 = v68;
                    v47 = v70;
                  }
                }
              }
LABEL_35:
              ++v11;
            }
            while (v11 != v10);
            v65 = v47;
            v67 = v45;
            v69 = v46;
LABEL_53:
            v5 = v77;
            goto LABEL_54;
          }
          v5 = v77;
          v6 = v78;
LABEL_54:
          v43 = v87;
          v8 = v85;
LABEL_55:
          sub_1B1F05D48(v4, (unsigned __int16 **)v96, (uint64_t)v98);
          sub_1B1F03804((char *)v15);
          ecs_stack_allocator_pop_snapshot(v5);
          if ((v6 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
          }
          swift_release();
          v7 = v43 + 1;
          if (v7 == v82)
          {
            sub_1B19ED748(v88);
            return sub_1B19ED748(v88);
          }
        }
        v6 = v78;
        if (v14)
        {
          v21 = 0;
          v22 = v83;
          v8 = v85;
          v23 = v73;
          v24 = v75;
          v25 = v72;
          do
          {
            v32 = (int *)(v20 + 8 * v21);
            v33 = *v32;
            v34 = v32[1];
            v35 = v33 == -1 && v34 == 0;
            if (!v35 && (v33 & 0x80000000) == 0 && v22[1] > v33)
            {
              v36 = *v22 + 12 * v33;
              if (v34 == -1 || *(_DWORD *)(v36 + 8) == v34)
              {
                v38 = *(_QWORD *)(*(_QWORD *)(v71 + 136) + 8 * *(int *)(*v22 + 12 * v33) + 32);
                v39 = *(_QWORD *)(v38 + 48);
                v40 = *(_QWORD *)(v39 + 16);
                if (v40)
                {
                  v41 = *(__int16 *)(v36 + 4);
                  v42 = (_QWORD *)(v39 + 56);
                  while ((ValueMetadata *)*(v42 - 3) != &type metadata for Position)
                  {
                    v42 += 5;
                    if (!--v40)
                      goto LABEL_13;
                  }
                  v26 = *(float32x4_t *)(*(_QWORD *)(v38 + 128) + *v42 + 16 * v41);
                  v26.i32[3] = v25.i32[3];
                  v76 = v26;
                  v27 = *(float32x4_t *)(v84 + 16 * v21);
                  v27.i32[3] = v23.i32[3];
                  v86 = v27;
                  v28 = vsubq_f32(v26, v27);
                  v29 = (int32x4_t)vmulq_f32(v28, v28);
                  v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
                  *(float32x2_t *)v26.f32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
                  *(float32x2_t *)v26.f32 = vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32)));
                  v30 = vmulq_n_f32(v28, vmul_f32(*(float32x2_t *)v26.f32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32))).f32[0]);
                  v30.i32[3] = v24.i32[3];
                  v74 = v30;
                  *(double *)&v31 = sub_1B19C0644((float32x4_t)xmmword_1B2244DF0, v30);
                  v22 = v83;
                  *(_OWORD *)(v19 + 16 * v21) = v31;
                  v24 = v74;
                  v25 = v76;
                  v23 = v86;
                }
              }
            }
LABEL_13:
            ++v21;
          }
          while (v21 != v14);
          v72 = v25;
          v73 = v23;
          v75 = v24;
          v5 = v77;
          v43 = v87;
          goto LABEL_55;
        }
        goto LABEL_53;
      }
    }
    return sub_1B19ED748(v88);
  }
  return result;
}

uint64_t type metadata accessor for LookAtSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for LookAt()
{
  return &type metadata for LookAt;
}

uint64_t sub_1B1F41B98()
{
  uint64_t v0;
  __int128 v1;
  _OWORD v3[2];
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v0 = swift_allocObject();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v5 = qword_1ED4D09F8;
  v6 = 0;
  v7 = 2;
  v8 = 0;
  v9 = 2;
  v10 = 0;
  swift_retain();
  sub_1B1B45C58((uint64_t)v3);
  swift_release();
  v1 = v3[1];
  *(_OWORD *)(v0 + 16) = v3[0];
  *(_OWORD *)(v0 + 32) = v1;
  *(_QWORD *)(v0 + 48) = v4;
  return v0;
}

const char *sub_1B1F41C50()
{
  return "LookAtSystem";
}

_QWORD *sub_1B1F41C68(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  _QWORD v11[2];

  sub_1B1F41DE4(0, &qword_1EEF612E0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)v11 - v7;
  v9 = sub_1B19FA070(a1, a1[3]);
  sub_1B1F41DA0();
  sub_1B222A150();
  if (!v1)
  {
    sub_1B1A08878();
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v9 = (_QWORD *)v11[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B1F41DA0()
{
  unint64_t result;

  result = qword_1EEF612E8;
  if (!qword_1EEF612E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2BA4, &type metadata for LookAt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF612E8);
  }
  return result;
}

void sub_1B1F41DE4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1F41DA0();
    v7 = a3(a1, &type metadata for LookAt.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for LookAt.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1F41E80 + 4 * byte_1B22A2A10[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1F41EA0 + 4 * byte_1B22A2A15[v4]))();
}

_BYTE *sub_1B1F41E80(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1F41EA0(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1F41EA8(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1F41EB0(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1F41EB8(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1F41EC0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LookAt.CodingKeys()
{
  return &type metadata for LookAt.CodingKeys;
}

unint64_t sub_1B1F41EE0()
{
  unint64_t result;

  result = qword_1EEF612F8;
  if (!qword_1EEF612F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2B7C, &type metadata for LookAt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF612F8);
  }
  return result;
}

unint64_t sub_1B1F41F28()
{
  unint64_t result;

  result = qword_1EEF61300;
  if (!qword_1EEF61300)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2AEC, &type metadata for LookAt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61300);
  }
  return result;
}

unint64_t sub_1B1F41F70()
{
  unint64_t result;

  result = qword_1EEF61308;
  if (!qword_1EEF61308)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2B14, &type metadata for LookAt.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61308);
  }
  return result;
}

uint64_t sub_1B1F41FB4(uint64_t a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t inited;
  uint64_t v5;
  __int128 v6;
  _BYTE v8[40];
  _OWORD v9[2];
  uint64_t v10;
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = *(_OWORD *)(a1 + 104);
  v11[0] = *(_OWORD *)(a1 + 88);
  v11[1] = v3;
  v12 = *(_QWORD *)(a1 + 120);
  sub_1B1A19B14();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Position;
  *(_QWORD *)(inited + 40) = &off_1E63C2410;
  *(_QWORD *)(inited + 48) = &type metadata for Velocity;
  *(_QWORD *)(inited + 56) = &off_1E63C3148;
  swift_retain();
  sub_1B1B0FA64(inited, (uint64_t)v8);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v11);
  v5 = swift_initStackObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v5 + 32) = &type metadata for Anchored;
  *(_QWORD *)(v5 + 40) = &off_1E63BE310;
  sub_1B1B441D4(v5, (uint64_t)v9);
  swift_setDeallocating();
  sub_1B1B4F21C(a1);
  sub_1B19ED720((uint64_t)v8);
  v6 = v9[1];
  *(_OWORD *)(v1 + 16) = v9[0];
  *(_OWORD *)(v1 + 32) = v6;
  *(_QWORD *)(v1 + 48) = v10;
  return v1;
}

uint64_t *sub_1B1F4210C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int32x2_t v3;
  BOOL v4;
  float v5;
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  __int128 v10;
  uint64_t v11;
  float32x4_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  os_unfair_lock_s *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  BOOL v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  BOOL v42;
  int v43;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  int v50;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v57;
  char v58;
  _QWORD *v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  float32x4_t v72;
  uint64_t v73;
  float32x4_t v74;
  uint64_t v75;
  float32x4_t v76;
  uint64_t v77;
  int32x2_t v78;
  uint64_t v79;
  unsigned __int16 *v80;
  uint64_t v81[12];
  _QWORD v82[7];
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD v87[10];
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _OWORD v92[2];
  uint64_t v93;

  v2 = *a1;
  swift_retain();
  sub_1B1E5267C();
  v78 = v3;
  sub_1B1E5371C();
  v4 = sub_1B1E36538((uint64_t)&type metadata for ParticleAffectedByGravity);
  swift_release();
  sub_1B1E5267C();
  v6 = v5;
  *(double *)v7.i64 = sub_1B1E52854();
  v74 = v8;
  v76 = v7;
  v72 = v9;
  v10 = *(_OWORD *)(v1 + 32);
  v92[0] = *(_OWORD *)(v1 + 16);
  v92[1] = v10;
  v93 = *(_QWORD *)(v1 + 48);
  sub_1B1E8FCE4(v2, (uint64_t)v92, 0x200000000, v81);
  sub_1B19ED688((uint64_t)v81, (uint64_t)v82);
  v80 = (unsigned __int16 *)v82[0];
  if (!v82[0])
    return (uint64_t *)swift_release();
  v66 = v86;
  if (v86 > 0)
  {
    v65 = v83;
    if (v83)
    {
      v11 = 0;
      v12 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v72, (float32x4_t)0), v74, v6 * -9.8), (float32x4_t)0, v76);
      v12.i32[3] = 0;
      v63 = v12;
      v64 = (float32x4_t)vdupq_lane_s32(v78, 0);
      v62 = v82[5];
      v13 = v85;
      v14 = v85[4];
      v61 = v84;
      v15 = *(unsigned __int8 *)(v84 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v59 = v85 + 8;
      v79 = v82[0] + 41;
      v58 = v4;
      v60 = v15;
      v57 = v14;
      do
      {
        v71 = v11;
        v16 = (unsigned int *)(v62 + 48 * v11);
        v17 = *v16;
        v18 = v16[1];
        v19 = v16[2];
        v20 = *((_QWORD *)v16 + 3);
        v73 = *((_QWORD *)v16 + 2);
        v21 = *((_QWORD *)v16 + 4);
        v22 = *((_QWORD *)v16 + 5);
        if (v15)
        {
          v23 = *(os_unfair_lock_s **)(v22 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v23);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v22 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v14);
        v69 = v13[7];
        v70 = v13[6];
        v67 = v13[9];
        v68 = v13[8];
        v75 = v13[10];
        v24 = v13[4];
        v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v22 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v13[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
        v13[7] = v25;
        v59[1] = 0;
        v59[2] = 0;
        *v59 = 0;
        swift_release();
        v87[0] = v61;
        v87[1] = v22;
        v77 = v22;
        v87[2] = v13;
        v87[3] = v19;
        v87[4] = (v18 - v17 + v19);
        v87[5] = v66;
        v87[6] = v17;
        v87[7] = v18;
        v87[8] = 0;
        v87[9] = 0;
        v88 = 1;
        v89 = v73;
        v90 = v20;
        v91 = v21;
        sub_1B1F42624(v87, v58, v63, v64);
        v26 = v13[6];
        v27 = v13[8];
        if (!v27)
        {
          v53 = v13[7];
          v54 = (_QWORD *)v13[4];
          v55 = v71;
          v14 = v57;
          goto LABEL_46;
        }
        for (i = 0; i != v27; ++i)
        {
          v30 = (uint64_t *)(v26 + 48 * i);
          v31 = *v30;
          v32 = (void (*)(uint64_t))v30[4];
          v33 = v13[9];
          if (v33)
            v34 = v31 == v33;
          else
            v34 = 0;
          if (v34 || !v80[11])
            goto LABEL_11;
          v35 = v80[9];
          v36 = (_QWORD *)(v79 + v80[8]);
          v37 = v30[2];
          v38 = v36;
          v39 = v35 >> 4;
          v40 = v79;
          if (v35 >= 0x10)
          {
            while (*v38 != v31)
            {
              ++v40;
              v38 += 2;
              if (!--v39)
                goto LABEL_26;
            }
            v41 = *(unsigned __int8 *)(v40 + v80[10]);
            v42 = v41 > 5;
            v43 = (1 << v41) & 0x23;
            if (v42 || v43 == 0)
            {
LABEL_11:
              v29 = swift_retain();
              v32(v29);
              swift_release();
              continue;
            }
          }
LABEL_26:
          if (swift_conformsToProtocol2())
            v45 = v37;
          else
            v45 = 0;
          if (v45)
          {
            if (v35 < 0x10)
              goto LABEL_11;
            v46 = v36;
            v47 = v35 >> 4;
            v48 = v79;
            while (*v46 != v45)
            {
              ++v48;
              v46 += 2;
              if (!--v47)
                goto LABEL_39;
            }
            v49 = *(unsigned __int8 *)(v48 + v80[10]);
            v42 = v49 > 5;
            v50 = (1 << v49) & 0x23;
            if (v42 || v50 == 0)
              goto LABEL_11;
LABEL_39:
            v52 = 16 * (v35 >> 4);
            while (*v36 != v45)
            {
              v36 += 2;
              v52 -= 16;
              if (!v52)
                goto LABEL_11;
            }
          }
        }
        v53 = v13[7];
        v26 = v13[6];
        v54 = (_QWORD *)v13[4];
        v55 = v71;
        v14 = v57;
        if ((uint64_t)v13[8] >= 1)
          swift_arrayDestroy();
LABEL_46:
        ecs_stack_allocator_deallocate(v54, v26, 48 * v53);
        v13[6] = v70;
        v13[7] = v69;
        v13[8] = v68;
        v13[9] = v67;
        v13[10] = v75;
        sub_1B1F03804((char *)v77);
        ecs_stack_allocator_pop_snapshot(v14);
        v15 = v60;
        if ((v60 & 1) != 0)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v77 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v77 + 376));
        }
        swift_release();
        v11 = v55 + 1;
      }
      while (v11 != v65);
    }
  }
  swift_release();
  return sub_1B19ED748(v81);
}

double sub_1B1F42624(_QWORD *a1, char a2, float32x4_t a3, float32x4_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  float32x4_t *v14;
  uint64_t v15;
  uint64_t v16;
  double result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  float32x4_t *v22;
  float32x4_t *v23;
  float32x4_t *v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  float32x4_t *v30;
  float32x4_t *v31;
  float32x4_t v32;

  v6 = (uint64_t *)a1[11];
  v7 = a1[12];
  v8 = a1[13];
  v9 = a1[2];
  v10 = sub_1B1A12038((uint64_t)&type metadata for Velocity, (uint64_t)&off_1E63C30D0, v6, v7, v8, v9);
  v11 = v10;
  if ((a2 & 1) != 0)
  {
    v12 = a1[6];
    v13 = a1[7] - v12;
    if (v13)
    {
      v14 = (float32x4_t *)(v10 + 16 * v12);
      do
      {
        *v14 = vaddq_f32(*v14, a3);
        ++v14;
        --v13;
      }
      while (v13);
    }
  }
  v15 = sub_1B1A12038((uint64_t)&type metadata for Position, (uint64_t)&off_1E63C2398, v6, v7, v8, v9);
  v16 = sub_1B1B48068();
  v18 = a1[6];
  v19 = a1[7] - v18;
  if ((v20 & 1) != 0)
  {
    if (v19)
    {
      v29 = 16 * v18;
      v30 = (float32x4_t *)(v15 + 16 * v18);
      v31 = (float32x4_t *)(v11 + v29);
      do
      {
        v32 = *v31++;
        result = *(double *)v32.i64;
        *v30 = vmlaq_f32(*v30, a4, v32);
        ++v30;
        --v19;
      }
      while (v19);
    }
  }
  else if (v19)
  {
    v21 = 16 * v18;
    v22 = (float32x4_t *)(v15 + 16 * v18);
    v23 = (float32x4_t *)(v16 + v21);
    v24 = (float32x4_t *)(v11 + v21);
    LODWORD(result) = 1.0;
    do
    {
      v25 = *v24++;
      v26 = v25;
      v27 = *v23++;
      v28 = v27;
      v28.i32[3] = 1.0;
      *v22 = vmlaq_f32(*v22, vmulq_f32(v28, a4), v26);
      ++v22;
      --v19;
    }
    while (v19);
  }
  return result;
}

uint64_t type metadata accessor for ParticleIntegrate.System()
{
  return objc_opt_self();
}

uint64_t sub_1B1F42794(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  sub_1B1F41FB4(a1);
  return v2;
}

const char *sub_1B1F427D4()
{
  return "ParticleIntegrate.CPU";
}

uint64_t sub_1B1F427E8()
{
  return type metadata accessor for ParticleIntegrate.System();
}

uint64_t type metadata accessor for ParticleIntegrate.GPUSystem()
{
  return objc_opt_self();
}

const char *sub_1B1F42828()
{
  return "ParticleIntegrate.GPU";
}

uint64_t sub_1B1F4283C()
{
  return type metadata accessor for ParticleIntegrate.GPUSystem();
}

uint64_t sub_1B1F42858(uint64_t a1)
{
  BOOL v2;
  uint64_t v3;
  float v4;
  float v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float32x4_t v18;
  __int128 v19;
  __int128 v20;
  float32x4_t v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19 = *(_OWORD *)(a1 + 16);
  v20 = *(_OWORD *)(a1 + 48);
  sub_1B1E5371C();
  v2 = sub_1B1E36538((uint64_t)&type metadata for ParticleAffectedByGravity);
  swift_release();
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226D240;
  *(_OWORD *)(v3 + 32) = xmmword_1B22A2C00;
  *(_BYTE *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 104) = 0u;
  *(_QWORD *)(v3 + 120) = 0;
  *(_BYTE *)(v3 + 128) = 13;
  sub_1B1E5267C();
  v5 = v4;
  *(double *)v6.i64 = sub_1B1E52854();
  v18 = vmlaq_f32(vmlaq_n_f32(vmulq_f32(v7, (float32x4_t)0), v8, v5 * -9.8), (float32x4_t)0, v6);
  sub_1B1E52E10();
  v21 = v18;
  v22 = v9;
  v10 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    ObjectType = swift_getObjectType();
    type metadata accessor for particle_integrate_uniforms(0);
    sub_1B1F40E1C((uint64_t)&v21, 1, ObjectType, v12, v13, v14, v15, v16);
  }
  swift_retain();
  sub_1B1B1FC34(a1);
  sub_1B1FE6FB8(v20, v19, v10 == 0, v3, a1, 0xD000000000000012, 0x80000001B2344D00, 0);
  sub_1B1B1FC88(a1);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for ParticleIntegrate()
{
  return &type metadata for ParticleIntegrate;
}

uint64_t sub_1B1F42AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v48;
  int64_t v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  char v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v4 = v3;
  v50 = sub_1B1B98184(MEMORY[0x1E0DEE9D8]);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v63 = qword_1ED4D09F8;
  v64 = 0;
  v65 = 2;
  v66 = 0;
  v67 = 2;
  v68 = 0;
  swift_retain();
  sub_1B1B15580(1, 1, (uint64_t)&v51);
  swift_release();
  v57 = v51;
  v58 = v52;
  v59 = v53;
  v60 = v54 | 1;
  v61 = v55;
  v62 = v56;
  swift_retain();
  sub_1B1B7C5AC((uint64_t)&v51);
  v6 = sub_1B1DAE3AC(v3, v3, (uint64_t)&v57, a3 & 0xFFFFFFFFFFLL, &v50);
  sub_1B19ED720((uint64_t)&v51);
  swift_release();
  sub_1B19ED720((uint64_t)&v51);
  if (v6)
    v7 = v6;
  else
    v7 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v8 = 0;
  v48 = v7 + 64;
  v9 = 1 << *(_BYTE *)(v7 + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & *(_QWORD *)(v7 + 64);
  v49 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        do
        {
          if (v11)
          {
            v12 = __clz(__rbit64(v11));
            v11 &= v11 - 1;
            v13 = v12 | (v8 << 6);
          }
          else
          {
            v14 = v8 + 1;
            if (v8 + 1 >= v49)
              goto LABEL_58;
            v15 = *(_QWORD *)(v48 + 8 * v14);
            if (!v15)
            {
              v14 = v8 + 2;
              if (v8 + 2 >= v49)
                goto LABEL_58;
              v15 = *(_QWORD *)(v48 + 8 * v14);
              if (!v15)
              {
                v14 = v8 + 3;
                if (v8 + 3 >= v49)
                  goto LABEL_58;
                v15 = *(_QWORD *)(v48 + 8 * v14);
                if (!v15)
                {
                  v14 = v8 + 4;
                  if (v8 + 4 >= v49)
                    goto LABEL_58;
                  v15 = *(_QWORD *)(v48 + 8 * v14);
                  if (!v15)
                  {
                    while (v49 - 5 != v8)
                    {
                      v15 = *(_QWORD *)(v7 + 8 * v8++ + 104);
                      if (v15)
                      {
                        v14 = v8 + 4;
                        goto LABEL_25;
                      }
                    }
LABEL_58:
                    swift_release();
                    return 0;
                  }
                }
              }
            }
LABEL_25:
            v11 = (v15 - 1) & v15;
            v13 = __clz(__rbit64(v15)) + (v14 << 6);
            v8 = v14;
          }
          v16 = 8 * v13;
          v17 = (unsigned int *)(*(_QWORD *)(v7 + 48) + v16);
          v19 = *v17;
          v18 = v17[1];
          v20 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + v16);
        }
        while (v19 == -1 && !v18);
        v21 = (int)v18;
        if (v19 != -1)
          break;
        if (v18)
        {
          swift_retain();
          goto LABEL_11;
        }
      }
      v22 = v19;
      v23 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
      swift_retain();
      if ((v19 & 0x80000000) == 0 && *(_QWORD *)(v4 + v23 + 8) > (int)v19)
      {
        v24 = *(_QWORD *)(v4 + v23);
        v25 = v24 + 12 * (int)v19;
        if ((_DWORD)v21 == -1 || *(_DWORD *)(v25 + 8) == (_DWORD)v21)
        {
          v27 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v24 + 12 * (int)v19) + 32);
          v28 = *(_QWORD *)(v27 + 48);
          v29 = *(_QWORD *)(v28 + 16);
          if (v29)
            break;
        }
      }
LABEL_11:
      swift_release();
    }
    v30 = *(__int16 *)(v25 + 4);
    v31 = (_QWORD *)(v28 + 56);
    while ((ValueMetadata *)*(v31 - 3) != &type metadata for Name)
    {
      v31 += 5;
      if (!--v29)
        goto LABEL_11;
    }
    v32 = (uint64_t *)(*(_QWORD *)(v27 + 128) + *v31 + 16 * v30);
    v33 = *v32;
    v34 = v32[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v45 = v4;
    swift_release();
    if (v20 >> 62)
      break;
    v35 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v35)
      goto LABEL_43;
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v4 = v45;
  }
  swift_bridgeObjectRetain();
  v35 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v35)
    goto LABEL_57;
LABEL_43:
  v43 = v33;
  v44 = v34;
  v36 = 0;
  while (1)
  {
    if ((v20 & 0xC000000000000001) != 0)
    {
      v38 = MEMORY[0x1B5E21018](v36, v20);
    }
    else
    {
      v38 = *(_QWORD *)(v20 + 8 * v36 + 32);
      swift_retain();
    }
    v39 = *(_QWORD *)(v38 + 16) == a1 && *(_QWORD *)(v38 + 24) == a2;
    if (v39 || (sub_1B2229D24() & 1) != 0)
    {
      type metadata accessor for BindingPropertyDescription();
      v37 = swift_dynamicCastClass();
      if (v37)
        break;
    }
    ++v36;
    swift_release();
    if (v35 == v36)
      goto LABEL_57;
  }
  v42 = v37;
  swift_retain();
  swift_bridgeObjectRelease();
  v40 = sub_1B1F436A4(v22 | (v21 << 32), v43, v44, v42);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  return v40;
}

uint64_t sub_1B1F42F94(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  signed int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  double v45;
  double v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;

  v4 = v3;
  v75 = MEMORY[0x1E0DEE9D8];
  v74 = sub_1B1B98184(MEMORY[0x1E0DEE9D8]);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v88 = qword_1ED4D09F8;
  v89 = 0;
  v90 = 2;
  v91 = 0;
  v92 = 2;
  v93 = 0;
  swift_retain();
  sub_1B1B15580(1, 1, (uint64_t)&v76);
  swift_release();
  v82 = v76;
  v83 = v77;
  v84 = v78;
  v85 = v79 | 1;
  v86 = v80;
  v87 = v81;
  swift_retain();
  sub_1B1B7C5AC((uint64_t)&v76);
  v6 = sub_1B1DAE3AC(v3, v3, (uint64_t)&v82, a1 & 0xFFFFFFFFFFLL, &v74);
  sub_1B19ED720((uint64_t)&v76);
  swift_release();
  sub_1B19ED720((uint64_t)&v76);
  if (v6)
    v7 = v6;
  else
    v7 = MEMORY[0x1E0DEE9E0];
  swift_bridgeObjectRelease();
  v8 = 0;
  v9 = v7 + 64;
  v10 = 1 << *(_BYTE *)(v7 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v7 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  v55 = v13 - 5;
  v60 = v3;
  while (v12)
  {
    v14 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v15 = v14 | (v8 << 6);
LABEL_26:
    v18 = 8 * v15;
    v19 = (unsigned int *)(*(_QWORD *)(v7 + 48) + v18);
    v21 = *v19;
    v20 = v19[1];
    v22 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + v18);
    if (__PAIR64__(v20, v21) != 0xFFFFFFFF)
    {
      v23 = v20;
      if ((_DWORD)v21 == -1)
      {
        if (v20)
        {
          swift_retain();
          goto LABEL_11;
        }
      }
      else
      {
        v73 = v22;
        v24 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
        swift_retain();
        if ((v21 & 0x80000000) == 0
          && *(_QWORD *)(v4 + v24 + 8) > (int)v21
          && ((v25 = *(_QWORD *)(v4 + v24), v26 = v25 + 12 * (int)v21, (_DWORD)v23 != -1)
            ? (v27 = *(_DWORD *)(v26 + 8) == (_DWORD)v23)
            : (v27 = 1),
              v27
           && (v28 = *(_QWORD *)(*(_QWORD *)(v4 + 136) + 8 * *(int *)(v25 + 12 * (int)v21) + 32),
               v29 = *(_QWORD *)(v28 + 48),
               (v30 = *(_QWORD *)(v29 + 16)) != 0)))
        {
          v61 = v21 | (v23 << 32);
          v31 = *(__int16 *)(v26 + 4);
          v32 = (_QWORD *)(v29 + 56);
          v33 = v73;
          while ((ValueMetadata *)*(v32 - 3) != &type metadata for Name)
          {
            v32 += 5;
            if (!--v30)
              goto LABEL_11;
          }
          v34 = (uint64_t *)(*(_QWORD *)(v28 + 128) + *v32 + 16 * v31);
          v35 = v34[1];
          v58 = *v34;
          swift_bridgeObjectRetain();
          v62 = v35;
          swift_bridgeObjectRetain();
          swift_release();
          if (v73 >> 62)
          {
            swift_bridgeObjectRetain();
            v36 = sub_1B22296AC();
            swift_bridgeObjectRelease();
            if (v36)
              goto LABEL_42;
LABEL_77:
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            v36 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFF8) + 0x10);
            if (!v36)
              goto LABEL_77;
LABEL_42:
            v53 = v13;
            v54 = v9;
            v37 = 0;
            v38 = v73 & 0xC000000000000001;
            v57 = v36;
            v56 = v8;
            do
            {
              if (v38)
                MEMORY[0x1B5E21018](v37, v33);
              else
                swift_retain();
              type metadata accessor for BindingPropertyDescription();
              v39 = swift_dynamicCastClass();
              if (v39 && ((v40 = v39, (a3 & 1) != 0) || !*(_BYTE *)(v39 + 240)))
              {
                if (*(_QWORD *)(v39 + 216))
                {
                  v72 = *(_QWORD *)(v39 + 216);
                }
                else
                {
                  swift_retain();
                  v72 = v40;
                }
                v42 = *(_QWORD *)(v40 + 224);
                v41 = *(_QWORD *)(v40 + 232);
                v67 = *(_QWORD *)(v40 + 24);
                v43 = *(_QWORD *)(v40 + 176);
                v66 = *(_QWORD *)(v40 + 16);
                if (v43)
                {
                  v71 = *(_QWORD *)(v40 + 168);
                }
                else
                {
                  v71 = 0;
                  v43 = 0xE000000000000000;
                }
                v70 = v43;
                v65 = sub_1B1A0D3D0();
                v44 = *(_QWORD *)(v40 + 144) - 2;
                if (v44 > 0x13)
                  v64 = 0;
                else
                  v64 = qword_1B22A2DB0[v44];
                if (*(_BYTE *)(v40 + 188))
                  v45 = 2.22507386e-308;
                else
                  v45 = *(float *)(v40 + 184);
                if (*(_BYTE *)(v40 + 196))
                  v46 = 1.79769313e308;
                else
                  v46 = *(float *)(v40 + 192);
                v47 = *(unsigned __int8 *)(v40 + 240);
                v48 = *(_QWORD *)(v40 + 256);
                if (v48)
                {
                  v49 = *(_QWORD *)(v40 + 264);
                  v68 = *(_QWORD *)(v40 + 248);
                  swift_bridgeObjectRetain();
                  v69 = v49;
                  swift_bridgeObjectRetain();
                }
                else
                {
                  v68 = 0;
                  v69 = 0;
                }
                type metadata accessor for BindingImpl();
                v50 = swift_allocObject();
                swift_weakInit();
                *(_QWORD *)(v50 + 152) = 0;
                *(_QWORD *)(v50 + 24) = v42;
                *(_QWORD *)(v50 + 32) = v41;
                *(_QWORD *)(v50 + 40) = v61;
                *(_QWORD *)(v50 + 48) = v58;
                *(_QWORD *)(v50 + 56) = v62;
                *(_QWORD *)(v50 + 64) = v66;
                *(_QWORD *)(v50 + 72) = v67;
                *(_QWORD *)(v50 + 80) = v71;
                *(_QWORD *)(v50 + 88) = v70;
                *(_QWORD *)(v50 + 96) = v65;
                *(_QWORD *)(v50 + 104) = v64;
                *(double *)(v50 + 112) = v45;
                *(double *)(v50 + 120) = v46;
                *(_BYTE *)(v50 + 128) = v47 == 0;
                *(_QWORD *)(v50 + 136) = v68;
                *(_QWORD *)(v50 + 144) = v48;
                swift_bridgeObjectRetain();
                swift_retain();
                v4 = v60;
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                *(_QWORD *)(v50 + 152) = v69;
                swift_bridgeObjectRelease();
                *(_QWORD *)(v50 + 160) = v72;
                swift_weakAssign();
                swift_release();
                if ((a2 & 1) != 0 || objc_msgSend((id)v50, sel_type) != (id)23)
                {
                  v51 = swift_retain();
                  MEMORY[0x1B5E2064C](v51);
                  v33 = v73;
                  v8 = v56;
                  if (*(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                    sub_1B2228AF4();
                  sub_1B2228B30();
                  sub_1B2228AD0();
                  swift_release();
                  swift_release_n();
                  v38 = v73 & 0xC000000000000001;
                  v36 = v57;
                }
                else
                {
                  swift_release_n();
                  swift_release();
                  v33 = v73;
                  v38 = v73 & 0xC000000000000001;
                  v36 = v57;
                  v8 = v56;
                }
              }
              else
              {
                swift_release();
              }
              ++v37;
            }
            while (v36 != v37);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v9 = v54;
            v13 = v53;
          }
        }
        else
        {
LABEL_11:
          swift_release();
        }
      }
    }
  }
  v16 = v8 + 1;
  if (v8 + 1 >= v13)
    goto LABEL_78;
  v17 = *(_QWORD *)(v9 + 8 * v16);
  if (v17)
    goto LABEL_25;
  v16 = v8 + 2;
  if (v8 + 2 >= v13)
    goto LABEL_78;
  v17 = *(_QWORD *)(v9 + 8 * v16);
  if (v17)
    goto LABEL_25;
  v16 = v8 + 3;
  if (v8 + 3 >= v13)
    goto LABEL_78;
  v17 = *(_QWORD *)(v9 + 8 * v16);
  if (v17)
    goto LABEL_25;
  v16 = v8 + 4;
  if (v8 + 4 >= v13)
    goto LABEL_78;
  v17 = *(_QWORD *)(v9 + 8 * v16);
  if (v17)
  {
LABEL_25:
    v12 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v8 = v16;
    goto LABEL_26;
  }
  while (v55 != v8)
  {
    v17 = *(_QWORD *)(v7 + 8 * v8++ + 104);
    if (v17)
    {
      v16 = v8 + 4;
      goto LABEL_25;
    }
  }
LABEL_78:
  swift_release();
  return v75;
}

uint64_t sub_1B1F436A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  float v5;
  int v6;
  float v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  uint64_t v15;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (*(_QWORD *)(a4 + 216))
  {
    v21 = *(_QWORD *)(a4 + 216);
  }
  else
  {
    swift_retain();
    v21 = a4;
  }
  v25 = *(_QWORD *)(a4 + 224);
  v26 = *(_QWORD *)(a4 + 16);
  v23 = *(_QWORD *)(a4 + 232);
  v24 = *(_QWORD *)(a4 + 24);
  if (*(_QWORD *)(a4 + 176))
  {
    v22 = *(_QWORD *)(a4 + 168);
    v20 = *(_QWORD *)(a4 + 176);
  }
  else
  {
    v22 = 0;
    v20 = 0xE000000000000000;
  }
  v19 = sub_1B1A0D3D0();
  v18 = sub_1B1A0D768(*(_QWORD *)(a4 + 144));
  v5 = *(float *)(a4 + 184);
  v6 = *(unsigned __int8 *)(a4 + 188);
  v7 = *(float *)(a4 + 192);
  v8 = *(unsigned __int8 *)(a4 + 196);
  v9 = *(unsigned __int8 *)(a4 + 240);
  v10 = *(_QWORD *)(a4 + 256);
  if (v10)
  {
    v11 = *(_QWORD *)(a4 + 264);
    v12 = *(_QWORD *)(a4 + 248);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  if (v8)
    v13 = 1.79769313e308;
  else
    v13 = v7;
  if (v6)
    v14 = 2.22507386e-308;
  else
    v14 = v5;
  type metadata accessor for BindingImpl();
  swift_allocObject();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  *((_QWORD *)&v17 + 1) = v19;
  *(_QWORD *)&v17 = v20;
  v15 = sub_1B1A0D78C(v25, v23, a1, a2, a3, v26, v24, v22, v14, v13, v17, v18, v9 == 0, v12, v10, v11, v21);
  swift_release();
  return v15;
}

uint64_t sub_1B1F4388C()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  void *v5;
  char *v6;
  char *v7;
  uint64_t result;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_entityObject);
  if (v1)
  {
    v2 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
    if (swift_weakLoadStrong())
    {
      v3 = v1;
    }
    else if (*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager])
    {
      v6 = v1;
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      v7 = v1;
      sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }

    goto LABEL_12;
  }
  v4 = MEMORY[0x1B5E240CC](v0 + OBJC_IVAR____TtC3VFX9VFXEffect_scene);
  if (v4)
  {
    v5 = (void *)v4;
    swift_retain();

    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity + 8) & 1) != 0)
    {
      swift_release();
      return 0;
    }
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity);
LABEL_12:
    swift_release();
    return v2;
  }
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F43B10()
{
  uint64_t v0;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity + 8) & 1) != 0)
    return 0;
  if (*(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity) == 0xFFFFFFFFLL)
    return 0;
  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity);
}

void sub_1B1F43B60()
{
  JUMPOUT(0x1B5E240CCLL);
}

uint64_t sub_1B1F43BA4()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1F43BE8(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX9VFXEffect_delegate) = a1;
  return swift_unknownObjectRelease();
}

double (*sub_1B1F43C00())(_QWORD)
{
  return nullsub_16;
}

uint64_t sub_1B1F43C28()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_version);
}

uint64_t sub_1B1F43C48()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t result;

  v1 = MEMORY[0x1B5E240CC](v0 + OBJC_IVAR____TtC3VFX9VFXEffect_scene);
  if (v1)
  {
    v2 = (void *)v1;
    v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
    swift_retain();

    return v3;
  }
  else
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F43D90()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  uint64_t v14;
  id v16[2];

  v1 = MEMORY[0x1E0DEF868];
  sub_1B1791524(0, &qword_1ED4B7B08, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF868], (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v2, v3);
  v5 = (char *)v16 - v4;
  sub_1B1F43F7C();
  v7 = v6;
  v8 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v9);
  v11 = (char *)v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(id *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_onEffectRestartSubject);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4B72D0);
  swift_retain();
  v16[0] = (id)sub_1B2228F44();
  v12 = sub_1B2228F20();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 1, 1, v12);
  v13 = MEMORY[0x1E0C95F28];
  sub_1B17915FC(0, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F28]);
  sub_1B1F44EA8((unint64_t *)&qword_1ED4BB1C0, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))v13, MEMORY[0x1E0C95F48]);
  sub_1B1F4404C();
  sub_1B2228464();
  sub_1B1AEA224((uint64_t)v5, (uint64_t)&qword_1ED4B7B08, (uint64_t)v1, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);

  swift_release();
  sub_1B1F440A4();
  v14 = sub_1B2228458();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return v14;
}

void sub_1B1F43F7C()
{
  uint64_t (*v0)(void);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED4BA228)
  {
    v0 = MEMORY[0x1E0C95F28];
    sub_1B17915FC(255, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F28]);
    sub_1B1B9DAD4(255, (unint64_t *)&qword_1ED4B72D0);
    sub_1B1F44EA8((unint64_t *)&qword_1ED4BB1C0, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))v0, MEMORY[0x1E0C95F48]);
    sub_1B1F4404C();
    v1 = sub_1B2228404();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED4BA228);
  }
}

unint64_t sub_1B1F4404C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4BB1C8;
  if (!qword_1ED4BB1C8)
  {
    v1 = sub_1B1B9DAD4(255, (unint64_t *)&qword_1ED4B72D0);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEF7F8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4BB1C8);
  }
  return result;
}

unint64_t sub_1B1F440A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ED4BB1A8;
  if (!qword_1ED4BB1A8)
  {
    sub_1B1F43F7C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0C95CB8], v1);
    atomic_store(result, (unint64_t *)&qword_1ED4BB1A8);
  }
  return result;
}

uint64_t sub_1B1F440EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t inited;
  uint64_t v7;
  unint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t result;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  unsigned int *v47;
  unsigned int *v48;
  unint64_t v49;
  _BYTE v50[40];
  _OWORD v51[2];
  uint64_t v52;
  _OWORD v53[2];
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  _QWORD v61[12];
  _QWORD v62[14];

  v1 = v0;
  v62[12] = *MEMORY[0x1E0C80C00];
  v2 = **(_QWORD **)(sub_1B1F43C48() + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  swift_release();
  v3 = (unsigned int *)(v1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
  {
    v4 = 0;
    v5 = 1;
  }
  else
  {
    v4 = *v3;
    v5 = *v3 == 0;
  }
  LOBYTE(v62[0]) = v5;
  v49 = sub_1B217DEA8(v4 | ((unint64_t)v5 << 32), v2);
  v45 = sub_1B1F43C48();
  swift_release();
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v55 = qword_1ED4D09F8;
  v56 = 0;
  v57 = 2;
  v58 = 0;
  v59 = 2;
  v60 = 0;
  swift_retain();
  sub_1B1B16A6C(1, 1, (uint64_t)v50);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Parent;
  *(_QWORD *)(inited + 40) = &off_1E63BB960;
  *(_QWORD *)(inited + 48) = &type metadata for PointOfView;
  *(_QWORD *)(inited + 56) = &off_1E6371AA8;
  sub_1B1B44110(v51, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v50);
  v7 = sub_1B1F43C48();
  if ((v3[1] & 1) != 0)
    v8 = 0x200000000;
  else
    v8 = *v3 | ((unint64_t)(*v3 == 0) << 33);
  v53[0] = v51[0];
  v53[1] = v51[1];
  v54 = v52;
  sub_1B1E8FCE4(v7, (uint64_t)v53, v8, v61);
  sub_1B1A18378((uint64_t)v61, (uint64_t)v62, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!v62[0])
  {
    swift_release();
    result = sub_1B19ED720((uint64_t)v51);
    goto LABEL_38;
  }
  v9 = (unsigned int *)v62[5];
  v10 = v62[7];
  v11 = v62[8];
  v12 = v62[10];
  swift_release();
  if (v12 < 1)
  {
    sub_1B19ED720((uint64_t)v51);
    result = (uint64_t)sub_1B1A086DC(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_38;
  }
  v44 = v1;
  v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                              + 8 * *(_QWORD *)thread_worker_index(v13)
                              + 8)
                  + 32);
  swift_retain();
  swift_retain();
  swift_retain();
  ecs_stack_allocator_push_snapshot(v14);
  v43 = v14;
  v15 = ecs_stack_allocator_allocate(v14, 8 * v12, 4);
  if (!v10)
    goto LABEL_36;
  v16 = (unsigned int *)v15;
  v17 = 0;
  v47 = (unsigned int *)v15;
  v48 = &v9[12 * v10];
  v46 = (char *)v15 + 4;
  do
  {
    v18 = (uint64_t *)*((_QWORD *)v9 + 2);
    v19 = *((_QWORD *)v9 + 5);
    if (v18)
    {
      v20 = *((_QWORD *)v9 + 4);
      if (v20)
      {
        swift_retain();
        v21 = &v46[8 * v17];
        do
        {
          v23 = *v18++;
          v22 = v23;
          v24 = swift_retain();
          if ((*(_BYTE *)(v19 + 184) & 1) != 0)
            goto LABEL_39;
          v25 = *(_DWORD *)(*(_QWORD *)(v19 + 168) + 4 * v22);
          v26 = *(_DWORD *)(*(_QWORD *)(v24 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v25 + 8);
          swift_release();
          *((_DWORD *)v21 - 1) = v25;
          *(_DWORD *)v21 = v26;
          ++v17;
          v21 += 8;
          --v20;
        }
        while (v20);
LABEL_13:
        swift_release();
        v16 = v47;
      }
    }
    else
    {
      v28 = *v9;
      v27 = v9[1];
      if ((_DWORD)v28 != (_DWORD)v27)
      {
        swift_retain();
        v29 = &v46[8 * v17];
        do
        {
          v30 = swift_retain();
          if ((*(_BYTE *)(v19 + 184) & 1) != 0)
            goto LABEL_39;
          v31 = *(_DWORD *)(*(_QWORD *)(v19 + 168) + 4 * v28);
          v32 = v28 + 1;
          v33 = *(_DWORD *)(*(_QWORD *)(v30 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v31 + 8);
          swift_release();
          *((_DWORD *)v29 - 1) = v31;
          *(_DWORD *)v29 = v33;
          ++v17;
          v29 += 8;
          v28 = v32;
        }
        while (v27 != v32);
        goto LABEL_13;
      }
    }
    v9 += 12;
  }
  while (v9 != v48);
  if (v17)
  {
    v35 = &v16[2 * v17];
    v36 = v1 + OBJC_IVAR____TtC3VFX9VFXEffect_scene;
    do
    {
      v37 = *v16;
      v38 = v16[1];
      if ((_DWORD)v37 != (_DWORD)v49 || (_DWORD)v38 != HIDWORD(v49))
      {
        v40 = (char *)MEMORY[0x1B5E240CC](v36);
        if (!v40)
        {
          while (1)
          {
            sub_1B2229430();
            sub_1B2228890();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            sub_1B2228890();
LABEL_39:
            sub_1B2229688();
            __break(1u);
          }
        }
        v41 = *(_QWORD *)&v40[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];

        sub_1B1E86820(v49, v45, v37 | (v38 << 32), v41);
      }
      v16 += 2;
    }
    while (v16 != v35);
  }
LABEL_36:
  ecs_stack_allocator_pop_snapshot(v43);
  sub_1B1A086DC(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B19ED720((uint64_t)v51);
  result = (uint64_t)sub_1B1A086DC(v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  v1 = v44;
LABEL_38:
  v42 = v1 + OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity;
  *(_QWORD *)v42 = v49;
  *(_BYTE *)(v42 + 8) = 0;
  return result;
}

uint64_t sub_1B1F446FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[40];
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v23[2];
  uint64_t v24;
  uint64_t v25;
  int v26;
  char v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  _QWORD v31[12];
  _OWORD v32[6];
  uint64_t v33;

  v1 = v0;
  v33 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v25 = qword_1ED4D09F8;
  v26 = 0;
  v27 = 2;
  v28 = 0;
  v29 = 2;
  v30 = 0;
  swift_retain();
  sub_1B1B16A6C(1, 1, (uint64_t)v14);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for Parent;
  *(_QWORD *)(inited + 40) = &off_1E63BB960;
  *(_QWORD *)(inited + 48) = &type metadata for PointOfView;
  *(_QWORD *)(inited + 56) = &off_1E6371AA8;
  sub_1B1B44110(v15, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v14);
  v3 = sub_1B1F43C48();
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v4 = 0x200000000;
  else
    v4 = *(unsigned int *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  v23[0] = v15[0];
  v23[1] = v15[1];
  v24 = v16;
  sub_1B1E8FCE4(v3, (uint64_t)v23, v4, v31);
  sub_1B1A18378((uint64_t)v31, (uint64_t)v32, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v32[0])
  {
    swift_release();
    return sub_1B19ED720((uint64_t)v15);
  }
  v19 = v32[2];
  v20 = v32[3];
  v21 = v32[4];
  v22 = v32[5];
  v17 = v32[0];
  v18 = v32[1];
  swift_release();
  if ((_QWORD)v22 != 1)
  {
    sub_1B1F440EC();
    sub_1B1A086DC(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    return sub_1B19ED720((uint64_t)v15);
  }
  sub_1B1BEC018(0);
  v6 = v5;
  sub_1B1A086DC(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  swift_retain();
  v7 = sub_1B1A101F0(v6);
  swift_release();
  sub_1B1A086DC(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  sub_1B1F43C48();
  swift_release();
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3A28]), sel_init);
  v9 = objc_msgSend(v8, sel_UUIDString);

  sub_1B222874C();
  if (v7 != 0xFFFFFFFFLL)
  {
    v11 = swift_retain();
    MEMORY[0x1E0C80A78](v11, v12);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F4C594);
    swift_release();
  }
  sub_1B19ED720((uint64_t)v15);
  sub_1B1A086DC(v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  result = swift_bridgeObjectRelease();
  v13 = v1 + OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity;
  *(_QWORD *)v13 = v7;
  *(_BYTE *)(v13 + 8) = 0;
  return result;
}

void sub_1B1F44AD8()
{
  char *Strong;
  void *v1;
  void *v2;

  Strong = (char *)swift_unknownObjectUnownedLoadStrong();
  v1 = *(void **)&Strong[OBJC_IVAR____TtC3VFX9VFXEffect_delegate];
  swift_unknownObjectRetain();

  if (v1)
  {
    v2 = (void *)swift_unknownObjectUnownedLoadStrong();
    objc_msgSend(v1, sel_effectDidRestart_, v2);

    swift_unknownObjectRelease();
  }
}

id sub_1B1F44B5C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  char *v5;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  void *v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD, uint64_t, _QWORD, _QWORD);
  objc_super v23;

  v5 = v4;
  v9 = &v4[OBJC_IVAR____TtC3VFX9VFXEffect_effectID];
  *(_DWORD *)v9 = 0;
  v9[4] = 1;
  v10 = &v4[OBJC_IVAR____TtC3VFX9VFXEffect_url];
  v11 = sub_1B2228110();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = &v5[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity];
  *(_QWORD *)v12 = 0;
  v12[8] = 1;
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX9VFXEffect_entityObject] = 0;
  swift_unknownObjectWeakInit();
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX9VFXEffect_delegate] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC3VFX9VFXEffect_version] = 0;
  v13 = OBJC_IVAR____TtC3VFX9VFXEffect_onEffectRestartSubject;
  sub_1B17915FC(0, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F28]);
  swift_allocObject();
  v14 = v5;
  *(_QWORD *)&v5[v13] = sub_1B2228434();
  *(_QWORD *)&v14[OBJC_IVAR____TtC3VFX9VFXEffect_cancellables] = MEMORY[0x1E0DEE9E8];
  v14[OBJC_IVAR____TtC3VFX9VFXEffect__enabled] = 1;
  v14[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned] = 0;
  v15 = a1;
  swift_unknownObjectWeakAssign();
  *(_DWORD *)v9 = a2;
  v9[4] = 0;
  v16 = &v14[OBJC_IVAR____TtC3VFX9VFXEffect_name];
  *(_QWORD *)v16 = a3;
  *((_QWORD *)v16 + 1) = a4;

  v23.receiver = v14;
  v23.super_class = (Class)type metadata accessor for VFXEffect();
  v17 = objc_msgSendSuper2(&v23, sel_init);
  sub_1B1F43D90();
  v18 = swift_allocObject();
  swift_unknownObjectUnownedInit();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = sub_1B1F4C640;
  *(_QWORD *)(v19 + 24) = v18;
  v20 = (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95D78];
  sub_1B17915FC(0, &qword_1ED4BA230, MEMORY[0x1E0C95D78]);
  sub_1B1F44EA8((unint64_t *)&unk_1ED4BB1B0, &qword_1ED4BA230, v20, MEMORY[0x1E0C95D90]);
  sub_1B2228470();
  swift_release();
  swift_release();
  sub_1B2228410();
  swift_release();
  sub_1B1F446FC();

  return v17;
}

uint64_t sub_1B1F44DF8()
{
  void *v0;
  void *v1;
  uint64_t (*v2)(void);
  uint64_t v3;

  v1 = v0;
  v2 = MEMORY[0x1E0C95F28];
  sub_1B17915FC(0, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))MEMORY[0x1E0C95F28]);
  sub_1B1F44EA8((unint64_t *)&qword_1ED4B7AF0, (unint64_t *)&qword_1ED4BA238, (uint64_t (*)(_QWORD, uint64_t, _QWORD, _QWORD))v2, MEMORY[0x1E0C95F40]);
  sub_1B222844C();
  v3 = sub_1B1F43C48();
  sub_1B1DA2AC4(v3, v1);
  return swift_release();
}

uint64_t sub_1B1F44EA8(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1B17915FC(255, a2, a3);
    result = MEMORY[0x1B5E23E74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B1F44FD4()
{
  int v0;
  uint64_t v2;

  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v0 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v2 = 0;
  swift_retain();
  sub_1B1F1AD70(v0, &v2, 0xD000000000000034, 0x80000001B2344D40);
  swift_release();
  return swift_release();
}

uint64_t (*sub_1B1F450AC(_BYTE *a1))()
{
  *a1 = 0;
  return sub_1B1F450C0;
}

uint64_t sub_1B1F450C0()
{
  int v0;
  uint64_t v2;

  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v0 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v2 = 0;
  swift_retain();
  sub_1B1F1AD70(v0, &v2, 0xD000000000000034, 0x80000001B2344D40);
  swift_release();
  return swift_release();
}

uint64_t sub_1B1F4519C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  uint64_t v9;
  id v10;
  uint64_t v11;

  v9 = sub_1B1F43C48();
  v10 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v11 = sub_1B1DB08F8(v9, v10, a1, a2, a3, a4);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B1F45240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t result;

  sub_1B1F43C48();
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v12 = 0x200000000;
  else
    v12 = *(unsigned int *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  v13 = sub_1B1FF36E8(a2, a3, v12, 1);
  if ((v14 & 1) != 0 || v13 == 0xFFFFFFFFLL)
    v15 = 0;
  else
    v15 = sub_1B1F4BC74(v13, a2, a3, a4, a5);
  result = swift_release();
  *a6 = v15;
  return result;
}

uint64_t sub_1B1F453E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  uint64_t v9;

  v7 = sub_1B1F43C48();
  v8 = v3;
  swift_bridgeObjectRetain();
  v9 = sub_1B1DB0C40(v7, v8, a1, a2, a3);
  swift_release();

  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B1F45518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;

  sub_1B1F43C48();
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v5 = 0x200000000;
  else
    v5 = *(unsigned int *)(v2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(v2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  v6 = sub_1B1F42AA8(a1, a2, v5);
  swift_release();
  return v6;
}

uint64_t sub_1B1F45644()
{
  uint64_t v0;
  char *v1;
  char *v2;
  uint64_t v3;
  int v4;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = *(char **)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_entityObject);
  if (!v1)
  {
    sub_1B1F43C48();
    if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
      v8 = 0x200000000;
    else
      v8 = *(unsigned int *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
    v9 = sub_1B1F42F94(v8, 0, 0);
    swift_release();
    return v9;
  }
  v31 = MEMORY[0x1E0DEE9D8];
  v2 = &v1[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
  v3 = *(unsigned int *)&v1[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
  v4 = *(_DWORD *)&v1[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4];
  if ((_DWORD)v3 == -1 && v4 == 0)
    return MEMORY[0x1E0DEE9D8];
  v6 = v3 | ((uint64_t)v4 << 32);
  if (swift_weakLoadStrong())
  {
    v7 = v1;
  }
  else if (*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager])
  {
    v10 = v1;
    swift_retain();
  }
  else
  {
    type metadata accessor for EntityManager();
    swift_allocObject();
    v11 = v1;
    sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
  }
  swift_release();
  swift_retain();
  v30 = sub_1B1D1568C(v6);
  v13 = v12;
  swift_release();
  if (!v13)
  {

    return MEMORY[0x1E0DEE9D8];
  }
  v15 = *(unsigned int *)v2;
  v14 = *((unsigned int *)v2 + 1);
  if (!swift_weakLoadStrong())
  {
    if (*(_QWORD *)&v1[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager])
    {
      swift_retain();
    }
    else
    {
      type metadata accessor for EntityManager();
      swift_allocObject();
      sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
    }
  }
  swift_release();
  v16 = (_DWORD)v15 == -1 && (_DWORD)v14 == 0;
  if (v16 || (swift_retain(), v17 = sub_1B1D18AD4(v15 | (v14 << 32)), swift_release(), !v17))
  {

    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v18 = swift_bridgeObjectRetain();
  v19 = (unint64_t)sub_1B1DC8D00(v18);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if ((v19 & 0x8000000000000000) != 0 || (v19 & 0x4000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1B22296AC();
    swift_release();
    if (v20)
      goto LABEL_29;
    goto LABEL_45;
  }
  v20 = *(_QWORD *)(v19 + 16);
  if (!v20)
  {
LABEL_45:
    swift_bridgeObjectRelease();
    swift_release();
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_46:

    return v9;
  }
LABEL_29:
  v29 = v6;
  v21 = 0;
  v28 = v0 + OBJC_IVAR____TtC3VFX9VFXEffect_scene;
  while (1)
  {
    if ((v19 & 0xC000000000000001) != 0)
      MEMORY[0x1B5E21018](v21, v19);
    else
      swift_retain();
    type metadata accessor for BindingPropertyDescription();
    v22 = swift_dynamicCastClass();
    if (!v22)
      goto LABEL_31;
    v23 = v22;
    if (*(_BYTE *)(v22 + 240))
      goto LABEL_31;
    v24 = MEMORY[0x1B5E240CC](v28);
    if (!v24)
      break;
    v25 = (void *)v24;
    swift_retain();
    swift_retain();

    sub_1B1F436A4(v29, v30, v13, v23);
    swift_release();
    v26 = swift_unknownObjectRetain();
    MEMORY[0x1B5E2064C](v26);
    if (*(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    swift_unknownObjectRelease();
    swift_release();
LABEL_31:
    ++v21;
    swift_release();
    if (v20 == v21)
    {
      swift_bridgeObjectRelease();
      swift_release();
      v9 = v31;
      goto LABEL_46;
    }
  }
  swift_retain();
  sub_1B2229430();
  sub_1B2228890();
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F45B54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;

  v11 = sub_1B1F43C48();
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v12 = 0x200000000;
  else
    v12 = *(unsigned int *)(v5 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(v5 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B1DA43FC(v11, v11, a1, a2, v12, a3, a4, a5);
  return swift_release();
}

uint64_t sub_1B1F45D34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  char v13;
  _QWORD v15[5];
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v10 = sub_1B1F43C48();
  MEMORY[0x1E0C80A78](v10, v11);
  v15[2] = v10;
  v15[3] = a1;
  v15[4] = a2;
  v16 = v12;
  v17 = v13;
  v18 = a3;
  v19 = a4;
  v20 = a5;
  sub_1B1C276DC((void (*)(void))sub_1B1C2F81C, (uint64_t)v15);
  return swift_release();
}

uint64_t sub_1B1F45EC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t result;

  v5 = v4;
  v10 = MEMORY[0x1B5E240CC](v5 + OBJC_IVAR____TtC3VFX9VFXEffect_scene);
  if (v10)
  {
    v11 = (void *)v10;
    v12 = *(_QWORD *)(v10 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
    swift_retain_n();

    swift_bridgeObjectRetain();
    sub_1B1DA48E8(v12, v12, a1, a2, a3, a4);
    return swift_release();
  }
  else
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F4604C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v9[8];

  v9[2] = sub_1B1F43C48();
  v9[3] = a1;
  v9[4] = a2;
  v9[5] = a3;
  v9[6] = a4;
  sub_1B1C276DC((void (*)(void))sub_1B1F4BFF0, (uint64_t)v9);
  return swift_release();
}

uint64_t sub_1B1F460BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  char v6;

  sub_1B1F43C48();
  swift_bridgeObjectRetain();
  v1 = sub_1B2228968();
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v3 = 0x200000000;
  else
    v3 = *(unsigned int *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  v4 = sub_1B1FF36E8(v1, v2, v3, 1);
  v6 = v5;
  swift_release();
  swift_bridgeObjectRelease();
  if (v6 & 1 | (v4 == 0xFFFFFFFFLL))
    return 0;
  else
    return v4;
}

uint64_t sub_1B1F46190()
{
  uint64_t result;
  char v1;

  result = sub_1B1F460BC();
  if ((v1 & 1) != 0)
    return 0;
  return result;
}

uint64_t sub_1B1F46214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10;

  v10 = sub_1B1F43C48();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1DA2CA4(v10, v10, a1, a2, a3, 23, a4, a5);
  return swift_release();
}

uint64_t sub_1B1F46358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v12;

  v12 = sub_1B1F43C48();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1DA2CA4(v12, v12, a1, a2, a3, a4, a5, a6);
  return swift_release();
}

uint64_t sub_1B1F464B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10;

  v10 = sub_1B1F43C48();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1DA2ED0(v10, v10, a1, a2, a3, 23, 0, a4, a5);
  return swift_release();
}

uint64_t sub_1B1F46604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  uint64_t v14;

  v14 = sub_1B1F43C48();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1DA2ED0(v14, v14, a1, a2, a3, a4, a5, a6, a7);
  return swift_release();
}

uint64_t sub_1B1F46774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_1B1F460BC();
  if ((v11 & 1) == 0)
  {
    v12 = result;
    v13 = swift_allocObject();
    *(_QWORD *)(v13 + 16) = a5;
    *(_QWORD *)(v13 + 24) = a6;
    v14 = sub_1B1F43C48();
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1DA2ED0(v14, v14, v12, a3, a4, 23, 0, (uint64_t (*)(uint64_t, uint64_t))sub_1B1A0FDB0, v13);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1F469AC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;

  v7 = sub_1B1F43C48();
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v8 = 0x200000000;
  else
    v8 = *(unsigned int *)(v3 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(v3 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1D9EA90(v7, v7, a1, a2, v8, a3 & 1);
  return swift_release();
}

uint64_t sub_1B1F46AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v5 = sub_1B1F43C48();
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v6 = 0x200000000;
  else
    v6 = *(unsigned int *)(v2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) | ((unint64_t)(*(_DWORD *)(v2 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID) == 0) << 33);
  swift_bridgeObjectRetain();
  v7 = sub_1B1DAE668(v5, v5, a1, a2, v6);
  swift_release();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F46BB0(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  uint64_t result;

  v3 = v2;
  v6 = MEMORY[0x1B5E240CC](&v3[OBJC_IVAR____TtC3VFX9VFXEffect_scene]);
  if (v6)
  {
    v7 = (void *)v6;
    v8 = *(_QWORD *)(v6 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
    swift_retain();

    v9 = v3;
    swift_bridgeObjectRetain();
    v10 = sub_1B1DAD5A0(v8, v9, a1, a2);
    swift_release();

    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
  else
  {
    sub_1B2229430();
    sub_1B2228890();
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    result = sub_1B2229688();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B1F46DA8(unint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;

  v5 = sub_1B1F43C48();
  swift_unknownObjectRetain();
  sub_1B1DA311C(v5, v2, a1, a2);
  return swift_release();
}

uint64_t sub_1B1F46E08(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;

  sub_1B1F43C48();
  if (a2)
    v5 = a2;
  else
    v5 = 0xFFFFFFFFLL;
  sub_1B1B0E4E4(v5, a3);
  return swift_release();
}

uint64_t sub_1B1F46F4C()
{
  void *v0;
  uint64_t v1;
  id v2;
  char v3;

  v1 = sub_1B1F43C48();
  v2 = v0;
  v3 = sub_1B1DAEC20(v1, v2);
  swift_release();

  return v3 & 1;
}

uint64_t sub_1B1F47008(char a1)
{
  void *v1;
  uint64_t v3;

  v3 = sub_1B1F43C48();
  sub_1B1DA3344(v3, v1, a1);
  return swift_release();
}

void sub_1B1F47058(void **a1@<X0>, _BYTE *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  id v5;
  char v6;

  v3 = *a1;
  v4 = sub_1B1F43C48();
  v5 = v3;
  v6 = sub_1B1DAEC20(v4, v5);
  swift_release();

  *a2 = v6 & 1;
}

uint64_t sub_1B1F470C0(char *a1, void **a2)
{
  char v2;
  void *v3;
  uint64_t v4;

  v2 = *a1;
  v3 = *a2;
  v4 = sub_1B1F43C48();
  sub_1B1DA3344(v4, v3, v2);
  return swift_release();
}

uint64_t (*sub_1B1F47114(uint64_t a1))(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  char v5;

  *(_QWORD *)a1 = v1;
  v3 = sub_1B1F43C48();
  v4 = v1;
  v5 = sub_1B1DAEC20(v3, v4);
  *(_QWORD *)(a1 + 8) = 0;

  swift_release();
  *(_BYTE *)(a1 + 16) = v5 & 1;
  return sub_1B1F47194;
}

uint64_t sub_1B1F47194(uint64_t a1)
{
  void *v1;
  char v2;
  uint64_t v3;

  v1 = *(void **)a1;
  v2 = *(_BYTE *)(a1 + 16);
  v3 = sub_1B1F43C48();
  sub_1B1DA3344(v3, v1, v2);
  return swift_release();
}

uint64_t sub_1B1F471F4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned);
}

uint64_t sub_1B1F47288(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;

  if (v1[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned] != (result & 1))
  {
    v1[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned] = result & 1;
    v2 = sub_1B1F43C48();
    sub_1B1DA376C(v2, v1);
    return swift_release();
  }
  return result;
}

unsigned __int8 *sub_1B1F47300(unsigned __int8 *result, void **a2)
{
  int v2;
  _BYTE *v3;
  uint64_t v4;

  v2 = *result;
  v3 = *a2;
  if (v2 != *((unsigned __int8 *)*a2 + OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned))
  {
    v3[OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned] = v2;
    v4 = sub_1B1F43C48();
    sub_1B1DA376C(v4, v3);
    return (unsigned __int8 *)swift_release();
  }
  return result;
}

uint64_t (*sub_1B1F4737C(uint64_t a1))(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v2 = OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned;
  *(_QWORD *)a1 = v1;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(v1 + v2);
  return sub_1B1F473A0;
}

uint64_t sub_1B1F473A0(uint64_t result)
{
  uint64_t v1;
  _BYTE *v2;
  int v3;
  uint64_t v4;

  v2 = *(_BYTE **)result;
  v1 = *(_QWORD *)(result + 8);
  v3 = *(unsigned __int8 *)(result + 16);
  if (v3 != *(unsigned __int8 *)(*(_QWORD *)result + v1))
  {
    v2[v1] = v3;
    v4 = sub_1B1F43C48();
    sub_1B1DA376C(v4, v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1F4749C()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = sub_1B1F43C48();
  v2 = v0;
  sub_1B1DB0ECC(v1, v2);
  v4 = v3;
  swift_release();

  return v4;
}

uint64_t sub_1B1F474F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  int *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  uint64_t v28;
  objc_class *v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  char *v38;
  uint64_t v39;
  objc_class *v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  size_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  int *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  _QWORD *v62;
  objc_super v63;
  objc_super v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _BYTE v69[40];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  _OWORD v73[2];
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  _QWORD v81[8];
  _OWORD v82[2];
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  _BYTE v89[40];
  uint64_t v90;

  v3 = v2;
  v90 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v6 = qword_1ED4D09F8;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for PointOfView;
  *(_QWORD *)(inited + 40) = &off_1E6371AA8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  v75 = v6;
  v76 = 0;
  v77 = 2;
  v78 = 0;
  v79 = 2;
  v80 = 0;
  swift_retain();
  sub_1B1E68AF8(inited, 1, (uint64_t)v69);
  swift_setDeallocating();
  swift_release();
  v8 = sub_1B1F43C48();
  v9 = (int *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v10 = 0x200000000;
  else
    v10 = *v9 | ((unint64_t)(*v9 == 0) << 33);
  sub_1B1E8FCE4(v8, (uint64_t)v69, v10, v81);
  swift_release();
  v68 = MEMORY[0x1E0DEE9D8];
  sub_1B1A18378((uint64_t)v81, (uint64_t)v82, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v82[0])
  {
    result = sub_1B19ED720((uint64_t)v69);
LABEL_45:
    v49 = MEMORY[0x1E0DEE9D8];
LABEL_47:
    *a2 = v49;
    return result;
  }
  v70 = v82[0];
  v71 = v82[1];
  v72 = v83;
  if (v88 <= 0 || (v57 = v85) == 0)
  {
    sub_1B19ED720((uint64_t)v69);
    result = (uint64_t)sub_1B1A086DC(v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_45;
  }
  v51 = v9;
  v52 = a2;
  v56 = v84;
  v61 = v87[4];
  v60 = *(unsigned __int8 *)(v86 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v11 = a1 + OBJC_IVAR____TtC3VFX9VFXEffect_scene;
  v53 = v87 + 13;
  v62 = v87;
  v54 = v87 + 8;
  v55 = (uint64_t)(v87 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = 0;
  while (1)
  {
    v58 = v12;
    v59 = v3;
    v13 = (unsigned int *)(v56 + 48 * v12);
    v15 = *v13;
    v14 = v13[1];
    v16 = (uint64_t *)*((_QWORD *)v13 + 2);
    v17 = *((_QWORD *)v13 + 4);
    v18 = *((_QWORD *)v13 + 5);
    if (v60)
    {
      v19 = *(os_unfair_lock_s **)(v18 + 376);
      swift_retain();
      os_unfair_lock_lock(v19);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v61);
    sub_1B1A18378(v55, (uint64_t)v89, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v20 = v62[4];
    v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v18 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v62[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
    v62[7] = v21;
    v54[1] = 0;
    v54[2] = 0;
    *v54 = 0;
    swift_release();
    if (!v16)
      break;
    if (v17)
    {
      do
      {
        v23 = *v16++;
        v22 = v23;
        v24 = swift_retain();
        if ((*(_BYTE *)(v18 + 184) & 1) != 0)
          goto LABEL_51;
        v25 = *(_DWORD *)(*(_QWORD *)(v18 + 168) + 4 * v22);
        v26 = *(_DWORD *)(*(_QWORD *)(v24 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v25 + 8);
        swift_release();
        v27 = (char *)MEMORY[0x1B5E240CC](v11);
        if (!v27)
          goto LABEL_48;
        v28 = *(_QWORD *)&v27[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];

        v29 = (objc_class *)type metadata accessor for VFXCoreCamera();
        v30 = (char *)objc_allocWithZone(v29);
        v31 = &v30[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
        *(_DWORD *)v31 = v25;
        *((_DWORD *)v31 + 1) = v26;
        *((_QWORD *)v31 + 1) = v28;
        v63.receiver = v30;
        v63.super_class = v29;
        objc_msgSendSuper2(&v63, sel_init);
        MEMORY[0x1B5E2064C]();
        if (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          sub_1B2228AF4();
        sub_1B2228B30();
        sub_1B2228AD0();
      }
      while (--v17);
    }
LABEL_23:
    v73[0] = v70;
    v73[1] = v71;
    v74 = v72;
    sub_1B1F05D48(v62, (unsigned __int16 **)v73, (uint64_t)v89);
    v3 = v59;
    if (*(_QWORD *)(v62[13] + 16))
    {
      v32 = (_QWORD *)swift_bridgeObjectRetain();
      sub_1B1F05034(v32, v18);
      swift_bridgeObjectRelease();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v34 = v62[13];
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        sub_1B1C92670(0, *(_QWORD *)(v34 + 16));
      }
      else
      {
        v43 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        if (*(_QWORD *)(v34 + 24) >= 2uLL)
        {
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v43 = (_QWORD *)swift_allocObject();
          v44 = j__malloc_size(v43);
          v43[2] = 0;
          v43[3] = 2 * ((uint64_t)(v44 - 32) / 72);
        }
        *v53 = v43;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v62[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        v45 = *(char **)(v18 + 232);
        v46 = *(char **)(v18 + 256);
        if (v45 == v46)
        {
          v47 = *(char **)(v18 + 240);
        }
        else
        {
          sub_1B1A1059C(v46, v45);
          v46 = *(char **)(v18 + 232);
          v47 = *(char **)(v18 + 240);
          if (v47 == v46)
          {
            v47 = 0;
            v46 = 0;
            *(_QWORD *)(v18 + 232) = 0;
            *(_QWORD *)(v18 + 240) = 0;
          }
        }
        *(_QWORD *)(v18 + 248) = v47;
        *(_QWORD *)(v18 + 256) = v46;
      }
    }
    ecs_stack_allocator_pop_snapshot(v61);
    if ((v60 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
    }
    swift_release();
    v12 = v58 + 1;
    if (v58 + 1 == v57)
    {
      sub_1B1A086DC(v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B19ED720((uint64_t)v69);
      result = (uint64_t)sub_1B1A086DC(v81, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v49 = v68;
      a2 = v52;
      goto LABEL_47;
    }
  }
  if ((_DWORD)v15 == (_DWORD)v14)
    goto LABEL_23;
  while (1)
  {
    v35 = swift_retain();
    if ((*(_BYTE *)(v18 + 184) & 1) != 0)
      break;
    v36 = *(_DWORD *)(*(_QWORD *)(v18 + 168) + 4 * v15);
    v37 = *(_DWORD *)(*(_QWORD *)(v35 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v36 + 8);
    swift_release();
    v38 = (char *)MEMORY[0x1B5E240CC](v11);
    if (!v38)
    {
LABEL_48:
      v66 = 0;
      v67 = 0xE000000000000000;
      sub_1B2229430();
      sub_1B2228890();
      v50 = 0;
      if ((v51[1] & 1) == 0)
        v50 = *v51;
      v65 = v50;
      sub_1B2229A0C();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      break;
    }
    v39 = *(_QWORD *)&v38[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];

    v40 = (objc_class *)type metadata accessor for VFXCoreCamera();
    v41 = (char *)objc_allocWithZone(v40);
    v42 = &v41[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
    *(_DWORD *)v42 = v36;
    *((_DWORD *)v42 + 1) = v37;
    *((_QWORD *)v42 + 1) = v39;
    v64.receiver = v41;
    v64.super_class = v40;
    objc_msgSendSuper2(&v64, sel_init);
    MEMORY[0x1B5E2064C]();
    if (*(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v68 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    ++v15;
    sub_1B2228B30();
    sub_1B2228AD0();
    if (v14 == v15)
      goto LABEL_23;
  }
LABEL_51:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F47D6C(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;

  v5 = sub_1B1F43C48();
  v6 = v2;
  swift_bridgeObjectRetain();
  sub_1B1DB10A4(v5, v6, a1, a2);
  v8 = v7;
  swift_release();

  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1B1F47DE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t inited;
  uint64_t v10;
  int *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  os_unfair_lock_s *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  int v34;
  int v35;
  char *v36;
  uint64_t v37;
  objc_class *v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  BOOL v42;
  char v43;
  uint64_t v44;
  int v45;
  int v46;
  char *v47;
  uint64_t v48;
  objc_class *v49;
  char *v50;
  char *v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  _QWORD *v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  int v64;
  unsigned __int16 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  objc_super v73;
  objc_super v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  _BYTE v79[40];
  _OWORD v80[2];
  uint64_t v81;
  _OWORD v82[2];
  uint64_t v83;
  unsigned __int16 *v84;
  int v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  _QWORD v96[12];
  unsigned __int16 *v97;
  int v98;
  char v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _BYTE v108[40];
  uint64_t v109;

  v5 = v4;
  v109 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v90 = qword_1ED4D09F8;
  v91 = 0;
  v92 = 2;
  v93 = 0;
  v94 = 2;
  v95 = 0;
  swift_retain();
  sub_1B1E388B0(1, (uint64_t)v79);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BAE50, (uint64_t (*)(uint64_t))sub_1B19F66EC, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = &type metadata for PointOfView;
  *(_QWORD *)(inited + 40) = &off_1E6371AA8;
  *(_QWORD *)(inited + 48) = &type metadata for WorldTransform;
  *(_QWORD *)(inited + 56) = &off_1E6382C78;
  sub_1B1E68C98(v80);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v79);
  v10 = sub_1B1F43C48();
  v11 = (int *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID);
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC3VFX9VFXEffect_effectID + 4) & 1) != 0)
    v12 = 0x200000000;
  else
    v12 = *v11 | ((unint64_t)(*v11 == 0) << 33);
  v82[0] = v80[0];
  v82[1] = v80[1];
  v83 = v81;
  sub_1B1E8FCE4(v10, (uint64_t)v82, v12, v96);
  sub_1B1A18378((uint64_t)v96, (uint64_t)&v97, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  v65 = v97;
  if (!v97)
  {
    swift_release();
    result = sub_1B19ED720((uint64_t)v80);
LABEL_46:
    v53 = MEMORY[0x1E0DEE9D8];
    goto LABEL_49;
  }
  v63 = v99;
  v64 = v98;
  v62 = v100;
  v61 = v101;
  v59 = v103;
  v60 = v102;
  v14 = v104;
  v13 = v105;
  v15 = v107;
  v70 = v106;
  swift_release();
  v78 = MEMORY[0x1E0DEE9D8];
  if (v15 <= 0)
  {
    sub_1B19ED720((uint64_t)v80);
    result = (uint64_t)sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    goto LABEL_46;
  }
  if (!v14)
  {
    sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
    sub_1B19ED720((uint64_t)v80);
    sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
    v53 = MEMORY[0x1E0DEE9D8];
LABEL_48:
    result = (uint64_t)sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
LABEL_49:
    *a4 = v53;
    return result;
  }
  v55 = v11;
  v56 = a4;
  v69 = v70[4];
  v16 = *(_BYTE *)(v13 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v71 = a1 + OBJC_IVAR____TtC3VFX9VFXEffect_scene;
  sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A086A4);
  v17 = 0;
  v57 = v16;
  v58 = v14;
  while (1)
  {
    v67 = v17;
    v68 = v5;
    v18 = (unsigned int *)(v59 + 48 * v17);
    v19 = *v18;
    v20 = v18[1];
    v21 = (uint64_t *)*((_QWORD *)v18 + 2);
    v22 = *((_QWORD *)v18 + 4);
    v23 = *((_QWORD *)v18 + 5);
    v66 = *((_QWORD *)v18 + 3);
    if ((v16 & 1) != 0)
    {
      v24 = *(os_unfair_lock_s **)(v23 + 376);
      swift_retain();
      os_unfair_lock_lock(v24);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v69);
    sub_1B1A18378((uint64_t)(v70 + 6), (uint64_t)v108, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
    v25 = v70[4];
    v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v23 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v70[6] = ecs_stack_allocator_allocate(v25, 48 * v26, 8);
    v70[7] = v26;
    v70[9] = 0;
    v70[10] = 0;
    v70[8] = 0;
    swift_release();
    v27 = sub_1B1A12038((uint64_t)&type metadata for Name, (uint64_t)&off_1E63B9AE8, v21, v66, v22, (uint64_t)v70);
    if (v21)
    {
      if (v22)
      {
        v28 = (_QWORD *)(v27 + 8);
        while (1)
        {
          v30 = *v21++;
          v29 = v30;
          v31 = *(v28 - 1) == a2 && *v28 == a3;
          if (v31 || (sub_1B2229D24() & 1) != 0)
          {
            v32 = *(_BYTE *)(v23 + 184);
            v33 = swift_retain();
            if ((v32 & 1) != 0)
              goto LABEL_54;
            v34 = *(_DWORD *)(*(_QWORD *)(v23 + 168) + 4 * v29);
            v35 = *(_DWORD *)(*(_QWORD *)(v33 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v34 + 8);
            swift_release();
            v36 = (char *)MEMORY[0x1B5E240CC](v71);
            if (!v36)
              goto LABEL_51;
            v37 = *(_QWORD *)&v36[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];

            v38 = (objc_class *)type metadata accessor for VFXCoreCamera();
            v39 = (char *)objc_allocWithZone(v38);
            v40 = &v39[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
            *(_DWORD *)v40 = v34;
            *((_DWORD *)v40 + 1) = v35;
            *((_QWORD *)v40 + 1) = v37;
            v73.receiver = v39;
            v73.super_class = v38;
            objc_msgSendSuper2(&v73, sel_init);
            MEMORY[0x1B5E2064C]();
            if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              sub_1B2228AF4();
            sub_1B2228B30();
            sub_1B2228AD0();
          }
          v28 += 2;
          if (!--v22)
            goto LABEL_29;
        }
      }
      goto LABEL_29;
    }
    if ((_DWORD)v19 != (_DWORD)v20)
      break;
LABEL_29:
    v84 = v65;
    v85 = v64;
    v86 = v63;
    v87 = v62;
    v88 = v61;
    v89 = v60;
    sub_1B1F05D48(v70, &v84, (uint64_t)v108);
    v5 = v68;
    sub_1B1F03804((char *)v23);
    ecs_stack_allocator_pop_snapshot(v69);
    v16 = v57;
    if ((v57 & 1) != 0)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 376));
    }
    swift_release();
    v17 = v67 + 1;
    if (v67 + 1 == v58)
    {
      sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      sub_1B19ED720((uint64_t)v80);
      sub_1B1A086DC(v96, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      v53 = v78;
      a4 = v56;
      goto LABEL_48;
    }
  }
  v41 = (_QWORD *)(v27 + 16 * v19 + 8);
  while (1)
  {
    v42 = *(v41 - 1) == a2 && *v41 == a3;
    if (v42 || (sub_1B2229D24() & 1) != 0)
      break;
LABEL_33:
    ++v19;
    v41 += 2;
    if (v20 == v19)
      goto LABEL_29;
  }
  v43 = *(_BYTE *)(v23 + 184);
  v44 = swift_retain();
  if ((v43 & 1) != 0)
    goto LABEL_54;
  v45 = *(_DWORD *)(*(_QWORD *)(v23 + 168) + 4 * v19);
  v46 = *(_DWORD *)(*(_QWORD *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v45 + 8);
  swift_release();
  v47 = (char *)MEMORY[0x1B5E240CC](v71);
  if (v47)
  {
    v48 = *(_QWORD *)&v47[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];

    v49 = (objc_class *)type metadata accessor for VFXCoreCamera();
    v50 = (char *)objc_allocWithZone(v49);
    v51 = &v50[OBJC_IVAR____TtC3VFX13VFXCoreCamera_instance];
    *(_DWORD *)v51 = v45;
    *((_DWORD *)v51 + 1) = v46;
    *((_QWORD *)v51 + 1) = v48;
    v74.receiver = v50;
    v74.super_class = v49;
    objc_msgSendSuper2(&v74, sel_init);
    MEMORY[0x1B5E2064C]();
    if (*(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v78 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    sub_1B2228B30();
    sub_1B2228AD0();
    goto LABEL_33;
  }
LABEL_51:
  v76 = 0;
  v77 = 0xE000000000000000;
  sub_1B2229430();
  sub_1B2228890();
  v54 = 0;
  if ((v55[1] & 1) == 0)
    v54 = *v55;
  v75 = v54;
  sub_1B2229A0C();
  sub_1B2228890();
  swift_bridgeObjectRelease();
  sub_1B2228890();
LABEL_54:
  result = sub_1B2229688();
  __break(1u);
  return result;
}

uint64_t sub_1B1F4871C()
{
  char *v0;
  char *v1;
  id v2;
  int v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10[2];

  v1 = v0;
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  sub_1B2229430();
  swift_bridgeObjectRelease();
  v10[1] = 0xEF20746365666665;
  v2 = objc_msgSend(v0, sel_description);
  sub_1B222874C();

  sub_1B2228890();
  swift_bridgeObjectRelease();
  v3 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  v10[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v3, v10, 0x20676E69706D7564, 0xEF20746365666665);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if ((v1[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity + 8] & 1) != 0)
  {
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    strcpy((char *)v10, "effect ");
    v10[1] = 0xE700000000000000;
    v4 = objc_msgSend(v1, sel_description);
    sub_1B222874C();

    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
  }
  else
  {
    v5 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX9VFXEffect_rootEntity];
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    strcpy((char *)v10, "root entity: ");
    HIWORD(v10[1]) = -4864;
    sub_1B1BC3C70();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    sub_1B1F43C48();
    sub_1B1FD568C((uint64_t)&type metadata for Tombstone, (uint64_t)&off_1E63C5608, v5);
    swift_release();
    sub_1B2228890();
    swift_bridgeObjectRelease();
  }
  v6 = v10[0];
  v7 = v10[1];
  v8 = sub_1B2228E90();
  v10[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v8, v10, v6, v7);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

id VFXEffect.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXEffect();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t sub_1B1F48BA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int64_t v49;
  uint64_t v50;
  char v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t result;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  _QWORD *v86;
  _QWORD v87[8];
  _OWORD v88[2];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  _OWORD v98[2];
  uint64_t v99;
  _OWORD v100[2];
  uint64_t v101;
  _BYTE v102[48];

  v6 = v5;
  v8 = *(_OWORD *)(a2 + 16);
  v100[0] = *(_OWORD *)a2;
  v100[1] = v8;
  v101 = *(_QWORD *)(a2 + 32);
  sub_1B1E8FCE4(a1, (uint64_t)v100, a3 & 0xFFFFFFFFFFLL, v87);
  sub_1B1A18378((uint64_t)v87, (uint64_t)v88, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v88[0])
  {
    v95 = v88[0];
    v96 = v88[1];
    v97 = v89;
    if (v94 >= 1)
    {
      v71 = v91;
      if (v91)
      {
        v67 = a5;
        v70 = v90;
        v75 = v93[4];
        v76 = v93;
        v74 = *(unsigned __int8 *)(v92 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v68 = v93 + 8;
        v69 = (uint64_t)(v93 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v9 = 0;
        v77 = MEMORY[0x1E0DEE9B0] + 8;
        while (1)
        {
          v72 = v9;
          v73 = v6;
          v10 = (unsigned int *)(v70 + 48 * v9);
          v11 = *v10;
          v80 = v10[1];
          v12 = (uint64_t *)*((_QWORD *)v10 + 2);
          v13 = *((_QWORD *)v10 + 3);
          v15 = *((_QWORD *)v10 + 4);
          v14 = *((_QWORD *)v10 + 5);
          if (v74)
          {
            v16 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
          }
          else
          {
            swift_retain();
          }
          v17 = a4;
          ecs_stack_allocator_push_snapshot(v75);
          sub_1B1A18378(v69, (uint64_t)v102, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v18 = v76[4];
          v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v76[6] = ecs_stack_allocator_allocate(v18, 48 * v19, 8);
          v76[7] = v19;
          v68[1] = 0;
          v68[2] = 0;
          *v68 = 0;
          swift_release();
          sub_1B1A12038((uint64_t)&type metadata for Name, (uint64_t)&off_1E63B9AE8, v12, v13, v15, (uint64_t)v76);
          v20 = sub_1B1A12038((uint64_t)&type metadata for Bindings, (uint64_t)&off_1E63BE948, v12, v13, v15, (uint64_t)v76);
          v79 = v14;
          if (v12)
          {
            if (v15)
            {
              v21 = (uint64_t *)(v20 + 16);
              do
              {
                v25 = *v12;
                v24 = v12 + 1;
                v23 = v25;
                v26 = swift_retain();
                if ((*(_BYTE *)(v14 + 184) & 1) != 0)
                  goto LABEL_53;
                v84 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v23);
                v81 = v24;
                v82 = *(unsigned int *)(*(_QWORD *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                      + 12 * (int)v84
                                      + 8);
                swift_release();
                v27 = *v21;
                v28 = *(_QWORD *)(*v21 + 16);
                if (v28)
                {
                  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                  v29 = (_QWORD *)swift_allocObject();
                  v30 = j__malloc_size(v29);
                  v31 = v30 - 32;
                  if (v30 < 32)
                    v31 = v30 - 25;
                  v29[2] = v28;
                  v29[3] = (2 * (v31 >> 3)) | 1;
                  sub_1B19F6D80(&v86, v29 + 4, v28, v27);
                  swift_bridgeObjectRetain_n();
                  v17 = a4;
                  sub_1B19F8D30();
                  swift_bridgeObjectRelease();
                }
                else
                {
                  v29 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                }
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v86 = (_QWORD *)*v17;
                v33 = v86;
                *v17 = 0x8000000000000000;
                v34 = v84 | (unint64_t)(v82 << 32);
                v35 = sub_1B1DC3CA4(v34);
                v37 = v36;
                v38 = v33[2] + ((v36 & 1) == 0);
                if (v33[3] >= v38)
                {
                  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                    sub_1B1EB1DEC();
                }
                else
                {
                  sub_1B1EA1DF4(v38, isUniquelyReferenced_nonNull_native);
                  v39 = sub_1B1DC3CA4(v34);
                  if ((v37 & 1) != (v40 & 1))
                    goto LABEL_54;
                  v35 = v39;
                }
                v14 = v79;
                v41 = v86;
                if ((v37 & 1) != 0)
                {
                  v42 = v86[7];
                  swift_bridgeObjectRelease();
                  *(_QWORD *)(v42 + 8 * v35) = v29;
                }
                else
                {
                  v86[(v35 >> 6) + 8] |= 1 << v35;
                  v22 = (unsigned int *)(v41[6] + 8 * v35);
                  *v22 = v84;
                  v22[1] = v82;
                  *(_QWORD *)(v41[7] + 8 * v35) = v29;
                  ++v41[2];
                }
                *v17 = v41;
                swift_bridgeObjectRelease();
                v21 += 3;
                --v15;
                v12 = v81;
              }
              while (v15);
            }
          }
          else if ((_DWORD)v11 != (_DWORD)v80)
          {
            v43 = v20 + 24 * v11 + 16;
            while (1)
            {
              v45 = swift_retain();
              if ((*(_BYTE *)(v14 + 184) & 1) != 0)
                break;
              v83 = *(unsigned int *)(*(_QWORD *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                    + 12 * *(int *)(*(_QWORD *)(v14 + 168) + 4 * v11)
                                    + 8);
              v85 = *(_DWORD *)(*(_QWORD *)(v14 + 168) + 4 * v11);
              swift_release();
              v46 = *(_QWORD *)v43;
              v47 = *(_QWORD *)(*(_QWORD *)v43 + 16);
              if (v47)
              {
                sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, v77, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                v48 = (_QWORD *)swift_allocObject();
                v49 = j__malloc_size(v48);
                v50 = v49 - 32;
                if (v49 < 32)
                  v50 = v49 - 25;
                v48[2] = v47;
                v48[3] = (2 * (v50 >> 3)) | 1;
                sub_1B19F6D80(&v86, v48 + 4, v47, v46);
                swift_bridgeObjectRetain_n();
                v17 = a4;
                sub_1B19F8D30();
                swift_bridgeObjectRelease();
              }
              else
              {
                v48 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              }
              v51 = swift_isUniquelyReferenced_nonNull_native();
              v86 = (_QWORD *)*v17;
              v52 = v86;
              *v17 = 0x8000000000000000;
              v53 = v85 | (unint64_t)(v83 << 32);
              v54 = sub_1B1DC3CA4(v53);
              v56 = v55;
              v57 = v52[2] + ((v55 & 1) == 0);
              if (v52[3] >= v57)
              {
                if ((v51 & 1) == 0)
                  sub_1B1EB1DEC();
              }
              else
              {
                sub_1B1EA1DF4(v57, v51);
                v58 = sub_1B1DC3CA4(v53);
                if ((v56 & 1) != (v59 & 1))
                  goto LABEL_54;
                v54 = v58;
              }
              v14 = v79;
              v60 = v86;
              if ((v56 & 1) != 0)
              {
                v61 = v86[7];
                swift_bridgeObjectRelease();
                *(_QWORD *)(v61 + 8 * v54) = v48;
              }
              else
              {
                v86[(v54 >> 6) + 8] |= 1 << v54;
                v44 = (unsigned int *)(v60[6] + 8 * v54);
                *v44 = v85;
                v44[1] = v83;
                *(_QWORD *)(v60[7] + 8 * v54) = v48;
                ++v60[2];
              }
              ++v11;
              *v17 = v60;
              swift_bridgeObjectRelease();
              v43 += 24;
              if (v80 == v11)
                goto LABEL_28;
            }
LABEL_53:
            sub_1B2229688();
            __break(1u);
LABEL_54:
            sub_1B2229FC4();
            __break(1u);
LABEL_55:
            result = swift_unexpectedError();
            __break(1u);
            return result;
          }
LABEL_28:
          v98[0] = v95;
          v98[1] = v96;
          v99 = v97;
          sub_1B1F05D48(v76, (unsigned __int16 **)v98, (uint64_t)v102);
          v6 = v73;
          sub_1B1F03804((char *)v14);
          ecs_stack_allocator_pop_snapshot(v75);
          if ((v74 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
          }
          swift_release();
          v9 = v72 + 1;
          if (v72 + 1 == v71)
          {
            sub_1B1A086DC(v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
            a5 = v67;
            break;
          }
        }
      }
    }
    sub_1B1A086DC(v87, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
  }
  v62 = swift_bridgeObjectRetain();
  v63 = sub_1B1F4BE08(v62, (uint64_t (*)(uint64_t, uint64_t))sub_1B1F4C8FC);
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(v63 + 16))
  {
    sub_1B1B9D634();
    v64 = sub_1B22296DC();
  }
  else
  {
    v64 = MEMORY[0x1E0DEE9E0];
  }
  v86 = (_QWORD *)v64;
  v65 = (_QWORD *)swift_bridgeObjectRetain();
  sub_1B1F4B3F8(v65, 1, &v86);
  if (v6)
    goto LABEL_55;
  result = swift_bridgeObjectRelease();
  *a5 = v86;
  return result;
}

unint64_t sub_1B1F49400(unint64_t a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  int64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  _QWORD v95[8];
  _OWORD v96[2];
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  _OWORD v103[2];
  uint64_t v104;
  _BYTE v105[40];
  uint64_t v106;
  int v107;
  char v108;
  uint64_t v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  char v114;
  uint64_t v115;
  char v116;
  uint64_t v117;

  v88 = MEMORY[0x1E0DEE9D8];
  if (qword_1ED4B7DB8 != -1)
    goto LABEL_128;
  while (1)
  {
    v112 = qword_1ED4D09F8;
    v113 = 0;
    v114 = 2;
    v115 = 0;
    v116 = 2;
    v117 = 0;
    swift_retain();
    sub_1B1E4050C(1, (uint64_t)&v89);
    swift_release();
    v106 = v89;
    v107 = v90;
    v108 = v91;
    v109 = v92 | 1;
    v110 = v93;
    v111 = v94;
    sub_1B1E8FCE4((uint64_t)a3, (uint64_t)&v106, 0x200000000, v95);
    sub_1B1A18378((uint64_t)v95, (uint64_t)v96, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
    if (!*(_QWORD *)&v96[0])
      break;
    if (v102 < 1 || (v63 = v99) == 0)
    {
LABEL_122:
      sub_1B1A086DC(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
      break;
    }
    v87 = HIDWORD(a1);
    v67 = v101[4];
    v68 = v101;
    v66 = *(unsigned __int8 *)(v100 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v103[0] = v96[0];
    v103[1] = v96[1];
    v104 = v97;
    v61 = (uint64_t)(v101 + 6);
    v62 = v98;
    v60 = v101 + 8;
    v81 = a2 & 0xC000000000000001;
    v73 = a2 + 32;
    swift_retain();
    swift_retain();
    swift_retain();
    v5 = 0;
    v59 = a2 >> 62;
    v86 = (_QWORD *)a1;
    while (1)
    {
      v65 = v5;
      v6 = (unsigned int *)(v62 + 48 * v5);
      v7 = *v6;
      v9 = (uint64_t *)*((_QWORD *)v6 + 2);
      v8 = *((_QWORD *)v6 + 3);
      v10 = *((_QWORD *)v6 + 5);
      v69 = v6[1];
      v70 = *((_QWORD *)v6 + 4);
      if (v66)
      {
        v11 = *(os_unfair_lock_s **)(v10 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v11);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v67);
      sub_1B1A18378(v61, (uint64_t)v105, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
      v12 = v68[4];
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v68[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
      v68[7] = v13;
      v60[1] = 0;
      v60[2] = 0;
      *v60 = 0;
      swift_release();
      v14 = v70;
      v64 = v10;
      v15 = sub_1B1A12038((uint64_t)&type metadata for GraphScriptingConfig, (uint64_t)&off_1E639BCE0, v9, v8, v70, (uint64_t)v68);
      if (!v9)
      {
        if ((_DWORD)v7 != (_DWORD)v69)
        {
          if (v59)
          {
            swift_bridgeObjectRetain();
            v80 = sub_1B22296AC();
            swift_bridgeObjectRelease();
          }
          else
          {
            v80 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
          }
          v75 = v15 + 8;
          do
          {
            if (v80)
            {
              v72 = v7;
              v78 = 32 * v7;
              swift_bridgeObjectRetain();
              for (i = 0; i != v80; i = v38 + 1)
              {
                v83 = i;
                if (v81)
                {
                  v39 = (_QWORD *)MEMORY[0x1B5E21018](i, a2);
                }
                else
                {
                  v39 = *(_QWORD **)(v73 + 8 * i);
                  swift_retain();
                }
                v40 = *(_QWORD *)(v75 + v78);
                v85 = v40 + 64;
                v41 = 1 << *(_BYTE *)(v40 + 32);
                if (v41 < 64)
                  v42 = ~(-1 << v41);
                else
                  v42 = -1;
                v43 = v42 & *(_QWORD *)(v40 + 64);
                v44 = (unint64_t)(v41 + 63) >> 6;
                swift_bridgeObjectRetain_n();
                swift_retain();
                v45 = 0;
                while (1)
                {
                  while (1)
                  {
                    do
                    {
                      if (v43)
                      {
                        v46 = __clz(__rbit64(v43));
                        v43 &= v43 - 1;
                        v47 = v46 | (v45 << 6);
                      }
                      else
                      {
                        v48 = v45 + 1;
                        if (v45 + 1 >= v44)
                          goto LABEL_73;
                        v49 = *(_QWORD *)(v85 + 8 * v48);
                        if (!v49)
                        {
                          v48 = v45 + 2;
                          if (v45 + 2 >= v44)
                            goto LABEL_73;
                          v49 = *(_QWORD *)(v85 + 8 * v48);
                          if (!v49)
                          {
                            v48 = v45 + 3;
                            if (v45 + 3 >= v44)
                              goto LABEL_73;
                            v49 = *(_QWORD *)(v85 + 8 * v48);
                            if (!v49)
                            {
                              v48 = v45 + 4;
                              if (v45 + 4 >= v44)
                                goto LABEL_73;
                              v49 = *(_QWORD *)(v85 + 8 * v48);
                              if (!v49)
                              {
                                v48 = v45 + 5;
                                if (v45 + 5 >= v44)
                                  goto LABEL_73;
                                v49 = *(_QWORD *)(v85 + 8 * v48);
                                if (!v49)
                                {
                                  v48 = v45 + 6;
                                  if (v45 + 6 >= v44)
                                    goto LABEL_73;
                                  v49 = *(_QWORD *)(v85 + 8 * v48);
                                  if (!v49)
                                  {
                                    while (v44 - 7 != v45)
                                    {
                                      v49 = *(_QWORD *)(v40 + 120 + 8 * v45++);
                                      if (v49)
                                      {
                                        v48 = v45 + 6;
                                        goto LABEL_100;
                                      }
                                    }
LABEL_73:
                                    v38 = v83;
                                    swift_release();
                                    swift_bridgeObjectRelease();
                                    goto LABEL_74;
                                  }
                                }
                              }
                            }
                          }
                        }
LABEL_100:
                        v43 = (v49 - 1) & v49;
                        v47 = __clz(__rbit64(v49)) + (v48 << 6);
                        v45 = v48;
                      }
                      v50 = 16 * v47;
                      v51 = *(_QWORD *)(v40 + 56) + v50;
                    }
                    while (*(_DWORD *)v51 != (_DWORD)a1 || *(_DWORD *)(v51 + 4) != (_DWORD)v87);
                    a3 = *(_QWORD **)(*(_QWORD *)(v40 + 48) + v50 + 8);
                    a1 = *(_QWORD *)(v51 + 8);
                    swift_bridgeObjectRetain();
                    swift_retain();
                    v52 = sub_1B2229304();
                    if (!swift_conformsToProtocol2())
                      goto LABEL_126;
                    v53 = sub_1B2229304();
                    if (!swift_conformsToProtocol2())
                      goto LABEL_127;
                    if (v52 == v53 && *(_QWORD *)(a1 + 40) == v39[5])
                      break;
                    swift_release();
                    swift_bridgeObjectRelease();
                    a1 = (unint64_t)v86;
                  }
                  if (*(_QWORD *)(a1 + 16) == v39[2] && *(_QWORD *)(a1 + 24) == v39[3])
                    break;
                  v55 = sub_1B2229D24();
                  swift_release();
                  swift_bridgeObjectRelease();
                  a1 = (unint64_t)v86;
                  if ((v55 & 1) != 0)
                  {
                    swift_release();
                    swift_bridgeObjectRelease();
                    goto LABEL_114;
                  }
                }
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
                a1 = (unint64_t)v86;
LABEL_114:
                v56 = swift_retain();
                MEMORY[0x1B5E2064C](v56);
                v38 = v83;
                if (*(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
                  sub_1B2228AF4();
                sub_1B2228B30();
                sub_1B2228AD0();
LABEL_74:
                swift_release_n();
              }
              swift_bridgeObjectRelease();
              v7 = v72;
            }
            ++v7;
          }
          while (v7 != v69);
        }
        goto LABEL_64;
      }
      if (v70)
        break;
LABEL_64:
      sub_1B1F05D48(v68, (unsigned __int16 **)v103, (uint64_t)v105);
      sub_1B1F03804((char *)v64);
      ecs_stack_allocator_pop_snapshot(v67);
      if ((v66 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v64 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v64 + 376));
      }
      swift_release();
      v5 = v65 + 1;
      if (v65 + 1 == v63)
      {
        sub_1B1A086DC(v95, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
        goto LABEL_122;
      }
    }
    if (v59)
    {
      swift_bridgeObjectRetain();
      v79 = sub_1B22296AC();
      swift_bridgeObjectRelease();
    }
    else
    {
      v79 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v16 = 0;
    v74 = v15 + 8;
    while (!v79)
    {
LABEL_16:
      if (++v16 == v14)
        goto LABEL_64;
    }
    v71 = v16;
    v77 = 32 * v16;
    swift_bridgeObjectRetain();
    v17 = 0;
LABEL_21:
    v82 = v17;
    if (v81)
    {
      v19 = (_QWORD *)MEMORY[0x1B5E21018](v17, a2);
    }
    else
    {
      v19 = *(_QWORD **)(v73 + 8 * v17);
      swift_retain();
    }
    v20 = *(_QWORD *)(v74 + v77);
    v84 = v20 + 64;
    v21 = 1 << *(_BYTE *)(v20 + 32);
    if (v21 < 64)
      v22 = ~(-1 << v21);
    else
      v22 = -1;
    v23 = v22 & *(_QWORD *)(v20 + 64);
    v24 = (unint64_t)(v21 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    swift_retain();
    v25 = 0;
    while (1)
    {
      do
      {
        if (v23)
        {
          v26 = __clz(__rbit64(v23));
          v23 &= v23 - 1;
          v27 = v26 | (v25 << 6);
        }
        else
        {
          v28 = v25 + 1;
          if (v25 + 1 >= v24)
            goto LABEL_19;
          v29 = *(_QWORD *)(v84 + 8 * v28);
          if (!v29)
          {
            v28 = v25 + 2;
            if (v25 + 2 >= v24)
              goto LABEL_19;
            v29 = *(_QWORD *)(v84 + 8 * v28);
            if (!v29)
            {
              v28 = v25 + 3;
              if (v25 + 3 >= v24)
                goto LABEL_19;
              v29 = *(_QWORD *)(v84 + 8 * v28);
              if (!v29)
              {
                v28 = v25 + 4;
                if (v25 + 4 >= v24)
                  goto LABEL_19;
                v29 = *(_QWORD *)(v84 + 8 * v28);
                if (!v29)
                {
                  v28 = v25 + 5;
                  if (v25 + 5 >= v24)
                    goto LABEL_19;
                  v29 = *(_QWORD *)(v84 + 8 * v28);
                  if (!v29)
                  {
                    v28 = v25 + 6;
                    if (v25 + 6 >= v24)
                      goto LABEL_19;
                    v29 = *(_QWORD *)(v84 + 8 * v28);
                    if (!v29)
                    {
                      while (v24 - 7 != v25)
                      {
                        v29 = *(_QWORD *)(v20 + 120 + 8 * v25++);
                        if (v29)
                        {
                          v28 = v25 + 6;
                          goto LABEL_46;
                        }
                      }
LABEL_19:
                      v18 = v82;
                      swift_release();
                      swift_bridgeObjectRelease();
LABEL_20:
                      swift_release_n();
                      v17 = v18 + 1;
                      if (v17 == v79)
                      {
                        swift_bridgeObjectRelease();
                        v14 = v70;
                        v16 = v71;
                        goto LABEL_16;
                      }
                      goto LABEL_21;
                    }
                  }
                }
              }
            }
          }
LABEL_46:
          v23 = (v29 - 1) & v29;
          v27 = __clz(__rbit64(v29)) + (v28 << 6);
          v25 = v28;
        }
        v30 = 16 * v27;
        v31 = *(_QWORD *)(v20 + 56) + v30;
      }
      while (*(_DWORD *)v31 != (_DWORD)a1 || *(_DWORD *)(v31 + 4) != (_DWORD)v87);
      a1 = *(_QWORD *)(*(_QWORD *)(v20 + 48) + v30 + 8);
      a3 = *(_QWORD **)(v31 + 8);
      swift_bridgeObjectRetain();
      swift_retain();
      v32 = sub_1B2229304();
      if (!swift_conformsToProtocol2())
        break;
      v33 = sub_1B2229304();
      if (!swift_conformsToProtocol2())
        goto LABEL_125;
      if (v32 == v33 && a3[5] == v19[5])
      {
        if (a3[2] == v19[2] && a3[3] == v19[3])
        {
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          a1 = (unint64_t)v86;
          goto LABEL_60;
        }
        v35 = sub_1B2229D24();
        swift_release();
        swift_bridgeObjectRelease();
        a1 = (unint64_t)v86;
        if ((v35 & 1) != 0)
        {
          swift_release();
          swift_bridgeObjectRelease();
LABEL_60:
          v36 = swift_retain();
          MEMORY[0x1B5E2064C](v36);
          v18 = v82;
          if (*(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v88 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            sub_1B2228AF4();
          sub_1B2228B30();
          sub_1B2228AD0();
          goto LABEL_20;
        }
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
        a1 = (unint64_t)v86;
      }
    }
    __break(1u);
LABEL_125:
    __break(1u);
LABEL_126:
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    swift_once();
  }
  v57 = swift_bridgeObjectRetain();
  sub_1B1F4C66C(v57, &v88);
  swift_bridgeObjectRelease();
  sub_1B19ED720((uint64_t)&v89);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1B1F49F70@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36[4];
  __int128 v37;
  __int128 v38;

  sub_1B1A02864(a1, (uint64_t)&v37);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7A8);
  v5 = MEMORY[0x1E0DEE9B8];
  if ((swift_dynamicCast() & 1) == 0)
    return (_OWORD *)sub_1B1A02864(a1, (uint64_t)a2);
  v6 = v36[0];
  v7 = objc_msgSend(v36[0], sel_values);
  if (v7)
  {
    v8 = v7;
    v9 = sub_1B2228AB8();

    v10 = sub_1B1F4A38C(v9);
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRelease();
      goto LABEL_13;
    }
  }
  v11 = objc_msgSend(v36[0], sel_values);
  if (v11)
  {
    v12 = v11;
    v13 = sub_1B2228AB8();

    v14 = sub_1B1F4A4A4(v13);
    swift_bridgeObjectRelease();
    if (v14)
    {
      swift_bridgeObjectRelease();
      v15 = sub_1B20D4C50();
      if (v15)
      {
        *((_QWORD *)&v38 + 1) = &type metadata for ColorRamp;
        *(_QWORD *)&v37 = v15;
        *((_QWORD *)&v37 + 1) = v16;
        LOBYTE(v38) = v17;

        sub_1B1A02864(a1, (uint64_t)v36);
LABEL_15:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v36);
        return sub_1B1A0DDAC(&v37, a2);
      }
      goto LABEL_16;
    }
  }
  v18 = objc_msgSend(v36[0], sel_values);
  if (v18)
  {

    v19 = objc_msgSend(v36[0], sel_values);
    v20 = sub_1B2228AB8();

    v21 = *(_QWORD *)(v20 + 16);
    swift_bridgeObjectRelease();
    if (v21)
    {
      v22 = *(_QWORD *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
      swift_retain();
      v23 = sub_1B2228EA8();
      *(_QWORD *)&v37 = 0;
      (*(void (**)(uint64_t, __int128 *, unint64_t, unint64_t))(*(_QWORD *)v22 + 88))(v23, &v37, 0xD000000000000050, 0x80000001B2345010);
      swift_release();

      return (_OWORD *)sub_1B1A02864(a1, (uint64_t)a2);
    }
  }
LABEL_13:
  v25 = sub_1B20D492C();
  if (!v25)
  {
LABEL_16:

    v37 = 0u;
    v38 = 0u;
    sub_1B1A02864(a1, (uint64_t)v36);
    goto LABEL_17;
  }
  v29 = v25;
  v30 = v26;
  v31 = v27;
  v32 = v28;
  sub_1B1A0DBF0(0, v26, v27, v28);
  v34 = v33;
  *((_QWORD *)&v38 + 1) = v33;
  v35 = swift_allocObject();
  *(_QWORD *)&v37 = v35;
  *(_QWORD *)(v35 + 16) = v29;
  *(_QWORD *)(v35 + 24) = v30;
  *(_QWORD *)(v35 + 32) = v31;
  *(_BYTE *)(v35 + 40) = v32;

  sub_1B1A02864(a1, (uint64_t)v36);
  if (v34)
    goto LABEL_15;
LABEL_17:
  sub_1B1A0DDAC(v36, a2);
  return (_OWORD *)sub_1B1AEA224((uint64_t)&v37, (uint64_t)&qword_1ED4BB150, v5 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
}

uint64_t sub_1B1F4A248(uint64_t a1)
{
  int64_t v2;
  uint64_t i;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[32];
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x1E0DEE9D8];
  sub_1B202AFCC(0, v2, 0);
  if (!v2)
    return v12;
  for (i = a1 + 32; ; i += 32)
  {
    sub_1B1A02864(i, (uint64_t)v11);
    sub_1B1791068();
    if (!swift_dynamicCast())
      break;
    v4 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1B202AFCC(0, *(_QWORD *)(v4 + 16) + 1, 1);
      v4 = v12;
    }
    v6 = *(_QWORD *)(v4 + 16);
    v5 = *(_QWORD *)(v4 + 24);
    if (v6 >= v5 >> 1)
    {
      sub_1B202AFCC(v5 > 1, v6 + 1, 1);
      v4 = v12;
    }
    *(_QWORD *)(v4 + 16) = v6 + 1;
    v7 = v4 + 16 * v6;
    *(_QWORD *)(v7 + 32) = v9;
    *(_QWORD *)(v7 + 40) = v10;
    if (!--v2)
      return v4;
  }
  swift_release();
  return 0;
}

uint64_t sub_1B1F4A38C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _BYTE v5[32];
  uint64_t v6;

  v6 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(a1 + 16);
  sub_1B2229550();
  if (!v2)
    return v6;
  for (i = a1 + 32; ; i += 32)
  {
    sub_1B1A02864(i, (uint64_t)v5);
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
    if (!swift_dynamicCast())
      break;
    sub_1B2229520();
    sub_1B2229568();
    sub_1B2229574();
    sub_1B2229538();
    if (!--v2)
      return v6;
  }
  swift_release();

  return 0;
}

uint64_t sub_1B1F4A4A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  _BYTE v5[32];
  uint64_t v6;

  v6 = MEMORY[0x1E0DEE9D8];
  v2 = *(_QWORD *)(a1 + 16);
  sub_1B2229550();
  if (!v2)
    return v6;
  for (i = a1 + 32; ; i += 32)
  {
    sub_1B1A02864(i, (uint64_t)v5);
    type metadata accessor for CGColor(0);
    if (!swift_dynamicCast())
      break;
    sub_1B2229520();
    sub_1B2229568();
    sub_1B2229574();
    sub_1B2229538();
    if (!--v2)
      return v6;
  }
  swift_release();

  return 0;
}

void *sub_1B1F4A59C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  sub_1B1A0DCD4(a1, (uint64_t)v13);
  v4 = MEMORY[0x1E0DEE9B8];
  if (v14)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      v5 = sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7A8);
      result = sub_1B20D4FB8(v11, v12);
      a2[3] = v5;
      *a2 = result;
      return result;
    }
  }
  else
  {
    sub_1B1AEA224((uint64_t)v13, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  }
  sub_1B1A0DCD4(a1, (uint64_t)v13);
  if (v14)
  {
    sub_1B1A0DBF0(0, v7, v8, v9);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v10 = sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7A8);
      result = sub_1B20D5250(v11, v12);
      a2[3] = v10;
      *a2 = result;
      return result;
    }
  }
  else
  {
    sub_1B1AEA224((uint64_t)v13, (uint64_t)&qword_1ED4BB150, v4 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  }
  return (void *)sub_1B1A0DCD4(a1, (uint64_t)a2);
}

uint64_t sub_1B1F4A718(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t))
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  _OWORD v23[2];
  _OWORD v24[2];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((a2 & 0xFFFFFFFFFFFFFFFELL) == 0x18)
  {
    swift_bridgeObjectRetain();
    sub_1B1FDFBF0(a4, a3, a5, a6, v24);
    sub_1B1F4A59C((uint64_t)v24, v23);
    sub_1B1AEA224((uint64_t)v24, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    sub_1B1A0DDAC(v23, v24);
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7A8);
    swift_dynamicCast();
    v12 = objc_msgSend(v22, sel_serializedVFXBindingData);
    sub_1B222817C();
    v14 = v13;

    __asm { BR              X10 }
  }
  v15 = *(_QWORD *)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    swift_bridgeObjectRetain();
    v16 = sub_1B1DC3B00(a5, a6);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_retain();
      swift_bridgeObjectRelease();
      v19 = *(_QWORD *)(v18 + 16);
      if (v19)
      {
        v20 = *(_QWORD *)(v18 + 24);
        swift_release();
        v21 = v20 - v19;
      }
      else
      {
        swift_release();
        v21 = 0;
      }
      return a7(v19, v21);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

_BYTE *sub_1B1F4AB00(_BYTE *result, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t (*a6)(uint64_t, uint64_t), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  if ((a3 & 1) != 0 || (a2 & 0xFFFFFFFFFFFFFFFELL) != 0x18)
  {
    result[8] = 1;
    v13 = *(_QWORD *)result;
    if (*(_QWORD *)(*(_QWORD *)result + 16))
    {
      swift_bridgeObjectRetain();
      v14 = sub_1B1DC3B00(a10, a11);
      if ((v15 & 1) != 0)
      {
        v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
        swift_retain();
        swift_bridgeObjectRelease();
        v17 = *(_QWORD *)(v16 + 16);
        if (v17)
        {
          v18 = *(_QWORD *)(v16 + 24);
          swift_release();
          v19 = v18 - v17;
        }
        else
        {
          swift_release();
          v19 = 0;
        }
        return (_BYTE *)a6(v17, v19);
      }
      else
      {
        return (_BYTE *)swift_bridgeObjectRelease();
      }
    }
  }
  else if ((a5 & 1) == 0)
  {
    v20 = sub_1B20D7F58(a4);
    v21 = v12;
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1F4B760((uint64_t)&v20);
    return (_BYTE *)sub_1B1A0DADC(v20, v21);
  }
  return result;
}

uint64_t sub_1B1F4AC58(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  id v12;
  id v13;
  _OWORD *v14;
  uint64_t v15;
  uint64_t result;
  _QWORD v17[6];
  _OWORD v18[2];
  _QWORD v19[4];

  if (a5 < 0)
  {
    result = sub_1B222967C();
    __break(1u);
  }
  else
  {
    a3(a1, a5);
    v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CD2798]), sel_initWithSerializedVFXBindingDataPointer_, a1);
    v19[3] = sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7A8);
    v19[0] = v12;
    v13 = v12;
    v14 = sub_1B1F49F70((uint64_t)v19, v18);
    MEMORY[0x1E0C80A78](v14, v15);
    v17[2] = a8;
    v17[3] = a9;
    v17[4] = v18;
    sub_1B1A746EC(a7, (uint64_t)sub_1B1F4C5D4, (uint64_t)v17);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v18);

    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v19);
  }
  return result;
}

uint64_t sub_1B1F4ADC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;
  char v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _QWORD v15[6];
  _OWORD v16[2];

  result = sub_1B1FF36E8(a2, a3, a4 & 0xFFFFFFFFFFLL, 1);
  if ((v11 & 1) == 0)
  {
    v12 = result;
    v13 = sub_1B1F49F70(a7, v16);
    MEMORY[0x1E0C80A78](v13, v14);
    v15[2] = a5;
    v15[3] = a6;
    v15[4] = v16;
    sub_1B1A746EC(v12, (uint64_t)sub_1B1F4C5D4, (uint64_t)v15);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
  }
  return result;
}

uint64_t sub_1B1F4AE94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  _OWORD v12[2];

  v9 = a2;
  if (!a2)
    v9 = 0xFFFFFFFFLL;
  v10 = v9 | a2 & 0xFFFFFFFF00000000;
  swift_bridgeObjectRetain();
  sub_1B1FDFBF0(v10, a1, a3, a4, v12);
  sub_1B1F4A59C((uint64_t)v12, a5);
  return sub_1B1AEA224((uint64_t)v12, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
}

uint64_t sub_1B1F4AF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  _OWORD v11[2];

  v7 = a2 & 0xFFFFFFFF00000000;
  if (a2)
    v8 = a2;
  else
    v8 = 0xFFFFFFFFLL;
  sub_1B1F49F70(a5, v11);
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = v11;
  sub_1B1A746EC(v8 | v7, (uint64_t)sub_1B1F4C5D4, (uint64_t)v10);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
}

uint64_t sub_1B1F4AFE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t))
{
  uint64_t v7;
  BOOL v8;
  uint64_t v13;
  int *v15;
  uint64_t v16;
  unint64_t v17;
  __int16 v18;

  if (a2)
    v7 = a2;
  else
    v7 = 0xFFFFFFFFLL;
  v8 = (_DWORD)v7 == -1 && HIDWORD(a2) == 0;
  if (!v8
    && (v7 & 0x80000000) == 0
    && *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v7
    && ((v13 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries), HIDWORD(a2) == -1)
     || *(_DWORD *)(v13 + 12 * (int)v7 + 8) == HIDWORD(a2)))
  {
    v15 = (int *)(v13 + 12 * (int)v7);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 136) + 8 * *v15 + 32);
    v17 = a2 & 0xFFFFFFFF00000000 | v7;
    v18 = *((_WORD *)v15 + 2);
    swift_retain();
    swift_bridgeObjectRetain();
    sub_1B1FE68B8(v16, v18, 24, a5, a1, v17, a3, a4, a6);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_retain();
  }
  return swift_release();
}

uint64_t sub_1B1F4B120(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t), uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2)
    v8 = a2;
  else
    v8 = 0xFFFFFFFFLL;
  if (((_DWORD)v8 != -1 || HIDWORD(a2) != 0) && (v8 & 0x80000000) == 0)
  {
    v10 = result;
    if (*(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v8)
    {
      v17 = *(_QWORD *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (HIDWORD(a2) == -1 || *(_DWORD *)(v17 + 12 * (int)v8 + 8) == HIDWORD(a2))
      {
        v18 = (int *)(v17 + 12 * (int)v8);
        v21 = *(_QWORD *)(*(_QWORD *)(result + 136) + 8 * *v18 + 32);
        v19 = a2 & 0xFFFFFFFF00000000 | v8;
        v20 = *((_WORD *)v18 + 2);
        swift_retain();
        swift_bridgeObjectRetain();
        sub_1B1FE6950(v21, v20, 24, a5, 0, a6, 0, a7, a8, v10, v19, a3, a4);
        swift_release();
        return swift_bridgeObjectRelease();
      }
    }
  }
  return result;
}

_QWORD *sub_1B1F4B254(char a1, uint64_t a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;
  _QWORD v9[12];
  _OWORD v10[12];
  _OWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v3 = a3;
  if ((a1 & 1) != 0)
    return (_QWORD *)sub_1B1DAB630(a3);
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v13 = qword_1ED4D09F8;
  v14 = 0;
  v15 = 2;
  v16 = 0;
  v17 = 2;
  v18 = 0;
  swift_retain();
  sub_1B1E3D7C4(1, (uint64_t)v7);
  swift_release();
  v11[0] = v7[0];
  v11[1] = v7[1];
  v12 = v8;
  swift_retain();
  sub_1B1DAAF44((uint64_t)v11, v3);
  sub_1B19ED720((uint64_t)v7);
  if (dword_1EEFD58F0 == v3)
    v6 = 0;
  else
    v6 = v3;
  sub_1B1E8FCE4(a2, (uint64_t)v11, v6 | ((unint64_t)(dword_1EEFD58F0 == v3) << 33), v9);
  sub_1B1A18378((uint64_t)v9, (uint64_t)v10, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (!*(_QWORD *)&v10[0])
    return (_QWORD *)sub_1B19ED720((uint64_t)v7);
  v10[8] = v10[2];
  v10[9] = v10[3];
  v10[10] = v10[4];
  v10[11] = v10[5];
  v10[6] = v10[0];
  v10[7] = v10[1];
  sub_1B1BEB5D8(0);
  sub_1B19ED720((uint64_t)v7);
  return sub_1B1A086DC(v9, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B19ED798);
}

void sub_1B1F4B3F8(_QWORD *a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  id v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;

  v4 = a1[2];
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return;
  }
  v7 = a1[4];
  v8 = a1[5];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)*a3;
  v10 = sub_1B1DC3CA4(v7);
  v12 = v11;
  v13 = v9[2];
  v14 = v9[3];
  v15 = v13 + ((v11 & 1) == 0);
  swift_bridgeObjectRetain();
  if (v14 >= v15)
  {
    if ((a2 & 1) != 0)
    {
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_1B1EB1DEC();
      if ((v12 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v20 = (_QWORD *)*a3;
    *(_QWORD *)(*a3 + 8 * (v10 >> 6) + 64) |= 1 << v10;
    v21 = 8 * v10;
    *(_QWORD *)(v20[6] + v21) = v7;
    *(_QWORD *)(v20[7] + v21) = v8;
    ++v20[2];
    v22 = v4 - 1;
    if (v4 == 1)
    {
LABEL_19:
      swift_bridgeObjectRelease_n();
      return;
    }
    v23 = a1 + 7;
    while (1)
    {
      v24 = *(v23 - 1);
      v25 = *v23;
      v26 = (_QWORD *)*a3;
      v27 = sub_1B1DC3CA4(v24);
      v29 = v28;
      v30 = v26[3];
      v31 = v26[2] + ((v28 & 1) == 0);
      swift_bridgeObjectRetain();
      if (v30 < v31)
      {
        sub_1B1EA1DF4(v31, 1);
        v32 = sub_1B1DC3CA4(v24);
        if ((v29 & 1) != (v33 & 1))
          goto LABEL_20;
        v27 = v32;
      }
      if ((v29 & 1) != 0)
        goto LABEL_9;
      v34 = (_QWORD *)*a3;
      *(_QWORD *)(*a3 + 8 * (v27 >> 6) + 64) |= 1 << v27;
      v35 = 8 * v27;
      *(_QWORD *)(v34[6] + v35) = v24;
      *(_QWORD *)(v34[7] + v35) = v25;
      ++v34[2];
      v23 += 2;
      if (!--v22)
        goto LABEL_19;
    }
  }
  sub_1B1EA1DF4(v15, a2 & 1);
  v16 = sub_1B1DC3CA4(v7);
  if ((v12 & 1) == (v17 & 1))
  {
    v10 = v16;
    if ((v12 & 1) == 0)
      goto LABEL_12;
LABEL_9:
    v18 = (void *)swift_allocError();
    swift_willThrow();
    v19 = v18;
    sub_1B1A025A0(0, (unint64_t *)&qword_1ED4BB030);
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();

      return;
    }
    goto LABEL_21;
  }
LABEL_20:
  sub_1B2229FC4();
  __break(1u);
LABEL_21:
  sub_1B2229430();
  sub_1B2228890();
  sub_1B22295EC();
  sub_1B2228890();
  sub_1B2229688();
  __break(1u);
}

void sub_1B1F4B760(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F4B7E0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;

  v20 = v9;
  LOWORD(v21) = v5;
  BYTE2(v21) = BYTE2(v5);
  HIBYTE(v21) = BYTE3(v5);
  v22 = BYTE4(v5);
  v23 = BYTE5(v5);
  v24 = BYTE6(v5);
  sub_1B1F4AC58((uint64_t)&v20, (uint64_t)&v20 + BYTE6(v5), a3, a4, a5, v11, v8, v10, v6);
  v12 = v20;
  v13 = v21;
  v14 = v22;
  v15 = v23;
  v16 = v24;
  if (v19)
  {
    swift_bridgeObjectRelease();
    result = swift_release();
    *v7 = v12;
    v7[1] = (v15 << 40) | (v14 << 32) | (v16 << 48) | v13;
  }
  else
  {
    v18 = ((unint64_t)v23 << 40) | ((unint64_t)v22 << 32) | ((unint64_t)v24 << 48) | v21;
    *v7 = v20;
    v7[1] = v18;
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

void sub_1B1F4BB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (sub_1B2227E4C())
    sub_1B2227E70();
  sub_1B2227E64();
  __asm { BR              X10 }
}

uint64_t sub_1B1F4BBD4()
{
  unint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, _QWORD);
  uint64_t v3;

  v2(v3, BYTE6(v0));
  return sub_1B1A0DADC(v1, v0);
}

uint64_t sub_1B1F4BC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v7 = 0;
  if (a1)
    v8 = a1;
  else
    v8 = 0xFFFFFFFFLL;
  if ((_DWORD)v8 != -1 || HIDWORD(a1) != 0)
  {
    v7 = 0;
    if ((v8 & 0x80000000) == 0 && *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > (int)v8)
    {
      v14 = *(_QWORD *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if ((HIDWORD(a1) == -1 || *(_DWORD *)(v14 + 12 * (int)v8 + 8) == HIDWORD(a1))
        && (v15 = (int *)(v14 + 12 * (int)v8),
            v16 = *(_QWORD *)(*(_QWORD *)(v5 + 136) + 8 * *v15 + 32),
            v17 = *((_WORD *)v15 + 2),
            swift_bridgeObjectRetain(),
            v18 = sub_1B1FE6780(v16, v17, 24, a4, a5),
            swift_bridgeObjectRelease(),
            v18 >= 2))
      {
        type metadata accessor for BindingPropertyDescription();
        v20 = swift_dynamicCastClass();
        if (v20)
        {
          v21 = v20;
          v22 = a1 & 0xFFFFFFFF00000000 | v8;
          if (a3)
          {
            v23 = a3;
          }
          else
          {
            a2 = sub_1B1FF35D8(v22);
            v23 = v24;
          }
          swift_bridgeObjectRetain();
          v7 = sub_1B1F436A4(v22, a2, v23, v21);
          swift_bridgeObjectRelease();
          sub_1B1AE81C8(v18);
        }
        else
        {
          sub_1B1AE81C8(v18);
          return 0;
        }
      }
      else
      {
        return 0;
      }
    }
  }
  return v7;
}

uint64_t sub_1B1F4BE08(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  int64_t v24;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v4 = a1;
    v27 = MEMORY[0x1E0DEE9D8];
    sub_1B202B174(0, v2, 0);
    v3 = v27;
    v5 = sub_1B1C0754C(v4);
    v6 = 0;
    v26 = v4 + 64;
    v23 = v4 + 88;
    v24 = v2;
    do
    {
      v8 = *(_QWORD *)(v4 + 48);
      v9 = v4;
      v10 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
      v11 = *(_QWORD *)(v8 + 8 * v5);
      swift_bridgeObjectRetain();
      v12 = a2(v11, v10);
      v14 = v13;
      swift_bridgeObjectRelease();
      v16 = *(_QWORD *)(v27 + 16);
      v15 = *(_QWORD *)(v27 + 24);
      if (v16 >= v15 >> 1)
        sub_1B202B174(v15 > 1, v16 + 1, 1);
      *(_QWORD *)(v27 + 16) = v16 + 1;
      v17 = v27 + 16 * v16;
      *(_QWORD *)(v17 + 32) = v12;
      *(_QWORD *)(v17 + 40) = v14;
      v18 = v5 >> 6;
      if ((*(_QWORD *)(v26 + 8 * (v5 >> 6)) & (-2 << v5)) != 0)
      {
        v5 = __clz(__rbit64(*(_QWORD *)(v26 + 8 * (v5 >> 6)) & (-2 << v5))) | v5 & 0xFFFFFFFFFFFFFFC0;
        v7 = v24;
        v4 = v9;
      }
      else
      {
        v4 = v9;
        v5 = 1 << *(_BYTE *)(v9 + 32);
        v19 = v18 + 1;
        v20 = (v5 + 63) >> 6;
        v7 = v24;
        if (v18 + 1 < v20)
        {
          v21 = *(_QWORD *)(v26 + 8 * v19);
          if (!v21)
          {
            v19 = v18 + 2;
            if (v18 + 2 >= v20)
              goto LABEL_4;
            v21 = *(_QWORD *)(v26 + 8 * v19);
            if (!v21)
            {
              while (v20 - 3 != v18)
              {
                v21 = *(_QWORD *)(v23 + 8 * v18++);
                if (v21)
                {
                  v19 = v18 + 2;
                  goto LABEL_10;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_10:
          v5 = __clz(__rbit64(v21)) + (v19 << 6);
        }
      }
LABEL_4:
      ++v6;
    }
    while (v6 != v7);
  }
  return v3;
}

uint64_t sub_1B1F4BFF0()
{
  uint64_t *v0;

  return sub_1B1F4AF44(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1B1F4C010()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F4C020@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = MEMORY[0x1B5E240CC](*a1 + OBJC_IVAR____TtC3VFX9VFXEffect_scene);
  *a2 = result;
  return result;
}

uint64_t sub_1B1F4C054()
{
  return swift_unknownObjectWeakAssign();
}

uint64_t sub_1B1F4C070@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*a1 + OBJC_IVAR____TtC3VFX9VFXEffect_delegate);
  return swift_unknownObjectRetain();
}

uint64_t sub_1B1F4C088(_QWORD *a1, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX9VFXEffect_delegate) = *a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

_QWORD *sub_1B1F4C0C0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *(_QWORD *)(*result + OBJC_IVAR____TtC3VFX9VFXEffect_version);
  return result;
}

_QWORD *sub_1B1F4C0D8(_QWORD *result, _QWORD *a2)
{
  *(_QWORD *)(*a2 + OBJC_IVAR____TtC3VFX9VFXEffect_version) = *result;
  return result;
}

void sub_1B1F4C0F0(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1B1F4C104@<X0>(_QWORD *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *(_BYTE *)(*result + OBJC_IVAR____TtC3VFX9VFXEffect__tombstoned);
  return result;
}

uint64_t sub_1B1F4C120()
{
  return type metadata accessor for VFXEffect();
}

uint64_t method lookup function for VFXEffect()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VFXEffect.rootObjectID.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x128))();
}

uint64_t dispatch thunk of VFXEffect.scene.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x140))();
}

uint64_t dispatch thunk of VFXEffect.delegate.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x158))();
}

uint64_t dispatch thunk of VFXEffect.delegate.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VFXEffect.delegate.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x168))();
}

uint64_t dispatch thunk of VFXEffect.version.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x188))();
}

uint64_t dispatch thunk of VFXEffect.onEffectRestart.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of VFXEffect.restart()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VFXEffect.allowRemoteEdition.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VFXEffect.allowRemoteEdition.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VFXEffect.allowRemoteEdition.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of VFXEffect.binding(of:named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VFXEffect.binding(with:named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VFXEffect.firstBinding(named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VFXEffect.bindings.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VFXEffect.parameter(of:named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x238))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x248))();
}

uint64_t dispatch thunk of VFXEffect.setParameter(of:named:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x240))();
}

{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x250))();
}

uint64_t dispatch thunk of VFXEffect.lookupObjectID(byName:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x258))();
}

uint64_t dispatch thunk of VFXEffect._objc_lookupObjectID(byName:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x260))();
}

uint64_t dispatch thunk of VFXEffect.parameter(of:named:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x268))();
}

uint64_t dispatch thunk of VFXEffect.parameter(of:named:type:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x270))();
}

uint64_t dispatch thunk of VFXEffect.setParameter(of:named:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x278))();
}

uint64_t dispatch thunk of VFXEffect.setParameter(of:named:type:size:with:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of VFXEffect.withPointerToParameter(of:named:block:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of VFXEffect.setEnabled(_:enabled:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of VFXEffect.isEnabled(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of VFXEffect.fetchClientTextureID(named:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of VFXEffect.setClientTexture(id:texture:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of VFXEffect.isEnabled.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of VFXEffect.isEnabled.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D0))();
}

uint64_t dispatch thunk of VFXEffect.isEnabled.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x2D8))();
}

uint64_t dispatch thunk of VFXEffect.isTombstoned.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x308))();
}

uint64_t dispatch thunk of VFXEffect.isTombstoned.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x310))();
}

uint64_t dispatch thunk of VFXEffect.isTombstoned.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x318))();
}

uint64_t dispatch thunk of VFXEffect.cameras.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x320))();
}

uint64_t dispatch thunk of VFXEffect.allCameraNamed(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x328))();
}

uint64_t dispatch thunk of VFXEffect.dump()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x330))();
}

_QWORD *sub_1B1F4C594(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1D1E59C(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1F4C5B0()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F4C5C0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_1B1F4C5D4()
{
  return sub_1B1F4C894();
}

uint64_t sub_1B1F4C5E8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1F4C61C()
{
  swift_unknownObjectUnownedDestroy();
  return swift_deallocObject();
}

void sub_1B1F4C640()
{
  sub_1B1F44AD8();
}

uint64_t sub_1B1F4C648()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1F4C66C(unint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
    v4 = sub_1B22296AC();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
    {
LABEL_3:
      v5 = 0;
      while (1)
      {
        if ((a1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x1B5E21018](v5, a1);
        }
        else
        {
          v6 = *(_QWORD *)(a1 + 32 + 8 * v5);
          swift_retain();
        }
        v7 = *a2;
        if ((unint64_t)*a2 >> 62)
        {
          swift_bridgeObjectRetain_n();
          v8 = sub_1B22296AC();
          if (!v8)
            goto LABEL_4;
        }
        else
        {
          v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain_n();
          if (!v8)
            goto LABEL_4;
        }
        if ((v7 & 0xC000000000000001) != 0)
        {
          v13 = MEMORY[0x1B5E21018](0, v7);
          swift_unknownObjectRelease();
          if (v13 == v6)
            goto LABEL_26;
          if (v8 != 1)
          {
            v10 = 1;
            do
            {
              v12 = v10;
              v14 = MEMORY[0x1B5E21018]();
              swift_unknownObjectRelease();
              if (v14 == v6)
                goto LABEL_26;
              v10 = v12 + 1;
            }
            while (v8 != v12 + 1);
          }
        }
        else
        {
          if (*(_QWORD *)(v7 + 32) == v6)
            goto LABEL_26;
          if (v8 != 1)
          {
            v9 = 0;
            while (*(_QWORD *)(v7 + 8 * v9 + 40) != v6)
            {
              if (v8 - 1 == ++v9)
                goto LABEL_4;
            }
LABEL_26:
            swift_release();
            swift_bridgeObjectRelease_n();
            goto LABEL_5;
          }
        }
LABEL_4:
        swift_bridgeObjectRelease_n();
        sub_1B2229520();
        sub_1B2229568();
        sub_1B2229574();
        sub_1B2229538();
LABEL_5:
        if (++v5 == v4)
          return v15;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B1F4C894()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[4];

  v1 = v0[2];
  v2 = v0[3];
  sub_1B1A02864(v0[4], (uint64_t)v4);
  swift_bridgeObjectRetain();
  return sub_1B1CBB218(v4, v1, v2);
}

unint64_t sub_1B1F4C8FC(unint64_t a1, unint64_t a2)
{
  _QWORD *v2;

  return sub_1B1F49400(a1, a2, v2);
}

uint64_t sub_1B1F4C910()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v2 = sub_1B22296AC();
  if (!v2)
    goto LABEL_13;
LABEL_3:
  v3 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      v4 = MEMORY[0x1B5E21018](v3, v1);
    }
    else
    {
      v4 = *(_QWORD *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v4 + 152))(v8);
    v13 = v8[0];
    v14 = v8[1];
    sub_1B1B28C6C((uint64_t)&v13);
    v12 = v8[2];
    sub_1B1B28C6C((uint64_t)&v12);
    v11 = v8[3];
    sub_1B1B28C6C((uint64_t)&v11);
    v10 = v8[4];
    sub_1B1B28C6C((uint64_t)&v10);
    v9 = v8[5];
    sub_1B1B28C6C((uint64_t)&v9);
    v5 = *(_QWORD *)(v14 + 16);
    sub_1B1B28C6C((uint64_t)&v14);
    if (v5)
    {
      swift_release();
    }
    else
    {
      sub_1B2229520();
      sub_1B2229568();
      sub_1B2229574();
      sub_1B2229538();
    }
    ++v3;
  }
  while (v2 != v3);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t type metadata accessor for Graph()
{
  return objc_opt_self();
}

uint64_t sub_1B1F4CAD0()
{
  uint64_t *v0;

  return sub_1B1BBAA64(*v0);
}

__n128 initializeWithCopy for Clock(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 93) = *(_QWORD *)((char *)a2 + 93);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for Clock(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 101))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 80);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Clock(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 100) = 0;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 101) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 101) = 0;
    if (a2)
      *(_BYTE *)(result + 80) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for Clock()
{
  return &type metadata for Clock;
}

void sub_1B1F4CBCC()
{
  uint64_t v0;
  uint64_t v1;
  float v2;

  v1 = *(_QWORD *)(v0 + 88);
  if (v1 >= 240)
    v1 = 240;
  if (v1 <= 15)
    v1 = 15;
  v2 = 1.0 / (double)v1;
  *(float *)(v0 + 68) = v2;
  *(_BYTE *)(v0 + 98) = 0;
  ++*(_QWORD *)v0;
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_QWORD *)(v0 + 24) = 0;
  *(CFTimeInterval *)(v0 + 32) = CACurrentMediaTime();
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_DWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 72) = 1;
}

void sub_1B1F4CC3C(double a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  double v6;
  float v7;
  double v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_BYTE *)(v1 + 80) == 1)
  {
    v2 = *(_QWORD *)(v1 + 88);
    if (v2 >= 240)
      v2 = 240;
    if (v2 <= 15)
      v2 = 15;
    v3 = 1.0 / (double)v2;
    v4 = *(double *)(v1 + 56) + a1;
    v5 = (uint64_t)(v4 / v3);
    *(_QWORD *)(v1 + 72) = v5;
    v6 = v3 * (double)v5;
    *(double *)(v1 + 56) = v4 - v6;
    if (v5 <= 0)
    {
      *(_QWORD *)(v1 + 72) = 1;
      *(_DWORD *)(v1 + 64) = 0;
    }
    else
    {
      v7 = v3;
      *(float *)(v1 + 64) = v7;
      v8 = v3 + *(double *)(v1 + 48);
      *(double *)(v1 + 40) = v6 + *(double *)(v1 + 40);
      *(double *)(v1 + 48) = v8;
    }
  }
  else
  {
    v9 = 0.0666666667;
    if (a1 <= 0.0666666667)
      v9 = a1;
    v10 = v9;
    *(float *)(v1 + 64) = v10;
    *(double *)(v1 + 48) = *(double *)(v1 + 48) + a1;
    *(_QWORD *)(v1 + 72) = 1;
  }
  v11 = *(_QWORD *)(v1 + 8) + 1;
  v12 = *(_QWORD *)(v1 + 24) + 1;
  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = v12;
  *(_QWORD *)(v1 + 8) = v11;
}

void sub_1B1F4CD18(float a1)
{
  uint64_t v1;
  double v3;
  unsigned __int8 *v4;
  _BYTE *v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  int v10;

  v3 = CACurrentMediaTime() - *(double *)(v1 + 32);
  if (*(_BYTE *)(v1 + 99) == 1)
  {
    *(_BYTE *)(v1 + 96) = 1;
    v4 = (unsigned __int8 *)(v1 + 96);
    *(_BYTE *)(v1 + 100) = 1;
    *(_WORD *)(v1 + 98) = 0;
    v5 = (_BYTE *)(v1 + 98);
    v6 = *(_QWORD *)(v1 + 88);
    if (v6 >= 240)
      v6 = 240;
    if (v6 <= 15)
      v6 = 15;
    v7 = 1.0 / (double)v6;
    *(float *)(v1 + 68) = v7;
LABEL_10:
    if (*v5 == 1)
      v8 = (v3 - *(double *)(v1 + 40)) * a1;
    else
      v8 = *(float *)(v1 + 68);
    goto LABEL_13;
  }
  if (*(_BYTE *)(v1 + 100) == 1)
  {
    *(_BYTE *)(v1 + 96) = 0;
    v4 = (unsigned __int8 *)(v1 + 96);
    *(_BYTE *)(v1 + 100) = 0;
    v5 = (_BYTE *)(v1 + 98);
    v8 = 0.0;
    goto LABEL_13;
  }
  v4 = (unsigned __int8 *)(v1 + 96);
  v5 = (_BYTE *)(v1 + 98);
  v8 = 0.0;
  if (*(_BYTE *)(v1 + 96) == 1)
    goto LABEL_10;
LABEL_13:
  sub_1B1F4CC3C(v8);
  v9 = *(_QWORD *)(v1 + 72);
  if (v9 >= 2)
    v9 = 2;
  *(_QWORD *)(v1 + 72) = v9;
  if (*(_BYTE *)(v1 + 80) == 1)
    *(float *)(v1 + 64) = *(float *)(v1 + 64) * a1;
  else
    *(double *)(v1 + 40) = v3;
  v10 = *v4;
  if (v10 == 1)
    *(float *)(v1 + 68) = v8;
  else
    LOBYTE(v10) = 0;
  *v5 = v10;
}

uint64_t sub_1B1F4CE68(uint64_t a1)
{
  return sub_1B1F4CEA0(a1, MEMORY[0x1E0DEA520], MEMORY[0x1E0DEA528], (void (*)(uint64_t *, _QWORD))sub_1B1B8AA74);
}

uint64_t sub_1B1F4CE84(uint64_t a1)
{
  return sub_1B1F4CEA0(a1, MEMORY[0x1E0DEB418], MEMORY[0x1E0DEB428], (void (*)(uint64_t *, _QWORD))sub_1B1B8A534);
}

uint64_t sub_1B1F4CEA0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t *, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v6 = 0;
  v18 = sub_1B2228CD4();
  v7 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a1 + 64);
  v11 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v13 = v12 | (v6 << 6);
      goto LABEL_5;
    }
    v14 = v6 + 1;
    if (v6 + 1 >= v11)
      goto LABEL_21;
    v15 = *(_QWORD *)(v7 + 8 * v14);
    if (!v15)
    {
      v14 = v6 + 2;
      if (v6 + 2 >= v11)
        goto LABEL_21;
      v15 = *(_QWORD *)(v7 + 8 * v14);
      if (!v15)
      {
        v14 = v6 + 3;
        if (v6 + 3 >= v11)
          goto LABEL_21;
        v15 = *(_QWORD *)(v7 + 8 * v14);
        if (!v15)
        {
          v14 = v6 + 4;
          if (v6 + 4 >= v11)
            goto LABEL_21;
          v15 = *(_QWORD *)(v7 + 8 * v14);
          if (!v15)
          {
            v14 = v6 + 5;
            if (v6 + 5 >= v11)
              goto LABEL_21;
            v15 = *(_QWORD *)(v7 + 8 * v14);
            if (!v15)
              break;
          }
        }
      }
    }
LABEL_20:
    v10 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v14 << 6);
    v6 = v14;
LABEL_5:
    a4(&v17, *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13));
  }
  while (v11 - 6 != v6)
  {
    v15 = *(_QWORD *)(a1 + 112 + 8 * v6++);
    if (v15)
    {
      v14 = v6 + 5;
      goto LABEL_20;
    }
  }
LABEL_21:
  swift_release();
  return v18;
}

id VFXREDrawCall.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t sub_1B1F4D024()
{
  void *v0;
  uint64_t v2;
  _QWORD v3[2];

  v3[1] = *MEMORY[0x1E0C80C00];
  v2 = 0;
  v3[0] = 0;
  objc_msgSend(v0, sel_viewports::, v3, &v2);
  return v2;
}

void sub_1B1F4D088(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unsigned int v13;
  unsigned int v14;
  char v15;
  unsigned int v16;
  unsigned int v17;
  id v18;
  id v19;
  id v20;
  id v21;

  v5 = objc_msgSend(a1, sel_frontFaceTest);
  if (v5)
  {
    v6 = v5;
    v21 = objc_msgSend(v5, sel_stencilCompareFunction);
    v20 = objc_msgSend(v6, sel_stencilFailureOperation);
    v19 = objc_msgSend(v6, sel_depthFailureOperation);
    v18 = objc_msgSend(v6, sel_depthStencilPassOperation);
    v17 = objc_msgSend(v6, sel_readMask);
    v16 = objc_msgSend(v6, sel_writeMask);

  }
  else
  {
    v20 = *(id *)(v2 + 24);
    v21 = *(id *)(v2 + 16);
    v18 = *(id *)(v2 + 40);
    v19 = *(id *)(v2 + 32);
    v16 = *(_DWORD *)(v2 + 52);
    v17 = *(_DWORD *)(v2 + 48);
  }
  v7 = objc_msgSend(a1, sel_backFaceTest);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, sel_stencilCompareFunction);
    v10 = objc_msgSend(v8, (SEL)&protocolRef_VFXAnimationEventJSExport + 7);
    v11 = objc_msgSend(v8, (SEL)&selRef_setResolveDepthPlane_);
    v12 = objc_msgSend(v8, (SEL)&protocolRef_NSObject + 6);
    v13 = objc_msgSend(v8, (SEL)&selRef_reverseZ + 3);
    v14 = objc_msgSend(v8, (SEL)&selRef_keyPathsForValuesAffectingValueForKey_);

  }
  else
  {
    v9 = *(id *)(v2 + 56);
    v10 = *(id *)(v2 + 64);
    v11 = *(id *)(v2 + 72);
    v12 = *(id *)(v2 + 80);
    v13 = *(_DWORD *)(v2 + 88);
    v14 = *(_DWORD *)(v2 + 92);
  }
  v15 = *(_BYTE *)(v2 + 8);
  *(_QWORD *)a2 = *(_QWORD *)v2;
  *(_BYTE *)(a2 + 8) = v15;
  *(_QWORD *)(a2 + 16) = v21;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v19;
  *(_QWORD *)(a2 + 40) = v18;
  *(_DWORD *)(a2 + 48) = v17;
  *(_DWORD *)(a2 + 52) = v16;
  *(_QWORD *)(a2 + 56) = v9;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = v11;
  *(_QWORD *)(a2 + 80) = v12;
  *(_DWORD *)(a2 + 88) = v13;
  *(_DWORD *)(a2 + 92) = v14;
}

BOOL VFXREVersionCheckBridgeVersion(unint64_t a1)
{
  qword_1EEF61320 = a1;
  return a1 > 0x2540BE402;
}

Swift::Bool __swiftcall VFXREVersionCheckBridgeVersion(_:_:)(Swift::UInt64 a1, Swift::UInt64 a2)
{
  qword_1EEF61320 = a1;
  return a1 > 0x2540BE402;
}

_QWORD *sub_1B1F4D2C8()
{
  _QWORD *result;

  result = sub_1B1B7DF34((uint64_t)&unk_1E639A4B8);
  qword_1EEFD56A8 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1F4D2EC()
{
  _QWORD *result;

  result = sub_1B1B7DF34((uint64_t)&unk_1E639A438);
  qword_1EEFD56B0 = (uint64_t)result;
  return result;
}

id sub_1B1F4D310(unsigned __int8 a1, uint64_t a2, uint64_t a3, void *a4)
{
  char v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v13;
  _QWORD v14[2];

  v14[1] = *MEMORY[0x1E0C80C00];
  v13 = 0;
  v14[0] = 0;
  if (qword_1EEF573C0 != -1)
    swift_once();
  if (!*(_QWORD *)(qword_1EEFD56B0 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain();
  sub_1B1DC3B00(a2, a3);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    swift_bridgeObjectRetain();
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  v9 = a1;
  v10 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(a4, sel_buffer__::, v9, v10, v14, &v13);

  return v11;
}

id VFXREBindingMeshData.init()()
{
  char *v0;
  objc_super v2;

  *(_QWORD *)&v0[OBJC_IVAR___VFXREBindingMeshData_buffer] = 0;
  *(_DWORD *)&v0[OBJC_IVAR___VFXREBindingMeshData_length] = 0;
  *(_QWORD *)&v0[OBJC_IVAR___VFXREBindingMeshData_format] = 0;
  *(_WORD *)&v0[OBJC_IVAR___VFXREBindingMeshData_offset] = 0;
  *(_WORD *)&v0[OBJC_IVAR___VFXREBindingMeshData_stride] = 0;
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXREBindingMeshData();
  return objc_msgSendSuper2(&v2, sel_init);
}

uint64_t type metadata accessor for VFXREBindingMeshData()
{
  return objc_opt_self();
}

id VFXREBindingMeshData.__deallocating_deinit()
{
  return sub_1B1D567F4(type metadata accessor for VFXREBindingMeshData);
}

double sub_1B1F4D658@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_QWORD *)(a1 + 31) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0xE000000000000000;
  return result;
}

uint64_t sub_1B1F4D670()
{
  sub_1B222A06C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F4D6B4()
{
  return sub_1B222A09C();
}

uint64_t sub_1B1F4D6DC()
{
  sub_1B222A06C();
  sub_1B222A09C();
  return sub_1B222A0C0();
}

unint64_t sub_1B1F4D71C@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_1B1F4EA5C(*a1);
  *(_DWORD *)a2 = result;
  *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  return result;
}

void sub_1B1F4D7C8(void *a1, int a2, uint64_t a3, void *aBlock)
{
  void *v6;
  id v7;

  v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  v7 = a1;
  sub_1B1F4EB24(a3, (uint64_t)v6);
  _Block_release(v6);
  _Block_release(v6);

}

uint64_t sub_1B1F4D8E0()
{
  uint64_t v0;
  uint64_t result;

  result = *(_QWORD *)(*(_QWORD *)(v0 + OBJC_IVAR___VFXREDrawCall_drawCall) + 32);
  if (result)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t sub_1B1F4DA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v5(a2, a3);
  swift_release();
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1F4DC10(uint64_t a1, uint64_t a2, uint64_t (*a3)(__n128, __n128))
{
  return a3(*(__n128 *)(a1 + OBJC_IVAR___VFXREDrawCall_aabb), *(__n128 *)(a1 + OBJC_IVAR___VFXREDrawCall_aabb + 16));
}

id sub_1B1F4DC44()
{
  void *v0;

  swift_bridgeObjectRetain();
  v0 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B1F4DC98(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  v6 = sub_1B222874C();
  v7 = (uint64_t *)(a1 + *a4);
  *v7 = v6;
  v7[1] = v8;
  return swift_bridgeObjectRelease();
}

id VFXREDrawCall.init()()
{
  _BYTE *v0;
  char *v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  objc_super v11;

  *(_QWORD *)&v0[OBJC_IVAR___VFXREDrawCall_drawCall] = 0;
  v1 = &v0[OBJC_IVAR___VFXREDrawCall_aabb];
  *(_OWORD *)v1 = xmmword_1B2244E20;
  *((_QWORD *)v1 + 2) = 0;
  *((_QWORD *)v1 + 3) = 0;
  v0[OBJC_IVAR___VFXREDrawCall__isDepthOnly] = 0;
  v0[OBJC_IVAR___VFXREDrawCall__writesColor] = 0;
  v0[OBJC_IVAR___VFXREDrawCall__writesSeparateDepth] = 0;
  v0[OBJC_IVAR___VFXREDrawCall__needsLinearDepth] = 0;
  v0[OBJC_IVAR___VFXREDrawCall__drawsForBlur] = 0;
  v0[OBJC_IVAR___VFXREDrawCall__isAdditive] = 0;
  *(_DWORD *)&v0[OBJC_IVAR___VFXREDrawCall__materialType] = 0;
  v2 = OBJC_IVAR___VFXREDrawCall_reProvidedBuffers;
  v3 = v0;
  v4 = sub_1B1F4E8C4((uint64_t)&unk_1E637DBC8);
  swift_arrayDestroy();
  *(_QWORD *)&v0[v2] = v4;
  v5 = OBJC_IVAR___VFXREDrawCall_reProvidedTextures;
  v6 = sub_1B1F4E8C4((uint64_t)&unk_1E637DB68);
  swift_arrayDestroy();
  *(_QWORD *)&v3[v5] = v6;
  v7 = &v3[OBJC_IVAR___VFXREDrawCall_handler];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v3[OBJC_IVAR___VFXREDrawCall_renderPassName];
  *v8 = 0;
  v8[1] = 0xE000000000000000;
  v3[OBJC_IVAR___VFXREDrawCall_renderPassIdentifier] = -1;
  v9 = &v3[OBJC_IVAR___VFXREDrawCall_emitterIdentifier];
  *v9 = 0;
  v9[1] = 0xE000000000000000;

  v11.receiver = v3;
  v11.super_class = (Class)type metadata accessor for VFXREDrawCall();
  return objc_msgSendSuper2(&v11, sel_init);
}

id VFXREDrawCall.__deallocating_deinit()
{
  return sub_1B1D567F4(type metadata accessor for VFXREDrawCall);
}

uint64_t *sub_1B1F4DF00(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float32x4_t *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  float32x4_t *v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  float32x4_t v58;
  int32x4_t v59;
  int v60;
  __int128 v61;
  __int128 v62;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  __int32 v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  __int128 *v83;
  uint64_t *v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t v88;
  __int32 v89;
  _OWORD v90[2];
  uint64_t v91;
  uint64_t v92[8];
  _OWORD v93[2];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _OWORD v100[2];
  uint64_t v101;
  _OWORD v102[2];
  uint64_t v103;
  _BYTE v104[40];
  uint64_t v105;
  int v106;
  char v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;

  v4 = v3;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v105 = qword_1ED4D09F8;
  v106 = 0;
  v107 = 2;
  v108 = 0;
  v109 = 2;
  v110 = 0;
  swift_retain();
  sub_1B1A173A8(1, 1, 1, (uint64_t)v90);
  swift_release();
  v102[0] = v90[0];
  v102[1] = v90[1];
  v103 = v91;
  v111 = a1;
  sub_1B1E8FCE4(a1, (uint64_t)v102, 0x200000000, v92);
  sub_1B19F66A0((uint64_t)v92, (uint64_t)v93, (unint64_t *)&qword_1ED4B7DE0);
  if (!*(_QWORD *)&v93[0])
    return (uint64_t *)sub_1B19ED720((uint64_t)v90);
  if (v99 > 0 && (v69 = v96) != 0)
  {
    v7 = v98[4];
    v8 = *(unsigned __int8 *)(v97 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v100[0] = v93[0];
    v100[1] = v93[1];
    v65 = v95;
    v66 = (uint64_t)(v98 + 6);
    v101 = v94;
    v88 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
    v85 = (_QWORD *)(a2 + OBJC_IVAR___VFXREDrawCall_renderPassName);
    v86 = OBJC_IVAR___VFXREDrawCall_drawCall;
    v84 = (uint64_t *)(a2 + OBJC_IVAR___VFXREDrawCall_handler);
    v83 = (__int128 *)(a2 + OBJC_IVAR___VFXREDrawCall_aabb);
    v81 = OBJC_IVAR___VFXREDrawCall__writesSeparateDepth;
    v82 = OBJC_IVAR___VFXREDrawCall__writesColor;
    v79 = OBJC_IVAR___VFXREDrawCall__needsLinearDepth;
    v80 = OBJC_IVAR___VFXREDrawCall__materialType;
    v77 = (_QWORD *)(a2 + OBJC_IVAR___VFXREDrawCall_emitterIdentifier);
    v78 = OBJC_IVAR___VFXREDrawCall__isAdditive;
    v74 = v98;
    v64 = v98 + 8;
    v76 = OBJC_IVAR___VFXREDrawCall_renderPassIdentifier;
    swift_retain();
    swift_retain();
    swift_retain();
    v9 = 0;
    v67 = v8;
    v68 = v7;
    do
    {
      v73 = v9;
      v10 = (unsigned int *)(v65 + 48 * v9);
      v11 = *v10;
      v70 = v10[1];
      v71 = v4;
      v12 = (uint64_t *)*((_QWORD *)v10 + 2);
      v13 = *((_QWORD *)v10 + 3);
      v14 = *((_QWORD *)v10 + 4);
      v15 = *((_QWORD *)v10 + 5);
      if (v8)
      {
        v16 = *(os_unfair_lock_s **)(v15 + 376);
        swift_retain();
        os_unfair_lock_lock(v16);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v7);
      sub_1B19F66A0(v66, (uint64_t)v104, &qword_1ED4B7FB0);
      v17 = v74[4];
      v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v74[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
      v74[7] = v18;
      v64[1] = 0;
      v64[2] = 0;
      *v64 = 0;
      swift_release();
      v19 = v15;
      v20 = sub_1B1A12038((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1E638BEB8, v12, v13, v14, (uint64_t)v74);
      v21 = sub_1B1A12038((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1E63C5FC8, v12, v13, v14, (uint64_t)v74);
      v72 = v19;
      v22 = sub_1B1A12038((uint64_t)&type metadata for VFXDrawCallHandler, (uint64_t)&off_1E63969B0, v12, v13, v14, (uint64_t)v74);
      if (v12)
      {
        v23 = v111;
        v24 = v88;
        if (v14)
        {
          v25 = (_QWORD *)(v22 + 48);
          v26 = (float32x4_t *)(v21 + 16);
          do
          {
            v29 = *(_QWORD *)(v23 + v24);
            if (v29)
            {
              v30 = *((_DWORD *)v25 - 4);
              v31 = v30 == 1;
              if (v30 == 2)
                v31 = 2;
              if (*(_QWORD *)(*(_QWORD *)(v29 + 792) + 8 * v31 + 32) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v20 + 264)
                                                                                   + 16))
              {
                *(_QWORD *)(a2 + v86) = *(_QWORD *)v20;
                swift_retain();
                swift_retain();
                swift_release();
                if (*(v25 - 5))
                {
                  v32 = *(v25 - 6);
                  v33 = *(v25 - 5);
                }
                else
                {
                  v32 = 0;
                  v33 = 0xE000000000000000;
                }
                *v85 = v32;
                v85[1] = v33;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v34 = *(v25 - 4);
                v35 = *(v25 - 3);
                v36 = *v84;
                *v84 = v34;
                v84[1] = v35;
                sub_1B19F8C48(v34);
                sub_1B19E5A18(v36);
                v37 = *v26;
                v37.i32[3] = v89;
                v38 = vcltzq_f32(v37);
                v39 = v38.i32[0];
                if (v38.i32[1] < v38.i32[0])
                  v39 = v38.i32[1];
                if (v38.i32[2] < v39)
                  v39 = v38.i32[2];
                v40 = xmmword_1B2244E20;
                v41 = xmmword_1B22685F0;
                if ((v39 & 0x80000000) == 0)
                {
                  v40 = (__int128)v26[-1];
                  v41 = (__int128)*v26;
                }
                *v83 = v40;
                v83[1] = v41;
                v27 = *((_BYTE *)v25 - 12);
                *(_BYTE *)(a2 + v82) = v27 ^ 1;
                *(_BYTE *)(a2 + v81) = v27;
                *(_DWORD *)(a2 + v80) = v30;
                *(_BYTE *)(a2 + v79) = *((_BYTE *)v25 - 11);
                *(_BYTE *)(a2 + v78) = *((_BYTE *)v25 - 10);
                *(_BYTE *)(a2 + v76) = -1;
                v28 = *v25;
                *v77 = *(v25 - 1);
                v77[1] = v28;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                a3(a2);
                swift_release();
                v23 = v111;
                v24 = v88;
              }
            }
            v20 += 8;
            v25 += 7;
            v26 += 2;
            --v14;
          }
          while (v14);
        }
      }
      else
      {
        v42 = v111;
        v43 = v88;
        if ((_DWORD)v11 != (_DWORD)v70)
        {
          v44 = v20 + 8 * v11;
          v45 = (_QWORD *)(v22 + 56 * v11 + 48);
          v46 = (float32x4_t *)(v21 + 32 * v11 + 16);
          v47 = v70 - v11;
          do
          {
            v50 = *(_QWORD *)(v42 + v43);
            if (v50)
            {
              v51 = *((_DWORD *)v45 - 4);
              v52 = v51 == 1;
              if (v51 == 2)
                v52 = 2;
              if (*(_QWORD *)(*(_QWORD *)(v50 + 792) + 8 * v52 + 32) == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v44 + 264)
                                                                                   + 16))
              {
                *(_QWORD *)(a2 + v86) = *(_QWORD *)v44;
                swift_retain();
                swift_retain();
                swift_release();
                if (*(v45 - 5))
                {
                  v53 = *(v45 - 6);
                  v54 = *(v45 - 5);
                }
                else
                {
                  v53 = 0;
                  v54 = 0xE000000000000000;
                }
                *v85 = v53;
                v85[1] = v54;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                v55 = *(v45 - 4);
                v56 = *(v45 - 3);
                v57 = *v84;
                *v84 = v55;
                v84[1] = v56;
                sub_1B19F8C48(v55);
                sub_1B19E5A18(v57);
                v58 = *v46;
                v58.i32[3] = v75;
                v59 = vcltzq_f32(v58);
                v60 = v59.i32[0];
                if (v59.i32[1] < v59.i32[0])
                  v60 = v59.i32[1];
                if (v59.i32[2] < v60)
                  v60 = v59.i32[2];
                v61 = xmmword_1B2244E20;
                v62 = xmmword_1B22685F0;
                if ((v60 & 0x80000000) == 0)
                {
                  v61 = (__int128)v46[-1];
                  v62 = (__int128)*v46;
                }
                *v83 = v61;
                v83[1] = v62;
                v48 = *((_BYTE *)v45 - 12);
                *(_BYTE *)(a2 + v82) = v48 ^ 1;
                *(_BYTE *)(a2 + v81) = v48;
                *(_DWORD *)(a2 + v80) = v51;
                *(_BYTE *)(a2 + v79) = *((_BYTE *)v45 - 11);
                *(_BYTE *)(a2 + v78) = *((_BYTE *)v45 - 10);
                *(_BYTE *)(a2 + v76) = -1;
                v49 = *v45;
                *v77 = *(v45 - 1);
                v77[1] = v49;
                swift_bridgeObjectRetain();
                swift_bridgeObjectRelease();
                a3(a2);
                swift_release();
                v42 = v111;
                v43 = v88;
              }
            }
            v44 += 8;
            v45 += 7;
            v46 += 2;
            --v47;
          }
          while (v47);
        }
      }
      sub_1B1F05D48(v74, (unsigned __int16 **)v100, (uint64_t)v104);
      v4 = v71;
      sub_1B1F03804((char *)v72);
      v7 = v68;
      ecs_stack_allocator_pop_snapshot(v68);
      v8 = v67;
      if ((v67 & 1) != 0)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v72 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v72 + 376));
      }
      swift_release();
      v9 = v73 + 1;
    }
    while (v73 + 1 != v69);
    sub_1B19ED720((uint64_t)v90);
    sub_1B19ED748(v92);
  }
  else
  {
    sub_1B19ED720((uint64_t)v90);
  }
  return sub_1B19ED748(v92);
}

void VFXREForEachDrawCall(uint64_t a1, void *a2, void *aBlock)
{
  void *v5;
  id v6;
  uint64_t v7;
  _QWORD v8[4];

  v5 = _Block_copy(aBlock);
  v8[2] = v5;
  v6 = a2;
  v7 = swift_retain_n();
  sub_1B1D9FCB8(v7, a1, v6, (void (*)(uint64_t))sub_1B1DCC1F0, (uint64_t)v8);
  swift_release();
  _Block_release(v5);

}

uint64_t forEachDrawCall(_:_:_:)(uint64_t a1, void *a2, void (*a3)(uint64_t), uint64_t a4)
{
  swift_retain_n();
  sub_1B1D9FCB8(a1, a1, a2, a3, a4);
  return swift_release();
}

uint64_t sub_1B1F4E79C(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  int *v4;
  void *v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unint64_t v9;
  void *v10[2];
  unsigned int v11;
  unsigned __int8 v12;
  uint64_t v13;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1A0293C();
  result = sub_1B2228CD4();
  v13 = result;
  if (v2)
  {
    v4 = (int *)(a1 + 48);
    do
    {
      v5 = (void *)*((_QWORD *)v4 - 2);
      v6 = (void *)*((_QWORD *)v4 - 1);
      v7 = *((unsigned __int8 *)v4 + 4);
      v8 = *v4;
      v4 += 6;
      v9 = v8 | (unint64_t)(v7 << 32);
      sub_1B1A026F0(v5, v6, v9);
      sub_1B1B8AB6C((uint64_t)v10, (unint64_t)v5, (unint64_t)v6, v9);
      sub_1B1A02724(v10[0], v10[1], v11 | ((unint64_t)v12 << 32));
      --v2;
    }
    while (v2);
    return v13;
  }
  return result;
}

uint64_t sub_1B1F4E850(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  int v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1B68ED0();
  result = sub_1B2228CD4();
  v6 = result;
  if (v2)
  {
    v4 = a1 + 36;
    do
    {
      sub_1B1B8B00C(&v5, *(_QWORD *)(v4 - 4));
      v4 += 8;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

uint64_t sub_1B1F4E8C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = sub_1B2228CD4();
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain();
      sub_1B1B8B368(&v7, v5, v6);
      swift_bridgeObjectRelease();
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t type metadata accessor for VFXREDrawCall()
{
  return objc_opt_self();
}

uint64_t method lookup function for VFXREBindingMeshData()
{
  return swift_lookUpClassMethod();
}

uint64_t method lookup function for VFXREDrawCall()
{
  return swift_lookUpClassMethod();
}

ValueMetadata *type metadata accessor for VFXMaterialType()
{
  return &type metadata for VFXMaterialType;
}

unint64_t sub_1B1F4E9A4()
{
  unint64_t result;

  result = qword_1EEF613C8;
  if (!qword_1EEF613C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A2FA0, &type metadata for VFXMaterialType);
    atomic_store(result, (unint64_t *)&qword_1EEF613C8);
  }
  return result;
}

uint64_t sub_1B1F4E9E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[2];
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 16);
  sub_1B1B99E24();
  result = sub_1B2228CD4();
  v6 = result;
  if (v2)
  {
    v4 = a1 + 33;
    do
    {
      sub_1B1B8BA78((uint64_t)v5, *(_WORD *)(v4 - 1));
      v4 += 2;
      --v2;
    }
    while (v2);
    return v6;
  }
  return result;
}

unint64_t sub_1B1F4EA5C(unsigned int a1)
{
  unsigned __int8 v1;
  uint64_t v2;

  v1 = 0;
  v2 = a1;
  switch(a1)
  {
    case 0u:
      v2 = 0;
      v1 = 0;
      break;
    case 1u:
      return v2 | ((unint64_t)v1 << 32);
    case 2u:
      v1 = 0;
      v2 = 2;
      break;
    case 3u:
      v1 = 0;
      v2 = 3;
      break;
    default:
      v2 = 0;
      v1 = 1;
      break;
  }
  return v2 | ((unint64_t)v1 << 32);
}

double sub_1B1F4EAC8(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vaddq_f32(a1, a2).u64[0];
  return result;
}

double sub_1B1F4EAD0(float32x4_t a1, float32x4_t a2)
{
  double result;

  *(_QWORD *)&result = vsubq_f32(a1, a2).u64[0];
  return result;
}

uint64_t sub_1B1F4EAD8()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1F4EAFC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_1B1F4EB24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;

  v4 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
  v5 = *(_QWORD *)(**(_QWORD **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues) + 32);
  swift_retain();
  ecs_stack_allocator_push_snapshot(v5);
  swift_getKeyPath();
  v6 = *(_QWORD *)(a1 + 176);
  swift_retain();
  swift_retain();
  v7 = sub_1B1F24528((uint64_t)&type metadata for LightsUniforms, (uint64_t)&off_1E637F8B8, v6);
  v9 = v8;
  v11 = v10;
  swift_release();
  swift_release_n();
  if (v7)
  {
    swift_unknownObjectRetain();
    v12 = (void *)sub_1B2228728();
    (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, v12, v7, v9, v11);
    swift_unknownObjectRelease_n();

  }
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(**(_QWORD **)(a1 + v4) + 32));
  return swift_release();
}

ValueMetadata *type metadata accessor for REExternalDataTable()
{
  return &type metadata for REExternalDataTable;
}

uint64_t destroy for VFXDrawCallHandler(uint64_t a1)
{
  swift_bridgeObjectRelease();
  if (*(_QWORD *)(a1 + 16))
    swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for VFXDrawCallHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = (_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v7;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *v6;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for VFXDrawCallHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v4;
      *(_QWORD *)(a1 + 24) = v6;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  swift_retain();
  swift_release();
LABEL_8:
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for VFXDrawCallHandler(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 16);
  if (!*(_QWORD *)(a1 + 16))
  {
    if (v5)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 16) = v5;
      *(_QWORD *)(a1 + 24) = v7;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  if (!v5)
  {
    swift_release();
    goto LABEL_7;
  }
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  swift_release();
LABEL_8:
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptDiagnostic(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ScriptDiagnostic(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for VFXDrawCallHandler()
{
  return &type metadata for VFXDrawCallHandler;
}

uint64_t sub_1B1F4EF68(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _OWORD *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  os_unfair_lock_s *v36;
  uint64_t v37;
  __int128 *v39;
  _OWORD *v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;

  v8 = *(_QWORD *)(a5 + 32);
  ecs_stack_allocator_push_snapshot(v8);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = 16 * v9;
  v11 = ecs_stack_allocator_allocate(v8, 16 * v9 + 48, 8);
  v12 = v11;
  *v11 = &type metadata for TextureFileAsset;
  v11[1] = &off_1E638AD98;
  v11[2] = &type metadata for TextureLoadPolicy;
  v11[3] = &off_1E6390318;
  v11[4] = &type metadata for TextureLoadingOptions;
  v11[5] = &off_1E63A6E90;
  if (!v9)
  {
    v20 = 3;
    goto LABEL_18;
  }
  if (v9 < 0x14
    || ((v13 = (unint64_t)(v11 + 6),
         v14 = 2 * (v9 - 1),
         v15 = (unint64_t)&v11[v14 + 6],
         v16 = (unint64_t)&v11[v14 + 7],
         v15 >= (unint64_t)(v11 + 6))
      ? (v17 = v16 >= (unint64_t)(v11 + 7))
      : (v17 = 0),
        v17 ? (v18 = (v9 - 1) >> 60 == 0) : (v18 = 0),
        !v18 || v13 < v10 + a1 + 32 && a1 + 32 < v13 + v10))
  {
    v19 = 0;
    v20 = 3;
LABEL_14:
    v21 = v9 - v19;
    v22 = (__int128 *)(a1 + 16 * v19 + 32);
    do
    {
      v23 = *v22++;
      *(_OWORD *)&v11[2 * v20++] = v23;
      --v21;
    }
    while (v21);
    goto LABEL_18;
  }
  v19 = v9 & 0x7FFFFFFFFFFFFFFCLL;
  v20 = v9 | 3;
  v39 = (__int128 *)(a1 + 64);
  v40 = v11 + 10;
  v41 = v9 & 0x7FFFFFFFFFFFFFFCLL;
  do
  {
    v43 = *(v39 - 2);
    v42 = *(v39 - 1);
    v45 = *v39;
    v44 = v39[1];
    v39 += 4;
    *(v40 - 2) = v43;
    *(v40 - 1) = v42;
    *v40 = v45;
    v40[1] = v44;
    v40 += 4;
    v41 -= 4;
  }
  while (v41);
  if (v9 != v19)
    goto LABEL_14;
LABEL_18:
  v24 = *(_QWORD *)(a5 + 16);
  v25 = v24 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  v26 = *(os_unfair_lock_s **)(v24 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v26);
  v27 = sub_1B1DAD870((uint64_t)v12, v20, MEMORY[0x1E0DEE9D8]);
  v29 = v28;
  v30 = sub_1B1DA8760(v27);
  if ((v31 & 1) != 0 || (v32 = sub_1B1DA87D4(v29, v30), v33 = v32, (v32 & 0x100000000) != 0))
  {
    v34 = sub_1B1DC9E90(v12, v20);
    v33 = sub_1B1DA8838(v27, v29, v34, MEMORY[0x1E0DEE9D8]);
    swift_release();
  }
  v35 = *(_QWORD *)(*(_QWORD *)(v24 + 80) + 8 * v33 + 32);
  v36 = *(os_unfair_lock_s **)(v25 + 24);
  swift_retain();
  os_unfair_lock_unlock(v36);
  swift_release();
  v37 = sub_1B1F0AE00(v35, 1, 1, a2 | ((HIDWORD(a2) & 1) << 32), a5, a3, a4);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(_QWORD *)(a5 + 32));
  return v37;
}

_QWORD *sub_1B1F4F1E0(void *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  id v36;
  unint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;

  if (!*(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer))
    return 0;
  swift_retain();
  v6 = objc_msgSend(a1, sel_mesh);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v8 = v6;
    v9 = objc_msgSend(v6, sel_meshElements);

    sub_1B1B9DAD4(0, &qword_1EEF613D0);
    v10 = sub_1B2228AB8();

  }
  else
  {
    v10 = MEMORY[0x1E0DEE9D8];
  }
  v43 = a1;
  if (!(v10 >> 62))
  {
    v12 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v12)
      goto LABEL_8;
LABEL_14:
    swift_bridgeObjectRelease();
    type metadata accessor for Mesh();
    v11 = (_QWORD *)swift_allocObject();
    v11[4] = v7;
    v11[5] = v7;
    v11[7] = 0;
    v11[8] = 0;
    swift_unknownObjectRetain();
    v16 = sub_1B1F53F5C(v43);
    v18 = v17;
    v11[2] = v16;
    v11[3] = v19;
    v20 = objc_msgSend(v43, sel_mesh);
    v21 = v20;
    if (!v20)
      goto LABEL_25;
    v22 = objc_msgSend(v20, sel_meshSourcesForSemantic_, CFSTR("kGeometrySourceSemanticPosition"));

    sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5CC88);
    v23 = sub_1B2228AB8();

    if (v23 >> 62)
    {
      swift_bridgeObjectRetain();
      v29 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v29)
        goto LABEL_17;
    }
    else if (*(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_17:
      if ((v23 & 0xC000000000000001) != 0)
        v24 = (id)MEMORY[0x1B5E21018](0, v23);
      else
        v24 = *(id *)(v23 + 32);
      v25 = v24;
      swift_bridgeObjectRelease();
      v21 = objc_msgSend(v25, sel_vectorCount);

LABEL_25:
      v11[6] = v21;
      if (*(_QWORD *)(v18 + 16))
      {
        v30 = *(id *)(v18 + 32);
        swift_bridgeObjectRetain();
        v31 = objc_msgSend(v30, sel_data);
        sub_1B222817C();
        v33 = v32;

        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease();
      v34 = objc_msgSend(v43, sel_mesh);
      if (v34)
      {
        v35 = v34;
        v36 = objc_msgSend(v34, sel_meshElements);

        sub_1B1B9DAD4(0, &qword_1EEF613D0);
        v37 = sub_1B2228AB8();

        if (!(v37 >> 62))
          goto LABEL_29;
      }
      else
      {
        v37 = MEMORY[0x1E0DEE9D8];
        if (!(MEMORY[0x1E0DEE9D8] >> 62))
        {
LABEL_29:
          if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_30;
LABEL_36:
          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          return v11;
        }
      }
      swift_bridgeObjectRetain();
      v42 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      if (v42)
      {
LABEL_30:
        if ((v37 & 0xC000000000000001) != 0)
          v38 = (id)MEMORY[0x1B5E21018](0, v37);
        else
          v38 = *(id *)(v37 + 32);
        v39 = objc_msgSend(v38, sel_data);
        sub_1B222817C();
        v41 = v40;

        __asm { BR              X9 }
      }
      goto LABEL_36;
    }
    swift_bridgeObjectRelease();
    v21 = 0;
    goto LABEL_25;
  }
  swift_bridgeObjectRetain();
  v12 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v12)
    goto LABEL_14;
LABEL_8:
  v13 = 0;
  while (1)
  {
    v14 = (v10 & 0xC000000000000001) != 0
        ? (id)MEMORY[0x1B5E21018](v13, v10)
        : *(id *)(v10 + 8 * v13 + 32);
    v15 = v14;
    if (objc_msgSend(v14, sel_primitiveType) == (id)4)
      break;

    if (v12 == ++v13)
      goto LABEL_14;
  }
  swift_bridgeObjectRelease();
  v26 = objc_msgSend(v43, sel__renderableCopy);
  v27 = sub_1B1F4F1E0(v26, a2, a3);

  swift_release();
  return (_QWORD *)v27;
}

uint64_t sub_1B1F4FD44()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t sub_1B1F4FD70()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

unint64_t sub_1B1F4FDBC(char *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t inited;
  uint64_t v10;
  __CFString *v11;
  __CFString *v12;
  _QWORD *v13;
  id v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  _QWORD *v26;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B1B9DAD4(0, &qword_1EEF613F0);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, a1, v4);
  sub_1B1F55DE4();
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CD10;
  *(_QWORD *)(inited + 32) = CFSTR("kSceneSourceCheckConsistency");
  v10 = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 40) = 0;
  *(_QWORD *)(inited + 64) = v10;
  *(_QWORD *)(inited + 72) = CFSTR("kSceneSourcePreserveOriginalTopology");
  *(_QWORD *)(inited + 104) = v10;
  *(_BYTE *)(inited + 80) = 0;
  v11 = CFSTR("kSceneSourceCheckConsistency");
  v12 = CFSTR("kSceneSourcePreserveOriginalTopology");
  v13 = sub_1B1B81550(inited);
  v14 = sub_1B1F50078((uint64_t)v8, (uint64_t)v13);
  v16 = v14;
  if (!v14)
    return 0;
  v17 = objc_msgSend(v14, sel_rootNode);
  v18 = objc_msgSend(v17, sel_name);
  if (!v18)
  {
    sub_1B222805C();
    v19 = (void *)sub_1B2228728();
    v20 = objc_msgSend(v19, sel_stringByDeletingPathExtension);

    sub_1B222874C();
    swift_bridgeObjectRelease();

    v18 = (id)sub_1B2228728();
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setName_, v18);
  }

  type metadata accessor for VFXCoreImporter.VFXImporterContext();
  v21 = (_QWORD *)swift_initStackObject();
  v22 = MEMORY[0x1E0DEE9D8];
  v21[2] = sub_1B1B81090(MEMORY[0x1E0DEE9D8]);
  v21[3] = sub_1B1B811A0(v22);
  v21[4] = sub_1B1B812B0(v22);
  v21[5] = sub_1B1B813AC(v22);
  v21[6] = v22;
  v21[7] = 0;
  v21[8] = v22;
  v26 = v21;
  v15 = sub_1B1F501DC(v17, a2, a1, (uint64_t *)&v26);
  v23 = (uint64_t)v26;
  swift_retain();
  sub_1B1F50938(a2, v23);
  swift_release();

  swift_bridgeObjectRetain();
  swift_release();
  return v15;
}

id sub_1B1F50078(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  id v10;
  id v11;
  uint64_t v12;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v4 = (void *)sub_1B2228074();
  if (a2)
  {
    type metadata accessor for VFXWorldLoaderOption(0);
    sub_1B1F55E54();
    v5 = (void *)sub_1B2228524();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v14[0] = 0;
  v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_worldWithURL_options_error_, v4, v5, v14);

  v7 = v14[0];
  if (v6)
  {
    v8 = sub_1B2228110();
    v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
    v10 = v7;
    v9(a1, v8);
  }
  else
  {
    v11 = v14[0];
    sub_1B2227FB4();

    swift_willThrow();
    v12 = sub_1B2228110();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

unint64_t sub_1B1F501DC(void *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  id v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  unint64_t v18;
  char v19;
  _DWORD *v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  char *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  BOOL v37;
  uint64_t v39;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  _QWORD *v58;
  uint64_t v59;
  id v60;
  id v61;
  uint64_t v62;
  id v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t *v74;
  _QWORD v75[3];
  char v76;
  unint64_t v77;
  uint64_t v78;

  v5 = v4;
  v8 = **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v9 = a1;
  LOBYTE(v77) = 1;
  v10 = sub_1B21811D4(0x100000000uLL, v8, v9);

  v11 = HIDWORD(v10);
  v12 = objc_msgSend(v9, sel_model);
  v72 = v5;
  v74 = a4;
  if (!v12)
    goto LABEL_17;
  v13 = v12;
  v14 = *a4;
  v15 = *(_QWORD *)(*a4 + 16);
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_6;
  v16 = v12;
  v17 = v12;
  swift_bridgeObjectRetain();
  v18 = sub_1B1DC4CC4((uint64_t)v17);
  if ((v19 & 1) == 0)
  {

    swift_bridgeObjectRelease();
    v13 = v16;
LABEL_6:
    v22 = sub_1B1F51944(v9, v13, a2, a3, a4);
    v21 = HIDWORD(v22);
    v16 = v13;
    v23 = v13;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v77 = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v14 + 16) = 0x8000000000000000;
    sub_1B1B889A8(v22, v23, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v14 + 16) = v77;

    swift_bridgeObjectRelease();
    v25 = *a4;
    v26 = *(char **)(*a4 + 64);
    v27 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v25 + 64) = v26;
    if ((v27 & 1) == 0)
    {
      v26 = sub_1B1C63D98(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
      *(_QWORD *)(v25 + 64) = v26;
    }
    v29 = *((_QWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (v29 >= v28 >> 1)
      v26 = sub_1B1C63D98(v28 > 1, v29 + 1, 1, v26);
    *((_QWORD *)v26 + 2) = v29 + 1;
    *(_QWORD *)&v26[8 * v29 + 32] = v22;
    *(_QWORD *)(v25 + 64) = v26;
    goto LABEL_11;
  }
  v20 = (_DWORD *)(*(_QWORD *)(v15 + 56) + 8 * v18);
  LODWORD(v22) = *v20;
  LODWORD(v21) = v20[1];

  swift_bridgeObjectRelease();
LABEL_11:
  v77 = __PAIR64__(v21, v22);
  v78 = 0xFFFFFFFFLL;
  LODWORD(v11) = HIDWORD(v10);
  if ((_DWORD)v10 == -1 && HIDWORD(v10) == 0)
  {

  }
  else
  {
    v31 = swift_retain();
    MEMORY[0x1E0C80A78](v31, v32);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F55C10);

    swift_release();
  }
LABEL_17:
  v33 = objc_msgSend(v9, sel_light, v72);
  if (v33)
  {
    v34 = v33;
    sub_1B1F55614(v33, v10);

  }
  v35 = objc_msgSend(v9, sel_camera);
  if (v35)
  {
    v36 = v35;
    sub_1B1F559D8(v35, v10);

  }
  if (objc_msgSend(v9, sel_isHidden))
  {
    swift_retain();
    v37 = sub_1B1FD568C((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB290, v10);
    swift_release();
    if (!v37)
    {
      if ((_DWORD)v10 != -1 || (_DWORD)v11 != 0)
      {
        v39 = swift_retain();
        MEMORY[0x1E0C80A78](v39, v40);
        sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F552A4);
        swift_release();
      }
      sub_1B211E138(v10, a2);
    }
  }
  v41 = objc_msgSend(v9, sel_name);
  if (v41)
  {
    v42 = v41;
    v43 = sub_1B222874C();
    v45 = v44;

    v77 = v43;
    v78 = v45;
    if ((_DWORD)v10 == -1 && (_DWORD)v11 == 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v47 = swift_retain();
      MEMORY[0x1E0C80A78](v47, v48);
      sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F55290);
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else if ((_DWORD)v10 != -1 || (_DWORD)v11 != 0)
  {
    v50 = *(_QWORD *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    swift_retain();
    if (v50)
    {
      v51 = *(_BYTE *)(v50 + 80);
      MEMORY[0x1B5E240CC](v50 + 48);
      v50 = *(_QWORD *)(v50 + 56);
    }
    else
    {
      v51 = 0;
    }
    swift_unknownObjectUnownedInit();
    v75[0] = a2;
    v75[2] = v50;
    swift_unknownObjectUnownedAssign();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    v76 = v51;
    sub_1B1A02530((uint64_t)v75, (uint64_t)&v77);
    sub_1B1E2D290((uint64_t)&type metadata for Name, (uint64_t)&off_1E63B9AE8, v10);
    sub_1B1A0256C((uint64_t)&v77);
    sub_1B1E31340(1);
    swift_release();
  }
  v52 = objc_msgSend(v9, sel_animationKeys);
  v53 = sub_1B2228AB8();

  v54 = *(_QWORD *)(v53 + 16);
  if (v54)
  {
    v55 = v53 + 40;
    do
    {
      swift_bridgeObjectRetain();
      v56 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      v57 = objc_msgSend(v9, sel_animationPlayerForKey_, v56);

      if (v57)
      {
        type metadata accessor for VFXCoreImporter.AnimationInfo();
        v58 = (_QWORD *)swift_allocObject();
        v58[2] = v9;
        v58[4] = v57;
        v58[3] = v10;
        v59 = *v74;
        v60 = v9;
        v61 = v57;
        v62 = swift_retain();
        MEMORY[0x1B5E2064C](v62);
        if (*(_QWORD *)((*(_QWORD *)(v59 + 48) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*(_QWORD *)(v59 + 48) & 0xFFFFFFFFFFFFFF8)
                                                                                            + 0x18) >> 1)
          sub_1B2228AF4();
        sub_1B2228B30();
        sub_1B2228AD0();
        swift_release();

      }
      v55 += 16;
      --v54;
    }
    while (v54);
  }
  swift_bridgeObjectRelease();
  v63 = objc_msgSend(v9, sel_childNodes);
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7E0);
  v64 = sub_1B2228AB8();

  if (v64 >> 62)
  {
    swift_bridgeObjectRetain();
    v65 = sub_1B22296AC();
    swift_bridgeObjectRelease();
  }
  else
  {
    v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (v65)
  {
    v66 = 0;
    do
    {
      if ((v64 & 0xC000000000000001) != 0)
        v67 = (id)MEMORY[0x1B5E21018](v66, v64);
      else
        v67 = *(id *)(v64 + 8 * v66 + 32);
      v68 = v67;
      ++v66;
      v69 = sub_1B1F501DC(v67, a2, a3, v74);
      sub_1B1E86820(v10, a2, v69, v70);

    }
    while (v65 != v66);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B1F50938(uint64_t a1, uint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  id v9;
  id v10;

  v3 = *(_QWORD *)(a2 + 48);
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    v4 = sub_1B22296AC();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = 0;
      while ((v3 & 0xC000000000000001) == 0)
      {
        v6 = *(_QWORD *)(v3 + 8 * v5 + 32);
        swift_retain();
        v7 = *(void **)(v6 + 32);
        if (v7)
          goto LABEL_9;
LABEL_4:
        ++v5;
        swift_release();
        if (v4 == v5)
          return swift_bridgeObjectRelease();
      }
      v6 = MEMORY[0x1B5E21018](v5, v3);
      v7 = *(void **)(v6 + 32);
      if (!v7)
        goto LABEL_4;
LABEL_9:
      v8 = v7;
      v9 = objc_msgSend(v8, sel_animation);
      v10 = objc_msgSend(v9, sel_caAnimation);

      sub_1B1F51754(a1, v10, v6, a2);
      goto LABEL_4;
    }
  }
  return swift_bridgeObjectRelease();
}

void sub_1B1F50A7C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))
{
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  id v29;
  void *v30;
  __int128 v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t inited;
  double v44;
  float v45;
  uint64_t v46;
  char *v47;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  uint64_t v55;
  uint64_t v56;
  id v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  __int128 v61;
  void *v62;
  char v63[40];

  objc_opt_self();
  v12 = swift_dynamicCastObjCClass();
  if (!v12)
    return;
  v13 = (void *)v12;
  v57 = a1;
  v14 = objc_msgSend(v13, sel_keyTimes);
  if (!v14)
  {

    return;
  }
  v15 = v14;
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  v16 = sub_1B2228AB8();

  v17 = objc_msgSend(v13, sel_values);
  if (!v17)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v18 = v17;
  v19 = sub_1B2228AB8();

  v20 = v16;
  v60 = v16;
  v55 = a4;
  v56 = a5;
  v53 = a3;
  v54 = a6;
  v52 = a2;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = v16;
    v21 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v21)
    {
LABEL_6:
      v22 = 0;
      v23 = v20 & 0xC000000000000001;
      v24 = v19 + 32;
      v25 = (char *)MEMORY[0x1E0DEE9D8];
      v26 = (char *)MEMORY[0x1E0DEE9D8];
      v27 = (char *)MEMORY[0x1E0DEE9D8];
      v28 = (char *)MEMORY[0x1E0DEE9D8];
      v58 = v20 & 0xC000000000000001;
      v59 = v21;
      do
      {
        if (v23)
          v29 = (id)MEMORY[0x1B5E21018](v22, v20);
        else
          v29 = *(id *)(v20 + 8 * v22 + 32);
        v30 = v29;
        sub_1B1A02864(v24, (uint64_t)v63);
        sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
        if (swift_dynamicCast())
        {
          objc_msgSend(v62, sel_VFXFloat3Value);
          v61 = v31;
          objc_msgSend(v30, sel_floatValue);
          v33 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v25 = sub_1B1C635D8(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
          v35 = *((_QWORD *)v25 + 2);
          v34 = *((_QWORD *)v25 + 3);
          if (v35 >= v34 >> 1)
            v25 = sub_1B1C635D8(v34 > 1, v35 + 1, 1, v25);
          *((_QWORD *)v25 + 2) = v35 + 1;
          *(_DWORD *)&v25[4 * v35 + 32] = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v26 = sub_1B1C635D8(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
          v37 = *((_QWORD *)v26 + 2);
          v36 = *((_QWORD *)v26 + 3);
          if (v37 >= v36 >> 1)
            v26 = sub_1B1C635D8(v36 > 1, v37 + 1, 1, v26);
          *((_QWORD *)v26 + 2) = v37 + 1;
          *(_DWORD *)&v26[4 * v37 + 32] = v61;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = sub_1B1C635D8(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
          v39 = *((_QWORD *)v27 + 2);
          v38 = *((_QWORD *)v27 + 3);
          if (v39 >= v38 >> 1)
            v27 = sub_1B1C635D8(v38 > 1, v39 + 1, 1, v27);
          *((_QWORD *)v27 + 2) = v39 + 1;
          *(_DWORD *)&v27[4 * v39 + 32] = DWORD1(v61);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v28 = sub_1B1C635D8(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
          v41 = *((_QWORD *)v28 + 2);
          v40 = *((_QWORD *)v28 + 3);
          if (v41 >= v40 >> 1)
            v28 = sub_1B1C635D8(v40 > 1, v41 + 1, 1, v28);
          *((_QWORD *)v28 + 2) = v41 + 1;
          *(_DWORD *)&v28[4 * v41 + 32] = DWORD2(v61);

          v21 = v59;
          v20 = v60;
          v23 = v58;
        }
        else
        {

        }
        ++v22;
        v24 += 32;
      }
      while (v21 != v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
  }
  else
  {
    v21 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
      goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = (char *)MEMORY[0x1E0DEE9D8];
  v26 = (char *)MEMORY[0x1E0DEE9D8];
  v27 = (char *)MEMORY[0x1E0DEE9D8];
  v28 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_35:
  v42 = **(_QWORD **)(v52 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  sub_1B1A02758(0, &qword_1EEF61408, (uint64_t)&type metadata for KeyframeTimeline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226E100;
  *(_QWORD *)(inited + 32) = v26;
  *(_QWORD *)(inited + 40) = v25;
  *(_QWORD *)(inited + 48) = 0;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = v27;
  *(_QWORD *)(inited + 72) = v25;
  *(_QWORD *)(inited + 80) = 0;
  *(_BYTE *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = v28;
  *(_QWORD *)(inited + 104) = v25;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 120) = 1;
  swift_bridgeObjectRetain_n();
  objc_msgSend(v57, sel_duration);
  v45 = v44;
  swift_retain();
  v63[0] = 1;
  v46 = v54(0x100000000, v42, 0, 0xFFFFFFFFLL, inited, v42, v53, v55, v45);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v47 = *(char **)(v56 + 64);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v56 + 64) = v47;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v47 = sub_1B1C63D98(0, *((_QWORD *)v47 + 2) + 1, 1, v47);
    *(_QWORD *)(v56 + 64) = v47;
  }
  v50 = *((_QWORD *)v47 + 2);
  v49 = *((_QWORD *)v47 + 3);
  v51 = v57;
  if (v50 >= v49 >> 1)
  {
    v47 = sub_1B1C63D98(v49 > 1, v50 + 1, 1, v47);
    v51 = v57;
  }
  *((_QWORD *)v47 + 2) = v50 + 1;
  *(_QWORD *)&v47[8 * v50 + 32] = v46;
  *(_QWORD *)(v56 + 64) = v47;

}

void sub_1B1F510A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  unint64_t v16;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  id v29;
  void *v30;
  __int128 v31;
  int v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t inited;
  double v46;
  float v47;
  uint64_t v48;
  char *v49;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  void *v64;
  char v65[40];

  objc_opt_self();
  v12 = swift_dynamicCastObjCClass();
  if (!v12)
    return;
  v13 = (void *)v12;
  v59 = a1;
  v14 = objc_msgSend(v13, sel_keyTimes);
  if (!v14)
  {

    return;
  }
  v15 = v14;
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  v16 = sub_1B2228AB8();

  v17 = objc_msgSend(v13, sel_values);
  if (!v17)
  {

    swift_bridgeObjectRelease();
    return;
  }
  v18 = v17;
  v19 = sub_1B2228AB8();

  v57 = a4;
  v58 = a6;
  v56 = a3;
  v55 = a5;
  v54 = a2;
  if (v16 >> 62)
  {
    swift_bridgeObjectRetain();
    v20 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    v21 = v16;
    if (v20)
    {
LABEL_6:
      v22 = 0;
      v62 = v21 & 0xC000000000000001;
      v23 = (char *)MEMORY[0x1E0DEE9D8];
      v24 = v19 + 32;
      v25 = (char *)MEMORY[0x1E0DEE9D8];
      v26 = (char *)MEMORY[0x1E0DEE9D8];
      v27 = (char *)MEMORY[0x1E0DEE9D8];
      v28 = (char *)MEMORY[0x1E0DEE9D8];
      v60 = v20;
      v61 = v21;
      do
      {
        if (v62)
          v29 = (id)MEMORY[0x1B5E21018](v22, v21);
        else
          v29 = *(id *)(v21 + 8 * v22 + 32);
        v30 = v29;
        sub_1B1A02864(v24, (uint64_t)v65);
        sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
        if (swift_dynamicCast())
        {
          objc_msgSend(v64, sel_VFXFloat4Value);
          v63 = v31;
          objc_msgSend(v30, sel_floatValue);
          v33 = v32;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v23 = sub_1B1C635D8(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
          v35 = *((_QWORD *)v23 + 2);
          v34 = *((_QWORD *)v23 + 3);
          if (v35 >= v34 >> 1)
            v23 = sub_1B1C635D8(v34 > 1, v35 + 1, 1, v23);
          *((_QWORD *)v23 + 2) = v35 + 1;
          *(_DWORD *)&v23[4 * v35 + 32] = v33;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v25 = sub_1B1C635D8(0, *((_QWORD *)v25 + 2) + 1, 1, v25);
          v37 = *((_QWORD *)v25 + 2);
          v36 = *((_QWORD *)v25 + 3);
          if (v37 >= v36 >> 1)
            v25 = sub_1B1C635D8(v36 > 1, v37 + 1, 1, v25);
          *((_QWORD *)v25 + 2) = v37 + 1;
          *(_DWORD *)&v25[4 * v37 + 32] = v63;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v26 = sub_1B1C635D8(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
          v39 = *((_QWORD *)v26 + 2);
          v38 = *((_QWORD *)v26 + 3);
          if (v39 >= v38 >> 1)
            v26 = sub_1B1C635D8(v38 > 1, v39 + 1, 1, v26);
          *((_QWORD *)v26 + 2) = v39 + 1;
          *(_DWORD *)&v26[4 * v39 + 32] = DWORD1(v63);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v27 = sub_1B1C635D8(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
          v41 = *((_QWORD *)v27 + 2);
          v40 = *((_QWORD *)v27 + 3);
          if (v41 >= v40 >> 1)
            v27 = sub_1B1C635D8(v40 > 1, v41 + 1, 1, v27);
          *((_QWORD *)v27 + 2) = v41 + 1;
          *(_DWORD *)&v27[4 * v41 + 32] = DWORD2(v63);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v28 = sub_1B1C635D8(0, *((_QWORD *)v28 + 2) + 1, 1, v28);
          v43 = *((_QWORD *)v28 + 2);
          v42 = *((_QWORD *)v28 + 3);
          if (v43 >= v42 >> 1)
            v28 = sub_1B1C635D8(v42 > 1, v43 + 1, 1, v28);
          *((_QWORD *)v28 + 2) = v43 + 1;
          *(_DWORD *)&v28[4 * v43 + 32] = HIDWORD(v63);

          v20 = v60;
          v21 = v61;
        }
        else
        {

        }
        ++v22;
        v24 += 32;
      }
      while (v20 != v22);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_39;
    }
  }
  else
  {
    v20 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    v21 = v16;
    if (v20)
      goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = (char *)MEMORY[0x1E0DEE9D8];
  v25 = (char *)MEMORY[0x1E0DEE9D8];
  v26 = (char *)MEMORY[0x1E0DEE9D8];
  v27 = (char *)MEMORY[0x1E0DEE9D8];
  v28 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_39:
  v44 = **(_QWORD **)(v54 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  sub_1B1A02758(0, &qword_1EEF61408, (uint64_t)&type metadata for KeyframeTimeline, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B227BE30;
  *(_QWORD *)(inited + 32) = v25;
  *(_QWORD *)(inited + 40) = v23;
  *(_QWORD *)(inited + 48) = 0;
  *(_BYTE *)(inited + 56) = 1;
  *(_QWORD *)(inited + 64) = v26;
  *(_QWORD *)(inited + 72) = v23;
  *(_QWORD *)(inited + 80) = 0;
  *(_BYTE *)(inited + 88) = 1;
  *(_QWORD *)(inited + 96) = v27;
  *(_QWORD *)(inited + 104) = v23;
  *(_QWORD *)(inited + 112) = 0;
  *(_BYTE *)(inited + 120) = 1;
  *(_QWORD *)(inited + 128) = v28;
  *(_QWORD *)(inited + 136) = v23;
  *(_QWORD *)(inited + 144) = 0;
  *(_BYTE *)(inited + 152) = 1;
  swift_bridgeObjectRetain_n();
  objc_msgSend(v59, sel_duration);
  v47 = v46;
  swift_retain();
  v65[0] = 1;
  v48 = sub_1B2181854(0x100000000uLL, v44, v55, 0xFFFFFFFFLL, inited, v44, v56, v57, v47);
  swift_release();
  swift_setDeallocating();
  swift_arrayDestroy();
  v49 = *(char **)(v58 + 64);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v58 + 64) = v49;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v49 = sub_1B1C63D98(0, *((_QWORD *)v49 + 2) + 1, 1, v49);
    *(_QWORD *)(v58 + 64) = v49;
  }
  v52 = *((_QWORD *)v49 + 2);
  v51 = *((_QWORD *)v49 + 3);
  v53 = v59;
  if (v52 >= v51 >> 1)
  {
    v49 = sub_1B1C63D98(v51 > 1, v52 + 1, 1, v49);
    v53 = v59;
  }
  *((_QWORD *)v49 + 2) = v52 + 1;
  *(_QWORD *)&v49[8 * v52 + 32] = v48;
  *(_QWORD *)(v58 + 64) = v49;

}

void sub_1B1F51754(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  id v18;
  void *v19;
  id v20;

  objc_opt_self();
  v8 = swift_dynamicCastObjCClass();
  if (v8)
  {
    v9 = (void *)v8;
    v20 = a2;
    sub_1B1F55E9C(a1, v9, a3, a4);

    return;
  }
  objc_opt_self();
  v10 = swift_dynamicCastObjCClass();
  if (v10)
  {
    v11 = (void *)v10;
    v12 = a2;
    v13 = objc_msgSend(v11, sel_animations);
    if (v13)
    {
      v14 = v13;
      sub_1B1B9DAD4(0, &qword_1EEF61400);
      v15 = sub_1B2228AB8();

      if (!(v15 >> 62))
        goto LABEL_6;
    }
    else
    {
      v15 = MEMORY[0x1E0DEE9D8];
      if (!(MEMORY[0x1E0DEE9D8] >> 62))
      {
LABEL_6:
        v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
        if (v16)
          goto LABEL_7;
        goto LABEL_15;
      }
    }
    swift_bridgeObjectRetain();
    v16 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v16)
    {
LABEL_7:
      for (i = 0; i != v16; ++i)
      {
        if ((v15 & 0xC000000000000001) != 0)
          v18 = (id)MEMORY[0x1B5E21018](i, v15);
        else
          v18 = *(id *)(v15 + 8 * i + 32);
        v19 = v18;
        sub_1B1F51754(a1, v18, a3, a4);

      }
    }
LABEL_15:

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_1B1F51944(void *a1, id a2, uint64_t a3, char *a4, uint64_t *a5)
{
  id v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  unint64_t v27;
  char v28;
  _DWORD *v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  void *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char isUniquelyReferenced_nonNull_native;
  char *v41;
  char v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v58;
  uint64_t v59;
  id v60;
  uint64_t *v61;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v68;

  v8 = objc_msgSend(a2, sel_name);
  if (v8)
  {
    v9 = v8;
    v10 = sub_1B222874C();
    v12 = v11;

  }
  else
  {
    v13 = objc_msgSend(a1, sel_name);
    if (v13)
    {
      v14 = v13;
      sub_1B222874C();

    }
    else
    {
      sub_1B2229A0C();
    }
    sub_1B2228890();
    swift_bridgeObjectRelease();
    v10 = 0x2D6873656DLL;
    v12 = 0xE500000000000000;
  }
  v15 = sub_1B1F4F1E0(a2, (uint64_t)a1, a3);
  if (v15)
  {
    v16 = (uint64_t)v15;
    v61 = a5;
    v17 = *a5;
    ++*(_QWORD *)(*a5 + 56);
    v18 = objc_msgSend(a2, sel_materials);
    sub_1B1B9DAD4(0, &qword_1EEF5B4F0);
    v19 = sub_1B2228AB8();

    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      v20 = sub_1B22296AC();
      swift_bridgeObjectRelease();
      v58 = v10;
      v59 = v12;
      if (v20)
        goto LABEL_10;
    }
    else
    {
      v20 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
      v58 = v10;
      v59 = v12;
      if (v20)
      {
LABEL_10:
        v60 = a2;
        v21 = 0;
        v63 = v19 & 0xC000000000000001;
        v22 = (char *)MEMORY[0x1E0DEE9D8];
        v65 = v19;
        v66 = v16;
        v64 = v20;
        while (1)
        {
          if (v63)
            v23 = (id)MEMORY[0x1B5E21018](v21, v19);
          else
            v23 = *(id *)(v19 + 8 * v21 + 32);
          v24 = v23;
          v25 = *(_QWORD *)(v17 + 24);
          if (!*(_QWORD *)(v25 + 16))
            goto LABEL_18;
          v26 = v23;
          swift_bridgeObjectRetain();
          v27 = sub_1B1DC4C78((uint64_t)v26);
          if ((v28 & 1) == 0)
            break;
          v29 = (_DWORD *)(*(_QWORD *)(v25 + 56) + 8 * v27);
          LODWORD(v30) = *v29;
          LODWORD(v31) = v29[1];

          swift_bridgeObjectRelease();
LABEL_31:
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v22 = sub_1B1C63D98(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
          v46 = *((_QWORD *)v22 + 2);
          v45 = *((_QWORD *)v22 + 3);
          if (v46 >= v45 >> 1)
            v22 = sub_1B1C63D98(v45 > 1, v46 + 1, 1, v22);
          ++v21;
          *((_QWORD *)v22 + 2) = v46 + 1;
          v47 = &v22[8 * v46];
          *((_DWORD *)v47 + 8) = v30;
          *((_DWORD *)v47 + 9) = v31;

          v19 = v65;
          v16 = v66;
          if (v64 == v21)
            goto LABEL_40;
        }

        swift_bridgeObjectRelease();
LABEL_18:
        v30 = sub_1B1F528B8(v24, a3, a4, v61);
        v32 = objc_msgSend(v24, sel_name);
        if (v32)
        {
          v33 = v32;
          sub_1B222874C();

        }
        else
        {
          v34 = objc_msgSend(v60, sel_name);
          if (v34)
          {
            v35 = v34;
            sub_1B222874C();

          }
          sub_1B2228890();
          swift_bridgeObjectRelease();
          sub_1B2228890();
          sub_1B2229A0C();
          sub_1B2228890();
          swift_bridgeObjectRelease();
        }
        v31 = HIDWORD(v30);
        if (v30 == 0xFFFFFFFF)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v36 = swift_retain();
          MEMORY[0x1E0C80A78](v36, v37);
          sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F55290);
          swift_bridgeObjectRelease();
          swift_release();
        }
        v38 = *v61;
        v39 = v24;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v68 = *(_QWORD *)(v38 + 24);
        *(_QWORD *)(v38 + 24) = 0x8000000000000000;
        sub_1B1B8888C(v30, v39, isUniquelyReferenced_nonNull_native);
        *(_QWORD *)(v38 + 24) = v68;

        swift_bridgeObjectRelease();
        v17 = *v61;
        v41 = *(char **)(*v61 + 64);
        v42 = swift_isUniquelyReferenced_nonNull_native();
        *(_QWORD *)(v17 + 64) = v41;
        if ((v42 & 1) == 0)
        {
          v41 = sub_1B1C63D98(0, *((_QWORD *)v41 + 2) + 1, 1, v41);
          *(_QWORD *)(v17 + 64) = v41;
        }
        v44 = *((_QWORD *)v41 + 2);
        v43 = *((_QWORD *)v41 + 3);
        if (v44 >= v43 >> 1)
          v41 = sub_1B1C63D98(v43 > 1, v44 + 1, 1, v41);
        *((_QWORD *)v41 + 2) = v44 + 1;
        *(_QWORD *)&v41[8 * v44 + 32] = v30;
        *(_QWORD *)(v17 + 64) = v41;
        goto LABEL_31;
      }
    }
    v22 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_40:
    swift_bridgeObjectRelease();
    v49 = *(_QWORD **)(v16 + 40);
    v50 = v49[2];
    if (v50)
    {
      v51 = 0;
      v52 = *((_QWORD *)v22 + 2);
      v53 = 7;
      do
      {
        if (v52)
        {
          v54 = v51 % *((_QWORD *)v22 + 2);
          v55 = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v16 + 40) = v49;
          if ((v55 & 1) == 0)
            goto LABEL_47;
        }
        else
        {
          v56 = swift_isUniquelyReferenced_nonNull_native();
          v54 = 0;
          *(_QWORD *)(v16 + 40) = v49;
          if ((v56 & 1) == 0)
LABEL_47:
            v49 = sub_1B1FFEF74(v49);
        }
        ++v51;
        v49[v53] = v54;
        *(_QWORD *)(v16 + 40) = v49;
        v53 += 16;
      }
      while (v50 != v51);
    }
    v48 = sub_1B2180EA8(0x100000000uLL, **(_QWORD **)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), v16, (uint64_t)v22, v58, v59);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    v48 = 0xFFFFFFFFLL;
  }
  swift_bridgeObjectRelease();
  return v48;
}

void sub_1B1F51F78(int a1, int a2, id a3)
{
  id v3;
  uint64_t v4;
  uint64_t v5;

  v3 = objc_msgSend(a3, sel_data);
  sub_1B222817C();
  v5 = v4;

  __asm { BR              X10 }
}

uint64_t sub_1B1F52000()
{
  unint64_t v0;
  uint64_t v1;
  float32x4_t *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  id v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v35;
  unint64_t v36;
  float32x4_t *v37;
  uint64_t v38;
  uint64_t v39;
  __int8 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  uint64_t v48;

  result = sub_1B1A0DADC(v4, v0);
  if (BYTE6(v0))
  {
    v9 = objc_msgSend(*(id *)(v7 - 104), sel_bytesPerIndex);
    if (v9 == (id)1)
    {
      v10 = 1;
      v11 = 49;
      goto LABEL_8;
    }
    if (v9 == (id)4)
    {
      v10 = 0;
      v11 = 33;
      goto LABEL_8;
    }
    if (v9 == (id)2)
    {
      v10 = 0;
      v11 = 41;
LABEL_8:
      switch((unint64_t)objc_msgSend(*(id *)(v7 - 104), sel_primitiveType))
      {
        case 0uLL:
          v12 = 3 * (_QWORD)objc_msgSend(*(id *)(v7 - 104), sel_primitiveCount);
          if (v10)
            goto LABEL_26;
          goto LABEL_23;
        case 1uLL:
          v12 = (uint64_t)objc_msgSend(*(id *)(v7 - 104), sel_primitiveCount) + 2;
          if (v10)
            goto LABEL_26;
          goto LABEL_23;
        case 2uLL:
          v12 = 2 * (_QWORD)objc_msgSend(*(id *)(v7 - 104), sel_primitiveCount);
          if (!v10)
            goto LABEL_23;
          goto LABEL_26;
        case 3uLL:
          v12 = (uint64_t)objc_msgSend(*(id *)(v7 - 104), sel_primitiveCount);
          if (v10)
          {
LABEL_26:
            v18 = objc_msgSend(*(id *)(v7 - 104), sel_data);
            sub_1B222817C();
            v20 = v19;

            __asm { BR              X10 }
          }
LABEL_23:
          v17 = objc_msgSend(v5, sel_newBufferWithBytes_length_options_, v6, BYTE6(v0), 0);
          *(_QWORD *)(v7 - 104) = v1;
          if (v17)
          {
            *(_QWORD *)(v7 - 96) = 0x20746E656D656C65;
            *(_QWORD *)(v7 - 88) = 0xE800000000000000;
            *(_QWORD *)(v7 - 72) = **(_QWORD **)(v7 - 104);
            swift_unknownObjectRetain();
            sub_1B2229A0C();
            sub_1B2228890();
            swift_bridgeObjectRelease();
            v21 = (void *)sub_1B2228728();
            swift_bridgeObjectRelease();
            objc_msgSend(v17, sel_setLabel_, v21);
            swift_unknownObjectRelease();

          }
          v2[2].i64[0] = (uint64_t)v17;
          v2[2].i64[1] = 0;
          v2[3].i64[0] = BYTE6(v0);
          v2[3].i64[1] = 0;
          v2[4].i8[0] = 0;
          swift_unknownObjectRetain_n();
          swift_unknownObjectRelease();
          v22 = 4;
          if (v11 != 33)
            v22 = 2;
          v2[4].i64[1] = v12;
          v2[5].i64[0] = v22;
          objc_msgSend(v3, sel_boundingBox);
          v46 = v23;
          objc_msgSend(v3, sel_boundingBox);
          v24 = v46;
          v24.i32[3] = 1.0;
          v25.i32[3] = 1.0;
          v26 = vaddq_f32(v24, v25);
          v27 = v24;
          v24.i64[0] = 0x3F0000003F000000;
          v24.i64[1] = 0x3F0000003F000000;
          v45 = vmulq_f32(vsubq_f32(v25, v27), v24);
          v47 = vmulq_f32(v26, v24);
          v2[6] = v47;
          v2[7] = v45;
          v28 = v2->i64[1];
          v29 = v2[1].i64[0];
          v30 = v2[1].i64[1];
          v31 = v2[2].i64[0];
          v43 = v2[2].i64[1];
          v44 = v2->i64[0];
          v41 = v2[3].i64[1];
          v42 = v2[3].i64[0];
          v40 = v2[4].i8[0];
          v32 = v2[5].i64[1];
          v38 = v2[5].i64[0];
          v39 = v2[4].i64[1];
          v33 = *(_QWORD **)(v48 + 40);
          swift_unknownObjectRetain();
          swift_bridgeObjectRetain();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          *(_QWORD *)(v48 + 40) = v33;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            v33 = sub_1B1C68118(0, v33[2] + 1, 1, v33);
            *(_QWORD *)(v48 + 40) = v33;
          }
          v36 = v33[2];
          v35 = v33[3];
          if (v36 >= v35 >> 1)
          {
            v33 = sub_1B1C68118(v35 > 1, v36 + 1, 1, v33);
            *(_QWORD *)(v48 + 40) = v33;
          }
          v33[2] = v36 + 1;
          v37 = (float32x4_t *)&v33[16 * v36];
          v37[2].i64[0] = v44;
          v37[2].i64[1] = v28;
          v37[3].i64[0] = v29;
          v37[3].i64[1] = v30;
          v37[4].i64[0] = v31;
          v37[4].i64[1] = v43;
          v37[5].i64[0] = v42;
          v37[5].i64[1] = v41;
          v37[6].i8[0] = v40;
          v37[6].i64[1] = v39;
          v37[7].i64[0] = v38;
          v37[7].i64[1] = v32;
          v37[8] = v47;
          v37[9] = v45;
          swift_unknownObjectRelease();
          ++**(_QWORD **)(v7 - 104);
          return swift_unknownObjectRelease();
        default:
          if (qword_1ED4BF430 != -1)
            swift_once();
          *(_QWORD *)(v7 - 96) = 0;
          *(_QWORD *)(v7 - 88) = 0xE000000000000000;
          swift_retain();
          sub_1B2229430();
          v13 = *(_QWORD *)(v7 - 88);
          *(_QWORD *)(v7 - 96) = *(_QWORD *)(v7 - 96);
          *(_QWORD *)(v7 - 88) = v13;
          sub_1B2228890();
          *(_QWORD *)(v7 - 72) = objc_msgSend(*(id *)(v7 - 104), sel_primitiveType);
          type metadata accessor for VFXMeshPrimitiveType(0);
          sub_1B22295EC();
          goto LABEL_17;
      }
    }
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)(v7 - 96) = 0;
    *(_QWORD *)(v7 - 88) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v7 - 96) = 0xD00000000000001ELL;
    *(_QWORD *)(v7 - 88) = 0x80000001B23455D0;
    *(_QWORD *)(v7 - 72) = objc_msgSend(*(id *)(v7 - 104), sel_bytesPerIndex);
    sub_1B2229A0C();
    sub_1B2228890();
    swift_bridgeObjectRelease();
LABEL_17:
    v14 = *(_QWORD *)(v7 - 96);
    v15 = *(_QWORD *)(v7 - 88);
    v16 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)(v7 - 96) = 0;
    swift_retain();
    sub_1B1F1AD70(v16, (uint64_t *)(v7 - 96), v14, v15);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1F528B8(void *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  uint64_t v8;
  id v9;
  unint64_t v10;
  __int128 v11;
  __int128 v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  id v23;
  float v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  id v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float v36;
  id v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  float v43;
  id v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[3];
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;

  type metadata accessor for PBRParameters();
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = 0u;
  *(_QWORD *)(v8 + 32) = 0xFFFFFFFFLL;
  *(_DWORD *)(v8 + 40) = 16777473;
  *(_BYTE *)(v8 + 44) = 1;
  *(_OWORD *)(v8 + 48) = xmmword_1B2244EC0;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 80) = 0xFFFFFFFFLL;
  *(_DWORD *)(v8 + 88) = 16777473;
  *(_BYTE *)(v8 + 92) = 1;
  *(_OWORD *)(v8 + 96) = xmmword_1B2244EC0;
  *(_QWORD *)(v8 + 112) = 0xFFFFFFFFLL;
  *(_DWORD *)(v8 + 120) = 16777473;
  *(_BYTE *)(v8 + 124) = 1;
  *(_DWORD *)(v8 + 128) = 0;
  *(_OWORD *)(v8 + 144) = xmmword_1B2244EC0;
  *(_QWORD *)(v8 + 160) = 0xFFFFFFFFLL;
  *(_DWORD *)(v8 + 168) = 16777473;
  *(_BYTE *)(v8 + 172) = 1;
  *(_DWORD *)(v8 + 176) = 0;
  *(_OWORD *)(v8 + 192) = xmmword_1B2244EC0;
  *(_QWORD *)(v8 + 208) = 0xFFFFFFFFLL;
  *(_DWORD *)(v8 + 216) = 16777473;
  *(_BYTE *)(v8 + 220) = 1;
  *(_DWORD *)(v8 + 224) = 1065353216;
  *(_OWORD *)(v8 + 240) = xmmword_1B2244EC0;
  *(_QWORD *)(v8 + 256) = 0xFFFFFFFFLL;
  *(_DWORD *)(v8 + 264) = 16777473;
  *(_BYTE *)(v8 + 268) = 1;
  *(_DWORD *)(v8 + 272) = 1065353216;
  *(_OWORD *)(v8 + 288) = xmmword_1B2244EC0;
  *(_WORD *)(v8 + 304) = 0;
  v9 = objc_msgSend(a1, sel_diffuse);
  v10 = sub_1B1F552BC(v9, a2, a3, a4);
  v54 = v11;
  v55 = v12;
  v13 = v10;
  v15 = v14;

  *(_OWORD *)(v8 + 16) = v54;
  *(_QWORD *)(v8 + 32) = v13;
  *(_BYTE *)(v8 + 40) = v15 & 1;
  *(_BYTE *)(v8 + 41) = BYTE1(v15) & 1;
  *(_BYTE *)(v8 + 42) = BYTE2(v15);
  *(_BYTE *)(v8 + 43) = BYTE3(v15);
  *(_BYTE *)(v8 + 44) = BYTE4(v15);
  *(_OWORD *)(v8 + 48) = v55;
  v16 = objc_msgSend(a1, sel_metalness);
  v58[1] = 0;
  v58[2] = 0;
  v58[0] = 70;
  v59 = -2;
  v61 = 0;
  v62 = 0;
  v60 = 0;
  v63 = 768;
  v17 = sub_1B1F52D94(v16, a2, a3, (uint64_t)v58, a4);
  v19 = v18;
  v21 = v20;
  v22 = v17;

  *(_QWORD *)(v8 + 160) = v19;
  *(_BYTE *)(v8 + 168) = v21 & 1;
  *(_BYTE *)(v8 + 169) = BYTE1(v21) & 1;
  *(_BYTE *)(v8 + 170) = BYTE2(v21);
  *(_BYTE *)(v8 + 171) = BYTE3(v21);
  *(_BYTE *)(v8 + 172) = BYTE4(v21);
  *(float *)(v8 + 176) = v22;
  *(_OWORD *)(v8 + 192) = xmmword_1B2244EC0;
  v23 = objc_msgSend(a1, sel_roughness);
  v24 = sub_1B1F52D94(v23, a2, a3, (uint64_t)v58, a4);
  v26 = v25;
  v28 = v27;
  v29 = v24;

  *(_QWORD *)(v8 + 112) = v26;
  *(_BYTE *)(v8 + 120) = v28 & 1;
  *(_BYTE *)(v8 + 121) = BYTE1(v28) & 1;
  *(_BYTE *)(v8 + 122) = BYTE2(v28);
  *(_BYTE *)(v8 + 123) = BYTE3(v28);
  *(_BYTE *)(v8 + 124) = BYTE4(v28);
  *(float *)(v8 + 128) = v29;
  *(_OWORD *)(v8 + 144) = xmmword_1B2244EC0;
  v30 = objc_msgSend(a1, sel_normal);
  v31 = sub_1B1F52D94(v30, a2, a3, (uint64_t)v58, a4);
  v33 = v32;
  v35 = v34;
  v36 = v31;

  *(_QWORD *)(v8 + 256) = v33;
  *(_BYTE *)(v8 + 264) = v35 & 1;
  *(_BYTE *)(v8 + 265) = BYTE1(v35) & 1;
  *(_BYTE *)(v8 + 266) = BYTE2(v35);
  *(_BYTE *)(v8 + 267) = BYTE3(v35);
  *(_BYTE *)(v8 + 268) = BYTE4(v35);
  *(float *)(v8 + 272) = v36;
  *(_OWORD *)(v8 + 288) = xmmword_1B2244EC0;
  v37 = objc_msgSend(a1, sel_ambientOcclusion);
  v38 = sub_1B1F52D94(v37, a2, a3, (uint64_t)v58, a4);
  v40 = v39;
  v42 = v41;
  v43 = v38;

  *(_QWORD *)(v8 + 208) = v40;
  *(_BYTE *)(v8 + 216) = v42 & 1;
  *(_BYTE *)(v8 + 217) = BYTE1(v42) & 1;
  *(_BYTE *)(v8 + 218) = BYTE2(v42);
  *(_BYTE *)(v8 + 219) = BYTE3(v42);
  *(_BYTE *)(v8 + 220) = BYTE4(v42);
  *(float *)(v8 + 224) = v43;
  *(_OWORD *)(v8 + 240) = xmmword_1B2244EC0;
  v44 = objc_msgSend(a1, sel_emission);
  v45 = sub_1B1F552BC(v44, a2, a3, a4);
  v56 = v46;
  v57 = v47;
  v48 = v45;
  v50 = v49;

  *(_OWORD *)(v8 + 64) = v56;
  *(_QWORD *)(v8 + 80) = v48;
  *(_BYTE *)(v8 + 88) = v50 & 1;
  *(_BYTE *)(v8 + 89) = BYTE1(v50) & 1;
  *(_BYTE *)(v8 + 90) = BYTE2(v50);
  *(_BYTE *)(v8 + 91) = BYTE3(v50);
  *(_BYTE *)(v8 + 92) = BYTE4(v50);
  *(_OWORD *)(v8 + 96) = v57;
  *(_BYTE *)(v8 + 305) = objc_msgSend(a1, sel_isDoubleSided);
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v51 = sub_1B20C3C0C(140);
  *(_QWORD *)(v51 + 88) = sub_1B2137D90;
  *(_QWORD *)(v51 + 96) = 0;
  swift_release();
  v52 = sub_1B218045C(0x100000000uLL, **(_QWORD **)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues), 0, v51, 0x100000000uLL, -1.0);
  swift_release();
  swift_retain();
  sub_1B1FEC0E4(v52, a2, v8);
  swift_release_n();
  return v52;
}

float sub_1B1F52D94(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  id v20;
  id v21;
  float v23;
  id v24;
  __int128 v25;
  __int128 v26;
  _BYTE v27[24];
  uint64_t v28;

  sub_1B1F532D8(a1, a2, a3, a4, a5);
  if (objc_msgSend(a1, sel_contents))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  v6 = MEMORY[0x1E0DEE9B8];
  v7 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1F55C64((uint64_t)&v25, (uint64_t)v27, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (v28)
  {
    sub_1B1B9DAD4(0, &qword_1EEF613E8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      v8 = sub_1B1BF4070((CGColor *)objc_msgSend(v24, sel_CGColor));
      v23 = *(float *)&v8;
      objc_msgSend(a1, sel_intensity);
      v10 = v9;

      v11 = v10 * v23;
      goto LABEL_16;
    }
  }
  else
  {
    sub_1B1AEA224((uint64_t)v27, (uint64_t)&qword_1ED4BB150, v7, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  }
  if (objc_msgSend(a1, sel_contents))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  sub_1B1F55C64((uint64_t)&v25, (uint64_t)v27, (uint64_t)&qword_1ED4BB150, v6 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (v28)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      objc_msgSend(a1, sel_intensity);
      v11 = *(float *)&v24 * v12;
      goto LABEL_16;
    }
  }
  else
  {
    sub_1B1AEA224((uint64_t)v27, (uint64_t)&qword_1ED4BB150, v6 + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  }
  objc_msgSend(a1, sel_intensity);
  v11 = v13;
LABEL_16:
  if (qword_1EEF573C8 != -1)
    swift_once();
  v14 = qword_1EEFD56B8;
  v15 = objc_msgSend(a1, sel_magnificationFilter);
  if (*(_QWORD *)(v14 + 16))
    sub_1B1DC4D10((uint64_t)v15);
  v16 = objc_msgSend(a1, sel_magnificationFilter);
  if (*(_QWORD *)(v14 + 16))
    sub_1B1DC4D10((uint64_t)v16);
  if (qword_1EEF573D0 != -1)
    swift_once();
  v17 = qword_1EEFD56C0;
  v18 = objc_msgSend(a1, sel_magnificationFilter);
  if (*(_QWORD *)(v17 + 16))
    sub_1B1DC4D10((uint64_t)v18);
  if (qword_1EEF573D8 != -1)
    swift_once();
  v19 = qword_1EEFD56C8;
  v20 = objc_msgSend(a1, sel_wrapS);
  if (*(_QWORD *)(v19 + 16))
    sub_1B1DC4D10((uint64_t)v20);
  v21 = objc_msgSend(a1, sel_wrapT);
  if (*(_QWORD *)(v19 + 16))
    sub_1B1DC4D10((uint64_t)v21);
  return v11;
}

uint64_t sub_1B1F53170@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v13;

  v4 = sub_1B2228110();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v6);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_1B2227FD8() & 1) == 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  sub_1B2227FFC();
  v9 = objc_allocWithZone(MEMORY[0x1E0CB3940]);
  v10 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v11 = objc_msgSend(v9, sel_initWithString_, v10);

  LODWORD(v10) = objc_msgSend(v11, sel_isAbsolutePath);
  if ((_DWORD)v10)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  sub_1B22280B0();
  sub_1B2227FFC();
  sub_1B22280A4();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t sub_1B1F532D8(void *a1, uint64_t a2, char *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t, double);
  uint64_t v42;
  int v43;
  void (*v44)(char *, char *, uint64_t);
  uint64_t v45;
  uint64_t (*v46)(void);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char v54;
  _DWORD *v55;
  unint64_t v56;
  unint64_t v57;
  void (*v58)(unint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  _DWORD *v66;
  void (*v67)(unint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v78;
  char *v79;
  char v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char v87;
  uint64_t v88;
  char *v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  __int128 v104;
  __int128 v105;
  _QWORD v106[3];
  uint64_t v107;

  v100 = a5;
  v95 = a4;
  v96 = a2;
  v97 = a3;
  v6 = sub_1B2228110();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6, v8);
  v94 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10, v11);
  v98 = (char *)&v93 - v12;
  MEMORY[0x1E0C80A78](v13, v14);
  v101 = (uint64_t)&v93 - v15;
  MEMORY[0x1E0C80A78](v16, v17);
  v99 = (char *)&v93 - v18;
  MEMORY[0x1E0C80A78](v19, v20);
  v22 = (char *)&v93 - v21;
  sub_1B1791524(0, (unint64_t *)&qword_1ED4BF720, v23, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  MEMORY[0x1E0C80A78](v24, v25);
  v27 = (char *)&v93 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28, v29);
  v31 = (char *)&v93 - v30;
  MEMORY[0x1E0C80A78](v32, v33);
  v35 = (char *)&v93 - v34;
  v38 = MEMORY[0x1E0C80A78](v36, v37);
  v40 = (char *)&v93 - v39;
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(v7 + 56);
  v41((char *)&v93 - v39, 1, 1, v6, v38);
  if (objc_msgSend(a1, sel_contents))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    v104 = 0u;
    v105 = 0u;
  }
  v42 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1F55C64((uint64_t)&v104, (uint64_t)v106, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (v107)
  {
    v43 = swift_dynamicCast();
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v41)(v35, v43 ^ 1u, 1, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v35, 1, v6) != 1)
    {
      sub_1B1AEA224((uint64_t)v40, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
      v44 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v44(v22, v35, v6);
      v44(v40, v22, v6);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v41)(v40, 0, 1, v6);
      goto LABEL_9;
    }
  }
  else
  {
    sub_1B1AEA224((uint64_t)v106, (uint64_t)&qword_1ED4BB150, v42, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v41)(v35, 1, 1, v6);
  }
  sub_1B1AEA224((uint64_t)v35, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
LABEL_9:
  if (objc_msgSend(a1, sel_contents))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    v104 = 0u;
    v105 = 0u;
  }
  v45 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1F55C64((uint64_t)&v104, (uint64_t)v106, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (v107)
  {
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1B2228050();
      swift_bridgeObjectRelease();
      v46 = MEMORY[0x1E0CAFFF8];
      sub_1B1AEA224((uint64_t)v40, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
      ((void (*)(char *, _QWORD, uint64_t, uint64_t))v41)(v31, 0, 1, v6);
      sub_1B1F55C64((uint64_t)v31, (uint64_t)v40, (uint64_t)&qword_1ED4BF720, (uint64_t)v46, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    }
  }
  else
  {
    sub_1B1AEA224((uint64_t)v106, (uint64_t)&qword_1ED4BB150, v45, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  }
  sub_1B19EC90C((uint64_t)v40, (uint64_t)v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v27, 1, v6) != 1)
  {
    v47 = (uint64_t)v99;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v99, v27, v6);
    v48 = v101;
    sub_1B1F53170(v47, v101);
    v49 = *v100;
    v50 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v51 = (unint64_t)v98;
    v50(v98, v48, v6);
    v52 = *(_QWORD *)(v49 + 40);
    if (*(_QWORD *)(v52 + 16))
    {
      swift_bridgeObjectRetain();
      v53 = sub_1B1DC49A8(v51);
      if ((v54 & 1) != 0)
      {
        v55 = (_DWORD *)(*(_QWORD *)(v52 + 56) + 8 * v53);
        v56 = v51;
        LODWORD(v51) = *v55;
        v57 = v55[1];
        swift_bridgeObjectRelease();
        v58 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
        v58(v56, v6);
        v58(v101, v6);
        v58((unint64_t)v99, v6);
LABEL_36:
        sub_1B1AEA224((uint64_t)v40, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
        return v51 | (v57 << 32);
      }
      swift_bridgeObjectRelease();
    }
    v97 = v40;
    v67 = *(void (**)(unint64_t, uint64_t))(v7 + 8);
    v67(v51, v6);
    v68 = v95;
    v69 = **(_QWORD **)(v96 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
    v70 = sub_1B20F4600();
    MEMORY[0x1E0C80A78](v70, v71);
    v72 = v101;
    *(&v93 - 4) = v101;
    *((_WORD *)&v93 - 12) = 0;
    *(&v93 - 2) = v68;
    LOBYTE(v106[0]) = 1;
    v51 = sub_1B1F4EF68(v73, 0x100000000uLL, (uint64_t)sub_1B1BDB640, (uint64_t)(&v93 - 6), v69);
    swift_bridgeObjectRelease();
    v57 = HIDWORD(v51);
    sub_1B20FAD54(v68, v51);
    v74 = v100;
    v75 = *v100;
    v76 = (uint64_t)v94;
    v50(v94, v72, v6);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v106[0] = *(_QWORD *)(v75 + 40);
    *(_QWORD *)(v75 + 40) = 0x8000000000000000;
    sub_1B1B88740(v51, v76, isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v75 + 40) = v106[0];
    swift_bridgeObjectRelease();
    v67(v76, v6);
    v78 = *v74;
    v79 = *(char **)(*v74 + 64);
    v80 = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v78 + 64) = v79;
    if ((v80 & 1) == 0)
    {
      v79 = sub_1B1C63D98(0, *((_QWORD *)v79 + 2) + 1, 1, v79);
      *(_QWORD *)(v78 + 64) = v79;
    }
    v82 = *((_QWORD *)v79 + 2);
    v81 = *((_QWORD *)v79 + 3);
    v40 = v97;
    if (v82 >= v81 >> 1)
      v79 = sub_1B1C63D98(v81 > 1, v82 + 1, 1, v79);
    *((_QWORD *)v79 + 2) = v82 + 1;
    *(_QWORD *)&v79[8 * v82 + 32] = v51;
    *(_QWORD *)(v78 + 64) = v79;
    v67(v101, v6);
    v67((unint64_t)v99, v6);
    goto LABEL_36;
  }
  sub_1B1AEA224((uint64_t)v27, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  if (objc_msgSend(a1, sel_contents))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    v104 = 0u;
    v105 = 0u;
  }
  v59 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1F55C64((uint64_t)&v104, (uint64_t)v106, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (!v107)
  {
    sub_1B1AEA224((uint64_t)v106, (uint64_t)&qword_1ED4BB150, v59, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
    goto LABEL_29;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_29:
    sub_1B1AEA224((uint64_t)v40, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
    v57 = 0;
    LODWORD(v51) = -1;
    return v51 | (v57 << 32);
  }
  v60 = v102;
  v61 = v103;
  v62 = *v100;
  v63 = *(_QWORD *)(*v100 + 32);
  if (*(_QWORD *)(v63 + 16))
  {
    sub_1B1A0DC90(v102, v103);
    swift_bridgeObjectRetain();
    v64 = sub_1B1DC4BEC(v60, v61);
    if ((v65 & 1) != 0)
    {
      v66 = (_DWORD *)(*(_QWORD *)(v63 + 56) + 8 * v64);
      LODWORD(v51) = *v66;
      v57 = v66[1];
      swift_bridgeObjectRelease();
      sub_1B1A0DADC(v60, v61);
      sub_1B1AEA224((uint64_t)v40, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
      sub_1B1A0DADC(v60, v61);
      return v51 | (v57 << 32);
    }
    swift_bridgeObjectRelease();
    sub_1B1A0DADC(v60, v61);
  }
  v84 = v95;
  v85 = **(_QWORD **)(v96 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  v86 = sub_1B20F4600();
  sub_1B1A0DC90(v60, v61);
  LOBYTE(v106[0]) = 1;
  v51 = sub_1B2181440((uint64_t)v86, 0x100000000uLL, v85, v60, v61);
  v57 = HIDWORD(v51);
  sub_1B1A0DADC(v60, v61);
  swift_bridgeObjectRelease();
  sub_1B20FAD54(v84, v51);
  sub_1B1A0DC90(v60, v61);
  v87 = swift_isUniquelyReferenced_nonNull_native();
  v106[0] = *(_QWORD *)(v62 + 32);
  *(_QWORD *)(v62 + 32) = 0x8000000000000000;
  sub_1B1B88620(v51, v60, v61, v87);
  *(_QWORD *)(v62 + 32) = v106[0];
  swift_bridgeObjectRelease();
  sub_1B1A0DADC(v60, v61);
  v88 = *v100;
  v89 = *(char **)(*v100 + 64);
  v90 = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v88 + 64) = v89;
  if ((v90 & 1) == 0)
  {
    v89 = sub_1B1C63D98(0, *((_QWORD *)v89 + 2) + 1, 1, v89);
    *(_QWORD *)(v88 + 64) = v89;
  }
  v92 = *((_QWORD *)v89 + 2);
  v91 = *((_QWORD *)v89 + 3);
  if (v92 >= v91 >> 1)
    v89 = sub_1B1C63D98(v91 > 1, v92 + 1, 1, v89);
  *((_QWORD *)v89 + 2) = v92 + 1;
  *(_QWORD *)&v89[8 * v92 + 32] = v51;
  *(_QWORD *)(v88 + 64) = v89;
  sub_1B1A0DADC(v60, v61);
  sub_1B1AEA224((uint64_t)v40, (uint64_t)&qword_1ED4BF720, (uint64_t)MEMORY[0x1E0CAFFF8], (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1791524);
  return v51 | (v57 << 32);
}

_QWORD *sub_1B1F53CF0()
{
  _QWORD *result;

  result = sub_1B1B984DC((uint64_t)&unk_1E6386050);
  qword_1EEFD56B8 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1F53D14()
{
  _QWORD *result;

  result = sub_1B1B98598((uint64_t)&unk_1E63860A0);
  qword_1EEFD56C0 = (uint64_t)result;
  return result;
}

_QWORD *sub_1B1F53D38()
{
  _QWORD *result;

  result = sub_1B1B985AC((uint64_t)&unk_1E6385FF0);
  qword_1EEFD56C8 = (uint64_t)result;
  return result;
}

uint64_t type metadata accessor for VFXCoreImporter()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VFXCoreImporter.AnimationInfo()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for VFXCoreImporter.VFXImporterContext()
{
  return objc_opt_self();
}

uint64_t sub_1B1F53DBC(char *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  void *v6;
  _QWORD *inited;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;

  v5 = sub_1B1F54BC4((uint64_t)a1, a2);
  if (!v5)
    return 0;
  v6 = (void *)v5;
  type metadata accessor for VFXCoreImporter.VFXImporterContext();
  inited = (_QWORD *)swift_initStackObject();
  v8 = MEMORY[0x1E0DEE9D8];
  inited[2] = sub_1B1B81090(MEMORY[0x1E0DEE9D8]);
  inited[3] = sub_1B1B811A0(v8);
  inited[4] = sub_1B1B812B0(v8);
  inited[5] = sub_1B1B813AC(v8);
  inited[6] = v8;
  inited[7] = 0;
  inited[8] = v8;
  v18 = inited;
  v9 = sub_1B1F501DC(v6, a3, a1, (uint64_t *)&v18);
  if (v9 == 0xFFFFFFFF
    || (v10 = v9, swift_retain(), v11 = sub_1B1D193AC(v10), v13 = v12, swift_release(), (v13 & 1) != 0))
  {

    swift_release();
    return 0;
  }
  v14 = sub_1B1D16FEC(v11);
  v16 = v15;

  swift_release();
  if (!v16)
    return 0;
  return v14;
}

uint64_t sub_1B1F53EE4(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  return sub_1B1BF9120(*a2, a2[1], a3);
}

_QWORD *sub_1B1F53F10(_QWORD *a1, __n128 *a2, unint64_t a3)
{
  __n128 v4;
  unsigned __int8 v5;

  v4 = *a2;
  v5 = a2[1].n128_u8[0];
  return sub_1B1F573E8(a1, &v4, a3);
}

_QWORD *sub_1B1F53F40(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  return sub_1B1F57694(a1, a3);
}

uint64_t sub_1B1F53F5C(void *a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  __CFString *v9;
  __CFString *v10;
  __CFString *v11;
  __CFString *v12;
  __CFString *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  void *v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  unint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  char *v40;
  int v41;
  uint64_t v42;
  __int16 *v43;
  _WORD *v44;
  unint64_t v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  int v50;
  char *v51;
  __int16 v52;
  id v53;
  id v54;
  unint64_t v55;
  char **v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  int v61;
  int v62;
  char *v63;
  int v64;
  __int16 v65;
  __int16 v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  int v81;
  int v82;
  char *v83;
  int v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  int v89;
  int v90;
  char *v91;
  int v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  int v97;
  int v98;
  char *v99;
  int v100;
  id v101;
  unint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  int v107;
  char *v108;
  __int16 v109;
  uint64_t v110;
  __int128 v111;
  _QWORD *v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  unint64_t v116;
  _QWORD *v117;
  __int128 v118;
  int v119;
  unint64_t v121;
  unint64_t v122;
  __int128 v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  int *v128;
  uint64_t v129;
  uint64_t v130;
  void *v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  unint64_t v136;
  _QWORD *v137;
  id v138;
  uint64_t *v139;
  id v140;
  uint64_t v141;
  id v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  int v148;
  int v149;

  v131 = a1;
  sub_1B1B1F358();
  v128 = v1;
  MEMORY[0x1E0C80A78](v1, v2);
  v127 = (char *)&v121 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1B222820C();
  v125 = *(_QWORD *)(v4 - 8);
  v126 = v4;
  MEMORY[0x1E0C80A78](v4, v5);
  v124 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VertexLayoutDescriptor();
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 16) = 0x1000100000000;
  v134 = inited + 16;
  *(_QWORD *)(inited + 24) = 0x1000100000000;
  *(_QWORD *)(inited + 32) = 0x1000100000000;
  *(_QWORD *)(inited + 40) = 0x1000100000000;
  *(_QWORD *)(inited + 48) = 0x1000100000000;
  *(_QWORD *)(inited + 56) = 0x1000100000000;
  *(_QWORD *)(inited + 64) = 0x1000100000000;
  *(_QWORD *)(inited + 72) = 0x1000100000000;
  *(_QWORD *)(inited + 80) = 0x1000100000000;
  *(_QWORD *)(inited + 88) = 0x1000100000000;
  sub_1B1791524(0, &qword_1EEF613D8, (uint64_t (*)(uint64_t))sub_1B1F54B40, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
  *(_OWORD *)(inited + 96) = 0u;
  v133 = inited + 96;
  *(_OWORD *)(inited + 112) = 0u;
  *(_OWORD *)(inited + 128) = 0u;
  *(_OWORD *)(inited + 144) = 0u;
  *(_OWORD *)(inited + 160) = 0u;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B228E6F0;
  *(_QWORD *)(v8 + 32) = 0;
  *(_QWORD *)(v8 + 40) = CFSTR("kGeometrySourceSemanticPosition");
  *(_OWORD *)(v8 + 48) = xmmword_1B2244C80;
  *(_QWORD *)(v8 + 64) = CFSTR("kGeometrySourceSemanticNormal");
  *(_OWORD *)(v8 + 72) = xmmword_1B2295CA0;
  *(_QWORD *)(v8 + 88) = CFSTR("kGeometrySourceSemanticTangent");
  *(_OWORD *)(v8 + 96) = xmmword_1B228CCD0;
  *(_QWORD *)(v8 + 112) = CFSTR("kGeometrySourceSemanticTexcoord");
  *(_OWORD *)(v8 + 120) = xmmword_1B228CCC0;
  *(_QWORD *)(v8 + 136) = CFSTR("kGeometrySourceSemanticTexcoord");
  *(_OWORD *)(v8 + 144) = xmmword_1B22A3090;
  *(_QWORD *)(v8 + 160) = CFSTR("kGeometrySourceSemanticTexcoord");
  *(_OWORD *)(v8 + 168) = xmmword_1B2245BA0;
  *(_QWORD *)(v8 + 184) = CFSTR("kGeometrySourceSemanticTexcoord");
  *(_OWORD *)(v8 + 192) = xmmword_1B22A30A0;
  *(_QWORD *)(v8 + 208) = CFSTR("kGeometrySourceSemanticColor");
  *(_QWORD *)(v8 + 216) = 0;
  v135 = sub_1B1B98418(v8);
  swift_setDeallocating();
  sub_1B1F54B40();
  v9 = CFSTR("kGeometrySourceSemanticTexcoord");
  v10 = CFSTR("kGeometrySourceSemanticPosition");
  v11 = CFSTR("kGeometrySourceSemanticNormal");
  v12 = CFSTR("kGeometrySourceSemanticTangent");
  v13 = CFSTR("kGeometrySourceSemanticColor");
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v14 = 10;
  v15 = 0;
  v16 = &qword_1E63C8718;
  v121 = 0x80000001B2345670;
  v122 = 0x80000001B2345650;
  v123 = xmmword_1B226D240;
  v132 = 0x80000001B2345620;
  v137 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v17 = v131;
  v18 = v135;
  do
  {
    v21 = *v16++;
    v20 = v21;
    if (v18[2])
    {
      v22 = sub_1B1DC4D10(v20);
      if ((v23 & 1) != 0)
      {
        v141 = v20;
        v139 = v16;
        v24 = v18[7] + 16 * v22;
        v25 = *(_QWORD *)(v24 + 8);
        v26 = *(id *)v24;
        v27 = objc_msgSend(v17, sel_mesh, v121, v122);
        v138 = v26;
        if (v27)
        {
          v28 = v27;
          v29 = objc_msgSend(v27, sel_meshSourcesForSemantic_, v26);

          sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5CC88);
          v30 = sub_1B2228AB8();

          if (!(v30 >> 62))
            goto LABEL_9;
        }
        else
        {
          v30 = MEMORY[0x1E0DEE9D8];
          if (!(MEMORY[0x1E0DEE9D8] >> 62))
          {
LABEL_9:
            if (v25 < *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_10;
            goto LABEL_2;
          }
        }
        swift_bridgeObjectRetain();
        v67 = sub_1B22296AC();
        swift_bridgeObjectRelease();
        if (v25 < v67)
        {
LABEL_10:
          if ((v30 & 0xC000000000000001) != 0)
            v31 = (id)MEMORY[0x1B5E21018](v25, v30);
          else
            v31 = *(id *)(v30 + 8 * v25 + 32);
          v32 = v31;
          v33 = v141;
          swift_bridgeObjectRelease();
          v34 = *(_OWORD *)(inited + 112);
          v35 = *(_OWORD *)(inited + 128);
          v36 = *(_OWORD *)(inited + 144);
          v37 = *(_QWORD *)(inited + 160);
          v38 = *(_DWORD *)(inited + 168);
          v39 = *(_WORD *)(inited + 172);
          v143 = *(_OWORD *)(inited + 96);
          v144 = v34;
          v145 = v35;
          v146 = v36;
          v147 = v37;
          v148 = v38;
          LOWORD(v149) = v39;
          if ((v15 & 0x8000000000000000) != 0)
            goto LABEL_50;
          v140 = v32;
          if (v15 >= 0x10000)
            goto LABEL_50;
          v40 = (char *)&v143 + 8 * v33;
          v41 = *(_DWORD *)v40;
          LOWORD(v40) = *((_WORD *)v40 + 2);
          v42 = v133 + 8 * v33;
          *(_DWORD *)v42 = v41;
          *(_WORD *)(v42 + 4) = (_WORD)v40;
          v43 = (__int16 *)(v42 + 4);
          v136 = v15;
          *(_WORD *)(v42 + 6) = v15;
          v44 = (_WORD *)(v42 + 6);
          v45 = (unint64_t)objc_msgSend(v140, sel_dataOffset);
          v46 = *(_OWORD *)(inited + 112);
          v47 = *(_OWORD *)(inited + 128);
          v48 = *(_OWORD *)(inited + 144);
          v49 = *(_QWORD *)(inited + 160);
          v50 = *(_DWORD *)(inited + 172);
          v143 = *(_OWORD *)(inited + 96);
          v144 = v46;
          v145 = v47;
          v146 = v48;
          v147 = v49;
          v149 = v50;
          if ((v45 & 0x8000000000000000) != 0 || HIDWORD(v45))
            goto LABEL_50;
          v51 = (char *)&v143 + 8 * v33;
          v52 = *((_WORD *)v51 + 2);
          LOWORD(v51) = *((_WORD *)v51 + 3);
          *(_DWORD *)v42 = v45;
          *v43 = v52;
          *v44 = (_WORD)v51;
          v53 = v140;
          if (objc_msgSend(v140, sel_floatComponents))
          {
            v54 = objc_msgSend(v53, sel_componentsPerVector);
            v55 = v136;
            v56 = &selRef_clipWithAnimation_name_;
            switch((unint64_t)v54)
            {
              case 1uLL:
                v57 = *(_OWORD *)(inited + 112);
                v58 = *(_OWORD *)(inited + 128);
                v59 = *(_OWORD *)(inited + 144);
                v60 = *(_QWORD *)(inited + 160);
                v61 = *(_DWORD *)(inited + 168);
                v62 = *(_DWORD *)(inited + 172);
                v143 = *(_OWORD *)(inited + 96);
                v144 = v57;
                v145 = v58;
                v146 = v59;
                v147 = v60;
                v148 = v61;
                v149 = v62;
                v63 = (char *)&v143 + 8 * v141;
                v64 = *(_DWORD *)v63;
                v65 = *((_WORD *)v63 + 3);
                *(_DWORD *)v42 = v64;
                v66 = 28;
                goto LABEL_32;
              case 2uLL:
                v77 = *(_OWORD *)(inited + 112);
                v78 = *(_OWORD *)(inited + 128);
                v79 = *(_OWORD *)(inited + 144);
                v80 = *(_QWORD *)(inited + 160);
                v81 = *(_DWORD *)(inited + 168);
                v82 = *(_DWORD *)(inited + 172);
                v143 = *(_OWORD *)(inited + 96);
                v144 = v77;
                v145 = v78;
                v146 = v79;
                v147 = v80;
                v148 = v81;
                v149 = v82;
                v83 = (char *)&v143 + 8 * v141;
                v84 = *(_DWORD *)v83;
                v65 = *((_WORD *)v83 + 3);
                *(_DWORD *)v42 = v84;
                v66 = 29;
                goto LABEL_32;
              case 3uLL:
                v85 = *(_OWORD *)(inited + 112);
                v86 = *(_OWORD *)(inited + 128);
                v87 = *(_OWORD *)(inited + 144);
                v88 = *(_QWORD *)(inited + 160);
                v89 = *(_DWORD *)(inited + 168);
                v90 = *(_DWORD *)(inited + 172);
                v143 = *(_OWORD *)(inited + 96);
                v144 = v85;
                v145 = v86;
                v146 = v87;
                v147 = v88;
                v148 = v89;
                v149 = v90;
                v91 = (char *)&v143 + 8 * v141;
                v92 = *(_DWORD *)v91;
                v65 = *((_WORD *)v91 + 3);
                *(_DWORD *)v42 = v92;
                v66 = 30;
                goto LABEL_32;
              case 4uLL:
                v93 = *(_OWORD *)(inited + 112);
                v94 = *(_OWORD *)(inited + 128);
                v95 = *(_OWORD *)(inited + 144);
                v96 = *(_QWORD *)(inited + 160);
                v97 = *(_DWORD *)(inited + 168);
                v98 = *(_DWORD *)(inited + 172);
                v143 = *(_OWORD *)(inited + 96);
                v144 = v93;
                v145 = v94;
                v146 = v95;
                v147 = v96;
                v148 = v97;
                v149 = v98;
                v99 = (char *)&v143 + 8 * v141;
                v100 = *(_DWORD *)v99;
                v65 = *((_WORD *)v99 + 3);
                *(_DWORD *)v42 = v100;
                v66 = 31;
LABEL_32:
                *v43 = v66;
                *v44 = v65;
                break;
              default:
                if (qword_1ED4BF430 != -1)
                  swift_once();
                *(_QWORD *)&v143 = 0;
                *((_QWORD *)&v143 + 1) = 0xE000000000000000;
                v130 = qword_1ED4D0FB0;
                swift_retain();
                sub_1B2229430();
                sub_1B2228890();
                v142 = objc_msgSend(v140, sel_componentsPerVector);
                sub_1B2229A0C();
                sub_1B2228890();
                swift_bridgeObjectRelease();
                sub_1B2228890();
                v118 = v143;
                v119 = sub_1B2228E90();
                if (qword_1ED4BF658 != -1)
                  swift_once();
                *(_QWORD *)&v143 = 0;
                swift_retain();
                sub_1B1F1AD70(v119, (uint64_t *)&v143, v118, *((uint64_t *)&v118 + 1));
                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
                break;
            }
          }
          else
          {
            if (qword_1ED4BF430 != -1)
              swift_once();
            v130 = qword_1ED4D0FB0;
            swift_retain();
            v68 = sub_1B2228E90();
            if (qword_1ED4BF658 != -1)
              swift_once();
            v69 = qword_1ED4D0FD0;
            v70 = qword_1ED4BF688;
            swift_retain();
            if (v70 != -1)
              swift_once();
            sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
            v71 = swift_allocObject();
            *(_OWORD *)(v71 + 16) = v123;
            *(_QWORD *)(v71 + 56) = MEMORY[0x1E0DEA968];
            *(_QWORD *)(v71 + 64) = sub_1B1B1F47C();
            *(_QWORD *)(v71 + 32) = 0xD000000000000025;
            *(_QWORD *)(v71 + 40) = v132;
            sub_1B222835C();
            swift_bridgeObjectRelease();
            swift_retain();
            v129 = v69;
            v72 = v124;
            sub_1B2228200();
            v73 = (uint64_t)v127;
            v74 = v128[12];
            v75 = v128[16];
            v76 = &v127[v128[20]];
            (*(void (**)(char *, char *, uint64_t))(v125 + 32))(v127, v72, v126);
            *(_BYTE *)(v73 + v74) = v68;
            *(_QWORD *)(v73 + v75) = 0;
            *(_QWORD *)v76 = 0xD000000000000025;
            *((_QWORD *)v76 + 1) = v132;
            sub_1B2228428();
            swift_release();
            sub_1B1B429AC(v73);
            swift_release();
            swift_release();
            v17 = v131;
            v55 = v136;
            v56 = &selRef_clipWithAnimation_name_;
          }
          v101 = v140;
          v102 = objc_msgSend(v140, v56[175])
               ? (unint64_t)objc_msgSend(v101, v56[175])
               : 4 * (_QWORD)objc_msgSend(v101, sel_componentsPerVector);
          v103 = *(_OWORD *)(inited + 32);
          v104 = *(_OWORD *)(inited + 48);
          v105 = *(_OWORD *)(inited + 64);
          v106 = *(_QWORD *)(inited + 80);
          v107 = *(_DWORD *)(inited + 92);
          v143 = *(_OWORD *)(inited + 16);
          v144 = v103;
          v145 = v104;
          v146 = v105;
          v147 = v106;
          v149 = v107;
          if ((v102 & 0x8000000000000000) != 0 || HIDWORD(v102))
          {
LABEL_50:
            sub_1B222967C();
            __break(1u);
            JUMPOUT(0x1B1F54B30);
          }
          v108 = (char *)&v143 + 8 * v55;
          v109 = *((_WORD *)v108 + 2);
          LOWORD(v108) = *((_WORD *)v108 + 3);
          v110 = v134 + 8 * v55;
          *(_DWORD *)v110 = v102;
          *(_WORD *)(v110 + 4) = v109;
          *(_WORD *)(v110 + 6) = (_WORD)v108;
          *(_QWORD *)&v143 = 0;
          *((_QWORD *)&v143 + 1) = 0xE000000000000000;
          v19 = v101;
          sub_1B2228890();
          v142 = (id)v141;
          type metadata accessor for vfx_vertex_attribute(0);
          sub_1B22295EC();
          v111 = v143;
          v112 = v137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v112 = sub_1B1C6845C(0, v112[2] + 1, 1, v112);
          v114 = v112[2];
          v113 = v112[3];
          v137 = v112;
          if (v114 >= v113 >> 1)
            v137 = sub_1B1C6845C(v113 > 1, v114 + 1, 1, v137);
          v115 = v137;
          v116 = v136 + 1;
          v137[2] = v114 + 1;
          v117 = &v115[3 * v114];
          v15 = v116;
          v117[4] = v19;
          *(_OWORD *)(v117 + 5) = v111;

          v18 = v135;
          goto LABEL_3;
        }
LABEL_2:
        swift_bridgeObjectRelease();
        v19 = v138;
LABEL_3:

        v16 = v139;
      }
    }
    --v14;
  }
  while (v14);
  swift_bridgeObjectRelease();
  return sub_1B1E23AC0((_OWORD *)inited);
}

void sub_1B1F54B40()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1EEF613E0)
  {
    type metadata accessor for vfx_vertex_attribute(255);
    sub_1B1B9A958(255, &qword_1EEF5B490, type metadata accessor for VFXMeshSourceSemantic);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EEF613E0);
  }
}

uint64_t sub_1B1F54BC4(uint64_t a1, _QWORD *a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  id v17;
  uint64_t inited;
  __CFString *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  id v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t *v29;
  int *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  char v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  id v49;
  unsigned int v50;
  void *v51;
  unint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  int *v56;
  uint64_t v57;
  uint64_t *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62[5];

  v59 = a2;
  sub_1B1B1F358();
  v56 = v3;
  MEMORY[0x1E0C80A78](v3, v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_1B222820C();
  v7 = *(_QWORD *)(v55 - 8);
  MEMORY[0x1E0C80A78](v55, v8);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1B2228110();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11, v13);
  v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (void *)objc_opt_self();
  v17 = objc_msgSend(v16, sel_immediateMode);
  objc_msgSend(v16, sel_setImmediateMode_, 1);
  sub_1B1B9DAD4(0, &qword_1EEF613F0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
  sub_1B1F55DE4();
  inited = swift_initStackObject();
  v54 = xmmword_1B226D240;
  *(_OWORD *)(inited + 16) = xmmword_1B226D240;
  *(_QWORD *)(inited + 32) = CFSTR("kSceneSourceCheckConsistency");
  *(_QWORD *)(inited + 64) = MEMORY[0x1E0DEAFA0];
  *(_BYTE *)(inited + 40) = 0;
  v19 = CFSTR("kSceneSourceCheckConsistency");
  v20 = sub_1B1B81550(inited);
  v21 = sub_1B1F50078((uint64_t)v15, (uint64_t)v20);
  v25 = v59;
  v60 = v10;
  v53 = v7;
  if (v21)
  {
    v50 = v17;
    v51 = v16;
    v49 = v21;
    v26 = objc_msgSend(v21, sel_rootNode);
    v27 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (v25)
      v27 = v25;
    v28 = v27[2];
    v48 = v27;
    if (v28)
    {
      v29 = v27 + 4;
      swift_bridgeObjectRetain();
      v52 = 0x80000001B23456C0;
      v30 = v56;
      do
      {
        v37 = *v29++;
        v36 = v37;
        v38 = objc_msgSend(v26, sel_childNodes, v48);
        sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7E0);
        v39 = sub_1B2228AB8();

        if (v39 >> 62)
        {
          swift_bridgeObjectRetain();
          v40 = sub_1B22296AC();
          swift_bridgeObjectRelease();
        }
        else
        {
          v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        swift_bridgeObjectRelease();
        if (v36 >= v40)
        {
          if (qword_1ED4BF430 != -1)
            swift_once();
          v59 = v26;
          v57 = qword_1ED4D0FB0;
          swift_retain();
          v45 = sub_1B2228E90();
          if (qword_1ED4BF658 != -1)
            swift_once();
          v58 = v29;
          v46 = qword_1ED4BF688;
          swift_retain();
          if (v46 != -1)
            swift_once();
          sub_1B1791524(0, (unint64_t *)&qword_1ED4BF700, (uint64_t (*)(uint64_t))sub_1B1BB9F44, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
          v31 = swift_allocObject();
          *(_OWORD *)(v31 + 16) = v54;
          *(_QWORD *)(v31 + 56) = MEMORY[0x1E0DEA968];
          *(_QWORD *)(v31 + 64) = sub_1B1B1F47C();
          v32 = v52;
          *(_QWORD *)(v31 + 32) = 0xD000000000000011;
          *(_QWORD *)(v31 + 40) = v32;
          sub_1B222835C();
          swift_bridgeObjectRelease();
          swift_retain();
          sub_1B2228200();
          v33 = v30[12];
          v34 = v30[16];
          v35 = &v6[v30[20]];
          (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v6, v60, v55);
          v6[v33] = v45;
          *(_QWORD *)&v6[v34] = 0;
          *(_QWORD *)v35 = 0xD000000000000011;
          *((_QWORD *)v35 + 1) = v32;
          v30 = v56;
          sub_1B2228428();
          swift_release();
          sub_1B1B429AC((uint64_t)v6);
          swift_release();
          swift_release();
          v29 = v58;
          v26 = v59;
        }
        else
        {
          v41 = objc_msgSend(v26, sel_childNodes);
          v42 = sub_1B2228AB8();

          if ((v42 & 0xC000000000000001) != 0)
            v43 = (id)MEMORY[0x1B5E21018](v36, v42);
          else
            v43 = *(id *)(v42 + 8 * v36 + 32);
          v44 = v43;
          swift_bridgeObjectRelease();

          v26 = v44;
        }
        --v28;
      }
      while (v28);
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    objc_msgSend(v26, sel_flattenedCopy);
    sub_1B22292EC();
    swift_unknownObjectRelease();
    sub_1B1B9DAD4(0, (unint64_t *)&qword_1ED4BA7E0);
    if (swift_dynamicCast())
    {

      v22 = v61;
      v16 = v51;
      v23 = v50;
    }
    else
    {
      v16 = v51;
      v23 = v50;
      if (qword_1ED4BF430 != -1)
        swift_once();
      swift_retain();
      v47 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v62[0] = 0;
      swift_retain();
      sub_1B1F1AD70(v47, v62, 0xD000000000000017, 0x80000001B23456E0);
      swift_release();

      swift_release();
      v22 = 0;
    }
  }
  else
  {
    v22 = 0;
    v23 = (unint64_t)v17;
  }
  objc_msgSend(v16, sel_setImmediateMode_, v23, v48);
  return v22;
}

uint64_t sub_1B1F55290()
{
  return sub_1B1F55C30();
}

_QWORD *sub_1B1F552A4(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F57694(a1, *(_QWORD *)(v1 + 24));
}

unint64_t sub_1B1F552BC(void *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v17;
  id v18;
  _OWORD v19[2];
  _BYTE v20[24];
  uint64_t v21;
  _QWORD v22[3];
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;

  v22[1] = 0;
  v22[2] = 0;
  v22[0] = 66;
  v23 = -2;
  v25 = 0;
  v26 = 0;
  v24 = 0;
  v27 = 768;
  v5 = sub_1B1F532D8(a1, a2, a3, (uint64_t)v22, a4);
  if (objc_msgSend(a1, sel_contents))
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v19, 0, sizeof(v19));
  }
  v6 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1F55C64((uint64_t)v19, (uint64_t)v20, (uint64_t)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  if (v21)
  {
    sub_1B1B9DAD4(0, &qword_1EEF613E8);
    if ((swift_dynamicCast() & 1) != 0)
    {
      sub_1B1BF4070((CGColor *)objc_msgSend(v18, sel_CGColor));
      objc_msgSend(a1, sel_intensity);
      v17 = v7;

      goto LABEL_9;
    }
  }
  else
  {
    sub_1B1AEA224((uint64_t)v20, (uint64_t)&qword_1ED4BB150, v6, (uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))sub_1B1A02758);
  }
  objc_msgSend(a1, sel_intensity);
LABEL_9:
  if (qword_1EEF573C8 != -1)
    swift_once();
  v8 = qword_1EEFD56B8;
  v9 = objc_msgSend(a1, sel_magnificationFilter, v17);
  if (*(_QWORD *)(v8 + 16))
    sub_1B1DC4D10((uint64_t)v9);
  v10 = objc_msgSend(a1, sel_magnificationFilter);
  if (*(_QWORD *)(v8 + 16))
    sub_1B1DC4D10((uint64_t)v10);
  if (qword_1EEF573D0 != -1)
    swift_once();
  v11 = qword_1EEFD56C0;
  v12 = objc_msgSend(a1, sel_magnificationFilter);
  if (*(_QWORD *)(v11 + 16))
    sub_1B1DC4D10((uint64_t)v12);
  if (qword_1EEF573D8 != -1)
    swift_once();
  v13 = qword_1EEFD56C8;
  v14 = objc_msgSend(a1, sel_wrapS);
  if (*(_QWORD *)(v13 + 16))
    sub_1B1DC4D10((uint64_t)v14);
  v15 = objc_msgSend(a1, sel_wrapT);
  if (*(_QWORD *)(v13 + 16))
    sub_1B1DC4D10((uint64_t)v15);
  return v5;
}

id sub_1B1F55614(void *a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  id result;
  int v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(_BYTE *);
  int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  id v30;

  v2 = a2;
  v4 = HIDWORD(a2);
  switch((unint64_t)objc_msgSend(a1, sel_type))
  {
    case 0uLL:
      result = objc_msgSend(a1, sel_intensity);
      LODWORD(v28) = v6;
      if (v2 != -1 || (_DWORD)v4)
      {
        v7 = swift_retain();
        MEMORY[0x1E0C80A78](v7, v8);
        v9 = (void (*)(_BYTE *))sub_1B1F55CBC;
        goto LABEL_19;
      }
      break;
    case 1uLL:
      objc_msgSend(a1, sel_intensity);
      v12 = v11;
      result = objc_msgSend(a1, sel_attenuationDistance);
      *(_QWORD *)&v28 = __PAIR64__(v13, v12);
      *((_QWORD *)&v28 + 1) = 0x42C800003C23D70ALL;
      if (v2 != -1 || (_DWORD)v4)
      {
        v14 = swift_retain();
        MEMORY[0x1E0C80A78](v14, v15);
        v9 = (void (*)(_BYTE *))sub_1B1F55D30;
        goto LABEL_19;
      }
      break;
    case 2uLL:
      result = objc_msgSend(a1, sel_intensity);
      LODWORD(v28) = v16;
      *(_QWORD *)((char *)&v28 + 4) = 0xC120000041200000;
      HIDWORD(v28) = 1092616192;
      if (v2 != -1 || (_DWORD)v4)
      {
        v17 = swift_retain();
        MEMORY[0x1E0C80A78](v17, v18);
        v9 = (void (*)(_BYTE *))sub_1B1F55CDC;
        goto LABEL_19;
      }
      break;
    case 3uLL:
      objc_msgSend(a1, sel_intensity);
      v20 = v19;
      objc_msgSend(a1, sel_attenuationDistance);
      v22 = v21;
      objc_msgSend(a1, sel_spotInnerAngle);
      v24 = v23;
      result = objc_msgSend(a1, sel_spotOuterAngle);
      *(_QWORD *)&v28 = __PAIR64__(v22, v20);
      *((_QWORD *)&v28 + 1) = __PAIR64__(v24, v25);
      v29 = 0x412000003C23D70ALL;
      if (v2 != -1 || (_DWORD)v4)
      {
        v26 = swift_retain();
        MEMORY[0x1E0C80A78](v26, v27);
        v9 = (void (*)(_BYTE *))sub_1B1F55CF8;
LABEL_19:
        sub_1B1D198D0(0, v9);
        result = (id)swift_release();
      }
      break;
    default:
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v28 = 0;
      *((_QWORD *)&v28 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      sub_1B2228890();
      v30 = objc_msgSend(a1, *(SEL *)(v4 + 2408));
      type metadata accessor for VFXLightType(0);
      sub_1B22295EC();
      v10 = sub_1B2228EA8();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v28 = 0;
      swift_retain();
      sub_1B1F1AD70(v10, (uint64_t *)&v28, 0, 0xE000000000000000);
      swift_release();
      swift_bridgeObjectRelease();
      result = (id)swift_release();
      break;
  }
  return result;
}

void sub_1B1F559D8(void *a1, unint64_t a2)
{
  int v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_BYTE *);
  id v8;
  void *v9;
  float v10;
  float v11;
  float v12;
  float v13;
  uint64_t v14;
  uint64_t v15;

  v2 = a2;
  v4 = HIDWORD(a2);
  if (objc_msgSend(a1, sel_usesOrthographicProjection))
  {
    objc_msgSend(a1, sel_orthographicScale);
    if (v2 != -1 || (_DWORD)v4)
    {
      v5 = swift_retain();
      MEMORY[0x1E0C80A78](v5, v6);
      v7 = (void (*)(_BYTE *))sub_1B1F55DAC;
LABEL_10:
      sub_1B1D198D0(0, v7);
      swift_release();
    }
  }
  else
  {
    v8 = objc_msgSend(a1, sel_depthOfField);
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, sel_fStop);

    }
    objc_msgSend(a1, sel_focalLength);
    objc_msgSend(a1, sel_focusDistance);
    objc_msgSend(a1, sel_sensorHeight);
    v11 = v10 * 0.5;
    objc_msgSend(a1, sel_fieldOfView);
    v13 = tanf((float)((float)(v12 * 3.1416) / 180.0) * 0.5);
    atanf(v11 / (float)(v11 / v13));
    if (v2 != -1 || (_DWORD)v4)
    {
      v14 = swift_retain();
      MEMORY[0x1E0C80A78](v14, v15);
      v7 = (void (*)(_BYTE *))sub_1B1F55D74;
      goto LABEL_10;
    }
  }
}

_QWORD *sub_1B1F55C10(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F5790C(a1, **(_QWORD **)(v1 + 16), *(_QWORD *)(*(_QWORD *)(v1 + 16) + 8), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1F55C30()
{
  uint64_t v0;

  return sub_1B1BF9120(**(_QWORD **)(v0 + 16), *(_QWORD *)(*(_QWORD *)(v0 + 16) + 8), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1B1F55C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, uint64_t, uint64_t, _QWORD))
{
  uint64_t v7;

  v7 = a5(0, a3, a4, MEMORY[0x1E0DEB940]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a2, a1, v7);
  return a2;
}

_QWORD *sub_1B1F55CBC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F56D00(a1, *(_QWORD *)(v1 + 24), **(float **)(v1 + 16));
}

uint64_t sub_1B1F55CDC(uint64_t a1)
{
  return sub_1B1F55D4C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, float, float, float, float))sub_1B1F56E48);
}

_QWORD *sub_1B1F55CF8(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 *v3;
  __n128 v5;
  unint64_t v6;

  v3 = *(__n128 **)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v5 = *v3;
  v6 = v3[1].n128_u64[0];
  return sub_1B1F56FB4(a1, &v5, v2);
}

uint64_t sub_1B1F55D30(uint64_t a1)
{
  return sub_1B1F55D4C(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, float, float, float, float))sub_1B1F57118);
}

uint64_t sub_1B1F55D4C(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, float, float, float, float))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), **(float **)(v2 + 16), *(float *)(*(_QWORD *)(v2 + 16) + 4), *(float *)(*(_QWORD *)(v2 + 16) + 8), *(float *)(*(_QWORD *)(v2 + 16) + 12));
}

_QWORD *sub_1B1F55D74(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  __int128 *v3;
  __int128 v4;
  __int128 v6[3];

  v3 = *(__int128 **)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v4 = v3[1];
  v6[0] = *v3;
  v6[1] = v4;
  v6[2] = v3[2];
  return sub_1B1F57284(a1, v6, v2);
}

_QWORD *sub_1B1F55DAC(_QWORD *a1)
{
  uint64_t v1;
  unint64_t v2;
  __n128 *v3;
  __n128 v5;
  unsigned __int8 v6;

  v3 = *(__n128 **)(v1 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v5 = *v3;
  v6 = v3[1].n128_u8[0];
  return sub_1B1F573E8(a1, &v5, v2);
}

void sub_1B1F55DE4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF613F8)
  {
    sub_1B1B9A958(255, &qword_1EEF5B568, type metadata accessor for VFXWorldLoaderOption);
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF613F8);
  }
}

unint64_t sub_1B1F55E54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF5B560;
  if (!qword_1EEF5B560)
  {
    type metadata accessor for VFXWorldLoaderOption(255);
    result = MEMORY[0x1B5E23E74](&unk_1B226C478, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF5B560);
  }
  return result;
}

uint64_t sub_1B1F55E9C(uint64_t a1, id a2, uint64_t a3, uint64_t a4)
{
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(unint64_t, uint64_t, unsigned int, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float);
  BOOL v20;
  uint64_t v21;
  uint64_t KeyPath;

  v8 = objc_msgSend(a2, sel_keyPath);
  if (!v8)
    goto LABEL_8;
  v9 = v8;
  v10 = sub_1B222874C();
  v12 = v11;

  v13 = v10 == 0x6E6F697469736F70 && v12 == 0xE800000000000000;
  if (!v13 && (sub_1B2229D24() & 1) == 0)
  {
    v20 = v10 == 0x7461746E6569726FLL && v12 == 0xEB000000006E6F69;
    if (v20 || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(a3 + 24);
      KeyPath = swift_getKeyPath();
      sub_1B1F510A4(a2, a1, v21, KeyPath, 1u, a4);
      return swift_release();
    }
    if (v10 == 0x676E4172656C7565 && v12 == 0xEB0000000073656CLL || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a3 + 24);
      v18 = swift_getKeyPath();
      v19 = sub_1B21818C8;
      goto LABEL_10;
    }
    if (v10 == 0x656C616373 && v12 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v17 = *(_QWORD *)(a3 + 24);
      v18 = swift_getKeyPath();
      v19 = sub_1B218193C;
      goto LABEL_10;
    }
LABEL_8:
    sub_1B1A02758(0, &qword_1ED4BAFF0, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_1B226D240;
    sub_1B2229430();
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEA968];
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BA2B0, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
    sub_1B22287AC();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    *(_QWORD *)(v14 + 56) = v15;
    *(_QWORD *)(v14 + 32) = 0xD00000000000001FLL;
    *(_QWORD *)(v14 + 40) = 0x80000001B2345700;
    sub_1B222A048();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  v17 = *(_QWORD *)(a3 + 24);
  v18 = swift_getKeyPath();
  v19 = sub_1B21816E8;
LABEL_10:
  sub_1B1F50A7C(a2, a1, v17, v18, a4, (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))v19);
  return swift_release();
}

uint64_t sub_1B1F56278()
{
  void *v0;
  id v1;
  void *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = objc_msgSend(v0, sel_behaviorGraph);
  if (v1
    && (v2 = v1,
        v3 = (char *)objc_msgSend(v1, sel_entityObject),
        v2,
        v3))
  {
    v4 = *(unsigned int *)&v3[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
    v5 = *(unsigned int *)&v3[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity + 4];

    v6 = v5 << 32;
  }
  else
  {
    v6 = 0;
    v4 = 0xFFFFFFFFLL;
  }
  return v6 | v4;
}

uint64_t sub_1B1F56304(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  uint64_t v24;

  *(_QWORD *)(v15 + 96) = 0;
  *(_QWORD *)(v15 + 104) = 0;
  *(_BYTE *)(v15 + 112) = 1;
  *(_QWORD *)(v15 + 120) = 0;
  *(_QWORD *)(v15 + 128) = 0;
  *(_DWORD *)(v15 + 205) = 16777472;
  v16 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v15 + 216) = 0;
  *(_QWORD *)(v15 + 16) = a1;
  *(_QWORD *)(v15 + 24) = a2;
  v17 = MEMORY[0x1E0DEB188];
  *(_QWORD *)(v15 + 32) = a9;
  *(_QWORD *)(v15 + 40) = v17;
  *(_QWORD *)(v15 + 48) = 0;
  *(_BYTE *)(v15 + 56) = 1;
  *(_WORD *)(v15 + 58) = a15 | 0x480;
  *(_QWORD *)(v15 + 64) = 0;
  *(_QWORD *)(v15 + 72) = 0;
  *(_QWORD *)(v15 + 136) = 0;
  *(_QWORD *)(v15 + 144) = a11;
  *(_QWORD *)(v15 + 152) = a12;
  *(_QWORD *)(v15 + 160) = v16;
  v18 = *(double *)&a3;
  v19 = v18;
  if ((a4 & 1) != 0)
    v19 = 0.0;
  *(float *)(v15 + 184) = v19;
  *(_BYTE *)(v15 + 188) = a4 & 1;
  v20 = *(double *)&a5;
  v21 = v20;
  if ((a6 & 1) != 0)
    v21 = 0.0;
  *(float *)(v15 + 192) = v21;
  *(_BYTE *)(v15 + 196) = a6 & 1;
  v22 = *(double *)&a7;
  v23 = v22;
  if ((a8 & 1) != 0)
    v23 = 0.0;
  *(float *)(v15 + 200) = v23;
  *(_BYTE *)(v15 + 204) = a8 & 1;
  *(_WORD *)(v15 + 210) = a15 | 0x480;
  *(_QWORD *)(v15 + 168) = a13;
  *(_QWORD *)(v15 + 176) = a14;
  *(_QWORD *)(v15 + 80) = a10;
  *(_QWORD *)(v15 + 88) = &off_1E63754E8;
  v24 = *(_QWORD *)(v15 + 64);
  *(_QWORD *)(v15 + 64) = sub_1B1F77810;
  *(_QWORD *)(v15 + 72) = a10;
  swift_retain();
  sub_1B19E5A18(v24);
  return v15;
}

uint64_t sub_1B1F56418(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, __int16 a14)
{
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  __int128 v46;
  char v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[32];
  _OWORD v51[2];

  v41 = a5 & 1;
  v42 = a7 & 1;
  v43 = a9 & 1;
  sub_1B1A0DCD4(a1, (uint64_t)&v46);
  if ((_QWORD)v48)
  {
    v17 = sub_1B1A0DDAC(&v46, v51);
    MEMORY[0x1E0C80A78](v17, v18);
    v19 = MEMORY[0x1E0DEB188];
    KeyPath = swift_getKeyPath();
    v40 = a8;
    MEMORY[0x1E0C80A78](KeyPath, v21);
    v22 = swift_getKeyPath();
    sub_1B1A02758(0, &qword_1EEF61498, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
    v23 = (_QWORD *)swift_allocObject();
    v23[4] = sub_1B1F777AC;
    v23[5] = v22;
    v23[2] = sub_1B1F777B4;
    v23[3] = v22;
    v23[6] = v22;
    sub_1B1A02758(0, &qword_1ED4B80F8, v19, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
    v24 = (_QWORD *)swift_allocObject();
    v24[4] = sub_1B1F777BC;
    v24[5] = v23;
    v24[2] = sub_1B1F777C4;
    v24[3] = v23;
    v24[6] = v22;
    sub_1B1A02864((uint64_t)v51, (uint64_t)v50);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain_n();
    swift_retain();
    swift_retain();
    swift_dynamicCast();
    v26 = *((_QWORD *)&v46 + 1);
    v25 = v46;
    LOBYTE(v23) = v47;
    v39 = v48;
    v27 = v49;
    type metadata accessor for BindingPropertyDescription();
    v28 = swift_allocObject();
    *(_OWORD *)(v28 + 224) = __PAIR128__(v26, v25);
    *(_BYTE *)(v28 + 240) = (_BYTE)v23;
    *(_OWORD *)(v28 + 248) = v39;
    *(_QWORD *)(v28 + 264) = v27;
    v29 = sub_1B1F56304(a2, a3, a4, v41, a6, v42, v40, v43, KeyPath, (uint64_t)v24, a10, a11, a12, a13, a14);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v51);
  }
  else
  {
    v30 = sub_1B1A0DD70((uint64_t)&v46);
    MEMORY[0x1E0C80A78](v30, v31);
    v32 = MEMORY[0x1E0DEB188];
    v33 = swift_getKeyPath();
    MEMORY[0x1E0C80A78](v33, v34);
    v35 = swift_getKeyPath();
    sub_1B1A02758(0, &qword_1EEF61498, MEMORY[0x1E0DEE9B8] + 8, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
    v36 = (_QWORD *)swift_allocObject();
    v36[4] = sub_1B1F777AC;
    v36[5] = v35;
    v36[2] = sub_1B1F777B4;
    v36[3] = v35;
    v36[6] = v35;
    sub_1B1A02758(0, &qword_1ED4B80F8, v32, (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
    v37 = (_QWORD *)swift_allocObject();
    v37[4] = sub_1B1F777BC;
    v37[5] = v36;
    v37[2] = sub_1B1F777C4;
    v37[3] = v36;
    v37[6] = v35;
    type metadata accessor for PropertyDescription();
    swift_allocObject();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain_n();
    return sub_1B1F56304(a2, a3, a4, v41, a6, v42, a8, v43, v33, (uint64_t)v37, a10, a11, a12, a13, a14);
  }
  return v29;
}

_QWORD *sub_1B1F568C0(_QWORD *result, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __n128 *v12;
  _DWORD v17[2];
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  char v22;

  v7 = result;
  v8 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v9 = *result;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C78, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF77A8(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v7 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v17[0] = a2;
      v17[1] = v8;
      v18 = v9;
      sub_1B1C1FE78(0, &qword_1EEF61560, (uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1E6382C00);
      v20 = v11;
      v21 = &off_1E6383838;
      v12 = (__n128 *)swift_allocObject();
      v19 = v12;
      v12[1] = a3;
      v12[2] = a4;
      v12[3] = a5;
      v12[4] = a6;
      v12[5].n128_u8[0] = !v10;
      v22 = 12;
      sub_1B1E2DB30((uint64_t)v17);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v17);
    }
  }
  return result;
}

_QWORD *sub_1B1F56A34(_QWORD *result, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __n128 *v12;
  _DWORD v17[2];
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  char v22;

  v7 = result;
  v8 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v9 = *result;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C((uint64_t)&type metadata for InverseWorldTransform, (uint64_t)&off_1E63A3348, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF77B4(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v7 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v17[0] = a2;
      v17[1] = v8;
      v18 = v9;
      sub_1B1C1FE78(0, &qword_1EEF61558, (uint64_t)&type metadata for InverseWorldTransform, (uint64_t)&off_1E63A3318);
      v20 = v11;
      v21 = &off_1E6383838;
      v12 = (__n128 *)swift_allocObject();
      v19 = v12;
      v12[1] = a3;
      v12[2] = a4;
      v12[3] = a5;
      v12[4] = a6;
      v12[5].n128_u8[0] = !v10;
      v22 = 12;
      sub_1B1E2DB30((uint64_t)v17);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v17);
    }
  }
  return result;
}

_QWORD *sub_1B1F56BA8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _DWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _UNKNOWN **v18;
  char v19;

  v7 = result;
  v8 = HIDWORD(a4);
  if (a4 != 0xFFFFFFFF)
  {
    v9 = *result;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C((uint64_t)&type metadata for VFXTag, (uint64_t)&off_1E63BD650, a4);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF7B10(a2, a3, a4);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v7 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v12[0] = a4;
      v12[1] = v8;
      v13 = v9;
      sub_1B1C1FE78(0, (unint64_t *)&qword_1EEF61568, (uint64_t)&type metadata for VFXTag, (uint64_t)&off_1E63BD620);
      v17 = v11;
      v18 = &off_1E6383838;
      v14 = a2;
      v15 = a3;
      v16 = !v10;
      v19 = 12;
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)v12);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v12);
    }
  }
  return result;
}

_QWORD *sub_1B1F56D00(_QWORD *result, unint64_t a2, float a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v5 = result;
  v6 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E63743F8, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF8188(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a2;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF614D0, (uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1E6374380);
      v14 = v9;
      v15 = &off_1E6383838;
      v12 = a3;
      v13 = !v8;
      v16 = 12;
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

_QWORD *sub_1B1F56E48(_QWORD *result, unint64_t a2, float a3, float a4, float a5, float a6)
{
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _DWORD v16[2];
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  _UNKNOWN **v24;
  char v25;

  v11 = result;
  v12 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v13 = *result;
    swift_unownedRetainStrong();
    v14 = sub_1B1FD568C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387110, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF8194(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v11 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v16[0] = a2;
      v16[1] = v12;
      v17 = v13;
      sub_1B1C1FE78(0, &qword_1EEF614C8, (uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1E6387098);
      v23 = v15;
      v24 = &off_1E6383838;
      v18 = a3;
      v19 = a4;
      v20 = a5;
      v21 = a6;
      v22 = !v14;
      v25 = 12;
      sub_1B1E2DB30((uint64_t)v16);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v16);
    }
  }
  return result;
}

_QWORD *sub_1B1F56FB4(_QWORD *result, __n128 *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5208, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF81A0(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v11[0] = a3;
      v11[1] = v6;
      v12 = v7;
      sub_1B1C1FE78(0, &qword_1EEF614C0, (uint64_t)&type metadata for SpotLight, (uint64_t)&off_1E63C5190);
      v14 = v9;
      v15 = &off_1E6383838;
      v10 = swift_allocObject();
      v13 = v10;
      *(__n128 *)(v10 + 16) = *a2;
      *(_QWORD *)(v10 + 32) = a2[1].n128_u64[0];
      *(_BYTE *)(v10 + 40) = !v8;
      v16 = 12;
      sub_1B1E2DB30((uint64_t)v11);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v11);
    }
  }
  return result;
}

_QWORD *sub_1B1F57118(_QWORD *result, unint64_t a2, float a3, float a4, float a5, float a6)
{
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _DWORD v16[2];
  uint64_t v17;
  float v18;
  float v19;
  float v20;
  float v21;
  BOOL v22;
  uint64_t v23;
  _UNKNOWN **v24;
  char v25;

  v11 = result;
  v12 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v13 = *result;
    swift_unownedRetainStrong();
    v14 = sub_1B1FD568C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EBB8, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF828C(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v11 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v16[0] = a2;
      v16[1] = v12;
      v17 = v13;
      sub_1B1C1FE78(0, &qword_1EEF614B8, (uint64_t)&type metadata for PointLight, (uint64_t)&off_1E636EB40);
      v23 = v15;
      v24 = &off_1E6383838;
      v18 = a3;
      v19 = a4;
      v20 = a5;
      v21 = a6;
      v22 = !v14;
      v25 = 12;
      sub_1B1E2DB30((uint64_t)v16);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v16);
    }
  }
  return result;
}

_QWORD *sub_1B1F57284(_QWORD *result, __int128 *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  _DWORD v12[2];
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _UNKNOWN **v16;
  char v17;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EE48, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF83B8(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v12[0] = a3;
      v12[1] = v6;
      v13 = v7;
      sub_1B1C1FE78(0, &qword_1EEF614E0, (uint64_t)&type metadata for PerspectiveCamera, (uint64_t)&off_1E638EDD0);
      v15 = v9;
      v16 = &off_1E6383838;
      v10 = swift_allocObject();
      v14 = v10;
      v11 = a2[1];
      *(_OWORD *)(v10 + 16) = *a2;
      *(_OWORD *)(v10 + 32) = v11;
      *(_OWORD *)(v10 + 48) = a2[2];
      *(_BYTE *)(v10 + 64) = !v8;
      v17 = 12;
      sub_1B1E2DB30((uint64_t)v12);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v12);
    }
  }
  return result;
}

_QWORD *sub_1B1F573E8(_QWORD *result, __n128 *a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  unsigned __int32 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD v13[2];
  uint64_t v14;
  unsigned __int32 v15;
  char v16;
  unint64_t v17;
  char v18;
  BOOL v19;
  uint64_t v20;
  _UNKNOWN **v21;
  char v22;
  _BOOL4 v23;

  v5 = result;
  v6 = HIDWORD(a3);
  v7 = a2->n128_u32[0];
  v8 = a2->n128_u8[4];
  v9 = a2->n128_u64[1];
  v10 = a2[1].n128_u8[0];
  if (a3 != 0xFFFFFFFF)
  {
    v11 = *result;
    swift_unownedRetainStrong();
    v23 = sub_1B1FD568C((uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1E6393C48, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF84A4(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v13[0] = a3;
      v13[1] = v6;
      v14 = v11;
      sub_1B1C1FE78(0, &qword_1EEF614D8, (uint64_t)&type metadata for OrthographicCamera, (uint64_t)&off_1E6393BD0);
      v20 = v12;
      v21 = &off_1E6383838;
      v15 = v7;
      v16 = v8 & 1;
      v17 = v9;
      v18 = v10 & 1;
      v19 = !v23;
      v22 = 12;
      sub_1B1E2DB30((uint64_t)v13);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v13);
    }
  }
  return result;
}

_QWORD *sub_1B1F57560(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _UNKNOWN **v12;
  char v13;

  v3 = result;
  v4 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v5 = *result;
    swift_unownedRetainStrong();
    v6 = sub_1B1FD568C((uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CBB0, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF8590(a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v8[0] = a2;
      v8[1] = v4;
      v9 = v5;
      sub_1B1C1FE78(0, &qword_1EEF614E8, (uint64_t)&type metadata for HiddenOrHasHiddenAncestor, (uint64_t)&off_1E636CB80);
      v11 = v7;
      v12 = &off_1E6383838;
      v10 = !v6;
      v13 = 12;
      sub_1B1E2DB30((uint64_t)v8);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v8);
    }
  }
  return result;
}

_QWORD *sub_1B1F57694(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _UNKNOWN **v12;
  char v13;

  v3 = result;
  v4 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v5 = *result;
    swift_unownedRetainStrong();
    v6 = sub_1B1FD568C((uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB290, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF859C(a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v8[0] = a2;
      v8[1] = v4;
      v9 = v5;
      sub_1B1C1FE78(0, &qword_1EEF614F0, (uint64_t)&type metadata for Hidden, (uint64_t)&off_1E63BB218);
      v11 = v7;
      v12 = &off_1E6383838;
      v10 = !v6;
      v13 = 12;
      sub_1B1E2DB30((uint64_t)v8);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v8);
    }
  }
  return result;
}

_QWORD *sub_1B1F577C8(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB960, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF8088(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a3;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF614F8, (uint64_t)&type metadata for Parent, (uint64_t)&off_1E63BB8E8);
      v14 = v9;
      v15 = &off_1E6383838;
      v12 = a2;
      v13 = !v8;
      v16 = 12;
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

_QWORD *sub_1B1F5790C(_QWORD *result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _DWORD v12[2];
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  _UNKNOWN **v18;
  char v19;

  v7 = result;
  v8 = HIDWORD(a4);
  if (a4 != 0xFFFFFFFF)
  {
    v9 = *result;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C((uint64_t)&type metadata for ModelRenderer, (uint64_t)&off_1E637B7C8, a4);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF8094(a2, a3, a4);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v7 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v12[0] = a4;
      v12[1] = v8;
      v13 = v9;
      sub_1B1C1FE78(0, &qword_1EEF614B0, (uint64_t)&type metadata for ModelRenderer, (uint64_t)&off_1E637B750);
      v17 = v11;
      v18 = &off_1E6383838;
      v14 = a2;
      v15 = a3;
      v16 = !v10;
      v19 = 12;
      sub_1B1E2DB30((uint64_t)v12);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v12);
    }
  }
  return result;
}

_QWORD *sub_1B1F57A68(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  _DWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;
  char v22;

  v11 = result;
  v12 = HIDWORD(a6);
  if (a6 != 0xFFFFFFFF)
  {
    v13 = *result;
    swift_unownedRetainStrong();
    v16 = sub_1B1FD568C((uint64_t)&type metadata for MeshReferenceAsset, (uint64_t)&off_1E63927D0, a6);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF85A8(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v11 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v17[0] = a6;
      v17[1] = v12;
      v18 = v13;
      sub_1B1C1FE78(0, &qword_1EEF61500, (uint64_t)&type metadata for MeshReferenceAsset, (uint64_t)&off_1E6392758);
      v20 = v14;
      v21 = &off_1E6383838;
      v15 = swift_allocObject();
      v19 = v15;
      *(_QWORD *)(v15 + 16) = a2;
      *(_QWORD *)(v15 + 24) = a3;
      *(_QWORD *)(v15 + 32) = a4;
      *(_QWORD *)(v15 + 40) = a5;
      *(_BYTE *)(v15 + 48) = !v16;
      v22 = 12;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B1E2DB30((uint64_t)v17);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v17);
    }
  }
  return result;
}

_QWORD *sub_1B1F57BFC(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _UNKNOWN **v12;
  char v13;

  v3 = result;
  v4 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v5 = *result;
    swift_unownedRetainStrong();
    v6 = sub_1B1FD568C((uint64_t)&type metadata for Beamed, (uint64_t)&off_1E63BB030, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF86D0(a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v8[0] = a2;
      v8[1] = v4;
      v9 = v5;
      sub_1B1C1FE78(0, &qword_1EEF61550, (uint64_t)&type metadata for Beamed, (uint64_t)&off_1E63BB000);
      v11 = v7;
      v12 = &off_1E6383838;
      v10 = !v6;
      v13 = 12;
      sub_1B1E2DB30((uint64_t)v8);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v8);
    }
  }
  return result;
}

_QWORD *sub_1B1F57D30(_QWORD *result, unint64_t a2, float a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  float v12;
  BOOL v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v5 = result;
  v6 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for Opacity, (uint64_t)&off_1E63BE098, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF86DC(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a2;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF61548, (uint64_t)&type metadata for Opacity, (uint64_t)&off_1E63BE068);
      v14 = v9;
      v15 = &off_1E6383838;
      v12 = a3;
      v13 = !v8;
      v16 = 12;
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

_QWORD *sub_1B1F57E78(_QWORD *result, unint64_t a2, __n128 a3)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  __n128 *v9;
  _DWORD v11[2];
  uint64_t v12;
  __n128 *v13;
  uint64_t v14;
  _UNKNOWN **v15;
  char v16;

  v4 = result;
  v5 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v6 = *result;
    swift_unownedRetainStrong();
    v7 = sub_1B1FD568C((uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC5D0, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF7FA8(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v4 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v11[0] = a2;
      v11[1] = v5;
      v12 = v6;
      sub_1B1C1FE78(0, &qword_1EEF61540, (uint64_t)&type metadata for Scale3, (uint64_t)&off_1E63BC558);
      v14 = v8;
      v15 = &off_1E6383838;
      v9 = (__n128 *)swift_allocObject();
      v13 = v9;
      v9[1] = a3;
      v9[2].n128_u8[0] = !v7;
      v16 = 12;
      sub_1B1E2DB30((uint64_t)v11);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v11);
    }
  }
  return result;
}

_QWORD *sub_1B1F57FD4(_QWORD *result, unint64_t a2, __n128 a3, __n128 a4)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  __n128 *v10;
  _DWORD v13[2];
  uint64_t v14;
  __n128 *v15;
  uint64_t v16;
  _UNKNOWN **v17;
  char v18;

  v5 = result;
  v6 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for LocalAABB, (uint64_t)&off_1E63C41A0, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF87E4(a2, a3, a4);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v13[0] = a2;
      v13[1] = v6;
      v14 = v7;
      sub_1B1C1FE78(0, &qword_1EEF61508, (uint64_t)&type metadata for LocalAABB, (uint64_t)&off_1E63C4128);
      v16 = v9;
      v17 = &off_1E6383838;
      v10 = (__n128 *)swift_allocObject();
      v15 = v10;
      v10[1] = a3;
      v10[2] = a4;
      v10[3].n128_u8[0] = !v8;
      v18 = 12;
      sub_1B1E2DB30((uint64_t)v13);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v13);
    }
  }
  return result;
}

_QWORD *sub_1B1F58134(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  char v15;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD850, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF88C4(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a3;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF61530, (uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD7D8);
      v13 = v9;
      v14 = &off_1E6383838;
      v12 = swift_allocObject();
      sub_1B1C1F6E4(a2, v12 + 16);
      *(_BYTE *)(v12 + 56) = !v8;
      v15 = 12;
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

_QWORD *sub_1B1F58298(_QWORD *result, uint64_t a2, unint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _UNKNOWN **v14;
  char v15;

  v5 = result;
  v6 = HIDWORD(a3);
  if (a3 != 0xFFFFFFFF)
  {
    v7 = *result;
    swift_unownedRetainStrong();
    v8 = sub_1B1FD568C((uint64_t)&type metadata for NodeTransformController, (uint64_t)&off_1E63AAF78, a3);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF88D0(a2, a3);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v5 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v10[0] = a3;
      v10[1] = v6;
      v11 = v7;
      sub_1B1C1FE78(0, &qword_1EEF61538, (uint64_t)&type metadata for NodeTransformController, (uint64_t)&off_1E63AAF00);
      v13 = v9;
      v14 = &off_1E6383838;
      v12 = swift_allocObject();
      sub_1B1C1F794(a2, v12 + 16);
      *(_BYTE *)(v12 + 56) = !v8;
      v15 = 12;
      sub_1B1E2DB30((uint64_t)v10);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v10);
    }
  }
  return result;
}

_QWORD *sub_1B1F583FC(_QWORD *result, unint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _DWORD v8[2];
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  _UNKNOWN **v12;
  char v13;

  v3 = result;
  v4 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v5 = *result;
    swift_unownedRetainStrong();
    v6 = sub_1B1FD568C((uint64_t)&type metadata for Authoring, (uint64_t)&off_1E63C3488, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF88DC(a2);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v3 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v8[0] = a2;
      v8[1] = v4;
      v9 = v5;
      sub_1B1C1FE78(0, (unint64_t *)&unk_1EEF61570, (uint64_t)&type metadata for Authoring, (uint64_t)&off_1E63C3458);
      v11 = v7;
      v12 = &off_1E6383838;
      v10 = !v6;
      v13 = 12;
      sub_1B1E2DB30((uint64_t)v8);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v8);
    }
  }
  return result;
}

_QWORD *sub_1B1F58530(_QWORD *result, unint64_t a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __n128 *v12;
  _DWORD v17[2];
  uint64_t v18;
  __n128 *v19;
  uint64_t v20;
  _UNKNOWN **v21;
  char v22;

  v7 = result;
  v8 = HIDWORD(a2);
  if (a2 != 0xFFFFFFFF)
  {
    v9 = *result;
    swift_unownedRetainStrong();
    v10 = sub_1B1FD568C((uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A420, a2);
    swift_release();
    swift_unownedRetainStrong();
    sub_1B1BF89BC(a2, a3, a4, a5, a6);
    swift_release();
    swift_unownedRetainStrong();
    swift_release();
    result = (_QWORD *)swift_unknownObjectUnownedLoadStrong();
    if (result)
      result = (_QWORD *)swift_unknownObjectRelease();
    if (*((_BYTE *)v7 + 24) == 1)
    {
      swift_unownedRetainStrong();
      v17[0] = a2;
      v17[1] = v8;
      v18 = v9;
      sub_1B1C1FE78(0, &qword_1EEF61528, (uint64_t)&type metadata for ProjectionMatrix, (uint64_t)&off_1E638A398);
      v20 = v11;
      v21 = &off_1E6383838;
      v12 = (__n128 *)swift_allocObject();
      v19 = v12;
      v12[1] = a3;
      v12[2] = a4;
      v12[3] = a5;
      v12[4] = a6;
      v12[5].n128_u8[0] = !v10;
      v22 = 12;
      sub_1B1E2DB30((uint64_t)v17);
      swift_release();
      return (_QWORD *)sub_1B1ADF058((uint64_t)v17);
    }
  }
  return result;
}

uint64_t sub_1B1F586A4(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    sub_1B216D614();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  sub_1B1F70F08(v6);
  return sub_1B2229538();
}

uint64_t sub_1B1F5871C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = a1;
  v8 = HIDWORD(a1);
  sub_1B1A02758(0, (unint64_t *)&unk_1EEF614A0, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityValueAccessors);
  v10 = v9;
  v11 = swift_allocObject();
  *(_DWORD *)(v11 + 48) = v6;
  *(_DWORD *)(v11 + 52) = v8;
  *(_QWORD *)(v11 + 56) = a2;
  *(_QWORD *)(v11 + 64) = a3;
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = a3;
  *(_DWORD *)(v12 + 24) = v6;
  *(_DWORD *)(v12 + 28) = v8;
  *(_QWORD *)(v12 + 32) = a2;
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = a3;
  *(_DWORD *)(v13 + 24) = v6;
  *(_DWORD *)(v13 + 28) = v8;
  *(_QWORD *)(v13 + 32) = a2;
  *(_QWORD *)(v11 + 16) = sub_1B1F7783C;
  *(_QWORD *)(v11 + 24) = v12;
  *(_QWORD *)(v11 + 32) = sub_1B1AFCDE8;
  *(_QWORD *)(v11 + 40) = v13;
  a4[3] = v10;
  a4[4] = (uint64_t)&off_1E6382A70;
  *a4 = v11;
  return swift_retain_n();
}

uint64_t sub_1B1F58814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v4;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a1 + 32))(&v5, a2, a3);
  if ((v5 & 0x100000000) != 0)
    return MEMORY[0x1E0DEE9D8];
  v4 = v5;
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAF10, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  result = swift_allocObject();
  *(_OWORD *)(result + 16) = xmmword_1B226D240;
  *(_DWORD *)(result + 32) = v4;
  return result;
}

char *sub_1B1F588A4()
{
  return aVisible_0;
}

uint64_t sub_1B1F588B0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[7];

  v3 = v2;
  type metadata accessor for VFXBridgingRemapAndResolveContext();
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = a1;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B1E2C80C(4, v3, v3, v6);
  if (!a1)
    return swift_release();
  v8 = objc_msgSend(v7, sel_assetRegistry);
  v9 = objc_msgSend(v8, sel_rootNode);

  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = sub_1B1F77948;
  *(_QWORD *)(v10 + 24) = v6;
  aBlock[4] = sub_1B1F77960;
  aBlock[5] = v10;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1B1DBA948;
  aBlock[3] = &unk_1E63D49C0;
  v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v9, sel_enumerateHierarchyUsingBlock_, v11);

  swift_release();
  _Block_release(v11);
  return swift_release();
}

double sub_1B1F58A40()
{
  uint64_t v0;
  void *v1;
  void *v2;
  double v3;
  double result;
  double v5;

  v1 = (void *)MEMORY[0x1B5E240CC](v0 + 32);
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, sel_worldTransform);
    v5 = v3;

    return v5;
  }
  else
  {
    *(_QWORD *)&result = 1065353216;
  }
  return result;
}

uint64_t sub_1B1F58ABC()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F58AFC()
{
  return sub_1B2228824();
}

uint64_t sub_1B1F58B04()
{
  sub_1B222A06C();
  sub_1B2228824();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F58B40@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  v8[1] = 0;
  swift_unknownObjectWeakInit();
  sub_1B19FA070(a1, a1[3]);
  sub_1B1FF5A30();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return sub_1B1B0D8D0((uint64_t)v8);
  }
  else
  {
    v8[2] = v6;
    v8[3] = v7;
    sub_1B1F78A28(v8, a2);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return sub_1B1F2F2C4((uint64_t)v8);
  }
}

uint64_t sub_1B1F58C10(_QWORD *a1)
{
  sub_1B19FA070(a1, a1[3]);
  return sub_1B1FF5998();
}

uint64_t sub_1B1F58C7C(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16) && *(_QWORD *)(a1 + 24) == *(_QWORD *)(a2 + 24))
    return 1;
  else
    return sub_1B2229D24();
}

void *sub_1B1F58CAC()
{
  void *v0;
  id v1;
  void *v2;
  char *v3;

  v1 = objc_msgSend(v0, sel_behaviorGraph);
  v2 = v1;
  if (v1)
  {
    v3 = (char *)objc_msgSend(v1, sel_entityObject);

    if (v3)
    {
      v2 = *(void **)&v3[OBJC_IVAR____TtC3VFX15VFXEntityObject_entity];
      if (!swift_weakLoadStrong())
      {
        if (*(_QWORD *)&v3[OBJC_IVAR____TtC3VFX15VFXEntityObject_localEntityManager])
        {
          swift_retain();
        }
        else
        {
          type metadata accessor for EntityManager();
          swift_allocObject();
          sub_1B1DA6CC4(0x746C7561666544, 0xE700000000000000, 1, 0);
        }
      }

      swift_release();
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

uint64_t *sub_1B1F58DC0(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *result;
  uint64_t v5;
  int v6;
  _QWORD *v7;
  unsigned int *v8;
  uint64_t v9;
  os_unfair_lock_s *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t (*v42)(_QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  _QWORD *v59;
  uint64_t *v60;
  unsigned int *v61;
  __int128 v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t (*v69)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  BOOL v93;
  uint64_t v94;
  BOOL v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t (*v106)(_QWORD, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  _QWORD *v123;
  uint64_t *v124;
  unsigned int *v125;
  __int128 v126;
  _QWORD *v127;
  uint64_t *v128;
  uint64_t v129;
  int *v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t (*v133)(_QWORD *, uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  size_t v141;
  char *v142;
  char *v143;
  char *v144;
  _QWORD *v145;
  int v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175[3];
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  __int128 v180;
  uint64_t v181[12];
  _OWORD v182[2];
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  _QWORD *v187;
  uint64_t v188;
  __int128 v189;
  __int128 v190;
  uint64_t v191;
  _OWORD v192[2];
  uint64_t v193;
  _BYTE v194[40];
  uint64_t v195;
  int v196;
  char v197;
  uint64_t v198;
  char v199;
  uint64_t v200;

  v3 = *a1;
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v195 = qword_1ED4D09F8;
  v196 = 0;
  v197 = 2;
  v198 = 0;
  v199 = 2;
  v200 = 0;
  swift_retain();
  sub_1B1E8FCE4(v3, (uint64_t)&v195, 0x200000000, v181);
  swift_release();
  result = (uint64_t *)sub_1B1A18378((uint64_t)v181, (uint64_t)v182, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v182[0])
  {
    v189 = v182[0];
    v190 = v182[1];
    v191 = v183;
    if (v188 >= 1)
    {
      v150 = v185;
      if (v185)
      {
        v5 = 0;
        v149 = v184;
        v152 = v187[4];
        v6 = *(unsigned __int8 *)(v186 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v148 = (uint64_t)(v187 + 6);
        v145 = v187 + 13;
        v174 = (_QWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v158 = OBJC_IVAR____TtC3VFX13EntityManager_commandQueues;
        v153 = v187;
        v147 = v187 + 8;
        v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v163 = a2;
        v173 = v3;
        v146 = v6;
        do
        {
          v8 = (unsigned int *)(v149 + 48 * v5);
          v162 = *v8;
          v156 = v8[1];
          v9 = *((_QWORD *)v8 + 5);
          v154 = *((_QWORD *)v8 + 4);
          v155 = *((_QWORD *)v8 + 2);
          v151 = v5;
          if (v6)
          {
            v10 = *(os_unfair_lock_s **)(v9 + 376);
            swift_retain();
            os_unfair_lock_lock(v10);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v152);
          sub_1B1A18378(v148, (uint64_t)v194, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v11 = v153[4];
          v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v153[6] = ecs_stack_allocator_allocate(v11, 48 * v12, 8);
          v153[7] = v12;
          v147[1] = 0;
          v147[2] = 0;
          *v147 = 0;
          swift_release();
          v164 = v9;
          if (v155)
          {
            v13 = v174;
            if (v154)
            {
              v14 = 0;
              while (1)
              {
                v15 = *(_QWORD *)(v155 + 8 * v14);
                v16 = swift_retain();
                if ((*(_BYTE *)(v9 + 184) & 1) != 0)
                  break;
                v17 = *(int *)(*(_QWORD *)(v9 + 168) + 4 * v15);
                v18 = *(_DWORD *)(*(_QWORD *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v17 + 8);
                swift_release();
                v19 = (_DWORD)v17 == -1 && v18 == 0;
                v20 = (uint64_t)v7;
                if (!v19)
                {
                  if ((v17 & 0x80000000) != 0)
                  {
                    v20 = (uint64_t)v7;
                  }
                  else
                  {
                    v20 = (uint64_t)v7;
                    if (v13[1] > v17)
                    {
                      v21 = v18 == -1 || *(_DWORD *)(*v13 + 12 * (int)v17 + 8) == v18;
                      v20 = (uint64_t)v7;
                      if (v21)
                        v20 = swift_retain();
                    }
                  }
                }
                v167 = *(_QWORD *)(v20 + 16);
                if (v167)
                {
                  v161 = v15;
                  v157 = v14;
                  v22 = 0;
                  v165 = v20 + 32;
                  do
                  {
                    v23 = *(_QWORD *)(*(_QWORD *)(v165 + 16 * v22 + 8) + 8);
                    v169 = *(_OWORD *)(v165 + 16 * v22);
                    v24 = v169;
                    if (sub_1B1F24AA4(v169) >= 1)
                    {
                      v25 = *(_BYTE *)(v9 + 184);
                      v26 = swift_retain();
                      if ((v25 & 1) != 0)
                        goto LABEL_177;
                      v27 = *(int *)(*(_QWORD *)(v9 + 168) + 4 * v161);
                      v28 = *(_DWORD *)(*(_QWORD *)(v26 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                      + 12 * (int)v27
                                      + 8);
                      swift_release();
                      v29 = (_DWORD)v27 == -1 && v28 == 0;
                      if (v29 || (v27 & 0x80000000) != 0 || v13[1] <= v27)
                        goto LABEL_176;
                      v30 = *v13 + 12 * (int)v27;
                      if (v28 != -1 && *(_DWORD *)(v30 + 8) != v28)
                        goto LABEL_176;
                      v32 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(*v13 + 12 * (int)v27) + 32);
                      v33 = *(_QWORD *)(v32 + 48);
                      v34 = *(_QWORD *)(v33 + 16);
                      if (!v34)
                        goto LABEL_176;
                      v35 = *(__int16 *)(v30 + 4);
                      v36 = (uint64_t *)(v33 + 56);
                      while (*(v36 - 3) != (_QWORD)v169)
                      {
                        v36 += 5;
                        if (!--v34)
                          goto LABEL_176;
                      }
                      v37 = *v36;
                      if (*(v36 - 1) <= 1)
                        v38 = 1;
                      else
                        v38 = *(v36 - 1);
                      v39 = *(_QWORD *)(v32 + 128);
                      if (sub_1B1F24A98(v169))
                      {
                        v40 = v39 + v37 + v38 * v35;
                        v180 = v169;
                        v41 = sub_1B1A137F4(&v178);
                        sub_1B1F28148(v40, v169, (uint64_t)v41);
                        v42 = *(uint64_t (**)(_QWORD, uint64_t))(v23 + 48);
                        swift_retain();
                        if ((v42(v169, v23) & 1) != 0)
                        {
                          v43 = *(_QWORD *)(v173 + v158);
                          ecs_stack_allocator_push_snapshot(*(_QWORD *)(*(_QWORD *)v43 + 32));
                          v170 = v43;
                          v44 = *(_QWORD *)(*(_QWORD *)v43 + 32);
                          v45 = sub_1B1F24A98(v24);
                          v46 = sub_1B1F24B84(v24);
                          v47 = ecs_stack_allocator_allocate(v44, v45, v46);
                          v159 = v40;
                          sub_1B1F24B20();
                          v48 = v180;
                          sub_1B19FC264((uint64_t)&v178, v180);
                          (*(void (**)(uint64_t, _UNKNOWN **, _QWORD))(*(_QWORD *)(*((_QWORD *)&v48 + 1) + 8)
                                                                               + 96))(v163, &off_1E63B7538, v48);
                          if (v174[1] > v27 && (v28 == -1 || *(_DWORD *)(*v174 + 12 * (int)v27 + 8) == v28))
                          {
                            v61 = (unsigned int *)(*v174 + 12 * (int)v27);
                            sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v173 + 136) + 8 * (int)*v61 + 32), v24, *v61 | ((unint64_t)*((unsigned __int16 *)v61 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v61 + 2) << 32), v173, v175);
                            v49 = v175[0];
                          }
                          else
                          {
                            v49 = 0;
                          }
                          v62 = v180;
                          v63 = sub_1B19FA070(&v178, v180);
                          v176 = v62;
                          v177 = *(_QWORD *)(*((_QWORD *)&v62 + 1) + 8);
                          v64 = sub_1B1A137F4(v175);
                          (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*(_QWORD *)(v62 - 8) + 16))(v64, v63, v62);
                          sub_1B1F28160((uint64_t)v175, v49, v24);
                          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v175);
                          if (v174[1] <= v27)
                            goto LABEL_177;
                          v65 = *v174;
                          if (v28 != -1 && *(_DWORD *)(v65 + 12 * (int)v27 + 8) != v28)
                            goto LABEL_177;
                          v66 = (int *)(v65 + 12 * (int)v27);
                          v67 = *((__int16 *)v66 + 2);
                          v68 = *(uint64_t **)(*(_QWORD *)(v173 + 136) + 8 * *v66 + 32);
                          v69 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v23 + 88);
                          swift_retain();
                          if ((v69(v47, v159, v24, v23) & 1) != 0)
                          {
                            v70 = v68[24];
                            v9 = v164;
                            if (v70)
                            {
                              v71 = v68[26];
                              v72 = 8 * (v67 >> 6);
                              *(_QWORD *)(v70 + v72) |= 1 << v67;
                              *(_QWORD *)(v71 + v72) &= ~(1 << v67);
                            }
                            sub_1B1FE2568(v68[5], (uint64_t)v68, v67);
                            swift_release();
                          }
                          else
                          {
                            swift_release();
                            v9 = v164;
                          }
                          sub_1B1F24B64();
                          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*(_QWORD *)v170 + 32));
                        }
                        else
                        {
                          v50 = v180;
                          sub_1B19FC264((uint64_t)&v178, v180);
                          (*(void (**)(uint64_t, _UNKNOWN **, _QWORD))(*(_QWORD *)(*((_QWORD *)&v50 + 1) + 8)
                                                                               + 96))(v163, &off_1E63B7538, v50);
                          if (v174[1] > v27
                            && ((v51 = *v174 + 12 * (int)v27, v52 = *(__int16 *)(v51 + 4), v28 == -1)
                             || *(_DWORD *)(v51 + 8) == v28)
                            && (v53 = *(_QWORD *)(*(_QWORD *)(v173 + 136) + 8 * *(int *)(*v174 + 12 * (int)v27) + 32),
                                v54 = *(_QWORD *)(v53 + 48),
                                (v55 = *(_QWORD *)(v54 + 16)) != 0))
                          {
                            v56 = v54 + 56;
                            v9 = v164;
                            while (*(_QWORD *)(v56 - 24) != (_QWORD)v169)
                            {
                              v56 += 40;
                              if (!--v55)
                              {
                                v57 = 0;
                                goto LABEL_70;
                              }
                            }
                            v75 = v56 - 8;
                            v74 = *(_QWORD *)(v56 - 8);
                            v73 = *(_QWORD *)(v75 + 8);
                            if (v74 <= 1)
                              v74 = 1;
                            v57 = *(_QWORD *)(v53 + 128) + v73 + v74 * v52;
                          }
                          else
                          {
                            v57 = 0;
                            v9 = v164;
                          }
LABEL_70:
                          v58 = v180;
                          v59 = sub_1B19FA070(&v178, v180);
                          v176 = v58;
                          v177 = *(_QWORD *)(*((_QWORD *)&v58 + 1) + 8);
                          v60 = sub_1B1A137F4(v175);
                          (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*(_QWORD *)(v58 - 8) + 16))(v60, v59, v58);
                          sub_1B1F28160((uint64_t)v175, v57, v169);
                          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v175);
                        }
                        v3 = v173;
                        v13 = v174;
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v178);
                        swift_release();
                      }
                      else
                      {
                        v3 = v173;
                        v13 = v174;
                        v9 = v164;
                      }
                    }
                    ++v22;
                  }
                  while (v22 != v167);
                  swift_bridgeObjectRelease();
                  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  v14 = v157;
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
                if (++v14 == v154)
                  goto LABEL_87;
              }
              while (1)
              {
LABEL_177:
                sub_1B2229688();
                __break(1u);
              }
            }
          }
          else
          {
            v76 = v174;
            if ((_DWORD)v162 != (_DWORD)v156)
            {
              do
              {
                v80 = swift_retain();
                if ((*(_BYTE *)(v9 + 184) & 1) != 0)
                  goto LABEL_177;
                v81 = *(int *)(*(_QWORD *)(v9 + 168) + 4 * v162);
                v82 = *(_DWORD *)(*(_QWORD *)(v80 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v81 + 8);
                swift_release();
                v83 = (_DWORD)v81 == -1 && v82 == 0;
                v84 = (uint64_t)v7;
                if (!v83)
                {
                  if ((v81 & 0x80000000) != 0)
                  {
                    v84 = (uint64_t)v7;
                  }
                  else
                  {
                    v84 = (uint64_t)v7;
                    if (v76[1] > v81)
                    {
                      v85 = v82 == -1 || *(_DWORD *)(*v76 + 12 * (int)v81 + 8) == v82;
                      v84 = (uint64_t)v7;
                      if (v85)
                        v84 = swift_retain();
                    }
                  }
                }
                v168 = *(_QWORD *)(v84 + 16);
                if (v168)
                {
                  v86 = 0;
                  v166 = v84 + 32;
                  do
                  {
                    v87 = *(_QWORD *)(*(_QWORD *)(v166 + 16 * v86 + 8) + 8);
                    v171 = *(_OWORD *)(v166 + 16 * v86);
                    v88 = v171;
                    if (sub_1B1F24AA4(v171) >= 1)
                    {
                      v89 = *(_BYTE *)(v9 + 184);
                      v90 = swift_retain();
                      if ((v89 & 1) != 0)
                        goto LABEL_177;
                      v91 = *(int *)(*(_QWORD *)(v9 + 168) + 4 * v162);
                      v92 = *(_DWORD *)(*(_QWORD *)(v90 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                      + 12 * (int)v91
                                      + 8);
                      swift_release();
                      v93 = (_DWORD)v91 == -1 && v92 == 0;
                      if (v93
                        || (v91 & 0x80000000) != 0
                        || v76[1] <= v91
                        || ((v94 = *v76 + 12 * (int)v91, v92 != -1) ? (v95 = *(_DWORD *)(v94 + 8) == v92) : (v95 = 1),
                            !v95
                         || (v96 = *(_QWORD *)(*(_QWORD *)(v3 + 136) + 8 * *(int *)(*v76 + 12 * (int)v91) + 32),
                             v97 = *(_QWORD *)(v96 + 48),
                             (v98 = *(_QWORD *)(v97 + 16)) == 0)))
                      {
LABEL_176:
                        v178 = 0;
                        v179 = 0xE000000000000000;
                        swift_retain_n();
                        sub_1B2229430();
                        swift_bridgeObjectRelease();
                        v178 = 0x20797469746E45;
                        v179 = 0xE700000000000000;
                        sub_1B1BC3C70();
                        sub_1B2228890();
                        swift_bridgeObjectRelease();
                        sub_1B2228890();
                        sub_1B222A210();
                        sub_1B2228890();
                        swift_release_n();
                        swift_bridgeObjectRelease();
                        goto LABEL_177;
                      }
                      v99 = *(__int16 *)(v94 + 4);
                      v100 = (uint64_t *)(v97 + 56);
                      while (*(v100 - 3) != (_QWORD)v171)
                      {
                        v100 += 5;
                        if (!--v98)
                          goto LABEL_176;
                      }
                      v101 = *v100;
                      if (*(v100 - 1) <= 1)
                        v102 = 1;
                      else
                        v102 = *(v100 - 1);
                      v103 = *(_QWORD *)(v96 + 128);
                      if (sub_1B1F24A98(v171))
                      {
                        v104 = v103 + v101 + v102 * v99;
                        v180 = v171;
                        v105 = sub_1B1A137F4(&v178);
                        sub_1B1F28148(v104, v171, (uint64_t)v105);
                        v106 = *(uint64_t (**)(_QWORD, uint64_t))(v87 + 48);
                        swift_retain();
                        if ((v106(v171, v87) & 1) != 0)
                        {
                          v107 = *(_QWORD *)(v173 + v158);
                          ecs_stack_allocator_push_snapshot(*(_QWORD *)(*(_QWORD *)v107 + 32));
                          v172 = v107;
                          v108 = *(_QWORD *)(*(_QWORD *)v107 + 32);
                          v109 = sub_1B1F24A98(v88);
                          v110 = sub_1B1F24B84(v88);
                          v111 = ecs_stack_allocator_allocate(v108, v109, v110);
                          v160 = v104;
                          sub_1B1F24B20();
                          v112 = v180;
                          sub_1B19FC264((uint64_t)&v178, v180);
                          (*(void (**)(uint64_t, _UNKNOWN **, _QWORD))(*(_QWORD *)(*((_QWORD *)&v112 + 1) + 8)
                                                                               + 96))(v163, &off_1E63B7538, v112);
                          if (v174[1] > v91 && (v92 == -1 || *(_DWORD *)(*v174 + 12 * (int)v91 + 8) == v92))
                          {
                            v125 = (unsigned int *)(*v174 + 12 * (int)v91);
                            sub_1B1FE43A4(*(_QWORD *)(*(_QWORD *)(v173 + 136) + 8 * (int)*v125 + 32), v88, *v125 | ((unint64_t)*((unsigned __int16 *)v125 + 3) << 48) | ((unint64_t)*((unsigned __int16 *)v125 + 2) << 32), v173, v175);
                            v113 = v175[0];
                          }
                          else
                          {
                            v113 = 0;
                          }
                          v126 = v180;
                          v127 = sub_1B19FA070(&v178, v180);
                          v176 = v126;
                          v177 = *(_QWORD *)(*((_QWORD *)&v126 + 1) + 8);
                          v128 = sub_1B1A137F4(v175);
                          (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*(_QWORD *)(v126 - 8) + 16))(v128, v127, v126);
                          sub_1B1F28160((uint64_t)v175, v113, v88);
                          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v175);
                          if (v174[1] <= v91)
                            goto LABEL_177;
                          v129 = *v174;
                          if (v92 != -1 && *(_DWORD *)(v129 + 12 * (int)v91 + 8) != v92)
                            goto LABEL_177;
                          v130 = (int *)(v129 + 12 * (int)v91);
                          v131 = *((__int16 *)v130 + 2);
                          v132 = *(uint64_t **)(*(_QWORD *)(v173 + 136) + 8 * *v130 + 32);
                          v133 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v87 + 88);
                          swift_retain();
                          if ((v133(v111, v160, v88, v87) & 1) != 0)
                          {
                            v134 = v132[24];
                            v9 = v164;
                            if (v134)
                            {
                              v135 = v132[26];
                              v136 = 8 * (v131 >> 6);
                              *(_QWORD *)(v134 + v136) |= 1 << v131;
                              *(_QWORD *)(v135 + v136) &= ~(1 << v131);
                            }
                            sub_1B1FE2568(v132[5], (uint64_t)v132, v131);
                            swift_release();
                          }
                          else
                          {
                            swift_release();
                            v9 = v164;
                          }
                          sub_1B1F24B64();
                          ecs_stack_allocator_pop_snapshot(*(_QWORD *)(*(_QWORD *)v172 + 32));
                        }
                        else
                        {
                          v114 = v180;
                          sub_1B19FC264((uint64_t)&v178, v180);
                          (*(void (**)(uint64_t, _UNKNOWN **, _QWORD))(*(_QWORD *)(*((_QWORD *)&v114 + 1) + 8)
                                                                               + 96))(v163, &off_1E63B7538, v114);
                          if (v174[1] > v91
                            && ((v115 = *v174 + 12 * (int)v91, v116 = *(__int16 *)(v115 + 4), v92 == -1)
                             || *(_DWORD *)(v115 + 8) == v92)
                            && (v117 = *(_QWORD *)(*(_QWORD *)(v173 + 136) + 8 * *(int *)(*v174 + 12 * (int)v91) + 32),
                                v118 = *(_QWORD *)(v117 + 48),
                                (v119 = *(_QWORD *)(v118 + 16)) != 0))
                          {
                            v120 = v118 + 56;
                            v9 = v164;
                            while (*(_QWORD *)(v120 - 24) != (_QWORD)v171)
                            {
                              v120 += 40;
                              if (!--v119)
                              {
                                v121 = 0;
                                goto LABEL_146;
                              }
                            }
                            v139 = v120 - 8;
                            v138 = *(_QWORD *)(v120 - 8);
                            v137 = *(_QWORD *)(v139 + 8);
                            if (v138 <= 1)
                              v138 = 1;
                            v121 = *(_QWORD *)(v117 + 128) + v137 + v138 * v116;
                          }
                          else
                          {
                            v121 = 0;
                            v9 = v164;
                          }
LABEL_146:
                          v122 = v180;
                          v123 = sub_1B19FA070(&v178, v180);
                          v176 = v122;
                          v177 = *(_QWORD *)(*((_QWORD *)&v122 + 1) + 8);
                          v124 = sub_1B1A137F4(v175);
                          (*(void (**)(uint64_t *, _QWORD *, _QWORD))(*(_QWORD *)(v122 - 8) + 16))(v124, v123, v122);
                          sub_1B1F28160((uint64_t)v175, v121, v171);
                          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v175);
                        }
                        v3 = v173;
                        v76 = v174;
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v178);
                        swift_release();
                      }
                      else
                      {
                        v3 = v173;
                        v76 = v174;
                        v9 = v164;
                      }
                    }
                    ++v86;
                  }
                  while (v86 != v168);
                  swift_bridgeObjectRelease();
                  v7 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                }
                else
                {
                  swift_bridgeObjectRelease();
                }
                ++v162;
              }
              while (v162 != v156);
            }
          }
LABEL_87:
          v192[0] = v189;
          v192[1] = v190;
          v193 = v191;
          sub_1B1F05D48(v153, (unsigned __int16 **)v192, (uint64_t)v194);
          if (*(_QWORD *)(v153[13] + 16))
          {
            v77 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v77, v9);
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v79 = v153[13];
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v79 + 16));
            }
            else
            {
              v140 = v7;
              if (*(_QWORD *)(v79 + 24) >= 2uLL)
              {
                sub_1B1791524(0, (unint64_t *)&qword_1ED4BADE0, (uint64_t (*)(uint64_t))sub_1B1B1F228, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DED1E8]);
                v140 = (_QWORD *)swift_allocObject();
                v141 = j__malloc_size(v140);
                v140[2] = 0;
                v140[3] = 2 * ((uint64_t)(v141 - 32) / 72);
              }
              *v145 = v140;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v153[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v142 = *(char **)(v9 + 232);
              v143 = *(char **)(v9 + 256);
              if (v142 == v143)
              {
                v144 = *(char **)(v9 + 240);
              }
              else
              {
                sub_1B1A1059C(v143, v142);
                v143 = *(char **)(v9 + 232);
                v144 = *(char **)(v9 + 240);
                if (v144 == v143)
                {
                  v144 = 0;
                  v143 = 0;
                  *(_QWORD *)(v9 + 232) = 0;
                  *(_QWORD *)(v9 + 240) = 0;
                }
              }
              *(_QWORD *)(v9 + 248) = v144;
              *(_QWORD *)(v9 + 256) = v143;
            }
          }
          ecs_stack_allocator_pop_snapshot(v152);
          v6 = v146;
          if ((v146 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 376));
          }
          swift_release();
          v5 = v151 + 1;
        }
        while (v151 + 1 != v150);
      }
    }
    return sub_1B19ED748(v181);
  }
  return result;
}

id sub_1B1F5A010(void *a1, uint64_t a2, uint64_t a3)
{
  id result;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD v13[5];

  result = objc_msgSend(a1, sel_asset);
  if (result)
  {
    objc_opt_self();
    v5 = (void *)swift_dynamicCastObjCClass();
    if (v5)
    {
      v6 = v5;
      v7 = objc_msgSend(v5, sel_authoringGraph);
      sub_1B22292EC();
      swift_unknownObjectRelease();
      type metadata accessor for AuthoringGraph();
      v8 = swift_dynamicCast();
      MEMORY[0x1E0C80A78](v8, v9);
      v13[2] = a3;
      v13[3] = &off_1E63B7538;
      v10 = MEMORY[0x1E0DEE9D8];
      sub_1B1C5A714((uint64_t)sub_1B1A055F8, (uint64_t)v13, 0, 0x1000000000000000uLL, 1, MEMORY[0x1E0DEE9D8]);
      v11 = sub_1B1C6A11C();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v12 = (_QWORD *)swift_allocObject();
      v12[2] = 0;
      v12[3] = v10;
      v12[4] = 0;
      v12[5] = 0;
      v12[6] = sub_1B1B7DC90(v10);
      v12[3] = v11;
      swift_release();
      objc_msgSend(v6, sel_setAuthoringGraph_, v12);
      swift_unknownObjectRelease();
      return (id)swift_release();
    }
    else
    {
      return (id)swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t VFXNode.bridgedComponentNames.getter()
{
  void *v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  void *v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  id v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  id v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  id v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  id v62;
  void *v63;
  id v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  id v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  id v74;
  void *v75;
  id v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  id v80;
  void *v81;
  id v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  id v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  id v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  id v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  id v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  id v104;
  id v105;
  void *v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;

  v1 = 0xEF72656C6C6F7274;
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAE70, MEMORY[0x1E0DEA968], (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v2 + 32) = 0xD000000000000017;
  *(_QWORD *)(v2 + 40) = 0x80000001B22A3220;
  *(_QWORD *)(v2 + 48) = 0xD000000000000018;
  *(_QWORD *)(v2 + 56) = 0x80000001B22A3240;
  v3 = objc_msgSend(v0, sel_light);

  if (v3)
  {
    v2 = (uint64_t)sub_1B1C63044(1, 3, 1, (_QWORD *)v2);
    *(_QWORD *)(v2 + 16) = 3;
    *(_QWORD *)(v2 + 64) = 0x6E6F43746867694CLL;
    *(_QWORD *)(v2 + 72) = 0xEF72656C6C6F7274;
  }
  v4 = objc_msgSend(v0, sel_camera);

  if (v4)
  {
    v6 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    if (v6 >= v5 >> 1)
      v2 = (uint64_t)sub_1B1C63044(v5 > 1, v6 + 1, 1, (_QWORD *)v2);
    *(_QWORD *)(v2 + 16) = v6 + 1;
    v7 = v2 + 16 * v6;
    *(_QWORD *)(v7 + 32) = 0xD000000000000010;
    *(_QWORD *)(v7 + 40) = 0x80000001B22A32E0;
    v8 = objc_msgSend(v0, sel_camera);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(v8, sel_motionBlur);

      if (v10)
      {

        v12 = *(_QWORD *)(v2 + 16);
        v11 = *(_QWORD *)(v2 + 24);
        if (v12 >= v11 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v11 > 1, v12 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v12 + 1;
        v13 = v2 + 16 * v12;
        *(_QWORD *)(v13 + 32) = 0xD000000000000020;
        *(_QWORD *)(v13 + 40) = 0x80000001B22A3330;
      }
    }
    v14 = objc_msgSend(v0, sel_camera);
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(v14, sel_depthOfField);

      if (v16)
      {

        v18 = *(_QWORD *)(v2 + 16);
        v17 = *(_QWORD *)(v2 + 24);
        if (v18 >= v17 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v17 > 1, v18 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v18 + 1;
        v19 = v2 + 16 * v18;
        *(_QWORD *)(v19 + 32) = 0xD000000000000022;
        *(_QWORD *)(v19 + 40) = 0x80000001B22A3460;
      }
    }
    v20 = objc_msgSend(v0, sel_camera);
    if (v20)
    {
      v21 = v20;
      v22 = objc_msgSend(v20, sel_grain);

      if (v22)
      {

        v24 = *(_QWORD *)(v2 + 16);
        v23 = *(_QWORD *)(v2 + 24);
        if (v24 >= v23 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v23 > 1, v24 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v24 + 1;
        v25 = v2 + 16 * v24;
        *(_QWORD *)(v25 + 32) = 0xD00000000000001BLL;
        *(_QWORD *)(v25 + 40) = 0x80000001B22A3440;
      }
    }
    v26 = objc_msgSend(v0, sel_camera);
    if (v26)
    {
      v27 = v26;
      v28 = objc_msgSend(v26, sel_lensBlur);

      if (v28)
      {

        v30 = *(_QWORD *)(v2 + 16);
        v29 = *(_QWORD *)(v2 + 24);
        if (v30 >= v29 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v29 > 1, v30 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v30 + 1;
        v31 = v2 + 16 * v30;
        *(_QWORD *)(v31 + 32) = 0xD00000000000001ELL;
        *(_QWORD *)(v31 + 40) = 0x80000001B22A3420;
      }
    }
    v32 = objc_msgSend(v0, sel_camera);
    if (v32)
    {
      v33 = v32;
      v34 = objc_msgSend(v32, sel_bloom);

      if (v34)
      {

        v36 = *(_QWORD *)(v2 + 16);
        v35 = *(_QWORD *)(v2 + 24);
        if (v36 >= v35 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v35 > 1, v36 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v36 + 1;
        v37 = v2 + 16 * v36;
        *(_QWORD *)(v37 + 32) = 0xD00000000000001BLL;
        *(_QWORD *)(v37 + 40) = 0x80000001B22A3400;
      }
    }
    v38 = objc_msgSend(v0, sel_camera);
    if (v38)
    {
      v39 = v38;
      v40 = objc_msgSend(v38, sel_exposure);

      if (v40)
      {

        v42 = *(_QWORD *)(v2 + 16);
        v41 = *(_QWORD *)(v2 + 24);
        if (v42 >= v41 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v41 > 1, v42 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v42 + 1;
        v43 = v2 + 16 * v42;
        *(_QWORD *)(v43 + 32) = 0xD00000000000001ELL;
        *(_QWORD *)(v43 + 40) = 0x80000001B22A33E0;
      }
    }
    v44 = objc_msgSend(v0, sel_camera);
    if (v44)
    {
      v45 = v44;
      v46 = objc_msgSend(v44, sel_chromaticTransform);

      if (v46)
      {

        v48 = *(_QWORD *)(v2 + 16);
        v47 = *(_QWORD *)(v2 + 24);
        if (v48 >= v47 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v47 > 1, v48 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v48 + 1;
        v49 = v2 + 16 * v48;
        *(_QWORD *)(v49 + 32) = 0xD000000000000028;
        *(_QWORD *)(v49 + 40) = 0x80000001B22A33B0;
      }
    }
    v50 = objc_msgSend(v0, sel_camera);
    if (v50)
    {
      v51 = v50;
      v52 = objc_msgSend(v50, sel_doughnutBokeh);

      if (v52)
      {

        v54 = *(_QWORD *)(v2 + 16);
        v53 = *(_QWORD *)(v2 + 24);
        if (v54 >= v53 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v53 > 1, v54 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v54 + 1;
        v55 = v2 + 16 * v54;
        *(_QWORD *)(v55 + 32) = 0xD000000000000023;
        *(_QWORD *)(v55 + 40) = 0x80000001B22A3380;
      }
    }
    v56 = objc_msgSend(v0, sel_camera);
    if (v56)
    {
      v57 = v56;
      v58 = objc_msgSend(v56, sel_ssao);

      if (v58)
      {

        v60 = *(_QWORD *)(v2 + 16);
        v59 = *(_QWORD *)(v2 + 24);
        if (v60 >= v59 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v59 > 1, v60 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v60 + 1;
        v61 = v2 + 16 * v60;
        *(_QWORD *)(v61 + 32) = 0xD00000000000001ALL;
        *(_QWORD *)(v61 + 40) = 0x80000001B22A3360;
      }
    }
    v62 = objc_msgSend(v0, sel_camera);
    if (v62)
    {
      v63 = v62;
      v64 = objc_msgSend(v62, sel_motionBlur);

      if (v64)
      {

        v66 = *(_QWORD *)(v2 + 16);
        v65 = *(_QWORD *)(v2 + 24);
        if (v66 >= v65 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v65 > 1, v66 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v66 + 1;
        v67 = v2 + 16 * v66;
        *(_QWORD *)(v67 + 32) = 0xD000000000000020;
        *(_QWORD *)(v67 + 40) = 0x80000001B22A3330;
      }
    }
    v68 = objc_msgSend(v0, sel_camera);
    if (v68)
    {
      v69 = v68;
      v70 = objc_msgSend(v68, sel_toneMapping);

      if (v70)
      {

        v72 = *(_QWORD *)(v2 + 16);
        v71 = *(_QWORD *)(v2 + 24);
        if (v72 >= v71 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v71 > 1, v72 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v72 + 1;
        v73 = v2 + 16 * v72;
        *(_QWORD *)(v73 + 32) = 0xD000000000000021;
        *(_QWORD *)(v73 + 40) = 0x80000001B22A3300;
      }
    }
    v74 = objc_msgSend(v0, sel_camera);
    if (v74)
    {
      v75 = v74;
      v76 = objc_msgSend(v74, sel_vignetting);

      if (v76)
      {

        v78 = *(_QWORD *)(v2 + 16);
        v77 = *(_QWORD *)(v2 + 24);
        if (v78 >= v77 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v77 > 1, v78 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v78 + 1;
        v79 = v2 + 16 * v78;
        *(_QWORD *)(v79 + 32) = 0xD000000000000020;
        *(_QWORD *)(v79 + 40) = 0x80000001B2345780;
      }
    }
    v80 = objc_msgSend(v0, sel_camera);
    if (v80)
    {
      v81 = v80;
      v82 = objc_msgSend(v80, sel_colorFringe);

      if (v82)
      {

        v84 = *(_QWORD *)(v2 + 16);
        v83 = *(_QWORD *)(v2 + 24);
        if (v84 >= v83 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v83 > 1, v84 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v84 + 1;
        v85 = v2 + 16 * v84;
        *(_QWORD *)(v85 + 32) = 0xD000000000000021;
        *(_QWORD *)(v85 + 40) = 0x80000001B2345750;
      }
    }
    v86 = objc_msgSend(v0, sel_camera);
    if (v86)
    {
      v87 = v86;
      v88 = objc_msgSend(v86, sel_colorGrading);

      if (v88)
      {

        v90 = *(_QWORD *)(v2 + 16);
        v89 = *(_QWORD *)(v2 + 24);
        if (v90 >= v89 >> 1)
          v2 = (uint64_t)sub_1B1C63044(v89 > 1, v90 + 1, 1, (_QWORD *)v2);
        *(_QWORD *)(v2 + 16) = v90 + 1;
        v91 = v2 + 16 * v90;
        *(_QWORD *)(v91 + 32) = 0xD000000000000022;
        *(_QWORD *)(v91 + 40) = 0x80000001B2345720;
      }
    }
  }
  v92 = objc_msgSend(v0, sel_physicsBody);

  if (v92)
  {
    v94 = *(_QWORD *)(v2 + 16);
    v93 = *(_QWORD *)(v2 + 24);
    if (v94 >= v93 >> 1)
      v2 = (uint64_t)sub_1B1C63044(v93 > 1, v94 + 1, 1, (_QWORD *)v2);
    *(_QWORD *)(v2 + 16) = v94 + 1;
    v95 = v2 + 16 * v94;
    *(_QWORD *)(v95 + 32) = 0xD000000000000015;
    *(_QWORD *)(v95 + 40) = 0x80000001B22A32C0;
  }
  v96 = objc_msgSend(v0, sel_forceField);

  if (v96)
  {
    v98 = *(_QWORD *)(v2 + 16);
    v97 = *(_QWORD *)(v2 + 24);
    if (v98 >= v97 >> 1)
      v2 = (uint64_t)sub_1B1C63044(v97 > 1, v98 + 1, 1, (_QWORD *)v2);
    *(_QWORD *)(v2 + 16) = v98 + 1;
    v99 = v2 + 16 * v98;
    *(_QWORD *)(v99 + 32) = 0xD000000000000015;
    *(_QWORD *)(v99 + 40) = 0x80000001B22A32A0;
  }
  v100 = objc_msgSend(v0, sel_morpher);

  if (v100)
  {
    v102 = *(_QWORD *)(v2 + 16);
    v101 = *(_QWORD *)(v2 + 24);
    if (v102 >= v101 >> 1)
      v2 = (uint64_t)sub_1B1C63044(v101 > 1, v102 + 1, 1, (_QWORD *)v2);
    *(_QWORD *)(v2 + 16) = v102 + 1;
    v103 = v2 + 16 * v102;
    *(_QWORD *)(v103 + 32) = 0xD000000000000011;
    *(_QWORD *)(v103 + 40) = 0x80000001B22A3280;
  }
  v104 = objc_msgSend(v0, sel_model);

  if (v104)
  {
    v105 = objc_msgSend(v0, sel_model);
    if (v105 && (v106 = v105, objc_opt_self(), v107 = swift_dynamicCastObjCClass(), v106, v107))
    {
      v109 = *(_QWORD *)(v2 + 16);
      v108 = *(_QWORD *)(v2 + 24);
      if (v109 >= v108 >> 1)
        v2 = (uint64_t)sub_1B1C63044(v108 > 1, v109 + 1, 1, (_QWORD *)v2);
      *(_QWORD *)(v2 + 16) = v109 + 1;
      v110 = v2 + 16 * v109;
      *(_QWORD *)(v110 + 32) = 0xD000000000000019;
      v111 = v110 + 32;
      v1 = 0x80000001B22A3260;
    }
    else
    {
      v113 = *(_QWORD *)(v2 + 16);
      v112 = *(_QWORD *)(v2 + 24);
      if (v113 >= v112 >> 1)
        v2 = (uint64_t)sub_1B1C63044(v112 > 1, v113 + 1, 1, (_QWORD *)v2);
      *(_QWORD *)(v2 + 16) = v113 + 1;
      v114 = v2 + 16 * v113;
      *(_QWORD *)(v114 + 32) = 0x6E6F436C65646F4DLL;
      v111 = v114 + 32;
    }
    *(_QWORD *)(v111 + 8) = v1;
  }
  return v2;
}

id sub_1B1F5ADF8()
{
  void *v0;

  return objc_msgSend(v0, sel_presentationNode);
}

uint64_t sub_1B1F5AE1C()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_name);
  v2 = sub_1B222874C();

  return v2;
}

id sub_1B1F5AE70()
{
  void *v0;

  return v0;
}

double sub_1B1F5AE78()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  double v4;
  double v6;
  _QWORD v7[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = (void *)MEMORY[0x1B5E240CC](v0 + 4);
    if (!v1)
      return 0.0;
LABEL_7:
    objc_msgSend(v1, sel_position);
    v6 = v4;

    return v6;
  }
  sub_1B1F78A28(v0, v7);
  v2 = MEMORY[0x1B5E240CC](v7);
  sub_1B1F2F2C4((uint64_t)v7);
  if (v2)
  {
    objc_opt_self();
    v3 = swift_dynamicCastObjCClass();
    if (v3)
    {
      v1 = (void *)v3;
      goto LABEL_7;
    }
    swift_unknownObjectRelease();
  }
  return 0.0;
}

double sub_1B1F5AF38()
{
  void *v0;
  void *v1;
  double v2;
  double v4;

  v0 = (void *)sub_1B1F5BB3C();
  if (!v0)
    return 0.0;
  v1 = v0;
  objc_msgSend(v0, sel_orientation);
  v4 = v2;

  return v4;
}

__n128 sub_1B1F5AF88()
{
  void *v0;
  void *v1;
  __int128 v2;
  __n128 result;
  __int128 v8;

  v0 = (void *)sub_1B1F5BB3C();
  if (v0)
  {
    v1 = v0;
    objc_msgSend(v0, sel_scale);
    v8 = v2;

    return (__n128)v8;
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
  }
  return result;
}

double sub_1B1F5AFD4()
{
  void *v0;
  void *v1;
  double v2;
  double result;
  double v4;

  v0 = (void *)sub_1B1F5BB3C();
  if (v0)
  {
    v1 = v0;
    objc_msgSend(v0, sel_transform);
    v4 = v2;

    return v4;
  }
  else
  {
    *(_QWORD *)&result = 1065353216;
  }
  return result;
}

double sub_1B1F5B04C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  double v3;
  double v5;

  v1 = (void *)MEMORY[0x1B5E240CC](v0 + 32);
  if (!v1)
    return 0.0;
  v2 = v1;
  objc_msgSend(v1, sel_eulerAngles);
  v5 = v3;

  return v5;
}

uint64_t sub_1B1F5B09C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BYTE v34[40];

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v26 - v9;
  v27 = 0;
  swift_unknownObjectWeakInit();
  v27 = 0;
  v11 = swift_unknownObjectWeakAssign();
  v28 = 0x3E6C6C756E3CLL;
  v29 = 0xE600000000000000;
  sub_1B19FC2D0(v11, (uint64_t)v34);
  swift_unknownObjectWeakInit();
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  if (sub_1B2067BAC(2037, v12, v13))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v2)
    {
      sub_1B19FA070(&v26, v29);
      sub_1B19FC28C();
      sub_1B2229D6C();
      sub_1B1D8EB3C((uint64_t)&v30, (uint64_t)v34);
LABEL_9:
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v26);
LABEL_17:
      sub_1B1C1F794((uint64_t)v34, a2);
    }
  }
  else
  {
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067BAC(2029, v14, v15))
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v2)
      {
        sub_1B19FA070(&v26, v29);
        v18 = sub_1B2229D30();
        v20 = v19;
        sub_1B1F2F2C4((uint64_t)v34);
        v31 = 0;
        swift_unknownObjectWeakInit();
        v31 = 0;
        v21 = swift_unknownObjectWeakAssign();
        v32 = v18;
        v33 = v20;
        sub_1B19FC2D0(v21, (uint64_t)v34);
        goto LABEL_9;
      }
    }
    else
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B1C78FEC();
      sub_1B222A150();
      if (!v2)
      {
        v30 = 0;
        LOBYTE(v31) = 1;
        v32 = 0xD000000000000017;
        v33 = 0x80000001B23459F0;
        v16 = sub_1B2229778();
        if (v17)
          v22 = v16;
        else
          v22 = 0;
        if (v17)
          v23 = v17;
        else
          v23 = 0xE000000000000000;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        v31 = 0;
        swift_unknownObjectWeakInit();
        v31 = 0;
        v24 = swift_unknownObjectWeakAssign();
        v32 = v22;
        v33 = v23;
        sub_1B19FC2D0(v24, (uint64_t)&v26);
        sub_1B1D8EB3C((uint64_t)&v26, (uint64_t)v34);
        goto LABEL_17;
      }
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1F70C30((uint64_t)v34);
}

uint64_t sub_1B1F5B41C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F5B09C(a1, a2);
}

uint64_t sub_1B1F5B430(_QWORD *a1)
{
  return sub_1B1F5C358(a1);
}

void sub_1B1F5B444(uint64_t a1, uint64_t a2)
{
  sub_1B1F5C278(a1, a2);
}

uint64_t sub_1B1F5B45C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E530;
  KeyPath = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8160, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F72198;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F721D4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ACBB28(0x6E6F697469736F70, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1791524(0, &qword_1ED4B8118, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F728B4;
  v6[5] = v5;
  v6[2] = sub_1B1B08B14;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ACBF04(0x7461746E6569726FLL, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F72198;
  v9[5] = v8;
  v9[2] = sub_1B1F721D4;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ACBB28(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8130, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F72A7C;
  v12[5] = v11;
  v12[2] = sub_1B1F72AA4;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1ACBF7C(0x726F66736E617274, 0xE90000000000006DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          2304,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F72A7C;
  v15[5] = v14;
  v15[2] = sub_1B1F72AA4;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ACBF7C(0x617254646C726F77, 0xEE006D726F66736ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          16,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1F72198;
  v18[5] = v17;
  v18[2] = sub_1B1F721D4;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ACBB28(0x72656C7565, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          16,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  result = sub_1B2228AD0();
  qword_1EEFD56D0 = v0;
  return result;
}

uint64_t sub_1B1F5BA48()
{
  return 0x726F66736E617254;
}

uint64_t sub_1B1F5BA64(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF573E0);
}

uint64_t sub_1B1F5BA80(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v7[4];

  sub_1B1D8EBF4(a1, (uint64_t)v1);
  sub_1B1F78A28(v1, v7);
  v3 = MEMORY[0x1B5E240CC](v7);
  sub_1B1F2F2C4((uint64_t)v7);
  if (!v3)
    goto LABEL_5;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v5 = objc_msgSend(v4, sel_presentationNode);
  swift_unknownObjectRelease();
LABEL_6:
  swift_unknownObjectWeakAssign();

  return sub_1B1F2F2C4(a1);
}

uint64_t sub_1B1F5BB3C()
{
  _QWORD *v0;
  uint64_t result;
  uint64_t v2;
  _QWORD v3[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
    return MEMORY[0x1B5E240CC](v0 + 4);
  sub_1B1F78A28(v0, v3);
  v2 = MEMORY[0x1B5E240CC](v3);
  sub_1B1F2F2C4((uint64_t)v3);
  if (v2)
  {
    objc_opt_self();
    result = swift_dynamicCastObjCClass();
    if (result)
      return result;
    swift_unknownObjectRelease();
  }
  return 0;
}

uint64_t sub_1B1F5BBD0()
{
  return sub_1B1F5BD70((SEL *)&selRef_isHidden);
}

float sub_1B1F5BBDC()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  float v5;
  _QWORD v7[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v0, v7);
    v2 = MEMORY[0x1B5E240CC](v7);
    sub_1B1F2F2C4((uint64_t)v7);
    if (v2)
    {
      objc_opt_self();
      v3 = swift_dynamicCastObjCClass();
      if (v3)
      {
        v1 = (void *)v3;
        goto LABEL_7;
      }
      swift_unknownObjectRelease();
    }
    return 1.0;
  }
  v1 = (void *)MEMORY[0x1B5E240CC](v0 + 4);
  if (!v1)
    return 1.0;
LABEL_7:
  objc_msgSend(v1, sel_opacity);
  v5 = v4;

  return v5;
}

id sub_1B1F5BCA4()
{
  _QWORD *v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD v5[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = (void *)MEMORY[0x1B5E240CC](v0 + 4);
    if (!v1)
      return 0;
LABEL_7:
    v2 = objc_msgSend(v1, sel_renderingOrder);

    return v2;
  }
  sub_1B1F78A28(v0, v5);
  v2 = (id)MEMORY[0x1B5E240CC](v5);
  sub_1B1F2F2C4((uint64_t)v5);
  if (v2)
  {
    objc_opt_self();
    v3 = swift_dynamicCastObjCClass();
    if (!v3)
    {
      swift_unknownObjectRelease();
      return 0;
    }
    v1 = (void *)v3;
    goto LABEL_7;
  }
  return v2;
}

uint64_t sub_1B1F5BD64()
{
  return sub_1B1F5BD70((SEL *)&selRef_castsShadow);
}

uint64_t sub_1B1F5BD70(SEL *a1)
{
  _QWORD *v1;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD v8[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = (void *)MEMORY[0x1B5E240CC](v1 + 4);
    if (!v3)
      return 1;
LABEL_7:
    v6 = objc_msgSend(v3, *a1);

    return v6 ^ 1;
  }
  sub_1B1F78A28(v1, v8);
  v4 = MEMORY[0x1B5E240CC](v8);
  sub_1B1F2F2C4((uint64_t)v8);
  if (v4)
  {
    objc_opt_self();
    v5 = swift_dynamicCastObjCClass();
    if (v5)
    {
      v3 = (void *)v5;
      goto LABEL_7;
    }
    swift_unknownObjectRelease();
  }
  return 1;
}

void sub_1B1F5BE38(char a1, SEL *a2)
{
  _QWORD *v2;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v2, v8);
    v6 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (!v6)
      return;
    objc_opt_self();
    v7 = swift_dynamicCastObjCClass();
    if (!v7)
    {
      swift_unknownObjectRelease();
      return;
    }
    v5 = (void *)v7;
LABEL_7:
    objc_msgSend(v5, *a2, (a1 & 1) == 0);

    return;
  }
  v5 = (void *)MEMORY[0x1B5E240CC](v2 + 4);
  if (v5)
    goto LABEL_7;
}

uint64_t sub_1B1F5BF00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _BYTE v38[40];

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v26[-v9];
  v31 = 0;
  swift_unknownObjectWeakInit();
  v31 = 0;
  v11 = swift_unknownObjectWeakAssign();
  v32 = 0x3E6C6C756E3CLL;
  v33 = 0xE600000000000000;
  sub_1B19FC2D0(v11, (uint64_t)v38);
  swift_unknownObjectWeakInit();
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  if (sub_1B2067BAC(2037, v12, v13))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v2)
    {
      sub_1B19FA070(&v30, v33);
      sub_1B19FC28C();
      sub_1B2229D6C();
LABEL_9:
      sub_1B1D8EB3C((uint64_t)&v34, (uint64_t)v38);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v30);
LABEL_17:
      sub_1B1C1F6E4((uint64_t)v38, a2);
    }
  }
  else
  {
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067BAC(2029, v14, v15))
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v2)
      {
        sub_1B19FA070(&v30, v33);
        v18 = sub_1B2229D30();
        v20 = v19;
        v27 = 0;
        swift_unknownObjectWeakInit();
        v27 = 0;
        v21 = swift_unknownObjectWeakAssign();
        v28 = v18;
        v29 = v20;
        sub_1B19FC2D0(v21, (uint64_t)&v34);
        goto LABEL_9;
      }
    }
    else
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B1C78FEC();
      sub_1B222A150();
      if (!v2)
      {
        v34 = 0;
        LOBYTE(v35) = 1;
        v36 = 0xD000000000000017;
        v37 = 0x80000001B23459F0;
        v16 = sub_1B2229778();
        if (v17)
          v22 = v16;
        else
          v22 = 0;
        if (v17)
          v23 = v17;
        else
          v23 = 0xE000000000000000;
        (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
        v35 = 0;
        swift_unknownObjectWeakInit();
        v35 = 0;
        v24 = swift_unknownObjectWeakAssign();
        v36 = v22;
        v37 = v23;
        sub_1B19FC2D0(v24, (uint64_t)&v30);
        sub_1B1D8EB3C((uint64_t)&v30, (uint64_t)v38);
        goto LABEL_17;
      }
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1F70C30((uint64_t)v38);
}

void sub_1B1F5C278(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t ObjectType;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v8[4];

  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a2 + 16))(v2, ObjectType, a2);
  sub_1B1F78A28(v2, v8);
  v5 = MEMORY[0x1B5E240CC](v8);
  sub_1B1F2F2C4((uint64_t)v8);
  if (!v5)
    goto LABEL_5;
  objc_opt_self();
  v6 = (void *)swift_dynamicCastObjCClass();
  if (!v6)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v7 = objc_msgSend(v6, sel_presentationNode);
  swift_unknownObjectRelease();
LABEL_6:
  swift_unknownObjectWeakAssign();

}

uint64_t sub_1B1F5C344@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F5BF00(a1, a2);
}

uint64_t sub_1B1F5C358(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B19FC3E4();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t sub_1B1F5C3F8@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[4];

  swift_unknownObjectWeakInit();
  v3[1] = 0;
  swift_unknownObjectWeakAssign();
  v3[2] = 0x3E6C6C756E3CLL;
  v3[3] = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v3, a1);
  return swift_unknownObjectWeakInit();
}

BOOL sub_1B1F5C46C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  _QWORD v5[4];

  sub_1B1F78A28(v0, v5);
  v1 = MEMORY[0x1B5E240CC](v5);
  sub_1B1F2F2C4((uint64_t)v5);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (!v2)
      swift_unknownObjectRelease();
  }
  else
  {
    v2 = 0;
  }
  v3 = objc_msgSend(v2, sel_model);

  if (v3)
  return v3 != 0;
}

uint64_t sub_1B1F5C510()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t KeyPath;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  v1 = *(_QWORD *)aVisible_0;
  v2 = unk_1EEF61418;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v4 = (_QWORD *)swift_allocObject();
  v4[4] = sub_1B1F72C88;
  v4[5] = KeyPath;
  v4[2] = sub_1B1F72CB0;
  v4[3] = KeyPath;
  v4[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  v5 = MEMORY[0x1E0DEE9D8];
  v6 = sub_1B1ACD320(v1, v2, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v4, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_bridgeObjectRelease();
  swift_release();
  *(_QWORD *)(v0 + 32) = v6;
  v7 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = sub_1B1F72D20;
  v8[5] = v7;
  v8[2] = sub_1B1F72D48;
  v8[3] = v7;
  v8[6] = v7;
  swift_allocObject();
  swift_retain_n();
  v9 = sub_1B1ACD390(0x7974696361706FLL, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v8, v7, 0, 0,
         0,
         v5,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v9;
  v10 = swift_getKeyPath();
  v11 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F72DDC;
  v12[5] = v10;
  v12[2] = sub_1B1F72E0C;
  v12[3] = v10;
  v12[6] = v10;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v13 = sub_1B1ACD400(0x6E697265646E6572, 0xEE00726564724F67, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v11, 1, 0, (uint64_t)v12, v10, 0, 0,
          0,
          v5,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1F72C88;
  v16[5] = v14;
  v16[2] = sub_1B1F72CB0;
  v16[3] = v14;
  v16[6] = v14;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v17 = sub_1B1ACD320(0x6168537374736163, 0xEB00000000776F64, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v15, 1, 0, (uint64_t)v16, v14, 0, 0,
          0,
          v5,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v17;
  result = sub_1B2228AD0();
  qword_1EEFD56D8 = v0;
  return result;
}

void sub_1B1F5C9A8(float *a1@<X8>)
{
  void *v2;
  void *v3;
  float v4;
  float v5;

  v2 = (void *)sub_1B1F5BB3C();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_opacity);
    v5 = v4;

  }
  else
  {
    v5 = 1.0;
  }
  *a1 = v5;
}

void sub_1B1F5C9FC(_QWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  id v4;

  v2 = (void *)sub_1B1F5BB3C();
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_renderingOrder);

  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
}

void sub_1B1F5CA50(SEL *a1@<X3>, char *a2@<X8>)
{
  void *v4;
  void *v5;
  unsigned __int8 v6;
  char v7;

  v4 = (void *)sub_1B1F5BB3C();
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, *a1);

    v7 = v6 ^ 1;
  }
  else
  {
    v7 = 1;
  }
  *a2 = v7;
}

uint64_t sub_1B1F5CAA8()
{
  return 0x696C696269736956;
}

uint64_t sub_1B1F5CAC4(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF573E8);
}

uint64_t sub_1B1F5CAE0()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v0, v7);
    v4 = MEMORY[0x1B5E240CC](v7);
    sub_1B1F2F2C4((uint64_t)v7);
    if (v4)
    {
      objc_opt_self();
      v5 = (void *)swift_dynamicCastObjCClass();
      if (!v5)
        swift_unknownObjectRelease();
    }
    else
    {
      v5 = 0;
    }
    v1 = objc_msgSend(v5, sel_light);

    if (v1)
      goto LABEL_3;
    return 2;
  }
  v1 = (id)v0[4];
  v2 = v1;
  if (!v1)
    return 2;
LABEL_3:
  v3 = objc_msgSend(v1, sel_type);

  return (uint64_t)v3;
}

double sub_1B1F5CBC4()
{
  id v0;
  void *v1;
  double v2;
  double v4;

  v0 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (!v0)
    return 0.0;
  v1 = v0;
  objc_msgSend(v0, sel_extendedLinearSRGBColor);
  v4 = v2;

  return v4;
}

void sub_1B1F5CC20(__n128 a1)
{
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __n128 v6;
  _QWORD v7[4];

  v6 = a1;
  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v2 = (id)v1[4];
    v3 = v2;
    if (!v2)
      return;
LABEL_9:
    objc_msgSend(v2, sel_setExtendedLinearSRGBColor_, v6.n128_f64[0], *(_OWORD *)&v6);

    return;
  }
  sub_1B1F78A28(v1, v7);
  v4 = MEMORY[0x1B5E240CC](v7);
  sub_1B1F2F2C4((uint64_t)v7);
  if (v4)
  {
    objc_opt_self();
    v5 = (void *)swift_dynamicCastObjCClass();
    if (!v5)
      swift_unknownObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v2 = objc_msgSend(v5, sel_light, *(_OWORD *)&v6);

  if (v2)
    goto LABEL_9;
}

float sub_1B1F5CD00()
{
  _QWORD *v0;
  id v1;
  id v2;
  float v3;
  float v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v0, v8);
    v5 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v5)
    {
      objc_opt_self();
      v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6)
        swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    v1 = objc_msgSend(v6, sel_light);

    if (v1)
      goto LABEL_3;
    return 1.0;
  }
  v1 = (id)v0[4];
  v2 = v1;
  if (!v1)
    return 1.0;
LABEL_3:
  objc_msgSend(v1, sel_intensity);
  v4 = v3;

  return v4;
}

float sub_1B1F5CDEC()
{
  return sub_1B1F5CF3C((SEL *)&selRef_temperature, (SEL *)&selRef_light);
}

double sub_1B1F5CE00()
{
  return sub_1B1F68C4C((SEL *)&selRef_areaExtents, (SEL *)&selRef_light);
}

id sub_1B1F5CE14()
{
  return sub_1B1F5CE3C((SEL *)&selRef_drawsArea, (SEL *)&selRef_light);
}

id sub_1B1F5CE28()
{
  return sub_1B1F5CE3C((SEL *)&selRef_doubleSided, (SEL *)&selRef_light);
}

id sub_1B1F5CE3C(SEL *a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v2, v11);
    v8 = MEMORY[0x1B5E240CC](v11);
    sub_1B1F2F2C4((uint64_t)v11);
    if (v8)
    {
      objc_opt_self();
      v9 = (void *)swift_dynamicCastObjCClass();
      if (!v9)
        swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
    }
    v5 = objc_msgSend(v9, *a2);

    if (v5)
      goto LABEL_3;
    return 0;
  }
  v5 = (id)v2[4];
  v6 = v5;
  if (!v5)
    return 0;
LABEL_3:
  v7 = objc_msgSend(v5, *a1);

  return v7;
}

float sub_1B1F5CF28()
{
  return sub_1B1F5CF3C((SEL *)&selRef_spotInnerAngle, (SEL *)&selRef_light);
}

float sub_1B1F5CF3C(SEL *a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  float v7;
  float v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v2, v12);
    v9 = MEMORY[0x1B5E240CC](v12);
    sub_1B1F2F2C4((uint64_t)v12);
    if (v9)
    {
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (!v10)
        swift_unknownObjectRelease();
    }
    else
    {
      v10 = 0;
    }
    v5 = objc_msgSend(v10, *a2);

    if (v5)
      goto LABEL_3;
    return 0.0;
  }
  v5 = (id)v2[4];
  v6 = v5;
  if (!v5)
    return 0.0;
LABEL_3:
  objc_msgSend(v5, *a1);
  v8 = v7;

  return v8;
}

float sub_1B1F5D030()
{
  return sub_1B1F5CF3C((SEL *)&selRef_spotOuterAngle, (SEL *)&selRef_light);
}

float sub_1B1F5D044()
{
  return sub_1B1F5CF3C((SEL *)&selRef_attenuationDistance, (SEL *)&selRef_light);
}

id sub_1B1F5D058()
{
  return sub_1B1F5CE3C((SEL *)&selRef_castsShadow, (SEL *)&selRef_light);
}

float sub_1B1F5D06C()
{
  return sub_1B1F5CF3C((SEL *)&selRef_shadowIntensity, (SEL *)&selRef_light);
}

id sub_1B1F5D080()
{
  return sub_1B1F68A2C((SEL *)&selRef_shadowSampleCount, (SEL *)&selRef_light);
}

float sub_1B1F5D094()
{
  return sub_1B1F5CF3C((SEL *)&selRef_shadowBias, (SEL *)&selRef_light);
}

uint64_t sub_1B1F5D0A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F64DF4(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F73470, (uint64_t (*)(_BYTE *))sub_1B1F2EAE4, a2);
}

void sub_1B1F5D0CC(uint64_t a1, uint64_t a2)
{
  sub_1B1F67A90(a1, a2, (SEL *)&selRef_light);
}

uint64_t sub_1B1F5D0EC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22A3200;
  KeyPath = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF5A6D0, (uint64_t (*)(uint64_t))type metadata accessor for VFXLightType, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F72EE4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F72F14;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ABCAD0(1701869940, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8170, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F72FC4;
  v6[5] = v5;
  v6[2] = sub_1B1F72FF4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ABCB48(0x726F6C6F63, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F73094;
  v9[5] = v8;
  v9[2] = sub_1B1F730BC;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1ABCF24(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F73094;
  v12[5] = v11;
  v12[2] = sub_1B1F730BC;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = v3;
  v14 = sub_1B1ABCF24(0x74617265706D6574, 0xEB00000000657275, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v14;
  v15 = swift_getKeyPath();
  v16 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8160, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v17 = (_QWORD *)swift_allocObject();
  v17[4] = sub_1B1F73140;
  v17[5] = v15;
  v17[2] = sub_1B1F73170;
  v17[3] = v15;
  v17[6] = v15;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v18 = sub_1B1ABCF94(0x6574784561657261, 0xEB0000000073746ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v16, 1, 0, (uint64_t)v17, v15, 0, 0,
          256,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v18;
  v19 = swift_getKeyPath();
  v20 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1F731C8;
  v21[5] = v19;
  v21[2] = sub_1B1F731F0;
  v21[3] = v19;
  v21[6] = v19;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v22 = sub_1B1ABD370(0x6572417377617264, 0xE900000000000061, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v20, 1, 0, (uint64_t)v21, v19, 0, 0,
          0,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v22;
  v23 = swift_getKeyPath();
  v24 = swift_getKeyPath();
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1F731C8;
  v25[5] = v23;
  v25[2] = sub_1B1F731F0;
  v25[3] = v23;
  v25[6] = v23;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v26 = sub_1B1ABD370(0x6953656C62756F64, 0xEB00000000646564, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v24, 1, 0, (uint64_t)v25, v23, 0, 0,
          0,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v26;
  v27 = swift_getKeyPath();
  v28 = swift_getKeyPath();
  v29 = (_QWORD *)swift_allocObject();
  v29[4] = sub_1B1F73094;
  v29[5] = v27;
  v29[2] = sub_1B1F730BC;
  v29[3] = v27;
  v29[6] = v27;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v30 = sub_1B1ABCF24(0x656E6E49746F7073, 0xEE00656C676E4172, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v28, 1, 0, (uint64_t)v29, v27, 0, 0,
          256,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v30;
  v31 = swift_getKeyPath();
  v32 = swift_getKeyPath();
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1F73094;
  v33[5] = v31;
  v33[2] = sub_1B1F730BC;
  v33[3] = v31;
  v33[6] = v31;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v34 = sub_1B1ABCF24(0x6574754F746F7073, 0xEE00656C676E4172, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v32, 1, 0, (uint64_t)v33, v31, 0, 0,
          0,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v34;
  v35 = v0;
  v36 = swift_getKeyPath();
  v37 = swift_getKeyPath();
  v38 = (_QWORD *)swift_allocObject();
  v38[4] = sub_1B1F73094;
  v38[5] = v36;
  v38[2] = sub_1B1F730BC;
  v38[3] = v36;
  v38[6] = v36;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v39 = sub_1B1ABCF24(0xD000000000000013, 0x80000001B2345830, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v37, 1, 0, (uint64_t)v38, v36, 0, 0,
          0,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 104) = v39;
  v40 = swift_getKeyPath();
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1F731C8;
  v42[5] = v40;
  v42[2] = sub_1B1F731F0;
  v42[3] = v40;
  v42[6] = v40;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v43 = sub_1B1ABD370(0x6168537374736163, 0xEB00000000776F64, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v41, 1, 0, (uint64_t)v42, v40, 0, 0,
          256,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 112) = v43;
  v44 = swift_getKeyPath();
  v45 = swift_getKeyPath();
  v46 = (_QWORD *)swift_allocObject();
  v46[4] = sub_1B1F73094;
  v46[5] = v44;
  v46[2] = sub_1B1F730BC;
  v46[3] = v44;
  v46[6] = v44;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v47 = sub_1B1ABCF24(0x6E49776F64616873, 0xEF797469736E6574, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v45, 1, 0, (uint64_t)v46, v44, 0, 0,
          0,
          v13,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 120) = v47;
  v48 = swift_getKeyPath();
  v49 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v50 = (_QWORD *)swift_allocObject();
  v50[4] = sub_1B1F733CC;
  v50[5] = v48;
  v50[2] = sub_1B1F733FC;
  v50[3] = v48;
  v50[6] = v48;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v51 = MEMORY[0x1E0DEE9D8];
  v52 = sub_1B1ABD3E0(0xD000000000000011, 0x80000001B2345850, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v49, 1, 0, (uint64_t)v50, v48, 0, 0,
          0,
          MEMORY[0x1E0DEE9D8],
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 128) = v52;
  v53 = swift_getKeyPath();
  v54 = swift_getKeyPath();
  v55 = (_QWORD *)swift_allocObject();
  v55[4] = sub_1B1F73094;
  v55[5] = v53;
  v55[2] = sub_1B1F730BC;
  v55[3] = v53;
  v55[6] = v53;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v56 = sub_1B1ABCF24(0x6942776F64616873, 0xEA00000000007361, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v54, 1, 0, (uint64_t)v55, v53, 0, 0,
          0,
          v51,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v35 + 136) = v56;
  result = sub_1B2228AD0();
  qword_1EEFD56E0 = v35;
  return result;
}

void sub_1B1F5DF30(uint64_t *a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (v2)
  {
    v3 = v2;
    v4 = (uint64_t)objc_msgSend(v2, sel_type);

  }
  else
  {
    v4 = 2;
  }
  *a1 = v4;
}

void sub_1B1F5DF90(float *a1@<X8>)
{
  id v2;
  void *v3;
  float v4;
  float v5;

  v2 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_intensity);
    v5 = v4;

  }
  else
  {
    v5 = 1.0;
  }
  *a1 = v5;
}

id sub_1B1F5DFF0()
{
  id result;
  void *v1;
  id v2;

  result = sub_1B1F66F5C((SEL *)&selRef_light);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_type);

    return (id)(v2 == (id)5);
  }
  return result;
}

void sub_1B1F5E038(BOOL *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  BOOL v5;

  v2 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_type);

    v5 = v4 == (id)5;
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
}

id sub_1B1F5E0A0()
{
  id result;
  void *v1;
  id v2;

  result = sub_1B1F66F5C((SEL *)&selRef_light);
  if (result)
  {
    v1 = result;
    v2 = objc_msgSend(result, sel_type);

    return (id)(v2 == (id)3);
  }
  return result;
}

void sub_1B1F5E0E8(BOOL *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  BOOL v5;

  v2 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_type);

    v5 = v4 == (id)3;
  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
}

BOOL sub_1B1F5E150()
{
  id v0;
  void *v1;
  id v2;

  v0 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (!v0)
    return 1;
  v1 = v0;
  v2 = objc_msgSend(v0, sel_type);

  return v2 != 0;
}

void sub_1B1F5E1A0(BOOL *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;
  BOOL v5;

  v2 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_type);

    v5 = v4 != 0;
  }
  else
  {
    v5 = 1;
  }
  *a1 = v5;
}

uint64_t sub_1B1F5E208()
{
  uint64_t v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  _QWORD v15[4];
  _QWORD v16[4];
  id v17;
  _QWORD v18[4];
  id v19;

  v1 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (!v1)
  {
    sub_1B1F73470(v0, (uint64_t)v18);
    goto LABEL_8;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, sel_type);

  sub_1B1F73470(v0, (uint64_t)v18);
  if (v3 == (id)2)
  {
LABEL_8:
    sub_1B1F2EAE4((uint64_t)v18);
    sub_1B1F73470(v0, (uint64_t)v16);
    goto LABEL_9;
  }
  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v4 = v19;
    v5 = v19;
    if (v4)
      goto LABEL_5;
  }
  else
  {
    sub_1B1F78A28(v18, v16);
    v9 = MEMORY[0x1B5E240CC](v16);
    sub_1B1F2F2C4((uint64_t)v16);
    if (v9)
    {
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (!v10)
        swift_unknownObjectRelease();
    }
    else
    {
      v10 = 0;
    }
    v4 = objc_msgSend(v10, sel_light);

    if (v4)
    {
LABEL_5:
      v6 = objc_msgSend(v4, sel_type);

      sub_1B1F2EAE4((uint64_t)v18);
      sub_1B1F73470(v0, (uint64_t)v16);
      if (v6 != (id)3)
        goto LABEL_17;
LABEL_9:
      v7 = 1;
      goto LABEL_10;
    }
  }
  sub_1B1F2EAE4((uint64_t)v18);
  sub_1B1F73470(v0, (uint64_t)v16);
LABEL_17:
  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v7 = (uint64_t)v17;
    v11 = v17;
    if (!v7)
      goto LABEL_10;
    goto LABEL_25;
  }
  sub_1B1F78A28(v16, v15);
  v12 = MEMORY[0x1B5E240CC](v15);
  sub_1B1F2F2C4((uint64_t)v15);
  if (v12)
  {
    objc_opt_self();
    v13 = (void *)swift_dynamicCastObjCClass();
    if (!v13)
      swift_unknownObjectRelease();
  }
  else
  {
    v13 = 0;
  }
  v7 = (uint64_t)objc_msgSend(v13, sel_light);

  if (v7)
  {
LABEL_25:
    v14 = objc_msgSend((id)v7, sel_type);

    v7 = v14 == (id)1;
  }
LABEL_10:
  sub_1B1F2EAE4((uint64_t)v16);
  return v7;
}

uint64_t sub_1B1F5E448()
{
  return 0x746867694CLL;
}

uint64_t sub_1B1F5E45C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF573F0);
}

float sub_1B1F5E478()
{
  return sub_1B1F5E490((SEL *)&selRef_orthographicScale);
}

float sub_1B1F5E484()
{
  return sub_1B1F5E490((SEL *)&selRef_focalLength);
}

float sub_1B1F5E490(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  float v5;
  float v6;
  uint64_t v7;
  void *v8;
  _QWORD v10[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v1, v10);
    v7 = MEMORY[0x1B5E240CC](v10);
    sub_1B1F2F2C4((uint64_t)v10);
    if (v7)
    {
      objc_opt_self();
      v8 = (void *)swift_dynamicCastObjCClass();
      if (!v8)
        swift_unknownObjectRelease();
    }
    else
    {
      v8 = 0;
    }
    v3 = objc_msgSend(v8, sel_camera);

    if (v3)
      goto LABEL_3;
    return 1.0;
  }
  v3 = (id)v1[4];
  v4 = v3;
  if (!v3)
    return 1.0;
LABEL_3:
  objc_msgSend(v3, *a1);
  v6 = v5;

  return v6;
}

float sub_1B1F5E584()
{
  return sub_1B1F5E490((SEL *)&selRef_fieldOfView);
}

float sub_1B1F5E590()
{
  return sub_1B1F5E490((SEL *)&selRef_sensorHeight);
}

float sub_1B1F5E59C()
{
  return sub_1B1F5E490((SEL *)&selRef_zNear);
}

float sub_1B1F5E5A8()
{
  return sub_1B1F5E490((SEL *)&selRef_zFar);
}

id sub_1B1F5E5B4()
{
  return sub_1B1F5F5E4((SEL *)&selRef_wantsHDR);
}

float sub_1B1F5E5C0()
{
  return sub_1B1F5CF3C((SEL *)&selRef_focusDistance, (SEL *)&selRef_camera);
}

double sub_1B1F5E5D4()
{
  _QWORD *v0;
  id v1;
  id v2;
  double v3;
  uint64_t v5;
  void *v6;
  double v7;
  _QWORD v8[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = (id)v0[4];
    v2 = v1;
    if (v1)
    {
LABEL_3:
      objc_msgSend(v1, sel_projectionTransform);
      v7 = v3;

      return v7;
    }
  }
  else
  {
    sub_1B1F78A28(v0, v8);
    v5 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v5)
    {
      objc_opt_self();
      v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6)
        swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    v1 = objc_msgSend(v6, sel_camera);

    if (v1)
      goto LABEL_3;
  }
  return 0.0;
}

double sub_1B1F5E6CC()
{
  id v0;
  void *v1;
  simd_float4 v2;
  simd_float4 v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4x4 v6;
  double result;
  simd_float4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;

  v0 = sub_1B1F66F5C((SEL *)&selRef_camera);
  if (v0)
  {
    v1 = v0;
    objc_msgSend(v0, sel_projectionTransform);
    v11 = v2;
    v9 = v4;
    v10 = v3;
    v8 = v5;

    v6.columns[3] = v8;
    v6.columns[2] = v9;
    v6.columns[1] = v10;
    v6.columns[0] = v11;
  }
  else
  {
    v6.columns[0] = 0uLL;
    v6.columns[1] = 0uLL;
    v6.columns[2] = 0uLL;
    v6.columns[3] = 0uLL;
  }
  *(_QWORD *)&result = (unint64_t)__invert_f4(v6);
  return result;
}

double sub_1B1F5E73C()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v5;
  _QWORD v6[4];

  sub_1B1F78A28(v0, v6);
  v1 = MEMORY[0x1B5E240CC](v6);
  sub_1B1F2F2C4((uint64_t)v6);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      objc_msgSend(v2, sel_worldTransform);
      v5 = v3;
      swift_unknownObjectRelease();
      return v5;
    }
    swift_unknownObjectRelease();
  }
  return 0.0;
}

double sub_1B1F5E7DC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  simd_float4 v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4x4 v7;
  double result;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  _QWORD v13[4];

  sub_1B1F78A28(v0, v13);
  v1 = MEMORY[0x1B5E240CC](v13);
  sub_1B1F2F2C4((uint64_t)v13);
  if (!v1)
    goto LABEL_5;
  objc_opt_self();
  v2 = (void *)swift_dynamicCastObjCClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v7.columns[0] = 0uLL;
    v7.columns[1] = 0uLL;
    v7.columns[2] = 0uLL;
    v7.columns[3] = 0uLL;
    goto LABEL_6;
  }
  objc_msgSend(v2, sel_worldTransform);
  v11 = v4;
  v12 = v3;
  v9 = v6;
  v10 = v5;
  swift_unknownObjectRelease();
  v7.columns[3] = v9;
  v7.columns[2] = v10;
  v7.columns[1] = v11;
  v7.columns[0] = v12;
LABEL_6:
  *(_QWORD *)&result = (unint64_t)__invert_f4(v7);
  return result;
}

double sub_1B1F5E880()
{
  _QWORD *v0;
  id v1;
  id v2;
  double v3;
  double v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v0, v8);
    v5 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v5)
    {
      objc_opt_self();
      v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6)
        swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    v1 = objc_msgSend(v6, sel_camera);

    if (v1)
      goto LABEL_3;
    return 0.0;
  }
  v1 = (id)v0[4];
  v2 = v1;
  if (!v1)
    return 0.0;
LABEL_3:
  objc_msgSend(v1, sel_filmOffset);
  v4 = v3;

  return v4;
}

uint64_t sub_1B1F5E96C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F67710(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F7871C, (uint64_t (*)(_BYTE *))sub_1B1F2EB54, a2);
}

void sub_1B1F5E990(uint64_t a1, uint64_t a2)
{
  sub_1B1F67A90(a1, a2, (SEL *)&selRef_camera);
}

uint64_t sub_1B1F5E9B0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22A3210;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1F73594;
  v3[5] = KeyPath;
  v3[2] = sub_1B1F735BC;
  v3[3] = KeyPath;
  v3[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1ABD804(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 1, 0, (uint64_t)v3, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v5;
  v6 = swift_getKeyPath();
  v7 = swift_getKeyPath();
  v8 = (_QWORD *)swift_allocObject();
  v8[4] = sub_1B1F73594;
  v8[5] = v6;
  v8[2] = sub_1B1F735BC;
  v8[3] = v6;
  v8[6] = v6;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v9 = sub_1B1ABD804(0x6E654C6C61636F66, 0xEB00000000687467, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v7, 1, 0, (uint64_t)v8, v6, 0, 0,
         0,
         v4,
         0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v9;
  v10 = swift_getKeyPath();
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F73594;
  v12[5] = v10;
  v12[2] = sub_1B1F735BC;
  v12[3] = v10;
  v12[6] = v10;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v13 = sub_1B1ABD804(0x56664F646C656966, 0xEB00000000776569, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v11, 1, 0, (uint64_t)v12, v10, 0, 0,
          0,
          v4,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F73594;
  v15[5] = v14;
  v15[2] = sub_1B1F735BC;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1ABD804(0x6548726F736E6573, 0xEC00000074686769, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1F73594;
  v18[5] = v17;
  v18[2] = sub_1B1F735BC;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1ABD804(0x7369447375636F66, 0xED000065636E6174, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1F73594;
  v21[5] = v20;
  v21[2] = sub_1B1F735BC;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1ABD804(0x7261654E7ALL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          256,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1F73594;
  v24[5] = v23;
  v24[2] = sub_1B1F735BC;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1ABD804(1918977658, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v25;
  v26 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1F737B0;
  v27[5] = v26;
  v27[2] = sub_1B1F737D8;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1ABD874(0x52444873746E6177, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          256,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v28;
  v29 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8150, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1F73830;
  v30[5] = v29;
  v30[2] = sub_1B1F73860;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1ABD8E4(0x7366664F6D6C6966, 0xEA00000000007465, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v31;
  v32 = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8130, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1F73970;
  v33[5] = v32;
  v33[2] = sub_1B1F73998;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1ABDCC0(0xD000000000000013, 0x80000001B2345870, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          2048,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 104) = v34;
  v35 = swift_getKeyPath();
  v36 = (_QWORD *)swift_allocObject();
  v36[4] = sub_1B1F73970;
  v36[5] = v35;
  v36[2] = sub_1B1F73998;
  v36[3] = v35;
  v36[6] = v35;
  swift_allocObject();
  swift_retain_n();
  v37 = sub_1B1ABDCC0(0xD00000000000001ALL, 0x80000001B2345890, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v36, v35, 0, 0,
          16,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 112) = v37;
  v38 = swift_getKeyPath();
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1F73970;
  v39[5] = v38;
  v39[2] = sub_1B1F73998;
  v39[3] = v38;
  v39[6] = v38;
  swift_allocObject();
  swift_retain_n();
  v40 = sub_1B1ABDCC0(0x617254646C726F77, 0xEE006D726F66736ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v39, v38, 0, 0,
          2048,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 120) = v40;
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1F73970;
  v42[5] = v41;
  v42[2] = sub_1B1F73998;
  v42[3] = v41;
  v42[6] = v41;
  swift_allocObject();
  swift_retain_n();
  v43 = sub_1B1ABDCC0(0xD000000000000015, 0x80000001B23458B0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v42, v41, 0, 0,
          16,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 128) = v43;
  result = sub_1B2228AD0();
  qword_1EEFD56E8 = v0;
  return result;
}

id sub_1B1F5F5D8()
{
  return sub_1B1F5F5E4((SEL *)&selRef_usesOrthographicProjection);
}

id sub_1B1F5F5E4(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v1, v9);
    v6 = MEMORY[0x1B5E240CC](v9);
    sub_1B1F2F2C4((uint64_t)v9);
    if (v6)
    {
      objc_opt_self();
      v7 = (void *)swift_dynamicCastObjCClass();
      if (!v7)
        swift_unknownObjectRelease();
    }
    else
    {
      v7 = 0;
    }
    v3 = objc_msgSend(v7, sel_camera);

    if (v3)
      goto LABEL_3;
    return 0;
  }
  v3 = (id)v1[4];
  v4 = v3;
  if (!v3)
    return 0;
LABEL_3:
  v5 = objc_msgSend(v3, *a1);

  return v5;
}

uint64_t sub_1B1F5F6D0()
{
  _QWORD *v0;
  id v1;
  id v2;
  unsigned int v3;
  uint64_t v5;
  void *v6;
  _QWORD v7[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = (id)v0[4];
    v2 = v1;
    if (v1)
    {
LABEL_3:
      v3 = objc_msgSend(v1, sel_usesOrthographicProjection);

      return v3 ^ 1;
    }
  }
  else
  {
    sub_1B1F78A28(v0, v7);
    v5 = MEMORY[0x1B5E240CC](v7);
    sub_1B1F2F2C4((uint64_t)v7);
    if (v5)
    {
      objc_opt_self();
      v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6)
        swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    v1 = objc_msgSend(v6, sel_camera);

    if (v1)
      goto LABEL_3;
  }
  return 1;
}

void sub_1B1F5F7B4(SEL *a1@<X3>, float *a2@<X8>)
{
  id v4;
  void *v5;
  float v6;
  float v7;

  v4 = sub_1B1F66F5C((SEL *)&selRef_camera);
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, *a1);
    v7 = v6;

  }
  else
  {
    v7 = 1.0;
  }
  *a2 = v7;
}

void sub_1B1F5F81C(simd_float4x4 *a1@<X8>)
{
  id v2;
  void *v3;
  simd_float4 v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4x4 v8;
  simd_float4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;

  v2 = sub_1B1F66F5C((SEL *)&selRef_camera);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_projectionTransform);
    v12 = v4;
    v10 = v6;
    v11 = v5;
    v9 = v7;

    v8.columns[3] = v9;
    v8.columns[2] = v10;
    v8.columns[1] = v11;
    v8.columns[0] = v12;
  }
  else
  {
    v8.columns[0] = 0uLL;
    v8.columns[1] = 0uLL;
    v8.columns[2] = 0uLL;
    v8.columns[3] = 0uLL;
  }
  *a1 = j____invert_f4(v8);
}

uint64_t sub_1B1F5F8A4@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD v18[4];

  sub_1B1F78A28(a1, v18);
  v3 = MEMORY[0x1B5E240CC](v18);
  result = sub_1B1F2F2C4((uint64_t)v18);
  if (!v3)
    goto LABEL_5;
  objc_opt_self();
  v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5)
  {
    result = swift_unknownObjectRelease();
LABEL_5:
    v12 = 0uLL;
    v13 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    goto LABEL_6;
  }
  objc_msgSend(v5, sel_worldTransform);
  v16 = v7;
  v17 = v6;
  v14 = v9;
  v15 = v8;
  result = swift_unknownObjectRelease();
  v11 = v14;
  v10 = v15;
  v13 = v16;
  v12 = v17;
LABEL_6:
  *a2 = v12;
  a2[1] = v13;
  a2[2] = v10;
  a2[3] = v11;
  return result;
}

void sub_1B1F5F94C(__int128 *a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _QWORD v8[4];

  v6 = a1[1];
  v7 = *a1;
  v4 = a1[3];
  v5 = a1[2];
  sub_1B1F78A28(a2, v8);
  v2 = MEMORY[0x1B5E240CC](v8);
  sub_1B1F2F2C4((uint64_t)v8);
  if (v2)
  {
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (!v3)
      swift_unknownObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v3, sel_setWorldTransform_, *(double *)&v7, *(double *)&v6, *(double *)&v5, *(double *)&v4, v4, v5, v6, v7);

}

void sub_1B1F5F9F8(_QWORD *a1@<X0>, simd_float4x4 *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  simd_float4 v5;
  simd_float4 v6;
  simd_float4 v7;
  simd_float4 v8;
  simd_float4x4 v9;
  simd_float4 v10;
  simd_float4 v11;
  simd_float4 v12;
  simd_float4 v13;
  _QWORD v14[4];

  sub_1B1F78A28(a1, v14);
  v3 = MEMORY[0x1B5E240CC](v14);
  sub_1B1F2F2C4((uint64_t)v14);
  if (!v3)
    goto LABEL_5;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v9.columns[0] = 0uLL;
    v9.columns[1] = 0uLL;
    v9.columns[2] = 0uLL;
    v9.columns[3] = 0uLL;
    goto LABEL_6;
  }
  objc_msgSend(v4, sel_worldTransform);
  v12 = v6;
  v13 = v5;
  v10 = v8;
  v11 = v7;
  swift_unknownObjectRelease();
  v9.columns[3] = v10;
  v9.columns[2] = v11;
  v9.columns[1] = v12;
  v9.columns[0] = v13;
LABEL_6:
  *a2 = j____invert_f4(v9);
}

uint64_t sub_1B1F5FAA4()
{
  return 0x6172656D6143;
}

uint64_t sub_1B1F5FAB8(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF573F8);
}

float sub_1B1F5FAD4()
{
  return sub_1B1F5FAFC((SEL *)&selRef_intensity, (SEL *)&selRef_bloom);
}

float sub_1B1F5FAE8()
{
  return sub_1B1F5FAFC((SEL *)&selRef_threshold, (SEL *)&selRef_bloom);
}

float sub_1B1F5FAFC(SEL *a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  float v7;
  float v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v13[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v2, v13);
    v9 = MEMORY[0x1B5E240CC](v13);
    sub_1B1F2F2C4((uint64_t)v13);
    if (v9)
    {
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (!v10)
        swift_unknownObjectRelease();
    }
    else
    {
      v10 = 0;
    }
    v11 = objc_msgSend(v10, sel_camera);

    v5 = objc_msgSend(v11, *a2);
    if (v5)
      goto LABEL_3;
    return 0.0;
  }
  v5 = (id)v2[4];
  v6 = v5;
  if (!v5)
    return 0.0;
LABEL_3:
  objc_msgSend(v5, *a1);
  v8 = v7;

  return v8;
}

float sub_1B1F5FC18()
{
  return sub_1B1F5FAFC((SEL *)&selRef_thresholdSmoothness, (SEL *)&selRef_bloom);
}

id sub_1B1F5FC2C()
{
  return sub_1B1F5FDDC((SEL *)&selRef_useHighQuality, (SEL *)&selRef_bloom);
}

__n128 sub_1B1F5FC40()
{
  id v0;
  void *v1;
  __int128 v2;
  __n128 result;
  __int128 v8;

  v0 = sub_1B1F6082C((SEL *)&selRef_bloom);
  if (v0)
  {
    v1 = v0;
    objc_msgSend(v0, sel_colorFilter);
    v8 = v2;

    return (__n128)v8;
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
  }
  return result;
}

float sub_1B1F5FC94()
{
  return sub_1B1F5FAFC((SEL *)&selRef_contrast, (SEL *)&selRef_bloom);
}

float sub_1B1F5FCA8()
{
  return sub_1B1F5FAFC((SEL *)&selRef_saturation, (SEL *)&selRef_bloom);
}

id sub_1B1F5FCBC()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v8[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v0, v8);
    v4 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v4)
    {
      objc_opt_self();
      v5 = (void *)swift_dynamicCastObjCClass();
      if (!v5)
        swift_unknownObjectRelease();
    }
    else
    {
      v5 = 0;
    }
    v6 = objc_msgSend(v5, sel_camera);

    v1 = objc_msgSend(v6, sel_bloom);
    if (v1)
      goto LABEL_3;
    return 0;
  }
  v1 = (id)v0[4];
  v2 = v1;
  if (!v1)
    return 0;
LABEL_3:
  v3 = objc_msgSend(v1, sel_iterationCount);

  return v3;
}

id sub_1B1F5FDC8()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_bloom);
}

id sub_1B1F5FDDC(SEL *a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  id v10;
  _QWORD v12[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v2, v12);
    v8 = MEMORY[0x1B5E240CC](v12);
    sub_1B1F2F2C4((uint64_t)v12);
    if (v8)
    {
      objc_opt_self();
      v9 = (void *)swift_dynamicCastObjCClass();
      if (!v9)
        swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
    }
    v10 = objc_msgSend(v9, sel_camera);

    v5 = objc_msgSend(v10, *a2);
    if (v5)
      goto LABEL_3;
    return 0;
  }
  v5 = (id)v2[4];
  v6 = v5;
  if (!v5)
    return 0;
LABEL_3:
  v7 = objc_msgSend(v5, *a1);

  return v7;
}

uint64_t sub_1B1F5FEF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F78750, (uint64_t (*)(_BYTE *))sub_1B1F2EBC4, a2);
}

void sub_1B1F5FF14(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_bloom);
}

uint64_t sub_1B1F5FF30()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E480;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F73A9C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F73AC4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD1F6C(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F73B2C;
  v6[5] = v5;
  v6[2] = sub_1B1F73B54;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD1FDC(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F73B2C;
  v9[5] = v8;
  v9[2] = sub_1B1F73B54;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD1FDC(0x6C6F687365726874, 0xE900000000000064, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F73B2C;
  v12[5] = v11;
  v12[2] = sub_1B1F73B54;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD1FDC(0xD000000000000013, 0x80000001B2328240, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F73A9C;
  v15[5] = v14;
  v15[2] = sub_1B1F73AC4;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD1F6C(0x5168676948657375, 0xEE007974696C6175, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8160, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1F73CCC;
  v18[5] = v17;
  v18[2] = sub_1B1F73CFC;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AD204C(0x6C6946726F6C6F63, 0xEB00000000726574, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1F73B2C;
  v21[5] = v20;
  v21[2] = sub_1B1F73B54;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AD1FDC(0x74736172746E6F63, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1F73B2C;
  v24[5] = v23;
  v24[2] = sub_1B1F73B54;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AD1FDC(0x6974617275746173, 0xEA00000000006E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  v26 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1F73DC4;
  v27[5] = v26;
  v27[2] = sub_1B1F73DF4;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1AD2428(0x6F69746172657469, 0xEE00746E756F436ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v28;
  result = sub_1B2228AD0();
  qword_1EEFD56F0 = v0;
  return result;
}

void sub_1B1F607B0(_QWORD *a1@<X8>)
{
  id v2;
  void *v3;
  id v4;

  v2 = sub_1B1F6082C((SEL *)&selRef_bloom);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_iterationCount);

  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
}

uint64_t sub_1B1F60810(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57400);
}

id sub_1B1F6082C(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  _QWORD v9[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = (id)v1[4];
    v4 = v3;
  }
  else
  {
    sub_1B1F78A28(v1, v9);
    v5 = MEMORY[0x1B5E240CC](v9);
    sub_1B1F2F2C4((uint64_t)v9);
    if (v5)
    {
      objc_opt_self();
      v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6)
        swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    v7 = objc_msgSend(v6, sel_camera);

    v3 = objc_msgSend(v7, *a1);
  }
  return v3;
}

id sub_1B1F60914()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_toneMapping);
}

void sub_1B1F60928(char a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v10[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v5 = (id)v2[4];
    v6 = v5;
    if (!v5)
      return;
LABEL_9:
    objc_msgSend(v5, sel_setEnabled_, a1 & 1);

    return;
  }
  sub_1B1F78A28(v2, v10);
  v7 = MEMORY[0x1B5E240CC](v10);
  sub_1B1F2F2C4((uint64_t)v10);
  if (v7)
  {
    objc_opt_self();
    v8 = (void *)swift_dynamicCastObjCClass();
    if (!v8)
      swift_unknownObjectRelease();
  }
  else
  {
    v8 = 0;
  }
  v9 = objc_msgSend(v8, sel_camera);

  v5 = objc_msgSend(v9, *a2);
  if (v5)
    goto LABEL_9;
}

uint64_t sub_1B1F60A38()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v8[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v0, v8);
    v4 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v4)
    {
      objc_opt_self();
      v5 = (void *)swift_dynamicCastObjCClass();
      if (!v5)
        swift_unknownObjectRelease();
    }
    else
    {
      v5 = 0;
    }
    v6 = objc_msgSend(v5, sel_camera);

    v1 = objc_msgSend(v6, sel_toneMapping);
    if (v1)
      goto LABEL_3;
    return 1;
  }
  v1 = (id)v0[4];
  v2 = v1;
  if (!v1)
    return 1;
LABEL_3:
  v3 = objc_msgSend(v1, sel_mode);

  return (uint64_t)v3;
}

float sub_1B1F60B44()
{
  return sub_1B1F5FAFC((SEL *)&selRef_toeStrength, (SEL *)&selRef_toneMapping);
}

float sub_1B1F60B58()
{
  return sub_1B1F5FAFC((SEL *)&selRef_toeLength, (SEL *)&selRef_toneMapping);
}

float sub_1B1F60B6C()
{
  return sub_1B1F5FAFC((SEL *)&selRef_shoulderStrength, (SEL *)&selRef_toneMapping);
}

float sub_1B1F60B80()
{
  return sub_1B1F5FAFC((SEL *)&selRef_shoulderLength, (SEL *)&selRef_toneMapping);
}

float sub_1B1F60B94()
{
  return sub_1B1F5FAFC((SEL *)&selRef_shoulderAngle, (SEL *)&selRef_toneMapping);
}

float sub_1B1F60BA8()
{
  return sub_1B1F5FAFC((SEL *)&selRef_gamma, (SEL *)&selRef_toneMapping);
}

uint64_t sub_1B1F60BBC@<X0>(_QWORD *a1@<X0>, void (*a2)(_BYTE *, uint64_t)@<X1>, uint64_t (*a3)(_BYTE *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  swift_unknownObjectWeakInit();
  v11[1] = 0;
  swift_unknownObjectWeakAssign();
  v11[2] = 0x3E6C6C756E3CLL;
  v12 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v11, (uint64_t)v13);
  v15 = 0;
  v16 = 0;
  v14 = 0;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v4)
  {
    sub_1B19FA070(v11, v12);
    sub_1B19FC28C();
    sub_1B2229D6C();
    sub_1B1D8EB3C((uint64_t)&v10, (uint64_t)v13);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
    a2(v13, a4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return a3(v13);
}

void sub_1B1F60D04(uint64_t a1, uint64_t a2, SEL *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t ObjectType;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  _QWORD v13[4];

  v5 = v3;
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a2 + 16))(v3, ObjectType, a2);
  sub_1B1F78A28(v3, v13);
  v8 = MEMORY[0x1B5E240CC](v13);
  sub_1B1F2F2C4((uint64_t)v13);
  if (!v8)
    goto LABEL_5;
  objc_opt_self();
  v9 = (void *)swift_dynamicCastObjCClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v12 = 0;
    goto LABEL_6;
  }
  v10 = objc_msgSend(v9, sel_presentationNode);
  swift_unknownObjectRelease();
  v11 = objc_msgSend(v10, sel_camera);

  v12 = objc_msgSend(v11, *a3);
LABEL_6:

  v5[4] = v12;
}

uint64_t sub_1B1F60E14@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F78784, (uint64_t (*)(_BYTE *))sub_1B1F2EC34, a2);
}

void sub_1B1F60E38(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_toneMapping);
}

uint64_t sub_1B1F60E54()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E490;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F73EE0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F73F08;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD618C(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1EEF61450, (uint64_t (*)(uint64_t))type metadata accessor for VFXCameraToneMappingMode, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F73F40;
  v6[5] = v5;
  v6[2] = sub_1B1F73F70;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD61FC(1701080941, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F73FD8;
  v9[5] = v8;
  v9[2] = sub_1B1F74000;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD6274(0x6E65727453656F74, 0xEB00000000687467, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F73FD8;
  v12[5] = v11;
  v12[2] = sub_1B1F74000;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD6274(0x74676E654C656F74, 0xE900000000000068, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F73FD8;
  v15[5] = v14;
  v15[2] = sub_1B1F74000;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD6274(0xD000000000000010, 0x80000001B23458D0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1F73FD8;
  v18[5] = v17;
  v18[2] = sub_1B1F74000;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AD6274(0x7265646C756F6873, 0xEE006874676E654CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1F73FD8;
  v21[5] = v20;
  v21[2] = sub_1B1F74000;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AD6274(0x7265646C756F6873, 0xED0000656C676E41, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1F73FD8;
  v24[5] = v23;
  v24[2] = sub_1B1F74000;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AD6274(0x616D6D6167, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  result = sub_1B2228AD0();
  qword_1EEFD56F8 = v0;
  return result;
}

void sub_1B1F615C8(uint64_t *a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = sub_1B1F6082C((SEL *)&selRef_toneMapping);
  if (v2)
  {
    v3 = v2;
    v4 = (uint64_t)objc_msgSend(v2, sel_mode);

  }
  else
  {
    v4 = 1;
  }
  *a1 = v4;
}

uint64_t sub_1B1F61628(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57408);
}

float sub_1B1F61644()
{
  return sub_1B1F5FAFC((SEL *)&selRef_value, (SEL *)&selRef_exposure);
}

id sub_1B1F61658()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_exposure);
}

uint64_t sub_1B1F6166C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F787B8, (uint64_t (*)(_BYTE *))sub_1B1F2ECA4, a2);
}

void sub_1B1F61690(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_exposure);
}

uint64_t sub_1B1F616AC()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F74238;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F74260;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD4BB8(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F742C8;
  v6[5] = v5;
  v6[2] = sub_1B1F742F0;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD4C28(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5700 = v0;
  return result;
}

uint64_t sub_1B1F6191C()
{
  return 0x657275736F707845;
}

uint64_t sub_1B1F61934(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57410);
}

float sub_1B1F61950()
{
  return sub_1B1F5FAFC((SEL *)&selRef_radius, (SEL *)&selRef_lensBlur);
}

id sub_1B1F61964()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_lensBlur);
}

uint64_t sub_1B1F61978@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F787EC, (uint64_t (*)(_BYTE *))sub_1B1F2ED14, a2);
}

void sub_1B1F6199C(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_lensBlur);
}

uint64_t sub_1B1F619B8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F743A4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F743CC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD4C98(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F74434;
  v6[5] = v5;
  v6[2] = sub_1B1F7445C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD4D08(0x737569646172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5708 = v0;
  return result;
}

uint64_t sub_1B1F61C28(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57418);
}

float sub_1B1F61C44()
{
  return sub_1B1F5FAFC((SEL *)&selRef_intensity, (SEL *)&selRef_grain);
}

float sub_1B1F61C58()
{
  return sub_1B1F5FAFC((SEL *)&selRef_scale, (SEL *)&selRef_grain);
}

id sub_1B1F61C6C()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isColored, (SEL *)&selRef_grain);
}

id sub_1B1F61C80()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_grain);
}

uint64_t sub_1B1F61C94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F78820, (uint64_t (*)(_BYTE *))sub_1B1F2ED84, a2);
}

void sub_1B1F61CB8(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_grain);
}

uint64_t sub_1B1F61CD4()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F74510;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F74538;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD2498(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F745A0;
  v6[5] = v5;
  v6[2] = sub_1B1F745C8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD2508(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F745A0;
  v9[5] = v8;
  v9[2] = sub_1B1F745C8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD2508(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F74510;
  v12[5] = v11;
  v12[2] = sub_1B1F74538;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD2498(0x65726F6C6F437369, 0xE900000000000064, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD5710 = v0;
  return result;
}

uint64_t sub_1B1F620F8()
{
  return 0x6E69617247;
}

uint64_t sub_1B1F6210C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57420);
}

float sub_1B1F62128()
{
  return sub_1B1F5FAFC((SEL *)&selRef_intensity, (SEL *)&selRef_motionBlur);
}

id sub_1B1F6213C()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_motionBlur);
}

uint64_t sub_1B1F62150@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F78854, (uint64_t (*)(_BYTE *))sub_1B1F2EDF4, a2);
}

void sub_1B1F62174(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_motionBlur);
}

uint64_t sub_1B1F62190()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F7470C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F74734;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD5530(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F7479C;
  v6[5] = v5;
  v6[2] = sub_1B1F747C4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD55A0(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5718 = v0;
  return result;
}

uint64_t sub_1B1F62408()
{
  return 0x42206E6F69746F4DLL;
}

uint64_t sub_1B1F62428(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57428);
}

float sub_1B1F62444()
{
  return sub_1B1F5FAFC((SEL *)&selRef_fStop, (SEL *)&selRef_depthOfField);
}

uint64_t sub_1B1F62458()
{
  return sub_1B1F62470((SEL *)&selRef_apertureBladeCount);
}

uint64_t sub_1B1F62464()
{
  return sub_1B1F62470((SEL *)&selRef_focalBlurSampleCount);
}

uint64_t sub_1B1F62470(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  _QWORD v10[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v1, v10);
    v6 = MEMORY[0x1B5E240CC](v10);
    sub_1B1F2F2C4((uint64_t)v10);
    if (v6)
    {
      objc_opt_self();
      v7 = (void *)swift_dynamicCastObjCClass();
      if (!v7)
        swift_unknownObjectRelease();
    }
    else
    {
      v7 = 0;
    }
    v8 = objc_msgSend(v7, sel_camera);

    v3 = objc_msgSend(v8, sel_depthOfField);
    if (v3)
      goto LABEL_3;
    return 5;
  }
  v3 = (id)v1[4];
  v4 = v3;
  if (!v3)
    return 5;
LABEL_3:
  v5 = objc_msgSend(v3, *a1);

  return (uint64_t)v5;
}

id sub_1B1F6257C()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_depthOfField);
}

uint64_t sub_1B1F62590@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F78888, (uint64_t (*)(_BYTE *))sub_1B1F2EE64, a2);
}

void sub_1B1F625B4(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_depthOfField);
}

uint64_t sub_1B1F625D0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F74878;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F748A0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD62E4(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F74908;
  v6[5] = v5;
  v6[2] = sub_1B1F74930;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD6354(0x706F745366, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B8100, MEMORY[0x1E0DEB418], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F74980;
  v9[5] = v8;
  v9[2] = sub_1B1F749B0;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD63C4(0x756F436564616C62, 0xEA0000000000746ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F74980;
  v12[5] = v11;
  v12[2] = sub_1B1F749B0;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD63C4(0x6F43656C706D6173, 0xEB00000000746E75, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD5720 = v0;
  return result;
}

void sub_1B1F62A00(SEL *a1@<X3>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;

  v4 = sub_1B1F6082C((SEL *)&selRef_depthOfField);
  if (v4)
  {
    v5 = v4;
    v6 = (uint64_t)objc_msgSend(v4, *a1);

  }
  else
  {
    v6 = 5;
  }
  *a2 = v6;
}

uint64_t sub_1B1F62A60()
{
  return 0x666F206874706544;
}

uint64_t sub_1B1F62A84(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57430);
}

float sub_1B1F62AA0()
{
  return sub_1B1F5FAFC((SEL *)&selRef_intensity, (SEL *)&selRef_chromaticTransform);
}

double sub_1B1F62AB4()
{
  return sub_1B1F62B04((SEL *)&selRef_center, (SEL *)&selRef_chromaticTransform);
}

float sub_1B1F62AC8()
{
  return sub_1B1F5FAFC((SEL *)&selRef_fromZ, (SEL *)&selRef_chromaticTransform);
}

float sub_1B1F62ADC()
{
  return sub_1B1F5FAFC((SEL *)&selRef_fromAngle, (SEL *)&selRef_chromaticTransform);
}

double sub_1B1F62AF0()
{
  return sub_1B1F62B04((SEL *)&selRef_fromShift, (SEL *)&selRef_chromaticTransform);
}

double sub_1B1F62B04(SEL *a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  double v7;
  double v8;
  uint64_t v9;
  void *v10;
  id v11;
  _QWORD v13[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v2, v13);
    v9 = MEMORY[0x1B5E240CC](v13);
    sub_1B1F2F2C4((uint64_t)v13);
    if (v9)
    {
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (!v10)
        swift_unknownObjectRelease();
    }
    else
    {
      v10 = 0;
    }
    v11 = objc_msgSend(v10, sel_camera);

    v5 = objc_msgSend(v11, *a2);
    if (v5)
      goto LABEL_3;
    return 0.0;
  }
  v5 = (id)v2[4];
  v6 = v5;
  if (!v5)
    return 0.0;
LABEL_3:
  objc_msgSend(v5, *a1);
  v8 = v7;

  return v8;
}

float sub_1B1F62C20()
{
  return sub_1B1F5FAFC((SEL *)&selRef_toZ, (SEL *)&selRef_chromaticTransform);
}

float sub_1B1F62C34()
{
  return sub_1B1F5FAFC((SEL *)&selRef_toAngle, (SEL *)&selRef_chromaticTransform);
}

double sub_1B1F62C48()
{
  return sub_1B1F62B04((SEL *)&selRef_toShift, (SEL *)&selRef_chromaticTransform);
}

double sub_1B1F62C5C()
{
  return sub_1B1F62C74((SEL *)&selRef_color1);
}

double sub_1B1F62C68()
{
  return sub_1B1F62C74((SEL *)&selRef_color2);
}

double sub_1B1F62C74(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  double v5;
  uint64_t v7;
  void *v8;
  id v9;
  double v10;
  _QWORD v11[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = (id)v1[4];
    v4 = v3;
    if (v3)
    {
LABEL_3:
      objc_msgSend(v3, *a1);
      v10 = v5;

      return v10;
    }
  }
  else
  {
    sub_1B1F78A28(v1, v11);
    v7 = MEMORY[0x1B5E240CC](v11);
    sub_1B1F2F2C4((uint64_t)v11);
    if (v7)
    {
      objc_opt_self();
      v8 = (void *)swift_dynamicCastObjCClass();
      if (!v8)
        swift_unknownObjectRelease();
    }
    else
    {
      v8 = 0;
    }
    v9 = objc_msgSend(v8, sel_camera);

    v3 = objc_msgSend(v9, sel_chromaticTransform);
    if (v3)
      goto LABEL_3;
  }
  return 0.0;
}

double sub_1B1F62D80()
{
  return sub_1B1F62C74((SEL *)&selRef_color3);
}

id sub_1B1F62D8C()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_chromaticTransform);
}

double sub_1B1F62DA0()
{
  return sub_1B1F62B04((SEL *)&selRef_maskCenter, (SEL *)&selRef_chromaticTransform);
}

float sub_1B1F62DB4()
{
  return sub_1B1F5FAFC((SEL *)&selRef_maskRadius, (SEL *)&selRef_chromaticTransform);
}

id sub_1B1F62DC8()
{
  return sub_1B1F5FDDC((SEL *)&selRef_maskEnabled, (SEL *)&selRef_chromaticTransform);
}

float sub_1B1F62DDC()
{
  return sub_1B1F5FAFC((SEL *)&selRef_unMultBlending, (SEL *)&selRef_chromaticTransform);
}

uint64_t sub_1B1F62DF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F788BC, (uint64_t (*)(_BYTE *))sub_1B1F2EED4, a2);
}

void sub_1B1F62E14(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_chromaticTransform);
}

uint64_t sub_1B1F62E30()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22A3220;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F74B00;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F74B28;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD7090(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F74B8C;
  v6[5] = v5;
  v6[2] = sub_1B1F74BB4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD7100(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8150, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F74C0C;
  v9[5] = v8;
  v9[2] = sub_1B1F74C3C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD7170(0x7265746E6563, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F74B8C;
  v12[5] = v11;
  v12[2] = sub_1B1F74BB4;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD7100(0x5A6D6F7266, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F74B8C;
  v15[5] = v14;
  v15[2] = sub_1B1F74BB4;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD7100(0x6C676E416D6F7266, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1F74C0C;
  v18[5] = v17;
  v18[2] = sub_1B1F74C3C;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AD7170(0x666968536D6F7266, 0xE900000000000074, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1F74B8C;
  v21[5] = v20;
  v21[2] = sub_1B1F74BB4;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AD7100(5926772, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1F74B8C;
  v24[5] = v23;
  v24[2] = sub_1B1F74BB4;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AD7100(0x656C676E416F74, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1F74C0C;
  v27[5] = v26;
  v27[2] = sub_1B1F74C3C;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1AD7170(0x74666968536F74, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v28;
  v29 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8160, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1F74E14;
  v30[5] = v29;
  v30[2] = sub_1B1F74E44;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1AD754C(0x31726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 104) = v31;
  v32 = swift_getKeyPath();
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1F74E14;
  v33[5] = v32;
  v33[2] = sub_1B1F74E44;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1AD754C(0x32726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 112) = v34;
  v35 = swift_getKeyPath();
  v36 = (_QWORD *)swift_allocObject();
  v36[4] = sub_1B1F74E14;
  v36[5] = v35;
  v36[2] = sub_1B1F74E44;
  v36[3] = v35;
  v36[6] = v35;
  swift_allocObject();
  swift_retain_n();
  v37 = sub_1B1AD754C(0x33726F6C6F63, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v36, v35, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 120) = v37;
  v38 = swift_getKeyPath();
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1F74C0C;
  v39[5] = v38;
  v39[2] = sub_1B1F74C3C;
  v39[3] = v38;
  v39[6] = v38;
  swift_allocObject();
  swift_retain_n();
  v40 = v3;
  v41 = sub_1B1AD7170(0x746E65436B73616DLL, 0xEA00000000007265, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v39, v38, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 128) = v41;
  v42 = swift_getKeyPath();
  v43 = (_QWORD *)swift_allocObject();
  v43[4] = sub_1B1F74B8C;
  v43[5] = v42;
  v43[2] = sub_1B1F74BB4;
  v43[3] = v42;
  v43[6] = v42;
  swift_allocObject();
  swift_retain_n();
  v44 = sub_1B1AD7100(0x696461526B73616DLL, 0xEA00000000007375, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v43, v42, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 136) = v44;
  v45 = swift_getKeyPath();
  v46 = (_QWORD *)swift_allocObject();
  v46[4] = sub_1B1F74B00;
  v46[5] = v45;
  v46[2] = sub_1B1F74B28;
  v46[3] = v45;
  v46[6] = v45;
  swift_allocObject();
  swift_retain_n();
  v47 = sub_1B1AD7090(0x62616E456B73616DLL, 0xEB0000000064656CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v46, v45, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 144) = v47;
  v48 = swift_getKeyPath();
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1F74B8C;
  v49[5] = v48;
  v49[2] = sub_1B1F74BB4;
  v49[3] = v48;
  v49[6] = v48;
  swift_allocObject();
  swift_retain_n();
  v50 = sub_1B1AD7100(0x6C42746C754D6E75, 0xEE00676E69646E65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v49, v48, 0, 0,
          0,
          v40,
          0);
  swift_release();
  *(_QWORD *)(v0 + 152) = v50;
  result = sub_1B2228AD0();
  qword_1EEFD5728 = v0;
  return result;
}

unint64_t sub_1B1F63C34()
{
  return 0xD000000000000013;
}

uint64_t sub_1B1F63C50(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57438);
}

float sub_1B1F63C6C()
{
  return sub_1B1F5FAFC((SEL *)&selRef_radius, (SEL *)&selRef_doughnutBokeh);
}

double sub_1B1F63C80()
{
  return sub_1B1F62B04((SEL *)&selRef_maskCenter, (SEL *)&selRef_doughnutBokeh);
}

float sub_1B1F63C94()
{
  return sub_1B1F5FAFC((SEL *)&selRef_maskRadius, (SEL *)&selRef_doughnutBokeh);
}

id sub_1B1F63CA8()
{
  return sub_1B1F5FDDC((SEL *)&selRef_maskEnabled, (SEL *)&selRef_doughnutBokeh);
}

id sub_1B1F63CBC()
{
  return sub_1B1F5FDDC((SEL *)&selRef_isEnabled, (SEL *)&selRef_doughnutBokeh);
}

uint64_t sub_1B1F63CD0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F60BBC(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F788F0, (uint64_t (*)(_BYTE *))sub_1B1F2EF44, a2);
}

void sub_1B1F63CF4(uint64_t a1, uint64_t a2)
{
  sub_1B1F60D04(a1, a2, (SEL *)&selRef_doughnutBokeh);
}

uint64_t sub_1B1F63D10()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E500;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F750AC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F750D4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD6434(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F7513C;
  v6[5] = v5;
  v6[2] = sub_1B1F75164;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD64A4(0x737569646172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8150, &qword_1ED4BB080, MEMORY[0x1E0DEDD20]);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F7526C;
  v9[5] = v8;
  v9[2] = sub_1B1F7529C;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD6514(0x746E65436B73616DLL, 0xEA00000000007265, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F7513C;
  v12[5] = v11;
  v12[2] = sub_1B1F75164;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD64A4(0x696461526B73616DLL, 0xEA00000000007375, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F750AC;
  v15[5] = v14;
  v15[2] = sub_1B1F750D4;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AD6434(0x62616E456B73616DLL, 0xEB0000000064656CLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  result = sub_1B2228AD0();
  qword_1EEFD5730 = v0;
  return result;
}

void sub_1B1F64228(uint64_t a1@<X3>, uint64_t (*a2)(uint64_t)@<X4>, SEL *a3@<X5>, unsigned __int8 *a4@<X8>)
{
  void *v6;
  void *v7;
  unsigned __int8 v8;

  v6 = (void *)a2(a1);
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, *a3);

  }
  else
  {
    v8 = 0;
  }
  *a4 = v8;
}

uint64_t sub_1B1F64280()
{
  return 0x6B6F4220A98D9FF0;
}

uint64_t sub_1B1F6429C(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57440);
}

id sub_1B1F642B8()
{
  _QWORD *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  id v6;
  _QWORD v8[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = (void *)MEMORY[0x1B5E240CC](v0 + 4);
    v2 = objc_msgSend(v1, sel_camera);

    v3 = objc_msgSend(v2, sel_ssao);
  }
  else
  {
    sub_1B1F78A28(v0, v8);
    v4 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v4)
    {
      objc_opt_self();
      v5 = (void *)swift_dynamicCastObjCClass();
      if (!v5)
        swift_unknownObjectRelease();
    }
    else
    {
      v5 = 0;
    }
    v6 = objc_msgSend(v5, sel_camera);

    v3 = objc_msgSend(v6, sel_ssao);
  }
  return v3;
}

void sub_1B1F643E0()
{
  sub_1B1F64404((SEL *)&selRef_intensity);
}

void sub_1B1F643EC()
{
  sub_1B1F64404((SEL *)&selRef_radius);
}

void sub_1B1F643F8()
{
  sub_1B1F64404((SEL *)&selRef_falloff);
}

void sub_1B1F64404(SEL *a1)
{
  id v2;
  void *v3;

  v2 = sub_1B1F642B8();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, *a1);

  }
}

id sub_1B1F64458()
{
  id v0;
  void *v1;
  id v2;

  v0 = sub_1B1F642B8();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = objc_msgSend(v0, sel_isEnabled);

  return v2;
}

uint64_t sub_1B1F6449C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  _QWORD v9[7];

  swift_unknownObjectWeakInit();
  v7[1] = 0;
  swift_unknownObjectWeakAssign();
  v7[2] = 0x3E6C6C756E3CLL;
  v8 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v7, (uint64_t)v9);
  swift_unknownObjectWeakInit();
  v9[5] = 0;
  v9[6] = 0;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v2)
  {
    sub_1B19FA070(v7, v8);
    sub_1B19FC28C();
    sub_1B2229D6C();
    sub_1B1D8EB3C((uint64_t)&v6, (uint64_t)v9);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
    sub_1B1F78924(v9, a2);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1F2EFB4((uint64_t)v9);
}

uint64_t sub_1B1F645E0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1F6449C(a1, a2);
}

uint64_t sub_1B1F645F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD v3[4];

  swift_unknownObjectWeakInit();
  v3[1] = 0;
  swift_unknownObjectWeakAssign();
  v3[2] = 0x3E6C6C756E3CLL;
  v3[3] = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v3, a1);
  result = swift_unknownObjectWeakInit();
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  return result;
}

uint64_t sub_1B1F6466C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4A0;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F7541C;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F75444;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD16D4(0x64656C62616E65, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F7548C;
  v6[5] = v5;
  v6[2] = sub_1B1F754B4;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD1744(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F7548C;
  v9[5] = v8;
  v9[2] = sub_1B1F754B4;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AD1744(0x737569646172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F7548C;
  v12[5] = v11;
  v12[2] = sub_1B1F754B4;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AD1744(0x66666F6C6C6166, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  result = sub_1B2228AD0();
  qword_1EEFD5738 = v0;
  return result;
}

void sub_1B1F64A7C(unsigned __int8 *a1@<X8>)
{
  id v2;
  void *v3;
  unsigned __int8 v4;

  v2 = sub_1B1F642B8();
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_isEnabled);

  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
}

void sub_1B1F64AD0(unsigned __int8 *a1)
{
  uint64_t v1;
  id v2;
  id v3;

  v1 = *a1;
  v2 = sub_1B1F642B8();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_setEnabled_, v1);

  }
}

void sub_1B1F64B28(SEL *a1@<X3>, _DWORD *a2@<X8>)
{
  id v4;
  void *v5;
  int v6;
  int v7;

  v4 = sub_1B1F642B8();
  if (v4)
  {
    v5 = v4;
    objc_msgSend(v4, *a1);
    v7 = v6;

  }
  else
  {
    v7 = 0;
  }
  *a2 = v7;
}

uint64_t sub_1B1F64B84()
{
  return 1329681235;
}

uint64_t sub_1B1F64B94(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57448);
}

void *VFXParametricModel.bridgedComponentNames.getter()
{
  return &unk_1E63C8438;
}

uint64_t sub_1B1F64BE0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t result;
  _QWORD v5[4];

  sub_1B1F78A28(v0, v5);
  v1 = MEMORY[0x1B5E240CC](v5);
  sub_1B1F2F2C4((uint64_t)v5);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      v3 = objc_msgSend(v2, sel_model);
      swift_unknownObjectRelease();
      if (v3)
      {
        objc_opt_self();
        result = swift_dynamicCastObjCClass();
        if (result)
          return result;

      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return 0;
}

id sub_1B1F64C94()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 32);
    v2 = v1;
    if (v1)
    {
LABEL_3:
      v3 = objc_msgSend(v1, sel_parametricType);

      return v3;
    }
  }
  else
  {
    v1 = (void *)sub_1B1F64BE0();
    if (v1)
      goto LABEL_3;
  }
  return 0;
}

void sub_1B1F64D04()
{
  sub_1B1F64D7C((SEL *)&selRef_radius);
}

void sub_1B1F64D10()
{
  sub_1B1F64D7C((SEL *)&selRef_topRadius);
}

void sub_1B1F64D1C()
{
  sub_1B1F64D7C((SEL *)&selRef_width);
}

void sub_1B1F64D28()
{
  sub_1B1F64D7C((SEL *)&selRef_height);
}

void sub_1B1F64D34()
{
  sub_1B1F64D7C((SEL *)&selRef_length);
}

void sub_1B1F64D40()
{
  sub_1B1F64D7C((SEL *)&selRef_chamferRadius);
}

void sub_1B1F64D4C()
{
  sub_1B1F64D7C((SEL *)&selRef_cornerRadius);
}

void sub_1B1F64D58()
{
  sub_1B1F64D7C((SEL *)&selRef_innerRadius);
}

void sub_1B1F64D64()
{
  sub_1B1F64D7C((SEL *)&selRef_pipeRadius);
}

void sub_1B1F64D70()
{
  sub_1B1F64D7C((SEL *)&selRef_radialSpan);
}

void sub_1B1F64D7C(SEL *a1)
{
  uint64_t v1;
  void *v3;
  id v4;

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = *(void **)(v1 + 32);
    v4 = v3;
    if (!v3)
      return;
    goto LABEL_3;
  }
  v3 = (void *)sub_1B1F64BE0();
  if (v3)
  {
LABEL_3:
    objc_msgSend(v3, *a1);

  }
}

uint64_t sub_1B1F64DF4@<X0>(_QWORD *a1@<X0>, void (*a2)(_BYTE *, uint64_t)@<X1>, uint64_t (*a3)(_BYTE *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(_BYTE *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _BYTE v42[32];
  uint64_t v43;
  uint64_t v44;

  v44 = a4;
  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v29 - v12;
  v35 = 0;
  swift_unknownObjectWeakInit();
  v35 = 0;
  v14 = swift_unknownObjectWeakAssign();
  v36 = 0x3E6C6C756E3CLL;
  v37 = 0xE600000000000000;
  sub_1B19FC2D0(v14, (uint64_t)v42);
  v43 = 0;
  v15 = a1[3];
  v16 = a1[4];
  sub_1B19FA070(a1, v15);
  if (sub_1B2067BAC(2037, v15, v16))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v4)
    {
      sub_1B19FA070(&v34, v37);
      sub_1B19FC28C();
      sub_1B2229D6C();
LABEL_9:
      sub_1B1D8EB3C((uint64_t)&v38, (uint64_t)v42);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v34);
LABEL_17:
      a2(v42, v44);
    }
  }
  else
  {
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067BAC(2029, v17, v18))
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v4)
      {
        sub_1B19FA070(&v34, v37);
        v21 = sub_1B2229D30();
        v23 = v22;
        v31 = 0;
        swift_unknownObjectWeakInit();
        v31 = 0;
        v24 = swift_unknownObjectWeakAssign();
        v32 = v21;
        v33 = v23;
        sub_1B19FC2D0(v24, (uint64_t)&v38);
        goto LABEL_9;
      }
    }
    else
    {
      v30 = a2;
      sub_1B19FA070(a1, a1[3]);
      sub_1B1C78FEC();
      sub_1B222A150();
      if (!v4)
      {
        v38 = 0;
        LOBYTE(v39) = 1;
        v40 = 0xD000000000000017;
        v41 = 0x80000001B23459F0;
        v19 = sub_1B2229778();
        if (v20)
          v25 = v19;
        else
          v25 = 0;
        if (v20)
          v26 = v20;
        else
          v26 = 0xE000000000000000;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        v39 = 0;
        swift_unknownObjectWeakInit();
        v39 = 0;
        v27 = swift_unknownObjectWeakAssign();
        v40 = v25;
        v41 = v26;
        sub_1B19FC2D0(v27, (uint64_t)&v34);
        sub_1B1D8EB3C((uint64_t)&v34, (uint64_t)v42);
        a2 = v30;
        goto LABEL_17;
      }
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return a3(v42);
}

void sub_1B1F65170(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t ObjectType;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  _QWORD v11[4];

  v3 = v2;
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a2 + 16))(v2, ObjectType, a2);
  sub_1B1F78A28(v2, v11);
  v6 = MEMORY[0x1B5E240CC](v11);
  sub_1B1F2F2C4((uint64_t)v11);
  if (!v6)
    goto LABEL_10;
  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClass();
  if (!v7)
  {
    swift_unknownObjectRelease();
    goto LABEL_10;
  }
  v8 = objc_msgSend(v7, sel_model);
  swift_unknownObjectRelease();
  if (!v8)
    goto LABEL_11;
  objc_opt_self();
  v9 = (void *)swift_dynamicCastObjCClass();
  if (!v9)
  {

    goto LABEL_10;
  }
  v10 = objc_msgSend(v9, sel_presentationModel);

  if (!v10)
  {
LABEL_10:
    v8 = 0;
    goto LABEL_11;
  }
  objc_opt_self();
  v8 = (id)swift_dynamicCastObjCClass();
  if (!v8)

LABEL_11:
  v3[4] = v8;
}

uint64_t sub_1B1F652A0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F64DF4(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F75964, (uint64_t (*)(_BYTE *))sub_1B1F2F024, a2);
}

uint64_t sub_1B1F652C8()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4B0;
  KeyPath = swift_getKeyPath();
  sub_1B1791524(0, &qword_1EEF5A800, (uint64_t (*)(uint64_t))type metadata accessor for VFXParametricModelType, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F755B0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F755E0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ACF6C4(1701869940, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  v6 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v7 = (_QWORD *)swift_allocObject();
  v7[4] = sub_1B1F75664;
  v7[5] = v5;
  v7[2] = sub_1B1F7568C;
  v7[3] = v5;
  v7[6] = v5;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v8 = sub_1B1ACF73C(0x737569646172, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v6, 1, 0, (uint64_t)v7, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 40) = v8;
  v9 = swift_getKeyPath();
  v10 = swift_getKeyPath();
  v11 = (_QWORD *)swift_allocObject();
  v11[4] = sub_1B1F75664;
  v11[5] = v9;
  v11[2] = sub_1B1F7568C;
  v11[3] = v9;
  v11[6] = v9;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v12 = sub_1B1ACF73C(0x7569646152706F74, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v10, 1, 0, (uint64_t)v11, v9, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 48) = v12;
  v13 = swift_getKeyPath();
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F75664;
  v15[5] = v13;
  v15[2] = sub_1B1F7568C;
  v15[3] = v13;
  v15[6] = v13;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v16 = sub_1B1ACF73C(0x6874646977, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v14, 1, 0, (uint64_t)v15, v13, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 56) = v16;
  v17 = swift_getKeyPath();
  v18 = swift_getKeyPath();
  v19 = (_QWORD *)swift_allocObject();
  v19[4] = sub_1B1F75664;
  v19[5] = v17;
  v19[2] = sub_1B1F7568C;
  v19[3] = v17;
  v19[6] = v17;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v20 = sub_1B1ACF73C(0x746867696568, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v18, 1, 0, (uint64_t)v19, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v20;
  v21 = swift_getKeyPath();
  v22 = swift_getKeyPath();
  v23 = (_QWORD *)swift_allocObject();
  v23[4] = sub_1B1F75664;
  v23[5] = v21;
  v23[2] = sub_1B1F7568C;
  v23[3] = v21;
  v23[6] = v21;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v24 = sub_1B1ACF73C(0x6874676E656CLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v22, 1, 0, (uint64_t)v23, v21, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v24;
  v25 = swift_getKeyPath();
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1F75664;
  v27[5] = v25;
  v27[2] = sub_1B1F7568C;
  v27[3] = v25;
  v27[6] = v25;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v28 = sub_1B1ACF73C(0x527265666D616863, 0xED00007375696461, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v26, 1, 0, (uint64_t)v27, v25, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v28;
  v29 = swift_getKeyPath();
  v30 = swift_getKeyPath();
  v31 = (_QWORD *)swift_allocObject();
  v31[4] = sub_1B1F75664;
  v31[5] = v29;
  v31[2] = sub_1B1F7568C;
  v31[3] = v29;
  v31[6] = v29;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v32 = sub_1B1ACF73C(0x615272656E726F63, 0xEC00000073756964, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v30, 1, 0, (uint64_t)v31, v29, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v32;
  v33 = swift_getKeyPath();
  v34 = swift_getKeyPath();
  v35 = (_QWORD *)swift_allocObject();
  v35[4] = sub_1B1F75664;
  v35[5] = v33;
  v35[2] = sub_1B1F7568C;
  v35[3] = v33;
  v35[6] = v33;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v36 = sub_1B1ACF73C(0x64615272656E6E69, 0xEB00000000737569, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v34, 1, 0, (uint64_t)v35, v33, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 96) = v36;
  v37 = swift_getKeyPath();
  v38 = swift_getKeyPath();
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1F75664;
  v39[5] = v37;
  v39[2] = sub_1B1F7568C;
  v39[3] = v37;
  v39[6] = v37;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v40 = sub_1B1ACF73C(0x6964615265706970, 0xEA00000000007375, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v38, 1, 0, (uint64_t)v39, v37, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 104) = v40;
  v41 = swift_getKeyPath();
  v42 = swift_getKeyPath();
  v43 = (_QWORD *)swift_allocObject();
  v43[4] = sub_1B1F75664;
  v43[5] = v41;
  v43[2] = sub_1B1F7568C;
  v43[3] = v41;
  v43[6] = v41;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v44 = sub_1B1ACF73C(0x70536C6169646172, 0xEA00000000006E61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v42, 1, 0, (uint64_t)v43, v41, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 112) = v44;
  result = sub_1B2228AD0();
  qword_1EEFD5740 = v0;
  return result;
}

void sub_1B1F65DC8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v4 = (void *)sub_1B1F64BE0();
    if (v4)
      goto LABEL_3;
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 32);
  v5 = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v6 = objc_msgSend(v4, sel_parametricType);

LABEL_6:
  *a2 = v6;
}

void sub_1B1F65E48(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  id v5;

  v3 = *a1;
  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
    v4 = *(id *)(a2 + 32);
  else
    v4 = (id)sub_1B1F64BE0();
  v5 = v4;
  objc_msgSend(v4, sel_setParametricType_, v3);

}

uint64_t sub_1B1F65EB4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  _BYTE v22[32];
  id v23;
  _BYTE v24[32];
  id v25;
  _BYTE v26[32];
  id v27;
  _BYTE v28[32];
  id v29;
  _BYTE v30[32];
  id v31;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v3 = *(void **)(v0 + 32);
    v4 = v3;
    if (v3)
      goto LABEL_3;
LABEL_6:
    sub_1B1F75964(v1, (uint64_t)v30);
LABEL_7:
    if (objc_msgSend(v2, sel_immediateMode))
    {
      v6 = v31;
      v7 = v31;
      if (v6)
        goto LABEL_9;
    }
    else
    {
      v6 = (id)sub_1B1F64BE0();
      if (v6)
      {
LABEL_9:
        v8 = objc_msgSend(v6, sel_parametricType);

        sub_1B1F2F024((uint64_t)v30);
        sub_1B1F75964(v1, (uint64_t)v28);
        if (v8 == (id)6)
          goto LABEL_10;
LABEL_13:
        if (objc_msgSend(v2, sel_immediateMode))
        {
          v9 = v29;
          v10 = v29;
          if (v9)
            goto LABEL_15;
        }
        else
        {
          v9 = (id)sub_1B1F64BE0();
          if (v9)
          {
LABEL_15:
            v11 = objc_msgSend(v9, sel_parametricType);

            sub_1B1F2F024((uint64_t)v28);
            sub_1B1F75964(v1, (uint64_t)v26);
            if (v11 == (id)7)
              goto LABEL_16;
LABEL_22:
            if (objc_msgSend(v2, sel_immediateMode))
            {
              v14 = v27;
              v15 = v27;
              if (v14)
                goto LABEL_24;
            }
            else
            {
              v14 = (id)sub_1B1F64BE0();
              if (v14)
              {
LABEL_24:
                v16 = objc_msgSend(v14, sel_parametricType);

                sub_1B1F2F024((uint64_t)v26);
                sub_1B1F75964(v1, (uint64_t)v24);
                if (v16 == (id)5)
                  goto LABEL_17;
LABEL_28:
                if (objc_msgSend(v2, sel_immediateMode))
                {
                  v17 = v25;
                  v18 = v25;
                  if (v17)
                    goto LABEL_30;
                }
                else
                {
                  v17 = (id)sub_1B1F64BE0();
                  if (v17)
                  {
LABEL_30:
                    v19 = objc_msgSend(v17, sel_parametricType);

                    sub_1B1F2F024((uint64_t)v24);
                    sub_1B1F75964(v1, (uint64_t)v22);
                    if (v19 == (id)4)
                      goto LABEL_18;
LABEL_34:
                    if (objc_msgSend(v2, sel_immediateMode))
                    {
                      v12 = (uint64_t)v23;
                      v20 = v23;
                      if (!v12)
                        goto LABEL_19;
                    }
                    else
                    {
                      v12 = sub_1B1F64BE0();
                      if (!v12)
                        goto LABEL_19;
                    }
                    v21 = objc_msgSend((id)v12, sel_parametricType);

                    v12 = v21 == (id)8;
                    goto LABEL_19;
                  }
                }
                sub_1B1F2F024((uint64_t)v24);
                sub_1B1F75964(v1, (uint64_t)v22);
                goto LABEL_34;
              }
            }
            sub_1B1F2F024((uint64_t)v26);
            sub_1B1F75964(v1, (uint64_t)v24);
            goto LABEL_28;
          }
        }
        sub_1B1F2F024((uint64_t)v28);
        sub_1B1F75964(v1, (uint64_t)v26);
        goto LABEL_22;
      }
    }
    sub_1B1F2F024((uint64_t)v30);
    sub_1B1F75964(v1, (uint64_t)v28);
    goto LABEL_13;
  }
  v3 = (void *)sub_1B1F64BE0();
  if (!v3)
    goto LABEL_6;
LABEL_3:
  v5 = objc_msgSend(v3, sel_parametricType);

  sub_1B1F75964(v1, (uint64_t)v30);
  if (v5 != (id)1)
    goto LABEL_7;
  sub_1B1F2F024((uint64_t)v30);
  sub_1B1F75964(v1, (uint64_t)v28);
LABEL_10:
  sub_1B1F2F024((uint64_t)v28);
  sub_1B1F75964(v1, (uint64_t)v26);
LABEL_16:
  sub_1B1F2F024((uint64_t)v26);
  sub_1B1F75964(v1, (uint64_t)v24);
LABEL_17:
  sub_1B1F2F024((uint64_t)v24);
  sub_1B1F75964(v1, (uint64_t)v22);
LABEL_18:
  v12 = 1;
LABEL_19:
  sub_1B1F2F024((uint64_t)v22);
  return v12;
}

BOOL sub_1B1F661E8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 32);
    v2 = v1;
    if (v1)
    {
LABEL_3:
      v3 = objc_msgSend(v1, sel_parametricType);

      return v3 == (id)5;
    }
  }
  else
  {
    v1 = (void *)sub_1B1F64BE0();
    if (v1)
      goto LABEL_3;
  }
  return 0;
}

void sub_1B1F6625C(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  BOOL v7;

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v4 = (void *)sub_1B1F64BE0();
    if (v4)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 32);
  v5 = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v6 = objc_msgSend(v4, sel_parametricType);

  v7 = v6 == (id)5;
LABEL_6:
  *a2 = v7;
}

uint64_t sub_1B1F662E4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  _BYTE v13[32];
  id v14;
  _BYTE v15[32];
  id v16;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v3 = *(void **)(v0 + 32);
    v4 = v3;
    if (v3)
      goto LABEL_3;
LABEL_9:
    sub_1B1F75964(v1, (uint64_t)v15);
    goto LABEL_10;
  }
  v3 = (void *)sub_1B1F64BE0();
  if (!v3)
    goto LABEL_9;
LABEL_3:
  v5 = objc_msgSend(v3, sel_parametricType);

  sub_1B1F75964(v1, (uint64_t)v15);
  if (!v5)
  {
LABEL_10:
    sub_1B1F2F024((uint64_t)v15);
    sub_1B1F75964(v1, (uint64_t)v13);
    v9 = 1;
    goto LABEL_18;
  }
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v6 = v16;
    v7 = v16;
    if (v6)
      goto LABEL_6;
LABEL_12:
    sub_1B1F2F024((uint64_t)v15);
    sub_1B1F75964(v1, (uint64_t)v13);
LABEL_13:
    if (objc_msgSend(v2, sel_immediateMode))
    {
      v9 = (uint64_t)v14;
      v10 = v14;
      if (!v9)
        goto LABEL_18;
    }
    else
    {
      v9 = sub_1B1F64BE0();
      if (!v9)
        goto LABEL_18;
    }
    v11 = objc_msgSend((id)v9, sel_parametricType);

    v9 = v11 == (id)2;
    goto LABEL_18;
  }
  v6 = (id)sub_1B1F64BE0();
  if (!v6)
    goto LABEL_12;
LABEL_6:
  v8 = objc_msgSend(v6, sel_parametricType);

  sub_1B1F2F024((uint64_t)v15);
  sub_1B1F75964(v1, (uint64_t)v13);
  if (v8 != (id)3)
    goto LABEL_13;
  v9 = 1;
LABEL_18:
  sub_1B1F2F024((uint64_t)v13);
  return v9;
}

uint64_t sub_1B1F66474()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id v24;
  _BYTE v25[32];
  id v26;
  _BYTE v27[32];
  id v28;
  _BYTE v29[32];
  id v30;
  _BYTE v31[32];
  id v32;
  _BYTE v33[32];
  id v34;
  _BYTE v35[32];
  id v36;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v3 = *(void **)(v0 + 32);
    v4 = v3;
    if (v3)
      goto LABEL_3;
LABEL_8:
    sub_1B1F75964(v1, (uint64_t)v35);
    goto LABEL_9;
  }
  v3 = (void *)sub_1B1F64BE0();
  if (!v3)
    goto LABEL_8;
LABEL_3:
  v5 = objc_msgSend(v3, sel_parametricType);

  sub_1B1F75964(v1, (uint64_t)v35);
  if (!v5)
  {
LABEL_9:
    sub_1B1F2F024((uint64_t)v35);
    sub_1B1F75964(v1, (uint64_t)v33);
LABEL_13:
    sub_1B1F2F024((uint64_t)v33);
    sub_1B1F75964(v1, (uint64_t)v31);
LABEL_14:
    sub_1B1F2F024((uint64_t)v31);
    sub_1B1F75964(v1, (uint64_t)v29);
LABEL_15:
    sub_1B1F2F024((uint64_t)v29);
    sub_1B1F75964(v1, (uint64_t)v27);
LABEL_16:
    sub_1B1F2F024((uint64_t)v27);
    sub_1B1F75964(v1, (uint64_t)v25);
LABEL_17:
    v9 = 1;
    goto LABEL_18;
  }
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v6 = v36;
    v7 = v36;
    if (v6)
    {
LABEL_6:
      v8 = objc_msgSend(v6, sel_parametricType);

      goto LABEL_12;
    }
  }
  else
  {
    v6 = (id)sub_1B1F64BE0();
    if (v6)
      goto LABEL_6;
  }
  v8 = 0;
LABEL_12:
  sub_1B1F2F024((uint64_t)v35);
  sub_1B1F75964(v1, (uint64_t)v33);
  if (v8 == (id)6)
    goto LABEL_13;
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v11 = v34;
    v12 = v34;
    if (v11)
      goto LABEL_21;
LABEL_24:
    sub_1B1F2F024((uint64_t)v33);
    sub_1B1F75964(v1, (uint64_t)v31);
    goto LABEL_25;
  }
  v11 = (id)sub_1B1F64BE0();
  if (!v11)
    goto LABEL_24;
LABEL_21:
  v13 = objc_msgSend(v11, sel_parametricType);

  sub_1B1F2F024((uint64_t)v33);
  sub_1B1F75964(v1, (uint64_t)v31);
  if (v13 == (id)7)
    goto LABEL_14;
LABEL_25:
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v14 = v32;
    v15 = v32;
    if (v14)
      goto LABEL_27;
LABEL_30:
    sub_1B1F2F024((uint64_t)v31);
    sub_1B1F75964(v1, (uint64_t)v29);
    goto LABEL_31;
  }
  v14 = (id)sub_1B1F64BE0();
  if (!v14)
    goto LABEL_30;
LABEL_27:
  v16 = objc_msgSend(v14, sel_parametricType);

  sub_1B1F2F024((uint64_t)v31);
  sub_1B1F75964(v1, (uint64_t)v29);
  if (v16 == (id)3)
    goto LABEL_15;
LABEL_31:
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v17 = v30;
    v18 = v30;
    if (v17)
      goto LABEL_33;
LABEL_36:
    sub_1B1F2F024((uint64_t)v29);
    sub_1B1F75964(v1, (uint64_t)v27);
    goto LABEL_37;
  }
  v17 = (id)sub_1B1F64BE0();
  if (!v17)
    goto LABEL_36;
LABEL_33:
  v19 = objc_msgSend(v17, sel_parametricType);

  sub_1B1F2F024((uint64_t)v29);
  sub_1B1F75964(v1, (uint64_t)v27);
  if (v19 == (id)5)
    goto LABEL_16;
LABEL_37:
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v20 = v28;
    v21 = v28;
    if (v20)
      goto LABEL_39;
LABEL_42:
    sub_1B1F2F024((uint64_t)v27);
    sub_1B1F75964(v1, (uint64_t)v25);
    goto LABEL_43;
  }
  v20 = (id)sub_1B1F64BE0();
  if (!v20)
    goto LABEL_42;
LABEL_39:
  v22 = objc_msgSend(v20, sel_parametricType);

  sub_1B1F2F024((uint64_t)v27);
  sub_1B1F75964(v1, (uint64_t)v25);
  if (v22 == (id)4)
    goto LABEL_17;
LABEL_43:
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v9 = (uint64_t)v26;
    v23 = v26;
  }
  else
  {
    v9 = sub_1B1F64BE0();
  }
  if (v9)
  {
    v24 = objc_msgSend((id)v9, sel_parametricType);

    v9 = v24 == (id)2;
  }
LABEL_18:
  sub_1B1F2F024((uint64_t)v25);
  return v9;
}

uint64_t sub_1B1F66818()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  _BYTE v9[32];
  id v10;

  v1 = (void *)objc_opt_self();
  if (objc_msgSend(v1, sel_immediateMode))
  {
    v2 = *(void **)(v0 + 32);
    v3 = v2;
    if (v2)
      goto LABEL_3;
LABEL_8:
    sub_1B1F75964(v0, (uint64_t)v9);
    goto LABEL_9;
  }
  v2 = (void *)sub_1B1F64BE0();
  if (!v2)
    goto LABEL_8;
LABEL_3:
  v4 = objc_msgSend(v2, sel_parametricType);

  sub_1B1F75964(v0, (uint64_t)v9);
  if (!v4)
  {
LABEL_9:
    v5 = 1;
    goto LABEL_12;
  }
  if (objc_msgSend(v1, sel_immediateMode))
  {
    v5 = (uint64_t)v10;
    v6 = v10;
    if (!v5)
      goto LABEL_12;
    goto LABEL_11;
  }
  v5 = sub_1B1F64BE0();
  if (v5)
  {
LABEL_11:
    v7 = objc_msgSend((id)v5, sel_parametricType);

    v5 = v7 == (id)3;
  }
LABEL_12:
  sub_1B1F2F024((uint64_t)v9);
  return v5;
}

BOOL sub_1B1F66914()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 32);
    v2 = v1;
    if (v1)
    {
LABEL_3:
      v3 = objc_msgSend(v1, sel_parametricType);

      return v3 == 0;
    }
  }
  else
  {
    v1 = (void *)sub_1B1F64BE0();
    if (v1)
      goto LABEL_3;
  }
  return 1;
}

void sub_1B1F66988(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  BOOL v7;

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v4 = (void *)sub_1B1F64BE0();
    if (v4)
      goto LABEL_3;
LABEL_5:
    v7 = 1;
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 32);
  v5 = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v6 = objc_msgSend(v4, sel_parametricType);

  v7 = v6 == 0;
LABEL_6:
  *a2 = v7;
}

BOOL sub_1B1F66A10()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 32);
    v2 = v1;
    if (v1)
    {
LABEL_3:
      v3 = objc_msgSend(v1, sel_parametricType);

      return v3 == (id)2;
    }
  }
  else
  {
    v1 = (void *)sub_1B1F64BE0();
    if (v1)
      goto LABEL_3;
  }
  return 0;
}

void sub_1B1F66A84(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  BOOL v7;

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v4 = (void *)sub_1B1F64BE0();
    if (v4)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 32);
  v5 = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v6 = objc_msgSend(v4, sel_parametricType);

  v7 = v6 == (id)2;
LABEL_6:
  *a2 = v7;
}

BOOL sub_1B1F66B0C()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 32);
    v2 = v1;
    if (v1)
    {
LABEL_3:
      v3 = objc_msgSend(v1, sel_parametricType);

      return v3 == (id)8;
    }
  }
  else
  {
    v1 = (void *)sub_1B1F64BE0();
    if (v1)
      goto LABEL_3;
  }
  return 0;
}

void sub_1B1F66B80(uint64_t a1@<X0>, BOOL *a2@<X8>)
{
  void *v4;
  id v5;
  id v6;
  BOOL v7;

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v4 = (void *)sub_1B1F64BE0();
    if (v4)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v4 = *(void **)(a1 + 32);
  v5 = v4;
  if (!v4)
    goto LABEL_5;
LABEL_3:
  v6 = objc_msgSend(v4, sel_parametricType);

  v7 = v6 == (id)8;
LABEL_6:
  *a2 = v7;
}

void sub_1B1F66C08(uint64_t a1@<X0>, SEL *a2@<X3>, _DWORD *a3@<X8>)
{
  void *v6;
  id v7;
  int v8;
  int v9;

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v6 = (void *)sub_1B1F64BE0();
    if (v6)
      goto LABEL_3;
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v6 = *(void **)(a1 + 32);
  v7 = v6;
  if (!v6)
    goto LABEL_5;
LABEL_3:
  objc_msgSend(v6, *a2);
  v9 = v8;

LABEL_6:
  *a3 = v9;
}

void sub_1B1F66C90(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  int v7;
  id v8;
  double v9;
  id v10;

  v7 = *a1;
  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
    v8 = *(id *)(a2 + 32);
  else
    v8 = (id)sub_1B1F64BE0();
  v10 = v8;
  LODWORD(v9) = v7;
  objc_msgSend(v8, *a5, v9);

}

uint64_t sub_1B1F66D04()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  _BYTE v16[32];
  id v17;
  _BYTE v18[32];
  id v19;
  _BYTE v20[32];
  id v21;

  v1 = v0;
  v2 = (void *)objc_opt_self();
  if (objc_msgSend(v2, sel_immediateMode))
  {
    v3 = *(void **)(v0 + 32);
    v4 = v3;
    if (v3)
      goto LABEL_3;
LABEL_6:
    sub_1B1F75964(v1, (uint64_t)v20);
LABEL_7:
    if (objc_msgSend(v2, sel_immediateMode))
    {
      v6 = v21;
      v7 = v21;
      if (v6)
        goto LABEL_9;
    }
    else
    {
      v6 = (id)sub_1B1F64BE0();
      if (v6)
      {
LABEL_9:
        v8 = objc_msgSend(v6, sel_parametricType);

        sub_1B1F2F024((uint64_t)v20);
        sub_1B1F75964(v1, (uint64_t)v18);
        if (v8 == (id)4)
          goto LABEL_10;
LABEL_13:
        if (objc_msgSend(v2, sel_immediateMode))
        {
          v10 = v19;
          v11 = v19;
          if (v10)
            goto LABEL_15;
        }
        else
        {
          v10 = (id)sub_1B1F64BE0();
          if (v10)
          {
LABEL_15:
            v12 = objc_msgSend(v10, sel_parametricType);

            sub_1B1F2F024((uint64_t)v18);
            sub_1B1F75964(v1, (uint64_t)v16);
            if (v12 == (id)6)
            {
              v9 = 1;
              goto LABEL_24;
            }
LABEL_19:
            if (objc_msgSend(v2, sel_immediateMode))
            {
              v9 = (uint64_t)v17;
              v13 = v17;
              if (!v9)
                goto LABEL_24;
            }
            else
            {
              v9 = sub_1B1F64BE0();
              if (!v9)
                goto LABEL_24;
            }
            v14 = objc_msgSend((id)v9, sel_parametricType);

            v9 = v14 == (id)8;
            goto LABEL_24;
          }
        }
        sub_1B1F2F024((uint64_t)v18);
        sub_1B1F75964(v1, (uint64_t)v16);
        goto LABEL_19;
      }
    }
    sub_1B1F2F024((uint64_t)v20);
    sub_1B1F75964(v1, (uint64_t)v18);
    goto LABEL_13;
  }
  v3 = (void *)sub_1B1F64BE0();
  if (!v3)
    goto LABEL_6;
LABEL_3:
  v5 = objc_msgSend(v3, sel_parametricType);

  sub_1B1F75964(v1, (uint64_t)v20);
  if (v5 != (id)1)
    goto LABEL_7;
  sub_1B1F2F024((uint64_t)v20);
  sub_1B1F75964(v1, (uint64_t)v18);
LABEL_10:
  sub_1B1F2F024((uint64_t)v18);
  sub_1B1F75964(v1, (uint64_t)v16);
  v9 = 1;
LABEL_24:
  sub_1B1F2F024((uint64_t)v16);
  return v9;
}

unint64_t sub_1B1F66F24()
{
  return 0xD000000000000010;
}

uint64_t sub_1B1F66F40(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57450);
}

id sub_1B1F66F5C(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = (id)v1[4];
    v4 = v3;
  }
  else
  {
    sub_1B1F78A28(v1, v8);
    v5 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v5)
    {
      objc_opt_self();
      v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6)
        swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    v3 = objc_msgSend(v6, *a1);

  }
  return v3;
}

double sub_1B1F67024()
{
  return sub_1B1F675B4((SEL *)&selRef_velocity);
}

double sub_1B1F67030()
{
  _QWORD *v0;
  id v1;
  id v2;
  double v3;
  uint64_t v5;
  void *v6;
  double v7;
  _QWORD v8[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = (id)v0[4];
    v2 = v1;
    if (v1)
    {
LABEL_3:
      objc_msgSend(v1, sel_angularVelocity);
      v7 = v3;

      return v7;
    }
  }
  else
  {
    sub_1B1F78A28(v0, v8);
    v5 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v5)
    {
      objc_opt_self();
      v6 = (void *)swift_dynamicCastObjCClass();
      if (!v6)
        swift_unknownObjectRelease();
    }
    else
    {
      v6 = 0;
    }
    v1 = objc_msgSend(v6, sel_physicsBody);

    if (v1)
      goto LABEL_3;
  }
  return 0.0;
}

id sub_1B1F67114()
{
  return sub_1B1F6714C();
}

id sub_1B1F67130()
{
  return sub_1B1F6714C();
}

id sub_1B1F6714C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  id v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;

  sub_1B1F78A28(v0, v9);
  v1 = MEMORY[0x1B5E240CC](v9);
  sub_1B1F2F2C4((uint64_t)v9);
  if (!v1)
    goto LABEL_6;
  objc_opt_self();
  v2 = swift_dynamicCastObjCClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
LABEL_6:
    v11 = 0u;
    v12 = 0u;
LABEL_11:
    sub_1B1A0DD70((uint64_t)&v11);
    return 0;
  }
  v3 = (void *)v2;
  v4 = (void *)sub_1B2228728();
  v5 = objc_msgSend(v3, sel_valueForKey_, v4);
  swift_unknownObjectRelease();

  if (v5)
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)v9 = 0u;
    v10 = 0u;
  }
  sub_1B1A18378((uint64_t)v9, (uint64_t)&v11, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
  if (!*((_QWORD *)&v12 + 1))
    goto LABEL_11;
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v6 = v9[0];
  v7 = objc_msgSend(v9[0], sel_BOOLValue);

  return v7;
}

void sub_1B1F672C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD v6[4];

  sub_1B1F78A28(v0, v6);
  v1 = MEMORY[0x1B5E240CC](v6);
  sub_1B1F2F2C4((uint64_t)v6);
  if (v1)
  {
    objc_opt_self();
    v2 = swift_dynamicCastObjCClass();
    if (v2)
    {
      v3 = (void *)v2;
      v4 = (void *)sub_1B2228BC0();
      v5 = (void *)sub_1B2228728();
      objc_msgSend(v3, sel_setValue_forKey_, v4, v5);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

double sub_1B1F67398()
{
  return 0.0;
}

void sub_1B1F673A0(__n128 a1)
{
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __n128 v6;
  _QWORD v7[4];

  v6 = a1;
  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v2 = (id)v1[4];
    v3 = v2;
    if (!v2)
      return;
LABEL_9:
    objc_msgSend(v2, sel_applyForce_impulse_, (unint64_t)sub_1B1F67114() & 1, v6.n128_f64[0]);

    return;
  }
  sub_1B1F78A28(v1, v7);
  v4 = MEMORY[0x1B5E240CC](v7);
  sub_1B1F2F2C4((uint64_t)v7);
  if (v4)
  {
    objc_opt_self();
    v5 = (void *)swift_dynamicCastObjCClass();
    if (!v5)
      swift_unknownObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v2 = objc_msgSend(v5, sel_physicsBody, *(_OWORD *)&v6);

  if (v2)
    goto LABEL_9;
}

void sub_1B1F67490(__n128 a1)
{
  _QWORD *v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  __n128 v6;
  _QWORD v7[4];

  v6 = a1;
  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v2 = (id)v1[4];
    v3 = v2;
    if (!v2)
      return;
LABEL_9:
    objc_msgSend(v2, sel_applyTorque_impulse_, (unint64_t)sub_1B1F67130() & 1, v6.n128_f64[0]);

    return;
  }
  sub_1B1F78A28(v1, v7);
  v4 = MEMORY[0x1B5E240CC](v7);
  sub_1B1F2F2C4((uint64_t)v7);
  if (v4)
  {
    objc_opt_self();
    v5 = (void *)swift_dynamicCastObjCClass();
    if (!v5)
      swift_unknownObjectRelease();
  }
  else
  {
    v5 = 0;
  }
  v2 = objc_msgSend(v5, sel_physicsBody, *(_OWORD *)&v6);

  if (v2)
    goto LABEL_9;
}

float sub_1B1F67580()
{
  return sub_1B1F5CF3C((SEL *)&selRef_damping, (SEL *)&selRef_physicsBody);
}

float sub_1B1F67594()
{
  return sub_1B1F5CF3C((SEL *)&selRef_angularDamping, (SEL *)&selRef_physicsBody);
}

double sub_1B1F675A8()
{
  return sub_1B1F675B4((SEL *)&selRef_velocityFactor);
}

double sub_1B1F675B4(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  double v5;
  uint64_t v7;
  void *v8;
  double v9;
  _QWORD v10[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = (id)v1[4];
    v4 = v3;
    if (v3)
    {
LABEL_3:
      objc_msgSend(v3, *a1);
      v9 = v5;

      return v9;
    }
  }
  else
  {
    sub_1B1F78A28(v1, v10);
    v7 = MEMORY[0x1B5E240CC](v10);
    sub_1B1F2F2C4((uint64_t)v10);
    if (v7)
    {
      objc_opt_self();
      v8 = (void *)swift_dynamicCastObjCClass();
      if (!v8)
        swift_unknownObjectRelease();
    }
    else
    {
      v8 = 0;
    }
    v3 = objc_msgSend(v8, sel_physicsBody);

    if (v3)
      goto LABEL_3;
  }
  return 0.0;
}

double sub_1B1F676A0()
{
  return sub_1B1F675B4((SEL *)&selRef_angularVelocityFactor);
}

float sub_1B1F676AC()
{
  return sub_1B1F5CF3C((SEL *)&selRef_mass, (SEL *)&selRef_physicsBody);
}

float sub_1B1F676C0()
{
  return sub_1B1F5CF3C((SEL *)&selRef_charge, (SEL *)&selRef_physicsBody);
}

float sub_1B1F676D4()
{
  return sub_1B1F5CF3C((SEL *)&selRef_friction, (SEL *)&selRef_physicsBody);
}

float sub_1B1F676E8()
{
  return sub_1B1F5CF3C((SEL *)&selRef_restitution, (SEL *)&selRef_physicsBody);
}

float sub_1B1F676FC()
{
  return sub_1B1F5CF3C((SEL *)&selRef_rollingFriction, (SEL *)&selRef_physicsBody);
}

uint64_t sub_1B1F67710@<X0>(_QWORD *a1@<X0>, void (*a2)(_BYTE *, uint64_t)@<X1>, uint64_t (*a3)(_BYTE *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v29)(_BYTE *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = a4;
  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v9 = v8;
  v10 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v11);
  v13 = (char *)&v29 - v12;
  v34 = 0;
  swift_unknownObjectWeakInit();
  v34 = 0;
  v14 = swift_unknownObjectWeakAssign();
  v35 = 0x3E6C6C756E3CLL;
  v36 = 0xE600000000000000;
  sub_1B19FC2D0(v14, (uint64_t)v41);
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v15 = a1[3];
  v16 = a1[4];
  sub_1B19FA070(a1, v15);
  if (sub_1B2067BAC(2037, v15, v16))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v4)
    {
      sub_1B19FA070(&v33, v36);
      sub_1B19FC28C();
      sub_1B2229D6C();
LABEL_9:
      sub_1B1D8EB3C((uint64_t)&v37, (uint64_t)v41);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v33);
LABEL_17:
      a2(v41, v45);
    }
  }
  else
  {
    v17 = a1[3];
    v18 = a1[4];
    sub_1B19FA070(a1, v17);
    if (sub_1B2067BAC(2029, v17, v18))
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v4)
      {
        sub_1B19FA070(&v33, v36);
        v21 = sub_1B2229D30();
        v23 = v22;
        v30 = 0;
        swift_unknownObjectWeakInit();
        v30 = 0;
        v24 = swift_unknownObjectWeakAssign();
        v31 = v21;
        v32 = v23;
        sub_1B19FC2D0(v24, (uint64_t)&v37);
        goto LABEL_9;
      }
    }
    else
    {
      v29 = a2;
      sub_1B19FA070(a1, a1[3]);
      sub_1B1C78FEC();
      sub_1B222A150();
      if (!v4)
      {
        v37 = 0;
        LOBYTE(v38) = 1;
        v39 = 0xD000000000000017;
        v40 = 0x80000001B23459F0;
        v19 = sub_1B2229778();
        if (v20)
          v25 = v19;
        else
          v25 = 0;
        if (v20)
          v26 = v20;
        else
          v26 = 0xE000000000000000;
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        v38 = 0;
        swift_unknownObjectWeakInit();
        v38 = 0;
        v27 = swift_unknownObjectWeakAssign();
        v39 = v25;
        v40 = v26;
        sub_1B19FC2D0(v27, (uint64_t)&v33);
        sub_1B1D8EB3C((uint64_t)&v33, (uint64_t)v41);
        a2 = v29;
        goto LABEL_17;
      }
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return a3(v41);
}

void sub_1B1F67A90(uint64_t a1, uint64_t a2, SEL *a3)
{
  _QWORD *v3;
  _QWORD *v5;
  uint64_t ObjectType;
  uint64_t v8;
  void *v9;
  id v10;
  id v11;
  _QWORD v12[4];

  v5 = v3;
  ObjectType = swift_getObjectType();
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(a2 + 16))(v3, ObjectType, a2);
  sub_1B1F78A28(v3, v12);
  v8 = MEMORY[0x1B5E240CC](v12);
  sub_1B1F2F2C4((uint64_t)v12);
  if (!v8)
    goto LABEL_5;
  objc_opt_self();
  v9 = (void *)swift_dynamicCastObjCClass();
  if (!v9)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v11 = 0;
    goto LABEL_6;
  }
  v10 = objc_msgSend(v9, sel_presentationNode);
  swift_unknownObjectRelease();
  v11 = objc_msgSend(v10, *a3);

LABEL_6:
  v5[4] = v11;
}

uint64_t sub_1B1F67B78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F67710(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F78958, (uint64_t (*)(_BYTE *))sub_1B1F2F094, a2);
}

void sub_1B1F67B9C(uint64_t a1, uint64_t a2)
{
  sub_1B1F67A90(a1, a2, (SEL *)&selRef_physicsBody);
}

uint64_t sub_1B1F67BB8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD v3[4];

  swift_unknownObjectWeakInit();
  v3[1] = 0;
  swift_unknownObjectWeakAssign();
  v3[2] = 0x3E6C6C756E3CLL;
  v3[3] = 0xE600000000000000;
  result = sub_1B19FC2D0((uint64_t)v3, (uint64_t)a1);
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = 0;
  return result;
}

uint64_t sub_1B1F67C24()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B22A3230;
  KeyPath = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8160, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F759FC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F75A2C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC9794(0x6563726F66, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8170, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F75A78;
  v6[5] = v5;
  v6[2] = sub_1B1F75AA8;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC9B70(0x657571726F74, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F75B30;
  v9[5] = v8;
  v9[2] = sub_1B1F75B58;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC9F4C(0x4973416563726F66, 0xEE0065736C75706DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F75B30;
  v12[5] = v11;
  v12[2] = sub_1B1F75B58;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AC9F4C(0x7341657571726F74, 0xEF65736C75706D49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = (_QWORD *)swift_allocObject();
  v15[4] = sub_1B1F759FC;
  v15[5] = v14;
  v15[2] = sub_1B1F75A2C;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  v16 = sub_1B1AC9794(0x797469636F6C6576, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          256,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 64) = v16;
  v17 = swift_getKeyPath();
  v18 = (_QWORD *)swift_allocObject();
  v18[4] = sub_1B1F75A78;
  v18[5] = v17;
  v18[2] = sub_1B1F75AA8;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  v19 = sub_1B1AC9B70(0x5672616C75676E61, 0xEF797469636F6C65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v19;
  v20 = swift_getKeyPath();
  v21 = (_QWORD *)swift_allocObject();
  v21[4] = sub_1B1F759FC;
  v21[5] = v20;
  v21[2] = sub_1B1F75A2C;
  v21[3] = v20;
  v21[6] = v20;
  swift_allocObject();
  swift_retain_n();
  v22 = sub_1B1AC9794(0x797469636F6C6576, 0xEE00726F74636146, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v21, v20, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 80) = v22;
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1F759FC;
  v24[5] = v23;
  v24[2] = sub_1B1F75A2C;
  v24[3] = v23;
  v24[6] = v23;
  swift_allocObject();
  swift_retain_n();
  v25 = sub_1B1AC9794(0xD000000000000015, 0x80000001B2345930, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v24, v23, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v25;
  v26 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1F75E34;
  v27[5] = v26;
  v27[2] = sub_1B1F75E5C;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1AC9FBC(0x676E69706D6164, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          256,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v28;
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1F75E34;
  v30[5] = v29;
  v30[2] = sub_1B1F75E5C;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1AC9FBC(0x4472616C75676E61, 0xEE00676E69706D61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 104) = v31;
  v32 = swift_getKeyPath();
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1F75E34;
  v33[5] = v32;
  v33[2] = sub_1B1F75E5C;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1AC9FBC(1936941421, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 112) = v34;
  v35 = swift_getKeyPath();
  v36 = (_QWORD *)swift_allocObject();
  v36[4] = sub_1B1F75E34;
  v36[5] = v35;
  v36[2] = sub_1B1F75E5C;
  v36[3] = v35;
  v36[6] = v35;
  swift_allocObject();
  swift_retain_n();
  v37 = sub_1B1AC9FBC(0x656772616863, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v36, v35, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 120) = v37;
  v38 = swift_getKeyPath();
  v39 = (_QWORD *)swift_allocObject();
  v39[4] = sub_1B1F75E34;
  v39[5] = v38;
  v39[2] = sub_1B1F75E5C;
  v39[3] = v38;
  v39[6] = v38;
  swift_allocObject();
  swift_retain_n();
  v40 = sub_1B1AC9FBC(0x6E6F697463697266, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v39, v38, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 128) = v40;
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1F75E34;
  v42[5] = v41;
  v42[2] = sub_1B1F75E5C;
  v42[3] = v41;
  v42[6] = v41;
  swift_allocObject();
  swift_retain_n();
  v43 = sub_1B1AC9FBC(0x7475746974736572, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v42, v41, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 136) = v43;
  v44 = swift_getKeyPath();
  v45 = (_QWORD *)swift_allocObject();
  v45[4] = sub_1B1F75E34;
  v45[5] = v44;
  v45[2] = sub_1B1F75E5C;
  v45[3] = v44;
  v45[6] = v44;
  swift_allocObject();
  swift_retain_n();
  v46 = sub_1B1AC9FBC(0x46676E696C6C6F72, 0xEF6E6F6974636972, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v45, v44, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 144) = v46;
  result = sub_1B2228AD0();
  qword_1EEFD5748 = v0;
  return result;
}

void sub_1B1F68998(uint64_t a1@<X3>, uint64_t (*a2)(uint64_t)@<X4>, SEL *a3@<X5>, _DWORD *a4@<X8>)
{
  void *v6;
  void *v7;
  int v8;
  int v9;

  v6 = (void *)a2(a1);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, *a3);
    v9 = v8;

  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
}

uint64_t sub_1B1F689F8()
{
  return 0x2073636973796850;
}

id sub_1B1F68A18()
{
  return sub_1B1F68A2C((SEL *)&selRef_fieldType, (SEL *)&selRef_forceField);
}

id sub_1B1F68A2C(SEL *a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  _QWORD v11[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v2, v11);
    v8 = MEMORY[0x1B5E240CC](v11);
    sub_1B1F2F2C4((uint64_t)v11);
    if (v8)
    {
      objc_opt_self();
      v9 = (void *)swift_dynamicCastObjCClass();
      if (!v9)
        swift_unknownObjectRelease();
    }
    else
    {
      v9 = 0;
    }
    v5 = objc_msgSend(v9, *a2);

    if (v5)
      goto LABEL_3;
    return 0;
  }
  v5 = (id)v2[4];
  v6 = v5;
  if (!v5)
    return 0;
LABEL_3:
  v7 = objc_msgSend(v5, *a1);

  return v7;
}

float sub_1B1F68B18()
{
  return sub_1B1F5CF3C((SEL *)&selRef_strength, (SEL *)&selRef_forceField);
}

float sub_1B1F68B2C()
{
  return sub_1B1F5CF3C((SEL *)&selRef_falloffExponent, (SEL *)&selRef_forceField);
}

id sub_1B1F68B40()
{
  return sub_1B1F5CE3C((SEL *)&selRef_isActive, (SEL *)&selRef_forceField);
}

uint64_t sub_1B1F68B54()
{
  _QWORD *v0;
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  void *v5;
  _QWORD v7[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v0, v7);
    v4 = MEMORY[0x1B5E240CC](v7);
    sub_1B1F2F2C4((uint64_t)v7);
    if (v4)
    {
      objc_opt_self();
      v5 = (void *)swift_dynamicCastObjCClass();
      if (!v5)
        swift_unknownObjectRelease();
    }
    else
    {
      v5 = 0;
    }
    v1 = objc_msgSend(v5, sel_forceField);

    if (v1)
      goto LABEL_3;
    return 1;
  }
  v1 = (id)v0[4];
  v2 = v1;
  if (!v1)
    return 1;
LABEL_3:
  v3 = objc_msgSend(v1, sel_shape);

  return (uint64_t)v3;
}

double sub_1B1F68C38()
{
  return sub_1B1F68C4C((SEL *)&selRef_halfExtent, (SEL *)&selRef_forceField);
}

double sub_1B1F68C4C(SEL *a1, SEL *a2)
{
  _QWORD *v2;
  id v5;
  id v6;
  double v7;
  uint64_t v9;
  void *v10;
  double v11;
  _QWORD v12[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v5 = (id)v2[4];
    v6 = v5;
    if (v5)
    {
LABEL_3:
      objc_msgSend(v5, *a1);
      v11 = v7;

      return v11;
    }
  }
  else
  {
    sub_1B1F78A28(v2, v12);
    v9 = MEMORY[0x1B5E240CC](v12);
    sub_1B1F2F2C4((uint64_t)v12);
    if (v9)
    {
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (!v10)
        swift_unknownObjectRelease();
    }
    else
    {
      v10 = 0;
    }
    v5 = objc_msgSend(v10, *a2);

    if (v5)
      goto LABEL_3;
  }
  return 0.0;
}

id sub_1B1F68D38()
{
  return sub_1B1F68A2C((SEL *)&selRef_scope, (SEL *)&selRef_forceField);
}

id sub_1B1F68D4C()
{
  return sub_1B1F68A2C((SEL *)&selRef_cullMode, (SEL *)&selRef_forceField);
}

double sub_1B1F68D60()
{
  return sub_1B1F68C4C((SEL *)&selRef_offset, (SEL *)&selRef_forceField);
}

id sub_1B1F68D74()
{
  return sub_1B1F68A2C((SEL *)&selRef_categoryBitMask, (SEL *)&selRef_forceField);
}

float sub_1B1F68D88()
{
  return sub_1B1F5CF3C((SEL *)&selRef_smoothness, (SEL *)&selRef_forceField);
}

float sub_1B1F68D9C()
{
  return sub_1B1F5CF3C((SEL *)&selRef_speed, (SEL *)&selRef_forceField);
}

uint64_t sub_1B1F68DB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F64DF4(a1, (void (*)(_BYTE *, uint64_t))sub_1B1F7898C, (uint64_t (*)(_BYTE *))sub_1B1F2F104, a2);
}

void sub_1B1F68DD4(uint64_t a1, uint64_t a2)
{
  sub_1B1F67A90(a1, a2, (SEL *)&selRef_forceField);
}

uint64_t sub_1B1F68DF0()
{
  uint64_t v0;
  uint64_t KeyPath;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E540;
  KeyPath = swift_getKeyPath();
  v2 = swift_getKeyPath();
  sub_1B1A02758(0, (unint64_t *)&unk_1ED4B8140, MEMORY[0x1E0DEDC60], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v3 = (_QWORD *)swift_allocObject();
  v3[4] = sub_1B1F76150;
  v3[5] = v2;
  v3[2] = sub_1B1F76180;
  v3[3] = v2;
  v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v4 = MEMORY[0x1E0DEE9D8];
  v5 = sub_1B1AC80E0(0x707954646C656966, 0xEE007865646E4965, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  sub_1B1791524(0, &qword_1EEF5A8B0, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldType, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F761A0;
  v6[5] = KeyPath;
  v6[2] = sub_1B1F761D0;
  v6[3] = KeyPath;
  v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v7 = sub_1B1AC8150(0x707954646C656966, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 32) = v7;
  v8 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F76228;
  v9[5] = v8;
  v9[2] = sub_1B1F76250;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC81C8(0x6874676E65727473, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F76228;
  v12[5] = v11;
  v12[2] = sub_1B1F76250;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = v4;
  v14 = sub_1B1AC81C8(0x4566666F6C6C6166, 0xEF746E656E6F7078, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v14;
  v15 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F0, MEMORY[0x1E0DEAFA0], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1F76330;
  v16[5] = v15;
  v16[2] = sub_1B1F76358;
  v16[3] = v15;
  v16[6] = v15;
  swift_allocObject();
  swift_retain_n();
  v17 = sub_1B1AC8238(0x657669746361, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v16, v15, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v17;
  v18 = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1F76150;
  v20[5] = v19;
  v20[2] = sub_1B1F76180;
  v20[3] = v19;
  v20[6] = v19;
  swift_allocObject();
  swift_retain_n();
  v21 = sub_1B1AC80E0(0x646E496570616873, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v20, v19, 0, 0,
          0,
          v4,
          0);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&unk_1EEF61460, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldShape, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v22 = (_QWORD *)swift_allocObject();
  v22[4] = sub_1B1F763C4;
  v22[5] = v18;
  v22[2] = sub_1B1F763F4;
  v22[3] = v18;
  v22[6] = v18;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v23 = sub_1B1AC82A8(0x6570616873, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v22, v18, 0, 0,
          0,
          v4,
          v21);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v23;
  v24 = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8160, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v25 = (_QWORD *)swift_allocObject();
  v25[4] = sub_1B1F7643C;
  v25[5] = v24;
  v25[2] = sub_1B1F7646C;
  v25[3] = v24;
  v25[6] = v24;
  swift_allocObject();
  swift_retain_n();
  v26 = v4;
  v27 = sub_1B1AC8320(0x65747845666C6168, 0xEA0000000000746ELL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v25, v24, 0, 0,
          0,
          v4,
          0);
  swift_release();
  *(_QWORD *)(v0 + 72) = v27;
  v28 = swift_getKeyPath();
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1F76150;
  v30[5] = v29;
  v30[2] = sub_1B1F76180;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1AC80E0(0x646E4965706F6373, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v13,
          0);
  swift_release();
  sub_1B1791524(0, &qword_1EEF5A860, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldScope, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v32 = (_QWORD *)swift_allocObject();
  v32[4] = sub_1B1F764F0;
  v32[5] = v28;
  v32[2] = sub_1B1F76520;
  v32[3] = v28;
  v32[6] = v28;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v33 = sub_1B1AC86FC(0x65706F6373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v32, v28, 0, 0,
          0,
          v26,
          v31);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v33;
  v34 = swift_getKeyPath();
  v35 = swift_getKeyPath();
  v36 = (_QWORD *)swift_allocObject();
  v36[4] = sub_1B1F76150;
  v36[5] = v35;
  v36[2] = sub_1B1F76180;
  v36[3] = v35;
  v36[6] = v35;
  swift_allocObject();
  swift_retain_n();
  v37 = sub_1B1AC80E0(0x65646F4D6C6C7563, 0xED00007865646E49, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v36, v35, 0, 0,
          0,
          v26,
          0);
  swift_release();
  sub_1B1791524(0, (unint64_t *)&unk_1EEF61470, (uint64_t (*)(uint64_t))type metadata accessor for VFXForceFieldCullMode, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v38 = (_QWORD *)swift_allocObject();
  v38[4] = sub_1B1F765F8;
  v38[5] = v34;
  v38[2] = sub_1B1F76628;
  v38[3] = v34;
  v38[6] = v34;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v39 = v26;
  v40 = sub_1B1AC8774(0x65646F4D6C6C7563, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v38, v34, 0, 0,
          0,
          v26,
          v37);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 88) = v40;
  v41 = swift_getKeyPath();
  v42 = (_QWORD *)swift_allocObject();
  v42[4] = sub_1B1F7643C;
  v42[5] = v41;
  v42[2] = sub_1B1F7646C;
  v42[3] = v41;
  v42[6] = v41;
  swift_allocObject();
  swift_retain_n();
  v43 = sub_1B1AC8320(0x74657366666FLL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v42, v41, 0, 0,
          0,
          v26,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v43;
  v44 = v0;
  v45 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1EEF595A8, MEMORY[0x1E0DEE190], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v46 = (_QWORD *)swift_allocObject();
  v46[4] = sub_1B1F767A8;
  v46[5] = v45;
  v46[2] = sub_1B1F767D8;
  v46[3] = v45;
  v46[6] = v45;
  swift_allocObject();
  swift_retain_n();
  v47 = sub_1B1AC87EC(0x79726F6765746163, 0xEF6B73614D746942, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v46, v45, 0, 0,
          0,
          v39,
          0);
  swift_release();
  *(_QWORD *)(v0 + 104) = v47;
  v48 = swift_getKeyPath();
  v49 = (_QWORD *)swift_allocObject();
  v49[4] = sub_1B1F76228;
  v49[5] = v48;
  v49[2] = sub_1B1F76250;
  v49[3] = v48;
  v49[6] = v48;
  swift_allocObject();
  swift_retain_n();
  v50 = sub_1B1AC81C8(0x656E68746F6F6D73, 0xEA00000000007373, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v49, v48, 0, 0,
          0,
          v39,
          0);
  swift_release();
  *(_QWORD *)(v44 + 112) = v50;
  v51 = swift_getKeyPath();
  v52 = (_QWORD *)swift_allocObject();
  v52[4] = sub_1B1F76228;
  v52[5] = v51;
  v52[2] = sub_1B1F76250;
  v52[3] = v51;
  v52[6] = v51;
  swift_allocObject();
  swift_retain_n();
  v53 = sub_1B1AC81C8(0x6465657073, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v52, v51, 0, 0,
          0,
          v39,
          0);
  swift_release();
  *(_QWORD *)(v44 + 120) = v53;
  result = sub_1B2228AD0();
  qword_1EEFD5750 = v44;
  return result;
}

id sub_1B1F69CDC()
{
  return sub_1B1F69DAC((SEL *)&selRef_fieldType);
}

void sub_1B1F69CE8(SEL *a1@<X3>, SEL *a2@<X4>, unsigned __int8 *a3@<X8>)
{
  id v5;
  void *v6;
  unsigned __int8 v7;

  v5 = sub_1B1F66F5C(a1);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, *a2);

  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
}

void sub_1B1F69D40(uint64_t *a1@<X8>)
{
  id v2;
  void *v3;
  uint64_t v4;

  v2 = sub_1B1F66F5C((SEL *)&selRef_forceField);
  if (v2)
  {
    v3 = v2;
    v4 = (uint64_t)objc_msgSend(v2, sel_shape);

  }
  else
  {
    v4 = 1;
  }
  *a1 = v4;
}

id sub_1B1F69DA0()
{
  return sub_1B1F69DAC((SEL *)&selRef_scope);
}

id sub_1B1F69DAC(SEL *a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  _QWORD v9[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v1, v9);
    v6 = MEMORY[0x1B5E240CC](v9);
    sub_1B1F2F2C4((uint64_t)v9);
    if (v6)
    {
      objc_opt_self();
      v7 = (void *)swift_dynamicCastObjCClass();
      if (!v7)
        swift_unknownObjectRelease();
    }
    else
    {
      v7 = 0;
    }
    v3 = objc_msgSend(v7, sel_forceField);

    if (v3)
      goto LABEL_3;
    return 0;
  }
  v3 = (id)v1[4];
  v4 = v3;
  if (!v3)
    return 0;
LABEL_3:
  v5 = objc_msgSend(v3, *a1);

  return v5;
}

void sub_1B1F69E98(SEL *a1@<X3>, _QWORD *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;

  v4 = sub_1B1F66F5C((SEL *)&selRef_forceField);
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, *a1);

  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
}

id sub_1B1F69EF8()
{
  return sub_1B1F69DAC((SEL *)&selRef_cullMode);
}

void sub_1B1F69F04(SEL *a1@<X3>, SEL *a2@<X4>, _QWORD *a3@<X8>)
{
  id v5;
  void *v6;
  id v7;

  v5 = sub_1B1F66F5C(a1);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, *a2);

  }
  else
  {
    v7 = 0;
  }
  *a3 = v7;
}

void sub_1B1F69F5C(SEL *a1@<X3>, SEL *a2@<X4>, _DWORD *a3@<X8>)
{
  id v5;
  void *v6;
  int v7;
  int v8;

  v5 = sub_1B1F66F5C(a1);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, *a2);
    v8 = v7;

  }
  else
  {
    v8 = 0;
  }
  *a3 = v8;
}

uint64_t sub_1B1F69FBC()
{
  return 0x6946206563726F46;
}

void *VFXMaterial.bridgedComponentNames.getter()
{
  return &unk_1E63C6BA8;
}

id sub_1B1F6A00C()
{
  void *v0;

  return objc_msgSend(v0, sel_presentationMaterial);
}

id sub_1B1F6A030()
{
  char *v0;
  void *v1;
  void *v2;
  objc_super v4;

  v1 = *(void **)&v0[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_shadable];
  swift_unknownObjectRetain();
  v2 = (void *)sub_1B2228728();
  objc_msgSend(v1, sel_removeObserver_forKeyPath_, v0, v2);
  swift_unknownObjectRelease();

  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for ShadableShaderModifierObserver();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

void sub_1B1F6A2E0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  objc_super v13;
  _QWORD v14[4];

  sub_1B1F78A28((_QWORD *)(v0 + 8), v14);
  v1 = MEMORY[0x1B5E240CC](v14);
  sub_1B1F2F2C4((uint64_t)v14);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      v3 = objc_msgSend(v2, sel_presentationMaterial);
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
    swift_unknownObjectRelease();
  }
  v3 = 0;
LABEL_6:

  *(_QWORD *)(v0 + 40) = v3;
  sub_1B1F78A28((_QWORD *)(v0 + 8), v14);
  v4 = MEMORY[0x1B5E240CC](v14);
  sub_1B1F2F2C4((uint64_t)v14);
  if (v4)
  {
    objc_opt_self();
    v5 = swift_dynamicCastObjCClass();
    if (v5)
    {
      v6 = v5;
      v7 = (objc_class *)type metadata accessor for ShadableShaderModifierObserver();
      v8 = (char *)objc_allocWithZone(v7);
      *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_propertyCache] = MEMORY[0x1E0DEE9D8];
      *(_QWORD *)&v8[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_shadable] = v6;
      v13.receiver = v8;
      v13.super_class = v7;
      swift_unknownObjectRetain();
      v9 = (char *)objc_msgSendSuper2(&v13, sel_init);
      v10 = *(void **)&v9[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_shadable];
      v11 = v9;
      v12 = (void *)sub_1B2228728();
      objc_msgSend(v10, sel_addObserver_forKeyPath_options_context_, v11, v12, 0, 0, v13.receiver, v13.super_class);
      swift_unknownObjectRelease();

      *(_QWORD *)v0 = v11;
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

void *sub_1B1F6A49C()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  _QWORD v5[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 40);
    v2 = v1;
  }
  else
  {
    sub_1B1F78A28((_QWORD *)(v0 + 8), v5);
    v3 = MEMORY[0x1B5E240CC](v5);
    sub_1B1F2F2C4((uint64_t)v5);
    if (v3)
    {
      objc_opt_self();
      v1 = (void *)swift_dynamicCastObjCClass();
      if (!v1)
        swift_unknownObjectRelease();
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

double sub_1B1F6A53C()
{
  return sub_1B1F6A554((SEL *)&selRef_diffuse);
}

double sub_1B1F6A548()
{
  return sub_1B1F6A554((SEL *)&selRef_multiply);
}

double sub_1B1F6A554(SEL *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  double v8;
  double v10;
  _QWORD v11[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = *(void **)(v1 + 40);
    if (v3)
    {
      v4 = v3;
LABEL_6:
      v6 = v4;
      v7 = objc_msgSend(v4, *a1);

      objc_msgSend(v7, sel_linearExtendedSRGBColor);
      v10 = v8;

      return v10;
    }
  }
  else
  {
    sub_1B1F78A28((_QWORD *)(v1 + 8), v11);
    v5 = MEMORY[0x1B5E240CC](v11);
    sub_1B1F2F2C4((uint64_t)v11);
    if (v5)
    {
      objc_opt_self();
      v4 = (id)swift_dynamicCastObjCClass();
      if (v4)
        goto LABEL_6;
      swift_unknownObjectRelease();
    }
  }
  return 0.0;
}

void sub_1B1F6A634(SEL *a1, __n128 a2)
{
  uint64_t v2;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  id v8;
  double v10;
  _QWORD v11[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v4 = *(void **)(v2 + 40);
    if (!v4)
      return;
    v5 = v4;
LABEL_6:
    v7 = v5;
    v8 = objc_msgSend(v5, *a1, *(_OWORD *)&a2);

    objc_msgSend(v8, sel_setLinearExtendedSRGBColor_, v10);
    return;
  }
  sub_1B1F78A28((_QWORD *)(v2 + 8), v11);
  v6 = MEMORY[0x1B5E240CC](v11);
  sub_1B1F2F2C4((uint64_t)v11);
  if (!v6)
    return;
  objc_opt_self();
  v5 = (id)swift_dynamicCastObjCClass();
  if (v5)
    goto LABEL_6;
  swift_unknownObjectRelease();
}

double sub_1B1F6A710()
{
  return sub_1B1F6A554((SEL *)&selRef_emission);
}

float sub_1B1F6A71C()
{
  return sub_1B1F6AA20((SEL *)&selRef_metalness);
}

float sub_1B1F6A728()
{
  return sub_1B1F6AA20((SEL *)&selRef_roughness);
}

void sub_1B1F6A734(SEL *a1, float a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  double v11;
  id v12;
  _QWORD v13[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v5 = *(void **)(v2 + 40);
    if (!v5)
      return;
    v6 = v5;
LABEL_6:
    v8 = v6;
    v9 = objc_msgSend(v6, *a1);

    v10 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    *(float *)&v11 = a2;
    v12 = objc_msgSend(v10, sel_initWithFloat_, v11);
    objc_msgSend(v9, sel_setContents_, v12);

    return;
  }
  sub_1B1F78A28((_QWORD *)(v2 + 8), v13);
  v7 = MEMORY[0x1B5E240CC](v13);
  sub_1B1F2F2C4((uint64_t)v13);
  if (!v7)
    return;
  objc_opt_self();
  v6 = (id)swift_dynamicCastObjCClass();
  if (v6)
    goto LABEL_6;
  swift_unknownObjectRelease();
}

float sub_1B1F6A83C()
{
  return sub_1B1F6A848((SEL *)&selRef_normal);
}

float sub_1B1F6A848(SEL *a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  float v8;
  float v9;
  _QWORD v11[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28((_QWORD *)(v1 + 8), v11);
    v5 = MEMORY[0x1B5E240CC](v11);
    sub_1B1F2F2C4((uint64_t)v11);
    if (v5)
    {
      objc_opt_self();
      v4 = (id)swift_dynamicCastObjCClass();
      if (v4)
        goto LABEL_6;
      swift_unknownObjectRelease();
    }
    return 0.0;
  }
  v3 = *(void **)(v1 + 40);
  if (!v3)
    return 0.0;
  v4 = v3;
LABEL_6:
  v6 = v4;
  v7 = objc_msgSend(v4, *a1);

  objc_msgSend(v7, sel_intensity);
  v9 = v8;

  return v9;
}

void sub_1B1F6A930(SEL *a1, float a2)
{
  uint64_t v2;
  void *v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  double v10;
  _QWORD v11[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v5 = *(void **)(v2 + 40);
    if (!v5)
      return;
    v6 = v5;
LABEL_6:
    v8 = v6;
    v9 = objc_msgSend(v6, *a1);

    *(float *)&v10 = a2;
    objc_msgSend(v9, sel_setIntensity_, v10);

    return;
  }
  sub_1B1F78A28((_QWORD *)(v2 + 8), v11);
  v7 = MEMORY[0x1B5E240CC](v11);
  sub_1B1F2F2C4((uint64_t)v11);
  if (!v7)
    return;
  objc_opt_self();
  v6 = (id)swift_dynamicCastObjCClass();
  if (v6)
    goto LABEL_6;
  swift_unknownObjectRelease();
}

float sub_1B1F6AA14()
{
  return sub_1B1F6AA20((SEL *)&selRef_transparent);
}

float sub_1B1F6AA20(SEL *a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  float v7;
  float v8;
  id v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v2 = sub_1B1F6A49C();
  if (!v2)
  {
    v12 = 0u;
    v13 = 0u;
LABEL_9:
    sub_1B1A0DD70((uint64_t)&v12);
    return 0.0;
  }
  v3 = v2;
  v4 = objc_msgSend(v2, *a1);

  v5 = objc_msgSend(v4, sel_contents);
  if (v5)
  {
    sub_1B22292EC();
    swift_unknownObjectRelease();
  }
  else
  {
    *(_OWORD *)v10 = 0u;
    v11 = 0u;
  }
  sub_1B1A18378((uint64_t)v10, (uint64_t)&v12, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_9;
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  if ((swift_dynamicCast() & 1) == 0)
    return 0.0;
  v6 = v10[0];
  objc_msgSend(v10[0], sel_floatValue);
  v8 = v7;

  return v8;
}

float sub_1B1F6AB58()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  float v5;
  float v6;
  _QWORD v8[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28((_QWORD *)(v0 + 8), v8);
    v3 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v3)
    {
      objc_opt_self();
      v2 = (id)swift_dynamicCastObjCClass();
      if (v2)
        goto LABEL_6;
      swift_unknownObjectRelease();
    }
    return 0.0;
  }
  v1 = *(void **)(v0 + 40);
  if (!v1)
    return 0.0;
  v2 = v1;
LABEL_6:
  v4 = v2;
  objc_msgSend(v2, sel_alphaCutoff);
  v6 = v5;

  return v6;
}

float sub_1B1F6AC18()
{
  return sub_1B1F6A848((SEL *)&selRef_diffuse);
}

BOOL sub_1B1F6AC24()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v7[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 40);
    if (v1)
    {
      v2 = v1;
LABEL_6:
      v4 = v2;
      v5 = objc_msgSend(v2, sel_shadingModel);

      return v5 == 0;
    }
  }
  else
  {
    sub_1B1F78A28((_QWORD *)(v0 + 8), v7);
    v3 = MEMORY[0x1B5E240CC](v7);
    sub_1B1F2F2C4((uint64_t)v7);
    if (v3)
    {
      objc_opt_self();
      v2 = (id)swift_dynamicCastObjCClass();
      if (v2)
        goto LABEL_6;
      swift_unknownObjectRelease();
    }
  }
  return 0;
}

BOOL sub_1B1F6ACE0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  _QWORD v7[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(void **)(v0 + 40);
    if (v1)
    {
      v2 = v1;
LABEL_6:
      v4 = v2;
      v5 = objc_msgSend(v2, sel_shadingModel);

      return v5 != (id)2;
    }
  }
  else
  {
    sub_1B1F78A28((_QWORD *)(v0 + 8), v7);
    v3 = MEMORY[0x1B5E240CC](v7);
    sub_1B1F2F2C4((uint64_t)v7);
    if (v3)
    {
      objc_opt_self();
      v2 = (id)swift_dynamicCastObjCClass();
      if (v2)
        goto LABEL_6;
      swift_unknownObjectRelease();
    }
  }
  return 1;
}

id *sub_1B1F6AD9C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  _BYTE v39[64];
  _QWORD *v40;

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v26[-v9];
  v38 = 0;
  v31 = 0;
  swift_unknownObjectWeakInit();
  v31 = 0;
  v11 = swift_unknownObjectWeakAssign();
  v32 = 0x3E6C6C756E3CLL;
  v33 = 0xE600000000000000;
  sub_1B19FC2D0(v11, (uint64_t)v39);
  memset(&v39[32], 0, 24);
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  if (sub_1B2067BAC(2037, v12, v13))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v2)
    {
      sub_1B19FA070(&v30, v33);
      sub_1B19FC28C();
      sub_1B2229D6C();
LABEL_9:
      sub_1B1D8EB3C((uint64_t)&v34, (uint64_t)v39);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v30);
LABEL_17:
      sub_1B1F789C0((uint64_t)&v38, a2);
    }
  }
  else
  {
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067BAC(2029, v14, v15))
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v2)
      {
        sub_1B19FA070(&v30, v33);
        v18 = sub_1B2229D30();
        v20 = v19;
        v27 = 0;
        swift_unknownObjectWeakInit();
        v27 = 0;
        v21 = swift_unknownObjectWeakAssign();
        v28 = v18;
        v29 = v20;
        sub_1B19FC2D0(v21, (uint64_t)&v34);
        goto LABEL_9;
      }
    }
    else
    {
      v40 = a2;
      sub_1B19FA070(a1, a1[3]);
      sub_1B1C78FEC();
      sub_1B222A150();
      if (!v2)
      {
        v34 = 0;
        LOBYTE(v35) = 1;
        v36 = 0xD000000000000017;
        v37 = 0x80000001B23459F0;
        v16 = sub_1B2229778();
        a2 = v40;
        if (v17)
          v22 = v16;
        else
          v22 = 0;
        if (v17)
          v23 = v17;
        else
          v23 = 0xE000000000000000;
        (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
        v35 = 0;
        swift_unknownObjectWeakInit();
        v35 = 0;
        v24 = swift_unknownObjectWeakAssign();
        v36 = v22;
        v37 = v23;
        sub_1B19FC2D0(v24, (uint64_t)&v30);
        sub_1B1D8EB3C((uint64_t)&v30, (uint64_t)v39);
        goto LABEL_17;
      }
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1F2E138(&v38);
}

void sub_1B1F6B120()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];

  sub_1B1F78A28((_QWORD *)(v0 + 8), v14);
  v1 = MEMORY[0x1B5E240CC](v14);
  sub_1B1F2F2C4((uint64_t)v14);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      v3 = objc_msgSend(v2, sel_presentationMaterial);
      swift_unknownObjectRelease();
      v4 = objc_retainAutorelease(v3);
      v5 = objc_msgSend(v4, sel_materialRef);
      if (v5)
      {
        v6 = v5;
        sub_1B1878414((uint64_t)v6, v7, v8, v9, v10, v11, v12, v13);

      }
      else
      {

      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

id *sub_1B1F6B1E4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1F6AD9C(a1, a2);
}

uint64_t sub_1B1F6B1F8(_QWORD *a1)
{
  _BYTE v2[24];
  uint64_t v3;

  sub_1B19FA070(a1, a1[3]);
  sub_1B222A168();
  sub_1B19FC264((uint64_t)v2, v3);
  sub_1B19FC3E4();
  sub_1B2229DF0();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

void sub_1B1F6B2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(v2 + 8, ObjectType, a2);
  sub_1B1F6A2E0();
}

uint64_t sub_1B1F6B2E8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[4];

  *a1 = 0;
  v2 = (uint64_t)(a1 + 1);
  swift_unknownObjectWeakInit();
  v4[1] = 0;
  swift_unknownObjectWeakAssign();
  v4[2] = 0x3E6C6C756E3CLL;
  v4[3] = 0xE600000000000000;
  result = sub_1B19FC2D0((uint64_t)v4, v2);
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  return result;
}

uint64_t sub_1B1F6B35C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E4F0;
  KeyPath = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8170, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F76DC8;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F76DF8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC1FA0(0x63206F6465626C61, 0xEC000000726F6C6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F76E60;
  v6[5] = v5;
  v6[2] = sub_1B1F76E88;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC237C(0xD000000000000010, 0x80000001B2345990, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F76DC8;
  v9[5] = v8;
  v9[2] = sub_1B1F76DF8;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC1FA0(0x6E6F697373696D65, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  v11 = swift_getKeyPath();
  v12 = (_QWORD *)swift_allocObject();
  v12[4] = sub_1B1F76DC8;
  v12[5] = v11;
  v12[2] = sub_1B1F76DF8;
  v12[3] = v11;
  v12[6] = v11;
  swift_allocObject();
  swift_retain_n();
  v13 = sub_1B1AC1FA0(0x796C7069746C756DLL, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v12, v11, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 56) = v13;
  v14 = swift_getKeyPath();
  v15 = swift_getKeyPath();
  v16 = (_QWORD *)swift_allocObject();
  v16[4] = sub_1B1F76E60;
  v16[5] = v14;
  v16[2] = sub_1B1F76E88;
  v16[3] = v14;
  v16[6] = v14;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v17 = sub_1B1AC237C(0x73656E6C6174656DLL, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v15, 1, 0, (uint64_t)v16, v14, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 64) = v17;
  v18 = swift_getKeyPath();
  v19 = swift_getKeyPath();
  v20 = (_QWORD *)swift_allocObject();
  v20[4] = sub_1B1F76E60;
  v20[5] = v18;
  v20[2] = sub_1B1F76E88;
  v20[3] = v18;
  v20[6] = v18;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v21 = sub_1B1AC237C(0x73656E6867756F72, 0xE900000000000073, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v19, 1, 0, (uint64_t)v20, v18, 0, 0,
          0,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 72) = v21;
  v22 = swift_getKeyPath();
  v23 = swift_getKeyPath();
  v24 = (_QWORD *)swift_allocObject();
  v24[4] = sub_1B1F76E60;
  v24[5] = v22;
  v24[2] = sub_1B1F76E88;
  v24[3] = v22;
  v24[6] = v22;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  v25 = sub_1B1AC237C(0xD000000000000010, 0x80000001B23459B0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v23, 1, 0, (uint64_t)v24, v22, 0, 0,
          256,
          v3,
          0);
  swift_release();
  swift_release();
  *(_QWORD *)(v0 + 80) = v25;
  v26 = swift_getKeyPath();
  v27 = (_QWORD *)swift_allocObject();
  v27[4] = sub_1B1F76E60;
  v27[5] = v26;
  v27[2] = sub_1B1F76E88;
  v27[3] = v26;
  v27[6] = v26;
  swift_allocObject();
  swift_retain_n();
  v28 = sub_1B1AC237C(0xD000000000000016, 0x80000001B23459D0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v26, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 88) = v28;
  v29 = swift_getKeyPath();
  v30 = (_QWORD *)swift_allocObject();
  v30[4] = sub_1B1F76E60;
  v30[5] = v29;
  v30[2] = sub_1B1F76E88;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  v31 = sub_1B1AC237C(0x726170736E617274, 0xEB00000000746E65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 96) = v31;
  v32 = swift_getKeyPath();
  v33 = (_QWORD *)swift_allocObject();
  v33[4] = sub_1B1F76E60;
  v33[5] = v32;
  v33[2] = sub_1B1F76E88;
  v33[3] = v32;
  v33[6] = v32;
  swift_allocObject();
  swift_retain_n();
  v34 = sub_1B1AC237C(0x7475436168706C61, 0xEB0000000066666FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v33, v32, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 104) = v34;
  result = sub_1B2228AD0();
  qword_1EEFD5758 = v0;
  return result;
}

void sub_1B1F6BCD8(SEL *a1@<X3>, _OWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = sub_1B1F6A49C();
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, *a1);

    objc_msgSend(v6, sel_linearExtendedSRGBColor);
    v9 = v7;

    v8 = v9;
  }
  else
  {
    v8 = 0uLL;
  }
  *a2 = v8;
}

void sub_1B1F6BD58(SEL *a1@<X3>, _DWORD *a2@<X8>)
{
  void *v4;
  void *v5;
  id v6;
  int v7;
  int v8;

  v4 = sub_1B1F6A49C();
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, *a1);

    objc_msgSend(v6, sel_intensity);
    v8 = v7;

  }
  else
  {
    v8 = 0;
  }
  *a2 = v8;
}

void sub_1B1F6BDD4(_DWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  int v4;
  int v5;

  v2 = sub_1B1F6A49C();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_alphaCutoff);
    v5 = v4;

  }
  else
  {
    v5 = 0;
  }
  *a1 = v5;
}

_QWORD *sub_1B1F6BE28()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __int16 v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  BOOL v20;
  unint64_t *v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v38;
  _OWORD v39[2];

  v1 = sub_1B1B7F1F4(MEMORY[0x1E0DEE9D8]);
  sub_1B1F78A28((_QWORD *)(v0 + 8), v39);
  v2 = MEMORY[0x1B5E240CC](v39);
  sub_1B1F2F2C4((uint64_t)v39);
  if (v2)
  {
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = objc_msgSend(v3, sel_shaderModifiersArguments);
      swift_unknownObjectRelease();
      if (v4)
      {
        sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF61480);
        sub_1B2228530();

        v5 = swift_bridgeObjectRetain();
        v6 = sub_1B1DC8CF4(v5);
        swift_bridgeObjectRelease();
        *(_QWORD *)&v39[0] = v6;
        sub_1B1F586A4((uint64_t *)v39);
        v7 = *(_QWORD *)&v39[0];
        if ((*(_QWORD *)&v39[0] & 0x8000000000000000) != 0 || (*(_QWORD *)&v39[0] & 0x4000000000000000) != 0)
        {
          swift_bridgeObjectRetain();
          v8 = sub_1B22296AC();
          swift_release();
          if (v8)
            goto LABEL_7;
        }
        else
        {
          v8 = *(_QWORD *)(*(_QWORD *)&v39[0] + 16);
          if (v8)
          {
LABEL_7:
            v9 = 0;
            v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            v11 = 256;
            v38 = v8;
            while (1)
            {
              v12 = (v7 & 0xC000000000000001) != 0
                  ? (id)MEMORY[0x1B5E21018](v9, v7)
                  : *(id *)(v7 + 8 * v9 + 32);
              v13 = v12;
              v14 = objc_msgSend(v12, sel_type);
              v15 = sub_1B222874C();
              v17 = v16;

              v18 = v15 == 0x74616F6C66 && v17 == 0xE500000000000000;
              if (v18 || (sub_1B2229D24() & 1) != 0)
                break;
              v20 = v15 == 0x3274616F6C66 && v17 == 0xE600000000000000;
              if (v20 || (sub_1B2229D24() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v21 = &qword_1ED4BB080;
                v22 = MEMORY[0x1E0DEB188];
                v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
                goto LABEL_23;
              }
              if (v15 == 0x3374616F6C66 && v17 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v21 = (unint64_t *)&qword_1ED4BB0A0;
                v22 = MEMORY[0x1E0DEB188];
                v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
                goto LABEL_23;
              }
              if (v15 == 0x3474616F6C66 && v17 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                v21 = (unint64_t *)&qword_1ED4BB0E0;
                v22 = MEMORY[0x1E0DEB188];
                v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_23:
                sub_1B19F8E54(0, v21, (uint64_t (*)(void))sub_1B19F8DCC, v22, v23);
LABEL_24:
                v19 = v24;
LABEL_25:
                v25 = objc_msgSend(v13, sel_name);
                v26 = sub_1B222874C();
                v28 = v27;

                memset(v39, 0, sizeof(v39));
                v29 = sub_1B1A23334(v19, (uint64_t)v39, v26, v28, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, v11, (uint64_t)&type metadata for MaterialController, v19, (uint64_t)&off_1E6392228);
                swift_bridgeObjectRelease();
                sub_1B1A0DD70((uint64_t)v39);
                v31 = *(_QWORD *)(v29 + 16);
                v30 = *(_QWORD *)(v29 + 24);
                swift_retain_n();
                swift_bridgeObjectRetain();
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *(_QWORD *)&v39[0] = v1;
                v33 = sub_1B1F82F1C(v29, v31, v30, isUniquelyReferenced_nonNull_native);
                v1 = *(_QWORD **)&v39[0];
                swift_bridgeObjectRelease();
                if (v33)
                {

                  swift_release();
                  swift_bridgeObjectRelease();
                  swift_release();
                }
                else
                {
                  swift_bridgeObjectRetain();
                  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    v10 = sub_1B1C63044(0, v10[2] + 1, 1, v10);
                  v35 = v10[2];
                  v34 = v10[3];
                  if (v35 >= v34 >> 1)
                    v10 = sub_1B1C63044(v34 > 1, v35 + 1, 1, v10);
                  v10[2] = v35 + 1;
                  v36 = &v10[2 * v35];
                  v36[4] = v31;
                  v36[5] = v30;

                  swift_release();
                  swift_bridgeObjectRelease();
                }
                swift_release();
                v11 = 0;
                goto LABEL_33;
              }
              if (v15 == 0x34783474616F6C66 && v17 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
              {
                swift_bridgeObjectRelease();
                type metadata accessor for simd_float4x4(0);
                goto LABEL_24;
              }

              swift_bridgeObjectRelease();
LABEL_33:
              if (v38 == ++v9)
                goto LABEL_50;
            }
            swift_bridgeObjectRelease();
            v19 = MEMORY[0x1E0DEB188];
            goto LABEL_25;
          }
        }
LABEL_50:
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  return v1;
}

uint64_t sub_1B1F6C3FC()
{
  void **v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  v1 = (char *)*v0;
  if (!*v0)
    return MEMORY[0x1E0DEE9D8];
  v2 = OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_propertyCache;
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_propertyCache];
  if (v3 >> 62)
  {
    v12 = v1;
    swift_bridgeObjectRetain();
    v13 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v13 <= 0)
      goto LABEL_4;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v1;
    if (v4 <= 0)
    {
LABEL_4:
      if (qword_1EEF57468 != -1)
        swift_once();
      v6 = qword_1EEFD5758;
      v7 = sub_1B1F6BE28();
      v9 = sub_1B1C6A62C((uint64_t)v7, v8, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1B19F4BEC((unint64_t)v9);
      *(_QWORD *)&v1[v2] = v6;
      swift_bridgeObjectRelease();
    }
  }
  v10 = *(_QWORD *)&v1[v2];
  swift_bridgeObjectRetain();

  return v10;
}

uint64_t sub_1B1F6C53C(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  id v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v3 = *(void **)(v1 + 40);
    if (v3)
    {
      v4 = v3;
LABEL_6:
      v6 = v4;
      sub_1B1A02864(a1, (uint64_t)v8);
      sub_1B2011560(v8);

      return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
    }
  }
  else
  {
    sub_1B1F78A28((_QWORD *)(v1 + 8), v8);
    v5 = MEMORY[0x1B5E240CC](v8);
    sub_1B1F2F2C4((uint64_t)v8);
    if (v5)
    {
      objc_opt_self();
      v4 = (id)swift_dynamicCastObjCClass();
      if (v4)
        goto LABEL_6;
      swift_unknownObjectRelease();
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
  return swift_bridgeObjectRelease();
}

_OWORD *sub_1B1F6C630@<X0>(uint64_t a1@<X8>)
{
  _OWORD *result;
  void *v3;
  _OWORD v4[2];

  result = sub_1B1F6A49C();
  if (result)
  {
    v3 = result;
    sub_1B2010E54((uint64_t)v4);

    return sub_1B1A0DDAC(v4, (_OWORD *)a1);
  }
  else
  {
    *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB188];
    *(_DWORD *)a1 = 0;
  }
  return result;
}

uint64_t sub_1B1F6C6AC(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57468);
}

void *VFXModel.bridgedComponentNames.getter()
{
  return &unk_1E63CB138;
}

uint64_t sub_1B1F6C6FC()
{
  void *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, sel_name);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = sub_1B222874C();

  return v3;
}

id sub_1B1F6C760()
{
  void *v0;

  return objc_msgSend(v0, sel_presentationModel);
}

void sub_1B1F6C784()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  objc_class *v8;
  char *v9;
  id v10;
  char *v11;
  void *v12;
  char *v13;
  void *v14;
  objc_super v15;
  _QWORD v16[4];

  sub_1B1F78A28((_QWORD *)(v0 + 8), v16);
  v1 = MEMORY[0x1B5E240CC](v16);
  sub_1B1F2F2C4((uint64_t)v16);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      v3 = objc_msgSend(v2, sel_presentationNode);
      swift_unknownObjectRelease();
      v4 = objc_msgSend(v3, sel_model);

      goto LABEL_6;
    }
    swift_unknownObjectRelease();
  }
  v4 = 0;
LABEL_6:

  *(_QWORD *)(v0 + 40) = v4;
  sub_1B1F78A28((_QWORD *)(v0 + 8), v16);
  v5 = MEMORY[0x1B5E240CC](v16);
  sub_1B1F2F2C4((uint64_t)v16);
  if (v5)
  {
    objc_opt_self();
    v6 = (void *)swift_dynamicCastObjCClass();
    if (!v6)
      swift_unknownObjectRelease();
  }
  else
  {
    v6 = 0;
  }
  v7 = objc_msgSend(v6, sel_model);

  if (v7)
  {
    v8 = (objc_class *)type metadata accessor for ShadableShaderModifierObserver();
    v9 = (char *)objc_allocWithZone(v8);
    *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_propertyCache] = MEMORY[0x1E0DEE9D8];
    *(_QWORD *)&v9[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_shadable] = v7;
    v15.receiver = v9;
    v15.super_class = v8;
    v10 = v7;
    v11 = (char *)objc_msgSendSuper2(&v15, sel_init);
    v12 = *(void **)&v11[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_shadable];
    v13 = v11;
    v14 = (void *)sub_1B2228728();
    objc_msgSend(v12, sel_addObserver_forKeyPath_options_context_, v13, v14, 0, 0, v15.receiver, v15.super_class);

    *(_QWORD *)v0 = v13;
  }
}

id sub_1B1F6C980()
{
  uint64_t v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  _QWORD v6[4];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v1 = *(id *)(v0 + 40);
    v2 = v1;
  }
  else
  {
    sub_1B1F78A28((_QWORD *)(v0 + 8), v6);
    v3 = MEMORY[0x1B5E240CC](v6);
    sub_1B1F2F2C4((uint64_t)v6);
    if (v3)
    {
      objc_opt_self();
      v4 = (void *)swift_dynamicCastObjCClass();
      if (!v4)
        swift_unknownObjectRelease();
    }
    else
    {
      v4 = 0;
    }
    v1 = objc_msgSend(v4, sel_model);

  }
  return v1;
}

id *sub_1B1F6CA40@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  id v38;
  _QWORD v39[5];
  _QWORD *v40;

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v26 - v9;
  v38 = 0;
  v31 = 0;
  swift_unknownObjectWeakInit();
  v31 = 0;
  v11 = swift_unknownObjectWeakAssign();
  v32 = 0x3E6C6C756E3CLL;
  v33 = 0xE600000000000000;
  sub_1B19FC2D0(v11, (uint64_t)v39);
  v39[4] = 0;
  v12 = a1[3];
  v13 = a1[4];
  sub_1B19FA070(a1, v12);
  if (sub_1B2067BAC(2037, v12, v13))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v2)
    {
      sub_1B19FA070(&v30, v33);
      sub_1B19FC28C();
      sub_1B2229D6C();
LABEL_9:
      sub_1B1D8EB3C((uint64_t)&v34, (uint64_t)v39);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v30);
LABEL_17:
      sub_1B1F789F4((uint64_t)&v38, a2);
    }
  }
  else
  {
    v14 = a1[3];
    v15 = a1[4];
    sub_1B19FA070(a1, v14);
    if (sub_1B2067BAC(2029, v14, v15))
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v2)
      {
        sub_1B19FA070(&v30, v33);
        v18 = sub_1B2229D30();
        v20 = v19;
        v27 = 0;
        swift_unknownObjectWeakInit();
        v27 = 0;
        v21 = swift_unknownObjectWeakAssign();
        v28 = v18;
        v29 = v20;
        sub_1B19FC2D0(v21, (uint64_t)&v34);
        goto LABEL_9;
      }
    }
    else
    {
      v40 = a2;
      sub_1B19FA070(a1, a1[3]);
      sub_1B1C78FEC();
      sub_1B222A150();
      if (!v2)
      {
        v34 = 0;
        LOBYTE(v35) = 1;
        v36 = 0xD000000000000017;
        v37 = 0x80000001B23459F0;
        v16 = sub_1B2229778();
        a2 = v40;
        if (v17)
          v22 = v16;
        else
          v22 = 0;
        if (v17)
          v23 = v17;
        else
          v23 = 0xE000000000000000;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        v35 = 0;
        swift_unknownObjectWeakInit();
        v35 = 0;
        v24 = swift_unknownObjectWeakAssign();
        v36 = v22;
        v37 = v23;
        sub_1B19FC2D0(v24, (uint64_t)&v30);
        sub_1B1D8EB3C((uint64_t)&v30, (uint64_t)v39);
        goto LABEL_17;
      }
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1F2E1A8(&v38);
}

id *sub_1B1F6CDC0@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1F6CA40(a1, a2);
}

void sub_1B1F6CDD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(v2 + 8, ObjectType, a2);
  sub_1B1F6C784();
}

uint64_t sub_1B1F6CE18@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v4[4];

  *a1 = 0;
  v2 = (uint64_t)(a1 + 1);
  swift_unknownObjectWeakInit();
  v4[1] = 0;
  swift_unknownObjectWeakAssign();
  v4[2] = 0x3E6C6C756E3CLL;
  v4[3] = 0xE600000000000000;
  result = sub_1B19FC2D0((uint64_t)v4, v2);
  a1[5] = 0;
  return result;
}

void sub_1B1F6CE88()
{
  qword_1EEFD5760 = MEMORY[0x1E0DEE9D8];
}

_QWORD *sub_1B1F6CE9C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __int16 v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v39;
  _OWORD v40[2];

  v1 = sub_1B1B7F1F4(MEMORY[0x1E0DEE9D8]);
  sub_1B1F78A28((_QWORD *)(v0 + 8), v40);
  v2 = MEMORY[0x1B5E240CC](v40);
  sub_1B1F2F2C4((uint64_t)v40);
  if (v2)
  {
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (!v3)
      swift_unknownObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(v3, sel_model);

  if (v4)
  {
    v5 = objc_msgSend(v4, sel_shaderModifiersArguments);

    if (v5)
    {
      sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF61480);
      sub_1B2228530();

      v6 = swift_bridgeObjectRetain();
      v7 = sub_1B1DC8CF4(v6);
      swift_bridgeObjectRelease();
      *(_QWORD *)&v40[0] = v7;
      sub_1B1F586A4((uint64_t *)v40);
      v8 = *(_QWORD *)&v40[0];
      if ((*(_QWORD *)&v40[0] & 0x8000000000000000) != 0 || (*(_QWORD *)&v40[0] & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain();
        v9 = sub_1B22296AC();
        swift_release();
        if (v9)
          goto LABEL_10;
      }
      else
      {
        v9 = *(_QWORD *)(*(_QWORD *)&v40[0] + 16);
        if (v9)
        {
LABEL_10:
          v10 = 0;
          v11 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v12 = 256;
          v39 = v9;
          while (1)
          {
            v13 = (v8 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1B5E21018](v10, v8)
                : *(id *)(v8 + 8 * v10 + 32);
            v14 = v13;
            v15 = objc_msgSend(v13, sel_type);
            v16 = sub_1B222874C();
            v18 = v17;

            v19 = v16 == 0x74616F6C66 && v18 == 0xE500000000000000;
            if (v19 || (sub_1B2229D24() & 1) != 0)
              break;
            v21 = v16 == 0x3274616F6C66 && v18 == 0xE600000000000000;
            if (v21 || (sub_1B2229D24() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v22 = &qword_1ED4BB080;
              v23 = MEMORY[0x1E0DEB188];
              v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
              goto LABEL_26;
            }
            if (v16 == 0x3374616F6C66 && v18 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v22 = (unint64_t *)&qword_1ED4BB0A0;
              v23 = MEMORY[0x1E0DEB188];
              v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
              goto LABEL_26;
            }
            if (v16 == 0x3474616F6C66 && v18 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              v22 = (unint64_t *)&qword_1ED4BB0E0;
              v23 = MEMORY[0x1E0DEB188];
              v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_26:
              sub_1B19F8E54(0, v22, (uint64_t (*)(void))sub_1B19F8DCC, v23, v24);
LABEL_27:
              v20 = v25;
LABEL_28:
              v26 = objc_msgSend(v14, sel_name);
              v27 = sub_1B222874C();
              v29 = v28;

              memset(v40, 0, sizeof(v40));
              v30 = sub_1B1A23334(v20, (uint64_t)v40, v27, v29, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, v12, (uint64_t)&type metadata for ModelController, v20, (uint64_t)&off_1E6384540);
              swift_bridgeObjectRelease();
              sub_1B1A0DD70((uint64_t)v40);
              v32 = *(_QWORD *)(v30 + 16);
              v31 = *(_QWORD *)(v30 + 24);
              swift_retain_n();
              swift_bridgeObjectRetain();
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(_QWORD *)&v40[0] = v1;
              v34 = sub_1B1F82F1C(v30, v32, v31, isUniquelyReferenced_nonNull_native);
              v1 = *(_QWORD **)&v40[0];
              swift_bridgeObjectRelease();
              if (v34)
              {

                swift_release();
                swift_bridgeObjectRelease();
                swift_release();
              }
              else
              {
                swift_bridgeObjectRetain();
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v11 = sub_1B1C63044(0, v11[2] + 1, 1, v11);
                v36 = v11[2];
                v35 = v11[3];
                if (v36 >= v35 >> 1)
                  v11 = sub_1B1C63044(v35 > 1, v36 + 1, 1, v11);
                v11[2] = v36 + 1;
                v37 = &v11[2 * v36];
                v37[4] = v32;
                v37[5] = v31;

                swift_release();
                swift_bridgeObjectRelease();
              }
              swift_release();
              v12 = 0;
              goto LABEL_36;
            }
            if (v16 == 0x34783474616F6C66 && v18 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
            {
              swift_bridgeObjectRelease();
              type metadata accessor for simd_float4x4(0);
              goto LABEL_27;
            }

            swift_bridgeObjectRelease();
LABEL_36:
            if (v39 == ++v10)
              goto LABEL_53;
          }
          swift_bridgeObjectRelease();
          v20 = MEMORY[0x1E0DEB188];
          goto LABEL_28;
        }
      }
LABEL_53:
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  return v1;
}

uint64_t sub_1B1F6D49C()
{
  void **v0;
  char *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;

  v1 = (char *)*v0;
  if (!*v0)
    return MEMORY[0x1E0DEE9D8];
  v2 = OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_propertyCache;
  v3 = *(_QWORD *)&v1[OBJC_IVAR____TtC3VFX30ShadableShaderModifierObserver_propertyCache];
  if (v3 >> 62)
  {
    v12 = v1;
    swift_bridgeObjectRetain();
    v13 = sub_1B22296AC();
    swift_bridgeObjectRelease();
    if (v13 <= 0)
      goto LABEL_4;
  }
  else
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = v1;
    if (v4 <= 0)
    {
LABEL_4:
      if (qword_1EEF57470 != -1)
        swift_once();
      v6 = qword_1EEFD5760;
      v7 = sub_1B1F6CE9C();
      v9 = sub_1B1C6A62C((uint64_t)v7, v8, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B1AB293C);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      sub_1B19F4BEC((unint64_t)v9);
      *(_QWORD *)&v1[v2] = v6;
      swift_bridgeObjectRelease();
    }
  }
  v10 = *(_QWORD *)&v1[v2];
  swift_bridgeObjectRetain();

  return v10;
}

void sub_1B1F6D5DC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t (*v47)(uint64_t, uint64_t, uint64_t);
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  id v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[3];

  if (objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    v7 = *(id *)(v3 + 40);
    v8 = v7;
    if (!v7)
      goto LABEL_17;
  }
  else
  {
    sub_1B1F78A28((_QWORD *)(v3 + 8), v89);
    v9 = MEMORY[0x1B5E240CC](v89);
    sub_1B1F2F2C4((uint64_t)v89);
    if (v9)
    {
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (!v10)
        swift_unknownObjectRelease();
    }
    else
    {
      v10 = 0;
    }
    v7 = objc_msgSend(v10, sel_model);

    if (!v7)
      goto LABEL_17;
  }
  v11 = objc_msgSend(v7, sel_shaderModifiersArguments);

  if (!v11)
    goto LABEL_17;
  sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF61480);
  v12 = sub_1B2228530();

  if (!*(_QWORD *)(v12 + 16))
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  v13 = sub_1B1DC3B00(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v15 = *(id *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = sub_1B1F6C980();
  v17 = MEMORY[0x1E0DEE9B8];
  if (v16)
  {
    v18 = (void *)sub_1B2228728();
    v19 = objc_msgSend(v16, sel_valueForKey_, v18);

    if (v19)
    {
      sub_1B22292EC();
      swift_unknownObjectRelease();
    }
    else
    {
      v87 = 0u;
      v88 = 0u;
    }
    sub_1B1A18378((uint64_t)&v87, (uint64_t)v89, (unint64_t *)&qword_1ED4BB150, v17 + 8);
  }
  else
  {
    memset(v89, 0, 32);
  }
  v20 = objc_msgSend(v15, sel_type);
  v21 = sub_1B222874C();
  v23 = v22;

  if (v21 == 0x74616F6C66 && v23 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v25 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v25 & 1) == 0)
    {
      v26 = objc_msgSend(v15, sel_type);
      v27 = sub_1B222874C();
      v29 = v28;

      if (v27 == 0x3274616F6C66 && v29 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_37;
      }
      v32 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v32 & 1) != 0)
      {
LABEL_37:
        sub_1B1A0DCD4((uint64_t)v89, (uint64_t)&v87);
        if (*((_QWORD *)&v88 + 1))
        {
          sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            objc_msgSend(v86, sel_VFXFloat2Value);
            v34 = v33;

LABEL_42:
            sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
            a3[3] = v35;

            *a3 = v34;
            goto LABEL_70;
          }
        }
        else
        {
          sub_1B1A0DD70((uint64_t)&v87);
        }
        v34 = 0;
        goto LABEL_42;
      }
      v36 = objc_msgSend(v15, sel_type);
      v37 = sub_1B222874C();
      v39 = v38;

      if (v37 == 0x3374616F6C66 && v39 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_47;
      }
      v40 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v40 & 1) != 0)
      {
LABEL_47:
        sub_1B1A0DCD4((uint64_t)v89, (uint64_t)&v87);
        if (*((_QWORD *)&v88 + 1))
        {
          sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            objc_msgSend(v86, sel_VFXFloat3Value);
            v82 = v41;

            v42 = 0;
            v44 = *((_QWORD *)&v82 + 1);
            v43 = v82;
LABEL_52:
            v45 = &qword_1ED4BB0A0;
            v46 = MEMORY[0x1E0DEB188];
            v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
LABEL_63:
            sub_1B19F8E54(0, (unint64_t *)v45, (uint64_t (*)(void))sub_1B19F8DCC, v46, v47);
            a3[3] = v54;
            v55 = swift_allocObject();
            *a3 = v55;

            if (v42)
              v56 = 0;
            else
              v56 = v43;
            if (v42)
              v57 = 0;
            else
              v57 = v44;
            *(_QWORD *)(v55 + 16) = v56;
            *(_QWORD *)(v55 + 24) = v57;
            goto LABEL_70;
          }
        }
        else
        {
          sub_1B1A0DD70((uint64_t)&v87);
        }
        v43 = 0;
        v44 = 0;
        v42 = 1;
        goto LABEL_52;
      }
      v48 = objc_msgSend(v15, sel_type);
      v49 = sub_1B222874C();
      v51 = v50;

      if (v49 == 0x3474616F6C66 && v51 == 0xE600000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_57;
      }
      v52 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v52 & 1) != 0)
      {
LABEL_57:
        sub_1B1A0DCD4((uint64_t)v89, (uint64_t)&v87);
        if (*((_QWORD *)&v88 + 1))
        {
          sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            objc_msgSend(v86, sel_VFXFloat4Value);
            v83 = v53;

            v42 = 0;
            v44 = *((_QWORD *)&v83 + 1);
            v43 = v83;
LABEL_62:
            v45 = &qword_1ED4BB0E0;
            v46 = MEMORY[0x1E0DEB188];
            v47 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
            goto LABEL_63;
          }
        }
        else
        {
          sub_1B1A0DD70((uint64_t)&v87);
        }
        v43 = 0;
        v44 = 0;
        v42 = 1;
        goto LABEL_62;
      }
      v58 = objc_msgSend(v15, sel_type);
      v59 = sub_1B222874C();
      v61 = v60;

      if (v59 == 0x34783474616F6C66 && v61 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        goto LABEL_75;
      }
      v62 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      if ((v62 & 1) != 0)
      {
LABEL_75:
        sub_1B1A0DCD4((uint64_t)v89, (uint64_t)&v87);
        if (*((_QWORD *)&v88 + 1))
        {
          sub_1B1B9DAD4(0, &qword_1EEF5FBF0);
          if ((swift_dynamicCast() & 1) != 0)
          {
            objc_msgSend(v86, sel_VFXMatrix4Value);
            v80 = v64;
            v84 = v63;
            v78 = v65;
            v79 = v66;

            v67 = 0;
            v68 = v84;
            v85 = *((_QWORD *)&v84 + 1);
            v69 = v80;
            v81 = *((_QWORD *)&v80 + 1);
            v71 = *((_QWORD *)&v78 + 1);
            v70 = v78;
            v72 = *((_QWORD *)&v79 + 1);
            v73 = v79;
LABEL_80:
            type metadata accessor for simd_float4x4(0);
            a3[3] = v74;
            v75 = (_QWORD *)swift_allocObject();
            *a3 = (uint64_t)v75;

            if ((v67 & 1) != 0)
            {
              v76 = 0;
              v77 = 0;
              v70 = 0;
              v73 = 0;
              v69 = 0x3F80000000000000;
              v68 = 1065353216;
              v71 = 1065353216;
              v72 = 0x3F80000000000000;
            }
            else
            {
              v76 = v85;
              v77 = v81;
            }
            v75[2] = v68;
            v75[3] = v76;
            v75[4] = v69;
            v75[5] = v77;
            v75[6] = v70;
            v75[7] = v71;
            v75[8] = v73;
            v75[9] = v72;
            goto LABEL_70;
          }
        }
        else
        {
          sub_1B1A0DD70((uint64_t)&v87);
        }
        v68 = 0;
        v85 = 0;
        v69 = 0;
        v81 = 0;
        v70 = 0;
        v71 = 0;
        v73 = 0;
        v72 = 0;
        v67 = 1;
        goto LABEL_80;
      }
      sub_1B1A0DD70((uint64_t)v89);

LABEL_17:
      a3[3] = MEMORY[0x1E0DEB188];
      *(_DWORD *)a3 = 0;
      return;
    }
  }
  sub_1B1A0DCD4((uint64_t)v89, (uint64_t)&v87);
  if (!*((_QWORD *)&v88 + 1))
  {
    sub_1B1A0DD70((uint64_t)&v87);
    goto LABEL_34;
  }
  sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_34:
    v31 = 0;
    goto LABEL_35;
  }
  objc_msgSend(v86, sel_floatValue);
  v31 = v30;

LABEL_35:
  a3[3] = MEMORY[0x1E0DEB188];

  *(_DWORD *)a3 = v31;
LABEL_70:
  sub_1B1A0DD70((uint64_t)v89);
}

uint64_t sub_1B1F6DEF8(__int128 *a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  void *v32;
  __int128 *v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  id v38;
  double v39;
  id v40;
  unint64_t *v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  void *v46;
  uint64_t v47;
  void *v48;
  char v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  double v61;
  uint64_t v62;
  __int128 v63;
  __int128 v64;
  double v65[3];
  uint64_t v66;
  _OWORD v67[3];

  v6 = sub_1B1F6C980();
  if (!v6
    || (v7 = v6,
        v8 = objc_msgSend(v6, sel_shaderModifiersArguments),
        v7,
        !v8))
  {
LABEL_20:
    v29 = sub_1B1F6C980();
    if (v29)
    {
      v30 = v29;
      sub_1B19FA070(a1, *((_QWORD *)a1 + 3));
      v31 = sub_1B2229D0C();
      v32 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v30, sel_setValue_forKey_, v31, v32);

      swift_unknownObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    v33 = a1;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
  }
  sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF61480);
  v9 = sub_1B2228530();

  if (!*(_QWORD *)(v9 + 16))
  {
LABEL_19:
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v10 = sub_1B1DC3B00(a2, a3);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  v12 = *(id *)(*(_QWORD *)(v9 + 56) + 8 * v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  memset(v67, 0, 32);
  v13 = objc_msgSend(v12, sel_type);
  v14 = sub_1B222874C();
  v16 = v15;

  if (v14 == 0x74616F6C66 && v16 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_26;
  }
  v18 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_26:
    sub_1B1A02864((uint64_t)a1, (uint64_t)&v60);
    v35 = MEMORY[0x1E0DEE9B8];
    v36 = MEMORY[0x1E0DEE9B8] + 8;
    if (!swift_dynamicCast())
    {
      sub_1B1A02864((uint64_t)a1, (uint64_t)&v60);
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_36;
      v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB37E8]), sel_initWithDouble_, v65[0]);
      v62 = sub_1B1B9DAD4(0, (unint64_t *)&qword_1EEF5B5C0);
      *(_QWORD *)&v60 = v42;
      sub_1B1A0DD70((uint64_t)v67);
      v43 = v35 + 8;
      goto LABEL_35;
    }
    v37 = LODWORD(v65[0]);
    v38 = objc_allocWithZone(MEMORY[0x1E0CB37E8]);
    LODWORD(v39) = v37;
    v40 = objc_msgSend(v38, sel_initWithFloat_, v39);
    v41 = (unint64_t *)&qword_1EEF5B5C0;
LABEL_34:
    v62 = sub_1B1B9DAD4(0, v41);
    *(_QWORD *)&v60 = v40;
    sub_1B1A0DD70((uint64_t)v67);
    v43 = v36;
LABEL_35:
    sub_1B1A18378((uint64_t)&v60, (uint64_t)v67, (unint64_t *)&qword_1ED4BB150, v43);
    goto LABEL_36;
  }
  v19 = objc_msgSend(v12, sel_type);
  v20 = sub_1B222874C();
  v22 = v21;

  if (v20 == 0x3274616F6C66 && v22 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  v24 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v24 & 1) != 0)
  {
LABEL_31:
    sub_1B1A02864((uint64_t)a1, (uint64_t)&v60);
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v36 = MEMORY[0x1E0DEE9B8] + 8;
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_36;
    v44 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXFloat2_, v65[0]);
    goto LABEL_33;
  }
  v25 = objc_msgSend(v12, sel_type);
  v26 = sub_1B222874C();
  v28 = v27;

  if (v26 == 0x3374616F6C66 && v28 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_43;
  }
  v49 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v49 & 1) != 0)
  {
LABEL_43:
    sub_1B1A02864((uint64_t)a1, (uint64_t)&v60);
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
    v36 = MEMORY[0x1E0DEE9B8] + 8;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v44 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXFloat3_, v65[0]);
LABEL_33:
      v40 = v44;
      v41 = &qword_1EEF5FBF0;
      goto LABEL_34;
    }
    goto LABEL_36;
  }
  v50 = objc_msgSend(v12, sel_type);
  v51 = sub_1B222874C();
  v53 = v52;

  if (v51 == 0x3474616F6C66 && v53 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_49;
  }
  v54 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  if ((v54 & 1) != 0)
  {
LABEL_49:
    sub_1B1A02864((uint64_t)a1, (uint64_t)&v60);
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v36 = MEMORY[0x1E0DEE9B8] + 8;
    if ((swift_dynamicCast() & 1) != 0)
    {
      v44 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXFloat4_, v65[0]);
      goto LABEL_33;
    }
    goto LABEL_36;
  }
  v55 = objc_msgSend(v12, sel_type);
  v56 = sub_1B222874C();
  v58 = v57;

  if (v56 == 0x34783474616F6C66 && v58 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v59 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v59 & 1) == 0)
      goto LABEL_36;
  }
  sub_1B1A02864((uint64_t)a1, (uint64_t)v65);
  type metadata accessor for simd_float4x4(0);
  v36 = MEMORY[0x1E0DEE9B8] + 8;
  if ((swift_dynamicCast() & 1) != 0)
  {
    v44 = objc_msgSend((id)objc_opt_self(), sel_valueWithVFXMatrix4_, *(double *)&v60, v61, *(double *)&v63, *(double *)&v64);
    goto LABEL_33;
  }
LABEL_36:
  sub_1B1A0DCD4((uint64_t)v67, (uint64_t)v65);
  if (v66)
  {
    sub_1B1A0DDAC(v65, &v60);
    v45 = sub_1B1F6C980();
    if (v45)
    {
      v46 = v45;
      sub_1B19FA070(&v60, v62);
      v47 = sub_1B2229D0C();
      v48 = (void *)sub_1B2228728();
      swift_bridgeObjectRelease();
      objc_msgSend(v46, sel_setValue_forKey_, v47, v48);

      swift_unknownObjectRelease();
      sub_1B1A0DD70((uint64_t)v67);
    }
    else
    {
      sub_1B1A0DD70((uint64_t)v67);

      swift_bridgeObjectRelease();
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    v33 = &v60;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
  }
  sub_1B1A0DD70((uint64_t)v67);

  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1A0DD70((uint64_t)v65);
}

uint64_t sub_1B1F6E770(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57470);
}

uint64_t static VFXNode.addBridgeControllers(to:for:)(uint64_t a1, void *a2)
{
  int v3;
  int v4;
  uint64_t v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[8];
  _UNKNOWN **v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[8];
  _UNKNOWN **v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE v36[8];
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;

  sub_1B1A02864(a1, (uint64_t)v36);
  swift_dynamicCast();
  v3 = v32[0];
  v4 = v32[1];
  v37 = 0;
  swift_unknownObjectWeakInit();
  v37 = 0;
  v5 = swift_unknownObjectWeakAssign();
  v38 = 0x3E6C6C756E3CLL;
  v39 = 0xE600000000000000;
  sub_1B19FC2D0(v5, (uint64_t)v32);
  swift_unknownObjectWeakInit();
  sub_1B1F70BC8((uint64_t)v32, (uint64_t)v36);
  swift_unknownObjectWeakInit();
  v29 = &off_1E63CAFC0;
  swift_unknownObjectWeakAssign();
  v6 = a2;
  v7 = objc_msgSend(v6, sel_identifier);
  v8 = sub_1B222874C();
  v10 = v9;

  v30 = v8;
  v31 = v10;
  sub_1B19FC2D0((uint64_t)v28, (uint64_t)v32);
  sub_1B1F5BA80((uint64_t)v32);
  v11 = v3 == -1 && v4 == 0;
  v12 = v11;
  if (!v11)
  {
    v13 = swift_retain();
    MEMORY[0x1E0C80A78](v13, v14);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F70BAC);
    swift_release();
  }
  v33 = 0;
  swift_unknownObjectWeakInit();
  v33 = 0;
  v15 = swift_unknownObjectWeakAssign();
  v34 = 0x3E6C6C756E3CLL;
  v35 = 0xE600000000000000;
  sub_1B19FC2D0(v15, (uint64_t)v28);
  swift_unknownObjectWeakInit();
  sub_1B1F70BC8((uint64_t)v28, (uint64_t)v32);
  swift_unknownObjectWeakInit();
  v25 = &off_1E63CAFC0;
  swift_unknownObjectWeakAssign();
  v16 = v6;
  v17 = objc_msgSend(v16, sel_identifier);
  v18 = sub_1B222874C();
  v20 = v19;

  v26 = v18;
  v27 = v20;
  sub_1B19FC2D0((uint64_t)v24, (uint64_t)v28);
  sub_1B1F5BA80((uint64_t)v28);
  if ((v12 & 1) == 0)
  {
    v21 = swift_retain();
    MEMORY[0x1E0C80A78](v21, v22);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F70C14);
    swift_release();
  }
  sub_1B1F70C30((uint64_t)v32);
  return sub_1B1F70C30((uint64_t)v36);
}

void *VFXWorld.bridgedComponentNames.getter()
{
  return &unk_1E63CB228;
}

uint64_t sub_1B1F6EA9C()
{
  return 0x646C726F57;
}

uint64_t sub_1B1F6EAB0()
{
  void *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(v0, sel_identifier);
  v2 = sub_1B222874C();

  return v2;
}

float sub_1B1F6EB04()
{
  return sub_1B1F6EDEC((SEL *)&selRef_background);
}

double sub_1B1F6EB10()
{
  return sub_1B1F6EF6C((SEL *)&selRef_background);
}

uint64_t sub_1B1F6EB1C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1F6F0FC(a1, (uint64_t (*)(_QWORD *))sub_1B1F2F174, a2);
}

uint64_t sub_1B1F6EB40()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F771EC;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F77214;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AD15EC(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8130, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F77270;
  v6[5] = v5;
  v6[2] = sub_1B1F77298;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AD165C(0x726F66736E617274, 0xE90000000000006DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         2048,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5768 = v0;
  return result;
}

uint64_t sub_1B1F6EDC4()
{
  return 0x756F72676B636142;
}

float sub_1B1F6EDE0()
{
  return sub_1B1F6EDEC((SEL *)&selRef_lightingEnvironment);
}

float sub_1B1F6EDEC(SEL *a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  id v5;
  float v6;
  float v7;
  _QWORD v9[4];

  sub_1B1F78A28(v1, v9);
  v3 = MEMORY[0x1B5E240CC](v9);
  sub_1B1F2F2C4((uint64_t)v9);
  if (!v3)
    return 0.0;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
    return 0.0;
  }
  v5 = objc_msgSend(v4, *a1);
  swift_unknownObjectRelease();
  objc_msgSend(v5, sel_intensity);
  v7 = v6;

  return v7;
}

void sub_1B1F6EEA8(SEL *a1, SEL *a2, float a3)
{
  _QWORD *v3;
  uint64_t v7;
  void *v8;
  id v9;
  double v10;
  _QWORD v11[4];

  sub_1B1F78A28(v3, v11);
  v7 = MEMORY[0x1B5E240CC](v11);
  sub_1B1F2F2C4((uint64_t)v11);
  if (v7)
  {
    objc_opt_self();
    v8 = (void *)swift_dynamicCastObjCClass();
    if (v8)
    {
      v9 = objc_msgSend(v8, *a1);
      swift_unknownObjectRelease();
      *(float *)&v10 = a3;
      objc_msgSend(v9, *a2, v10);

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

double sub_1B1F6EF60()
{
  return sub_1B1F6EF6C((SEL *)&selRef_lightingEnvironment);
}

double sub_1B1F6EF6C(SEL *a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  id v5;
  double v6;
  double result;
  double v8;
  _QWORD v9[4];

  sub_1B1F78A28(v1, v9);
  v3 = MEMORY[0x1B5E240CC](v9);
  sub_1B1F2F2C4((uint64_t)v9);
  if (v3)
  {
    objc_opt_self();
    v4 = (void *)swift_dynamicCastObjCClass();
    if (v4)
    {
      v5 = objc_msgSend(v4, *a1);
      swift_unknownObjectRelease();
      objc_msgSend(v5, sel_contentsTransform);
      v8 = v6;

      return v8;
    }
    swift_unknownObjectRelease();
  }
  *(_QWORD *)&result = 1065353216;
  return result;
}

void sub_1B1F6F044(SEL *a1, double a2, double a3, double a4, double a5)
{
  _QWORD *v5;
  uint64_t v7;
  void *v8;
  id v9;
  _QWORD v14[4];

  sub_1B1F78A28(v5, v14);
  v7 = MEMORY[0x1B5E240CC](v14);
  sub_1B1F2F2C4((uint64_t)v14);
  if (v7)
  {
    objc_opt_self();
    v8 = (void *)swift_dynamicCastObjCClass();
    if (v8)
    {
      v9 = objc_msgSend(v8, *a1);
      swift_unknownObjectRelease();
      objc_msgSend(v9, sel_setContentsTransform_, a2, a3, a4, a5);

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

uint64_t sub_1B1F6F0FC@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD *)@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v40[4];
  _QWORD *v41;

  sub_1B19F8E54(0, &qword_1ED4BAB20, (uint64_t (*)(void))sub_1B1C78FEC, (uint64_t)&type metadata for StringCodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v28 - v11;
  v33 = 0;
  swift_unknownObjectWeakInit();
  v33 = 0;
  v13 = swift_unknownObjectWeakAssign();
  v34 = 0x3E6C6C756E3CLL;
  v35 = 0xE600000000000000;
  sub_1B19FC2D0(v13, (uint64_t)v40);
  v14 = a1[3];
  v15 = a1[4];
  sub_1B19FA070(a1, v14);
  if (sub_1B2067BAC(2037, v14, v15))
  {
    sub_1B19FA070(a1, a1[3]);
    sub_1B222A138();
    if (!v3)
    {
      sub_1B19FA070(&v32, v35);
      sub_1B19FC28C();
      sub_1B2229D6C();
LABEL_9:
      sub_1B1D8EB3C((uint64_t)&v36, (uint64_t)v40);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v32);
LABEL_17:
      sub_1B1F78A28(v40, a3);
    }
  }
  else
  {
    v16 = a1[3];
    v17 = a1[4];
    sub_1B19FA070(a1, v16);
    if (sub_1B2067BAC(2029, v16, v17))
    {
      sub_1B19FA070(a1, a1[3]);
      sub_1B222A138();
      if (!v3)
      {
        sub_1B19FA070(&v32, v35);
        v20 = sub_1B2229D30();
        v22 = v21;
        v29 = 0;
        swift_unknownObjectWeakInit();
        v29 = 0;
        v23 = swift_unknownObjectWeakAssign();
        v30 = v20;
        v31 = v22;
        sub_1B19FC2D0(v23, (uint64_t)&v36);
        goto LABEL_9;
      }
    }
    else
    {
      v41 = a3;
      sub_1B19FA070(a1, a1[3]);
      sub_1B1C78FEC();
      sub_1B222A150();
      if (!v3)
      {
        v36 = 0;
        LOBYTE(v37) = 1;
        v38 = 0xD000000000000017;
        v39 = 0x80000001B23459F0;
        v18 = sub_1B2229778();
        a3 = v41;
        if (v19)
          v24 = v18;
        else
          v24 = 0;
        if (v19)
          v25 = v19;
        else
          v25 = 0xE000000000000000;
        (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
        v37 = 0;
        swift_unknownObjectWeakInit();
        v37 = 0;
        v26 = swift_unknownObjectWeakAssign();
        v38 = v24;
        v39 = v25;
        sub_1B19FC2D0(v26, (uint64_t)&v32);
        sub_1B1D8EB3C((uint64_t)&v32, (uint64_t)v40);
        goto LABEL_17;
      }
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return a2(v40);
}

uint64_t sub_1B1F6F470@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1F6F0FC(a1, (uint64_t (*)(_QWORD *))sub_1B1F2F1E4, a2);
}

uint64_t sub_1B1F6F48C()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F77344;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F7736C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC471C(0x7469736E65746E69, 0xE900000000000079, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1791524(0, (unint64_t *)&unk_1ED4B8130, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F773F4;
  v6[5] = v5;
  v6[2] = sub_1B1F7741C;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC478C(0x726F66736E617274, 0xE90000000000006DLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         2048,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5770 = v0;
  return result;
}

void sub_1B1F6F710(_QWORD *a1@<X0>, SEL *a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  void *v6;
  id v7;
  int v8;
  int v9;
  _QWORD v10[4];

  sub_1B1F78A28(a1, v10);
  v5 = MEMORY[0x1B5E240CC](v10);
  sub_1B1F2F2C4((uint64_t)v10);
  if (!v5)
    goto LABEL_5;
  objc_opt_self();
  v6 = (void *)swift_dynamicCastObjCClass();
  if (!v6)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  v7 = objc_msgSend(v6, *a2);
  swift_unknownObjectRelease();
  objc_msgSend(v7, sel_intensity);
  v9 = v8;

LABEL_6:
  *a3 = v9;
}

double sub_1B1F6F7CC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  double v4;
  double v6;
  _QWORD v7[4];

  sub_1B1F78A28(v0, v7);
  v1 = MEMORY[0x1B5E240CC](v7);
  sub_1B1F2F2C4((uint64_t)v7);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      v3 = objc_msgSend(v2, sel_physicsWorld);
      swift_unknownObjectRelease();
      objc_msgSend(v3, sel_gravity);
      v6 = v4;

      return v6;
    }
    swift_unknownObjectRelease();
  }
  return 0.0;
}

void sub_1B1F6F878(double a1)
{
  _QWORD *v1;
  uint64_t v2;
  void *v3;
  id v4;
  _QWORD v6[4];

  sub_1B1F78A28(v1, v6);
  v2 = MEMORY[0x1B5E240CC](v6);
  sub_1B1F2F2C4((uint64_t)v6);
  if (v2)
  {
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (v3)
    {
      v4 = objc_msgSend(v3, sel_physicsWorld);
      swift_unknownObjectRelease();
      objc_msgSend(v4, sel_setGravity_, a1);

    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
}

float sub_1B1F6F920()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  float v4;
  float v5;
  _QWORD v7[4];

  sub_1B1F78A28(v0, v7);
  v1 = MEMORY[0x1B5E240CC](v7);
  sub_1B1F2F2C4((uint64_t)v7);
  if (!v1)
    return 1.0;
  objc_opt_self();
  v2 = (void *)swift_dynamicCastObjCClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    return 1.0;
  }
  v3 = objc_msgSend(v2, sel_physicsWorld);
  swift_unknownObjectRelease();
  objc_msgSend(v3, sel_speed);
  v5 = v4;

  return v5;
}

uint64_t sub_1B1F6F9D4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1F6F0FC(a1, (uint64_t (*)(_QWORD *))sub_1B1F2F254, a2);
}

uint64_t sub_1B1F6F9F0()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E450;
  KeyPath = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8160, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F774C0;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F774F0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1ACB300(0x79746976617267, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F7754C;
  v6[5] = v5;
  v6[2] = sub_1B1F77574;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1ACB6DC(0x6465657073, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  result = sub_1B2228AD0();
  qword_1EEFD5778 = v0;
  return result;
}

void sub_1B1F6FC60(_QWORD *a1@<X0>, float *a2@<X8>)
{
  uint64_t v3;
  void *v4;
  id v5;
  float v6;
  float v7;
  _QWORD v8[4];

  sub_1B1F78A28(a1, v8);
  v3 = MEMORY[0x1B5E240CC](v8);
  sub_1B1F2F2C4((uint64_t)v8);
  if (!v3)
    goto LABEL_5;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
LABEL_5:
    v7 = 1.0;
    goto LABEL_6;
  }
  v5 = objc_msgSend(v4, sel_physicsWorld);
  swift_unknownObjectRelease();
  objc_msgSend(v5, sel_speed);
  v7 = v6;

LABEL_6:
  *a2 = v7;
}

uint64_t sub_1B1F6FD1C()
{
  return 0x73636973796850;
}

double sub_1B1F6FD34()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  double v3;
  double v5;
  _QWORD v6[4];

  sub_1B1F78A28(v0, v6);
  v1 = MEMORY[0x1B5E240CC](v6);
  sub_1B1F2F2C4((uint64_t)v6);
  if (v1)
  {
    objc_opt_self();
    v2 = (void *)swift_dynamicCastObjCClass();
    if (v2)
    {
      objc_msgSend(v2, sel_fogColor_linearExtendedSRGB);
      v5 = v3;
      swift_unknownObjectRelease();
      return v5;
    }
    swift_unknownObjectRelease();
  }
  return 0.0;
}

float sub_1B1F6FDC0()
{
  return sub_1B1F6FDD8((SEL *)&selRef_fogStartDistance);
}

float sub_1B1F6FDCC()
{
  return sub_1B1F6FDD8((SEL *)&selRef_fogEndDistance);
}

float sub_1B1F6FDD8(SEL *a1)
{
  _QWORD *v1;
  uint64_t v3;
  void *v4;
  float v5;
  float v6;
  _QWORD v8[4];

  sub_1B1F78A28(v1, v8);
  v3 = MEMORY[0x1B5E240CC](v8);
  sub_1B1F2F2C4((uint64_t)v8);
  if (!v3)
    return 0.0;
  objc_opt_self();
  v4 = (void *)swift_dynamicCastObjCClass();
  if (!v4)
  {
    swift_unknownObjectRelease();
    return 0.0;
  }
  objc_msgSend(v4, *a1);
  v6 = v5;
  swift_unknownObjectRelease();
  return v6;
}

uint64_t sub_1B1F6FE6C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_1B1F6F0FC(a1, (uint64_t (*)(_QWORD *))sub_1B1F2F2C4, a2);
}

uint64_t sub_1B1F6FE88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(v2, ObjectType, a2);
}

uint64_t sub_1B1F6FECC@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[4];

  swift_unknownObjectWeakInit();
  v3[1] = 0;
  swift_unknownObjectWeakAssign();
  v3[2] = 0x3E6C6C756E3CLL;
  v3[3] = 0xE600000000000000;
  return sub_1B19FC2D0((uint64_t)v3, a1);
}

uint64_t sub_1B1F6FF30()
{
  uint64_t v0;
  uint64_t KeyPath;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;

  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BAFE0, MEMORY[0x1E0DEE9B0] + 8, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E470;
  KeyPath = swift_getKeyPath();
  sub_1B1F73014(0, (unint64_t *)&qword_1ED4B8170, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  v2 = (_QWORD *)swift_allocObject();
  v2[4] = sub_1B1F775D4;
  v2[5] = KeyPath;
  v2[2] = sub_1B1F77604;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  v3 = MEMORY[0x1E0DEE9D8];
  v4 = sub_1B1AC42D0(0x726F6C6F63, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E0DEE9D8],
         0);
  swift_release();
  *(_QWORD *)(v0 + 32) = v4;
  v5 = swift_getKeyPath();
  sub_1B1A02758(0, &qword_1ED4B80F8, MEMORY[0x1E0DEB188], (uint64_t (*)(_QWORD, uint64_t))type metadata accessor for EntityGetSet);
  v6 = (_QWORD *)swift_allocObject();
  v6[4] = sub_1B1F7765C;
  v6[5] = v5;
  v6[2] = sub_1B1F77684;
  v6[3] = v5;
  v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  v7 = sub_1B1AC46AC(0x6964207472617473, 0xEE0065636E617473, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(_QWORD *)(v0 + 40) = v7;
  v8 = swift_getKeyPath();
  v9 = (_QWORD *)swift_allocObject();
  v9[4] = sub_1B1F7765C;
  v9[5] = v8;
  v9[2] = sub_1B1F77684;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  v10 = sub_1B1AC46AC(0x7473696420646E65, 0xEC00000065636E61, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(_QWORD *)(v0 + 48) = v10;
  result = sub_1B2228AD0();
  qword_1EEFD5780 = v0;
  return result;
}

uint64_t sub_1B1F70288@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v9[4];

  sub_1B1F78A28(a1, v9);
  v3 = MEMORY[0x1B5E240CC](v9);
  result = sub_1B1F2F2C4((uint64_t)v9);
  if (!v3)
    goto LABEL_5;
  objc_opt_self();
  v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5)
  {
    result = swift_unknownObjectRelease();
LABEL_5:
    v7 = 0uLL;
    goto LABEL_6;
  }
  objc_msgSend(v5, sel_fogColor_linearExtendedSRGB);
  v8 = v6;
  result = swift_unknownObjectRelease();
  v7 = v8;
LABEL_6:
  *a2 = v7;
  return result;
}

void sub_1B1F70318(__int128 *a1, _QWORD *a2)
{
  uint64_t v2;
  void *v3;
  __int128 v4;
  _QWORD v5[4];

  v4 = *a1;
  sub_1B1F78A28(a2, v5);
  v2 = MEMORY[0x1B5E240CC](v5);
  sub_1B1F2F2C4((uint64_t)v5);
  if (v2)
  {
    objc_opt_self();
    v3 = (void *)swift_dynamicCastObjCClass();
    if (!v3)
      swift_unknownObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  objc_msgSend(v3, sel_setFogColor_linearExtendedSRGB_, *(double *)&v4, v4);

}

uint64_t sub_1B1F703B0@<X0>(_QWORD *a1@<X0>, SEL *a2@<X3>, _DWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  int v8;
  int v9;
  _QWORD v10[4];

  sub_1B1F78A28(a1, v10);
  v5 = MEMORY[0x1B5E240CC](v10);
  result = sub_1B1F2F2C4((uint64_t)v10);
  if (!v5)
    goto LABEL_5;
  objc_opt_self();
  v7 = (void *)swift_dynamicCastObjCClass();
  if (!v7)
  {
    result = swift_unknownObjectRelease();
LABEL_5:
    v9 = 0;
    goto LABEL_6;
  }
  objc_msgSend(v7, *a2);
  v9 = v8;
  result = swift_unknownObjectRelease();
LABEL_6:
  *a3 = v9;
  return result;
}

void sub_1B1F7044C(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  int v6;
  uint64_t v7;
  double v8;
  void *v9;
  _QWORD v10[4];

  v6 = *a1;
  sub_1B1F78A28(a2, v10);
  v7 = MEMORY[0x1B5E240CC](v10);
  sub_1B1F2F2C4((uint64_t)v10);
  if (v7)
  {
    objc_opt_self();
    v9 = (void *)swift_dynamicCastObjCClass();
    if (!v9)
      swift_unknownObjectRelease();
  }
  else
  {
    v9 = 0;
  }
  LODWORD(v8) = v6;
  objc_msgSend(v9, *a5, v8);

}

uint64_t sub_1B1F704F0()
{
  return 6778694;
}

uint64_t sub_1B1F70500@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v6;
  _QWORD v7[3];
  uint64_t v8;
  _BYTE v9[32];
  uint64_t v10;

  swift_unknownObjectWeakInit();
  v7[1] = 0;
  swift_unknownObjectWeakAssign();
  v7[2] = 0x3E6C6C756E3CLL;
  v8 = 0xE600000000000000;
  sub_1B19FC2D0((uint64_t)v7, (uint64_t)v9);
  v10 = 0;
  sub_1B19FA070(a1, a1[3]);
  sub_1B222A138();
  if (!v2)
  {
    sub_1B19FA070(v7, v8);
    sub_1B19FC28C();
    sub_1B2229D6C();
    sub_1B1D8EB3C((uint64_t)&v6, (uint64_t)v9);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
    sub_1B1F78A6C((uint64_t)v9, a2);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B1F2E218((uint64_t)v9);
}

uint64_t sub_1B1F70634@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F70500(a1, a2);
}

void sub_1B1F70648(uint64_t a1, uint64_t a2)
{
  sub_1B1F67A90(a1, a2, (SEL *)&selRef_morpher);
}

uint64_t sub_1B1F70664@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  _QWORD v3[4];

  swift_unknownObjectWeakInit();
  v3[1] = 0;
  swift_unknownObjectWeakAssign();
  v3[2] = 0x3E6C6C756E3CLL;
  v3[3] = 0xE600000000000000;
  result = sub_1B19FC2D0((uint64_t)v3, a1);
  *(_QWORD *)(a1 + 32) = 0;
  return result;
}

void sub_1B1F706CC()
{
  qword_1EEFD5788 = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B1F706E0()
{
  uint64_t v0;
  unint64_t v1;
  id v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v17[2];
  unint64_t v18;

  if (qword_1EEF57498 != -1)
    swift_once();
  v0 = qword_1EEFD5788;
  v1 = MEMORY[0x1E0DEE9D8];
  v18 = MEMORY[0x1E0DEE9D8];
  v2 = sub_1B1F66F5C((SEL *)&selRef_morpher);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(v2, sel_targets);

    sub_1B1B9DAD4(0, &qword_1EEF61490);
    v1 = sub_1B2228AB8();

  }
  if (!(v1 >> 62))
  {
    v5 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v5)
      goto LABEL_7;
LABEL_19:
    swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
    goto LABEL_20;
  }
  swift_bridgeObjectRetain();
  v5 = sub_1B22296AC();
  swift_bridgeObjectRelease();
  if (!v5)
    goto LABEL_19;
LABEL_7:
  v6 = 0;
  do
  {
    if ((v1 & 0xC000000000000001) != 0)
      v7 = (id)MEMORY[0x1B5E21018](v6, v1);
    else
      v7 = *(id *)(v1 + 8 * v6 + 32);
    v8 = v7;
    v9 = objc_msgSend(v7, sel_name);
    if (v9)
    {
      v10 = v9;
      v11 = sub_1B222874C();
      v13 = v12;

    }
    else
    {
      v13 = 0xE800000000000000;
      v11 = 0x64656C7469746E55;
    }
    memset(v17, 0, sizeof(v17));
    sub_1B1F56418((uint64_t)v17, v11, v13, 0, 1, 0, 1, 0, 1, 1, 0, 0, 0, 0);
    swift_bridgeObjectRelease();
    sub_1B1A0DD70((uint64_t)v17);
    v14 = swift_retain();
    MEMORY[0x1B5E2064C](v14);
    if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      sub_1B2228AF4();
    ++v6;
    sub_1B2228B30();
    sub_1B2228AD0();

    swift_release();
  }
  while (v5 != v6);
  swift_bridgeObjectRelease();
  v15 = v18;
LABEL_20:
  *(_QWORD *)&v17[0] = v0;
  swift_bridgeObjectRetain();
  sub_1B19F4BEC(v15);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_1B1F70968(uint64_t a1)
{
  _QWORD *v1;
  id v3;
  id v4;
  float v5;
  void *v6;
  double v7;
  uint64_t v9;
  void *v10;
  float v11;
  _QWORD v12[4];

  if (!objc_msgSend((id)objc_opt_self(), sel_immediateMode))
  {
    sub_1B1F78A28(v1, v12);
    v9 = MEMORY[0x1B5E240CC](v12);
    sub_1B1F2F2C4((uint64_t)v12);
    if (v9)
    {
      objc_opt_self();
      v10 = (void *)swift_dynamicCastObjCClass();
      if (!v10)
        swift_unknownObjectRelease();
    }
    else
    {
      v10 = 0;
    }
    v3 = objc_msgSend(v10, sel_morpher);

    if (v3)
      goto LABEL_3;
LABEL_12:
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
    return swift_bridgeObjectRelease();
  }
  v3 = (id)v1[4];
  v4 = v3;
  if (!v3)
    goto LABEL_12;
LABEL_3:
  sub_1B1A02864(a1, (uint64_t)v12);
  if (swift_dynamicCast())
    v5 = v11;
  else
    v5 = 0.0;
  v6 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  *(float *)&v7 = v5;
  objc_msgSend(v3, sel_setWeight_forTargetNamed_, v6, v7);

  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
}

void sub_1B1F70AE0(uint64_t a1@<X8>)
{
  id v2;
  void *v3;
  void *v4;
  int v5;
  int v6;

  v2 = sub_1B1F66F5C((SEL *)&selRef_morpher);
  if (v2)
  {
    v3 = v2;
    v4 = (void *)sub_1B2228728();
    objc_msgSend(v3, sel_weightForTargetNamed_, v4);
    v6 = v5;

  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEB188];
  *(_DWORD *)a1 = v6;
}

uint64_t sub_1B1F70B74()
{
  return 0x72656870726F4DLL;
}

uint64_t sub_1B1F70B90(uint64_t a1, uint64_t a2)
{
  return sub_1B1A3BC14(a1, a2, &qword_1EEF57498);
}

_QWORD *sub_1B1F70BAC(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F58298(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1F70BC8(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  swift_unknownObjectWeakTakeInit();
  return a2;
}

_QWORD *sub_1B1F70C14(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F58134(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1B1F70C30(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  return a1;
}

uint64_t type metadata accessor for ShadableShaderModifierObserver()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for NodeVisibilityController()
{
  return &type metadata for NodeVisibilityController;
}

uint64_t _s3VFX24NodeVisibilityControllerVwxx_0()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  return swift_unknownObjectWeakDestroy();
}

uint64_t _s3VFX24NodeVisibilityControllerVwcp_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  return a1;
}

uint64_t _s3VFX24NodeVisibilityControllerVwca_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  return a1;
}

uint64_t _s3VFX24NodeVisibilityControllerVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectWeakTakeInit();
  return a1;
}

uint64_t _s3VFX24NodeVisibilityControllerVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  return a1;
}

ValueMetadata *type metadata accessor for NodeTransformController()
{
  return &type metadata for NodeTransformController;
}

ValueMetadata *type metadata accessor for VFXBridgeableReference()
{
  return &type metadata for VFXBridgeableReference;
}

unint64_t sub_1B1F70E60()
{
  unint64_t result;

  result = qword_1EEF61440;
  if (!qword_1EEF61440)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A3638, &type metadata for VFXBridgeableReference);
    atomic_store(result, (unint64_t *)&qword_1EEF61440);
  }
  return result;
}

void sub_1B1F70EA4(_OWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = (void *)sub_1B1F5BB3C();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_position);
    v6 = v4;

    v5 = v6;
  }
  else
  {
    v5 = 0uLL;
  }
  *a1 = v5;
}

void sub_1B1F70EFC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F72948(a1, a2, a3, a4, (SEL *)&selRef_setPosition_);
}

uint64_t sub_1B1F70F08(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id *v26;
  void *v27;
  id v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  id v51;
  id v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  unint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void **__dst;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;

  v2 = v1;
  v4 = a1[1];
  result = sub_1B22299E8();
  if (result >= v4)
  {
    if (v4)
      return sub_1B1F716AC(0, v4, 1, a1);
  }
  else
  {
    v93 = result;
    if (v4 >= 0)
      v6 = v4;
    else
      v6 = v4 + 1;
    if (v4 < -1)
    {
      result = sub_1B222967C();
      __break(1u);
    }
    else
    {
      v98 = v4;
      v90 = a1;
      if (v4 >= 2)
      {
        v7 = v6 >> 1;
        sub_1B1B9DAD4(0, (unint64_t *)&unk_1EEF61480);
        v8 = sub_1B2228B0C();
        *(_QWORD *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) = v7;
        v4 = v98;
        __dst = (void **)((v8 & 0xFFFFFFFFFFFFFF8) + 32);
        v108 = v8;
        goto LABEL_11;
      }
      v9 = (char *)MEMORY[0x1E0DEE9D8];
      v108 = MEMORY[0x1E0DEE9D8];
      __dst = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
      if (v4 == 1)
      {
LABEL_11:
        v10 = 0;
        v91 = *a1 + 16;
        v104 = *a1;
        v92 = *a1 - 8;
        v9 = (char *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          v12 = v10;
          v13 = v10 + 1;
          v101 = v10;
          if (v10 + 1 < v4)
          {
            v94 = v9;
            v96 = v2;
            v14 = *(void **)(v104 + 8 * v10);
            v15 = *(id *)(v104 + 8 * v13);
            v16 = v14;
            v17 = objc_msgSend(v15, sel_name);
            v18 = sub_1B222874C();
            v20 = v19;

            v21 = objc_msgSend(v16, sel_name);
            v22 = sub_1B222874C();
            v24 = v23;

            if (v18 == v22 && v20 == v24)
              v102 = 0;
            else
              v102 = sub_1B2229D24();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();

            v12 = v101;
            v13 = v101 + 2;
            if (v101 + 2 < v4)
            {
              v26 = (id *)(v91 + 8 * v101);
              do
              {
                v105 = v13;
                v27 = *(v26 - 1);
                v28 = *v26;
                v29 = v27;
                v30 = objc_msgSend(v28, sel_name);
                v31 = sub_1B222874C();
                v33 = v32;

                v34 = objc_msgSend(v29, sel_name);
                v35 = sub_1B222874C();
                v37 = v36;

                if (v31 == v35 && v33 == v37)
                {

                  swift_bridgeObjectRelease_n();
                  if ((v102 & 1) != 0)
                    goto LABEL_30;
                }
                else
                {
                  v39 = sub_1B2229D24();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if (((v102 ^ v39) & 1) != 0)
                  {
LABEL_30:
                    v4 = v98;
                    v13 = v105;
                    goto LABEL_32;
                  }
                }
                v13 = v105 + 1;
                ++v26;
              }
              while (v98 != v105 + 1);
              v4 = v98;
              v13 = v98;
LABEL_32:
              v12 = v101;
            }
            v9 = v94;
            v2 = v96;
            if (v12 < v13 && (v102 & 1) != 0)
            {
              v40 = (uint64_t *)(v92 + 8 * v13);
              v41 = v13;
              v42 = v12;
              v43 = (uint64_t *)(v104 + 8 * v12);
              do
              {
                if (v42 != --v41)
                {
                  v44 = *v43;
                  *v43 = *v40;
                  *v40 = v44;
                }
                ++v42;
                --v40;
                ++v43;
              }
              while (v42 < v41);
            }
          }
          if (v13 < v4 && v13 - v12 < v93)
          {
            v45 = v12 + v93;
            if (v12 + v93 >= v4)
              v45 = v4;
            v99 = v45;
            if (v13 != v45)
            {
              v95 = v9;
              v97 = v2;
              v46 = v92 + 8 * v13;
              do
              {
                v48 = *(void **)(v104 + 8 * v13);
                v49 = v12;
                v103 = v46;
                v106 = v13;
                while (1)
                {
                  v50 = *(void **)v46;
                  v51 = v48;
                  v52 = v50;
                  v53 = objc_msgSend(v51, sel_name);
                  v54 = sub_1B222874C();
                  v56 = v55;

                  v57 = objc_msgSend(v52, sel_name);
                  v58 = sub_1B222874C();
                  v60 = v59;

                  if (v54 == v58 && v56 == v60)
                    break;
                  v62 = sub_1B2229D24();

                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v62 & 1) == 0)
                    goto LABEL_45;
                  v63 = *(void **)v46;
                  v48 = *(void **)(v46 + 8);
                  *(_QWORD *)v46 = v48;
                  *(_QWORD *)(v46 + 8) = v63;
                  v46 -= 8;
                  ++v49;
                  v47 = v106;
                  if (v106 == v49)
                    goto LABEL_46;
                }

                swift_bridgeObjectRelease_n();
LABEL_45:
                v47 = v106;
LABEL_46:
                v13 = v47 + 1;
                v12 = v101;
                v46 = v103 + 8;
              }
              while (v13 != v99);
              v13 = v99;
              v9 = v95;
              v2 = v97;
            }
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = sub_1B216CC74(0, *((_QWORD *)v9 + 2) + 1, 1, v9);
          v65 = *((_QWORD *)v9 + 2);
          v64 = *((_QWORD *)v9 + 3);
          v11 = v65 + 1;
          v107 = v13;
          if (v65 >= v64 >> 1)
            v9 = sub_1B216CC74(v64 > 1, v65 + 1, 1, v9);
          *((_QWORD *)v9 + 2) = v11;
          v66 = v9 + 32;
          v67 = &v9[16 * v65 + 32];
          *(_QWORD *)v67 = v12;
          *((_QWORD *)v67 + 1) = v13;
          if (v65)
            break;
          v11 = 1;
LABEL_13:
          v4 = v98;
          v10 = v107;
          if (v107 >= v98)
            goto LABEL_77;
        }
        while (1)
        {
          v68 = v11 - 1;
          if (v11 >= 4)
          {
            v73 = &v66[16 * v11];
            v74 = *((_QWORD *)v73 - 7) - *((_QWORD *)v73 - 8);
            v71 = *((_QWORD *)v73 - 5) - *((_QWORD *)v73 - 6);
            v72 = v11 - 2;
            v75 = &v66[16 * v11 - 32];
            v69 = *(_QWORD *)v75;
            v70 = *((_QWORD *)v75 + 1);
            if (v71 - v69 + v70 >= v74)
            {
              v78 = v71 < *(_QWORD *)&v66[16 * v68 + 8] - *(_QWORD *)&v66[16 * v68];
              goto LABEL_71;
            }
          }
          else
          {
            if (v11 != 3)
            {
              v76 = *(_QWORD *)&v66[16 * v11 - 24] - *(_QWORD *)&v9[16 * v11];
              v77 = *(_QWORD *)&v66[16 * v68 + 8] - *(_QWORD *)&v66[16 * v68];
LABEL_68:
              if (v77 < v76)
                goto LABEL_13;
              goto LABEL_73;
            }
            v69 = *((_QWORD *)v9 + 6);
            v70 = *((_QWORD *)v9 + 7);
            v71 = *((_QWORD *)v9 + 5) - *((_QWORD *)v9 + 4);
            v72 = 1;
          }
          v76 = v70 - v69;
          v77 = *(_QWORD *)&v66[16 * v68 + 8] - *(_QWORD *)&v66[16 * v68];
          if (v76 + v77 < v71)
            goto LABEL_68;
          v78 = v71 < v77;
LABEL_71:
          if (v78)
            v68 = v72;
LABEL_73:
          v79 = &v66[16 * v68 - 16];
          v80 = *(_QWORD *)v79;
          v81 = &v66[16 * v68];
          v82 = *((_QWORD *)v81 + 1);
          sub_1B1F71818((void **)(v104 + 8 * *(_QWORD *)v79), (id *)(v104 + 8 * *(_QWORD *)v81), (id *)(v104 + 8 * v82), __dst);
          if (v2)
            goto LABEL_83;
          *(_QWORD *)v79 = v80;
          *((_QWORD *)v79 + 1) = v82;
          v83 = *((_QWORD *)v9 + 2);
          v11 = v83 - 1;
          memmove(&v66[16 * v68], v81 + 16, 16 * (v83 - 1 - v68));
          *((_QWORD *)v9 + 2) = v83 - 1;
          if (v83 <= 2)
            goto LABEL_13;
        }
      }
      v11 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_77:
      if (v11 >= 2)
      {
        v84 = *v90;
        do
        {
          v85 = *(_QWORD *)&v9[16 * v11];
          v86 = &v9[16 * v11 + 16];
          v87 = *((_QWORD *)v86 + 1);
          sub_1B1F71818((void **)(v84 + 8 * v85), (id *)(v84 + 8 * *(_QWORD *)v86), (id *)(v84 + 8 * v87), __dst);
          if (v2)
            break;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v9 = sub_1B216D510((uint64_t)v9);
          v88 = &v9[16 * v11];
          *(_QWORD *)v88 = v85;
          *((_QWORD *)v88 + 1) = v87;
          v89 = *((_QWORD *)v9 + 2);
          memmove(&v9[16 * v11 + 16], &v9[16 * v11 + 32], 16 * (v89 - v11));
          *((_QWORD *)v9 + 2) = v89 - 1;
          v11 = v89 - 1;
        }
        while (v89 > 2);
      }
LABEL_83:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v108 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      sub_1B2228AD0();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B1F716AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;

  v23 = result;
  if (a3 != a2)
  {
    v22 = *a4;
    v4 = *a4 + 8 * a3 - 8;
    do
    {
      v6 = v23;
      v7 = *(void **)(v22 + 8 * a3);
      v25 = v4;
      v26 = a3;
      while (1)
      {
        v8 = *(void **)v4;
        v9 = v7;
        v10 = v8;
        v11 = objc_msgSend(v9, sel_name);
        v12 = sub_1B222874C();
        v14 = v13;

        v15 = objc_msgSend(v10, sel_name);
        v16 = sub_1B222874C();
        v18 = v17;

        if (v12 == v16 && v14 == v18)
          break;
        v20 = sub_1B2229D24();

        swift_bridgeObjectRelease();
        result = swift_bridgeObjectRelease();
        v5 = v26;
        if ((v20 & 1) != 0)
        {
          v21 = *(void **)v4;
          v7 = *(void **)(v4 + 8);
          *(_QWORD *)v4 = v7;
          *(_QWORD *)(v4 + 8) = v21;
          v4 -= 8;
          if (v26 != ++v6)
            continue;
        }
        goto LABEL_5;
      }

      result = swift_bridgeObjectRelease_n();
      v5 = v26;
LABEL_5:
      a3 = v5 + 1;
      v4 = v25 + 8;
    }
    while (a3 != a2);
  }
  return result;
}

uint64_t sub_1B1F71818(void **__src, id *a2, id *a3, void **__dst)
{
  void **v4;
  id *v5;
  id *v6;
  id *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v27;
  id *v28;
  void **v29;
  id *v30;
  void **v31;
  id *v32;
  void *v33;
  void *v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v47;
  id *v48;
  unint64_t v49;
  uint64_t result;
  void **v51;
  id *v52;
  void **v53;
  id *v54;
  void **v55;
  id *v56;
  id *v57;
  id *v58;
  void **v59;
  void **v60;
  id *v61;

  v4 = __dst;
  v5 = a3;
  v6 = a2;
  v7 = __src;
  v8 = (char *)a2 - (char *)__src;
  v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v9 = (char *)a2 - (char *)__src;
  v10 = v9 >> 3;
  v11 = (char *)a3 - (char *)a2;
  v12 = (char *)a3 - (char *)a2 + 7;
  if ((char *)a3 - (char *)a2 >= 0)
    v12 = (char *)a3 - (char *)a2;
  v13 = v12 >> 3;
  v61 = __src;
  v60 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 < -7)
      goto LABEL_53;
    if (__dst != a2 || &a2[v13] <= __dst)
      memmove(__dst, a2, 8 * v13);
    v51 = v4;
    v31 = &v4[v13];
    v59 = v31;
    v61 = v6;
    if (v7 >= v6 || v11 < 8)
    {
LABEL_52:
      sub_1B216D018(&v61, &v60, &v59);
      return 1;
    }
    v32 = v6;
    v56 = v7;
    while (1)
    {
      v52 = v31;
      v54 = v6;
      v58 = v5;
      v34 = *--v31;
      v33 = v34;
      v35 = *--v32;
      v36 = v33;
      v37 = v35;
      v38 = objc_msgSend(v36, sel_name);
      v39 = sub_1B222874C();
      v41 = v40;

      v42 = objc_msgSend(v37, sel_name);
      v43 = sub_1B222874C();
      v45 = v44;

      if (v39 == v43 && v41 == v45)
        break;
      v47 = sub_1B2229D24();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v48 = v58;
      v5 = v58 - 1;
      if ((v47 & 1) == 0)
        goto LABEL_46;
      v49 = (unint64_t)v56;
      v31 = v52;
      if (v58 != v54 || v5 >= v54)
        *v5 = *v32;
      v61 = v32;
LABEL_50:
      if ((unint64_t)v32 > v49)
      {
        v6 = v32;
        if (v31 > v51)
          continue;
      }
      goto LABEL_52;
    }

    swift_bridgeObjectRelease_n();
    v48 = v58;
    v5 = v58 - 1;
LABEL_46:
    v32 = v54;
    v49 = (unint64_t)v56;
    v59 = v31;
    if (v48 < v52 || v5 >= v52 || v48 != v52)
      *v5 = *v31;
    goto LABEL_50;
  }
  if (v8 >= -7)
  {
    if (__dst != __src || &__src[v10] <= __dst)
      memmove(__dst, __src, 8 * v10);
    v53 = &v4[v10];
    v59 = v53;
    if (v6 < v5 && v8 >= 8)
    {
      v57 = v5;
      while (1)
      {
        v55 = v7;
        v14 = v6;
        v15 = *v4;
        v16 = *v6;
        v17 = v15;
        v18 = objc_msgSend(v16, sel_name);
        v19 = sub_1B222874C();
        v21 = v20;

        v22 = objc_msgSend(v17, sel_name);
        v23 = sub_1B222874C();
        v25 = v24;

        if (v19 == v23 && v21 == v25)
          break;
        v27 = sub_1B2229D24();

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v27 & 1) == 0)
          goto LABEL_23;
        v28 = v14 + 1;
        v29 = v55;
        v30 = v57;
        if (v55 < v14 || v55 >= v28 || v55 != v14)
          *v55 = *v14;
LABEL_26:
        v7 = v29 + 1;
        if (v4 < v53)
        {
          v6 = v28;
          if (v28 < v30)
            continue;
        }
        v61 = v7;
        goto LABEL_52;
      }

      swift_bridgeObjectRelease_n();
LABEL_23:
      v29 = v55;
      v30 = v57;
      if (v55 != v4)
        *v55 = *v4;
      v60 = ++v4;
      v28 = v14;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
LABEL_53:
  result = sub_1B2229700();
  __break(1u);
  return result;
}

uint64_t sub_1B1F71C2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a3);
}

uint64_t sub_1B1F71C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73454);
}

uint64_t sub_1B1F71C54@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, a3);
}

uint64_t sub_1B1F71C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F734A4);
}

uint64_t sub_1B1F71C74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a3);
}

uint64_t sub_1B1F71C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F734C0);
}

uint64_t sub_1B1F71C9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, a3);
}

uint64_t sub_1B1F71CB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F734DC);
}

uint64_t sub_1B1F71CBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a3);
}

uint64_t sub_1B1F71CD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F734F8);
}

uint64_t sub_1B1F71CE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83138, a3);
}

uint64_t sub_1B1F71D00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73514);
}

uint64_t sub_1B1F71D0C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB16D8(a1, a2, (uint64_t)&type metadata for CameraController, a3);
}

uint64_t sub_1B1F71D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB1758(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F739D0);
}

uint64_t sub_1B1F71D2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for CameraController, (uint64_t)&off_1E63864C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a3);
}

uint64_t sub_1B1F71D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0FDC(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F739EC);
}

uint64_t sub_1B1F71D54@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraController, (uint64_t)&off_1E63864C8, a3);
}

uint64_t sub_1B1F71D68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73A08);
}

uint64_t sub_1B1F71D74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraController, (uint64_t)&off_1E63864C8, a3);
}

uint64_t sub_1B1F71D88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73A24);
}

uint64_t sub_1B1F71D94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for MaterialController, (uint64_t)&off_1E63921F8, a3);
}

uint64_t sub_1B1F71DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F77140);
}

uint64_t sub_1B1F71DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for MaterialController, (uint64_t)&off_1E63921F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a3);
}

uint64_t sub_1B1F71DD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7715C);
}

uint64_t sub_1B1F71DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for WorldFogController, (uint64_t)&off_1E6396DA8, a3);
}

uint64_t sub_1B1F71DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F776DC);
}

uint64_t sub_1B1F71DFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for WorldFogController, (uint64_t)&off_1E6396DA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a3);
}

uint64_t sub_1B1F71E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7771C);
}

uint64_t sub_1B1F71E24@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB16D8(a1, a2, (uint64_t)&type metadata for WorldIBLController, a3);
}

uint64_t sub_1B1F71E38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB1758(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7743C);
}

uint64_t sub_1B1F71E44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for WorldIBLController, (uint64_t)&off_1E6396F88, a3);
}

uint64_t sub_1B1F71E58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F77458);
}

uint64_t sub_1B1F71E64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E4C, a3);
}

uint64_t sub_1B1F71E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F768B8);
}

uint64_t sub_1B1F71E8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85524, a3);
}

uint64_t sub_1B1F71EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F768D4);
}

uint64_t sub_1B1F71EB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85530, a3);
}

uint64_t sub_1B1F71ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F768F0);
}

uint64_t sub_1B1F71EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a3);
}

uint64_t sub_1B1F71EF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7690C);
}

uint64_t sub_1B1F71F04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8553C, a3);
}

uint64_t sub_1B1F71F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F76928);
}

uint64_t sub_1B1F71F2C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, a3);
}

uint64_t sub_1B1F71F40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F76944);
}

uint64_t sub_1B1F71F4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, a3);
}

uint64_t sub_1B1F71F60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F76960);
}

uint64_t sub_1B1F71F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85548, a3);
}

uint64_t sub_1B1F71F88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7697C);
}

uint64_t sub_1B1F71F94@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a3);
}

uint64_t sub_1B1F71FB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F76998);
}

uint64_t sub_1B1F71FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, a3);
}

uint64_t sub_1B1F71FD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7607C);
}

uint64_t sub_1B1F71FDC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, a3);
}

uint64_t sub_1B1F71FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F76098);
}

uint64_t sub_1B1F71FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a3);
}

uint64_t sub_1B1F72018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F760B4);
}

uint64_t sub_1B1F72024@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a3);
}

uint64_t sub_1B1F72040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F760D0);
}

uint64_t sub_1B1F7204C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for WorldPhysicsController, (uint64_t)&off_1E63A9F08, a3);
}

uint64_t sub_1B1F72060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F77594);
}

uint64_t sub_1B1F7206C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for WorldPhysicsController, (uint64_t)&off_1E63A9F08, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a3);
}

uint64_t sub_1B1F72088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F775B0);
}

uint64_t sub_1B1F72094@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB16D8(a1, a2, (uint64_t)&type metadata for NodeTransformController, a3);
}

uint64_t sub_1B1F720A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB1758(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F72BE8);
}

uint64_t sub_1B1F720B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for NodeTransformController, (uint64_t)&off_1E63AAF00, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81660, a3);
}

uint64_t sub_1B1F720D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  if (result != 0xFFFFFFFFLL)
  {
    v1 = swift_retain();
    MEMORY[0x1E0C80A78](v1, v2);
    sub_1B1D198D0(0, (void (*)(_BYTE *))sub_1B1F72C04);
    return swift_release();
  }
  return result;
}

uint64_t sub_1B1F7217C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for NodeTransformController, (uint64_t)&off_1E63AAF00, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a3);
}

uint64_t sub_1B1F72198@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for NodeTransformController, (uint64_t)&off_1E63AAF00, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a2);
}

uint64_t sub_1B1F721C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F72C20);
}

uint64_t sub_1B1F721D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F72C20);
}

uint64_t sub_1B1F721F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD7D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a3);
}

uint64_t sub_1B1F72210(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F72E78);
}

uint64_t sub_1B1F7221C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD7D8, a3);
}

uint64_t sub_1B1F72230(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F72E94);
}

uint64_t sub_1B1F7223C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD7D8, a3);
}

uint64_t sub_1B1F72250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F72EB0);
}

uint64_t sub_1B1F7225C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for ParametricModelController, (uint64_t)&off_1E63AFAC8, a3);
}

uint64_t sub_1B1F72270(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F75998);
}

uint64_t sub_1B1F7227C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for ParametricModelController, (uint64_t)&off_1E63AFAC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A860D4, a3);
}

uint64_t sub_1B1F72298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F759B4);
}

uint64_t sub_1B1F722A4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB16D8(a1, a2, (uint64_t)&type metadata for WorldBackgroundController, a3);
}

uint64_t sub_1B1F722B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB1758(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F772B8);
}

uint64_t sub_1B1F722C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for WorldBackgroundController, (uint64_t)&off_1E63B12C0, a3);
}

uint64_t sub_1B1F722D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F772D4);
}

uint64_t sub_1B1F722E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectSSAOController, (uint64_t)&off_1E63B1528, a3);
}

uint64_t sub_1B1F722F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F75570);
}

uint64_t sub_1B1F72304@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectSSAOController, (uint64_t)&off_1E63B1528, a3);
}

uint64_t sub_1B1F72318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7558C);
}

uint64_t sub_1B1F72324@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a3);
}

uint64_t sub_1B1F72340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73E14);
}

uint64_t sub_1B1F7234C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a3);
}

uint64_t sub_1B1F72368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73E30);
}

uint64_t sub_1B1F72374@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, a3);
}

uint64_t sub_1B1F72388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73E4C);
}

uint64_t sub_1B1F72394@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, a3);
}

uint64_t sub_1B1F723A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F73E68);
}

uint64_t sub_1B1F723B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectGrainController, (uint64_t)&off_1E63B2808, a3);
}

uint64_t sub_1B1F723C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74678);
}

uint64_t sub_1B1F723D4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectGrainController, (uint64_t)&off_1E63B2808, a3);
}

uint64_t sub_1B1F723E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74694);
}

uint64_t sub_1B1F723F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectExposureController, (uint64_t)&off_1E63B5290, a3);
}

uint64_t sub_1B1F72408(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74310);
}

uint64_t sub_1B1F72414@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectExposureController, (uint64_t)&off_1E63B5290, a3);
}

uint64_t sub_1B1F72428(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7432C);
}

uint64_t sub_1B1F72434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectLensBlurController, (uint64_t)&off_1E63B5478, a3);
}

uint64_t sub_1B1F72448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7447C);
}

uint64_t sub_1B1F72454@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectLensBlurController, (uint64_t)&off_1E63B5478, a3);
}

uint64_t sub_1B1F72468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74498);
}

uint64_t sub_1B1F72474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectMotionBlurController, (uint64_t)&off_1E63B66B0, a3);
}

uint64_t sub_1B1F72488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F747E4);
}

uint64_t sub_1B1F72494@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectMotionBlurController, (uint64_t)&off_1E63B66B0, a3);
}

uint64_t sub_1B1F724A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74800);
}

uint64_t sub_1B1F724B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectToneMappingController, (uint64_t)&off_1E63B7168, a3);
}

uint64_t sub_1B1F724C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74188);
}

uint64_t sub_1B1F724D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for CameraEffectToneMappingController, (uint64_t)&off_1E63B7168, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A86770, a3);
}

uint64_t sub_1B1F724F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F741A4);
}

uint64_t sub_1B1F724FC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectToneMappingController, (uint64_t)&off_1E63B7168, a3);
}

uint64_t sub_1B1F72510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F741C0);
}

uint64_t sub_1B1F7251C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, (uint64_t)&off_1E63B75C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a3);
}

uint64_t sub_1B1F72538(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0D2C(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74A50);
}

uint64_t sub_1B1F72544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, (uint64_t)&off_1E63B75C8, a3);
}

uint64_t sub_1B1F72558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74A6C);
}

uint64_t sub_1B1F72564@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, (uint64_t)&off_1E63B75C8, a3);
}

uint64_t sub_1B1F72578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74A88);
}

uint64_t sub_1B1F72584@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, (uint64_t)&off_1E63B7968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a3);
}

uint64_t sub_1B1F725A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0FDC(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F7539C);
}

uint64_t sub_1B1F725AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, (uint64_t)&off_1E63B7968, a3);
}

uint64_t sub_1B1F725C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F753DC);
}

uint64_t sub_1B1F725CC@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, (uint64_t)&off_1E63B7968, a3);
}

uint64_t sub_1B1F725E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F753F8);
}

uint64_t sub_1B1F725EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB11E8(a1, a2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a3);
}

uint64_t sub_1B1F72608(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB2238(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74FE0);
}

uint64_t sub_1B1F72614@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1AB0CA4(a1, a2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a3);
}

uint64_t sub_1B1F72630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0FDC(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F74FFC);
}

uint64_t sub_1B1F7263C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  return sub_1B1F72650(a1, a2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, a3);
}

uint64_t sub_1B1F72650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v10;
  uint64_t result;

  swift_retain();
  v10 = sub_1B1A80F68(a1, a3, a4, a2);
  result = swift_release();
  *(_DWORD *)a5 = v10;
  *(_BYTE *)(a5 + 4) = BYTE4(v10) & 1;
  return result;
}

uint64_t sub_1B1F726C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0DD8(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F75018);
}

uint64_t sub_1B1F726D4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, _BYTE *a3@<X8>)
{
  return sub_1B1F726E8(a1, a2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, a3);
}

uint64_t sub_1B1F726E8@<X0>(unint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  swift_retain();
  LOBYTE(a4) = sub_1B1A81084(a1, a3, a4, a2);
  result = swift_release();
  *a5 = a4;
  return result;
}

uint64_t sub_1B1F72758(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B1AB0E84(a1, a2, a3, a4, (void (*)(_BYTE *))sub_1B1F75034);
}

uint64_t sub_1B1F72764@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t result;
  int v5;
  _BYTE v6[32];
  _QWORD v7[4];
  int v8;

  (*(void (**)(_QWORD *__return_ptr))(a1 + 32))(v7);
  v3 = MEMORY[0x1E0DEE9B8] + 8;
  sub_1B1A18378((uint64_t)v7, (uint64_t)v6, (unint64_t *)&qword_1ED4BB150, MEMORY[0x1E0DEE9B8] + 8);
  sub_1B1A02758(0, (unint64_t *)&qword_1ED4BB150, v3, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEB940]);
  result = swift_dynamicCast();
  v5 = v8;
  if (!(_DWORD)result)
    v5 = 0;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = result ^ 1;
  return result;
}

void sub_1B1F72810(__int128 *a1@<X8>)
{
  void *v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = (void *)sub_1B1F5BB3C();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_orientation);
    v6 = v4;

    v5 = v6;
  }
  else
  {
    v5 = xmmword_1B2244E20;
  }
  *a1 = v5;
}

void sub_1B1F7286C(__int128 *a1)
{
  id v1;
  __int128 v2;

  v2 = *a1;
  v1 = (id)sub_1B1F5BB3C();
  objc_msgSend(v1, sel_setOrientation_, *(double *)&v2);

}

uint64_t sub_1B1F728B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for NodeTransformController, (uint64_t)&off_1E63AAF00, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A81660, a2);
}

void sub_1B1F728E4(_OWORD *a1@<X8>)
{
  void *v2;
  void *v3;
  __int128 v4;
  __int128 v10;

  v2 = (void *)sub_1B1F5BB3C();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_scale);
    v10 = v4;

    _Q0 = v10;
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
  }
  *a1 = _Q0;
}

void sub_1B1F7293C(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F72948(a1, a2, a3, a4, (SEL *)&selRef_setScale_);
}

void sub_1B1F72948(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  id v6;
  __int128 v7;

  v7 = *a1;
  v6 = (id)sub_1B1F5BB3C();
  objc_msgSend(v6, *a5, *(double *)&v7);

}

void sub_1B1F72990(__int128 *a1@<X8>)
{
  void *v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = (void *)sub_1B1F5BB3C();
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_transform);
    v15 = v4;
    v13 = v6;
    v14 = v5;
    v12 = v7;

    v8 = v15;
    v9 = v13;
    v10 = v14;
    v11 = v12;
  }
  else
  {
    v11 = xmmword_1B2244E20;
    v9 = xmmword_1B2244D90;
    v10 = xmmword_1B2244DD0;
    v8 = xmmword_1B2244DB0;
  }
  *a1 = v8;
  a1[1] = v10;
  a1[2] = v9;
  a1[3] = v11;
}

void sub_1B1F72A18(__int128 *a1)
{
  id v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v5 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  v2 = *a1;
  v1 = (id)sub_1B1F5BB3C();
  objc_msgSend(v1, sel_setTransform_, *(double *)&v2, *(double *)&v3, *(double *)&v4, *(double *)&v5);

}

uint64_t sub_1B1F72A7C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB16D8(a1, v2, (uint64_t)&type metadata for NodeTransformController, a2);
}

uint64_t sub_1B1F72AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1758(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F72BE8);
}

void sub_1B1F72AC4(uint64_t a1@<X0>, __int128 *a2@<X8>)
{
  void *v3;
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v3 = (void *)MEMORY[0x1B5E240CC](a1 + 32);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_worldTransform);
    v16 = v5;
    v14 = v7;
    v15 = v6;
    v13 = v8;

    v9 = v16;
    v10 = v14;
    v11 = v15;
    v12 = v13;
  }
  else
  {
    v12 = xmmword_1B2244E20;
    v10 = xmmword_1B2244D90;
    v11 = xmmword_1B2244DD0;
    v9 = xmmword_1B2244DB0;
  }
  *a2 = v9;
  a2[1] = v11;
  a2[2] = v10;
  a2[3] = v12;
}

void sub_1B1F72B50(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  void *v3;
  void *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;

  v3 = (void *)MEMORY[0x1B5E240CC](a1 + 32);
  if (v3)
  {
    v4 = v3;
    objc_msgSend(v3, sel_eulerAngles);
    v7 = v5;

    v6 = v7;
  }
  else
  {
    v6 = 0uLL;
  }
  *a2 = v6;
}

void sub_1B1F72BA8(__int128 *a1, uint64_t a2)
{
  id v2;
  __int128 v3;

  v3 = *a1;
  v2 = (id)MEMORY[0x1B5E240CC](a2 + 32);
  objc_msgSend(v2, sel_setEulerAngles_, *(double *)&v3);

}

uint64_t sub_1B1F72BE8(uint64_t a1)
{
  return sub_1B1AE0B48(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128, __n128, __n128, __n128))sub_1B1A7A424);
}

uint64_t sub_1B1F72C04(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7A5E4);
}

uint64_t sub_1B1F72C20(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7A780);
}

void sub_1B1F72C3C(char *a1@<X8>)
{
  sub_1B1F5CA50((SEL *)&selRef_isHidden, a1);
}

void sub_1B1F72C58(char *a1)
{
  sub_1B1F5BE38(*a1, (SEL *)&selRef_setHidden_);
}

uint64_t sub_1B1F72C88@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD7D8, a2);
}

uint64_t sub_1B1F72CB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F72EB0);
}

void sub_1B1F72CD4(int *a1)
{
  int v1;
  double v2;
  id v3;

  v1 = *a1;
  v3 = (id)sub_1B1F5BB3C();
  LODWORD(v2) = v1;
  objc_msgSend(v3, sel_setOpacity_, v2);

}

uint64_t sub_1B1F72D20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD7D8, a2);
}

uint64_t sub_1B1F72D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F72E94);
}

void sub_1B1F72D6C(uint64_t *a1)
{
  uint64_t v1;
  id v2;

  v1 = *a1;
  v2 = (id)sub_1B1F5BB3C();
  objc_msgSend(v2, sel_setRenderingOrder_, v1);

}

uint64_t sub_1B1F72DB0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F5C468();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B1F72DDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for NodeVisibilityController, (uint64_t)&off_1E63AD7D8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1F72E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F72E78);
}

void sub_1B1F72E2C(char *a1@<X8>)
{
  sub_1B1F5CA50((SEL *)&selRef_castsShadow, a1);
}

void sub_1B1F72E48(char *a1)
{
  sub_1B1F5BE38(*a1, (SEL *)&selRef_setCastsShadow_);
}

uint64_t sub_1B1F72E78(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7A8FC);
}

uint64_t sub_1B1F72E94(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7A93C);
}

uint64_t sub_1B1F72EB0(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7A970);
}

void sub_1B1F72ED0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76758(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setType_);
}

uint64_t sub_1B1F72EE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83138, a2);
}

uint64_t sub_1B1F72F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73514);
}

float sub_1B1F72F34@<S0>(_OWORD *a1@<X8>)
{
  id v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  float result;
  __int128 v7;

  v2 = sub_1B1F66F5C((SEL *)&selRef_light);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_extendedLinearSRGBColor);
    v7 = v4;

    v5 = v7;
  }
  else
  {
    *(_QWORD *)&v5 = 0;
    DWORD2(v5) = 0;
  }
  result = 1.0;
  HIDWORD(v5) = 1.0;
  *a1 = v5;
  return result;
}

void sub_1B1F72FA0(__n128 *a1)
{
  sub_1B1F5CC20(*a1);
}

uint64_t sub_1B1F72FC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a2);
}

uint64_t sub_1B1F72FF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F734F8);
}

void sub_1B1F73014(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t Set;
  uint64_t v10;

  if (!*a2)
  {
    sub_1B19F8E54(255, a3, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], a4);
    Set = type metadata accessor for EntityGetSet(a1, v6, v7, v8);
    if (!v10)
      atomic_store(Set, a2);
  }
}

void sub_1B1F73080(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setIntensity_);
}

uint64_t sub_1B1F73094@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, a2);
}

uint64_t sub_1B1F730BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F734DC);
}

void sub_1B1F730DC(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_light, (SEL *)&selRef_temperature, a1);
}

void sub_1B1F73100(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setTemperature_);
}

void sub_1B1F73114(_OWORD *a1@<X8>)
{
  sub_1B1F7665C((SEL *)&selRef_light, (SEL *)&selRef_areaExtents, a1);
}

void sub_1B1F73128(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F766D4(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setAreaExtents_);
}

uint64_t sub_1B1F73140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a2);
}

uint64_t sub_1B1F73170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F734C0);
}

void sub_1B1F73190(unsigned __int8 *a1@<X8>)
{
  sub_1B1F69CE8((SEL *)&selRef_light, (SEL *)&selRef_drawsArea, a1);
}

void sub_1B1F731B4(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F762E0(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setDrawsArea_);
}

uint64_t sub_1B1F731C8@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, a2);
}

uint64_t sub_1B1F731F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F734A4);
}

void sub_1B1F73210(unsigned __int8 *a1@<X8>)
{
  sub_1B1F69CE8((SEL *)&selRef_light, (SEL *)&selRef_doubleSided, a1);
}

void sub_1B1F73234(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F762E0(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setDoubleSided_);
}

void sub_1B1F73248(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_light, (SEL *)&selRef_spotInnerAngle, a1);
}

void sub_1B1F7326C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setSpotInnerAngle_);
}

void sub_1B1F73284(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_light, (SEL *)&selRef_spotOuterAngle, a1);
}

void sub_1B1F732A8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setSpotOuterAngle_);
}

void sub_1B1F732BC(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_light, (SEL *)&selRef_attenuationDistance, a1);
}

void sub_1B1F732E0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setAttenuationDistance_);
}

void sub_1B1F732F8(unsigned __int8 *a1@<X8>)
{
  sub_1B1F69CE8((SEL *)&selRef_light, (SEL *)&selRef_castsShadow, a1);
}

void sub_1B1F7331C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F762E0(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setCastsShadow_);
}

uint64_t sub_1B1F73330@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F5E208();
  *a1 = result & 1;
  return result;
}

void sub_1B1F7335C(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_light, (SEL *)&selRef_shadowIntensity, a1);
}

void sub_1B1F73380(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setShadowIntensity_);
}

void sub_1B1F73394(_QWORD *a1@<X8>)
{
  sub_1B1F69F04((SEL *)&selRef_light, (SEL *)&selRef_shadowSampleCount, a1);
}

void sub_1B1F733B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76758(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setShadowSampleCount_);
}

uint64_t sub_1B1F733CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for LightController, (uint64_t)&off_1E6384140, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1F733FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73454);
}

void sub_1B1F7341C(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_light, (SEL *)&selRef_shadowBias, a1);
}

void sub_1B1F73440(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_light, (SEL *)&selRef_setShadowBias_);
}

uint64_t sub_1B1F73454(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A77400);
}

uint64_t sub_1B1F73470(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LightController(a2, a1, &type metadata for LightController);
  return a2;
}

uint64_t sub_1B1F734A4(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A77440);
}

uint64_t sub_1B1F734C0(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A77480);
}

uint64_t sub_1B1F734DC(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A775FC);
}

uint64_t sub_1B1F734F8(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A77630);
}

uint64_t sub_1B1F73514(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A777AC);
}

void sub_1B1F73530(float *a1@<X8>)
{
  sub_1B1F5F7B4((SEL *)&selRef_orthographicScale, a1);
}

void sub_1B1F7354C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setOrthographicScale_);
}

void sub_1B1F73568(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_usesOrthographicProjection, a1);
}

uint64_t sub_1B1F73594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraController, (uint64_t)&off_1E63864C8, a2);
}

uint64_t sub_1B1F735BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73A24);
}

void sub_1B1F735DC(float *a1@<X8>)
{
  sub_1B1F5F7B4((SEL *)&selRef_focalLength, a1);
}

void sub_1B1F735F8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setFocalLength_);
}

uint64_t sub_1B1F73614@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F5F6D0();
  *a1 = result & 1;
  return result;
}

void sub_1B1F73640(float *a1@<X8>)
{
  sub_1B1F5F7B4((SEL *)&selRef_fieldOfView, a1);
}

void sub_1B1F7365C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setFieldOfView_);
}

void sub_1B1F73678(float *a1@<X8>)
{
  sub_1B1F5F7B4((SEL *)&selRef_sensorHeight, a1);
}

void sub_1B1F73694(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setSensorHeight_);
}

void sub_1B1F736B0(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_focusDistance, a1);
}

void sub_1B1F736DC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setFocusDistance_);
}

void sub_1B1F736F8(float *a1@<X8>)
{
  sub_1B1F5F7B4((SEL *)&selRef_zNear, a1);
}

void sub_1B1F73714(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setZNear_);
}

void sub_1B1F73730(float *a1@<X8>)
{
  sub_1B1F5F7B4((SEL *)&selRef_zFar, a1);
}

void sub_1B1F7374C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setZFar_);
}

void sub_1B1F73768(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_wantsHDR, a1);
}

void sub_1B1F73794(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7534C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setWantsHDR_);
}

uint64_t sub_1B1F737B0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraController, (uint64_t)&off_1E63864C8, a2);
}

uint64_t sub_1B1F737D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73A08);
}

void sub_1B1F737F8(_QWORD *a1@<X8>)
{
  sub_1B1F751A0((uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_filmOffset, a1);
}

void sub_1B1F73814(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7521C(a1, a2, a3, a4, (uint64_t)&selRef_camera, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setFilmOffset_);
}

uint64_t sub_1B1F73830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for CameraController, (uint64_t)&off_1E63864C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1F73860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F739EC);
}

void sub_1B1F73880(_OWORD *a1@<X8>)
{
  id v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = sub_1B1F66F5C((SEL *)&selRef_camera);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_projectionTransform);
    v15 = v4;
    v13 = v6;
    v14 = v5;
    v12 = v7;

    v9 = v12;
    v8 = v13;
    v10 = v14;
    v11 = v15;
  }
  else
  {
    v11 = 0uLL;
    v10 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
  }
  *a1 = v11;
  a1[1] = v10;
  a1[2] = v8;
  a1[3] = v9;
}

void sub_1B1F73904(__int128 *a1)
{
  id v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;

  v5 = a1[3];
  v3 = a1[1];
  v4 = a1[2];
  v2 = *a1;
  v1 = sub_1B1F66F5C((SEL *)&selRef_camera);
  objc_msgSend(v1, sel_setProjectionTransform_, *(double *)&v2, *(double *)&v3, *(double *)&v4, *(double *)&v5);

}

uint64_t sub_1B1F73970@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB16D8(a1, v2, (uint64_t)&type metadata for CameraController, a2);
}

uint64_t sub_1B1F73998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1758(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F739D0);
}

uint64_t sub_1B1F739D0(uint64_t a1)
{
  return sub_1B1AE0B48(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128, __n128, __n128, __n128))sub_1B1A777EC);
}

uint64_t sub_1B1F739EC(uint64_t a1)
{
  return sub_1B1F753B8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, double))sub_1B1A779AC);
}

uint64_t sub_1B1F73A08(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A779E0);
}

uint64_t sub_1B1F73A24(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A77A20);
}

void sub_1B1F73A40(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F73A6C(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_bloom);
}

uint64_t sub_1B1F73A9C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, a2);
}

uint64_t sub_1B1F73AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73E68);
}

void sub_1B1F73AE4(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_intensity, a1);
}

void sub_1B1F73B10(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setIntensity_);
}

uint64_t sub_1B1F73B2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, a2);
}

uint64_t sub_1B1F73B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73E4C);
}

void sub_1B1F73B74(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_threshold, a1);
}

void sub_1B1F73BA0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setThreshold_);
}

void sub_1B1F73BBC(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_thresholdSmoothness, a1);
}

void sub_1B1F73BE8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setThresholdSmoothness_);
}

void sub_1B1F73C04(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_useHighQuality, a1);
}

void sub_1B1F73C30(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7534C(a1, a2, a3, a4, (uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setUseHighQuality_);
}

void sub_1B1F73C4C(_OWORD *a1@<X8>)
{
  id v2;
  void *v3;
  __int128 v4;
  __int128 v10;

  v2 = sub_1B1F6082C((SEL *)&selRef_bloom);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_colorFilter);
    v10 = v4;

    _Q0 = v10;
  }
  else
  {
    __asm { FMOV            V0.4S, #1.0 }
  }
  *a1 = _Q0;
}

void sub_1B1F73CB0(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75DA0(a1, a2, a3, a4, (uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setColorFilter_);
}

uint64_t sub_1B1F73CCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a2);
}

uint64_t sub_1B1F73CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73E30);
}

void sub_1B1F73D1C(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_contrast, a1);
}

void sub_1B1F73D48(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setContrast_);
}

void sub_1B1F73D64(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_saturation, a1);
}

void sub_1B1F73D90(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_bloom, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setSaturation_);
}

void sub_1B1F73DB0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F74A00(a1, a2, a3, a4, (SEL *)&selRef_bloom, (SEL *)&selRef_setIterationCount_);
}

uint64_t sub_1B1F73DC4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for CameraEffectBloomController, (uint64_t)&off_1E63B2620, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1F73DF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F73E14);
}

uint64_t sub_1B1F73E14(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B110);
}

uint64_t sub_1B1F73E30(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7B150);
}

uint64_t sub_1B1F73E4C(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7B2CC);
}

uint64_t sub_1B1F73E68(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B300);
}

void sub_1B1F73E84(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F73EB0(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_toneMapping);
}

uint64_t sub_1B1F73EE0@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectToneMappingController, (uint64_t)&off_1E63B7168, a2);
}

uint64_t sub_1B1F73F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F741C0);
}

void sub_1B1F73F2C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F74A00(a1, a2, a3, a4, (SEL *)&selRef_toneMapping, (SEL *)&selRef_setMode_);
}

uint64_t sub_1B1F73F40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for CameraEffectToneMappingController, (uint64_t)&off_1E63B7168, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A86770, a2);
}

uint64_t sub_1B1F73F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F741A4);
}

void sub_1B1F73F90(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_toeStrength, a1);
}

void sub_1B1F73FBC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setToeStrength_);
}

uint64_t sub_1B1F73FD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectToneMappingController, (uint64_t)&off_1E63B7168, a2);
}

uint64_t sub_1B1F74000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74188);
}

void sub_1B1F74020(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_toeLength, a1);
}

void sub_1B1F7404C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setToeLength_);
}

void sub_1B1F74068(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_shoulderStrength, a1);
}

void sub_1B1F74094(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setShoulderStrength_);
}

void sub_1B1F740B0(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_shoulderLength, a1);
}

void sub_1B1F740DC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setShoulderLength_);
}

void sub_1B1F740F8(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_shoulderAngle, a1);
}

void sub_1B1F74124(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setShoulderAngle_);
}

void sub_1B1F74140(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_gamma, a1);
}

void sub_1B1F7416C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_toneMapping, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setGamma_);
}

uint64_t sub_1B1F74188(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7B984);
}

uint64_t sub_1B1F741A4(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B9B8);
}

uint64_t sub_1B1F741C0(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B9F8);
}

void sub_1B1F741DC(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_exposure, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F74208(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_exposure);
}

uint64_t sub_1B1F74238@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectExposureController, (uint64_t)&off_1E63B5290, a2);
}

uint64_t sub_1B1F74260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7432C);
}

void sub_1B1F74280(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_exposure, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_value, a1);
}

void sub_1B1F742AC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_exposure, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setValue_);
}

uint64_t sub_1B1F742C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectExposureController, (uint64_t)&off_1E63B5290, a2);
}

uint64_t sub_1B1F742F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74310);
}

uint64_t sub_1B1F74310(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7B3B4);
}

uint64_t sub_1B1F7432C(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B3E8);
}

void sub_1B1F74348(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_lensBlur, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F74374(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_lensBlur);
}

uint64_t sub_1B1F743A4@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectLensBlurController, (uint64_t)&off_1E63B5478, a2);
}

uint64_t sub_1B1F743CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74498);
}

void sub_1B1F743EC(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_lensBlur, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_radius, a1);
}

void sub_1B1F74418(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_lensBlur, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setRadius_);
}

uint64_t sub_1B1F74434@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectLensBlurController, (uint64_t)&off_1E63B5478, a2);
}

uint64_t sub_1B1F7445C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7447C);
}

uint64_t sub_1B1F7447C(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7B428);
}

uint64_t sub_1B1F74498(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B45C);
}

void sub_1B1F744B4(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_grain, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F744E0(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_grain);
}

uint64_t sub_1B1F74510@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectGrainController, (uint64_t)&off_1E63B2808, a2);
}

uint64_t sub_1B1F74538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74694);
}

void sub_1B1F74558(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_grain, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_intensity, a1);
}

void sub_1B1F74584(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_grain, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setIntensity_);
}

uint64_t sub_1B1F745A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectGrainController, (uint64_t)&off_1E63B2808, a2);
}

uint64_t sub_1B1F745C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74678);
}

void sub_1B1F745E8(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_grain, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_scale, a1);
}

void sub_1B1F74614(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_grain, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setScale_);
}

void sub_1B1F74630(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_grain, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isColored, a1);
}

void sub_1B1F7465C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7534C(a1, a2, a3, a4, (uint64_t)&selRef_grain, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setColored_);
}

uint64_t sub_1B1F74678(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7B340);
}

uint64_t sub_1B1F74694(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B374);
}

void sub_1B1F746B0(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_motionBlur, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F746DC(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_motionBlur);
}

uint64_t sub_1B1F7470C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectMotionBlurController, (uint64_t)&off_1E63B66B0, a2);
}

uint64_t sub_1B1F74734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74800);
}

void sub_1B1F74754(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_motionBlur, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_intensity, a1);
}

void sub_1B1F74780(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_motionBlur, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setIntensity_);
}

uint64_t sub_1B1F7479C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectMotionBlurController, (uint64_t)&off_1E63B66B0, a2);
}

uint64_t sub_1B1F747C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F747E4);
}

uint64_t sub_1B1F747E4(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7B618);
}

uint64_t sub_1B1F74800(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7B64C);
}

void sub_1B1F7481C(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_depthOfField, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F74848(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_depthOfField);
}

uint64_t sub_1B1F74878@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, (uint64_t)&off_1E63B75C8, a2);
}

uint64_t sub_1B1F748A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74A88);
}

void sub_1B1F748C0(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_depthOfField, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_fStop, a1);
}

void sub_1B1F748EC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_depthOfField, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setFStop_);
}

uint64_t sub_1B1F74908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, (uint64_t)&off_1E63B75C8, a2);
}

uint64_t sub_1B1F74930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74A6C);
}

void sub_1B1F74950(uint64_t *a1@<X8>)
{
  sub_1B1F62A00((SEL *)&selRef_apertureBladeCount, a1);
}

void sub_1B1F7496C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F74A00(a1, a2, a3, a4, (SEL *)&selRef_depthOfField, (SEL *)&selRef_setApertureBladeCount_);
}

uint64_t sub_1B1F74980@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for CameraEffectDepthOfFieldController, (uint64_t)&off_1E63B75C8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A813C4, a2);
}

uint64_t sub_1B1F749B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74A50);
}

void sub_1B1F749D0(uint64_t *a1@<X8>)
{
  sub_1B1F62A00((SEL *)&selRef_focalBlurSampleCount, a1);
}

void sub_1B1F749EC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F74A00(a1, a2, a3, a4, (SEL *)&selRef_depthOfField, (SEL *)&selRef_setFocalBlurSampleCount_);
}

void sub_1B1F74A00(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  uint64_t v7;
  id v8;

  v7 = *a1;
  v8 = sub_1B1F6082C(a5);
  objc_msgSend(v8, *a6, v7);

}

uint64_t sub_1B1F74A50(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7BA38);
}

uint64_t sub_1B1F74A6C(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7BA78);
}

uint64_t sub_1B1F74A88(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7BAAC);
}

void sub_1B1F74AA4(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F74AD0(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_chromaticTransform);
}

uint64_t sub_1B1F74B00@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, a2);
}

uint64_t sub_1B1F74B28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F75034);
}

void sub_1B1F74B48(float *a1@<X8>)
{
  *a1 = sub_1B1F62AA0();
}

void sub_1B1F74B70(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setIntensity_);
}

uint64_t sub_1B1F74B8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, a2);
}

uint64_t sub_1B1F74BB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F75018);
}

void sub_1B1F74BD4(_QWORD *a1@<X8>)
{
  sub_1B1F751A0((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_center, a1);
}

void sub_1B1F74BF0(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7521C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setCenter_);
}

uint64_t sub_1B1F74C0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1F74C3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74FFC);
}

void sub_1B1F74C5C(float *a1@<X8>)
{
  *a1 = sub_1B1F62AC8();
}

void sub_1B1F74C84(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setFromZ_);
}

void sub_1B1F74CA0(float *a1@<X8>)
{
  *a1 = sub_1B1F62ADC();
}

void sub_1B1F74CC8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setFromAngle_);
}

void sub_1B1F74CE4(_QWORD *a1@<X8>)
{
  sub_1B1F751A0((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_fromShift, a1);
}

void sub_1B1F74D00(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7521C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setFromShift_);
}

void sub_1B1F74D1C(float *a1@<X8>)
{
  *a1 = sub_1B1F62C20();
}

void sub_1B1F74D44(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setToZ_);
}

void sub_1B1F74D60(float *a1@<X8>)
{
  *a1 = sub_1B1F62C34();
}

void sub_1B1F74D88(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setToAngle_);
}

void sub_1B1F74DA4(_QWORD *a1@<X8>)
{
  sub_1B1F751A0((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_toShift, a1);
}

void sub_1B1F74DC0(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7521C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setToShift_);
}

void sub_1B1F74DDC(_OWORD *a1@<X8>)
{
  sub_1B1F75D20((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_color1, a1);
}

void sub_1B1F74DF8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75DA0(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setColor1_);
}

uint64_t sub_1B1F74E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for CameraEffectChromaticTransformController, (uint64_t)&off_1E63B9138, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a2);
}

uint64_t sub_1B1F74E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F74FE0);
}

void sub_1B1F74E64(_OWORD *a1@<X8>)
{
  sub_1B1F75D20((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_color2, a1);
}

void sub_1B1F74E80(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75DA0(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setColor2_);
}

void sub_1B1F74E9C(_OWORD *a1@<X8>)
{
  sub_1B1F75D20((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_color3, a1);
}

void sub_1B1F74EB8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75DA0(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setColor3_);
}

void sub_1B1F74ED4(_QWORD *a1@<X8>)
{
  sub_1B1F751A0((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_maskCenter, a1);
}

void sub_1B1F74EF0(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7521C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setMaskCenter_);
}

void sub_1B1F74F0C(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_maskRadius, a1);
}

void sub_1B1F74F38(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setMaskRadius_);
}

void sub_1B1F74F54(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_maskEnabled, a1);
}

void sub_1B1F74F80(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7534C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setMaskEnabled_);
}

void sub_1B1F74F9C(float *a1@<X8>)
{
  *a1 = sub_1B1F62DDC();
}

void sub_1B1F74FC4(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_chromaticTransform, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setUnMultBlending_);
}

uint64_t sub_1B1F74FE0(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A7BD10);
}

uint64_t sub_1B1F74FFC(uint64_t a1)
{
  return sub_1B1F753B8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, double))sub_1B1A7BE8C);
}

uint64_t sub_1B1F75018(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7BEC0);
}

uint64_t sub_1B1F75034(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7BEF4);
}

void sub_1B1F75050(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_isEnabled, a1);
}

void sub_1B1F7507C(char *a1)
{
  sub_1B1F60928(*a1, (SEL *)&selRef_doughnutBokeh);
}

uint64_t sub_1B1F750AC@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, (uint64_t)&off_1E63B7968, a2);
}

uint64_t sub_1B1F750D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F753F8);
}

void sub_1B1F750F4(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_radius, a1);
}

void sub_1B1F75120(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setRadius_);
}

uint64_t sub_1B1F7513C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, (uint64_t)&off_1E63B7968, a2);
}

uint64_t sub_1B1F75164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F753DC);
}

void sub_1B1F75184(_QWORD *a1@<X8>)
{
  sub_1B1F751A0((uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_maskCenter, a1);
}

void sub_1B1F751A0(uint64_t a1@<X3>, uint64_t (*a2)(uint64_t)@<X4>, SEL *a3@<X5>, _QWORD *a4@<X8>)
{
  void *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = (void *)a2(a1);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, *a3);
    v9 = v8;

  }
  else
  {
    v9 = 0;
  }
  *a4 = v9;
}

void sub_1B1F75200(double *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7521C(a1, a2, a3, a4, (uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setMaskCenter_);
}

void sub_1B1F7521C(double *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), SEL *a7)
{
  double v8;
  id v9;

  v8 = *a1;
  v9 = (id)a6(a5);
  objc_msgSend(v9, *a7, v8);

}

uint64_t sub_1B1F7526C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for CameraEffectDoughnutBokehController, (uint64_t)&off_1E63B7968, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A83284, a2);
}

uint64_t sub_1B1F7529C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0FDC(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7539C);
}

void sub_1B1F752BC(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_maskRadius, a1);
}

void sub_1B1F752E8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setMaskRadius_);
}

void sub_1B1F75304(unsigned __int8 *a1@<X8>)
{
  sub_1B1F64228((uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_maskEnabled, a1);
}

void sub_1B1F75330(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7534C(a1, a2, a3, a4, (uint64_t)&selRef_doughnutBokeh, (uint64_t (*)(uint64_t))sub_1B1F6082C, (SEL *)&selRef_setMaskEnabled_);
}

void sub_1B1F7534C(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), SEL *a7)
{
  uint64_t v8;
  id v9;

  v8 = *a1;
  v9 = (id)a6(a5);
  objc_msgSend(v9, *a7, v8);

}

uint64_t sub_1B1F7539C(uint64_t a1)
{
  return sub_1B1F753B8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, double))sub_1B1A7BAEC);
}

uint64_t sub_1B1F753B8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), **(double **)(v2 + 16));
}

uint64_t sub_1B1F753DC(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7BB20);
}

uint64_t sub_1B1F753F8(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7BB54);
}

uint64_t sub_1B1F7541C@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for CameraEffectSSAOController, (uint64_t)&off_1E63B1528, a2);
}

uint64_t sub_1B1F75444(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7558C);
}

void sub_1B1F75464(_DWORD *a1@<X8>)
{
  sub_1B1F64B28((SEL *)&selRef_intensity, a1);
}

void sub_1B1F75480(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75524(a1, a2, a3, a4, (SEL *)&selRef_setIntensity_);
}

uint64_t sub_1B1F7548C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for CameraEffectSSAOController, (uint64_t)&off_1E63B1528, a2);
}

uint64_t sub_1B1F754B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F75570);
}

void sub_1B1F754D4(_DWORD *a1@<X8>)
{
  sub_1B1F64B28((SEL *)&selRef_radius, a1);
}

void sub_1B1F754F0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75524(a1, a2, a3, a4, (SEL *)&selRef_setRadius_);
}

void sub_1B1F754FC(_DWORD *a1@<X8>)
{
  sub_1B1F64B28((SEL *)&selRef_falloff, a1);
}

void sub_1B1F75518(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75524(a1, a2, a3, a4, (SEL *)&selRef_setFalloff_);
}

void sub_1B1F75524(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  int v6;
  double v7;
  id v8;

  v6 = *a1;
  v8 = sub_1B1F642B8();
  LODWORD(v7) = v6;
  objc_msgSend(v8, *a5, v7);

}

uint64_t sub_1B1F75570(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7AF10);
}

uint64_t sub_1B1F7558C(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7AF44);
}

uint64_t sub_1B1F755B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ParametricModelController, (uint64_t)&off_1E63AFAC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A860D4, a2);
}

uint64_t sub_1B1F755E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F759B4);
}

void sub_1B1F75600(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_radius, a2);
}

void sub_1B1F7561C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setRadius_);
}

uint64_t sub_1B1F75638@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F65EB4();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B1F75664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for ParametricModelController, (uint64_t)&off_1E63AFAC8, a2);
}

uint64_t sub_1B1F7568C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F75998);
}

void sub_1B1F756AC(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_topRadius, a2);
}

void sub_1B1F756C8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setTopRadius_);
}

void sub_1B1F756E8(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_width, a2);
}

void sub_1B1F75704(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setWidth_);
}

uint64_t sub_1B1F75720@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F662E4();
  *a1 = result & 1;
  return result;
}

void sub_1B1F7574C(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_height, a2);
}

void sub_1B1F75768(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setHeight_);
}

uint64_t sub_1B1F75784@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F66474();
  *a1 = result & 1;
  return result;
}

void sub_1B1F757B0(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_length, a2);
}

void sub_1B1F757CC(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setLength_);
}

uint64_t sub_1B1F757E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F66818();
  *a1 = result & 1;
  return result;
}

void sub_1B1F75814(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_chamferRadius, a2);
}

void sub_1B1F75830(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setChamferRadius_);
}

void sub_1B1F75850(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_cornerRadius, a2);
}

void sub_1B1F7586C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setCornerRadius_);
}

void sub_1B1F7588C(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_innerRadius, a2);
}

void sub_1B1F758A8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setInnerRadius_);
}

void sub_1B1F758C8(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_pipeRadius, a2);
}

void sub_1B1F758E4(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setPipeRadius_);
}

void sub_1B1F75900(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F66C08(a1, (SEL *)&selRef_radialSpan, a2);
}

void sub_1B1F7591C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F66C90(a1, a2, a3, a4, (SEL *)&selRef_setRadialSpan_);
}

uint64_t sub_1B1F75938@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F66D04();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1B1F75964(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LightController(a2, a1, &type metadata for ParametricModelController);
  return a2;
}

uint64_t sub_1B1F75998(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7ACA8);
}

uint64_t sub_1B1F759B4(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A7ACDC);
}

void sub_1B1F759D0(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1B1F759D8(__n128 *a1)
{
  sub_1B1F673A0(*a1);
}

uint64_t sub_1B1F759FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a2);
}

uint64_t sub_1B1F75A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F760D0);
}

void sub_1B1F75A4C(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

void sub_1B1F75A54(__n128 *a1)
{
  sub_1B1F67490(*a1);
}

uint64_t sub_1B1F75A78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a2);
}

uint64_t sub_1B1F75AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F760B4);
}

id sub_1B1F75AC8@<X0>(_BYTE *a1@<X8>)
{
  id result;

  result = sub_1B1F67114();
  *a1 = result & 1;
  return result;
}

void sub_1B1F75AF4()
{
  sub_1B1F672C4();
}

uint64_t sub_1B1F75B30@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, a2);
}

uint64_t sub_1B1F75B58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F76098);
}

id sub_1B1F75B78@<X0>(_BYTE *a1@<X8>)
{
  id result;

  result = sub_1B1F67130();
  *a1 = result & 1;
  return result;
}

void sub_1B1F75BA4()
{
  sub_1B1F672C4();
}

void sub_1B1F75BE0(_OWORD *a1@<X8>)
{
  sub_1B1F75D20((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_velocity, a1);
}

void sub_1B1F75BFC(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75DA0(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setVelocity_);
}

void sub_1B1F75C18(_OWORD *a1@<X8>)
{
  id v2;
  void *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v2 = sub_1B1F66F5C((SEL *)&selRef_physicsBody);
  if (v2)
  {
    v3 = v2;
    objc_msgSend(v2, sel_angularVelocity);
    v6 = v4;

    v5 = v6;
  }
  else
  {
    v5 = 0uLL;
  }
  *a1 = v5;
}

void sub_1B1F75C7C(__int128 *a1)
{
  id v1;
  __int128 v2;

  v2 = *a1;
  v1 = sub_1B1F66F5C((SEL *)&selRef_physicsBody);
  objc_msgSend(v1, sel_setAngularVelocity_, *(double *)&v2);

}

void sub_1B1F75CCC(_OWORD *a1@<X8>)
{
  sub_1B1F75D20((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_velocityFactor, a1);
}

void sub_1B1F75CE8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75DA0(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setVelocityFactor_);
}

void sub_1B1F75D04(_OWORD *a1@<X8>)
{
  sub_1B1F75D20((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_angularVelocityFactor, a1);
}

void sub_1B1F75D20(uint64_t a1@<X3>, uint64_t (*a2)(uint64_t)@<X4>, SEL *a3@<X5>, _OWORD *a4@<X8>)
{
  void *v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v6 = (void *)a2(a1);
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v6, *a3);
    v10 = v8;

    v9 = v10;
  }
  else
  {
    v9 = 0uLL;
  }
  *a4 = v9;
}

void sub_1B1F75D84(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F75DA0(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setAngularVelocityFactor_);
}

void sub_1B1F75DA0(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), SEL *a7)
{
  id v8;
  __int128 v9;

  v9 = *a1;
  v8 = (id)a6(a5);
  objc_msgSend(v8, *a7, *(double *)&v9);

}

void sub_1B1F75DEC(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_damping, a1);
}

void sub_1B1F75E18(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setDamping_);
}

uint64_t sub_1B1F75E34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for PhysicsBodyController, (uint64_t)&off_1E63A5AA0, a2);
}

uint64_t sub_1B1F75E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7607C);
}

void sub_1B1F75E7C(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_angularDamping, a1);
}

void sub_1B1F75EA8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setAngularDamping_);
}

void sub_1B1F75EC4(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_mass, a1);
}

void sub_1B1F75EF0(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setMass_);
}

void sub_1B1F75F0C(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_charge, a1);
}

void sub_1B1F75F38(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setCharge_);
}

void sub_1B1F75F54(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_friction, a1);
}

void sub_1B1F75F80(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setFriction_);
}

void sub_1B1F75F9C(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_restitution, a1);
}

void sub_1B1F75FC8(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setRestitution_);
}

void sub_1B1F75FE4(_DWORD *a1@<X8>)
{
  sub_1B1F68998((uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_rollingFriction, a1);
}

void sub_1B1F76010(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7602C(a1, a2, a3, a4, (uint64_t)&selRef_physicsBody, (uint64_t (*)(uint64_t))sub_1B1F66F5C, (SEL *)&selRef_setRollingFriction_);
}

void sub_1B1F7602C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t), SEL *a7)
{
  int v8;
  double v9;
  id v10;

  v8 = *a1;
  v10 = (id)a6(a5);
  LODWORD(v9) = v8;
  objc_msgSend(v10, *a7, v9);

}

uint64_t sub_1B1F7607C(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A79A08);
}

uint64_t sub_1B1F76098(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79A3C);
}

uint64_t sub_1B1F760B4(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A79A7C);
}

uint64_t sub_1B1F760D0(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A79BF8);
}

void sub_1B1F760EC(_QWORD *a1@<X8>)
{
  sub_1B1F69E98((SEL *)&selRef_fieldType, a1);
}

void sub_1B1F76108(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76758(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setFieldType_);
}

id sub_1B1F7611C@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1B1F69CDC();
  *a1 = result;
  return result;
}

void sub_1B1F76144(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F765A4(a1, a2, a3, a4, (SEL *)&selRef_setFieldType_);
}

uint64_t sub_1B1F76150@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8118C, a2);
}

uint64_t sub_1B1F76180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F76998);
}

uint64_t sub_1B1F761A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85548, a2);
}

uint64_t sub_1B1F761D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7697C);
}

void sub_1B1F761F0(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_forceField, (SEL *)&selRef_strength, a1);
}

void sub_1B1F76214(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setStrength_);
}

uint64_t sub_1B1F76228@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, a2);
}

uint64_t sub_1B1F76250(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F76960);
}

void sub_1B1F76270(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_forceField, (SEL *)&selRef_falloffExponent, a1);
}

void sub_1B1F76294(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setFalloffExponent_);
}

void sub_1B1F762A8(unsigned __int8 *a1@<X8>)
{
  sub_1B1F69CE8((SEL *)&selRef_forceField, (SEL *)&selRef_isActive, a1);
}

void sub_1B1F762CC(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F762E0(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setActive_);
}

void sub_1B1F762E0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  uint64_t v7;
  id v8;

  v7 = *a1;
  v8 = sub_1B1F66F5C(a5);
  objc_msgSend(v8, *a6, v7);

}

uint64_t sub_1B1F76330@<X0>(unint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F726E8(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, a2);
}

uint64_t sub_1B1F76358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0E84(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F76944);
}

void sub_1B1F7637C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76758(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setShape_);
}

uint64_t sub_1B1F76390@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F68B54();
  *a1 = result;
  return result;
}

void sub_1B1F763B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F765A4(a1, a2, a3, a4, (SEL *)&selRef_setShape_);
}

uint64_t sub_1B1F763C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A8553C, a2);
}

uint64_t sub_1B1F763F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F76928);
}

void sub_1B1F76414(_OWORD *a1@<X8>)
{
  sub_1B1F7665C((SEL *)&selRef_forceField, (SEL *)&selRef_halfExtent, a1);
}

void sub_1B1F76428(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F766D4(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setHalfExtent_);
}

uint64_t sub_1B1F7643C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a2);
}

uint64_t sub_1B1F7646C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7690C);
}

void sub_1B1F7648C(_QWORD *a1@<X8>)
{
  sub_1B1F69E98((SEL *)&selRef_scope, a1);
}

void sub_1B1F764A8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76758(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setScope_);
}

id sub_1B1F764BC@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1B1F69DA0();
  *a1 = result;
  return result;
}

void sub_1B1F764E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F765A4(a1, a2, a3, a4, (SEL *)&selRef_setScope_);
}

uint64_t sub_1B1F764F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85530, a2);
}

uint64_t sub_1B1F76520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F768F0);
}

void sub_1B1F76540(_QWORD *a1@<X8>)
{
  sub_1B1F69E98((SEL *)&selRef_cullMode, a1);
}

void sub_1B1F7655C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76758(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setCullMode_);
}

id sub_1B1F76570@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = sub_1B1F69EF8();
  *a1 = result;
  return result;
}

void sub_1B1F76598(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F765A4(a1, a2, a3, a4, (SEL *)&selRef_setCullMode_);
}

void sub_1B1F765A4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6;
  id v7;

  v6 = *a1;
  v7 = sub_1B1F66F5C((SEL *)&selRef_forceField);
  objc_msgSend(v7, *a5, v6);

}

uint64_t sub_1B1F765F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A85524, a2);
}

uint64_t sub_1B1F76628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F768D4);
}

void sub_1B1F76648(_OWORD *a1@<X8>)
{
  sub_1B1F7665C((SEL *)&selRef_forceField, (SEL *)&selRef_offset, a1);
}

void sub_1B1F7665C(SEL *a1@<X3>, SEL *a2@<X4>, _OWORD *a3@<X8>)
{
  id v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v5 = sub_1B1F66F5C(a1);
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v5, *a2);
    v9 = v7;

    v8 = v9;
  }
  else
  {
    v8 = 0uLL;
  }
  *a3 = v8;
}

void sub_1B1F766C0(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F766D4(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setOffset_);
}

void sub_1B1F766D4(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  id v7;
  __int128 v8;

  v8 = *a1;
  v7 = sub_1B1F66F5C(a5);
  objc_msgSend(v7, *a6, *(double *)&v8);

}

void sub_1B1F76720(_QWORD *a1@<X8>)
{
  sub_1B1F69F04((SEL *)&selRef_forceField, (SEL *)&selRef_categoryBitMask, a1);
}

void sub_1B1F76744(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76758(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setCategoryBitMask_);
}

void sub_1B1F76758(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  uint64_t v7;
  id v8;

  v7 = *a1;
  v8 = sub_1B1F66F5C(a5);
  objc_msgSend(v8, *a6, v7);

}

uint64_t sub_1B1F767A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB0CA4(a1, v2, (uint64_t)&type metadata for ForceFieldsController, (uint64_t)&off_1E63A04B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E4C, a2);
}

uint64_t sub_1B1F767D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0D2C(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F768B8);
}

void sub_1B1F767F8(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_forceField, (SEL *)&selRef_smoothness, a1);
}

void sub_1B1F7681C(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setSmoothness_);
}

void sub_1B1F76830(_DWORD *a1@<X8>)
{
  sub_1B1F69F5C((SEL *)&selRef_forceField, (SEL *)&selRef_speed, a1);
}

void sub_1B1F76854(int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F76868(a1, a2, a3, a4, (SEL *)&selRef_forceField, (SEL *)&selRef_setSpeed_);
}

void sub_1B1F76868(int *a1, uint64_t a2, uint64_t a3, uint64_t a4, SEL *a5, SEL *a6)
{
  int v7;
  double v8;
  id v9;

  v7 = *a1;
  v9 = sub_1B1F66F5C(a5);
  LODWORD(v8) = v7;
  objc_msgSend(v9, *a6, v8);

}

uint64_t sub_1B1F768B8(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79518);
}

uint64_t sub_1B1F768D4(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79558);
}

uint64_t sub_1B1F768F0(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79598);
}

uint64_t sub_1B1F7690C(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A795D8);
}

uint64_t sub_1B1F76928(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79754);
}

uint64_t sub_1B1F76944(uint64_t a1)
{
  return sub_1B1AFFB94(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79794);
}

uint64_t sub_1B1F76960(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A797D4);
}

uint64_t sub_1B1F7697C(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79808);
}

uint64_t sub_1B1F76998(uint64_t a1)
{
  return sub_1B1AE8E80(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))sub_1B1A79848);
}

uint64_t sub_1B1F769B4()
{
  int v0;
  int v1;
  uint64_t v3;

  if (swift_dynamicCastMetatype())
  {
    v0 = 0;
    v1 = 3;
  }
  else if (swift_dynamicCastMetatype() || swift_dynamicCastMetatype())
  {
    v0 = 0;
    v1 = 2;
  }
  else
  {
    sub_1B19F8E54(0, &qword_1ED4BB090, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], MEMORY[0x1E0DEDD20]);
    if (swift_dynamicCastMetatype())
    {
      v0 = 0;
      v1 = 17;
    }
    else
    {
      sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BB0B0, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
      if (swift_dynamicCastMetatype())
      {
        v0 = 0;
        v1 = 18;
      }
      else
      {
        sub_1B19F8E54(0, &qword_1ED4BB0F8, (uint64_t (*)(void))sub_1B1AF0D08, MEMORY[0x1E0DEE0F8], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
        if (swift_dynamicCastMetatype())
        {
          v0 = 0;
          v1 = 19;
        }
        else if (swift_dynamicCastMetatype())
        {
          v0 = 0;
          v1 = 1;
        }
        else
        {
          sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
          if (swift_dynamicCastMetatype())
          {
            v0 = 0;
            v1 = 7;
          }
          else
          {
            sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0A0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50]);
            if (swift_dynamicCastMetatype())
            {
              v0 = 0;
              v1 = 8;
            }
            else
            {
              sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
              if (swift_dynamicCastMetatype())
              {
                v0 = 0;
                v1 = 9;
              }
              else
              {
                type metadata accessor for simd_float3x3(0);
                if (swift_dynamicCastMetatype())
                {
                  v0 = 0;
                  v1 = 11;
                }
                else
                {
                  type metadata accessor for simd_float4x4(0);
                  if (swift_dynamicCastMetatype())
                  {
                    v0 = 0;
                    v1 = 10;
                  }
                  else
                  {
                    type metadata accessor for simd_quatf(0);
                    v3 = swift_dynamicCastMetatype();
                    v0 = v3 == 0;
                    if (v3)
                      v1 = 9;
                    else
                      v1 = 0;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v1 | (v0 << 16);
}

uint64_t sub_1B1F76C2C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  _QWORD *v5;
  _QWORD *v6;
  __CFString *v7;
  __CFString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[4];

  sub_1B1F78A28((_QWORD *)(v0 + 8), v26);
  v1 = MEMORY[0x1B5E240CC](v26);
  sub_1B1F2F2C4((uint64_t)v26);
  if (!v1)
    return 0;
  objc_opt_self();
  v2 = (void *)swift_dynamicCastObjCClass();
  if (!v2)
  {
    swift_unknownObjectRelease();
    return 0;
  }
  v3 = objc_msgSend(v2, sel_presentationMaterial);
  swift_unknownObjectRelease();
  v4 = objc_retainAutorelease(v3);
  v5 = objc_msgSend(v4, sel_materialRef);
  if (!v5
    || (v6 = v5,
        swift_unknownObjectRetain(),
        v7 = (__CFString *)sub_1B2228728(),
        v8 = (__CFString *)sub_1B19C1A30(v6, v7, 0),
        swift_unknownObjectRelease(),
        v7,
        !v8))
  {

    return 0;
  }
  v9 = sub_1B1F769B4();
  if ((v9 & 0x10000) != 0
    || (unsigned __int16)sub_1B19C4770((uint64_t)v8, v10, v11, v12, v13, v14, v15, v16) != (unsigned __int16)v9)
  {

    return 0;
  }
  v24 = sub_1B19C4614((uint64_t)v8, v17, v18, v19, v20, v21, v22, v23);

  return v24;
}

void sub_1B1F76D80(_OWORD *a1@<X8>)
{
  sub_1B1F6BCD8((SEL *)&selRef_diffuse, a1);
}

void sub_1B1F76D9C(__n128 *a1)
{
  sub_1B1F6A634((SEL *)&selRef_diffuse, *a1);
}

uint64_t sub_1B1F76DC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for MaterialController, (uint64_t)&off_1E63921F8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a2);
}

uint64_t sub_1B1F76DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7715C);
}

void sub_1B1F76E18(_DWORD *a1@<X8>)
{
  sub_1B1F6BD58((SEL *)&selRef_diffuse, a1);
}

void sub_1B1F76E34(float *a1)
{
  sub_1B1F6A930((SEL *)&selRef_diffuse, *a1);
}

uint64_t sub_1B1F76E60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for MaterialController, (uint64_t)&off_1E63921F8, a2);
}

uint64_t sub_1B1F76E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F77140);
}

void sub_1B1F76EA8(_OWORD *a1@<X8>)
{
  sub_1B1F6BCD8((SEL *)&selRef_emission, a1);
}

void sub_1B1F76EC4(__n128 *a1)
{
  sub_1B1F6A634((SEL *)&selRef_emission, *a1);
}

void sub_1B1F76EF0(_OWORD *a1@<X8>)
{
  sub_1B1F6BCD8((SEL *)&selRef_multiply, a1);
}

void sub_1B1F76F0C(__n128 *a1)
{
  sub_1B1F6A634((SEL *)&selRef_multiply, *a1);
}

void sub_1B1F76F38(float *a1@<X8>)
{
  *a1 = sub_1B1F6A71C();
}

void sub_1B1F76F60(float *a1)
{
  sub_1B1F6A734((SEL *)&selRef_metalness, *a1);
}

BOOL sub_1B1F76F8C@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = sub_1B1F6AC24();
  *a1 = result;
  return result;
}

void sub_1B1F76FB8(float *a1@<X8>)
{
  *a1 = sub_1B1F6A728();
}

void sub_1B1F76FE0(float *a1)
{
  sub_1B1F6A734((SEL *)&selRef_roughness, *a1);
}

void sub_1B1F7700C(_DWORD *a1@<X8>)
{
  sub_1B1F6BD58((SEL *)&selRef_normal, a1);
}

void sub_1B1F77028(float *a1)
{
  sub_1B1F6A930((SEL *)&selRef_normal, *a1);
}

BOOL sub_1B1F77054@<W0>(_BYTE *a1@<X8>)
{
  _BOOL8 result;

  result = sub_1B1F6ACE0();
  *a1 = result;
  return result;
}

void sub_1B1F77080(_DWORD *a1@<X8>)
{
  sub_1B1F6BD58((SEL *)&selRef_normal, a1);
}

void sub_1B1F7709C(float *a1@<X8>)
{
  *a1 = sub_1B1F6AA14();
}

void sub_1B1F770C4(float *a1)
{
  sub_1B1F6A734((SEL *)&selRef_transparent, *a1);
}

void sub_1B1F770F4(int *a1)
{
  int v1;
  double v2;
  id v3;

  v1 = *a1;
  v3 = sub_1B1F6A49C();
  LODWORD(v2) = v1;
  objc_msgSend(v3, sel_setAlphaCutoff_, v2);

}

uint64_t sub_1B1F77140(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A78080);
}

uint64_t sub_1B1F7715C(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A780B4);
}

uint64_t sub_1B1F77178()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F77188()
{
  return swift_deallocObject();
}

void sub_1B1F77198(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F6F710(a1, (SEL *)&selRef_background, a2);
}

void sub_1B1F771B4(float *a1)
{
  sub_1B1F6EEA8((SEL *)&selRef_background, (SEL *)&selRef_setIntensity_, *a1);
}

uint64_t sub_1B1F771EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for WorldBackgroundController, (uint64_t)&off_1E63B12C0, a2);
}

uint64_t sub_1B1F77214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F772D4);
}

void sub_1B1F77234(_OWORD *a1@<X8>)
{
  sub_1B1F77398(sub_1B1F6EB10, a1);
}

void sub_1B1F77240(double *a1)
{
  sub_1B1F6F044((SEL *)&selRef_background, *a1, a1[2], a1[4], a1[6]);
}

uint64_t sub_1B1F77270@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB16D8(a1, v2, (uint64_t)&type metadata for WorldBackgroundController, a2);
}

uint64_t sub_1B1F77298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1758(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F772B8);
}

uint64_t sub_1B1F772B8(uint64_t a1)
{
  return sub_1B1AE0B48(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128, __n128, __n128, __n128))sub_1B1A7AD1C);
}

uint64_t sub_1B1F772D4(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A7AEDC);
}

void sub_1B1F772F0(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  sub_1B1F6F710(a1, (SEL *)&selRef_lightingEnvironment, a2);
}

void sub_1B1F7730C(float *a1)
{
  sub_1B1F6EEA8((SEL *)&selRef_lightingEnvironment, (SEL *)&selRef_setIntensity_, *a1);
}

uint64_t sub_1B1F77344@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for WorldIBLController, (uint64_t)&off_1E6396F88, a2);
}

uint64_t sub_1B1F7736C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F77458);
}

void sub_1B1F7738C(_OWORD *a1@<X8>)
{
  sub_1B1F77398(sub_1B1F6EF60, a1);
}

void sub_1B1F77398(double (*a1)(void)@<X3>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  *(double *)&v3 = a1();
  *a2 = v3;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
}

void sub_1B1F773C4(double *a1)
{
  sub_1B1F6F044((SEL *)&selRef_lightingEnvironment, *a1, a1[2], a1[4], a1[6]);
}

uint64_t sub_1B1F773F4@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB16D8(a1, v2, (uint64_t)&type metadata for WorldIBLController, a2);
}

uint64_t sub_1B1F7741C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB1758(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7743C);
}

uint64_t sub_1B1F7743C(uint64_t a1)
{
  return sub_1B1AE0B48(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128, __n128, __n128, __n128))sub_1B1A78844);
}

uint64_t sub_1B1F77458(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A78A04);
}

void sub_1B1F77474(_OWORD *a1@<X8>)
{
  __int128 v2;

  *(double *)&v2 = sub_1B1F6F7CC();
  *a1 = v2;
}

void sub_1B1F7749C(double *a1)
{
  sub_1B1F6F878(*a1);
}

uint64_t sub_1B1F774C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for WorldPhysicsController, (uint64_t)&off_1E63A9F08, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A80E38, a2);
}

uint64_t sub_1B1F774F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F775B0);
}

void sub_1B1F77514(float *a1)
{
  sub_1B1F6EEA8((SEL *)&selRef_physicsWorld, (SEL *)&selRef_setSpeed_, *a1);
}

uint64_t sub_1B1F7754C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for WorldPhysicsController, (uint64_t)&off_1E63A9F08, a2);
}

uint64_t sub_1B1F77574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F77594);
}

uint64_t sub_1B1F77594(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A79F38);
}

uint64_t sub_1B1F775B0(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A79F6C);
}

uint64_t sub_1B1F775D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1AB11E8(a1, v2, (uint64_t)&type metadata for WorldFogController, (uint64_t)&off_1E6396DA8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B1A814E0, a2);
}

uint64_t sub_1B1F77604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB2238(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F7771C);
}

uint64_t sub_1B1F77624@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B1F703B0(a1, (SEL *)&selRef_fogStartDistance, a2);
}

void sub_1B1F77640(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7044C(a1, a2, a3, a4, (SEL *)&selRef_setFogStartDistance_);
}

uint64_t sub_1B1F7765C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1B1F72650(a1, v2, (uint64_t)&type metadata for WorldFogController, (uint64_t)&off_1E6396DA8, a2);
}

uint64_t sub_1B1F77684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1B1AB0DD8(a1, a2, a3, v3, (void (*)(_BYTE *))sub_1B1F776DC);
}

uint64_t sub_1B1F776A4@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_1B1F703B0(a1, (SEL *)&selRef_fogEndDistance, a2);
}

void sub_1B1F776C0(int *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  sub_1B1F7044C(a1, a2, a3, a4, (SEL *)&selRef_setFogEndDistance_);
}

uint64_t sub_1B1F776DC(uint64_t a1)
{
  return sub_1B1F776F8(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, float))sub_1B1A78694);
}

uint64_t sub_1B1F776F8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, float))
{
  uint64_t v2;

  return a2(a1, *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), **(float **)(v2 + 16));
}

uint64_t sub_1B1F7771C(uint64_t a1)
{
  return sub_1B1AE0660(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, __n128))sub_1B1A786C8);
}

uint64_t sub_1B1F77740()
{
  return 40;
}

uint64_t sub_1B1F7774C()
{
  return swift_bridgeObjectRelease();
}

__n128 sub_1B1F77754(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  __n128 result;

  sub_1B1AE82C0((uint64_t)a1, (uint64_t)a2);
  v4 = a1[2].n128_u64[0];
  result = a1[1];
  a2[1] = result;
  a2[2].n128_u64[0] = v4;
  return result;
}

__n128 sub_1B1F77790(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)a1;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 16);
  *(__n128 *)(a2 + 16) = result;
  return result;
}

uint64_t sub_1B1F777AC@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1B1A80BA4(a1, v2, a2);
}

uint64_t sub_1B1F777B4(uint64_t result)
{
  return sub_1B1A870AC(result);
}

uint64_t sub_1B1F777BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1B1F72764(v1, a1);
}

uint64_t sub_1B1F777C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  int v4;
  _DWORD v6[6];
  uint64_t v7;

  v4 = *a3;
  v7 = MEMORY[0x1E0DEB188];
  v6[0] = v4;
  (*(void (**)(uint64_t, uint64_t, _DWORD *))(v3 + 16))(a1, a2, v6);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
}

uint64_t sub_1B1F77810@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_1B1F5871C(a1, a2, v3, a3);
}

uint64_t sub_1B1F77818()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1B1F7783C()
{
  uint64_t *v0;

  return sub_1B1F58814(v0[2], v0[3], v0[4]);
}

uint64_t sub_1B1F77848()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F77858()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F77868()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1B1F77894()
{
  return swift_deallocObject();
}

unint64_t sub_1B1F778A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF61520;
  if (!qword_1EEF61520)
  {
    type metadata accessor for NSKeyValueChangeKey(255);
    result = MEMORY[0x1B5E23E74](&unk_1B226C368, v1);
    atomic_store(result, (unint64_t *)&qword_1EEF61520);
  }
  return result;
}

uint64_t sub_1B1F778EC()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F77904()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1B1F77938()
{
  return swift_deallocObject();
}

id sub_1B1F77948(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1F5A010(a1, a2, v2);
}

uint64_t sub_1B1F77950()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F77960(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1B1DBA928(a1, a2, *(uint64_t (**)(void))(v2 + 16));
}

ValueMetadata *type metadata accessor for LightController()
{
  return &type metadata for LightController;
}

ValueMetadata *type metadata accessor for CameraController()
{
  return &type metadata for CameraController;
}

ValueMetadata *type metadata accessor for CameraEffectBloomController()
{
  return &type metadata for CameraEffectBloomController;
}

ValueMetadata *type metadata accessor for CameraEffectToneMappingController()
{
  return &type metadata for CameraEffectToneMappingController;
}

ValueMetadata *type metadata accessor for CameraEffectExposureController()
{
  return &type metadata for CameraEffectExposureController;
}

ValueMetadata *type metadata accessor for CameraEffectLensBlurController()
{
  return &type metadata for CameraEffectLensBlurController;
}

ValueMetadata *type metadata accessor for CameraEffectGrainController()
{
  return &type metadata for CameraEffectGrainController;
}

ValueMetadata *type metadata accessor for CameraEffectMotionBlurController()
{
  return &type metadata for CameraEffectMotionBlurController;
}

ValueMetadata *type metadata accessor for CameraEffectDepthOfFieldController()
{
  return &type metadata for CameraEffectDepthOfFieldController;
}

ValueMetadata *type metadata accessor for CameraEffectChromaticTransformController()
{
  return &type metadata for CameraEffectChromaticTransformController;
}

ValueMetadata *type metadata accessor for CameraEffectDoughnutBokehController()
{
  return &type metadata for CameraEffectDoughnutBokehController;
}

uint64_t destroy for CameraEffectSSAOController()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for CameraEffectSSAOController(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_unknownObjectWeakCopyInit();
  v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for CameraEffectSSAOController(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakCopyAssign();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for CameraEffectSSAOController(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
  swift_unknownObjectWeakTakeInit();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  return a1;
}

_QWORD *assignWithTake for CameraEffectSSAOController(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  swift_unknownObjectWeakTakeAssign();
  v4 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CameraEffectSSAOController()
{
  return &type metadata for CameraEffectSSAOController;
}

ValueMetadata *type metadata accessor for ParametricModelController()
{
  return &type metadata for ParametricModelController;
}

uint64_t _s3VFX16CameraControllerVwxx_0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *_s3VFX16CameraControllerVwcp_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  v6 = (void *)a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  v7 = a2[5];
  v8 = a2[6];
  a1[5] = v7;
  a1[6] = v8;
  swift_bridgeObjectRetain();
  v9 = v6;
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *_s3VFX16CameraControllerVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = (void *)a1[4];
  v6 = (void *)a2[4];
  a1[4] = v6;
  v7 = v6;

  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 _s3VFX16CameraControllerVwtk_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  v3 = swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(v3 + 8) = *(_QWORD *)(a2 + 8);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v3 + 32) = *(_QWORD *)(a2 + 32);
  result = *(__n128 *)(a2 + 40);
  *(__n128 *)(v3 + 40) = result;
  return result;
}

_QWORD *_s3VFX16CameraControllerVwta_0(_QWORD *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = (void *)a1[4];
  a1[4] = *(_QWORD *)(a2 + 32);

  v5 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s3VFX16CameraControllerVwet_0(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_1B1F77E30(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PhysicsBodyController()
{
  return &type metadata for PhysicsBodyController;
}

ValueMetadata *type metadata accessor for ForceFieldsController()
{
  return &type metadata for ForceFieldsController;
}

uint64_t destroy for MaterialController(id *a1)
{

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for MaterialController(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v4 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v5 = v4;
  swift_unknownObjectWeakCopyInit();
  v6 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  v7 = *(void **)(a2 + 40);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  a1[6] = v8;
  a1[7] = v9;
  swift_bridgeObjectRetain();
  v10 = v7;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MaterialController(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 40);
  v8 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = v8;

  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for MaterialController(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for MaterialController(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  swift_unknownObjectWeakTakeAssign();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MaterialController(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 16) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)(a1 + 8) & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MaterialController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      *(_QWORD *)(result + 16) = 1;
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialController()
{
  return &type metadata for MaterialController;
}

void destroy for ModelController(id *a1)
{

  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for ModelController(_QWORD *a1, uint64_t a2)
{
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;

  v4 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v5 = v4;
  swift_unknownObjectWeakCopyInit();
  v6 = *(_QWORD *)(a2 + 24);
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(void **)(a2 + 40);
  a1[4] = v7;
  a1[5] = v8;
  swift_bridgeObjectRetain();
  v9 = v8;
  return a1;
}

uint64_t assignWithCopy for ModelController(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v7 = *(void **)(a1 + 40);
  v8 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  v9 = v8;

  return a1;
}

uint64_t initializeWithTake for ModelController(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_unknownObjectWeakTakeInit();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for ModelController(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  swift_unknownObjectWeakTakeAssign();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for ModelController(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 16) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)(a1 + 8) & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ModelController(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      *(_QWORD *)(result + 16) = 1;
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ModelController()
{
  return &type metadata for ModelController;
}

ValueMetadata *type metadata accessor for WorldBackgroundController()
{
  return &type metadata for WorldBackgroundController;
}

ValueMetadata *type metadata accessor for WorldIBLController()
{
  return &type metadata for WorldIBLController;
}

ValueMetadata *type metadata accessor for WorldPhysicsController()
{
  return &type metadata for WorldPhysicsController;
}

uint64_t destroy for WorldFogController()
{
  swift_unknownObjectWeakDestroy();
  return swift_bridgeObjectRelease();
}

uint64_t _s3VFX22VFXBridgeableReferenceVwcp_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s3VFX22VFXBridgeableReferenceVwca_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for WorldFogController(uint64_t a1, __n128 *a2)
{
  __n128 *v3;
  __n128 result;

  v3 = (__n128 *)swift_unknownObjectWeakTakeInit();
  v3->n128_u64[1] = a2->n128_u64[1];
  result = a2[1];
  v3[1] = result;
  return result;
}

uint64_t _s3VFX22VFXBridgeableReferenceVwta_0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s3VFX22VFXBridgeableReferenceVwet_0(uint64_t a1, int a2)
{
  int v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  if ((*(_QWORD *)(a1 + 8) & 0xF000000000000007) != 0)
    v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  else
    v2 = -1;
  return (v2 + 1);
}

uint64_t sub_1B1F78590(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      *(_QWORD *)(result + 8) = 1;
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WorldFogController()
{
  return &type metadata for WorldFogController;
}

void _s3VFX15LightControllerVwxx_0(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

}

uint64_t _s3VFX15LightControllerVwcp_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v4 = swift_unknownObjectWeakCopyInit();
  v5 = a2[2];
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = v5;
  v6 = a2[3];
  v7 = (void *)a2[4];
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  v8 = v7;
  return a1;
}

uint64_t _s3VFX15LightControllerVwca_0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v4 = swift_unknownObjectWeakCopyAssign();
  *(_QWORD *)(v4 + 8) = a2[1];
  *(_QWORD *)(v4 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v5 = *(void **)(a1 + 32);
  v6 = (void *)a2[4];
  *(_QWORD *)(a1 + 32) = v6;
  v7 = v6;

  return a1;
}

uint64_t _s3VFX15LightControllerVwta_0(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  v4 = *(void **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);

  return a1;
}

ValueMetadata *type metadata accessor for MorpherController()
{
  return &type metadata for MorpherController;
}

uint64_t sub_1B1F7871C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraController);
  return a2;
}

uint64_t sub_1B1F78750(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectBloomController);
  return a2;
}

uint64_t sub_1B1F78784(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectToneMappingController);
  return a2;
}

uint64_t sub_1B1F787B8(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectExposureController);
  return a2;
}

uint64_t sub_1B1F787EC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectLensBlurController);
  return a2;
}

uint64_t sub_1B1F78820(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectGrainController);
  return a2;
}

uint64_t sub_1B1F78854(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectMotionBlurController);
  return a2;
}

uint64_t sub_1B1F78888(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectDepthOfFieldController);
  return a2;
}

uint64_t sub_1B1F788BC(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectChromaticTransformController);
  return a2;
}

uint64_t sub_1B1F788F0(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for CameraEffectDoughnutBokehController);
  return a2;
}

_QWORD *sub_1B1F78924(_QWORD *a1, _QWORD *a2)
{
  initializeWithCopy for CameraEffectSSAOController(a2, a1);
  return a2;
}

uint64_t sub_1B1F78958(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for CameraController(a2, a1, &type metadata for PhysicsBodyController);
  return a2;
}

uint64_t sub_1B1F7898C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LightController(a2, a1, &type metadata for ForceFieldsController);
  return a2;
}

_QWORD *sub_1B1F789C0(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for MaterialController(a2, a1);
  return a2;
}

_QWORD *sub_1B1F789F4(uint64_t a1, _QWORD *a2)
{
  initializeWithCopy for ModelController(a2, a1);
  return a2;
}

_QWORD *sub_1B1F78A28(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;

  swift_unknownObjectWeakCopyInit();
  v4 = a1[2];
  a2[1] = a1[1];
  a2[2] = v4;
  a2[3] = a1[3];
  swift_bridgeObjectRetain();
  return a2;
}

uint64_t sub_1B1F78A6C(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for LightController(a2, a1, &type metadata for MorpherController);
  return a2;
}

uint64_t sub_1B1F78AB8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B1F78B58(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *v15;
  id v16;
  _QWORD *v17;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    v12 = *(_QWORD *)v11;
    *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
    *(_QWORD *)v10 = v12;
    *(_BYTE *)(v10 + 9) = *(_BYTE *)(v11 + 9);
    v13 = (_QWORD *)((v10 + 17) & 0xFFFFFFFFFFFFF8);
    v14 = (v11 + 17) & 0xFFFFFFFFFFFFF8;
    v15 = *(void **)v14;
    v14 += 15;
    v16 = v15;
    *v13 = v15;
    v17 = (_QWORD *)(((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8);
    *v17 = *(_QWORD *)(v14 & 0xFFFFFFFFFFFFFFF8);
    v17[1] = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(_QWORD *)(((unint64_t)v17 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v14 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1B1F78C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();

  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F78CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;
  _QWORD *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (_QWORD *)((v7 + 17) & 0xFFFFFFFFFFFFF8);
  v11 = (v8 + 17) & 0xFFFFFFFFFFFFF8;
  v12 = *(void **)v11;
  v11 += 15;
  v13 = v12;
  *v10 = v12;
  v14 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *(_QWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  v14[1] = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((v11 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B1F78DB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  void **v10;
  id *v11;
  id v12;
  id v13;
  void *v14;
  _QWORD *v15;
  _QWORD *v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (void **)((v7 + 17) & 0xFFFFFFFFFFFFFFF8);
  v11 = (id *)((v8 + 17) & 0xFFFFFFFFFFFFF8);
  v12 = *v11;
  v13 = *v11;
  v14 = *v10;
  *v10 = v12;

  v15 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v16 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v16 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1F78E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  _QWORD *v10;
  _QWORD *v11;
  _OWORD *v12;
  _OWORD *v13;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (_QWORD *)((v7 + 17) & 0xFFFFFFFFFFFFF8);
  v11 = (_QWORD *)((v8 + 17) & 0xFFFFFFFFFFFFF8);
  *v10 = *v11;
  v12 = (_OWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  *(_QWORD *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B1F78F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;
  void **v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  v9 = *(_BYTE *)(v8 + 8);
  *(_QWORD *)v7 = *(_QWORD *)v8;
  *(_BYTE *)(v7 + 8) = v9;
  *(_BYTE *)(v7 + 9) = *(_BYTE *)(v8 + 9);
  v10 = (void **)((v7 + 17) & 0xFFFFFFFFFFFFFFF8);
  v11 = (void **)((v8 + 17) & 0xFFFFFFFFFFFFF8);
  v12 = *v10;
  *v10 = *v11;

  v13 = (_QWORD *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  v14 = (_QWORD *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  *v13 = *v14;
  v13[1] = v14[1];
  swift_bridgeObjectRelease();
  *(_QWORD *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_QWORD *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B1F7900C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0x7FFFFFFF)
    {
      v12 = *(_QWORD *)(((((((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)
                      + 8);
      if (v12 >= 0xFFFFFFFF)
        LODWORD(v12) = -1;
      return (v12 + 1);
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((((((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
         + 8) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1B1F790A0 + 4 * byte_1B22A6300[v10]))();
  }
}

void sub_1B1F79134(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0u;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((((((((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((((((((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_1B1F79240()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x1B1F792C8);
}

void sub_1B1F79248(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x1B1F79250);
  JUMPOUT(0x1B1F792C8);
}

void sub_1B1F792A4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1F792C8);
}

void sub_1B1F792AC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x1B1F792C8);
}

uint64_t sub_1B1F792B4(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_WORD *)(v6 + v7) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0x7FFFFFFF)
  {
    if (a2 < 0)
      JUMPOUT(0x1B1F792C0);
    *(_QWORD *)(((((((v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
              + 8) = (a2 - 1);
LABEL_6:
    JUMPOUT(0x1B1F792C8);
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 56))(v6);
}

uint64_t type metadata accessor for ScriptCompileAttempt(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B19E5E34(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ScriptCompileAttempt);
}

int *sub_1B1F792EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int *result;
  uint64_t v8;
  _QWORD *v9;

  (*(void (**)(void))(*(_QWORD *)(a2 + 8) + 8))();
  result = (int *)type metadata accessor for ScriptCompileAttempt(0, a1, a2, v6);
  v8 = a3 + result[9];
  *(_QWORD *)v8 = 0;
  *(_BYTE *)(v8 + 8) = 1;
  *(_BYTE *)(a3 + result[10]) = 0;
  *(_QWORD *)(a3 + result[11]) = 0;
  v9 = (_QWORD *)(a3 + result[12]);
  *v9 = 0;
  v9[1] = 0xE000000000000000;
  *(_QWORD *)(a3 + result[13]) = MEMORY[0x1E0DEE9D8];
  return result;
}

uint64_t sub_1B1F79378(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)(a3 + 24) + 192))(a1, a2, *(_QWORD *)(a3 + 16));
}

int *sub_1B1F79388@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1F792EC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_1B1F79394(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F300CC(*a1, *a2);
}

uint64_t sub_1B1F793A0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F7A76C();
  *a1 = result;
  return result;
}

void sub_1B1F793CC(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE500000000000000;
  v4 = 0xE700000000000000;
  v5 = 0x676E696E726177;
  if (v2 != 1)
  {
    v5 = 1702129518;
    v4 = 0xE400000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x726F727265;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B1F79420()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F794B4()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F79524()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F795B4()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F7960C()
{
  sub_1B222A078();
  return sub_1B222A078();
}

uint64_t sub_1B1F79644()
{
  sub_1B222A06C();
  sub_1B222A078();
  sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B1F79698(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

double sub_1B1F796B0()
{
  uint64_t v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  double result;

  sub_1B1F7A234();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B226E100;
  v1 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v2 = sub_1B1F7988C(0xD00000000000003ALL, 0x80000001B2345A60, 16);
  *(_QWORD *)(v0 + 32) = 0xD00000000000003ALL;
  *(_QWORD *)(v0 + 40) = 0x80000001B2345A60;
  *(_QWORD *)(v0 + 48) = 3;
  *(_BYTE *)(v0 + 56) = 0;
  *(_OWORD *)(v0 + 64) = xmmword_1B22A6540;
  *(_BYTE *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 2;
  *(_BYTE *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 104) = 4;
  *(_BYTE *)(v0 + 112) = 0;
  *(_QWORD *)(v0 + 120) = v2;
  v3 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v4 = sub_1B1F7988C(0xD00000000000001FLL, 0x80000001B2345AC0, 16);
  *(_QWORD *)(v0 + 128) = 0xD00000000000001FLL;
  *(_QWORD *)(v0 + 136) = 0x80000001B2345AC0;
  *(_QWORD *)(v0 + 144) = 3;
  *(_BYTE *)(v0 + 152) = 0;
  *(_OWORD *)(v0 + 160) = xmmword_1B2268BB0;
  *(_BYTE *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 2;
  *(_BYTE *)(v0 + 192) = 0;
  *(_QWORD *)(v0 + 200) = 0;
  *(_BYTE *)(v0 + 208) = 1;
  *(_QWORD *)(v0 + 216) = v4;
  v5 = objc_allocWithZone(MEMORY[0x1E0CB38E8]);
  v6 = sub_1B1F7988C(0xD000000000000013, 0x80000001B2345AE0, 16);
  *(_QWORD *)(v0 + 224) = 0xD000000000000013;
  *(_QWORD *)(v0 + 232) = 0x80000001B2345AE0;
  *(_QWORD *)(v0 + 240) = 1;
  *(_BYTE *)(v0 + 248) = 0;
  *(_QWORD *)&result = 2;
  *(_OWORD *)(v0 + 256) = xmmword_1B226E520;
  *(_BYTE *)(v0 + 272) = 1;
  *(_QWORD *)(v0 + 280) = 0;
  *(_BYTE *)(v0 + 288) = 1;
  *(_QWORD *)(v0 + 296) = 0;
  *(_BYTE *)(v0 + 304) = 1;
  *(_QWORD *)(v0 + 312) = v6;
  off_1EEF61580 = (_UNKNOWN *)v0;
  return result;
}

id sub_1B1F7988C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = (void *)sub_1B2228728();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithPattern_options_error_, v5, a3, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    sub_1B2227FB4();

    swift_willThrow();
  }
  return v6;
}

uint64_t sub_1B1F79964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  sub_1B1A06460();
  v0 = sub_1B2229214();
  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = 0;
    v3 = (_QWORD *)(v0 + 40);
    while ((*(v3 - 1) != 0xD00000000000001CLL || *v3 != 0x80000001B232FB60) && (sub_1B2229D24() & 1) == 0)
    {
      ++v2;
      v3 += 2;
      if (v1 == v2)
        goto LABEL_7;
    }
    swift_bridgeObjectRelease();
    return v2 + 2;
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    return 0;
  }
}

_QWORD *sub_1B1F79A5C(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int64x2_t v60;
  int64x2_t *v61;
  _BOOL8 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  int v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  char v78;
  int v79;
  _BYTE *v80;
  uint64_t v81;
  void *v82;

  sub_1B1A06460();
  v68 = *(_QWORD *)(sub_1B2229214() + 16);
  if (v68)
  {
    v5 = 0;
    v65 = (a4 & 1) == 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v7 = qword_1EEF574A0;
      swift_bridgeObjectRetain();
      if (v7 != -1)
        swift_once();
      v8 = off_1EEF61580;
      v9 = *((_QWORD *)off_1EEF61580 + 2);
      if (v9)
        break;
      swift_bridgeObjectRelease();
LABEL_4:
      if (++v5 == v68)
      {
        swift_bridgeObjectRelease();
        goto LABEL_50;
      }
    }
    v69 = v5;
    v70 = v6;
    swift_bridgeObjectRetain();
    v10 = 0;
    v80 = v8;
    while (1)
    {
      v72 = *(_QWORD *)&v8[v10 + 48];
      v71 = v8[v10 + 56];
      v75 = *(_QWORD *)&v8[v10 + 72];
      v76 = *(_QWORD *)&v8[v10 + 64];
      v78 = v8[v10 + 80];
      v74 = *(_QWORD *)&v8[v10 + 88];
      v73 = v8[v10 + 96];
      v11 = *(_QWORD *)&v8[v10 + 104];
      v12 = v8[v10 + 112];
      v13 = *(void **)&v8[v10 + 120];
      swift_bridgeObjectRetain();
      v14 = v13;
      v15 = (void *)sub_1B2228728();
      sub_1B1F7A190();
      sub_1B1F7A1EC();
      swift_bridgeObjectRetain();
      v16 = sub_1B2229040();
      v18 = objc_msgSend(v14, sel_firstMatchInString_options_range_, v15, 0, v16, v17);

      if (v18)
        break;

      swift_bridgeObjectRelease();
      v10 += 96;
      --v9;
      v8 = v80;
      if (!v9)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v6 = v70;
        goto LABEL_42;
      }
    }
    v67 = v12;
    v66 = v11;
    v82 = v14;
    swift_bridgeObjectRelease();
    objc_msgSend(v18, sel_rangeAtIndex_, v76);
    sub_1B2228E3C();
    v19 = sub_1B2228974();
    v20 = MEMORY[0x1B5E20388](v19);
    v81 = v21;
    swift_bridgeObjectRelease();
    if ((v78 & 1) != 0)
    {
      v22 = 0;
      v23 = 1;
    }
    else
    {
      objc_msgSend(v18, sel_rangeAtIndex_, v75);
      sub_1B2228E3C();
      v24 = sub_1B2228974();
      v25 = MEMORY[0x1B5E20388](v24);
      v27 = v26;
      swift_bridgeObjectRelease();
      v22 = sub_1B1DCCA1C(v25, v27);
      v23 = v28 & 1;
    }
    v79 = v23;
    v29 = v20;
    if ((v73 & 1) != 0)
    {
      v30 = 0;
      v31 = 1;
    }
    else
    {
      objc_msgSend(v18, sel_rangeAtIndex_, v74);
      sub_1B2228E3C();
      v32 = sub_1B2228974();
      v33 = MEMORY[0x1B5E20388](v32);
      v35 = v34;
      swift_bridgeObjectRelease();
      v30 = sub_1B1DCCA1C(v33, v35);
      v31 = v36 & 1;
    }
    v77 = v31;
    if ((v67 & 1) != 0)
    {
      v37 = 0;
      v38 = 1;
    }
    else
    {
      objc_msgSend(v18, sel_rangeAtIndex_, v66);
      sub_1B2228E3C();
      v39 = sub_1B2228974();
      v40 = MEMORY[0x1B5E20388](v39);
      v42 = v41;
      swift_bridgeObjectRelease();
      v37 = sub_1B1DCCA1C(v40, v42);
      v38 = v43 & 1;
    }
    if (v71)
    {
      swift_bridgeObjectRelease();
      v44 = 0;
LABEL_27:
      v49 = v77;
      goto LABEL_28;
    }
    objc_msgSend(v18, sel_rangeAtIndex_, v72);
    sub_1B2228E3C();
    v45 = sub_1B2228974();
    v46 = MEMORY[0x1B5E20388](v45);
    v48 = v47;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v46 == 0x676E696E726177 && v48 == 0xE700000000000000 || (sub_1B2229D24() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v44 = 1;
      goto LABEL_27;
    }
    if (v46 == 1702129518 && v48 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      v49 = v77;
    }
    else
    {
      v56 = sub_1B2229D24();
      swift_bridgeObjectRelease();
      v44 = 0;
      v49 = v77;
      if ((v56 & 1) == 0)
        goto LABEL_28;
    }
    v44 = 2;
LABEL_28:
    if (v79)
      v50 = 1;
    else
      v50 = v22;
    v51 = v65 + v50;
    if (v65 + v50 <= 1)
      v51 = 1;
    if (v38)
      v37 = v51;
    v6 = v70;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (v49)
      v30 = 1;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v6 = sub_1B1C67A60(0, v70[2] + 1, 1, v70);
    v54 = v6[2];
    v53 = v6[3];
    if (v54 >= v53 >> 1)
      v6 = sub_1B1C67A60(v53 > 1, v54 + 1, 1, v6);
    v6[2] = v54 + 1;
    v55 = &v6[7 * v54];
    v55[4] = v37;
    v55[5] = v30;
    v55[6] = v50;
    v55[7] = v30;
    *((_BYTE *)v55 + 64) = v44;
    v55[9] = v29;
    v55[10] = v81;

    swift_bridgeObjectRelease();
LABEL_42:
    v5 = v69;
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_50:
  v57 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v57 = a1 & 0xFFFFFFFFFFFFLL;
  if (v57 && !v6[2])
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v6 = sub_1B1C67A60(0, 1, 1, v6);
    v59 = v6[2];
    v58 = v6[3];
    if (v59 >= v58 >> 1)
      v6 = sub_1B1C67A60(v58 > 1, v59 + 1, 1, v6);
    v6[2] = v59 + 1;
    v60 = vdupq_n_s64(1uLL);
    v61 = (int64x2_t *)&v6[7 * v59];
    v61[2] = v60;
    v61[3] = v60;
    v61[4].i8[0] = 0;
    v61[4].i64[1] = a1;
    v61[5].i64[0] = a2;
  }
  return v6;
}

void sub_1B1F7A190()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF61588)
  {
    v0 = sub_1B2228E48();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF61588);
  }
}

unint64_t sub_1B1F7A1EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF61590;
  if (!qword_1EEF61590)
  {
    sub_1B1F7A190();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEB8A8], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF61590);
  }
  return result;
}

void sub_1B1F7A234()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1EEF61598)
  {
    v0 = sub_1B2229A18();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1EEF61598);
  }
}

void destroy for DiagnosticsFormat(uint64_t a1)
{
  swift_bridgeObjectRelease();

}

uint64_t initializeWithCopy for DiagnosticsFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v5 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v5;
  swift_bridgeObjectRetain();
  v6 = v5;
  return a1;
}

uint64_t assignWithCopy for DiagnosticsFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v6;
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v7;
  v8 = *(void **)(a2 + 88);
  v9 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v8;
  v10 = v8;

  return a1;
}

uint64_t assignWithTake for DiagnosticsFormat(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v6 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);

  return a1;
}

uint64_t getEnumTagSinglePayload for DiagnosticsFormat(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagnosticsFormat(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticsFormat()
{
  return &type metadata for DiagnosticsFormat;
}

uint64_t destroy for ScriptDiagnostic()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ScriptDiagnostic(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ScriptDiagnostic(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ScriptDiagnostic(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for ScriptDiagnostic()
{
  return &type metadata for ScriptDiagnostic;
}

uint64_t storeEnumTagSinglePayload for ScriptDiagnostic.Kind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1F7A64C + 4 * byte_1B22A6314[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1F7A680 + 4 * byte_1B22A630F[v4]))();
}

uint64_t sub_1B1F7A680(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F7A688(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F7A690);
  return result;
}

uint64_t sub_1B1F7A69C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F7A6A4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1F7A6A8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F7A6B0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScriptDiagnostic.Kind()
{
  return &type metadata for ScriptDiagnostic.Kind;
}

ValueMetadata *type metadata accessor for ScriptDiagnostic.SourceLocation()
{
  return &type metadata for ScriptDiagnostic.SourceLocation;
}

unint64_t sub_1B1F7A6E0()
{
  unint64_t result;

  result = qword_1EEF615A0;
  if (!qword_1EEF615A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6438, &type metadata for ScriptDiagnostic.SourceLocation);
    atomic_store(result, (unint64_t *)&qword_1EEF615A0);
  }
  return result;
}

unint64_t sub_1B1F7A728()
{
  unint64_t result;

  result = qword_1EEF615A8;
  if (!qword_1EEF615A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6518, &type metadata for ScriptDiagnostic.Kind);
    atomic_store(result, (unint64_t *)&qword_1EEF615A8);
  }
  return result;
}

uint64_t sub_1B1F7A76C()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B1F7A7B4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v22;

  if (!a2)
    goto LABEL_8;
  v5 = a3;
  if (!a3)
    goto LABEL_11;
  v6 = *(_QWORD *)(v3 + 16);
  if (!*(_QWORD *)(v6 + 16))
  {
LABEL_8:
    v5 = 0;
    goto LABEL_11;
  }
  v7 = a2;
  v8 = 0;
  v9 = 1;
  for (i = 88; ; i += 64)
  {
    v11 = *(_QWORD *)(v6 + i - 48);
    v12 = *(_QWORD *)(v6 + i - 8);
    v13 = *(_QWORD *)(v3 + 24) + v8;
    v14 = *(_BYTE *)(v13 + 96);
    v22 = *(_BYTE *)(v6 + i);
    v15 = *(_OWORD *)(v6 + i - 40);
    v16 = *(_OWORD *)(v6 + i - 24);
    v17 = *(_OWORD *)(v13 + 32);
    v18 = *(_OWORD *)(v13 + 48);
    v19 = *(_OWORD *)(v13 + 64);
    v20 = *(_OWORD *)(v13 + 80);
    *(_QWORD *)v7 = *(_QWORD *)(v6 + i - 56);
    *(_QWORD *)(v7 + 8) = v11;
    *(_OWORD *)(v7 + 16) = v15;
    *(_OWORD *)(v7 + 32) = v16;
    *(_QWORD *)(v7 + 48) = v12;
    *(_BYTE *)(v7 + 56) = v22;
    *(_OWORD *)(v7 + 64) = v17;
    *(_OWORD *)(v7 + 80) = v18;
    *(_OWORD *)(v7 + 96) = v19;
    *(_OWORD *)(v7 + 112) = v20;
    *(_BYTE *)(v7 + 128) = v14;
    if (v5 == v9)
    {
      swift_bridgeObjectRetain();
      goto LABEL_11;
    }
    v6 = *(_QWORD *)(v3 + 16);
    if (v9 == *(_QWORD *)(v6 + 16))
      break;
    v7 += 144;
    ++v9;
    swift_bridgeObjectRetain();
    v8 += 80;
  }
  swift_bridgeObjectRetain();
  v5 = v9;
LABEL_11:
  *a1 = v3;
  a1[1] = v5;
  return v5;
}

uint64_t sub_1B1F7A8B4(_QWORD *a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t v6;

  if (!a2)
  {
    v5 = 0;
    goto LABEL_10;
  }
  if (!a3)
    goto LABEL_8;
  v5 = a5;
  if (!a5)
    goto LABEL_10;
  *a2 = *a4 & 1;
  if (a3 == 1)
  {
LABEL_8:
    v5 = a3;
    goto LABEL_10;
  }
  v6 = 1;
  while (a5 != v6)
  {
    a2[v6] = (*(_QWORD *)&a4[(v6 >> 3) & 0xFFFFFFFFFFFFF8] >> v6) & 1;
    if (a3 == ++v6)
      goto LABEL_8;
  }
  v5 = a5;
LABEL_10:
  *a1 = a4;
  a1[1] = a5;
  a1[2] = v5;
  return v5;
}

uint64_t sub_1B1F7A930(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  unint64_t v14;
  uint64_t result;
  uint64_t v17;
  id v18;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v3 = sub_1B22296AC();
    if (v3)
      goto LABEL_3;
LABEL_27:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v3)
    goto LABEL_27;
LABEL_3:
  v4 = 0;
  v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  do
  {
    if ((a1 & 0xC000000000000001) != 0)
      v6 = (id)MEMORY[0x1B5E21018](v4, a1);
    else
      v6 = *(id *)(a1 + 8 * v4 + 32);
    v7 = v6;
    v18 = v6;
    sub_1B1F7F0A8(&v18, &v17);
    if (v1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      return (uint64_t)v5;
    }

    v8 = v17;
    v9 = *(_QWORD *)(v17 + 16);
    v10 = v5[2];
    v11 = v10 + v9;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v11 <= v5[3] >> 1)
    {
      if (!*(_QWORD *)(v8 + 16))
        goto LABEL_4;
    }
    else
    {
      if (v10 <= v11)
        v13 = v10 + v9;
      else
        v13 = v10;
      v5 = sub_1B1C67DE0(isUniquelyReferenced_nonNull_native, v13, 1, v5);
      if (!*(_QWORD *)(v8 + 16))
        goto LABEL_4;
    }
    v14 = (unint64_t)&v5[8 * v5[2] + 4];
    if (v8 + 32 < v14 + (v9 << 6) && v14 < v8 + 32 + (v9 << 6))
    {
      result = sub_1B2229700();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
    if (v9)
      v5[2] += v9;
LABEL_4:
    swift_bridgeObjectRelease();
    ++v4;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  return (uint64_t)v5;
}

uint64_t sub_1B1F7AB50(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;

  v4 = sub_1B1F84570();

  return v4;
}

void sub_1B1F7AB8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v9 = 0;
    v10 = (_QWORD *)(v5 + 32);
    v11 = 96;
    while (1)
    {
      v12 = *v10 == a1 && v10[1] == a2;
      if (v12 || (sub_1B2229D24() & 1) != 0)
        break;
      ++v9;
      v11 += 80;
      v10 += 8;
      if (v6 == v9)
        goto LABEL_9;
    }
    v13 = *(_QWORD *)(v3 + 24);
    if (v9 >= *(_QWORD *)(v13 + 16))
    {
      sub_1B1F7CDE8((uint64_t *)a3);
    }
    else
    {
      v14 = (char *)(v13 + v11);
      v15 = *((_QWORD *)v14 - 8);
      if (*v14 < 0)
      {
        *(_QWORD *)(a3 + 24) = &type metadata for Entity;
        *(_QWORD *)a3 = v15;
      }
      else
      {
        sub_1B1B29638();
      }
    }
  }
  else
  {
LABEL_9:
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

uint64_t sub_1B1F7ACC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v7;
  int v8;
  uint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  char *v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE v40[80];
  _BYTE v41[80];
  _BYTE v42[80];
  _BYTE v43[64];
  char v44;
  _OWORD v45[3];
  uint64_t v46;
  char v47;
  _OWORD v48[2];
  _OWORD v49[2];

  v4 = v3;
  sub_1B1A02864(a3, (uint64_t)v45);
  sub_1B210BC94((uint64_t)v45, (uint64_t)v40);
  sub_1B1A18378((uint64_t)v40, (uint64_t)v41, &qword_1EEF63450, (uint64_t)&type metadata for ShaderParameter);
  if (v41[64] > 0xEFu)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v45[0] = 0;
    *((_QWORD *)&v45[0] + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    sub_1B22295EC();
    sub_1B2228890();
    sub_1B2228890();
    v7 = v45[0];
    v8 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v45[0] = 0;
    swift_retain();
    sub_1B1F1AD70(v8, (uint64_t *)v45, v7, *((uint64_t *)&v7 + 1));
    swift_release();
    goto LABEL_25;
  }
  sub_1B1B9A484((uint64_t)v41, (uint64_t)v42);
  v9 = *(_QWORD *)(v3 + 16);
  result = sub_1B1F84094(*(_QWORD *)(v4 + 16), a1, a2);
  if ((v11 & 1) != 0)
    return result;
  v12 = result;
  sub_1B1B9A484((uint64_t)v42, (uint64_t)v43);
  if (v44 < 0)
  {
    v44 &= ~0x80u;
    if (*(_BYTE *)(v9 + (v12 << 6) + 88) != 1)
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      *(_QWORD *)&v45[0] = 0;
      *((_QWORD *)&v45[0] + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      v48[0] = v45[0];
      sub_1B2228890();
      v26 = *(_QWORD *)(v4 + 16) + (v12 << 6);
      v27 = *(_QWORD *)(v26 + 40);
      v28 = *(_QWORD *)(v26 + 80);
      v29 = *(_BYTE *)(v26 + 88);
      v30 = *(_OWORD *)(v26 + 48);
      v31 = *(_OWORD *)(v26 + 64);
      *(_QWORD *)&v45[0] = *(_QWORD *)(v26 + 32);
      *((_QWORD *)&v45[0] + 1) = v27;
      v45[1] = v30;
      v45[2] = v31;
      v46 = v28;
      v47 = v29;
      sub_1B22295EC();
      v20 = *((_QWORD *)&v48[0] + 1);
      v21 = *(_QWORD *)&v48[0];
      v22 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      *(_QWORD *)&v45[0] = 0;
      swift_retain();
      v23 = (uint64_t *)v45;
      goto LABEL_24;
    }
  }
  else
  {
    sub_1B1B2A86C((uint64_t)v43, (uint64_t)v45);
    v13 = (_OWORD *)(v9 + (v12 << 6));
    v48[0] = v13[2];
    v48[1] = v13[3];
    v49[0] = v13[4];
    *(_OWORD *)((char *)v49 + 9) = *(_OWORD *)((char *)v13 + 73);
    if (!sub_1B1B2A144((uint64_t)v48))
    {
      if (qword_1ED4BF430 != -1)
        swift_once();
      v32 = 0;
      v33 = 0xE000000000000000;
      swift_retain();
      sub_1B2229430();
      v38 = 0;
      v39 = 0xE000000000000000;
      sub_1B1B292F0();
      sub_1B2228890();
      swift_bridgeObjectRelease();
      sub_1B2228890();
      v14 = *(_QWORD *)(v4 + 16) + (v12 << 6);
      v15 = *(_QWORD *)(v14 + 40);
      v16 = *(_QWORD *)(v14 + 80);
      v17 = *(_BYTE *)(v14 + 88);
      v18 = *(_OWORD *)(v14 + 48);
      v19 = *(_OWORD *)(v14 + 64);
      v32 = *(_QWORD *)(v14 + 32);
      v33 = v15;
      v34 = v18;
      v35 = v19;
      v36 = v16;
      v37 = v17;
      sub_1B22295EC();
      v21 = 0;
      v20 = 0xE000000000000000;
      v22 = sub_1B2228E90();
      if (qword_1ED4BF658 != -1)
        swift_once();
      v32 = 0;
      swift_retain();
      v23 = &v32;
LABEL_24:
      sub_1B1F1AD70(v22, v23, v21, v20);
      swift_release();
LABEL_25:
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }
  v24 = *(char **)(v4 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v4 + 24) = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v24 = sub_1B1FFEDB8((uint64_t)v24);
  result = sub_1B1B9A484((uint64_t)v42, (uint64_t)&v24[80 * v12 + 32]);
  *(_QWORD *)(v4 + 24) = v24;
  return result;
}

uint64_t sub_1B1F7B1A8()
{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  ValueMetadata *v8;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _OWORD v17[2];
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v18 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202B020(0, v2, 0);
    v4 = v1 + 64;
    while (1)
    {
      v5 = *(_QWORD *)(v4 - 32);
      v6 = *(_QWORD *)(v4 - 24);
      if (*(_BYTE *)(v4 + 24) == 1)
      {
        swift_bridgeObjectRetain_n();
        v7 = 8;
        v8 = &type metadata for Entity;
      }
      else
      {
        v9 = *(_QWORD *)v4;
        sub_1B1F9D2B0(*(_QWORD *)v4);
        v8 = v10;
        if (v9 == 3)
        {
          *(_QWORD *)&v17[0] = v5;
          *((_QWORD *)&v17[0] + 1) = v6;
          sub_1B1A06460();
          swift_bridgeObjectRetain_n();
          if ((sub_1B2229250() & 1) == 0)
            goto LABEL_14;
          v7 = 3;
        }
        else
        {
          if (v9 != 6)
          {
            swift_bridgeObjectRetain_n();
LABEL_14:
            v7 = 1;
            goto LABEL_15;
          }
          *(_QWORD *)&v17[0] = v5;
          *((_QWORD *)&v17[0] + 1) = v6;
          sub_1B1A06460();
          swift_bridgeObjectRetain_n();
          if ((sub_1B2229250() & 1) != 0)
          {
            v7 = 6;
          }
          else
          {
            *(_QWORD *)&v17[0] = v5;
            *((_QWORD *)&v17[0] + 1) = v6;
            if ((sub_1B2229250() & 1) == 0)
              goto LABEL_14;
            v7 = 7;
          }
        }
      }
LABEL_15:
      memset(v17, 0, sizeof(v17));
      v11 = sub_1B1A23334((uint64_t)v8, (uint64_t)v17, v5, v6, 0, 1, 0, 1, 0, 1, v7, 0, 0, 0, 0, (uint64_t)&type metadata for Material, (uint64_t)v8, (uint64_t)&off_1E63C1AD0);
      sub_1B1A0DD70((uint64_t)v17);
      swift_bridgeObjectRelease();
      v3 = v18;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B202B020(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v18;
      }
      v13 = *(_QWORD *)(v3 + 16);
      v12 = *(_QWORD *)(v3 + 24);
      if (v13 >= v12 >> 1)
      {
        sub_1B202B020(v12 > 1, v13 + 1, 1);
        v3 = v18;
      }
      *(_QWORD *)(v3 + 16) = v13 + 1;
      v14 = (_QWORD *)(v3 + 24 * v13);
      v14[4] = v5;
      v14[5] = v6;
      v14[6] = v11;
      v4 += 64;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  v15 = sub_1B1F84174(v3);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1B1F7B494(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  BOOL v12;
  ValueMetadata *v13;
  ValueMetadata *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  __int128 v19;
  char *v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v23;
  _OWORD v24[4];
  char v25;

  v4 = *(_QWORD *)(v3 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
    return 0;
  v9 = 0;
  v10 = v4 + 64;
  for (i = 96; ; i += 80)
  {
    v12 = *(_QWORD *)(v10 - 32) == a1 && *(_QWORD *)(v10 - 24) == a2;
    if (v12 || (sub_1B2229D24() & 1) != 0)
      break;
    ++v9;
    v10 += 64;
    if (v5 == v9)
      return 0;
  }
  if ((*(_BYTE *)(v10 + 24) & 1) != 0)
    v13 = &type metadata for Entity;
  else
    sub_1B1F9D2B0(*(_QWORD *)v10);
  if (v13 == (ValueMetadata *)(MEMORY[0x1E0DEE9C0] + 8))
    return 0;
  if ((*(_BYTE *)(v10 + 24) & 1) != 0)
  {
    if (&type metadata for Entity == a3)
      goto LABEL_18;
    return 0;
  }
  sub_1B1F9D2B0(*(_QWORD *)v10);
  if (v14 != a3)
    return 0;
LABEL_18:
  v15 = *(_QWORD *)(v3 + 24);
  if (v9 >= *(_QWORD *)(v15 + 16))
    return 0;
  v16 = v15 + i;
  v17 = *(char *)(v15 + i);
  if (v17 < 0)
    return 0;
  v18 = *(_OWORD *)(v16 - 48);
  v24[0] = *(_OWORD *)(v16 - 64);
  v24[1] = v18;
  v19 = *(_OWORD *)(v16 - 16);
  v24[2] = *(_OWORD *)(v16 - 32);
  v24[3] = v19;
  v25 = v17;
  v23 = 0;
  sub_1B1B2927C((uint64_t)v24, &v23);
  if (v23 < 1)
    return 0;
  v20 = *(char **)(v3 + 24);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(_QWORD *)(v3 + 24) = v20;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v20 = sub_1B1FFEDB8((uint64_t)v20);
  result = (uint64_t)&v20[i - 64];
  *(_QWORD *)(v3 + 24) = v20;
  return result;
}

uint64_t sub_1B1F7B60C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char **v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(void);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  void (*v54)(_QWORD *, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  char *v67;
  char **v68;
  char *v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char v82;
  char v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  char v88;
  int v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char **v110;
  char *v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char *v124;
  uint64_t v125;
  void (*v126)(char *, uint64_t);
  uint64_t result;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t *v142;
  uint64_t v143;
  void (*v144)(char *, char *, uint64_t);
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  char **v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t v163;
  _QWORD v164[4];
  _QWORD v165[8];
  unsigned __int8 v166;
  _BYTE v167[80];
  uint64_t v168[10];
  _OWORD v169[4];
  char v170;

  sub_1B1F84704();
  v157 = v2;
  MEMORY[0x1E0C80A78](v2, v3);
  v156 = (char *)&v128 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5, v6);
  v146 = (uint64_t)&v128 - v7;
  sub_1B1A02758(0, &qword_1ED4BAA28, (uint64_t)&type metadata for ShaderArgument, MEMORY[0x1E0DECDE0]);
  v9 = v8;
  v148 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v145 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12, v13);
  v132 = (char *)&v128 - v14;
  MEMORY[0x1E0C80A78](v15, v16);
  v131 = (char *)&v128 - v17;
  v18 = *(_QWORD *)(a1 + 16);
  v19 = MEMORY[0x1E0DEE9D8];
  v147 = v20;
  v130 = a1;
  if (v18)
  {
    *(_QWORD *)&v169[0] = MEMORY[0x1E0DEE9D8];
    sub_1B202B03C(0, v18, 0);
    v19 = *(_QWORD *)&v169[0];
    v21 = (unsigned __int8 *)(a1 + 88);
    do
    {
      v22 = *((_QWORD *)v21 - 7);
      v23 = *((_QWORD *)v21 - 6);
      v25 = *((_QWORD *)v21 - 4);
      v24 = *((_QWORD *)v21 - 3);
      v159 = (char **)*((_QWORD *)v21 - 2);
      v160 = v24;
      v158 = *((_QWORD *)v21 - 1);
      LODWORD(v161) = *v21;
      *(_QWORD *)&v169[0] = v19;
      v27 = *(_QWORD *)(v19 + 16);
      v26 = *(_QWORD *)(v19 + 24);
      v28 = v19;
      swift_bridgeObjectRetain();
      v19 = v28;
      if (v27 >= v26 >> 1)
      {
        sub_1B202B03C(v26 > 1, v27 + 1, 1);
        v19 = *(_QWORD *)&v169[0];
      }
      *(_QWORD *)(v19 + 16) = v27 + 1;
      v29 = v19 + (v27 << 6);
      *(_QWORD *)(v29 + 32) = v22;
      *(_QWORD *)(v29 + 40) = v23;
      *(_QWORD *)(v29 + 48) = -1;
      *(_QWORD *)(v29 + 56) = v25;
      v30 = v159;
      *(_QWORD *)(v29 + 64) = v160;
      *(_QWORD *)(v29 + 72) = v30;
      *(_QWORD *)(v29 + 80) = v158;
      v21 += 64;
      *(_BYTE *)(v29 + 88) = v161;
      --v18;
    }
    while (v18);
    v9 = v147;
    a1 = v130;
  }
  v31 = *(_QWORD *)(v133 + 16);
  v32 = *(_QWORD *)(v31 + 16);
  v33 = MEMORY[0x1E0DEE9D8];
  if (v32)
  {
    v155 = v19;
    *(_QWORD *)&v169[0] = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    sub_1B202B03C(0, v32, 0);
    v33 = *(_QWORD *)&v169[0];
    v154 = v31;
    v34 = (unsigned __int8 *)(v31 + 88);
    do
    {
      v35 = *((_QWORD *)v34 - 7);
      v36 = *((_QWORD *)v34 - 6);
      v37 = *((_QWORD *)v34 - 4);
      v38 = *((_QWORD *)v34 - 2);
      v159 = (char **)*((_QWORD *)v34 - 3);
      v160 = v37;
      v158 = *((_QWORD *)v34 - 1);
      LODWORD(v161) = *v34;
      *(_QWORD *)&v169[0] = v33;
      v40 = *(_QWORD *)(v33 + 16);
      v39 = *(_QWORD *)(v33 + 24);
      swift_bridgeObjectRetain();
      if (v40 >= v39 >> 1)
      {
        sub_1B202B03C(v39 > 1, v40 + 1, 1);
        v33 = *(_QWORD *)&v169[0];
      }
      *(_QWORD *)(v33 + 16) = v40 + 1;
      v41 = v33 + (v40 << 6);
      *(_QWORD *)(v41 + 32) = v35;
      *(_QWORD *)(v41 + 40) = v36;
      v42 = v160;
      *(_QWORD *)(v41 + 48) = -1;
      *(_QWORD *)(v41 + 56) = v42;
      *(_QWORD *)(v41 + 64) = v159;
      *(_QWORD *)(v41 + 72) = v38;
      *(_QWORD *)(v41 + 80) = v158;
      v34 += 64;
      *(_BYTE *)(v41 + 88) = v161;
      --v32;
    }
    while (v32);
    swift_bridgeObjectRelease();
    v9 = v147;
    a1 = v130;
    v19 = v155;
  }
  *(_QWORD *)&v169[0] = v19;
  v168[0] = v33;
  v43 = MEMORY[0x1E0DEAEC8];
  sub_1B1A02758(0, &qword_1ED4BA3B8, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1F847A4(&qword_1ED4BA3C0, &qword_1ED4BA3B8, (uint64_t (*)(_QWORD, uint64_t))v43, MEMORY[0x1E0DEAF20]);
  sub_1B2228638();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B1F847F0();
  v44 = v132;
  sub_1B222970C();
  v134 = sub_1B1B95870(MEMORY[0x1E0DEE9D8]);
  v45 = (uint64_t)v156;
  v144 = *(void (**)(char *, char *, uint64_t))(v148 + 16);
  v144(v156, v44, v9);
  v46 = sub_1B1F847A4(&qword_1ED4BAA20, &qword_1ED4BAA28, MEMORY[0x1E0DECDE0], MEMORY[0x1E0DECE10]);
  sub_1B2228D4C();
  v47 = v157;
  *(_QWORD *)(v45 + *(int *)(v157 + 36)) = *(_QWORD *)&v169[0];
  v48 = v146;
  sub_1B1F84834(v45, v146);
  v49 = (uint64_t *)(v48 + *(int *)(v47 + 36));
  v50 = *v49;
  sub_1B2228D88();
  if (v50 == v164[0])
  {
LABEL_51:
    sub_1B1F84888(v48);
    *(_QWORD *)(v133 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v124 = v131;
    sub_1B2228D4C();
    sub_1B2228D88();
    v125 = sub_1B2228D7C();
    v126 = *(void (**)(char *, uint64_t))(v148 + 8);
    v126(v132, v9);
    v126(v124, v9);
    swift_bridgeObjectRelease();
    return v125 > 0;
  }
  v159 = (char **)(v133 + 24);
  v142 = v49;
  v143 = v46;
  while (1)
  {
    v54 = (void (*)(_QWORD *, _QWORD))sub_1B2228E24();
    v56 = *(_QWORD *)v55;
    v57 = *(_QWORD *)(v55 + 8);
    v59 = *(_QWORD *)(v55 + 16);
    v58 = *(_QWORD *)(v55 + 24);
    v60 = *(_QWORD *)(v55 + 32);
    v61 = *(_QWORD *)(v55 + 40);
    v62 = *(_QWORD *)(v55 + 48);
    v63 = *(_QWORD *)(v55 + 56);
    v64 = *(_QWORD *)(v55 + 64);
    v65 = *(unsigned __int8 *)(v55 + 80);
    v66 = *(unsigned __int8 *)(v55 + 81);
    v158 = *(_QWORD *)(v55 + 72);
    v161 = v64;
    v157 = v56;
    v152 = v58;
    v153 = v60;
    v160 = v61;
    v154 = v63;
    v155 = v62;
    sub_1B1F84878();
    v54(v164, 0);
    v67 = v145;
    v144(v145, (char *)v48, v9);
    sub_1B2228D94();
    (*(void (**)(char *, uint64_t))(v148 + 8))(v67, v9);
    LODWORD(v149) = v66;
    LODWORD(v156) = v65;
    v150 = v57;
    v151 = v59;
    if (v66 != 1)
      break;
    v68 = v159;
    v69 = *v159;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v68 = v69;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v69 = sub_1B1FFEDB8((uint64_t)v69);
      *v159 = v69;
    }
    v71 = *((_QWORD *)v69 + 2) - 1;
    v72 = v157;
    if (v71 - v157 < 0)
      goto LABEL_52;
    v73 = &v69[80 * v157];
    v74 = *((_QWORD *)v73 + 4);
    v73 += 32;
    v141 = v73[64];
    v140 = *((_QWORD *)v73 + 7);
    v76 = *((_QWORD *)v73 + 5);
    v75 = *((_QWORD *)v73 + 6);
    v138 = v74;
    v139 = v75;
    v78 = *((_QWORD *)v73 + 3);
    v77 = *((_QWORD *)v73 + 4);
    v80 = *((_QWORD *)v73 + 1);
    v79 = *((_QWORD *)v73 + 2);
    memmove(v73, v73 + 80, 80 * (v71 - v157));
    *((_QWORD *)v69 + 2) = v71;
    *v159 = v69;
    v9 = v147;
    if ((v156 & 1) != 0)
    {
LABEL_17:
      sub_1B1F84880();
      v53 = *v142;
      v48 = v146;
      sub_1B2228D88();
      if (v53 == v164[0])
      {
        a1 = v130;
        goto LABEL_51;
      }
    }
    else
    {
      v136 = v80;
      v137 = v79;
      v149 = v78;
      v129 = v77;
      v135 = v76;
      v81 = v134;
      v82 = swift_isUniquelyReferenced_nonNull_native();
      v164[0] = v81;
      v84 = sub_1B1DC3AC8(v72);
      v85 = v81[2] + ((v83 & 1) == 0);
      if (v81[3] >= v85)
      {
        v91 = v129;
        a1 = v130;
        v96 = v141;
        v92 = v139;
        v93 = v140;
        v118 = v82;
        v94 = v135;
        v99 = v136;
        v98 = v137;
        v95 = v138;
        v97 = v149;
        if ((v118 & 1) == 0)
        {
          v134 = (_QWORD *)v84;
          v123 = v83;
          sub_1B1EAA9D8();
          v83 = v123;
          v84 = (unint64_t)v134;
          v99 = v136;
          v98 = v137;
          v97 = v149;
          v96 = v141;
        }
      }
      else
      {
        v86 = v83;
        sub_1B1E95854(v85, v82);
        v87 = sub_1B1DC3AC8(v72);
        v89 = v88 & 1;
        v83 = v86;
        v90 = v86 & 1;
        v91 = v129;
        a1 = v130;
        v92 = v139;
        v93 = v140;
        v94 = v135;
        v95 = v138;
        if (v90 != v89)
          goto LABEL_53;
        v84 = v87;
        v96 = v141;
        v97 = v149;
        v99 = v136;
        v98 = v137;
      }
      v119 = (_QWORD *)v164[0];
      v134 = (_QWORD *)v164[0];
      if ((v83 & 1) != 0)
      {
        v120 = *(_QWORD *)(v164[0] + 56) + 80 * v84;
        *(_QWORD *)v120 = v95;
        *(_QWORD *)(v120 + 8) = v99;
        *(_QWORD *)(v120 + 16) = v98;
        *(_QWORD *)(v120 + 24) = v97;
        *(_QWORD *)(v120 + 32) = v91;
        *(_QWORD *)(v120 + 40) = v94;
        *(_QWORD *)(v120 + 48) = v92;
        *(_QWORD *)(v120 + 56) = v93;
        *(_BYTE *)(v120 + 64) = v96;
      }
      else
      {
        *(_QWORD *)(v164[0] + 8 * (v84 >> 6) + 64) |= 1 << v84;
        *(_QWORD *)(v119[6] + 8 * v84) = v157;
        v121 = v119[7] + 80 * v84;
        *(_QWORD *)v121 = v95;
        *(_QWORD *)(v121 + 8) = v99;
        *(_QWORD *)(v121 + 16) = v98;
        *(_QWORD *)(v121 + 24) = v97;
        *(_QWORD *)(v121 + 32) = v91;
        *(_QWORD *)(v121 + 40) = v94;
        *(_QWORD *)(v121 + 48) = v92;
        *(_QWORD *)(v121 + 56) = v93;
        *(_BYTE *)(v121 + 64) = v96;
        ++v119[2];
      }
      swift_bridgeObjectRelease();
      sub_1B1F84880();
      v122 = *v142;
      v48 = v146;
      sub_1B2228D88();
      if (v122 == v164[0])
        goto LABEL_51;
    }
  }
  if ((v65 & 1) == 0)
  {
    if (v134[2])
    {
      v100 = sub_1B1DC3AC8(v158);
      if ((v101 & 1) != 0)
      {
        v51 = v134[7] + 80 * v100;
        v52 = *(_BYTE *)(v51 + 64);
        v169[0] = *(_OWORD *)v51;
        v169[1] = *(_OWORD *)(v51 + 16);
        v169[2] = *(_OWORD *)(v51 + 32);
        v169[3] = *(_OWORD *)(v51 + 48);
        v170 = v52;
        sub_1B1C91940(v157, v157, (uint64_t)v169);
LABEL_16:
        v9 = v147;
        goto LABEL_17;
      }
    }
  }
  if ((v161 & 1) != 0)
  {
    v103 = 0;
    v138 = 0;
    v139 = 0;
    v136 = 0;
    v137 = 0;
    v135 = 0;
    v102 = 0;
    v104 = 128;
LABEL_34:
    v141 = v104;
    v140 = 0xFFFFFFFFLL;
    goto LABEL_37;
  }
  v164[0] = v57;
  v164[1] = v59;
  v162 = 0x726F6C6F63;
  v163 = 0xE500000000000000;
  sub_1B1A06460();
  if ((sub_1B2229250() & 1) == 0 || v160 != 6)
  {
    sub_1B1B2AE34(v160, (uint64_t)v165);
    v103 = v165[1];
    v140 = v165[0];
    v105 = v165[2];
    v106 = v165[3];
    v107 = v165[4];
    v108 = v165[5];
    v109 = v165[6];
    v102 = v165[7];
    v141 = v166;
    sub_1B1A18378((uint64_t)v165, (uint64_t)v167, (unint64_t *)&qword_1ED4BA1B8, (uint64_t)&type metadata for DataValue);
    if (v167[64] != 255)
    {
      v135 = v109;
      v136 = v108;
      v138 = v107;
      v139 = v105;
      v137 = v106;
      sub_1B1B2A86C((uint64_t)v167, (uint64_t)v168);
      goto LABEL_37;
    }
    v103 = 0;
    v138 = 0;
    v139 = 0;
    v136 = 0;
    v137 = 0;
    v135 = 0;
    v102 = 0;
    v104 = 14;
    goto LABEL_34;
  }
  v138 = 0;
  v139 = 0;
  v136 = 0;
  v137 = 0;
  v135 = 0;
  v102 = 0;
  v141 = 3;
  v140 = 0x3F8000003F800000;
  v103 = 0x3F8000003F800000;
LABEL_37:
  v110 = v159;
  v111 = *v159;
  v112 = *((_QWORD *)*v159 + 2);
  v113 = swift_isUniquelyReferenced_nonNull_native();
  *v110 = v111;
  if (!v113 || v112 >= *((_QWORD *)v111 + 3) >> 1)
  {
    v111 = sub_1B1C63FA8(v113, v112 + 1, 1, v111);
    *v159 = v111;
  }
  v114 = *((_QWORD *)v111 + 2) - v157;
  if (v114 >= 0)
  {
    v115 = &v111[80 * v157];
    memmove(v115 + 112, v115 + 32, 80 * v114);
    ++*((_QWORD *)v111 + 2);
    *((_QWORD *)v115 + 4) = v140;
    *((_QWORD *)v115 + 5) = v103;
    v116 = v137;
    *((_QWORD *)v115 + 6) = v139;
    *((_QWORD *)v115 + 7) = v116;
    v117 = v136;
    *((_QWORD *)v115 + 8) = v138;
    *((_QWORD *)v115 + 9) = v117;
    *((_QWORD *)v115 + 10) = v135;
    *((_QWORD *)v115 + 11) = v102;
    v115[96] = v141;
    *v159 = v111;
    goto LABEL_16;
  }
LABEL_52:
  sub_1B2229700();
  __break(1u);
LABEL_53:
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1F7C19C()
{
  qword_1ED4D0DB8 = 0;
  qword_1ED4D0DC0 = 0;
  qword_1ED4D0DB0 = MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1B1F7C1B8(uint64_t *a1, uint64_t *a2)
{
  return sub_1B1F836E0(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

uint64_t sub_1B1F7C1D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  if (qword_1ED4B9A18 != -1)
    swift_once();
  v0 = qword_1ED4D0DB0;
  v1 = qword_1ED4D0DB8;
  v2 = qword_1ED4D0DC0;
  swift_unknownObjectRetain_n();
  swift_bridgeObjectRetain_n();
  result = sub_1B1CC970C(v0, v0);
  qword_1ED4D0C10 = v0;
  *(_QWORD *)algn_1ED4D0C18 = v1;
  qword_1ED4D0C20 = v2;
  qword_1ED4D0C28 = v0;
  *(_QWORD *)&xmmword_1ED4D0C30 = v1;
  *((_QWORD *)&xmmword_1ED4D0C30 + 1) = v2;
  byte_1ED4D0C40 = result & 1;
  return result;
}

uint64_t sub_1B1F7C26C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v15 = a3;
  v16 = a5;
  v14 = a4;
  sub_1B19F8E54(0, &qword_1EEF616B8, (uint64_t (*)(void))sub_1B1F86310, (uint64_t)&type metadata for ShaderArgument.BufferDesc.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v14 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F86310();
  sub_1B222A180();
  v21 = 0;
  sub_1B2229940();
  if (!v5)
  {
    v17 = v15;
    v20 = 1;
    type metadata accessor for MTLDataType(0);
    sub_1B1A1F838(&qword_1EEF616B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for MTLDataType, (uint64_t)&protocol conformance descriptor for MTLDataType);
    sub_1B2229958();
    v19 = 2;
    sub_1B2229940();
    v18 = 3;
    sub_1B2229940();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1F7C438(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _DWORD v14[4];
  uint64_t v15;
  char v16;
  uint64_t v17;

  v14[3] = a4;
  v15 = a3;
  sub_1B19F8E54(0, &qword_1EEF616A0, (uint64_t (*)(void))sub_1B1F86354, (uint64_t)&type metadata for ShaderArgument.TextureDesc.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v14 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F86354();
  sub_1B222A180();
  v17 = a2;
  v16 = 0;
  type metadata accessor for MTLTextureType(0);
  sub_1B1A1F838(&qword_1EEF616A8, 255, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureType, (uint64_t)&protocol conformance descriptor for MTLTextureType);
  sub_1B2229958();
  if (!v4)
  {
    v17 = v15;
    v16 = 1;
    type metadata accessor for MTLDataType(0);
    sub_1B1A1F838(&qword_1EEF616B0, 255, (uint64_t (*)(uint64_t))type metadata accessor for MTLDataType, (uint64_t)&protocol conformance descriptor for MTLDataType);
    sub_1B2229958();
    LOBYTE(v17) = 2;
    sub_1B222991C();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

void sub_1B1F7C614(char *a1)
{
  sub_1B1F90998(*a1);
}

uint64_t sub_1B1F7C620()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1B1F7C650 + 4 * byte_1B22A6550[*v0]))(0x657A695361746164, 0xE800000000000000);
}

uint64_t sub_1B1F7C650()
{
  return 0x6570795461746164;
}

uint64_t sub_1B1F7C664()
{
  return 0x74657366666FLL;
}

uint64_t sub_1B1F7C678()
{
  return 0x6E656D6E67696C61;
}

uint64_t sub_1B1F7C694@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1F839D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1F7C6B8()
{
  sub_1B1F86310();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F7C6E0()
{
  sub_1B1F86310();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F7C708@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1B1F852FC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B1F7C734(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1B1F7C26C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1B1F7C750(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F90BDC(*a1, *a2);
}

uint64_t sub_1B1F7C75C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6570795461746164;
  if (*v0 != 1)
    v1 = 0x68747065447369;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_1B1F7C7B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1F83CBC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1F7C7D4()
{
  sub_1B1F86354();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F7C7FC()
{
  sub_1B1F86354();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F7C824(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
    return *(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16) ^ 1u;
  return 0;
}

uint64_t sub_1B1F7C860@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_1B1F85500(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t sub_1B1F7C890(_QWORD *a1)
{
  uint64_t v1;

  return sub_1B1F7C438(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1B1F7C8AC(char *a1, char *a2)
{
  return sub_1B1F90CE4(*a1, *a2);
}

uint64_t sub_1B1F7C8B8()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F7C934()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F7C98C()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F7CA04@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_1B1F7CA60(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x726566667562;
  if (*v1)
    v2 = 0x65727574786574;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE700000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B1F7CA9C()
{
  _BYTE *v0;

  if (*v0)
    return 0x65727574786574;
  else
    return 0x726566667562;
}

uint64_t sub_1B1F7CAD4@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_1B2229730();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

uint64_t sub_1B1F7CB34()
{
  sub_1B1F85FF8();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F7CB5C()
{
  sub_1B1F85FF8();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F7CB84(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char v15;
  char v16;

  v2 = v1;
  sub_1B19F8E54(0, &qword_1EEF61680, (uint64_t (*)(void))sub_1B1F85FF8, (uint64_t)&type metadata for ShaderArgument.Desc.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v11 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F85FF8();
  sub_1B222A180();
  sub_1B1B2A894(v2, (uint64_t)&v13);
  v11 = v13;
  if ((v15 & 1) != 0)
  {
    LOBYTE(v12) = v14;
    v16 = 1;
    sub_1B1F860C4();
  }
  else
  {
    v12 = v14;
    v16 = 0;
    sub_1B1F86108();
  }
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

BOOL sub_1B1F7CCEC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v8;

  v3 = *a1;
  v2 = a1[1];
  v5 = *a2;
  v4 = a2[1];
  if (*((_BYTE *)a1 + 32) == 1)
    return (a2[4] & 1) != 0 && v3 == v5 && v2 == v4 && ((a2[2] ^ ((a1[2] & 1) == 0)) & 1) != 0;
  v8 = v3 == v5 && v2 == v4;
  return (a2[4] & 1) == 0 && v8;
}

uint64_t sub_1B1F7CD58@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _QWORD v5[5];

  result = sub_1B1F85714(a1, v5);
  if (!v2)
    return sub_1B1B2A894((uint64_t)v5, a2);
  return result;
}

uint64_t sub_1B1F7CD9C(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v4[40];

  sub_1B1B2A894(v1, (uint64_t)v4);
  return sub_1B1F7CB84(a1);
}

void sub_1B1F7CDE8(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  _BYTE v22[40];
  char v23[8];
  uint64_t v24;
  char v25;

  sub_1B1B2A894(v1 + 24, (uint64_t)v22);
  sub_1B1B2A894((uint64_t)v22, (uint64_t)v23);
  if ((v25 & 1) != 0)
  {
    a1[3] = (uint64_t)&type metadata for Entity;
    *a1 = 0xFFFFFFFFLL;
  }
  else
  {
    switch(v24)
    {
      case 3:
        a1[3] = MEMORY[0x1E0DEB188];
        *(_DWORD *)a1 = 0;
        return;
      case 4:
        sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
        a1[3] = v3;
        *a1 = 0;
        return;
      case 5:
        v4 = &qword_1ED4BB0A0;
        v5 = MEMORY[0x1E0DEB188];
        v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD50];
        goto LABEL_9;
      case 6:
        v4 = &qword_1ED4BB0E0;
        v5 = MEMORY[0x1E0DEB188];
        v6 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
LABEL_9:
        sub_1B19F8E54(0, (unint64_t *)v4, (uint64_t (*)(void))sub_1B19F8DCC, v5, v6);
        a1[3] = v7;
        v8 = swift_allocObject();
        *a1 = v8;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)(v8 + 24) = 0;
        return;
      case 7:
        type metadata accessor for simd_float2x2(0);
        a1[3] = v9;
        goto LABEL_15;
      case 8:
        type metadata accessor for simd_float2x3(0);
        goto LABEL_13;
      case 9:
        type metadata accessor for simd_float2x4(0);
LABEL_13:
        a1[3] = v10;
        v11 = swift_allocObject();
        *a1 = v11;
        *(_OWORD *)(v11 + 16) = xmmword_1B2244DB0;
        *(_OWORD *)(v11 + 32) = xmmword_1B2244DD0;
        return;
      case 10:
        type metadata accessor for simd_float3x2(0);
        a1[2] = 0;
        a1[3] = v12;
LABEL_15:
        *a1 = 1065353216;
        a1[1] = 0x3F80000000000000;
        return;
      case 11:
        type metadata accessor for simd_float3x3(0);
        goto LABEL_18;
      case 12:
        type metadata accessor for simd_float3x4(0);
LABEL_18:
        a1[3] = v13;
        v14 = (_OWORD *)swift_allocObject();
        *a1 = (uint64_t)v14;
        v14[1] = xmmword_1B2244DB0;
        v14[2] = xmmword_1B2244DD0;
        v14[3] = xmmword_1B2244D90;
        return;
      case 13:
        type metadata accessor for simd_float4x2(0);
        a1[3] = v15;
        v16 = (_QWORD *)swift_allocObject();
        *a1 = (uint64_t)v16;
        v16[2] = 1065353216;
        v16[3] = 0x3F80000000000000;
        v16[4] = 0;
        v16[5] = 0;
        return;
      case 14:
        type metadata accessor for simd_float4x3(0);
        a1[3] = v17;
        v18 = swift_allocObject();
        *a1 = v18;
        *(_OWORD *)(v18 + 16) = xmmword_1B2244DB0;
        *(_OWORD *)(v18 + 32) = xmmword_1B2244DD0;
        *(_OWORD *)(v18 + 48) = xmmword_1B2244D90;
        *(_QWORD *)(v18 + 64) = 0;
        *(_QWORD *)(v18 + 72) = 0;
        return;
      case 15:
        type metadata accessor for simd_float4x4(0);
        a1[3] = v19;
        v20 = (_OWORD *)swift_allocObject();
        *a1 = (uint64_t)v20;
        v20[1] = xmmword_1B2244DB0;
        v20[2] = xmmword_1B2244DD0;
        v20[3] = xmmword_1B2244D90;
        v20[4] = xmmword_1B2244E20;
        return;
      case 29:
        v21 = MEMORY[0x1E0DEB418];
        goto LABEL_25;
      case 33:
        v21 = MEMORY[0x1E0DEBB98];
LABEL_25:
        a1[3] = v21;
        *a1 = 0;
        break;
      case 53:
        a1[3] = MEMORY[0x1E0DEAFA0];
        *(_BYTE *)a1 = 0;
        break;
      default:
        a1[3] = MEMORY[0x1E0DEE9C0] + 8;
        break;
    }
  }
}

uint64_t sub_1B1F7D114(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE v12[40];
  _BYTE v13[56];

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF61648, (uint64_t (*)(void))sub_1B1F85B84, (uint64_t)&type metadata for ShaderArgument.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = &v12[-v9];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F85B84();
  sub_1B222A180();
  v12[0] = 0;
  sub_1B2229910();
  if (!v2)
  {
    v12[0] = 1;
    sub_1B2229940();
    sub_1B1B2A894(v3 + 24, (uint64_t)v13);
    sub_1B1B2A894((uint64_t)v13, (uint64_t)v12);
    v13[55] = 2;
    sub_1B1F85C0C();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1F7D298(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F90AEC(*a1, *a2);
}

uint64_t sub_1B1F7D2A4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x7865646E69;
  if (*v0 != 1)
    v1 = 1668506980;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

uint64_t sub_1B1F7D2EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1F83B90(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1F7D310()
{
  sub_1B1F85B84();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F7D338()
{
  sub_1B1F85B84();
  return sub_1B222A1E0();
}

double sub_1B1F7D360@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  _OWORD v7[2];

  sub_1B1F85968(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 41) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1B1F7D3A8(_QWORD *a1)
{
  return sub_1B1F7D114(a1);
}

uint64_t sub_1B1F7D3E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t result;
  char v14;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(unsigned __int8 *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_BYTE *)(a2 + 56);
  if (*(_QWORD *)a1 == *(_QWORD *)a2 && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8))
  {
    if (v2 != v8)
      return 0;
LABEL_7:
    if (v6)
    {
      if (v4 == v7)
        v14 = v11;
      else
        v14 = 0;
      if ((v14 & 1) == 0 || v3 != v9 || ((((v5 & 1) == 0) ^ v10) & 1) == 0)
        return 0;
    }
    else if ((v11 & 1) != 0 || v4 != v7 || v3 != v9)
    {
      return 0;
    }
    return 1;
  }
  v12 = sub_1B2229D24();
  result = 0;
  if ((v12 & 1) != 0 && v2 == v8)
    goto LABEL_7;
  return result;
}

uint64_t sub_1B1F7D4D0()
{
  uint64_t v0;
  _BYTE v2[40];
  _QWORD v3[4];
  char v4;
  _BYTE v5[8];

  sub_1B222A06C();
  sub_1B1AE7408(v0);
  sub_1B2228824();
  sub_1B1BA80C0(v0);
  sub_1B222A078();
  sub_1B1B2A894(v0 + 24, (uint64_t)v2);
  sub_1B1B2A894((uint64_t)v2, (uint64_t)v5);
  sub_1B222A078();
  sub_1B1B2A894((uint64_t)v2, (uint64_t)v3);
  if (v4 == 1)
  {
    sub_1B222A084();
    sub_1B222A078();
  }
  else
  {
    sub_1B222A084();
  }
  return sub_1B222A0C0();
}

uint64_t sub_1B1F7D5B8()
{
  return sub_1B1F7D4D0();
}

uint64_t sub_1B1F7D5F8()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 56);
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  sub_1B222A078();
  sub_1B222A078();
  if (v1 != 1)
    return sub_1B222A084();
  sub_1B222A084();
  return sub_1B222A078();
}

uint64_t sub_1B1F7D69C()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + 56);
  sub_1B222A06C();
  swift_bridgeObjectRetain();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  sub_1B222A078();
  sub_1B222A078();
  sub_1B222A084();
  if (v1 == 1)
    sub_1B222A078();
  return sub_1B222A0C0();
}

BOOL sub_1B1F7D764(uint64_t *a1, __int128 *a2)
{
  int v2;
  __int128 v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;

  v2 = *((char *)a1 + 64);
  v3 = *a2;
  v4 = *((char *)a2 + 64);
  if (v2 < 0)
  {
    return v4 < 0 && *a1 == (_QWORD)v3;
  }
  else
  {
    v5 = a2[1];
    v6 = a2[2];
    v7 = a2[3];
    v8 = a1[7];
    v12 = *a1;
    v13 = *(_OWORD *)(a1 + 1);
    v14 = *(_OWORD *)(a1 + 3);
    v15 = *(_OWORD *)(a1 + 5);
    v16 = v8;
    v17 = v2;
    if (v4 < 0)
    {
      return 0;
    }
    else
    {
      v18 = v3;
      v19 = v5;
      v20 = v6;
      v21 = v7;
      v22 = v4;
      sub_1B1B2A920((uint64_t)&v12);
    }
  }
  return v9;
}

void sub_1B1F7D7FC(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  unint64_t v8;

  v3 = *v1;
  v4 = *((char *)v1 + 64);
  if (v4 < 0)
  {
    v8 = sub_1B1E33C2C(*(_QWORD *)v1);
    v5 = 0uLL;
    v3 = v8;
    LOBYTE(v4) = 0x80;
    v6 = 0uLL;
    v7 = 0uLL;
  }
  else
  {
    v5 = v1[1];
    v6 = v1[2];
    v7 = v1[3];
  }
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v7;
  *(_BYTE *)(a1 + 64) = v4;
}

uint64_t sub_1B1F7D864@<X0>(void *a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  id v5;
  id v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  id v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  id v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  unint64_t v59;
  id v61;
  id v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  unint64_t v71;
  id v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  unint64_t v79;
  _QWORD *v81;
  id v82;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  void *v89;
  id v90;
  id v91;
  id v92;
  unint64_t v93;
  id v94;
  void *v95;
  uint64_t v96;
  id v97;
  void *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  unint64_t v108;
  id v110;
  id v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  void *v117;
  id v118;
  id v119;
  id v120;
  unint64_t v121;
  id v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  unint64_t v132;
  id v133;
  void *v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  unint64_t v144;
  id v146;
  id v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  id v152;
  void *v153;
  id v154;
  id v155;
  id v156;
  unint64_t v157;
  id v158;
  void *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  id v167;
  uint64_t v168;
  uint64_t v169;
  id v170;
  id v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  void *v177;
  id v178;
  id v179;
  id v180;
  unint64_t v181;
  id v182;
  void *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int v187;
  _QWORD *v188;
  unint64_t v189;
  _QWORD *v191;
  id v192;
  uint64_t result;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  unint64_t v199;
  uint64_t v200;
  void *v201;
  void *v202;
  uint64_t v203;
  _QWORD *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  void *v208;
  void *v209;
  void *v210;
  uint64_t v211;
  _QWORD *v212;
  unint64_t v213;
  uint64_t v214;
  unint64_t v215;
  void *v216;
  void *v217;
  void *v218;
  uint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  uint64_t v222;
  unint64_t v223;
  void *v224;
  void *v225;
  uint64_t v226;
  _QWORD *v227;
  unint64_t v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  void *v232;
  void *v233;
  _QWORD *v234;
  uint64_t v235;
  unint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _BYTE v242[64];
  _OWORD v243[2];
  _OWORD v244[2];
  id v245;

  v3 = v2;
  v5 = objc_msgSend(a1, sel_elementStructType);
  if (v5)
  {
    v197 = v5;
    v6 = objc_msgSend(v5, sel_members);
    sub_1B1ECF2CC();
    v7 = sub_1B2228AB8();

    v199 = v7;
    if (v7 >> 62)
      goto LABEL_241;
    v8 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    while (v8)
    {
      v10 = 0;
      v204 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v200 = v8;
      while (1)
      {
        v203 = v10;
        if ((v199 & 0xC000000000000001) != 0)
          v11 = (id)MEMORY[0x1B5E21018](v10, v199, v9);
        else
          v11 = *(id *)(v199 + 32 + 8 * v10);
        v12 = v11;
        v13 = objc_msgSend(v11, sel_structType, v194, v195, v196);
        if (v13)
        {
          v201 = v13;
          v202 = v12;
          v14 = objc_msgSend(v13, sel_members);
          v15 = sub_1B2228AB8();

          if (!(v15 >> 62))
          {
            v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRetain();
            if (v16)
              goto LABEL_12;
LABEL_221:
            v212 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_222:
            swift_bridgeObjectRelease_n();

            v169 = v212[2];
LABEL_223:
            v185 = v204[2];
            v186 = v185 + v169;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
            {
LABEL_224:
              v188 = v204;
              if (v186 <= v204[3] >> 1)
                goto LABEL_230;
              LOBYTE(v187) = 1;
            }
            else
            {
              LOBYTE(v187) = 0;
              v188 = v204;
            }
            if (v185 > v186)
              v186 = v185;
            goto LABEL_229;
          }
          swift_bridgeObjectRetain();
          v16 = sub_1B22296AC();
          if (!v16)
            goto LABEL_221;
LABEL_12:
          v17 = 0;
          v207 = v15 & 0xC000000000000001;
          v205 = v15 + 32;
          v212 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v206 = v16;
          while (2)
          {
            v211 = v17;
            if (v207)
              v18 = (id)MEMORY[0x1B5E21018]();
            else
              v18 = *(id *)(v205 + 8 * v17);
            v19 = v18;
            v20 = objc_msgSend(v18, sel_structType);
            if (v20)
            {
              v208 = v20;
              v209 = v19;
              v21 = objc_msgSend(v20, sel_members);
              v22 = sub_1B2228AB8();

              if (!(v22 >> 62))
              {
                v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (v23)
                  goto LABEL_20;
LABEL_195:
                v220 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_196:
                swift_bridgeObjectRelease_n();

LABEL_197:
                v164 = v220[2];
                v161 = v212[2];
                v162 = v161 + v164;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                {
LABEL_198:
                  v165 = v220;
                  if (v162 <= v212[3] >> 1)
                  {
                    if (!v220[2])
                    {
LABEL_13:
                      swift_bridgeObjectRelease();
                      v17 = v211 + 1;
                      if (v211 + 1 == v206)
                        goto LABEL_222;
                      continue;
                    }
LABEL_205:
                    v166 = (unint64_t)&v212[8 * v212[2] + 4];
                    if ((unint64_t)(v165 + 4) < v166 + (v164 << 6)
                      && v166 < (unint64_t)&v165[8 * v164 + 4])
                    {
                      goto LABEL_240;
                    }
                    swift_arrayInitWithCopy();
                    if (v164)
                      v212[2] += v164;
                    goto LABEL_13;
                  }
                  LOBYTE(v163) = 1;
                }
                else
                {
                  LOBYTE(v163) = 0;
                }
                if (v161 > v162)
                  v162 = v161;
LABEL_204:
                v212 = sub_1B1C67DE0(v163, v162, 1, v212);
                v165 = v220;
                if (!v220[2])
                  goto LABEL_13;
                goto LABEL_205;
              }
              swift_bridgeObjectRetain();
              v23 = sub_1B22296AC();
              if (!v23)
                goto LABEL_195;
LABEL_20:
              v24 = 0;
              v215 = v22 & 0xC000000000000001;
              v213 = v22 + 32;
              v220 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              v214 = v23;
              while (2)
              {
                v219 = v24;
                if (v215)
                  v25 = (id)MEMORY[0x1B5E21018]();
                else
                  v25 = *(id *)(v213 + 8 * v24);
                v26 = v25;
                v27 = objc_msgSend(v25, sel_structType);
                if (v27)
                {
                  v216 = v27;
                  v217 = v26;
                  v28 = objc_msgSend(v27, sel_members);
                  v29 = sub_1B2228AB8();

                  if (!(v29 >> 62))
                  {
                    v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
                    swift_bridgeObjectRetain();
                    if (v30)
                      goto LABEL_28;
LABEL_150:
                    v227 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_151:
                    swift_bridgeObjectRelease_n();

LABEL_152:
                    v128 = v227[2];
                    v125 = v220[2];
                    v126 = v125 + v128;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                    {
LABEL_153:
                      v129 = v220;
                      v130 = v227;
                      if (v126 <= v220[3] >> 1)
                      {
                        if (!v227[2])
                        {
LABEL_21:
                          v220 = v129;
                          swift_bridgeObjectRelease();
                          v24 = v219 + 1;
                          if (v219 + 1 == v214)
                            goto LABEL_196;
                          continue;
                        }
LABEL_160:
                        v131 = v129;
                        v132 = (unint64_t)&v129[8 * v129[2] + 4];
                        if ((unint64_t)(v130 + 4) < v132 + (v128 << 6)
                          && v132 < (unint64_t)&v130[8 * v128 + 4])
                        {
                          goto LABEL_240;
                        }
                        swift_arrayInitWithCopy();
                        v129 = v131;
                        if (v128)
                          v131[2] += v128;
                        goto LABEL_21;
                      }
                      LOBYTE(v127) = 1;
                    }
                    else
                    {
                      LOBYTE(v127) = 0;
                      v129 = v220;
                    }
                    if (v125 > v126)
                      v126 = v125;
LABEL_159:
                    v129 = sub_1B1C67DE0(v127, v126, 1, v129);
                    v130 = v227;
                    if (!v227[2])
                      goto LABEL_21;
                    goto LABEL_160;
                  }
                  swift_bridgeObjectRetain();
                  v30 = sub_1B22296AC();
                  if (!v30)
                    goto LABEL_150;
LABEL_28:
                  v31 = 0;
                  v223 = v29 & 0xC000000000000001;
                  v221 = v29 + 32;
                  v227 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                  v222 = v30;
                  while (2)
                  {
                    v226 = v31;
                    if (v223)
                      v32 = (id)MEMORY[0x1B5E21018]();
                    else
                      v32 = *(id *)(v221 + 8 * v31);
                    v33 = v32;
                    v34 = objc_msgSend(v32, sel_structType);
                    if (v34)
                    {
                      v224 = v34;
                      v35 = objc_msgSend(v34, sel_members);
                      v36 = sub_1B2228AB8();

                      if (v36 >> 62)
                      {
                        swift_bridgeObjectRetain();
                        v37 = sub_1B22296AC();
                      }
                      else
                      {
                        v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
                        swift_bridgeObjectRetain();
                      }
                      v225 = v33;
                      v229 = v36;
                      if (v37)
                      {
                        v38 = 0;
                        v230 = v36 & 0xC000000000000001;
                        v228 = v36 + 32;
                        v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
                        v231 = v37;
                        while (1)
                        {
                          if (v230)
                            v40 = (id)MEMORY[0x1B5E21018](v38, v229);
                          else
                            v40 = *(id *)(v228 + 8 * v38);
                          v41 = v40;
                          v42 = objc_msgSend(v40, sel_structType);
                          v235 = v38;
                          if (v42)
                          {
                            v232 = v42;
                            v43 = objc_msgSend(v42, sel_members);
                            v44 = sub_1B2228AB8();

                            if (v44 >> 62)
                            {
                              swift_bridgeObjectRetain();
                              v45 = sub_1B22296AC();
                              v233 = v41;
                              v234 = v39;
                              if (v45)
                              {
LABEL_45:
                                v46 = 0;
                                v236 = v44 & 0xC000000000000001;
                                v47 = MEMORY[0x1E0DEE9D8];
                                v48 = v44;
                                while (1)
                                {
                                  v49 = v45;
                                  if (v236)
                                    v50 = (id)MEMORY[0x1B5E21018](v46, v44);
                                  else
                                    v50 = *(id *)(v44 + 8 * v46 + 32);
                                  v51 = v50;
                                  v245 = v50;
                                  v52 = v3;
                                  sub_1B1F7F0A8(&v241, &v245);

                                  v53 = v241;
                                  v54 = *(_QWORD *)(v241 + 16);
                                  v55 = *(_QWORD *)(v47 + 16);
                                  v56 = v55 + v54;
                                  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                                  if (!isUniquelyReferenced_nonNull_native || v56 > *(_QWORD *)(v47 + 24) >> 1)
                                  {
                                    if (v55 <= v56)
                                      v58 = v55 + v54;
                                    else
                                      v58 = v55;
                                    v47 = (uint64_t)sub_1B1C67DE0(isUniquelyReferenced_nonNull_native, v58, 1, (_QWORD *)v47);
                                  }
                                  v3 = v52;
                                  v44 = v48;
                                  if (*(_QWORD *)(v53 + 16))
                                  {
                                    v59 = v47 + (*(_QWORD *)(v47 + 16) << 6) + 32;
                                    if (v53 + 32 < v59 + (v54 << 6) && v59 < v53 + 32 + (v54 << 6))
                                      goto LABEL_240;
                                    swift_arrayInitWithCopy();
                                    if (v54)
                                      *(_QWORD *)(v47 + 16) += v54;
                                  }
                                  swift_bridgeObjectRelease();
                                  ++v46;
                                  v45 = v49;
                                  if (v49 == v46)
                                    goto LABEL_74;
                                }
                              }
                            }
                            else
                            {
                              v45 = *(_QWORD *)((v44 & 0xFFFFFFFFFFFFF8) + 0x10);
                              swift_bridgeObjectRetain();
                              v233 = v41;
                              v234 = v39;
                              if (v45)
                                goto LABEL_45;
                            }
                            v47 = MEMORY[0x1E0DEE9D8];
LABEL_74:
                            swift_bridgeObjectRelease_n();

                            v66 = *(_QWORD *)(v47 + 16);
                            v39 = v234;
                            v67 = v234[2];
                            v68 = v67 + v66;
                            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                            {
                              v69 = 0;
                              goto LABEL_79;
                            }
                          }
                          else
                          {
                            v61 = objc_msgSend(v41, sel_arrayType);
                            if (v61)
                            {
                              v47 = sub_1B1F7AB50(0, (uint64_t)objc_msgSend(v61, sel_arrayLength), v61);

                            }
                            else
                            {
                              v62 = v41;
                              sub_1B1F843C8(v62, (uint64_t)v242);
                              sub_1B1A18378((uint64_t)v242, (uint64_t)v243, (unint64_t *)&unk_1EEF615F8, (uint64_t)&type metadata for ShaderArgument);
                              if (*((_QWORD *)&v243[0] + 1))
                              {
                                sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                                v47 = swift_allocObject();
                                v63 = v243[0];
                                v64 = v243[1];
                                *(_OWORD *)(v47 + 16) = xmmword_1B226D240;
                                *(_OWORD *)(v47 + 32) = v63;
                                v65 = v244[0];
                                *(_OWORD *)(v47 + 48) = v64;
                                *(_OWORD *)(v47 + 64) = v65;
                                *(_OWORD *)(v47 + 73) = *(_OWORD *)((char *)v244 + 9);
                              }
                              else
                              {
                                v47 = MEMORY[0x1E0DEE9D8];
                              }

                            }
                            v66 = *(_QWORD *)(v47 + 16);
                            v67 = v39[2];
                            v68 = v67 + v66;
                            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                            {
                              v69 = 0;
                              goto LABEL_79;
                            }
                          }
                          if (v68 <= v39[3] >> 1)
                          {
                            if (!*(_QWORD *)(v47 + 16))
                              goto LABEL_38;
                            goto LABEL_83;
                          }
                          v69 = 1;
LABEL_79:
                          if (v67 <= v68)
                            v70 = v68;
                          else
                            v70 = v67;
                          v39 = sub_1B1C67DE0(v69, v70, 1, v39);
                          if (!*(_QWORD *)(v47 + 16))
                            goto LABEL_38;
LABEL_83:
                          v71 = (unint64_t)&v39[8 * v39[2] + 4];
                          if (v47 + 32 < v71 + (v66 << 6) && v71 < v47 + 32 + (v66 << 6))
                            goto LABEL_240;
                          swift_arrayInitWithCopy();
                          if (v66)
                            v39[2] += v66;
LABEL_38:
                          swift_bridgeObjectRelease();
                          v38 = v235 + 1;
                          if (v235 + 1 == v231)
                            goto LABEL_94;
                        }
                      }
                      v39 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_94:
                      swift_bridgeObjectRelease_n();

LABEL_95:
                      v74 = v39[2];
                      v75 = v227[2];
                      v76 = v75 + v74;
                      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
                      {
LABEL_96:
                        v77 = v227;
                        if (v76 <= v227[3] >> 1)
                        {
                          if (!v39[2])
                          {
LABEL_29:
                            v227 = v77;
                            swift_bridgeObjectRelease();
                            v31 = v226 + 1;
                            if (v226 + 1 == v222)
                              goto LABEL_151;
                            continue;
                          }
LABEL_103:
                          v79 = (unint64_t)&v77[8 * v77[2] + 4];
                          if ((unint64_t)(v39 + 4) < v79 + (v74 << 6)
                            && v79 < (unint64_t)&v39[8 * v74 + 4])
                          {
                            goto LABEL_240;
                          }
                          v81 = v77;
                          swift_arrayInitWithCopy();
                          v77 = v81;
                          if (v74)
                            v81[2] += v74;
                          goto LABEL_29;
                        }
                        LOBYTE(v78) = 1;
                      }
                      else
                      {
                        LOBYTE(v78) = 0;
                        v77 = v227;
                      }
                      if (v75 > v76)
                        v76 = v75;
                    }
                    else
                    {
                      v73 = objc_msgSend(v33, sel_arrayType);
                      if (v73)
                      {
                        v39 = (_QWORD *)sub_1B1F7AB50(0, (uint64_t)objc_msgSend(v73, sel_arrayLength), v73);

                        goto LABEL_95;
                      }
                      v82 = v33;
                      v83 = objc_msgSend(v82, sel_argumentIndex);
                      v84 = objc_msgSend(v82, sel_name);
                      v85 = sub_1B222874C();
                      v87 = v86;

                      v88 = objc_msgSend(v82, sel_textureReferenceType);
                      v89 = v88;
                      v237 = v3;
                      if (v88)
                      {
                        v90 = objc_msgSend(v88, sel_textureType);
                        v91 = objc_msgSend(v89, sel_textureDataType);
                        LODWORD(v93) = objc_msgSend(v89, sel_isDepthTexture);

                        v92 = 0;
                        v93 = v93;
                      }
                      else
                      {
                        v94 = objc_msgSend(v82, sel_pointerType);
                        if (v94)
                        {
                          v95 = v94;
                          v90 = objc_msgSend(v94, sel_dataSize);
                          v91 = objc_msgSend(v95, sel_elementType);
                          v92 = objc_msgSend(v95, sel_alignment);

                          v93 = 0;
                        }
                        else
                        {
                          v90 = (id)sub_1B1F9CB40();
                          v91 = objc_msgSend(v82, sel_dataType);
                          v93 = (unint64_t)objc_msgSend(v82, sel_offset);

                          v92 = v90;
                        }
                      }
                      sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                      v96 = swift_allocObject();
                      *(_OWORD *)(v96 + 16) = xmmword_1B226D240;
                      *(_QWORD *)(v96 + 32) = v85;
                      *(_QWORD *)(v96 + 40) = v87;
                      v39 = (_QWORD *)v96;
                      *(_QWORD *)(v96 + 48) = v83;
                      *(_QWORD *)(v96 + 56) = v90;
                      *(_QWORD *)(v96 + 64) = v91;
                      *(_QWORD *)(v96 + 72) = v93;
                      *(_QWORD *)(v96 + 80) = v92;
                      *(_BYTE *)(v96 + 88) = v89 != 0;

                      v75 = v227[2];
                      v76 = v75 + 1;
                      v78 = swift_isUniquelyReferenced_nonNull_native();
                      v74 = 1;
                      if (v78)
                      {
                        v3 = v237;
                        goto LABEL_96;
                      }
                      v3 = v237;
                      v77 = v227;
                    }
                    break;
                  }
                  v77 = sub_1B1C67DE0(v78, v76, 1, v77);
                  if (!v39[2])
                    goto LABEL_29;
                  goto LABEL_103;
                }
                break;
              }
              v97 = objc_msgSend(v26, sel_arrayType);
              if (!v97)
              {
                v110 = v26;
                v111 = objc_msgSend(v110, sel_argumentIndex);
                v112 = objc_msgSend(v110, sel_name);
                v113 = sub_1B222874C();
                v115 = v114;

                v116 = objc_msgSend(v110, sel_textureReferenceType);
                v117 = v116;
                v238 = v3;
                if (v116)
                {
                  v118 = objc_msgSend(v116, sel_textureType);
                  v119 = objc_msgSend(v117, sel_textureDataType);
                  LODWORD(v121) = objc_msgSend(v117, sel_isDepthTexture);

                  v120 = 0;
                  v121 = v121;
                }
                else
                {
                  v122 = objc_msgSend(v110, sel_pointerType);
                  if (v122)
                  {
                    v123 = v122;
                    v118 = objc_msgSend(v122, sel_dataSize);
                    v119 = objc_msgSend(v123, sel_elementType);
                    v120 = objc_msgSend(v123, sel_alignment);

                    v121 = 0;
                  }
                  else
                  {
                    v118 = (id)sub_1B1F9CB40();
                    v119 = objc_msgSend(v110, sel_dataType);
                    v121 = (unint64_t)objc_msgSend(v110, sel_offset);

                    v120 = v118;
                  }
                }
                sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                v124 = swift_allocObject();
                *(_OWORD *)(v124 + 16) = xmmword_1B226D240;
                *(_QWORD *)(v124 + 32) = v113;
                *(_QWORD *)(v124 + 40) = v115;
                *(_QWORD *)(v124 + 48) = v111;
                *(_QWORD *)(v124 + 56) = v118;
                *(_QWORD *)(v124 + 64) = v119;
                *(_QWORD *)(v124 + 72) = v121;
                *(_QWORD *)(v124 + 80) = v120;
                v227 = (_QWORD *)v124;
                *(_BYTE *)(v124 + 88) = v117 != 0;

                v125 = v220[2];
                v126 = v125 + 1;
                v127 = swift_isUniquelyReferenced_nonNull_native();
                v128 = 1;
                if (v127)
                {
                  v3 = v238;
                  goto LABEL_153;
                }
                v3 = v238;
                v129 = v220;
                goto LABEL_159;
              }
              v98 = v97;
              v218 = v26;
              v99 = (char *)objc_msgSend(v97, sel_arrayLength);
              if (!v99)
              {
                v227 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_142:

                goto LABEL_152;
              }
              v100 = v99;
              v227 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              while (2)
              {
                sub_1B1F7D864(&v241, &v245, v98);
                v101 = v241;
                v102 = *(_QWORD *)(v241 + 16);
                v103 = v227;
                v104 = v227[2];
                v105 = v104 + v102;
                v106 = swift_isUniquelyReferenced_nonNull_native();
                if (v106 && v105 <= v227[3] >> 1)
                {
                  if (!*(_QWORD *)(v101 + 16))
                    goto LABEL_123;
                }
                else
                {
                  if (v104 <= v105)
                    v107 = v104 + v102;
                  else
                    v107 = v104;
                  v103 = sub_1B1C67DE0(v106, v107, 1, v227);
                  if (!*(_QWORD *)(v101 + 16))
                  {
LABEL_123:
                    v227 = v103;
                    swift_bridgeObjectRelease();
                    if (!--v100)
                      goto LABEL_142;
                    continue;
                  }
                }
                break;
              }
              v108 = (unint64_t)&v103[8 * v103[2] + 4];
              if (v101 + 32 < v108 + (v102 << 6) && v108 < v101 + 32 + (v102 << 6))
                goto LABEL_240;
              swift_arrayInitWithCopy();
              if (v102)
                v103[2] += v102;
              goto LABEL_123;
            }
            break;
          }
          v133 = objc_msgSend(v19, sel_arrayType);
          if (!v133)
          {
            v146 = v19;
            v147 = objc_msgSend(v146, sel_argumentIndex);
            v148 = objc_msgSend(v146, sel_name);
            v149 = sub_1B222874C();
            v151 = v150;

            v152 = objc_msgSend(v146, sel_textureReferenceType);
            v153 = v152;
            v239 = v3;
            if (v152)
            {
              v154 = objc_msgSend(v152, sel_textureType);
              v155 = objc_msgSend(v153, sel_textureDataType);
              LODWORD(v157) = objc_msgSend(v153, sel_isDepthTexture);

              v156 = 0;
              v157 = v157;
            }
            else
            {
              v158 = objc_msgSend(v146, sel_pointerType);
              if (v158)
              {
                v159 = v158;
                v154 = objc_msgSend(v158, sel_dataSize);
                v155 = objc_msgSend(v159, sel_elementType);
                v156 = objc_msgSend(v159, sel_alignment);

                v157 = 0;
              }
              else
              {
                v154 = (id)sub_1B1F9CB40();
                v155 = objc_msgSend(v146, sel_dataType);
                v157 = (unint64_t)objc_msgSend(v146, sel_offset);

                v156 = v154;
              }
            }
            sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v160 = swift_allocObject();
            *(_OWORD *)(v160 + 16) = xmmword_1B226D240;
            *(_QWORD *)(v160 + 32) = v149;
            *(_QWORD *)(v160 + 40) = v151;
            *(_QWORD *)(v160 + 48) = v147;
            *(_QWORD *)(v160 + 56) = v154;
            *(_QWORD *)(v160 + 64) = v155;
            *(_QWORD *)(v160 + 72) = v157;
            *(_QWORD *)(v160 + 80) = v156;
            v220 = (_QWORD *)v160;
            *(_BYTE *)(v160 + 88) = v153 != 0;

            v161 = v212[2];
            v162 = v161 + 1;
            v163 = swift_isUniquelyReferenced_nonNull_native();
            v164 = 1;
            if (v163)
            {
              v3 = v239;
              goto LABEL_198;
            }
            v3 = v239;
            goto LABEL_204;
          }
          v134 = v133;
          v210 = v19;
          v135 = (char *)objc_msgSend(v133, sel_arrayLength);
          if (!v135)
          {
            v220 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_187:

            goto LABEL_197;
          }
          v136 = v135;
          v220 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          while (2)
          {
            sub_1B1F7D864(&v241, &v245, v134);
            v137 = v241;
            v138 = *(_QWORD *)(v241 + 16);
            v139 = v220;
            v140 = v220[2];
            v141 = v140 + v138;
            v142 = swift_isUniquelyReferenced_nonNull_native();
            if (v142 && v141 <= v220[3] >> 1)
            {
              if (!*(_QWORD *)(v137 + 16))
                goto LABEL_168;
            }
            else
            {
              if (v140 <= v141)
                v143 = v140 + v138;
              else
                v143 = v140;
              v139 = sub_1B1C67DE0(v142, v143, 1, v220);
              if (!*(_QWORD *)(v137 + 16))
              {
LABEL_168:
                v220 = v139;
                swift_bridgeObjectRelease();
                if (!--v136)
                  goto LABEL_187;
                continue;
              }
            }
            break;
          }
          v144 = (unint64_t)&v139[8 * v139[2] + 4];
          if (v137 + 32 < v144 + (v138 << 6) && v144 < v137 + 32 + (v138 << 6))
            goto LABEL_240;
          swift_arrayInitWithCopy();
          if (v138)
            v139[2] += v138;
          goto LABEL_168;
        }
        v167 = objc_msgSend(v12, sel_arrayType);
        if (v167)
        {
          v168 = sub_1B1F7AB50(0, (uint64_t)objc_msgSend(v167, sel_arrayLength), v167);

          v212 = (_QWORD *)v168;
          v169 = *(_QWORD *)(v168 + 16);
          goto LABEL_223;
        }
        v170 = v12;
        v171 = objc_msgSend(v170, sel_argumentIndex);
        v172 = objc_msgSend(v170, sel_name);
        v173 = sub_1B222874C();
        v175 = v174;

        v176 = objc_msgSend(v170, sel_textureReferenceType);
        v177 = v176;
        v240 = v3;
        if (v176)
        {
          v178 = objc_msgSend(v176, sel_textureType);
          v179 = objc_msgSend(v177, sel_textureDataType);
          LODWORD(v181) = objc_msgSend(v177, sel_isDepthTexture);

          v180 = 0;
          v181 = v181;
        }
        else
        {
          v182 = objc_msgSend(v170, sel_pointerType);
          if (v182)
          {
            v183 = v182;
            v178 = objc_msgSend(v182, sel_dataSize);
            v179 = objc_msgSend(v183, sel_elementType);
            v180 = objc_msgSend(v183, sel_alignment);

            v181 = 0;
          }
          else
          {
            v178 = (id)sub_1B1F9CB40();
            v179 = objc_msgSend(v170, sel_dataType);
            v181 = (unint64_t)objc_msgSend(v170, sel_offset);

            v180 = v178;
          }
        }
        sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v184 = swift_allocObject();
        *(_OWORD *)(v184 + 16) = xmmword_1B226D240;
        *(_QWORD *)(v184 + 32) = v173;
        *(_QWORD *)(v184 + 40) = v175;
        *(_QWORD *)(v184 + 48) = v171;
        *(_QWORD *)(v184 + 56) = v178;
        *(_QWORD *)(v184 + 64) = v179;
        *(_QWORD *)(v184 + 72) = v181;
        *(_QWORD *)(v184 + 80) = v180;
        v212 = (_QWORD *)v184;
        *(_BYTE *)(v184 + 88) = v177 != 0;

        v185 = v204[2];
        v186 = v185 + 1;
        v187 = swift_isUniquelyReferenced_nonNull_native();
        v169 = 1;
        if (v187)
        {
          v3 = v240;
          goto LABEL_224;
        }
        v3 = v240;
        v188 = v204;
LABEL_229:
        v188 = sub_1B1C67DE0(v187, v186, 1, v188);
LABEL_230:
        if (v212[2])
          break;
LABEL_5:
        v204 = v188;
        swift_bridgeObjectRelease();
        v10 = v203 + 1;
        if (v203 + 1 == v200)
          goto LABEL_243;
      }
      v189 = (unint64_t)&v188[8 * v188[2] + 4];
      if ((unint64_t)(v212 + 4) >= v189 + (v169 << 6) || v189 >= (unint64_t)&v212[8 * v169 + 4])
      {
        v191 = v188;
        swift_arrayInitWithCopy();
        v188 = v191;
        if (v169)
          v191[2] += v169;
        goto LABEL_5;
      }
LABEL_240:
      LODWORD(v196) = 0;
      v195 = 1092;
      LOBYTE(v194) = 2;
      sub_1B2229700();
      __break(1u);
LABEL_241:
      swift_bridgeObjectRetain();
      v8 = sub_1B22296AC();
    }
    v204 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_243:
    swift_bridgeObjectRelease_n();

    result = (uint64_t)v204;
    goto LABEL_244;
  }
  v192 = objc_msgSend(a1, sel_elementArrayType);
  if (v192)
  {
    result = sub_1B1F7AB50(0, (uint64_t)objc_msgSend(v192, sel_arrayLength), v192);
LABEL_244:
    *a2 = result;
    return result;
  }
  result = sub_1B2229688();
  __break(1u);
  return result;
}

void sub_1B1F7F0A8(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  unint64_t v19;
  id v21;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  uint64_t *v27;
  _QWORD v28[8];
  _OWORD v29[2];
  _OWORD v30[2];
  unint64_t v31;

  v3 = *a1;
  v4 = objc_msgSend(*a1, sel_structType);
  if (v4)
  {
    v26 = v4;
    v27 = a2;
    v5 = objc_msgSend(v4, sel_members);
    sub_1B1ECF2CC();
    v6 = sub_1B2228AB8();

    if (v6 >> 62)
    {
      swift_bridgeObjectRetain();
      v7 = sub_1B22296AC();
      if (v7)
        goto LABEL_4;
    }
    else
    {
      v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7)
      {
LABEL_4:
        v8 = 0;
        v31 = v6 & 0xC000000000000001;
        v9 = MEMORY[0x1E0DEE9D8];
        v10 = v6;
        while (1)
        {
          if (v31)
            v11 = (id)MEMORY[0x1B5E21018](v8, v6);
          else
            v11 = *(id *)(v6 + 8 * v8 + 32);
          v12 = v11;
          *(_QWORD *)&v29[0] = v11;
          sub_1B1F7F0A8(v28, v29);

          v13 = v28[0];
          v14 = *(_QWORD *)(v28[0] + 16);
          v15 = *(_QWORD *)(v9 + 16);
          v16 = v15 + v14;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native && v16 <= *(_QWORD *)(v9 + 24) >> 1)
          {
            if (!*(_QWORD *)(v13 + 16))
              goto LABEL_5;
          }
          else
          {
            if (v15 <= v16)
              v18 = v15 + v14;
            else
              v18 = v15;
            v9 = (uint64_t)sub_1B1C67DE0(isUniquelyReferenced_nonNull_native, v18, 1, (_QWORD *)v9);
            if (!*(_QWORD *)(v13 + 16))
              goto LABEL_5;
          }
          v19 = v9 + (*(_QWORD *)(v9 + 16) << 6) + 32;
          if (v13 + 32 < v19 + (v14 << 6) && v19 < v13 + 32 + (v14 << 6))
          {
            sub_1B2229700();
            __break(1u);
            return;
          }
          swift_arrayInitWithCopy();
          if (v14)
            *(_QWORD *)(v9 + 16) += v14;
LABEL_5:
          swift_bridgeObjectRelease();
          ++v8;
          v6 = v10;
          if (v7 == v8)
            goto LABEL_31;
        }
      }
    }
    v9 = MEMORY[0x1E0DEE9D8];
LABEL_31:
    swift_bridgeObjectRelease_n();

    a2 = v27;
  }
  else
  {
    v21 = objc_msgSend(v3, sel_arrayType);
    if (v21)
    {
      v22 = v21;
      v9 = sub_1B1F84570(0, (uint64_t)objc_msgSend(v21, sel_arrayLength), v21);

    }
    else
    {
      sub_1B1F843C8(v3, (uint64_t)v28);
      sub_1B1A18378((uint64_t)v28, (uint64_t)v29, (unint64_t *)&unk_1EEF615F8, (uint64_t)&type metadata for ShaderArgument);
      if (*((_QWORD *)&v29[0] + 1))
      {
        sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v9 = swift_allocObject();
        v23 = v29[0];
        v24 = v29[1];
        *(_OWORD *)(v9 + 16) = xmmword_1B226D240;
        *(_OWORD *)(v9 + 32) = v23;
        v25 = v30[0];
        *(_OWORD *)(v9 + 48) = v24;
        *(_OWORD *)(v9 + 64) = v25;
        *(_OWORD *)(v9 + 73) = *(_OWORD *)((char *)v30 + 9);
      }
      else
      {
        v9 = MEMORY[0x1E0DEE9D8];
      }
    }
  }
  *a2 = v9;
}

uint64_t sub_1B1F7F3F4(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  id v43;
  void *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  uint64_t v55;
  unint64_t v56;
  id v58;
  void *v59;
  uint64_t v60;
  id v61;
  id v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  unint64_t v75;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unint64_t v84;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  void *v92;
  id v93;
  id v94;
  unsigned int v95;
  id v96;
  id v97;
  id v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  id v115;
  void *v116;
  id v117;
  id v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  id v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  id v133;
  id v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  uint64_t v139;
  uint64_t v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _OWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  id v149;
  char *v150;
  id v151;
  id v152;
  unint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  id v157;
  void *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  id v167;
  void *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v176;
  uint64_t v177;
  _QWORD *v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  unint64_t v183;
  id v185;
  id v186;
  id v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  id v191;
  void *v192;
  id v193;
  id v194;
  id v195;
  unint64_t v196;
  void *v197;
  id v198;
  void *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  int v203;
  uint64_t v204;
  _QWORD *v205;
  unint64_t v206;
  id v207;
  void *v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  id v212;
  id v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  id v217;
  void *v218;
  id v219;
  id v220;
  id v221;
  unint64_t v222;
  id v223;
  void *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int isUniquelyReferenced_nonNull_native;
  _QWORD *v229;
  unint64_t v230;
  _QWORD *v232;
  __int128 v233;
  int v234;
  __int128 v235;
  int v236;
  uint64_t result;
  void *v238;
  unint64_t v239;
  unint64_t v240;
  void *v241;
  void *v242;
  uint64_t v243;
  _QWORD *v244;
  unint64_t v245;
  uint64_t v246;
  unint64_t v247;
  void *v248;
  void *v249;
  uint64_t v250;
  _QWORD *v251;
  id v252;
  id v253;
  id *v254;
  id v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  char *v259;
  uint64_t v260;
  void *v261;
  void *v262;
  unint64_t v263;
  char *v264;
  id v265;
  _QWORD *v266;
  void *v267;
  unint64_t v268;
  id v269;
  void *v270;
  char *v271;
  id v272;
  id v273;
  void *v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  _QWORD *v278;
  id v279;
  _QWORD *v280;
  _QWORD *v281;
  uint64_t v282;
  id v283[3];
  _BYTE v284[64];
  _BYTE v285[64];
  _OWORD v286[2];
  _OWORD v287[2];
  __int128 v288;
  __int128 v289;
  _OWORD v290[2];
  _OWORD v291[2];
  _OWORD v292[2];
  __int128 v293;
  __int128 v294;
  _OWORD v295[3];

  v283[2] = &unk_1EF028578;
  v2 = swift_dynamicCastObjCProtocolConditional();
  if (!v2)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v293 = 0;
    *((_QWORD *)&v293 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    *(_QWORD *)&v291[0] = a1;
    sub_1B19F8F48(0, (unint64_t *)&qword_1ED4B7980);
    sub_1B22295EC();
    sub_1B2228890();
    v233 = v293;
    v234 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v293 = 0;
    swift_retain();
    sub_1B1F1AD70(v234, (uint64_t *)&v293, v233, *((uint64_t *)&v233 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v3 = (void *)v2;
  swift_unknownObjectRetain();
  v4 = objc_msgSend(v3, sel_bufferStructType);
  if (!v4)
  {
    if (qword_1ED4BF430 != -1)
      swift_once();
    *(_QWORD *)&v293 = 0;
    *((_QWORD *)&v293 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B2229430();
    *(_QWORD *)&v291[0] = v3;
    sub_1B19F8F48(0, &qword_1EEF615F0);
    sub_1B22295EC();
    sub_1B2228890();
    v235 = v293;
    v236 = sub_1B2228E90();
    if (qword_1ED4BF658 != -1)
      swift_once();
    *(_QWORD *)&v293 = 0;
    swift_retain();
    sub_1B1F1AD70(v236, (uint64_t *)&v293, v235, *((uint64_t *)&v235 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v238 = v4;
  v5 = objc_msgSend(v4, sel_members);
  sub_1B1ECF2CC();
  v6 = sub_1B2228AB8();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = sub_1B22296AC();
  }
  else
  {
    v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  if (v7)
  {
    v8 = 0;
    v240 = v6 & 0xC000000000000001;
    v239 = v6 + 32;
    v244 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v243 = v8;
      v9 = v240 ? (id)MEMORY[0x1B5E21018]() : *(id *)(v239 + 8 * v8);
      v10 = v9;
      v11 = objc_msgSend(v9, sel_structType);
      if (v11)
        break;
      v207 = objc_msgSend(v10, sel_arrayType);
      if (v207)
      {
        v208 = v207;
        v209 = sub_1B1F84570(0, (uint64_t)objc_msgSend(v207, sel_arrayLength), v207);

        v251 = (_QWORD *)v209;
        v210 = *(_QWORD *)(v209 + 16);
        goto LABEL_298;
      }
      v211 = v10;
      v212 = objc_msgSend(v211, sel_argumentIndex);
      v213 = objc_msgSend(v211, sel_name);
      v214 = sub_1B222874C();
      v216 = v215;

      v217 = objc_msgSend(v211, sel_textureReferenceType);
      v218 = v217;
      if (v217)
      {
        v219 = objc_msgSend(v217, sel_textureType);
        v220 = objc_msgSend(v218, sel_textureDataType);
        LODWORD(v222) = objc_msgSend(v218, sel_isDepthTexture);

        v221 = 0;
        v222 = v222;
      }
      else
      {
        v223 = objc_msgSend(v211, sel_pointerType);
        if (v223)
        {
          v224 = v223;
          v219 = objc_msgSend(v223, sel_dataSize);
          v220 = objc_msgSend(v224, sel_elementType);
          v221 = objc_msgSend(v224, sel_alignment);

          v222 = 0;
        }
        else
        {
          v219 = (id)sub_1B1F9CB40();
          v220 = objc_msgSend(v211, sel_dataType);
          v222 = (unint64_t)objc_msgSend(v211, sel_offset);

          v221 = v219;
        }
      }
      sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
      v225 = swift_allocObject();
      *(_OWORD *)(v225 + 16) = xmmword_1B226D240;
      *(_QWORD *)(v225 + 32) = v214;
      *(_QWORD *)(v225 + 40) = v216;
      *(_QWORD *)(v225 + 48) = v212;
      *(_QWORD *)(v225 + 56) = v219;
      *(_QWORD *)(v225 + 64) = v220;
      *(_QWORD *)(v225 + 72) = v222;
      *(_QWORD *)(v225 + 80) = v221;
      v251 = (_QWORD *)v225;
      *(_BYTE *)(v225 + 88) = v218 != 0;

      v226 = v244[2];
      v227 = v226 + 1;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v210 = 1;
      if (isUniquelyReferenced_nonNull_native)
        goto LABEL_299;
      v229 = v244;
LABEL_304:
      v229 = sub_1B1C67DE0(isUniquelyReferenced_nonNull_native, v227, 1, v229);
LABEL_305:
      if (v251[2])
      {
        v230 = (unint64_t)&v229[8 * v229[2] + 4];
        if ((unint64_t)(v251 + 4) < v230 + (v210 << 6) && v230 < (unint64_t)&v251[8 * v210 + 4])
        {
LABEL_327:
          sub_1B2229700();
          __break(1u);
LABEL_328:
          result = sub_1B2229688();
          __break(1u);
          return result;
        }
        v232 = v229;
        swift_arrayInitWithCopy();
        v229 = v232;
        if (v210)
          v232[2] += v210;
      }
      v244 = v229;
      swift_bridgeObjectRelease();
      v8 = v243 + 1;
      if (v243 + 1 == v7)
        goto LABEL_325;
    }
    v241 = v11;
    v242 = v10;
    v12 = objc_msgSend(v11, sel_members);
    v13 = sub_1B2228AB8();

    if (!(v13 >> 62))
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v14)
        goto LABEL_14;
      goto LABEL_296;
    }
    swift_bridgeObjectRetain();
    v14 = sub_1B22296AC();
    if (!v14)
    {
LABEL_296:
      v251 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_297:
      swift_bridgeObjectRelease_n();

      v210 = v251[2];
LABEL_298:
      v226 = v244[2];
      v227 = v226 + v210;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
      {
LABEL_299:
        v229 = v244;
        if (v227 <= v244[3] >> 1)
          goto LABEL_305;
        LOBYTE(isUniquelyReferenced_nonNull_native) = 1;
      }
      else
      {
        LOBYTE(isUniquelyReferenced_nonNull_native) = 0;
        v229 = v244;
      }
      if (v226 > v227)
        v227 = v226;
      goto LABEL_304;
    }
LABEL_14:
    v15 = 0;
    v247 = v13 & 0xC000000000000001;
    v245 = v13 + 32;
    v251 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v246 = v14;
    while (1)
    {
      v250 = v15;
      if (v247)
        v16 = (id)MEMORY[0x1B5E21018]();
      else
        v16 = *(id *)(v245 + 8 * v15);
      v17 = v16;
      v18 = objc_msgSend(v16, sel_structType);
      if (v18)
      {
        v248 = v17;
        v252 = v18;
        v19 = objc_msgSend(v18, sel_members);
        v20 = sub_1B2228AB8();

        if (!(v20 >> 62))
        {
          v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          if (v21)
            goto LABEL_22;
          goto LABEL_271;
        }
        swift_bridgeObjectRetain();
        v21 = sub_1B22296AC();
        if (!v21)
        {
LABEL_271:
          v266 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_272:
          swift_bridgeObjectRelease_n();

          v197 = v252;
          goto LABEL_273;
        }
LABEL_22:
        v22 = 0;
        v257 = v20 & 0xC000000000000001;
        v254 = (id *)(v20 + 32);
        v266 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v259 = (char *)v21;
        while (1)
        {
          v264 = v22;
          if (v257)
            v23 = (id)MEMORY[0x1B5E21018]();
          else
            v23 = v254[(_QWORD)v22];
          v24 = v23;
          v25 = objc_msgSend(v23, sel_structType);
          if (v25)
          {
            v274 = v25;
            v26 = objc_msgSend(v25, sel_members);
            v27 = sub_1B2228AB8();

            if (!(v27 >> 62))
            {
              v28 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
              v261 = v24;
              if (v28)
                goto LABEL_30;
              goto LABEL_117;
            }
            swift_bridgeObjectRetain();
            v28 = sub_1B22296AC();
            v261 = v24;
            if (!v28)
            {
LABEL_117:
              v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_118:
              swift_bridgeObjectRelease_n();

              goto LABEL_119;
            }
LABEL_30:
            v29 = 0;
            v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
            while (1)
            {
              if ((v27 & 0xC000000000000001) != 0)
                v31 = (id)MEMORY[0x1B5E21018](v29, v27);
              else
                v31 = *(id *)(v27 + 8 * v29 + 32);
              v32 = v31;
              v33 = objc_msgSend(v31, sel_structType);
              if (v33)
              {
                v34 = v33;
                v35 = objc_msgSend(v33, sel_members);
                v36 = v30;
                v37 = sub_1B2228AB8();

                v38 = sub_1B1F7A930(v37);
                swift_bridgeObjectRelease();
                v39 = *(_QWORD *)(v38 + 16);
                v40 = v36[2];
                v41 = v40 + v39;
                v42 = v36;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  goto LABEL_47;
              }
              else
              {
                v43 = objc_msgSend(v32, sel_arrayType);
                if (v43)
                {
                  v44 = v43;
                  v38 = sub_1B1F84570(0, (uint64_t)objc_msgSend(v43, sel_arrayLength), v43);

                }
                else
                {
                  v45 = v32;
                  sub_1B1F843C8(v45, (uint64_t)v284);
                  sub_1B1A18378((uint64_t)v284, (uint64_t)v286, (unint64_t *)&unk_1EEF615F8, (uint64_t)&type metadata for ShaderArgument);
                  if (*((_QWORD *)&v286[0] + 1))
                  {
                    v288 = v286[0];
                    v289 = v286[1];
                    v290[0] = v287[0];
                    *(_OWORD *)((char *)v290 + 9) = *(_OWORD *)((char *)v287 + 9);
                    sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                    v46 = swift_allocObject();
                    v47 = sub_1B19F909C(v46, 1);
                    v49 = v289;
                    v48 = v290[0];
                    v50 = v288;
                    *(_OWORD *)((char *)v51 + 41) = *(_OWORD *)((char *)v290 + 9);
                    v51[1] = v49;
                    v51[2] = v48;
                    *v51 = v50;
                    nullsub_16(v47);
                  }
                  else
                  {
                    v52 = sub_1B1D1E440(0);
                  }
                  v38 = v52;

                }
                v39 = *(_QWORD *)(v38 + 16);
                v40 = v30[2];
                v53 = v30;
                v41 = v40 + v39;
                v42 = v53;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
LABEL_47:
                  v54 = 0;
                  goto LABEL_48;
                }
              }
              if (v41 <= v42[3] >> 1)
              {
                v30 = v42;
                if (!*(_QWORD *)(v38 + 16))
                  goto LABEL_31;
                goto LABEL_52;
              }
              v54 = 1;
LABEL_48:
              if (v40 <= v41)
                v55 = v41;
              else
                v55 = v40;
              v30 = sub_1B1C67DE0(v54, v55, 1, v42);
              if (!*(_QWORD *)(v38 + 16))
                goto LABEL_31;
LABEL_52:
              v56 = (unint64_t)&v30[8 * v30[2] + 4];
              if (v38 + 32 < v56 + (v39 << 6) && v56 < v38 + 32 + (v39 << 6))
                goto LABEL_327;
              swift_arrayInitWithCopy();
              if (v39)
                v30[2] += v39;
LABEL_31:
              swift_bridgeObjectRelease();
              if (v28 == ++v29)
                goto LABEL_118;
            }
          }
          v58 = objc_msgSend(v24, sel_arrayType);
          if (!v58)
          {
            v86 = v24;
            v279 = objc_msgSend(v86, sel_argumentIndex);
            v87 = objc_msgSend(v86, sel_name);
            v88 = sub_1B222874C();
            v90 = v89;

            v91 = objc_msgSend(v86, sel_textureReferenceType);
            v92 = v91;
            if (v91)
            {
              v93 = objc_msgSend(v91, sel_textureType);
              v94 = objc_msgSend(v92, sel_textureDataType);
              v95 = objc_msgSend(v92, sel_isDepthTexture);

              v96 = 0;
              v97 = (id)v95;
            }
            else
            {
              v98 = objc_msgSend(v86, sel_pointerType);
              if (v98)
              {
                v99 = v98;
                v93 = objc_msgSend(v98, sel_dataSize);
                v94 = objc_msgSend(v99, sel_elementType);
                v96 = objc_msgSend(v99, sel_alignment);

                v97 = 0;
              }
              else
              {
                v93 = (id)sub_1B1F9CB40();
                v94 = objc_msgSend(v86, sel_dataType);
                v97 = objc_msgSend(v86, sel_offset);

                v96 = v93;
              }
            }
            sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
            v100 = swift_allocObject();
            *(_OWORD *)(v100 + 16) = xmmword_1B226D240;
            *(_QWORD *)(v100 + 32) = v88;
            *(_QWORD *)(v100 + 40) = v90;
            *(_QWORD *)(v100 + 48) = v279;
            *(_QWORD *)(v100 + 56) = v93;
            v30 = (_QWORD *)v100;
            *(_QWORD *)(v100 + 64) = v94;
            *(_QWORD *)(v100 + 72) = v97;
            *(_QWORD *)(v100 + 80) = v96;
            *(_BYTE *)(v100 + 88) = v92 != 0;

            v101 = v266[2];
            v102 = v101 + 1;
            v103 = swift_isUniquelyReferenced_nonNull_native();
            v104 = 1;
            if (!v103)
            {
              v105 = v266;
              goto LABEL_126;
            }
            goto LABEL_120;
          }
          v59 = v58;
          v262 = v24;
          v269 = objc_msgSend(v58, sel_arrayLength);
          if (v269)
            break;
          v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_110:

LABEL_119:
          v104 = v30[2];
          v101 = v266[2];
          v102 = v101 + v104;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            LOBYTE(v103) = 0;
            v105 = v266;
            goto LABEL_124;
          }
LABEL_120:
          v105 = v266;
          if (v102 > v266[3] >> 1)
          {
            LOBYTE(v103) = 1;
LABEL_124:
            if (v101 > v102)
              v102 = v101;
LABEL_126:
            v105 = sub_1B1C67DE0(v103, v102, 1, v105);
            if (!v30[2])
              goto LABEL_23;
            goto LABEL_127;
          }
          if (!v30[2])
            goto LABEL_23;
LABEL_127:
          v106 = v105;
          v107 = (unint64_t)&v105[8 * v105[2] + 4];
          if ((unint64_t)(v30 + 4) < v107 + (v104 << 6) && v107 < (unint64_t)&v30[8 * v104 + 4])
            goto LABEL_327;
          swift_arrayInitWithCopy();
          v105 = v106;
          if (v104)
            v106[2] += v104;
LABEL_23:
          v266 = v105;
          swift_bridgeObjectRelease();
          v22 = v264 + 1;
          if (v264 + 1 == v259)
            goto LABEL_272;
        }
        v60 = 0;
        v30 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v267 = v59;
        while (1)
        {
          v61 = objc_msgSend(v59, sel_elementStructType);
          if (v61)
            break;
          v77 = objc_msgSend(v59, sel_elementArrayType);
          if (!v77)
            goto LABEL_328;
          v78 = v77;
          v66 = (_QWORD *)sub_1B1F84570(0, (uint64_t)objc_msgSend(v77, sel_arrayLength), v77);
LABEL_92:

          v79 = v66[2];
          v80 = v30[2];
          v81 = v80 + v79;
          v82 = swift_isUniquelyReferenced_nonNull_native();
          if ((v82 & 1) != 0 && v81 <= v30[3] >> 1)
          {
            if (!v66[2])
              goto LABEL_63;
          }
          else
          {
            if (v80 <= v81)
              v83 = v80 + v79;
            else
              v83 = v80;
            v30 = sub_1B1C67DE0(v82, v83, 1, v30);
            if (!v66[2])
              goto LABEL_63;
          }
          v84 = (unint64_t)&v30[8 * v30[2] + 4];
          if ((unint64_t)(v66 + 4) < v84 + (v79 << 6) && v84 < (unint64_t)&v66[8 * v79 + 4])
            goto LABEL_327;
          swift_arrayInitWithCopy();
          if (v79)
            v30[2] += v79;
LABEL_63:
          swift_bridgeObjectRelease();
          if ((id)++v60 == v269)
            goto LABEL_110;
        }
        v272 = v61;
        v275 = v60;
        v62 = objc_msgSend(v61, sel_members);
        v63 = sub_1B2228AB8();

        if (!(v63 >> 62))
        {
          v64 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          v278 = v30;
          if (v64)
            goto LABEL_67;
          goto LABEL_90;
        }
        swift_bridgeObjectRetain();
        v64 = sub_1B22296AC();
        v278 = v30;
        if (!v64)
        {
LABEL_90:
          v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_91:
          swift_bridgeObjectRelease_n();
          v30 = v278;
          v59 = v267;
          v78 = v272;
          v60 = v275;
          goto LABEL_92;
        }
LABEL_67:
        v65 = 0;
        v66 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        while (1)
        {
          if ((v63 & 0xC000000000000001) != 0)
            v67 = (id)MEMORY[0x1B5E21018](v65, v63);
          else
            v67 = *(id *)(v63 + 8 * v65 + 32);
          v68 = v67;
          v283[0] = v67;
          sub_1B1F7F0A8(v283, &v282);

          v69 = v282;
          v70 = *(_QWORD *)(v282 + 16);
          v71 = v66[2];
          v72 = v71 + v70;
          v73 = swift_isUniquelyReferenced_nonNull_native();
          if (v73 && v72 <= v66[3] >> 1)
          {
            if (!*(_QWORD *)(v69 + 16))
              goto LABEL_68;
          }
          else
          {
            if (v71 <= v72)
              v74 = v71 + v70;
            else
              v74 = v71;
            v66 = sub_1B1C67DE0(v73, v74, 1, v66);
            if (!*(_QWORD *)(v69 + 16))
              goto LABEL_68;
          }
          v75 = (unint64_t)&v66[8 * v66[2] + 4];
          if (v69 + 32 < v75 + (v70 << 6) && v75 < v69 + 32 + (v70 << 6))
            goto LABEL_327;
          swift_arrayInitWithCopy();
          if (v70)
            v66[2] += v70;
LABEL_68:
          swift_bridgeObjectRelease();
          if (v64 == ++v65)
            goto LABEL_91;
        }
      }
      v255 = objc_msgSend(v17, sel_arrayType);
      if (!v255)
      {
        v185 = v17;
        v186 = objc_msgSend(v185, sel_argumentIndex);
        v187 = objc_msgSend(v185, sel_name);
        v188 = sub_1B222874C();
        v190 = v189;

        v191 = objc_msgSend(v185, sel_textureReferenceType);
        v192 = v191;
        if (v191)
        {
          v193 = objc_msgSend(v191, sel_textureType);
          v194 = objc_msgSend(v192, sel_textureDataType);
          LODWORD(v196) = objc_msgSend(v192, sel_isDepthTexture);

          v195 = 0;
          v196 = v196;
        }
        else
        {
          v198 = objc_msgSend(v185, sel_pointerType);
          if (v198)
          {
            v199 = v198;
            v193 = objc_msgSend(v198, sel_dataSize);
            v194 = objc_msgSend(v199, sel_elementType);
            v195 = objc_msgSend(v199, sel_alignment);

            v196 = 0;
          }
          else
          {
            v193 = (id)sub_1B1F9CB40();
            v194 = objc_msgSend(v185, sel_dataType);
            v196 = (unint64_t)objc_msgSend(v185, sel_offset);

            v195 = v193;
          }
        }
        sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
        v200 = swift_allocObject();
        *(_OWORD *)(v200 + 16) = xmmword_1B226D240;
        *(_QWORD *)(v200 + 32) = v188;
        *(_QWORD *)(v200 + 40) = v190;
        *(_QWORD *)(v200 + 48) = v186;
        *(_QWORD *)(v200 + 56) = v193;
        *(_QWORD *)(v200 + 64) = v194;
        *(_QWORD *)(v200 + 72) = v196;
        *(_QWORD *)(v200 + 80) = v195;
        v266 = (_QWORD *)v200;
        *(_BYTE *)(v200 + 88) = v192 != 0;

        v201 = v251[2];
        v202 = v201 + 1;
        v203 = swift_isUniquelyReferenced_nonNull_native();
        v204 = 1;
        if (!v203)
          goto LABEL_280;
        goto LABEL_274;
      }
      v249 = v17;
      v253 = objc_msgSend(v255, sel_arrayLength);
      if (v253)
        break;
      v266 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_264:

      v197 = v255;
LABEL_273:

      v204 = v266[2];
      v201 = v251[2];
      v202 = v201 + v204;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        LOBYTE(v203) = 0;
        goto LABEL_278;
      }
LABEL_274:
      v205 = v266;
      if (v202 > v251[3] >> 1)
      {
        LOBYTE(v203) = 1;
LABEL_278:
        if (v201 > v202)
          v202 = v201;
LABEL_280:
        v251 = sub_1B1C67DE0(v203, v202, 1, v251);
        v205 = v266;
        if (!v266[2])
          goto LABEL_15;
        goto LABEL_281;
      }
      if (!v266[2])
        goto LABEL_15;
LABEL_281:
      v206 = (unint64_t)&v251[8 * v251[2] + 4];
      if ((unint64_t)(v205 + 4) < v206 + (v204 << 6) && v206 < (unint64_t)&v205[8 * v204 + 4])
        goto LABEL_327;
      swift_arrayInitWithCopy();
      if (v204)
        v251[2] += v204;
LABEL_15:
      swift_bridgeObjectRelease();
      v15 = v250 + 1;
      if (v250 + 1 == v246)
        goto LABEL_297;
    }
    v108 = 0;
    v266 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v256 = v108;
      v109 = objc_msgSend(v255, sel_elementStructType);
      if (!v109)
        break;
      v265 = v109;
      v110 = objc_msgSend(v109, sel_members);
      v111 = sub_1B2228AB8();

      if (!(v111 >> 62))
      {
        v112 = *(_QWORD *)((v111 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v112)
          goto LABEL_139;
        goto LABEL_245;
      }
      swift_bridgeObjectRetain();
      v112 = sub_1B22296AC();
      if (v112)
      {
LABEL_139:
        v113 = 0;
        v268 = v111 & 0xC000000000000001;
        v258 = v111 + 32;
        v114 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v260 = v112;
        v263 = v111;
        while (1)
        {
          if (v268)
            v115 = (id)MEMORY[0x1B5E21018](v113, v111);
          else
            v115 = *(id *)(v258 + 8 * v113);
          v116 = v115;
          v117 = objc_msgSend(v115, sel_structType);
          if (v117)
          {
            v276 = v113;
            v270 = v117;
            v118 = objc_msgSend(v117, sel_members);
            v119 = sub_1B2228AB8();

            if (v119 >> 62)
            {
              swift_bridgeObjectRetain();
              v120 = sub_1B22296AC();
            }
            else
            {
              v120 = *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain();
            }
            v280 = v114;
            if (v120)
            {
              v121 = 0;
              v122 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              while (1)
              {
                if ((v119 & 0xC000000000000001) != 0)
                  v123 = (id)MEMORY[0x1B5E21018](v121, v119);
                else
                  v123 = *(id *)(v119 + 8 * v121 + 32);
                v124 = v123;
                v283[0] = v123;
                sub_1B1F7F0A8(v283, &v282);

                v125 = v282;
                v126 = *(_QWORD *)(v282 + 16);
                v127 = v122[2];
                v128 = v127 + v126;
                v129 = swift_isUniquelyReferenced_nonNull_native();
                if (v129 && v128 <= v122[3] >> 1)
                {
                  if (!*(_QWORD *)(v125 + 16))
                    goto LABEL_149;
                }
                else
                {
                  if (v127 <= v128)
                    v130 = v127 + v126;
                  else
                    v130 = v127;
                  v122 = sub_1B1C67DE0(v129, v130, 1, v122);
                  if (!*(_QWORD *)(v125 + 16))
                    goto LABEL_149;
                }
                v131 = (unint64_t)&v122[8 * v122[2] + 4];
                if (v125 + 32 < v131 + (v126 << 6) && v131 < v125 + 32 + (v126 << 6))
                  goto LABEL_327;
                swift_arrayInitWithCopy();
                if (v126)
                  v122[2] += v126;
LABEL_149:
                swift_bridgeObjectRelease();
                if (v120 == ++v121)
                  goto LABEL_171;
              }
            }
            v122 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_171:
            swift_bridgeObjectRelease_n();

            v135 = v122[2];
            v114 = v280;
            v136 = v280[2];
            v137 = v136 + v135;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v138 = 0;
              v112 = v260;
              v111 = v263;
              v113 = v276;
              goto LABEL_183;
            }
            v112 = v260;
            v111 = v263;
            v113 = v276;
          }
          else
          {
            v133 = objc_msgSend(v116, sel_arrayType);
            if (v133)
            {
              v134 = v133;
              v122 = (_QWORD *)sub_1B1F84570(0, (uint64_t)objc_msgSend(v133, sel_arrayLength), v133);

            }
            else
            {
              v134 = v116;
              sub_1B1F843C8(v134, (uint64_t)v285);
              sub_1B1A18378((uint64_t)v285, (uint64_t)v291, (unint64_t *)&unk_1EEF615F8, (uint64_t)&type metadata for ShaderArgument);
              if (*((_QWORD *)&v291[0] + 1))
              {
                v293 = v291[0];
                v294 = v291[1];
                v295[0] = v292[0];
                *(_OWORD *)((char *)v295 + 9) = *(_OWORD *)((char *)v292 + 9);
                sub_1B1A02758(0, (unint64_t *)&unk_1ED4BAD60, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
                v139 = swift_allocObject();
                v140 = sub_1B19F909C(v139, 1);
                v142 = v294;
                v141 = v295[0];
                v143 = v293;
                *(_OWORD *)((char *)v144 + 41) = *(_OWORD *)((char *)v295 + 9);
                v144[1] = v142;
                v144[2] = v141;
                *v144 = v143;
                nullsub_16(v140);
              }
              else
              {
                v145 = sub_1B1D1E440(0);
              }
              v122 = (_QWORD *)v145;
            }

            v135 = v122[2];
            v136 = v114[2];
            v137 = v136 + v135;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              v138 = 0;
              goto LABEL_183;
            }
          }
          if (v137 <= v114[3] >> 1)
          {
            if (!v122[2])
              goto LABEL_140;
            goto LABEL_187;
          }
          v138 = 1;
LABEL_183:
          if (v136 <= v137)
            v146 = v137;
          else
            v146 = v136;
          v114 = sub_1B1C67DE0(v138, v146, 1, v114);
          if (!v122[2])
            goto LABEL_140;
LABEL_187:
          v147 = (unint64_t)&v114[8 * v114[2] + 4];
          if ((unint64_t)(v122 + 4) < v147 + (v135 << 6) && v147 < (unint64_t)&v122[8 * v135 + 4])
            goto LABEL_327;
          swift_arrayInitWithCopy();
          if (v135)
            v114[2] += v135;
LABEL_140:
          swift_bridgeObjectRelease();
          if (++v113 == v112)
            goto LABEL_246;
        }
      }
LABEL_245:
      v114 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_246:
      swift_bridgeObjectRelease_n();
LABEL_247:

      v176 = v114;
      v177 = v114[2];
      v178 = v266;
      v179 = v266[2];
      v180 = v179 + v177;
      v181 = swift_isUniquelyReferenced_nonNull_native();
      if ((v181 & 1) == 0 || v180 > v266[3] >> 1)
      {
        if (v179 <= v180)
          v182 = v179 + v177;
        else
          v182 = v179;
        v178 = sub_1B1C67DE0(v181, v182, 1, v266);
      }
      if (v176[2])
      {
        v183 = (unint64_t)&v178[8 * v178[2] + 4];
        if ((unint64_t)(v176 + 4) < v183 + (v177 << 6) && v183 < (unint64_t)&v176[8 * v177 + 4])
          goto LABEL_327;
        swift_arrayInitWithCopy();
        if (v177)
          v178[2] += v177;
      }
      v266 = v178;
      swift_bridgeObjectRelease();
      v108 = v256 + 1;
      if ((id)(v256 + 1) == v253)
        goto LABEL_264;
    }
    v149 = objc_msgSend(v255, sel_elementArrayType);
    if (!v149)
      goto LABEL_328;
    v265 = v149;
    v271 = (char *)objc_msgSend(v149, sel_arrayLength);
    if (!v271)
    {
      v114 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      goto LABEL_247;
    }
    v150 = 0;
    v114 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      v281 = v114;
      v151 = objc_msgSend(v265, sel_elementStructType);
      if (v151)
        break;
      v167 = objc_msgSend(v265, sel_elementArrayType);
      if (!v167)
        goto LABEL_328;
      v168 = v167;
      v156 = (_QWORD *)sub_1B1F84570(0, (uint64_t)objc_msgSend(v167, sel_arrayLength), v167);
LABEL_228:

      v169 = v156[2];
      v170 = v281[2];
      v171 = v170 + v169;
      v172 = swift_isUniquelyReferenced_nonNull_native();
      if ((v172 & 1) != 0 && v171 <= v281[3] >> 1)
      {
        if (!v156[2])
          goto LABEL_199;
      }
      else
      {
        if (v170 <= v171)
          v173 = v170 + v169;
        else
          v173 = v170;
        v281 = sub_1B1C67DE0(v172, v173, 1, v281);
        if (!v156[2])
          goto LABEL_199;
      }
      v174 = (unint64_t)&v281[8 * v281[2] + 4];
      if ((unint64_t)(v156 + 4) < v174 + (v169 << 6) && v174 < (unint64_t)&v156[8 * v169 + 4])
        goto LABEL_327;
      swift_arrayInitWithCopy();
      if (v169)
        v281[2] += v169;
LABEL_199:
      swift_bridgeObjectRelease();
      ++v150;
      v114 = v281;
      if (v150 == v271)
        goto LABEL_247;
    }
    v273 = v151;
    v277 = v150;
    v152 = objc_msgSend(v151, sel_members);
    v153 = sub_1B2228AB8();

    if (!(v153 >> 62))
    {
      v154 = *(_QWORD *)((v153 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v154)
        goto LABEL_203;
      goto LABEL_226;
    }
    swift_bridgeObjectRetain();
    v154 = sub_1B22296AC();
    if (!v154)
    {
LABEL_226:
      v156 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_227:
      swift_bridgeObjectRelease_n();
      v168 = v273;
      v150 = v277;
      goto LABEL_228;
    }
LABEL_203:
    v155 = 0;
    v156 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if ((v153 & 0xC000000000000001) != 0)
        v157 = (id)MEMORY[0x1B5E21018](v155, v153);
      else
        v157 = *(id *)(v153 + 8 * v155 + 32);
      v158 = v157;
      v283[0] = v157;
      sub_1B1F7F0A8(v283, &v282);

      v159 = v282;
      v160 = *(_QWORD *)(v282 + 16);
      v161 = v156[2];
      v162 = v161 + v160;
      v163 = swift_isUniquelyReferenced_nonNull_native();
      if (v163 && v162 <= v156[3] >> 1)
      {
        if (!*(_QWORD *)(v159 + 16))
          goto LABEL_204;
      }
      else
      {
        if (v161 <= v162)
          v164 = v161 + v160;
        else
          v164 = v161;
        v156 = sub_1B1C67DE0(v163, v164, 1, v156);
        if (!*(_QWORD *)(v159 + 16))
          goto LABEL_204;
      }
      v165 = (unint64_t)&v156[8 * v156[2] + 4];
      if (v159 + 32 < v165 + (v160 << 6) && v165 < v159 + 32 + (v160 << 6))
        goto LABEL_327;
      swift_arrayInitWithCopy();
      if (v160)
        v156[2] += v160;
LABEL_204:
      swift_bridgeObjectRelease();
      if (v154 == ++v155)
        goto LABEL_227;
    }
  }
  v244 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_325:
  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();

  return (uint64_t)v244;
}

uint64_t sub_1B1F8120C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F91718(*a1, *a2);
}

uint64_t sub_1B1F81218()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F812C0()
{
  sub_1B2228824();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F81344()
{
  sub_1B222A06C();
  sub_1B2228824();
  swift_bridgeObjectRelease();
  return sub_1B222A0C0();
}

uint64_t sub_1B1F813E8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F83E00();
  *a1 = result;
  return result;
}

void sub_1B1F81414(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xEC000000736E6F69;
  v4 = 0xE600000000000000;
  v5 = 0x7365756C6176;
  if (v2 != 1)
  {
    v5 = 0xD000000000000011;
    v4 = 0x80000001B2328900;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7470697263736564;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B1F8147C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7365756C6176;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0x7470697263736564;
}

uint64_t sub_1B1F814E0@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F83E00();
  *a1 = result;
  return result;
}

uint64_t sub_1B1F81504()
{
  sub_1B1F848C4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F8152C()
{
  sub_1B1F848C4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F81554(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = v1;
  sub_1B19F8E54(0, &qword_1EEF61608, (uint64_t (*)(void))sub_1B1F848C4, (uint64_t)&type metadata for CustomParameters.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v12 - v9;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F848C4();
  sub_1B222A180();
  v14 = v3[2];
  v13 = 0;
  sub_1B1A02758(0, &qword_1ED4BA3B8, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
  sub_1B1F84B3C();
  sub_1B2229958();
  if (!v2)
  {
    v14 = v3[3];
    v13 = 1;
    sub_1B1A02758(0, &qword_1ED4BA3D8, (uint64_t)&type metadata for ShaderParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1F84BF8();
    sub_1B2229958();
    v14 = v3[4];
    v13 = 2;
    sub_1B1A02758(0, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    sub_1B1F84CB4();
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B1F81758(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  sub_1B19F8E54(0, &qword_1ED4BAAF8, (uint64_t (*)(void))sub_1B1F848C4, (uint64_t)&type metadata for CustomParameters.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v17 = v3;
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v5);
  v7 = (char *)&v16 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F848C4();
  v8 = v18;
  v9 = v1;
  sub_1B222A150();
  if (v8)
  {
    swift_deallocPartialClassInstance();
  }
  else
  {
    v10 = v4;
    sub_1B1A02758(0, &qword_1ED4BA3B8, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v19 = 0;
    sub_1B1F84908();
    v11 = v17;
    sub_1B2229814();
    *(_QWORD *)(v1 + 16) = v20;
    sub_1B1A02758(0, &qword_1ED4BA3D8, (uint64_t)&type metadata for ShaderParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v19 = 1;
    sub_1B1F849C4();
    sub_1B2229814();
    *(_QWORD *)(v1 + 24) = v20;
    v13 = a1[3];
    v14 = a1[4];
    sub_1B19FA070(a1, v13);
    if (sub_1B2067BAC(2021, v13, v14))
    {
      sub_1B1A02758(0, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
      v19 = 2;
      sub_1B1F84A80();
      sub_1B22297B4();
      if (v20)
        v15 = v20;
      else
        v15 = MEMORY[0x1E0DEE9D8];
      (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v11);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v11);
      v15 = MEMORY[0x1E0DEE9D8];
    }
    *(_QWORD *)(v9 + 32) = v15;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t type metadata accessor for CustomParameters()
{
  return objc_opt_self();
}

uint64_t destroy for ShaderArguments()
{
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for ShaderArguments(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShaderArguments(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t assignWithTake for ShaderArguments(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderArguments(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderArguments(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderArguments()
{
  return &type metadata for ShaderArguments;
}

uint64_t getEnumTagSinglePayload for ShaderParameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xF && *(_BYTE *)(a1 + 65))
    return (*(_DWORD *)a1 + 15);
  v3 = ((*(unsigned __int8 *)(a1 + 64) >> 3) & 0xE | (*(unsigned __int8 *)(a1 + 64) >> 7)) ^ 0xF;
  if (v3 >= 0xE)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ShaderParameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 15;
    if (a3 >= 0xF)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if (a3 >= 0xF)
      *(_BYTE *)(result + 65) = 0;
    if (a2)
    {
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)(result + 48) = 0u;
      *(_OWORD *)result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_BYTE *)(result + 64) = 16 * (((-a2 >> 1) & 7) - 8 * a2);
    }
  }
  return result;
}

uint64_t sub_1B1F81D88(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64) >> 7;
}

uint64_t sub_1B1F81D94(uint64_t result)
{
  *(_BYTE *)(result + 64) &= ~0x80u;
  return result;
}

uint64_t sub_1B1F81DA4(uint64_t result, char a2)
{
  *(_BYTE *)(result + 64) = *(_BYTE *)(result + 64) & 0xF | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for ShaderParameter()
{
  return &type metadata for ShaderParameter;
}

uint64_t initializeWithCopy for ShaderArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ShaderArgument(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for ShaderArgument(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for ShaderArgument(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 57))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderArgument(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 57) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderArgument()
{
  return &type metadata for ShaderArgument;
}

uint64_t sub_1B1F81F7C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = swift_allocObject();
  result = sub_1B1F81758(a1);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1F81FD0(_QWORD *a1)
{
  return sub_1B1F81554(a1);
}

_QWORD *sub_1B1F81FF0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t ObjectType;
  uint64_t v13;

  v5 = v2[2];
  v4 = (char *)v2[3];
  v6 = v2[4];
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v5;
  v7[3] = v4;
  v7[4] = v6;
  v8 = *((_QWORD *)v4 + 2);
  if (v8)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = 0;
    do
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v4 = sub_1B1FFEDB8((uint64_t)v4);
      v10 = &v4[v9];
      if (v4[v9 + 96] < 0)
      {
        v13 = *((_QWORD *)v10 + 4);
        ObjectType = swift_getObjectType();
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(a2 + 8))(&v13, 0, ObjectType, a2);
        *((_QWORD *)v10 + 4) = v13;
        *(_OWORD *)(v10 + 40) = 0u;
        *(_OWORD *)(v10 + 56) = 0u;
        *(_OWORD *)(v10 + 72) = 0u;
        *((_QWORD *)v10 + 11) = 0;
        v10[96] = 0x80;
      }
      v9 += 80;
      --v8;
    }
    while (v8);
    v7[3] = v4;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1B1F82130(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  BOOL v24;

  v4 = *(_QWORD *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v4)
  {
    v5 = v3;
    v8 = *(_QWORD *)(result + 8);
    v9 = *(_QWORD *)(v8 + 176);
    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 288) + 128);
    if (*(_BYTE *)(v8 + 208) == 1)
    {
      v11 = (v10 + v9 - 1) & -v10;
      if (v11 < 1)
        return result;
    }
    else
    {
      v11 = ((*(_QWORD *)(v8 + 200) + v10 - 1) & -v10) + ((v10 - 1 + v9) & -v10);
      if (v11 < 1)
        return result;
    }
    swift_retain();
    v23 = (_OWORD *)(a2 + 144);
    sub_1B1F1B33C(v11, v4);
    v24 = 0;
    v12 = *(void **)(v8 + 168);
    v13 = *(_QWORD *)(v8 + 176);
    v14 = *(void **)(v8 + 192);
    if (*(_BYTE *)(v8 + 208) == 1)
    {
      if (v13 > 0)
      {
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B1F84D70(v12, v13, 3, a2, v5, a3, &v24);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      v15 = *(_QWORD *)(v8 + 200);
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      if (v13 > 0)
        sub_1B1F84D70(v12, v13, 1, a2, v5, a3, &v24);
      if (v15 >= 1)
        sub_1B1F84D70(v14, v15, 2, a2, v5, a3, &v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease();
      swift_unknownObjectRelease();
    }
    *(_BYTE *)(a2 + 225) = v24;
    v16 = *(_QWORD *)(a2 + 152);
    if (v16 && (v17 = *(_QWORD *)(a2 + 168), v17 > 0))
    {
      v18 = *(_QWORD *)(a2 + 160);
      v19 = (void *)sub_1B1BA683C(1953066050, 0xE400000000000000, 0);
      v20 = (void *)sub_1B2228728();
      objc_msgSend(v19, sel_pushDebugGroup_, v20);

      v21 = *(_QWORD *)(a2 + 176);
      if (v21)
      {
        v22 = *(_QWORD *)(a2 + 184);
        swift_unknownObjectRetain();
        objc_msgSend(v19, sel_copyFromBuffer_sourceOffset_toBuffer_destinationOffset_size_, v16, v18, v21, v22, v17);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        *v23 = 0u;
        v23[1] = 0u;
      }
      objc_msgSend(v19, sel_popDebugGroup, v23);
      swift_release();
      return swift_unknownObjectRelease();
    }
    else
    {
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_1B1F82420(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *i;

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
    return 0;
  for (i = (char *)(v2 + 96); (*i & 0x80000000) == 0 || *((_QWORD *)i - 8) != a1; i += 80)
  {
    if (!--v3)
      return 0;
  }
  return 1;
}

void sub_1B1F82470(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 16);
}

void (*sub_1B1F82484(_QWORD *a1, _QWORD *a2))(void **a1)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  v5 = malloc(0x111uLL);
  *a1 = v5;
  v6 = *(_QWORD *)(*(_QWORD *)v2 + 16) + (*a2 << 6);
  v7 = *(_QWORD *)(v6 + 40);
  v8 = *(_QWORD *)(v6 + 80);
  v9 = *(_BYTE *)(v6 + 88);
  v10 = *(_QWORD *)(*(_QWORD *)v2 + 24) + 80 * *a2;
  v11 = *(_BYTE *)(v10 + 96);
  v12 = *(_OWORD *)(v6 + 48);
  v13 = *(_OWORD *)(v6 + 64);
  v14 = *(_OWORD *)(v10 + 32);
  v15 = *(_OWORD *)(v10 + 48);
  v16 = *(_OWORD *)(v10 + 64);
  v17 = *(_OWORD *)(v10 + 80);
  *v5 = *(_QWORD *)(v6 + 32);
  v5[1] = v7;
  *((_OWORD *)v5 + 1) = v12;
  *((_OWORD *)v5 + 2) = v13;
  v5[6] = v8;
  *((_BYTE *)v5 + 56) = v9;
  *((_OWORD *)v5 + 4) = v14;
  *((_OWORD *)v5 + 5) = v15;
  *((_OWORD *)v5 + 6) = v16;
  *((_OWORD *)v5 + 7) = v17;
  *((_BYTE *)v5 + 128) = v11;
  swift_bridgeObjectRetain();
  return sub_1B1F82520;
}

void sub_1B1F82520(void **a1)
{
  _OWORD *v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v1 = *a1;
  v2 = (uint64_t)*a1 + 144;
  v3 = v1[7];
  v1[15] = v1[6];
  v1[16] = v3;
  *((_BYTE *)v1 + 272) = *((_BYTE *)v1 + 128);
  v4 = v1[3];
  v1[11] = v1[2];
  v1[12] = v4;
  v5 = v1[5];
  v1[13] = v1[4];
  v1[14] = v5;
  v6 = v1[1];
  v1[9] = *v1;
  v1[10] = v6;
  sub_1B1BA80C0(v2);
  free(v1);
}

uint64_t sub_1B1F82570@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_OWORD *)a2 = *a1;
  *(_QWORD *)(a2 + 16) = v3;
  return swift_retain();
}

uint64_t sub_1B1F82588@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 16) + 16);
  *a1 = *(_QWORD *)v1;
  a1[1] = 0;
  a1[2] = v2;
  return swift_retain();
}

_QWORD *sub_1B1F825A0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  *a3 = *result + (a2 & ~(a2 >> 63));
  return result;
}

uint64_t sub_1B1F825B4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  char v6;

  result = sub_1B1F83710(*a1, a2, *a3);
  *(_QWORD *)a4 = result;
  *(_BYTE *)(a4 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1B1F825E8()
{
  uint64_t v0;

  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 16) + 16);
}

_QWORD *sub_1B1F825F8()
{
  uint64_t *v0;
  _QWORD *v1;

  v1 = sub_1B1DC8680(*v0);
  swift_release();
  return v1;
}

uint64_t sub_1B1F8262C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F7A7B4(a1, a2, a3);
}

_QWORD *sub_1B1F8264C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3 = *(_QWORD *)(v1 + 16);
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  v4 = swift_bridgeObjectRetain();
  v5 = sub_1B1F837D8(v4, a1);
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  v6 = *(_QWORD *)(v1 + 32);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v5;
  v7[4] = v6;
  swift_bridgeObjectRetain();
  return v7;
}

_QWORD *sub_1B1F826FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;

  result = sub_1B1F8264C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1B1F82724()
{
  return sub_1B1A1F838(&qword_1EEF615B0, 255, (uint64_t (*)(uint64_t))sub_1B1F82754, MEMORY[0x1E0DEC908]);
}

void sub_1B1F82754(uint64_t a1)
{
  sub_1B1F827D8(a1, &qword_1EEF615B8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEC8F8]);
}

uint64_t sub_1B1F82768(uint64_t a1, uint64_t a2)
{
  return sub_1B1A1F838(&qword_1EEF615C8, a2, (uint64_t (*)(uint64_t))type metadata accessor for CustomParameters, (uint64_t)&unk_1B22A66C0);
}

uint64_t sub_1B1F82794()
{
  return sub_1B1A1F838(&qword_1EEF615D0, 255, (uint64_t (*)(uint64_t))sub_1B1F827C4, MEMORY[0x1E0DEA228]);
}

void sub_1B1F827C4(uint64_t a1)
{
  sub_1B1F827D8(a1, &qword_1EEF615D8, MEMORY[0x1E0DEA200]);
}

void sub_1B1F827D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  if (!*a2)
  {
    v6 = type metadata accessor for CustomParameters();
    v8 = sub_1B1A1F838(&qword_1EEF615C0, v7, (uint64_t (*)(uint64_t))type metadata accessor for CustomParameters, (uint64_t)&unk_1B22A6728);
    v9 = a3(a1, v6, v8);
    if (!v10)
      atomic_store(v9, a2);
  }
}

uint64_t sub_1B1F82850()
{
  return sub_1B1A1F838(&qword_1EEF615E0, 255, (uint64_t (*)(uint64_t))sub_1B1F82880, MEMORY[0x1E0DEDE48]);
}

void sub_1B1F82880(uint64_t a1)
{
  sub_1B1F827D8(a1, &qword_1EEF615E8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDE10]);
}

uint64_t sub_1B1F82894(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1B1A1F838(&qword_1ED4B8D90, a2, (uint64_t (*)(uint64_t))type metadata accessor for CustomParameters, (uint64_t)&unk_1B22A684C);
  result = sub_1B1A1F838(&qword_1ED4B8D88, v3, (uint64_t (*)(uint64_t))type metadata accessor for CustomParameters, (uint64_t)&unk_1B22A6824);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1B1F828F4()
{
  unint64_t result;

  result = qword_1ED4B8B80;
  if (!qword_1ED4B8B80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6610, &type metadata for ShaderArgument);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B80);
  }
  return result;
}

uint64_t sub_1B1F82938(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t result;
  unint64_t v5[8];
  char v6;
  _BYTE v7[80];
  __int128 v8;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  sub_1B1B9A484(a1, (uint64_t)v5);
  if ((v6 & 0x80000000) == 0)
  {
    sub_1B1B2A86C((uint64_t)v5, (uint64_t)v7);
    sub_1B1B2A86C((uint64_t)v7, (uint64_t)&v8);
    __asm { BR              X10 }
  }
  v6 &= ~0x80u;
  result = sub_1B20F26A4(v5[0], &v8);
  if (result)
  {
    objc_msgSend(v2, sel_setTexture_atIndex_, result, a2);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B1F82B44(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B1F82E10(a1, a2, a3, (void (*)(void))sub_1B1EA8AB8, (void (*)(void))sub_1B1E91F8C, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB32B8);
}

uint64_t sub_1B1F82B60(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  char v15;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1B1DC3AC8(a1);
  v9 = v8;
  v10 = v8 ^ 1;
  v11 = *(_QWORD *)(v6 + 24);
  v12 = *(_QWORD *)(v6 + 16) + ((v8 ^ 1) & 1);
  if (v11 >= v12 && (a2 & 1) != 0)
  {
LABEL_6:
    if ((v9 & 1) != 0)
      return v10 & 1;
LABEL_7:
    sub_1B1EB3514(v7, a1, *v3);
    return v10 & 1;
  }
  if (v11 >= v12 && (a2 & 1) == 0)
  {
    sub_1B1EA8AC4();
    goto LABEL_6;
  }
  sub_1B1E91F98(v12, a2 & 1);
  v14 = sub_1B1DC3AC8(a1);
  if ((v9 & 1) == (v15 & 1))
  {
    v7 = v14;
    if ((v9 & 1) != 0)
      return v10 & 1;
    goto LABEL_7;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F82C38(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B1F834D8(a1, a2, a3, (void (*)(void))sub_1B1EA9024, (void (*)(void))sub_1B1E92BB0, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB32B8);
}

uint64_t sub_1B1F82C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3AC8(a2);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a3 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = (_QWORD *)(v16[7] + 88 * v11);
      v32 = v17[1];
      v18 = v17[2];
      v19 = v17[3];
      v20 = v17[4];
      v21 = v17[5];
      v22 = v17[6];
      v23 = v17[7];
      v24 = a1;
      v26 = v17[8];
      v25 = v17[9];
      v27 = v17[10];
      *a4 = *v17;
      result = sub_1B1A18378(v24, (uint64_t)v17, &qword_1EEF5B790, (uint64_t)&type metadata for GraphCodeGen.CodeGenAtom);
      v29 = v32;
LABEL_11:
      a4[1] = v29;
      a4[2] = v18;
      a4[3] = v19;
      a4[4] = v20;
      a4[5] = v21;
      a4[6] = v22;
      a4[7] = v23;
      a4[8] = v26;
      a4[9] = v25;
      a4[10] = v27;
      return result;
    }
LABEL_10:
    result = sub_1B1EB358C(v11, a2, a1, v16);
    v29 = 0;
    v18 = 0;
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v26 = 0;
    v25 = 0;
    v27 = 0;
    *a4 = 1;
    goto LABEL_11;
  }
  if (v14 >= v15 && (a3 & 1) == 0)
  {
    sub_1B1EA9030();
    goto LABEL_6;
  }
  sub_1B1E92BBC(v15, a3 & 1);
  v30 = sub_1B1DC3AC8(a2);
  if ((v13 & 1) == (v31 & 1))
  {
    v11 = v30;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
    goto LABEL_10;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F82DD8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B1F834D8(a1, a2, a3, (void (*)(void))sub_1B1EA9D20, (void (*)(void))sub_1B1E943E8, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB32B8);
}

uint64_t sub_1B1F82DF4(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B1F82E10(a1, a2, a3, (void (*)(void))sub_1B1EA9D2C, (void (*)(void))sub_1B1E94400, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB32B8);
}

uint64_t sub_1B1F82E10(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v10;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v10 = v6;
  v14 = *v6;
  v15 = sub_1B1DC3AC8(a2);
  v17 = v16;
  v18 = *(_QWORD *)(v14 + 24);
  v19 = *(_QWORD *)(v14 + 16) + ((v16 & 1) == 0);
  if (v18 >= v19 && (a3 & 1) != 0)
  {
LABEL_6:
    v20 = *v10;
    if ((v17 & 1) != 0)
    {
LABEL_7:
      v21 = *(_QWORD *)(v20 + 56);
      result = *(_QWORD *)(v21 + 8 * v15);
      *(_QWORD *)(v21 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v18 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_6;
  }
  a5();
  v23 = sub_1B1DC3AC8(a2);
  if ((v17 & 1) == (v24 & 1))
  {
    v15 = v23;
    v20 = *v10;
    if ((v17 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    a6(v15, a2, a1, v20);
    return 0;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F82F1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3B00(a2, a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = v16[7];
      result = *(_QWORD *)(v17 + 8 * v11);
      *(_QWORD *)(v17 + 8 * v11) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EA9B84();
    goto LABEL_6;
  }
  sub_1B1E93E78(v15, a4 & 1);
  v19 = sub_1B1DC3B00(a2, a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3510(v11, a2, a3, a1, v16);
    swift_bridgeObjectRetain();
    return 0;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F8302C(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3CA4(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 ^ 1) & 1);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = (uint64_t *)(v14[7] + 8 * v9);
      result = *v15;
      *v15 = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EA9B9C();
    goto LABEL_6;
  }
  sub_1B1E93E90(v13, a3 & 1);
  v17 = sub_1B1DC3CA4(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB3340(v9, a2, a1, v14);
    return 0;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1F8312C(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38[18];
  char v39;
  _BYTE v40[160];

  v5 = v4;
  v10 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v22 = *(_QWORD *)(a1 + 24);
  v23 = *(_QWORD *)(a1 + 32);
  v24 = *(_QWORD *)(a1 + 40);
  v25 = *(_QWORD *)(a1 + 48);
  v26 = *(_QWORD *)(a1 + 56);
  v27 = *(_QWORD *)(a1 + 64);
  v28 = *(_QWORD *)(a1 + 72);
  v29 = *(_QWORD *)(a1 + 80);
  v30 = *(_QWORD *)(a1 + 88);
  v31 = *(_QWORD *)(a1 + 96);
  v32 = *(_QWORD *)(a1 + 104);
  v33 = *(_QWORD *)(a1 + 112);
  v34 = *(_QWORD *)(a1 + 120);
  v35 = *(_QWORD *)(a1 + 128);
  v36 = *(_QWORD *)(a1 + 136);
  v37 = *(_BYTE *)(a1 + 144);
  v12 = *v4;
  v13 = sub_1B1DC3AC8(a2);
  v15 = v14;
  v16 = *(_QWORD *)(v12 + 24);
  v17 = *(_QWORD *)(v12 + 16) + ((v14 & 1) == 0);
  if (v16 >= v17 && (a3 & 1) != 0)
  {
LABEL_6:
    if ((v15 & 1) != 0)
    {
LABEL_7:
      v18 = (uint64_t *)(*(_QWORD *)(*v5 + 56) + 152 * v13);
      memmove(a4, v18, 0x91uLL);
      *v18 = v10;
      v18[1] = v9;
      v18[2] = v11;
      v18[3] = v22;
      v18[4] = v23;
      v18[5] = v24;
      v18[6] = v25;
      v18[7] = v26;
      v18[8] = v27;
      v18[9] = v28;
      v18[10] = v29;
      v18[11] = v30;
      v18[12] = v31;
      v18[13] = v32;
      v18[14] = v33;
      v18[15] = v34;
      v18[16] = v35;
      v18[17] = v36;
      *((_BYTE *)v18 + 144) = v37;
      nullsub_16(a4);
      return;
    }
    goto LABEL_10;
  }
  if (v16 >= v17 && (a3 & 1) == 0)
  {
    sub_1B1EADE60();
    goto LABEL_6;
  }
  sub_1B1E9B630(v17, a3 & 1);
  v19 = sub_1B1DC3AC8(a2);
  if ((v15 & 1) == (v20 & 1))
  {
    v13 = v19;
    if ((v15 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    v21 = (_QWORD *)*v5;
    v38[0] = v10;
    v38[1] = v9;
    v38[2] = v11;
    v38[3] = v22;
    v38[4] = v23;
    v38[5] = v24;
    v38[6] = v25;
    v38[7] = v26;
    v38[8] = v27;
    v38[9] = v28;
    v38[10] = v29;
    v38[11] = v30;
    v38[12] = v31;
    v38[13] = v32;
    v38[14] = v33;
    v38[15] = v34;
    v38[16] = v35;
    v38[17] = v36;
    v39 = v37;
    sub_1B1EB3F54(v13, a2, v38, v21);
    sub_1B1C795B4((uint64_t)v40);
    sub_1B1D72448((uint64_t)v40, (uint64_t)a4, (unint64_t *)&unk_1EEF5CEC0, (void (*)(uint64_t))sub_1B1C795D4);
    return;
  }
  sub_1B2229FC4();
  __break(1u);
}

uint64_t sub_1B1F833B8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v11 = sub_1B1DC3AC8(a3);
  v13 = v12;
  v14 = v10[3];
  v15 = v10[2] + ((v12 & 1) == 0);
  if (v14 >= v15 && (a4 & 1) != 0)
  {
LABEL_6:
    v16 = *v5;
    if ((v13 & 1) != 0)
    {
LABEL_7:
      v17 = (uint64_t *)(v16[7] + 16 * v11);
      result = *v17;
      *v17 = a1;
      v17[1] = a2;
      return result;
    }
    goto LABEL_10;
  }
  if (v14 >= v15 && (a4 & 1) == 0)
  {
    sub_1B1EAE08C();
    goto LABEL_6;
  }
  sub_1B1E9B9A4(v15, a4 & 1);
  v19 = sub_1B1DC3AC8(a3);
  if ((v13 & 1) == (v20 & 1))
  {
    v11 = v19;
    v16 = *v5;
    if ((v13 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB354C(v11, a3, a1, a2, v16);
    return 0;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F834BC(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1B1F834D8(a1, a2, a3, (void (*)(void))sub_1B1EB1C18, (void (*)(void))sub_1B1EA1ACC, (void (*)(unint64_t, uint64_t, uint64_t, uint64_t))sub_1B1EB32B8);
}

uint64_t sub_1B1F834D8(uint64_t a1, uint64_t a2, char a3, void (*a4)(void), void (*a5)(void), void (*a6)(unint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t *v6;
  uint64_t *v10;
  uint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  unint64_t v23;
  char v24;

  v10 = v6;
  v14 = *v6;
  v15 = sub_1B1DC3AC8(a2);
  v17 = v16;
  v18 = *(_QWORD *)(v14 + 24);
  v19 = *(_QWORD *)(v14 + 16) + ((v16 & 1) == 0);
  if (v18 >= v19 && (a3 & 1) != 0)
  {
LABEL_6:
    v20 = *v10;
    if ((v17 & 1) != 0)
    {
LABEL_7:
      v21 = *(_QWORD *)(v20 + 56);
      result = *(_QWORD *)(v21 + 8 * v15);
      *(_QWORD *)(v21 + 8 * v15) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v18 >= v19 && (a3 & 1) == 0)
  {
    a4();
    goto LABEL_6;
  }
  a5();
  v23 = sub_1B1DC3AC8(a2);
  if ((v17 & 1) == (v24 & 1))
  {
    v15 = v23;
    v20 = *v10;
    if ((v17 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    a6(v15, a2, a1, v20);
    return 1;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F835E4(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  unint64_t v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  unint64_t v17;
  char v18;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v9 = sub_1B1DC3AC8(a2);
  v11 = v10;
  v12 = v8[3];
  v13 = v8[2] + ((v10 ^ 1) & 1);
  if (v12 >= v13 && (a3 & 1) != 0)
  {
LABEL_6:
    v14 = *v4;
    if ((v11 & 1) != 0)
    {
LABEL_7:
      v15 = v14[7];
      result = *(_QWORD *)(v15 + 8 * v9);
      *(_QWORD *)(v15 + 8 * v9) = a1;
      return result;
    }
    goto LABEL_10;
  }
  if (v12 >= v13 && (a3 & 1) == 0)
  {
    sub_1B1EB1DF8();
    goto LABEL_6;
  }
  sub_1B1EA1E00(v13, a3 & 1);
  v17 = sub_1B1DC3AC8(a2);
  if ((v11 & 1) == (v18 & 1))
  {
    v9 = v17;
    v14 = *v4;
    if ((v11 & 1) != 0)
      goto LABEL_7;
LABEL_10:
    sub_1B1EB32B8(v9, a2, a1, v14);
    return 0;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F836E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    if (!a5 || a2 != a5)
      return 0;
  }
  else if (a5)
  {
    return 0;
  }
  if (a3 == a6)
    return sub_1B1CC970C(a1, a4);
  return 0;
}

uint64_t sub_1B1F83710(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (a2 >= 1)
  {
    if (result == a3)
    {
      return 0;
    }
    else
    {
      v3 = result + 1;
      v4 = a2 - 2;
      if ((unint64_t)a2 < 2)
      {
        ++result;
      }
      else
      {
        if (~result + a3 < v4)
          v4 = ~result + a3;
        v5 = v4 + 1;
        if (v5 >= 0x21)
        {
          v7 = v5 & 0x1F;
          if ((v5 & 0x1F) == 0)
            v7 = 32;
          v8 = v5 - v7;
          v6 = v8 + 1;
          v3 += v8;
          do
            v8 -= 32;
          while (v8);
        }
        else
        {
          v6 = 1;
        }
        v9 = a2 - v6;
        result = v3;
        while (a3 != result)
        {
          ++result;
          if (!--v9)
            return result;
        }
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B1F837BC(uint64_t a1)
{
  return sub_1B1F83E64(a1, (uint64_t (*)(_QWORD))sub_1B1B95F90, (void (*)(void))sub_1B1E91F8C, (void (*)(void))sub_1B1EA8AB8);
}

uint64_t sub_1B1F837D8(uint64_t a1, uint64_t a2)
{
  int64_t v2;
  uint64_t v3;
  char *i;
  unsigned __int128 v7;
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  int v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  unsigned __int128 v30;
  uint64_t v31;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = MEMORY[0x1E0DEE9D8];
  if (v2)
  {
    v31 = MEMORY[0x1E0DEE9D8];
    sub_1B202AD9C(0, v2, 0);
    v3 = v31;
    for (i = (char *)(a1 + 96); ; i += 80)
    {
      v7 = *((_OWORD *)i - 4);
      v8 = *i;
      if (v8 < 0)
        break;
      v9 = *((_OWORD *)i - 3);
      v10 = *((_OWORD *)i - 2);
      v11 = *((_OWORD *)i - 1);
LABEL_18:
      v24 = *(_QWORD *)(v31 + 16);
      v23 = *(_QWORD *)(v31 + 24);
      if (v24 >= v23 >> 1)
      {
        v29 = v9;
        v30 = v7;
        v27 = v11;
        v28 = v10;
        sub_1B202AD9C(v23 > 1, v24 + 1, 1);
        v11 = v27;
        v10 = v28;
        v9 = v29;
        v7 = v30;
      }
      *(_QWORD *)(v31 + 16) = v24 + 1;
      v25 = v31 + 80 * v24;
      *(_OWORD *)(v25 + 32) = v7;
      *(_OWORD *)(v25 + 48) = v9;
      *(_OWORD *)(v25 + 64) = v10;
      *(_OWORD *)(v25 + 80) = v11;
      *(_BYTE *)(v25 + 96) = v8;
      if (!--v2)
        return v3;
    }
    v12 = *((_QWORD *)i - 8);
    if ((_QWORD)v7 == 0xFFFFFFFFLL)
    {
      v13 = 0;
      v14 = 0xFFFFFFFFLL;
LABEL_17:
      v9 = 0uLL;
      v7 = (unint64_t)v14 | (unsigned __int128)(unint64_t)(v13 << 32);
      LOBYTE(v8) = 0x80;
      v10 = 0uLL;
      v11 = 0uLL;
      goto LABEL_18;
    }
    Strong = swift_weakLoadStrong();
    if (!Strong)
    {
      v13 = 0;
      v14 = 0xFFFFFFFFLL;
      goto LABEL_17;
    }
    v16 = Strong;
    v17 = *(unsigned __int8 *)(a2 + OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed);
    v18 = *(void **)(Strong + 16);
    objc_msgSend(v18, sel_lock);
    if (v17 == 1)
    {
      v19 = *(_QWORD *)(v16 + 32);
      if (!*(_QWORD *)(v19 + 16))
        goto LABEL_15;
    }
    else
    {
      v19 = *(_QWORD *)(v16 + 24);
      if (!*(_QWORD *)(v19 + 16))
        goto LABEL_15;
    }
    v20 = sub_1B1DC3CA4(v12);
    if ((v21 & 1) != 0)
    {
      v22 = (unsigned int *)(*(_QWORD *)(v19 + 56) + 8 * v20);
      v14 = *v22;
      v13 = v22[1];
LABEL_16:
      objc_msgSend(v18, sel_unlock, v27, v28, v29, v30);
      swift_release();
      goto LABEL_17;
    }
LABEL_15:
    v13 = 0;
    v14 = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  return v3;
}

uint64_t sub_1B1F839D4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x657A695361746164 && a2 == 0xE800000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570795461746164 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x74657366666FLL && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E656D6E67696C61 && a2 == 0xE900000000000074)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1B1F83B90(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701667182 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1668506980 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B1F83CBC(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 1701869940 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570795461746164 && a2 == 0xE800000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x68747065447369 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1B1F83E00()
{
  unint64_t v0;

  v0 = sub_1B2229730();
  swift_bridgeObjectRelease();
  if (v0 >= 3)
    return 3;
  else
    return v0;
}

uint64_t sub_1B1F83E48(uint64_t a1)
{
  return sub_1B1F83E64(a1, (uint64_t (*)(_QWORD))sub_1B1B96B00, (void (*)(void))sub_1B1E94400, (void (*)(void))sub_1B1EA9D2C);
}

uint64_t sub_1B1F83E64(uint64_t a1, uint64_t (*a2)(_QWORD), void (*a3)(void), void (*a4)(void))
{
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  char v14;
  unint64_t v15;
  char v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  void (*v23)(void);

  v7 = (char *)MEMORY[0x1E0DEE9D8];
  v8 = (_QWORD *)a2(MEMORY[0x1E0DEE9D8]);
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    return (uint64_t)v8;
  v23 = a4;
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(a1 + 40); ; i += 2)
  {
    v12 = *(i - 1);
    v11 = *i;
    swift_retain_n();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v15 = sub_1B1DC3AC8(v12);
    v16 = v14;
    if (v8[3] < (int64_t)(v8[2] + ((v14 & 1) == 0)))
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v14 & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      v23();
      if ((v16 & 1) == 0)
      {
LABEL_11:
        v8[(v15 >> 6) + 8] |= 1 << v15;
        v19 = 8 * v15;
        *(_QWORD *)(v8[6] + v19) = v12;
        *(_QWORD *)(v8[7] + v19) = v11;
        ++v8[2];
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v7 = sub_1B1C63900(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v21 = *((_QWORD *)v7 + 2);
        v20 = *((_QWORD *)v7 + 3);
        if (v21 >= v20 >> 1)
          v7 = sub_1B1C63900(v20 > 1, v21 + 1, 1, v7);
        *((_QWORD *)v7 + 2) = v21 + 1;
        *(_QWORD *)&v7[8 * v21 + 32] = v12;
        swift_release();
        goto LABEL_4;
      }
    }
LABEL_3:
    *(_QWORD *)(v8[7] + 8 * v15) = v11;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_4:
    if (!--v9)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v8;
    }
  }
  a3();
  v17 = sub_1B1DC3AC8(v12);
  if ((v16 & 1) == (v18 & 1))
  {
    v15 = v17;
    if ((v16 & 1) == 0)
      goto LABEL_11;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

uint64_t sub_1B1F84094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  _QWORD *i;
  BOOL v8;

  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 0;
  v6 = 0;
  for (i = (_QWORD *)(a1 + 40); ; i += 8)
  {
    v8 = *(i - 1) == a2 && *i == a3;
    if (v8 || (sub_1B2229D24() & 1) != 0)
      break;
    if (v3 == ++v6)
      return 0;
  }
  return v6;
}

uint64_t sub_1B1F84124()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F84134()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F84144()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F84154()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F84164()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F84174(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  char v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t result;

  v2 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v3 = sub_1B1B7F1F4(MEMORY[0x1E0DEE9D8]);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return (uint64_t)v3;
  swift_bridgeObjectRetain();
  for (i = (uint64_t *)(a1 + 48); ; i += 3)
  {
    v7 = *(i - 2);
    v6 = *(i - 1);
    v8 = *i;
    swift_retain_n();
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v11 = sub_1B1DC3B00(v7, v6);
    v12 = v10;
    v13 = v3[2] + ((v10 & 1) == 0);
    if (v3[3] < v13)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v10 & 1) == 0)
        goto LABEL_11;
    }
    else
    {
      sub_1B1EA9B84();
      if ((v12 & 1) == 0)
      {
LABEL_11:
        v3[(v11 >> 6) + 8] |= 1 << v11;
        v16 = (uint64_t *)(v3[6] + 16 * v11);
        *v16 = v7;
        v16[1] = v6;
        *(_QWORD *)(v3[7] + 8 * v11) = v8;
        ++v3[2];
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v2 = sub_1B1C63044(0, v2[2] + 1, 1, v2);
        v18 = v2[2];
        v17 = v2[3];
        if (v18 >= v17 >> 1)
          v2 = sub_1B1C63044(v17 > 1, v18 + 1, 1, v2);
        v2[2] = v18 + 1;
        v19 = &v2[2 * v18];
        v19[4] = v7;
        v19[5] = v6;
        swift_release_n();
        goto LABEL_4;
      }
    }
LABEL_3:
    *(_QWORD *)(v3[7] + 8 * v11) = v8;
    swift_release();
    swift_release_n();
    swift_bridgeObjectRelease();
LABEL_4:
    swift_bridgeObjectRelease();
    if (!--v4)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)v3;
    }
  }
  sub_1B1E93E78(v13, isUniquelyReferenced_nonNull_native);
  v14 = sub_1B1DC3B00(v7, v6);
  if ((v12 & 1) == (v15 & 1))
  {
    v11 = v14;
    if ((v12 & 1) == 0)
      goto LABEL_11;
    goto LABEL_3;
  }
  result = sub_1B2229FC4();
  __break(1u);
  return result;
}

void sub_1B1F843C8(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  id v13;
  unint64_t v14;
  id v15;
  void *v16;

  v4 = objc_msgSend(a1, sel_argumentIndex);
  v5 = objc_msgSend(a1, sel_name);
  v6 = sub_1B222874C();
  v8 = v7;

  v9 = objc_msgSend(a1, sel_textureReferenceType);
  v10 = v9;
  if (v9)
  {
    v11 = objc_msgSend(v9, sel_textureType);
    v12 = objc_msgSend(v10, sel_textureDataType);
    LODWORD(v14) = objc_msgSend(v10, sel_isDepthTexture);

    v13 = 0;
    v14 = v14;
  }
  else
  {
    v15 = objc_msgSend(a1, sel_pointerType);
    if (v15)
    {
      v16 = v15;
      v11 = objc_msgSend(v15, sel_dataSize);
      v12 = objc_msgSend(v16, sel_elementType);
      v13 = objc_msgSend(v16, sel_alignment);

      v14 = 0;
    }
    else
    {
      v11 = (id)sub_1B1F9CB40();
      v12 = objc_msgSend(a1, sel_dataType);
      v14 = (unint64_t)objc_msgSend(a1, sel_offset);

      v13 = v11;
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v4;
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 32) = v12;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v13;
  *(_BYTE *)(a2 + 56) = v10 != 0;
}

uint64_t sub_1B1F84570(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  uint64_t v16;

  v4 = a2 - a1;
  if (a2 != a1)
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      sub_1B1F7D864(a3, &v16);
      if (v3)
      {
        swift_bridgeObjectRelease();
        return (uint64_t)v5;
      }
      v7 = v16;
      v8 = *(_QWORD *)(v16 + 16);
      v9 = v5[2];
      v10 = v9 + v8;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) != 0 && v10 <= v5[3] >> 1)
      {
        if (!*(_QWORD *)(v7 + 16))
          goto LABEL_4;
      }
      else
      {
        if (v9 <= v10)
          v12 = v9 + v8;
        else
          v12 = v9;
        v5 = sub_1B1C67DE0(isUniquelyReferenced_nonNull_native, v12, 1, v5);
        if (!*(_QWORD *)(v7 + 16))
          goto LABEL_4;
      }
      v13 = (unint64_t)&v5[8 * v5[2] + 4];
      if (v7 + 32 < v13 + (v8 << 6) && v13 < v7 + 32 + (v8 << 6))
      {

        result = sub_1B2229700();
        __break(1u);
        return result;
      }
      swift_arrayInitWithCopy();
      if (v8)
        v5[2] += v8;
LABEL_4:
      swift_bridgeObjectRelease();
      if (!--v4)
        return (uint64_t)v5;
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

void sub_1B1F84704()
{
  uint64_t (*v0)(_QWORD, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!qword_1ED4BA850)
  {
    v0 = (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DECDE0];
    sub_1B1A02758(255, &qword_1ED4BAA28, (uint64_t)&type metadata for ShaderArgument, MEMORY[0x1E0DECDE0]);
    sub_1B1F847A4(&qword_1ED4BAA20, &qword_1ED4BAA28, v0, MEMORY[0x1E0DECE10]);
    v1 = sub_1B22295F8();
    if (!v2)
      atomic_store(v1, (unint64_t *)&qword_1ED4BA850);
  }
}

uint64_t sub_1B1F847A4(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    sub_1B1A02758(255, a2, (uint64_t)&type metadata for ShaderArgument, a3);
    result = MEMORY[0x1B5E23E74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B1F847F0()
{
  unint64_t result;

  result = qword_1ED4B8B78;
  if (!qword_1ED4B8B78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6884, &type metadata for ShaderArgument);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B78);
  }
  return result;
}

uint64_t sub_1B1F84834(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_1B1F84704();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B1F84878()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1B1F84880()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B1F84888(uint64_t a1)
{
  uint64_t v2;

  sub_1B1F84704();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B1F848C4()
{
  unint64_t result;

  result = qword_1ED4B8D80;
  if (!qword_1ED4B8D80)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6B98, &type metadata for CustomParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D80);
  }
  return result;
}

unint64_t sub_1B1F84908()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA3C8;
  if (!qword_1ED4BA3C8)
  {
    sub_1B1A02758(255, &qword_1ED4BA3B8, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1F84980();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA3C8);
  }
  return result;
}

unint64_t sub_1B1F84980()
{
  unint64_t result;

  result = qword_1ED4B8B90;
  if (!qword_1ED4B8B90)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6660, &type metadata for ShaderArgument);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B90);
  }
  return result;
}

unint64_t sub_1B1F849C4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA3E0;
  if (!qword_1ED4BA3E0)
  {
    sub_1B1A02758(255, &qword_1ED4BA3D8, (uint64_t)&type metadata for ShaderParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1F84A3C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA3E0);
  }
  return result;
}

unint64_t sub_1B1F84A3C()
{
  unint64_t result;

  result = qword_1ED4B8D30;
  if (!qword_1ED4B8D30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BC180, &type metadata for ShaderParameter);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D30);
  }
  return result;
}

unint64_t sub_1B1F84A80()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1ED4BA3F8;
  if (!qword_1ED4BA3F8)
  {
    sub_1B1A02758(255, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1F84AF8();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF40], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1ED4BA3F8);
  }
  return result;
}

unint64_t sub_1B1F84AF8()
{
  unint64_t result;

  result = qword_1ED4B8DD0;
  if (!qword_1ED4B8DD0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286BCC, &type metadata for FunctionConstant);
    atomic_store(result, (unint64_t *)&qword_1ED4B8DD0);
  }
  return result;
}

unint64_t sub_1B1F84B3C()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF61610;
  if (!qword_1EEF61610)
  {
    sub_1B1A02758(255, &qword_1ED4BA3B8, (uint64_t)&type metadata for ShaderArgument, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1F84BB4();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF61610);
  }
  return result;
}

unint64_t sub_1B1F84BB4()
{
  unint64_t result;

  result = qword_1EEF61618;
  if (!qword_1EEF61618)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6638, &type metadata for ShaderArgument);
    atomic_store(result, (unint64_t *)&qword_1EEF61618);
  }
  return result;
}

unint64_t sub_1B1F84BF8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF61620;
  if (!qword_1EEF61620)
  {
    sub_1B1A02758(255, &qword_1ED4BA3D8, (uint64_t)&type metadata for ShaderParameter, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1F84C70();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF61620);
  }
  return result;
}

unint64_t sub_1B1F84C70()
{
  unint64_t result;

  result = qword_1EEF61628;
  if (!qword_1EEF61628)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22BC158, &type metadata for ShaderParameter);
    atomic_store(result, (unint64_t *)&qword_1EEF61628);
  }
  return result;
}

unint64_t sub_1B1F84CB4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  result = qword_1EEF61630;
  if (!qword_1EEF61630)
  {
    sub_1B1A02758(255, &qword_1ED4BA3F0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    v2 = v1;
    v3 = sub_1B1F84D2C();
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF10], v2, &v3);
    atomic_store(result, (unint64_t *)&qword_1EEF61630);
  }
  return result;
}

unint64_t sub_1B1F84D2C()
{
  unint64_t result;

  result = qword_1EEF61638;
  if (!qword_1EEF61638)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B2286BA4, &type metadata for FunctionConstant);
    atomic_store(result, (unint64_t *)&qword_1EEF61638);
  }
  return result;
}

uint64_t sub_1B1F84D70(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, BOOL *a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  unint64_t v17;
  unint64_t *v18;
  char isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  __int128 v38;
  uint64_t v40;
  uint64_t v41;
  char v42;
  id v43;
  id v44;
  _QWORD v45[6];
  id v46[6];
  _QWORD v47[4];
  char v48;
  _QWORD v49[4];
  char v50;
  _QWORD v51[4];
  char v52;
  _QWORD v53[4];
  char v54;
  _OWORD v55[2];
  _BYTE v56[25];
  _OWORD v57[4];
  char v58;

  sub_1B1F1B41C(a2, v45);
  sub_1B1D72448((uint64_t)v45, (uint64_t)v46, (unint64_t *)&unk_1ED4BB290, (void (*)(uint64_t))sub_1B1F85298);
  v13 = v46[0];
  if (v46[0])
  {
    v14 = v46[1];
    v15 = v46[3];
    v43 = v46[5];
    v44 = v46[4];
    if (a1)
    {
      v42 = a3;
      v16 = v46[2];
      swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1B1F9C328((uint64_t)v13, (uint64_t)v14, (uint64_t)v16, 0);
      v18 = (unint64_t *)(a4 + 136);
      v17 = *(_QWORD *)(a4 + 136);
      if ((v17 & 0x8000000000000000) != 0
        || (v17 & 0x4000000000000000) != 0
        || (isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(),
            v17 = *v18,
            (isUniquelyReferenced_nonNull_bridgeObject & 1) == 0))
      {
        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          v40 = sub_1B22296AC();
          sub_1B22296AC();
          sub_1B22296AC();
          swift_bridgeObjectRelease();
          v23 = v40;
        }
        else
        {
          v23 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x18) >> 1;
        }
        *v18 = (unint64_t)sub_1B1B1C804(0, v23);
        swift_bridgeObjectRelease();
      }
      else
      {
        if (v17 >> 62)
        {
          swift_bridgeObjectRetain();
          v41 = sub_1B22296AC();
          swift_bridgeObjectRelease();
          v20 = v41;
        }
        else
        {
          v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        sub_1B1C93410(0, v20);
      }
      v24 = *(_QWORD *)(a5 + 16);
      if (*(_QWORD *)(v24 + 16))
      {
        swift_retain();
        v25 = 0;
        v26 = 32;
        v27 = 32;
        do
        {
          v28 = *(_OWORD *)(v24 + v27);
          v29 = *(_OWORD *)(v24 + v27 + 16);
          v30 = *(_OWORD *)(v24 + v27 + 32);
          *(_OWORD *)&v56[9] = *(_OWORD *)(v24 + v27 + 41);
          v55[1] = v29;
          *(_OWORD *)v56 = v30;
          v55[0] = v28;
          sub_1B1B9A484(*(_QWORD *)(a5 + 24) + v26, (uint64_t)v57);
          ++v25;
          sub_1B1AE7408((uint64_t)v55);
          sub_1B1D30AD0((uint64_t)v57, (uint64_t)v55, a1, v18, a6, a7);
          sub_1B1BA80C0((uint64_t)v55);
          v24 = *(_QWORD *)(a5 + 16);
          v27 += 64;
          v26 += 80;
        }
        while (v25 != *(_QWORD *)(v24 + 16));
        swift_unknownObjectRelease();
        swift_release();
      }
      else
      {
        swift_unknownObjectRelease();
      }
    }
    else
    {
      if (objc_msgSend(v46[0], sel_storageMode) == (id)2)
      {
LABEL_37:
        swift_unknownObjectRelease();
        return swift_unknownObjectRelease();
      }
      v42 = a3;
      objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      v31 = v13;
      v32 = *(_QWORD *)(a5 + 16);
      if (*(_QWORD *)(v32 + 16))
      {
        swift_retain();
        v33 = 0;
        v34 = 0;
        v35 = 0;
        do
        {
          if ((*(_BYTE *)(v32 + v34 + 88) & 1) == 0)
          {
            v36 = *(_QWORD *)(a5 + 24);
            v37 = *(char *)(v36 + v33 + 96);
            if ((v37 & 0x80000000) == 0)
            {
              v38 = *(_OWORD *)(v36 + v33 + 32);
              v57[0] = v38;
              v57[1] = *(_OWORD *)(v36 + v33 + 48);
              v57[2] = *(_OWORD *)(v36 + v33 + 64);
              v57[3] = *(_OWORD *)(v36 + v33 + 80);
              v58 = v37;
              if (v37 != 14 || v38 != 0xFFFFFFFFLL)
              {
                sub_1B1B2B1FC((uint64_t)v57);
                v32 = *(_QWORD *)(a5 + 16);
              }
            }
          }
          ++v35;
          v34 += 64;
          v33 += 80;
        }
        while (v35 != *(_QWORD *)(v32 + 16));
        swift_release();
      }
    }
    if ((v42 & 1) != 0)
    {
      v53[0] = v15;
      v53[1] = v44;
      v53[2] = v43;
      v53[3] = 0;
      v54 = 0;
      swift_unknownObjectRetain();
      sub_1B1D2C700((uint64_t)v53, 2, 0);
      swift_unknownObjectRelease();
      if ((v42 & 8) == 0)
      {
LABEL_35:
        if ((v42 & 0x10) == 0)
          goto LABEL_36;
        goto LABEL_40;
      }
    }
    else if ((v42 & 8) == 0)
    {
      goto LABEL_35;
    }
    v51[0] = v15;
    v51[1] = v44;
    v51[2] = v43;
    v51[3] = 0;
    v52 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)v51, 2, 0);
    swift_unknownObjectRelease();
    if ((v42 & 0x10) == 0)
    {
LABEL_36:
      if ((v42 & 2) == 0)
        goto LABEL_37;
      goto LABEL_41;
    }
LABEL_40:
    v49[0] = v15;
    v49[1] = v44;
    v49[2] = v43;
    v49[3] = 0;
    v50 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)v49, 2, 0);
    swift_unknownObjectRelease();
    if ((v42 & 2) == 0)
      goto LABEL_37;
LABEL_41:
    v47[0] = v15;
    v47[1] = v44;
    v47[2] = v43;
    v47[3] = 0;
    v48 = 0;
    swift_unknownObjectRetain();
    sub_1B1D2C700((uint64_t)v47, 2, 0);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease_n();
  }
  if (qword_1ED4BF430 != -1)
    swift_once();
  swift_retain();
  v21 = sub_1B2228E90();
  if (qword_1ED4BF658 != -1)
    swift_once();
  *(_QWORD *)&v57[0] = 0;
  swift_retain();
  sub_1B1F1AD70(v21, (uint64_t *)v57, 0xD00000000000002FLL, 0x80000001B2345BD0);
  swift_release();
  return swift_release();
}

void sub_1B1F85298()
{
  unint64_t TupleTypeMetadata2;
  uint64_t v1;

  if (!qword_1ED4BB238)
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1)
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1ED4BB238);
  }
}

uint64_t sub_1B1F852FC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE v11[32];

  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BAAB0, (uint64_t (*)(void))sub_1B1F86310, (uint64_t)&type metadata for ShaderArgument.BufferDesc.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = &v11[-v7];
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B1F86310();
  sub_1B222A150();
  if (!v1)
  {
    v11[31] = 0;
    v9 = sub_1B22297FC();
    type metadata accessor for MTLDataType(0);
    v11[30] = 1;
    sub_1B1A1F838(&qword_1ED4BA640, 255, (uint64_t (*)(uint64_t))type metadata accessor for MTLDataType, (uint64_t)&protocol conformance descriptor for MTLDataType);
    sub_1B2229814();
    v11[29] = 2;
    sub_1B22297FC();
    v11[28] = 3;
    sub_1B22297FC();
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1B1F85500(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  uint64_t v13;

  sub_1B19F8E54(0, (unint64_t *)&unk_1ED4BAAC8, (uint64_t (*)(void))sub_1B1F86354, (uint64_t)&type metadata for ShaderArgument.TextureDesc.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v11 - v7;
  v9 = a1[3];
  sub_1B19FA070(a1, v9);
  sub_1B1F86354();
  sub_1B222A150();
  if (!v1)
  {
    type metadata accessor for MTLTextureType(0);
    v12 = 0;
    sub_1B1A1F838((unint64_t *)&unk_1ED4BA718, 255, (uint64_t (*)(uint64_t))type metadata accessor for MTLTextureType, (uint64_t)&protocol conformance descriptor for MTLTextureType);
    sub_1B2229814();
    v9 = v13;
    type metadata accessor for MTLDataType(0);
    v12 = 1;
    sub_1B1A1F838(&qword_1ED4BA640, 255, (uint64_t (*)(uint64_t))type metadata accessor for MTLDataType, (uint64_t)&protocol conformance descriptor for MTLDataType);
    sub_1B2229814();
    LOBYTE(v13) = 2;
    sub_1B22297D8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

uint64_t sub_1B1F85714@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v18 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAAD8, (uint64_t (*)(void))sub_1B1F85FF8, (uint64_t)&type metadata for ShaderArgument.Desc.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v17 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F85FF8();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v17 = v6;
  v23 = 0;
  sub_1B1F8603C();
  sub_1B2229814();
  v11 = v5;
  v12 = v19;
  v13 = v20;
  v14 = v21;
  v15 = v22;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v9, v11);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v16 = v18;
  *v18 = v12;
  v16[1] = v13;
  v16[2] = v14;
  v16[3] = v15;
  *((_BYTE *)v16 + 32) = 0;
  return result;
}

uint64_t sub_1B1F85968@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t result;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;

  v21 = a2;
  sub_1B19F8E54(0, &qword_1ED4BAAC0, (uint64_t (*)(void))sub_1B1F85B84, (uint64_t)&type metadata for ShaderArgument.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v19 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F85B84();
  sub_1B222A150();
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v10 = v6;
  v11 = v21;
  LOBYTE(v22) = 0;
  v12 = sub_1B22297CC();
  v14 = v13;
  LOBYTE(v22) = 1;
  swift_bridgeObjectRetain();
  v20 = sub_1B22297FC();
  v26 = 2;
  sub_1B1F85BC8();
  sub_1B2229814();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v9, v5);
  v19 = v22;
  v15 = v23;
  v16 = v24;
  v17 = v25;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  result = swift_bridgeObjectRelease();
  *(_QWORD *)v11 = v12;
  *(_QWORD *)(v11 + 8) = v14;
  *(_QWORD *)(v11 + 16) = v20;
  *(_OWORD *)(v11 + 24) = v19;
  *(_QWORD *)(v11 + 40) = v15;
  *(_QWORD *)(v11 + 48) = v16;
  *(_BYTE *)(v11 + 56) = v17;
  return result;
}

unint64_t sub_1B1F85B84()
{
  unint64_t result;

  result = qword_1ED4B8B08;
  if (!qword_1ED4B8B08)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6B48, &type metadata for ShaderArgument.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B08);
  }
  return result;
}

unint64_t sub_1B1F85BC8()
{
  unint64_t result;

  result = qword_1ED4B8B70;
  if (!qword_1ED4B8B70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6B20, &type metadata for ShaderArgument.Desc);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B70);
  }
  return result;
}

unint64_t sub_1B1F85C0C()
{
  unint64_t result;

  result = qword_1EEF61650;
  if (!qword_1EEF61650)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6AF8, &type metadata for ShaderArgument.Desc);
    atomic_store(result, (unint64_t *)&qword_1EEF61650);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShaderArgument.CodingKeys()
{
  return &type metadata for ShaderArgument.CodingKeys;
}

ValueMetadata *type metadata accessor for CustomParameters.CodingKeys()
{
  return &type metadata for CustomParameters.CodingKeys;
}

uint64_t destroy for PerStageShaderArguments()
{
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

_QWORD *_s3VFX23PerStageShaderArgumentsVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for PerStageShaderArguments(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a1[2] = a2[2];
  return a1;
}

uint64_t assignWithTake for PerStageShaderArguments(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease();
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for PerStageShaderArguments()
{
  return &type metadata for PerStageShaderArguments;
}

uint64_t getEnumTagSinglePayload for ShaderArgument.Desc(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ShaderArgument.Desc(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_1B1F85E24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_1B1F85E2C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderArgument.Desc()
{
  return &type metadata for ShaderArgument.Desc;
}

unint64_t sub_1B1F85E4C()
{
  unint64_t result;

  result = qword_1EEF61668;
  if (!qword_1EEF61668)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6A18, &type metadata for CustomParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61668);
  }
  return result;
}

unint64_t sub_1B1F85E94()
{
  unint64_t result;

  result = qword_1EEF61670;
  if (!qword_1EEF61670)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6AD0, &type metadata for ShaderArgument.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61670);
  }
  return result;
}

unint64_t sub_1B1F85EDC()
{
  unint64_t result;

  result = qword_1ED4B8B18;
  if (!qword_1ED4B8B18)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6A40, &type metadata for ShaderArgument.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B18);
  }
  return result;
}

unint64_t sub_1B1F85F24()
{
  unint64_t result;

  result = qword_1ED4B8B10;
  if (!qword_1ED4B8B10)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6A68, &type metadata for ShaderArgument.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B10);
  }
  return result;
}

unint64_t sub_1B1F85F6C()
{
  unint64_t result;

  result = qword_1ED4B8D78;
  if (!qword_1ED4B8D78)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6950, &type metadata for CustomParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D78);
  }
  return result;
}

unint64_t sub_1B1F85FB4()
{
  unint64_t result;

  result = qword_1ED4B8D70;
  if (!qword_1ED4B8D70)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6978, &type metadata for CustomParameters.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8D70);
  }
  return result;
}

unint64_t sub_1B1F85FF8()
{
  unint64_t result;

  result = qword_1ED4B8B50;
  if (!qword_1ED4B8B50)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6DE0, &type metadata for ShaderArgument.Desc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B50);
  }
  return result;
}

unint64_t sub_1B1F8603C()
{
  unint64_t result;

  result = qword_1ED4B8AF8;
  if (!qword_1ED4B8AF8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6DB8, &type metadata for ShaderArgument.BufferDesc);
    atomic_store(result, (unint64_t *)&qword_1ED4B8AF8);
  }
  return result;
}

unint64_t sub_1B1F86080()
{
  unint64_t result;

  result = qword_1ED4B8B40;
  if (!qword_1ED4B8B40)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6D90, &type metadata for ShaderArgument.TextureDesc);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B40);
  }
  return result;
}

unint64_t sub_1B1F860C4()
{
  unint64_t result;

  result = qword_1EEF61688;
  if (!qword_1EEF61688)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6D68, &type metadata for ShaderArgument.TextureDesc);
    atomic_store(result, (unint64_t *)&qword_1EEF61688);
  }
  return result;
}

unint64_t sub_1B1F86108()
{
  unint64_t result;

  result = qword_1EEF61690;
  if (!qword_1EEF61690)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6D40, &type metadata for ShaderArgument.BufferDesc);
    atomic_store(result, (unint64_t *)&qword_1EEF61690);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ShaderArgument.Desc.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1F86198 + 4 * byte_1B22A659C[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1F861CC + 4 * byte_1B22A6597[v4]))();
}

uint64_t sub_1B1F861CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F861D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F861DCLL);
  return result;
}

uint64_t sub_1B1F861E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F861F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1F861F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F861FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderArgument.Desc.CodingKeys()
{
  return &type metadata for ShaderArgument.Desc.CodingKeys;
}

ValueMetadata *type metadata accessor for ShaderArgument.TextureDesc()
{
  return &type metadata for ShaderArgument.TextureDesc;
}

ValueMetadata *type metadata accessor for ShaderArgument.BufferDesc()
{
  return &type metadata for ShaderArgument.BufferDesc;
}

unint64_t sub_1B1F8623C()
{
  unint64_t result;

  result = qword_1EEF61698;
  if (!qword_1EEF61698)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6D18, &type metadata for ShaderArgument.Desc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61698);
  }
  return result;
}

unint64_t sub_1B1F86284()
{
  unint64_t result;

  result = qword_1ED4B8B60;
  if (!qword_1ED4B8B60)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6C50, &type metadata for ShaderArgument.Desc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B60);
  }
  return result;
}

unint64_t sub_1B1F862CC()
{
  unint64_t result;

  result = qword_1ED4B8B58;
  if (!qword_1ED4B8B58)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6C78, &type metadata for ShaderArgument.Desc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B58);
  }
  return result;
}

unint64_t sub_1B1F86310()
{
  unint64_t result;

  result = qword_1ED4B8AD8;
  if (!qword_1ED4B8AD8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6FF0, &type metadata for ShaderArgument.BufferDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8AD8);
  }
  return result;
}

unint64_t sub_1B1F86354()
{
  unint64_t result;

  result = qword_1ED4B8B20;
  if (!qword_1ED4B8B20)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6FA0, &type metadata for ShaderArgument.TextureDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B20);
  }
  return result;
}

uint64_t _s3VFX14ShaderArgumentV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1F863E4 + 4 * byte_1B22A65A6[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1F86418 + 4 * byte_1B22A65A1[v4]))();
}

uint64_t sub_1B1F86418(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F86420(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F86428);
  return result;
}

uint64_t sub_1B1F86434(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F8643CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1F86440(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F86448(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderArgument.TextureDesc.CodingKeys()
{
  return &type metadata for ShaderArgument.TextureDesc.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for ShaderArgument.BufferDesc.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1B1F864B0 + 4 * byte_1B22A65B0[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1B1F864E4 + 4 * byte_1B22A65AB[v4]))();
}

uint64_t sub_1B1F864E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F864EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F864F4);
  return result;
}

uint64_t sub_1B1F86500(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F86508);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1B1F8650C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F86514(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShaderArgument.BufferDesc.CodingKeys()
{
  return &type metadata for ShaderArgument.BufferDesc.CodingKeys;
}

unint64_t sub_1B1F86534()
{
  unint64_t result;

  result = qword_1EEF616C0;
  if (!qword_1EEF616C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6EC0, &type metadata for ShaderArgument.BufferDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF616C0);
  }
  return result;
}

unint64_t sub_1B1F8657C()
{
  unint64_t result;

  result = qword_1EEF616C8;
  if (!qword_1EEF616C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6F78, &type metadata for ShaderArgument.TextureDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF616C8);
  }
  return result;
}

unint64_t sub_1B1F865C4()
{
  unint64_t result;

  result = qword_1ED4B8B30;
  if (!qword_1ED4B8B30)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6EE8, &type metadata for ShaderArgument.TextureDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B30);
  }
  return result;
}

unint64_t sub_1B1F8660C()
{
  unint64_t result;

  result = qword_1ED4B8B28;
  if (!qword_1ED4B8B28)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6F10, &type metadata for ShaderArgument.TextureDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8B28);
  }
  return result;
}

unint64_t sub_1B1F86654()
{
  unint64_t result;

  result = qword_1ED4B8AF0;
  if (!qword_1ED4B8AF0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6E30, &type metadata for ShaderArgument.BufferDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8AF0);
  }
  return result;
}

unint64_t sub_1B1F8669C()
{
  unint64_t result;

  result = qword_1ED4B8AE8;
  if (!qword_1ED4B8AE8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A6E58, &type metadata for ShaderArgument.BufferDesc.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1ED4B8AE8);
  }
  return result;
}

void sub_1B1F866E4(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8673C()
{
  uint64_t v0;
  __int16 v1;
  unint64_t v2;
  _QWORD v4[10];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  sub_1B2229430();
  swift_bridgeObjectRelease();
  v4[0] = 0xD000000000000013;
  sub_1B2228890();
  sub_1B2228890();
  if ((v1 & 0x800) != 0 || (v1 & 0x4000) != 0)
  {
    swift_bridgeObjectRelease();
    sub_1B2229430();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    swift_bridgeObjectRelease();
    sub_1B2228890();
    v2 = 0xD000000000000013;
  }
  else
  {
    v2 = v4[0];
    swift_bridgeObjectRelease();
  }
  v4[0] = 0xD000000000000017;
  v4[1] = 0x80000001B2345C40;
  v4[2] = 0;
  v4[3] = 0;
  v4[4] = MEMORY[0x1E0DEE9D8];
  v4[5] = v2;
  v4[6] = 0x80000001B2345C60;
  v4[7] = 0;
  v4[8] = 0;
  v4[9] = MEMORY[0x1E0DEE9D8];
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  nullsub_16(v4);
  return sub_1B1A18378((uint64_t)v4, v0, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
}

void sub_1B1F8696C(_QWORD *a1@<X8>)
{
  *a1 = &unk_1E63B08F0;
}

uint64_t sub_1B1F8697C()
{
  sub_1B1F8708C();
  return sub_1B2228A70();
}

uint64_t sub_1B1F869D8()
{
  sub_1B1F8708C();
  return sub_1B22289F8();
}

void *sub_1B1F86A24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unsigned int v10;
  float v11;
  float v12;
  float v13;
  float v14;
  int v15;
  _BYTE v17[80];
  _OWORD v18[4];
  char v19;
  _OWORD v20[4];
  float v21;
  int v22;

  v5 = *(_QWORD **)(a3 + 8);
  swift_retain();
  sub_1B1D15764(v5, (uint64_t)v17);
  swift_release();
  sub_1B1A18378((uint64_t)v17, (uint64_t)v18, qword_1ED4B8BB0, (uint64_t)&type metadata for WorldTransform);
  if ((v19 & 1) != 0)
  {
    v6 = xmmword_1B2244E20;
    v7 = xmmword_1B2244D90;
    v8 = xmmword_1B2244DD0;
    v9 = xmmword_1B2244DB0;
  }
  else
  {
    v9 = v18[0];
    v8 = v18[1];
    v7 = v18[2];
    v6 = v18[3];
  }
  v10 = *(_DWORD *)(v3 + 24);
  if (v10 - 11 > 0xF4)
  {
    v13 = *(float *)(v3 + 16);
    if (v13 > -1.0)
      v14 = *(float *)(v3 + 16);
    else
      v14 = -1.0;
    if (v13 >= 0.0)
      v11 = v14;
    else
      v11 = -1.0;
  }
  else
  {
    v11 = 1.0 / (float)v10;
    v12 = *(float *)(v3 + 16);
    if (v12 >= 0.0 && v12 > v11)
      v11 = *(float *)(v3 + 16);
  }
  v15 = *(_DWORD *)(v3 + 32);
  v20[0] = v9;
  v20[1] = v8;
  v20[2] = v7;
  v20[3] = v6;
  v21 = v11;
  v22 = v15;
  return sub_1B1D2555C(v20, a1);
}

uint64_t sub_1B1F86B50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;

  v1 = v0;
  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v2 = sub_1B20C3C0C(7);
  v3 = swift_allocObject();
  v4 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v3 + 32) = v4;
  *(_QWORD *)(v3 + 45) = *(_QWORD *)(v1 + 29);
  *(_QWORD *)(v2 + 88) = sub_1B1F8731C;
  *(_QWORD *)(v2 + 96) = v3;
  swift_release();
  return v2;
}

void *sub_1B1F86BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F86A24(a1, a2, a3);
}

double sub_1B1F86C0C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 12) = 1;
  *(_DWORD *)(a1 + 16) = -1082130432;
  *(_BYTE *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 256;
  *(_QWORD *)&result = 16843008;
  *(_QWORD *)(a1 + 28) = 16843008;
  *(_BYTE *)(a1 + 36) = 0;
  return result;
}

double sub_1B1F86C4C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _BYTE v7[21];

  sub_1B1F86ED0(a1, (uint64_t)&v6);
  if (!v2)
  {
    result = *(double *)&v6;
    v5 = *(_OWORD *)v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 29) = *(_QWORD *)&v7[13];
  }
  return result;
}

uint64_t sub_1B1F86C90(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  __int128 v10;
  uint64_t result;
  _BYTE v12[16];
  __int128 v13;
  _BYTE v14[21];

  sub_1B1B668E4(0, (unint64_t *)&unk_1EEF5AFF0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  v10 = v1[1];
  v13 = *v1;
  *(_OWORD *)v14 = v10;
  *(_QWORD *)&v14[13] = *(_QWORD *)((char *)v1 + 29);
  result = sub_1B1B646B4(a1, (uint64_t)&v12[-v8]);
  if (!v2)
  {
    v12[15] = v14[20];
    v12[14] = 15;
    sub_1B1A71758();
    sub_1B2229958();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B1F86D88(float *a1, uint64_t a2)
{
  float v3;
  uint64_t result;
  float v5;
  float v6;
  int v7;
  int v8;
  int v9;
  int v10;
  float v11;
  int v12;
  float v13;
  float v14;
  char v15;
  char v16;
  char v17;
  int v18;

  v3 = *a1;
  result = 1;
  if (LODWORD(v3) != *(_DWORD *)a2
    || *((_DWORD *)a1 + 1) != *(_DWORD *)(a2 + 4)
    || ((*((unsigned __int8 *)a1 + 30) ^ *(unsigned __int8 *)(a2 + 30)) & 1) != 0
    || ((*((unsigned __int8 *)a1 + 31) ^ *(unsigned __int8 *)(a2 + 31)) & 1) != 0)
  {
    return result;
  }
  v5 = a1[2];
  v6 = a1[4];
  v7 = *((unsigned __int8 *)a1 + 20);
  v8 = *((_DWORD *)a1 + 6);
  v9 = *((unsigned __int8 *)a1 + 28);
  v10 = *((unsigned __int8 *)a1 + 29);
  v11 = a1[8];
  v12 = *((unsigned __int8 *)a1 + 36);
  v13 = *(float *)(a2 + 8);
  v14 = *(float *)(a2 + 16);
  if (*((_BYTE *)a1 + 12) == 1)
  {
    if (v5 == 0.0)
    {
      if (v13 == 0.0)
        v17 = *(_BYTE *)(a2 + 12);
      else
        v17 = 0;
      if ((v17 & 1) == 0)
        return 1;
    }
    else
    {
      if (LODWORD(v5) == 1)
      {
        if (LODWORD(v13) == 1)
          v15 = *(_BYTE *)(a2 + 12);
        else
          v15 = 0;
        if ((v15 & 1) != 0)
          goto LABEL_12;
        return 1;
      }
      if (LODWORD(v13) > 1)
        v18 = *(unsigned __int8 *)(a2 + 12);
      else
        v18 = 0;
      if (v18 != 1)
        return 1;
    }
LABEL_12:
    result = 1;
    if (v6 != v14)
      return result;
    goto LABEL_19;
  }
  if (v5 == v13)
    v16 = *(_BYTE *)(a2 + 12);
  else
    v16 = 1;
  result = 1;
  if ((v16 & 1) == 0 && v6 == v14)
  {
LABEL_19:
    if (v7 == *(unsigned __int8 *)(a2 + 20)
      && v8 == *(_DWORD *)(a2 + 24)
      && v9 == *(unsigned __int8 *)(a2 + 28)
      && ((v10 ^ *(unsigned __int8 *)(a2 + 29)) & 1) == 0)
    {
      if (v12 == *(unsigned __int8 *)(a2 + 36))
        return (v11 > 0.0) ^ (*(float *)(a2 + 32) > 0.0);
      else
        return 1;
    }
  }
  return result;
}

uint64_t sub_1B1F86ED0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  int v27;
  char v28;
  int v29;
  uint64_t v30;
  char v31;
  char v32;
  char v33;

  sub_1B1B668E4(0, &qword_1ED4BAC38, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v6 = v5;
  v7 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5, v8);
  v10 = (char *)&v23 - v9;
  v24 = 0xFFFFFFFFLL;
  v25 = 0;
  v26 = 1;
  v27 = -1082130432;
  v28 = 0;
  v29 = 256;
  v30 = 16843008;
  v31 = 0;
  sub_1B1B658C0(a1);
  if (v2)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v32 = 15;
  sub_1B1A71714();
  sub_1B2229814();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v12 = v33;
  v13 = v25;
  v14 = v26;
  v15 = v27;
  v16 = v28;
  v17 = v29;
  v18 = v30;
  v19 = BYTE1(v30);
  v20 = BYTE2(v30);
  v21 = BYTE3(v30);
  v22 = HIDWORD(v30);
  *(_QWORD *)a2 = v24;
  *(_DWORD *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + 12) = v14;
  *(_DWORD *)(a2 + 16) = v15;
  *(_BYTE *)(a2 + 20) = v16;
  *(_DWORD *)(a2 + 24) = v17;
  *(_BYTE *)(a2 + 28) = v18;
  *(_BYTE *)(a2 + 29) = v19;
  *(_BYTE *)(a2 + 30) = v20;
  *(_BYTE *)(a2 + 31) = v21;
  *(_DWORD *)(a2 + 32) = v22;
  *(_BYTE *)(a2 + 36) = v12;
  return result;
}

unint64_t sub_1B1F8708C()
{
  unint64_t result;

  result = qword_1EEF616D0;
  if (!qword_1EEF616D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A71FC, &type metadata for ParticlePrimitiveRenderer.Shape);
    atomic_store(result, (unint64_t *)&qword_1EEF616D0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ParticlePrimitiveRenderer.Shape(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1B1F8711C + 4 * byte_1B22A704A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1B1F87150 + 4 * byte_1B22A7045[v4]))();
}

uint64_t sub_1B1F87150(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F87158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F87160);
  return result;
}

uint64_t sub_1B1F8716C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F87174);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1B1F87178(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F87180(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticlePrimitiveRenderer.Shape()
{
  return &type metadata for ParticlePrimitiveRenderer.Shape;
}

__n128 initializeWithCopy for ParticlePrimitiveRenderer(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 29) = *(_QWORD *)(a2 + 29);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticlePrimitiveRenderer(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 37))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 29);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticlePrimitiveRenderer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 37) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 37) = 0;
    if (a2)
      *(_BYTE *)(result + 29) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticlePrimitiveRenderer()
{
  return &type metadata for ParticlePrimitiveRenderer;
}

unint64_t sub_1B1F87264()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1EEF616D8;
  if (!qword_1EEF616D8)
  {
    sub_1B1A02758(255, &qword_1EEF616E0, (uint64_t)&type metadata for ParticlePrimitiveRenderer.Shape, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DEAEC8]);
    result = MEMORY[0x1B5E23E74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&qword_1EEF616D8);
  }
  return result;
}

unint64_t sub_1B1F872C8()
{
  unint64_t result;

  result = qword_1EEF616E8;
  if (!qword_1EEF616E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A71D4, &type metadata for ParticlePrimitiveRenderer.Shape);
    atomic_store(result, (unint64_t *)&qword_1EEF616E8);
  }
  return result;
}

uint64_t sub_1B1F8730C()
{
  return swift_deallocObject();
}

uint64_t sub_1B1F8731C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;

  sub_1B1F866E4(a1, *(_BYTE *)(v2 + 52));
  return sub_1B1A18378((uint64_t)&v5, a2, &qword_1ED4B8CF8, (uint64_t)&type metadata for RenderFunctions);
}

uint64_t sub_1B1F8736C()
{
  sub_1B1F8C798();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87394()
{
  sub_1B1F8C798();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F873BC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B1F8C248(a1, &qword_1EEF61760, (uint64_t (*)(void))sub_1B1F8C798, (uint64_t)&type metadata for Rect2D.CodingKeys);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1F873FC(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B1F876AC(a1, &qword_1EEF61770, (uint64_t (*)(void))sub_1B1F8C798, (uint64_t)&type metadata for Rect2D.CodingKeys, *v1);
}

uint64_t sub_1B1F8742C()
{
  sub_1B1F8C754();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87454()
{
  sub_1B1F8C754();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F8747C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v9;

  sub_1B19F8E54(0, &qword_1EEF61750, (uint64_t (*)(void))sub_1B1F8C754, (uint64_t)&type metadata for DiscShape.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v3 = v2;
  v4 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2, v5);
  v7 = (char *)&v9 - v6;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F8C754();
  sub_1B222A180();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B1F87558()
{
  return 0x737569646172;
}

uint64_t sub_1B1F8756C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x737569646172 && a2 == 0xE600000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_1B2229D24();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B1F875F8()
{
  sub_1B1F8C710();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87620()
{
  sub_1B1F8C710();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F87648@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF61738, (uint64_t (*)(void))sub_1B1F8C710, (uint64_t)&type metadata for RoundedRectShape.CodingKeys, a2);
}

uint64_t sub_1B1F87674(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF61748, (uint64_t (*)(void))sub_1B1F8C710, (uint64_t)&type metadata for RoundedRectShape.CodingKeys);
}

void sub_1B1F876A0(_DWORD *a1@<X8>)
{
  *a1 = 1077936128;
}

uint64_t sub_1B1F876AC(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, __n128 a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  _OWORD v15[2];

  v15[0] = a5;
  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)v15 - v11;
  sub_1B19FA070(a1, a1[3]);
  a3();
  sub_1B222A180();
  v15[1] = v15[0];
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
  sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v13, MEMORY[0x1E0DEDDB8]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1F87800()
{
  sub_1B1F8C6CC();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87828()
{
  sub_1B1F8C6CC();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F87850@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int128 v5;

  result = sub_1B1F8C248(a1, &qword_1EEF61720, (uint64_t (*)(void))sub_1B1F8C6CC, (uint64_t)&type metadata for StrokeColor.CodingKeys);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_1B1F87890(_QWORD *a1)
{
  __n128 *v1;

  return sub_1B1F876AC(a1, &qword_1EEF61730, (uint64_t (*)(void))sub_1B1F8C6CC, (uint64_t)&type metadata for StrokeColor.CodingKeys, *v1);
}

uint64_t sub_1B1F878C0()
{
  sub_1B1F8C688();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F878E8()
{
  sub_1B1F8C688();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F87910@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B1C7FA5C(a1, &qword_1EEF61708, (uint64_t (*)(void))sub_1B1F8C688, (uint64_t)&type metadata for StrokeWidth.CodingKeys, a2);
}

uint64_t sub_1B1F8793C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1C7FBC8(a1, a2, a3, &qword_1EEF61718, (uint64_t (*)(void))sub_1B1F8C688, (uint64_t)&type metadata for StrokeWidth.CodingKeys);
}

uint64_t sub_1B1F87968(_QWORD *a1, double a2, double a3, __n128 a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v14)(uint64_t, uint64_t, uint64_t);
  __n128 v16;
  __n128 v17;
  char v18;

  v16 = a4;
  sub_1B19F8E54(0, &qword_1EEF61700, (uint64_t (*)(void))sub_1B1F8C644, (uint64_t)&type metadata for Shadow2D.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v16 - v11;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F8C644();
  sub_1B222A180();
  v17.n128_f64[0] = a2;
  v18 = 0;
  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v13, MEMORY[0x1E0DEDD30]);
  sub_1B2229958();
  if (!v4)
  {
    v17.n128_u8[0] = 1;
    sub_1B2229934();
    v17 = v16;
    v18 = 2;
    v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7318, (unint64_t *)&qword_1ED4BB0E0, v14, MEMORY[0x1E0DEDDB8]);
    sub_1B2229958();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B1F87B88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B1F99D24(*a1, *a2);
}

uint64_t sub_1B1F87B94()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x737569646172;
  if (*v0 != 1)
    v1 = 0x726F6C6F63;
  if (*v0)
    return v1;
  else
    return 0x74657366666FLL;
}

uint64_t sub_1B1F87BE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1B1F8BB78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B1F87C08()
{
  sub_1B1F8C644();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87C30()
{
  sub_1B1F8C644();
  return sub_1B222A1E0();
}

void sub_1B1F87C58(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  int v5;
  __int128 v6;

  v4 = sub_1B1F8C3DC(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_DWORD *)(a2 + 8) = v5;
    *(_OWORD *)(a2 + 16) = v6;
  }
}

uint64_t sub_1B1F87C88(_QWORD *a1, double a2, double a3)
{
  __n128 *v3;

  LODWORD(a3) = v3->n128_u32[2];
  return sub_1B1F87968(a1, v3->n128_f64[0], a3, v3[1]);
}

double sub_1B1F87CA8@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 1084227584;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = xmmword_1B2244E20;
  return result;
}

uint64_t sub_1B1F87CC4(_QWORD *a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD v12[2];

  sub_1B19F8E54(0, &qword_1EEF61840, (uint64_t (*)(void))sub_1B1F8CE7C, (uint64_t)&type metadata for Velocity2D.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F8CE7C();
  sub_1B222A180();
  *(double *)&v12[1] = a2;
  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
  sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
  sub_1B1A09538((unint64_t *)&qword_1ED4B72D8, &qword_1ED4BB080, v10, MEMORY[0x1E0DEDD30]);
  sub_1B2229958();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B1F87E20()
{
  sub_1B1F8CE7C();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87E48()
{
  sub_1B1F8CE7C();
  return sub_1B222A1E0();
}

void sub_1B1F87E70(_QWORD *a1@<X0>, double *a2@<X8>)
{
  uint64_t v2;
  double v4;

  v4 = sub_1B1F8C0A4(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1B1F87E98(_QWORD *a1)
{
  double *v1;

  return sub_1B1F87CC4(a1, *v1);
}

uint64_t sub_1B1F87EB0()
{
  sub_1B1F8CE38();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87ED8()
{
  sub_1B1F8CE38();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F87F00@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1F87FD4(a1, &qword_1EEF61818, (uint64_t (*)(void))sub_1B1F8CE38, (uint64_t)&type metadata for ZOrder.CodingKeys, a2);
}

uint64_t sub_1B1F87F2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F8813C(a1, a2, a3, &qword_1EEF61828, (uint64_t (*)(void))sub_1B1F8CE38, (uint64_t)&type metadata for ZOrder.CodingKeys);
}

uint64_t sub_1B1F87F58()
{
  sub_1B1F8CDF4();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F87F80()
{
  sub_1B1F8CDF4();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F87FA8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B1F87FD4(a1, &qword_1EEF61800, (uint64_t (*)(void))sub_1B1F8CDF4, (uint64_t)&type metadata for HZOrder.CodingKeys, a2);
}

uint64_t sub_1B1F87FD4@<X0>(_QWORD *a1@<X0>, unint64_t *a2@<X3>, uint64_t (*a3)(void)@<X4>, uint64_t a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;

  v18 = a5;
  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v8 = v7;
  v9 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v10);
  v12 = (char *)&v17 - v11;
  sub_1B19FA070(a1, a1[3]);
  a3();
  v13 = v19;
  sub_1B222A150();
  if (v13)
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  v14 = v18;
  v15 = sub_1B22297FC();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *v14 = v15;
  return result;
}

uint64_t sub_1B1F88110(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B1F8813C(a1, a2, a3, &qword_1EEF61810, (uint64_t (*)(void))sub_1B1F8CDF4, (uint64_t)&type metadata for HZOrder.CodingKeys);
}

uint64_t sub_1B1F8813C(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;

  sub_1B19F8E54(0, a4, a5, a6, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED170]);
  v9 = v8;
  v15 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8, v10);
  v12 = (char *)&v14 - v11;
  sub_1B19FA070(a1, a1[3]);
  a5();
  sub_1B222A180();
  sub_1B2229940();
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v12, v9);
}

uint64_t sub_1B1F88240(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t ObjectType;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  char *v30;
  uint64_t v31;

  v6 = a4[2];
  v7 = *(_QWORD *)(v6 + 24);
  v8 = a4[6];
  v31 = a4[7];
  swift_retain();
  v9 = (void *)sub_1B1D22DA8(v7, 96 * (v31 - v8));
  v11 = v10;
  v13 = v12;
  swift_unknownObjectRetain();
  swift_release();
  if (objc_msgSend(v9, sel_storageMode) == (id)2)
  {
    v30 = 0;
  }
  else
  {
    v14 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v15 = v9;
    v30 = &v14[v11];
  }
  ObjectType = swift_getObjectType();
  sub_1B1E125C8(a2, ObjectType);
  sub_1B2118500((uint64_t)v9, v11, v13, 0, 4, ObjectType);
  v17 = (uint64_t *)a4[11];
  v18 = a4[12];
  v19 = a4[13];
  v20 = sub_1B1A12038((uint64_t)&type metadata for Rect2D, (uint64_t)&off_1E63BC120, v17, v18, v19, v6);
  v21 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v17, v18, v19, v6);
  v22 = v31 - v8;
  if (v31 != v8)
  {
    v23 = (uint64_t)&v30[96 * v8 + 32];
    v24 = (__int128 *)(v20 + 16 * v8);
    v25 = (__int128 *)(v21 + 16 * v8);
    do
    {
      v26 = *v24++;
      v27 = v26;
      v28 = *v25++;
      *(_OWORD *)(v23 - 32) = v27;
      *(_OWORD *)(v23 - 16) = v28;
      *(_QWORD *)(v23 + 8) = 0;
      *(_QWORD *)(v23 + 16) = 0;
      *(_QWORD *)v23 = 0;
      *(_DWORD *)(v23 + 24) = 0;
      *(_QWORD *)(v23 + 40) = 0;
      *(_QWORD *)(v23 + 48) = 0;
      *(_QWORD *)(v23 + 32) = 0;
      v23 += 96;
      --v22;
    }
    while (v22);
  }
  sub_1B20BFD00(v31 - v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1F8841C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t ObjectType;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  int v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;

  v6 = a4[2];
  v7 = *(_QWORD *)(v6 + 24);
  v8 = a4[6];
  v33 = a4[7];
  swift_retain();
  v9 = (void *)sub_1B1D22DA8(v7, 96 * (v33 - v8));
  v11 = v10;
  v13 = v12;
  swift_unknownObjectRetain();
  swift_release();
  if (objc_msgSend(v9, sel_storageMode) == (id)2)
  {
    v32 = 0;
  }
  else
  {
    v14 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v15 = v9;
    v32 = &v14[v11];
  }
  ObjectType = swift_getObjectType();
  sub_1B1E125C8(a2, ObjectType);
  sub_1B2118500((uint64_t)v9, v11, v13, 0, 4, ObjectType);
  v17 = (uint64_t *)a4[11];
  v18 = a4[12];
  v19 = a4[13];
  v31 = sub_1B1A12038((uint64_t)&type metadata for Rect2D, (uint64_t)&off_1E63BC120, v17, v18, v19, v6);
  v30 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v17, v18, v19, v6);
  v20 = sub_1B1A12038((uint64_t)&type metadata for StrokeColor, (uint64_t)&off_1E6373C30, v17, v18, v19, v6);
  v21 = sub_1B1A12038((uint64_t)&type metadata for StrokeWidth, (uint64_t)&off_1E6373D98, v17, v18, v19, v6);
  v22 = sub_1B1A12038((uint64_t)&type metadata for RoundedRectShape, (uint64_t)&off_1E638A748, v17, v18, v19, v6);
  if (v33 != v8)
  {
    v23 = 0;
    v24 = &v32[96 * v8];
    do
    {
      v25 = *(_OWORD *)(v30 + 16 * v8 + 16 * v23);
      v26 = *(_OWORD *)(v20 + 16 * v8 + 16 * v23);
      v27 = *(_DWORD *)(v21 + 4 * v8 + 4 * v23);
      v28 = *(_DWORD *)(v22 + 4 * v8 + 4 * v23);
      *(_OWORD *)v24 = *(_OWORD *)(v31 + 16 * v8 + 16 * v23);
      *((_OWORD *)v24 + 1) = v25;
      *((_OWORD *)v24 + 2) = v26;
      *((_DWORD *)v24 + 12) = v27;
      *((_DWORD *)v24 + 13) = v28;
      *((_DWORD *)v24 + 14) = 0;
      *((_QWORD *)v24 + 9) = 0;
      *((_QWORD *)v24 + 10) = 0;
      *((_QWORD *)v24 + 8) = 0;
      ++v23;
      v24 += 96;
    }
    while (v33 - v8 != v23);
  }
  sub_1B20BFD00(v33 - v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1F88694(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t ObjectType;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  int v29;
  int v30;
  int v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;

  v6 = a4[2];
  v7 = *(_QWORD *)(v6 + 24);
  v8 = a4[6];
  v38 = a4[7];
  swift_retain();
  v9 = (void *)sub_1B1D22DA8(v7, 96 * (v38 - v8));
  v11 = v10;
  v13 = v12;
  swift_unknownObjectRetain();
  swift_release();
  if (objc_msgSend(v9, sel_storageMode) == (id)2)
  {
    v37 = 0;
  }
  else
  {
    v14 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    v15 = v9;
    v37 = &v14[v11];
  }
  ObjectType = swift_getObjectType();
  sub_1B1E125C8(a2, ObjectType);
  sub_1B2118500((uint64_t)v9, v11, v13, 0, 4, ObjectType);
  v17 = (uint64_t *)a4[11];
  v18 = a4[12];
  v19 = a4[13];
  v36 = sub_1B1A12038((uint64_t)&type metadata for Rect2D, (uint64_t)&off_1E63BC120, v17, v18, v19, v6);
  v35 = sub_1B1A12038((uint64_t)&type metadata for Color, (uint64_t)&off_1E63BA190, v17, v18, v19, v6);
  v20 = sub_1B1A12038((uint64_t)&type metadata for StrokeColor, (uint64_t)&off_1E6373C30, v17, v18, v19, v6);
  v21 = sub_1B1A12038((uint64_t)&type metadata for StrokeWidth, (uint64_t)&off_1E6373D98, v17, v18, v19, v6);
  v22 = sub_1B1A12038((uint64_t)&type metadata for RoundedRectShape, (uint64_t)&off_1E638A748, v17, v18, v19, v6);
  v23 = sub_1B1A12038((uint64_t)&type metadata for Shadow2D, (uint64_t)&off_1E63C2AE0, v17, v18, v19, v6);
  if (v38 != v8)
  {
    v24 = 0;
    v25 = &v37[96 * v8];
    v26 = (_OWORD *)(v23 + 32 * v8 + 16);
    do
    {
      v27 = *(_OWORD *)(v35 + 16 * v8 + 16 * v24);
      v28 = *(_OWORD *)(v20 + 16 * v8 + 16 * v24);
      v29 = *(_DWORD *)(v21 + 4 * v8 + 4 * v24);
      v30 = *(_DWORD *)(v22 + 4 * v8 + 4 * v24);
      v31 = *((_DWORD *)v26 - 2);
      v32 = *v26;
      v33 = *((_QWORD *)v26 - 2);
      *(_OWORD *)v25 = *(_OWORD *)(v36 + 16 * v8 + 16 * v24);
      *((_OWORD *)v25 + 1) = v27;
      *((_OWORD *)v25 + 2) = v28;
      *((_DWORD *)v25 + 12) = v29;
      *((_DWORD *)v25 + 13) = v30;
      *((_DWORD *)v25 + 14) = v31;
      *((_OWORD *)v25 + 4) = v32;
      *((_QWORD *)v25 + 10) = v33;
      v25 += 96;
      ++v24;
      v26 += 2;
    }
    while (v38 - v8 != v24);
  }
  sub_1B20BFD00(v38 - v8);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B1F88950(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[808];
  _BYTE v5[808];
  _BYTE v6[808];
  _BYTE v7[808];
  _BYTE v8[808];
  _BYTE v9[816];

  MEMORY[0x1E0C80A78](a1, a2);
  sub_1B1A18378(v2 + 16, (uint64_t)v4, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1F8BDE0(v4, sub_1B1F8BCD0);
  sub_1B1A18378(v2 + 824, (uint64_t)v5, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1F8BDE0(v5, sub_1B1F8BCD0);
  sub_1B1A18378(v2 + 1632, (uint64_t)v6, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1F8BDE0(v6, sub_1B1F8BCD0);
  sub_1B1A18378(v2 + 2440, (uint64_t)v7, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1F8BDE0(v7, sub_1B1F8BCD0);
  sub_1B1A18378(v2 + 3248, (uint64_t)v8, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1F8BDE0(v8, sub_1B1F8BCD0);
  sub_1B1A18378(v2 + 4056, (uint64_t)v9, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1F8BDE0(v9, sub_1B1F8BCD0);
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VectorRenderSystemRenderPipelineStates()
{
  return objc_opt_self();
}

uint64_t sub_1B1F88A98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = sub_1B1F8BA68();
  *a1 = result;
  return result;
}

uint64_t sub_1B1F88ABC@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B226CAD0;
  *(_QWORD *)(inited + 32) = &type metadata for Rect2D;
  *(_QWORD *)(inited + 40) = &off_1E63BC198;
  *(_QWORD *)(inited + 48) = &type metadata for Color;
  *(_QWORD *)(inited + 56) = &off_1E63BA208;
  *(_QWORD *)(inited + 64) = &type metadata for RoundedRectShape;
  *(_QWORD *)(inited + 72) = &off_1E638A778;
  *(_QWORD *)(inited + 80) = &type metadata for StrokeColor;
  *(_QWORD *)(inited + 88) = &off_1E6373C60;
  *(_QWORD *)(inited + 96) = &type metadata for StrokeWidth;
  *(_QWORD *)(inited + 104) = &off_1E6373DC8;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 5;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 5;
  *(_DWORD *)(v12 + 32) = 50529027;
  *(_BYTE *)(v12 + 36) = 3;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B1F88CF8@<X0>(uint64_t a1@<X8>)
{
  unsigned __int16 **v1;
  unsigned __int16 **v2;
  unsigned __int16 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  int v18;
  char v19;
  unsigned __int16 *v20;
  unsigned __int16 *v21;
  char v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  __int16 v26;
  char v27;

  v2 = v1;
  v4 = *v1;
  v5 = (uint64_t)*v1 + 41;
  v6 = (*v1)[8];
  v7 = v4[9];
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B2280B20;
  *(_QWORD *)(inited + 32) = &type metadata for Rect2D;
  *(_QWORD *)(inited + 40) = &off_1E63BC198;
  *(_QWORD *)(inited + 48) = &type metadata for Color;
  *(_QWORD *)(inited + 56) = &off_1E63BA208;
  *(_QWORD *)(inited + 64) = &type metadata for RoundedRectShape;
  *(_QWORD *)(inited + 72) = &off_1E638A778;
  *(_QWORD *)(inited + 80) = &type metadata for StrokeColor;
  *(_QWORD *)(inited + 88) = &off_1E6373C60;
  *(_QWORD *)(inited + 96) = &type metadata for StrokeWidth;
  *(_QWORD *)(inited + 104) = &off_1E6373DC8;
  *(_QWORD *)(inited + 112) = &type metadata for Shadow2D;
  *(_QWORD *)(inited + 120) = &off_1E63C2B10;
  if (v7 > 0xF)
  {
    v25 = sub_1B1DC8944((char *)(v5 + v6), v7 >> 4);
    sub_1B19F4A48(inited);
    inited = v25;
  }
  v9 = v4[10];
  v10 = v4[11];
  v11 = 6;
  v12 = sub_1B2228B0C();
  *(_QWORD *)(v12 + 16) = 6;
  *(_DWORD *)(v12 + 32) = 50529027;
  *(_WORD *)(v12 + 36) = 771;
  if (v10)
  {
    v25 = sub_1B1DC8810((char *)(v5 + v9), v10);
    sub_1B19F499C(v12);
    v12 = v25;
    v11 = *(_QWORD *)(v25 + 16);
  }
  v13 = (uint64_t)*v2 + 41;
  v14 = (char *)(v13 + (*v2)[12]);
  v15 = (unint64_t)(*v2)[13] >> 4;
  v16 = (char *)(v13 + (*v2)[14]);
  v17 = (*v2)[15] / 0x18u;
  v18 = *((_DWORD *)v2 + 2);
  v19 = *((_BYTE *)v2 + 12);
  v20 = v2[4];
  v21 = v2[2];
  v22 = *((_BYTE *)v2 + 24);
  v23 = sub_1B1CC8DA4((char *)(inited + 32), *(_QWORD *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  *(_QWORD *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(_BYTE *)(a1 + 15) = v27;
  *(_QWORD *)(a1 + 16) = v21;
  *(_BYTE *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(_QWORD *)(a1 + 32) = v20;
  return result;
}

void sub_1B1F88F48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[88];

  v1 = *(_QWORD *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    swift_retain();
    swift_retain();
    v11 = (void *)sub_1B2062324(a1);
    swift_release();
    if (v11)
    {
      v3 = sub_1B2229454();
      sub_1B1BA77BC(v3, v4, v11);
      swift_bridgeObjectRelease();
      v5 = *(void **)(v1 + 392);
      if (v5)
      {
        v6 = v5;
        sub_1B1F9AEC4((uint64_t)v12);

        MEMORY[0x1E0C80A78](v7, v8);
        v9 = *(_QWORD **)(a1 + 176);
        v10 = type metadata accessor for VectorRenderSystemRenderPipelineStates();
        swift_retain();
        sub_1B1F22244(v10, (uint64_t)&off_1E636CC58, v9, (void (*)(uint64_t))sub_1B1F8BCB4);
        swift_release();

        swift_release();
      }
      else
      {
        swift_release();

      }
    }
    else
    {
      swift_release();
    }
  }
}

uint64_t *sub_1B1F890CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_unfair_lock_s *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  unint64_t v40;
  void *v41;
  unint64_t v42;
  void *v43;
  unint64_t v44;
  _QWORD *v45;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  _QWORD *v48;
  size_t v49;
  char *v50;
  char *v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_unfair_lock_s *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  unint64_t v70;
  void *v71;
  unint64_t v72;
  void *v73;
  unint64_t v74;
  _QWORD *v75;
  char v76;
  uint64_t v77;
  _QWORD *v78;
  size_t v79;
  char *v80;
  char *v81;
  char *v82;
  __int128 v83;
  uint64_t v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  os_unfair_lock_s *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  unint64_t v100;
  void *v101;
  unint64_t v102;
  void *v103;
  unint64_t v104;
  _QWORD *v105;
  char v106;
  uint64_t v107;
  _QWORD *v108;
  size_t v109;
  char *v110;
  char *v111;
  char *v112;
  __int128 v113;
  uint64_t v114;
  _QWORD *v115;
  int v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  os_unfair_lock_s *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  void *v129;
  unint64_t v130;
  void *v131;
  unint64_t v132;
  void *v133;
  unint64_t v134;
  _QWORD *v135;
  char v136;
  uint64_t v137;
  _QWORD *v138;
  size_t v139;
  char *v140;
  char *v141;
  char *v142;
  __int128 v143;
  uint64_t *result;
  uint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  os_unfair_lock_s *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  unint64_t v160;
  void *v161;
  unint64_t v162;
  void *v163;
  unint64_t v164;
  _QWORD *v165;
  char v166;
  uint64_t v167;
  _QWORD *v168;
  size_t v169;
  char *v170;
  char *v171;
  char *v172;
  uint64_t v173;
  _QWORD *v174;
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  _QWORD *v179;
  _QWORD *v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  uint64_t v226;
  _OWORD v227[2];
  _BYTE v228[24];
  uint64_t v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  uint64_t __src[101];
  _BYTE __dst[808];
  _OWORD v239[2];
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  _BYTE v246[808];
  _BYTE v247[808];
  _OWORD v248[2];
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  _QWORD v255[101];
  _QWORD v256[101];
  _QWORD v257[10];
  char v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD v262[101];
  _QWORD v263[101];
  _BYTE v264[808];
  _BYTE v265[808];
  _OWORD v266[2];
  __int128 v267;
  unint64_t v268;
  uint64_t v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  uint64_t v277[8];
  uint64_t v278[8];
  _OWORD v279[2];
  uint64_t v280;
  _OWORD v281[2];
  uint64_t v282;
  _OWORD v283[2];
  uint64_t v284;
  _OWORD v285[2];
  uint64_t v286;
  _OWORD v287[2];
  uint64_t v288;
  _BYTE v289[40];
  _BYTE v290[808];
  _OWORD v291[2];
  uint64_t v292;
  _BYTE v293[40];
  _BYTE v294[808];
  _OWORD v295[2];
  uint64_t v296;
  _BYTE v297[40];
  _BYTE v298[808];
  _OWORD v299[2];
  uint64_t v300;
  _BYTE v301[40];
  _BYTE v302[808];
  _OWORD v303[2];
  uint64_t v304;
  _BYTE v305[40];
  _BYTE v306[808];
  _OWORD v307[2];
  uint64_t v308;
  _OWORD v309[11];
  _QWORD v310[2];
  __int128 v311;
  __int128 v312;
  __int16 v313;
  _QWORD v314[6];
  _OWORD v315[11];
  _OWORD v316[3];
  __int16 v317;
  _OWORD v318[5];
  uint64_t v319;
  uint64_t v320;

  MEMORY[0x1E0C80A78](a1, a2);
  v3 = v2;
  v225 = v4;
  v226 = v5;
  v7 = v6;
  v224 = v8;
  v10 = v9;
  v11 = *v4;
  v12 = *(_OWORD *)(*v4 + 4880);
  v318[0] = *(_OWORD *)(*v4 + 4864);
  v318[1] = v12;
  v13 = *(_OWORD *)(v11 + 4896);
  v14 = *(_OWORD *)(v11 + 4912);
  v15 = *(_OWORD *)(v11 + 4928);
  v319 = *(_QWORD *)(v11 + 4944);
  v318[3] = v14;
  v318[4] = v15;
  v318[2] = v13;
  v173 = v6;
  if (!sub_1B1B6B640((uint64_t)v318, v9))
  {
    v16 = *(_OWORD *)(v10 + 48);
    *(_OWORD *)(v11 + 4896) = *(_OWORD *)(v10 + 32);
    *(_OWORD *)(v11 + 4912) = v16;
    *(_OWORD *)(v11 + 4928) = *(_OWORD *)(v10 + 64);
    *(_QWORD *)(v11 + 4944) = *(_QWORD *)(v10 + 80);
    v17 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)(v11 + 4864) = *(_OWORD *)v10;
    *(_OWORD *)(v11 + 4880) = v17;
    v227[0] = xmmword_1B22A7270;
    v227[1] = 0uLL;
    *(_QWORD *)v228 = MEMORY[0x1E0DEE9D8];
    *(_OWORD *)&v228[8] = xmmword_1B22A7280;
    v229 = 0;
    *(_QWORD *)&v230 = 0;
    *((_QWORD *)&v230 + 1) = MEMORY[0x1E0DEE9D8];
    v233 = 0u;
    v234 = 0u;
    v231 = 0u;
    v232 = 0u;
    v235 = 0u;
    v236 = 0u;
    v315[1] = 0uLL;
    v315[0] = xmmword_1B22A7270;
    memset(&v315[5], 0, 96);
    v315[4] = v230;
    v315[2] = *(_OWORD *)v228;
    v315[3] = 0xEB00000000676172;
    sub_1B1A02758(0, (unint64_t *)&qword_1ED4BF6E0, (uint64_t)&type metadata for FunctionConstant, (uint64_t (*)(_QWORD, uint64_t))MEMORY[0x1E0DED1E8]);
    v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B226E100;
    *(_OWORD *)(v18 + 32) = xmmword_1B229ED50;
    *(_BYTE *)(v18 + 48) = 0;
    *(_QWORD *)(v18 + 64) = 1;
    *(_OWORD *)(v18 + 72) = 0u;
    *(_OWORD *)(v18 + 88) = 0u;
    *(_OWORD *)(v18 + 104) = 0u;
    *(_QWORD *)(v18 + 120) = 0;
    v320 = v3;
    *(_BYTE *)(v18 + 128) = 13;
    *(_OWORD *)(v18 + 144) = xmmword_1B22A7290;
    *(_BYTE *)(v18 + 160) = 0;
    *(_OWORD *)(v18 + 176) = 0u;
    *(_OWORD *)(v18 + 192) = 0u;
    *(_OWORD *)(v18 + 208) = 0u;
    *(_OWORD *)(v18 + 224) = 0u;
    *(_BYTE *)(v18 + 240) = 13;
    *(_OWORD *)(v18 + 256) = xmmword_1B22A72A0;
    *(_BYTE *)(v18 + 272) = 0;
    *(_OWORD *)(v18 + 320) = 0u;
    *(_OWORD *)(v18 + 336) = 0u;
    *(_OWORD *)(v18 + 288) = 0u;
    *(_OWORD *)(v18 + 304) = 0u;
    *(_BYTE *)(v18 + 352) = 14;
    memset(v316, 0, sizeof(v316));
    v317 = 256;
    v314[0] = 0;
    v314[1] = 0;
    v314[2] = 2;
    memset(&v314[3], 0, 24);
    swift_retain();
    sub_1B1FD1C40((uint64_t *)v315, (_QWORD *)v10, 0, 0, v18, (uint64_t)v316, 3, (uint64_t)v314, (uint64_t)__src, 1, 1);
    sub_1B1BDB228((uint64_t *)v227);
    memcpy(__dst, __src, sizeof(__dst));
    nullsub_16(__dst);
    sub_1B1A18378(v11 + 16, (uint64_t)v239, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1A18378((uint64_t)__dst, v11 + 16, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1F8BDE0(v239, sub_1B1F8BCD0);
    swift_release();
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1B226E100;
    *(_OWORD *)(v19 + 32) = xmmword_1B229ED50;
    *(_BYTE *)(v19 + 48) = 0;
    *(_QWORD *)(v19 + 64) = 1;
    *(_OWORD *)(v19 + 72) = 0u;
    *(_OWORD *)(v19 + 88) = 0u;
    *(_OWORD *)(v19 + 104) = 0u;
    *(_QWORD *)(v19 + 120) = 0;
    *(_BYTE *)(v19 + 128) = 13;
    *(_OWORD *)(v19 + 144) = xmmword_1B22A7290;
    *(_BYTE *)(v19 + 160) = 0;
    *(_OWORD *)(v19 + 176) = 0u;
    *(_OWORD *)(v19 + 192) = 0u;
    *(_OWORD *)(v19 + 208) = 0u;
    *(_OWORD *)(v19 + 224) = 0u;
    *(_BYTE *)(v19 + 240) = 13;
    *(_OWORD *)(v19 + 256) = xmmword_1B22A72A0;
    *(_BYTE *)(v19 + 272) = 0;
    *(_QWORD *)(v19 + 288) = 1;
    *(_QWORD *)(v19 + 344) = 0;
    *(_OWORD *)(v19 + 312) = 0u;
    *(_OWORD *)(v19 + 328) = 0u;
    *(_OWORD *)(v19 + 296) = 0u;
    *(_BYTE *)(v19 + 352) = 14;
    swift_retain();
    sub_1B1FD1C40((uint64_t *)v315, (_QWORD *)v10, 0, 0, v19, (uint64_t)v316, 3, (uint64_t)v314, (uint64_t)v246, 1, 1);
    sub_1B1BDB228((uint64_t *)v227);
    memcpy(v247, v246, sizeof(v247));
    nullsub_16(v247);
    sub_1B1A18378(v11 + 824, (uint64_t)v248, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1A18378((uint64_t)v247, v11 + 824, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1F8BDE0(v248, sub_1B1F8BCD0);
    swift_release();
    v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1B226E100;
    *(_OWORD *)(v20 + 32) = xmmword_1B229ED50;
    *(_BYTE *)(v20 + 48) = 0;
    *(_QWORD *)(v20 + 64) = 1;
    *(_OWORD *)(v20 + 72) = 0u;
    *(_OWORD *)(v20 + 88) = 0u;
    *(_OWORD *)(v20 + 104) = 0u;
    *(_QWORD *)(v20 + 120) = 0;
    *(_BYTE *)(v20 + 128) = 13;
    *(_OWORD *)(v20 + 144) = xmmword_1B22A7290;
    *(_BYTE *)(v20 + 160) = 0;
    *(_OWORD *)(v20 + 176) = 0u;
    *(_OWORD *)(v20 + 192) = 0u;
    *(_OWORD *)(v20 + 208) = 0u;
    *(_OWORD *)(v20 + 224) = 0u;
    *(_BYTE *)(v20 + 240) = 13;
    *(_OWORD *)(v20 + 256) = xmmword_1B22A72A0;
    *(_BYTE *)(v20 + 272) = 0;
    *(_QWORD *)(v20 + 288) = 2;
    *(_QWORD *)(v20 + 344) = 0;
    *(_OWORD *)(v20 + 312) = 0u;
    *(_OWORD *)(v20 + 328) = 0u;
    *(_OWORD *)(v20 + 296) = 0u;
    *(_BYTE *)(v20 + 352) = 14;
    swift_retain();
    sub_1B1FD1C40((uint64_t *)v315, (_QWORD *)v10, 0, 0, v20, (uint64_t)v316, 3, (uint64_t)v314, (uint64_t)v255, 1, 1);
    sub_1B1BDB228((uint64_t *)v227);
    memcpy(v256, v255, sizeof(v256));
    nullsub_16(v256);
    sub_1B1A18378(v11 + 1632, (uint64_t)v257, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1A18378((uint64_t)v256, v11 + 1632, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1F8BDE0(v257, sub_1B1F8BCD0);
    swift_release();
    v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_1B227BE30;
    *(_OWORD *)(v21 + 32) = xmmword_1B229ED50;
    *(_BYTE *)(v21 + 48) = 0;
    *(_QWORD *)(v21 + 64) = 1;
    *(_OWORD *)(v21 + 72) = 0u;
    *(_OWORD *)(v21 + 88) = 0u;
    *(_OWORD *)(v21 + 104) = 0u;
    *(_QWORD *)(v21 + 120) = 0;
    *(_BYTE *)(v21 + 128) = 13;
    *(_OWORD *)(v21 + 144) = xmmword_1B229ED40;
    *(_BYTE *)(v21 + 160) = 0;
    *(_QWORD *)(v21 + 176) = 1;
    *(_OWORD *)(v21 + 184) = 0u;
    *(_OWORD *)(v21 + 200) = 0u;
    *(_OWORD *)(v21 + 216) = 0u;
    *(_QWORD *)(v21 + 232) = 0;
    *(_BYTE *)(v21 + 240) = 13;
    *(_OWORD *)(v21 + 256) = xmmword_1B22A7290;
    *(_BYTE *)(v21 + 272) = 0;
    *(_OWORD *)(v21 + 320) = 0u;
    *(_OWORD *)(v21 + 336) = 0u;
    *(_OWORD *)(v21 + 288) = 0u;
    *(_OWORD *)(v21 + 304) = 0u;
    *(_BYTE *)(v21 + 352) = 13;
    *(_OWORD *)(v21 + 368) = xmmword_1B22A72A0;
    *(_BYTE *)(v21 + 384) = 0;
    *(_QWORD *)(v21 + 400) = 2;
    *(_OWORD *)(v21 + 408) = 0u;
    *(_OWORD *)(v21 + 424) = 0u;
    *(_OWORD *)(v21 + 440) = 0u;
    *(_QWORD *)(v21 + 456) = 0;
    *(_BYTE *)(v21 + 464) = 14;
    swift_retain();
    sub_1B1FD1C40((uint64_t *)v315, (_QWORD *)v10, 0, 0, v21, (uint64_t)v316, 3, (uint64_t)v314, (uint64_t)v262, 1, 1);
    sub_1B1BDB228((uint64_t *)v227);
    memcpy(v263, v262, sizeof(v263));
    nullsub_16(v263);
    sub_1B1A18378(v11 + 2440, (uint64_t)v264, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    v7 = v173;
    sub_1B1A18378((uint64_t)v263, v11 + 2440, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1F8BDE0(v264, sub_1B1F8BCD0);
    swift_release();
    v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_1B227BE30;
    *(_OWORD *)(v22 + 32) = xmmword_1B229ED50;
    *(_BYTE *)(v22 + 48) = 0;
    *(_QWORD *)(v22 + 64) = 1;
    *(_OWORD *)(v22 + 72) = 0u;
    *(_OWORD *)(v22 + 88) = 0u;
    *(_OWORD *)(v22 + 104) = 0u;
    *(_QWORD *)(v22 + 120) = 0;
    *(_BYTE *)(v22 + 128) = 13;
    *(_OWORD *)(v22 + 144) = xmmword_1B229ED40;
    *(_BYTE *)(v22 + 160) = 0;
    *(_QWORD *)(v22 + 176) = 1;
    *(_OWORD *)(v22 + 184) = 0u;
    *(_OWORD *)(v22 + 200) = 0u;
    *(_OWORD *)(v22 + 216) = 0u;
    *(_QWORD *)(v22 + 232) = 0;
    *(_BYTE *)(v22 + 240) = 13;
    *(_OWORD *)(v22 + 256) = xmmword_1B22A7290;
    *(_BYTE *)(v22 + 272) = 0;
    *(_QWORD *)(v22 + 288) = 1;
    *(_QWORD *)(v22 + 344) = 0;
    *(_OWORD *)(v22 + 312) = 0u;
    *(_OWORD *)(v22 + 328) = 0u;
    *(_OWORD *)(v22 + 296) = 0u;
    *(_BYTE *)(v22 + 352) = 13;
    v3 = v320;
    *(_OWORD *)(v22 + 368) = xmmword_1B22A72A0;
    *(_BYTE *)(v22 + 384) = 0;
    *(_QWORD *)(v22 + 400) = 2;
    *(_OWORD *)(v22 + 408) = 0u;
    *(_OWORD *)(v22 + 424) = 0u;
    *(_OWORD *)(v22 + 440) = 0u;
    *(_QWORD *)(v22 + 456) = 0;
    *(_BYTE *)(v22 + 464) = 14;
    v310[0] = 0;
    v310[1] = 0;
    v311 = xmmword_1B22A72B0;
    v312 = xmmword_1B22A72B0;
    v313 = 15;
    swift_retain();
    sub_1B1FD1C40((uint64_t *)v315, (_QWORD *)v10, 0, 0, v22, (uint64_t)v310, 3, (uint64_t)v314, (uint64_t)v265, 1, 1);
    sub_1B1BDB228((uint64_t *)v227);
    memcpy(v290, v265, sizeof(v290));
    nullsub_16(v290);
    sub_1B1A18378(v11 + 3248, (uint64_t)v294, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1A18378((uint64_t)v290, v11 + 3248, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1F8BDE0(v294, sub_1B1F8BCD0);
    swift_release();
    *(_QWORD *)&v266[0] = 0xD000000000000012;
    *((_QWORD *)&v266[0] + 1) = 0x80000001B2345DF0;
    v266[1] = 0uLL;
    *(_QWORD *)&v267 = MEMORY[0x1E0DEE9D8];
    *((_QWORD *)&v267 + 1) = 0xD000000000000012;
    v268 = 0x80000001B2345E10;
    v269 = 0;
    *(_QWORD *)&v270 = 0;
    *((_QWORD *)&v270 + 1) = MEMORY[0x1E0DEE9D8];
    v271 = 0u;
    v272 = 0u;
    v273 = 0u;
    v274 = 0u;
    v275 = 0u;
    v276 = 0u;
    v309[1] = 0uLL;
    v309[0] = v266[0];
    memset(&v309[5], 0, 96);
    v309[4] = v270;
    v309[2] = v267;
    v309[3] = 0x80000001B2345E10;
    swift_retain();
    sub_1B1FD1C40((uint64_t *)v309, (_QWORD *)v10, 0, 0, (uint64_t)&unk_1E6396B00, (uint64_t)v310, 3, (uint64_t)v314, (uint64_t)v298, 1, 1);
    sub_1B1BDB228((uint64_t *)v266);
    memcpy(v302, v298, sizeof(v302));
    nullsub_16(v302);
    sub_1B1A18378(v11 + 4056, (uint64_t)v306, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1A18378((uint64_t)v302, v11 + 4056, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
    sub_1B1F8BDE0(v306, sub_1B1F8BCD0);
    swift_release();
  }
  v23 = *(_OWORD *)(v7 + 32);
  v307[0] = *(_OWORD *)(v7 + 16);
  v307[1] = v23;
  v308 = *(_QWORD *)(v7 + 48);
  sub_1B1E8FCE4(v224, (uint64_t)v307, 0x200000000, v277);
  sub_1B1A18378((uint64_t)v277, (uint64_t)v248, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v248[0])
  {
    v199 = v254;
    if (v254 >= 1)
    {
      v24 = v251;
      if (v251)
      {
        v25 = v253;
        v219 = v253[4];
        v194 = v252;
        v26 = *(unsigned __int8 *)(v252 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v279[0] = v248[0];
        v279[1] = v248[1];
        v27 = v250;
        v280 = v249;
        v174 = v253 + 13;
        v179 = v253 + 8;
        v184 = (uint64_t)(v253 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v28 = (uint64_t *)(v27 + 24);
        v189 = v26;
        do
        {
          v214 = v24;
          v320 = v3;
          v29 = *((unsigned int *)v28 - 6);
          v30 = *((unsigned int *)v28 - 5);
          v31 = *((unsigned int *)v28 - 4);
          v32 = *v28;
          v209 = *(v28 - 1);
          v33 = v28[2];
          v204 = v28[1];
          if (v26)
          {
            v34 = *(os_unfair_lock_s **)(v33 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v34);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v33 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v219);
          sub_1B1A18378(v184, (uint64_t)v305, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v35 = v25[4];
          v36 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v33 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v25[6] = ecs_stack_allocator_allocate(v35, 48 * v36, 8);
          v25[7] = v36;
          v179[1] = 0;
          v179[2] = 0;
          *v179 = 0;
          swift_release();
          v263[0] = v194;
          v263[1] = v33;
          v263[2] = v25;
          v263[3] = v31;
          v263[4] = (v30 - v29 + v31);
          v263[5] = v199;
          v263[6] = v29;
          v263[7] = v30;
          v263[8] = 0;
          v263[9] = 0;
          LOBYTE(v263[10]) = 1;
          v263[11] = v209;
          v263[12] = v32;
          v263[13] = v204;
          v37 = sub_1B1BA7B7C(v25[3]);
          v38 = v320;
          if (v37)
          {
            v39 = (void *)v37;
            sub_1B1A18378(*v225 + 16, (uint64_t)v298, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            sub_1B1A18378((uint64_t)v298, (uint64_t)v302, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            memcpy(v306, v302, sizeof(v306));
            swift_unknownObjectRetain();
            sub_1B1F8BDE0(v298, sub_1B1F8BF94);
            v40 = sub_1B1B32B58((uint64_t)v306, 0);
            v42 = v40;
            v43 = v41;
            if (v40 >= 3)
            {
              v44 = swift_unknownObjectRetain();
              sub_1B1B427DC(v44, v43);
              sub_1B1F8BDE0(v298, sub_1B1F8BCD0);
              objc_msgSend(v39, sel_setCullMode_, 2);
              objc_msgSend(v39, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(v226 + 248) + 64));
              objc_msgSend(v39, sel_setRenderPipelineState_, v42);
              sub_1B1F88240(v226, v224, (uint64_t)v39, v263);
              swift_unknownObjectRelease();
            }
            else
            {
              sub_1B1B427DC(v40, v41);
              sub_1B1F8BDE0(v298, sub_1B1F8BCD0);
            }
            swift_unknownObjectRelease();
            v38 = v320;
          }
          sub_1B1F05D48(v25, (unsigned __int16 **)v279, (uint64_t)v305);
          v3 = v38;
          if (*(_QWORD *)(v25[13] + 16))
          {
            v45 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v45, v33);
            swift_bridgeObjectRelease();
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            v47 = v25[13];
            if ((isUniquelyReferenced_nonNull_native & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v47 + 16));
            }
            else
            {
              v48 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v47 + 24) >= 2uLL)
              {
                sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                v48 = (_QWORD *)swift_allocObject();
                v49 = j__malloc_size(v48);
                v48[2] = 0;
                v48[3] = 2 * ((uint64_t)(v49 - 32) / 72);
              }
              *v174 = v48;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v25[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v50 = *(char **)(v33 + 232);
              v51 = *(char **)(v33 + 256);
              if (v50 == v51)
              {
                v52 = *(char **)(v33 + 240);
              }
              else
              {
                sub_1B1A1059C(v51, v50);
                v51 = *(char **)(v33 + 232);
                v52 = *(char **)(v33 + 240);
                if (v52 == v51)
                {
                  v52 = 0;
                  v51 = 0;
                  *(_QWORD *)(v33 + 232) = 0;
                  *(_QWORD *)(v33 + 240) = 0;
                }
              }
              *(_QWORD *)(v33 + 248) = v52;
              *(_QWORD *)(v33 + 256) = v51;
            }
          }
          ecs_stack_allocator_pop_snapshot(v219);
          v26 = v189;
          if ((v189 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 376));
          }
          swift_release();
          v28 += 6;
          v24 = v214 - 1;
        }
        while (v214 != 1);
        sub_1B19ED748(v277);
        v7 = v173;
      }
    }
    sub_1B19ED748(v277);
  }
  v53 = *(_OWORD *)(v7 + 72);
  v303[0] = *(_OWORD *)(v7 + 56);
  v303[1] = v53;
  v304 = *(_QWORD *)(v7 + 88);
  sub_1B1E8FCE4(v224, (uint64_t)v303, 0x200000000, v278);
  sub_1B1A18378((uint64_t)v278, (uint64_t)v247, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)v247)
  {
    v200 = *(_QWORD *)&v247[80];
    if (*(uint64_t *)&v247[80] >= 1)
    {
      v54 = *(_QWORD *)&v247[56];
      if (*(_QWORD *)&v247[56])
      {
        v55 = *(_QWORD **)&v247[72];
        v220 = *(_QWORD *)(*(_QWORD *)&v247[72] + 32);
        v195 = *(_QWORD *)&v247[64];
        v56 = *(unsigned __int8 *)(*(_QWORD *)&v247[64] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v281[0] = *(_OWORD *)v247;
        v281[1] = *(_OWORD *)&v247[16];
        v57 = *(_QWORD *)&v247[40];
        v282 = *(_QWORD *)&v247[32];
        v175 = (_QWORD *)(*(_QWORD *)&v247[72] + 104);
        v180 = (_QWORD *)(*(_QWORD *)&v247[72] + 64);
        v185 = *(_QWORD *)&v247[72] + 48;
        swift_retain();
        swift_retain();
        swift_retain();
        v58 = (uint64_t *)(v57 + 24);
        v190 = v56;
        do
        {
          v215 = v54;
          v320 = v3;
          v59 = *((unsigned int *)v58 - 6);
          v60 = *((unsigned int *)v58 - 5);
          v61 = *((unsigned int *)v58 - 4);
          v62 = *v58;
          v210 = *(v58 - 1);
          v63 = v58[2];
          v205 = v58[1];
          if (v56)
          {
            v64 = *(os_unfair_lock_s **)(v63 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v64);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v63 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v220);
          sub_1B1A18378(v185, (uint64_t)v301, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v65 = v55[4];
          v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v63 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v55[6] = ecs_stack_allocator_allocate(v65, 48 * v66, 8);
          v55[7] = v66;
          v180[1] = 0;
          v180[2] = 0;
          *v180 = 0;
          swift_release();
          v262[0] = v195;
          v262[1] = v63;
          v262[2] = v55;
          v262[3] = v61;
          v262[4] = (v60 - v59 + v61);
          v262[5] = v200;
          v262[6] = v59;
          v262[7] = v60;
          v262[8] = 0;
          v262[9] = 0;
          LOBYTE(v262[10]) = 1;
          v262[11] = v210;
          v262[12] = v62;
          v262[13] = v205;
          v67 = sub_1B1BA7B7C(v55[3]);
          v68 = v320;
          if (v67)
          {
            v69 = (void *)v67;
            sub_1B1A18378(*v225 + 824, (uint64_t)v294, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            sub_1B1A18378((uint64_t)v294, (uint64_t)v298, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            memcpy(v302, v298, sizeof(v302));
            swift_unknownObjectRetain();
            sub_1B1F8BDE0(v294, sub_1B1F8BF94);
            v70 = sub_1B1B32B58((uint64_t)v302, 0);
            v72 = v70;
            v73 = v71;
            if (v70 >= 3)
            {
              v74 = swift_unknownObjectRetain();
              sub_1B1B427DC(v74, v73);
              sub_1B1F8BDE0(v294, sub_1B1F8BCD0);
              objc_msgSend(v69, sel_setCullMode_, 2);
              objc_msgSend(v69, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(v226 + 248) + 168));
              objc_msgSend(v69, sel_setRenderPipelineState_, v72);
              sub_1B1F88240(v226, v224, (uint64_t)v69, v262);
              swift_unknownObjectRelease();
            }
            else
            {
              sub_1B1B427DC(v70, v71);
              sub_1B1F8BDE0(v294, sub_1B1F8BCD0);
            }
            swift_unknownObjectRelease();
            v68 = v320;
          }
          sub_1B1F05D48(v55, (unsigned __int16 **)v281, (uint64_t)v301);
          v3 = v68;
          if (*(_QWORD *)(v55[13] + 16))
          {
            v75 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v75, v63);
            swift_bridgeObjectRelease();
            v76 = swift_isUniquelyReferenced_nonNull_native();
            v77 = v55[13];
            if ((v76 & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v77 + 16));
            }
            else
            {
              v78 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v77 + 24) >= 2uLL)
              {
                sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                v78 = (_QWORD *)swift_allocObject();
                v79 = j__malloc_size(v78);
                v78[2] = 0;
                v78[3] = 2 * ((uint64_t)(v79 - 32) / 72);
              }
              *v175 = v78;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v55[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v80 = *(char **)(v63 + 232);
              v81 = *(char **)(v63 + 256);
              if (v80 == v81)
              {
                v82 = *(char **)(v63 + 240);
              }
              else
              {
                sub_1B1A1059C(v81, v80);
                v81 = *(char **)(v63 + 232);
                v82 = *(char **)(v63 + 240);
                if (v82 == v81)
                {
                  v82 = 0;
                  v81 = 0;
                  *(_QWORD *)(v63 + 232) = 0;
                  *(_QWORD *)(v63 + 240) = 0;
                }
              }
              *(_QWORD *)(v63 + 248) = v82;
              *(_QWORD *)(v63 + 256) = v81;
            }
          }
          ecs_stack_allocator_pop_snapshot(v220);
          v56 = v190;
          if ((v190 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v63 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v63 + 376));
          }
          swift_release();
          v58 += 6;
          v54 = v215 - 1;
        }
        while (v215 != 1);
        sub_1B19ED748(v278);
        v7 = v173;
      }
    }
    sub_1B19ED748(v278);
  }
  v83 = *(_OWORD *)(v7 + 112);
  v299[0] = *(_OWORD *)(v7 + 96);
  v299[1] = v83;
  v300 = *(_QWORD *)(v7 + 128);
  sub_1B1E8FCE4(v224, (uint64_t)v299, 0x200000000, v227);
  sub_1B1A18378((uint64_t)v227, (uint64_t)v246, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)v246)
  {
    v201 = *(_QWORD *)&v246[80];
    if (*(uint64_t *)&v246[80] >= 1)
    {
      v84 = *(_QWORD *)&v246[56];
      if (*(_QWORD *)&v246[56])
      {
        v85 = *(_QWORD **)&v246[72];
        v221 = *(_QWORD *)(*(_QWORD *)&v246[72] + 32);
        v196 = *(_QWORD *)&v246[64];
        v86 = *(unsigned __int8 *)(*(_QWORD *)&v246[64] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v283[0] = *(_OWORD *)v246;
        v283[1] = *(_OWORD *)&v246[16];
        v87 = *(_QWORD *)&v246[40];
        v284 = *(_QWORD *)&v246[32];
        v176 = (_QWORD *)(*(_QWORD *)&v246[72] + 104);
        v181 = (_QWORD *)(*(_QWORD *)&v246[72] + 64);
        v186 = *(_QWORD *)&v246[72] + 48;
        swift_retain();
        swift_retain();
        swift_retain();
        v88 = (uint64_t *)(v87 + 24);
        v191 = v86;
        do
        {
          v216 = v84;
          v320 = v3;
          v89 = *((unsigned int *)v88 - 6);
          v90 = *((unsigned int *)v88 - 5);
          v91 = *((unsigned int *)v88 - 4);
          v92 = *v88;
          v211 = *(v88 - 1);
          v93 = v88[2];
          v206 = v88[1];
          if (v86)
          {
            v94 = *(os_unfair_lock_s **)(v93 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v94);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v93 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v221);
          sub_1B1A18378(v186, (uint64_t)v297, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v95 = v85[4];
          v96 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v93 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v85[6] = ecs_stack_allocator_allocate(v95, 48 * v96, 8);
          v85[7] = v96;
          v181[1] = 0;
          v181[2] = 0;
          *v181 = 0;
          swift_release();
          v257[0] = v196;
          v257[1] = v93;
          v257[2] = v85;
          v257[3] = v91;
          v257[4] = (v90 - v89 + v91);
          v257[5] = v201;
          v257[6] = v89;
          v257[7] = v90;
          v257[8] = 0;
          v257[9] = 0;
          v258 = 1;
          v259 = v211;
          v260 = v92;
          v261 = v206;
          v97 = sub_1B1BA7B7C(v85[3]);
          v98 = v320;
          if (v97)
          {
            v99 = (void *)v97;
            sub_1B1A18378(*v225 + 1632, (uint64_t)v290, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            sub_1B1A18378((uint64_t)v290, (uint64_t)v294, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            memcpy(v298, v294, sizeof(v298));
            swift_unknownObjectRetain();
            sub_1B1F8BDE0(v290, sub_1B1F8BF94);
            v100 = sub_1B1B32B58((uint64_t)v298, 0);
            v102 = v100;
            v103 = v101;
            if (v100 >= 3)
            {
              v104 = swift_unknownObjectRetain();
              sub_1B1B427DC(v104, v103);
              sub_1B1F8BDE0(v290, sub_1B1F8BCD0);
              objc_msgSend(v99, sel_setCullMode_, 2);
              objc_msgSend(v99, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(v226 + 248) + 168));
              objc_msgSend(v99, sel_setRenderPipelineState_, v102);
              sub_1B1F88240(v226, v224, (uint64_t)v99, v257);
              swift_unknownObjectRelease();
            }
            else
            {
              sub_1B1B427DC(v100, v101);
              sub_1B1F8BDE0(v290, sub_1B1F8BCD0);
            }
            swift_unknownObjectRelease();
            v98 = v320;
          }
          sub_1B1F05D48(v85, (unsigned __int16 **)v283, (uint64_t)v297);
          v3 = v98;
          if (*(_QWORD *)(v85[13] + 16))
          {
            v105 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v105, v93);
            swift_bridgeObjectRelease();
            v106 = swift_isUniquelyReferenced_nonNull_native();
            v107 = v85[13];
            if ((v106 & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v107 + 16));
            }
            else
            {
              v108 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v107 + 24) >= 2uLL)
              {
                sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                v108 = (_QWORD *)swift_allocObject();
                v109 = j__malloc_size(v108);
                v108[2] = 0;
                v108[3] = 2 * ((uint64_t)(v109 - 32) / 72);
              }
              *v176 = v108;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v85[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v110 = *(char **)(v93 + 232);
              v111 = *(char **)(v93 + 256);
              if (v110 == v111)
              {
                v112 = *(char **)(v93 + 240);
              }
              else
              {
                sub_1B1A1059C(v111, v110);
                v111 = *(char **)(v93 + 232);
                v112 = *(char **)(v93 + 240);
                if (v112 == v111)
                {
                  v112 = 0;
                  v111 = 0;
                  *(_QWORD *)(v93 + 232) = 0;
                  *(_QWORD *)(v93 + 240) = 0;
                }
              }
              *(_QWORD *)(v93 + 248) = v112;
              *(_QWORD *)(v93 + 256) = v111;
            }
          }
          ecs_stack_allocator_pop_snapshot(v221);
          v86 = v191;
          if ((v191 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v93 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v93 + 376));
          }
          swift_release();
          v88 += 6;
          v84 = v216 - 1;
        }
        while (v216 != 1);
        sub_1B19ED748((uint64_t *)v227);
        v7 = v173;
      }
    }
    sub_1B19ED748((uint64_t *)v227);
  }
  v113 = *(_OWORD *)(v7 + 152);
  v295[0] = *(_OWORD *)(v7 + 136);
  v295[1] = v113;
  v296 = *(_QWORD *)(v7 + 168);
  sub_1B1E8FCE4(v224, (uint64_t)v295, 0x200000000, v266);
  sub_1B1A18378((uint64_t)v266, (uint64_t)v239, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)&v239[0])
  {
    v202 = v245;
    if (v245 >= 1)
    {
      v114 = v242;
      if (v242)
      {
        v115 = v244;
        v222 = v244[4];
        v197 = v243;
        v116 = *(unsigned __int8 *)(v243 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v285[0] = v239[0];
        v285[1] = v239[1];
        v117 = v241;
        v286 = v240;
        v177 = v244 + 13;
        v182 = v244 + 8;
        v187 = (uint64_t)(v244 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        v118 = (uint64_t *)(v117 + 24);
        v192 = v116;
        do
        {
          v217 = v114;
          v320 = v3;
          v119 = *((unsigned int *)v118 - 6);
          v120 = *((unsigned int *)v118 - 5);
          v121 = *((unsigned int *)v118 - 4);
          v122 = *v118;
          v212 = *(v118 - 1);
          v123 = v118[2];
          v207 = v118[1];
          if (v116)
          {
            v124 = *(os_unfair_lock_s **)(v123 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v124);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v123 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v222);
          sub_1B1A18378(v187, (uint64_t)v293, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v125 = v115[4];
          v126 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v123 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v115[6] = ecs_stack_allocator_allocate(v125, 48 * v126, 8);
          v115[7] = v126;
          v182[1] = 0;
          v182[2] = 0;
          *v182 = 0;
          swift_release();
          v256[0] = v197;
          v256[1] = v123;
          v256[2] = v115;
          v256[3] = v121;
          v256[4] = (v120 - v119 + v121);
          v256[5] = v202;
          v256[6] = v119;
          v256[7] = v120;
          v256[8] = 0;
          v256[9] = 0;
          LOBYTE(v256[10]) = 1;
          v256[11] = v212;
          v256[12] = v122;
          v256[13] = v207;
          v127 = sub_1B1BA7B7C(v115[3]);
          v128 = v320;
          if (v127)
          {
            v129 = (void *)v127;
            sub_1B1A18378(*v225 + 2440, (uint64_t)v265, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            sub_1B1A18378((uint64_t)v265, (uint64_t)v290, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            memcpy(v294, v290, sizeof(v294));
            swift_unknownObjectRetain();
            sub_1B1F8BDE0(v265, sub_1B1F8BF94);
            v130 = sub_1B1B32B58((uint64_t)v294, 0);
            v132 = v130;
            v133 = v131;
            if (v130 >= 3)
            {
              v134 = swift_unknownObjectRetain();
              sub_1B1B427DC(v134, v133);
              sub_1B1F8BDE0(v265, sub_1B1F8BCD0);
              objc_msgSend(v129, sel_setCullMode_, 2);
              objc_msgSend(v129, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(v226 + 248) + 168));
              objc_msgSend(v129, sel_setRenderPipelineState_, v132);
              sub_1B1F8841C(v226, v224, (uint64_t)v129, v256);
              swift_unknownObjectRelease();
            }
            else
            {
              sub_1B1B427DC(v130, v131);
              sub_1B1F8BDE0(v265, sub_1B1F8BCD0);
            }
            swift_unknownObjectRelease();
            v128 = v320;
          }
          sub_1B1F05D48(v115, (unsigned __int16 **)v285, (uint64_t)v293);
          v3 = v128;
          if (*(_QWORD *)(v115[13] + 16))
          {
            v135 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v135, v123);
            swift_bridgeObjectRelease();
            v136 = swift_isUniquelyReferenced_nonNull_native();
            v137 = v115[13];
            if ((v136 & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v137 + 16));
            }
            else
            {
              v138 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v137 + 24) >= 2uLL)
              {
                sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                v138 = (_QWORD *)swift_allocObject();
                v139 = j__malloc_size(v138);
                v138[2] = 0;
                v138[3] = 2 * ((uint64_t)(v139 - 32) / 72);
              }
              *v177 = v138;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v115[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v140 = *(char **)(v123 + 232);
              v141 = *(char **)(v123 + 256);
              if (v140 == v141)
              {
                v142 = *(char **)(v123 + 240);
              }
              else
              {
                sub_1B1A1059C(v141, v140);
                v141 = *(char **)(v123 + 232);
                v142 = *(char **)(v123 + 240);
                if (v142 == v141)
                {
                  v142 = 0;
                  v141 = 0;
                  *(_QWORD *)(v123 + 232) = 0;
                  *(_QWORD *)(v123 + 240) = 0;
                }
              }
              *(_QWORD *)(v123 + 248) = v142;
              *(_QWORD *)(v123 + 256) = v141;
            }
          }
          ecs_stack_allocator_pop_snapshot(v222);
          v116 = v192;
          if ((v192 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v123 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v123 + 376));
          }
          swift_release();
          v118 += 6;
          v114 = v217 - 1;
        }
        while (v217 != 1);
        sub_1B19ED748((uint64_t *)v266);
        v7 = v173;
      }
    }
    sub_1B19ED748((uint64_t *)v266);
  }
  v143 = *(_OWORD *)(v7 + 192);
  v291[0] = *(_OWORD *)(v7 + 176);
  v291[1] = v143;
  v292 = *(_QWORD *)(v7 + 208);
  sub_1B1E8FCE4(v224, (uint64_t)v291, 0x200000000, __src);
  result = (uint64_t *)sub_1B1A18378((uint64_t)__src, (uint64_t)__dst, (unint64_t *)&qword_1ED4B7DE0, (uint64_t)&type metadata for QueryResult);
  if (*(_QWORD *)__dst)
  {
    v198 = *(_QWORD *)&__dst[80];
    if (*(uint64_t *)&__dst[80] >= 1)
    {
      v145 = *(_QWORD *)&__dst[56];
      if (*(_QWORD *)&__dst[56])
      {
        v146 = *(_QWORD **)&__dst[72];
        v223 = *(_QWORD *)(*(_QWORD *)&__dst[72] + 32);
        v218 = *(unsigned __int8 *)(*(_QWORD *)&__dst[64] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v287[0] = *(_OWORD *)__dst;
        v287[1] = *(_OWORD *)&__dst[16];
        v147 = *(_QWORD *)&__dst[40];
        v288 = *(_QWORD *)&__dst[32];
        v188 = *(_QWORD *)&__dst[72] + 48;
        v193 = *(_QWORD *)&__dst[64];
        v178 = (_QWORD *)(*(_QWORD *)&__dst[72] + 104);
        v183 = (_QWORD *)(*(_QWORD *)&__dst[72] + 64);
        swift_retain();
        swift_retain();
        swift_retain();
        v148 = (uint64_t *)(v147 + 24);
        do
        {
          v213 = v145;
          v320 = v3;
          v149 = *((unsigned int *)v148 - 6);
          v150 = *((unsigned int *)v148 - 5);
          v151 = *((unsigned int *)v148 - 4);
          v152 = *v148;
          v208 = *(v148 - 1);
          v153 = v148[2];
          v203 = v148[1];
          if (v218)
          {
            v154 = *(os_unfair_lock_s **)(v153 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v154);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v153 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v223);
          sub_1B1A18378(v188, (uint64_t)v289, &qword_1ED4B7FB0, (uint64_t)&type metadata for CommandQueue.IterationContext);
          v155 = v146[4];
          v156 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v153 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v146[6] = ecs_stack_allocator_allocate(v155, 48 * v156, 8);
          v146[7] = v156;
          v183[1] = 0;
          v183[2] = 0;
          *v183 = 0;
          swift_release();
          v255[0] = v193;
          v255[1] = v153;
          v255[2] = v146;
          v255[3] = v151;
          v255[4] = (v150 - v149 + v151);
          v255[5] = v198;
          v255[6] = v149;
          v255[7] = v150;
          v255[8] = 0;
          v255[9] = 0;
          LOBYTE(v255[10]) = 1;
          v255[11] = v208;
          v255[12] = v152;
          v255[13] = v203;
          v157 = sub_1B1BA7B7C(v146[3]);
          v158 = v320;
          if (v157)
          {
            v159 = (void *)v157;
            sub_1B1A18378(*v225 + 3248, (uint64_t)v264, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            sub_1B1A18378((uint64_t)v264, (uint64_t)v265, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
            memcpy(v290, v265, sizeof(v290));
            swift_unknownObjectRetain();
            sub_1B1F8BDE0(v264, sub_1B1F8BF94);
            v160 = sub_1B1B32B58((uint64_t)v290, 0);
            v162 = v160;
            v163 = v161;
            if (v160 >= 3)
            {
              v164 = swift_unknownObjectRetain();
              sub_1B1B427DC(v164, v163);
              sub_1B1F8BDE0(v264, sub_1B1F8BCD0);
              objc_msgSend(v159, sel_setCullMode_, 2);
              objc_msgSend(v159, sel_setDepthStencilState_, *(_QWORD *)(*(_QWORD *)(v226 + 248) + 168));
              objc_msgSend(v159, sel_setRenderPipelineState_, v162);
              sub_1B1F88694(v226, v224, (uint64_t)v159, v255);
              swift_unknownObjectRelease();
            }
            else
            {
              sub_1B1B427DC(v160, v161);
              sub_1B1F8BDE0(v264, sub_1B1F8BCD0);
            }
            swift_unknownObjectRelease();
            v158 = v320;
          }
          sub_1B1F05D48(v146, (unsigned __int16 **)v287, (uint64_t)v289);
          v3 = v158;
          if (*(_QWORD *)(v146[13] + 16))
          {
            v165 = (_QWORD *)swift_bridgeObjectRetain();
            sub_1B1F05034(v165, v153);
            swift_bridgeObjectRelease();
            v166 = swift_isUniquelyReferenced_nonNull_native();
            v167 = v146[13];
            if ((v166 & 1) != 0)
            {
              sub_1B1C92670(0, *(_QWORD *)(v167 + 16));
            }
            else
            {
              v168 = (_QWORD *)MEMORY[0x1E0DEE9D8];
              if (*(_QWORD *)(v167 + 24) >= 2uLL)
              {
                sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BADE0, (void (*)(uint64_t))sub_1B1B1F228);
                v168 = (_QWORD *)swift_allocObject();
                v169 = j__malloc_size(v168);
                v168[2] = 0;
                v168[3] = 2 * ((uint64_t)(v169 - 32) / 72);
              }
              *v178 = v168;
              swift_bridgeObjectRelease();
            }
            if (*(unsigned __int8 *)(v146[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
            {
              v170 = *(char **)(v153 + 232);
              v171 = *(char **)(v153 + 256);
              if (v170 == v171)
              {
                v172 = *(char **)(v153 + 240);
              }
              else
              {
                sub_1B1A1059C(v171, v170);
                v171 = *(char **)(v153 + 232);
                v172 = *(char **)(v153 + 240);
                if (v172 == v171)
                {
                  v172 = 0;
                  v171 = 0;
                  *(_QWORD *)(v153 + 232) = 0;
                  *(_QWORD *)(v153 + 240) = 0;
                }
              }
              *(_QWORD *)(v153 + 248) = v172;
              *(_QWORD *)(v153 + 256) = v171;
            }
          }
          ecs_stack_allocator_pop_snapshot(v223);
          if ((v218 & 1) != 0)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v153 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v153 + 376));
          }
          swift_release();
          v148 += 6;
          v145 = v213 - 1;
        }
        while (v213 != 1);
        sub_1B19ED748(__src);
      }
    }
    return sub_1B19ED748(__src);
  }
  return result;
}

uint64_t type metadata accessor for VectorRenderSystem()
{
  return objc_opt_self();
}

ValueMetadata *type metadata accessor for Shadow2D()
{
  return &type metadata for Shadow2D;
}

ValueMetadata *type metadata accessor for StrokeWidth()
{
  return &type metadata for StrokeWidth;
}

ValueMetadata *type metadata accessor for StrokeColor()
{
  return &type metadata for StrokeColor;
}

ValueMetadata *type metadata accessor for RoundedRectShape()
{
  return &type metadata for RoundedRectShape;
}

ValueMetadata *type metadata accessor for DiscShape()
{
  return &type metadata for DiscShape;
}

ValueMetadata *type metadata accessor for Rect2D()
{
  return &type metadata for Rect2D;
}

uint64_t sub_1B1F8B608()
{
  uint64_t v0;
  uint64_t inited;
  __int128 v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  _BYTE v10[40];
  _OWORD v11[2];
  uint64_t v12;
  _BYTE v13[40];
  _OWORD v14[2];
  uint64_t v15;
  _BYTE v16[40];
  _OWORD v17[2];
  uint64_t v18;
  _BYTE v19[40];
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (qword_1ED4B7DB8 != -1)
    swift_once();
  v48 = qword_1ED4D09F8;
  v49 = 0;
  v50 = 2;
  v51 = 0;
  v52 = 2;
  v53 = 0;
  swift_retain();
  sub_1B19EE368((uint64_t)v10);
  swift_release();
  sub_1B1BF28AC(0, (unint64_t *)&qword_1ED4BAE50, (void (*)(uint64_t))sub_1B19F66EC);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B227BE30;
  *(_QWORD *)(inited + 32) = &type metadata for RoundedRectShape;
  *(_QWORD *)(inited + 40) = &off_1E638A778;
  *(_QWORD *)(inited + 48) = &type metadata for DiscShape;
  *(_QWORD *)(inited + 56) = &off_1E63C3A20;
  *(_QWORD *)(inited + 64) = &type metadata for StrokeColor;
  *(_QWORD *)(inited + 72) = &off_1E6373C60;
  *(_QWORD *)(inited + 80) = &type metadata for StrokeWidth;
  *(_QWORD *)(inited + 88) = &off_1E6373DC8;
  sub_1B1B44110(v11, inited);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v10);
  v2 = v11[1];
  *(_OWORD *)(v0 + 16) = v11[0];
  *(_OWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 48) = v12;
  v42 = qword_1ED4D09F8;
  v43 = 0;
  v44 = 2;
  v45 = 0;
  v46 = 2;
  v47 = 0;
  swift_retain();
  sub_1B1B466E4((uint64_t)v13);
  swift_release();
  v3 = swift_initStackObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B226E100;
  *(_QWORD *)(v3 + 32) = &type metadata for RoundedRectShape;
  *(_QWORD *)(v3 + 40) = &off_1E638A778;
  *(_QWORD *)(v3 + 48) = &type metadata for StrokeColor;
  *(_QWORD *)(v3 + 56) = &off_1E6373C60;
  *(_QWORD *)(v3 + 64) = &type metadata for StrokeWidth;
  *(_QWORD *)(v3 + 72) = &off_1E6373DC8;
  sub_1B1B44110(v14, v3);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v13);
  *(_OWORD *)(v0 + 56) = v14[0];
  *(_OWORD *)(v0 + 72) = v14[1];
  *(_QWORD *)(v0 + 88) = v15;
  v36 = qword_1ED4D09F8;
  v37 = 0;
  v38 = 2;
  v39 = 0;
  v40 = 2;
  v41 = 0;
  swift_retain();
  sub_1B1B46900((uint64_t)v16);
  swift_release();
  v4 = swift_initStackObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B226CD10;
  *(_QWORD *)(v4 + 32) = &type metadata for StrokeColor;
  *(_QWORD *)(v4 + 40) = &off_1E6373C60;
  *(_QWORD *)(v4 + 48) = &type metadata for StrokeWidth;
  *(_QWORD *)(v4 + 56) = &off_1E6373DC8;
  sub_1B1B44110(v17, v4);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v16);
  v5 = v17[1];
  *(_OWORD *)(v0 + 96) = v17[0];
  *(_OWORD *)(v0 + 112) = v5;
  *(_QWORD *)(v0 + 128) = v18;
  v30 = qword_1ED4D09F8;
  v31 = 0;
  v32 = 2;
  v33 = 0;
  v34 = 2;
  v35 = 0;
  swift_retain();
  sub_1B1F88ABC((uint64_t)v19);
  swift_release();
  v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B226D240;
  *(_QWORD *)(v6 + 32) = &type metadata for Shadow2D;
  *(_QWORD *)(v6 + 40) = &off_1E63C2B10;
  sub_1B1B44110(v20, v6);
  swift_setDeallocating();
  sub_1B19ED720((uint64_t)v19);
  v7 = v20[1];
  *(_OWORD *)(v0 + 136) = v20[0];
  *(_OWORD *)(v0 + 152) = v7;
  *(_QWORD *)(v0 + 168) = v21;
  v24 = qword_1ED4D09F8;
  v25 = 0;
  v26 = 2;
  v27 = 0;
  v28 = 2;
  v29 = 0;
  swift_retain();
  sub_1B1F88CF8((uint64_t)v22);
  swift_release();
  v8 = v22[1];
  *(_OWORD *)(v0 + 176) = v22[0];
  *(_OWORD *)(v0 + 192) = v8;
  *(_QWORD *)(v0 + 208) = v23;
  return v0;
}

uint64_t sub_1B1F8B9B8()
{
  uint64_t v0;

  v0 = swift_allocObject();
  sub_1B1F8B608();
  return v0;
}

const char *sub_1B1F8B9EC()
{
  return "Vector Render";
}

uint64_t sub_1B1F8BA00()
{
  return qword_1EEF5DE60;
}

uint64_t sub_1B1F8BA0C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = type metadata accessor for VectorRenderSystemRenderPipelineStates();
  v3 = *(_QWORD **)(a1 + 176);
  swift_retain();
  sub_1B1F22258(v2, (uint64_t)&off_1E636CC58, v3);
  return swift_release();
}

uint64_t sub_1B1F8BA68()
{
  uint64_t v0;
  _OWORD v2[50];

  type metadata accessor for VectorRenderSystemRenderPipelineStates();
  v0 = swift_allocObject();
  sub_1B1F8BB64(v2);
  sub_1B1A18378((uint64_t)v2, v0 + 16, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1A18378((uint64_t)v2, v0 + 824, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1A18378((uint64_t)v2, v0 + 1632, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1A18378((uint64_t)v2, v0 + 2440, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1A18378((uint64_t)v2, v0 + 3248, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  sub_1B1A18378((uint64_t)v2, v0 + 4056, &qword_1ED4B9B00, (uint64_t)&type metadata for RenderPipelineDescriptor);
  *(_OWORD *)(v0 + 4864) = 0u;
  *(_OWORD *)(v0 + 4880) = 0u;
  *(_OWORD *)(v0 + 4896) = 0u;
  *(_OWORD *)(v0 + 4912) = 0u;
  *(_OWORD *)(v0 + 4928) = 0u;
  *(_QWORD *)(v0 + 4944) = 1;
  return v0;
}

void sub_1B1F8BB64(_OWORD *a1)
{
  *a1 = xmmword_1B2244C80;
  bzero(a1 + 1, 0x318uLL);
}

uint64_t sub_1B1F8BB78(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x74657366666FLL && a2 == 0xE600000000000000;
  if (v2 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737569646172 && a2 == 0xE600000000000000 || (sub_1B2229D24() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x726F6C6F63 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_1B2229D24();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t *sub_1B1F8BCB4(uint64_t a1)
{
  uint64_t v1;

  return sub_1B1F890CC(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1B1F8BCD0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 != 1)
  {
    sub_1B1B41238(result, a2);
    sub_1B1B41238(a6, a7);
    sub_1B1B41238(a11, a12);
    sub_1B1B41238(a16, a17);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

#error "1B1F8BF6C: call analysis failed (funcsize=109)"

uint64_t sub_1B1F8BF94(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (a2 != 1)
  {
    sub_1B1B410E4(result, a2);
    sub_1B1B410E4(a6, a7);
    sub_1B1B410E4(a11, a12);
    sub_1B1B410E4(a16, a17);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

double sub_1B1F8C0A4(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  _QWORD v12[2];

  sub_1B19F8E54(0, &qword_1EEF61830, (uint64_t (*)(void))sub_1B1F8CE7C, (uint64_t)&type metadata for Velocity2D.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)v12 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F8CE7C();
  sub_1B222A150();
  if (!v1)
  {
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v10, MEMORY[0x1E0DEDD40]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v2 = *(double *)&v12[1];
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

uint64_t sub_1B1F8C248(_QWORD *a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  _OWORD v16[2];

  sub_1B19F8E54(0, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  *(_QWORD *)&v16[0] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7, v9);
  v11 = (char *)v16 - v10;
  sub_1B19FA070(a1, a1[3]);
  a3();
  sub_1B222A150();
  if (!v4)
  {
    v12 = v8;
    v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v13, MEMORY[0x1E0DEDDC8]);
    v14 = *(_QWORD *)&v16[0];
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v11, v14);
    v16[0] = v16[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

double sub_1B1F8C3DC(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t);
  __int128 v13;
  __int128 v14;
  char v15;

  sub_1B19F8E54(0, &qword_1EEF616F0, (uint64_t (*)(void))sub_1B1F8C644, (uint64_t)&type metadata for Shadow2D.CodingKeys, (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = (char *)&v13 - v8;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F8C644();
  sub_1B222A150();
  if (!v1)
  {
    v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDD20];
    sub_1B19F8E54(0, &qword_1ED4BB080, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], MEMORY[0x1E0DEDD20]);
    v15 = 0;
    sub_1B1A09538((unint64_t *)&qword_1ED4B72F0, &qword_1ED4BB080, v10, MEMORY[0x1E0DEDD40]);
    sub_1B2229814();
    v2 = *(double *)&v14;
    LOBYTE(v14) = 1;
    sub_1B22297F0();
    v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8];
    sub_1B19F8E54(0, (unint64_t *)&qword_1ED4BB0E0, (uint64_t (*)(void))sub_1B19F8DCC, MEMORY[0x1E0DEB188], (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E0DEDDA8]);
    v15 = 2;
    sub_1B1A09538((unint64_t *)&qword_1ED4B7330, (unint64_t *)&qword_1ED4BB0E0, v11, MEMORY[0x1E0DEDDC8]);
    sub_1B2229814();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v13 = v14;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1F8C644()
{
  unint64_t result;

  result = qword_1EEF616F8;
  if (!qword_1EEF616F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7E44, &type metadata for Shadow2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF616F8);
  }
  return result;
}

unint64_t sub_1B1F8C688()
{
  unint64_t result;

  result = qword_1EEF61710;
  if (!qword_1EEF61710)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7DF4, &type metadata for StrokeWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61710);
  }
  return result;
}

unint64_t sub_1B1F8C6CC()
{
  unint64_t result;

  result = qword_1EEF61728;
  if (!qword_1EEF61728)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7DA4, &type metadata for StrokeColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61728);
  }
  return result;
}

unint64_t sub_1B1F8C710()
{
  unint64_t result;

  result = qword_1EEF61740;
  if (!qword_1EEF61740)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7D54, &type metadata for RoundedRectShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61740);
  }
  return result;
}

unint64_t sub_1B1F8C754()
{
  unint64_t result;

  result = qword_1EEF61758;
  if (!qword_1EEF61758)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7D04, &type metadata for DiscShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61758);
  }
  return result;
}

unint64_t sub_1B1F8C798()
{
  unint64_t result;

  result = qword_1EEF61768;
  if (!qword_1EEF61768)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7CB4, &type metadata for Rect2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61768);
  }
  return result;
}

ValueMetadata *type metadata accessor for HZOrder()
{
  return &type metadata for HZOrder;
}

ValueMetadata *type metadata accessor for ZOrder()
{
  return &type metadata for ZOrder;
}

ValueMetadata *type metadata accessor for Velocity2D()
{
  return &type metadata for Velocity2D;
}

ValueMetadata *type metadata accessor for Rect2D.CodingKeys()
{
  return &type metadata for Rect2D.CodingKeys;
}

ValueMetadata *type metadata accessor for DiscShape.CodingKeys()
{
  return &type metadata for DiscShape.CodingKeys;
}

ValueMetadata *type metadata accessor for RoundedRectShape.CodingKeys()
{
  return &type metadata for RoundedRectShape.CodingKeys;
}

ValueMetadata *type metadata accessor for StrokeColor.CodingKeys()
{
  return &type metadata for StrokeColor.CodingKeys;
}

ValueMetadata *type metadata accessor for StrokeWidth.CodingKeys()
{
  return &type metadata for StrokeWidth.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for Shadow2D.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1B1F8C8AC + 4 * byte_1B22A72C5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1B1F8C8E0 + 4 * byte_1B22A72C0[v4]))();
}

uint64_t sub_1B1F8C8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F8C8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F8C8F0);
  return result;
}

uint64_t sub_1B1F8C8FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F8C904);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1B1F8C908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F8C910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Shadow2D.CodingKeys()
{
  return &type metadata for Shadow2D.CodingKeys;
}

unint64_t sub_1B1F8C930()
{
  unint64_t result;

  result = qword_1EEF61778;
  if (!qword_1EEF61778)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A77DC, &type metadata for Shadow2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61778);
  }
  return result;
}

unint64_t sub_1B1F8C978()
{
  unint64_t result;

  result = qword_1EEF61780;
  if (!qword_1EEF61780)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7894, &type metadata for StrokeWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61780);
  }
  return result;
}

unint64_t sub_1B1F8C9C0()
{
  unint64_t result;

  result = qword_1EEF61788;
  if (!qword_1EEF61788)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A794C, &type metadata for StrokeColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61788);
  }
  return result;
}

unint64_t sub_1B1F8CA08()
{
  unint64_t result;

  result = qword_1EEF61790;
  if (!qword_1EEF61790)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7A04, &type metadata for RoundedRectShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61790);
  }
  return result;
}

unint64_t sub_1B1F8CA50()
{
  unint64_t result;

  result = qword_1EEF61798;
  if (!qword_1EEF61798)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7B0C, &type metadata for Rect2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61798);
  }
  return result;
}

unint64_t sub_1B1F8CA98()
{
  unint64_t result;

  result = qword_1EEF617A0;
  if (!qword_1EEF617A0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7A7C, &type metadata for Rect2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617A0);
  }
  return result;
}

unint64_t sub_1B1F8CAE0()
{
  unint64_t result;

  result = qword_1EEF617A8;
  if (!qword_1EEF617A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7AA4, &type metadata for Rect2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617A8);
  }
  return result;
}

unint64_t sub_1B1F8CB28()
{
  unint64_t result;

  result = qword_1EEF617B0;
  if (!qword_1EEF617B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7A2C, &type metadata for DiscShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617B0);
  }
  return result;
}

unint64_t sub_1B1F8CB70()
{
  unint64_t result;

  result = qword_1EEF617B8;
  if (!qword_1EEF617B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7A54, &type metadata for DiscShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617B8);
  }
  return result;
}

unint64_t sub_1B1F8CBB8()
{
  unint64_t result;

  result = qword_1EEF617C0;
  if (!qword_1EEF617C0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7974, &type metadata for RoundedRectShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617C0);
  }
  return result;
}

unint64_t sub_1B1F8CC00()
{
  unint64_t result;

  result = qword_1EEF617C8;
  if (!qword_1EEF617C8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A799C, &type metadata for RoundedRectShape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617C8);
  }
  return result;
}

unint64_t sub_1B1F8CC48()
{
  unint64_t result;

  result = qword_1EEF617D0;
  if (!qword_1EEF617D0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A78BC, &type metadata for StrokeColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617D0);
  }
  return result;
}

unint64_t sub_1B1F8CC90()
{
  unint64_t result;

  result = qword_1EEF617D8;
  if (!qword_1EEF617D8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A78E4, &type metadata for StrokeColor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617D8);
  }
  return result;
}

unint64_t sub_1B1F8CCD8()
{
  unint64_t result;

  result = qword_1EEF617E0;
  if (!qword_1EEF617E0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7804, &type metadata for StrokeWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617E0);
  }
  return result;
}

unint64_t sub_1B1F8CD20()
{
  unint64_t result;

  result = qword_1EEF617E8;
  if (!qword_1EEF617E8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A782C, &type metadata for StrokeWidth.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617E8);
  }
  return result;
}

unint64_t sub_1B1F8CD68()
{
  unint64_t result;

  result = qword_1EEF617F0;
  if (!qword_1EEF617F0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A774C, &type metadata for Shadow2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617F0);
  }
  return result;
}

unint64_t sub_1B1F8CDB0()
{
  unint64_t result;

  result = qword_1EEF617F8;
  if (!qword_1EEF617F8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7774, &type metadata for Shadow2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF617F8);
  }
  return result;
}

unint64_t sub_1B1F8CDF4()
{
  unint64_t result;

  result = qword_1EEF61808;
  if (!qword_1EEF61808)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A815C, &type metadata for HZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61808);
  }
  return result;
}

unint64_t sub_1B1F8CE38()
{
  unint64_t result;

  result = qword_1EEF61820;
  if (!qword_1EEF61820)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A810C, &type metadata for ZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61820);
  }
  return result;
}

unint64_t sub_1B1F8CE7C()
{
  unint64_t result;

  result = qword_1EEF61838;
  if (!qword_1EEF61838)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A80BC, &type metadata for Velocity2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61838);
  }
  return result;
}

ValueMetadata *type metadata accessor for Velocity2D.CodingKeys()
{
  return &type metadata for Velocity2D.CodingKeys;
}

ValueMetadata *type metadata accessor for ZOrder.CodingKeys()
{
  return &type metadata for ZOrder.CodingKeys;
}

uint64_t _s3VFX6Rect2DV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1B1F8CF20 + 4 * byte_1B22A72CA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1B1F8CF40 + 4 * byte_1B22A72CF[v4]))();
}

_BYTE *sub_1B1F8CF20(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1B1F8CF40(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1F8CF48(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1F8CF50(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1B1F8CF58(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1B1F8CF60(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for HZOrder.CodingKeys()
{
  return &type metadata for HZOrder.CodingKeys;
}

unint64_t sub_1B1F8CF80()
{
  unint64_t result;

  result = qword_1EEF61848;
  if (!qword_1EEF61848)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7F24, &type metadata for HZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61848);
  }
  return result;
}

unint64_t sub_1B1F8CFC8()
{
  unint64_t result;

  result = qword_1EEF61850;
  if (!qword_1EEF61850)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7FDC, &type metadata for ZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61850);
  }
  return result;
}

unint64_t sub_1B1F8D010()
{
  unint64_t result;

  result = qword_1EEF61858;
  if (!qword_1EEF61858)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A8094, &type metadata for Velocity2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61858);
  }
  return result;
}

unint64_t sub_1B1F8D058()
{
  unint64_t result;

  result = qword_1EEF61860;
  if (!qword_1EEF61860)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A8004, &type metadata for Velocity2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61860);
  }
  return result;
}

unint64_t sub_1B1F8D0A0()
{
  unint64_t result;

  result = qword_1EEF61868;
  if (!qword_1EEF61868)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A802C, &type metadata for Velocity2D.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61868);
  }
  return result;
}

unint64_t sub_1B1F8D0E8()
{
  unint64_t result;

  result = qword_1EEF61870;
  if (!qword_1EEF61870)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7F4C, &type metadata for ZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61870);
  }
  return result;
}

unint64_t sub_1B1F8D130()
{
  unint64_t result;

  result = qword_1EEF61878;
  if (!qword_1EEF61878)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7F74, &type metadata for ZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61878);
  }
  return result;
}

unint64_t sub_1B1F8D178()
{
  unint64_t result;

  result = qword_1EEF61880;
  if (!qword_1EEF61880)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7E94, &type metadata for HZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61880);
  }
  return result;
}

unint64_t sub_1B1F8D1C0()
{
  unint64_t result;

  result = qword_1EEF61888;
  if (!qword_1EEF61888)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A7EBC, &type metadata for HZOrder.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61888);
  }
  return result;
}

uint64_t sub_1B1F8D204@<X0>(uint64_t a1@<X8>)
{
  _QWORD v3[10];
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v3[0] = 0xD000000000000013;
  v3[1] = 0x80000001B2345E30;
  v3[2] = 0;
  v3[3] = 0;
  v3[4] = MEMORY[0x1E0DEE9D8];
  v3[5] = 0xD000000000000013;
  v3[6] = 0x80000001B2345E50;
  v3[7] = 0;
  v3[8] = 0;
  v3[9] = MEMORY[0x1E0DEE9D8];
  v4 = 0u;
  v5 = 0u;
  v6 = 0u;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  nullsub_16(v3);
  return sub_1B19F66A0((uint64_t)v3, a1, &qword_1ED4B8CF8);
}

uint64_t sub_1B1F8D2A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  char v12;

  sub_1B1F8D668(0, &qword_1EEF618A0, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED170]);
  v4 = v3;
  v5 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3, v6);
  v8 = (char *)&v10 - v7;
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F8D624();
  sub_1B222A180();
  v12 = 0;
  sub_1B2229934();
  if (!v1)
  {
    v11 = 1;
    sub_1B2229934();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B1F8D3C4()
{
  sub_1B1F8D624();
  return sub_1B222A1D4();
}

uint64_t sub_1B1F8D3EC()
{
  sub_1B1F8D624();
  return sub_1B222A1E0();
}

uint64_t sub_1B1F8D414()
{
  uint64_t v0;

  type metadata accessor for RenderPipelineFactory();
  swift_allocObject();
  v0 = sub_1B20C3C0C(4);
  *(_QWORD *)(v0 + 88) = sub_1B1F8D204;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release();
  return v0;
}

void sub_1B1F8D468(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  float v4;
  int v5;

  v4 = sub_1B1F8D4C8(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
  }
}

uint64_t sub_1B1F8D490(_QWORD *a1)
{
  return sub_1B1F8D2A0(a1);
}

double sub_1B1F8D4A8@<D0>(_QWORD *a1@<X8>)
{
  double result;

  result = 0.0000305175854;
  *a1 = 0x3F0000003FC00000;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAOBoxRenderer()
{
  return &type metadata for ParticleAOBoxRenderer;
}

float sub_1B1F8D4C8(_QWORD *a1)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  float v10;
  _BYTE v12[16];

  sub_1B1F8D668(0, &qword_1EEF61890, (uint64_t (*)(uint64_t, ValueMetadata *, unint64_t))MEMORY[0x1E0DED048]);
  v5 = v4;
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4, v7);
  v9 = &v12[-v8];
  sub_1B19FA070(a1, a1[3]);
  sub_1B1F8D624();
  sub_1B222A150();
  if (!v1)
  {
    v12[15] = 0;
    sub_1B22297F0();
    v2 = v10;
    v12[14] = 1;
    sub_1B22297F0();
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B1F8D624()
{
  unint64_t result;

  result = qword_1EEF61898;
  if (!qword_1EEF61898)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A835C, &type metadata for ParticleAOBoxRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF61898);
  }
  return result;
}

void sub_1B1F8D668(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1B1F8D624();
    v7 = a3(a1, &type metadata for ParticleAOBoxRenderer.CodingKeys, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t storeEnumTagSinglePayload for ParticleAOBoxRenderer.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1B1F8D710 + 4 * byte_1B22A81C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1B1F8D744 + 4 * byte_1B22A81C0[v4]))();
}

uint64_t sub_1B1F8D744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F8D74C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1B1F8D754);
  return result;
}

uint64_t sub_1B1F8D760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1B1F8D768);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1B1F8D76C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1B1F8D774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParticleAOBoxRenderer.CodingKeys()
{
  return &type metadata for ParticleAOBoxRenderer.CodingKeys;
}

unint64_t sub_1B1F8D794()
{
  unint64_t result;

  result = qword_1EEF618A8;
  if (!qword_1EEF618A8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A8334, &type metadata for ParticleAOBoxRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF618A8);
  }
  return result;
}

unint64_t sub_1B1F8D7DC()
{
  unint64_t result;

  result = qword_1EEF618B0;
  if (!qword_1EEF618B0)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A82A4, &type metadata for ParticleAOBoxRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF618B0);
  }
  return result;
}

unint64_t sub_1B1F8D824()
{
  unint64_t result;

  result = qword_1EEF618B8;
  if (!qword_1EEF618B8)
  {
    result = MEMORY[0x1B5E23E74](&unk_1B22A82CC, &type metadata for ParticleAOBoxRenderer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1EEF618B8);
  }
  return result;
}

void sub_1B1F8D868(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8D8CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8D984 + 4 * byte_1B22A83B7[a2]))(1145656661);
}

uint64_t sub_1B1F8D984(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1145656661 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8DA98(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E61696461727269;
  else
    v3 = 0x65636E6169646172;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA00000000006563;
  if ((a2 & 1) != 0)
    v5 = 0x6E61696461727269;
  else
    v5 = 0x65636E6169646172;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006563;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F8DB40(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1702521203;
    else
      v3 = 0x656469727473;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1702521203;
      else
        v6 = 0x656469727473;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE600000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x74657366666FLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x74657366666FLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F8DC38(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8DC94(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8DCEC + 4 * byte_1B22A83C2[a2]))(0xD000000000000011);
}

uint64_t sub_1B1F8DCEC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x80000001B2328200)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F8DD8C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F8DDE4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8DED0 + 4 * byte_1B22A83CE[a2]))(0x617265744978616DLL);
}

uint64_t sub_1B1F8DED0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x617265744978616DLL && v1 == 0xEC0000006E6F6974)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8E01C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E656E6F706D6F63;
    else
      v3 = 0x657669746361;
    if (v2 == 1)
      v4 = 0xEA00000000007374;
    else
      v4 = 0xE600000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E656E6F706D6F63;
      else
        v6 = 0x657669746361;
      if (v5 == 1)
        v7 = 0xEA00000000007374;
      else
        v7 = 0xE600000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x7865646E69;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x7865646E69)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F8E12C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8E16C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8E210 + 4 * byte_1B22A83DC[a2]))(0x6E6F6974636E7566);
}

uint64_t sub_1B1F8E210(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F6974636E7566 && v1 == 0xED000073656D614ELL)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8E304(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xD000000000000010;
  v3 = 0x80000001B2328550;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0xD000000000000036;
    else
      v5 = 0xD000000000000021;
    if (v4 == 1)
      v6 = 0x80000001B2328570;
    else
      v6 = 0x80000001B23285B0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0xD000000000000010;
  v6 = 0x80000001B2328550;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v2 = 0xD000000000000036;
    else
      v2 = 0xD000000000000021;
    if (v7 == 1)
      v3 = 0x80000001B2328570;
    else
      v3 = 0x80000001B23285B0;
  }
LABEL_15:
  if (v5 == v2 && v6 == v3)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F8E400(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E6F6974636E7566;
    else
      v3 = 0x746E6174736E6F63;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xEF7365756C61765FLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E6F6974636E7566;
      else
        v6 = 0x746E6174736E6F63;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xEF7365756C61765FLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6C6562616CLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6C6562616CLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F8E528(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0xD000000000000011;
  if (v2)
    v4 = 0x80000001B23285E0;
  else
    v4 = 0x80000001B2328600;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B2328600;
  else
    v6 = 0x80000001B23285E0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F8E5D0(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000073;
  v3 = 0x656972617262696CLL;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x656E696C65706970;
    else
      v5 = 0xD000000000000010;
    if (v4 == 1)
      v6 = 0xE900000000000073;
    else
      v6 = 0x80000001B2328630;
    v7 = a2;
    if (!a2)
      goto LABEL_14;
  }
  else
  {
    v5 = 0x656972617262696CLL;
    v6 = 0xE900000000000073;
    v7 = a2;
    if (!a2)
      goto LABEL_14;
  }
  if (v7 == 1)
    v3 = 0x656E696C65706970;
  else
    v3 = 0xD000000000000010;
  if (v7 != 1)
    v2 = 0x80000001B2328630;
LABEL_14:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F8E6E0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000015;
  else
    v3 = 0x7368746170;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0x80000001B2328650;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000015;
  else
    v5 = 0x7368746170;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B2328650;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F8E784(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8E7D4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8E82C + 4 * byte_1B22A83E6[a2]))(25705);
}

uint64_t sub_1B1F8E82C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 25705 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8E8C8(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1752457584;
  else
    v3 = 0x6C6562616CLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1752457584;
  else
    v5 = 0x6C6562616CLL;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F8E960(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000065;
  v3 = 0x647574696C706D61;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x636E657571657266;
    else
      v5 = 0x6968536573616870;
    if (v4 == 1)
      v6 = 0xE900000000000079;
    else
      v6 = 0xEA00000000007466;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x647574696C706D61;
  v6 = 0xE900000000000065;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x636E657571657266;
    else
      v3 = 0x6968536573616870;
    if (v7 == 1)
      v2 = 0xE900000000000079;
    else
      v2 = 0xEA00000000007466;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F8EA80(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8EAD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8EBBC + 4 * byte_1B22A83F2[a2]))(0xD000000000000010);
}

uint64_t sub_1B1F8EBBC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001B23462D0)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8ED00(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0x65756C6176;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0x80000001B232DBF0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0x65756C6176;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B232DBF0;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F8EDA4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1936291937;
  else
    v3 = 0x656C676E61;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1936291937;
  else
    v5 = 0x656C676E61;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F8EE3C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8EE7C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8EEF8 + 4 * byte_1B22A83FE[a2]))(0xD000000000000011);
}

uint64_t sub_1B1F8EEF8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x80000001B23287A0)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F8EFBC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8EFFC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8F090 + 4 * byte_1B22A8407[a2]))(0x756F437475706E69);
}

uint64_t sub_1B1F8F090(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x756F437475706E69 && v1 == 0xEA0000000000746ELL)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8F168(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x7475626972747461;
  else
    v3 = 0x73726566667562;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xEA00000000007365;
  if ((a2 & 1) != 0)
    v5 = 0x7475626972747461;
  else
    v5 = 0x73726566667562;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000007365;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F8F210(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8F260(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8F2D4 + 4 * byte_1B22A8410[a2]))(0x7461746E6569726FLL);
}

uint64_t sub_1B1F8F2D4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7461746E6569726FLL && v1 == 0xEF65646F4D6E6F69)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F8F38C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8F3DC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8F440 + 4 * byte_1B22A8418[a2]))(0x6D75727463657073);
}

uint64_t sub_1B1F8F440(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6D75727463657073 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1B1F8F4E8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8F538(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8F59C + 4 * byte_1B22A8420[a2]))(0x647574696E67616DLL);
}

uint64_t sub_1B1F8F59C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x647574696E67616DLL && v1 == 0xEA00000000007365)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F8F644(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8F6A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8F71C + 4 * byte_1B22A8428[a2]))(0x4F746E65676E6174);
}

uint64_t sub_1B1F8F71C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x4F746E65676E6174 && v1 == 0xEA00000000007475)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F8F7E0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8F820(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8F8B4 + 4 * byte_1B22A8431[a2]))(0x6E6F6974636E7566);
}

uint64_t sub_1B1F8F8B4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F6974636E7566 && v1 == 0xED000073656D614ELL)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8F990(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6874615065646F6ELL;
  else
    v3 = 0x7465737361;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6874615065646F6ELL;
  else
    v5 = 0x7465737361;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F8FA30(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000010;
  else
    v3 = 0x6C65646F6DLL;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0x80000001B2328850;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000010;
  else
    v5 = 0x6C65646F6DLL;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B2328850;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F8FAD4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8FB1C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8FBEC + 4 * byte_1B22A843E[a2]))(0x6576697373696D65);
}

uint64_t sub_1B1F8FBEC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6576697373696D65 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8FD14(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 0x6563617073;
  else
    v2 = 0x6563726F66;
  if ((a2 & 1) != 0)
    v3 = 0x6563617073;
  else
    v3 = 0x6563726F66;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1B2229D24();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_1B1F8FD88(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F8FDD0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F8FE64 + 4 * byte_1B22A844C[a2]))(1935763810);
}

uint64_t sub_1B1F8FE64(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1935763810 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F8FF48(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xE900000000000079;
  v3 = 0x7469736E65746E69;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x73746E65747865;
    else
      v5 = 0xD000000000000010;
    if (v4 == 1)
      v6 = 0xE700000000000000;
    else
      v6 = 0x80000001B233B820;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x7469736E65746E69;
  v6 = 0xE900000000000079;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x73746E65747865;
    else
      v3 = 0xD000000000000010;
    if (v7 == 1)
      v2 = 0xE700000000000000;
    else
      v2 = 0x80000001B233B820;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F90060(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F900A0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F90164 + 4 * byte_1B22A8459[a2]))(0x6E6F6974636E7566);
}

uint64_t sub_1B1F90164(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F6974636E7566 && v1 == 0xED000073656D614ELL)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F90280(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x75517265746C6966;
    else
      v3 = 0x656E72654B78616DLL;
    if (v2 == 1)
      v4 = 0xED00007974696C61;
    else
      v4 = 0xEF7375696461526CLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x75517265746C6966;
      else
        v6 = 0x656E72654B78616DLL;
      if (v5 == 1)
        v7 = 0xED00007974696C61;
      else
        v7 = 0xEF7375696461526CLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x737569646172;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x737569646172)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F903C0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73746E65746E6F63;
  else
    v3 = 1701869940;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE800000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x73746E65746E6F63;
  else
    v5 = 1701869940;
  if ((a2 & 1) != 0)
    v6 = 0xE800000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F9045C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F904A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F904F0 + 4 * byte_1B22A8464[a2]))(2036427888);
}

uint64_t sub_1B1F904F0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 2036427888 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F90580(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F905C8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F9063C + 4 * byte_1B22A846C[a2]))(0x615265757161706FLL);
}

uint64_t sub_1B1F9063C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x615265757161706FLL && v1 == 0xEB000000006F6974)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F906F4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x746867696568;
    else
      v3 = 0x6874706564;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x746867696568;
      else
        v6 = 0x6874706564;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x6874646977;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x6874646977)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F907F4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x696669746E656469;
  else
    v3 = 0x7465737361;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEA00000000007265;
  if ((a2 & 1) != 0)
    v5 = 0x696669746E656469;
  else
    v5 = 0x7465737361;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000007265;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F90898(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1752457584;
    else
      v3 = 0x746E6572727563;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1752457584;
      else
        v6 = 0x746E6572727563;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x746365726964;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x746365726964)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F90998(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F909E8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F90A48 + 4 * byte_1B22A8474[a2]))(0x6570795461746164);
}

uint64_t sub_1B1F90A48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6570795461746164 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1B1F90AEC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7865646E69;
    else
      v3 = 1668506980;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE400000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7865646E69;
      else
        v6 = 1668506980;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE400000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701667182;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701667182)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F90BDC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6570795461746164;
    else
      v3 = 0x68747065447369;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6570795461746164;
      else
        v6 = 0x68747065447369;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701869940;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701869940)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F90CE4(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65727574786574;
  else
    v3 = 0x726566667562;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65727574786574;
  else
    v5 = 0x726566667562;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F90D84(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F90DE0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F90E40 + 4 * byte_1B22A847C[a2]))(0x636E657571657266);
}

uint64_t sub_1B1F90E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;

  v3 = v1 + 20;
  if (a1 == 0x636E657571657266 && v2 == v3)
    v4 = 1;
  else
    v4 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

void sub_1B1F90EE8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F90F44(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F90FB0 + 4 * byte_1B22A8485[a2]))(0x65746C69466E696DLL);
}

uint64_t sub_1B1F90FB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x65746C69466E696DLL && v2 == v1)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1B1F91068(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 1702131053;
    else
      v3 = 0x73706F6F6CLL;
    if (v2 == 1)
      v4 = 0xE400000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 1702131053;
      else
        v6 = 0x73706F6F6CLL;
      if (v5 == 1)
        v7 = 0xE400000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 2036427888;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 2036427888)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F91158(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x756F437475706E69;
    else
      v3 = 0x6567617373656DLL;
    if (v2 == 1)
      v4 = 0xEA0000000000746ELL;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x756F437475706E69;
      else
        v6 = 0x6567617373656DLL;
      if (v5 == 1)
        v7 = 0xEA0000000000746ELL;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE400000000000000;
    v3 = 1701667182;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE400000000000000;
  if (v3 != 1701667182)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F91268(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x737365636361;
    else
      v3 = 0xD00000000000001ALL;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0x80000001B23379F0;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x737365636361;
      else
        v6 = 0xD00000000000001ALL;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0x80000001B23379F0;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x6E6F697461636F6CLL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x6E6F697461636F6CLL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F91378(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65727574786574;
  else
    v3 = 1635017060;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x65727574786574;
  else
    v5 = 1635017060;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F91414(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F91470(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F914D0 + 4 * byte_1B22A848E[a2]))(0x6870726F6D616E61);
}

uint64_t sub_1B1F914D0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6870726F6D616E61 && v1 == 0xEA00000000006369)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F91578(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F915C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F91640 + 4 * byte_1B22A8499[a2]))(0x776F6C6C6579);
}

uint64_t sub_1B1F91640(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x776F6C6C6579 && v1 == v2)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1B1F91718(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC000000736E6F69;
  v3 = 0x7470697263736564;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x7365756C6176;
    else
      v5 = 0xD000000000000011;
    if (v4 == 1)
      v6 = 0xE600000000000000;
    else
      v6 = 0x80000001B2328900;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x7470697263736564;
  v6 = 0xEC000000736E6F69;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x7365756C6176;
    else
      v3 = 0xD000000000000011;
    if (v7 == 1)
      v2 = 0xE600000000000000;
    else
      v2 = 0x80000001B2328900;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
    v8 = 1;
  else
    v8 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F91830(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F9188C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F918E8 + 4 * byte_1B22A84A4[a2]))(0x6152776F64616873);
}

uint64_t sub_1B1F918E8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6152776F64616873 && v1 == 0xEC00000073756964)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F9198C(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  unint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  if (a1)
  {
    if (a1 == 1)
      v2 = 0x7865646E69;
    else
      v2 = 0x65756C6176;
    v3 = 0xE500000000000000;
    v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1)
        v5 = 0x7865646E69;
      else
        v5 = 0x65756C6176;
      v6 = 0xE500000000000000;
      if (v2 != v5)
        goto LABEL_15;
      goto LABEL_13;
    }
  }
  else
  {
    v3 = 0xE400000000000000;
    v2 = 1701667182;
    v4 = a2;
    if (a2)
      goto LABEL_6;
  }
  v6 = 0xE400000000000000;
  if (v2 != 1701667182)
  {
LABEL_15:
    v7 = sub_1B2229D24();
    goto LABEL_16;
  }
LABEL_13:
  if (v3 != v6)
    goto LABEL_15;
  v7 = 1;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F91A84(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7365756C6176;
    else
      v3 = 0x6576727563;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0xE500000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7365756C6176;
      else
        v6 = 0x6576727563;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE500000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x73656D6974;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x73656D6974)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F91B88(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F91BF4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F91C54 + 4 * byte_1B22A84AC[a2]))(0x6144656372756F73);
}

uint64_t sub_1B1F91C54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6144656372756F73 && v1 == 0xEA00000000006174)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F91D08(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000011;
  else
    v3 = 0x65676E6172;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0x80000001B2328980;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000011;
  else
    v5 = 0x65676E6172;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B2328980;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F91DAC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F91DF8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F91E3C + 4 * byte_1B22A84B4[a2]))(0x65676E615278);
}

uint64_t sub_1B1F91E3C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65676E615278 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F91EB4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F91F18(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F92000 + 4 * byte_1B22A84C0[a2]))(0x6C696261626F7270);
}

uint64_t sub_1B1F92000(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6C696261626F7270 && v1 == 0xEB00000000797469)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F92148(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x614D6C616D726F6ELL;
    else
      v3 = 0xD000000000000010;
    if (v2 == 1)
      v4 = 0xE900000000000070;
    else
      v4 = 0x80000001B2328A40;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x614D6C616D726F6ELL;
      else
        v6 = 0xD000000000000010;
      if (v5 == 1)
        v7 = 0xE900000000000070;
      else
        v7 = 0x80000001B2328A40;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x70614D726F6C6F63;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x70614D726F6C6F63)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F92268(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F922C0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F923AC + 4 * byte_1B22A84D1[a2]))(0x66664F7468676972);
}

uint64_t sub_1B1F923AC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x66664F7468676972 && v1 == 0xEB00000000746573)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F92500(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1B1F9254C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F925C8 + 4 * byte_1B22A84DE[a2]))(0x79747265706F7270);
}

uint64_t sub_1B1F925C8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x79747265706F7270 && v1 == 0xEC00000068746150)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F92684(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F926CC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F92738 + 4 * byte_1B22A84E6[a2]))(0x68637465727473);
}

uint64_t sub_1B1F92738(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x68637465727473 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F927E8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F92838(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F928B0 + 4 * byte_1B22A84EE[a2]))(0xD000000000000011);
}

uint64_t sub_1B1F928B0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x80000001B2328BB0)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F9296C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F929C4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F92A2C + 4 * byte_1B22A84F6[a2]))(0x65727574786574);
}

uint64_t sub_1B1F92A2C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65727574786574 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F92AD8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F92B3C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F92BC4 + 4 * byte_1B22A8500[a2]))(1701080941);
}

uint64_t sub_1B1F92BC4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701080941 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F92CA4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F92D08(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F92DF4 + 4 * byte_1B22A850F[a2]))(0x7369447375636F66);
}

uint64_t sub_1B1F92DF4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7369447375636F66 && v1 == 0xED000065636E6174)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F92F4C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F92FA8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F9303C + 4 * byte_1B22A851D[a2]))(0xD000000000000013);
}

uint64_t sub_1B1F9303C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000013 && v1 == 0x80000001B232D290)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F9311C(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F9315C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F931E4 + 4 * byte_1B22A8527[a2]))(0x65646F4D757063);
}

uint64_t sub_1B1F931E4(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x65646F4D757063 && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F932B4(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F932EC(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F93360 + 4 * byte_1B22A8531[a2]))(1701869940);
}

uint64_t sub_1B1F93360(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701869940 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F93418(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6163537375636F66;
  else
    v3 = 0x696F507375636F66;
  if (v2)
    v4 = 0xEA0000000000746ELL;
  else
    v4 = 0xEA0000000000656CLL;
  if ((a2 & 1) != 0)
    v5 = 0x6163537375636F66;
  else
    v5 = 0x696F507375636F66;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000656CLL;
  else
    v6 = 0xEA0000000000746ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F934C0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F93524(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F935B8 + 4 * byte_1B22A853B[a2]))(0x7365697469746E65);
}

uint64_t sub_1B1F935B8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7365697469746E65 && v1 == 0xE800000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F93698(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x746E756F63;
    else
      v3 = 0x614D6D6F646E6172;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xED00007269446E69;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x746E756F63;
      else
        v6 = 0x614D6D6F646E6172;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xED00007269446E69;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE300000000000000;
    v3 = 7498084;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v3 != 7498084)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B1F937B0(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0xD000000000000010;
  if (v2)
    v4 = 0x80000001B2328EA0;
  else
    v4 = 0x80000001B2328EC0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0xD000000000000010;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B2328EC0;
  else
    v6 = 0x80000001B2328EA0;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F93858(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6564496873656DLL;
  else
    v3 = 0x656449656E656373;
  if (v2)
    v4 = 0xEF7265696669746ELL;
  else
    v4 = 0xEE00726569666974;
  if ((a2 & 1) != 0)
    v5 = 0x6E6564496873656DLL;
  else
    v5 = 0x656449656E656373;
  if ((a2 & 1) != 0)
    v6 = 0xEE00726569666974;
  else
    v6 = 0xEF7265696669746ELL;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F93914(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F9395C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F939C0 + 4 * byte_1B22A8544[a2]))(0xD000000000000013);
}

uint64_t sub_1B1F939C0(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000013 && v1 == 0x80000001B2328C20)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F93A6C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6C6F687365726874;
  else
    v3 = 0x6C656E6E616863;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000064;
  if ((a2 & 1) != 0)
    v5 = 0x6C6F687365726874;
  else
    v5 = 0x6C656E6E616863;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000064;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F93B14(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F93B80(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F93BFC + 4 * byte_1B22A854D[a2]))(1668506980);
}

uint64_t sub_1B1F93BFC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1668506980 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F93CC4(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7365676465;
    else
      v3 = 0x6F666E4972657375;
    if (v2 == 1)
      v4 = 0xE500000000000000;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7365676465;
      else
        v6 = 0x6F666E4972657375;
      if (v5 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x7365646F6ELL;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x7365646F6ELL)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F93DCC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F93E0C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F93E84 + 4 * byte_1B22A8557[a2]))(0xD000000000000011);
}

uint64_t sub_1B1F93E84(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000011 && v1 == 0x80000001B23287A0)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F93F30(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F93F78(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F9404C + 4 * byte_1B22A8563[a2]))(0x7269446E69616DLL);
}

uint64_t sub_1B1F9404C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x7269446E69616DLL && v1 == 0xE700000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F94178(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F941D4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F94248 + 4 * byte_1B22A856F[a2]))(0x746E756F63);
}

uint64_t sub_1B1F94248(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x746E756F63 && v1 == 0xE500000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F94308(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F94364(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F94424 + 4 * byte_1B22A857C[a2]))(0x676E41726574756FLL);
}

uint64_t sub_1B1F94424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x676E41726574756FLL && v2 == v1)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

uint64_t sub_1B1F9453C(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6C6F687365726874;
    else
      v3 = 0x706D61736E776F64;
    if (v2 == 1)
      v4 = 0xE900000000000064;
    else
      v4 = 0xEC000000676E696CLL;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6C6F687365726874;
      else
        v6 = 0x706D61736E776F64;
      if (v5 == 1)
        v7 = 0xE900000000000064;
      else
        v7 = 0xEC000000676E696CLL;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE600000000000000;
    v3 = 0x656372756F73;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE600000000000000;
  if (v3 != 0x656372756F73)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F94664(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F946A4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F94794 + 4 * byte_1B22A858C[a2]))(0xD000000000000023);
}

uint64_t sub_1B1F94794(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000023 && v1 == 0x80000001B2329040)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F948D8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F94944(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F949AC + 4 * byte_1B22A8598[a2]))(0x736772416E69);
}

uint64_t sub_1B1F949AC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x736772416E69 && v1 == 0xE600000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F94A5C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1701869940;
  else
    v3 = 6580597;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1701869940;
  else
    v5 = 6580597;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

void sub_1B1F94AF0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F94B4C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F94BCC + 4 * byte_1B22A85A1[a2]))(0xD000000000000010);
}

uint64_t sub_1B1F94BCC(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001B2328850)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F94C98(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F94CE0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F94D98 + 4 * byte_1B22A85AD[a2]))(0xD000000000000012);
}

uint64_t sub_1B1F94D98(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000012 && v1 == 0x80000001B2329120)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F94EA0(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x7265746E6563;
    else
      v3 = 0x657A6953666C6168;
    if (v2 == 1)
      v4 = 0xE600000000000000;
    else
      v4 = 0xE800000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x7265746E6563;
      else
        v6 = 0x657A6953666C6168;
      if (v5 == 1)
        v7 = 0xE600000000000000;
      else
        v7 = 0xE800000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE700000000000000;
    v3 = 0x61746144666473;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v3 != 0x61746144666473)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F94FB0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F95020(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F95070 + 4 * byte_1B22A85B9[a2]))(1701080941);
}

uint64_t sub_1B1F95070(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1701080941 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void sub_1B1F950F8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F95138(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F951E8 + 4 * byte_1B22A85C4[a2]))(0x6E6F6974636E7566);
}

uint64_t sub_1B1F951E8(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x6E6F6974636E7566 && v1 == 0xED000073656D614ELL)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F952E8(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6E69646165727073;
    else
      v3 = 0x7469736F706D6F63;
    if (v2 == 1)
      v4 = 0xEE0065676E615267;
    else
      v4 = 0xEB000000006E6F69;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6E69646165727073;
      else
        v6 = 0x7469736F706D6F63;
      if (v5 == 1)
        v7 = 0xEE0065676E615267;
      else
        v7 = 0xEB000000006E6F69;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE500000000000000;
    v3 = 0x65676E6172;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE500000000000000;
  if (v3 != 0x65676E6172)
  {
LABEL_21:
    v8 = sub_1B2229D24();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_1B1F95420(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F9548C(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F95544 + 4 * byte_1B22A85D3[a2]))(0x616D5F6574697277);
}

uint64_t sub_1B1F95544(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0x616D5F6574697277 && v1 == 0xEA00000000006B73)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F95634(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x69746172656E6567;
  else
    v3 = 0x7865646E69;
  if (v2)
    v4 = 0xE500000000000000;
  else
    v4 = 0xEA00000000006E6FLL;
  if ((a2 & 1) != 0)
    v5 = 0x69746172656E6567;
  else
    v5 = 0x7865646E69;
  if ((a2 & 1) != 0)
    v6 = 0xEA00000000006E6FLL;
  else
    v6 = 0xE500000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F956D8(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 1701869940;
  else
    v2 = 1701667182;
  if ((a2 & 1) != 0)
    v3 = 1701869940;
  else
    v3 = 1701667182;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = sub_1B2229D24();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

void sub_1B1F95744(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1B1F957A8(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F95810 + 4 * byte_1B22A85E0[a2]))(0x4E74657070696E73);
}

uint64_t sub_1B1F95810(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x4E74657070696E73 && v2 == v1)
    v3 = 1;
  else
    v3 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3 & 1;
}

void sub_1B1F958C0(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1B1F95908(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1B1F95974 + 4 * byte_1B22A85E9[a2]))(0xD000000000000010);
}

uint64_t sub_1B1F95974(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 0xD000000000000010 && v1 == 0x80000001B2329300)
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

uint64_t sub_1B1F95A1C(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0xD000000000000012;
  else
    v3 = 0x73747865746E6F63;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0x80000001B23294E0;
  if ((a2 & 1) != 0)
    v5 = 0xD000000000000012;
  else
    v5 = 0x73747865746E6F63;
  if ((a2 & 1) != 0)
    v6 = 0x80000001B23294E0;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_1B2229D24();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_1B1F95AC4(char a1, char a2)
{
  char v2;

  if (*(_QWORD *)&aType_31[8 * a1] == *(_QWORD *)&aType_31[8 * a2])
    v2 = 1;
  else
    v2 = sub_1B2229D24();
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

